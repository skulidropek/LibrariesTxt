public class Microsoft.SqlServer.Management.Common.DataTransferEventArgs : EventArgs {
    private DataTransferEventType eventType;
    private string message;
    public DataTransferEventType DataTransferEventType { get; }
    public string Message { get; }
    internal DataTransferEventArgs(DataTransferEventType eventType, string message);
    public DataTransferEventType get_DataTransferEventType();
    public string get_Message();
}
public class Microsoft.SqlServer.Management.Common.DataTransferEventHandler : MulticastDelegate {
    public DataTransferEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTransferEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTransferEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.SqlServer.Management.Common.DataTransferEventType : Enum {
    public int value__;
    public static DataTransferEventType Progress;
    public static DataTransferEventType Information;
    public static DataTransferEventType Warning;
}
public class Microsoft.SqlServer.Management.Common.TransferException : SqlServerManagementException {
    internal TransferException(string message);
    internal TransferException(string message, Exception innerException);
    protected TransferException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.SqlServer.Management.Smo.AsyncStatus : object {
    private ExecutionStatus executionStatus;
    private Exception lastException;
    public ExecutionStatus ExecutionStatus { get; }
    public Exception LastException { get; }
    internal AsyncStatus(ExecutionStatus executionStatus, Exception lastException);
    public ExecutionStatus get_ExecutionStatus();
    public Exception get_LastException();
}
public class Microsoft.SqlServer.Management.Smo.Backup : BackupRestoreBase {
    private string m_BackupSetDescription;
    private string m_BackupSetName;
    private DateTime m_ExpirationDate;
    private bool m_FormatMedia;
    private bool m_Initialize;
    private string m_MediaDescription;
    private int m_RetainDays;
    private bool m_SkipTapeHeader;
    private bool copyOnly;
    private bool m_Incremental;
    private BackupDeviceList[] mirrors;
    private static int MIRRORS_COUNT;
    private string m_UndoFileName;
    private BackupCompressionOptions m_CompressionOption;
    private bool backupCompValueSetByUser;
    private BackupEncryptionOptions m_EncryptionOption;
    public BackupActionType Action { get; public set; }
    public string BackupSetDescription { get; public set; }
    public string BackupSetName { get; public set; }
    public DateTime ExpirationDate { get; public set; }
    public bool FormatMedia { get; public set; }
    public bool Initialize { get; public set; }
    public string MediaDescription { get; public set; }
    public int RetainDays { get; public set; }
    public bool SkipTapeHeader { get; public set; }
    public BackupTruncateLogType LogTruncation { get; public set; }
    public bool CopyOnly { get; public set; }
    public bool Incremental { get; public set; }
    [CLSCompliantAttribute("False")]
public BackupDeviceList[] Mirrors { get; public set; }
    public string UndoFileName { get; public set; }
    public BackupCompressionOptions CompressionOption { get; public set; }
    public BackupEncryptionOptions EncryptionOption { get; public set; }
    internal Backup(bool checkForHADRMaintPlan);
    private static Backup();
    private void ThrowIfUsingRemovedFeature(Server srv);
    public void SqlBackup(Server srv);
    public void SqlBackupAsync(Server srv);
    public string Script(Server targetServer);
    public BackupActionType get_Action();
    public void set_Action(BackupActionType value);
    public string get_BackupSetDescription();
    public void set_BackupSetDescription(string value);
    public string get_BackupSetName();
    public void set_BackupSetName(string value);
    public DateTime get_ExpirationDate();
    public void set_ExpirationDate(DateTime value);
    public bool get_FormatMedia();
    public void set_FormatMedia(bool value);
    public bool get_Initialize();
    public void set_Initialize(bool value);
    public string get_MediaDescription();
    public void set_MediaDescription(string value);
    public int get_RetainDays();
    public void set_RetainDays(int value);
    public bool get_SkipTapeHeader();
    public void set_SkipTapeHeader(bool value);
    public BackupTruncateLogType get_LogTruncation();
    public void set_LogTruncation(BackupTruncateLogType value);
    public bool get_CopyOnly();
    public void set_CopyOnly(bool value);
    public bool get_Incremental();
    public void set_Incremental(bool value);
    public BackupDeviceList[] get_Mirrors();
    public void set_Mirrors(BackupDeviceList[] value);
    public string get_UndoFileName();
    public void set_UndoFileName(string value);
    public BackupCompressionOptions get_CompressionOption();
    public void set_CompressionOption(BackupCompressionOptions value);
    public BackupEncryptionOptions get_EncryptionOption();
    public void set_EncryptionOption(BackupEncryptionOptions value);
}
public enum Microsoft.SqlServer.Management.Smo.BackupActionType : Enum {
    public int value__;
    public static BackupActionType Database;
    public static BackupActionType Files;
    public static BackupActionType Log;
}
public enum Microsoft.SqlServer.Management.Smo.BackupCompressionOptions : Enum {
    public int value__;
    public static BackupCompressionOptions Default;
    public static BackupCompressionOptions On;
    public static BackupCompressionOptions Off;
}
public class Microsoft.SqlServer.Management.Smo.BackupDeviceItem : object {
    private BackupMedia backupMedia;
    internal BackupMedia BackupMedia { get; }
    public string Name { get; public set; }
    public DeviceType DeviceType { get; public set; }
    public string CredentialName { get; public set; }
    public BackupDeviceItem(string name, DeviceType deviceType);
    public BackupDeviceItem(string name, DeviceType deviceType, string credentialName);
    internal BackupMedia get_BackupMedia();
    public string get_Name();
    public void set_Name(string value);
    public DeviceType get_DeviceType();
    public void set_DeviceType(DeviceType value);
    public string get_CredentialName();
    public void set_CredentialName(string value);
    internal DataTable DeviceHeader(Server server);
    internal DataTable DeviceLabel(Server server);
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(BackupDeviceItem r1, BackupDeviceItem r2);
    public static bool op_Inequality(BackupDeviceItem r1, BackupDeviceItem r2);
    public static bool op_LessThan(BackupDeviceItem r1, BackupDeviceItem r2);
    public static bool op_GreaterThan(BackupDeviceItem r1, BackupDeviceItem r2);
    internal static void CheckType(object obj, string operation, object thisptr);
}
[CLSCompliantAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.BackupDeviceList : List`1<BackupDeviceItem> {
    public BackupDeviceList(IEnumerable`1<BackupDeviceItem> collection);
    public BackupDeviceList(int capacity);
    public void AddDevice(string name, DeviceType deviceType);
}
public class Microsoft.SqlServer.Management.Smo.BackupEncryptionOptions : object {
    private bool noEncryption;
    private Nullable`1<BackupEncryptionAlgorithm> algorithm;
    private Nullable`1<BackupEncryptorType> encryptorType;
    private string encryptorName;
    public bool NoEncryption { get; public set; }
    public Nullable`1<BackupEncryptionAlgorithm> Algorithm { get; public set; }
    public Nullable`1<BackupEncryptorType> EncryptorType { get; public set; }
    public string EncryptorName { get; public set; }
    public BackupEncryptionOptions(BackupEncryptionAlgorithm algorithm, BackupEncryptorType encryptorType, string encryptorName);
    public bool get_NoEncryption();
    public void set_NoEncryption(bool value);
    public Nullable`1<BackupEncryptionAlgorithm> get_Algorithm();
    public void set_Algorithm(Nullable`1<BackupEncryptionAlgorithm> value);
    public Nullable`1<BackupEncryptorType> get_EncryptorType();
    public void set_EncryptorType(Nullable`1<BackupEncryptorType> value);
    public string get_EncryptorName();
    public void set_EncryptorName(string value);
    internal string Script();
    public static string GetAlgorithmString(BackupEncryptionAlgorithm algorithm);
    private static string GetEncryptorTypeString(BackupEncryptorType encryptorType);
}
public class Microsoft.SqlServer.Management.Smo.BackupRestoreBase : object {
    protected AsyncOperation currentAsyncOperation;
    protected BackupTruncateLogType m_LogTruncation;
    protected BackupActionType m_BackupAction;
    protected RestoreActionType m_RestoreAction;
    private Server server;
    private int blockSize;
    private int bufferCount;
    private int maxTransferSize;
    private bool m_retryFailedQueries;
    private bool processCompleted;
    private object syncRoot;
    private AsyncStatus asyncStatus;
    [CompilerGeneratedAttribute]
private PercentCompleteEventHandler PercentComplete;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler NextMedia;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler Complete;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler Information;
    private BackupDeviceList backupDevices;
    private StringCollection databaseFiles;
    private StringCollection databaseFileGroups;
    private string database;
    private string credentialName;
    private bool checksum;
    private bool continueAfterError;
    private string mediaName;
    private string options;
    internal bool m_checkForHADRMaintPlan;
    private bool m_ignoreReplicaType;
    private bool noRewind;
    internal bool NorewindValueSetByUser;
    private int percentCompleteNotification;
    private SqlSecureString password;
    private bool restart;
    private bool unloadTapeAfter;
    internal bool UnloadValueSetByUser;
    private bool m_NoRecovery;
    public int BlockSize { get; public set; }
    public int BufferCount { get; public set; }
    public int MaxTransferSize { get; public set; }
    public bool RetryFailedQueries { get; public set; }
    public AsyncStatus AsyncStatus { get; }
    [CLSCompliantAttribute("False")]
public BackupDeviceList Devices { get; }
    public StringCollection DatabaseFiles { get; }
    public StringCollection DatabaseFileGroups { get; }
    public string Database { get; public set; }
    public string CredentialName { get; public set; }
    public bool Checksum { get; public set; }
    public bool ContinueAfterError { get; public set; }
    public string MediaName { get; public set; }
    public string Options { get; public set; }
    internal static ServerVersion BackupUrlDeviceSupportedServerVersion { get; }
    internal bool IgnoreReplicaType { get; internal set; }
    public bool NoRewind { get; public set; }
    public int PercentCompleteNotification { get; public set; }
    public bool Restart { get; public set; }
    public bool UnloadTapeAfter { get; public set; }
    public bool NoRecovery { get; public set; }
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public int get_BufferCount();
    public void set_BufferCount(int value);
    public int get_MaxTransferSize();
    public void set_MaxTransferSize(int value);
    public bool get_RetryFailedQueries();
    public void set_RetryFailedQueries(bool value);
    private void SetServer(Server server);
    private void ResetServer();
    protected void ExecuteSql(Server server, StringCollection queries);
    protected void ExecuteSqlAsync(Server server, StringCollection queries);
    protected DataSet ExecuteSqlWithResults(Server server, string cmd);
    protected StringBuilder CheckForHADRMaintPlan(Server targetServer, StringBuilder sb);
    private StringBuilder GetMaintPlanTSQLForRightReplica(StringBuilder SqlStatement);
    public void Abort();
    public void Wait();
    private void OnExecuteNonQueryCompleted(object sender, ExecuteNonQueryCompletedEventArgs args);
    public AsyncStatus get_AsyncStatus();
    [CompilerGeneratedAttribute]
public void add_PercentComplete(PercentCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PercentComplete(PercentCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NextMedia(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NextMedia(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Complete(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Complete(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Information(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Information(ServerMessageEventHandler value);
    private void OnInfoMessage(object sender, ServerMessageEventArgs e);
    [CLSCompliantAttribute("False")]
protected void GetDevicesScript(StringBuilder query, BackupDeviceList devices, ServerVersion targetVersion);
    public BackupDeviceList get_Devices();
    public StringCollection get_DatabaseFiles();
    public StringCollection get_DatabaseFileGroups();
    public string get_Database();
    public void set_Database(string value);
    public string get_CredentialName();
    public void set_CredentialName(string value);
    public bool get_Checksum();
    public void set_Checksum(bool value);
    public bool get_ContinueAfterError();
    public void set_ContinueAfterError(bool value);
    public string get_MediaName();
    public void set_MediaName(string value);
    public string get_Options();
    public void set_Options(string value);
    internal static ServerVersion get_BackupUrlDeviceSupportedServerVersion();
    internal bool get_IgnoreReplicaType();
    internal void set_IgnoreReplicaType(bool value);
    public static bool IsBackupUrlDeviceSupported(ServerVersion currentServerVersion);
    public static bool IsBackupFileDeviceSupported(DatabaseEngineEdition serverEdition);
    public bool get_NoRewind();
    public void set_NoRewind(bool value);
    public int get_PercentCompleteNotification();
    public void set_PercentCompleteNotification(int value);
    public void SetPassword(string value);
    public void SetPassword(SecureString value);
    internal SqlSecureString GetPassword();
    public bool get_Restart();
    public void set_Restart(bool value);
    public bool get_UnloadTapeAfter();
    public void set_UnloadTapeAfter(bool value);
    protected bool IsStringValid(string s);
    internal bool IsStringValid(SqlSecureString s);
    public bool get_NoRecovery();
    public void set_NoRecovery(bool value);
    internal bool AddCredential(ServerVersion targetVersion, StringBuilder sb, bool withCommaStart, bool withCommaEnd);
    internal bool AddMediaPassword(ServerVersion targetVersion, StringBuilder sb, bool withCommaStart, bool withCommaEnd);
    internal bool AddPassword(ServerVersion targetVersion, StringBuilder sb, bool withCommaStart, bool withCommaEnd);
    internal static bool CheckNewBackupFile(Server server, string file);
    internal static bool IsBackupDeviceUrl(string url);
    internal static bool IsHttpsUrl(string url);
    internal static bool IsAzureBlobBackupRestore(BackupDeviceList devices);
}
public enum Microsoft.SqlServer.Management.Smo.BackupTruncateLogType : Enum {
    public int value__;
    public static BackupTruncateLogType TruncateOnly;
    public static BackupTruncateLogType NoTruncate;
    public static BackupTruncateLogType Truncate;
}
internal abstract class Microsoft.SqlServer.Management.Smo.BatchBlock : object {
    private string typeName;
    private int startIndex;
    private PrefetchObjectsFunc prefetchFunc;
    public string TypeName { get; }
    public int StartIndex { get; public set; }
    public string FilterConditionText { get; }
    internal BatchBlock(string typeName, PrefetchObjectsFunc prefetchFunc);
    public string get_TypeName();
    public int get_StartIndex();
    public void set_StartIndex(int value);
    public abstract virtual string get_FilterConditionText();
    public abstract virtual bool TryAdd(Prefetch prefetch, Urn urn);
    public void PrefetchObjects();
}
internal class Microsoft.SqlServer.Management.Smo.BatchFactory : object {
}
public class Microsoft.SqlServer.Management.Smo.CreateRestorePlanEventArgs : object {
    public string Status;
    public CreateRestorePlanEventArgs(string status);
}
public enum Microsoft.SqlServer.Management.Smo.DatabaseRecoveryState : Enum {
    public int value__;
    public static DatabaseRecoveryState WithRecovery;
    public static DatabaseRecoveryState WithNoRecovery;
    public static DatabaseRecoveryState WithStandBy;
}
public class Microsoft.SqlServer.Management.Smo.DatabaseRestorePlanner : object {
    private Server server;
    private string databaseName;
    public bool IncludeSnapshotBackups;
    [CompilerGeneratedAttribute]
private bool <RestoreToLastBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <RestoreToPointInTime>k__BackingField;
    private bool readHeaderFromMedia;
    private BackupDeviceCollection backupMediaList;
    [CompilerGeneratedAttribute]
private bool <BackupTailLog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TailLogWithNoRecovery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TailLogBackupFile>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateRestorePlanEventHandler CreateRestorePlanUpdates;
    private BackupSetCollection backupSets;
    private List`1<Exception> backupDeviceReadErrors;
    public Server Server { get; public set; }
    public string DatabaseName { get; public set; }
    public bool RestoreToLastBackup { get; public set; }
    public DateTime RestoreToPointInTime { get; public set; }
    public bool ReadHeaderFromMedia { get; public set; }
    public ICollection`1<BackupDeviceItem> BackupMediaList { get; }
    public bool BackupTailLog { get; public set; }
    public bool TailLogWithNoRecovery { get; public set; }
    public string TailLogBackupFile { get; public set; }
    public BackupSetCollection BackupSets { get; }
    public DatabaseRestorePlanner(Server server);
    public DatabaseRestorePlanner(Server server, string databaseName);
    public DatabaseRestorePlanner(Server server, string databaseName, DateTime pointInTime, string tailLogBackupFile);
    public Server get_Server();
    public void set_Server(Server value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public bool get_RestoreToLastBackup();
    [CompilerGeneratedAttribute]
public void set_RestoreToLastBackup(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_RestoreToPointInTime();
    [CompilerGeneratedAttribute]
public void set_RestoreToPointInTime(DateTime value);
    public bool get_ReadHeaderFromMedia();
    public void set_ReadHeaderFromMedia(bool value);
    public ICollection`1<BackupDeviceItem> get_BackupMediaList();
    [CompilerGeneratedAttribute]
public bool get_BackupTailLog();
    [CompilerGeneratedAttribute]
public void set_BackupTailLog(bool value);
    [CompilerGeneratedAttribute]
public bool get_TailLogWithNoRecovery();
    [CompilerGeneratedAttribute]
public void set_TailLogWithNoRecovery(bool value);
    [CompilerGeneratedAttribute]
public string get_TailLogBackupFile();
    [CompilerGeneratedAttribute]
public void set_TailLogBackupFile(string value);
    [CompilerGeneratedAttribute]
public void add_CreateRestorePlanUpdates(CreateRestorePlanEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CreateRestorePlanUpdates(CreateRestorePlanEventHandler value);
    public BackupSetCollection get_BackupSets();
    public RestorePlan CreateRestorePlan();
    public RestorePlan CreateRestorePlan(RestoreOptions ro);
    private List`1<BackupSet> createShilohPlan(BackupSetCollection backupsets);
    private void SelectBackupSetsForPlan(RestorePlan plan);
    public bool IsTailLogBackupPossible(string databaseName);
    public bool IsTailLogBackupWithNoRecoveryPossible(string databaseName);
    private Nullable`1<DateTime> GetLastRestoreDateTime();
    internal Nullable`1<DateTime> LogStartTime(BackupSet bkset);
    public Nullable`1<DateTime> TailLogStartTime();
    private void TakeTailLogBackup(RestorePlan plan);
    private void TakeTailLogRestore(RestorePlan plan);
    private bool IsBackupDeviceUrl();
    private BackupSetCollection GetBackupSetFromMSDB();
    public Exception GetBackupDeviceReadErrors();
    private BackupSetCollection GetBackupSetFromDevices();
    private List`1<BackupMedia> backupMediaObjectList(List`1<BackupDeviceItem> list);
    internal Guid GetMediaSetGuid(BackupDeviceItem bkDeviceItem);
    public bool RefreshBackupSets();
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.DatabaseRestorePlannerSR : object {
    public static CultureInfo Culture { get; public set; }
    public static string SelectingBackupSets { get; }
    public static string IdentifyingMediaSets { get; }
    public static string ReadingBackupSetHeader { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_SelectingBackupSets();
    public static string get_IdentifyingMediaSets();
    public static string get_ReadingBackupSetHeader();
    public static string IncompatibleObject(string type, string name);
}
public abstract class Microsoft.SqlServer.Management.Smo.DataTransferBase : TransferBase {
    internal bool destinationAnsiPadding;
    internal StringCollection compensationScript;
    [CompilerGeneratedAttribute]
private bool <LogTransferDumps>k__BackingField;
    public bool LogTransferDumps { get; public set; }
    public DataTransferBase(Database database);
    [CompilerGeneratedAttribute]
public bool get_LogTransferDumps();
    [CompilerGeneratedAttribute]
public void set_LogTransferDumps(bool value);
    internal TransferWriter GetScriptLoadedTransferWriter();
    private void ScriptCompensation(ScriptMaker scriptMaker);
    private void ProcessObjectList(UrnCollection urnList);
    private void ResetDatabaseForDestinationScripting(Nullable`1<double> modelSize, Dictionary`2<string, string> strAryOldDbFileNames, Dictionary`2<string, string> strAryOldLogFileNames, Dictionary`2<string, double> oldFileSizes, string fileStreamFolder);
    private Nullable`1<double> SetTargetServerInfoAndGetModelSize();
    private double GetModelDatabasePrimaryFileSize(Server destServer);
    private string SetupDatabaseForDestinationScripting(Nullable`1<double> modelSize, Dictionary`2& strAryOldDbFileNames, Dictionary`2& strAryOldLogFileNames, Dictionary`2& oldFileSizes);
    private ScriptMaker GetScriptMaker();
}
internal class Microsoft.SqlServer.Management.Smo.DependencyObject : object {
    private bool visited;
    private List`1<SqlSmoObject> ancestors;
    private List`1<SqlSmoObject> children;
    public bool Visited { get; public set; }
    public List`1<SqlSmoObject> Ancestors { get; public set; }
    public List`1<SqlSmoObject> Children { get; public set; }
    public void AddAncestor(SqlSmoObject obj);
    public void AddChild(SqlSmoObject obj);
    public bool get_Visited();
    public void set_Visited(bool value);
    public List`1<SqlSmoObject> get_Ancestors();
    public void set_Ancestors(List`1<SqlSmoObject> value);
    public List`1<SqlSmoObject> get_Children();
    public void set_Children(List`1<SqlSmoObject> value);
}
internal class Microsoft.SqlServer.Management.Smo.DependencyObjects : object {
    private Dictionary`2<SqlSmoObject, DependencyObject> nodeDict;
    private List`1<SqlSmoObject> dependencyList;
    public void Add(SqlSmoObject node, SqlSmoObject dependent);
    public void Add(SqlSmoObject node);
    public void Clear();
    public List`1<SqlSmoObject> GetDependencies();
    private SqlSmoObject StartNode();
    private void VisitNode(SqlSmoObject node);
}
public class Microsoft.SqlServer.Management.Smo.InvalidRestorePlanException : SmoException {
    internal InvalidRestorePlanException(object source, string reason);
}
internal class Microsoft.SqlServer.Management.Smo.LimitedBatchBlock : BatchBlock {
    private static int MaximumObjectsPerBatch;
    private List`1<int> ids;
    private string filterConditionText;
    public string FilterConditionText { get; }
    internal LimitedBatchBlock(string typeName, PrefetchObjectsFunc prefetchFunc);
    public virtual string get_FilterConditionText();
    public virtual bool TryAdd(Prefetch prefetch, Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.NextRestoreEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Continue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackupSetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackupSetDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DevicesName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public bool Continue { get; public set; }
    public string BackupSetName { get; private set; }
    public string BackupSetDescription { get; private set; }
    public string DevicesName { get; private set; }
    public int Count { get; private set; }
    public NextRestoreEventArgs(string backupSetName, string backupSetDescription, string deviceName, int count);
    [CompilerGeneratedAttribute]
public bool get_Continue();
    [CompilerGeneratedAttribute]
public void set_Continue(bool value);
    [CompilerGeneratedAttribute]
public string get_BackupSetName();
    [CompilerGeneratedAttribute]
private void set_BackupSetName(string value);
    [CompilerGeneratedAttribute]
public string get_BackupSetDescription();
    [CompilerGeneratedAttribute]
private void set_BackupSetDescription(string value);
    [CompilerGeneratedAttribute]
public string get_DevicesName();
    [CompilerGeneratedAttribute]
private void set_DevicesName(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
}
public class Microsoft.SqlServer.Management.Smo.NextRestoreEventHandler : MulticastDelegate {
    public NextRestoreEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NextRestoreEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NextRestoreEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Smo.PageRestorePlanner : object {
    private Database database;
    [CompilerGeneratedAttribute]
private string <TailLogBackupFile>k__BackingField;
    private List`1<SuspectPage> suspectPages;
    private Server Server { get; }
    public Database Database { get; public set; }
    public string TailLogBackupFile { get; public set; }
    public ICollection`1<SuspectPage> SuspectPages { get; }
    public PageRestorePlanner(Database database);
    public PageRestorePlanner(Database database, string tailLogBackupFileName);
    private Server get_Server();
    public Database get_Database();
    public void set_Database(Database value);
    [CompilerGeneratedAttribute]
public string get_TailLogBackupFile();
    [CompilerGeneratedAttribute]
public void set_TailLogBackupFile(string value);
    public ICollection`1<SuspectPage> get_SuspectPages();
    public RestorePlan CreateRestorePlan();
    private void AddTailLogBackupRestore(RestorePlan plan, BackupSetCollection backupSets);
    internal void CheckPageRestorePossible();
    private List`1<BackupSet> CreatePageRestorePlan(BackupSetCollection backupsets);
    internal void CheckDuplicateSuspectPages();
    public static List`1<SuspectPage> GetSuspectPages(Database database);
}
public class Microsoft.SqlServer.Management.Smo.PercentCompleteEventArgs : ServerMessageEventArgs {
    private int percent;
    private string message;
    public int Percent { get; }
    public string Message { get; }
    internal PercentCompleteEventArgs(SqlError error);
    internal PercentCompleteEventArgs(SqlError error, string message);
    public int get_Percent();
    public string get_Message();
}
public class Microsoft.SqlServer.Management.Smo.PercentCompleteEventHandler : MulticastDelegate {
    public PercentCompleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PercentCompleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PercentCompleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.SqlServer.Management.Smo.Prefetch : object {
    private Database database;
    private ScriptingPreferences scriptingPreferences;
    [CompilerGeneratedAttribute]
private PrefetchEventHandler BeforePrefetch;
    [CompilerGeneratedAttribute]
private PrefetchEventHandler AfterPrefetch;
    internal Database Database { get; }
    internal Server Server { get; }
    internal ScriptingPreferences ScriptingPreferences { get; }
    internal Prefetch(Database database, ScriptingOptions scriptingOptions);
    internal Database get_Database();
    internal Server get_Server();
    internal ScriptingPreferences get_ScriptingPreferences();
    public IEnumerable`1<Urn> EnumerateObjectUrns(IList`1<Urn> urns);
    [CompilerGeneratedAttribute]
internal void add_BeforePrefetch(PrefetchEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_BeforePrefetch(PrefetchEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_AfterPrefetch(PrefetchEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_AfterPrefetch(PrefetchEventHandler value);
    private void OnBeforePrefetchObjects(BatchBlock block);
    private void OnAfterPrefetchObjects(BatchBlock block);
    private BatchBlock CreateBatchBlock(string typeName);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_0(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_1(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_2(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_3(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_4(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_5(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_6(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_7(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_8(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_9(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_10(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_11(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_12(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_13(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_14(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_15(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_16(BatchBlock batchBlock);
    [CompilerGeneratedAttribute]
private void <CreateBatchBlock>b__19_17(BatchBlock batchBlock);
}
internal class Microsoft.SqlServer.Management.Smo.PrefetchEventArgs : EventArgs {
    private string smoType;
    private string filterConditionText;
    internal string Type { get; }
    internal string FilterConditionText { get; }
    internal PrefetchEventArgs(string smoType, string filterConditionText);
    internal string get_Type();
    internal string get_FilterConditionText();
}
internal class Microsoft.SqlServer.Management.Smo.PrefetchObjectsFunc : MulticastDelegate {
    public PrefetchObjectsFunc(object object, IntPtr method);
    public virtual void Invoke(BatchBlock batch);
    public virtual IAsyncResult BeginInvoke(BatchBlock batch, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.SqlServer.Management.Smo.RelocateFile : object {
    private string m_LogicalFileName;
    private string m_PhysicalFileName;
    public string LogicalFileName { get; public set; }
    public string PhysicalFileName { get; public set; }
    public RelocateFile(string logicalFileName, string physicalFileName);
    public string get_LogicalFileName();
    public void set_LogicalFileName(string value);
    public string get_PhysicalFileName();
    public void set_PhysicalFileName(string value);
}
public class Microsoft.SqlServer.Management.Smo.Restore : BackupRestoreBase {
    private bool m_bVerifySuccess;
    [CompilerGeneratedAttribute]
private BackupSet <BackupSet>k__BackingField;
    public VerifyCompleteEventHandler VerifyComplete;
    private bool m_Partial;
    private bool m_RestrictedUser;
    private int m_FileNumber;
    private ArrayList m_RelocateFiles;
    private bool m_KeepReplication;
    private bool m_KeepTemporalRetention;
    private string m_StandbyFile;
    private bool m_ReplaceDatabase;
    private string m_ToPointInTime;
    private string m_StopAtMarkName;
    private string m_StopAtMarkAfterDate;
    private string m_StopBeforeMarkName;
    private string m_StopBeforeMarkAfterDate;
    private List`1<SuspectPage> databasePages;
    private Int64[] offset;
    private bool clearSuspectPageTableAfterRestore;
    public BackupSet BackupSet { get; private set; }
    public bool Partial { get; public set; }
    public bool RestrictedUser { get; public set; }
    public int FileNumber { get; public set; }
    public ArrayList RelocateFiles { get; }
    public bool KeepReplication { get; public set; }
    public bool KeepTemporalRetention { get; public set; }
    public string StandbyFile { get; public set; }
    public bool ReplaceDatabase { get; public set; }
    public string ToPointInTime { get; public set; }
    public string StopAtMarkName { get; public set; }
    public string StopAtMarkAfterDate { get; public set; }
    public string StopBeforeMarkName { get; public set; }
    public string StopBeforeMarkAfterDate { get; public set; }
    public RestoreActionType Action { get; public set; }
    public List`1<SuspectPage> DatabasePages { get; }
    public Int64[] Offset { get; public set; }
    public bool ClearSuspectPageTableAfterRestore { get; public set; }
    public Restore(string DestinationDatabaseName, BackupSet backupSet);
    internal Restore(bool checkForHADRMaintPlan);
    [CompilerGeneratedAttribute]
public BackupSet get_BackupSet();
    [CompilerGeneratedAttribute]
private void set_BackupSet(BackupSet value);
    public bool SqlVerify(Server srv);
    public bool SqlVerify(Server srv, bool loadHistory);
    public bool SqlVerify(Server srv, String& errorMessage);
    public bool SqlVerify(Server srv, bool loadHistory, String& errorMessage);
    internal bool SqlVerifyWorker(Server srv, StringCollection queries, String& errorMessage);
    public bool SqlVerifyLatest(Server srv);
    public bool SqlVerifyLatest(Server srv, String& errorMessage);
    public bool SqlVerifyLatest(Server srv, SqlVerifyAction sqlVerifyAction);
    public bool SqlVerifyLatest(Server srv, SqlVerifyAction sqlVerifyAction, String& errorMessage);
    private string GetBackupTypeName(SqlVerifyAction sqlVerifyAction);
    public void SqlVerifyAsync(Server srv);
    public void SqlVerifyAsync(Server srv, bool loadHistory);
    private string ScriptVerify(Server srv, bool loadHistory);
    private string ScriptVerify(Server srv, bool loadHistory, bool ignoreFileNumber);
    private void OnBeforeSqlVerify(object sender, EventArgs args);
    private void OnInfoMessage(object sender, ServerMessageEventArgs e);
    private void OnExecuteSqlVerifyCompleted(object sender, ExecuteNonQueryCompletedEventArgs args);
    public DataTable ReadFileList(Server srv);
    public DataTable ReadMediaHeader(Server srv);
    public DataTable ReadBackupHeader(Server srv);
    public DataTable ReadSuspectPageTable(Server server);
    public void ClearSuspectPageTable(Server srv);
    private void GetDbFileFilter(StringBuilder selectStmt);
    public StringCollection Script(Server server);
    public void SqlRestore(Server srv);
    public void SqlRestoreAsync(Server srv);
    private void RemoveLastComma(StringBuilder sb);
    public bool get_Partial();
    public void set_Partial(bool value);
    public bool get_RestrictedUser();
    public void set_RestrictedUser(bool value);
    public int get_FileNumber();
    public void set_FileNumber(int value);
    public ArrayList get_RelocateFiles();
    public bool get_KeepReplication();
    public void set_KeepReplication(bool value);
    public bool get_KeepTemporalRetention();
    public void set_KeepTemporalRetention(bool value);
    public string get_StandbyFile();
    public void set_StandbyFile(string value);
    public bool get_ReplaceDatabase();
    public void set_ReplaceDatabase(bool value);
    public string get_ToPointInTime();
    public void set_ToPointInTime(string value);
    public string get_StopAtMarkName();
    public void set_StopAtMarkName(string value);
    public string get_StopAtMarkAfterDate();
    public void set_StopAtMarkAfterDate(string value);
    public string get_StopBeforeMarkName();
    public void set_StopBeforeMarkName(string value);
    public string get_StopBeforeMarkAfterDate();
    public void set_StopBeforeMarkAfterDate(string value);
    public RestoreActionType get_Action();
    public void set_Action(RestoreActionType value);
    public List`1<SuspectPage> get_DatabasePages();
    public Int64[] get_Offset();
    public void set_Offset(Int64[] value);
    public bool get_ClearSuspectPageTableAfterRestore();
    public void set_ClearSuspectPageTableAfterRestore(bool value);
}
public enum Microsoft.SqlServer.Management.Smo.RestoreActionType : Enum {
    public int value__;
    public static RestoreActionType Database;
    public static RestoreActionType Files;
    public static RestoreActionType OnlinePage;
    public static RestoreActionType OnlineFiles;
    public static RestoreActionType Log;
}
public class Microsoft.SqlServer.Management.Smo.RestoreOptions : object {
    private bool keepReplication;
    private bool keepTemporalRetention;
    private bool setRestrictedUser;
    [CompilerGeneratedAttribute]
private bool <ContinueAfterError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClearSuspectPageTableAfterRestore>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseRecoveryState <RecoveryState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandByFile>k__BackingField;
    private int blocksize;
    private int bufferCount;
    private int maxTransferSize;
    [CompilerGeneratedAttribute]
private bool <ReplaceDatabase>k__BackingField;
    private int percentCompleteNotification;
    public bool KeepReplication { get; public set; }
    public bool KeepTemporalRetention { get; public set; }
    public bool SetRestrictedUser { get; public set; }
    public bool ContinueAfterError { get; public set; }
    public bool ClearSuspectPageTableAfterRestore { get; public set; }
    public DatabaseRecoveryState RecoveryState { get; public set; }
    public string StandByFile { get; public set; }
    public int Blocksize { get; public set; }
    public int BufferCount { get; public set; }
    public int MaxTransferSize { get; public set; }
    public bool ReplaceDatabase { get; public set; }
    public int PercentCompleteNotification { get; public set; }
    public bool get_KeepReplication();
    public void set_KeepReplication(bool value);
    public bool get_KeepTemporalRetention();
    public void set_KeepTemporalRetention(bool value);
    public bool get_SetRestrictedUser();
    public void set_SetRestrictedUser(bool value);
    [CompilerGeneratedAttribute]
public bool get_ContinueAfterError();
    [CompilerGeneratedAttribute]
public void set_ContinueAfterError(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClearSuspectPageTableAfterRestore();
    [CompilerGeneratedAttribute]
public void set_ClearSuspectPageTableAfterRestore(bool value);
    [CompilerGeneratedAttribute]
public DatabaseRecoveryState get_RecoveryState();
    [CompilerGeneratedAttribute]
public void set_RecoveryState(DatabaseRecoveryState value);
    [CompilerGeneratedAttribute]
public string get_StandByFile();
    [CompilerGeneratedAttribute]
public void set_StandByFile(string value);
    public int get_Blocksize();
    public void set_Blocksize(int value);
    public int get_BufferCount();
    public void set_BufferCount(int value);
    public int get_MaxTransferSize();
    public void set_MaxTransferSize(int value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceDatabase();
    [CompilerGeneratedAttribute]
public void set_ReplaceDatabase(bool value);
    public int get_PercentCompleteNotification();
    public void set_PercentCompleteNotification(int value);
}
public class Microsoft.SqlServer.Management.Smo.RestorePlan : object {
    private RestoreOptions restoreOptions;
    private Server server;
    private string databaseName;
    private RestoreActionType restoreAction;
    [CompilerGeneratedAttribute]
private Backup <TailLogBackupOperation>k__BackingField;
    private List`1<Restore> restoreOperations;
    private AsyncStatus asyncStatus;
    [CompilerGeneratedAttribute]
private bool <CloseExistingConnections>k__BackingField;
    private int processCompleted;
    private int maxProcessCompleted;
    [CompilerGeneratedAttribute]
private PercentCompleteEventHandler PercentComplete;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler NextMedia;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler Complete;
    [CompilerGeneratedAttribute]
private ServerMessageEventHandler Information;
    [CompilerGeneratedAttribute]
private NextRestoreEventHandler NextRestore;
    private int executingRestoreOperationIndex;
    public Server Server { get; private set; }
    public string DatabaseName { get; public set; }
    public RestoreActionType RestoreAction { get; public set; }
    public Backup TailLogBackupOperation { get; public set; }
    public List`1<Restore> RestoreOperations { get; }
    public AsyncStatus AsyncStatus { get; }
    public bool CloseExistingConnections { get; public set; }
    public RestorePlan(Server server);
    public RestorePlan(Server server, string databaseName);
    public RestorePlan(Database database);
    public Server get_Server();
    private void set_Server(Server value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public RestoreActionType get_RestoreAction();
    public void set_RestoreAction(RestoreActionType value);
    [CompilerGeneratedAttribute]
public Backup get_TailLogBackupOperation();
    [CompilerGeneratedAttribute]
public void set_TailLogBackupOperation(Backup value);
    public List`1<Restore> get_RestoreOperations();
    public AsyncStatus get_AsyncStatus();
    [CompilerGeneratedAttribute]
public bool get_CloseExistingConnections();
    [CompilerGeneratedAttribute]
public void set_CloseExistingConnections(bool value);
    [CompilerGeneratedAttribute]
public void add_PercentComplete(PercentCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PercentComplete(PercentCompleteEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NextMedia(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NextMedia(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Complete(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Complete(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Information(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Information(ServerMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NextRestore(NextRestoreEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NextRestore(NextRestoreEventHandler value);
    public void Execute();
    private void RefreshOENode(string databaseName);
    public void ExecuteAsync();
    public StringCollection Script();
    private Nullable`1<DatabaseUserAccess> ScriptPreRestore(StringCollection script);
    private void ScriptRestore(StringCollection script);
    private void ScriptPostRestore(StringCollection script, Nullable`1<DatabaseUserAccess> dbUserAccess);
    public bool CanDropExistingConnections(string dbName);
    private void OnExecuteNonQueryCompleted(object sender, ExecuteNonQueryCompletedEventArgs args);
    private void OnInfoMessage(object sender, ServerMessageEventArgs e);
    public void Verify(bool checkBackupMediaIntegrity);
    public void CheckBackupSetsExistence();
    public void SetRestoreOptions(RestoreOptions restoreOptions);
    public void AddRestoreOperation(BackupSet backupSet);
    public void AddRestoreOperation(List`1<BackupSet> backupSets);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.SqlConnectionExtensions : object {
    [ExtensionAttribute]
public static int GetCommandTimeout(SqlConnection sqlConnection);
}
public enum Microsoft.SqlServer.Management.Smo.SqlVerifyAction : Enum {
    public int value__;
    public static SqlVerifyAction VerifyDatabase;
    public static SqlVerifyAction VerifyLog;
    public static SqlVerifyAction VerifyFile;
    public static SqlVerifyAction VerifyIncremental;
}
public class Microsoft.SqlServer.Management.Smo.SuspectPage : object {
    [CompilerGeneratedAttribute]
private int <FileID>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PageID>k__BackingField;
    public int FileID { get; private set; }
    public long PageID { get; private set; }
    public SuspectPage(int fileID, long pageID);
    [CompilerGeneratedAttribute]
public int get_FileID();
    [CompilerGeneratedAttribute]
private void set_FileID(int value);
    [CompilerGeneratedAttribute]
public long get_PageID();
    [CompilerGeneratedAttribute]
private void set_PageID(long value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Validate();
    public sealed virtual int CompareTo(SuspectPage other);
}
public class Microsoft.SqlServer.Management.Smo.Transfer : DataTransferBase {
    private string tempDtsPackageFilesDir;
    [CompilerGeneratedAttribute]
private int <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BulkCopyTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTransferEventHandler DataTransferEvent;
    public string TemporaryPackageDirectory { get; public set; }
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public Transfer(Database database);
    public string get_TemporaryPackageDirectory();
    public void set_TemporaryPackageDirectory(string value);
    protected static Urn[] ProcessDependencyChain(Server server, DependencyChainCollection dependencyChain, bool isDataOnly, bool isCreateOrder);
    private static void AddDependency(List`1<Urn> objectsInOrder, Dictionary`2<Urn, object> lookupTable, Dependency dependency);
    private static void FindCycles(DependencyChainCollection dependencyChain, Server server, bool isDataOnly, bool isCreateOrder, Dictionary`2<Dependency, Boolean[]> BrokenLinks);
    private static void BreakCycles(Dictionary`2<Dependency, Boolean[]> BrokenLinks);
    private static void MarkNodeForBreaking(Dependency[] cycle, Server server, bool isDataOnly, bool isCreateOrder, Dictionary`2<Dependency, Boolean[]> BrokenLinks);
    private static int GetNodeIdForWhichToBreakLink(int nodeId, int cycleLength, bool isCreateOrder);
    private static void Visit(Dependency dependency, List`1<Dependency> currentChain, Dictionary`2<Urn, object> visitedUrns, Server server, bool isDataOnly, bool isCreateOrder, Dictionary`2<Dependency, Boolean[]> BrokenLinks);
    private static void MarkFalseDependency(Dependency d1, Boolean[] b, bool isDataOnly);
    [CompilerGeneratedAttribute]
public int get_BatchSize();
    [CompilerGeneratedAttribute]
public void set_BatchSize(int value);
    [CompilerGeneratedAttribute]
public int get_BulkCopyTimeout();
    [CompilerGeneratedAttribute]
public void set_BulkCopyTimeout(int value);
    public void TransferData();
    private void UpdateWriter(TransferWriter writer);
    private void ExecuteStatements(SqlConnection destinationConnection, IEnumerable`1<string> statements, SqlTransaction transaction);
    private void SqlBulkCopyData(SqlConnection sourceConnection, SqlConnection destinationConnection, TransferWriter writer, SqlTransaction transaction);
    private string SetColumnNameAndMapping(Table table, SqlBulkCopy bulkCopy);
    [CompilerGeneratedAttribute]
public void add_DataTransferEvent(DataTransferEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DataTransferEvent(DataTransferEventHandler value);
    private void OnDataTransferProgress(DataTransferEventType dataTransferEventType, string message);
    private void DataTransferProgressEvent(string statement);
    private void DataTransferInformationEvent(string message);
    private string GetTempDir();
    private static StreamWriter GetStreamWriter(string fileName);
    private static T GetTempFile(string directory, string mask, String& fileName, Func`2<string, T> createFile);
    private void DumpWriterContent(string label, IEnumerable`1<string> strings, StreamWriter outfile, StreamWriter outfile2);
}
public abstract class Microsoft.SqlServer.Management.Smo.TransferBase : object {
    private Database database;
    private ArrayList objectList;
    private List`1<Urn> incompatibleObjects;
    [CompilerGeneratedAttribute]
private bool <CopyAllObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllFullTextCatalogs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllFullTextStopLists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllSearchPropertyLists>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllViews>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllStoredProcedures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllUserDefinedFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllUserDefinedDataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllUserDefinedTableTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllSecurityPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllPlanGuides>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllRules>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllPartitionSchemes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllPartitionFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllXmlSchemaCollections>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllSqlAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllUserDefinedAggregates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllUserDefinedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllSchemas>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllSynonyms>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllDatabaseTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllDatabaseScopedCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllExternalFileFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllExternalDataSources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllLogins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllExternalLanguages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllExternalLibraries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopySchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropDestinationObjectsFirst>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateTargetDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DestinationTranslateChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SourceTranslateChar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDestinationTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveLogins>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrefetchObjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllColumnMasterkey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllColumnEncryptionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyExternalTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllExternalStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopyAllExternalStreamingJob>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveDbo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DestinationLoginSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationDatabase>k__BackingField;
    private string destinationLogin;
    private SqlSecureString destinationPassword;
    private string destinationServer;
    [CompilerGeneratedAttribute]
private ServerConnection <DestinationServerConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDatabaseFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetLogFilePath>k__BackingField;
    private DatabaseFileMappingsDictionary databaseFileMappings;
    private Scripter scripter;
    public Database Database { get; public set; }
    public ArrayList ObjectList { get; public set; }
    public IList`1<Urn> IncompatibleObjects { get; }
    public bool CopyAllObjects { get; public set; }
    public bool CopyAllFullTextCatalogs { get; public set; }
    public bool CopyAllFullTextStopLists { get; public set; }
    public bool CopyAllSearchPropertyLists { get; public set; }
    public bool CopyAllTables { get; public set; }
    public bool CopyAllViews { get; public set; }
    public bool CopyAllStoredProcedures { get; public set; }
    public bool CopyAllUserDefinedFunctions { get; public set; }
    public bool CopyAllUserDefinedDataTypes { get; public set; }
    public bool CopyAllUserDefinedTableTypes { get; public set; }
    public bool CopyAllSecurityPolicies { get; public set; }
    public bool CopyAllPlanGuides { get; public set; }
    public bool CopyAllRules { get; public set; }
    public bool CopyAllDefaults { get; public set; }
    public bool CopyAllUsers { get; public set; }
    public bool CopyAllRoles { get; public set; }
    public bool CopyAllPartitionSchemes { get; public set; }
    public bool CopyAllPartitionFunctions { get; public set; }
    public bool CopyAllXmlSchemaCollections { get; public set; }
    public bool CopyAllSqlAssemblies { get; public set; }
    public bool CopyAllUserDefinedAggregates { get; public set; }
    public bool CopyAllUserDefinedTypes { get; public set; }
    public bool CopyAllSchemas { get; public set; }
    public bool CopyAllSynonyms { get; public set; }
    public bool CopyAllSequences { get; public set; }
    public bool CopyAllDatabaseTriggers { get; public set; }
    public bool CopyAllDatabaseScopedCredentials { get; public set; }
    public bool CopyAllExternalFileFormats { get; public set; }
    public bool CopyAllExternalDataSources { get; public set; }
    public bool CopyAllLogins { get; public set; }
    public bool CopyAllExternalLanguages { get; public set; }
    public bool CopyAllExternalLibraries { get; public set; }
    public bool CopySchema { get; public set; }
    public bool CopyData { get; public set; }
    public bool DropDestinationObjectsFirst { get; public set; }
    public bool CreateTargetDatabase { get; public set; }
    public bool DestinationTranslateChar { get; public set; }
    public bool SourceTranslateChar { get; public set; }
    public bool UseDestinationTransaction { get; public set; }
    public bool PreserveLogins { get; public set; }
    public bool PrefetchObjects { get; public set; }
    public bool CopyAllColumnMasterkey { get; public set; }
    public bool CopyAllColumnEncryptionKey { get; public set; }
    public bool CopyExternalTables { get; public set; }
    public bool CopyAllExternalStream { get; public set; }
    public bool CopyAllExternalStreamingJob { get; public set; }
    public bool PreserveDbo { get; public set; }
    public bool DestinationLoginSecure { get; public set; }
    public string DestinationDatabase { get; public set; }
    public string DestinationLogin { get; public set; }
    public string DestinationPassword { get; public set; }
    public string DestinationServer { get; public set; }
    public ServerConnection DestinationServerConnection { get; public set; }
    public string TargetDatabaseFilePath { get; public set; }
    public string TargetLogFilePath { get; public set; }
    public DatabaseFileMappingsDictionary DatabaseFileMappings { get; public set; }
    protected Scripter Scripter { get; }
    public ScriptingOptions Options { get; public set; }
    public TransferBase(Database database);
    public Database get_Database();
    public void set_Database(Database value);
    private void SetDatabase(Database database);
    public ArrayList get_ObjectList();
    public void set_ObjectList(ArrayList value);
    public IList`1<Urn> get_IncompatibleObjects();
    private void Init();
    [CompilerGeneratedAttribute]
public bool get_CopyAllObjects();
    [CompilerGeneratedAttribute]
public void set_CopyAllObjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllFullTextCatalogs();
    [CompilerGeneratedAttribute]
public void set_CopyAllFullTextCatalogs(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllFullTextStopLists();
    [CompilerGeneratedAttribute]
public void set_CopyAllFullTextStopLists(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllSearchPropertyLists();
    [CompilerGeneratedAttribute]
public void set_CopyAllSearchPropertyLists(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllTables();
    [CompilerGeneratedAttribute]
public void set_CopyAllTables(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllViews();
    [CompilerGeneratedAttribute]
public void set_CopyAllViews(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllStoredProcedures();
    [CompilerGeneratedAttribute]
public void set_CopyAllStoredProcedures(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllUserDefinedFunctions();
    [CompilerGeneratedAttribute]
public void set_CopyAllUserDefinedFunctions(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllUserDefinedDataTypes();
    [CompilerGeneratedAttribute]
public void set_CopyAllUserDefinedDataTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllUserDefinedTableTypes();
    [CompilerGeneratedAttribute]
public void set_CopyAllUserDefinedTableTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllSecurityPolicies();
    [CompilerGeneratedAttribute]
public void set_CopyAllSecurityPolicies(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllPlanGuides();
    [CompilerGeneratedAttribute]
public void set_CopyAllPlanGuides(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllRules();
    [CompilerGeneratedAttribute]
public void set_CopyAllRules(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllDefaults();
    [CompilerGeneratedAttribute]
public void set_CopyAllDefaults(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllUsers();
    [CompilerGeneratedAttribute]
public void set_CopyAllUsers(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllRoles();
    [CompilerGeneratedAttribute]
public void set_CopyAllRoles(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllPartitionSchemes();
    [CompilerGeneratedAttribute]
public void set_CopyAllPartitionSchemes(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllPartitionFunctions();
    [CompilerGeneratedAttribute]
public void set_CopyAllPartitionFunctions(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllXmlSchemaCollections();
    [CompilerGeneratedAttribute]
public void set_CopyAllXmlSchemaCollections(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllSqlAssemblies();
    [CompilerGeneratedAttribute]
public void set_CopyAllSqlAssemblies(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllUserDefinedAggregates();
    [CompilerGeneratedAttribute]
public void set_CopyAllUserDefinedAggregates(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllUserDefinedTypes();
    [CompilerGeneratedAttribute]
public void set_CopyAllUserDefinedTypes(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllSchemas();
    [CompilerGeneratedAttribute]
public void set_CopyAllSchemas(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllSynonyms();
    [CompilerGeneratedAttribute]
public void set_CopyAllSynonyms(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllSequences();
    [CompilerGeneratedAttribute]
public void set_CopyAllSequences(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllDatabaseTriggers();
    [CompilerGeneratedAttribute]
public void set_CopyAllDatabaseTriggers(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllDatabaseScopedCredentials();
    [CompilerGeneratedAttribute]
public void set_CopyAllDatabaseScopedCredentials(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllExternalFileFormats();
    [CompilerGeneratedAttribute]
public void set_CopyAllExternalFileFormats(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllExternalDataSources();
    [CompilerGeneratedAttribute]
public void set_CopyAllExternalDataSources(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllLogins();
    [CompilerGeneratedAttribute]
public void set_CopyAllLogins(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllExternalLanguages();
    [CompilerGeneratedAttribute]
public void set_CopyAllExternalLanguages(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllExternalLibraries();
    [CompilerGeneratedAttribute]
public void set_CopyAllExternalLibraries(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopySchema();
    [CompilerGeneratedAttribute]
public void set_CopySchema(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyData();
    [CompilerGeneratedAttribute]
public void set_CopyData(bool value);
    [CompilerGeneratedAttribute]
public bool get_DropDestinationObjectsFirst();
    [CompilerGeneratedAttribute]
public void set_DropDestinationObjectsFirst(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateTargetDatabase();
    [CompilerGeneratedAttribute]
public void set_CreateTargetDatabase(bool value);
    [CompilerGeneratedAttribute]
public bool get_DestinationTranslateChar();
    [CompilerGeneratedAttribute]
public void set_DestinationTranslateChar(bool value);
    [CompilerGeneratedAttribute]
public bool get_SourceTranslateChar();
    [CompilerGeneratedAttribute]
public void set_SourceTranslateChar(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseDestinationTransaction();
    [CompilerGeneratedAttribute]
public void set_UseDestinationTransaction(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveLogins();
    [CompilerGeneratedAttribute]
public void set_PreserveLogins(bool value);
    [CompilerGeneratedAttribute]
public bool get_PrefetchObjects();
    [CompilerGeneratedAttribute]
public void set_PrefetchObjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllColumnMasterkey();
    [CompilerGeneratedAttribute]
public void set_CopyAllColumnMasterkey(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllColumnEncryptionKey();
    [CompilerGeneratedAttribute]
public void set_CopyAllColumnEncryptionKey(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyExternalTables();
    [CompilerGeneratedAttribute]
public void set_CopyExternalTables(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllExternalStream();
    [CompilerGeneratedAttribute]
public void set_CopyAllExternalStream(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopyAllExternalStreamingJob();
    [CompilerGeneratedAttribute]
public void set_CopyAllExternalStreamingJob(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveDbo();
    [CompilerGeneratedAttribute]
public void set_PreserveDbo(bool value);
    [CompilerGeneratedAttribute]
public bool get_DestinationLoginSecure();
    [CompilerGeneratedAttribute]
public void set_DestinationLoginSecure(bool value);
    [CompilerGeneratedAttribute]
public string get_DestinationDatabase();
    [CompilerGeneratedAttribute]
public void set_DestinationDatabase(string value);
    public string get_DestinationLogin();
    public void set_DestinationLogin(string value);
    public string get_DestinationPassword();
    public void set_DestinationPassword(string value);
    public string get_DestinationServer();
    public void set_DestinationServer(string value);
    [CompilerGeneratedAttribute]
public ServerConnection get_DestinationServerConnection();
    [CompilerGeneratedAttribute]
public void set_DestinationServerConnection(ServerConnection value);
    [CompilerGeneratedAttribute]
public string get_TargetDatabaseFilePath();
    [CompilerGeneratedAttribute]
public void set_TargetDatabaseFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetLogFilePath();
    [CompilerGeneratedAttribute]
public void set_TargetLogFilePath(string value);
    public DatabaseFileMappingsDictionary get_DatabaseFileMappings();
    public void set_DatabaseFileMappings(DatabaseFileMappingsDictionary value);
    protected Scripter get_Scripter();
    public ScriptingOptions get_Options();
    public void set_Options(ScriptingOptions value);
    protected void SetTargetServerInfo();
    protected ServerConnection GetDestinationServerConnection();
    public StringCollection ScriptTransfer();
    public IEnumerable`1<string> EnumScriptTransfer();
    private void ScripterOnScriptingError(object sender, ScriptingErrorEventArgs e);
    public UrnCollection EnumObjects();
    public UrnCollection EnumObjects(bool ordered);
    internal DependencyCollection GetObjectList(bool ordered);
    private HashSet`1<Urn> DiscoverDependencies(HashSet`1<Urn> depDiscInputList);
    private void AddWithoutDependencyDiscovery(DependencyCollection depList, DependencyCollectionNode node);
    private void AddWithoutDependencyDiscoveryCollection(DependencyCollection depList, HashSet`1<Urn> nonDepHashSet);
    private void AddDiscoveryUnsupportedObjects(HashSet`1<Urn> list, HashSet`1<Urn> nonDepDiscList);
    private void PrefetchSecurityObjects(Dictionary`2<Type, StringCollection> originalDefaultFields);
    private void AddSecurityObjectsInOrder(DependencyCollection depList, Dictionary`2<string, HashSet`1<Urn>> nonDepListDictionary);
    private void AddSecurityObjectsWithoutOrder(DependencyCollection depList, Dictionary`2<string, HashSet`1<Urn>> nonDepListDictionary);
    private void AddDiscoverableObjects(HashSet`1<Urn> depDiscInputList, Dictionary`2<Type, StringCollection> originalDefaultFields);
    private void AddAllObjects(ICollection`1<Urn> List, SmoCollectionBase collection);
    private void AddAllObjects(ICollection`1<Urn> List, SmoCollectionBase collection, bool copyAll, Action`1<ScriptingPreferences> prefetch, Dictionary`2<Type, StringCollection> originalDefaultFields, String[] fields);
    private void AddAllNonSystemObjects(ICollection`1<Urn> List, SmoCollectionBase collection, Func`2<T, bool> filterLedgerObjects);
    private void AddAllNonSystemObjects(ICollection`1<Urn> List, SmoCollectionBase collection, bool copyAll, Action`1<ScriptingPreferences> prefetch, Dictionary`2<Type, StringCollection> originalDefaultFields, Func`2<T, bool> filterLedgerObjects, String[] fields);
    private bool IsSupportedObject(ScriptingPreferences sp);
    private void SeparateDiscoverySupportedObjects(HashSet`1<Urn> depDiscInputList, HashSet`1<Urn> nonDepDiscList, Dictionary`2<string, HashSet`1<Urn>> nonDepListDictionary, HashSet`1<Urn> nonDepList);
    private void CheckDownLevelScripting(DependencyCollection depList, ScriptingPreferences preferences);
    private bool CanScriptCrossPlatform(Urn urn, ScriptingPreferences preferences);
    private void TreeTraversal(DependencyTreeNode node, HashSet`1<Urn> visitedUrns);
    private void SetDefaultInitFields(Dictionary`2<Type, StringCollection> originalDefaultFields, Type type, String[] fields);
    private void RestoreDefaultInitFields(Dictionary`2<Type, StringCollection> originalDefaultFields);
    private bool CanScriptDownlevel(Urn urn, SqlServerVersionInternal targetVersion);
    private bool IsUnsupportedType(SqlDataType type, SqlServerVersionInternal targetVersion);
    private bool ContainsUnsupportedType(ParameterCollectionBase parms, SqlServerVersionInternal targetVersion);
    private bool ContainsUnsupportedType(ColumnCollection cols, SqlServerVersionInternal targetVersion);
    private DependencyCollection GetDependencyOrderedCollection(HashSet`1<Urn> transferSet);
    public void add_DiscoveryProgress(ProgressReportEventHandler value);
    public void remove_DiscoveryProgress(ProgressReportEventHandler value);
    public void add_ScriptingProgress(ProgressReportEventHandler value);
    public void remove_ScriptingProgress(ProgressReportEventHandler value);
    public void add_ScriptingError(ScriptingErrorEventHandler value);
    public void remove_ScriptingError(ScriptingErrorEventHandler value);
}
internal class Microsoft.SqlServer.Management.Smo.TransferWriter : object {
    private TransferBase transfer;
    private ScriptMaker scriptMaker;
    [CompilerGeneratedAttribute]
private List`1<string> <Prologue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Epilogue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PreTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PostTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Urn> <Tables>k__BackingField;
    private bool dataScriptingStarted;
    private int orderedUrns;
    private bool DropMode;
    private bool originalExistenceCheck;
    private IEnumerable`1<string> lastScriptFragment;
    private Dictionary`2<string, WriteToCollection> actions;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    public List`1<string> Prologue { get; private set; }
    public List`1<string> Epilogue { get; private set; }
    public List`1<string> PreTransaction { get; private set; }
    public List`1<string> PostTransaction { get; private set; }
    public List`1<Urn> Tables { get; private set; }
    private string Header { get; public set; }
    public TransferWriter(TransferBase transfer, ScriptMaker scriptMaker);
    [CompilerGeneratedAttribute]
public List`1<string> get_Prologue();
    [CompilerGeneratedAttribute]
private void set_Prologue(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Epilogue();
    [CompilerGeneratedAttribute]
private void set_Epilogue(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PreTransaction();
    [CompilerGeneratedAttribute]
private void set_PreTransaction(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PostTransaction();
    [CompilerGeneratedAttribute]
private void set_PostTransaction(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<Urn> get_Tables();
    [CompilerGeneratedAttribute]
private void set_Tables(List`1<Urn> value);
    private void InitializeActions();
    private bool HandleSecurityObject(ObjectScriptingEventArgs e, List`1& collection);
    private bool HandleLogin(ObjectScriptingEventArgs e, List`1& collection);
    private bool HandleFullTextObject(ObjectScriptingEventArgs e, List`1& collection);
    private bool HandleEndPoint(ObjectScriptingEventArgs e, List`1& collection);
    private bool HandleDatabase(ObjectScriptingEventArgs e, List`1& collection);
    private bool HandleExtendedProperty(ObjectScriptingEventArgs e, List`1& collection);
    private void scriptMaker_ScriptingProgress(object sender, ScriptingProgressEventArgs e);
    private void scriptMaker_ObjectScripting(object sender, ObjectScriptingEventArgs e);
    private void HandleScriptingEvent(ObjectScriptingEventArgs e);
    private void CheckDropCreateState(ObjectScriptingEventArgs e);
    public sealed virtual void ScriptObject(IEnumerable`1<string> script, Urn obj);
    public sealed virtual void ScriptData(IEnumerable`1<string> dataScript, Urn table);
    public sealed virtual void ScriptContext(string databaseContext, Urn obj);
    [CompilerGeneratedAttribute]
private string get_Header();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Header(string value);
    internal void SetEvents();
    internal void ResetEvents();
}
internal class Microsoft.SqlServer.Management.Smo.UnlimitedBatchBlock : BatchBlock {
    public string FilterConditionText { get; }
    internal UnlimitedBatchBlock(string typeName, PrefetchObjectsFunc prefetchFunc);
    public virtual string get_FilterConditionText();
    public virtual bool TryAdd(Prefetch prefetch, Urn urn);
}
public class Microsoft.SqlServer.Management.Smo.VerifyCompleteEventArgs : EventArgs {
    private bool verifySuccess;
    public bool VerifySuccess { get; }
    internal VerifyCompleteEventArgs(bool verifySuccess);
    public bool get_VerifySuccess();
}
public class Microsoft.SqlServer.Management.Smo.VerifyCompleteEventHandler : MulticastDelegate {
    public VerifyCompleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, VerifyCompleteEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, VerifyCompleteEventArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.SqlServer.SmoExtended.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.SmoExtended.NetCoreHelpers : object {
    public static string UriSchemaHttps;
    public static string UriSchemaHttp;
    private static NetCoreHelpers();
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    public static Assembly LoadAssembly(string assemblyName);
    public static IntPtr ConvertSecureStringToBSTR(SecureString ss);
    [ExtensionAttribute]
public static int StringCompare(string firstString, string secondString, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static string StringToUpper(string str, CultureInfo culture);
    public static CultureInfo GetNewCultureInfo(int lcid);
    public static void ZeroFreeBSTR(IntPtr ps);
}
