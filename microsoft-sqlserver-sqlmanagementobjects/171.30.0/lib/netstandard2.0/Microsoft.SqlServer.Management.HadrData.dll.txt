public enum Microsoft.SqlServer.Management.HadrData.AGListenerNetworkMode : Enum {
    public int value__;
    public static AGListenerNetworkMode DHCP;
    public static AGListenerNetworkMode StaticIP;
}
internal static class Microsoft.SqlServer.Management.HadrData.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
public class Microsoft.SqlServer.Management.HadrData.AvailabilityGroupData : object {
    [CompilerGeneratedAttribute]
private AvailabilityGroupListenerConfiguration <AvailabilityGroupListener>k__BackingField;
    [CompilerGeneratedAttribute]
private Server <PrimaryServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityGroupClusterType <ClusterType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequiredSynchronizedSecondariesToCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackupLocationInWindowsFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackupLocationInLinuxFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PrimaryDatabaseData> <ExistingAvailabilityDatabases>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PrimaryDatabaseData> <NewAvailabilityDatabases>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AvailabilityGroupReplica> <AvailabilityGroupReplicas>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityGroupAutomatedBackupPreference <BackupPreference>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBasic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDatabaseHealthTriggerOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDtcSupportEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContained>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReuseSystemDatabases>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSynchronizationOption <PerformDataSynchronization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityObjectState <AvailabilityGroupState>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityGroup <SqlAvailabilityGroup>k__BackingField;
    public AvailabilityGroupListenerConfiguration AvailabilityGroupListener { get; public set; }
    public Server PrimaryServer { get; private set; }
    public string GroupName { get; public set; }
    public AvailabilityGroupClusterType ClusterType { get; public set; }
    public int RequiredSynchronizedSecondariesToCommit { get; public set; }
    public string BackupLocationInWindowsFormat { get; public set; }
    public string BackupLocationInLinuxFormat { get; public set; }
    public List`1<PrimaryDatabaseData> ExistingAvailabilityDatabases { get; private set; }
    public List`1<PrimaryDatabaseData> NewAvailabilityDatabases { get; private set; }
    public IList`1<AvailabilityGroupReplica> AvailabilityGroupReplicas { get; public set; }
    public IEnumerable`1<AvailabilityGroupReplica> Secondaries { get; }
    public IEnumerable`1<AvailabilityGroupReplica> DataSecondaries { get; }
    public AvailabilityGroupAutomatedBackupPreference BackupPreference { get; public set; }
    public bool IsBasic { get; public set; }
    public bool IsDatabaseHealthTriggerOn { get; public set; }
    public bool IsDtcSupportEnabled { get; public set; }
    public bool IsContained { get; public set; }
    public bool ReuseSystemDatabases { get; public set; }
    public DataSynchronizationOption PerformDataSynchronization { get; public set; }
    public bool WillPerformBackupRestore { get; }
    public bool WillPerformDatabaseJoin { get; }
    public bool WillPerformDatabaseInitialization { get; }
    public bool WillPerformAutomaticSeeding { get; }
    public string ClusterName { get; public set; }
    public bool IsPrimaryInQuorum { get; }
    public AvailabilityObjectState AvailabilityGroupState { get; private set; }
    public bool IsConnectedToPrimary { get; }
    public AvailabilityGroup SqlAvailabilityGroup { get; public set; }
    public bool IsCrossPlatform { get; }
    public AvailabilityGroupData(ServerConnection primaryConnection);
    [CompilerGeneratedAttribute]
public AvailabilityGroupListenerConfiguration get_AvailabilityGroupListener();
    [CompilerGeneratedAttribute]
public void set_AvailabilityGroupListener(AvailabilityGroupListenerConfiguration value);
    [CompilerGeneratedAttribute]
public Server get_PrimaryServer();
    [CompilerGeneratedAttribute]
private void set_PrimaryServer(Server value);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public AvailabilityGroupClusterType get_ClusterType();
    [CompilerGeneratedAttribute]
public void set_ClusterType(AvailabilityGroupClusterType value);
    [CompilerGeneratedAttribute]
public int get_RequiredSynchronizedSecondariesToCommit();
    [CompilerGeneratedAttribute]
public void set_RequiredSynchronizedSecondariesToCommit(int value);
    [CompilerGeneratedAttribute]
public string get_BackupLocationInWindowsFormat();
    [CompilerGeneratedAttribute]
public void set_BackupLocationInWindowsFormat(string value);
    [CompilerGeneratedAttribute]
public string get_BackupLocationInLinuxFormat();
    [CompilerGeneratedAttribute]
public void set_BackupLocationInLinuxFormat(string value);
    [CompilerGeneratedAttribute]
public List`1<PrimaryDatabaseData> get_ExistingAvailabilityDatabases();
    [CompilerGeneratedAttribute]
private void set_ExistingAvailabilityDatabases(List`1<PrimaryDatabaseData> value);
    [CompilerGeneratedAttribute]
public List`1<PrimaryDatabaseData> get_NewAvailabilityDatabases();
    [CompilerGeneratedAttribute]
private void set_NewAvailabilityDatabases(List`1<PrimaryDatabaseData> value);
    [CompilerGeneratedAttribute]
public IList`1<AvailabilityGroupReplica> get_AvailabilityGroupReplicas();
    [CompilerGeneratedAttribute]
public void set_AvailabilityGroupReplicas(IList`1<AvailabilityGroupReplica> value);
    public IEnumerable`1<AvailabilityGroupReplica> get_Secondaries();
    public IEnumerable`1<AvailabilityGroupReplica> get_DataSecondaries();
    [CompilerGeneratedAttribute]
public AvailabilityGroupAutomatedBackupPreference get_BackupPreference();
    [CompilerGeneratedAttribute]
public void set_BackupPreference(AvailabilityGroupAutomatedBackupPreference value);
    [CompilerGeneratedAttribute]
public bool get_IsBasic();
    [CompilerGeneratedAttribute]
public void set_IsBasic(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDatabaseHealthTriggerOn();
    [CompilerGeneratedAttribute]
public void set_IsDatabaseHealthTriggerOn(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDtcSupportEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDtcSupportEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsContained();
    [CompilerGeneratedAttribute]
public void set_IsContained(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReuseSystemDatabases();
    [CompilerGeneratedAttribute]
public void set_ReuseSystemDatabases(bool value);
    [CompilerGeneratedAttribute]
public DataSynchronizationOption get_PerformDataSynchronization();
    [CompilerGeneratedAttribute]
public void set_PerformDataSynchronization(DataSynchronizationOption value);
    public bool get_WillPerformBackupRestore();
    public bool get_WillPerformDatabaseJoin();
    public bool get_WillPerformDatabaseInitialization();
    public bool get_WillPerformAutomaticSeeding();
    [CompilerGeneratedAttribute]
public string get_ClusterName();
    [CompilerGeneratedAttribute]
public void set_ClusterName(string value);
    public bool get_IsPrimaryInQuorum();
    [CompilerGeneratedAttribute]
public AvailabilityObjectState get_AvailabilityGroupState();
    [CompilerGeneratedAttribute]
private void set_AvailabilityGroupState(AvailabilityObjectState value);
    public bool HasViewServerStatePermission(Server server);
    public bool get_IsConnectedToPrimary();
    [CompilerGeneratedAttribute]
public AvailabilityGroup get_SqlAvailabilityGroup();
    [CompilerGeneratedAttribute]
public void set_SqlAvailabilityGroup(AvailabilityGroup value);
    public bool get_IsCrossPlatform();
    public IEnumerable`1<KeyValuePair`2<string, bool>> GetLoginNames(AvailabilityGroupReplica replica);
    public void GetPrimaryTotalDataFileAndLogSize(Double& totalDataFilesSize, Double& totalLogFilesSize);
    public void AddAvailabilityDatabase(PrimaryDatabaseData database);
    public void AddExistingAvailabilityDatabase(PrimaryDatabaseData database);
    public string GetBackupPathForServer(Server server);
    private IEnumerable`1<KeyValuePair`2<Byte[], string>> GetUniqueServiceAccountSids(AvailabilityGroupReplica replica);
    private static bool HasPermissionOnServer(Server server, string permissionName);
    [CompilerGeneratedAttribute]
private bool <get_IsCrossPlatform>b__100_0(AvailabilityGroupReplica replica);
}
public class Microsoft.SqlServer.Management.HadrData.AvailabilityGroupListenerConfiguration : object {
    private int listenerPortNumber;
    private List`1<AvailabilityGroupListenerSubnet> subnetConfigurations;
    [CompilerGeneratedAttribute]
private AGListenerNetworkMode <NetworkMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListenerName>k__BackingField;
    public int ListenerPortNumber { get; public set; }
    public AGListenerNetworkMode NetworkMode { get; public set; }
    public string ListenerName { get; public set; }
    public IList`1<AvailabilityGroupListenerSubnet> SubnetConfigurations { get; }
    public AvailabilityGroupListenerSubnet DhcpSubnetConfigurations { get; }
    public IList`1<AvailabilityGroupListenerSubnet> StaticIpSubnetConfigurations { get; }
    public AvailabilityGroupListenerConfiguration(AvailabilityGroupListener ag);
    public int get_ListenerPortNumber();
    public void set_ListenerPortNumber(int value);
    [CompilerGeneratedAttribute]
public AGListenerNetworkMode get_NetworkMode();
    [CompilerGeneratedAttribute]
public void set_NetworkMode(AGListenerNetworkMode value);
    [CompilerGeneratedAttribute]
public string get_ListenerName();
    [CompilerGeneratedAttribute]
public void set_ListenerName(string value);
    public IList`1<AvailabilityGroupListenerSubnet> get_SubnetConfigurations();
    public AvailabilityGroupListenerSubnet get_DhcpSubnetConfigurations();
    public IList`1<AvailabilityGroupListenerSubnet> get_StaticIpSubnetConfigurations();
    public void AddSubnetConfiguration(AvailabilityGroupListenerSubnet subnetConfiguration);
}
public class Microsoft.SqlServer.Management.HadrData.AvailabilityGroupListenerSubnet : object {
    [CompilerGeneratedAttribute]
private bool <IsDHCP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubnetIP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubnetMask>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPAddress>k__BackingField;
    public bool IsDHCP { get; public set; }
    public string SubnetIP { get; public set; }
    public string SubnetMask { get; public set; }
    public string IPAddress { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDHCP();
    [CompilerGeneratedAttribute]
public void set_IsDHCP(bool value);
    [CompilerGeneratedAttribute]
public string get_SubnetIP();
    [CompilerGeneratedAttribute]
public void set_SubnetIP(string value);
    [CompilerGeneratedAttribute]
public string get_SubnetMask();
    [CompilerGeneratedAttribute]
public void set_SubnetMask(string value);
    [CompilerGeneratedAttribute]
public string get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(string value);
}
public class Microsoft.SqlServer.Management.HadrData.AvailabilityGroupReplica : object {
    public static string SidConditionFormat;
    public static string DefaultEndpointName;
    public static int DefaultEndpointPortNumber;
    public static int GetServerSleepTime;
    public static int DefaultBackupPriority;
    [CompilerGeneratedAttribute]
private AvailabilityGroupReplicaData <AvailabilityGroupReplicaData>k__BackingField;
    public AvailabilityGroupReplicaData AvailabilityGroupReplicaData { get; public set; }
    public int BackupPriority { get; public set; }
    public string InitialRoleString { get; }
    public string EndpointName { get; public set; }
    public AvailabilityReplicaConnectionModeInSecondaryRole ReadableSecondaryRole { get; public set; }
    public int EndpointPortNumber { get; public set; }
    public string ConnectedAs { get; }
    public EndpointEncryptionAlgorithm EndpointEncryptionAlgorithm { get; public set; }
    public bool IsEndpointEncrypted { get; public set; }
    public bool IsValidDomainUserForWinAuthentication { get; }
    public EndpointEncryption EndpointEncryption { get; public set; }
    public AvailabilityGroupReplica(AvailabilityGroupReplicaData availabilityGroupReplicaData);
    [CompilerGeneratedAttribute]
public AvailabilityGroupReplicaData get_AvailabilityGroupReplicaData();
    [CompilerGeneratedAttribute]
public void set_AvailabilityGroupReplicaData(AvailabilityGroupReplicaData value);
    public int get_BackupPriority();
    public void set_BackupPriority(int value);
    public string get_InitialRoleString();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    public AvailabilityReplicaConnectionModeInSecondaryRole get_ReadableSecondaryRole();
    public void set_ReadableSecondaryRole(AvailabilityReplicaConnectionModeInSecondaryRole value);
    public int get_EndpointPortNumber();
    public void set_EndpointPortNumber(int value);
    public string get_ConnectedAs();
    public EndpointEncryptionAlgorithm get_EndpointEncryptionAlgorithm();
    public void set_EndpointEncryptionAlgorithm(EndpointEncryptionAlgorithm value);
    public bool get_IsEndpointEncrypted();
    public void set_IsEndpointEncrypted(bool value);
    public bool get_IsValidDomainUserForWinAuthentication();
    public EndpointEncryption get_EndpointEncryption();
    public void set_EndpointEncryption(EndpointEncryption value);
    public Server GetServer();
    public void AddGrantServiceAccount(IEnumerable`1<string> loginNames);
    public IEnumerable`1<KeyValuePair`2<string, bool>> GetLoginsForRemoteReplicas(IEnumerable`1<KeyValuePair`2<Byte[], string>> sidServiceAccountPairCollection);
    public void AdjustEndpointEncryption(AvailabilityGroupReplica primaryReplica);
    public bool IsValidEndpoint();
    public void ConfigureEndpoint();
    private void AlterEndpoint();
    public void SetEndpointUrl();
    private bool ValidDomainUserFormat(string serviceAccount);
    private bool ExistsSID(Server server, Byte[] sid, String& loginName);
    private string ByteArrayToString(Byte[] ba);
    public void CreateLogins(IEnumerable`1<string> loginNames);
    private Byte[] GetServiceAccountSid(Server server);
    private void CreateEndpoint();
}
internal class Microsoft.SqlServer.Management.HadrData.AvailabilityGroupReplicaCollection : SortableBindingList`1<AvailabilityGroupReplica> {
    public AvailabilityGroupReplicaCollection(IList`1<AvailabilityGroupReplica> replicaList);
}
public class Microsoft.SqlServer.Management.HadrData.AvailabilityGroupReplicaData : object {
    [CompilerGeneratedAttribute]
private ServerConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicaName>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicaRole <InitialRole>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutomaticFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityReplicaAvailabilityMode <AvailabilityMode>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityReplicaConnectionModeInSecondaryRole <ReadableSecondaryRole>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IList`1<string>> <ReadOnlyRoutingList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReadOnlyRoutingUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndpointPortNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointName>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointEncryption <EndpointEncryption>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointEncryptionAlgorithm <EndpointEncryptionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointServiceAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EndpointServiceAccountSid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndpointPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndpointCanBeConfigured>k__BackingField;
    [CompilerGeneratedAttribute]
private Endpoint <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackupPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityObjectState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClustered>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityReplicaSeedingMode <SeedingMode>k__BackingField;
    [BindableAttribute("False")]
public ServerConnection Connection { get; public set; }
    public string ReplicaName { get; public set; }
    public ReplicaRole InitialRole { get; public set; }
    public bool AutomaticFailover { get; public set; }
    public AvailabilityReplicaAvailabilityMode AvailabilityMode { get; public set; }
    public AvailabilityReplicaConnectionModeInSecondaryRole ReadableSecondaryRole { get; public set; }
    public IList`1<IList`1<string>> ReadOnlyRoutingList { get; public set; }
    public string ReadOnlyRoutingUrl { get; public set; }
    public string EndpointUrl { get; public set; }
    public int EndpointPortNumber { get; public set; }
    public string EndpointName { get; public set; }
    public EndpointEncryption EndpointEncryption { get; public set; }
    public EndpointEncryptionAlgorithm EndpointEncryptionAlgorithm { get; public set; }
    public string EndpointServiceAccount { get; public set; }
    public Byte[] EndpointServiceAccountSid { get; public set; }
    public bool EndpointPresent { get; public set; }
    public bool EndpointCanBeConfigured { get; public set; }
    public Endpoint Endpoint { get; public set; }
    public int BackupPriority { get; public set; }
    public AvailabilityObjectState State { get; public set; }
    public bool IsClustered { get; public set; }
    public AvailabilityReplicaSeedingMode SeedingMode { get; public set; }
    [CompilerGeneratedAttribute]
public ServerConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(ServerConnection value);
    [CompilerGeneratedAttribute]
public string get_ReplicaName();
    [CompilerGeneratedAttribute]
public void set_ReplicaName(string value);
    [CompilerGeneratedAttribute]
public ReplicaRole get_InitialRole();
    [CompilerGeneratedAttribute]
public void set_InitialRole(ReplicaRole value);
    [CompilerGeneratedAttribute]
public bool get_AutomaticFailover();
    [CompilerGeneratedAttribute]
public void set_AutomaticFailover(bool value);
    [CompilerGeneratedAttribute]
public AvailabilityReplicaAvailabilityMode get_AvailabilityMode();
    [CompilerGeneratedAttribute]
public void set_AvailabilityMode(AvailabilityReplicaAvailabilityMode value);
    [CompilerGeneratedAttribute]
public AvailabilityReplicaConnectionModeInSecondaryRole get_ReadableSecondaryRole();
    [CompilerGeneratedAttribute]
public void set_ReadableSecondaryRole(AvailabilityReplicaConnectionModeInSecondaryRole value);
    [CompilerGeneratedAttribute]
public IList`1<IList`1<string>> get_ReadOnlyRoutingList();
    [CompilerGeneratedAttribute]
public void set_ReadOnlyRoutingList(IList`1<IList`1<string>> value);
    [CompilerGeneratedAttribute]
public string get_ReadOnlyRoutingUrl();
    [CompilerGeneratedAttribute]
public void set_ReadOnlyRoutingUrl(string value);
    public AvailabilityReplicaFailoverMode GetFailoverMode(AvailabilityGroupClusterType clusterType);
    [CompilerGeneratedAttribute]
public string get_EndpointUrl();
    [CompilerGeneratedAttribute]
public void set_EndpointUrl(string value);
    [CompilerGeneratedAttribute]
public int get_EndpointPortNumber();
    [CompilerGeneratedAttribute]
public void set_EndpointPortNumber(int value);
    [CompilerGeneratedAttribute]
public string get_EndpointName();
    [CompilerGeneratedAttribute]
public void set_EndpointName(string value);
    [CompilerGeneratedAttribute]
public EndpointEncryption get_EndpointEncryption();
    [CompilerGeneratedAttribute]
public void set_EndpointEncryption(EndpointEncryption value);
    [CompilerGeneratedAttribute]
public EndpointEncryptionAlgorithm get_EndpointEncryptionAlgorithm();
    [CompilerGeneratedAttribute]
public void set_EndpointEncryptionAlgorithm(EndpointEncryptionAlgorithm value);
    [CompilerGeneratedAttribute]
public string get_EndpointServiceAccount();
    [CompilerGeneratedAttribute]
public void set_EndpointServiceAccount(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_EndpointServiceAccountSid();
    [CompilerGeneratedAttribute]
public void set_EndpointServiceAccountSid(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_EndpointPresent();
    [CompilerGeneratedAttribute]
public void set_EndpointPresent(bool value);
    [CompilerGeneratedAttribute]
public bool get_EndpointCanBeConfigured();
    [CompilerGeneratedAttribute]
public void set_EndpointCanBeConfigured(bool value);
    [CompilerGeneratedAttribute]
public Endpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Endpoint value);
    [CompilerGeneratedAttribute]
public int get_BackupPriority();
    [CompilerGeneratedAttribute]
public void set_BackupPriority(int value);
    [CompilerGeneratedAttribute]
public AvailabilityObjectState get_State();
    [CompilerGeneratedAttribute]
public void set_State(AvailabilityObjectState value);
    [CompilerGeneratedAttribute]
public bool get_IsClustered();
    [CompilerGeneratedAttribute]
public void set_IsClustered(bool value);
    [CompilerGeneratedAttribute]
public AvailabilityReplicaSeedingMode get_SeedingMode();
    [CompilerGeneratedAttribute]
public void set_SeedingMode(AvailabilityReplicaSeedingMode value);
}
public enum Microsoft.SqlServer.Management.HadrData.AvailabilityObjectState : Enum {
    public int value__;
    public static AvailabilityObjectState Unknown;
    public static AvailabilityObjectState Creating;
    public static AvailabilityObjectState Existing;
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.HadrData.CollectionsExtensionMethods : object {
    [ExtensionAttribute]
public static void AddRange(ICollection`1<T> target, IEnumerable`1<T> items);
}
public static class Microsoft.SqlServer.Management.HadrData.Constants : object {
    internal static WellKnownSidType[] WellKnownSidTypes;
    internal static String[] DefaultDatabaseInitFields { get; }
    private static Constants();
    internal static String[] get_DefaultDatabaseInitFields();
}
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.HadrData.Resource")]
public enum Microsoft.SqlServer.Management.HadrData.DataSynchronizationOption : Enum {
    public int value__;
    [DisplayNameKeyAttribute("FullDataSync")]
public static DataSynchronizationOption Full;
    [DisplayNameKeyAttribute("JoinOnlyDataSync")]
public static DataSynchronizationOption JoinOnly;
    [DisplayNameKeyAttribute("ManualDataSync")]
public static DataSynchronizationOption Manual;
    [DisplayNameKeyAttribute("AutomaticSeedingDataSync")]
public static DataSynchronizationOption AutomaticSeeding;
}
public enum Microsoft.SqlServer.Management.HadrData.FailoverCategory : Enum {
    public int value__;
    public static FailoverCategory FailoverWithDataLoss;
    public static FailoverCategory FailoverWithoutDataLoss;
}
public class Microsoft.SqlServer.Management.HadrData.FailoverData : object {
    [CompilerGeneratedAttribute]
private ServerConnection <EntryPointServerConnection>k__BackingField;
    private Server entryPointServer;
    private AvailabilityReplicaCollection replicas;
    [CompilerGeneratedAttribute]
private string <AvailabilityGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private FailoverCategory <TargetReplicaFailoverCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private Server <TargetServer>k__BackingField;
    [CompilerGeneratedAttribute]
private Server <PrimaryServer>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerConnection <TargetServerConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetReplicaName>k__BackingField;
    public ServerConnection EntryPointServerConnection { get; public set; }
    public Server EntryPointServer { get; }
    public string EntryPointServerTrueName { get; }
    public string PrimaryServerInstanceName { get; }
    public AvailabilityGroup AvailabilityGroup { get; }
    public AvailabilityReplicaCollection AvailabilityReplicas { get; }
    public AvailabilityReplica PrimaryReplica { get; }
    public string AvailabilityGroupName { get; public set; }
    public FailoverCategory TargetReplicaFailoverCategory { get; public set; }
    public Server TargetServer { get; public set; }
    public Server PrimaryServer { get; public set; }
    public ServerConnection TargetServerConnection { get; public set; }
    public AvailabilityGroup TargetAvailabilityGroup { get; }
    public string TargetReplicaName { get; public set; }
    public AvailabilityReplica TargetAvailabilityReplica { get; }
    [CompilerGeneratedAttribute]
public ServerConnection get_EntryPointServerConnection();
    [CompilerGeneratedAttribute]
public void set_EntryPointServerConnection(ServerConnection value);
    public Server get_EntryPointServer();
    public string get_EntryPointServerTrueName();
    protected void SetEntryPointServerToNull();
    public string get_PrimaryServerInstanceName();
    public AvailabilityGroup get_AvailabilityGroup();
    public AvailabilityReplicaCollection get_AvailabilityReplicas();
    public AvailabilityReplica get_PrimaryReplica();
    [CompilerGeneratedAttribute]
public string get_AvailabilityGroupName();
    [CompilerGeneratedAttribute]
public void set_AvailabilityGroupName(string value);
    [CompilerGeneratedAttribute]
public void set_TargetReplicaFailoverCategory(FailoverCategory value);
    [CompilerGeneratedAttribute]
public FailoverCategory get_TargetReplicaFailoverCategory();
    [CompilerGeneratedAttribute]
public Server get_TargetServer();
    [CompilerGeneratedAttribute]
public void set_TargetServer(Server value);
    [CompilerGeneratedAttribute]
public Server get_PrimaryServer();
    [CompilerGeneratedAttribute]
public void set_PrimaryServer(Server value);
    [CompilerGeneratedAttribute]
public ServerConnection get_TargetServerConnection();
    [CompilerGeneratedAttribute]
public void set_TargetServerConnection(ServerConnection value);
    public void ResetTargetServer();
    public AvailabilityGroup get_TargetAvailabilityGroup();
    [CompilerGeneratedAttribute]
public string get_TargetReplicaName();
    [CompilerGeneratedAttribute]
public void set_TargetReplicaName(string value);
    public AvailabilityReplica get_TargetAvailabilityReplica();
}
public static class Microsoft.SqlServer.Management.HadrData.FailoverUtilities : object {
    private static String[] ServerFields;
    private static String[] AvailabilityGroupFields;
    private static String[] AvailabilityReplicaFields;
    private static String[] DatabaseReplicaStateFields;
    private static FailoverUtilities();
    public static Server GetServerWithInitFieldsSetting(ServerConnection connection);
    public static bool TryDecrypt(Database database, string pwd);
    public static void ProvisionCredential(Server server, string dbName, string pwd);
    public static bool HasDbNeedToBeDecrypted(Server server, List`1<PrimaryDatabaseData> databases);
}
public class Microsoft.SqlServer.Management.HadrData.PrimaryDatabaseData : object {
    private Database smoDatabase;
    private string existingAvailabilityGroupName;
    [CompilerGeneratedAttribute]
private string <DatabaseFullBackupFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseLogBackupFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DBMKPassword>k__BackingField;
    public string Name { get; }
    public double DatabaseSize { get; }
    public string AvailabiliyGroupName { get; }
    public bool IsPartOfExistingAvailabilityGroup { get; }
    public string DatabaseFullBackupFile { get; public set; }
    public string DatabaseLogBackupFile { get; public set; }
    public string DBMKPassword { get; public set; }
    public PrimaryDatabaseData(Database database, string availabilityGroupName);
    public PrimaryDatabaseData(Database database);
    public string get_Name();
    public double get_DatabaseSize();
    public string get_AvailabiliyGroupName();
    public bool get_IsPartOfExistingAvailabilityGroup();
    [CompilerGeneratedAttribute]
public string get_DatabaseFullBackupFile();
    [CompilerGeneratedAttribute]
public void set_DatabaseFullBackupFile(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseLogBackupFile();
    [CompilerGeneratedAttribute]
public void set_DatabaseLogBackupFile(string value);
    [CompilerGeneratedAttribute]
public string get_DBMKPassword();
    [CompilerGeneratedAttribute]
public void set_DBMKPassword(string value);
}
[LocalizedPropertyResourcesAttribute("Microsoft.SqlServer.Management.HadrData.Resource")]
public enum Microsoft.SqlServer.Management.HadrData.ReplicaRole : Enum {
    public int value__;
    [DisplayNameKeyAttribute("Primary")]
public static ReplicaRole Primary;
    [DisplayNameKeyAttribute("Secondary")]
public static ReplicaRole Secondary;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.SqlServer.Management.HadrData.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AvailabilityGroupNotExistError { get; }
    public static string FailoverTargetReplicaNotExistError { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AvailabilityGroupNotExistError();
    public static string get_FailoverTargetReplicaNotExistError();
}
internal class Microsoft.SqlServer.Management.HadrData.SortableBindingList`1 : BindingList`1<T> {
    private PropertyDescriptor propertyDescriptor;
    private ListSortDirection listSortDirection;
    private bool isSorted;
    protected bool SupportsSortingCore { get; }
    protected bool IsSortedCore { get; }
    protected PropertyDescriptor SortPropertyCore { get; }
    protected ListSortDirection SortDirectionCore { get; }
    public SortableBindingList`1(IList`1<T> list);
    protected virtual bool get_SupportsSortingCore();
    protected virtual bool get_IsSortedCore();
    protected virtual PropertyDescriptor get_SortPropertyCore();
    protected virtual ListSortDirection get_SortDirectionCore();
    protected virtual void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction);
    protected virtual void RemoveSortCore();
    protected virtual Comparison`1<T> GetComparisonDelegate(PropertyDescriptor propertyDescriptor, ListSortDirection direction);
}
internal class Microsoft.SqlServer.Management.HadrData.UserSecurity : object {
    private static bool LookupAccountName(string systemName, string accountName, IntPtr sid, Int32& cbSid, StringBuilder referencedDomainName, Int32& cbReferencedDomainName, Int32& use);
    private static bool IsWellKnownSid(IntPtr pSid, int sidType);
    public static bool IsDomainUserAccount(string accountName, IEnumerable`1<WellKnownSidType> sidTypeList);
}
