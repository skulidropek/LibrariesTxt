internal static class Microsoft.SqlServer.Management.Smo.Notebook.AssemblyVersionInfo : object {
    public static string VersionString;
    public static int MajorVersion;
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.CellModel : object {
    [CompilerGeneratedAttribute]
private string <cell_type>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <source>k__BackingField;
    [CompilerGeneratedAttribute]
private object <metadata>k__BackingField;
    public string cell_type { get; public set; }
    public IList`1<string> source { get; public set; }
    public object metadata { get; public set; }
    public CellModel(string cellType);
    [CompilerGeneratedAttribute]
public string get_cell_type();
    [CompilerGeneratedAttribute]
public void set_cell_type(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_source();
    [CompilerGeneratedAttribute]
public void set_source(IList`1<string> value);
    [CompilerGeneratedAttribute]
public object get_metadata();
    [CompilerGeneratedAttribute]
public void set_metadata(object value);
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.CodeCellModel : CellModel {
    [CompilerGeneratedAttribute]
private IList`1<object> <outputs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <execution_count>k__BackingField;
    public IList`1<object> outputs { get; public set; }
    public int execution_count { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<object> get_outputs();
    [CompilerGeneratedAttribute]
public void set_outputs(IList`1<object> value);
    [CompilerGeneratedAttribute]
public int get_execution_count();
    [CompilerGeneratedAttribute]
public void set_execution_count(int value);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.Notebook.EncodeExtensions : object {
    private static string WindowsNewLine;
    private static string OtherNewLine;
    [ExtensionAttribute]
public static IEnumerable`1<string> WithJsonNewLines(IEnumerable`1<string> lines);
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.KernelSpec : object {
    public string name { get; }
    public string language { get; }
    public string display_name { get; }
    public string get_name();
    public string get_language();
    public string get_display_name();
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.LanguageInfo : object {
    public string name { get; }
    public string version { get; }
    public string get_name();
    public string get_version();
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.Notebook.LineFeedExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> WithLineFeeds(IEnumerable`1<string> lines);
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.MarkdownCellModel : CellModel {
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.NotebookFileWriter : SingleFileWriterBase {
    private SmoNotebook notebook;
    private string filePath;
    private Urn currentUrn;
    public NotebookFileWriter(string filePath);
    public void Close();
    protected virtual void Dispose(bool disposing);
    private void DemarkUrn(Urn urn);
    protected virtual void ScriptContextImpl(IEnumerable`1<string> context, Urn obj);
    protected virtual void ScriptDataImpl(IEnumerable`1<string> dataScript, Urn table);
    protected virtual void ScriptObjectImpl(IEnumerable`1<string> script, Urn obj);
    protected virtual void WriteHeaderImpl(string header);
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.NotebookMetadata : object {
    private static KernelSpec kernelSpec;
    private static LanguageInfo languageInfo;
    public KernelSpec kernel_spec { get; }
    public LanguageInfo language_info { get; }
    private static NotebookMetadata();
    public KernelSpec get_kernel_spec();
    public LanguageInfo get_language_info();
}
internal class Microsoft.SqlServer.Management.Smo.Notebook.NotebookModel : object {
    [CompilerGeneratedAttribute]
private object <metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private int <nbformat>k__BackingField;
    [CompilerGeneratedAttribute]
private int <nbformat_minor>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<object> <cells>k__BackingField;
    public object metadata { get; public set; }
    public int nbformat { get; public set; }
    public int nbformat_minor { get; public set; }
    public IList`1<object> cells { get; public set; }
    public NotebookModel(int majorVersion, int minorVersion);
    [CompilerGeneratedAttribute]
public object get_metadata();
    [CompilerGeneratedAttribute]
public void set_metadata(object value);
    [CompilerGeneratedAttribute]
public int get_nbformat();
    [CompilerGeneratedAttribute]
public void set_nbformat(int value);
    [CompilerGeneratedAttribute]
public int get_nbformat_minor();
    [CompilerGeneratedAttribute]
public void set_nbformat_minor(int value);
    [CompilerGeneratedAttribute]
public IList`1<object> get_cells();
    [CompilerGeneratedAttribute]
public void set_cells(IList`1<object> value);
}
public class Microsoft.SqlServer.Management.Smo.Notebook.SmoNotebook : object {
    private static NotebookMetadata notebookMetadata;
    private NotebookModel notebookModel;
    private static SmoNotebook();
    public void AddCodeCell(IEnumerable`1<string> content, Urn urn);
    public void AddMarkdownCell(IEnumerable`1<string> content, Urn urn);
    public void Save(Stream stream, bool prettyPrint);
}
