public enum Microsoft.SqlServer.Management.Dmf.PolicyHealthState : Enum {
    public int value__;
    public static PolicyHealthState Unknown;
    public static PolicyHealthState Critical;
    public static PolicyHealthState Healthy;
    public static PolicyHealthState NoPolicy;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AbortAfterWaitConverter")]
public enum Microsoft.SqlServer.Management.Smo.AbortAfterWait : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("NONE")]
public static AbortAfterWait None;
    [TsqlSyntaxStringAttribute("BLOCKERS")]
public static AbortAfterWait Blockers;
    [TsqlSyntaxStringAttribute("SELF")]
public static AbortAfterWait Self;
}
public class Microsoft.SqlServer.Management.Smo.AbortAfterWaitConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.ActivationExecutionContext : Enum {
    public int value__;
    public static ActivationExecutionContext Owner;
    public static ActivationExecutionContext ExecuteAsUser;
    public static ActivationExecutionContext Self;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.ActivationOrder : Enum {
    public int value__;
    public static ActivationOrder First;
    public static ActivationOrder None;
    public static ActivationOrder Last;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.AgentLogLevels : Enum {
    public int value__;
    public static AgentLogLevels Errors;
    public static AgentLogLevels Warnings;
    public static AgentLogLevels Informational;
    public static AgentLogLevels All;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.AgentMailType : Enum {
    public int value__;
    public static AgentMailType SqlAgentMail;
    public static AgentMailType DatabaseMail;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AgentSubSystemTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.Agent.AgentSubSystem : Enum {
    public int value__;
    [LocDisplayNameAttribute("TransactSql")]
[TsqlSyntaxStringAttribute("TSQL")]
public static AgentSubSystem TransactSql;
    [LocDisplayNameAttribute("ActiveScripting")]
[TsqlSyntaxStringAttribute("ActiveScripting")]
public static AgentSubSystem ActiveScripting;
    [LocDisplayNameAttribute("CmdExec")]
[TsqlSyntaxStringAttribute("CmdExec")]
public static AgentSubSystem CmdExec;
    [LocDisplayNameAttribute("ReplSnapshot")]
[TsqlSyntaxStringAttribute("Snapshot")]
public static AgentSubSystem Snapshot;
    [LocDisplayNameAttribute("ReplLogReader")]
[TsqlSyntaxStringAttribute("LogReader")]
public static AgentSubSystem LogReader;
    [LocDisplayNameAttribute("ReplDistribution")]
[TsqlSyntaxStringAttribute("Distribution")]
public static AgentSubSystem Distribution;
    [LocDisplayNameAttribute("ReplMerge")]
[TsqlSyntaxStringAttribute("Merge")]
public static AgentSubSystem Merge;
    [LocDisplayNameAttribute("ReplQueueReader")]
[TsqlSyntaxStringAttribute("QueueReader")]
public static AgentSubSystem QueueReader;
    [LocDisplayNameAttribute("AnalysisQuery")]
[TsqlSyntaxStringAttribute("ANALYSISQUERY")]
public static AgentSubSystem AnalysisQuery;
    [LocDisplayNameAttribute("AnalysisCommand")]
[TsqlSyntaxStringAttribute("ANALYSISCOMMAND")]
public static AgentSubSystem AnalysisCommand;
    [LocDisplayNameAttribute("SSIS")]
[TsqlSyntaxStringAttribute("SSIS")]
public static AgentSubSystem Ssis;
    [LocDisplayNameAttribute("PowerShell")]
[TsqlSyntaxStringAttribute("PowerShell")]
public static AgentSubSystem PowerShell;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.AlertType : Enum {
    public int value__;
    public static AlertType SqlServerEvent;
    public static AlertType SqlServerPerformanceCondition;
    public static AlertType NonSqlServerEvent;
    public static AlertType WmiEvent;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.CategoryType : Enum {
    public int value__;
    public static CategoryType LocalJob;
    public static CategoryType MultiServerJob;
    public static CategoryType None;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.CompletionAction : Enum {
    public int value__;
    public static CompletionAction Never;
    public static CompletionAction OnSuccess;
    public static CompletionAction OnFailure;
    public static CompletionAction Always;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.CompletionResult : Enum {
    public int value__;
    public static CompletionResult Failed;
    public static CompletionResult Succeeded;
    public static CompletionResult Retry;
    public static CompletionResult Cancelled;
    public static CompletionResult InProgress;
    public static CompletionResult Unknown;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.FrequencyRelativeIntervals : Enum {
    public int value__;
    public static FrequencyRelativeIntervals First;
    public static FrequencyRelativeIntervals Second;
    public static FrequencyRelativeIntervals Third;
    public static FrequencyRelativeIntervals Fourth;
    public static FrequencyRelativeIntervals Last;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.FrequencySubDayTypes : Enum {
    public int value__;
    public static FrequencySubDayTypes Hour;
    public static FrequencySubDayTypes Minute;
    public static FrequencySubDayTypes Second;
    public static FrequencySubDayTypes Once;
    public static FrequencySubDayTypes Unknown;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.FrequencyTypes : Enum {
    public int value__;
    public static FrequencyTypes AutoStart;
    public static FrequencyTypes Daily;
    public static FrequencyTypes Monthly;
    public static FrequencyTypes MonthlyRelative;
    public static FrequencyTypes OneTime;
    public static FrequencyTypes OnIdle;
    public static FrequencyTypes Unknown;
    public static FrequencyTypes Weekly;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.JobExecutionStatusConverter")]
public enum Microsoft.SqlServer.Management.Smo.Agent.JobExecutionStatus : Enum {
    public int value__;
    [LocDisplayNameAttribute("Executing")]
public static JobExecutionStatus Executing;
    [LocDisplayNameAttribute("WaitingForWorkerThread")]
public static JobExecutionStatus WaitingForWorkerThread;
    [LocDisplayNameAttribute("BetweenRetries")]
public static JobExecutionStatus BetweenRetries;
    [LocDisplayNameAttribute("Idle")]
public static JobExecutionStatus Idle;
    [LocDisplayNameAttribute("Suspended")]
public static JobExecutionStatus Suspended;
    [LocDisplayNameAttribute("WaitingForStepToFinish")]
public static JobExecutionStatus WaitingForStepToFinish;
    [LocDisplayNameAttribute("PerformingCompletionAction")]
public static JobExecutionStatus PerformingCompletionAction;
    [LocDisplayNameAttribute("Queued")]
public static JobExecutionStatus Queued;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.JobOutcome : Enum {
    public int value__;
    public static JobOutcome Cancelled;
    public static JobOutcome Failed;
    public static JobOutcome InProgress;
    public static JobOutcome Succeeded;
    public static JobOutcome Unknown;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.JobServerType : Enum {
    public int value__;
    public static JobServerType Standalone;
    public static JobServerType Tsx;
    public static JobServerType Msx;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.JobStepFlags : Enum {
    public int value__;
    public static JobStepFlags None;
    public static JobStepFlags AppendToLogFile;
    public static JobStepFlags AppendToJobHistory;
    public static JobStepFlags LogToTableWithOverwrite;
    public static JobStepFlags AppendToTableLog;
    public static JobStepFlags AppendAllCmdExecOutputToJobHistory;
    public static JobStepFlags ProvideStopProcessEvent;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.JobType : Enum {
    public int value__;
    public static JobType Local;
    public static JobType MultiServer;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.MonthlyRelativeWeekDays : Enum {
    public int value__;
    public static MonthlyRelativeWeekDays Sunday;
    public static MonthlyRelativeWeekDays Monday;
    public static MonthlyRelativeWeekDays Tuesday;
    public static MonthlyRelativeWeekDays Wednesday;
    public static MonthlyRelativeWeekDays Thursday;
    public static MonthlyRelativeWeekDays Friday;
    public static MonthlyRelativeWeekDays Saturday;
    public static MonthlyRelativeWeekDays EveryDay;
    public static MonthlyRelativeWeekDays WeekDays;
    public static MonthlyRelativeWeekDays WeekEnds;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods : Enum {
    public int value__;
    public static NotifyMethods None;
    public static NotifyMethods NotifyEmail;
    public static NotifyMethods Pager;
    public static NotifyMethods NetSend;
    public static NotifyMethods NotifyAll;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.OSRunPriority : Enum {
    public int value__;
    public static OSRunPriority AboveNormal;
    public static OSRunPriority BelowNormal;
    public static OSRunPriority Idle;
    public static OSRunPriority Normal;
    public static OSRunPriority TimeCritical;
}
public enum Microsoft.SqlServer.Management.Smo.Agent.StepCompletionAction : Enum {
    public int value__;
    public static StepCompletionAction QuitWithSuccess;
    public static StepCompletionAction QuitWithFailure;
    public static StepCompletionAction GoToNextStep;
    public static StepCompletionAction GoToStep;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.TargetServerStatus : Enum {
    public int value__;
    public static TargetServerStatus Normal;
    public static TargetServerStatus SuspectedOffline;
    public static TargetServerStatus Blocked;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.Agent.WeekDays : Enum {
    public int value__;
    public static WeekDays Sunday;
    public static WeekDays Monday;
    public static WeekDays Tuesday;
    public static WeekDays Wednesday;
    public static WeekDays Thursday;
    public static WeekDays Friday;
    public static WeekDays Saturday;
    public static WeekDays EveryDay;
    public static WeekDays WeekDays;
    public static WeekDays WeekEnds;
}
public class Microsoft.SqlServer.Management.Smo.AgentSubSystemTypeConverter : EnumToDisplayNameConverter {
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.AssemblyAlterOptions : Enum {
    public int value__;
    public static AssemblyAlterOptions None;
    public static AssemblyAlterOptions NoChecks;
}
public enum Microsoft.SqlServer.Management.Smo.AssemblySecurityLevel : Enum {
    public int value__;
    public static AssemblySecurityLevel Safe;
    public static AssemblySecurityLevel External;
    public static AssemblySecurityLevel Unrestricted;
}
public enum Microsoft.SqlServer.Management.Smo.AsymmetricKeyEncryptionAlgorithm : Enum {
    public int value__;
    public static AsymmetricKeyEncryptionAlgorithm CryptographicProviderDefined;
    public static AsymmetricKeyEncryptionAlgorithm Rsa512;
    public static AsymmetricKeyEncryptionAlgorithm Rsa1024;
    public static AsymmetricKeyEncryptionAlgorithm Rsa2048;
    public static AsymmetricKeyEncryptionAlgorithm Rsa3072;
    public static AsymmetricKeyEncryptionAlgorithm Rsa4096;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AuditActionTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.AuditActionType : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("APPLICATION_ROLE_CHANGE_PASSWORD_GROUP")]
public static AuditActionType ApplicationRoleChangePasswordGroup;
    [TsqlSyntaxStringAttribute("AUDIT_CHANGE_GROUP")]
public static AuditActionType AuditChangeGroup;
    [TsqlSyntaxStringAttribute("BACKUP_RESTORE_GROUP")]
public static AuditActionType BackupRestoreGroup;
    [TsqlSyntaxStringAttribute("BATCH_COMPLETED_GROUP")]
public static AuditActionType BatchCompletedGroup;
    [TsqlSyntaxStringAttribute("BATCH_STARTED_GROUP")]
public static AuditActionType BatchStartedGroup;
    [TsqlSyntaxStringAttribute("BROKER_LOGIN_GROUP")]
public static AuditActionType BrokerLoginGroup;
    [TsqlSyntaxStringAttribute("DATABASE_CHANGE_GROUP")]
public static AuditActionType DatabaseChangeGroup;
    [TsqlSyntaxStringAttribute("DATABASE_LOGOUT_GROUP")]
public static AuditActionType DatabaseLogoutGroup;
    [TsqlSyntaxStringAttribute("DATABASE_MIRRORING_LOGIN_GROUP")]
public static AuditActionType DatabaseMirroringLoginGroup;
    [TsqlSyntaxStringAttribute("DATABASE_OBJECT_ACCESS_GROUP")]
public static AuditActionType DatabaseObjectAccessGroup;
    [TsqlSyntaxStringAttribute("DATABASE_OBJECT_CHANGE_GROUP")]
public static AuditActionType DatabaseObjectChangeGroup;
    [TsqlSyntaxStringAttribute("DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP")]
public static AuditActionType DatabaseObjectOwnershipChangeGroup;
    [TsqlSyntaxStringAttribute("DATABASE_OBJECT_PERMISSION_CHANGE_GROUP")]
public static AuditActionType DatabaseObjectPermissionChangeGroup;
    [TsqlSyntaxStringAttribute("DATABASE_OPERATION_GROUP")]
public static AuditActionType DatabaseOperationGroup;
    [TsqlSyntaxStringAttribute("DATABASE_OWNERSHIP_CHANGE_GROUP")]
public static AuditActionType DatabaseOwnershipChangeGroup;
    [TsqlSyntaxStringAttribute("DATABASE_PERMISSION_CHANGE_GROUP")]
public static AuditActionType DatabasePermissionChangeGroup;
    [TsqlSyntaxStringAttribute("DATABASE_PRINCIPAL_CHANGE_GROUP")]
public static AuditActionType DatabasePrincipalChangeGroup;
    [TsqlSyntaxStringAttribute("DATABASE_PRINCIPAL_IMPERSONATION_GROUP")]
public static AuditActionType DatabasePrincipalImpersonationGroup;
    [TsqlSyntaxStringAttribute("DATABASE_ROLE_MEMBER_CHANGE_GROUP")]
public static AuditActionType DatabaseRoleMemberChangeGroup;
    [TsqlSyntaxStringAttribute("DBCC_GROUP")]
public static AuditActionType DbccGroup;
    [TsqlSyntaxStringAttribute("DELETE")]
public static AuditActionType Delete;
    [TsqlSyntaxStringAttribute("EXECUTE")]
public static AuditActionType Execute;
    [TsqlSyntaxStringAttribute("FAILED_DATABASE_AUTHENTICATION_GROUP")]
public static AuditActionType FailedDatabaseAuthenticationGroup;
    [TsqlSyntaxStringAttribute("FAILED_LOGIN_GROUP")]
public static AuditActionType FailedLoginGroup;
    [TsqlSyntaxStringAttribute("FULLTEXT_GROUP")]
public static AuditActionType FullTextGroup;
    [TsqlSyntaxStringAttribute("GLOBAL_TRANSACTIONS_LOGIN_GROUP")]
public static AuditActionType GlobalTransactionsLoginGroup;
    [TsqlSyntaxStringAttribute("INSERT")]
public static AuditActionType Insert;
    [TsqlSyntaxStringAttribute("LOGIN_CHANGE_PASSWORD_GROUP")]
public static AuditActionType LoginChangePasswordGroup;
    [TsqlSyntaxStringAttribute("LOGOUT_GROUP")]
public static AuditActionType LogoutGroup;
    [TsqlSyntaxStringAttribute("RECEIVE")]
public static AuditActionType Receive;
    [TsqlSyntaxStringAttribute("REFERENCES")]
public static AuditActionType References;
    [TsqlSyntaxStringAttribute("SCHEMA_OBJECT_ACCESS_GROUP")]
public static AuditActionType SchemaObjectAccessGroup;
    [TsqlSyntaxStringAttribute("SCHEMA_OBJECT_CHANGE_GROUP")]
public static AuditActionType SchemaObjectChangeGroup;
    [TsqlSyntaxStringAttribute("SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP")]
public static AuditActionType SchemaObjectOwnershipChangeGroup;
    [TsqlSyntaxStringAttribute("SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP")]
public static AuditActionType SchemaObjectPermissionChangeGroup;
    [TsqlSyntaxStringAttribute("SELECT")]
public static AuditActionType Select;
    [TsqlSyntaxStringAttribute("SERVER_OBJECT_CHANGE_GROUP")]
public static AuditActionType ServerObjectChangeGroup;
    [TsqlSyntaxStringAttribute("SERVER_OBJECT_OWNERSHIP_CHANGE_GROUP")]
public static AuditActionType ServerObjectOwnershipChangeGroup;
    [TsqlSyntaxStringAttribute("SERVER_OBJECT_PERMISSION_CHANGE_GROUP")]
public static AuditActionType ServerObjectPermissionChangeGroup;
    [TsqlSyntaxStringAttribute("SERVER_OPERATION_GROUP")]
public static AuditActionType ServerOperationGroup;
    [TsqlSyntaxStringAttribute("SERVER_PERMISSION_CHANGE_GROUP")]
public static AuditActionType ServerPermissionChangeGroup;
    [TsqlSyntaxStringAttribute("SERVER_PRINCIPAL_CHANGE_GROUP")]
public static AuditActionType ServerPrincipalChangeGroup;
    [TsqlSyntaxStringAttribute("SERVER_PRINCIPAL_IMPERSONATION_GROUP")]
public static AuditActionType ServerPrincipalImpersonationGroup;
    [TsqlSyntaxStringAttribute("SERVER_ROLE_MEMBER_CHANGE_GROUP")]
public static AuditActionType ServerRoleMemberChangeGroup;
    [TsqlSyntaxStringAttribute("SERVER_STATE_CHANGE_GROUP")]
public static AuditActionType ServerStateChangeGroup;
    [TsqlSyntaxStringAttribute("SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP")]
public static AuditActionType SuccessfulDatabaseAuthenticationGroup;
    [TsqlSyntaxStringAttribute("SUCCESSFUL_LOGIN_GROUP")]
public static AuditActionType SuccessfulLoginGroup;
    [TsqlSyntaxStringAttribute("TRACE_CHANGE_GROUP")]
public static AuditActionType TraceChangeGroup;
    [TsqlSyntaxStringAttribute("UPDATE")]
public static AuditActionType Update;
    [TsqlSyntaxStringAttribute("USER_CHANGE_PASSWORD_GROUP")]
public static AuditActionType UserChangePasswordGroup;
    [TsqlSyntaxStringAttribute("USER_DEFINED_AUDIT_GROUP")]
public static AuditActionType UserDefinedAuditGroup;
    [TsqlSyntaxStringAttribute("TRANSACTION_GROUP")]
public static AuditActionType TransactionGroup;
    [TsqlSyntaxStringAttribute("SENSITIVITY_CLASSIFICATION_CHANGE_GROUP")]
public static AuditActionType SensitiveClassificationChangeGroup;
    [TsqlSyntaxStringAttribute("STORAGE_LOGIN_GROUP")]
public static AuditActionType StorageLoginGroup;
    [TsqlSyntaxStringAttribute("STATEMENT_ROLLBACK_GROUP")]
public static AuditActionType StatementRollbackGroup;
    [TsqlSyntaxStringAttribute("TRANSACTION_BEGIN_GROUP")]
public static AuditActionType TransactionBeginGroup;
    [TsqlSyntaxStringAttribute("TRANSACTION_COMMIT_GROUP")]
public static AuditActionType TransactionCommitGroup;
    [TsqlSyntaxStringAttribute("TRANSACTION_ROLLBACK_GROUP")]
public static AuditActionType TransactionRollbackGroup;
    [TsqlSyntaxStringAttribute("LEDGER_OPERATION_GROUP")]
public static AuditActionType LedgerOperationGroup;
    [TsqlSyntaxStringAttribute("SENSITIVE_BATCH_COMPLETED_GROUP")]
public static AuditActionType SensitiveBatchCompletedGroup;
    [TsqlSyntaxStringAttribute("EXTGOV_OPERATION_GROUP")]
public static AuditActionType ExternalGovernanceOperationGroup;
}
public class Microsoft.SqlServer.Management.Smo.AuditActionTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AuditDestinationTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.AuditDestinationType : Enum {
    public int value__;
    [LocDisplayNameAttribute("FileDest")]
[TsqlSyntaxStringAttribute("FILE")]
public static AuditDestinationType File;
    [LocDisplayNameAttribute("SecurityLogDest")]
[TsqlSyntaxStringAttribute("SECURITY_LOG")]
public static AuditDestinationType SecurityLog;
    [LocDisplayNameAttribute("ApplicationLogDest")]
[TsqlSyntaxStringAttribute("APPLICATION_LOG")]
public static AuditDestinationType ApplicationLog;
    [LocDisplayNameAttribute("UrlDest")]
[TsqlSyntaxStringAttribute("URL")]
public static AuditDestinationType Url;
    [LocDisplayNameAttribute("ExternalMonitorDest")]
[TsqlSyntaxStringAttribute("EXTERNAL_MONITOR")]
public static AuditDestinationType ExternalMonitor;
    [LocDisplayNameAttribute("UnknownDest")]
[TsqlSyntaxStringAttribute("UNKNOWN")]
public static AuditDestinationType Unknown;
}
public class Microsoft.SqlServer.Management.Smo.AuditDestinationTypeConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.AuditFileSizeUnit : Enum {
    public int value__;
    public static AuditFileSizeUnit Mb;
    public static AuditFileSizeUnit Gb;
    public static AuditFileSizeUnit Tb;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.AuditLevel : Enum {
    public int value__;
    public static AuditLevel None;
    public static AuditLevel Success;
    public static AuditLevel Failure;
    public static AuditLevel All;
}
public class Microsoft.SqlServer.Management.Smo.AuditOnFailureActionConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.AuditStatusType : Enum {
    public int value__;
    public static AuditStatusType Started;
    public static AuditStatusType Stopped;
    public static AuditStatusType Failed;
}
public enum Microsoft.SqlServer.Management.Smo.AuthenticationType : Enum {
    public int value__;
    public static AuthenticationType None;
    public static AuthenticationType Instance;
    public static AuthenticationType Database;
    public static AuthenticationType Windows;
    public static AuthenticationType External;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityDatabaseSynchronizationStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityDatabaseSynchronizationState : Enum {
    public int value__;
    [LocDisplayNameAttribute("adssNotSynchronizing")]
public static AvailabilityDatabaseSynchronizationState NotSynchronizing;
    [LocDisplayNameAttribute("adssSynchronizing")]
public static AvailabilityDatabaseSynchronizationState Synchronizing;
    [LocDisplayNameAttribute("adssSynchronized")]
public static AvailabilityDatabaseSynchronizationState Synchronized;
    [LocDisplayNameAttribute("adssReverting")]
public static AvailabilityDatabaseSynchronizationState Reverting;
    [LocDisplayNameAttribute("adssInitializing")]
public static AvailabilityDatabaseSynchronizationState Initializing;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityDatabaseSynchronizationStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityGroupAutomatedBackupPreferenceConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityGroupAutomatedBackupPreference : Enum {
    public int value__;
    [LocDisplayNameAttribute("agabpPrimary")]
public static AvailabilityGroupAutomatedBackupPreference Primary;
    [LocDisplayNameAttribute("agabpSecondaryOnly")]
public static AvailabilityGroupAutomatedBackupPreference SecondaryOnly;
    [LocDisplayNameAttribute("agabpSecondary")]
public static AvailabilityGroupAutomatedBackupPreference Secondary;
    [LocDisplayNameAttribute("agabpNone")]
public static AvailabilityGroupAutomatedBackupPreference None;
    [BrowsableAttribute("False")]
[LocDisplayNameAttribute("Unknown")]
public static AvailabilityGroupAutomatedBackupPreference Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityGroupAutomatedBackupPreferenceConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityGroupClusterTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityGroupClusterType : Enum {
    public int value__;
    [LocDisplayNameAttribute("agctWsfc")]
public static AvailabilityGroupClusterType Wsfc;
    [LocDisplayNameAttribute("agctNone")]
public static AvailabilityGroupClusterType None;
    [LocDisplayNameAttribute("agctExternal")]
public static AvailabilityGroupClusterType External;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityGroupClusterTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityGroupFailureConditionLevelConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityGroupFailureConditionLevel : Enum {
    public int value__;
    [LocDisplayNameAttribute("agfcOnServerDown")]
public static AvailabilityGroupFailureConditionLevel OnServerDown;
    [LocDisplayNameAttribute("agfcOnServerUnresponsive")]
public static AvailabilityGroupFailureConditionLevel OnServerUnresponsive;
    [LocDisplayNameAttribute("agfcOnCriticalServerErrors")]
public static AvailabilityGroupFailureConditionLevel OnCriticalServerErrors;
    [LocDisplayNameAttribute("agfcOnModerateServerErrors")]
public static AvailabilityGroupFailureConditionLevel OnModerateServerErrors;
    [LocDisplayNameAttribute("agfcOnAnyQualifiedFailureCondition")]
public static AvailabilityGroupFailureConditionLevel OnAnyQualifiedFailureCondition;
    [BrowsableAttribute("False")]
[LocDisplayNameAttribute("Unknown")]
public static AvailabilityGroupFailureConditionLevel Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityGroupFailureConditionLevelConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPState : Enum {
    public int value__;
    [LocDisplayNameAttribute("aglipOffline")]
public static AvailabilityGroupListenerIPState Offline;
    [LocDisplayNameAttribute("aglipOnline")]
public static AvailabilityGroupListenerIPState Online;
    [LocDisplayNameAttribute("aglipOnlinePending")]
public static AvailabilityGroupListenerIPState OnlinePending;
    [LocDisplayNameAttribute("agliFailure")]
public static AvailabilityGroupListenerIPState Failure;
    [LocDisplayNameAttribute("agliUnknown")]
public static AvailabilityGroupListenerIPState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityGroupRollupSynchronizationStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityGroupRollupSynchronizationState : Enum {
    public int value__;
    [LocDisplayNameAttribute("agshNoneSynchronizing")]
public static AvailabilityGroupRollupSynchronizationState NoneSynchronizing;
    [LocDisplayNameAttribute("agshPartiallySynchronizing")]
public static AvailabilityGroupRollupSynchronizationState PartiallySynchronizing;
    [LocDisplayNameAttribute("agshAllSynchronizing")]
public static AvailabilityGroupRollupSynchronizationState AllSynchronizing;
    [LocDisplayNameAttribute("agshAllSynchronized")]
public static AvailabilityGroupRollupSynchronizationState AllSynchronized;
    [LocDisplayNameAttribute("Unknown")]
public static AvailabilityGroupRollupSynchronizationState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityGroupRollupSynchronizationStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaAvailabilityModeConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaAvailabilityMode : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("ASYNCHRONOUS_COMMIT")]
[LocDisplayNameAttribute("aramAsynchronousCommit")]
public static AvailabilityReplicaAvailabilityMode AsynchronousCommit;
    [TsqlSyntaxStringAttribute("SYNCHRONOUS_COMMIT")]
[LocDisplayNameAttribute("aramSynchronousCommit")]
public static AvailabilityReplicaAvailabilityMode SynchronousCommit;
    [TsqlSyntaxStringAttribute("CONFIGURATION_ONLY")]
[LocDisplayNameAttribute("aramConfigurationOnly")]
public static AvailabilityReplicaAvailabilityMode ConfigurationOnly;
    [BrowsableAttribute("False")]
[LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaAvailabilityMode Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaAvailabilityModeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionModeInPrimaryRoleConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionModeInPrimaryRole : Enum {
    public int value__;
    [LocDisplayNameAttribute("cmprAllConnections")]
[TsqlSyntaxStringAttribute("ALL")]
public static AvailabilityReplicaConnectionModeInPrimaryRole AllowAllConnections;
    [LocDisplayNameAttribute("cmprReadWriteConnections")]
[TsqlSyntaxStringAttribute("READ_WRITE")]
public static AvailabilityReplicaConnectionModeInPrimaryRole AllowReadWriteConnections;
    [BrowsableAttribute("False")]
[LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaConnectionModeInPrimaryRole Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionModeInPrimaryRoleConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionModeInSecondaryRoleConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionModeInSecondaryRole : Enum {
    public int value__;
    [LocDisplayNameAttribute("cmsrNoConnections")]
[TsqlSyntaxStringAttribute("NO")]
public static AvailabilityReplicaConnectionModeInSecondaryRole AllowNoConnections;
    [LocDisplayNameAttribute("cmsrReadIntentConnectionsOnly")]
[TsqlSyntaxStringAttribute("READ_ONLY")]
public static AvailabilityReplicaConnectionModeInSecondaryRole AllowReadIntentConnectionsOnly;
    [LocDisplayNameAttribute("cmsrAllConnections")]
[TsqlSyntaxStringAttribute("ALL")]
public static AvailabilityReplicaConnectionModeInSecondaryRole AllowAllConnections;
    [BrowsableAttribute("False")]
[LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaConnectionModeInSecondaryRole Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionModeInSecondaryRoleConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionState : Enum {
    public int value__;
    [LocDisplayNameAttribute("arcsDisconnected")]
public static AvailabilityReplicaConnectionState Disconnected;
    [LocDisplayNameAttribute("arcsConnected")]
public static AvailabilityReplicaConnectionState Connected;
    [LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaConnectionState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaConnectionStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaFailoverModeConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaFailoverMode : Enum {
    public int value__;
    [LocDisplayNameAttribute("arfmAutomatic")]
[TsqlSyntaxStringAttribute("AUTOMATIC")]
public static AvailabilityReplicaFailoverMode Automatic;
    [LocDisplayNameAttribute("arfmManual")]
[TsqlSyntaxStringAttribute("MANUAL")]
public static AvailabilityReplicaFailoverMode Manual;
    [LocDisplayNameAttribute("arfmExternal")]
[TsqlSyntaxStringAttribute("EXTERNAL")]
public static AvailabilityReplicaFailoverMode External;
    [BrowsableAttribute("False")]
[LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaFailoverMode Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaFailoverModeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaJoinStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaJoinState : Enum {
    public int value__;
    [LocDisplayNameAttribute("arjsNotJoined")]
public static AvailabilityReplicaJoinState NotJoined;
    [LocDisplayNameAttribute("arjsJoinedStandaloneInstance")]
public static AvailabilityReplicaJoinState JoinedStandaloneInstance;
    [LocDisplayNameAttribute("arjsJoinedFailoverClusterInstance")]
public static AvailabilityReplicaJoinState JoinedFailoverClusterInstance;
    [LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaJoinState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaJoinStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaOperationalStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaOperationalState : Enum {
    public int value__;
    [LocDisplayNameAttribute("arosPendingFailover")]
public static AvailabilityReplicaOperationalState PendingFailover;
    [LocDisplayNameAttribute("arosPending")]
public static AvailabilityReplicaOperationalState Pending;
    [LocDisplayNameAttribute("arosOnline")]
public static AvailabilityReplicaOperationalState Online;
    [LocDisplayNameAttribute("arosOffline")]
public static AvailabilityReplicaOperationalState Offline;
    [LocDisplayNameAttribute("arosFailed")]
public static AvailabilityReplicaOperationalState Failed;
    [LocDisplayNameAttribute("arosFailedNoQuorum")]
public static AvailabilityReplicaOperationalState FailedNoQuorum;
    [LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaOperationalState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaOperationalStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRoleConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRole : Enum {
    public int value__;
    [LocDisplayNameAttribute("arrResolving")]
public static AvailabilityReplicaRole Resolving;
    [LocDisplayNameAttribute("arrPrimary")]
public static AvailabilityReplicaRole Primary;
    [LocDisplayNameAttribute("arrSecondary")]
public static AvailabilityReplicaRole Secondary;
    [LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaRole Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRoleConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRollupRecoveryStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRollupRecoveryState : Enum {
    public int value__;
    [LocDisplayNameAttribute("arrhInProgress")]
public static AvailabilityReplicaRollupRecoveryState InProgress;
    [LocDisplayNameAttribute("arrhOnline")]
public static AvailabilityReplicaRollupRecoveryState Online;
    [LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaRollupRecoveryState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRollupRecoveryStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRollupSynchronizationStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRollupSynchronizationState : Enum {
    public int value__;
    [LocDisplayNameAttribute("arshNotSynchronizing")]
public static AvailabilityReplicaRollupSynchronizationState NotSynchronizing;
    [LocDisplayNameAttribute("arshSynchronizing")]
public static AvailabilityReplicaRollupSynchronizationState Synchronizing;
    [LocDisplayNameAttribute("arshSynchronized")]
public static AvailabilityReplicaRollupSynchronizationState Synchronized;
    [LocDisplayNameAttribute("Unknown")]
public static AvailabilityReplicaRollupSynchronizationState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaRollupSynchronizationStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AvailabilityReplicaSeedingModeConverter")]
public enum Microsoft.SqlServer.Management.Smo.AvailabilityReplicaSeedingMode : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("AUTOMATIC")]
[LocDisplayNameAttribute("seedingModeAutomatic")]
public static AvailabilityReplicaSeedingMode Automatic;
    [TsqlSyntaxStringAttribute("MANUAL")]
[LocDisplayNameAttribute("seedingModeManual")]
public static AvailabilityReplicaSeedingMode Manual;
}
internal class Microsoft.SqlServer.Management.Smo.AvailabilityReplicaSeedingModeConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.BackupDeviceType : Enum {
    public int value__;
    public static BackupDeviceType CDRom;
    public static BackupDeviceType Disk;
    public static BackupDeviceType FloppyA;
    public static BackupDeviceType FloppyB;
    public static BackupDeviceType Pipe;
    public static BackupDeviceType Tape;
    public static BackupDeviceType Url;
    public static BackupDeviceType Unknown;
}
public enum Microsoft.SqlServer.Management.Smo.BackupSetFlag : Enum {
    public int value__;
    public static BackupSetFlag MinimalLogData;
    public static BackupSetFlag WithSnapshot;
    public static BackupSetFlag ReadOnlyDatabase;
    public static BackupSetFlag SingleUserModeDatabase;
}
public enum Microsoft.SqlServer.Management.Smo.BackupSetType : Enum {
    public int value__;
    public static BackupSetType Database;
    public static BackupSetType Differential;
    public static BackupSetType Incremental;
    public static BackupSetType Log;
    public static BackupSetType FileOrFileGroup;
    public static BackupSetType FileOrFileGroupDifferential;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.CatalogCollationTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.CatalogCollationType : Enum {
    public int value__;
    [LocDisplayNameAttribute("dbCatalogCollationDatabaseDefault")]
[TsqlSyntaxStringAttribute("DATABASE_DEFAULT")]
public static CatalogCollationType DatabaseDefault;
    [LocDisplayNameAttribute("dbCatalogCollationContained")]
[TsqlSyntaxStringAttribute("Latin1_General_100_CI_AS_KS_WS_SC")]
public static CatalogCollationType ContainedDatabaseFixedCollation;
    [LocDisplayNameAttribute("dbCatalogCollationSQL_Latin1_General_CP1_CI_AS")]
[TsqlSyntaxStringAttribute("SQL_Latin1_General_CP1_CI_AS")]
public static CatalogCollationType SQLLatin1GeneralCP1CIAS;
}
public class Microsoft.SqlServer.Management.Smo.CatalogCollationTypeConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.CatalogPopulationAction : Enum {
    public int value__;
    public static CatalogPopulationAction Full;
    public static CatalogPopulationAction Incremental;
}
public enum Microsoft.SqlServer.Management.Smo.CatalogPopulationStatus : Enum {
    public int value__;
    public static CatalogPopulationStatus Idle;
    public static CatalogPopulationStatus CrawlinProgress;
    public static CatalogPopulationStatus Paused;
    public static CatalogPopulationStatus Throttled;
    public static CatalogPopulationStatus Recovering;
    public static CatalogPopulationStatus Shutdown;
    public static CatalogPopulationStatus Incremental;
    public static CatalogPopulationStatus UpdatingIndex;
    public static CatalogPopulationStatus DiskFullPause;
    public static CatalogPopulationStatus Notification;
}
internal enum Microsoft.SqlServer.Management.Smo.CategoryClass : Enum {
    public int value__;
    public static CategoryClass Job;
    public static CategoryClass Alert;
    public static CategoryClass Operator;
}
public enum Microsoft.SqlServer.Management.Smo.ChangeTracking : Enum {
    public int value__;
    public static ChangeTracking Off;
    public static ChangeTracking Automatic;
    public static ChangeTracking Manual;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ClusterMemberStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.ClusterMemberState : Enum {
    public int value__;
    [LocDisplayNameAttribute("cmsOffline")]
public static ClusterMemberState Offline;
    [LocDisplayNameAttribute("cmsOnline")]
public static ClusterMemberState Online;
    [LocDisplayNameAttribute("cmsPartiallyOnline")]
public static ClusterMemberState PartiallyOnline;
    [LocDisplayNameAttribute("cmsUnknown")]
public static ClusterMemberState Unknown;
}
internal class Microsoft.SqlServer.Management.Smo.ClusterMemberStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ClusterMemberTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ClusterMemberType : Enum {
    public int value__;
    [LocDisplayNameAttribute("cmtNode")]
public static ClusterMemberType Node;
    [LocDisplayNameAttribute("cmtDiskWitness")]
public static ClusterMemberType DiskWitness;
    [LocDisplayNameAttribute("cmtFileshareWitness")]
public static ClusterMemberType FileshareWitness;
    [LocDisplayNameAttribute("cmtCloudWitness")]
public static ClusterMemberType CloudWitness;
}
internal class Microsoft.SqlServer.Management.Smo.ClusterMemberTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ClusterQuorumStateConverter")]
public enum Microsoft.SqlServer.Management.Smo.ClusterQuorumState : Enum {
    public int value__;
    [LocDisplayNameAttribute("cqsUnknownQuorumState")]
public static ClusterQuorumState UnknownQuorumState;
    [LocDisplayNameAttribute("cqsNormalQuorum")]
public static ClusterQuorumState NormalQuorum;
    [LocDisplayNameAttribute("cqsForcedQuorum")]
public static ClusterQuorumState ForcedQuorum;
    [LocDisplayNameAttribute("cqsNotApplicable")]
public static ClusterQuorumState NotApplicable;
}
internal class Microsoft.SqlServer.Management.Smo.ClusterQuorumStateConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ClusterQuorumTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ClusterQuorumType : Enum {
    public int value__;
    [LocDisplayNameAttribute("cqtNodeMajority")]
public static ClusterQuorumType NodeMajority;
    [LocDisplayNameAttribute("cqtNodeAndDiskMajority")]
public static ClusterQuorumType NodeAndDiskMajority;
    [LocDisplayNameAttribute("cqtNodeAndFileshareMajority")]
public static ClusterQuorumType NodeAndFileshareMajority;
    [LocDisplayNameAttribute("cqtDiskOnly")]
public static ClusterQuorumType DiskOnly;
    [LocDisplayNameAttribute("cqtNotApplicable")]
public static ClusterQuorumType NotApplicable;
    [LocDisplayNameAttribute("cqtCloudWitness")]
public static ClusterQuorumType CloudWitness;
}
internal class Microsoft.SqlServer.Management.Smo.ClusterQuorumTypeConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.CollationVersion : Enum {
    public int value__;
    public static CollationVersion Version80;
    public static CollationVersion Version90;
    public static CollationVersion Version100;
    public static CollationVersion Version105;
    public static CollationVersion Version110;
    public static CollationVersion Version120;
    public static CollationVersion Version130;
    public static CollationVersion Version140;
    public static CollationVersion Version150;
    public static CollationVersion Version160;
}
public enum Microsoft.SqlServer.Management.Smo.ColumnEncryptionType : Enum {
    public int value__;
    public static ColumnEncryptionType Deterministic;
    public static ColumnEncryptionType Randomized;
}
public enum Microsoft.SqlServer.Management.Smo.CompatibilityLevel : Enum {
    public int value__;
    public static CompatibilityLevel Version60;
    public static CompatibilityLevel Version65;
    public static CompatibilityLevel Version70;
    public static CompatibilityLevel Version80;
    public static CompatibilityLevel Version90;
    public static CompatibilityLevel Version100;
    public static CompatibilityLevel Version110;
    public static CompatibilityLevel Version120;
    public static CompatibilityLevel Version130;
    public static CompatibilityLevel Version140;
    public static CompatibilityLevel Version150;
    public static CompatibilityLevel Version160;
}
[ComVisibleAttribute("False")]
internal abstract class Microsoft.SqlServer.Management.Smo.ConditionedSql : object {
    private bool m_used;
    private LinkMultiple m_LinkMultiple;
    private StringCollection m_cols;
    internal StringCollection Fields { get; }
    public bool IsUsed { get; }
    protected bool AcceptsMultipleHits { get; }
    public bool Used { get; }
    public LinkMultiple LinkMultiple { get; public set; }
    public ArrayList LinkFields { get; }
    public void SetFields(StringCollection fields);
    internal StringCollection get_Fields();
    public bool get_IsUsed();
    public bool IsHit(string field);
    protected bool TestHit(string field);
    public bool IsDefault();
    protected virtual bool get_AcceptsMultipleHits();
    public bool get_Used();
    public void MarkHit();
    public void ClearHit();
    public LinkMultiple get_LinkMultiple();
    public void set_LinkMultiple(LinkMultiple value);
    public void AddLinkMultiple(XmlReadMultipleLink xrmpl);
    public ArrayList get_LinkFields();
    public abstract virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.ConditionedSqlList : object {
    private ArrayList m_conditionedSqlList;
    public int Count { get; }
    public ConditionedSql Item { get; }
    public int get_Count();
    public void Add(ConditionedSql obj);
    public void ClearHits();
    public bool AddHits(SqlObjectBase obj, string field, StatementBuilder sb);
    public void AddDefault(StatementBuilder sb);
    public ConditionedSql get_Item(int i);
    public IEnumerator GetEnumerator();
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ContainmentTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ContainmentType : Enum {
    public int value__;
    [LocDisplayNameAttribute("ctNone")]
public static ContainmentType None;
    [LocDisplayNameAttribute("ctPartial")]
public static ContainmentType Partial;
}
internal class Microsoft.SqlServer.Management.Smo.ContainmentTypeConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.CreateDispositionType : Enum {
    public int value__;
    public static CreateDispositionType CreateNew;
    public static CreateDispositionType OpenExisting;
}
internal enum Microsoft.SqlServer.Management.Smo.DatabaseCategory : Enum {
    public int value__;
    public static DatabaseCategory Published;
    public static DatabaseCategory Subscribed;
    public static DatabaseCategory MergePublished;
    public static DatabaseCategory MergeSubscribed;
}
public class Microsoft.SqlServer.Management.Smo.DatabaseDdlTriggerEvent : object {
    private DatabaseDdlTriggerEventValues m_value;
    internal DatabaseDdlTriggerEventValues Value { get; }
    public static DatabaseDdlTriggerEvent AddRoleMember { get; }
    public static DatabaseDdlTriggerEvent AddSensitivityClassification { get; }
    public static DatabaseDdlTriggerEvent AddSignature { get; }
    public static DatabaseDdlTriggerEvent AddSignatureSchemaObject { get; }
    public static DatabaseDdlTriggerEvent AlterApplicationRole { get; }
    public static DatabaseDdlTriggerEvent AlterAssembly { get; }
    public static DatabaseDdlTriggerEvent AlterAsymmetricKey { get; }
    public static DatabaseDdlTriggerEvent AlterAudit { get; }
    public static DatabaseDdlTriggerEvent AlterAuthorizationDatabase { get; }
    public static DatabaseDdlTriggerEvent AlterBrokerPriority { get; }
    public static DatabaseDdlTriggerEvent AlterCertificate { get; }
    public static DatabaseDdlTriggerEvent AlterColumnEncryptionKey { get; }
    public static DatabaseDdlTriggerEvent AlterDatabaseAuditSpecification { get; }
    public static DatabaseDdlTriggerEvent AlterDatabaseEncryptionKey { get; }
    public static DatabaseDdlTriggerEvent AlterDatabaseScopedConfiguration { get; }
    public static DatabaseDdlTriggerEvent AlterExtendedProperty { get; }
    public static DatabaseDdlTriggerEvent AlterExternalLanguage { get; }
    public static DatabaseDdlTriggerEvent AlterExternalLibrary { get; }
    public static DatabaseDdlTriggerEvent AlterFulltextCatalog { get; }
    public static DatabaseDdlTriggerEvent AlterFulltextIndex { get; }
    public static DatabaseDdlTriggerEvent AlterFulltextStoplist { get; }
    public static DatabaseDdlTriggerEvent AlterFunction { get; }
    public static DatabaseDdlTriggerEvent AlterIndex { get; }
    public static DatabaseDdlTriggerEvent AlterMasterKey { get; }
    public static DatabaseDdlTriggerEvent AlterMessageType { get; }
    public static DatabaseDdlTriggerEvent AlterPartitionFunction { get; }
    public static DatabaseDdlTriggerEvent AlterPartitionScheme { get; }
    public static DatabaseDdlTriggerEvent AlterPlanGuide { get; }
    public static DatabaseDdlTriggerEvent AlterProcedure { get; }
    public static DatabaseDdlTriggerEvent AlterQueue { get; }
    public static DatabaseDdlTriggerEvent AlterRemoteServiceBinding { get; }
    public static DatabaseDdlTriggerEvent AlterRole { get; }
    public static DatabaseDdlTriggerEvent AlterRoute { get; }
    public static DatabaseDdlTriggerEvent AlterSchema { get; }
    public static DatabaseDdlTriggerEvent AlterSearchPropertyList { get; }
    public static DatabaseDdlTriggerEvent AlterSecurityPolicy { get; }
    public static DatabaseDdlTriggerEvent AlterSequence { get; }
    public static DatabaseDdlTriggerEvent AlterService { get; }
    public static DatabaseDdlTriggerEvent AlterSymmetricKey { get; }
    public static DatabaseDdlTriggerEvent AlterTable { get; }
    public static DatabaseDdlTriggerEvent AlterTrigger { get; }
    public static DatabaseDdlTriggerEvent AlterUser { get; }
    public static DatabaseDdlTriggerEvent AlterView { get; }
    public static DatabaseDdlTriggerEvent AlterXmlSchemaCollection { get; }
    public static DatabaseDdlTriggerEvent BindDefault { get; }
    public static DatabaseDdlTriggerEvent BindRule { get; }
    public static DatabaseDdlTriggerEvent CreateApplicationRole { get; }
    public static DatabaseDdlTriggerEvent CreateAssembly { get; }
    public static DatabaseDdlTriggerEvent CreateAsymmetricKey { get; }
    public static DatabaseDdlTriggerEvent CreateAudit { get; }
    public static DatabaseDdlTriggerEvent CreateBrokerPriority { get; }
    public static DatabaseDdlTriggerEvent CreateCertificate { get; }
    public static DatabaseDdlTriggerEvent CreateColumnEncryptionKey { get; }
    public static DatabaseDdlTriggerEvent CreateColumnMasterKey { get; }
    public static DatabaseDdlTriggerEvent CreateContract { get; }
    public static DatabaseDdlTriggerEvent CreateDatabaseAuditSpecification { get; }
    public static DatabaseDdlTriggerEvent CreateDatabaseEncryptionKey { get; }
    public static DatabaseDdlTriggerEvent CreateDefault { get; }
    public static DatabaseDdlTriggerEvent CreateEventNotification { get; }
    public static DatabaseDdlTriggerEvent CreateExtendedProperty { get; }
    public static DatabaseDdlTriggerEvent CreateExternalLanguage { get; }
    public static DatabaseDdlTriggerEvent CreateExternalLibrary { get; }
    public static DatabaseDdlTriggerEvent CreateFulltextCatalog { get; }
    public static DatabaseDdlTriggerEvent CreateFulltextIndex { get; }
    public static DatabaseDdlTriggerEvent CreateFulltextStoplist { get; }
    public static DatabaseDdlTriggerEvent CreateFunction { get; }
    public static DatabaseDdlTriggerEvent CreateIndex { get; }
    public static DatabaseDdlTriggerEvent CreateMasterKey { get; }
    public static DatabaseDdlTriggerEvent CreateMessageType { get; }
    public static DatabaseDdlTriggerEvent CreatePartitionFunction { get; }
    public static DatabaseDdlTriggerEvent CreatePartitionScheme { get; }
    public static DatabaseDdlTriggerEvent CreatePlanGuide { get; }
    public static DatabaseDdlTriggerEvent CreateProcedure { get; }
    public static DatabaseDdlTriggerEvent CreateQueue { get; }
    public static DatabaseDdlTriggerEvent CreateRemoteServiceBinding { get; }
    public static DatabaseDdlTriggerEvent CreateRole { get; }
    public static DatabaseDdlTriggerEvent CreateRoute { get; }
    public static DatabaseDdlTriggerEvent CreateRule { get; }
    public static DatabaseDdlTriggerEvent CreateSchema { get; }
    public static DatabaseDdlTriggerEvent CreateSearchPropertyList { get; }
    public static DatabaseDdlTriggerEvent CreateSecurityPolicy { get; }
    public static DatabaseDdlTriggerEvent CreateSequence { get; }
    public static DatabaseDdlTriggerEvent CreateService { get; }
    public static DatabaseDdlTriggerEvent CreateSpatialIndex { get; }
    public static DatabaseDdlTriggerEvent CreateStatistics { get; }
    public static DatabaseDdlTriggerEvent CreateSymmetricKey { get; }
    public static DatabaseDdlTriggerEvent CreateSynonym { get; }
    public static DatabaseDdlTriggerEvent CreateTable { get; }
    public static DatabaseDdlTriggerEvent CreateTrigger { get; }
    public static DatabaseDdlTriggerEvent CreateType { get; }
    public static DatabaseDdlTriggerEvent CreateUser { get; }
    public static DatabaseDdlTriggerEvent CreateView { get; }
    public static DatabaseDdlTriggerEvent CreateXmlIndex { get; }
    public static DatabaseDdlTriggerEvent CreateXmlSchemaCollection { get; }
    public static DatabaseDdlTriggerEvent DenyDatabase { get; }
    public static DatabaseDdlTriggerEvent DropApplicationRole { get; }
    public static DatabaseDdlTriggerEvent DropAssembly { get; }
    public static DatabaseDdlTriggerEvent DropAsymmetricKey { get; }
    public static DatabaseDdlTriggerEvent DropAudit { get; }
    public static DatabaseDdlTriggerEvent DropBrokerPriority { get; }
    public static DatabaseDdlTriggerEvent DropCertificate { get; }
    public static DatabaseDdlTriggerEvent DropColumnEncryptionKey { get; }
    public static DatabaseDdlTriggerEvent DropColumnMasterKey { get; }
    public static DatabaseDdlTriggerEvent DropContract { get; }
    public static DatabaseDdlTriggerEvent DropDatabaseAuditSpecification { get; }
    public static DatabaseDdlTriggerEvent DropDatabaseEncryptionKey { get; }
    public static DatabaseDdlTriggerEvent DropDefault { get; }
    public static DatabaseDdlTriggerEvent DropEventNotification { get; }
    public static DatabaseDdlTriggerEvent DropExtendedProperty { get; }
    public static DatabaseDdlTriggerEvent DropExternalLanguage { get; }
    public static DatabaseDdlTriggerEvent DropExternalLibrary { get; }
    public static DatabaseDdlTriggerEvent DropFulltextCatalog { get; }
    public static DatabaseDdlTriggerEvent DropFulltextIndex { get; }
    public static DatabaseDdlTriggerEvent DropFulltextStoplist { get; }
    public static DatabaseDdlTriggerEvent DropFunction { get; }
    public static DatabaseDdlTriggerEvent DropIndex { get; }
    public static DatabaseDdlTriggerEvent DropMasterKey { get; }
    public static DatabaseDdlTriggerEvent DropMessageType { get; }
    public static DatabaseDdlTriggerEvent DropPartitionFunction { get; }
    public static DatabaseDdlTriggerEvent DropPartitionScheme { get; }
    public static DatabaseDdlTriggerEvent DropPlanGuide { get; }
    public static DatabaseDdlTriggerEvent DropProcedure { get; }
    public static DatabaseDdlTriggerEvent DropQueue { get; }
    public static DatabaseDdlTriggerEvent DropRemoteServiceBinding { get; }
    public static DatabaseDdlTriggerEvent DropRole { get; }
    public static DatabaseDdlTriggerEvent DropRoleMember { get; }
    public static DatabaseDdlTriggerEvent DropRoute { get; }
    public static DatabaseDdlTriggerEvent DropRule { get; }
    public static DatabaseDdlTriggerEvent DropSchema { get; }
    public static DatabaseDdlTriggerEvent DropSearchPropertyList { get; }
    public static DatabaseDdlTriggerEvent DropSecurityPolicy { get; }
    public static DatabaseDdlTriggerEvent DropSensitivityClassification { get; }
    public static DatabaseDdlTriggerEvent DropSequence { get; }
    public static DatabaseDdlTriggerEvent DropService { get; }
    public static DatabaseDdlTriggerEvent DropSignature { get; }
    public static DatabaseDdlTriggerEvent DropSignatureSchemaObject { get; }
    public static DatabaseDdlTriggerEvent DropStatistics { get; }
    public static DatabaseDdlTriggerEvent DropSymmetricKey { get; }
    public static DatabaseDdlTriggerEvent DropSynonym { get; }
    public static DatabaseDdlTriggerEvent DropTable { get; }
    public static DatabaseDdlTriggerEvent DropTrigger { get; }
    public static DatabaseDdlTriggerEvent DropType { get; }
    public static DatabaseDdlTriggerEvent DropUser { get; }
    public static DatabaseDdlTriggerEvent DropView { get; }
    public static DatabaseDdlTriggerEvent DropXmlSchemaCollection { get; }
    public static DatabaseDdlTriggerEvent GrantDatabase { get; }
    public static DatabaseDdlTriggerEvent Rename { get; }
    public static DatabaseDdlTriggerEvent RevokeDatabase { get; }
    public static DatabaseDdlTriggerEvent UnbindDefault { get; }
    public static DatabaseDdlTriggerEvent UnbindRule { get; }
    public static DatabaseDdlTriggerEvent UpdateStatistics { get; }
    internal DatabaseDdlTriggerEvent(DatabaseDdlTriggerEventValues eventValue);
    internal DatabaseDdlTriggerEventValues get_Value();
    public static DatabaseDdlTriggerEventSet op_Implicit(DatabaseDdlTriggerEvent eventValue);
    public static DatabaseDdlTriggerEventSet op_Addition(DatabaseDdlTriggerEvent eventLeft, DatabaseDdlTriggerEvent eventRight);
    public static DatabaseDdlTriggerEventSet Add(DatabaseDdlTriggerEvent eventLeft, DatabaseDdlTriggerEvent eventRight);
    public static DatabaseDdlTriggerEventSet op_BitwiseOr(DatabaseDdlTriggerEvent eventLeft, DatabaseDdlTriggerEvent eventRight);
    public static DatabaseDdlTriggerEventSet BitwiseOr(DatabaseDdlTriggerEvent eventLeft, DatabaseDdlTriggerEvent eventRight);
    public virtual string ToString();
    public static DatabaseDdlTriggerEvent get_AddRoleMember();
    public static DatabaseDdlTriggerEvent get_AddSensitivityClassification();
    public static DatabaseDdlTriggerEvent get_AddSignature();
    public static DatabaseDdlTriggerEvent get_AddSignatureSchemaObject();
    public static DatabaseDdlTriggerEvent get_AlterApplicationRole();
    public static DatabaseDdlTriggerEvent get_AlterAssembly();
    public static DatabaseDdlTriggerEvent get_AlterAsymmetricKey();
    public static DatabaseDdlTriggerEvent get_AlterAudit();
    public static DatabaseDdlTriggerEvent get_AlterAuthorizationDatabase();
    public static DatabaseDdlTriggerEvent get_AlterBrokerPriority();
    public static DatabaseDdlTriggerEvent get_AlterCertificate();
    public static DatabaseDdlTriggerEvent get_AlterColumnEncryptionKey();
    public static DatabaseDdlTriggerEvent get_AlterDatabaseAuditSpecification();
    public static DatabaseDdlTriggerEvent get_AlterDatabaseEncryptionKey();
    public static DatabaseDdlTriggerEvent get_AlterDatabaseScopedConfiguration();
    public static DatabaseDdlTriggerEvent get_AlterExtendedProperty();
    public static DatabaseDdlTriggerEvent get_AlterExternalLanguage();
    public static DatabaseDdlTriggerEvent get_AlterExternalLibrary();
    public static DatabaseDdlTriggerEvent get_AlterFulltextCatalog();
    public static DatabaseDdlTriggerEvent get_AlterFulltextIndex();
    public static DatabaseDdlTriggerEvent get_AlterFulltextStoplist();
    public static DatabaseDdlTriggerEvent get_AlterFunction();
    public static DatabaseDdlTriggerEvent get_AlterIndex();
    public static DatabaseDdlTriggerEvent get_AlterMasterKey();
    public static DatabaseDdlTriggerEvent get_AlterMessageType();
    public static DatabaseDdlTriggerEvent get_AlterPartitionFunction();
    public static DatabaseDdlTriggerEvent get_AlterPartitionScheme();
    public static DatabaseDdlTriggerEvent get_AlterPlanGuide();
    public static DatabaseDdlTriggerEvent get_AlterProcedure();
    public static DatabaseDdlTriggerEvent get_AlterQueue();
    public static DatabaseDdlTriggerEvent get_AlterRemoteServiceBinding();
    public static DatabaseDdlTriggerEvent get_AlterRole();
    public static DatabaseDdlTriggerEvent get_AlterRoute();
    public static DatabaseDdlTriggerEvent get_AlterSchema();
    public static DatabaseDdlTriggerEvent get_AlterSearchPropertyList();
    public static DatabaseDdlTriggerEvent get_AlterSecurityPolicy();
    public static DatabaseDdlTriggerEvent get_AlterSequence();
    public static DatabaseDdlTriggerEvent get_AlterService();
    public static DatabaseDdlTriggerEvent get_AlterSymmetricKey();
    public static DatabaseDdlTriggerEvent get_AlterTable();
    public static DatabaseDdlTriggerEvent get_AlterTrigger();
    public static DatabaseDdlTriggerEvent get_AlterUser();
    public static DatabaseDdlTriggerEvent get_AlterView();
    public static DatabaseDdlTriggerEvent get_AlterXmlSchemaCollection();
    public static DatabaseDdlTriggerEvent get_BindDefault();
    public static DatabaseDdlTriggerEvent get_BindRule();
    public static DatabaseDdlTriggerEvent get_CreateApplicationRole();
    public static DatabaseDdlTriggerEvent get_CreateAssembly();
    public static DatabaseDdlTriggerEvent get_CreateAsymmetricKey();
    public static DatabaseDdlTriggerEvent get_CreateAudit();
    public static DatabaseDdlTriggerEvent get_CreateBrokerPriority();
    public static DatabaseDdlTriggerEvent get_CreateCertificate();
    public static DatabaseDdlTriggerEvent get_CreateColumnEncryptionKey();
    public static DatabaseDdlTriggerEvent get_CreateColumnMasterKey();
    public static DatabaseDdlTriggerEvent get_CreateContract();
    public static DatabaseDdlTriggerEvent get_CreateDatabaseAuditSpecification();
    public static DatabaseDdlTriggerEvent get_CreateDatabaseEncryptionKey();
    public static DatabaseDdlTriggerEvent get_CreateDefault();
    public static DatabaseDdlTriggerEvent get_CreateEventNotification();
    public static DatabaseDdlTriggerEvent get_CreateExtendedProperty();
    public static DatabaseDdlTriggerEvent get_CreateExternalLanguage();
    public static DatabaseDdlTriggerEvent get_CreateExternalLibrary();
    public static DatabaseDdlTriggerEvent get_CreateFulltextCatalog();
    public static DatabaseDdlTriggerEvent get_CreateFulltextIndex();
    public static DatabaseDdlTriggerEvent get_CreateFulltextStoplist();
    public static DatabaseDdlTriggerEvent get_CreateFunction();
    public static DatabaseDdlTriggerEvent get_CreateIndex();
    public static DatabaseDdlTriggerEvent get_CreateMasterKey();
    public static DatabaseDdlTriggerEvent get_CreateMessageType();
    public static DatabaseDdlTriggerEvent get_CreatePartitionFunction();
    public static DatabaseDdlTriggerEvent get_CreatePartitionScheme();
    public static DatabaseDdlTriggerEvent get_CreatePlanGuide();
    public static DatabaseDdlTriggerEvent get_CreateProcedure();
    public static DatabaseDdlTriggerEvent get_CreateQueue();
    public static DatabaseDdlTriggerEvent get_CreateRemoteServiceBinding();
    public static DatabaseDdlTriggerEvent get_CreateRole();
    public static DatabaseDdlTriggerEvent get_CreateRoute();
    public static DatabaseDdlTriggerEvent get_CreateRule();
    public static DatabaseDdlTriggerEvent get_CreateSchema();
    public static DatabaseDdlTriggerEvent get_CreateSearchPropertyList();
    public static DatabaseDdlTriggerEvent get_CreateSecurityPolicy();
    public static DatabaseDdlTriggerEvent get_CreateSequence();
    public static DatabaseDdlTriggerEvent get_CreateService();
    public static DatabaseDdlTriggerEvent get_CreateSpatialIndex();
    public static DatabaseDdlTriggerEvent get_CreateStatistics();
    public static DatabaseDdlTriggerEvent get_CreateSymmetricKey();
    public static DatabaseDdlTriggerEvent get_CreateSynonym();
    public static DatabaseDdlTriggerEvent get_CreateTable();
    public static DatabaseDdlTriggerEvent get_CreateTrigger();
    public static DatabaseDdlTriggerEvent get_CreateType();
    public static DatabaseDdlTriggerEvent get_CreateUser();
    public static DatabaseDdlTriggerEvent get_CreateView();
    public static DatabaseDdlTriggerEvent get_CreateXmlIndex();
    public static DatabaseDdlTriggerEvent get_CreateXmlSchemaCollection();
    public static DatabaseDdlTriggerEvent get_DenyDatabase();
    public static DatabaseDdlTriggerEvent get_DropApplicationRole();
    public static DatabaseDdlTriggerEvent get_DropAssembly();
    public static DatabaseDdlTriggerEvent get_DropAsymmetricKey();
    public static DatabaseDdlTriggerEvent get_DropAudit();
    public static DatabaseDdlTriggerEvent get_DropBrokerPriority();
    public static DatabaseDdlTriggerEvent get_DropCertificate();
    public static DatabaseDdlTriggerEvent get_DropColumnEncryptionKey();
    public static DatabaseDdlTriggerEvent get_DropColumnMasterKey();
    public static DatabaseDdlTriggerEvent get_DropContract();
    public static DatabaseDdlTriggerEvent get_DropDatabaseAuditSpecification();
    public static DatabaseDdlTriggerEvent get_DropDatabaseEncryptionKey();
    public static DatabaseDdlTriggerEvent get_DropDefault();
    public static DatabaseDdlTriggerEvent get_DropEventNotification();
    public static DatabaseDdlTriggerEvent get_DropExtendedProperty();
    public static DatabaseDdlTriggerEvent get_DropExternalLanguage();
    public static DatabaseDdlTriggerEvent get_DropExternalLibrary();
    public static DatabaseDdlTriggerEvent get_DropFulltextCatalog();
    public static DatabaseDdlTriggerEvent get_DropFulltextIndex();
    public static DatabaseDdlTriggerEvent get_DropFulltextStoplist();
    public static DatabaseDdlTriggerEvent get_DropFunction();
    public static DatabaseDdlTriggerEvent get_DropIndex();
    public static DatabaseDdlTriggerEvent get_DropMasterKey();
    public static DatabaseDdlTriggerEvent get_DropMessageType();
    public static DatabaseDdlTriggerEvent get_DropPartitionFunction();
    public static DatabaseDdlTriggerEvent get_DropPartitionScheme();
    public static DatabaseDdlTriggerEvent get_DropPlanGuide();
    public static DatabaseDdlTriggerEvent get_DropProcedure();
    public static DatabaseDdlTriggerEvent get_DropQueue();
    public static DatabaseDdlTriggerEvent get_DropRemoteServiceBinding();
    public static DatabaseDdlTriggerEvent get_DropRole();
    public static DatabaseDdlTriggerEvent get_DropRoleMember();
    public static DatabaseDdlTriggerEvent get_DropRoute();
    public static DatabaseDdlTriggerEvent get_DropRule();
    public static DatabaseDdlTriggerEvent get_DropSchema();
    public static DatabaseDdlTriggerEvent get_DropSearchPropertyList();
    public static DatabaseDdlTriggerEvent get_DropSecurityPolicy();
    public static DatabaseDdlTriggerEvent get_DropSensitivityClassification();
    public static DatabaseDdlTriggerEvent get_DropSequence();
    public static DatabaseDdlTriggerEvent get_DropService();
    public static DatabaseDdlTriggerEvent get_DropSignature();
    public static DatabaseDdlTriggerEvent get_DropSignatureSchemaObject();
    public static DatabaseDdlTriggerEvent get_DropStatistics();
    public static DatabaseDdlTriggerEvent get_DropSymmetricKey();
    public static DatabaseDdlTriggerEvent get_DropSynonym();
    public static DatabaseDdlTriggerEvent get_DropTable();
    public static DatabaseDdlTriggerEvent get_DropTrigger();
    public static DatabaseDdlTriggerEvent get_DropType();
    public static DatabaseDdlTriggerEvent get_DropUser();
    public static DatabaseDdlTriggerEvent get_DropView();
    public static DatabaseDdlTriggerEvent get_DropXmlSchemaCollection();
    public static DatabaseDdlTriggerEvent get_GrantDatabase();
    public static DatabaseDdlTriggerEvent get_Rename();
    public static DatabaseDdlTriggerEvent get_RevokeDatabase();
    public static DatabaseDdlTriggerEvent get_UnbindDefault();
    public static DatabaseDdlTriggerEvent get_UnbindRule();
    public static DatabaseDdlTriggerEvent get_UpdateStatistics();
}
public class Microsoft.SqlServer.Management.Smo.DatabaseDdlTriggerEventSet : EventSetBase {
    private bool dirty;
    private static DatabaseDdlTriggerEventSet ddlapplicationroleeventsevents;
    private static DatabaseDdlTriggerEventSet ddlassemblyeventsevents;
    private static DatabaseDdlTriggerEventSet ddlasymmetrickeyeventsevents;
    private static DatabaseDdlTriggerEventSet ddlauthorizationdatabaseeventsevents;
    private static DatabaseDdlTriggerEventSet ddlremoteservicebindingeventsevents;
    private static DatabaseDdlTriggerEventSet ddlcertificateeventsevents;
    private static DatabaseDdlTriggerEventSet ddlcolumnencryptionkeyeventsevents;
    private static DatabaseDdlTriggerEventSet ddlcolumnmasterkeyeventsevents;
    private static DatabaseDdlTriggerEventSet ddlcontracteventsevents;
    private static DatabaseDdlTriggerEventSet ddlcryptosignatureeventsevents;
    private static DatabaseDdlTriggerEventSet ddldatabaseleveleventsevents;
    private static DatabaseDdlTriggerEventSet ddldatabaseauditeventsevents;
    private static DatabaseDdlTriggerEventSet ddldatabaseauditspecificationeventsevents;
    private static DatabaseDdlTriggerEventSet ddlmasterkeyeventsevents;
    private static DatabaseDdlTriggerEventSet ddldatabasesecurityeventsevents;
    private static DatabaseDdlTriggerEventSet ddldefaulteventsevents;
    private static DatabaseDdlTriggerEventSet ddldatabaseencryptionkeyeventsevents;
    private static DatabaseDdlTriggerEventSet ddleventnotificationeventsevents;
    private static DatabaseDdlTriggerEventSet ddlextendedpropertyeventsevents;
    private static DatabaseDdlTriggerEventSet ddlexternallanguageeventsevents;
    private static DatabaseDdlTriggerEventSet ddlfulltextcatalogeventsevents;
    private static DatabaseDdlTriggerEventSet ddlfulltextstoplisteventsevents;
    private static DatabaseDdlTriggerEventSet ddlfunctioneventsevents;
    private static DatabaseDdlTriggerEventSet ddlgdrdatabaseeventsevents;
    private static DatabaseDdlTriggerEventSet ddlindexeventsevents;
    private static DatabaseDdlTriggerEventSet ddllibraryeventsevents;
    private static DatabaseDdlTriggerEventSet ddlmessagetypeeventsevents;
    private static DatabaseDdlTriggerEventSet ddlsymmetrickeyeventsevents;
    private static DatabaseDdlTriggerEventSet ddlpartitioneventsevents;
    private static DatabaseDdlTriggerEventSet ddlplanguideeventsevents;
    private static DatabaseDdlTriggerEventSet ddlbrokerpriorityeventsevents;
    private static DatabaseDdlTriggerEventSet ddlsearchpropertylisteventsevents;
    private static DatabaseDdlTriggerEventSet ddlpartitionfunctioneventsevents;
    private static DatabaseDdlTriggerEventSet ddlpartitionschemeeventsevents;
    private static DatabaseDdlTriggerEventSet ddlqueueeventsevents;
    private static DatabaseDdlTriggerEventSet ddlroleeventsevents;
    private static DatabaseDdlTriggerEventSet ddlrouteeventsevents;
    private static DatabaseDdlTriggerEventSet ddlruleeventsevents;
    private static DatabaseDdlTriggerEventSet ddlschemaeventsevents;
    private static DatabaseDdlTriggerEventSet ddlsecuritypolicyeventsevents;
    private static DatabaseDdlTriggerEventSet ddlsensitivityeventsevents;
    private static DatabaseDdlTriggerEventSet ddlsequenceeventsevents;
    private static DatabaseDdlTriggerEventSet ddlserviceeventsevents;
    private static DatabaseDdlTriggerEventSet ddlssbeventsevents;
    private static DatabaseDdlTriggerEventSet ddlstatisticseventsevents;
    private static DatabaseDdlTriggerEventSet ddlprocedureeventsevents;
    private static DatabaseDdlTriggerEventSet ddlsynonymeventsevents;
    private static DatabaseDdlTriggerEventSet ddltableeventsevents;
    private static DatabaseDdlTriggerEventSet ddltablevieweventsevents;
    private static DatabaseDdlTriggerEventSet ddltriggereventsevents;
    private static DatabaseDdlTriggerEventSet ddltypeeventsevents;
    private static DatabaseDdlTriggerEventSet ddlusereventsevents;
    private static DatabaseDdlTriggerEventSet ddlvieweventsevents;
    private static DatabaseDdlTriggerEventSet ddlxmlschemacollectioneventsevents;
    public int NumberOfElements { get; }
    public bool Dirty { get; public set; }
    public bool AddRoleMember { get; public set; }
    public bool AddSensitivityClassification { get; public set; }
    public bool AddSignature { get; public set; }
    public bool AddSignatureSchemaObject { get; public set; }
    public bool AlterApplicationRole { get; public set; }
    public bool AlterAssembly { get; public set; }
    public bool AlterAsymmetricKey { get; public set; }
    public bool AlterAudit { get; public set; }
    public bool AlterAuthorizationDatabase { get; public set; }
    public bool AlterBrokerPriority { get; public set; }
    public bool AlterCertificate { get; public set; }
    public bool AlterColumnEncryptionKey { get; public set; }
    public bool AlterDatabaseAuditSpecification { get; public set; }
    public bool AlterDatabaseEncryptionKey { get; public set; }
    public bool AlterDatabaseScopedConfiguration { get; public set; }
    public bool AlterExtendedProperty { get; public set; }
    public bool AlterExternalLanguage { get; public set; }
    public bool AlterExternalLibrary { get; public set; }
    public bool AlterFulltextCatalog { get; public set; }
    public bool AlterFulltextIndex { get; public set; }
    public bool AlterFulltextStoplist { get; public set; }
    public bool AlterFunction { get; public set; }
    public bool AlterIndex { get; public set; }
    public bool AlterMasterKey { get; public set; }
    public bool AlterMessageType { get; public set; }
    public bool AlterPartitionFunction { get; public set; }
    public bool AlterPartitionScheme { get; public set; }
    public bool AlterPlanGuide { get; public set; }
    public bool AlterProcedure { get; public set; }
    public bool AlterQueue { get; public set; }
    public bool AlterRemoteServiceBinding { get; public set; }
    public bool AlterRole { get; public set; }
    public bool AlterRoute { get; public set; }
    public bool AlterSchema { get; public set; }
    public bool AlterSearchPropertyList { get; public set; }
    public bool AlterSecurityPolicy { get; public set; }
    public bool AlterSequence { get; public set; }
    public bool AlterService { get; public set; }
    public bool AlterSymmetricKey { get; public set; }
    public bool AlterTable { get; public set; }
    public bool AlterTrigger { get; public set; }
    public bool AlterUser { get; public set; }
    public bool AlterView { get; public set; }
    public bool AlterXmlSchemaCollection { get; public set; }
    public bool BindDefault { get; public set; }
    public bool BindRule { get; public set; }
    public bool CreateApplicationRole { get; public set; }
    public bool CreateAssembly { get; public set; }
    public bool CreateAsymmetricKey { get; public set; }
    public bool CreateAudit { get; public set; }
    public bool CreateBrokerPriority { get; public set; }
    public bool CreateCertificate { get; public set; }
    public bool CreateColumnEncryptionKey { get; public set; }
    public bool CreateColumnMasterKey { get; public set; }
    public bool CreateContract { get; public set; }
    public bool CreateDatabaseAuditSpecification { get; public set; }
    public bool CreateDatabaseEncryptionKey { get; public set; }
    public bool CreateDefault { get; public set; }
    public bool CreateEventNotification { get; public set; }
    public bool CreateExtendedProperty { get; public set; }
    public bool CreateExternalLanguage { get; public set; }
    public bool CreateExternalLibrary { get; public set; }
    public bool CreateFulltextCatalog { get; public set; }
    public bool CreateFulltextIndex { get; public set; }
    public bool CreateFulltextStoplist { get; public set; }
    public bool CreateFunction { get; public set; }
    public bool CreateIndex { get; public set; }
    public bool CreateMasterKey { get; public set; }
    public bool CreateMessageType { get; public set; }
    public bool CreatePartitionFunction { get; public set; }
    public bool CreatePartitionScheme { get; public set; }
    public bool CreatePlanGuide { get; public set; }
    public bool CreateProcedure { get; public set; }
    public bool CreateQueue { get; public set; }
    public bool CreateRemoteServiceBinding { get; public set; }
    public bool CreateRole { get; public set; }
    public bool CreateRoute { get; public set; }
    public bool CreateRule { get; public set; }
    public bool CreateSchema { get; public set; }
    public bool CreateSearchPropertyList { get; public set; }
    public bool CreateSecurityPolicy { get; public set; }
    public bool CreateSequence { get; public set; }
    public bool CreateService { get; public set; }
    public bool CreateSpatialIndex { get; public set; }
    public bool CreateStatistics { get; public set; }
    public bool CreateSymmetricKey { get; public set; }
    public bool CreateSynonym { get; public set; }
    public bool CreateTable { get; public set; }
    public bool CreateTrigger { get; public set; }
    public bool CreateType { get; public set; }
    public bool CreateUser { get; public set; }
    public bool CreateView { get; public set; }
    public bool CreateXmlIndex { get; public set; }
    public bool CreateXmlSchemaCollection { get; public set; }
    public bool DenyDatabase { get; public set; }
    public bool DropApplicationRole { get; public set; }
    public bool DropAssembly { get; public set; }
    public bool DropAsymmetricKey { get; public set; }
    public bool DropAudit { get; public set; }
    public bool DropBrokerPriority { get; public set; }
    public bool DropCertificate { get; public set; }
    public bool DropColumnEncryptionKey { get; public set; }
    public bool DropColumnMasterKey { get; public set; }
    public bool DropContract { get; public set; }
    public bool DropDatabaseAuditSpecification { get; public set; }
    public bool DropDatabaseEncryptionKey { get; public set; }
    public bool DropDefault { get; public set; }
    public bool DropEventNotification { get; public set; }
    public bool DropExtendedProperty { get; public set; }
    public bool DropExternalLanguage { get; public set; }
    public bool DropExternalLibrary { get; public set; }
    public bool DropFulltextCatalog { get; public set; }
    public bool DropFulltextIndex { get; public set; }
    public bool DropFulltextStoplist { get; public set; }
    public bool DropFunction { get; public set; }
    public bool DropIndex { get; public set; }
    public bool DropMasterKey { get; public set; }
    public bool DropMessageType { get; public set; }
    public bool DropPartitionFunction { get; public set; }
    public bool DropPartitionScheme { get; public set; }
    public bool DropPlanGuide { get; public set; }
    public bool DropProcedure { get; public set; }
    public bool DropQueue { get; public set; }
    public bool DropRemoteServiceBinding { get; public set; }
    public bool DropRole { get; public set; }
    public bool DropRoleMember { get; public set; }
    public bool DropRoute { get; public set; }
    public bool DropRule { get; public set; }
    public bool DropSchema { get; public set; }
    public bool DropSearchPropertyList { get; public set; }
    public bool DropSecurityPolicy { get; public set; }
    public bool DropSensitivityClassification { get; public set; }
    public bool DropSequence { get; public set; }
    public bool DropService { get; public set; }
    public bool DropSignature { get; public set; }
    public bool DropSignatureSchemaObject { get; public set; }
    public bool DropStatistics { get; public set; }
    public bool DropSymmetricKey { get; public set; }
    public bool DropSynonym { get; public set; }
    public bool DropTable { get; public set; }
    public bool DropTrigger { get; public set; }
    public bool DropType { get; public set; }
    public bool DropUser { get; public set; }
    public bool DropView { get; public set; }
    public bool DropXmlSchemaCollection { get; public set; }
    public bool GrantDatabase { get; public set; }
    public bool Rename { get; public set; }
    public bool RevokeDatabase { get; public set; }
    public bool UnbindDefault { get; public set; }
    public bool UnbindRule { get; public set; }
    public bool UpdateStatistics { get; public set; }
    public bool DdlApplicationRoleEventsEvents { get; public set; }
    public bool DdlAssemblyEventsEvents { get; public set; }
    public bool DdlAsymmetricKeyEventsEvents { get; public set; }
    public bool DdlAuthorizationDatabaseEventsEvents { get; public set; }
    public bool DdlRemoteServiceBindingEventsEvents { get; public set; }
    public bool DdlCertificateEventsEvents { get; public set; }
    public bool DdlColumnEncryptionKeyEventsEvents { get; public set; }
    public bool DdlColumnMasterKeyEventsEvents { get; public set; }
    public bool DdlContractEventsEvents { get; public set; }
    public bool DdlCryptoSignatureEventsEvents { get; public set; }
    public bool DdlDatabaseLevelEventsEvents { get; public set; }
    public bool DdlDatabaseAuditEventsEvents { get; public set; }
    public bool DdlDatabaseAuditSpecificationEventsEvents { get; public set; }
    public bool DdlMasterKeyEventsEvents { get; public set; }
    public bool DdlDatabaseSecurityEventsEvents { get; public set; }
    public bool DdlDefaultEventsEvents { get; public set; }
    public bool DdlDatabaseEncryptionKeyEventsEvents { get; public set; }
    public bool DdlEventNotificationEventsEvents { get; public set; }
    public bool DdlExtendedPropertyEventsEvents { get; public set; }
    public bool DdlExternalLanguageEventsEvents { get; public set; }
    public bool DdlFulltextCatalogEventsEvents { get; public set; }
    public bool DdlFulltextStoplistEventsEvents { get; public set; }
    public bool DdlFunctionEventsEvents { get; public set; }
    public bool DdlGdrDatabaseEventsEvents { get; public set; }
    public bool DdlIndexEventsEvents { get; public set; }
    public bool DdlLibraryEventsEvents { get; public set; }
    public bool DdlMessageTypeEventsEvents { get; public set; }
    public bool DdlSymmetricKeyEventsEvents { get; public set; }
    public bool DdlPartitionEventsEvents { get; public set; }
    public bool DdlPlanGuideEventsEvents { get; public set; }
    public bool DdlBrokerPriorityEventsEvents { get; public set; }
    public bool DdlSearchPropertyListEventsEvents { get; public set; }
    public bool DdlPartitionFunctionEventsEvents { get; public set; }
    public bool DdlPartitionSchemeEventsEvents { get; public set; }
    public bool DdlQueueEventsEvents { get; public set; }
    public bool DdlRoleEventsEvents { get; public set; }
    public bool DdlRouteEventsEvents { get; public set; }
    public bool DdlRuleEventsEvents { get; public set; }
    public bool DdlSchemaEventsEvents { get; public set; }
    public bool DdlSecurityPolicyEventsEvents { get; public set; }
    public bool DdlSensitivityEventsEvents { get; public set; }
    public bool DdlSequenceEventsEvents { get; public set; }
    public bool DdlServiceEventsEvents { get; public set; }
    public bool DdlSsbEventsEvents { get; public set; }
    public bool DdlStatisticsEventsEvents { get; public set; }
    public bool DdlProcedureEventsEvents { get; public set; }
    public bool DdlSynonymEventsEvents { get; public set; }
    public bool DdlTableEventsEvents { get; public set; }
    public bool DdlTableViewEventsEvents { get; public set; }
    public bool DdlTriggerEventsEvents { get; public set; }
    public bool DdlTypeEventsEvents { get; public set; }
    public bool DdlUserEventsEvents { get; public set; }
    public bool DdlViewEventsEvents { get; public set; }
    public bool DdlXmlSchemaCollectionEventsEvents { get; public set; }
    public DatabaseDdlTriggerEventSet(DatabaseDdlTriggerEventSet eventSet);
    public DatabaseDdlTriggerEventSet(DatabaseDdlTriggerEvent anEvent);
    public DatabaseDdlTriggerEventSet(DatabaseDdlTriggerEvent[] events);
    internal DatabaseDdlTriggerEventSet(BitArray storage);
    private static DatabaseDdlTriggerEventSet();
    public virtual EventSetBase Copy();
    internal void SetBit(DatabaseDdlTriggerEvent anEvent);
    internal void ResetBit(DatabaseDdlTriggerEvent anEvent);
    public DatabaseDdlTriggerEventSet Add(DatabaseDdlTriggerEvent anEvent);
    public DatabaseDdlTriggerEventSet Remove(DatabaseDdlTriggerEvent anEvent);
    public static DatabaseDdlTriggerEventSet op_Addition(DatabaseDdlTriggerEventSet eventSet, DatabaseDdlTriggerEvent anEvent);
    public static DatabaseDdlTriggerEventSet Add(DatabaseDdlTriggerEventSet eventSet, DatabaseDdlTriggerEvent anEvent);
    public static DatabaseDdlTriggerEventSet op_Subtraction(DatabaseDdlTriggerEventSet eventSet, DatabaseDdlTriggerEvent anEvent);
    public static DatabaseDdlTriggerEventSet Subtract(DatabaseDdlTriggerEventSet eventSet, DatabaseDdlTriggerEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_Dirty();
    public void set_Dirty(bool value);
    public bool get_AddRoleMember();
    public void set_AddRoleMember(bool value);
    public bool get_AddSensitivityClassification();
    public void set_AddSensitivityClassification(bool value);
    public bool get_AddSignature();
    public void set_AddSignature(bool value);
    public bool get_AddSignatureSchemaObject();
    public void set_AddSignatureSchemaObject(bool value);
    public bool get_AlterApplicationRole();
    public void set_AlterApplicationRole(bool value);
    public bool get_AlterAssembly();
    public void set_AlterAssembly(bool value);
    public bool get_AlterAsymmetricKey();
    public void set_AlterAsymmetricKey(bool value);
    public bool get_AlterAudit();
    public void set_AlterAudit(bool value);
    public bool get_AlterAuthorizationDatabase();
    public void set_AlterAuthorizationDatabase(bool value);
    public bool get_AlterBrokerPriority();
    public void set_AlterBrokerPriority(bool value);
    public bool get_AlterCertificate();
    public void set_AlterCertificate(bool value);
    public bool get_AlterColumnEncryptionKey();
    public void set_AlterColumnEncryptionKey(bool value);
    public bool get_AlterDatabaseAuditSpecification();
    public void set_AlterDatabaseAuditSpecification(bool value);
    public bool get_AlterDatabaseEncryptionKey();
    public void set_AlterDatabaseEncryptionKey(bool value);
    public bool get_AlterDatabaseScopedConfiguration();
    public void set_AlterDatabaseScopedConfiguration(bool value);
    public bool get_AlterExtendedProperty();
    public void set_AlterExtendedProperty(bool value);
    public bool get_AlterExternalLanguage();
    public void set_AlterExternalLanguage(bool value);
    public bool get_AlterExternalLibrary();
    public void set_AlterExternalLibrary(bool value);
    public bool get_AlterFulltextCatalog();
    public void set_AlterFulltextCatalog(bool value);
    public bool get_AlterFulltextIndex();
    public void set_AlterFulltextIndex(bool value);
    public bool get_AlterFulltextStoplist();
    public void set_AlterFulltextStoplist(bool value);
    public bool get_AlterFunction();
    public void set_AlterFunction(bool value);
    public bool get_AlterIndex();
    public void set_AlterIndex(bool value);
    public bool get_AlterMasterKey();
    public void set_AlterMasterKey(bool value);
    public bool get_AlterMessageType();
    public void set_AlterMessageType(bool value);
    public bool get_AlterPartitionFunction();
    public void set_AlterPartitionFunction(bool value);
    public bool get_AlterPartitionScheme();
    public void set_AlterPartitionScheme(bool value);
    public bool get_AlterPlanGuide();
    public void set_AlterPlanGuide(bool value);
    public bool get_AlterProcedure();
    public void set_AlterProcedure(bool value);
    public bool get_AlterQueue();
    public void set_AlterQueue(bool value);
    public bool get_AlterRemoteServiceBinding();
    public void set_AlterRemoteServiceBinding(bool value);
    public bool get_AlterRole();
    public void set_AlterRole(bool value);
    public bool get_AlterRoute();
    public void set_AlterRoute(bool value);
    public bool get_AlterSchema();
    public void set_AlterSchema(bool value);
    public bool get_AlterSearchPropertyList();
    public void set_AlterSearchPropertyList(bool value);
    public bool get_AlterSecurityPolicy();
    public void set_AlterSecurityPolicy(bool value);
    public bool get_AlterSequence();
    public void set_AlterSequence(bool value);
    public bool get_AlterService();
    public void set_AlterService(bool value);
    public bool get_AlterSymmetricKey();
    public void set_AlterSymmetricKey(bool value);
    public bool get_AlterTable();
    public void set_AlterTable(bool value);
    public bool get_AlterTrigger();
    public void set_AlterTrigger(bool value);
    public bool get_AlterUser();
    public void set_AlterUser(bool value);
    public bool get_AlterView();
    public void set_AlterView(bool value);
    public bool get_AlterXmlSchemaCollection();
    public void set_AlterXmlSchemaCollection(bool value);
    public bool get_BindDefault();
    public void set_BindDefault(bool value);
    public bool get_BindRule();
    public void set_BindRule(bool value);
    public bool get_CreateApplicationRole();
    public void set_CreateApplicationRole(bool value);
    public bool get_CreateAssembly();
    public void set_CreateAssembly(bool value);
    public bool get_CreateAsymmetricKey();
    public void set_CreateAsymmetricKey(bool value);
    public bool get_CreateAudit();
    public void set_CreateAudit(bool value);
    public bool get_CreateBrokerPriority();
    public void set_CreateBrokerPriority(bool value);
    public bool get_CreateCertificate();
    public void set_CreateCertificate(bool value);
    public bool get_CreateColumnEncryptionKey();
    public void set_CreateColumnEncryptionKey(bool value);
    public bool get_CreateColumnMasterKey();
    public void set_CreateColumnMasterKey(bool value);
    public bool get_CreateContract();
    public void set_CreateContract(bool value);
    public bool get_CreateDatabaseAuditSpecification();
    public void set_CreateDatabaseAuditSpecification(bool value);
    public bool get_CreateDatabaseEncryptionKey();
    public void set_CreateDatabaseEncryptionKey(bool value);
    public bool get_CreateDefault();
    public void set_CreateDefault(bool value);
    public bool get_CreateEventNotification();
    public void set_CreateEventNotification(bool value);
    public bool get_CreateExtendedProperty();
    public void set_CreateExtendedProperty(bool value);
    public bool get_CreateExternalLanguage();
    public void set_CreateExternalLanguage(bool value);
    public bool get_CreateExternalLibrary();
    public void set_CreateExternalLibrary(bool value);
    public bool get_CreateFulltextCatalog();
    public void set_CreateFulltextCatalog(bool value);
    public bool get_CreateFulltextIndex();
    public void set_CreateFulltextIndex(bool value);
    public bool get_CreateFulltextStoplist();
    public void set_CreateFulltextStoplist(bool value);
    public bool get_CreateFunction();
    public void set_CreateFunction(bool value);
    public bool get_CreateIndex();
    public void set_CreateIndex(bool value);
    public bool get_CreateMasterKey();
    public void set_CreateMasterKey(bool value);
    public bool get_CreateMessageType();
    public void set_CreateMessageType(bool value);
    public bool get_CreatePartitionFunction();
    public void set_CreatePartitionFunction(bool value);
    public bool get_CreatePartitionScheme();
    public void set_CreatePartitionScheme(bool value);
    public bool get_CreatePlanGuide();
    public void set_CreatePlanGuide(bool value);
    public bool get_CreateProcedure();
    public void set_CreateProcedure(bool value);
    public bool get_CreateQueue();
    public void set_CreateQueue(bool value);
    public bool get_CreateRemoteServiceBinding();
    public void set_CreateRemoteServiceBinding(bool value);
    public bool get_CreateRole();
    public void set_CreateRole(bool value);
    public bool get_CreateRoute();
    public void set_CreateRoute(bool value);
    public bool get_CreateRule();
    public void set_CreateRule(bool value);
    public bool get_CreateSchema();
    public void set_CreateSchema(bool value);
    public bool get_CreateSearchPropertyList();
    public void set_CreateSearchPropertyList(bool value);
    public bool get_CreateSecurityPolicy();
    public void set_CreateSecurityPolicy(bool value);
    public bool get_CreateSequence();
    public void set_CreateSequence(bool value);
    public bool get_CreateService();
    public void set_CreateService(bool value);
    public bool get_CreateSpatialIndex();
    public void set_CreateSpatialIndex(bool value);
    public bool get_CreateStatistics();
    public void set_CreateStatistics(bool value);
    public bool get_CreateSymmetricKey();
    public void set_CreateSymmetricKey(bool value);
    public bool get_CreateSynonym();
    public void set_CreateSynonym(bool value);
    public bool get_CreateTable();
    public void set_CreateTable(bool value);
    public bool get_CreateTrigger();
    public void set_CreateTrigger(bool value);
    public bool get_CreateType();
    public void set_CreateType(bool value);
    public bool get_CreateUser();
    public void set_CreateUser(bool value);
    public bool get_CreateView();
    public void set_CreateView(bool value);
    public bool get_CreateXmlIndex();
    public void set_CreateXmlIndex(bool value);
    public bool get_CreateXmlSchemaCollection();
    public void set_CreateXmlSchemaCollection(bool value);
    public bool get_DenyDatabase();
    public void set_DenyDatabase(bool value);
    public bool get_DropApplicationRole();
    public void set_DropApplicationRole(bool value);
    public bool get_DropAssembly();
    public void set_DropAssembly(bool value);
    public bool get_DropAsymmetricKey();
    public void set_DropAsymmetricKey(bool value);
    public bool get_DropAudit();
    public void set_DropAudit(bool value);
    public bool get_DropBrokerPriority();
    public void set_DropBrokerPriority(bool value);
    public bool get_DropCertificate();
    public void set_DropCertificate(bool value);
    public bool get_DropColumnEncryptionKey();
    public void set_DropColumnEncryptionKey(bool value);
    public bool get_DropColumnMasterKey();
    public void set_DropColumnMasterKey(bool value);
    public bool get_DropContract();
    public void set_DropContract(bool value);
    public bool get_DropDatabaseAuditSpecification();
    public void set_DropDatabaseAuditSpecification(bool value);
    public bool get_DropDatabaseEncryptionKey();
    public void set_DropDatabaseEncryptionKey(bool value);
    public bool get_DropDefault();
    public void set_DropDefault(bool value);
    public bool get_DropEventNotification();
    public void set_DropEventNotification(bool value);
    public bool get_DropExtendedProperty();
    public void set_DropExtendedProperty(bool value);
    public bool get_DropExternalLanguage();
    public void set_DropExternalLanguage(bool value);
    public bool get_DropExternalLibrary();
    public void set_DropExternalLibrary(bool value);
    public bool get_DropFulltextCatalog();
    public void set_DropFulltextCatalog(bool value);
    public bool get_DropFulltextIndex();
    public void set_DropFulltextIndex(bool value);
    public bool get_DropFulltextStoplist();
    public void set_DropFulltextStoplist(bool value);
    public bool get_DropFunction();
    public void set_DropFunction(bool value);
    public bool get_DropIndex();
    public void set_DropIndex(bool value);
    public bool get_DropMasterKey();
    public void set_DropMasterKey(bool value);
    public bool get_DropMessageType();
    public void set_DropMessageType(bool value);
    public bool get_DropPartitionFunction();
    public void set_DropPartitionFunction(bool value);
    public bool get_DropPartitionScheme();
    public void set_DropPartitionScheme(bool value);
    public bool get_DropPlanGuide();
    public void set_DropPlanGuide(bool value);
    public bool get_DropProcedure();
    public void set_DropProcedure(bool value);
    public bool get_DropQueue();
    public void set_DropQueue(bool value);
    public bool get_DropRemoteServiceBinding();
    public void set_DropRemoteServiceBinding(bool value);
    public bool get_DropRole();
    public void set_DropRole(bool value);
    public bool get_DropRoleMember();
    public void set_DropRoleMember(bool value);
    public bool get_DropRoute();
    public void set_DropRoute(bool value);
    public bool get_DropRule();
    public void set_DropRule(bool value);
    public bool get_DropSchema();
    public void set_DropSchema(bool value);
    public bool get_DropSearchPropertyList();
    public void set_DropSearchPropertyList(bool value);
    public bool get_DropSecurityPolicy();
    public void set_DropSecurityPolicy(bool value);
    public bool get_DropSensitivityClassification();
    public void set_DropSensitivityClassification(bool value);
    public bool get_DropSequence();
    public void set_DropSequence(bool value);
    public bool get_DropService();
    public void set_DropService(bool value);
    public bool get_DropSignature();
    public void set_DropSignature(bool value);
    public bool get_DropSignatureSchemaObject();
    public void set_DropSignatureSchemaObject(bool value);
    public bool get_DropStatistics();
    public void set_DropStatistics(bool value);
    public bool get_DropSymmetricKey();
    public void set_DropSymmetricKey(bool value);
    public bool get_DropSynonym();
    public void set_DropSynonym(bool value);
    public bool get_DropTable();
    public void set_DropTable(bool value);
    public bool get_DropTrigger();
    public void set_DropTrigger(bool value);
    public bool get_DropType();
    public void set_DropType(bool value);
    public bool get_DropUser();
    public void set_DropUser(bool value);
    public bool get_DropView();
    public void set_DropView(bool value);
    public bool get_DropXmlSchemaCollection();
    public void set_DropXmlSchemaCollection(bool value);
    public bool get_GrantDatabase();
    public void set_GrantDatabase(bool value);
    public bool get_Rename();
    public void set_Rename(bool value);
    public bool get_RevokeDatabase();
    public void set_RevokeDatabase(bool value);
    public bool get_UnbindDefault();
    public void set_UnbindDefault(bool value);
    public bool get_UnbindRule();
    public void set_UnbindRule(bool value);
    public bool get_UpdateStatistics();
    public void set_UpdateStatistics(bool value);
    public bool get_DdlApplicationRoleEventsEvents();
    public void set_DdlApplicationRoleEventsEvents(bool value);
    public bool get_DdlAssemblyEventsEvents();
    public void set_DdlAssemblyEventsEvents(bool value);
    public bool get_DdlAsymmetricKeyEventsEvents();
    public void set_DdlAsymmetricKeyEventsEvents(bool value);
    public bool get_DdlAuthorizationDatabaseEventsEvents();
    public void set_DdlAuthorizationDatabaseEventsEvents(bool value);
    public bool get_DdlRemoteServiceBindingEventsEvents();
    public void set_DdlRemoteServiceBindingEventsEvents(bool value);
    public bool get_DdlCertificateEventsEvents();
    public void set_DdlCertificateEventsEvents(bool value);
    public bool get_DdlColumnEncryptionKeyEventsEvents();
    public void set_DdlColumnEncryptionKeyEventsEvents(bool value);
    public bool get_DdlColumnMasterKeyEventsEvents();
    public void set_DdlColumnMasterKeyEventsEvents(bool value);
    public bool get_DdlContractEventsEvents();
    public void set_DdlContractEventsEvents(bool value);
    public bool get_DdlCryptoSignatureEventsEvents();
    public void set_DdlCryptoSignatureEventsEvents(bool value);
    public bool get_DdlDatabaseLevelEventsEvents();
    public void set_DdlDatabaseLevelEventsEvents(bool value);
    public bool get_DdlDatabaseAuditEventsEvents();
    public void set_DdlDatabaseAuditEventsEvents(bool value);
    public bool get_DdlDatabaseAuditSpecificationEventsEvents();
    public void set_DdlDatabaseAuditSpecificationEventsEvents(bool value);
    public bool get_DdlMasterKeyEventsEvents();
    public void set_DdlMasterKeyEventsEvents(bool value);
    public bool get_DdlDatabaseSecurityEventsEvents();
    public void set_DdlDatabaseSecurityEventsEvents(bool value);
    public bool get_DdlDefaultEventsEvents();
    public void set_DdlDefaultEventsEvents(bool value);
    public bool get_DdlDatabaseEncryptionKeyEventsEvents();
    public void set_DdlDatabaseEncryptionKeyEventsEvents(bool value);
    public bool get_DdlEventNotificationEventsEvents();
    public void set_DdlEventNotificationEventsEvents(bool value);
    public bool get_DdlExtendedPropertyEventsEvents();
    public void set_DdlExtendedPropertyEventsEvents(bool value);
    public bool get_DdlExternalLanguageEventsEvents();
    public void set_DdlExternalLanguageEventsEvents(bool value);
    public bool get_DdlFulltextCatalogEventsEvents();
    public void set_DdlFulltextCatalogEventsEvents(bool value);
    public bool get_DdlFulltextStoplistEventsEvents();
    public void set_DdlFulltextStoplistEventsEvents(bool value);
    public bool get_DdlFunctionEventsEvents();
    public void set_DdlFunctionEventsEvents(bool value);
    public bool get_DdlGdrDatabaseEventsEvents();
    public void set_DdlGdrDatabaseEventsEvents(bool value);
    public bool get_DdlIndexEventsEvents();
    public void set_DdlIndexEventsEvents(bool value);
    public bool get_DdlLibraryEventsEvents();
    public void set_DdlLibraryEventsEvents(bool value);
    public bool get_DdlMessageTypeEventsEvents();
    public void set_DdlMessageTypeEventsEvents(bool value);
    public bool get_DdlSymmetricKeyEventsEvents();
    public void set_DdlSymmetricKeyEventsEvents(bool value);
    public bool get_DdlPartitionEventsEvents();
    public void set_DdlPartitionEventsEvents(bool value);
    public bool get_DdlPlanGuideEventsEvents();
    public void set_DdlPlanGuideEventsEvents(bool value);
    public bool get_DdlBrokerPriorityEventsEvents();
    public void set_DdlBrokerPriorityEventsEvents(bool value);
    public bool get_DdlSearchPropertyListEventsEvents();
    public void set_DdlSearchPropertyListEventsEvents(bool value);
    public bool get_DdlPartitionFunctionEventsEvents();
    public void set_DdlPartitionFunctionEventsEvents(bool value);
    public bool get_DdlPartitionSchemeEventsEvents();
    public void set_DdlPartitionSchemeEventsEvents(bool value);
    public bool get_DdlQueueEventsEvents();
    public void set_DdlQueueEventsEvents(bool value);
    public bool get_DdlRoleEventsEvents();
    public void set_DdlRoleEventsEvents(bool value);
    public bool get_DdlRouteEventsEvents();
    public void set_DdlRouteEventsEvents(bool value);
    public bool get_DdlRuleEventsEvents();
    public void set_DdlRuleEventsEvents(bool value);
    public bool get_DdlSchemaEventsEvents();
    public void set_DdlSchemaEventsEvents(bool value);
    public bool get_DdlSecurityPolicyEventsEvents();
    public void set_DdlSecurityPolicyEventsEvents(bool value);
    public bool get_DdlSensitivityEventsEvents();
    public void set_DdlSensitivityEventsEvents(bool value);
    public bool get_DdlSequenceEventsEvents();
    public void set_DdlSequenceEventsEvents(bool value);
    public bool get_DdlServiceEventsEvents();
    public void set_DdlServiceEventsEvents(bool value);
    public bool get_DdlSsbEventsEvents();
    public void set_DdlSsbEventsEvents(bool value);
    public bool get_DdlStatisticsEventsEvents();
    public void set_DdlStatisticsEventsEvents(bool value);
    public bool get_DdlProcedureEventsEvents();
    public void set_DdlProcedureEventsEvents(bool value);
    public bool get_DdlSynonymEventsEvents();
    public void set_DdlSynonymEventsEvents(bool value);
    public bool get_DdlTableEventsEvents();
    public void set_DdlTableEventsEvents(bool value);
    public bool get_DdlTableViewEventsEvents();
    public void set_DdlTableViewEventsEvents(bool value);
    public bool get_DdlTriggerEventsEvents();
    public void set_DdlTriggerEventsEvents(bool value);
    public bool get_DdlTypeEventsEvents();
    public void set_DdlTypeEventsEvents(bool value);
    public bool get_DdlUserEventsEvents();
    public void set_DdlUserEventsEvents(bool value);
    public bool get_DdlViewEventsEvents();
    public void set_DdlViewEventsEvents(bool value);
    public bool get_DdlXmlSchemaCollectionEventsEvents();
    public void set_DdlXmlSchemaCollectionEventsEvents(bool value);
}
internal enum Microsoft.SqlServer.Management.Smo.DatabaseDdlTriggerEventValues : Enum {
    public int value__;
    public static DatabaseDdlTriggerEventValues AddRoleMember;
    public static DatabaseDdlTriggerEventValues AddSensitivityClassification;
    public static DatabaseDdlTriggerEventValues AddSignature;
    public static DatabaseDdlTriggerEventValues AddSignatureSchemaObject;
    public static DatabaseDdlTriggerEventValues AlterApplicationRole;
    public static DatabaseDdlTriggerEventValues AlterAssembly;
    public static DatabaseDdlTriggerEventValues AlterAsymmetricKey;
    public static DatabaseDdlTriggerEventValues AlterAudit;
    public static DatabaseDdlTriggerEventValues AlterAuthorizationDatabase;
    public static DatabaseDdlTriggerEventValues AlterBrokerPriority;
    public static DatabaseDdlTriggerEventValues AlterCertificate;
    public static DatabaseDdlTriggerEventValues AlterColumnEncryptionKey;
    public static DatabaseDdlTriggerEventValues AlterDatabaseAuditSpecification;
    public static DatabaseDdlTriggerEventValues AlterDatabaseEncryptionKey;
    public static DatabaseDdlTriggerEventValues AlterDatabaseScopedConfiguration;
    public static DatabaseDdlTriggerEventValues AlterExtendedProperty;
    public static DatabaseDdlTriggerEventValues AlterExternalLanguage;
    public static DatabaseDdlTriggerEventValues AlterExternalLibrary;
    public static DatabaseDdlTriggerEventValues AlterFulltextCatalog;
    public static DatabaseDdlTriggerEventValues AlterFulltextIndex;
    public static DatabaseDdlTriggerEventValues AlterFulltextStoplist;
    public static DatabaseDdlTriggerEventValues AlterFunction;
    public static DatabaseDdlTriggerEventValues AlterIndex;
    public static DatabaseDdlTriggerEventValues AlterMasterKey;
    public static DatabaseDdlTriggerEventValues AlterMessageType;
    public static DatabaseDdlTriggerEventValues AlterPartitionFunction;
    public static DatabaseDdlTriggerEventValues AlterPartitionScheme;
    public static DatabaseDdlTriggerEventValues AlterPlanGuide;
    public static DatabaseDdlTriggerEventValues AlterProcedure;
    public static DatabaseDdlTriggerEventValues AlterQueue;
    public static DatabaseDdlTriggerEventValues AlterRemoteServiceBinding;
    public static DatabaseDdlTriggerEventValues AlterRole;
    public static DatabaseDdlTriggerEventValues AlterRoute;
    public static DatabaseDdlTriggerEventValues AlterSchema;
    public static DatabaseDdlTriggerEventValues AlterSearchPropertyList;
    public static DatabaseDdlTriggerEventValues AlterSecurityPolicy;
    public static DatabaseDdlTriggerEventValues AlterSequence;
    public static DatabaseDdlTriggerEventValues AlterService;
    public static DatabaseDdlTriggerEventValues AlterSymmetricKey;
    public static DatabaseDdlTriggerEventValues AlterTable;
    public static DatabaseDdlTriggerEventValues AlterTrigger;
    public static DatabaseDdlTriggerEventValues AlterUser;
    public static DatabaseDdlTriggerEventValues AlterView;
    public static DatabaseDdlTriggerEventValues AlterXmlSchemaCollection;
    public static DatabaseDdlTriggerEventValues BindDefault;
    public static DatabaseDdlTriggerEventValues BindRule;
    public static DatabaseDdlTriggerEventValues CreateApplicationRole;
    public static DatabaseDdlTriggerEventValues CreateAssembly;
    public static DatabaseDdlTriggerEventValues CreateAsymmetricKey;
    public static DatabaseDdlTriggerEventValues CreateAudit;
    public static DatabaseDdlTriggerEventValues CreateBrokerPriority;
    public static DatabaseDdlTriggerEventValues CreateCertificate;
    public static DatabaseDdlTriggerEventValues CreateColumnEncryptionKey;
    public static DatabaseDdlTriggerEventValues CreateColumnMasterKey;
    public static DatabaseDdlTriggerEventValues CreateContract;
    public static DatabaseDdlTriggerEventValues CreateDatabaseAuditSpecification;
    public static DatabaseDdlTriggerEventValues CreateDatabaseEncryptionKey;
    public static DatabaseDdlTriggerEventValues CreateDefault;
    public static DatabaseDdlTriggerEventValues CreateEventNotification;
    public static DatabaseDdlTriggerEventValues CreateExtendedProperty;
    public static DatabaseDdlTriggerEventValues CreateExternalLanguage;
    public static DatabaseDdlTriggerEventValues CreateExternalLibrary;
    public static DatabaseDdlTriggerEventValues CreateFulltextCatalog;
    public static DatabaseDdlTriggerEventValues CreateFulltextIndex;
    public static DatabaseDdlTriggerEventValues CreateFulltextStoplist;
    public static DatabaseDdlTriggerEventValues CreateFunction;
    public static DatabaseDdlTriggerEventValues CreateIndex;
    public static DatabaseDdlTriggerEventValues CreateMasterKey;
    public static DatabaseDdlTriggerEventValues CreateMessageType;
    public static DatabaseDdlTriggerEventValues CreatePartitionFunction;
    public static DatabaseDdlTriggerEventValues CreatePartitionScheme;
    public static DatabaseDdlTriggerEventValues CreatePlanGuide;
    public static DatabaseDdlTriggerEventValues CreateProcedure;
    public static DatabaseDdlTriggerEventValues CreateQueue;
    public static DatabaseDdlTriggerEventValues CreateRemoteServiceBinding;
    public static DatabaseDdlTriggerEventValues CreateRole;
    public static DatabaseDdlTriggerEventValues CreateRoute;
    public static DatabaseDdlTriggerEventValues CreateRule;
    public static DatabaseDdlTriggerEventValues CreateSchema;
    public static DatabaseDdlTriggerEventValues CreateSearchPropertyList;
    public static DatabaseDdlTriggerEventValues CreateSecurityPolicy;
    public static DatabaseDdlTriggerEventValues CreateSequence;
    public static DatabaseDdlTriggerEventValues CreateService;
    public static DatabaseDdlTriggerEventValues CreateSpatialIndex;
    public static DatabaseDdlTriggerEventValues CreateStatistics;
    public static DatabaseDdlTriggerEventValues CreateSymmetricKey;
    public static DatabaseDdlTriggerEventValues CreateSynonym;
    public static DatabaseDdlTriggerEventValues CreateTable;
    public static DatabaseDdlTriggerEventValues CreateTrigger;
    public static DatabaseDdlTriggerEventValues CreateType;
    public static DatabaseDdlTriggerEventValues CreateUser;
    public static DatabaseDdlTriggerEventValues CreateView;
    public static DatabaseDdlTriggerEventValues CreateXmlIndex;
    public static DatabaseDdlTriggerEventValues CreateXmlSchemaCollection;
    public static DatabaseDdlTriggerEventValues DenyDatabase;
    public static DatabaseDdlTriggerEventValues DropApplicationRole;
    public static DatabaseDdlTriggerEventValues DropAssembly;
    public static DatabaseDdlTriggerEventValues DropAsymmetricKey;
    public static DatabaseDdlTriggerEventValues DropAudit;
    public static DatabaseDdlTriggerEventValues DropBrokerPriority;
    public static DatabaseDdlTriggerEventValues DropCertificate;
    public static DatabaseDdlTriggerEventValues DropColumnEncryptionKey;
    public static DatabaseDdlTriggerEventValues DropColumnMasterKey;
    public static DatabaseDdlTriggerEventValues DropContract;
    public static DatabaseDdlTriggerEventValues DropDatabaseAuditSpecification;
    public static DatabaseDdlTriggerEventValues DropDatabaseEncryptionKey;
    public static DatabaseDdlTriggerEventValues DropDefault;
    public static DatabaseDdlTriggerEventValues DropEventNotification;
    public static DatabaseDdlTriggerEventValues DropExtendedProperty;
    public static DatabaseDdlTriggerEventValues DropExternalLanguage;
    public static DatabaseDdlTriggerEventValues DropExternalLibrary;
    public static DatabaseDdlTriggerEventValues DropFulltextCatalog;
    public static DatabaseDdlTriggerEventValues DropFulltextIndex;
    public static DatabaseDdlTriggerEventValues DropFulltextStoplist;
    public static DatabaseDdlTriggerEventValues DropFunction;
    public static DatabaseDdlTriggerEventValues DropIndex;
    public static DatabaseDdlTriggerEventValues DropMasterKey;
    public static DatabaseDdlTriggerEventValues DropMessageType;
    public static DatabaseDdlTriggerEventValues DropPartitionFunction;
    public static DatabaseDdlTriggerEventValues DropPartitionScheme;
    public static DatabaseDdlTriggerEventValues DropPlanGuide;
    public static DatabaseDdlTriggerEventValues DropProcedure;
    public static DatabaseDdlTriggerEventValues DropQueue;
    public static DatabaseDdlTriggerEventValues DropRemoteServiceBinding;
    public static DatabaseDdlTriggerEventValues DropRole;
    public static DatabaseDdlTriggerEventValues DropRoleMember;
    public static DatabaseDdlTriggerEventValues DropRoute;
    public static DatabaseDdlTriggerEventValues DropRule;
    public static DatabaseDdlTriggerEventValues DropSchema;
    public static DatabaseDdlTriggerEventValues DropSearchPropertyList;
    public static DatabaseDdlTriggerEventValues DropSecurityPolicy;
    public static DatabaseDdlTriggerEventValues DropSensitivityClassification;
    public static DatabaseDdlTriggerEventValues DropSequence;
    public static DatabaseDdlTriggerEventValues DropService;
    public static DatabaseDdlTriggerEventValues DropSignature;
    public static DatabaseDdlTriggerEventValues DropSignatureSchemaObject;
    public static DatabaseDdlTriggerEventValues DropStatistics;
    public static DatabaseDdlTriggerEventValues DropSymmetricKey;
    public static DatabaseDdlTriggerEventValues DropSynonym;
    public static DatabaseDdlTriggerEventValues DropTable;
    public static DatabaseDdlTriggerEventValues DropTrigger;
    public static DatabaseDdlTriggerEventValues DropType;
    public static DatabaseDdlTriggerEventValues DropUser;
    public static DatabaseDdlTriggerEventValues DropView;
    public static DatabaseDdlTriggerEventValues DropXmlSchemaCollection;
    public static DatabaseDdlTriggerEventValues GrantDatabase;
    public static DatabaseDdlTriggerEventValues Rename;
    public static DatabaseDdlTriggerEventValues RevokeDatabase;
    public static DatabaseDdlTriggerEventValues UnbindDefault;
    public static DatabaseDdlTriggerEventValues UnbindRule;
    public static DatabaseDdlTriggerEventValues UpdateStatistics;
}
public enum Microsoft.SqlServer.Management.Smo.DatabaseDdlTriggerExecutionContext : Enum {
    public int value__;
    public static DatabaseDdlTriggerExecutionContext Caller;
    public static DatabaseDdlTriggerExecutionContext ExecuteAsUser;
    public static DatabaseDdlTriggerExecutionContext Self;
}
public enum Microsoft.SqlServer.Management.Smo.DatabaseEncryptionAlgorithm : Enum {
    public int value__;
    public static DatabaseEncryptionAlgorithm Aes128;
    public static DatabaseEncryptionAlgorithm Aes192;
    public static DatabaseEncryptionAlgorithm Aes256;
    public static DatabaseEncryptionAlgorithm TripleDes;
}
public enum Microsoft.SqlServer.Management.Smo.DatabaseEncryptionState : Enum {
    public int value__;
    public static DatabaseEncryptionState None;
    public static DatabaseEncryptionState Unencrypted;
    public static DatabaseEncryptionState EncryptionInProgress;
    public static DatabaseEncryptionState Encrypted;
    public static DatabaseEncryptionState EncryptionKeyChangesInProgress;
    public static DatabaseEncryptionState DecryptionInProgress;
}
public enum Microsoft.SqlServer.Management.Smo.DatabaseEncryptionType : Enum {
    public int value__;
    public static DatabaseEncryptionType ServerCertificate;
    public static DatabaseEncryptionType ServerAsymmetricKey;
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.DatabaseLevel : SqlObject {
    private string m_PropertyNameForDatabase;
    private string m_XmlAssembly;
    private bool m_bLastDatabaseLevel;
    private bool m_bForChildren;
    public string NameProperty { get; }
    public Assembly ResourceAssembly { get; }
    public string get_NameProperty();
    public virtual Request RetrieveParentRequest();
    public virtual EnumResult GetData(EnumResult res);
    protected virtual string AddLinkProperty(string name);
    internal DataTable GetRequestedDatabases(SqlEnumResult serParent);
    public sealed virtual void LoadInitData(string init_data, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    private bool IsDatabaseNameOrDerivate(string fieldName);
    private void CleanupFilter();
    public virtual Assembly get_ResourceAssembly();
    public virtual void PostProcess(EnumResult erChildren);
}
internal class Microsoft.SqlServer.Management.Smo.DatabaseOption : SqlObject {
    public virtual Request RetrieveParentRequest();
}
public enum Microsoft.SqlServer.Management.Smo.DatabasePermissionSetValue : Enum {
    public int value__;
    [PermissionTypeAttribute("AL")]
[PermissionNameAttribute("ALTER")]
public static DatabasePermissionSetValue Alter;
    [PermissionTypeAttribute("ALAK")]
[PermissionNameAttribute("ALTER ANY ASYMMETRIC KEY")]
public static DatabasePermissionSetValue AlterAnyAsymmetricKey;
    [PermissionTypeAttribute("ALAR")]
[PermissionNameAttribute("ALTER ANY APPLICATION ROLE")]
public static DatabasePermissionSetValue AlterAnyApplicationRole;
    [PermissionTypeAttribute("ALAS")]
[PermissionNameAttribute("ALTER ANY ASSEMBLY")]
public static DatabasePermissionSetValue AlterAnyAssembly;
    [PermissionTypeAttribute("ALCF")]
[PermissionNameAttribute("ALTER ANY CERTIFICATE")]
public static DatabasePermissionSetValue AlterAnyCertificate;
    [PermissionTypeAttribute("ALDS")]
[PermissionNameAttribute("ALTER ANY DATASPACE")]
public static DatabasePermissionSetValue AlterAnyDataspace;
    [PermissionTypeAttribute("ALED")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT NOTIFICATION")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventNotification;
    [PermissionTypeAttribute("ALFT")]
[PermissionNameAttribute("ALTER ANY FULLTEXT CATALOG")]
public static DatabasePermissionSetValue AlterAnyFulltextCatalog;
    [PermissionTypeAttribute("ALMT")]
[PermissionNameAttribute("ALTER ANY MESSAGE TYPE")]
public static DatabasePermissionSetValue AlterAnyMessageType;
    [PermissionTypeAttribute("ALRL")]
[PermissionNameAttribute("ALTER ANY ROLE")]
public static DatabasePermissionSetValue AlterAnyRole;
    [PermissionTypeAttribute("ALRT")]
[PermissionNameAttribute("ALTER ANY ROUTE")]
public static DatabasePermissionSetValue AlterAnyRoute;
    [PermissionTypeAttribute("ALSB")]
[PermissionNameAttribute("ALTER ANY REMOTE SERVICE BINDING")]
public static DatabasePermissionSetValue AlterAnyRemoteServiceBinding;
    [PermissionTypeAttribute("ALSC")]
[PermissionNameAttribute("ALTER ANY CONTRACT")]
public static DatabasePermissionSetValue AlterAnyContract;
    [PermissionTypeAttribute("ALSK")]
[PermissionNameAttribute("ALTER ANY SYMMETRIC KEY")]
public static DatabasePermissionSetValue AlterAnySymmetricKey;
    [PermissionTypeAttribute("ALSM")]
[PermissionNameAttribute("ALTER ANY SCHEMA")]
public static DatabasePermissionSetValue AlterAnySchema;
    [PermissionTypeAttribute("ALSV")]
[PermissionNameAttribute("ALTER ANY SERVICE")]
public static DatabasePermissionSetValue AlterAnyService;
    [PermissionTypeAttribute("ALTG")]
[PermissionNameAttribute("ALTER ANY DATABASE DDL TRIGGER")]
public static DatabasePermissionSetValue AlterAnyDatabaseDdlTrigger;
    [PermissionTypeAttribute("ALUS")]
[PermissionNameAttribute("ALTER ANY USER")]
public static DatabasePermissionSetValue AlterAnyUser;
    [PermissionTypeAttribute("AUTH")]
[PermissionNameAttribute("AUTHENTICATE")]
public static DatabasePermissionSetValue Authenticate;
    [PermissionTypeAttribute("BADB")]
[PermissionNameAttribute("BACKUP DATABASE")]
public static DatabasePermissionSetValue BackupDatabase;
    [PermissionTypeAttribute("BALO")]
[PermissionNameAttribute("BACKUP LOG")]
public static DatabasePermissionSetValue BackupLog;
    [PermissionTypeAttribute("CL")]
[PermissionNameAttribute("CONTROL")]
public static DatabasePermissionSetValue Control;
    [PermissionTypeAttribute("CO")]
[PermissionNameAttribute("CONNECT")]
public static DatabasePermissionSetValue Connect;
    [PermissionTypeAttribute("CORP")]
[PermissionNameAttribute("CONNECT REPLICATION")]
public static DatabasePermissionSetValue ConnectReplication;
    [PermissionTypeAttribute("CP")]
[PermissionNameAttribute("CHECKPOINT")]
public static DatabasePermissionSetValue Checkpoint;
    [PermissionTypeAttribute("CRAG")]
[PermissionNameAttribute("CREATE AGGREGATE")]
public static DatabasePermissionSetValue CreateAggregate;
    [PermissionTypeAttribute("CRAK")]
[PermissionNameAttribute("CREATE ASYMMETRIC KEY")]
public static DatabasePermissionSetValue CreateAsymmetricKey;
    [PermissionTypeAttribute("CRAS")]
[PermissionNameAttribute("CREATE ASSEMBLY")]
public static DatabasePermissionSetValue CreateAssembly;
    [PermissionTypeAttribute("CRCF")]
[PermissionNameAttribute("CREATE CERTIFICATE")]
public static DatabasePermissionSetValue CreateCertificate;
    [PermissionTypeAttribute("CRDB")]
[PermissionNameAttribute("CREATE DATABASE")]
public static DatabasePermissionSetValue CreateDatabase;
    [PermissionTypeAttribute("CRDF")]
[PermissionNameAttribute("CREATE DEFAULT")]
public static DatabasePermissionSetValue CreateDefault;
    [PermissionTypeAttribute("CRED")]
[PermissionNameAttribute("CREATE DATABASE DDL EVENT NOTIFICATION")]
public static DatabasePermissionSetValue CreateDatabaseDdlEventNotification;
    [PermissionTypeAttribute("CRFN")]
[PermissionNameAttribute("CREATE FUNCTION")]
public static DatabasePermissionSetValue CreateFunction;
    [PermissionTypeAttribute("CRFT")]
[PermissionNameAttribute("CREATE FULLTEXT CATALOG")]
public static DatabasePermissionSetValue CreateFulltextCatalog;
    [PermissionTypeAttribute("CRMT")]
[PermissionNameAttribute("CREATE MESSAGE TYPE")]
public static DatabasePermissionSetValue CreateMessageType;
    [PermissionTypeAttribute("CRPR")]
[PermissionNameAttribute("CREATE PROCEDURE")]
public static DatabasePermissionSetValue CreateProcedure;
    [PermissionTypeAttribute("CRQU")]
[PermissionNameAttribute("CREATE QUEUE")]
public static DatabasePermissionSetValue CreateQueue;
    [PermissionTypeAttribute("CRRL")]
[PermissionNameAttribute("CREATE ROLE")]
public static DatabasePermissionSetValue CreateRole;
    [PermissionTypeAttribute("CRRT")]
[PermissionNameAttribute("CREATE ROUTE")]
public static DatabasePermissionSetValue CreateRoute;
    [PermissionTypeAttribute("CRRU")]
[PermissionNameAttribute("CREATE RULE")]
public static DatabasePermissionSetValue CreateRule;
    [PermissionTypeAttribute("CRSB")]
[PermissionNameAttribute("CREATE REMOTE SERVICE BINDING")]
public static DatabasePermissionSetValue CreateRemoteServiceBinding;
    [PermissionTypeAttribute("CRSC")]
[PermissionNameAttribute("CREATE CONTRACT")]
public static DatabasePermissionSetValue CreateContract;
    [PermissionTypeAttribute("CRSK")]
[PermissionNameAttribute("CREATE SYMMETRIC KEY")]
public static DatabasePermissionSetValue CreateSymmetricKey;
    [PermissionTypeAttribute("CRSM")]
[PermissionNameAttribute("CREATE SCHEMA")]
public static DatabasePermissionSetValue CreateSchema;
    [PermissionTypeAttribute("CRSN")]
[PermissionNameAttribute("CREATE SYNONYM")]
public static DatabasePermissionSetValue CreateSynonym;
    [PermissionTypeAttribute("CRSV")]
[PermissionNameAttribute("CREATE SERVICE")]
public static DatabasePermissionSetValue CreateService;
    [PermissionTypeAttribute("CRTB")]
[PermissionNameAttribute("CREATE TABLE")]
public static DatabasePermissionSetValue CreateTable;
    [PermissionTypeAttribute("CRTY")]
[PermissionNameAttribute("CREATE TYPE")]
public static DatabasePermissionSetValue CreateType;
    [PermissionTypeAttribute("CRVW")]
[PermissionNameAttribute("CREATE VIEW")]
public static DatabasePermissionSetValue CreateView;
    [PermissionTypeAttribute("CRXS")]
[PermissionNameAttribute("CREATE XML SCHEMA COLLECTION")]
public static DatabasePermissionSetValue CreateXmlSchemaCollection;
    [PermissionTypeAttribute("DL")]
[PermissionNameAttribute("DELETE")]
public static DatabasePermissionSetValue Delete;
    [PermissionTypeAttribute("EX")]
[PermissionNameAttribute("EXECUTE")]
public static DatabasePermissionSetValue Execute;
    [PermissionTypeAttribute("IN")]
[PermissionNameAttribute("INSERT")]
public static DatabasePermissionSetValue Insert;
    [PermissionTypeAttribute("RF")]
[PermissionNameAttribute("REFERENCES")]
public static DatabasePermissionSetValue References;
    [PermissionTypeAttribute("SL")]
[PermissionNameAttribute("SELECT")]
public static DatabasePermissionSetValue Select;
    [PermissionTypeAttribute("SPLN")]
[PermissionNameAttribute("SHOWPLAN")]
public static DatabasePermissionSetValue Showplan;
    [PermissionTypeAttribute("SUQN")]
[PermissionNameAttribute("SUBSCRIBE QUERY NOTIFICATIONS")]
public static DatabasePermissionSetValue SubscribeQueryNotifications;
    [PermissionTypeAttribute("TO")]
[PermissionNameAttribute("TAKE OWNERSHIP")]
public static DatabasePermissionSetValue TakeOwnership;
    [PermissionTypeAttribute("UP")]
[PermissionNameAttribute("UPDATE")]
public static DatabasePermissionSetValue Update;
    [PermissionTypeAttribute("VW")]
[PermissionNameAttribute("VIEW DEFINITION")]
public static DatabasePermissionSetValue ViewDefinition;
    [PermissionTypeAttribute("VWDS")]
[PermissionNameAttribute("VIEW DATABASE STATE")]
public static DatabasePermissionSetValue ViewDatabaseState;
    [PermissionTypeAttribute("ALDA")]
[PermissionNameAttribute("ALTER ANY DATABASE AUDIT")]
public static DatabasePermissionSetValue AlterAnyDatabaseAudit;
    [PermissionTypeAttribute("ALSP")]
[PermissionNameAttribute("ALTER ANY SECURITY POLICY")]
public static DatabasePermissionSetValue AlterAnySecurityPolicy;
    [PermissionTypeAttribute("AEDS")]
[PermissionNameAttribute("ALTER ANY EXTERNAL DATA SOURCE")]
public static DatabasePermissionSetValue AlterAnyExternalDataSource;
    [PermissionTypeAttribute("AEFF")]
[PermissionNameAttribute("ALTER ANY EXTERNAL FILE FORMAT")]
public static DatabasePermissionSetValue AlterAnyExternalFileFormat;
    [PermissionTypeAttribute("AAMK")]
[PermissionNameAttribute("ALTER ANY MASK")]
public static DatabasePermissionSetValue AlterAnyMask;
    [PermissionTypeAttribute("UMSK")]
[PermissionNameAttribute("UNMASK")]
public static DatabasePermissionSetValue Unmask;
    [PermissionTypeAttribute("VWCK")]
[PermissionNameAttribute("VIEW ANY COLUMN ENCRYPTION KEY DEFINITION")]
public static DatabasePermissionSetValue ViewAnyColumnEncryptionKeyDefinition;
    [PermissionTypeAttribute("VWCM")]
[PermissionNameAttribute("VIEW ANY COLUMN MASTER KEY DEFINITION")]
public static DatabasePermissionSetValue ViewAnyColumnMasterKeyDefinition;
    [PermissionTypeAttribute("AADS")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSession;
    [PermissionTypeAttribute("ALCK")]
[PermissionNameAttribute("ALTER ANY COLUMN ENCRYPTION KEY")]
public static DatabasePermissionSetValue AlterAnyColumnEncryptionKey;
    [PermissionTypeAttribute("ALCM")]
[PermissionNameAttribute("ALTER ANY COLUMN MASTER KEY")]
public static DatabasePermissionSetValue AlterAnyColumnMasterKey;
    [PermissionTypeAttribute("ALDC")]
[PermissionNameAttribute("ALTER ANY DATABASE SCOPED CONFIGURATION")]
public static DatabasePermissionSetValue AlterAnyDatabaseScopedConfiguration;
    [PermissionTypeAttribute("ALEL")]
[PermissionNameAttribute("ALTER ANY EXTERNAL LIBRARY")]
public static DatabasePermissionSetValue AlterAnyExternalLibrary;
    [PermissionTypeAttribute("DABO")]
[PermissionNameAttribute("ADMINISTER DATABASE BULK OPERATIONS")]
public static DatabasePermissionSetValue AdministerDatabaseBulkOperations;
    [PermissionTypeAttribute("EAES")]
[PermissionNameAttribute("EXECUTE ANY EXTERNAL SCRIPT")]
public static DatabasePermissionSetValue ExecuteAnyExternalScript;
    [PermissionTypeAttribute("KIDC")]
[PermissionNameAttribute("KILL DATABASE CONNECTION")]
public static DatabasePermissionSetValue KillDatabaseConnection;
    [PermissionTypeAttribute("CREL")]
[PermissionNameAttribute("CREATE EXTERNAL LIBRARY")]
public static DatabasePermissionSetValue CreateExternalLibrary;
    [PermissionTypeAttribute("AASC")]
[PermissionNameAttribute("ALTER ANY SENSITIVITY CLASSIFICATION")]
public static DatabasePermissionSetValue AlterAnySensitivityClassification;
    [PermissionTypeAttribute("VASC")]
[PermissionNameAttribute("VIEW ANY SENSITIVITY CLASSIFICATION")]
public static DatabasePermissionSetValue ViewAnySensitivityClassification;
    [PermissionTypeAttribute("ALLA")]
[PermissionNameAttribute("ALTER ANY EXTERNAL LANGUAGE")]
public static DatabasePermissionSetValue AlterAnyExternalLanguage;
    [PermissionTypeAttribute("CRLA")]
[PermissionNameAttribute("CREATE EXTERNAL LANGUAGE")]
public static DatabasePermissionSetValue CreateExternalLanguage;
    [PermissionTypeAttribute("AEST")]
[PermissionNameAttribute("ALTER ANY EXTERNAL STREAM")]
public static DatabasePermissionSetValue AlterAnyExternalStream;
    [PermissionTypeAttribute("AESJ")]
[PermissionNameAttribute("ALTER ANY EXTERNAL JOB")]
public static DatabasePermissionSetValue AlterAnyExternalJob;
    [PermissionTypeAttribute("OC")]
[PermissionNameAttribute("OWNERSHIP CHAINING")]
public static DatabasePermissionSetValue OwnershipChaining;
    [PermissionTypeAttribute("CUSR")]
[PermissionNameAttribute("CREATE USER")]
public static DatabasePermissionSetValue CreateUser;
    [PermissionTypeAttribute("VDS")]
[PermissionNameAttribute("VIEW DATABASE SECURITY STATE")]
public static DatabasePermissionSetValue ViewDatabaseSecurityState;
    [PermissionTypeAttribute("VDP")]
[PermissionNameAttribute("VIEW DATABASE PERFORMANCE STATE")]
public static DatabasePermissionSetValue ViewDatabasePerformanceState;
    [PermissionTypeAttribute("VWS")]
[PermissionNameAttribute("VIEW SECURITY DEFINITION")]
public static DatabasePermissionSetValue ViewSecurityDefinition;
    [PermissionTypeAttribute("VCD")]
[PermissionNameAttribute("VIEW CRYPTOGRAPHICALLY SECURED DEFINITION")]
public static DatabasePermissionSetValue ViewCryptographicallySecuredDefinition;
    [PermissionTypeAttribute("EL")]
[PermissionNameAttribute("ENABLE LEDGER")]
public static DatabasePermissionSetValue EnableLedger;
    [PermissionTypeAttribute("ALR")]
[PermissionNameAttribute("ALTER LEDGER")]
public static DatabasePermissionSetValue AlterLedger;
    [PermissionTypeAttribute("VLC")]
[PermissionNameAttribute("VIEW LEDGER CONTENT")]
public static DatabasePermissionSetValue ViewLedgerContent;
    [PermissionTypeAttribute("EAEE")]
[PermissionNameAttribute("EXECUTE ANY EXTERNAL ENDPOINT")]
public static DatabasePermissionSetValue ExecuteAnyExternalEndpoint;
    [PermissionTypeAttribute("CRDS")]
[PermissionNameAttribute("CREATE ANY DATABASE EVENT SESSION")]
public static DatabasePermissionSetValue CreateAnyDatabaseEventSession;
    [PermissionTypeAttribute("DRDS")]
[PermissionNameAttribute("DROP ANY DATABASE EVENT SESSION")]
public static DatabasePermissionSetValue DropAnyDatabaseEventSession;
    [PermissionTypeAttribute("LDSO")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION OPTION")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSessionOption;
    [PermissionTypeAttribute("LDAE")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION ADD EVENT")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSessionAddEvent;
    [PermissionTypeAttribute("LDDE")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION DROP EVENT")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSessionDropEvent;
    [PermissionTypeAttribute("EDES")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION ENABLE")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSessionEnable;
    [PermissionTypeAttribute("DDES")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION DISABLE")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSessionDisable;
    [PermissionTypeAttribute("LDAT")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION ADD TARGET")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSessionAddTarget;
    [PermissionTypeAttribute("LDDT")]
[PermissionNameAttribute("ALTER ANY DATABASE EVENT SESSION DROP TARGET")]
public static DatabasePermissionSetValue AlterAnyDatabaseEventSessionDropTarget;
    [PermissionTypeAttribute("VWP")]
[PermissionNameAttribute("VIEW PERFORMANCE DEFINITION")]
public static DatabasePermissionSetValue ViewPerformanceDefinition;
    [PermissionTypeAttribute("VDSA")]
[PermissionNameAttribute("VIEW DATABASE SECURITY AUDIT")]
public static DatabasePermissionSetValue ViewDatabaseSecurityAudit;
    [PermissionTypeAttribute("ALC")]
[PermissionNameAttribute("ALTER LEDGER CONFIGURATION")]
public static DatabasePermissionSetValue AlterLedgerConfiguration;
    [PermissionTypeAttribute("ALEM")]
[PermissionNameAttribute("ALTER ANY EXTERNAL MIRROR")]
public static DatabasePermissionSetValue AlterAnyExternalMirror;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.DatabaseReplicaSuspendReasonConverter")]
public enum Microsoft.SqlServer.Management.Smo.DatabaseReplicaSuspendReason : Enum {
    public int value__;
    [LocDisplayNameAttribute("drsrSuspendFromUser")]
public static DatabaseReplicaSuspendReason SuspendFromUser;
    [LocDisplayNameAttribute("drsrSuspendFromPartner")]
public static DatabaseReplicaSuspendReason SuspendFromPartner;
    [LocDisplayNameAttribute("drsrSuspendFromRedo")]
public static DatabaseReplicaSuspendReason SuspendFromRedo;
    [LocDisplayNameAttribute("drsrSuspendFromApply")]
public static DatabaseReplicaSuspendReason SuspendFromApply;
    [LocDisplayNameAttribute("drsrSuspendFromCapture")]
public static DatabaseReplicaSuspendReason SuspendFromCapture;
    [LocDisplayNameAttribute("drsrSuspendFromRestart")]
public static DatabaseReplicaSuspendReason SuspendFromRestart;
    [LocDisplayNameAttribute("drsrSuspendFromUndo")]
public static DatabaseReplicaSuspendReason SuspendFromUndo;
    [LocDisplayNameAttribute("drsrNotApplicable")]
public static DatabaseReplicaSuspendReason NotApplicable;
}
internal class Microsoft.SqlServer.Management.Smo.DatabaseReplicaSuspendReasonConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationOnOffConverter")]
public enum Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationOnOff : Enum {
    public int value__;
    [LocDisplayNameAttribute("dbScopedConfigurationOff")]
[TsqlSyntaxStringAttribute("OFF")]
public static DatabaseScopedConfigurationOnOff Off;
    [LocDisplayNameAttribute("dbScopedConfigurationOn")]
[TsqlSyntaxStringAttribute("ON")]
public static DatabaseScopedConfigurationOnOff On;
    [LocDisplayNameAttribute("dbScopedConfigurationPrimary")]
[TsqlSyntaxStringAttribute("PRIMARY")]
public static DatabaseScopedConfigurationOnOff Primary;
}
public class Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationOnOffConverter : EnumToDisplayNameConverter {
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.DatabaseStatus : Enum {
    public int value__;
    public static DatabaseStatus Normal;
    public static DatabaseStatus Restoring;
    public static DatabaseStatus RecoveryPending;
    public static DatabaseStatus Recovering;
    public static DatabaseStatus Suspect;
    public static DatabaseStatus Offline;
    public static DatabaseStatus Standby;
    public static DatabaseStatus Shutdown;
    public static DatabaseStatus EmergencyMode;
    public static DatabaseStatus AutoClosed;
    public static DatabaseStatus Inaccessible;
}
public enum Microsoft.SqlServer.Management.Smo.DatabaseUserAccess : Enum {
    public int value__;
    public static DatabaseUserAccess Single;
    public static DatabaseUserAccess Restricted;
    public static DatabaseUserAccess Multiple;
}
public enum Microsoft.SqlServer.Management.Smo.DataCompressionType : Enum {
    public int value__;
    public static DataCompressionType None;
    public static DataCompressionType Row;
    public static DataCompressionType Page;
    public static DataCompressionType ColumnStore;
    public static DataCompressionType ColumnStoreArchive;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Smo.DataProvider : object {
    private ExecuteSql m_execSql;
    private DataTable m_table;
    private SqlDataReader m_dataReader;
    private DataTable m_schemaTable;
    private int nonTriggeredPropertiesCount;
    private Object[] rowData;
    private ColumnDataManipulation[] rowDataManipulation;
    private bool m_bHasTypeCast;
    private bool m_bHasPostProcess;
    private RetriveMode m_RetriveMode;
    private int m_nCurentCachePos;
    private SqlCommand m_command;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    internal int TableRowCount { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public DataProvider(StatementBuilder sb);
    public DataProvider(StatementBuilder sb, RetriveMode rm);
    private void Init(StatementBuilder sb, RetriveMode rm);
    public void SetConnectionAndQuery(ExecuteSql execSql, string query);
    public void InitRowDataManipulation(ArrayList parentProperties, SortedList postProcessList);
    public void InitSchemaTable(ArrayList parentProperties);
    internal object GetTrigeredValue(int i);
    internal object GetDataFromStorage(int i);
    internal void SetDataInStorage(int i, object data);
    private bool ReadInternal();
    private void ManipulateRowDataPostProcess();
    private void ManipulateRowDataType();
    private void ManipulateRowData();
    public sealed virtual int get_Depth();
    public sealed virtual bool get_IsClosed();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Close();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    internal DataTable GetTable();
    internal int get_TableRowCount();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    private int AdjustIndex(int i);
    public sealed virtual object get_Item(int idx);
    public sealed virtual object get_Item(string name);
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual string GetString(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.DataRetentionPeriodUnitTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.DataRetentionPeriodUnit : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("INFINITE")]
[LocDisplayNameAttribute("Infinite")]
public static DataRetentionPeriodUnit Infinite;
    [TsqlSyntaxStringAttribute("DAY")]
[LocDisplayNameAttribute("Day")]
public static DataRetentionPeriodUnit Day;
    [TsqlSyntaxStringAttribute("WEEK")]
[LocDisplayNameAttribute("Week")]
public static DataRetentionPeriodUnit Week;
    [TsqlSyntaxStringAttribute("MONTH")]
[LocDisplayNameAttribute("Month")]
public static DataRetentionPeriodUnit Month;
    [TsqlSyntaxStringAttribute("YEAR")]
[LocDisplayNameAttribute("Year")]
public static DataRetentionPeriodUnit Year;
}
public class Microsoft.SqlServer.Management.Smo.DataRetentionPeriodUnitTypeConverter : EnumToDisplayNameConverter {
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.DdlTextParser : object {
    private static string sSingleLineCommentSql;
    private static string sSingleLineCommentC;
    private static string sNestedMultiLineComment;
    private static string sNestedMultiLineCommentOptimized;
    private static string sSingleQuotedString;
    private static string sDoubleQuotedString;
    private static string sWord;
    private static string sBraketedWord;
    private static string sProcNumber;
    private static string sDot;
    private static string sPharanthesis;
    private static string sParam;
    private static string sExec;
    private static string sReturns;
    private static string sReturnsTable;
    private static string sReturn;
    private static string sDelim1;
    private static string sDelim2;
    internal static DdlTextParserSingleton ddlTextParserSingleton;
    private static string sNestedMultiLineCommentOptimized_end;
    private static string sSpace_end;
    private static string sWord_end;
    private static string sEol_end;
    private static string sSingleLineComment_end;
    private static string sReject_end;
    private static DdlTextParser();
    private static bool ReadNameFromDdl(Match& m, bool useQuotedIdentifier, DdlTextParserHeaderInfo& headerInfo);
    private static bool ReadFullNameFromDdl(Match& m, bool useQuotedIdentifier, DdlTextParserHeaderInfo& headerInfo);
    public static bool CheckDdlHeader(string objectText, bool useQuotedIdentifier, DdlTextParserHeaderInfo& headerInfo);
    public static bool CheckDdlHeader(string objectText, bool useQuotedIdentifier, bool isOrAlterSupported, DdlTextParserHeaderInfo& headerInfo);
    public static int ParseDdlHeader(string objectText);
    public static int ParseCheckOption(string ddlText);
}
public class Microsoft.SqlServer.Management.Smo.DdlTextParserHeaderInfo : ValueType {
    public bool scriptForCreate;
    public int indexCreate;
    public bool scriptContainsOrAlter;
    public int indexOrAlterStart;
    public int indexOrAlterEnd;
    public int indexNameStart;
    public int indexNameEnd;
    public string objectType;
    public string schema;
    public string name;
    public string database;
    public string procedureNumber;
    public int indexNameStartSecondary;
    public int indexNameEndSecondary;
    public string schemaSecondary;
    public string nameSecondary;
    public string databaseSecondary;
}
internal class Microsoft.SqlServer.Management.Smo.DdlTextParserSingleton : object {
    internal bool hasParanthesis;
    internal string returnTableVariableName;
    internal Regex regex;
    internal Regex m_r_end;
}
public enum Microsoft.SqlServer.Management.Smo.DelayedDurability : Enum {
    public int value__;
    public static DelayedDurability Disabled;
    public static DelayedDurability Allowed;
    public static DelayedDurability Forced;
}
internal class Microsoft.SqlServer.Management.Smo.DiskFile : SqlObject {
    public virtual EnumResult GetData(EnumResult erParent);
}
public enum Microsoft.SqlServer.Management.Smo.DurabilityType : Enum {
    public int value__;
    public static DurabilityType SchemaOnly;
    public static DurabilityType SchemaAndData;
}
public class Microsoft.SqlServer.Management.Smo.DwTableDistributionConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.DwTableDistributionConverter")]
public enum Microsoft.SqlServer.Management.Smo.DwTableDistributionType : Enum {
    public int value__;
    public static DwTableDistributionType Undefined;
    public static DwTableDistributionType None;
    [TsqlSyntaxStringAttribute("HASH")]
public static DwTableDistributionType Hash;
    [TsqlSyntaxStringAttribute("REPLICATE")]
public static DwTableDistributionType Replicate;
    [TsqlSyntaxStringAttribute("ROUND_ROBIN")]
public static DwTableDistributionType RoundRobin;
}
public class Microsoft.SqlServer.Management.Smo.DwViewDistributionConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.DwViewDistributionConverter")]
public enum Microsoft.SqlServer.Management.Smo.DwViewDistributionType : Enum {
    public int value__;
    public static DwViewDistributionType Undefined;
    [TsqlSyntaxStringAttribute("HASH")]
public static DwViewDistributionType Hash;
    [TsqlSyntaxStringAttribute("ROUND_ROBIN")]
public static DwViewDistributionType RoundRobin;
}
public enum Microsoft.SqlServer.Management.Smo.EdgeConstraintDeleteAction : Enum {
    public int value__;
    public static EdgeConstraintDeleteAction NoAction;
    public static EdgeConstraintDeleteAction Cascade;
}
public enum Microsoft.SqlServer.Management.Smo.EndpointAuthenticationOrder : Enum {
    public int value__;
    public static EndpointAuthenticationOrder Ntlm;
    public static EndpointAuthenticationOrder Kerberos;
    public static EndpointAuthenticationOrder Negotiate;
    public static EndpointAuthenticationOrder Certificate;
    public static EndpointAuthenticationOrder NtlmCertificate;
    public static EndpointAuthenticationOrder KerberosCertificate;
    public static EndpointAuthenticationOrder NegotiateCertificate;
    public static EndpointAuthenticationOrder CertificateNtlm;
    public static EndpointAuthenticationOrder CertificateKerberos;
    public static EndpointAuthenticationOrder CertificateNegotiate;
}
public enum Microsoft.SqlServer.Management.Smo.EndpointEncryption : Enum {
    public int value__;
    public static EndpointEncryption Disabled;
    public static EndpointEncryption Supported;
    public static EndpointEncryption Required;
}
public enum Microsoft.SqlServer.Management.Smo.EndpointEncryptionAlgorithm : Enum {
    public int value__;
    public static EndpointEncryptionAlgorithm None;
    public static EndpointEncryptionAlgorithm RC4;
    public static EndpointEncryptionAlgorithm Aes;
    public static EndpointEncryptionAlgorithm AesRC4;
    public static EndpointEncryptionAlgorithm RC4Aes;
}
public enum Microsoft.SqlServer.Management.Smo.EndpointState : Enum {
    public int value__;
    public static EndpointState Started;
    public static EndpointState Stopped;
    public static EndpointState Disabled;
}
public enum Microsoft.SqlServer.Management.Smo.EndpointType : Enum {
    public int value__;
    public static EndpointType Soap;
    public static EndpointType TSql;
    public static EndpointType ServiceBroker;
    public static EndpointType DatabaseMirroring;
}
public abstract class Microsoft.SqlServer.Management.Smo.EnumToDisplayNameConverter : EnumConverter {
    private Type type;
    protected EnumToDisplayNameConverter(Type type);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    private object LocalizedStringToEnumValue(string value, Type enumType, CultureInfo culture);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    private string EnumValueToLocString(string enumMemberName, Type enumType);
    private string EnumValueToTsqlSyntax(string enumMemberName, Type enumType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public abstract class Microsoft.SqlServer.Management.Smo.EventSetBase : object {
    private BitArray m_storage;
    protected internal BitArray Storage { get; protected internal set; }
    public int NumberOfElements { get; }
    public EventSetBase(EventSetBase eventSetBase);
    protected internal BitArray get_Storage();
    protected internal void set_Storage(BitArray value);
    public abstract virtual int get_NumberOfElements();
    public abstract virtual EventSetBase Copy();
    internal void SetBitAt(int idx, bool value);
    internal bool GetBitAt(int idx);
    protected void SetValue(EventSetBase options, bool value);
    protected bool FitsMask(EventSetBase mask);
    protected bool HasCommonBits(EventSetBase optionsCompare);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.ExecuteSql : object {
    private ServerConnection m_conctx;
    private bool bHasConnected;
    private ArrayList m_Messages;
    private Nullable`1<SqlExecutionModes> m_semInitial;
    private SqlInfoMessageEventHandler m_ServerInfoMessage;
    private string databaseName;
    public ExecuteSql(object con);
    public ExecuteSql(object con, string databaseName, bool poolConnection);
    private void InitServerConnectionWithDatabaseName(bool poolConnection);
    internal void Connect();
    internal void Disconnect();
    private void InitConnection(object con);
    private void StartCapture();
    private void RecordMessage(object sender, SqlInfoMessageEventArgs e);
    private ArrayList ClearCapture();
    private bool TryToReconnect(ExecutionFailureException e);
    public void ExecuteImmediate(string query);
    public DataTable ExecuteWithResults(string query);
    public SqlDataReader GetDataReader(string query, SqlCommand& command);
    public SqlDataReader GetDataReader(string query);
    public ServerVersion GetServerVersion();
    public DatabaseEngineType GetDatabaseEngineType();
    public DatabaseEngineEdition GetDatabaseEngineEdition();
    internal bool IsContainedAuthentication();
    public static ArrayList ExecuteImmediateGetMessage(string query, object con);
    public static void ExecuteImmediate(string query, object con);
    public static DataTable ExecuteWithResults(string query, object con);
    public static DataTable ExecuteWithResults(string query, object con, string database, bool poolConnection);
    public static DataTable ExecuteWithResults(StringCollection query, object con, StatementBuilder sb);
    internal static DataProvider GetDataProvider(StringCollection query, object con, StatementBuilder sb);
    internal static DataProvider GetDataProvider(StringCollection query, object con, StatementBuilder sb, RetriveMode rm);
    public static DataTable ExecuteWithResults(StringCollection query, object con);
    public static DataTable ExecuteWithResults(StringCollection query, object con, string dbName, bool poolConnection);
    private DataTable Execute(StringCollection query);
    public static ServerVersion GetServerVersion(object con);
    public static DatabaseEngineType GetDatabaseEngineType(object con);
    public static DatabaseEngineEdition GetDatabaseEngineEdition(object con);
    internal static bool IsContainedAuthentication(object con);
    internal static bool GetIsDatabaseAccessibleNoThrow(object con, string databaseName);
}
public enum Microsoft.SqlServer.Management.Smo.ExecutionContext : Enum {
    public int value__;
    public static ExecutionContext Caller;
    public static ExecutionContext Owner;
    public static ExecutionContext ExecuteAsUser;
    public static ExecutionContext Self;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ExternalDataSourcePushdownOptionConverter")]
public enum Microsoft.SqlServer.Management.Smo.ExternalDataSourcePushdownOption : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("OFF")]
public static ExternalDataSourcePushdownOption Off;
    [TsqlSyntaxStringAttribute("ON")]
public static ExternalDataSourcePushdownOption On;
}
public class Microsoft.SqlServer.Management.Smo.ExternalDataSourcePushdownOptionConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ExternalDataSourceTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ExternalDataSourceType : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("HADOOP")]
public static ExternalDataSourceType Hadoop;
    [TsqlSyntaxStringAttribute("RDBMS")]
public static ExternalDataSourceType Rdbms;
    [TsqlSyntaxStringAttribute("SHARD_MAP_MANAGER")]
public static ExternalDataSourceType ShardMapManager;
    [TsqlSyntaxStringAttribute("BLOB_STORAGE")]
public static ExternalDataSourceType BlobStorage;
    public static ExternalDataSourceType ExternalGenerics;
}
public class Microsoft.SqlServer.Management.Smo.ExternalDataSourceTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ExternalFileFormatTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ExternalFileFormatType : Enum {
    public int value__;
    public static ExternalFileFormatType None;
    [TsqlSyntaxStringAttribute("DELIMITEDTEXT")]
public static ExternalFileFormatType DelimitedText;
    [TsqlSyntaxStringAttribute("RCFILE")]
public static ExternalFileFormatType RcFile;
    [TsqlSyntaxStringAttribute("ORC")]
public static ExternalFileFormatType Orc;
    [TsqlSyntaxStringAttribute("PARQUET")]
public static ExternalFileFormatType Parquet;
    [TsqlSyntaxStringAttribute("JSON")]
public static ExternalFileFormatType JSON;
    [TsqlSyntaxStringAttribute("DELTA")]
public static ExternalFileFormatType Delta;
}
public class Microsoft.SqlServer.Management.Smo.ExternalFileFormatTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ExternalLanguageFilePlatform")]
public enum Microsoft.SqlServer.Management.Smo.ExternalLanguageFilePlatform : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("NONE")]
public static ExternalLanguageFilePlatform Default;
    [TsqlSyntaxStringAttribute("WINDOWS")]
public static ExternalLanguageFilePlatform Windows;
    [TsqlSyntaxStringAttribute("LINUX")]
public static ExternalLanguageFilePlatform Linux;
}
public class Microsoft.SqlServer.Management.Smo.ExternalLanguageFilePlatformConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.ExternalLibraryContentType : Enum {
    public int value__;
    public static ExternalLibraryContentType Binary;
    public static ExternalLibraryContentType Path;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ExternalStreamingJobStatusTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ExternalStreamingJobStatusType : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("CREATED")]
public static ExternalStreamingJobStatusType Created;
    [TsqlSyntaxStringAttribute("STARTING")]
public static ExternalStreamingJobStatusType Starting;
    [TsqlSyntaxStringAttribute("STOPPING")]
public static ExternalStreamingJobStatusType Stopping;
    [TsqlSyntaxStringAttribute("FAILED")]
public static ExternalStreamingJobStatusType Failed;
    [TsqlSyntaxStringAttribute("STOPPED")]
public static ExternalStreamingJobStatusType Stopped;
    [TsqlSyntaxStringAttribute("IDLE")]
public static ExternalStreamingJobStatusType Idle;
    [TsqlSyntaxStringAttribute("PROCESSING")]
public static ExternalStreamingJobStatusType Processing;
    [TsqlSyntaxStringAttribute("DEGRADED")]
public static ExternalStreamingJobStatusType Degraded;
}
public class Microsoft.SqlServer.Management.Smo.ExternalStreamingJobStatusTypeConverter : EnumToDisplayNameConverter {
}
public class Microsoft.SqlServer.Management.Smo.ExternalTableDistributionConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ExternalTableDistributionConverter")]
public enum Microsoft.SqlServer.Management.Smo.ExternalTableDistributionType : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("SHARDED")]
public static ExternalTableDistributionType Sharded;
    [TsqlSyntaxStringAttribute("REPLICATED")]
public static ExternalTableDistributionType Replicated;
    [TsqlSyntaxStringAttribute("ROUND_ROBIN")]
public static ExternalTableDistributionType RoundRobin;
    public static ExternalTableDistributionType None;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ExternalTableRejectTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ExternalTableRejectType : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("VALUE")]
public static ExternalTableRejectType Value;
    [TsqlSyntaxStringAttribute("PERCENTAGE")]
public static ExternalTableRejectType Percentage;
    public static ExternalTableRejectType None;
}
public class Microsoft.SqlServer.Management.Smo.ExternalTableRejectTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.FileGroupTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.FileGroupType : Enum {
    public int value__;
    [LocDisplayNameAttribute("fgtRowsFileGroup")]
public static FileGroupType RowsFileGroup;
    [LocDisplayNameAttribute("fgtFileStreamDataFileGroup")]
public static FileGroupType FileStreamDataFileGroup;
    [LocDisplayNameAttribute("fgtMemoryOptimizedDataFileGroup")]
public static FileGroupType MemoryOptimizedDataFileGroup;
}
internal class Microsoft.SqlServer.Management.Smo.FileGroupTypeConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.FileGrowthType : Enum {
    public int value__;
    public static FileGrowthType KB;
    public static FileGrowthType Percent;
    public static FileGrowthType None;
}
public enum Microsoft.SqlServer.Management.Smo.FileStreamLevel : Enum {
    public int value__;
    public static FileStreamLevel Disabled;
    public static FileStreamLevel TSqlAccess;
    public static FileStreamLevel TSqlLocalFileSystemAccess;
    public static FileStreamLevel TSqlFullFileSystemAccess;
}
public enum Microsoft.SqlServer.Management.Smo.FilestreamNonTransactedAccessType : Enum {
    public int value__;
    public static FilestreamNonTransactedAccessType Off;
    public static FilestreamNonTransactedAccessType ReadOnly;
    public static FilestreamNonTransactedAccessType Full;
}
public enum Microsoft.SqlServer.Management.Smo.ForeignKeyAction : Enum {
    public int value__;
    public static ForeignKeyAction NoAction;
    public static ForeignKeyAction Cascade;
    public static ForeignKeyAction SetNull;
    public static ForeignKeyAction SetDefault;
}
public enum Microsoft.SqlServer.Management.Smo.FullTextCatalogUpgradeOption : Enum {
    public int value__;
    public static FullTextCatalogUpgradeOption AlwaysRebuild;
    public static FullTextCatalogUpgradeOption AlwaysReset;
    public static FullTextCatalogUpgradeOption ImportWithRebuild;
}
public enum Microsoft.SqlServer.Management.Smo.GraphType : Enum {
    public int value__;
    public static GraphType None;
    public static GraphType GraphId;
    public static GraphType GraphIdComputed;
    public static GraphType GraphFromId;
    public static GraphType GraphFromObjId;
    public static GraphType GraphFromIdComputed;
    public static GraphType GraphToId;
    public static GraphType GraphToObjId;
    public static GraphType GraphToIdComputed;
}
public enum Microsoft.SqlServer.Management.Smo.HadrManagerStatus : Enum {
    public int value__;
    [LocDisplayNameAttribute("hmsPendingCommunication")]
public static HadrManagerStatus PendingCommunication;
    [LocDisplayNameAttribute("hmsRunning")]
public static HadrManagerStatus Running;
    [LocDisplayNameAttribute("hmsFailed")]
public static HadrManagerStatus Failed;
}
internal class Microsoft.SqlServer.Management.Smo.HADRManagerStatusConverter : EnumToDisplayNameConverter {
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.HttpAuthenticationModes : Enum {
    public int value__;
    public static HttpAuthenticationModes Anonymous;
    public static HttpAuthenticationModes Basic;
    public static HttpAuthenticationModes Digest;
    public static HttpAuthenticationModes Integrated;
    public static HttpAuthenticationModes Ntlm;
    public static HttpAuthenticationModes Kerberos;
    public static HttpAuthenticationModes All;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.HttpPortTypes : Enum {
    public int value__;
    public static HttpPortTypes None;
    public static HttpPortTypes Ssl;
    public static HttpPortTypes Clear;
    public static HttpPortTypes All;
}
internal class Microsoft.SqlServer.Management.Smo.IDKey : object {
    private int m_id;
    private int m_type;
    public int id { get; public set; }
    public int type { get; public set; }
    internal IDKey(int id, int type);
    public int get_id();
    public void set_id(int value);
    public int get_type();
    public void set_type(int value);
    public sealed virtual int CompareTo(object o);
}
public enum Microsoft.SqlServer.Management.Smo.ImplementationType : Enum {
    public int value__;
    public static ImplementationType TransactSql;
    public static ImplementationType SqlClr;
}
public enum Microsoft.SqlServer.Management.Smo.IndexedXmlPathType : Enum {
    public int value__;
    public static IndexedXmlPathType XQuery;
    public static IndexedXmlPathType Sql;
}
public enum Microsoft.SqlServer.Management.Smo.IndexKeyType : Enum {
    public int value__;
    public static IndexKeyType None;
    public static IndexKeyType DriPrimaryKey;
    public static IndexKeyType DriUniqueKey;
}
public enum Microsoft.SqlServer.Management.Smo.IndexPopulationAction : Enum {
    public int value__;
    public static IndexPopulationAction Full;
    public static IndexPopulationAction Incremental;
    public static IndexPopulationAction Update;
}
public enum Microsoft.SqlServer.Management.Smo.IndexPopulationStatus : Enum {
    public int value__;
    public static IndexPopulationStatus None;
    public static IndexPopulationStatus Full;
    public static IndexPopulationStatus Incremental;
    public static IndexPopulationStatus Manual;
    public static IndexPopulationStatus Background;
    public static IndexPopulationStatus PausedOrThrottled;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.IndexTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.IndexType : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("CLUSTERED INDEX")]
[LocDisplayNameAttribute("Clustered")]
public static IndexType ClusteredIndex;
    [TsqlSyntaxStringAttribute("INDEX")]
[LocDisplayNameAttribute("NonClustered")]
public static IndexType NonClusteredIndex;
    [TsqlSyntaxStringAttribute("PRIMARY XML INDEX")]
[LocDisplayNameAttribute("PrimaryXml")]
public static IndexType PrimaryXmlIndex;
    [TsqlSyntaxStringAttribute("XML INDEX")]
[LocDisplayNameAttribute("SecondaryXml")]
public static IndexType SecondaryXmlIndex;
    [TsqlSyntaxStringAttribute("SPATIAL INDEX")]
[LocDisplayNameAttribute("Spatial")]
public static IndexType SpatialIndex;
    [TsqlSyntaxStringAttribute("NONCLUSTERED COLUMNSTORE INDEX")]
[LocDisplayNameAttribute("NonClusteredColumnStore")]
public static IndexType NonClusteredColumnStoreIndex;
    [TsqlSyntaxStringAttribute("NONCLUSTERED HASH INDEX")]
[LocDisplayNameAttribute("NonClusteredHash")]
public static IndexType NonClusteredHashIndex;
    [TsqlSyntaxStringAttribute("SELECTIVE XML INDEX")]
[LocDisplayNameAttribute("SelectiveXml")]
public static IndexType SelectiveXmlIndex;
    [TsqlSyntaxStringAttribute("")]
[LocDisplayNameAttribute("SecondarySelectiveXml")]
public static IndexType SecondarySelectiveXmlIndex;
    [TsqlSyntaxStringAttribute("CLUSTERED COLUMNSTORE INDEX")]
[LocDisplayNameAttribute("ClusteredColumnStore")]
public static IndexType ClusteredColumnStoreIndex;
    [TsqlSyntaxStringAttribute("HEAP")]
[LocDisplayNameAttribute("Heap")]
public static IndexType HeapIndex;
}
public class Microsoft.SqlServer.Management.Smo.IndexTypeConverter : EnumToDisplayNameConverter {
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Management.Smo.Internal.SqlSecureString : object {
    private SecureString data;
    private int length;
    private static SqlSecureString empty;
    public char Item { get; }
    public static SqlSecureString Empty { get; }
    public int Length { get; }
    private static SqlSecureString();
    public SqlSecureString(string str);
    public SqlSecureString(SecureString secureString);
    public SqlSecureString(IntPtr bstr, int length);
    public sealed virtual void Dispose();
    public char get_Item(int index);
    public static SqlSecureString get_Empty();
    public int get_Length();
    public sealed virtual object Clone();
    public static int Compare(SqlSecureString strA, SqlSecureString strB);
    public static int Compare(SqlSecureString strA, SqlSecureString strB, bool ignoreCase);
    public static int Compare(SqlSecureString strA, SqlSecureString strB, StringComparison comparisonType);
    public static int Compare(SqlSecureString strA, SqlSecureString strB, bool ignoreCase, CultureInfo cultureInfo);
    public static int Compare(SqlSecureString strA, int indexA, SqlSecureString strB, int indexB, int length);
    public static int Compare(SqlSecureString strA, int indexA, SqlSecureString strB, int indexB, int length, bool ignoreCase);
    public static int Compare(SqlSecureString strA, int indexA, SqlSecureString strB, int indexB, int length, StringComparison comparisonType);
    public static int Compare(SqlSecureString strA, int indexA, SqlSecureString strB, int indexB, int length, bool ignoreCase, CultureInfo cultureInfo);
    public static int CompareOrdinal(SqlSecureString strA, SqlSecureString strB);
    public static int CompareOrdinal(SqlSecureString strA, int indexA, SqlSecureString strB, int indexB, int length);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(SqlSecureString other);
    public static SqlSecureString Concat(object obj);
    public static SqlSecureString Concat(Object[] args);
    public bool Contains(string value);
    public bool Contains(SqlSecureString value);
    public SqlSecureString Copy();
    public bool EndsWith(SqlSecureString value);
    public bool EndsWith(SqlSecureString value, bool ignoreCase, CultureInfo cultureInfo);
    public virtual bool Equals(object obj);
    public bool Equals(SqlSecureString other);
    public static bool Equals(SqlSecureString strA, SqlSecureString strB);
    public bool Equals(SqlSecureString other, StringComparison comparisonType);
    public static bool Equals(SqlSecureString strA, SqlSecureString strB, StringComparison comparisonType);
    public static SqlSecureString Format(string format, Object[] arguments);
    public static SqlSecureString Format(IFormatProvider formatProvider, string format, Object[] arguments);
    public virtual int GetHashCode();
    public int IndexOf(char value);
    public int IndexOf(string value);
    public int IndexOf(char value, int startIndex);
    public int IndexOf(string value, int startIndex);
    public int IndexOf(char value, int startIndex, int count);
    public int IndexOf(string value, int startIndex, int count);
    public int IndexOfAny(Char[] anyOf);
    public int IndexOfAny(Char[] anyOf, int startIndex);
    public int IndexOfAny(Char[] anyOf, int startIndex, int count);
    public SqlSecureString Insert(int startIndex, SqlSecureString value);
    public SqlSecureString Insert(int startIndex, string value);
    public static SqlSecureString Join(object separator, Object[] value);
    public static SqlSecureString Join(object separator, Object[] value, int startIndex, int count);
    public int LastIndexOf(char value);
    public int LastIndexOf(string value);
    public int LastIndexOf(char value, int startIndex);
    public int LastIndexOf(string value, int startIndex);
    public int LastIndexOf(char value, int startIndex, int count);
    public int LastIndexOf(string value, int startIndex, int count);
    public int LastIndexOfAny(Char[] anyOf);
    public int LastIndexOfAny(Char[] anyOf, int startIndex);
    public int LastIndexOfAny(Char[] anyOf, int startIndex, int count);
    public static bool op_Equality(SqlSecureString strA, SqlSecureString strB);
    public static bool op_Equality(SqlSecureString strA, object strB);
    public static bool op_Equality(object strA, SqlSecureString strB);
    public static bool op_Inequality(SqlSecureString strA, SqlSecureString strB);
    public static bool op_Inequality(SqlSecureString strA, object strB);
    public static bool op_Inequality(object strA, SqlSecureString strB);
    public static SqlSecureString op_Addition(SqlSecureString strA, SqlSecureString strB);
    public SqlSecureString PadLeft(int totalWidth);
    public SqlSecureString PadLeft(int totalWidth, char paddingChar);
    public SqlSecureString PadRight(int totalWidth);
    public SqlSecureString PadRight(int totalWidth, char paddingChar);
    public SqlSecureString Remove(int startIndex);
    public SqlSecureString Remove(int startIndex, int count);
    public SqlSecureString Replace(char oldChar, char newChar);
    public SqlSecureString Replace(SqlSecureString oldValue, SqlSecureString newValue);
    public SqlSecureString[] Split(Char[] separator);
    public SqlSecureString[] Split(Char[] separator, int count);
    public SqlSecureString[] Split(Char[] separator, StringSplitOptions options);
    public SqlSecureString[] Split(Char[] separator, int count, StringSplitOptions options);
    public SqlSecureString[] Split(String[] separator, StringSplitOptions options);
    public SqlSecureString[] Split(String[] separator, int count, StringSplitOptions options);
    public bool StartsWith(SqlSecureString value);
    public bool StartsWith(SqlSecureString value, bool ignoreCase, CultureInfo culture);
    public static SqlSecureString[] StringArrayToSqlSecureStringArray(String[] array);
    public SqlSecureString Substring(int startIndex);
    public SqlSecureString Substring(int startIndex, int length);
    public IntPtr ToBstr();
    public SqlSecureString ToLower();
    public SqlSecureString ToLower(CultureInfo culture);
    public SqlSecureString ToLowerInvariant();
    public SecureString ToSecureString();
    public virtual string ToString();
    public SqlSecureString ToUpper();
    public SqlSecureString ToUpper(CultureInfo culture);
    public SqlSecureString ToUpperInvariant();
    public SqlSecureString Trim();
    public SqlSecureString Trim(Char[] trimChars);
    public SqlSecureString TrimEnd(Char[] trimChars);
    public SqlSecureString TrimStart(Char[] trimChars);
    public static string op_Explicit(SqlSecureString sqlSecureString);
    public static SqlSecureString op_Implicit(string str);
    public static SecureString op_Implicit(SqlSecureString sqlSecureString);
    public static SqlSecureString op_Implicit(SecureString secureString);
    public static SqlString op_Explicit(SqlSecureString sqlSecureString);
    public static SqlSecureString op_Implicit(SqlString str);
}
internal class Microsoft.SqlServer.Management.Smo.JobExecutionStatusConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.LedgerTableType : Enum {
    public int value__;
    public static LedgerTableType None;
    public static LedgerTableType HistoryTable;
    public static LedgerTableType UpdatableLedgerTable;
    public static LedgerTableType AppendOnlyLedgerTable;
}
public enum Microsoft.SqlServer.Management.Smo.LedgerViewType : Enum {
    public int value__;
    public static LedgerViewType NonLedgerView;
    public static LedgerViewType LedgerView;
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.LinkField : object {
    private string m_field;
    private string m_value;
    private LinkFieldType m_type;
    public LinkFieldType Type { get; public set; }
    public string Field { get; public set; }
    public string Value { get; public set; }
    public LinkFieldType get_Type();
    public void set_Type(LinkFieldType value);
    public string get_Field();
    public void set_Field(string value);
    public string get_Value();
    public void set_Value(string value);
}
public enum Microsoft.SqlServer.Management.Smo.LinkFieldType : Enum {
    public int value__;
    public static LinkFieldType Parent;
    public static LinkFieldType Local;
    public static LinkFieldType Computed;
    public static LinkFieldType Filter;
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.LinkMultiple : object {
    private string m_no;
    private string m_expression;
    private ArrayList m_listLink;
    private bool HasLinkFields { get; }
    public ArrayList LinkFields { get; }
    public string No { get; public set; }
    internal void Init(XmlReadMultipleLink xrpl);
    private bool get_HasLinkFields();
    public void SetLinkFields(ArrayList list);
    public ArrayList get_LinkFields();
    public string get_No();
    public void set_No(string value);
    public string GetSqlExpression(SqlObjectBase obj);
    internal void SetSqlExpression(string expr);
}
[AttributeUsageAttribute("400")]
internal class Microsoft.SqlServer.Management.Smo.LocDisplayNameAttribute : DisplayNameAttribute {
    private string name;
    public string DisplayName { get; }
    public LocDisplayNameAttribute(string name);
    public virtual string get_DisplayName();
}
public enum Microsoft.SqlServer.Management.Smo.LockEscalationType : Enum {
    public int value__;
    public static LockEscalationType Table;
    public static LockEscalationType Disable;
    public static LockEscalationType Auto;
}
public enum Microsoft.SqlServer.Management.Smo.LockRequestStatus : Enum {
    public int value__;
    public static LockRequestStatus Granted;
    public static LockRequestStatus Converting;
    public static LockRequestStatus Waiting;
}
public enum Microsoft.SqlServer.Management.Smo.LoginType : Enum {
    public int value__;
    public static LoginType WindowsUser;
    public static LoginType WindowsGroup;
    public static LoginType SqlLogin;
    public static LoginType Certificate;
    public static LoginType AsymmetricKey;
    public static LoginType ExternalUser;
    public static LoginType ExternalGroup;
}
public enum Microsoft.SqlServer.Management.Smo.LogReuseWaitStatus : Enum {
    public int value__;
    public static LogReuseWaitStatus Nothing;
    public static LogReuseWaitStatus Checkpoint;
    public static LogReuseWaitStatus LogBackup;
    public static LogReuseWaitStatus BackupOrRestore;
    public static LogReuseWaitStatus Transaction;
    public static LogReuseWaitStatus Mirroring;
    public static LogReuseWaitStatus Replication;
    public static LogReuseWaitStatus SnapshotCreation;
    public static LogReuseWaitStatus LogScan;
    public static LogReuseWaitStatus Other;
}
public enum Microsoft.SqlServer.Management.Smo.MappedClassType : Enum {
    public int value__;
    public static MappedClassType None;
    public static MappedClassType CryptographicProvider;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.MediaTypes : Enum {
    public int value__;
    public static MediaTypes All;
    public static MediaTypes CDRom;
    public static MediaTypes FixedDisk;
    public static MediaTypes Floppy;
    public static MediaTypes SharedFixedDisk;
    public static MediaTypes Tape;
}
public enum Microsoft.SqlServer.Management.Smo.MethodLoginType : Enum {
    public byte value__;
    public static MethodLoginType Mixed;
    public static MethodLoginType Windows;
}
public enum Microsoft.SqlServer.Management.Smo.MethodXsdSchemaOption : Enum {
    public int value__;
    public static MethodXsdSchemaOption None;
    public static MethodXsdSchemaOption Standard;
    public static MethodXsdSchemaOption Default;
}
public enum Microsoft.SqlServer.Management.Smo.MirroringOption : Enum {
    public int value__;
    public static MirroringOption Off;
    public static MirroringOption Suspend;
    public static MirroringOption Resume;
    public static MirroringOption RemoveWitness;
    public static MirroringOption Failover;
    public static MirroringOption ForceFailoverAndAllowDataLoss;
}
public enum Microsoft.SqlServer.Management.Smo.MirroringRole : Enum {
    public int value__;
    public static MirroringRole None;
    public static MirroringRole Principal;
    public static MirroringRole Mirror;
}
public enum Microsoft.SqlServer.Management.Smo.MirroringSafetyLevel : Enum {
    public int value__;
    public static MirroringSafetyLevel None;
    public static MirroringSafetyLevel Unknown;
    public static MirroringSafetyLevel Off;
    public static MirroringSafetyLevel Full;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.MirroringStatusConverter")]
public enum Microsoft.SqlServer.Management.Smo.MirroringStatus : Enum {
    public int value__;
    [LocDisplayNameAttribute("msNone")]
public static MirroringStatus None;
    [LocDisplayNameAttribute("msSuspended")]
public static MirroringStatus Suspended;
    [LocDisplayNameAttribute("msDisconnected")]
public static MirroringStatus Disconnected;
    [LocDisplayNameAttribute("msSynchronizing")]
public static MirroringStatus Synchronizing;
    [LocDisplayNameAttribute("msPendingFailover")]
public static MirroringStatus PendingFailover;
    [LocDisplayNameAttribute("msSynchronized")]
public static MirroringStatus Synchronized;
}
internal class Microsoft.SqlServer.Management.Smo.MirroringStatusConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.MirroringWitnessStatus : Enum {
    public int value__;
    public static MirroringWitnessStatus None;
    public static MirroringWitnessStatus Unknown;
    public static MirroringWitnessStatus Connected;
    public static MirroringWitnessStatus Disconnected;
}
public enum Microsoft.SqlServer.Management.Smo.NSActivationState : Enum {
    public byte value__;
    public static NSActivationState EnablePending;
    public static NSActivationState Enabled;
    public static NSActivationState DisablePending;
    public static NSActivationState Disabled;
}
public enum Microsoft.SqlServer.Management.Smo.ObjectClass : Enum {
    public int value__;
    public static ObjectClass Database;
    public static ObjectClass ObjectOrColumn;
    public static ObjectClass Schema;
    public static ObjectClass User;
    public static ObjectClass DatabaseRole;
    public static ObjectClass ApplicationRole;
    public static ObjectClass SqlAssembly;
    public static ObjectClass UserDefinedType;
    public static ObjectClass SecurityExpression;
    public static ObjectClass XmlNamespace;
    public static ObjectClass MessageType;
    public static ObjectClass ServiceContract;
    public static ObjectClass Service;
    public static ObjectClass RemoteServiceBinding;
    public static ObjectClass ServiceRoute;
    public static ObjectClass FullTextCatalog;
    public static ObjectClass SearchPropertyList;
    public static ObjectClass SymmetricKey;
    public static ObjectClass Server;
    public static ObjectClass Login;
    public static ObjectClass ServerPrincipal;
    public static ObjectClass ServerRole;
    public static ObjectClass Endpoint;
    public static ObjectClass Certificate;
    public static ObjectClass FullTextStopList;
    public static ObjectClass AsymmetricKey;
    public static ObjectClass AvailabilityGroup;
    public static ObjectClass ExternalDataSource;
    public static ObjectClass ExternalFileFormat;
}
public enum Microsoft.SqlServer.Management.Smo.ObjectPermissionSetValue : Enum {
    public int value__;
    [PermissionTypeAttribute("AL")]
[PermissionNameAttribute("ALTER")]
public static ObjectPermissionSetValue Alter;
    [PermissionTypeAttribute("CL")]
[PermissionNameAttribute("CONTROL")]
public static ObjectPermissionSetValue Control;
    [PermissionTypeAttribute("CO")]
[PermissionNameAttribute("CONNECT")]
public static ObjectPermissionSetValue Connect;
    [PermissionTypeAttribute("DL")]
[PermissionNameAttribute("DELETE")]
public static ObjectPermissionSetValue Delete;
    [PermissionTypeAttribute("EX")]
[PermissionNameAttribute("EXECUTE")]
public static ObjectPermissionSetValue Execute;
    [PermissionTypeAttribute("IM")]
[PermissionNameAttribute("IMPERSONATE")]
public static ObjectPermissionSetValue Impersonate;
    [PermissionTypeAttribute("IN")]
[PermissionNameAttribute("INSERT")]
public static ObjectPermissionSetValue Insert;
    [PermissionTypeAttribute("RC")]
[PermissionNameAttribute("RECEIVE")]
public static ObjectPermissionSetValue Receive;
    [PermissionTypeAttribute("RF")]
[PermissionNameAttribute("REFERENCES")]
public static ObjectPermissionSetValue References;
    [PermissionTypeAttribute("SL")]
[PermissionNameAttribute("SELECT")]
public static ObjectPermissionSetValue Select;
    [PermissionTypeAttribute("SN")]
[PermissionNameAttribute("SEND")]
public static ObjectPermissionSetValue Send;
    [PermissionTypeAttribute("TO")]
[PermissionNameAttribute("TAKE OWNERSHIP")]
public static ObjectPermissionSetValue TakeOwnership;
    [PermissionTypeAttribute("UP")]
[PermissionNameAttribute("UPDATE")]
public static ObjectPermissionSetValue Update;
    [PermissionTypeAttribute("VW")]
[PermissionNameAttribute("VIEW DEFINITION")]
public static ObjectPermissionSetValue ViewDefinition;
    [PermissionTypeAttribute("VWCT")]
[PermissionNameAttribute("VIEW CHANGE TRACKING")]
public static ObjectPermissionSetValue ViewChangeTracking;
    [PermissionTypeAttribute("CRSO")]
[PermissionNameAttribute("CREATE SEQUENCE")]
public static ObjectPermissionSetValue CreateSequence;
    [PermissionTypeAttribute("EXES")]
[PermissionNameAttribute("EXECUTE EXTERNAL SCRIPT")]
public static ObjectPermissionSetValue ExecuteExternalScript;
    [PermissionTypeAttribute("UMSK")]
[PermissionNameAttribute("UNMASK")]
public static ObjectPermissionSetValue Unmask;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.AuditOnFailureActionConverter")]
public enum Microsoft.SqlServer.Management.Smo.OnFailureAction : Enum {
    public int value__;
    [LocDisplayNameAttribute("OnFailureActionContinue")]
[TsqlSyntaxStringAttribute("CONTINUE")]
public static OnFailureAction Continue;
    [LocDisplayNameAttribute("OnFailureActionShutdown")]
[TsqlSyntaxStringAttribute("SHUTDOWN")]
public static OnFailureAction Shutdown;
    [LocDisplayNameAttribute("OnFailureActionFail")]
[TsqlSyntaxStringAttribute("FAIL_OPERATION")]
public static OnFailureAction FailOperation;
}
public enum Microsoft.SqlServer.Management.Smo.PageVerify : Enum {
    public int value__;
    public static PageVerify None;
    public static PageVerify TornPageDetection;
    public static PageVerify Checksum;
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.ParentLink : object {
    private LinkMultiple m_LinkMultiple;
    public ArrayList LinkFields { get; }
    public LinkMultiple LinkMultiple { get; }
    public ParentLink(XmlReadParentLink xrpl);
    internal void Init(XmlReadSimpleParentLink xrspl);
    public ArrayList get_LinkFields();
    public LinkMultiple get_LinkMultiple();
}
public enum Microsoft.SqlServer.Management.Smo.PasswordHashAlgorithm : Enum {
    public int value__;
    public static PasswordHashAlgorithm None;
    public static PasswordHashAlgorithm SqlServer7;
    public static PasswordHashAlgorithm ShaOne;
    public static PasswordHashAlgorithm ShaTwo;
}
public enum Microsoft.SqlServer.Management.Smo.PathType : Enum {
    public int value__;
    public static PathType Windows;
    public static PathType Linux;
    public static PathType Unspecified;
}
public static class Microsoft.SqlServer.Management.Smo.PathWrapper : object {
    public static string PathSeparatorFromServerConnection(ServerConnection serverConnection);
    public static string Combine(string path1, string path2);
    public static string Combine(string path1, string path2, PathType pathType);
    public static string GetDirectoryName(string s1);
    public static string GetDirectoryName(string s1, PathType pathType);
    public static bool IsXIPath(string s1);
    public static bool IsRooted(string path);
    public static bool IsRooted(string path, PathType pathType);
}
public enum Microsoft.SqlServer.Management.Smo.PerfMonMode : Enum {
    public int value__;
    public static PerfMonMode None;
    public static PerfMonMode Continuous;
    public static PerfMonMode OnDemand;
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.PermissionDecode : object {
    private static IDictionary`2<string, object> permissionTypeToEnumMapping;
    private static PermissionDecode();
    internal static T ToPermissionSetValueEnum(string permissionType);
    internal static string PermissionCodeToPermissionName(int permissionCode);
    internal static string PermissionCodeToPermissionType(int permissionCode);
    [ExtensionAttribute]
internal static string PermissionName(T val);
    [ExtensionAttribute]
internal static string PermissionType(T val);
}
internal class Microsoft.SqlServer.Management.Smo.PermissionNameAttribute : StringValueAttribute {
    public PermissionNameAttribute(string permissionName);
}
public enum Microsoft.SqlServer.Management.Smo.PermissionState : Enum {
    public int value__;
    public static PermissionState Deny;
    public static PermissionState Revoke;
    public static PermissionState Grant;
    public static PermissionState GrantWithGrant;
}
internal class Microsoft.SqlServer.Management.Smo.PermissionTypeAttribute : StringValueAttribute {
    public PermissionTypeAttribute(string permissionType);
}
public enum Microsoft.SqlServer.Management.Smo.PlanGuideType : Enum {
    public int value__;
    public static PlanGuideType Object;
    public static PlanGuideType Sql;
    public static PlanGuideType Template;
}
internal abstract class Microsoft.SqlServer.Management.Smo.PostProcess : object {
    private object m_ci;
    private string m_objectName;
    private Request m_req;
    private SortedList m_HitFields;
    private bool bLookUpOrdinalDone;
    private Object[] m_triggeredColumnsIdLookup;
    internal object ConnectionInfo { get; internal set; }
    internal SortedList HitFields { get; internal set; }
    internal string ObjectName { get; internal set; }
    internal Request Request { get; internal set; }
    protected bool SupportDataReader { get; }
    internal object get_ConnectionInfo();
    internal void set_ConnectionInfo(object value);
    internal SortedList get_HitFields();
    internal void set_HitFields(SortedList value);
    internal int HitFieldsCount();
    internal bool GetIsFieldHit(string field);
    internal string get_ObjectName();
    internal void set_ObjectName(string value);
    internal Request get_Request();
    internal void set_Request(Request value);
    internal bool IsLookupInit();
    protected virtual bool get_SupportDataReader();
    internal void CheckDataReaderSupport();
    internal void InitNameBasedLookup(SqlObjectBase obj, StringCollection triggeredFields);
    internal void UpdateFromNameBasedToOrdinalLookup(SortedList triggeredColumnsAliasNameLookup);
    protected int BinarySearch(DataRowCollection col, string objectIdentifier, string columnName);
    protected int BinarySearchSetOnFirst(DataRowCollection col, string objectIdentifier, string columnName);
    protected bool IsNull(object data);
    protected bool IsNull(DataProvider dp, int i);
    protected object GetTriggeredObject(DataProvider dp, int i);
    protected int GetTriggeredInt32(DataProvider dp, int i);
    protected bool GetTriggeredBool(DataProvider dp, int i);
    protected string GetTriggeredString(DataProvider dp, int i);
    public abstract virtual object GetColumnData(string name, object data, DataProvider dp);
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessAuditProperties : PostProcess {
    private int maximumFileSizeInAcceptedRange;
    private AuditFileSizeUnit maximumFileSizeUnit;
    protected bool SupportDataReader { get; }
    protected virtual bool get_SupportDataReader();
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    private int GetMaximumFileSize(DataProvider dp);
    private AuditFileSizeUnit GetMaximumFileSizeUnit(DataProvider dp);
    private long GetMaximumFileSizeInMegaBytes(DataProvider dp);
    private void GetMaxFileSizeValueInAcceptedRangeAndUnit(DataProvider dp);
    private AuditFileSizeUnit ConvertFileSizeToAcceptedFormat1(Int64& maxFileSize);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessAutoCloseProperties : PostProcessWithRowCaching {
    protected bool SupportDataReader { get; }
    protected string SqlQuery { get; }
    protected virtual bool get_SupportDataReader();
    protected virtual string get_SqlQuery();
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessBodyText : PostProcessText {
    private int m_idx;
    private int m_idxEnd;
    private int IdxStart { get; }
    private int IdxEnd { get; }
    private bool HasParantesis { get; }
    private string TableVariableName { get; }
    protected bool SupportDataReader { get; }
    public virtual void CleanRowData();
    private int get_IdxStart();
    private int get_IdxEnd();
    private bool get_HasParantesis();
    private string get_TableVariableName();
    protected virtual string GetTextFor90(object data, DataProvider dp);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    protected virtual bool get_SupportDataReader();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessContainedDbProperties : PostProcess {
    private DataTable dt;
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessCreateDate : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessCreateDateSeconds1990 : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessCreateDateTime : PostProcess {
    protected object GetDateTime(object oDate, object oTime);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessCreateSqlSecureString : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessCreateTime : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessCreateTimeSpanHMS : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessDatabaseDdlTriggerEvents : PostProcessDdlEvents {
    protected virtual object GetTriggerEvents(string objectIdentifier);
    private DatabaseDdlTriggerEvent DatabaseDdlTriggerEventOffsetFromEventString(string evtdesc);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessDatabaseInsideAttribs : PostProcessWithRowCaching {
    private string databaseName;
    private string sqlQuery;
    private string defaultdataPath;
    protected bool SupportDataReader { get; }
    private double BytesPerPage { get; }
    private string DefaultDataPath { get; }
    protected string SqlQuery { get; }
    protected virtual bool get_SupportDataReader();
    private double get_BytesPerPage();
    private string get_DefaultDataPath();
    protected virtual string get_SqlQuery();
    public virtual void CleanRowData();
    private void BuildCommonSql(StatementBuilder sb);
    private string BuildSqlStatementMoreEqual90();
    private string BuildSqlStatementLess90();
    private void AddDbChaining(StatementBuilder sb);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    private string GetPath(string sFullName);
}
internal abstract class Microsoft.SqlServer.Management.Smo.PostProcessDdlEvents : PostProcess {
    private DataTable m_dtEvents;
    protected bool SupportDataReader { get; }
    protected DataTable GetEventsForAllRows();
    protected abstract virtual object GetTriggerEvents(string objectIdentifier);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    protected virtual bool get_SupportDataReader();
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessFile : PostProcess {
    private bool firstTime;
    private float usedSpace;
    private float availableSpace;
    protected bool SupportDataReader { get; }
    protected virtual bool get_SupportDataReader();
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    public virtual void CleanRowData();
    private void ExecuteQuery(object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessFileProperties : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessFragmentation : PostProcess {
    private bool calledUseDB;
    private bool isInitDataRow;
    private String[] contigData;
    private string GetSql(DataProvider dp);
    private void InitRowData(DataProvider dp);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessIP6Address : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessIPAddress : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessJobActivity : PostProcessCreateDateTime {
    private DataTable dt;
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessOwner : PostProcess {
    private string uSid;
    private bool firstTime;
    private string ownerName;
    protected bool SupportDataReader { get; }
    protected virtual bool get_SupportDataReader();
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    private string ExecuteQuery(object data, DataProvider dp);
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessOwnObjects : PostProcess {
    private string GetDatabaseLevel(DataProvider dp);
    private string GetUrn(DataProvider dp, string type, bool bWithSchema, string tentativeParent);
    private string GetUrn(DataProvider dp);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessParam : PostProcess {
    private SortedList m_textList;
    private static string sSingleLineCommentSql;
    private static string sSingleLineCommentC;
    private static string sNestedMultiLineComment;
    private static string sNestedMultiLineCommentOptimized;
    private static string sSingleQuotedStringSql;
    private static string sDoubleQuotedString;
    private static string sBraketedWord;
    private static string sWord;
    private static string sNumber;
    private static string sHexNumber;
    private static string sParamValueQI;
    private static string sParamValue;
    private static string sComma;
    private static string sParanthesis;
    private static string sEq;
    private static string sDelim;
    private static string sParam;
    private static string sGrammarQI;
    private static string sGrammar;
    private Regex m_r;
    private static Regex sRegexQI;
    private static Regex sRegex;
    protected bool SupportDataReader { get; }
    private static PostProcessParam();
    protected virtual bool get_SupportDataReader();
    private void ParseParams(string sKey, string text, bool bQI);
    private string GetText(int id, string sDatabase, int number, object ci, Boolean& bQI);
    private bool IsProcessed(string sKey);
    private string GetParam(string sKey, string sParamName);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessPermissionCode : PostProcess {
    private int GetSmoCodeFromSqlCodeYukon(string sqlCode, ObjectClass objClass);
    private int GetSmoCodeFromSqlCodeShiloh(string sqlCode);
    private bool GetSmoCodeFromSqlCode(string sqlCode, Int32& smoCode);
    private string ShilohToYukonPermission(int permType);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessRemoteDataArchiveDatabaseProperties : PostProcessWithRowCaching {
    private static string remoteDataArchiveEndpoint;
    private static string remoteDataArchiveDatabaseName;
    private static string remoteDataArchiveLinkedServer;
    private static string remoteDataArchiveFederatedServiceAccount;
    private static string remoteDataArchiveCredential;
    protected string SqlQuery { get; }
    protected virtual string get_SqlQuery();
    private bool IsStretchSmoSupportedOnVersion(Version sqlServerVersion);
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessServerDdlTriggerEvents : PostProcessDdlEvents {
    protected virtual object GetTriggerEvents(string objectIdentifier);
    private ServerDdlTriggerEvent ServerDdlTriggerEventOffsetFromEventString(string evtdesc);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessServerProperties : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessSplitFourPartName : PostProcess {
    private StringCollection m_listNames;
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessStatisticStream : PostProcessCreateDateTime {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessTable : PostProcess {
    private DataRow rowResults;
    private string databaseName;
    private string schemaName;
    private string tableName;
    private string query;
    private static string rowCount;
    private void GetRowResults(DataProvider dp);
    public virtual void CleanRowData();
    private void BuildQuery();
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessText : PostProcess {
    protected object m_text;
    private bool m_btextSet;
    private DataTable m_dtText;
    protected bool IsTextSet { get; }
    protected bool SupportDataReader { get; }
    protected DataTable GetTextForAllRows();
    protected string GetTextForObject(string sObjectIdentifier);
    protected bool get_IsTextSet();
    protected void SetText(object data, DataProvider dp);
    protected virtual string GetTextFor90(object data, DataProvider dp);
    protected virtual bool get_SupportDataReader();
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessUser : PostProcess {
    private string uSid;
    private bool firstTime;
    private string str;
    private string query;
    protected bool SupportDataReader { get; }
    protected virtual bool get_SupportDataReader();
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    private string ExecuteQuery(object data, DataProvider dp);
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessVersion : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
    internal static Version ConvertToValidVersion(int major, int minor, int build, int revision);
}
internal abstract class Microsoft.SqlServer.Management.Smo.PostProcessWithRowCaching : PostProcess {
    protected DataRowCollection rowResults;
    private Dictionary`2<string, bool> dbIsAccessible;
    protected bool rowsRetrieved;
    protected string SqlQuery { get; }
    protected void GetCachedRowResultsForDatabase(DataProvider dp, string databaseName);
    protected abstract virtual string get_SqlQuery();
    public virtual void CleanRowData();
}
internal class Microsoft.SqlServer.Management.Smo.PostProcessXmlToList : PostProcess {
    public virtual object GetColumnData(string name, object data, DataProvider dp);
}
internal class Microsoft.SqlServer.Management.Smo.PrimaryFile : SqlObject {
    public virtual EnumResult GetData(EnumResult erParent);
}
public enum Microsoft.SqlServer.Management.Smo.PrincipalType : Enum {
    public int value__;
    public static PrincipalType None;
    public static PrincipalType Login;
    public static PrincipalType ServerRole;
    public static PrincipalType User;
    public static PrincipalType DatabaseRole;
    public static PrincipalType ApplicationRole;
}
public enum Microsoft.SqlServer.Management.Smo.PrivateKeyEncryptionType : Enum {
    public int value__;
    public static PrivateKeyEncryptionType NoKey;
    public static PrivateKeyEncryptionType MasterKey;
    public static PrivateKeyEncryptionType Password;
    public static PrivateKeyEncryptionType Provider;
}
public enum Microsoft.SqlServer.Management.Smo.ProtocolType : Enum {
    public int value__;
    public static ProtocolType Http;
    public static ProtocolType Tcp;
    public static ProtocolType NamedPipes;
    public static ProtocolType SharedMemory;
    public static ProtocolType Via;
}
public enum Microsoft.SqlServer.Management.Smo.ProviderAuthenticationType : Enum {
    public int value__;
    public static ProviderAuthenticationType Windows;
    public static ProviderAuthenticationType Basic;
    public static ProviderAuthenticationType Other;
}
internal static class Microsoft.SqlServer.Management.Smo.QueryIsolation : object {
    internal static string RegPathFormat;
    private static string PrefixValue;
    private static string PostfixValue;
    private static string IsolationFormat;
    private static String[] IsolationLevels;
    internal static string cachedPrefix;
    internal static string cachedPostfix;
    private static string RegKeyName { get; }
    private static QueryIsolation();
    private static void InitIfNeeded();
    private static string GetIsolationLevel(string regValue);
    private static string get_RegKeyName();
    public static string GetQueryPrefix();
    public static string GetQueryPostfix();
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.RangeTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.RangeType : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("")]
public static RangeType None;
    [TsqlSyntaxStringAttribute("LEFT")]
public static RangeType Left;
    [TsqlSyntaxStringAttribute("RIGHT")]
public static RangeType Right;
}
public class Microsoft.SqlServer.Management.Smo.RangeTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.RecoveryModelConverter")]
public enum Microsoft.SqlServer.Management.Smo.RecoveryModel : Enum {
    public int value__;
    [LocDisplayNameAttribute("rmSimple")]
public static RecoveryModel Simple;
    [LocDisplayNameAttribute("rmBulkLogged")]
public static RecoveryModel BulkLogged;
    [LocDisplayNameAttribute("rmFull")]
public static RecoveryModel Full;
}
internal class Microsoft.SqlServer.Management.Smo.RecoveryModelConverter : EnumToDisplayNameConverter {
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.RepairOptions : Enum {
    public int value__;
    public static RepairOptions None;
    public static RepairOptions AllErrorMessages;
    public static RepairOptions ExtendedLogicalChecks;
    public static RepairOptions NoInformationMessages;
    public static RepairOptions TableLock;
    public static RepairOptions EstimateOnly;
}
public enum Microsoft.SqlServer.Management.Smo.RepairStructure : Enum {
    public int value__;
    public static RepairStructure None;
    public static RepairStructure PhysicalOnly;
    public static RepairStructure DataPurity;
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.ReplicationOptions : Enum {
    public int value__;
    public static ReplicationOptions None;
    public static ReplicationOptions Published;
    public static ReplicationOptions Subscribed;
    public static ReplicationOptions MergePublished;
    public static ReplicationOptions MergeSubscribed;
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.RequestParentSelect : object {
    private StringCollection m_Fields;
    public StringCollection Fields { get; }
    public RequestParentSelect(XmlRequestParentSelect xrrps);
    public StringCollection get_Fields();
}
public enum Microsoft.SqlServer.Management.Smo.ResourceUsage : Enum {
    public int value__;
    public static ResourceUsage Unknown;
    public static ResourceUsage Background;
    public static ResourceUsage BelowNormal;
    public static ResourceUsage Normal;
    public static ResourceUsage AboveNormal;
    public static ResourceUsage Dedicated;
}
internal class Microsoft.SqlServer.Management.Smo.RestorePlanInternal : SqlObject {
    public virtual EnumResult GetData(EnumResult erParent);
}
public enum Microsoft.SqlServer.Management.Smo.RestoreType : Enum {
    public int value__;
    public static RestoreType Database;
    public static RestoreType File;
    public static RestoreType FileGroup;
    public static RestoreType VerifyOnly;
}
public enum Microsoft.SqlServer.Management.Smo.ResultFormat : Enum {
    public int value__;
    public static ResultFormat AllResults;
    public static ResultFormat RowSets;
    public static ResultFormat None;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.ResumableOperationStateTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.ResumableOperationStateType : Enum {
    public int value__;
    [LocDisplayNameAttribute("ResumableOperationStateTypeRunning")]
[TsqlSyntaxStringAttribute("RUNNING")]
public static ResumableOperationStateType Running;
    [LocDisplayNameAttribute("ResumableOperationStateTypePaused")]
[TsqlSyntaxStringAttribute("PAUSED")]
public static ResumableOperationStateType Paused;
    [LocDisplayNameAttribute("ResumableOperationStateTypeNone")]
[TsqlSyntaxStringAttribute("NONE")]
public static ResumableOperationStateType None;
}
public class Microsoft.SqlServer.Management.Smo.ResumableOperationStateTypeConverter : EnumToDisplayNameConverter {
}
[FlagsAttribute]
public enum Microsoft.SqlServer.Management.Smo.RetentionPeriodUnits : Enum {
    public int value__;
    public static RetentionPeriodUnits None;
    public static RetentionPeriodUnits Minutes;
    public static RetentionPeriodUnits Hours;
    public static RetentionPeriodUnits Days;
}
public enum Microsoft.SqlServer.Management.Smo.SecondaryXmlIndexType : Enum {
    public int value__;
    public static SecondaryXmlIndexType None;
    public static SecondaryXmlIndexType Path;
    public static SecondaryXmlIndexType Value;
    public static SecondaryXmlIndexType Property;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.SecurityPredicateOperationConverter")]
public enum Microsoft.SqlServer.Management.Smo.SecurityPredicateOperation : Enum {
    public int value__;
    [LocDisplayNameAttribute("securityPredicateOperationAll")]
[TsqlSyntaxStringAttribute("")]
public static SecurityPredicateOperation All;
    [LocDisplayNameAttribute("securityPredicateOperationAfterInsert")]
[TsqlSyntaxStringAttribute("AFTER INSERT")]
public static SecurityPredicateOperation AfterInsert;
    [LocDisplayNameAttribute("securityPredicateOperationAfterUpdate")]
[TsqlSyntaxStringAttribute("AFTER UPDATE")]
public static SecurityPredicateOperation AfterUpdate;
    [LocDisplayNameAttribute("securityPredicateOperationBeforeUpdate")]
[TsqlSyntaxStringAttribute("BEFORE UPDATE")]
public static SecurityPredicateOperation BeforeUpdate;
    [LocDisplayNameAttribute("securityPredicateOperationBeforeDelete")]
[TsqlSyntaxStringAttribute("BEFORE DELETE")]
public static SecurityPredicateOperation BeforeDelete;
}
public class Microsoft.SqlServer.Management.Smo.SecurityPredicateOperationConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.SecurityPredicateTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.SecurityPredicateType : Enum {
    public int value__;
    [LocDisplayNameAttribute("securityPredicateTypeFilter")]
[TsqlSyntaxStringAttribute("FILTER")]
public static SecurityPredicateType Filter;
    [LocDisplayNameAttribute("securityPredicateTypeBlock")]
[TsqlSyntaxStringAttribute("BLOCK")]
public static SecurityPredicateType Block;
}
public class Microsoft.SqlServer.Management.Smo.SecurityPredicateTypeConverter : EnumToDisplayNameConverter {
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.SensitivityRankConverter")]
public enum Microsoft.SqlServer.Management.Smo.SensitivityRank : Enum {
    public int value__;
    [LocDisplayNameAttribute("Undefined")]
public static SensitivityRank Undefined;
    [LocDisplayNameAttribute("None")]
[TsqlSyntaxStringAttribute("NONE")]
public static SensitivityRank None;
    [LocDisplayNameAttribute("Low")]
[TsqlSyntaxStringAttribute("LOW")]
public static SensitivityRank Low;
    [LocDisplayNameAttribute("Medium")]
[TsqlSyntaxStringAttribute("MEDIUM")]
public static SensitivityRank Medium;
    [LocDisplayNameAttribute("High")]
[TsqlSyntaxStringAttribute("HIGH")]
public static SensitivityRank High;
    [LocDisplayNameAttribute("Critical")]
[TsqlSyntaxStringAttribute("CRITICAL")]
public static SensitivityRank Critical;
}
public class Microsoft.SqlServer.Management.Smo.SensitivityRankConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.SequenceCacheType : Enum {
    public int value__;
    public static SequenceCacheType DefaultCache;
    public static SequenceCacheType NoCache;
    public static SequenceCacheType CacheWithSize;
}
internal class Microsoft.SqlServer.Management.Smo.ServerDbSchemaName : object {
    private string serverName;
    private string dbName;
    private string schemaName;
    private string name;
    private int id;
    private int type;
    private StringComparer svrComparer;
    private StringComparer dbComparer;
    public string ServerName { get; public set; }
    public string DatabaseName { get; public set; }
    public string SchemaName { get; public set; }
    public string Name { get; public set; }
    public int Id { get; public set; }
    public int Type { get; public set; }
    internal ServerDbSchemaName(string serverName, string dbName, string schemaName, string name, int id, int type);
    internal ServerDbSchemaName(string serverName, string dbName, string schemaName, string name, int id, int type, StringComparer svrComparer, StringComparer dbComparer);
    public string get_ServerName();
    public void set_ServerName(string value);
    public string get_DatabaseName();
    public void set_DatabaseName(string value);
    public string get_SchemaName();
    public void set_SchemaName(string value);
    public string get_Name();
    public void set_Name(string value);
    public int get_Id();
    public void set_Id(int value);
    public int get_Type();
    public void set_Type(int value);
    public sealed virtual int CompareTo(object obj);
}
public class Microsoft.SqlServer.Management.Smo.ServerDdlTriggerEvent : object {
    private ServerDdlTriggerEventValues m_value;
    internal ServerDdlTriggerEventValues Value { get; }
    public static ServerDdlTriggerEvent AddRoleMember { get; }
    public static ServerDdlTriggerEvent AddSensitivityClassification { get; }
    public static ServerDdlTriggerEvent AddServerRoleMember { get; }
    public static ServerDdlTriggerEvent AddSignature { get; }
    public static ServerDdlTriggerEvent AddSignatureSchemaObject { get; }
    public static ServerDdlTriggerEvent AlterApplicationRole { get; }
    public static ServerDdlTriggerEvent AlterAssembly { get; }
    public static ServerDdlTriggerEvent AlterAsymmetricKey { get; }
    public static ServerDdlTriggerEvent AlterAudit { get; }
    public static ServerDdlTriggerEvent AlterAuthorizationDatabase { get; }
    public static ServerDdlTriggerEvent AlterAuthorizationServer { get; }
    public static ServerDdlTriggerEvent AlterAvailabilityGroup { get; }
    public static ServerDdlTriggerEvent AlterBrokerPriority { get; }
    public static ServerDdlTriggerEvent AlterCertificate { get; }
    public static ServerDdlTriggerEvent AlterColumnEncryptionKey { get; }
    public static ServerDdlTriggerEvent AlterCredential { get; }
    public static ServerDdlTriggerEvent AlterCryptographicProvider { get; }
    public static ServerDdlTriggerEvent AlterDatabase { get; }
    public static ServerDdlTriggerEvent AlterDatabaseAuditSpecification { get; }
    public static ServerDdlTriggerEvent AlterDatabaseEncryptionKey { get; }
    public static ServerDdlTriggerEvent AlterDatabaseScopedConfiguration { get; }
    public static ServerDdlTriggerEvent AlterEndpoint { get; }
    public static ServerDdlTriggerEvent AlterEventSession { get; }
    public static ServerDdlTriggerEvent AlterExtendedProperty { get; }
    public static ServerDdlTriggerEvent AlterExternalLanguage { get; }
    public static ServerDdlTriggerEvent AlterExternalLibrary { get; }
    public static ServerDdlTriggerEvent AlterExternalResourcePool { get; }
    public static ServerDdlTriggerEvent AlterFulltextCatalog { get; }
    public static ServerDdlTriggerEvent AlterFulltextIndex { get; }
    public static ServerDdlTriggerEvent AlterFulltextStoplist { get; }
    public static ServerDdlTriggerEvent AlterFunction { get; }
    public static ServerDdlTriggerEvent AlterIndex { get; }
    public static ServerDdlTriggerEvent AlterInstance { get; }
    public static ServerDdlTriggerEvent AlterLinkedServer { get; }
    public static ServerDdlTriggerEvent AlterLogin { get; }
    public static ServerDdlTriggerEvent AlterMasterKey { get; }
    public static ServerDdlTriggerEvent AlterMessage { get; }
    public static ServerDdlTriggerEvent AlterMessageType { get; }
    public static ServerDdlTriggerEvent AlterPartitionFunction { get; }
    public static ServerDdlTriggerEvent AlterPartitionScheme { get; }
    public static ServerDdlTriggerEvent AlterPlanGuide { get; }
    public static ServerDdlTriggerEvent AlterProcedure { get; }
    public static ServerDdlTriggerEvent AlterQueue { get; }
    public static ServerDdlTriggerEvent AlterRemoteServer { get; }
    public static ServerDdlTriggerEvent AlterRemoteServiceBinding { get; }
    public static ServerDdlTriggerEvent AlterResourceGovernorConfig { get; }
    public static ServerDdlTriggerEvent AlterResourcePool { get; }
    public static ServerDdlTriggerEvent AlterRole { get; }
    public static ServerDdlTriggerEvent AlterRoute { get; }
    public static ServerDdlTriggerEvent AlterSchema { get; }
    public static ServerDdlTriggerEvent AlterSearchPropertyList { get; }
    public static ServerDdlTriggerEvent AlterSecurityPolicy { get; }
    public static ServerDdlTriggerEvent AlterSequence { get; }
    public static ServerDdlTriggerEvent AlterServerAudit { get; }
    public static ServerDdlTriggerEvent AlterServerAuditSpecification { get; }
    public static ServerDdlTriggerEvent AlterServerRole { get; }
    public static ServerDdlTriggerEvent AlterService { get; }
    public static ServerDdlTriggerEvent AlterServiceMasterKey { get; }
    public static ServerDdlTriggerEvent AlterSymmetricKey { get; }
    public static ServerDdlTriggerEvent AlterTable { get; }
    public static ServerDdlTriggerEvent AlterTrigger { get; }
    public static ServerDdlTriggerEvent AlterUser { get; }
    public static ServerDdlTriggerEvent AlterView { get; }
    public static ServerDdlTriggerEvent AlterWorkloadGroup { get; }
    public static ServerDdlTriggerEvent AlterXmlSchemaCollection { get; }
    public static ServerDdlTriggerEvent BindDefault { get; }
    public static ServerDdlTriggerEvent BindRule { get; }
    public static ServerDdlTriggerEvent CreateApplicationRole { get; }
    public static ServerDdlTriggerEvent CreateAssembly { get; }
    public static ServerDdlTriggerEvent CreateAsymmetricKey { get; }
    public static ServerDdlTriggerEvent CreateAudit { get; }
    public static ServerDdlTriggerEvent CreateAvailabilityGroup { get; }
    public static ServerDdlTriggerEvent CreateBrokerPriority { get; }
    public static ServerDdlTriggerEvent CreateCertificate { get; }
    public static ServerDdlTriggerEvent CreateColumnEncryptionKey { get; }
    public static ServerDdlTriggerEvent CreateColumnMasterKey { get; }
    public static ServerDdlTriggerEvent CreateContract { get; }
    public static ServerDdlTriggerEvent CreateCredential { get; }
    public static ServerDdlTriggerEvent CreateCryptographicProvider { get; }
    public static ServerDdlTriggerEvent CreateDatabase { get; }
    public static ServerDdlTriggerEvent CreateDatabaseAuditSpecification { get; }
    public static ServerDdlTriggerEvent CreateDatabaseEncryptionKey { get; }
    public static ServerDdlTriggerEvent CreateDefault { get; }
    public static ServerDdlTriggerEvent CreateEndpoint { get; }
    public static ServerDdlTriggerEvent CreateEventNotification { get; }
    public static ServerDdlTriggerEvent CreateEventSession { get; }
    public static ServerDdlTriggerEvent CreateExtendedProcedure { get; }
    public static ServerDdlTriggerEvent CreateExtendedProperty { get; }
    public static ServerDdlTriggerEvent CreateExternalLanguage { get; }
    public static ServerDdlTriggerEvent CreateExternalLibrary { get; }
    public static ServerDdlTriggerEvent CreateExternalResourcePool { get; }
    public static ServerDdlTriggerEvent CreateFulltextCatalog { get; }
    public static ServerDdlTriggerEvent CreateFulltextIndex { get; }
    public static ServerDdlTriggerEvent CreateFulltextStoplist { get; }
    public static ServerDdlTriggerEvent CreateFunction { get; }
    public static ServerDdlTriggerEvent CreateIndex { get; }
    public static ServerDdlTriggerEvent CreateLinkedServer { get; }
    public static ServerDdlTriggerEvent CreateLinkedServerLogin { get; }
    public static ServerDdlTriggerEvent CreateLogin { get; }
    public static ServerDdlTriggerEvent CreateMasterKey { get; }
    public static ServerDdlTriggerEvent CreateMessage { get; }
    public static ServerDdlTriggerEvent CreateMessageType { get; }
    public static ServerDdlTriggerEvent CreatePartitionFunction { get; }
    public static ServerDdlTriggerEvent CreatePartitionScheme { get; }
    public static ServerDdlTriggerEvent CreatePlanGuide { get; }
    public static ServerDdlTriggerEvent CreateProcedure { get; }
    public static ServerDdlTriggerEvent CreateQueue { get; }
    public static ServerDdlTriggerEvent CreateRemoteServer { get; }
    public static ServerDdlTriggerEvent CreateRemoteServiceBinding { get; }
    public static ServerDdlTriggerEvent CreateResourcePool { get; }
    public static ServerDdlTriggerEvent CreateRole { get; }
    public static ServerDdlTriggerEvent CreateRoute { get; }
    public static ServerDdlTriggerEvent CreateRule { get; }
    public static ServerDdlTriggerEvent CreateSchema { get; }
    public static ServerDdlTriggerEvent CreateSearchPropertyList { get; }
    public static ServerDdlTriggerEvent CreateSecurityPolicy { get; }
    public static ServerDdlTriggerEvent CreateSequence { get; }
    public static ServerDdlTriggerEvent CreateServerAudit { get; }
    public static ServerDdlTriggerEvent CreateServerAuditSpecification { get; }
    public static ServerDdlTriggerEvent CreateServerRole { get; }
    public static ServerDdlTriggerEvent CreateService { get; }
    public static ServerDdlTriggerEvent CreateSpatialIndex { get; }
    public static ServerDdlTriggerEvent CreateStatistics { get; }
    public static ServerDdlTriggerEvent CreateSymmetricKey { get; }
    public static ServerDdlTriggerEvent CreateSynonym { get; }
    public static ServerDdlTriggerEvent CreateTable { get; }
    public static ServerDdlTriggerEvent CreateTrigger { get; }
    public static ServerDdlTriggerEvent CreateType { get; }
    public static ServerDdlTriggerEvent CreateUser { get; }
    public static ServerDdlTriggerEvent CreateView { get; }
    public static ServerDdlTriggerEvent CreateWorkloadGroup { get; }
    public static ServerDdlTriggerEvent CreateXmlIndex { get; }
    public static ServerDdlTriggerEvent CreateXmlSchemaCollection { get; }
    public static ServerDdlTriggerEvent DenyDatabase { get; }
    public static ServerDdlTriggerEvent DenyServer { get; }
    public static ServerDdlTriggerEvent DropApplicationRole { get; }
    public static ServerDdlTriggerEvent DropAssembly { get; }
    public static ServerDdlTriggerEvent DropAsymmetricKey { get; }
    public static ServerDdlTriggerEvent DropAudit { get; }
    public static ServerDdlTriggerEvent DropAvailabilityGroup { get; }
    public static ServerDdlTriggerEvent DropBrokerPriority { get; }
    public static ServerDdlTriggerEvent DropCertificate { get; }
    public static ServerDdlTriggerEvent DropColumnEncryptionKey { get; }
    public static ServerDdlTriggerEvent DropColumnMasterKey { get; }
    public static ServerDdlTriggerEvent DropContract { get; }
    public static ServerDdlTriggerEvent DropCredential { get; }
    public static ServerDdlTriggerEvent DropCryptographicProvider { get; }
    public static ServerDdlTriggerEvent DropDatabase { get; }
    public static ServerDdlTriggerEvent DropDatabaseAuditSpecification { get; }
    public static ServerDdlTriggerEvent DropDatabaseEncryptionKey { get; }
    public static ServerDdlTriggerEvent DropDefault { get; }
    public static ServerDdlTriggerEvent DropEndpoint { get; }
    public static ServerDdlTriggerEvent DropEventNotification { get; }
    public static ServerDdlTriggerEvent DropEventSession { get; }
    public static ServerDdlTriggerEvent DropExtendedProcedure { get; }
    public static ServerDdlTriggerEvent DropExtendedProperty { get; }
    public static ServerDdlTriggerEvent DropExternalLanguage { get; }
    public static ServerDdlTriggerEvent DropExternalLibrary { get; }
    public static ServerDdlTriggerEvent DropExternalResourcePool { get; }
    public static ServerDdlTriggerEvent DropFulltextCatalog { get; }
    public static ServerDdlTriggerEvent DropFulltextIndex { get; }
    public static ServerDdlTriggerEvent DropFulltextStoplist { get; }
    public static ServerDdlTriggerEvent DropFunction { get; }
    public static ServerDdlTriggerEvent DropIndex { get; }
    public static ServerDdlTriggerEvent DropLinkedServer { get; }
    public static ServerDdlTriggerEvent DropLinkedServerLogin { get; }
    public static ServerDdlTriggerEvent DropLogin { get; }
    public static ServerDdlTriggerEvent DropMasterKey { get; }
    public static ServerDdlTriggerEvent DropMessage { get; }
    public static ServerDdlTriggerEvent DropMessageType { get; }
    public static ServerDdlTriggerEvent DropPartitionFunction { get; }
    public static ServerDdlTriggerEvent DropPartitionScheme { get; }
    public static ServerDdlTriggerEvent DropPlanGuide { get; }
    public static ServerDdlTriggerEvent DropProcedure { get; }
    public static ServerDdlTriggerEvent DropQueue { get; }
    public static ServerDdlTriggerEvent DropRemoteServer { get; }
    public static ServerDdlTriggerEvent DropRemoteServiceBinding { get; }
    public static ServerDdlTriggerEvent DropResourcePool { get; }
    public static ServerDdlTriggerEvent DropRole { get; }
    public static ServerDdlTriggerEvent DropRoleMember { get; }
    public static ServerDdlTriggerEvent DropRoute { get; }
    public static ServerDdlTriggerEvent DropRule { get; }
    public static ServerDdlTriggerEvent DropSchema { get; }
    public static ServerDdlTriggerEvent DropSearchPropertyList { get; }
    public static ServerDdlTriggerEvent DropSecurityPolicy { get; }
    public static ServerDdlTriggerEvent DropSensitivityClassification { get; }
    public static ServerDdlTriggerEvent DropSequence { get; }
    public static ServerDdlTriggerEvent DropServerAudit { get; }
    public static ServerDdlTriggerEvent DropServerAuditSpecification { get; }
    public static ServerDdlTriggerEvent DropServerRole { get; }
    public static ServerDdlTriggerEvent DropServerRoleMember { get; }
    public static ServerDdlTriggerEvent DropService { get; }
    public static ServerDdlTriggerEvent DropSignature { get; }
    public static ServerDdlTriggerEvent DropSignatureSchemaObject { get; }
    public static ServerDdlTriggerEvent DropStatistics { get; }
    public static ServerDdlTriggerEvent DropSymmetricKey { get; }
    public static ServerDdlTriggerEvent DropSynonym { get; }
    public static ServerDdlTriggerEvent DropTable { get; }
    public static ServerDdlTriggerEvent DropTrigger { get; }
    public static ServerDdlTriggerEvent DropType { get; }
    public static ServerDdlTriggerEvent DropUser { get; }
    public static ServerDdlTriggerEvent DropView { get; }
    public static ServerDdlTriggerEvent DropWorkloadGroup { get; }
    public static ServerDdlTriggerEvent DropXmlSchemaCollection { get; }
    public static ServerDdlTriggerEvent GrantDatabase { get; }
    public static ServerDdlTriggerEvent GrantServer { get; }
    public static ServerDdlTriggerEvent Logon { get; }
    public static ServerDdlTriggerEvent Rename { get; }
    public static ServerDdlTriggerEvent RevokeDatabase { get; }
    public static ServerDdlTriggerEvent RevokeServer { get; }
    public static ServerDdlTriggerEvent UnbindDefault { get; }
    public static ServerDdlTriggerEvent UnbindRule { get; }
    public static ServerDdlTriggerEvent UpdateStatistics { get; }
    internal ServerDdlTriggerEvent(ServerDdlTriggerEventValues eventValue);
    internal ServerDdlTriggerEventValues get_Value();
    public static ServerDdlTriggerEventSet op_Implicit(ServerDdlTriggerEvent eventValue);
    public static ServerDdlTriggerEventSet op_Addition(ServerDdlTriggerEvent eventLeft, ServerDdlTriggerEvent eventRight);
    public static ServerDdlTriggerEventSet Add(ServerDdlTriggerEvent eventLeft, ServerDdlTriggerEvent eventRight);
    public static ServerDdlTriggerEventSet op_BitwiseOr(ServerDdlTriggerEvent eventLeft, ServerDdlTriggerEvent eventRight);
    public static ServerDdlTriggerEventSet BitwiseOr(ServerDdlTriggerEvent eventLeft, ServerDdlTriggerEvent eventRight);
    public virtual string ToString();
    public static ServerDdlTriggerEvent get_AddRoleMember();
    public static ServerDdlTriggerEvent get_AddSensitivityClassification();
    public static ServerDdlTriggerEvent get_AddServerRoleMember();
    public static ServerDdlTriggerEvent get_AddSignature();
    public static ServerDdlTriggerEvent get_AddSignatureSchemaObject();
    public static ServerDdlTriggerEvent get_AlterApplicationRole();
    public static ServerDdlTriggerEvent get_AlterAssembly();
    public static ServerDdlTriggerEvent get_AlterAsymmetricKey();
    public static ServerDdlTriggerEvent get_AlterAudit();
    public static ServerDdlTriggerEvent get_AlterAuthorizationDatabase();
    public static ServerDdlTriggerEvent get_AlterAuthorizationServer();
    public static ServerDdlTriggerEvent get_AlterAvailabilityGroup();
    public static ServerDdlTriggerEvent get_AlterBrokerPriority();
    public static ServerDdlTriggerEvent get_AlterCertificate();
    public static ServerDdlTriggerEvent get_AlterColumnEncryptionKey();
    public static ServerDdlTriggerEvent get_AlterCredential();
    public static ServerDdlTriggerEvent get_AlterCryptographicProvider();
    public static ServerDdlTriggerEvent get_AlterDatabase();
    public static ServerDdlTriggerEvent get_AlterDatabaseAuditSpecification();
    public static ServerDdlTriggerEvent get_AlterDatabaseEncryptionKey();
    public static ServerDdlTriggerEvent get_AlterDatabaseScopedConfiguration();
    public static ServerDdlTriggerEvent get_AlterEndpoint();
    public static ServerDdlTriggerEvent get_AlterEventSession();
    public static ServerDdlTriggerEvent get_AlterExtendedProperty();
    public static ServerDdlTriggerEvent get_AlterExternalLanguage();
    public static ServerDdlTriggerEvent get_AlterExternalLibrary();
    public static ServerDdlTriggerEvent get_AlterExternalResourcePool();
    public static ServerDdlTriggerEvent get_AlterFulltextCatalog();
    public static ServerDdlTriggerEvent get_AlterFulltextIndex();
    public static ServerDdlTriggerEvent get_AlterFulltextStoplist();
    public static ServerDdlTriggerEvent get_AlterFunction();
    public static ServerDdlTriggerEvent get_AlterIndex();
    public static ServerDdlTriggerEvent get_AlterInstance();
    public static ServerDdlTriggerEvent get_AlterLinkedServer();
    public static ServerDdlTriggerEvent get_AlterLogin();
    public static ServerDdlTriggerEvent get_AlterMasterKey();
    public static ServerDdlTriggerEvent get_AlterMessage();
    public static ServerDdlTriggerEvent get_AlterMessageType();
    public static ServerDdlTriggerEvent get_AlterPartitionFunction();
    public static ServerDdlTriggerEvent get_AlterPartitionScheme();
    public static ServerDdlTriggerEvent get_AlterPlanGuide();
    public static ServerDdlTriggerEvent get_AlterProcedure();
    public static ServerDdlTriggerEvent get_AlterQueue();
    public static ServerDdlTriggerEvent get_AlterRemoteServer();
    public static ServerDdlTriggerEvent get_AlterRemoteServiceBinding();
    public static ServerDdlTriggerEvent get_AlterResourceGovernorConfig();
    public static ServerDdlTriggerEvent get_AlterResourcePool();
    public static ServerDdlTriggerEvent get_AlterRole();
    public static ServerDdlTriggerEvent get_AlterRoute();
    public static ServerDdlTriggerEvent get_AlterSchema();
    public static ServerDdlTriggerEvent get_AlterSearchPropertyList();
    public static ServerDdlTriggerEvent get_AlterSecurityPolicy();
    public static ServerDdlTriggerEvent get_AlterSequence();
    public static ServerDdlTriggerEvent get_AlterServerAudit();
    public static ServerDdlTriggerEvent get_AlterServerAuditSpecification();
    public static ServerDdlTriggerEvent get_AlterServerRole();
    public static ServerDdlTriggerEvent get_AlterService();
    public static ServerDdlTriggerEvent get_AlterServiceMasterKey();
    public static ServerDdlTriggerEvent get_AlterSymmetricKey();
    public static ServerDdlTriggerEvent get_AlterTable();
    public static ServerDdlTriggerEvent get_AlterTrigger();
    public static ServerDdlTriggerEvent get_AlterUser();
    public static ServerDdlTriggerEvent get_AlterView();
    public static ServerDdlTriggerEvent get_AlterWorkloadGroup();
    public static ServerDdlTriggerEvent get_AlterXmlSchemaCollection();
    public static ServerDdlTriggerEvent get_BindDefault();
    public static ServerDdlTriggerEvent get_BindRule();
    public static ServerDdlTriggerEvent get_CreateApplicationRole();
    public static ServerDdlTriggerEvent get_CreateAssembly();
    public static ServerDdlTriggerEvent get_CreateAsymmetricKey();
    public static ServerDdlTriggerEvent get_CreateAudit();
    public static ServerDdlTriggerEvent get_CreateAvailabilityGroup();
    public static ServerDdlTriggerEvent get_CreateBrokerPriority();
    public static ServerDdlTriggerEvent get_CreateCertificate();
    public static ServerDdlTriggerEvent get_CreateColumnEncryptionKey();
    public static ServerDdlTriggerEvent get_CreateColumnMasterKey();
    public static ServerDdlTriggerEvent get_CreateContract();
    public static ServerDdlTriggerEvent get_CreateCredential();
    public static ServerDdlTriggerEvent get_CreateCryptographicProvider();
    public static ServerDdlTriggerEvent get_CreateDatabase();
    public static ServerDdlTriggerEvent get_CreateDatabaseAuditSpecification();
    public static ServerDdlTriggerEvent get_CreateDatabaseEncryptionKey();
    public static ServerDdlTriggerEvent get_CreateDefault();
    public static ServerDdlTriggerEvent get_CreateEndpoint();
    public static ServerDdlTriggerEvent get_CreateEventNotification();
    public static ServerDdlTriggerEvent get_CreateEventSession();
    public static ServerDdlTriggerEvent get_CreateExtendedProcedure();
    public static ServerDdlTriggerEvent get_CreateExtendedProperty();
    public static ServerDdlTriggerEvent get_CreateExternalLanguage();
    public static ServerDdlTriggerEvent get_CreateExternalLibrary();
    public static ServerDdlTriggerEvent get_CreateExternalResourcePool();
    public static ServerDdlTriggerEvent get_CreateFulltextCatalog();
    public static ServerDdlTriggerEvent get_CreateFulltextIndex();
    public static ServerDdlTriggerEvent get_CreateFulltextStoplist();
    public static ServerDdlTriggerEvent get_CreateFunction();
    public static ServerDdlTriggerEvent get_CreateIndex();
    public static ServerDdlTriggerEvent get_CreateLinkedServer();
    public static ServerDdlTriggerEvent get_CreateLinkedServerLogin();
    public static ServerDdlTriggerEvent get_CreateLogin();
    public static ServerDdlTriggerEvent get_CreateMasterKey();
    public static ServerDdlTriggerEvent get_CreateMessage();
    public static ServerDdlTriggerEvent get_CreateMessageType();
    public static ServerDdlTriggerEvent get_CreatePartitionFunction();
    public static ServerDdlTriggerEvent get_CreatePartitionScheme();
    public static ServerDdlTriggerEvent get_CreatePlanGuide();
    public static ServerDdlTriggerEvent get_CreateProcedure();
    public static ServerDdlTriggerEvent get_CreateQueue();
    public static ServerDdlTriggerEvent get_CreateRemoteServer();
    public static ServerDdlTriggerEvent get_CreateRemoteServiceBinding();
    public static ServerDdlTriggerEvent get_CreateResourcePool();
    public static ServerDdlTriggerEvent get_CreateRole();
    public static ServerDdlTriggerEvent get_CreateRoute();
    public static ServerDdlTriggerEvent get_CreateRule();
    public static ServerDdlTriggerEvent get_CreateSchema();
    public static ServerDdlTriggerEvent get_CreateSearchPropertyList();
    public static ServerDdlTriggerEvent get_CreateSecurityPolicy();
    public static ServerDdlTriggerEvent get_CreateSequence();
    public static ServerDdlTriggerEvent get_CreateServerAudit();
    public static ServerDdlTriggerEvent get_CreateServerAuditSpecification();
    public static ServerDdlTriggerEvent get_CreateServerRole();
    public static ServerDdlTriggerEvent get_CreateService();
    public static ServerDdlTriggerEvent get_CreateSpatialIndex();
    public static ServerDdlTriggerEvent get_CreateStatistics();
    public static ServerDdlTriggerEvent get_CreateSymmetricKey();
    public static ServerDdlTriggerEvent get_CreateSynonym();
    public static ServerDdlTriggerEvent get_CreateTable();
    public static ServerDdlTriggerEvent get_CreateTrigger();
    public static ServerDdlTriggerEvent get_CreateType();
    public static ServerDdlTriggerEvent get_CreateUser();
    public static ServerDdlTriggerEvent get_CreateView();
    public static ServerDdlTriggerEvent get_CreateWorkloadGroup();
    public static ServerDdlTriggerEvent get_CreateXmlIndex();
    public static ServerDdlTriggerEvent get_CreateXmlSchemaCollection();
    public static ServerDdlTriggerEvent get_DenyDatabase();
    public static ServerDdlTriggerEvent get_DenyServer();
    public static ServerDdlTriggerEvent get_DropApplicationRole();
    public static ServerDdlTriggerEvent get_DropAssembly();
    public static ServerDdlTriggerEvent get_DropAsymmetricKey();
    public static ServerDdlTriggerEvent get_DropAudit();
    public static ServerDdlTriggerEvent get_DropAvailabilityGroup();
    public static ServerDdlTriggerEvent get_DropBrokerPriority();
    public static ServerDdlTriggerEvent get_DropCertificate();
    public static ServerDdlTriggerEvent get_DropColumnEncryptionKey();
    public static ServerDdlTriggerEvent get_DropColumnMasterKey();
    public static ServerDdlTriggerEvent get_DropContract();
    public static ServerDdlTriggerEvent get_DropCredential();
    public static ServerDdlTriggerEvent get_DropCryptographicProvider();
    public static ServerDdlTriggerEvent get_DropDatabase();
    public static ServerDdlTriggerEvent get_DropDatabaseAuditSpecification();
    public static ServerDdlTriggerEvent get_DropDatabaseEncryptionKey();
    public static ServerDdlTriggerEvent get_DropDefault();
    public static ServerDdlTriggerEvent get_DropEndpoint();
    public static ServerDdlTriggerEvent get_DropEventNotification();
    public static ServerDdlTriggerEvent get_DropEventSession();
    public static ServerDdlTriggerEvent get_DropExtendedProcedure();
    public static ServerDdlTriggerEvent get_DropExtendedProperty();
    public static ServerDdlTriggerEvent get_DropExternalLanguage();
    public static ServerDdlTriggerEvent get_DropExternalLibrary();
    public static ServerDdlTriggerEvent get_DropExternalResourcePool();
    public static ServerDdlTriggerEvent get_DropFulltextCatalog();
    public static ServerDdlTriggerEvent get_DropFulltextIndex();
    public static ServerDdlTriggerEvent get_DropFulltextStoplist();
    public static ServerDdlTriggerEvent get_DropFunction();
    public static ServerDdlTriggerEvent get_DropIndex();
    public static ServerDdlTriggerEvent get_DropLinkedServer();
    public static ServerDdlTriggerEvent get_DropLinkedServerLogin();
    public static ServerDdlTriggerEvent get_DropLogin();
    public static ServerDdlTriggerEvent get_DropMasterKey();
    public static ServerDdlTriggerEvent get_DropMessage();
    public static ServerDdlTriggerEvent get_DropMessageType();
    public static ServerDdlTriggerEvent get_DropPartitionFunction();
    public static ServerDdlTriggerEvent get_DropPartitionScheme();
    public static ServerDdlTriggerEvent get_DropPlanGuide();
    public static ServerDdlTriggerEvent get_DropProcedure();
    public static ServerDdlTriggerEvent get_DropQueue();
    public static ServerDdlTriggerEvent get_DropRemoteServer();
    public static ServerDdlTriggerEvent get_DropRemoteServiceBinding();
    public static ServerDdlTriggerEvent get_DropResourcePool();
    public static ServerDdlTriggerEvent get_DropRole();
    public static ServerDdlTriggerEvent get_DropRoleMember();
    public static ServerDdlTriggerEvent get_DropRoute();
    public static ServerDdlTriggerEvent get_DropRule();
    public static ServerDdlTriggerEvent get_DropSchema();
    public static ServerDdlTriggerEvent get_DropSearchPropertyList();
    public static ServerDdlTriggerEvent get_DropSecurityPolicy();
    public static ServerDdlTriggerEvent get_DropSensitivityClassification();
    public static ServerDdlTriggerEvent get_DropSequence();
    public static ServerDdlTriggerEvent get_DropServerAudit();
    public static ServerDdlTriggerEvent get_DropServerAuditSpecification();
    public static ServerDdlTriggerEvent get_DropServerRole();
    public static ServerDdlTriggerEvent get_DropServerRoleMember();
    public static ServerDdlTriggerEvent get_DropService();
    public static ServerDdlTriggerEvent get_DropSignature();
    public static ServerDdlTriggerEvent get_DropSignatureSchemaObject();
    public static ServerDdlTriggerEvent get_DropStatistics();
    public static ServerDdlTriggerEvent get_DropSymmetricKey();
    public static ServerDdlTriggerEvent get_DropSynonym();
    public static ServerDdlTriggerEvent get_DropTable();
    public static ServerDdlTriggerEvent get_DropTrigger();
    public static ServerDdlTriggerEvent get_DropType();
    public static ServerDdlTriggerEvent get_DropUser();
    public static ServerDdlTriggerEvent get_DropView();
    public static ServerDdlTriggerEvent get_DropWorkloadGroup();
    public static ServerDdlTriggerEvent get_DropXmlSchemaCollection();
    public static ServerDdlTriggerEvent get_GrantDatabase();
    public static ServerDdlTriggerEvent get_GrantServer();
    public static ServerDdlTriggerEvent get_Logon();
    public static ServerDdlTriggerEvent get_Rename();
    public static ServerDdlTriggerEvent get_RevokeDatabase();
    public static ServerDdlTriggerEvent get_RevokeServer();
    public static ServerDdlTriggerEvent get_UnbindDefault();
    public static ServerDdlTriggerEvent get_UnbindRule();
    public static ServerDdlTriggerEvent get_UpdateStatistics();
}
public class Microsoft.SqlServer.Management.Smo.ServerDdlTriggerEventSet : EventSetBase {
    private bool dirty;
    private static ServerDdlTriggerEventSet ddlauthorizationservereventsevents;
    private static ServerDdlTriggerEventSet ddlavailabilitygroupeventsevents;
    private static ServerDdlTriggerEventSet ddlcredentialeventsevents;
    private static ServerDdlTriggerEventSet ddlcryptographicprovidereventsevents;
    private static ServerDdlTriggerEventSet ddldatabaseeventsevents;
    private static ServerDdlTriggerEventSet ddlendpointeventsevents;
    private static ServerDdlTriggerEventSet ddleventsessioneventsevents;
    private static ServerDdlTriggerEventSet ddlextendedprocedureeventsevents;
    private static ServerDdlTriggerEventSet ddlexternalresourcepooleventsevents;
    private static ServerDdlTriggerEventSet ddlgdrservereventsevents;
    private static ServerDdlTriggerEventSet ddllinkedservereventsevents;
    private static ServerDdlTriggerEventSet ddllinkedserverlogineventsevents;
    private static ServerDdlTriggerEventSet ddllogineventsevents;
    private static ServerDdlTriggerEventSet ddlmessageeventsevents;
    private static ServerDdlTriggerEventSet ddlremoteservereventsevents;
    private static ServerDdlTriggerEventSet ddlresourcegovernoreventsevents;
    private static ServerDdlTriggerEventSet ddlworkloadgroupevents;
    private static ServerDdlTriggerEventSet ddlresourcepoolevents;
    private static ServerDdlTriggerEventSet ddlserverauditeventsevents;
    private static ServerDdlTriggerEventSet ddlserverauditspecificationeventsevents;
    private static ServerDdlTriggerEventSet ddlserverleveleventsevents;
    private static ServerDdlTriggerEventSet ddlserversecurityeventsevents;
    private static ServerDdlTriggerEventSet ddlservicemasterkeyeventsevents;
    public int NumberOfElements { get; }
    public bool Dirty { get; public set; }
    public bool AddRoleMember { get; public set; }
    public bool AddSensitivityClassification { get; public set; }
    public bool AddServerRoleMember { get; public set; }
    public bool AddSignature { get; public set; }
    public bool AddSignatureSchemaObject { get; public set; }
    public bool AlterApplicationRole { get; public set; }
    public bool AlterAssembly { get; public set; }
    public bool AlterAsymmetricKey { get; public set; }
    public bool AlterAudit { get; public set; }
    public bool AlterAuthorizationDatabase { get; public set; }
    public bool AlterAuthorizationServer { get; public set; }
    public bool AlterAvailabilityGroup { get; public set; }
    public bool AlterBrokerPriority { get; public set; }
    public bool AlterCertificate { get; public set; }
    public bool AlterColumnEncryptionKey { get; public set; }
    public bool AlterCredential { get; public set; }
    public bool AlterCryptographicProvider { get; public set; }
    public bool AlterDatabase { get; public set; }
    public bool AlterDatabaseAuditSpecification { get; public set; }
    public bool AlterDatabaseEncryptionKey { get; public set; }
    public bool AlterDatabaseScopedConfiguration { get; public set; }
    public bool AlterEndpoint { get; public set; }
    public bool AlterEventSession { get; public set; }
    public bool AlterExtendedProperty { get; public set; }
    public bool AlterExternalLanguage { get; public set; }
    public bool AlterExternalLibrary { get; public set; }
    public bool AlterExternalResourcePool { get; public set; }
    public bool AlterFulltextCatalog { get; public set; }
    public bool AlterFulltextIndex { get; public set; }
    public bool AlterFulltextStoplist { get; public set; }
    public bool AlterFunction { get; public set; }
    public bool AlterIndex { get; public set; }
    public bool AlterInstance { get; public set; }
    public bool AlterLinkedServer { get; public set; }
    public bool AlterLogin { get; public set; }
    public bool AlterMasterKey { get; public set; }
    public bool AlterMessage { get; public set; }
    public bool AlterMessageType { get; public set; }
    public bool AlterPartitionFunction { get; public set; }
    public bool AlterPartitionScheme { get; public set; }
    public bool AlterPlanGuide { get; public set; }
    public bool AlterProcedure { get; public set; }
    public bool AlterQueue { get; public set; }
    public bool AlterRemoteServer { get; public set; }
    public bool AlterRemoteServiceBinding { get; public set; }
    public bool AlterResourceGovernorConfig { get; public set; }
    public bool AlterResourcePool { get; public set; }
    public bool AlterRole { get; public set; }
    public bool AlterRoute { get; public set; }
    public bool AlterSchema { get; public set; }
    public bool AlterSearchPropertyList { get; public set; }
    public bool AlterSecurityPolicy { get; public set; }
    public bool AlterSequence { get; public set; }
    public bool AlterServerAudit { get; public set; }
    public bool AlterServerAuditSpecification { get; public set; }
    public bool AlterServerRole { get; public set; }
    public bool AlterService { get; public set; }
    public bool AlterServiceMasterKey { get; public set; }
    public bool AlterSymmetricKey { get; public set; }
    public bool AlterTable { get; public set; }
    public bool AlterTrigger { get; public set; }
    public bool AlterUser { get; public set; }
    public bool AlterView { get; public set; }
    public bool AlterWorkloadGroup { get; public set; }
    public bool AlterXmlSchemaCollection { get; public set; }
    public bool BindDefault { get; public set; }
    public bool BindRule { get; public set; }
    public bool CreateApplicationRole { get; public set; }
    public bool CreateAssembly { get; public set; }
    public bool CreateAsymmetricKey { get; public set; }
    public bool CreateAudit { get; public set; }
    public bool CreateAvailabilityGroup { get; public set; }
    public bool CreateBrokerPriority { get; public set; }
    public bool CreateCertificate { get; public set; }
    public bool CreateColumnEncryptionKey { get; public set; }
    public bool CreateColumnMasterKey { get; public set; }
    public bool CreateContract { get; public set; }
    public bool CreateCredential { get; public set; }
    public bool CreateCryptographicProvider { get; public set; }
    public bool CreateDatabase { get; public set; }
    public bool CreateDatabaseAuditSpecification { get; public set; }
    public bool CreateDatabaseEncryptionKey { get; public set; }
    public bool CreateDefault { get; public set; }
    public bool CreateEndpoint { get; public set; }
    public bool CreateEventNotification { get; public set; }
    public bool CreateEventSession { get; public set; }
    public bool CreateExtendedProcedure { get; public set; }
    public bool CreateExtendedProperty { get; public set; }
    public bool CreateExternalLanguage { get; public set; }
    public bool CreateExternalLibrary { get; public set; }
    public bool CreateExternalResourcePool { get; public set; }
    public bool CreateFulltextCatalog { get; public set; }
    public bool CreateFulltextIndex { get; public set; }
    public bool CreateFulltextStoplist { get; public set; }
    public bool CreateFunction { get; public set; }
    public bool CreateIndex { get; public set; }
    public bool CreateLinkedServer { get; public set; }
    public bool CreateLinkedServerLogin { get; public set; }
    public bool CreateLogin { get; public set; }
    public bool CreateMasterKey { get; public set; }
    public bool CreateMessage { get; public set; }
    public bool CreateMessageType { get; public set; }
    public bool CreatePartitionFunction { get; public set; }
    public bool CreatePartitionScheme { get; public set; }
    public bool CreatePlanGuide { get; public set; }
    public bool CreateProcedure { get; public set; }
    public bool CreateQueue { get; public set; }
    public bool CreateRemoteServer { get; public set; }
    public bool CreateRemoteServiceBinding { get; public set; }
    public bool CreateResourcePool { get; public set; }
    public bool CreateRole { get; public set; }
    public bool CreateRoute { get; public set; }
    public bool CreateRule { get; public set; }
    public bool CreateSchema { get; public set; }
    public bool CreateSearchPropertyList { get; public set; }
    public bool CreateSecurityPolicy { get; public set; }
    public bool CreateSequence { get; public set; }
    public bool CreateServerAudit { get; public set; }
    public bool CreateServerAuditSpecification { get; public set; }
    public bool CreateServerRole { get; public set; }
    public bool CreateService { get; public set; }
    public bool CreateSpatialIndex { get; public set; }
    public bool CreateStatistics { get; public set; }
    public bool CreateSymmetricKey { get; public set; }
    public bool CreateSynonym { get; public set; }
    public bool CreateTable { get; public set; }
    public bool CreateTrigger { get; public set; }
    public bool CreateType { get; public set; }
    public bool CreateUser { get; public set; }
    public bool CreateView { get; public set; }
    public bool CreateWorkloadGroup { get; public set; }
    public bool CreateXmlIndex { get; public set; }
    public bool CreateXmlSchemaCollection { get; public set; }
    public bool DenyDatabase { get; public set; }
    public bool DenyServer { get; public set; }
    public bool DropApplicationRole { get; public set; }
    public bool DropAssembly { get; public set; }
    public bool DropAsymmetricKey { get; public set; }
    public bool DropAudit { get; public set; }
    public bool DropAvailabilityGroup { get; public set; }
    public bool DropBrokerPriority { get; public set; }
    public bool DropCertificate { get; public set; }
    public bool DropColumnEncryptionKey { get; public set; }
    public bool DropColumnMasterKey { get; public set; }
    public bool DropContract { get; public set; }
    public bool DropCredential { get; public set; }
    public bool DropCryptographicProvider { get; public set; }
    public bool DropDatabase { get; public set; }
    public bool DropDatabaseAuditSpecification { get; public set; }
    public bool DropDatabaseEncryptionKey { get; public set; }
    public bool DropDefault { get; public set; }
    public bool DropEndpoint { get; public set; }
    public bool DropEventNotification { get; public set; }
    public bool DropEventSession { get; public set; }
    public bool DropExtendedProcedure { get; public set; }
    public bool DropExtendedProperty { get; public set; }
    public bool DropExternalLanguage { get; public set; }
    public bool DropExternalLibrary { get; public set; }
    public bool DropExternalResourcePool { get; public set; }
    public bool DropFulltextCatalog { get; public set; }
    public bool DropFulltextIndex { get; public set; }
    public bool DropFulltextStoplist { get; public set; }
    public bool DropFunction { get; public set; }
    public bool DropIndex { get; public set; }
    public bool DropLinkedServer { get; public set; }
    public bool DropLinkedServerLogin { get; public set; }
    public bool DropLogin { get; public set; }
    public bool DropMasterKey { get; public set; }
    public bool DropMessage { get; public set; }
    public bool DropMessageType { get; public set; }
    public bool DropPartitionFunction { get; public set; }
    public bool DropPartitionScheme { get; public set; }
    public bool DropPlanGuide { get; public set; }
    public bool DropProcedure { get; public set; }
    public bool DropQueue { get; public set; }
    public bool DropRemoteServer { get; public set; }
    public bool DropRemoteServiceBinding { get; public set; }
    public bool DropResourcePool { get; public set; }
    public bool DropRole { get; public set; }
    public bool DropRoleMember { get; public set; }
    public bool DropRoute { get; public set; }
    public bool DropRule { get; public set; }
    public bool DropSchema { get; public set; }
    public bool DropSearchPropertyList { get; public set; }
    public bool DropSecurityPolicy { get; public set; }
    public bool DropSensitivityClassification { get; public set; }
    public bool DropSequence { get; public set; }
    public bool DropServerAudit { get; public set; }
    public bool DropServerAuditSpecification { get; public set; }
    public bool DropServerRole { get; public set; }
    public bool DropServerRoleMember { get; public set; }
    public bool DropService { get; public set; }
    public bool DropSignature { get; public set; }
    public bool DropSignatureSchemaObject { get; public set; }
    public bool DropStatistics { get; public set; }
    public bool DropSymmetricKey { get; public set; }
    public bool DropSynonym { get; public set; }
    public bool DropTable { get; public set; }
    public bool DropTrigger { get; public set; }
    public bool DropType { get; public set; }
    public bool DropUser { get; public set; }
    public bool DropView { get; public set; }
    public bool DropWorkloadGroup { get; public set; }
    public bool DropXmlSchemaCollection { get; public set; }
    public bool GrantDatabase { get; public set; }
    public bool GrantServer { get; public set; }
    public bool Logon { get; public set; }
    public bool Rename { get; public set; }
    public bool RevokeDatabase { get; public set; }
    public bool RevokeServer { get; public set; }
    public bool UnbindDefault { get; public set; }
    public bool UnbindRule { get; public set; }
    public bool UpdateStatistics { get; public set; }
    public bool DdlAuthorizationServerEventsEvents { get; public set; }
    public bool DdlAvailabilityGroupEventsEvents { get; public set; }
    public bool DdlCredentialEventsEvents { get; public set; }
    public bool DdlCryptographicProviderEventsEvents { get; public set; }
    public bool DdlDatabaseEventsEvents { get; public set; }
    public bool DdlEndpointEventsEvents { get; public set; }
    public bool DdlEventSessionEventsEvents { get; public set; }
    public bool DdlExtendedProcedureEventsEvents { get; public set; }
    public bool DdlExternalResourcePoolEventsEvents { get; public set; }
    public bool DdlGdrServerEventsEvents { get; public set; }
    public bool DdlLinkedServerEventsEvents { get; public set; }
    public bool DdlLinkedServerLoginEventsEvents { get; public set; }
    public bool DdlLoginEventsEvents { get; public set; }
    public bool DdlMessageEventsEvents { get; public set; }
    public bool DdlRemoteServerEventsEvents { get; public set; }
    public bool DdlResourceGovernorEventsEvents { get; public set; }
    public bool DdlWorkloadGroupEvents { get; public set; }
    public bool DdlResourcePoolEvents { get; public set; }
    public bool DdlServerAuditEventsEvents { get; public set; }
    public bool DdlServerAuditSpecificationEventsEvents { get; public set; }
    public bool DdlServerLevelEventsEvents { get; public set; }
    public bool DdlServerSecurityEventsEvents { get; public set; }
    public bool DdlServiceMasterKeyEventsEvents { get; public set; }
    public ServerDdlTriggerEventSet(ServerDdlTriggerEventSet eventSet);
    public ServerDdlTriggerEventSet(ServerDdlTriggerEvent anEvent);
    public ServerDdlTriggerEventSet(ServerDdlTriggerEvent[] events);
    internal ServerDdlTriggerEventSet(BitArray storage);
    private static ServerDdlTriggerEventSet();
    public virtual EventSetBase Copy();
    internal void SetBit(ServerDdlTriggerEvent anEvent);
    internal void ResetBit(ServerDdlTriggerEvent anEvent);
    public ServerDdlTriggerEventSet Add(ServerDdlTriggerEvent anEvent);
    public ServerDdlTriggerEventSet Remove(ServerDdlTriggerEvent anEvent);
    public static ServerDdlTriggerEventSet op_Addition(ServerDdlTriggerEventSet eventSet, ServerDdlTriggerEvent anEvent);
    public static ServerDdlTriggerEventSet Add(ServerDdlTriggerEventSet eventSet, ServerDdlTriggerEvent anEvent);
    public static ServerDdlTriggerEventSet op_Subtraction(ServerDdlTriggerEventSet eventSet, ServerDdlTriggerEvent anEvent);
    public static ServerDdlTriggerEventSet Subtract(ServerDdlTriggerEventSet eventSet, ServerDdlTriggerEvent anEvent);
    public virtual int get_NumberOfElements();
    public virtual string ToString();
    public bool get_Dirty();
    public void set_Dirty(bool value);
    public bool get_AddRoleMember();
    public void set_AddRoleMember(bool value);
    public bool get_AddSensitivityClassification();
    public void set_AddSensitivityClassification(bool value);
    public bool get_AddServerRoleMember();
    public void set_AddServerRoleMember(bool value);
    public bool get_AddSignature();
    public void set_AddSignature(bool value);
    public bool get_AddSignatureSchemaObject();
    public void set_AddSignatureSchemaObject(bool value);
    public bool get_AlterApplicationRole();
    public void set_AlterApplicationRole(bool value);
    public bool get_AlterAssembly();
    public void set_AlterAssembly(bool value);
    public bool get_AlterAsymmetricKey();
    public void set_AlterAsymmetricKey(bool value);
    public bool get_AlterAudit();
    public void set_AlterAudit(bool value);
    public bool get_AlterAuthorizationDatabase();
    public void set_AlterAuthorizationDatabase(bool value);
    public bool get_AlterAuthorizationServer();
    public void set_AlterAuthorizationServer(bool value);
    public bool get_AlterAvailabilityGroup();
    public void set_AlterAvailabilityGroup(bool value);
    public bool get_AlterBrokerPriority();
    public void set_AlterBrokerPriority(bool value);
    public bool get_AlterCertificate();
    public void set_AlterCertificate(bool value);
    public bool get_AlterColumnEncryptionKey();
    public void set_AlterColumnEncryptionKey(bool value);
    public bool get_AlterCredential();
    public void set_AlterCredential(bool value);
    public bool get_AlterCryptographicProvider();
    public void set_AlterCryptographicProvider(bool value);
    public bool get_AlterDatabase();
    public void set_AlterDatabase(bool value);
    public bool get_AlterDatabaseAuditSpecification();
    public void set_AlterDatabaseAuditSpecification(bool value);
    public bool get_AlterDatabaseEncryptionKey();
    public void set_AlterDatabaseEncryptionKey(bool value);
    public bool get_AlterDatabaseScopedConfiguration();
    public void set_AlterDatabaseScopedConfiguration(bool value);
    public bool get_AlterEndpoint();
    public void set_AlterEndpoint(bool value);
    public bool get_AlterEventSession();
    public void set_AlterEventSession(bool value);
    public bool get_AlterExtendedProperty();
    public void set_AlterExtendedProperty(bool value);
    public bool get_AlterExternalLanguage();
    public void set_AlterExternalLanguage(bool value);
    public bool get_AlterExternalLibrary();
    public void set_AlterExternalLibrary(bool value);
    public bool get_AlterExternalResourcePool();
    public void set_AlterExternalResourcePool(bool value);
    public bool get_AlterFulltextCatalog();
    public void set_AlterFulltextCatalog(bool value);
    public bool get_AlterFulltextIndex();
    public void set_AlterFulltextIndex(bool value);
    public bool get_AlterFulltextStoplist();
    public void set_AlterFulltextStoplist(bool value);
    public bool get_AlterFunction();
    public void set_AlterFunction(bool value);
    public bool get_AlterIndex();
    public void set_AlterIndex(bool value);
    public bool get_AlterInstance();
    public void set_AlterInstance(bool value);
    public bool get_AlterLinkedServer();
    public void set_AlterLinkedServer(bool value);
    public bool get_AlterLogin();
    public void set_AlterLogin(bool value);
    public bool get_AlterMasterKey();
    public void set_AlterMasterKey(bool value);
    public bool get_AlterMessage();
    public void set_AlterMessage(bool value);
    public bool get_AlterMessageType();
    public void set_AlterMessageType(bool value);
    public bool get_AlterPartitionFunction();
    public void set_AlterPartitionFunction(bool value);
    public bool get_AlterPartitionScheme();
    public void set_AlterPartitionScheme(bool value);
    public bool get_AlterPlanGuide();
    public void set_AlterPlanGuide(bool value);
    public bool get_AlterProcedure();
    public void set_AlterProcedure(bool value);
    public bool get_AlterQueue();
    public void set_AlterQueue(bool value);
    public bool get_AlterRemoteServer();
    public void set_AlterRemoteServer(bool value);
    public bool get_AlterRemoteServiceBinding();
    public void set_AlterRemoteServiceBinding(bool value);
    public bool get_AlterResourceGovernorConfig();
    public void set_AlterResourceGovernorConfig(bool value);
    public bool get_AlterResourcePool();
    public void set_AlterResourcePool(bool value);
    public bool get_AlterRole();
    public void set_AlterRole(bool value);
    public bool get_AlterRoute();
    public void set_AlterRoute(bool value);
    public bool get_AlterSchema();
    public void set_AlterSchema(bool value);
    public bool get_AlterSearchPropertyList();
    public void set_AlterSearchPropertyList(bool value);
    public bool get_AlterSecurityPolicy();
    public void set_AlterSecurityPolicy(bool value);
    public bool get_AlterSequence();
    public void set_AlterSequence(bool value);
    public bool get_AlterServerAudit();
    public void set_AlterServerAudit(bool value);
    public bool get_AlterServerAuditSpecification();
    public void set_AlterServerAuditSpecification(bool value);
    public bool get_AlterServerRole();
    public void set_AlterServerRole(bool value);
    public bool get_AlterService();
    public void set_AlterService(bool value);
    public bool get_AlterServiceMasterKey();
    public void set_AlterServiceMasterKey(bool value);
    public bool get_AlterSymmetricKey();
    public void set_AlterSymmetricKey(bool value);
    public bool get_AlterTable();
    public void set_AlterTable(bool value);
    public bool get_AlterTrigger();
    public void set_AlterTrigger(bool value);
    public bool get_AlterUser();
    public void set_AlterUser(bool value);
    public bool get_AlterView();
    public void set_AlterView(bool value);
    public bool get_AlterWorkloadGroup();
    public void set_AlterWorkloadGroup(bool value);
    public bool get_AlterXmlSchemaCollection();
    public void set_AlterXmlSchemaCollection(bool value);
    public bool get_BindDefault();
    public void set_BindDefault(bool value);
    public bool get_BindRule();
    public void set_BindRule(bool value);
    public bool get_CreateApplicationRole();
    public void set_CreateApplicationRole(bool value);
    public bool get_CreateAssembly();
    public void set_CreateAssembly(bool value);
    public bool get_CreateAsymmetricKey();
    public void set_CreateAsymmetricKey(bool value);
    public bool get_CreateAudit();
    public void set_CreateAudit(bool value);
    public bool get_CreateAvailabilityGroup();
    public void set_CreateAvailabilityGroup(bool value);
    public bool get_CreateBrokerPriority();
    public void set_CreateBrokerPriority(bool value);
    public bool get_CreateCertificate();
    public void set_CreateCertificate(bool value);
    public bool get_CreateColumnEncryptionKey();
    public void set_CreateColumnEncryptionKey(bool value);
    public bool get_CreateColumnMasterKey();
    public void set_CreateColumnMasterKey(bool value);
    public bool get_CreateContract();
    public void set_CreateContract(bool value);
    public bool get_CreateCredential();
    public void set_CreateCredential(bool value);
    public bool get_CreateCryptographicProvider();
    public void set_CreateCryptographicProvider(bool value);
    public bool get_CreateDatabase();
    public void set_CreateDatabase(bool value);
    public bool get_CreateDatabaseAuditSpecification();
    public void set_CreateDatabaseAuditSpecification(bool value);
    public bool get_CreateDatabaseEncryptionKey();
    public void set_CreateDatabaseEncryptionKey(bool value);
    public bool get_CreateDefault();
    public void set_CreateDefault(bool value);
    public bool get_CreateEndpoint();
    public void set_CreateEndpoint(bool value);
    public bool get_CreateEventNotification();
    public void set_CreateEventNotification(bool value);
    public bool get_CreateEventSession();
    public void set_CreateEventSession(bool value);
    public bool get_CreateExtendedProcedure();
    public void set_CreateExtendedProcedure(bool value);
    public bool get_CreateExtendedProperty();
    public void set_CreateExtendedProperty(bool value);
    public bool get_CreateExternalLanguage();
    public void set_CreateExternalLanguage(bool value);
    public bool get_CreateExternalLibrary();
    public void set_CreateExternalLibrary(bool value);
    public bool get_CreateExternalResourcePool();
    public void set_CreateExternalResourcePool(bool value);
    public bool get_CreateFulltextCatalog();
    public void set_CreateFulltextCatalog(bool value);
    public bool get_CreateFulltextIndex();
    public void set_CreateFulltextIndex(bool value);
    public bool get_CreateFulltextStoplist();
    public void set_CreateFulltextStoplist(bool value);
    public bool get_CreateFunction();
    public void set_CreateFunction(bool value);
    public bool get_CreateIndex();
    public void set_CreateIndex(bool value);
    public bool get_CreateLinkedServer();
    public void set_CreateLinkedServer(bool value);
    public bool get_CreateLinkedServerLogin();
    public void set_CreateLinkedServerLogin(bool value);
    public bool get_CreateLogin();
    public void set_CreateLogin(bool value);
    public bool get_CreateMasterKey();
    public void set_CreateMasterKey(bool value);
    public bool get_CreateMessage();
    public void set_CreateMessage(bool value);
    public bool get_CreateMessageType();
    public void set_CreateMessageType(bool value);
    public bool get_CreatePartitionFunction();
    public void set_CreatePartitionFunction(bool value);
    public bool get_CreatePartitionScheme();
    public void set_CreatePartitionScheme(bool value);
    public bool get_CreatePlanGuide();
    public void set_CreatePlanGuide(bool value);
    public bool get_CreateProcedure();
    public void set_CreateProcedure(bool value);
    public bool get_CreateQueue();
    public void set_CreateQueue(bool value);
    public bool get_CreateRemoteServer();
    public void set_CreateRemoteServer(bool value);
    public bool get_CreateRemoteServiceBinding();
    public void set_CreateRemoteServiceBinding(bool value);
    public bool get_CreateResourcePool();
    public void set_CreateResourcePool(bool value);
    public bool get_CreateRole();
    public void set_CreateRole(bool value);
    public bool get_CreateRoute();
    public void set_CreateRoute(bool value);
    public bool get_CreateRule();
    public void set_CreateRule(bool value);
    public bool get_CreateSchema();
    public void set_CreateSchema(bool value);
    public bool get_CreateSearchPropertyList();
    public void set_CreateSearchPropertyList(bool value);
    public bool get_CreateSecurityPolicy();
    public void set_CreateSecurityPolicy(bool value);
    public bool get_CreateSequence();
    public void set_CreateSequence(bool value);
    public bool get_CreateServerAudit();
    public void set_CreateServerAudit(bool value);
    public bool get_CreateServerAuditSpecification();
    public void set_CreateServerAuditSpecification(bool value);
    public bool get_CreateServerRole();
    public void set_CreateServerRole(bool value);
    public bool get_CreateService();
    public void set_CreateService(bool value);
    public bool get_CreateSpatialIndex();
    public void set_CreateSpatialIndex(bool value);
    public bool get_CreateStatistics();
    public void set_CreateStatistics(bool value);
    public bool get_CreateSymmetricKey();
    public void set_CreateSymmetricKey(bool value);
    public bool get_CreateSynonym();
    public void set_CreateSynonym(bool value);
    public bool get_CreateTable();
    public void set_CreateTable(bool value);
    public bool get_CreateTrigger();
    public void set_CreateTrigger(bool value);
    public bool get_CreateType();
    public void set_CreateType(bool value);
    public bool get_CreateUser();
    public void set_CreateUser(bool value);
    public bool get_CreateView();
    public void set_CreateView(bool value);
    public bool get_CreateWorkloadGroup();
    public void set_CreateWorkloadGroup(bool value);
    public bool get_CreateXmlIndex();
    public void set_CreateXmlIndex(bool value);
    public bool get_CreateXmlSchemaCollection();
    public void set_CreateXmlSchemaCollection(bool value);
    public bool get_DenyDatabase();
    public void set_DenyDatabase(bool value);
    public bool get_DenyServer();
    public void set_DenyServer(bool value);
    public bool get_DropApplicationRole();
    public void set_DropApplicationRole(bool value);
    public bool get_DropAssembly();
    public void set_DropAssembly(bool value);
    public bool get_DropAsymmetricKey();
    public void set_DropAsymmetricKey(bool value);
    public bool get_DropAudit();
    public void set_DropAudit(bool value);
    public bool get_DropAvailabilityGroup();
    public void set_DropAvailabilityGroup(bool value);
    public bool get_DropBrokerPriority();
    public void set_DropBrokerPriority(bool value);
    public bool get_DropCertificate();
    public void set_DropCertificate(bool value);
    public bool get_DropColumnEncryptionKey();
    public void set_DropColumnEncryptionKey(bool value);
    public bool get_DropColumnMasterKey();
    public void set_DropColumnMasterKey(bool value);
    public bool get_DropContract();
    public void set_DropContract(bool value);
    public bool get_DropCredential();
    public void set_DropCredential(bool value);
    public bool get_DropCryptographicProvider();
    public void set_DropCryptographicProvider(bool value);
    public bool get_DropDatabase();
    public void set_DropDatabase(bool value);
    public bool get_DropDatabaseAuditSpecification();
    public void set_DropDatabaseAuditSpecification(bool value);
    public bool get_DropDatabaseEncryptionKey();
    public void set_DropDatabaseEncryptionKey(bool value);
    public bool get_DropDefault();
    public void set_DropDefault(bool value);
    public bool get_DropEndpoint();
    public void set_DropEndpoint(bool value);
    public bool get_DropEventNotification();
    public void set_DropEventNotification(bool value);
    public bool get_DropEventSession();
    public void set_DropEventSession(bool value);
    public bool get_DropExtendedProcedure();
    public void set_DropExtendedProcedure(bool value);
    public bool get_DropExtendedProperty();
    public void set_DropExtendedProperty(bool value);
    public bool get_DropExternalLanguage();
    public void set_DropExternalLanguage(bool value);
    public bool get_DropExternalLibrary();
    public void set_DropExternalLibrary(bool value);
    public bool get_DropExternalResourcePool();
    public void set_DropExternalResourcePool(bool value);
    public bool get_DropFulltextCatalog();
    public void set_DropFulltextCatalog(bool value);
    public bool get_DropFulltextIndex();
    public void set_DropFulltextIndex(bool value);
    public bool get_DropFulltextStoplist();
    public void set_DropFulltextStoplist(bool value);
    public bool get_DropFunction();
    public void set_DropFunction(bool value);
    public bool get_DropIndex();
    public void set_DropIndex(bool value);
    public bool get_DropLinkedServer();
    public void set_DropLinkedServer(bool value);
    public bool get_DropLinkedServerLogin();
    public void set_DropLinkedServerLogin(bool value);
    public bool get_DropLogin();
    public void set_DropLogin(bool value);
    public bool get_DropMasterKey();
    public void set_DropMasterKey(bool value);
    public bool get_DropMessage();
    public void set_DropMessage(bool value);
    public bool get_DropMessageType();
    public void set_DropMessageType(bool value);
    public bool get_DropPartitionFunction();
    public void set_DropPartitionFunction(bool value);
    public bool get_DropPartitionScheme();
    public void set_DropPartitionScheme(bool value);
    public bool get_DropPlanGuide();
    public void set_DropPlanGuide(bool value);
    public bool get_DropProcedure();
    public void set_DropProcedure(bool value);
    public bool get_DropQueue();
    public void set_DropQueue(bool value);
    public bool get_DropRemoteServer();
    public void set_DropRemoteServer(bool value);
    public bool get_DropRemoteServiceBinding();
    public void set_DropRemoteServiceBinding(bool value);
    public bool get_DropResourcePool();
    public void set_DropResourcePool(bool value);
    public bool get_DropRole();
    public void set_DropRole(bool value);
    public bool get_DropRoleMember();
    public void set_DropRoleMember(bool value);
    public bool get_DropRoute();
    public void set_DropRoute(bool value);
    public bool get_DropRule();
    public void set_DropRule(bool value);
    public bool get_DropSchema();
    public void set_DropSchema(bool value);
    public bool get_DropSearchPropertyList();
    public void set_DropSearchPropertyList(bool value);
    public bool get_DropSecurityPolicy();
    public void set_DropSecurityPolicy(bool value);
    public bool get_DropSensitivityClassification();
    public void set_DropSensitivityClassification(bool value);
    public bool get_DropSequence();
    public void set_DropSequence(bool value);
    public bool get_DropServerAudit();
    public void set_DropServerAudit(bool value);
    public bool get_DropServerAuditSpecification();
    public void set_DropServerAuditSpecification(bool value);
    public bool get_DropServerRole();
    public void set_DropServerRole(bool value);
    public bool get_DropServerRoleMember();
    public void set_DropServerRoleMember(bool value);
    public bool get_DropService();
    public void set_DropService(bool value);
    public bool get_DropSignature();
    public void set_DropSignature(bool value);
    public bool get_DropSignatureSchemaObject();
    public void set_DropSignatureSchemaObject(bool value);
    public bool get_DropStatistics();
    public void set_DropStatistics(bool value);
    public bool get_DropSymmetricKey();
    public void set_DropSymmetricKey(bool value);
    public bool get_DropSynonym();
    public void set_DropSynonym(bool value);
    public bool get_DropTable();
    public void set_DropTable(bool value);
    public bool get_DropTrigger();
    public void set_DropTrigger(bool value);
    public bool get_DropType();
    public void set_DropType(bool value);
    public bool get_DropUser();
    public void set_DropUser(bool value);
    public bool get_DropView();
    public void set_DropView(bool value);
    public bool get_DropWorkloadGroup();
    public void set_DropWorkloadGroup(bool value);
    public bool get_DropXmlSchemaCollection();
    public void set_DropXmlSchemaCollection(bool value);
    public bool get_GrantDatabase();
    public void set_GrantDatabase(bool value);
    public bool get_GrantServer();
    public void set_GrantServer(bool value);
    public bool get_Logon();
    public void set_Logon(bool value);
    public bool get_Rename();
    public void set_Rename(bool value);
    public bool get_RevokeDatabase();
    public void set_RevokeDatabase(bool value);
    public bool get_RevokeServer();
    public void set_RevokeServer(bool value);
    public bool get_UnbindDefault();
    public void set_UnbindDefault(bool value);
    public bool get_UnbindRule();
    public void set_UnbindRule(bool value);
    public bool get_UpdateStatistics();
    public void set_UpdateStatistics(bool value);
    public bool get_DdlAuthorizationServerEventsEvents();
    public void set_DdlAuthorizationServerEventsEvents(bool value);
    public bool get_DdlAvailabilityGroupEventsEvents();
    public void set_DdlAvailabilityGroupEventsEvents(bool value);
    public bool get_DdlCredentialEventsEvents();
    public void set_DdlCredentialEventsEvents(bool value);
    public bool get_DdlCryptographicProviderEventsEvents();
    public void set_DdlCryptographicProviderEventsEvents(bool value);
    public bool get_DdlDatabaseEventsEvents();
    public void set_DdlDatabaseEventsEvents(bool value);
    public bool get_DdlEndpointEventsEvents();
    public void set_DdlEndpointEventsEvents(bool value);
    public bool get_DdlEventSessionEventsEvents();
    public void set_DdlEventSessionEventsEvents(bool value);
    public bool get_DdlExtendedProcedureEventsEvents();
    public void set_DdlExtendedProcedureEventsEvents(bool value);
    public bool get_DdlExternalResourcePoolEventsEvents();
    public void set_DdlExternalResourcePoolEventsEvents(bool value);
    public bool get_DdlGdrServerEventsEvents();
    public void set_DdlGdrServerEventsEvents(bool value);
    public bool get_DdlLinkedServerEventsEvents();
    public void set_DdlLinkedServerEventsEvents(bool value);
    public bool get_DdlLinkedServerLoginEventsEvents();
    public void set_DdlLinkedServerLoginEventsEvents(bool value);
    public bool get_DdlLoginEventsEvents();
    public void set_DdlLoginEventsEvents(bool value);
    public bool get_DdlMessageEventsEvents();
    public void set_DdlMessageEventsEvents(bool value);
    public bool get_DdlRemoteServerEventsEvents();
    public void set_DdlRemoteServerEventsEvents(bool value);
    public bool get_DdlResourceGovernorEventsEvents();
    public void set_DdlResourceGovernorEventsEvents(bool value);
    public bool get_DdlWorkloadGroupEvents();
    public void set_DdlWorkloadGroupEvents(bool value);
    public bool get_DdlResourcePoolEvents();
    public void set_DdlResourcePoolEvents(bool value);
    public bool get_DdlServerAuditEventsEvents();
    public void set_DdlServerAuditEventsEvents(bool value);
    public bool get_DdlServerAuditSpecificationEventsEvents();
    public void set_DdlServerAuditSpecificationEventsEvents(bool value);
    public bool get_DdlServerLevelEventsEvents();
    public void set_DdlServerLevelEventsEvents(bool value);
    public bool get_DdlServerSecurityEventsEvents();
    public void set_DdlServerSecurityEventsEvents(bool value);
    public bool get_DdlServiceMasterKeyEventsEvents();
    public void set_DdlServiceMasterKeyEventsEvents(bool value);
}
internal enum Microsoft.SqlServer.Management.Smo.ServerDdlTriggerEventValues : Enum {
    public int value__;
    public static ServerDdlTriggerEventValues AddRoleMember;
    public static ServerDdlTriggerEventValues AddSensitivityClassification;
    public static ServerDdlTriggerEventValues AddServerRoleMember;
    public static ServerDdlTriggerEventValues AddSignature;
    public static ServerDdlTriggerEventValues AddSignatureSchemaObject;
    public static ServerDdlTriggerEventValues AlterApplicationRole;
    public static ServerDdlTriggerEventValues AlterAssembly;
    public static ServerDdlTriggerEventValues AlterAsymmetricKey;
    public static ServerDdlTriggerEventValues AlterAudit;
    public static ServerDdlTriggerEventValues AlterAuthorizationDatabase;
    public static ServerDdlTriggerEventValues AlterAuthorizationServer;
    public static ServerDdlTriggerEventValues AlterAvailabilityGroup;
    public static ServerDdlTriggerEventValues AlterBrokerPriority;
    public static ServerDdlTriggerEventValues AlterCertificate;
    public static ServerDdlTriggerEventValues AlterColumnEncryptionKey;
    public static ServerDdlTriggerEventValues AlterCredential;
    public static ServerDdlTriggerEventValues AlterCryptographicProvider;
    public static ServerDdlTriggerEventValues AlterDatabase;
    public static ServerDdlTriggerEventValues AlterDatabaseAuditSpecification;
    public static ServerDdlTriggerEventValues AlterDatabaseEncryptionKey;
    public static ServerDdlTriggerEventValues AlterDatabaseScopedConfiguration;
    public static ServerDdlTriggerEventValues AlterEndpoint;
    public static ServerDdlTriggerEventValues AlterEventSession;
    public static ServerDdlTriggerEventValues AlterExtendedProperty;
    public static ServerDdlTriggerEventValues AlterExternalLanguage;
    public static ServerDdlTriggerEventValues AlterExternalLibrary;
    public static ServerDdlTriggerEventValues AlterExternalResourcePool;
    public static ServerDdlTriggerEventValues AlterFulltextCatalog;
    public static ServerDdlTriggerEventValues AlterFulltextIndex;
    public static ServerDdlTriggerEventValues AlterFulltextStoplist;
    public static ServerDdlTriggerEventValues AlterFunction;
    public static ServerDdlTriggerEventValues AlterIndex;
    public static ServerDdlTriggerEventValues AlterInstance;
    public static ServerDdlTriggerEventValues AlterLinkedServer;
    public static ServerDdlTriggerEventValues AlterLogin;
    public static ServerDdlTriggerEventValues AlterMasterKey;
    public static ServerDdlTriggerEventValues AlterMessage;
    public static ServerDdlTriggerEventValues AlterMessageType;
    public static ServerDdlTriggerEventValues AlterPartitionFunction;
    public static ServerDdlTriggerEventValues AlterPartitionScheme;
    public static ServerDdlTriggerEventValues AlterPlanGuide;
    public static ServerDdlTriggerEventValues AlterProcedure;
    public static ServerDdlTriggerEventValues AlterQueue;
    public static ServerDdlTriggerEventValues AlterRemoteServer;
    public static ServerDdlTriggerEventValues AlterRemoteServiceBinding;
    public static ServerDdlTriggerEventValues AlterResourceGovernorConfig;
    public static ServerDdlTriggerEventValues AlterResourcePool;
    public static ServerDdlTriggerEventValues AlterRole;
    public static ServerDdlTriggerEventValues AlterRoute;
    public static ServerDdlTriggerEventValues AlterSchema;
    public static ServerDdlTriggerEventValues AlterSearchPropertyList;
    public static ServerDdlTriggerEventValues AlterSecurityPolicy;
    public static ServerDdlTriggerEventValues AlterSequence;
    public static ServerDdlTriggerEventValues AlterServerAudit;
    public static ServerDdlTriggerEventValues AlterServerAuditSpecification;
    public static ServerDdlTriggerEventValues AlterServerRole;
    public static ServerDdlTriggerEventValues AlterService;
    public static ServerDdlTriggerEventValues AlterServiceMasterKey;
    public static ServerDdlTriggerEventValues AlterSymmetricKey;
    public static ServerDdlTriggerEventValues AlterTable;
    public static ServerDdlTriggerEventValues AlterTrigger;
    public static ServerDdlTriggerEventValues AlterUser;
    public static ServerDdlTriggerEventValues AlterView;
    public static ServerDdlTriggerEventValues AlterWorkloadGroup;
    public static ServerDdlTriggerEventValues AlterXmlSchemaCollection;
    public static ServerDdlTriggerEventValues BindDefault;
    public static ServerDdlTriggerEventValues BindRule;
    public static ServerDdlTriggerEventValues CreateApplicationRole;
    public static ServerDdlTriggerEventValues CreateAssembly;
    public static ServerDdlTriggerEventValues CreateAsymmetricKey;
    public static ServerDdlTriggerEventValues CreateAudit;
    public static ServerDdlTriggerEventValues CreateAvailabilityGroup;
    public static ServerDdlTriggerEventValues CreateBrokerPriority;
    public static ServerDdlTriggerEventValues CreateCertificate;
    public static ServerDdlTriggerEventValues CreateColumnEncryptionKey;
    public static ServerDdlTriggerEventValues CreateColumnMasterKey;
    public static ServerDdlTriggerEventValues CreateContract;
    public static ServerDdlTriggerEventValues CreateCredential;
    public static ServerDdlTriggerEventValues CreateCryptographicProvider;
    public static ServerDdlTriggerEventValues CreateDatabase;
    public static ServerDdlTriggerEventValues CreateDatabaseAuditSpecification;
    public static ServerDdlTriggerEventValues CreateDatabaseEncryptionKey;
    public static ServerDdlTriggerEventValues CreateDefault;
    public static ServerDdlTriggerEventValues CreateEndpoint;
    public static ServerDdlTriggerEventValues CreateEventNotification;
    public static ServerDdlTriggerEventValues CreateEventSession;
    public static ServerDdlTriggerEventValues CreateExtendedProcedure;
    public static ServerDdlTriggerEventValues CreateExtendedProperty;
    public static ServerDdlTriggerEventValues CreateExternalLanguage;
    public static ServerDdlTriggerEventValues CreateExternalLibrary;
    public static ServerDdlTriggerEventValues CreateExternalResourcePool;
    public static ServerDdlTriggerEventValues CreateFulltextCatalog;
    public static ServerDdlTriggerEventValues CreateFulltextIndex;
    public static ServerDdlTriggerEventValues CreateFulltextStoplist;
    public static ServerDdlTriggerEventValues CreateFunction;
    public static ServerDdlTriggerEventValues CreateIndex;
    public static ServerDdlTriggerEventValues CreateLinkedServer;
    public static ServerDdlTriggerEventValues CreateLinkedServerLogin;
    public static ServerDdlTriggerEventValues CreateLogin;
    public static ServerDdlTriggerEventValues CreateMasterKey;
    public static ServerDdlTriggerEventValues CreateMessage;
    public static ServerDdlTriggerEventValues CreateMessageType;
    public static ServerDdlTriggerEventValues CreatePartitionFunction;
    public static ServerDdlTriggerEventValues CreatePartitionScheme;
    public static ServerDdlTriggerEventValues CreatePlanGuide;
    public static ServerDdlTriggerEventValues CreateProcedure;
    public static ServerDdlTriggerEventValues CreateQueue;
    public static ServerDdlTriggerEventValues CreateRemoteServer;
    public static ServerDdlTriggerEventValues CreateRemoteServiceBinding;
    public static ServerDdlTriggerEventValues CreateResourcePool;
    public static ServerDdlTriggerEventValues CreateRole;
    public static ServerDdlTriggerEventValues CreateRoute;
    public static ServerDdlTriggerEventValues CreateRule;
    public static ServerDdlTriggerEventValues CreateSchema;
    public static ServerDdlTriggerEventValues CreateSearchPropertyList;
    public static ServerDdlTriggerEventValues CreateSecurityPolicy;
    public static ServerDdlTriggerEventValues CreateSequence;
    public static ServerDdlTriggerEventValues CreateServerAudit;
    public static ServerDdlTriggerEventValues CreateServerAuditSpecification;
    public static ServerDdlTriggerEventValues CreateServerRole;
    public static ServerDdlTriggerEventValues CreateService;
    public static ServerDdlTriggerEventValues CreateSpatialIndex;
    public static ServerDdlTriggerEventValues CreateStatistics;
    public static ServerDdlTriggerEventValues CreateSymmetricKey;
    public static ServerDdlTriggerEventValues CreateSynonym;
    public static ServerDdlTriggerEventValues CreateTable;
    public static ServerDdlTriggerEventValues CreateTrigger;
    public static ServerDdlTriggerEventValues CreateType;
    public static ServerDdlTriggerEventValues CreateUser;
    public static ServerDdlTriggerEventValues CreateView;
    public static ServerDdlTriggerEventValues CreateWorkloadGroup;
    public static ServerDdlTriggerEventValues CreateXmlIndex;
    public static ServerDdlTriggerEventValues CreateXmlSchemaCollection;
    public static ServerDdlTriggerEventValues DenyDatabase;
    public static ServerDdlTriggerEventValues DenyServer;
    public static ServerDdlTriggerEventValues DropApplicationRole;
    public static ServerDdlTriggerEventValues DropAssembly;
    public static ServerDdlTriggerEventValues DropAsymmetricKey;
    public static ServerDdlTriggerEventValues DropAudit;
    public static ServerDdlTriggerEventValues DropAvailabilityGroup;
    public static ServerDdlTriggerEventValues DropBrokerPriority;
    public static ServerDdlTriggerEventValues DropCertificate;
    public static ServerDdlTriggerEventValues DropColumnEncryptionKey;
    public static ServerDdlTriggerEventValues DropColumnMasterKey;
    public static ServerDdlTriggerEventValues DropContract;
    public static ServerDdlTriggerEventValues DropCredential;
    public static ServerDdlTriggerEventValues DropCryptographicProvider;
    public static ServerDdlTriggerEventValues DropDatabase;
    public static ServerDdlTriggerEventValues DropDatabaseAuditSpecification;
    public static ServerDdlTriggerEventValues DropDatabaseEncryptionKey;
    public static ServerDdlTriggerEventValues DropDefault;
    public static ServerDdlTriggerEventValues DropEndpoint;
    public static ServerDdlTriggerEventValues DropEventNotification;
    public static ServerDdlTriggerEventValues DropEventSession;
    public static ServerDdlTriggerEventValues DropExtendedProcedure;
    public static ServerDdlTriggerEventValues DropExtendedProperty;
    public static ServerDdlTriggerEventValues DropExternalLanguage;
    public static ServerDdlTriggerEventValues DropExternalLibrary;
    public static ServerDdlTriggerEventValues DropExternalResourcePool;
    public static ServerDdlTriggerEventValues DropFulltextCatalog;
    public static ServerDdlTriggerEventValues DropFulltextIndex;
    public static ServerDdlTriggerEventValues DropFulltextStoplist;
    public static ServerDdlTriggerEventValues DropFunction;
    public static ServerDdlTriggerEventValues DropIndex;
    public static ServerDdlTriggerEventValues DropLinkedServer;
    public static ServerDdlTriggerEventValues DropLinkedServerLogin;
    public static ServerDdlTriggerEventValues DropLogin;
    public static ServerDdlTriggerEventValues DropMasterKey;
    public static ServerDdlTriggerEventValues DropMessage;
    public static ServerDdlTriggerEventValues DropMessageType;
    public static ServerDdlTriggerEventValues DropPartitionFunction;
    public static ServerDdlTriggerEventValues DropPartitionScheme;
    public static ServerDdlTriggerEventValues DropPlanGuide;
    public static ServerDdlTriggerEventValues DropProcedure;
    public static ServerDdlTriggerEventValues DropQueue;
    public static ServerDdlTriggerEventValues DropRemoteServer;
    public static ServerDdlTriggerEventValues DropRemoteServiceBinding;
    public static ServerDdlTriggerEventValues DropResourcePool;
    public static ServerDdlTriggerEventValues DropRole;
    public static ServerDdlTriggerEventValues DropRoleMember;
    public static ServerDdlTriggerEventValues DropRoute;
    public static ServerDdlTriggerEventValues DropRule;
    public static ServerDdlTriggerEventValues DropSchema;
    public static ServerDdlTriggerEventValues DropSearchPropertyList;
    public static ServerDdlTriggerEventValues DropSecurityPolicy;
    public static ServerDdlTriggerEventValues DropSensitivityClassification;
    public static ServerDdlTriggerEventValues DropSequence;
    public static ServerDdlTriggerEventValues DropServerAudit;
    public static ServerDdlTriggerEventValues DropServerAuditSpecification;
    public static ServerDdlTriggerEventValues DropServerRole;
    public static ServerDdlTriggerEventValues DropServerRoleMember;
    public static ServerDdlTriggerEventValues DropService;
    public static ServerDdlTriggerEventValues DropSignature;
    public static ServerDdlTriggerEventValues DropSignatureSchemaObject;
    public static ServerDdlTriggerEventValues DropStatistics;
    public static ServerDdlTriggerEventValues DropSymmetricKey;
    public static ServerDdlTriggerEventValues DropSynonym;
    public static ServerDdlTriggerEventValues DropTable;
    public static ServerDdlTriggerEventValues DropTrigger;
    public static ServerDdlTriggerEventValues DropType;
    public static ServerDdlTriggerEventValues DropUser;
    public static ServerDdlTriggerEventValues DropView;
    public static ServerDdlTriggerEventValues DropWorkloadGroup;
    public static ServerDdlTriggerEventValues DropXmlSchemaCollection;
    public static ServerDdlTriggerEventValues GrantDatabase;
    public static ServerDdlTriggerEventValues GrantServer;
    public static ServerDdlTriggerEventValues Logon;
    public static ServerDdlTriggerEventValues Rename;
    public static ServerDdlTriggerEventValues RevokeDatabase;
    public static ServerDdlTriggerEventValues RevokeServer;
    public static ServerDdlTriggerEventValues UnbindDefault;
    public static ServerDdlTriggerEventValues UnbindRule;
    public static ServerDdlTriggerEventValues UpdateStatistics;
}
public enum Microsoft.SqlServer.Management.Smo.ServerDdlTriggerExecutionContext : Enum {
    public int value__;
    public static ServerDdlTriggerExecutionContext Caller;
    public static ServerDdlTriggerExecutionContext ExecuteAsLogin;
    public static ServerDdlTriggerExecutionContext Self;
}
public enum Microsoft.SqlServer.Management.Smo.ServerLoginMode : Enum {
    public int value__;
    public static ServerLoginMode Normal;
    public static ServerLoginMode Integrated;
    public static ServerLoginMode Mixed;
    public static ServerLoginMode Unknown;
}
public enum Microsoft.SqlServer.Management.Smo.ServerMirroringRole : Enum {
    public int value__;
    public static ServerMirroringRole None;
    public static ServerMirroringRole Partner;
    public static ServerMirroringRole Witness;
    public static ServerMirroringRole All;
}
public enum Microsoft.SqlServer.Management.Smo.ServerPermissionSetValue : Enum {
    public int value__;
    [PermissionTypeAttribute("ADBO")]
[PermissionNameAttribute("ADMINISTER BULK OPERATIONS")]
public static ServerPermissionSetValue AdministerBulkOperations;
    [PermissionTypeAttribute("ALCD")]
[PermissionNameAttribute("ALTER ANY CREDENTIAL")]
public static ServerPermissionSetValue AlterAnyCredential;
    [PermissionTypeAttribute("ALCO")]
[PermissionNameAttribute("ALTER ANY CONNECTION")]
public static ServerPermissionSetValue AlterAnyConnection;
    [PermissionTypeAttribute("ALDB")]
[PermissionNameAttribute("ALTER ANY DATABASE")]
public static ServerPermissionSetValue AlterAnyDatabase;
    [PermissionTypeAttribute("ALES")]
[PermissionNameAttribute("ALTER ANY EVENT NOTIFICATION")]
public static ServerPermissionSetValue AlterAnyEventNotification;
    [PermissionTypeAttribute("ALHE")]
[PermissionNameAttribute("ALTER ANY ENDPOINT")]
public static ServerPermissionSetValue AlterAnyEndpoint;
    [PermissionTypeAttribute("ALLG")]
[PermissionNameAttribute("ALTER ANY LOGIN")]
public static ServerPermissionSetValue AlterAnyLogin;
    [PermissionTypeAttribute("ALLS")]
[PermissionNameAttribute("ALTER ANY LINKED SERVER")]
public static ServerPermissionSetValue AlterAnyLinkedServer;
    [PermissionTypeAttribute("ALRS")]
[PermissionNameAttribute("ALTER RESOURCES")]
public static ServerPermissionSetValue AlterResources;
    [PermissionTypeAttribute("ALSS")]
[PermissionNameAttribute("ALTER SERVER STATE")]
public static ServerPermissionSetValue AlterServerState;
    [PermissionTypeAttribute("ALST")]
[PermissionNameAttribute("ALTER SETTINGS")]
public static ServerPermissionSetValue AlterSettings;
    [PermissionTypeAttribute("ALTR")]
[PermissionNameAttribute("ALTER TRACE")]
public static ServerPermissionSetValue AlterTrace;
    [PermissionTypeAttribute("AUTH")]
[PermissionNameAttribute("AUTHENTICATE SERVER")]
public static ServerPermissionSetValue AuthenticateServer;
    [PermissionTypeAttribute("CL")]
[PermissionNameAttribute("CONTROL SERVER")]
public static ServerPermissionSetValue ControlServer;
    [PermissionTypeAttribute("COSQ")]
[PermissionNameAttribute("CONNECT SQL")]
public static ServerPermissionSetValue ConnectSql;
    [PermissionTypeAttribute("CRDB")]
[PermissionNameAttribute("CREATE ANY DATABASE")]
public static ServerPermissionSetValue CreateAnyDatabase;
    [PermissionTypeAttribute("CRDE")]
[PermissionNameAttribute("CREATE DDL EVENT NOTIFICATION")]
public static ServerPermissionSetValue CreateDdlEventNotification;
    [PermissionTypeAttribute("CRHE")]
[PermissionNameAttribute("CREATE ENDPOINT")]
public static ServerPermissionSetValue CreateEndpoint;
    [PermissionTypeAttribute("CRTE")]
[PermissionNameAttribute("CREATE TRACE EVENT NOTIFICATION")]
public static ServerPermissionSetValue CreateTraceEventNotification;
    [PermissionTypeAttribute("SHDN")]
[PermissionNameAttribute("SHUTDOWN")]
public static ServerPermissionSetValue Shutdown;
    [PermissionTypeAttribute("VWAD")]
[PermissionNameAttribute("VIEW ANY DEFINITION")]
public static ServerPermissionSetValue ViewAnyDefinition;
    [PermissionTypeAttribute("VWDB")]
[PermissionNameAttribute("VIEW ANY DATABASE")]
public static ServerPermissionSetValue ViewAnyDatabase;
    [PermissionTypeAttribute("VWSS")]
[PermissionNameAttribute("VIEW SERVER STATE")]
public static ServerPermissionSetValue ViewServerState;
    [PermissionTypeAttribute("XA")]
[PermissionNameAttribute("EXTERNAL ACCESS ASSEMBLY")]
public static ServerPermissionSetValue ExternalAccessAssembly;
    [PermissionTypeAttribute("XU")]
[PermissionNameAttribute("UNSAFE ASSEMBLY")]
public static ServerPermissionSetValue UnsafeAssembly;
    [PermissionTypeAttribute("ALAA")]
[PermissionNameAttribute("ALTER ANY SERVER AUDIT")]
public static ServerPermissionSetValue AlterAnyServerAudit;
    [PermissionTypeAttribute("ALSR")]
[PermissionNameAttribute("ALTER ANY SERVER ROLE")]
public static ServerPermissionSetValue AlterAnyServerRole;
    [PermissionTypeAttribute("CRSR")]
[PermissionNameAttribute("CREATE SERVER ROLE")]
public static ServerPermissionSetValue CreateServerRole;
    [PermissionTypeAttribute("ALAG")]
[PermissionNameAttribute("ALTER ANY AVAILABILITY GROUP")]
public static ServerPermissionSetValue AlterAnyAvailabilityGroup;
    [PermissionTypeAttribute("CRAC")]
[PermissionNameAttribute("CREATE AVAILABILITY GROUP")]
public static ServerPermissionSetValue CreateAvailabilityGroup;
    [PermissionTypeAttribute("AAES")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION")]
public static ServerPermissionSetValue AlterAnyEventSession;
    [PermissionTypeAttribute("SUS")]
[PermissionNameAttribute("SELECT ALL USER SECURABLES")]
public static ServerPermissionSetValue SelectAllUserSecurables;
    [PermissionTypeAttribute("CADB")]
[PermissionNameAttribute("CONNECT ANY DATABASE")]
public static ServerPermissionSetValue ConnectAnyDatabase;
    [PermissionTypeAttribute("IAL")]
[PermissionNameAttribute("IMPERSONATE ANY LOGIN")]
public static ServerPermissionSetValue ImpersonateAnyLogin;
    [PermissionTypeAttribute("AEDS")]
[PermissionNameAttribute("ALTER ANY EXTERNAL DATA SOURCE")]
public static ServerPermissionSetValue AlterAnyExternalDataSource;
    [PermissionTypeAttribute("AEFF")]
[PermissionNameAttribute("ALTER ANY EXTERNAL FILE FORMAT")]
public static ServerPermissionSetValue AlterAnyExternalFileFormat;
    [PermissionTypeAttribute("CRLG")]
[PermissionNameAttribute("CREATE LOGIN")]
public static ServerPermissionSetValue CreateLogin;
    [PermissionTypeAttribute("VAS")]
[PermissionNameAttribute("VIEW ANY SECURITY DEFINITION")]
public static ServerPermissionSetValue ViewAnySecurityDefinition;
    [PermissionTypeAttribute("VSS")]
[PermissionNameAttribute("VIEW SERVER SECURITY STATE")]
public static ServerPermissionSetValue ViewServerSecurityState;
    [PermissionTypeAttribute("VSP")]
[PermissionNameAttribute("VIEW SERVER PERFORMANCE STATE")]
public static ServerPermissionSetValue ViewServerPerformanceState;
    [PermissionTypeAttribute("VACD")]
[PermissionNameAttribute("VIEW ANY CRYPTOGRAPHICALLY SECURED DEFINITION")]
public static ServerPermissionSetValue ViewAnyCryptographicallySecuredDefinition;
    [PermissionTypeAttribute("VAP")]
[PermissionNameAttribute("VIEW ANY PERFORMANCE DEFINITION")]
public static ServerPermissionSetValue ViewAnyPerformanceDefinition;
    [PermissionTypeAttribute("CRES")]
[PermissionNameAttribute("CREATE ANY EVENT SESSION")]
public static ServerPermissionSetValue CreateAnyEventSession;
    [PermissionTypeAttribute("DRES")]
[PermissionNameAttribute("DROP ANY EVENT SESSION")]
public static ServerPermissionSetValue DropAnyEventSession;
    [PermissionTypeAttribute("LESO")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION OPTION")]
public static ServerPermissionSetValue AlterAnyEventSessionOption;
    [PermissionTypeAttribute("LSAE")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION ADD EVENT")]
public static ServerPermissionSetValue AlterAnyEventSessionAddEvent;
    [PermissionTypeAttribute("LSDE")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION DROP EVENT")]
public static ServerPermissionSetValue AlterAnyEventSessionDropEvent;
    [PermissionTypeAttribute("EES")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION ENABLE")]
public static ServerPermissionSetValue AlterAnyEventSessionEnable;
    [PermissionTypeAttribute("DES")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION DISABLE")]
public static ServerPermissionSetValue AlterAnyEventSessionDisable;
    [PermissionTypeAttribute("LSAT")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION ADD TARGET")]
public static ServerPermissionSetValue AlterAnyEventSessionAddTarget;
    [PermissionTypeAttribute("LSDT")]
[PermissionNameAttribute("ALTER ANY EVENT SESSION DROP TARGET")]
public static ServerPermissionSetValue AlterAnyEventSessionDropTarget;
    [PermissionTypeAttribute("VEL")]
[PermissionNameAttribute("VIEW ANY ERROR LOG")]
public static ServerPermissionSetValue ViewAnyErrorLog;
    [PermissionTypeAttribute("VSSA")]
[PermissionNameAttribute("VIEW SERVER SECURITY AUDIT")]
public static ServerPermissionSetValue ViewServerSecurityAudit;
}
public enum Microsoft.SqlServer.Management.Smo.SnapshotIsolationState : Enum {
    public int value__;
    public static SnapshotIsolationState Disabled;
    public static SnapshotIsolationState Enabled;
    public static SnapshotIsolationState PendingOff;
    public static SnapshotIsolationState PendingOn;
}
public enum Microsoft.SqlServer.Management.Smo.SpatialGeoLevelSize : Enum {
    public int value__;
    public static SpatialGeoLevelSize None;
    public static SpatialGeoLevelSize Low;
    public static SpatialGeoLevelSize Medium;
    public static SpatialGeoLevelSize High;
}
public enum Microsoft.SqlServer.Management.Smo.SpatialIndexType : Enum {
    public int value__;
    public static SpatialIndexType None;
    public static SpatialIndexType GeometryGrid;
    public static SpatialIndexType GeographyGrid;
    public static SpatialIndexType GeometryAutoGrid;
    public static SpatialIndexType GeographyAutoGrid;
}
[ComVisibleAttribute("False")]
internal abstract class Microsoft.SqlServer.Management.Smo.SqlConditionedStatement : ConditionedSql {
    private string m_sql;
    protected SqlConditionedStatement(XmlReadConditionedStatement xrcs);
    public string GetLocalSql(SqlObjectBase obj);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlConditionedStatementFailCondition : SqlConditionedStatement {
    public SqlConditionedStatementFailCondition(XmlReadConditionedStatement xrcs);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementFailCondition xrcs);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlConditionedStatementPostfix : SqlConditionedStatement {
    public SqlConditionedStatementPostfix(XmlReadConditionedStatement xrcs);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementPostfix xrcs);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlConditionedStatementPrefix : SqlConditionedStatement {
    public SqlConditionedStatementPrefix(XmlReadConditionedStatement xrcs);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementPrefix xrcs);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
internal class Microsoft.SqlServer.Management.Smo.SqlConditionedStatementWhereClause : SqlConditionedStatement {
    public SqlConditionedStatementWhereClause(XmlReadSpecialQuery xrcs);
    public static void AddAll(ConditionedSqlList list, XmlReadSpecialQuery xrcs);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ExtensionAttribute]
internal static class Microsoft.SqlServer.Management.Smo.SqlEnum.SqlEnumNetCoreExtension : object {
    [ExtensionAttribute]
public static bool IsUriSchemeHttps(Uri uri);
    [ExtensionAttribute]
public static bool GetIsPrimitive(Type type);
    [ExtensionAttribute]
public static bool GetIsEnum(Type type);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type, Type c);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static Type GetInterface(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type);
    public static object CreateInstance(Assembly assembly, string typeName, bool ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes);
    public static Object[] GetCustomAttributes(Assembly element, bool inherit);
    public static Object[] GetCustomAttributes(Type element, Type attributeType, bool inherit);
    public static Object[] GetCustomAttributes(MemberInfo element, Type attributeType, bool inherit);
    public static Object[] GetCustomAttributes(MemberInfo element, bool inherit);
    public static Object[] GetCustomAttributes(Type element, bool inherit);
    [ExtensionAttribute]
public static int Compare(string strA, string strB, bool ignoreCase, CultureInfo culture);
    [ExtensionAttribute]
public static Delegate CreateDelegate(MethodInfo methodInfo, Type type);
    [ExtensionAttribute]
public static Assembly GetAssembly(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetMember(Type type, string name);
}
[CompilerGeneratedAttribute]
internal class Microsoft.SqlServer.Management.Smo.SqlEnum.StringSqlEnumerator : object {
    public static CultureInfo Culture { get; public set; }
    public static string ObjectNotSupportedOnSqlDw { get; }
    public static string ObjectSupportedOnlyOnSqlEdge { get; }
    public static string InvalidAttributeValue { get; }
    public static string NullVersionOnLoadingCfgFile { get; }
    public static string EnumObjectTagNotFound { get; }
    public static string InvalidConnectionType { get; }
    public static string OnlyPathOrFullName { get; }
    public static string FileNameMustHavePath { get; }
    public static string DatabaseNameMustBeSpecified { get; }
    public static string UnknownOperator { get; }
    public static string TooManyDbLevels { get; }
    public static string InvalidConfigurationFile { get; }
    public static string NotDbObject { get; }
    public static string NotSingleDb { get; }
    public static string NoClassNamePostProcess { get; }
    public static string SqlServer90Name { get; }
    public static string SqlServer80Name { get; }
    public static string SmoSQLCLRUnAvailable { get; }
    public static string Executing { get; }
    public static string WaitingForWorkerThread { get; }
    public static string BetweenRetries { get; }
    public static string Idle { get; }
    public static string Suspended { get; }
    public static string WaitingForStepToFinish { get; }
    public static string PerformingCompletionAction { get; }
    public static string Unknown { get; }
    public static string Queued { get; }
    public static string ctNone { get; }
    public static string ctPartial { get; }
    public static string rmFull { get; }
    public static string rmBulkLogged { get; }
    public static string rmSimple { get; }
    public static string msNone { get; }
    public static string msSuspended { get; }
    public static string msDisconnected { get; }
    public static string msSynchronizing { get; }
    public static string msPendingFailover { get; }
    public static string msSynchronized { get; }
    public static string agshNoneSynchronizing { get; }
    public static string agshPartiallySynchronizing { get; }
    public static string agshAllSynchronizing { get; }
    public static string agshAllSynchronized { get; }
    public static string arosPendingFailover { get; }
    public static string arosPending { get; }
    public static string arosOnline { get; }
    public static string arosOffline { get; }
    public static string arosFailed { get; }
    public static string arosFailedNoQuorum { get; }
    public static string arrhInProgress { get; }
    public static string arrhOnline { get; }
    public static string arshNotSynchronizing { get; }
    public static string arshSynchronizing { get; }
    public static string arshSynchronized { get; }
    public static string arrUninitialized { get; }
    public static string arrResolving { get; }
    public static string arrSecondary { get; }
    public static string arrPrimary { get; }
    public static string arcsDisconnected { get; }
    public static string arcsConnected { get; }
    public static string hmsPendingCommunication { get; }
    public static string hmsRunning { get; }
    public static string hmsFailed { get; }
    public static string cqtNodeMajority { get; }
    public static string cqtNodeAndDiskMajority { get; }
    public static string cqtNodeAndFileshareMajority { get; }
    public static string cqtDiskOnly { get; }
    public static string cqtNotApplicable { get; }
    public static string cqtCloudWitness { get; }
    public static string cqsUnknownQuorumState { get; }
    public static string cqsNormalQuorum { get; }
    public static string cqsForcedQuorum { get; }
    public static string cqsNotApplicable { get; }
    public static string cmtNode { get; }
    public static string cmtDiskWitness { get; }
    public static string cmtFileshareWitness { get; }
    public static string cmtCloudWitness { get; }
    public static string cmsOffline { get; }
    public static string cmsPartiallyOnline { get; }
    public static string cmsOnline { get; }
    public static string cmsUnknown { get; }
    public static string replicaReadModeNoConnections { get; }
    public static string replicaReadModeReadIntentConnectionsOnly { get; }
    public static string replicaReadModeAllConnections { get; }
    public static string cmprReadWriteConnections { get; }
    public static string cmprAllConnections { get; }
    public static string cmsrNoConnections { get; }
    public static string cmsrReadIntentConnectionsOnly { get; }
    public static string cmsrAllConnections { get; }
    public static string seedingModeAutomatic { get; }
    public static string seedingModeManual { get; }
    public static string aramSynchronousCommit { get; }
    public static string aramAsynchronousCommit { get; }
    public static string aramConfigurationOnly { get; }
    public static string arfmAutomatic { get; }
    public static string arfmManual { get; }
    public static string arfmExternal { get; }
    public static string arjsNotJoined { get; }
    public static string arjsJoinedStandaloneInstance { get; }
    public static string arjsJoinedFailoverClusterInstance { get; }
    public static string adssNotSynchronizing { get; }
    public static string adssSynchronizing { get; }
    public static string adssSynchronized { get; }
    public static string adssReverting { get; }
    public static string adssInitializing { get; }
    public static string drsrSuspendFromUser { get; }
    public static string drsrSuspendFromPartner { get; }
    public static string drsrSuspendFromRedo { get; }
    public static string drsrSuspendFromApply { get; }
    public static string drsrSuspendFromCapture { get; }
    public static string drsrSuspendFromRestart { get; }
    public static string drsrSuspendFromUndo { get; }
    public static string drsrNotApplicable { get; }
    public static string agabpPrimary { get; }
    public static string agabpSecondaryOnly { get; }
    public static string agabpSecondary { get; }
    public static string agabpNone { get; }
    public static string agfcOnServerDown { get; }
    public static string agfcOnServerUnresponsive { get; }
    public static string agfcOnCriticalServerErrors { get; }
    public static string agfcOnModerateServerErrors { get; }
    public static string agfcOnAnyQualifiedFailureCondition { get; }
    public static string aglipOffline { get; }
    public static string aglipOnline { get; }
    public static string aglipOnlinePending { get; }
    public static string agliFailure { get; }
    public static string agliUnknown { get; }
    public static string agctExternal { get; }
    public static string agctNone { get; }
    public static string agctWsfc { get; }
    public static string fgtRowsFileGroup { get; }
    public static string fgtFileStreamDataFileGroup { get; }
    public static string fgtMemoryOptimizedDataFileGroup { get; }
    public static string securityPredicateTypeFilter { get; }
    public static string securityPredicateTypeBlock { get; }
    public static string securityPredicateOperationAll { get; }
    public static string securityPredicateOperationAfterInsert { get; }
    public static string securityPredicateOperationAfterUpdate { get; }
    public static string securityPredicateOperationBeforeUpdate { get; }
    public static string securityPredicateOperationBeforeDelete { get; }
    public static string Clustered { get; }
    public static string NonClustered { get; }
    public static string PrimaryXml { get; }
    public static string SecondaryXml { get; }
    public static string Spatial { get; }
    public static string NonClusteredColumnStore { get; }
    public static string NonClusteredHash { get; }
    public static string SelectiveXml { get; }
    public static string SecondarySelectiveXml { get; }
    public static string ClusteredColumnStore { get; }
    public static string Heap { get; }
    public static string TransactSql { get; }
    public static string ActiveScripting { get; }
    public static string CmdExec { get; }
    public static string AnalysisCommand { get; }
    public static string AnalysisQuery { get; }
    public static string ReplDistribution { get; }
    public static string ReplMerge { get; }
    public static string ReplQueueReader { get; }
    public static string ReplSnapshot { get; }
    public static string ReplLogReader { get; }
    public static string SSIS { get; }
    public static string PowerShell { get; }
    public static string dbCatalogCollationDatabaseDefault { get; }
    public static string dbCatalogCollationContained { get; }
    public static string dbCatalogCollationSQL_Latin1_General_CP1_CI_AS { get; }
    public static string UnknownDest { get; }
    public static string FileDest { get; }
    public static string SecurityLogDest { get; }
    public static string ApplicationLogDest { get; }
    public static string UrlDest { get; }
    public static string ExternalMonitorDest { get; }
    public static string OnFailureActionContinue { get; }
    public static string OnFailureActionShutdown { get; }
    public static string OnFailureActionFail { get; }
    public static string Off { get; }
    public static string On { get; }
    public static string ReadOnly { get; }
    public static string ReadWrite { get; }
    public static string Error { get; }
    public static string All { get; }
    public static string Auto { get; }
    public static string None { get; }
    public static string Custom { get; }
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ObjectNotSupportedOnSqlDw();
    public static string get_ObjectSupportedOnlyOnSqlEdge();
    public static string get_InvalidAttributeValue();
    public static string get_NullVersionOnLoadingCfgFile();
    public static string get_EnumObjectTagNotFound();
    public static string get_InvalidConnectionType();
    public static string get_OnlyPathOrFullName();
    public static string get_FileNameMustHavePath();
    public static string get_DatabaseNameMustBeSpecified();
    public static string get_UnknownOperator();
    public static string get_TooManyDbLevels();
    public static string get_InvalidConfigurationFile();
    public static string get_NotDbObject();
    public static string get_NotSingleDb();
    public static string get_NoClassNamePostProcess();
    public static string get_SqlServer90Name();
    public static string get_SqlServer80Name();
    public static string get_SmoSQLCLRUnAvailable();
    public static string get_Executing();
    public static string get_WaitingForWorkerThread();
    public static string get_BetweenRetries();
    public static string get_Idle();
    public static string get_Suspended();
    public static string get_WaitingForStepToFinish();
    public static string get_PerformingCompletionAction();
    public static string get_Unknown();
    public static string get_Queued();
    public static string get_ctNone();
    public static string get_ctPartial();
    public static string get_rmFull();
    public static string get_rmBulkLogged();
    public static string get_rmSimple();
    public static string get_msNone();
    public static string get_msSuspended();
    public static string get_msDisconnected();
    public static string get_msSynchronizing();
    public static string get_msPendingFailover();
    public static string get_msSynchronized();
    public static string get_agshNoneSynchronizing();
    public static string get_agshPartiallySynchronizing();
    public static string get_agshAllSynchronizing();
    public static string get_agshAllSynchronized();
    public static string get_arosPendingFailover();
    public static string get_arosPending();
    public static string get_arosOnline();
    public static string get_arosOffline();
    public static string get_arosFailed();
    public static string get_arosFailedNoQuorum();
    public static string get_arrhInProgress();
    public static string get_arrhOnline();
    public static string get_arshNotSynchronizing();
    public static string get_arshSynchronizing();
    public static string get_arshSynchronized();
    public static string get_arrUninitialized();
    public static string get_arrResolving();
    public static string get_arrSecondary();
    public static string get_arrPrimary();
    public static string get_arcsDisconnected();
    public static string get_arcsConnected();
    public static string get_hmsPendingCommunication();
    public static string get_hmsRunning();
    public static string get_hmsFailed();
    public static string get_cqtNodeMajority();
    public static string get_cqtNodeAndDiskMajority();
    public static string get_cqtNodeAndFileshareMajority();
    public static string get_cqtDiskOnly();
    public static string get_cqtNotApplicable();
    public static string get_cqtCloudWitness();
    public static string get_cqsUnknownQuorumState();
    public static string get_cqsNormalQuorum();
    public static string get_cqsForcedQuorum();
    public static string get_cqsNotApplicable();
    public static string get_cmtNode();
    public static string get_cmtDiskWitness();
    public static string get_cmtFileshareWitness();
    public static string get_cmtCloudWitness();
    public static string get_cmsOffline();
    public static string get_cmsPartiallyOnline();
    public static string get_cmsOnline();
    public static string get_cmsUnknown();
    public static string get_replicaReadModeNoConnections();
    public static string get_replicaReadModeReadIntentConnectionsOnly();
    public static string get_replicaReadModeAllConnections();
    public static string get_cmprReadWriteConnections();
    public static string get_cmprAllConnections();
    public static string get_cmsrNoConnections();
    public static string get_cmsrReadIntentConnectionsOnly();
    public static string get_cmsrAllConnections();
    public static string get_seedingModeAutomatic();
    public static string get_seedingModeManual();
    public static string get_aramSynchronousCommit();
    public static string get_aramAsynchronousCommit();
    public static string get_aramConfigurationOnly();
    public static string get_arfmAutomatic();
    public static string get_arfmManual();
    public static string get_arfmExternal();
    public static string get_arjsNotJoined();
    public static string get_arjsJoinedStandaloneInstance();
    public static string get_arjsJoinedFailoverClusterInstance();
    public static string get_adssNotSynchronizing();
    public static string get_adssSynchronizing();
    public static string get_adssSynchronized();
    public static string get_adssReverting();
    public static string get_adssInitializing();
    public static string get_drsrSuspendFromUser();
    public static string get_drsrSuspendFromPartner();
    public static string get_drsrSuspendFromRedo();
    public static string get_drsrSuspendFromApply();
    public static string get_drsrSuspendFromCapture();
    public static string get_drsrSuspendFromRestart();
    public static string get_drsrSuspendFromUndo();
    public static string get_drsrNotApplicable();
    public static string get_agabpPrimary();
    public static string get_agabpSecondaryOnly();
    public static string get_agabpSecondary();
    public static string get_agabpNone();
    public static string get_agfcOnServerDown();
    public static string get_agfcOnServerUnresponsive();
    public static string get_agfcOnCriticalServerErrors();
    public static string get_agfcOnModerateServerErrors();
    public static string get_agfcOnAnyQualifiedFailureCondition();
    public static string get_aglipOffline();
    public static string get_aglipOnline();
    public static string get_aglipOnlinePending();
    public static string get_agliFailure();
    public static string get_agliUnknown();
    public static string get_agctExternal();
    public static string get_agctNone();
    public static string get_agctWsfc();
    public static string get_fgtRowsFileGroup();
    public static string get_fgtFileStreamDataFileGroup();
    public static string get_fgtMemoryOptimizedDataFileGroup();
    public static string get_securityPredicateTypeFilter();
    public static string get_securityPredicateTypeBlock();
    public static string get_securityPredicateOperationAll();
    public static string get_securityPredicateOperationAfterInsert();
    public static string get_securityPredicateOperationAfterUpdate();
    public static string get_securityPredicateOperationBeforeUpdate();
    public static string get_securityPredicateOperationBeforeDelete();
    public static string get_Clustered();
    public static string get_NonClustered();
    public static string get_PrimaryXml();
    public static string get_SecondaryXml();
    public static string get_Spatial();
    public static string get_NonClusteredColumnStore();
    public static string get_NonClusteredHash();
    public static string get_SelectiveXml();
    public static string get_SecondarySelectiveXml();
    public static string get_ClusteredColumnStore();
    public static string get_Heap();
    public static string get_TransactSql();
    public static string get_ActiveScripting();
    public static string get_CmdExec();
    public static string get_AnalysisCommand();
    public static string get_AnalysisQuery();
    public static string get_ReplDistribution();
    public static string get_ReplMerge();
    public static string get_ReplQueueReader();
    public static string get_ReplSnapshot();
    public static string get_ReplLogReader();
    public static string get_SSIS();
    public static string get_PowerShell();
    public static string get_dbCatalogCollationDatabaseDefault();
    public static string get_dbCatalogCollationContained();
    public static string get_dbCatalogCollationSQL_Latin1_General_CP1_CI_AS();
    public static string get_UnknownDest();
    public static string get_FileDest();
    public static string get_SecurityLogDest();
    public static string get_ApplicationLogDest();
    public static string get_UrlDest();
    public static string get_ExternalMonitorDest();
    public static string get_OnFailureActionContinue();
    public static string get_OnFailureActionShutdown();
    public static string get_OnFailureActionFail();
    public static string get_Off();
    public static string get_On();
    public static string get_ReadOnly();
    public static string get_ReadWrite();
    public static string get_Error();
    public static string get_All();
    public static string get_Auto();
    public static string get_None();
    public static string get_Custom();
    public static string IncorrectVersionTag(string elemContent);
    public static string FailedToLoadResFileFromPaths(string fileName, string paths);
    public static string FailedToLoadResFileFromAssembly(string fileName, string assembly);
    public static string UnsupportedTypeDepDiscovery(string objType, string suppList);
    public static string QueryNotSupportedPostProcess(string propList);
    public static string FailedToLoadAssembly(string assembly);
    public static string FailedToCreateUrn(string objCode);
    public static string PropMustBeSpecified(string prop, string obj);
    public static string InvalidUrnForDepends(string urn);
    public static string CouldNotInstantiateObj(string objType);
    public static string NotDerivedFrom(string objType, string objName);
    public static string UnknownType(string type);
    public static string MissingSection(string section);
    public static string InvalidVersion(string version);
    public static string InvalidSqlServer(string productName);
    public static string DatabaseNameMustBeSpecifiedinTheUrn(string urn);
    public static string CouldNotGetInfoFromDependencyRow(string rowInformation);
    public static string UnknownPermissionType(string permissionType);
    public static string UnknownPermissionCode(int code);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlEnumDependencies : object {
    private object m_ci;
    private string m_server;
    private string m_database;
    private SortedList m_tempDependencies;
    private static SqlEnumDependenciesSingleton sqlEnumDependenciesSingleton;
    private ServerVersion m_targetVersion;
    private StringComparer svrComparer;
    private StringComparer dbComparer;
    private bool isCloud;
    private bool IsDbCloud { get; private set; }
    private static SortedList TypeConvertTable { get; }
    private static SqlEnumDependencies();
    private bool get_IsDbCloud();
    private void set_IsDbCloud(bool value);
    private static SortedList get_TypeConvertTable();
    private static int TypeToNo(string type);
    public sealed virtual DependencyChainCollection EnumDependencies(object ci, DependencyRequest rd);
    private string MakeSqlString(string s);
    private string EscapeString(string s, char cEsc);
    private StringComparer GetStringCulture(string database);
    private static SqlTypeConvert FindByNo(int no);
    private DependencyChainCollection BuildResult(DataTable dt);
    private IDKey BuildIDKey(DataRow row, bool forParent);
    private ServerDbSchemaName BuildKey(DataRow row, bool forParent);
    private static string DumpRow(DataRow row);
    private void ResolveDeferredLinks(DependencyChainCollection deferredLink);
    private Urn GetUrnByQuery(IDKey idk);
    private Urn BuildUrn(int type, DataRow row);
    private Urn BuildUrn(DataRow row, bool forParent);
    private string GetUseString(string name);
}
internal class Microsoft.SqlServer.Management.Smo.SqlEnumDependenciesSingleton : object {
    internal SortedList m_typeConvertTable;
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlEnumResult : EnumResult {
    private DataTable m_databases;
    private DataTable m_SchemaPrefixes;
    private StringCollection m_NameProperties;
    private StringCollection m_SchemaPrefixProperties;
    private bool m_LastDbLevelSet;
    private SortedList m_SpecialQuery;
    private string m_QueryHint;
    private StringCollection m_PostProcessFields;
    private DatabaseEngineType dbType;
    public StringCollection PostProcessFields { get; }
    public StringCollection NameProperties { get; public set; }
    public StringCollection SchemaPrefixProperties { get; public set; }
    internal SortedList SpecialQuery { get; }
    internal string QueryHint { get; }
    public bool LastDbLevelSet { get; public set; }
    public StatementBuilder StatementBuilder { get; public set; }
    public int Level { get; }
    public DataTable Databases { get; public set; }
    public DataTable SchemaPrefixes { get; public set; }
    internal bool MultipleDatabases { get; }
    public SqlEnumResult(object ob, ResultType resultType, DatabaseEngineType dbType);
    public StringCollection get_PostProcessFields();
    public StringCollection get_NameProperties();
    public void set_NameProperties(StringCollection value);
    public StringCollection get_SchemaPrefixProperties();
    public void set_SchemaPrefixProperties(StringCollection value);
    internal SortedList get_SpecialQuery();
    internal string get_QueryHint();
    public bool get_LastDbLevelSet();
    public void set_LastDbLevelSet(bool value);
    public StatementBuilder get_StatementBuilder();
    public void set_StatementBuilder(StatementBuilder value);
    public int get_Level();
    public DataTable get_Databases();
    public void set_Databases(DataTable value);
    public DataTable get_SchemaPrefixes();
    public void set_SchemaPrefixes(DataTable value);
    internal void AddSpecialQuery(string database, string query);
    internal void AddQueryHint(string hint);
    private string GetSql(DataRow dbs, string sql);
    private string GetUse(DataRow dbs);
    private string SubstituteSchemaPrefix(DataRow dbs, string sql);
    internal bool get_MultipleDatabases();
    private bool IsDatabaseListEqual(DataRow db1, DataRow db2);
    public StringCollection BuildSql();
    internal string GetSingleDatabaseSql();
}
internal static class Microsoft.SqlServer.Management.Smo.SqlEnumStatementBuilderTestHook : object {
    [ThreadStaticAttribute]
private static Dictionary`2<string, string> sqlStatementFragmentDictionary;
    private static Dictionary`2<string, string> FragmentDictionary { get; }
    public static IReadOnlyDictionary`2<string, string> SqlStatementFragmentsToBeReplaced { get; }
    public static void AddSqlStatementFragmentReplacement(string originalString, string replacementString);
    public static void Clear();
    private static Dictionary`2<string, string> get_FragmentDictionary();
    public static IReadOnlyDictionary`2<string, string> get_SqlStatementFragmentsToBeReplaced();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlObject : SqlObjectBase {
    public virtual void Initialize(object ci, XPathExpressionBlock block);
    public sealed virtual void LoadInitData(string file, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    public void LoadInitData(Stream xml, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    public void LoadInitDataFromAssembly(Assembly assemblyObject, string file, ServerVersion ver, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    private void LoadInitDataFromAssemblyInternal(Assembly assemblyObject, string file, ServerVersion ver, string alias, StringCollection requestedFields, bool store, StringCollection roAfterCreation, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition, Stream configXml);
    protected internal virtual void LoadAndStore(XmlReadDoc xrd, Assembly assemblyObject, StringCollection requestedFields, StringCollection roAfterCreation);
    internal virtual void Load(XmlReadDoc xrd, Assembly assembly, StringCollection requestedFields, StringCollection roAfterCreation);
    private void IncludeFile(XmlReadInclude xri, Assembly assembly, StringCollection requestedFields, StringCollection roAfterCreation);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlObjectBase : EnumObject {
    private StatementBuilder m_sb;
    private ParentLink m_parentLink;
    private ConditionedSqlList m_conditionedSqlList;
    private ConditionedSqlList m_propertyLinkList;
    private ConditionedSqlList m_postProcessList;
    private RequestParentSelect m_RequestParentSelect;
    private SortedList m_OrderByRedirect;
    private SortedList m_SpecialQuery;
    private string m_QueryHint;
    private ArrayList m_LinkFields;
    private bool m_distinct;
    internal StatementBuilder StatementBuilder { get; internal set; }
    internal ParentLink ParentLink { get; internal set; }
    protected RequestParentSelect RequestParentSelect { get; protected set; }
    protected SortedList OrderByRedirect { get; }
    protected SortedList SpecialQuery { get; }
    protected string QueryHint { get; }
    protected ConditionedSqlList ConditionedSqlList { get; protected set; }
    protected ConditionedSqlList PropertyLinkList { get; protected set; }
    protected ConditionedSqlList PostProcessList { get; protected set; }
    protected bool Distinct { get; protected set; }
    protected SqlRequest SqlRequest { get; }
    internal string ObjectName { get; }
    public ResultType[] ResultTypes { get; }
    public Assembly ResourceAssembly { get; }
    public bool SupportsParameterization { get; }
    private bool CalculateParentRequest { get; }
    internal StatementBuilder get_StatementBuilder();
    internal void set_StatementBuilder(StatementBuilder value);
    internal ParentLink get_ParentLink();
    internal void set_ParentLink(ParentLink value);
    protected RequestParentSelect get_RequestParentSelect();
    protected void set_RequestParentSelect(RequestParentSelect value);
    protected SortedList get_OrderByRedirect();
    protected SortedList get_SpecialQuery();
    protected string get_QueryHint();
    protected ConditionedSqlList get_ConditionedSqlList();
    protected void set_ConditionedSqlList(ConditionedSqlList value);
    protected ConditionedSqlList get_PropertyLinkList();
    protected void set_PropertyLinkList(ConditionedSqlList value);
    protected ConditionedSqlList get_PostProcessList();
    protected void set_PostProcessList(ConditionedSqlList value);
    protected bool get_Distinct();
    protected void set_Distinct(bool value);
    internal void SetUrn(Urn urn);
    protected SqlRequest get_SqlRequest();
    internal string get_ObjectName();
    public SqlObjectProperty GetSqlProperty(string field, ObjectPropertyUsages usage);
    public virtual ResultType[] get_ResultTypes();
    private void AddRequestProperty(SqlObjectProperty prop, bool triggered);
    private void RegisterPostProcessHits();
    private void AddRequestProperties();
    public virtual string AddFilterProperty(string name);
    public virtual string AddOrderByProperty(string name);
    public virtual string AddOrderByProperty(string name, bool overrideFlags);
    protected virtual string AddLinkProperty(string name);
    protected void AddConditionalsJustPropDependencies(string name);
    protected virtual void AddConditionals(string field);
    private void RetrieveParentRequestLinks(SqlRequest sr);
    private void PropagateRequestedParentProperties(SqlRequest sr);
    public virtual Request RetrieveParentRequest();
    internal void AddLinkProperties(LinkFieldType lft, ArrayList linkFields);
    private void AddParentLinkProperties();
    private void AddParentLinkPropertiesParent();
    private void AddParentLinkPropertiesLocal();
    protected virtual void IntegrateParentResult(EnumResult erParent);
    private void AddXpathFilter();
    internal void PrepareGetData(EnumResult erParent);
    public virtual EnumResult GetData(EnumResult erParent);
    protected void BuildStatement(EnumResult erParent);
    public virtual Assembly get_ResourceAssembly();
    internal void AddSpecialQuery(string database, string query);
    private void AddSpecialQueryToResult(SqlEnumResult result);
    internal void AddQueryHint(string hint);
    private void AddQueryHintToResult(SqlEnumResult result);
    internal EnumResult BuildResult(EnumResult result);
    protected object FillDataWithUseFailure(SqlEnumResult sqlresult, ResultType resultType);
    protected virtual object FillData(ResultType resultType, StringCollection sql, object connectionInfo, StatementBuilder sb);
    protected void ClearHits();
    public sealed virtual string AddPropertyForFilter(string name);
    public sealed virtual string AddConstantForFilter(string constantValue);
    public sealed virtual bool get_SupportsParameterization();
    private void AddLinkFields(ArrayList linkfields);
    private bool get_CalculateParentRequest();
    protected void ResolveLocalLinkLinks();
    private void AddPostProcessTriggers();
    protected void StoreInitialState();
    protected void RestoreInitialState();
    private string GetRequestedParentSelect();
    private void FillPrefixPostfix();
    protected internal virtual string ResolveComputedField(string fieldName);
    public virtual void PostProcess(EnumResult erChildren);
    internal string GetAliasPropertyName(string prop);
    protected void AddOrderByInDatabase();
    protected void AddOrderByAcrossDatabases();
    private void AddOrderByDatabase(bool bAcrossDatabases);
    private void AddOrderByDatabase(string field, Direction dir, bool bAcrossDatabases, bool bHiddenField);
    internal string GetFixedFilterValue(string field);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlObjectProperty : ObjectProperty {
    private string m_value;
    private string m_dbType;
    private string m_size;
    private string m_Alias;
    private string m_SessionValue;
    private bool m_bCast;
    private LinkMultiple m_LinkMultiple;
    public ArrayList LinkFields { get; }
    public string Value { get; public set; }
    public string SessionValue { get; public set; }
    public string DBType { get; }
    public string Size { get; }
    public string Alias { get; public set; }
    public SqlObjectProperty(XmlReadProperty xrp);
    public ArrayList get_LinkFields();
    public string get_Value();
    public void set_Value(string value);
    internal string GetValue(SqlObjectBase o);
    internal string GetTypeWithSize();
    internal string GetValueWithCast(SqlObjectBase o);
    private void InitSessionValue(SqlObjectBase o);
    public string get_SessionValue();
    public void set_SessionValue(string value);
    public string get_DBType();
    public string get_Size();
    public string get_Alias();
    public void set_Alias(string value);
    public void Add(SqlObjectBase o, bool isTriggered);
}
internal class Microsoft.SqlServer.Management.Smo.SqlObjectUnion : SqlObject {
    private ArrayList m_listObjects;
    public ResultType[] ResultTypes { get; }
    public virtual ResultType[] get_ResultTypes();
    public virtual Request RetrieveParentRequest();
    private void ProcessStatementBuilder(SqlEnumResult ser, SqlObject o, StringBuilder sql);
    public virtual EnumResult GetData(EnumResult erParent);
    public virtual void PostProcess(EnumResult erChildren);
    public virtual void Initialize(object ci, XPathExpressionBlock block);
    protected internal virtual void LoadAndStore(XmlReadDoc xrd, Assembly assembly, StringCollection requestedFields, StringCollection roAfterCreation);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlPostProcess : ConditionedSql {
    private string m_className;
    private Assembly m_assembly;
    private StringCollection m_triggeredFields;
    private SortedList m_HitFields;
    public StringCollection TriggeredFields { get; }
    protected bool AcceptsMultipleHits { get; }
    public SqlPostProcess(XmlReadConditionedStatementPostProcess xrpp, Assembly asembly);
    private PostProcess GetPostProcessInstance();
    public StringCollection get_TriggeredFields();
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
    protected virtual bool get_AcceptsMultipleHits();
    internal void Register(SqlObjectBase obj);
    public static void AddAll(ConditionedSqlList list, XmlReadConditionedStatementPostProcess xrcs, Assembly asembly);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlPropertyLink : ConditionedSql {
    private string m_table;
    private string m_filter;
    private string m_alias;
    private bool m_bExpressionIsForTableName;
    private JoinType m_joinType;
    public string Table { get; public set; }
    public SqlPropertyLink(XmlReadPropertyLink xrpl);
    public SqlPropertyLink(XmlReadProperty xrp);
    public SqlPropertyLink(XmlReadSettings xrs);
    public static void AddAll(ConditionedSqlList list, XmlReadPropertyLink xrpl);
    public static void Add(ConditionedSqlList list, XmlReadProperty xrp);
    public static void Add(ConditionedSqlList list, XmlReadSettings xrs);
    public string get_Table();
    public void set_Table(string value);
    public string GetTableNameWithAlias(SqlObjectBase obj);
    public string GetFilter(SqlObjectBase obj);
    public virtual void AddHit(string field, SqlObjectBase obj, StatementBuilder sb);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.SqlRequest : Request {
    private ArrayList m_listLinkField;
    private StringCollection m_PrefixPostfixFields;
    private bool m_bResolveDatabases;
    public bool ResolveDatabases { get; public set; }
    public ArrayList LinkFields { get; }
    internal StringCollection PrefixPostfixFields { get; internal set; }
    public SqlRequest(Request reqUser);
    public void SetLinkFields(ArrayList list);
    public void set_ResolveDatabases(bool value);
    public bool get_ResolveDatabases();
    public ArrayList get_LinkFields();
    internal StringCollection get_PrefixPostfixFields();
    internal void set_PrefixPostfixFields(StringCollection value);
    internal void MergeLinkFileds(SqlRequest req);
}
internal class Microsoft.SqlServer.Management.Smo.SqlServer : SqlObject {
    public virtual EnumResult GetData(EnumResult erParent);
    public sealed virtual ServerVersion GetServerVersion(object conn);
    public sealed virtual DatabaseEngineType GetDatabaseEngineType(object conn);
    public sealed virtual DatabaseEngineEdition GetDatabaseEngineEdition(object conn);
}
[ComVisibleAttribute("False")]
public class Microsoft.SqlServer.Management.Smo.SqlSupport : object {
    public static CompareOptions GetCompareOptionsFromCollation(string collation);
}
internal class Microsoft.SqlServer.Management.Smo.SqlTypeConvert : object {
    private string m_typeName;
    private int m_typeNo;
    private string m_path;
    public string Name { get; public set; }
    public int No { get; public set; }
    public string Path { get; public set; }
    public SqlTypeConvert(string name, int no, string path);
    public string get_Name();
    public void set_Name(string value);
    public int get_No();
    public void set_No(int value);
    public string get_Path();
    public void set_Path(string value);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.StatementBuilder : object {
    private StringBuilder m_urn;
    private StringBuilder m_prefix;
    private StringBuilder m_fields;
    private StringBuilder m_from;
    private StringBuilder m_where;
    private StringBuilder m_postfix;
    private StringBuilder m_orderBy;
    private StringBuilder m_optionHint;
    private ArrayList m_ParentProps;
    private int m_NonTriggeredProps;
    private StringBuilder m_condition;
    private SortedList m_postProcess;
    private bool m_bDistinct;
    private int m_topN;
    private bool m_bStoredPropsAdded;
    private StringBuilder m_InternalSelect;
    private bool bFirstJoinIsClassic;
    internal ArrayList ParentProperties { get; }
    internal int NonTriggeredProperties { get; }
    internal SortedList PostProcessList { get; }
    public bool Distinct { get; public set; }
    public int TopN { get; public set; }
    public bool IsFirstJoin { get; }
    public StringBuilder From { get; public set; }
    public string SqlStatement { get; }
    public string SqlPostfix { get; }
    internal ArrayList get_ParentProperties();
    internal void SetInternalSelect(StringBuilder sql);
    internal int get_NonTriggeredProperties();
    internal SortedList get_PostProcessList();
    public bool get_Distinct();
    public void set_Distinct(bool value);
    public int get_TopN();
    public void set_TopN(int value);
    public bool get_IsFirstJoin();
    public bool IsEmpty(StringBuilder s);
    public StringBuilder get_From();
    public void set_From(StringBuilder value);
    protected internal static void AddElement(StringBuilder str, string value, string delimStart, string delimEnd, string delimElems);
    public void AddUrn(string value);
    public void AddPrefix(string value);
    public void AddCondition(string value);
    public void AddPostfix(string value);
    public void AddFields(string value);
    public void AddFrom(string value);
    public void AddJoin(string value);
    public void AddWhere(string value);
    public void AddOrderBy(string str);
    private void AddOrderBy(string orderByValue, Direction dir);
    public void AddOrderBy(string prop, string orderByValue, Direction dir);
    public void AddProperty(string name, string value);
    internal void AddPostProcess(string field, PostProcess postProcess);
    internal void AddQueryHint(string hint);
    public void Merge(StatementBuilder sb);
    internal StringBuilder InternalSelect();
    public string get_SqlStatement();
    public string get_SqlPostfix();
    internal void ClearPrefixPostfix();
    public StatementBuilder MakeCopy();
    internal void StoreParentProperty(SqlObjectProperty sop, bool bTriggered);
    public string GetSqlNoPrefixPostfix();
    internal void AddStoredProperties();
    internal string GetOrderBy();
    internal void ClearOrderBy();
    internal string GetCreateTemporaryTableSqlConnect(string tableName);
    private void AddColumn(StringBuilder sqlCreate, SqlObjectProperty prop, Boolean& bFirst, bool bUseAlias);
    internal static string SelectAndDrop(string tableName, string sOrderBy);
    internal void ClearFailCondition();
}
public enum Microsoft.SqlServer.Management.Smo.StopListOption : Enum {
    public int value__;
    public static StopListOption Off;
    public static StopListOption System;
    public static StopListOption Name;
}
[AttributeUsageAttribute("256")]
internal abstract class Microsoft.SqlServer.Management.Smo.StringValueAttribute : Attribute {
    private string _value;
    public string Value { get; }
    protected StringValueAttribute(string value);
    public string get_Value();
}
public enum Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm : Enum {
    public int value__;
    public static SymmetricKeyEncryptionAlgorithm CryptographicProviderDefined;
    public static SymmetricKeyEncryptionAlgorithm RC2;
    public static SymmetricKeyEncryptionAlgorithm RC4;
    public static SymmetricKeyEncryptionAlgorithm Des;
    public static SymmetricKeyEncryptionAlgorithm TripleDes;
    public static SymmetricKeyEncryptionAlgorithm DesX;
    public static SymmetricKeyEncryptionAlgorithm Aes128;
    public static SymmetricKeyEncryptionAlgorithm Aes192;
    public static SymmetricKeyEncryptionAlgorithm Aes256;
    public static SymmetricKeyEncryptionAlgorithm TripleDes3Key;
}
public enum Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionType : Enum {
    public int value__;
    public static SymmetricKeyEncryptionType SymmetricKey;
    public static SymmetricKeyEncryptionType Certificate;
    public static SymmetricKeyEncryptionType Password;
    public static SymmetricKeyEncryptionType AsymmetricKey;
    public static SymmetricKeyEncryptionType MasterKey;
}
public enum Microsoft.SqlServer.Management.Smo.SynonymBaseType : Enum {
    public int value__;
    public static SynonymBaseType None;
    public static SynonymBaseType Table;
    public static SynonymBaseType View;
    public static SynonymBaseType SqlStoredProcedure;
    public static SynonymBaseType SqlScalarFunction;
    public static SynonymBaseType SqlTableValuedFunction;
    public static SynonymBaseType SqlInlineTableValuedFunction;
    public static SynonymBaseType ExtendedStoredProcedure;
    public static SynonymBaseType ReplicationFilterProcedure;
    public static SynonymBaseType ClrStoredProcedure;
    public static SynonymBaseType ClrScalarFunction;
    public static SynonymBaseType ClrTableValuedFunction;
    public static SynonymBaseType ClrAggregateFunction;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.TemporalHistoryRetentionPeriodUnitTypeConverter")]
public enum Microsoft.SqlServer.Management.Smo.TemporalHistoryRetentionPeriodUnit : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("UNDEFINED")]
[LocDisplayNameAttribute("Undefined")]
public static TemporalHistoryRetentionPeriodUnit Undefined;
    [TsqlSyntaxStringAttribute("INFINITE")]
[LocDisplayNameAttribute("Infinite")]
public static TemporalHistoryRetentionPeriodUnit Infinite;
    [TsqlSyntaxStringAttribute("DAY")]
[LocDisplayNameAttribute("Day")]
public static TemporalHistoryRetentionPeriodUnit Day;
    [TsqlSyntaxStringAttribute("WEEK")]
[LocDisplayNameAttribute("Week")]
public static TemporalHistoryRetentionPeriodUnit Week;
    [TsqlSyntaxStringAttribute("MONTH")]
[LocDisplayNameAttribute("Month")]
public static TemporalHistoryRetentionPeriodUnit Month;
    [TsqlSyntaxStringAttribute("YEAR")]
[LocDisplayNameAttribute("Year")]
public static TemporalHistoryRetentionPeriodUnit Year;
}
public class Microsoft.SqlServer.Management.Smo.TemporalHistoryRetentionPeriodUnitTypeConverter : EnumToDisplayNameConverter {
}
[AttributeUsageAttribute("400")]
internal class Microsoft.SqlServer.Management.Smo.TsqlSyntaxStringAttribute : DisplayNameAttribute {
    private string syntaxString;
    public string DisplayName { get; }
    public TsqlSyntaxStringAttribute(string syntaxString);
    public virtual string get_DisplayName();
}
public enum Microsoft.SqlServer.Management.Smo.UserDefinedFunctionType : Enum {
    public int value__;
    public static UserDefinedFunctionType Inline;
    public static UserDefinedFunctionType Scalar;
    public static UserDefinedFunctionType Table;
    public static UserDefinedFunctionType Unknown;
}
public enum Microsoft.SqlServer.Management.Smo.UserDefinedTypeFormat : Enum {
    public int value__;
    public static UserDefinedTypeFormat Native;
    public static UserDefinedTypeFormat UserDefined;
    public static UserDefinedTypeFormat SerializedData;
    public static UserDefinedTypeFormat SerializedDataWithMetadata;
}
public enum Microsoft.SqlServer.Management.Smo.UserType : Enum {
    public int value__;
    public static UserType SqlLogin;
    public static UserType SqlUser;
    public static UserType Certificate;
    public static UserType AsymmetricKey;
    public static UserType NoLogin;
    public static UserType External;
}
internal class Microsoft.SqlServer.Management.Smo.Util : object {
    public static string DbTypeToClrType(string strDBType);
    protected EnumResult TransformToRequest(DataSet ds, ResultType res);
    public static string EscapeString(string value, char escapeCharacter);
    internal static string MakeSqlString(string value);
    internal static Assembly LoadAssembly(string assemblyName);
    internal static object CreateObjectInstance(Assembly assembly, string objectType);
    internal static string UnEscapeString(string escapedValue, char startEscapeChar, char escapeChar, Int32& index);
    internal static string UnEscapeString(string escapedValue, char startEscapeChar, char escapeChar, char partSeperator, Int32& index);
    internal static StringCollection SplitNames(string name);
    internal static StringCollection SplitNames(string name, char partSeperator);
    internal static string EscapeLikePattern(string pattern);
    internal static bool IsNullOrWhiteSpace(string value);
}
public enum Microsoft.SqlServer.Management.Smo.WindowsLoginAccessType : Enum {
    public int value__;
    public static WindowsLoginAccessType Deny;
    public static WindowsLoginAccessType Grant;
    public static WindowsLoginAccessType NonNTLogin;
    public static WindowsLoginAccessType Undefined;
}
public enum Microsoft.SqlServer.Management.Smo.WorkloadGroupImportance : Enum {
    public int value__;
    public static WorkloadGroupImportance Low;
    public static WorkloadGroupImportance Medium;
    public static WorkloadGroupImportance High;
}
[TypeConverterAttribute("Microsoft.SqlServer.Management.Smo.WorkloadManagementImportanceConverter")]
public enum Microsoft.SqlServer.Management.Smo.WorkloadManagementImportance : Enum {
    public int value__;
    [TsqlSyntaxStringAttribute("LOW")]
public static WorkloadManagementImportance Low;
    [TsqlSyntaxStringAttribute("BELOW_NORMAL")]
public static WorkloadManagementImportance BelowNormal;
    [TsqlSyntaxStringAttribute("NORMAL")]
public static WorkloadManagementImportance Normal;
    [TsqlSyntaxStringAttribute("ABOVE_NORMAL")]
public static WorkloadManagementImportance AboveNormal;
    [TsqlSyntaxStringAttribute("HIGH")]
public static WorkloadManagementImportance High;
}
public class Microsoft.SqlServer.Management.Smo.WorkloadManagementImportanceConverter : EnumToDisplayNameConverter {
}
public enum Microsoft.SqlServer.Management.Smo.WsdlGeneratorOption : Enum {
    public int value__;
    public static WsdlGeneratorOption None;
    public static WsdlGeneratorOption DefaultProcedure;
    public static WsdlGeneratorOption Procedure;
}
public enum Microsoft.SqlServer.Management.Smo.XmlCompressionType : Enum {
    public int value__;
    public static XmlCompressionType Invalid;
    public static XmlCompressionType Off;
    public static XmlCompressionType On;
}
public enum Microsoft.SqlServer.Management.Smo.XmlDocumentConstraint : Enum {
    public int value__;
    public static XmlDocumentConstraint Default;
    public static XmlDocumentConstraint Content;
    public static XmlDocumentConstraint Document;
}
public enum Microsoft.SqlServer.Management.Smo.XmlFormatOption : Enum {
    public int value__;
    public static XmlFormatOption XmlFormat;
    public static XmlFormatOption SqlFormat;
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlRead : object {
    private XmlTextReader m_reader;
    private string m_alias;
    private bool m_closed;
    private ServerVersion m_version;
    private DatabaseEngineEdition m_DatabaseEngineEdition;
    private DatabaseEngineType m_databaseEngineType;
    protected static string ATTR_MIN_MAJOR;
    protected static string ATTR_MAX_MAJOR;
    protected static string ATTR_MIN_MINOR;
    protected static string ATTR_MAX_MINOR;
    protected static string ATTR_MIN_BUILD;
    protected static string ATTR_MAX_BUILD;
    protected static string ATTR_CLOUD_MIN_MAJOR;
    protected static string ATTR_CLOUD_MAX_MAJOR;
    protected static string ATTR_CLOUD_MIN_MINOR;
    protected static string ATTR_CLOUD_MAX_MINOR;
    protected static string ATTR_CLOUD_MIN_BUILD;
    protected static string ATTR_CLOUD_MAX_BUILD;
    protected static string ATTR_DATAWAREHOUSE_ENABLED;
    protected XmlTextReader Reader { get; protected set; }
    protected bool Closed { get; protected set; }
    public DatabaseEngineType DatabaseEngineType { get; public set; }
    public ServerVersion Version { get; public set; }
    public DatabaseEngineEdition DatabaseEngineEdition { get; public set; }
    public string Alias { get; public set; }
    public XmlRead(XmlRead xmlReader);
    public XmlRead(ServerVersion version, string serverAlias, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    protected XmlTextReader get_Reader();
    protected void set_Reader(XmlTextReader value);
    protected bool get_Closed();
    protected void set_Closed(bool value);
    public DatabaseEngineType get_DatabaseEngineType();
    public void set_DatabaseEngineType(DatabaseEngineType value);
    public ServerVersion get_Version();
    public void set_Version(ServerVersion value);
    public DatabaseEngineEdition get_DatabaseEngineEdition();
    public void set_DatabaseEngineEdition(DatabaseEngineEdition value);
    public string get_Alias();
    public void set_Alias(string value);
    public virtual void Close();
    public virtual void Skip();
    protected bool IsElementWithCheckVersion(string elemName);
    protected string GetAliasString(string str);
    protected static StringCollection GetFields(string fields);
    protected string GetTextOfElement();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadConditionedStatement : XmlReadRepeated {
    public string Sql { get; }
    public StringCollection Fields { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadConditionedStatement(XmlRead xmlReader);
    public string get_Sql();
    public StringCollection get_Fields();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadConditionedStatementFailCondition : XmlReadConditionedStatement {
    public XmlReadConditionedStatementFailCondition(XmlRead xmlReader);
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadConditionedStatementPostfix : XmlReadConditionedStatement {
    public XmlReadConditionedStatementPostfix(XmlRead xmlReader);
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadConditionedStatementPostProcess : XmlReadRepeated {
    public string ClassName { get; }
    public StringCollection Fields { get; }
    public StringCollection TriggeredFields { get; }
    public XmlReadConditionedStatementPostProcess(XmlRead xmlReader);
    public string get_ClassName();
    public StringCollection get_Fields();
    public StringCollection get_TriggeredFields();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadConditionedStatementPrefix : XmlReadConditionedStatement {
    public XmlReadConditionedStatementPrefix(XmlRead xmlReader);
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadDoc : XmlRead {
    private Stream m_fs;
    public XmlReadSettings Settings { get; }
    public XmlReadProperties Properties { get; }
    public XmlReadDoc(ServerVersion version, string serverAlias, DatabaseEngineType databaseEngineType, DatabaseEngineEdition databaseEngineEdition);
    public void LoadFile(Assembly a, string strFile);
    public void LoadXml(Stream xmlStream);
    private void LoadInternal();
    public virtual void Close();
    public bool ReadUnion();
    public XmlReadSettings get_Settings();
    public XmlReadProperties get_Properties();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadInclude : XmlRead {
    public string File { get; }
    public string TableAlias { get; }
    public StringCollection RequestedFields { get; }
    public StringCollection ROAfterCreation { get; }
    public XmlReadInclude(XmlRead xmlReader);
    public string get_File();
    public string get_TableAlias();
    public StringCollection get_RequestedFields();
    public StringCollection get_ROAfterCreation();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadLinkFields : XmlReadRepeated {
    public LinkFieldType Type { get; }
    public string Field { get; }
    public string DefaultValue { get; }
    public XmlReadLinkFields(XmlRead xmlReader);
    public LinkFieldType get_Type();
    public string get_Field();
    public string get_DefaultValue();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadMultipleLink : XmlRead {
    public string No { get; }
    public string Expression { get; }
    public XmlReadLinkFields LinkFields { get; }
    public XmlReadMultipleLink(XmlRead xmlReader);
    public string get_No();
    public string get_Expression();
    public XmlReadLinkFields get_LinkFields();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadOrderByRedirect : XmlReadRepeated {
    public string Field { get; }
    public StringCollection RedirectFields { get; }
    public XmlReadOrderByRedirect(XmlRead xmlReader);
    public string get_Field();
    public StringCollection get_RedirectFields();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadParentLink : XmlRead {
    public XmlReadSimpleParentLink SimpleParentLink { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadParentLink(XmlRead xmlReader);
    public XmlReadSimpleParentLink get_SimpleParentLink();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadProperties : XmlRead {
    public XmlReadProperty Property { get; }
    public XmlReadInclude Include { get; }
    public XmlReadProperties(XmlRead xmlReader);
    public XmlReadProperty get_Property();
    public XmlReadInclude get_Include();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadProperty : XmlRead {
    public string Name { get; }
    public bool ReadOnly { get; }
    public string ClrType { get; }
    public bool ExtendedType { get; }
    public string DbType { get; }
    public bool Expensive { get; }
    public bool ReadOnlyAfterCreation { get; }
    public short KeyIndex { get; }
    public PropertyMode PropertyMode { get; }
    public bool Cast { get; }
    public bool Hidden { get; }
    public ObjectPropertyUsages Usage { get; }
    public string Value { get; }
    public string Table { get; }
    public string Link { get; }
    public string Size { get; }
    public bool HasPropertyLink { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadProperty(XmlRead xmlReader);
    public string get_Name();
    public bool get_ReadOnly();
    public string get_ClrType();
    public bool get_ExtendedType();
    public string get_DbType();
    public bool get_Expensive();
    public bool get_ReadOnlyAfterCreation();
    public short get_KeyIndex();
    public PropertyMode get_PropertyMode();
    public bool get_Cast();
    public bool get_Hidden();
    public ObjectPropertyUsages get_Usage();
    public string get_Value();
    public string get_Table();
    public string get_Link();
    public string get_Size();
    public bool get_HasPropertyLink();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadPropertyLink : XmlReadRepeated {
    public StringCollection Fields { get; }
    public string Table { get; }
    public string TableAlias { get; }
    public string InnerJoin { get; }
    public bool ExpressionIsForTableName { get; }
    public string LeftJoin { get; }
    public string Filter { get; }
    public XmlReadMultipleLink MultipleLink { get; }
    public XmlReadPropertyLink(XmlRead xmlReader);
    public StringCollection get_Fields();
    public string get_Table();
    public string get_TableAlias();
    public string get_InnerJoin();
    public bool get_ExpressionIsForTableName();
    public string get_LeftJoin();
    public string get_Filter();
    public virtual bool Next();
    public XmlReadMultipleLink get_MultipleLink();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadRepeated : XmlRead {
    public XmlReadRepeated(XmlRead xmlReader);
    public virtual bool Next();
    public bool Next(string elemName);
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadSettings : XmlRead {
    public string MainTable { get; }
    public string AdditionalFilter { get; }
    public bool Distinct { get; }
    public bool HasPropertyLink { get; }
    public XmlReadParentLink ParentLink { get; }
    public XmlReadConditionedStatementFailCondition FailCondition { get; }
    public XmlRequestParentSelect RequestParentSelect { get; }
    public XmlReadInclude Include { get; }
    public XmlReadPropertyLink PropertyLink { get; }
    public XmlReadConditionedStatementPrefix Prefix { get; }
    public XmlReadConditionedStatementPostfix Postfix { get; }
    public XmlReadConditionedStatementPostProcess PostProcess { get; }
    public XmlReadOrderByRedirect OrderByRedirect { get; }
    public XmlReadSpecialQuery SpecialQuery { get; }
    public XmlReadSettings(XmlRead xmlReader);
    public string get_MainTable();
    public string get_AdditionalFilter();
    public bool get_Distinct();
    public bool get_HasPropertyLink();
    public XmlReadParentLink get_ParentLink();
    public XmlReadConditionedStatementFailCondition get_FailCondition();
    public XmlRequestParentSelect get_RequestParentSelect();
    public XmlReadInclude get_Include();
    public XmlReadPropertyLink get_PropertyLink();
    public XmlReadConditionedStatementPrefix get_Prefix();
    public XmlReadConditionedStatementPostfix get_Postfix();
    public XmlReadConditionedStatementPostProcess get_PostProcess();
    public XmlReadOrderByRedirect get_OrderByRedirect();
    public XmlReadSpecialQuery get_SpecialQuery();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadSimpleParentLink : XmlReadRepeated {
    public string Local { get; }
    public string Parent { get; }
    public XmlReadSimpleParentLink(XmlRead xmlReader);
    public string get_Local();
    public string get_Parent();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlReadSpecialQuery : XmlReadConditionedStatement {
    public string Database { get; }
    public string Hint { get; }
    public XmlReadSpecialQuery(XmlRead xmlReader);
    public string get_Database();
    public string get_Hint();
    public virtual bool Next();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlRequestParentSelect : XmlRead {
    public XmlRequestParentSelectField Field { get; }
    public XmlRequestParentSelect(XmlRead xmlReader);
    public XmlRequestParentSelectField get_Field();
}
[ComVisibleAttribute("False")]
internal class Microsoft.SqlServer.Management.Smo.XmlRequestParentSelectField : XmlReadRepeated {
    public string Name { get; }
    public XmlRequestParentSelectField(XmlRead xmlReader);
    public string get_Name();
    public virtual bool Next();
}
public enum Microsoft.SqlServer.Management.Smo.XmlTypeDerivation : Enum {
    public int value__;
    public static XmlTypeDerivation None;
    public static XmlTypeDerivation Extension;
    public static XmlTypeDerivation Restriction;
    public static XmlTypeDerivation Substitution;
}
public enum Microsoft.SqlServer.Management.Smo.XmlTypeKind : Enum {
    public int value__;
    public static XmlTypeKind Any;
    public static XmlTypeKind AnySimple;
    public static XmlTypeKind Primitive;
    public static XmlTypeKind Simple;
    public static XmlTypeKind List;
    public static XmlTypeKind Union;
    public static XmlTypeKind ComplexSimple;
    public static XmlTypeKind Complex;
    public static XmlTypeKind Element;
    public static XmlTypeKind ModelGroup;
    public static XmlTypeKind ElementWildcard;
    public static XmlTypeKind Attribute;
    public static XmlTypeKind AttributeGroup;
    public static XmlTypeKind AttributeWildcard;
}
public enum Microsoft.SqlServer.Management.Smo.XsdSchemaOption : Enum {
    public int value__;
    public static XsdSchemaOption None;
    public static XsdSchemaOption Standard;
}
