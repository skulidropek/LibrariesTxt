[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.MSBuild.ConfigurationFileTask : Task {
    private static string ConfigurationFileNameSuffix;
    private IFileSystem _fileSystem;
    [CompilerGeneratedAttribute]
private ITaskItem <TestingPlatformConfigurationFileSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <MSBuildProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <FinalTestingPlatformConfigurationFile>k__BackingField;
    [RequiredAttribute]
public ITaskItem TestingPlatformConfigurationFileSource { get; public set; }
    [RequiredAttribute]
public ITaskItem MSBuildProjectDirectory { get; public set; }
    [RequiredAttribute]
public ITaskItem AssemblyName { get; public set; }
    [RequiredAttribute]
public ITaskItem OutputPath { get; public set; }
    [OutputAttribute]
public ITaskItem FinalTestingPlatformConfigurationFile { get; public set; }
    [NullableContextAttribute("2")]
internal ConfigurationFileTask(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public ITaskItem get_TestingPlatformConfigurationFileSource();
    [CompilerGeneratedAttribute]
public void set_TestingPlatformConfigurationFileSource(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_MSBuildProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_MSBuildProjectDirectory(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_FinalTestingPlatformConfigurationFile();
    [CompilerGeneratedAttribute]
public void set_FinalTestingPlatformConfigurationFile(ITaskItem value);
    public virtual bool Execute();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.MSBuild.FailedTestHelper : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static void FromFailedTest(FailedTestInfoRequest failedTestInfoRequest, bool outputSupportsMultiline, string targetPath, String& errorCode, String& file, Int32& lineNumber, String& message, String& lowPriorityMessage);
    private static string JoinSingleLineAndShorten(string first, string second);
    private static string SingleLineAndShorten(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.FileSystem : object {
    public sealed virtual void CopyFile(string source, string destination);
    public sealed virtual void CreateDirectory(string directory);
    public sealed virtual Stream CreateNew(string path);
    public sealed virtual bool Exist(string path);
    public sealed virtual void WriteAllText(string path, string contents);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.MSBuild.IFileSystem {
    public abstract virtual bool Exist(string path);
    public abstract virtual void CopyFile(string source, string destination);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual Stream CreateNew(string path);
    public abstract virtual void CreateDirectory(string directory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.MSBuild.InvokeTestingPlatformTask : ToolTask {
    private static string MonoRunnerName;
    private static string DotnetRunnerName;
    private IFileSystem _fileSystem;
    private PipeNameDescription _pipeNameDescription;
    private CancellationTokenSource _waitForConnections;
    private List`1<NamedPipeServer> _connections;
    private StringBuilder _output;
    private object _initLock;
    private Process _currentProcess;
    private Architecture _currentProcessArchitecture;
    [NullableAttribute("2")]
private Task _connectionLoopTask;
    [NullableAttribute("2")]
private ModuleInfoRequest _moduleInfo;
    private string _outputFileName;
    [NullableAttribute("2")]
private StreamWriter _outputFileStream;
    [NullableAttribute("2")]
private string _toolCommand;
    [CompilerGeneratedAttribute]
private ITaskItem <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TestArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TargetFrameworkIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TestingPlatformShowTestsFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TestingPlatformCaptureOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ProjectFullPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITaskItem <DotnetHostPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITaskItem <TestingPlatformCommandLineArguments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <VSTestCLIRunSettings>k__BackingField;
    [RequiredAttribute]
public ITaskItem TargetPath { get; public set; }
    [RequiredAttribute]
public ITaskItem TargetFramework { get; public set; }
    [RequiredAttribute]
public ITaskItem TestArchitecture { get; public set; }
    [RequiredAttribute]
public ITaskItem TargetFrameworkIdentifier { get; public set; }
    [RequiredAttribute]
public ITaskItem TestingPlatformShowTestsFailure { get; public set; }
    [RequiredAttribute]
public ITaskItem TestingPlatformCaptureOutput { get; public set; }
    [RequiredAttribute]
public ITaskItem ProjectFullPath { get; public set; }
    [NullableAttribute("2")]
public ITaskItem DotnetHostPath { get; public set; }
    [NullableAttribute("2")]
public ITaskItem TestingPlatformCommandLineArguments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ITaskItem[] VSTestCLIRunSettings { get; public set; }
    private bool IsNetCoreApp { get; }
    protected string ToolName { get; }
    public string ToolExe { get; public set; }
    protected MessageImportance StandardOutputLoggingImportance { get; }
    protected MessageImportance StandardErrorLoggingImportance { get; }
    internal InvokeTestingPlatformTask(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public ITaskItem get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TestArchitecture();
    [CompilerGeneratedAttribute]
public void set_TestArchitecture(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TargetFrameworkIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkIdentifier(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TestingPlatformShowTestsFailure();
    [CompilerGeneratedAttribute]
public void set_TestingPlatformShowTestsFailure(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TestingPlatformCaptureOutput();
    [CompilerGeneratedAttribute]
public void set_TestingPlatformCaptureOutput(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ProjectFullPath();
    [CompilerGeneratedAttribute]
public void set_ProjectFullPath(ITaskItem value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ITaskItem get_DotnetHostPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DotnetHostPath(ITaskItem value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ITaskItem get_TestingPlatformCommandLineArguments();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TestingPlatformCommandLineArguments(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_VSTestCLIRunSettings();
    [CompilerGeneratedAttribute]
public void set_VSTestCLIRunSettings(ITaskItem[] value);
    private bool get_IsNetCoreApp();
    protected virtual string get_ToolName();
    public virtual string get_ToolExe();
    public virtual void set_ToolExe(string value);
    [NullableContextAttribute("2")]
protected virtual string GenerateFullPathToTool();
    private bool IsCurrentProcessArchitectureCompatible();
    protected virtual string GenerateCommandLineCommands();
    protected virtual bool ValidateParameters();
    protected virtual MessageImportance get_StandardOutputLoggingImportance();
    protected virtual MessageImportance get_StandardErrorLoggingImportance();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    protected virtual void ProcessStarted();
    public virtual bool Execute();
    protected virtual void LogToolCommand(string message);
    protected virtual bool HandleTaskExecutionErrors();
    private Task`1<IResponse> HandleRequestAsync(IRequest request);
    public sealed virtual void Dispose();
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.MSBuild.InvokeTestingPlatformTask/<<ProcessStarted>b__73_0>d")]
[CompilerGeneratedAttribute]
private Task <ProcessStarted>b__73_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.MSBuild.MSBuildCompatibilityHelper : object {
    private static string TerminalLoggerMultilineHandlerFeatureName;
    private static Version TerminalLoggerWithExtendedMessagesSupported;
    private static Version FeatureChecksAdded;
    [NullableAttribute("2")]
private static Version s_msBuildVersion;
    private static Nullable`1<bool> s_supportsMultiline;
    private static Nullable`1<bool> s_supportsTerminalLoggerWithExtendedMessages;
    private static MSBuildCompatibilityHelper();
    private static Version GetMsBuildVersion();
    public static bool SupportsMultiLine();
    public static bool SupportsTerminalLoggerWithExtendedMessages();
    public static bool TryWriteExtendedMessage(IBuildEngine engine, string messageType, string message, Dictionary`2<string, string> metadata);
}
[ExtensionAttribute]
public static class Microsoft.Testing.Platform.MSBuild.MSBuildExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddMSBuild(ITestApplicationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.MSBuildTestApplicationLifecycleCallbacks : object {
    private IConfiguration _configuration;
    private ICommandLineOptions _commandLineOptions;
    private ITestApplicationCancellationTokenSource _testApplicationCancellationTokenSource;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private NamedPipeClient <PipeClient>k__BackingField;
    [NullableAttribute("2")]
public NamedPipeClient PipeClient { get; private set; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public MSBuildTestApplicationLifecycleCallbacks(IConfiguration configuration, ICommandLineOptions commandLineOptions, ITestApplicationCancellationTokenSource testApplicationCancellationTokenSource);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public NamedPipeClient get_PipeClient();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_PipeClient(NamedPipeClient value);
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.MSBuild.MSBuildTestApplicationLifecycleCallbacks/<BeforeRunAsync>d__17")]
public sealed virtual Task BeforeRunAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    public sealed virtual Task AfterRunAsync(int exitCode, CancellationToken cancellation);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Testing.Platform.MSBuild.Resources.MSBuildResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActualValue { get; }
    internal static string ExpectedValue { get; }
    internal static string Failed { get; }
    internal static string FailedTestDetail { get; }
    internal static string FullPathToolCalculationFailed { get; }
    internal static string InvalidTargetPath { get; }
    internal static string MSBuildExtensionsDescription { get; }
    internal static string Passed { get; }
    internal static string RunTests { get; }
    internal static string StackTrace { get; }
    internal static string Summary { get; }
    internal static string TestFailed { get; }
    internal static string TestFailedNoDetail { get; }
    internal static string TestsSucceeded { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActualValue();
    internal static string get_ExpectedValue();
    internal static string get_Failed();
    internal static string get_FailedTestDetail();
    internal static string get_FullPathToolCalculationFailed();
    internal static string get_InvalidTargetPath();
    internal static string get_MSBuildExtensionsDescription();
    internal static string get_Passed();
    internal static string get_RunTests();
    internal static string get_StackTrace();
    internal static string get_Summary();
    internal static string get_TestFailed();
    internal static string get_TestFailedNoDetail();
    internal static string get_TestsSucceeded();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.StackTraceHelper : object {
    private static Regex s_regex;
    internal static bool TryFindLocationFromStackFrame(string errorStackTrace, String& file, Int32& lineNumber, String& place);
    private static bool TryGetStackFrameLocation(string stackFrame, Int32& line, String& file, String& place);
    [MemberNotNullAttribute("s_regex")]
private static void InitializeRegex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.Tasks.DotnetMuxerLocator : object {
    private string _muxerName;
    private Process _currentProcess;
    private Action`1<string> _resolutionLog;
    internal DotnetMuxerLocator(Action`1<string> resolutionLog);
    private static PlatformArchitecture GetCurrentProcessArchitecture();
    private static PlatformArchitecture GetOSArchitecture();
    private static PlatformOperatingSystem GetOperatingSystem();
    [NullableContextAttribute("2")]
public bool TryGetDotnetPathByArchitecture(PlatformArchitecture targetArchitecture, String& muxerPath);
    [NullableContextAttribute("2")]
private string GetMuxerFromGlobalRegistrationWin(PlatformArchitecture targetArchitecture);
    [NullableContextAttribute("2")]
private string GetMuxerFromGlobalRegistrationOnUnix(PlatformArchitecture targetArchitecture);
    private static Nullable`1<PlatformArchitecture> GetMuxerArchitectureByPEHeaderOnWin(string path, Action`1<string> resolutionLog);
    private Nullable`1<PlatformArchitecture> GetMuxerArchitectureByMachoOnMac(string path);
    private bool IsValidArchitectureMuxer(PlatformArchitecture targetArchitecture, string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.MSBuild.TestingPlatformAutoRegisteredExtensions : Task {
    private static string DisplayNameMetadataName;
    private static string TypeFullNameMetadataName;
    private static string WellKnownBuilderHookMicrosoftTestingExtensionsTrx;
    private static string CSharpLanguageSymbol;
    private static string FSharpLanguageSymbol;
    private static string VBLanguageSymbol;
    [CompilerGeneratedAttribute]
private ITaskItem <AutoRegisteredExtensionsSourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AutoRegisteredExtensionsBuilderHook>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <AutoRegisteredExtensionsGeneratedFilePath>k__BackingField;
    private string _expectedItemSpec;
    private IFileSystem _fileSystem;
    [RequiredAttribute]
public ITaskItem AutoRegisteredExtensionsSourcePath { get; public set; }
    [RequiredAttribute]
public ITaskItem Language { get; public set; }
    [RequiredAttribute]
public ITaskItem[] AutoRegisteredExtensionsBuilderHook { get; public set; }
    [OutputAttribute]
public ITaskItem AutoRegisteredExtensionsGeneratedFilePath { get; public set; }
    internal TestingPlatformAutoRegisteredExtensions(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public ITaskItem get_AutoRegisteredExtensionsSourcePath();
    [CompilerGeneratedAttribute]
public void set_AutoRegisteredExtensionsSourcePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AutoRegisteredExtensionsBuilderHook();
    [CompilerGeneratedAttribute]
public void set_AutoRegisteredExtensionsBuilderHook(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_AutoRegisteredExtensionsGeneratedFilePath();
    [CompilerGeneratedAttribute]
public void set_AutoRegisteredExtensionsGeneratedFilePath(ITaskItem value);
    public virtual bool Execute();
    private static ITaskItem[] Reorder(ITaskItem[] items);
    private static void GenerateCode(string language, ITaskItem[] taskItems, ITaskItem testingPlatformEntryPointSourcePath, IFileSystem fileSystem, TaskLoggingHelper taskLoggingHelper);
    private static string GetSourceCode(string language, string extensionsFragments);
}
public static class Microsoft.Testing.Platform.MSBuild.TestingPlatformBuilderHook : object {
    [NullableContextAttribute("1")]
public static void AddExtensions(ITestApplicationBuilder testApplicationBuilder, String[] _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.MSBuild.TestingPlatformEntryPointTask : Task {
    private static string CSharpLanguageSymbol;
    private static string FSharpLanguageSymbol;
    private static string VBLanguageSymbol;
    [CompilerGeneratedAttribute]
private ITaskItem <TestingPlatformEntryPointSourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <TestingPlatformEntryPointGeneratedFilePath>k__BackingField;
    private IFileSystem _fileSystem;
    [RequiredAttribute]
public ITaskItem TestingPlatformEntryPointSourcePath { get; public set; }
    [RequiredAttribute]
public ITaskItem Language { get; public set; }
    [OutputAttribute]
public ITaskItem TestingPlatformEntryPointGeneratedFilePath { get; public set; }
    internal TestingPlatformEntryPointTask(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public ITaskItem get_TestingPlatformEntryPointSourcePath();
    [CompilerGeneratedAttribute]
public void set_TestingPlatformEntryPointSourcePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TestingPlatformEntryPointGeneratedFilePath();
    [CompilerGeneratedAttribute]
public void set_TestingPlatformEntryPointGeneratedFilePath(ITaskItem value);
    public virtual bool Execute();
    private static void GenerateEntryPoint(string language, ITaskItem testingPlatformEntryPointSourcePath, IFileSystem fileSystem, TaskLoggingHelper taskLoggingHelper);
    private static string GetEntryPointSourceCode(string language);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.MSBuildCommandLineProvider : object {
    public static string MSBuildNodeOptionKey;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual IReadOnlyCollection`1<CommandLineOption> GetCommandLineOptions();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual Task`1<ValidationResult> ValidateCommandLineOptionsAsync(ICommandLineOptions commandLineOptions);
    public sealed virtual Task`1<ValidationResult> ValidateOptionArgumentsAsync(CommandLineOption commandOption, String[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.MSBuildConsumer : object {
    private IServiceProvider _serviceProvider;
    private ICommandLineOptions _commandLineOptions;
    [NullableAttribute("2")]
private MSBuildTestApplicationLifecycleCallbacks _msBuildTestApplicationLifecycleCallbacks;
    private bool _sessionEnded;
    private int _totalTests;
    private int _totalFailedTests;
    private int _totalPassedTests;
    private int _totalSkippedTests;
    [CompilerGeneratedAttribute]
private Type[] <DataTypesConsumed>k__BackingField;
    public Type[] DataTypesConsumed { get; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public MSBuildConsumer(IServiceProvider serviceProvider, ICommandLineOptions commandLineOptions);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_DataTypesConsumed();
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual Task OnTestSessionStartingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
    public sealed virtual Task OnTestSessionFinishingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.MSBuildConsumer/<ConsumeAsync>d__23")]
public sealed virtual Task ConsumeAsync(IDataProducer dataProducer, IData value, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.MSBuildConsumer/<HandleFailuresAsync>d__24")]
private Task HandleFailuresAsync(string testDisplayName, bool isCanceled, string duration, string errorMessage, string errorStackTrace, string expected, string actual, string codeFilePath, int lineNumber, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.MSBuildConsumer/<HandleSummaryAsync>d__25")]
private Task HandleSummaryAsync(TestRequestExecutionTimeInfo timeInfo, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static string ToHumanReadableDuration(Nullable`1<double> durationInMs);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.Serializers.FailedTestInfoRequest : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [NullableAttribute("1")]
public string DisplayName { get; public set; }
    public bool IsCanceled { get; public set; }
    public string Duration { get; public set; }
    public string ErrorMessage { get; public set; }
    public string ErrorStackTrace { get; public set; }
    public string Expected { get; public set; }
    public string Actual { get; public set; }
    public string CodeFilePath { get; public set; }
    public int LineNumber { get; public set; }
    public FailedTestInfoRequest(string DisplayName, bool IsCanceled, string Duration, string ErrorMessage, string ErrorStackTrace, string Expected, string Actual, string CodeFilePath, int LineNumber);
    [CompilerGeneratedAttribute]
protected FailedTestInfoRequest(FailedTestInfoRequest original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_DisplayName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public string get_Duration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Duration(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorStackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_Expected();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Expected(string value);
    [CompilerGeneratedAttribute]
public string get_Actual();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Actual(string value);
    [CompilerGeneratedAttribute]
public string get_CodeFilePath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CodeFilePath(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LineNumber(int value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FailedTestInfoRequest left, FailedTestInfoRequest right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FailedTestInfoRequest left, FailedTestInfoRequest right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(FailedTestInfoRequest other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual FailedTestInfoRequest <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& DisplayName, Boolean& IsCanceled, String& Duration, String& ErrorMessage, String& ErrorStackTrace, String& Expected, String& Actual, String& CodeFilePath, Int32& LineNumber);
}
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.Serializers.FailedTestInfoRequestSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    [NullableContextAttribute("1")]
public sealed virtual object Deserialize(Stream stream);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(object objectToSerialize, Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.Serializers.ModuleInfoRequest : object {
    [CompilerGeneratedAttribute]
private string <FrameworkDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestResultFolder>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string FrameworkDescription { get; public set; }
    public string ProcessArchitecture { get; public set; }
    public string TestResultFolder { get; public set; }
    public ModuleInfoRequest(string FrameworkDescription, string ProcessArchitecture, string TestResultFolder);
    [CompilerGeneratedAttribute]
protected ModuleInfoRequest(ModuleInfoRequest original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FrameworkDescription();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FrameworkDescription(string value);
    [CompilerGeneratedAttribute]
public string get_ProcessArchitecture();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProcessArchitecture(string value);
    [CompilerGeneratedAttribute]
public string get_TestResultFolder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestResultFolder(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModuleInfoRequest left, ModuleInfoRequest right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModuleInfoRequest left, ModuleInfoRequest right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ModuleInfoRequest other);
    [CompilerGeneratedAttribute]
public virtual ModuleInfoRequest <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& FrameworkDescription, String& ProcessArchitecture, String& TestResultFolder);
}
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.Serializers.ModuleInfoRequestSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    [NullableContextAttribute("1")]
public sealed virtual object Deserialize(Stream stream);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(object objectToSerialize, Stream stream);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.Serializers.RunSummaryInfoRequest : object {
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalPassed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Duration>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int Total { get; public set; }
    public int TotalFailed { get; public set; }
    public int TotalPassed { get; public set; }
    public int TotalSkipped { get; public set; }
    public string Duration { get; public set; }
    public RunSummaryInfoRequest(int Total, int TotalFailed, int TotalPassed, int TotalSkipped, string Duration);
    [CompilerGeneratedAttribute]
protected RunSummaryInfoRequest(RunSummaryInfoRequest original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Total(int value);
    [CompilerGeneratedAttribute]
public int get_TotalFailed();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalFailed(int value);
    [CompilerGeneratedAttribute]
public int get_TotalPassed();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalPassed(int value);
    [CompilerGeneratedAttribute]
public int get_TotalSkipped();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalSkipped(int value);
    [CompilerGeneratedAttribute]
public string get_Duration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Duration(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RunSummaryInfoRequest left, RunSummaryInfoRequest right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RunSummaryInfoRequest left, RunSummaryInfoRequest right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(RunSummaryInfoRequest other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual RunSummaryInfoRequest <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& Total, Int32& TotalFailed, Int32& TotalPassed, Int32& TotalSkipped, String& Duration);
}
internal class Microsoft.Testing.Platform.MSBuild.TestPlatformExtensions.Serializers.RunSummaryInfoRequestSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    [NullableContextAttribute("1")]
public sealed virtual object Deserialize(Stream stream);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(object objectToSerialize, Stream stream);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
