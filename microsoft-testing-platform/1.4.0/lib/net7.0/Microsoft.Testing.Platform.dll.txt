[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Internal.Framework.ITestFrameworkManager {
    public Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> TestFrameworkFactory { get; }
    public Func`2<IServiceProvider, ITestFrameworkCapabilities> TestFrameworkCapabilitiesFactory { get; }
    public abstract virtual Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> get_TestFrameworkFactory();
    public abstract virtual Func`2<IServiceProvider, ITestFrameworkCapabilities> get_TestFrameworkCapabilitiesFactory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Internal.Framework.TestFrameworkManager : object {
    [CompilerGeneratedAttribute]
private Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> <TestFrameworkFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<IServiceProvider, ITestFrameworkCapabilities> <TestFrameworkCapabilitiesFactory>k__BackingField;
    public Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> TestFrameworkFactory { get; }
    public Func`2<IServiceProvider, ITestFrameworkCapabilities> TestFrameworkCapabilitiesFactory { get; }
    public TestFrameworkManager(Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> testFrameworkFactory, Func`2<IServiceProvider, ITestFrameworkCapabilities> testFrameworkCapabilitiesFactory);
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> get_TestFrameworkFactory();
    [CompilerGeneratedAttribute]
public sealed virtual Func`2<IServiceProvider, ITestFrameworkCapabilities> get_TestFrameworkCapabilitiesFactory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Builder.ConfigurationOptions : object {
    [CompilerGeneratedAttribute]
private ConfigurationSourcesOptions <ConfigurationSources>k__BackingField;
    public ConfigurationSourcesOptions ConfigurationSources { get; }
    [CompilerGeneratedAttribute]
public ConfigurationSourcesOptions get_ConfigurationSources();
}
public class Microsoft.Testing.Platform.Builder.ConfigurationSourcesOptions : object {
    [CompilerGeneratedAttribute]
private bool <RegisterEnvironmentVariablesConfigurationSource>k__BackingField;
    public bool RegisterEnvironmentVariablesConfigurationSource { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RegisterEnvironmentVariablesConfigurationSource();
    [CompilerGeneratedAttribute]
public void set_RegisterEnvironmentVariablesConfigurationSource(bool value);
}
public interface Microsoft.Testing.Platform.Builder.ITestApplication {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<int> RunAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Builder.ITestApplicationBuilder {
    public ITestHostManager TestHost { get; }
    public ITestHostControllersManager TestHostControllers { get; }
    public ICommandLineManager CommandLine { get; }
    public abstract virtual ITestHostManager get_TestHost();
    public abstract virtual ITestHostControllersManager get_TestHostControllers();
    public abstract virtual ICommandLineManager get_CommandLine();
    public abstract virtual ITestApplicationBuilder RegisterTestFramework(Func`2<IServiceProvider, ITestFrameworkCapabilities> capabilitiesFactory, Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> adapterFactory);
    public abstract virtual Task`1<ITestApplication> BuildAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Builder.TestApplication : object {
    private ITestHost _testHost;
    private static int s_numberOfBuilders;
    [NullableAttribute("2")]
private static UnhandledExceptionHandler s_unhandledExceptionHandler;
    [CompilerGeneratedAttribute]
private static int <MaxNumberOfBuilders>k__BackingField;
    internal IServiceProvider ServiceProvider { get; }
    internal static int MaxNumberOfBuilders { get; internal set; }
    private static TestApplication();
    internal TestApplication(ITestHost testHost);
    internal IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
internal static int get_MaxNumberOfBuilders();
    [CompilerGeneratedAttribute]
internal static void set_MaxNumberOfBuilders(int value);
    public static Task`1<ITestApplicationBuilder> CreateServerModeBuilderAsync(String[] args, TestApplicationOptions testApplicationOptions);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Builder.TestApplication/<CreateBuilderAsync>d__12")]
public static Task`1<ITestApplicationBuilder> CreateBuilderAsync(String[] args, TestApplicationOptions testApplicationOptions);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Builder.TestApplication/<LogInformationAsync>d__13")]
private static Task LogInformationAsync(ILogger logger, CurrentTestApplicationModuleInfo testApplicationModuleInfo, TestHostControllerInfo testHostControllerInfo, SystemProcessHandler processHandler, SystemEnvironment environment, string createBuilderEntryTime, bool syncWrite, LogLevel loggerLevel, String[] args);
    internal static void ReleaseBuilder();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Builder.TestApplication/<RunAsync>d__17")]
public sealed virtual Task`1<int> RunAsync();
    private static void LaunchAttachDebugger(SystemEnvironment environment);
    private static ApplicationLoggingState CreateFileLoggerIfDiagnosticIsEnabled(CommandLineParseResult result, CurrentTestApplicationModuleInfo testApplicationModuleInfo, SystemClock clock, SystemEnvironment environment, SystemTask task, SystemConsole console);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Builder.TestApplicationBuilder : object {
    private DateTimeOffset _createBuilderStart;
    private ApplicationLoggingState _loggingState;
    private TestApplicationOptions _testApplicationOptions;
    private IUnhandledExceptionsHandler _unhandledExceptionsHandler;
    private TestHostBuilder _testHostBuilder;
    [NullableAttribute("2")]
private ITestHost _testHost;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> _testFrameworkFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IServiceProvider, ITestFrameworkCapabilities> _testFrameworkCapabilitiesFactory;
    public ITestHostManager TestHost { get; }
    public ITestHostControllersManager TestHostControllers { get; }
    public ICommandLineManager CommandLine { get; }
    internal IServerModeManager ServerMode { get; }
    internal ITestHostOrchestratorManager TestHostControllersManager { get; }
    internal IConfigurationManager Configuration { get; }
    internal ILoggingManager Logging { get; }
    internal IPlatformOutputDeviceManager OutputDisplay { get; }
    internal ITelemetryManager TelemetryManager { get; }
    internal IToolsManager Tools { get; }
    internal TestApplicationBuilder(ApplicationLoggingState loggingState, DateTimeOffset createBuilderStart, TestApplicationOptions testApplicationOptions, IUnhandledExceptionsHandler unhandledExceptionsHandler);
    public sealed virtual ITestHostManager get_TestHost();
    public sealed virtual ITestHostControllersManager get_TestHostControllers();
    public sealed virtual ICommandLineManager get_CommandLine();
    internal IServerModeManager get_ServerMode();
    internal ITestHostOrchestratorManager get_TestHostControllersManager();
    internal IConfigurationManager get_Configuration();
    internal ILoggingManager get_Logging();
    internal IPlatformOutputDeviceManager get_OutputDisplay();
    internal ITelemetryManager get_TelemetryManager();
    internal IToolsManager get_Tools();
    public sealed virtual ITestApplicationBuilder RegisterTestFramework(Func`2<IServiceProvider, ITestFrameworkCapabilities> capabilitiesFactory, Func`3<ITestFrameworkCapabilities, IServiceProvider, ITestFramework> adapterFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Builder.TestApplicationBuilder/<BuildAsync>d__30")]
public sealed virtual Task`1<ITestApplication> BuildAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Builder.TestApplicationOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableTelemetry>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationOptions <Configuration>k__BackingField;
    public bool EnableTelemetry { get; public set; }
    public ConfigurationOptions Configuration { get; }
    [CompilerGeneratedAttribute]
public bool get_EnableTelemetry();
    [CompilerGeneratedAttribute]
public void set_EnableTelemetry(bool value);
    [CompilerGeneratedAttribute]
public ConfigurationOptions get_Configuration();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Capabilities.ICapabilities`1 {
    public IReadOnlyCollection`1<TCapability> Capabilities { get; }
    public abstract virtual IReadOnlyCollection`1<TCapability> get_Capabilities();
}
public interface Microsoft.Testing.Platform.Capabilities.ICapability {
}
[ExperimentalAttribute("TPEXP")]
public interface Microsoft.Testing.Platform.Capabilities.TestFramework.IBannerMessageOwnerCapability {
    public abstract virtual Task`1<string> GetBannerMessageAsync();
}
internal interface Microsoft.Testing.Platform.Capabilities.TestFramework.INamedFeatureCapability {
    [NullableContextAttribute("1")]
public abstract virtual bool IsSupported(string featureName);
}
public interface Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapabilities {
}
public interface Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability {
}
internal interface Microsoft.Testing.Platform.Capabilities.TestFramework.ITestNodesTreeFilterTestFrameworkCapability {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilities : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ITestFrameworkCapability> <capabilities>P;
    public IReadOnlyCollection`1<ITestFrameworkCapability> Capabilities { get; }
    public TestFrameworkCapabilities(IReadOnlyCollection`1<ITestFrameworkCapability> capabilities);
    public TestFrameworkCapabilities(ITestFrameworkCapability[] capabilities);
    public sealed virtual IReadOnlyCollection`1<ITestFrameworkCapability> get_Capabilities();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExperimentalAttribute("TPEXP")]
public static class Microsoft.Testing.Platform.Capabilities.TestFramework.TestFrameworkCapabilitiesExtensions : object {
    [ExtensionAttribute]
public static bool HasCapability(ITestFrameworkCapabilities capabilities);
    [ExtensionAttribute]
public static T GetCapability(ITestFrameworkCapabilities capabilities);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.CommandLineHandler : object {
    private static TextOutputDeviceData EmptyText;
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    private IRuntimeFeature _runtimeFeature;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICommandLineOptionsProvider> <CommandLineOptionsProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ICommandLineOptionsProvider> <ExtensionsCommandLineOptionsProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ICommandLineOptionsProvider> <SystemCommandLineOptionsProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandLineParseResult <ParseResult>k__BackingField;
    public IEnumerable`1<ICommandLineOptionsProvider> CommandLineOptionsProviders { get; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    internal IReadOnlyCollection`1<ICommandLineOptionsProvider> ExtensionsCommandLineOptionsProviders { get; }
    internal IReadOnlyCollection`1<ICommandLineOptionsProvider> SystemCommandLineOptionsProviders { get; }
    internal CommandLineParseResult ParseResult { get; }
    public CommandLineHandler(CommandLineParseResult parseResult, IReadOnlyCollection`1<ICommandLineOptionsProvider> extensionsCommandLineOptionsProviders, IReadOnlyCollection`1<ICommandLineOptionsProvider> systemCommandLineOptionsProviders, ITestApplicationModuleInfo testApplicationModuleInfo, IRuntimeFeature runtimeFeature);
    private static CommandLineHandler();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ICommandLineOptionsProvider> get_CommandLineOptionsProviders();
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
internal IReadOnlyCollection`1<ICommandLineOptionsProvider> get_ExtensionsCommandLineOptionsProviders();
    [CompilerGeneratedAttribute]
internal IReadOnlyCollection`1<ICommandLineOptionsProvider> get_SystemCommandLineOptionsProviders();
    [CompilerGeneratedAttribute]
internal CommandLineParseResult get_ParseResult();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.CommandLine.CommandLineHandler/<PrintInfoAsync>d__24")]
public Task PrintInfoAsync(IPlatformOutputDevice platformOutputDevice, IReadOnlyList`1<ITool> availableTools);
    public sealed virtual bool IsOptionSet(string optionName);
    public sealed virtual bool TryGetOptionArgumentList(string optionName, String[]& arguments);
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual bool IsHelpInvoked();
    public bool IsInfoInvoked();
    public bool IsDotNetTestPipeInvoked();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.CommandLine.CommandLineHandler/<PrintHelpAsync>d__31")]
public sealed virtual Task PrintHelpAsync(IPlatformOutputDevice platformOutputDevice, IReadOnlyList`1<ITool> availableTools);
    [CompilerGeneratedAttribute]
internal static string <PrintHelpAsync>g__GetApplicationName|31_0(ITestApplicationModuleInfo testApplicationModuleInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.CommandLineManager : object {
    private List`1<Func`1<ICommandLineOptionsProvider>> _commandLineProviderFactory;
    private IRuntimeFeature _runtimeFeature;
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    public CommandLineManager(IRuntimeFeature runtimeFeature, ITestApplicationModuleInfo testApplicationModuleInfo);
    public sealed virtual void AddProvider(Func`1<ICommandLineOptionsProvider> commandLineProviderFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.CommandLine.CommandLineManager/<BuildAsync>d__5")]
internal Task`1<CommandLineHandler> BuildAsync(CommandLineParseResult parseResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.CommandLineOptionsProviderCache : ValueType {
    private ICommandLineOptionsProvider _commandLineOptionsProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyCollection`1<CommandLineOption> _commandLineOptions;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public CommandLineOptionsProviderCache(ICommandLineOptionsProvider commandLineOptionsProvider);
    [IsReadOnlyAttribute]
public sealed virtual string get_Uid();
    [IsReadOnlyAttribute]
public sealed virtual string get_Version();
    [IsReadOnlyAttribute]
public sealed virtual string get_DisplayName();
    [IsReadOnlyAttribute]
public sealed virtual string get_Description();
    public sealed virtual IReadOnlyCollection`1<CommandLineOption> GetCommandLineOptions();
    [IsReadOnlyAttribute]
public sealed virtual Task`1<bool> IsEnabledAsync();
    [IsReadOnlyAttribute]
public sealed virtual Task`1<ValidationResult> ValidateCommandLineOptionsAsync(ICommandLineOptions commandLineOptions);
    [IsReadOnlyAttribute]
public sealed virtual Task`1<ValidationResult> ValidateOptionArgumentsAsync(CommandLineOption commandOption, String[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.CommandLineOptionsProxy : object {
    [NullableAttribute("2")]
private ICommandLineOptions _commandLineOptions;
    public sealed virtual bool IsOptionSet(string optionName);
    public sealed virtual bool TryGetOptionArgumentList(string optionName, String[]& arguments);
    public void SetCommandLineOptions(ICommandLineOptions commandLineOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.CommandLine.CommandLineOptionsValidator : object {
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.CommandLine.CommandLineOptionsValidator/<ValidateAsync>d__0")]
public static Task`1<ValidationResult> ValidateAsync(CommandLineParseResult commandLineParseResult, IEnumerable`1<ICommandLineOptionsProvider> systemCommandLineOptionsProviders, IEnumerable`1<ICommandLineOptionsProvider> extensionCommandLineOptionsProviders, ICommandLineOptions commandLineOptions);
    private static ValidationResult ValidateExtensionOptionsDoNotContainReservedPrefix(Dictionary`2<ICommandLineOptionsProvider, IReadOnlyCollection`1<CommandLineOption>> extensionOptionsByProvider);
    private static ValidationResult ValidateExtensionOptionsDoNotContainReservedOptions(Dictionary`2<ICommandLineOptionsProvider, IReadOnlyCollection`1<CommandLineOption>> extensionOptionsByProvider, Dictionary`2<ICommandLineOptionsProvider, IReadOnlyCollection`1<CommandLineOption>> systemOptionsByProvider);
    private static ValidationResult ValidateOptionsAreNotDuplicated(Dictionary`2<ICommandLineOptionsProvider, IReadOnlyCollection`1<CommandLineOption>> extensionOptionsByProvider);
    private static ValidationResult ValidateNoUnknownOptions(CommandLineParseResult parseResult, Dictionary`2<ICommandLineOptionsProvider, IReadOnlyCollection`1<CommandLineOption>> extensionOptionsByProvider, Dictionary`2<ICommandLineOptionsProvider, IReadOnlyCollection`1<CommandLineOption>> systemOptionsByProvider);
    private static ValidationResult ValidateOptionsArgumentArity(CommandLineParseResult parseResult, Dictionary`2<string, ValueTuple`2<ICommandLineOptionsProvider, CommandLineOption>> providerAndOptionByOptionName);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.CommandLine.CommandLineOptionsValidator/<ValidateOptionsArgumentsAsync>d__6")]
private static Task`1<ValidationResult> ValidateOptionsArgumentsAsync(CommandLineParseResult parseResult, Dictionary`2<string, ValueTuple`2<ICommandLineOptionsProvider, CommandLineOption>> providerAndOptionByOptionName);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.CommandLine.CommandLineOptionsValidator/<ValidateConfigurationAsync>d__7")]
private static Task`1<ValidationResult> ValidateConfigurationAsync(IEnumerable`1<ICommandLineOptionsProvider> extensionsProviders, IEnumerable`1<ICommandLineOptionsProvider> systemProviders, ICommandLineOptions commandLineOptions);
    [ExtensionAttribute]
private static string ToTrimmedString(StringBuilder stringBuilder);
}
internal static class Microsoft.Testing.Platform.CommandLine.CommandLineParser : object {
    [NullableContextAttribute("1")]
public static CommandLineParseResult Parse(String[] args, IEnvironment environment);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void <Parse>g__ParseOptionAndSeparators|0_0(string arg, String& currentOption, String& currentArg);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static bool <Parse>g__TryUnescape|0_1(string input, string option, IEnvironment environment, String& unescapedArg, String& error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.CommandLineParseResult : object {
    public static char OptionPrefix;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ToolName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OptionRecord> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <OriginalArguments>k__BackingField;
    public static CommandLineParseResult Empty { get; }
    [NullableAttribute("2")]
public string ToolName { get; }
    public IReadOnlyList`1<OptionRecord> Options { get; }
    public IReadOnlyList`1<string> Errors { get; }
    public IReadOnlyList`1<string> OriginalArguments { get; }
    public bool HasError { get; }
    public bool HasTool { get; }
    public CommandLineParseResult(string toolName, IReadOnlyList`1<OptionRecord> options, IReadOnlyList`1<string> errors, IReadOnlyList`1<string> originalArguments);
    public static CommandLineParseResult get_Empty();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ToolName();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<OptionRecord> get_Options();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_Errors();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_OriginalArguments();
    public bool get_HasError();
    public bool get_HasTool();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(CommandLineParseResult other);
    public bool IsOptionSet(string optionName);
    public bool TryGetOptionArgumentList(string optionName, String[]& arguments);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.CommandLine.ICommandLineHandler {
    public abstract virtual bool IsHelpInvoked();
    public abstract virtual Task PrintHelpAsync(IPlatformOutputDevice platformOutputDevice, IReadOnlyList`1<ITool> availableTools);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.CommandLine.ICommandLineManager {
    public abstract virtual void AddProvider(Func`1<ICommandLineOptionsProvider> commandLineProviderFactory);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.CommandLine.ICommandLineOptions {
    public abstract virtual bool IsOptionSet(string optionName);
    public abstract virtual bool TryGetOptionArgumentList(string optionName, String[]& arguments);
}
internal class Microsoft.Testing.Platform.CommandLine.InformativeCommandLineTestHost : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IServiceProvider <serviceProvider>P;
    private int _returnValue;
    [NullableAttribute("2")]
private DotnetTestConnection DotnetTestConnection { get; }
    [NullableContextAttribute("1")]
public InformativeCommandLineTestHost(int returnValue, IServiceProvider serviceProvider);
    [NullableContextAttribute("2")]
private DotnetTestConnection get_DotnetTestConnection();
    [NullableContextAttribute("1")]
public sealed virtual Task`1<int> RunAsync();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.CommandLine.InformativeCommandLineTestHost/<DisposeAsync>d__7")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.OptionRecord : object {
    [CompilerGeneratedAttribute]
private string <Option>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public string Option { get; }
    public String[] Arguments { get; }
    public OptionRecord(string option, String[] arguments);
    [CompilerGeneratedAttribute]
public string get_Option();
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.PlatformCommandLineProvider : object {
    public static string HelpOptionKey;
    public static string HelpOptionQuestionMark;
    public static string TimeoutOptionKey;
    public static string InfoOptionKey;
    public static string DiagnosticOptionKey;
    public static string DiagnosticOutputFilePrefixOptionKey;
    public static string DiagnosticOutputDirectoryOptionKey;
    public static string DiagnosticVerbosityOptionKey;
    public static string DiagnosticFileLoggerSynchronousWriteOptionKey;
    public static string VSTestAdapterModeOptionKey;
    public static string NoBannerOptionKey;
    public static string SkipBuildersNumberCheckOptionKey;
    public static string DiscoverTestsOptionKey;
    public static string ResultDirectoryOptionKey;
    public static string IgnoreExitCodeOptionKey;
    public static string MinimumExpectedTestsOptionKey;
    public static string TestHostControllerPIDOptionKey;
    public static string ExitOnProcessExitOptionKey;
    public static string ServerOptionKey;
    public static string ClientPortOptionKey;
    public static string ClientHostOptionKey;
    public static string JsonRpcProtocolName;
    public static string DotNetTestPipeOptionKey;
    public static string DotnetTestCliProtocolName;
    private static String[] VerbosityOptions;
    private static CommandLineOption MinimumExpectedTests;
    private static IReadOnlyCollection`1<CommandLineOption> PlatformCommandLineProviderCache;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    private static PlatformCommandLineProvider();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual IReadOnlyCollection`1<CommandLineOption> GetCommandLineOptions();
    public sealed virtual Task`1<ValidationResult> ValidateOptionArgumentsAsync(CommandLineOption commandOption, String[] arguments);
    public static int GetMinimumExpectedTests(ICommandLineOptions commandLineOptions);
    private static Task`1<ValidationResult> IsMinimumExpectedTestsOptionValidAsync(CommandLineOption option, String[] arguments);
    public sealed virtual Task`1<ValidationResult> ValidateCommandLineOptionsAsync(ICommandLineOptions commandLineOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.ToolCommandLineOptionsProviderCache : ValueType {
    private IToolCommandLineOptionsProvider _commandLineOptionsProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyCollection`1<CommandLineOption> _commandLineOptions;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public string ToolName { get; }
    public ToolCommandLineOptionsProviderCache(IToolCommandLineOptionsProvider commandLineOptionsProvider);
    [IsReadOnlyAttribute]
public sealed virtual string get_Uid();
    [IsReadOnlyAttribute]
public sealed virtual string get_Version();
    [IsReadOnlyAttribute]
public sealed virtual string get_DisplayName();
    [IsReadOnlyAttribute]
public sealed virtual string get_Description();
    [IsReadOnlyAttribute]
public sealed virtual string get_ToolName();
    public sealed virtual IReadOnlyCollection`1<CommandLineOption> GetCommandLineOptions();
    [IsReadOnlyAttribute]
public sealed virtual Task`1<bool> IsEnabledAsync();
    [IsReadOnlyAttribute]
public sealed virtual Task`1<ValidationResult> ValidateCommandLineOptionsAsync(ICommandLineOptions commandLineOptions);
    [IsReadOnlyAttribute]
public sealed virtual Task`1<ValidationResult> ValidateOptionArgumentsAsync(CommandLineOption commandOption, String[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.CommandLine.TreeNodeFilterCommandLineOptionsProvider : object {
    public static string TreenodeFilter;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public TreeNodeFilterCommandLineOptionsProvider(IExtension extension);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual IReadOnlyCollection`1<CommandLineOption> GetCommandLineOptions();
    public sealed virtual Task`1<ValidationResult> ValidateOptionArgumentsAsync(CommandLineOption commandOption, String[] arguments);
    public sealed virtual Task`1<ValidationResult> ValidateCommandLineOptionsAsync(ICommandLineOptions commandLineOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Testing.Platform.Configurations.AggregatedConfiguration : object {
    public static string DefaultTestResultFolderName;
    private IConfigurationProvider[] _configurationProviders;
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    private IFileSystem _fileSystem;
    [NullableAttribute("2")]
private string _resultDirectory;
    [NullableAttribute("2")]
private string _currentWorkingDirectory;
    [NullableAttribute("2")]
private string _testHostWorkingDirectory;
    [NullableAttribute("2")]
public string Item { get; }
    public AggregatedConfiguration(IConfigurationProvider[] configurationProviders, ITestApplicationModuleInfo testApplicationModuleInfo, IFileSystem fileSystem);
    public sealed virtual string get_Item(string key);
    public void SetResultDirectory(string resultDirectory);
    public void SetCurrentWorkingDirectory(string workingDirectory);
    public void SetTestHostWorkingDirectory(string workingDirectory);
    public void CreateDefaultTestResultDirectory();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Configurations.AggregatedConfiguration/<CheckTestResultsDirectoryOverrideAndCreateItAsync>d__14")]
public Task CheckTestResultsDirectoryOverrideAndCreateItAsync(ICommandLineOptions commandLineOptions, IFileLoggerProvider fileLoggerProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Testing.Platform.Configurations.ConfigurationExtensions : object {
    [ExtensionAttribute]
public static string GetTestResultDirectory(IConfiguration configuration);
    [ExtensionAttribute]
public static string GetCurrentWorkingDirectory(IConfiguration configuration);
    [ExtensionAttribute]
public static string GetTestHostWorkingDirectory(IConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Configurations.ConfigurationManager : object {
    private List`1<Func`1<IConfigurationSource>> _configurationSources;
    private IFileSystem _fileSystem;
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    public ConfigurationManager(IFileSystem fileSystem, ITestApplicationModuleInfo testApplicationModuleInfo);
    public sealed virtual void AddConfigurationSource(Func`1<IConfigurationSource> source);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Configurations.ConfigurationManager/<BuildAsync>d__5")]
internal Task`1<IConfiguration> BuildAsync(IFileLoggerProvider syncFileLoggerProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Testing.Platform.Configurations.EnvironmentVariablesConfigurationProvider : object {
    public static string KeyDelimiter;
    private static string MySqlServerPrefix;
    private static string SqlAzureServerPrefix;
    private static string SqlServerPrefix;
    private static string CustomConnectionStringPrefix;
    private string _prefix;
    private string _normalizedPrefix;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _data;
    private IEnvironment _environmentVariables;
    public EnvironmentVariablesConfigurationProvider(IEnvironment environmentVariables);
    public EnvironmentVariablesConfigurationProvider(IEnvironment environmentVariables, string prefix);
    private static EnvironmentVariablesConfigurationProvider();
    public sealed virtual Task LoadAsync();
    public sealed virtual bool TryGet(string key, String& value);
    private void HandleMatchedConnectionStringPrefix(Dictionary`2<string, string> data, string connectionStringPrefix, string provider, string fullKey, string value);
    private void AddIfNormalizedKeyMatchesPrefix(Dictionary`2<string, string> data, string normalizedKey, string value);
    private static string Normalize(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Configurations.EnvironmentVariablesConfigurationSource : object {
    private IEnvironment _environmentVariables;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public EnvironmentVariablesConfigurationSource(IEnvironment environmentVariables);
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual IConfigurationProvider Build();
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.Testing.Platform.Configurations.IConfiguration {
    [NullableAttribute("2")]
public string Item { get; }
    public abstract virtual string get_Item(string key);
}
internal interface Microsoft.Testing.Platform.Configurations.IConfigurationBuilder {
    [NullableContextAttribute("1")]
public abstract virtual IConfiguration Build();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Configurations.IConfigurationManager {
    public abstract virtual void AddConfigurationSource(Func`1<IConfigurationSource> source);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Configurations.IConfigurationProvider {
    public abstract virtual Task LoadAsync();
    public abstract virtual bool TryGet(string key, String& value);
}
internal interface Microsoft.Testing.Platform.Configurations.IConfigurationSource {
    [NullableContextAttribute("1")]
public abstract virtual IConfigurationProvider Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Testing.Platform.Configurations.JsonConfigurationFileParser : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _singleValueData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _propertyToAllChildren;
    private Stack`1<string> _paths;
    public static ValueTuple`2<Dictionary`2<string, string>, Dictionary`2<string, string>> Parse(Stream input);
    private ValueTuple`2<Dictionary`2<string, string>, Dictionary`2<string, string>> ParseStream(Stream input);
    private void VisitObjectElement(JsonElement element);
    private void SavePropertyToAllChildren(JsonProperty property);
    private void VisitArrayElement(JsonElement element);
    private void SetNullIfElementIsEmpty(bool isEmpty);
    private void VisitValue(JsonElement value);
    private void EnterContext(string context);
    private void ExitContext();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Configurations.JsonConfigurationSource : object {
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    private IFileSystem _fileSystem;
    [NullableAttribute("2")]
private FileLoggerProvider _fileLoggerProvider;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public JsonConfigurationSource(ITestApplicationModuleInfo testApplicationModuleInfo, IFileSystem fileSystem, FileLoggerProvider fileLoggerProvider);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual IConfigurationProvider Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.Configurations.PlatformConfigurationConstants : object {
    public static string KeyDelimiter;
    public static string PlatformTestHostControllersManagerSingleConnectionNamedPipeServerWaitConnectionTimeoutSeconds;
    public static string PlatformTestHostControllersManagerNamedPipeClientConnectTimeoutSeconds;
    public static string PlatformResultDirectory;
    public static string PlatformCurrentWorkingDirectory;
    public static string PlatformTestHostWorkingDirectory;
    public static string PlatformExitProcessOnUnhandledException;
    public static string PlatformTelemetryIsDevelopmentRepository;
    public static string PlatformConfigSuffixFileName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.DotnetTestConnection : object {
    private CommandLineHandler _commandLineHandler;
    private IProcessHandler _processHandler;
    private IEnvironment _environment;
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    private ITestApplicationCancellationTokenSource _cancellationTokenSource;
    [NullableAttribute("2")]
private NamedPipeClient _dotnetTestPipeClient;
    public bool IsConnected { get; }
    public DotnetTestConnection(CommandLineHandler commandLineHandler, IProcessHandler processHandler, IEnvironment environment, ITestApplicationModuleInfo testApplicationModuleInfo, ITestApplicationCancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.DotnetTestConnection/<TryConnectToDotnetTestPipeIfAvailableAsync>d__7")]
public Task`1<bool> TryConnectToDotnetTestPipeIfAvailableAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.DotnetTestConnection/<SendCommandLineOptionsToDotnetTestPipeAsync>d__8")]
public Task SendCommandLineOptionsToDotnetTestPipeAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.DotnetTestConnection/<DoHandshakeAsync>d__9")]
public Task`1<bool> DoHandshakeAsync(string hostType);
    public static bool IsVersionCompatible(string protocolVersion, string supportedProtocolVersions);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.DotnetTestConnection/<SendMessageAsync>d__11")]
public Task SendMessageAsync(IRequest message);
    public bool get_IsConnected();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.DotnetTestConnection/<DisposeAsync>d__15")]
public sealed virtual ValueTask DisposeAsync();
}
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.DotnetTestHelper : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool HasDotnetTestServerOption(CommandLineHandler commandLineHandler);
}
[IsReadOnlyAttribute]
public class Microsoft.Testing.Platform.Extensions.CommandLine.ArgumentArity : ValueType {
    public static ArgumentArity Zero;
    public static ArgumentArity ZeroOrOne;
    public static ArgumentArity ZeroOrMore;
    public static ArgumentArity OneOrMore;
    public static ArgumentArity ExactlyOne;
    [CompilerGeneratedAttribute]
private int <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Max>k__BackingField;
    public int Min { get; }
    public int Max { get; }
    public ArgumentArity(int min, int max);
    private static ArgumentArity();
    [CompilerGeneratedAttribute]
public int get_Min();
    [CompilerGeneratedAttribute]
public int get_Max();
    public static bool op_Equality(ArgumentArity left, ArgumentArity right);
    public static bool op_Inequality(ArgumentArity left, ArgumentArity right);
    public sealed virtual bool Equals(ArgumentArity other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Name = {Name} Arity = {Arity} IsHidden = {IsHidden} IsBuiltIn = {IsBuiltIn}")]
public class Microsoft.Testing.Platform.Extensions.CommandLine.CommandLineOption : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ArgumentArity <Arity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuiltIn>k__BackingField;
    public string Name { get; }
    public string Description { get; }
    public ArgumentArity Arity { get; }
    public bool IsHidden { get; }
    internal bool IsBuiltIn { get; }
    internal CommandLineOption(string name, string description, ArgumentArity arity, bool isHidden, bool isBuiltIn);
    public CommandLineOption(string name, string description, ArgumentArity arity, bool isHidden);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public ArgumentArity get_Arity();
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
internal bool get_IsBuiltIn();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(CommandLineOption other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.CommandLine.ICommandLineOptionsProvider {
    public abstract virtual IReadOnlyCollection`1<CommandLineOption> GetCommandLineOptions();
    public abstract virtual Task`1<ValidationResult> ValidateOptionArgumentsAsync(CommandLineOption commandOption, String[] arguments);
    public abstract virtual Task`1<ValidationResult> ValidateCommandLineOptionsAsync(ICommandLineOptions commandLineOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.CompositeExtensionFactory`1 : object {
    private object _syncLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IServiceProvider, TExtension> _factoryWithServiceProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<TExtension> _factory;
    [NullableAttribute("2")]
private TExtension _instance;
    internal static string ValidateCompositionErrorMessage;
    public CompositeExtensionFactory`1(Func`2<IServiceProvider, TExtension> factory);
    public CompositeExtensionFactory`1(Func`1<TExtension> factory);
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override object Microsoft.Testing.Platform.Extensions.ICompositeExtensionFactory.GetInstance(IServiceProvider serviceProvider);
    private void ValidateComposition();
    private bool ContainsTestHostExtension();
    private bool ContainsTestHostControllerExtension();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.IAsyncCleanableExtension {
    public abstract virtual Task CleanupAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.IAsyncInitializableExtension {
    public abstract virtual Task InitializeAsync();
}
internal interface Microsoft.Testing.Platform.Extensions.ICompositeExtensionFactory {
    [NullableContextAttribute("1")]
public abstract virtual object GetInstance(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.IExtension {
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public abstract virtual string get_Uid();
    public abstract virtual string get_Version();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual Task`1<bool> IsEnabledAsync();
}
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.Extensions.InitializableExtension : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.Extensions.InitializableExtension/<TryInitializeAsync>d__0")]
[ExtensionAttribute]
public static Task TryInitializeAsync(object target);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.CancelledTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Exception Exception { get; }
    [NullableContextAttribute("1")]
public CancelledTestNodeStateProperty(string explanation);
    [NullableContextAttribute("1")]
public CancelledTestNodeStateProperty(Exception exception, string explanation);
    [CompilerGeneratedAttribute]
private CancelledTestNodeStateProperty(CancelledTestNodeStateProperty original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CancelledTestNodeStateProperty left, CancelledTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CancelledTestNodeStateProperty left, CancelledTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CancelledTestNodeStateProperty other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override CancelledTestNodeStateProperty <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Testing.Platform.Extensions.Messages.DataWithSessionUid : PropertyBagData {
    [CompilerGeneratedAttribute]
private SessionUid <SessionUid>k__BackingField;
    public SessionUid SessionUid { get; }
    protected DataWithSessionUid(string displayName, string description, SessionUid sessionUid);
    [CompilerGeneratedAttribute]
public SessionUid get_SessionUid();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.DiscoveredTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private static DiscoveredTestNodeStateProperty <CachedInstance>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static DiscoveredTestNodeStateProperty CachedInstance { get; }
    [NullableContextAttribute("2")]
public DiscoveredTestNodeStateProperty(string Explanation);
    [CompilerGeneratedAttribute]
private DiscoveredTestNodeStateProperty(DiscoveredTestNodeStateProperty original);
    private static DiscoveredTestNodeStateProperty();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static DiscoveredTestNodeStateProperty get_CachedInstance();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DiscoveredTestNodeStateProperty left, DiscoveredTestNodeStateProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DiscoveredTestNodeStateProperty left, DiscoveredTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DiscoveredTestNodeStateProperty other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override DiscoveredTestNodeStateProperty <Clone>$();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Explanation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.ErrorTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Exception Exception { get; }
    [NullableContextAttribute("1")]
public ErrorTestNodeStateProperty(string explanation);
    [NullableContextAttribute("1")]
public ErrorTestNodeStateProperty(Exception exception, string explanation);
    [CompilerGeneratedAttribute]
private ErrorTestNodeStateProperty(ErrorTestNodeStateProperty original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ErrorTestNodeStateProperty left, ErrorTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ErrorTestNodeStateProperty left, ErrorTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ErrorTestNodeStateProperty other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override ErrorTestNodeStateProperty <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.FailedTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Exception Exception { get; }
    [NullableContextAttribute("1")]
public FailedTestNodeStateProperty(string explanation);
    [NullableContextAttribute("1")]
public FailedTestNodeStateProperty(Exception exception, string explanation);
    [CompilerGeneratedAttribute]
private FailedTestNodeStateProperty(FailedTestNodeStateProperty original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FailedTestNodeStateProperty left, FailedTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FailedTestNodeStateProperty left, FailedTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FailedTestNodeStateProperty other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override FailedTestNodeStateProperty <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.FileArtifact : PropertyBagData {
    [CompilerGeneratedAttribute]
private FileInfo <FileInfo>k__BackingField;
    public FileInfo FileInfo { get; }
    public FileArtifact(FileInfo fileInfo, string displayName, string description);
    [CompilerGeneratedAttribute]
public FileInfo get_FileInfo();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Testing.Platform.Extensions.Messages.FileLocationProperty : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private LinePositionSpan <LineSpan>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string FilePath { get; public set; }
    public LinePositionSpan LineSpan { get; public set; }
    protected FileLocationProperty(string FilePath, LinePositionSpan LineSpan);
    [CompilerGeneratedAttribute]
protected FileLocationProperty(FileLocationProperty original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FilePath(string value);
    [CompilerGeneratedAttribute]
public LinePositionSpan get_LineSpan();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LineSpan(LinePositionSpan value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FileLocationProperty left, FileLocationProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FileLocationProperty left, FileLocationProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FileLocationProperty other);
    [CompilerGeneratedAttribute]
public abstract virtual FileLocationProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& FilePath, LinePositionSpan& LineSpan);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.Messages.IData {
    public string DisplayName { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public abstract virtual string get_DisplayName();
    [NullableContextAttribute("2")]
public abstract virtual string get_Description();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.Messages.IDataProducer {
    public Type[] DataTypesProduced { get; }
    public abstract virtual Type[] get_DataTypesProduced();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.InProgressTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private static InProgressTestNodeStateProperty <CachedInstance>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static InProgressTestNodeStateProperty CachedInstance { get; }
    [NullableContextAttribute("2")]
public InProgressTestNodeStateProperty(string Explanation);
    [CompilerGeneratedAttribute]
private InProgressTestNodeStateProperty(InProgressTestNodeStateProperty original);
    private static InProgressTestNodeStateProperty();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static InProgressTestNodeStateProperty get_CachedInstance();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(InProgressTestNodeStateProperty left, InProgressTestNodeStateProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(InProgressTestNodeStateProperty left, InProgressTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(InProgressTestNodeStateProperty other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override InProgressTestNodeStateProperty <Clone>$();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Explanation);
}
public interface Microsoft.Testing.Platform.Extensions.Messages.IProperty {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.KeyValuePairStringProperty : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public KeyValuePairStringProperty(string Key, string Value);
    [CompilerGeneratedAttribute]
protected KeyValuePairStringProperty(KeyValuePairStringProperty original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(KeyValuePairStringProperty left, KeyValuePairStringProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(KeyValuePairStringProperty left, KeyValuePairStringProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(KeyValuePairStringProperty other);
    [CompilerGeneratedAttribute]
public virtual KeyValuePairStringProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Key, String& Value);
}
public class Microsoft.Testing.Platform.Extensions.Messages.LinePosition : ValueType {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    public int Line { get; public set; }
    public int Column { get; public set; }
    public LinePosition(int Line, int Column);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(LinePosition left, LinePosition right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(LinePosition left, LinePosition right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(LinePosition other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Int32& Line, Int32& Column);
}
public class Microsoft.Testing.Platform.Extensions.Messages.LinePositionSpan : ValueType {
    [CompilerGeneratedAttribute]
private LinePosition <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private LinePosition <End>k__BackingField;
    public LinePosition Start { get; public set; }
    public LinePosition End { get; public set; }
    public LinePositionSpan(LinePosition Start, LinePosition End);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public LinePosition get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(LinePosition value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public LinePosition get_End();
    [CompilerGeneratedAttribute]
public void set_End(LinePosition value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(LinePositionSpan left, LinePositionSpan right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(LinePositionSpan left, LinePositionSpan right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(LinePositionSpan other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(LinePosition& Start, LinePosition& End);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.PassedTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private static PassedTestNodeStateProperty <CachedInstance>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static PassedTestNodeStateProperty CachedInstance { get; }
    [NullableContextAttribute("2")]
public PassedTestNodeStateProperty(string Explanation);
    [CompilerGeneratedAttribute]
private PassedTestNodeStateProperty(PassedTestNodeStateProperty original);
    private static PassedTestNodeStateProperty();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static PassedTestNodeStateProperty get_CachedInstance();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PassedTestNodeStateProperty left, PassedTestNodeStateProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PassedTestNodeStateProperty left, PassedTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(PassedTestNodeStateProperty other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override PassedTestNodeStateProperty <Clone>$();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Explanation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.PropertyBag : object {
    [NullableAttribute("2")]
internal TestNodeStateProperty _testNodeStateProperty;
    [NullableAttribute("2")]
internal Property _property;
    public int Count { get; }
    public PropertyBag(IProperty[] properties);
    public PropertyBag(IEnumerable`1<IProperty> properties);
    public int get_Count();
    public void Add(IProperty property);
    [NullableContextAttribute("0")]
public bool Any();
    [NullableContextAttribute("0")]
public TProperty SingleOrDefault();
    public TProperty Single();
    public TProperty[] OfType();
    public IEnumerable`1<IProperty> AsEnumerable();
    public IEnumerator`1<IProperty> GetEnumerator();
    [DoesNotReturnAttribute]
private static void ThrowDuplicatedPropertyType(IProperty property);
    [DoesNotReturnAttribute]
private static void ThrowDuplicatedPropertyInstance(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Testing.Platform.Extensions.Messages.PropertyBagData : object {
    [CompilerGeneratedAttribute]
private PropertyBag <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public PropertyBag Properties { get; }
    public string DisplayName { get; }
    [NullableAttribute("2")]
public string Description { get; }
    protected PropertyBagData(string displayName, string description);
    [CompilerGeneratedAttribute]
public PropertyBag get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Extensions.Messages.SerializableKeyValuePairStringProperty : KeyValuePairStringProperty {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public SerializableKeyValuePairStringProperty(string Key, string Value);
    [CompilerGeneratedAttribute]
private SerializableKeyValuePairStringProperty(SerializableKeyValuePairStringProperty original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SerializableKeyValuePairStringProperty left, SerializableKeyValuePairStringProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SerializableKeyValuePairStringProperty left, SerializableKeyValuePairStringProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(KeyValuePairStringProperty other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SerializableKeyValuePairStringProperty other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override SerializableKeyValuePairStringProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Key, String& Value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Extensions.Messages.SerializableNamedArrayStringProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Name { get; public set; }
    public String[] Values { get; public set; }
    public SerializableNamedArrayStringProperty(string Name, String[] Values);
    [CompilerGeneratedAttribute]
private SerializableNamedArrayStringProperty(SerializableNamedArrayStringProperty original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Values();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Values(String[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SerializableNamedArrayStringProperty left, SerializableNamedArrayStringProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SerializableNamedArrayStringProperty left, SerializableNamedArrayStringProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SerializableNamedArrayStringProperty other);
    [CompilerGeneratedAttribute]
public SerializableNamedArrayStringProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String[]& Values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Extensions.Messages.SerializableNamedKeyValuePairsStringProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private KeyValuePair`2[] <Pairs>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Name { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2[] Pairs { get; public set; }
    public SerializableNamedKeyValuePairsStringProperty(string Name, KeyValuePair`2[] Pairs);
    [CompilerGeneratedAttribute]
private SerializableNamedKeyValuePairsStringProperty(SerializableNamedKeyValuePairsStringProperty original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public KeyValuePair`2[] get_Pairs();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Pairs(KeyValuePair`2[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SerializableNamedKeyValuePairsStringProperty left, SerializableNamedKeyValuePairsStringProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SerializableNamedKeyValuePairsStringProperty left, SerializableNamedKeyValuePairsStringProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SerializableNamedKeyValuePairsStringProperty other);
    [CompilerGeneratedAttribute]
public SerializableNamedKeyValuePairsStringProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, KeyValuePair`2[]& Pairs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.SessionFileArtifact : DataWithSessionUid {
    [CompilerGeneratedAttribute]
private FileInfo <FileInfo>k__BackingField;
    public FileInfo FileInfo { get; }
    public SessionFileArtifact(SessionUid sessionUid, FileInfo fileInfo, string displayName, string description);
    [CompilerGeneratedAttribute]
public FileInfo get_FileInfo();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.SkippedTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private static SkippedTestNodeStateProperty <CachedInstance>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public static SkippedTestNodeStateProperty CachedInstance { get; }
    [NullableContextAttribute("2")]
public SkippedTestNodeStateProperty(string Explanation);
    [CompilerGeneratedAttribute]
private SkippedTestNodeStateProperty(SkippedTestNodeStateProperty original);
    private static SkippedTestNodeStateProperty();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public static SkippedTestNodeStateProperty get_CachedInstance();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SkippedTestNodeStateProperty left, SkippedTestNodeStateProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SkippedTestNodeStateProperty left, SkippedTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SkippedTestNodeStateProperty other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override SkippedTestNodeStateProperty <Clone>$();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void Deconstruct(String& Explanation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("TPEXP")]
public class Microsoft.Testing.Platform.Extensions.Messages.StandardErrorProperty : object {
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string StandardError { get; public set; }
    public StandardErrorProperty(string StandardError);
    [CompilerGeneratedAttribute]
protected StandardErrorProperty(StandardErrorProperty original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_StandardError();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StandardError(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StandardErrorProperty left, StandardErrorProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StandardErrorProperty left, StandardErrorProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(StandardErrorProperty other);
    [CompilerGeneratedAttribute]
public virtual StandardErrorProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& StandardError);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("TPEXP")]
public class Microsoft.Testing.Platform.Extensions.Messages.StandardOutputProperty : object {
    [CompilerGeneratedAttribute]
private string <StandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string StandardOutput { get; public set; }
    public StandardOutputProperty(string StandardOutput);
    [CompilerGeneratedAttribute]
protected StandardOutputProperty(StandardOutputProperty original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_StandardOutput();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StandardOutput(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StandardOutputProperty left, StandardOutputProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StandardOutputProperty left, StandardOutputProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(StandardOutputProperty other);
    [CompilerGeneratedAttribute]
public virtual StandardOutputProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& StandardOutput);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.StepTimingInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private TimingInfo <Timing>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Id { get; public set; }
    public string Description { get; public set; }
    public TimingInfo Timing { get; public set; }
    public StepTimingInfo(string Id, string Description, TimingInfo Timing);
    [CompilerGeneratedAttribute]
private StepTimingInfo(StepTimingInfo original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(string value);
    [CompilerGeneratedAttribute]
public TimingInfo get_Timing();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Timing(TimingInfo value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StepTimingInfo left, StepTimingInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StepTimingInfo left, StepTimingInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(StepTimingInfo other);
    [CompilerGeneratedAttribute]
public StepTimingInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Id, String& Description, TimingInfo& Timing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TestFileLocationProperty : FileLocationProperty {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public TestFileLocationProperty(string FilePath, LinePositionSpan LineSpan);
    [CompilerGeneratedAttribute]
private TestFileLocationProperty(TestFileLocationProperty original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestFileLocationProperty left, TestFileLocationProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestFileLocationProperty left, TestFileLocationProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(FileLocationProperty other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestFileLocationProperty other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override TestFileLocationProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& FilePath, LinePositionSpan& LineSpan);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TestMetadataProperty : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Key { get; public set; }
    public string Value { get; public set; }
    public TestMetadataProperty(string Key, string Value);
    [CompilerGeneratedAttribute]
private TestMetadataProperty(TestMetadataProperty original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestMetadataProperty left, TestMetadataProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestMetadataProperty left, TestMetadataProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestMetadataProperty other);
    [CompilerGeneratedAttribute]
public TestMetadataProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Key, String& Value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TestMethodIdentifierProperty : object {
    [CompilerGeneratedAttribute]
private string <AssemblyFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ParameterTypeFullNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnTypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string AssemblyFullName { get; public set; }
    public string Namespace { get; public set; }
    public string TypeName { get; public set; }
    public string MethodName { get; public set; }
    public String[] ParameterTypeFullNames { get; public set; }
    public string ReturnTypeFullName { get; public set; }
    public TestMethodIdentifierProperty(string AssemblyFullName, string Namespace, string TypeName, string MethodName, String[] ParameterTypeFullNames, string ReturnTypeFullName);
    [CompilerGeneratedAttribute]
private TestMethodIdentifierProperty(TestMethodIdentifierProperty original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_AssemblyFullName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyFullName(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodName(string value);
    [CompilerGeneratedAttribute]
public String[] get_ParameterTypeFullNames();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParameterTypeFullNames(String[] value);
    [CompilerGeneratedAttribute]
public string get_ReturnTypeFullName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ReturnTypeFullName(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestMethodIdentifierProperty left, TestMethodIdentifierProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestMethodIdentifierProperty left, TestMethodIdentifierProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestMethodIdentifierProperty other);
    [CompilerGeneratedAttribute]
public TestMethodIdentifierProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& AssemblyFullName, String& Namespace, String& TypeName, String& MethodName, String[]& ParameterTypeFullNames, String& ReturnTypeFullName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class Microsoft.Testing.Platform.Extensions.Messages.TestNode : object {
    [CompilerGeneratedAttribute]
private TestNodeUid <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyBag <Properties>k__BackingField;
    [RequiredMemberAttribute]
public TestNodeUid Uid { get; public set; }
    [RequiredMemberAttribute]
public string DisplayName { get; public set; }
    public PropertyBag Properties { get; public set; }
    [CompilerGeneratedAttribute]
public TestNodeUid get_Uid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Uid(TestNodeUid value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public PropertyBag get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(PropertyBag value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TestNodeFileArtifact : SessionFileArtifact {
    [CompilerGeneratedAttribute]
private TestNode <TestNode>k__BackingField;
    public TestNode TestNode { get; }
    public TestNodeFileArtifact(SessionUid sessionUid, TestNode testNode, FileInfo fileInfo, string displayName, string description);
    [CompilerGeneratedAttribute]
public TestNode get_TestNode();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.Testing.Platform.Extensions.Messages.TestNodeStateProperty : object {
    [CompilerGeneratedAttribute]
private string <Explanation>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Explanation { get; public set; }
    protected TestNodeStateProperty(string Explanation);
    [CompilerGeneratedAttribute]
protected TestNodeStateProperty(TestNodeStateProperty original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Explanation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Explanation(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TestNodeStateProperty left, TestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TestNodeStateProperty left, TestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(TestNodeStateProperty other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public abstract virtual TestNodeStateProperty <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Explanation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TestNodeUid : object {
    [CompilerGeneratedAttribute]
private string <value>P;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public TestNodeUid(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(string value);
    public static string op_Implicit(TestNodeUid testNode);
    public static TestNodeUid op_Implicit(string value);
    public static bool op_Equality(TestNodeUid left, TestNodeUid right);
    public static bool op_Inequality(TestNodeUid left, TestNodeUid right);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TestNodeUid other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TestNodeUpdateMessage : DataWithSessionUid {
    [CompilerGeneratedAttribute]
private TestNode <TestNode>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TestNodeUid <ParentTestNodeUid>k__BackingField;
    public TestNode TestNode { get; }
    [NullableAttribute("2")]
public TestNodeUid ParentTestNodeUid { get; }
    public TestNodeUpdateMessage(SessionUid sessionUid, TestNode testNode, TestNodeUid parentTestNodeUid);
    [CompilerGeneratedAttribute]
public TestNode get_TestNode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TestNodeUid get_ParentTestNodeUid();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Testing.Platform.Extensions.Messages.TestRequestExecutionTimeInfo : ValueType {
    [CompilerGeneratedAttribute]
private TimingInfo <TimingInfo>k__BackingField;
    public string DisplayName { get; }
    [NullableAttribute("2")]
public string Description { get; }
    public TimingInfo TimingInfo { get; }
    public TestRequestExecutionTimeInfo(TimingInfo timingInfo);
    public sealed virtual string get_DisplayName();
    [NullableContextAttribute("2")]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public TimingInfo get_TimingInfo();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TimeoutTestNodeStateProperty : TestNodeStateProperty {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Exception Exception { get; }
    public Nullable`1<TimeSpan> Timeout { get; public set; }
    [NullableContextAttribute("1")]
public TimeoutTestNodeStateProperty(string explanation);
    [NullableContextAttribute("1")]
public TimeoutTestNodeStateProperty(Exception exception, string explanation);
    [CompilerGeneratedAttribute]
private TimeoutTestNodeStateProperty(TimeoutTestNodeStateProperty original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Timeout(Nullable`1<TimeSpan> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TimeoutTestNodeStateProperty left, TimeoutTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TimeoutTestNodeStateProperty left, TimeoutTestNodeStateProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateProperty other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TimeoutTestNodeStateProperty other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override TimeoutTestNodeStateProperty <Clone>$();
}
[IsReadOnlyAttribute]
public class Microsoft.Testing.Platform.Extensions.Messages.TimingInfo : ValueType {
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public DateTimeOffset StartTime { get; public set; }
    public DateTimeOffset EndTime { get; public set; }
    public TimeSpan Duration { get; public set; }
    public TimingInfo(DateTimeOffset StartTime, DateTimeOffset EndTime, TimeSpan Duration);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StartTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EndTime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EndTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TimingInfo left, TimingInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TimingInfo left, TimingInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TimingInfo other);
    [CompilerGeneratedAttribute]
public void Deconstruct(DateTimeOffset& StartTime, DateTimeOffset& EndTime, TimeSpan& Duration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.Messages.TimingProperty : object {
    [CompilerGeneratedAttribute]
private TimingInfo <GlobalTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private StepTimingInfo[] <StepTimings>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public TimingInfo GlobalTiming { get; }
    public StepTimingInfo[] StepTimings { get; }
    public TimingProperty(TimingInfo globalTiming);
    public TimingProperty(TimingInfo globalTiming, StepTimingInfo[] stepTimings);
    [CompilerGeneratedAttribute]
private TimingProperty(TimingProperty original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public TimingInfo get_GlobalTiming();
    [CompilerGeneratedAttribute]
public StepTimingInfo[] get_StepTimings();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TimingProperty left, TimingProperty right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TimingProperty left, TimingProperty right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TimingProperty other);
    [CompilerGeneratedAttribute]
public TimingProperty <Clone>$();
}
public interface Microsoft.Testing.Platform.Extensions.OutputDevice.IOutputDeviceDataProducer {
}
public class Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionContext : TestSessionContext {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    [NullableContextAttribute("1")]
internal CloseTestSessionContext(SessionUid sessionUid, ClientInfo client, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.TestFramework.CloseTestSessionResult : object {
    [CompilerGeneratedAttribute]
private string <WarningMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    public string WarningMessage { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool IsSuccess { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WarningMessage();
    [CompilerGeneratedAttribute]
public void set_WarningMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
}
public class Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionContext : TestSessionContext {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    [NullableContextAttribute("1")]
internal CreateTestSessionContext(SessionUid sessionUid, ClientInfo client, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.TestFramework.CreateTestSessionResult : object {
    [CompilerGeneratedAttribute]
private string <WarningMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    public string WarningMessage { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool IsSuccess { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WarningMessage();
    [CompilerGeneratedAttribute]
public void set_WarningMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext : object {
    private IExecuteRequestCompletionNotifier _executeRequestCompletionNotifier;
    [CompilerGeneratedAttribute]
private IRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageBus <MessageBus>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IRequest Request { get; }
    public IMessageBus MessageBus { get; }
    public CancellationToken CancellationToken { get; }
    [ExperimentalAttribute("TPEXP")]
public ExecuteRequestContext(IRequest request, IMessageBus messageBus, IExecuteRequestCompletionNotifier executeRequestCompletionNotifier, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public IRequest get_Request();
    [CompilerGeneratedAttribute]
public IMessageBus get_MessageBus();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    public void Complete();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.TestFramework.ITestFramework {
    public abstract virtual Task`1<CreateTestSessionResult> CreateTestSessionAsync(CreateTestSessionContext context);
    public abstract virtual Task ExecuteRequestAsync(ExecuteRequestContext context);
    public abstract virtual Task`1<CloseTestSessionResult> CloseTestSessionAsync(CloseTestSessionContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.TestHost.IDataConsumer {
    public Type[] DataTypesConsumed { get; }
    public abstract virtual Type[] get_DataTypesConsumed();
    public abstract virtual Task ConsumeAsync(IDataProducer dataProducer, IData value, CancellationToken cancellationToken);
}
public interface Microsoft.Testing.Platform.Extensions.TestHost.ITestApplicationLifecycleCallbacks {
    [NullableContextAttribute("1")]
public abstract virtual Task BeforeRunAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task AfterRunAsync(int exitCode, CancellationToken cancellation);
}
public interface Microsoft.Testing.Platform.Extensions.TestHost.ITestHostExtension {
}
public interface Microsoft.Testing.Platform.Extensions.TestHost.ITestSessionLifetimeHandler {
    [NullableContextAttribute("1")]
public abstract virtual Task OnTestSessionStartingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task OnTestSessionFinishingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Extensions.TestHost.TestSessionLifetimeHandlersContainer : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITestSessionLifetimeHandler> <TestSessionLifetimeHandlers>k__BackingField;
    public IEnumerable`1<ITestSessionLifetimeHandler> TestSessionLifetimeHandlers { get; }
    public TestSessionLifetimeHandlersContainer(IEnumerable`1<ITestSessionLifetimeHandler> testSessionLifetimeHandlers);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITestSessionLifetimeHandler> get_TestSessionLifetimeHandlers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.TestHostControllers.EnvironmentVariable : object {
    [CompilerGeneratedAttribute]
private string <Variable>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public string Variable { get; }
    [NullableAttribute("2")]
public string Value { get; }
    public bool IsSecret { get; }
    public bool IsLocked { get; }
    public EnvironmentVariable(string variable, string value, bool isSecret, bool isLocked);
    [CompilerGeneratedAttribute]
public string get_Variable();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public bool get_IsSecret();
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.TestHostControllers.IEnvironmentVariables {
    public abstract virtual void SetVariable(EnvironmentVariable environmentVariable);
    public abstract virtual void RemoveVariable(string variable);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.TestHostControllers.IReadOnlyEnvironmentVariables {
    public abstract virtual bool TryGetVariable(string variable, OwnedEnvironmentVariable& environmentVariable);
}
public interface Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostControllersExtension {
}
public interface Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostEnvironmentVariableProvider {
    [NullableContextAttribute("1")]
public abstract virtual Task UpdateAsync(IEnvironmentVariables environmentVariables);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<ValidationResult> ValidateTestHostEnvironmentVariablesAsync(IReadOnlyEnvironmentVariables environmentVariables);
}
public interface Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessInformation {
    public int PID { get; }
    public int ExitCode { get; }
    public bool HasExitedGracefully { get; }
    public abstract virtual int get_PID();
    public abstract virtual int get_ExitCode();
    public abstract virtual bool get_HasExitedGracefully();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Extensions.TestHostControllers.ITestHostProcessLifetimeHandler {
    public abstract virtual Task BeforeTestHostProcessStartAsync(CancellationToken cancellationToken);
    public abstract virtual Task OnTestHostProcessStartedAsync(ITestHostProcessInformation testHostProcessInformation, CancellationToken cancellation);
    public abstract virtual Task OnTestHostProcessExitedAsync(ITestHostProcessInformation testHostProcessInformation, CancellationToken cancellation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Extensions.TestHostControllers.OwnedEnvironmentVariable : EnvironmentVariable {
    [CompilerGeneratedAttribute]
private IExtension <Owner>k__BackingField;
    public IExtension Owner { get; }
    public OwnedEnvironmentVariable(IExtension owner, string variable, string value, bool isSecret, bool isLocked);
    [CompilerGeneratedAttribute]
public IExtension get_Owner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Extensions.TestHostControllers.SystemExtension : object {
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
}
internal interface Microsoft.Testing.Platform.Extensions.TestHostOrchestrator.ITestHostOrchestrator {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<int> OrchestrateTestHostExecutionAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Extensions.TestHostOrchestrator.ITestHostOrchestratorManager {
    public abstract virtual void AddTestHostOrchestrator(Func`2<IServiceProvider, ITestHostOrchestrator> factory);
    public abstract virtual Task`1<TestHostOrchestratorConfiguration> BuildAsync(ServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Extensions.TestHostOrchestrator.TestHostOrchestratorConfiguration : object {
    [CompilerGeneratedAttribute]
private ITestHostOrchestrator[] <TestHostOrchestrators>k__BackingField;
    public ITestHostOrchestrator[] TestHostOrchestrators { get; }
    public TestHostOrchestratorConfiguration(ITestHostOrchestrator[] testHostOrchestrators);
    [CompilerGeneratedAttribute]
public ITestHostOrchestrator[] get_TestHostOrchestrators();
}
internal class Microsoft.Testing.Platform.Extensions.TestHostOrchestrator.TestHostOrchestratorManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Func`2<IServiceProvider, ITestHostOrchestrator>> _factories;
    [NullableContextAttribute("1")]
public sealed virtual void AddTestHostOrchestrator(Func`2<IServiceProvider, ITestHostOrchestrator> factory);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.Extensions.TestHostOrchestrator.TestHostOrchestratorManager/<BuildAsync>d__2")]
public sealed virtual Task`1<TestHostOrchestratorConfiguration> BuildAsync(ServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.Testing.Platform.Extensions.ValidationResult : ValueType {
    [CompilerGeneratedAttribute]
private static Task`1<ValidationResult> <ValidTask>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public static Task`1<ValidationResult> ValidTask { get; }
    [MemberNotNullWhenAttribute("False", "ErrorMessage")]
public bool IsValid { get; }
    [NullableAttribute("2")]
public string ErrorMessage { get; }
    [NullableContextAttribute("2")]
private ValidationResult(bool isValid, string errorMessage);
    private static ValidationResult();
    [CompilerGeneratedAttribute]
public static Task`1<ValidationResult> get_ValidTask();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("False", "ErrorMessage")]
public bool get_IsValid();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorMessage();
    public static ValidationResult Valid();
    public static ValidationResult Invalid(string errorMessage);
    public static Task`1<ValidationResult> InvalidTask(string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.ActionResult : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [MemberNotNullWhenAttribute("True", "Result")]
public bool IsSuccess { get; }
    [NullableAttribute("2")]
public object Result { get; }
    [NullableContextAttribute("2")]
protected ActionResult(bool isSuccess, object result);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "Result")]
public bool get_IsSuccess();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Result();
    public static ActionResult Ok(object result);
    public static ActionResult`1<TResult> Ok(TResult result);
    public static ActionResult Fail();
    public static ActionResult`1<TResult> Fail();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.ActionResult`1 : ActionResult {
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    [MemberNotNullWhenAttribute("True", "Result")]
public bool IsSuccess { get; }
    public TResult Result { get; }
    internal ActionResult`1(bool isSuccess, TResult result);
    [MemberNotNullWhenAttribute("True", "Result")]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public TResult get_Result();
    [NullableContextAttribute("1")]
public static ActionResult`1<TResult> op_Implicit(TResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.Helpers.ApplicationStateGuard : object {
    public static void Ensure(bool condition, string errorMessage);
    [NullableContextAttribute("2")]
public static void Ensure(bool condition, string path, int line);
    public static InvalidOperationException Unreachable(string path, int line);
}
internal static class Microsoft.Testing.Platform.Helpers.AppVersion : object {
    [NullableAttribute("1")]
public static string DefaultSemVer;
    private static AppVersion();
}
internal static class Microsoft.Testing.Platform.Helpers.ArgumentGuard : object {
    [NullableContextAttribute("1")]
public static void Ensure(bool condition, string paramName, string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.Helpers.CountDownEventExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.CountDownEventExtensions/<WaitAsync>d__0")]
[ExtensionAttribute]
public static Task`1<bool> WaitAsync(CountdownEvent countdownEvent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.CountDownEventExtensions/<WaitAsync>d__1")]
[ExtensionAttribute]
public static Task`1<bool> WaitAsync(CountdownEvent countdownEvent, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.CountDownEventExtensions/<WaitAsync>d__2")]
[ExtensionAttribute]
internal static Task`1<bool> WaitAsync(CountdownEvent countdownEvent, UInt32 millisecondsTimeOutInterval, CancellationToken cancellationToken);
}
internal static class Microsoft.Testing.Platform.Helpers.DisposeHelper : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.DisposeHelper/<DisposeAsync>d__0")]
public static Task DisposeAsync(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.Helpers.EnvironmentVariableConstants : object {
    public static string DOTNET_WATCH;
    public static string TESTINGPLATFORM_HOTRELOAD_ENABLED;
    public static string TESTINGPLATFORM_DEFAULT_HANG_TIMEOUT;
    public static string TESTINGPLATFORM_MESSAGEBUS_DRAINDATA_ATTEMPTS;
    public static string TESTINGPLATFORM_TESTHOSTCONTROLLER_SKIPEXTENSION;
    public static string TESTINGPLATFORM_TESTHOSTCONTROLLER_PIPENAME;
    public static string TESTINGPLATFORM_TESTHOSTCONTROLLER_CORRELATIONID;
    public static string TESTINGPLATFORM_TESTHOSTCONTROLLER_PARENTPID;
    public static string TESTINGPLATFORM_TESTHOSTCONTROLLER_TESTHOSTPROCESSSTARTTIME;
    public static string TESTINGPLATFORM_DIAGNOSTIC;
    public static string TESTINGPLATFORM_DIAGNOSTIC_VERBOSITY;
    public static string TESTINGPLATFORM_DIAGNOSTIC_OUTPUT_DIRECTORY;
    public static string TESTINGPLATFORM_DIAGNOSTIC_OUTPUT_FILEPREFIX;
    public static string TESTINGPLATFORM_DIAGNOSTIC_FILELOGGER_SYNCHRONOUSWRITE;
    public static string TESTINGPLATFORM_NOBANNER;
    public static string TESTINGPLATFORM_EXITCODE_IGNORE;
    public static string TESTINGPLATFORM_TELEMETRY_OPTOUT;
    public static string DOTNET_CLI_TELEMETRY_OPTOUT;
    public static string DOTNET_NOLOGO;
    public static string TESTINGPLATFORM_LAUNCH_ATTACH_DEBUGGER;
    public static string TESTINGPLATFORM_DOTNETTEST_EXECUTIONID;
    public static string TESTINGPLATFORM_EXIT_PROCESS_ON_UNHANDLED_EXCEPTION;
}
internal static class Microsoft.Testing.Platform.Helpers.ExitCodes : object {
    public static int Success;
    public static int GenericFailure;
    public static int AtLeastOneTestFailed;
    public static int TestSessionAborted;
    public static int InvalidPlatformSetup;
    public static int InvalidCommandLine;
    public static int FeatureNotImplemented;
    public static int TestHostProcessExitedNonGracefully;
    public static int ZeroTests;
    public static int MinimumExpectedTestsPolicyViolation;
    public static int TestAdapterTestSessionFailure;
    public static int DependentProcessExited;
    public static int IncompatibleProtocolVersion;
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IAsyncMonitor {
    public abstract virtual Task`1<IDisposable> LockAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IDisposable> LockAsync(TimeSpan timeout);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IAsyncMonitorFactory {
    public abstract virtual IAsyncMonitor Create();
}
internal interface Microsoft.Testing.Platform.Helpers.IClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
[NullableContextAttribute("2")]
internal interface Microsoft.Testing.Platform.Helpers.IConsole {
    public int BufferHeight { get; }
    public int BufferWidth { get; }
    public bool IsOutputRedirected { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public abstract virtual int get_BufferHeight();
    public abstract virtual int get_BufferWidth();
    public abstract virtual bool get_IsOutputRedirected();
    public abstract virtual void SetForegroundColor(ConsoleColor color);
    public abstract virtual void SetBackgroundColor(ConsoleColor color);
    public abstract virtual ConsoleColor GetForegroundColor();
    public abstract virtual ConsoleColor GetBackgroundColor();
    public abstract virtual void WriteLine();
    public abstract virtual void WriteLine(string value);
    public abstract virtual void WriteLine(object value);
    [NullableContextAttribute("1")]
public abstract virtual void WriteLine(string format, object arg0);
    public abstract virtual void WriteLine(string format, object arg0, object arg1);
    public abstract virtual void WriteLine(string format, object arg0, object arg1, object arg2);
    [NullableContextAttribute("1")]
public abstract virtual void WriteLine(string format, Object[] args);
    [NullableContextAttribute("1")]
public abstract virtual void Write(string format, Object[] args);
    public abstract virtual void Write(string value);
    public abstract virtual void Write(char value);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IEnvironment {
    public string CommandLine { get; }
    public string MachineName { get; }
    public string NewLine { get; }
    public string OsVersion { get; }
    [NullableAttribute("2")]
public string ProcessPath { get; }
    public abstract virtual string get_CommandLine();
    public abstract virtual string get_MachineName();
    public abstract virtual string get_NewLine();
    public abstract virtual string get_OsVersion();
    [NullableContextAttribute("2")]
public abstract virtual string get_ProcessPath();
    public abstract virtual String[] GetCommandLineArgs();
    public abstract virtual string GetEnvironmentVariable(string name);
    public abstract virtual IDictionary GetEnvironmentVariables();
    public abstract virtual string GetFolderPath(SpecialFolder folder, SpecialFolderOption option);
    [NullableContextAttribute("2")]
public abstract virtual void FailFast(string message, Exception exception);
    [NullableContextAttribute("2")]
public abstract virtual void FailFast(string message);
    public abstract virtual void SetEnvironmentVariable(string variable, string value);
    public abstract virtual void Exit(int exitCode);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IFileStream {
    public Stream Stream { get; }
    public string Name { get; }
    public abstract virtual Stream get_Stream();
    public abstract virtual string get_Name();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IFileStreamFactory {
    public abstract virtual IFileStream Create(string path, FileMode mode, FileAccess access, FileShare share);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IFileSystem {
    public abstract virtual bool Exists(string path);
    public abstract virtual string CreateDirectory(string path);
    public abstract virtual void Move(string sourceFileName, string destFileName);
    public abstract virtual IFileStream NewFileStream(string path, FileMode mode);
    public abstract virtual IFileStream NewFileStream(string path, FileMode mode, FileAccess access);
    public abstract virtual string ReadAllText(string path);
}
[NullableContextAttribute("2")]
internal interface Microsoft.Testing.Platform.Helpers.IMainModule {
    public string FileName { get; }
    public abstract virtual string get_FileName();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IMonitor {
    public abstract virtual IDisposable Lock(object obj);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IProcess {
    public int Id { get; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    [NullableAttribute("2")]
public IMainModule MainModule { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Exited(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Exited(EventHandler value);
    public abstract virtual int get_Id();
    public abstract virtual int get_ExitCode();
    public abstract virtual bool get_HasExited();
    [NullableContextAttribute("2")]
public abstract virtual IMainModule get_MainModule();
    public abstract virtual Task WaitForExitAsync();
    public abstract virtual void WaitForExit();
    public abstract virtual void Kill();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IProcessHandler {
    public abstract virtual IProcess GetProcessById(int pid);
    public abstract virtual IProcess GetCurrentProcess();
    public abstract virtual IProcess Start(ProcessStartInfo startInfo);
}
internal interface Microsoft.Testing.Platform.Helpers.IRuntimeFeature {
    public bool IsDynamicCodeSupported { get; }
    public bool IsHotReloadSupported { get; }
    public bool IsHotReloadEnabled { get; }
    public abstract virtual bool get_IsDynamicCodeSupported();
    public abstract virtual bool get_IsHotReloadSupported();
    public abstract virtual bool get_IsHotReloadEnabled();
}
internal interface Microsoft.Testing.Platform.Helpers.IStopwatch {
    public TimeSpan Elapsed { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual TimeSpan get_Elapsed();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.ITask {
    public abstract virtual Task Run(Func`1<Task> function, CancellationToken cancellationToken);
    public abstract virtual Task Run(Action action);
    public abstract virtual Task`1<T> Run(Func`1<Task`1<T>> function, CancellationToken cancellationToken);
    public abstract virtual Task RunLongRunning(Func`1<Task> action, string name, CancellationToken cancellationToken);
    public abstract virtual Task Run(Action action, CancellationToken cancellationToken);
    public abstract virtual Task WhenAll(IEnumerable`1<Task> tasks);
    public abstract virtual Task WhenAll(Task[] tasks);
    public abstract virtual Task`1<Task> WhenAny(Task[] tasks);
    public abstract virtual Task Delay(int millisecondDelay);
    public abstract virtual Task Delay(TimeSpan timeSpan, CancellationToken cancellation);
    public abstract virtual Task Delay(TimeSpan timeSpan);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Helpers.IUnhandledExceptionsHandler {
    public abstract virtual void Subscribe();
    public abstract virtual void SetLogger(ILogger logger);
}
internal interface Microsoft.Testing.Platform.Helpers.IUnhandledExceptionsPolicy {
    public bool FastFailOnFailure { get; }
    public abstract virtual bool get_FastFailOnFailure();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.NonCooperativeParentProcessListener : object {
    private ICommandLineOptions _commandLineOptions;
    private IEnvironment _environment;
    [NullableAttribute("2")]
private Process _parentProcess;
    public NonCooperativeParentProcessListener(ICommandLineOptions commandLineOptions, IEnvironment environment);
    private void SubscribeToParentProcess();
    private void ParentProcess_Exited(object sender, EventArgs e);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Testing.Platform.Helpers.ObjectPool`1 : object {
    [NullableAttribute("2")]
private T _firstItem;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Element[] _items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Factory<T> _factory;
    internal ObjectPool`1(Factory<T> factory);
    internal ObjectPool`1(Factory<T> factory, int size);
    private T CreateInstance();
    internal T Allocate();
    private T AllocateSlow();
    internal void Free(T obj, CancellationToken cancellationToken);
    private void FreeSlow(T obj);
    [ConditionalAttribute("DEBUG")]
internal static void ForgetTrackedObject(T old, T replacement);
    [ConditionalAttribute("DEBUG")]
private void Validate(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Testing.Platform.Helpers.Sha256Hasher : object {
    private static string Hash(string text);
    public static string HashWithNormalizedCasing(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemAsyncMonitor : object {
    private SemaphoreSlim _semaphoreSlim;
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.SystemAsyncMonitor/<LockAsync>d__1")]
public sealed virtual Task`1<IDisposable> LockAsync(TimeSpan timeout);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.SystemAsyncMonitor/<LockAsync>d__2")]
public sealed virtual Task`1<IDisposable> LockAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
internal class Microsoft.Testing.Platform.Helpers.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemConsole : object {
    private static int WriteBufferSize;
    [NullableAttribute("1")]
private static StreamWriter CaptureConsoleOutWriter;
    private bool _suppressOutput;
    public int BufferHeight { get; }
    public int BufferWidth { get; }
    public bool IsOutputRedirected { get; }
    private static SystemConsole();
    public sealed virtual int get_BufferHeight();
    public sealed virtual int get_BufferWidth();
    public sealed virtual bool get_IsOutputRedirected();
    public sealed virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    public sealed virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public void SuppressOutput();
    public sealed virtual void WriteLine();
    public sealed virtual void WriteLine(string value);
    public sealed virtual void WriteLine(object value);
    [NullableContextAttribute("1")]
public sealed virtual void WriteLine(string format, object arg0);
    public sealed virtual void WriteLine(string format, object arg0, object arg1);
    public sealed virtual void WriteLine(string format, object arg0, object arg1, object arg2);
    [NullableContextAttribute("1")]
public sealed virtual void WriteLine(string format, Object[] args);
    [NullableContextAttribute("1")]
public sealed virtual void Write(string format, Object[] args);
    public sealed virtual void Write(string value);
    public sealed virtual void Write(char value);
    public sealed virtual void SetForegroundColor(ConsoleColor color);
    public sealed virtual void SetBackgroundColor(ConsoleColor color);
    public sealed virtual ConsoleColor GetForegroundColor();
    public sealed virtual ConsoleColor GetBackgroundColor();
    public sealed virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemEnvironment : object {
    public string CommandLine { get; }
    public string MachineName { get; }
    public string NewLine { get; }
    public string OsVersion { get; }
    [NullableAttribute("2")]
public string ProcessPath { get; }
    public sealed virtual string get_CommandLine();
    public sealed virtual string get_MachineName();
    public sealed virtual string get_NewLine();
    public sealed virtual string get_OsVersion();
    [NullableContextAttribute("2")]
public sealed virtual string get_ProcessPath();
    public sealed virtual String[] GetCommandLineArgs();
    public sealed virtual string GetEnvironmentVariable(string name);
    public sealed virtual IDictionary GetEnvironmentVariables();
    public sealed virtual string GetFolderPath(SpecialFolder folder, SpecialFolderOption option);
    [NullableContextAttribute("2")]
public sealed virtual void FailFast(string message, Exception exception);
    [NullableContextAttribute("2")]
public sealed virtual void FailFast(string message);
    public sealed virtual void SetEnvironmentVariable(string variable, string value);
    public sealed virtual void Exit(int exitCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemFileStream : object {
    private FileStream _stream;
    public Stream Stream { get; }
    public string Name { get; }
    public SystemFileStream(string path, FileMode mode, FileAccess access, FileShare share);
    public SystemFileStream(string path, FileMode mode, FileAccess access);
    public SystemFileStream(string path, FileMode mode);
    public sealed virtual Stream get_Stream();
    public sealed virtual string get_Name();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
internal class Microsoft.Testing.Platform.Helpers.SystemFileStreamFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IFileStream Create(string path, FileMode mode, FileAccess access, FileShare share);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemFileSystem : object {
    public sealed virtual bool Exists(string path);
    public sealed virtual string CreateDirectory(string path);
    public sealed virtual void Move(string sourceFileName, string destFileName);
    public sealed virtual IFileStream NewFileStream(string path, FileMode mode);
    public sealed virtual IFileStream NewFileStream(string path, FileMode mode, FileAccess access);
    public sealed virtual string ReadAllText(string path);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemMainModule : object {
    private ProcessModule _processModule;
    public string FileName { get; }
    public SystemMainModule(ProcessModule processModule);
    public sealed virtual string get_FileName();
}
internal class Microsoft.Testing.Platform.Helpers.SystemMonitor : object {
    [NullableContextAttribute("1")]
public sealed virtual IDisposable Lock(object obj);
}
internal class Microsoft.Testing.Platform.Helpers.SystemMonitorAsyncFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IAsyncMonitor Create();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemProcess : object {
    [NullableAttribute("1")]
private Process _process;
    [CompilerGeneratedAttribute]
private EventHandler Exited;
    public bool HasExited { get; }
    public int Id { get; }
    public int ExitCode { get; }
    public IMainModule MainModule { get; }
    [NullableContextAttribute("1")]
public SystemProcess(Process process);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Exited(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Exited(EventHandler value);
    public sealed virtual bool get_HasExited();
    public sealed virtual int get_Id();
    public sealed virtual int get_ExitCode();
    public sealed virtual IMainModule get_MainModule();
    [NullableContextAttribute("1")]
private void OnProcessExited(object sender, EventArgs e);
    public sealed virtual void WaitForExit();
    [NullableContextAttribute("1")]
public sealed virtual Task WaitForExitAsync();
    public sealed virtual void Kill();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemProcessHandler : object {
    public sealed virtual IProcess GetCurrentProcess();
    public sealed virtual IProcess GetProcessById(int pid);
    public sealed virtual IProcess Start(ProcessStartInfo startInfo);
}
internal class Microsoft.Testing.Platform.Helpers.SystemRuntimeFeature : object {
    [CompilerGeneratedAttribute]
private bool <IsHotReloadEnabled>k__BackingField;
    public bool IsDynamicCodeSupported { get; }
    public bool IsHotReloadSupported { get; }
    public bool IsHotReloadEnabled { get; private set; }
    public sealed virtual bool get_IsDynamicCodeSupported();
    public sealed virtual bool get_IsHotReloadSupported();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsHotReloadEnabled();
    [CompilerGeneratedAttribute]
private void set_IsHotReloadEnabled(bool value);
    public void EnableHotReload();
}
internal class Microsoft.Testing.Platform.Helpers.SystemStopwatch : object {
    [NullableAttribute("1")]
private Stopwatch _stopwatch;
    public TimeSpan Elapsed { get; }
    public sealed virtual TimeSpan get_Elapsed();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    [NullableContextAttribute("1")]
public static IStopwatch StartNew();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.SystemTask : object {
    public sealed virtual Task Run(Action action);
    public sealed virtual Task Run(Action action, CancellationToken cancellationToken);
    public sealed virtual Task Run(Func`1<Task> function, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> Run(Func`1<Task`1<T>> function, CancellationToken cancellationToken);
    public sealed virtual Task RunLongRunning(Func`1<Task> action, string name, CancellationToken cancellationToken);
    public sealed virtual Task WhenAll(IEnumerable`1<Task> tasks);
    public sealed virtual Task WhenAll(Task[] tasks);
    public sealed virtual Task`1<Task> WhenAny(Task[] tasks);
    public sealed virtual Task Delay(TimeSpan timeSpan);
    public sealed virtual Task Delay(int millisecondDelay);
    public sealed virtual Task Delay(TimeSpan timeSpan, CancellationToken cancellation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.Helpers.TaskExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.TaskExtensions/<WithCancellationAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> WithCancellationAsync(Task`1<T> task, CancellationToken cancellationToken, bool observeException);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.TaskExtensions/<WithCancellationAsync>d__1")]
[ExtensionAttribute]
public static Task WithCancellationAsync(Task task, CancellationToken cancellationToken, bool observeException);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.TaskExtensions/<TimeoutAfterAsync>d__2")]
[ExtensionAttribute]
public static Task TimeoutAfterAsync(Task task, TimeSpan timeout, bool observeException, string filePath, int lineNumber);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Helpers.TaskExtensions/<TimeoutAfterAsync>d__3")]
[ExtensionAttribute]
public static Task TimeoutAfterAsync(Task task, TimeSpan timeout, CancellationToken token, bool observeException, string filePath, int lineNumber);
    private static string CreateMessage(TimeSpan timeout, string filePath, int lineNumber);
}
[ExtensionAttribute]
[ExperimentalAttribute("TPEXP")]
public static class Microsoft.Testing.Platform.Helpers.TestApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddTreeNodeFilterService(ITestApplicationBuilder testApplicationBuilder, IExtension extension);
}
internal static class Microsoft.Testing.Platform.Helpers.TimeoutHelper : object {
    [CompilerGeneratedAttribute]
private static int <DefaultHangTimeoutMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <DefaultHangTimeoutSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <DefaultHangTimeSpanTimeout>k__BackingField;
    public static int DefaultHangTimeoutMilliseconds { get; private set; }
    public static int DefaultHangTimeoutSeconds { get; private set; }
    public static TimeSpan DefaultHangTimeSpanTimeout { get; }
    private static TimeoutHelper();
    [CompilerGeneratedAttribute]
public static int get_DefaultHangTimeoutMilliseconds();
    [CompilerGeneratedAttribute]
private static void set_DefaultHangTimeoutMilliseconds(int value);
    [CompilerGeneratedAttribute]
public static int get_DefaultHangTimeoutSeconds();
    [CompilerGeneratedAttribute]
private static void set_DefaultHangTimeoutSeconds(int value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_DefaultHangTimeSpanTimeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.Helpers.TimeSpanParser : object {
    private static Regex Pattern;
    private static TimeSpanParser();
    [GeneratedRegexAttribute("(?<value>^\d+(?:\.\d+)?)\s*(?<suffix>ms|mil|m|h|d|s?[a-z]*)$", "1")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex GetRegex();
    [NullableContextAttribute("2")]
public static TimeSpan Parse(string time);
    [NullableContextAttribute("2")]
public static bool TryParse(string time, TimeSpan& result);
    private static FormatException GetFormatException(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Helpers.UnhandledExceptionHandler : object {
    private IEnvironment _environment;
    private IConsole _console;
    private bool _isTestController;
    [NullableAttribute("2")]
private ILogger _logger;
    public UnhandledExceptionHandler(IEnvironment environment, IConsole console, bool isTestHost);
    public sealed virtual void Subscribe();
    public sealed virtual void SetLogger(ILogger logger);
    private void OnCurrentDomainUnhandledException(object sender, UnhandledExceptionEventArgs e);
    private void OnTaskSchedulerUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e);
    private void LogErrorAndExit(string error, bool forceClose);
}
internal class Microsoft.Testing.Platform.Helpers.UnhandledExceptionsPolicy : object {
    [CompilerGeneratedAttribute]
private bool <FastFailOnFailure>k__BackingField;
    public bool FastFailOnFailure { get; }
    public UnhandledExceptionsPolicy(bool fastFailOnFailure);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_FastFailOnFailure();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Testing.Platform.Hosts.CommonTestHost : object {
    [CompilerGeneratedAttribute]
private ServiceProvider <serviceProvider>P;
    public ServiceProvider ServiceProvider { get; }
    [NullableAttribute("2")]
protected DotnetTestConnection DotnetTestConnection { get; }
    protected bool RunTestApplicationLifeCycleCallbacks { get; }
    protected CommonTestHost(ServiceProvider serviceProvider);
    public ServiceProvider get_ServiceProvider();
    [NullableContextAttribute("2")]
protected DotnetTestConnection get_DotnetTestConnection();
    protected abstract virtual bool get_RunTestApplicationLifeCycleCallbacks();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<RunAsync>d__8")]
public sealed virtual Task`1<int> RunAsync();
    private string GetHostType();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<RunTestAppAsync>d__10")]
private Task`1<int> RunTestAppAsync(CancellationToken testApplicationCancellationToken);
    protected abstract virtual Task`1<int> InternalRunAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<ExecuteRequestAsync>d__12")]
protected static Task ExecuteRequestAsync(IPlatformOutputDevice outputDevice, ITestSessionContext testSessionInfo, ServiceProvider serviceProvider, BaseMessageBus baseMessageBus, ITestFramework testFramework, ClientInfo client);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<DisplayBeforeSessionStartAsync>d__13")]
private static Task DisplayBeforeSessionStartAsync(IPlatformOutputDevice outputDevice, ITestSessionContext sessionInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<DisplayAfterSessionEndRunAsync>d__14")]
private static Task DisplayAfterSessionEndRunAsync(IPlatformOutputDevice outputDevice, ITestSessionContext sessionInfo, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<NotifyTestSessionStartAsync>d__15")]
private static Task NotifyTestSessionStartAsync(SessionUid sessionUid, BaseMessageBus baseMessageBus, ServiceProvider serviceProvider, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<NotifyTestSessionEndAsync>d__16")]
private static Task NotifyTestSessionEndAsync(SessionUid sessionUid, BaseMessageBus baseMessageBus, ServiceProvider serviceProvider, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.CommonTestHost/<DisposeServiceProviderAsync>d__17")]
protected static Task DisposeServiceProviderAsync(ServiceProvider serviceProvider, Func`2<object, bool> filter, List`1<object> alreadyDisposed, bool isProcessShutdown);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.ConsoleTestHost : CommonTestHost {
    private static ClientInfo ClientInfoHost;
    private static IClientInfo ClientInfoService;
    private ILogger`1<ConsoleTestHost> _logger;
    private IClock _clock;
    private Func`2<TestFrameworkBuilderData, Task`1<ITestFramework>> _buildTestFrameworkAsync;
    private TestFrameworkManager _testFrameworkManager;
    private TestHostManager _testHostManager;
    protected bool RunTestApplicationLifeCycleCallbacks { get; }
    public ConsoleTestHost(ServiceProvider serviceProvider, Func`2<TestFrameworkBuilderData, Task`1<ITestFramework>> buildTestFrameworkAsync, TestFrameworkManager testFrameworkManager, TestHostManager testHostManager);
    private static ConsoleTestHost();
    protected virtual bool get_RunTestApplicationLifeCycleCallbacks();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ConsoleTestHost/<InternalRunAsync>d__10")]
protected virtual Task`1<int> InternalRunAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Hosts.IServerTestHost {
    public abstract virtual Task SendTelemetryEventUpdateAsync(TelemetryEventArgs args);
    public abstract virtual Task SendTestUpdateAsync(TestNodeStateChangedEventArgs update);
    public abstract virtual Task PushDataAsync(IData data);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Hosts.ITestHost {
    public abstract virtual Task`1<int> RunAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Hosts.ITestHostBuilder {
    [NullableAttribute("2")]
public ITestFrameworkManager TestFramework { get; public set; }
    public ITestHostManager TestHost { get; }
    public IConfigurationManager Configuration { get; }
    public ILoggingManager Logging { get; }
    public IPlatformOutputDeviceManager OutputDisplay { get; }
    public ICommandLineManager CommandLine { get; }
    public ITestHostControllersManager TestHostControllers { get; }
    public ITestHostOrchestratorManager TestHostOrchestratorManager { get; }
    public ITelemetryManager Telemetry { get; }
    public IServerModeManager ServerMode { get; }
    public IToolsManager Tools { get; }
    [NullableContextAttribute("2")]
public abstract virtual ITestFrameworkManager get_TestFramework();
    [NullableContextAttribute("2")]
public abstract virtual void set_TestFramework(ITestFrameworkManager value);
    public abstract virtual ITestHostManager get_TestHost();
    public abstract virtual IConfigurationManager get_Configuration();
    public abstract virtual ILoggingManager get_Logging();
    public abstract virtual IPlatformOutputDeviceManager get_OutputDisplay();
    public abstract virtual ICommandLineManager get_CommandLine();
    public abstract virtual ITestHostControllersManager get_TestHostControllers();
    public abstract virtual ITestHostOrchestratorManager get_TestHostOrchestratorManager();
    public abstract virtual ITelemetryManager get_Telemetry();
    public abstract virtual IServerModeManager get_ServerMode();
    public abstract virtual IToolsManager get_Tools();
    public abstract virtual Task`1<ITestHost> BuildAsync(ApplicationLoggingState loggingState, TestApplicationOptions testApplicationOptions, IUnhandledExceptionsHandler unhandledExceptionsHandler, DateTimeOffset createBuilderStart);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.ServerTestHost : CommonTestHost {
    private static string ProtocolVersion;
    private Func`2<TestFrameworkBuilderData, Task`1<ITestFramework>> _buildTestFrameworkAsync;
    private IMessageHandlerFactory _messageHandlerFactory;
    private TestFrameworkManager _testFrameworkManager;
    private ITestApplicationCancellationTokenSource _testApplicationCancellationTokenSource;
    private TestHostManager _testSessionManager;
    private ServerTelemetry _telemetryService;
    private IAsyncMonitor _messageMonitor;
    private IEnvironment _environment;
    private ILogger`1<ServerTestHost> _logger;
    private CancellationTokenSource _messageHandlerStopPlusGlobalTokenSource;
    private CancellationTokenSource _serverClosingTokenSource;
    private CancellationTokenSource _stopMessageHandler;
    private CountdownEvent _requestCounter;
    private IClock _clock;
    private ConcurrentDictionary`2<int, RpcInvocationState> _clientToServerRequests;
    private ConcurrentDictionary`2<int, RpcInvocationState> _serverToClientRequests;
    private int _serverToClientRequestId;
    [NullableAttribute("2")]
private IMessageHandler _messageHandler;
    [NullableAttribute("2")]
private ClientInfo _client;
    [NullableAttribute("2")]
private IClientInfo _clientInfoService;
    public bool IsInitialized { get; }
    protected bool RunTestApplicationLifeCycleCallbacks { get; }
    public ServerTestHost(ServiceProvider serviceProvider, Func`2<TestFrameworkBuilderData, Task`1<ITestFramework>> buildTestFrameworkAsync, IMessageHandlerFactory messageHandlerFactory, TestFrameworkManager testFrameworkManager, TestHostManager testSessionManager);
    public bool get_IsInitialized();
    protected virtual bool get_RunTestApplicationLifeCycleCallbacks();
    private void OnCurrentDomainUnhandledException(object sender, UnhandledExceptionEventArgs e);
    private void OnTaskSchedulerUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e);
    [MemberNotNullAttribute("_messageHandler")]
public void AssertInitialized();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<InternalRunAsync>d__29")]
protected virtual Task`1<int> InternalRunAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<HandleMessagesAsync>d__30")]
private Task HandleMessagesAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<HandleNotificationAsync>d__31")]
private Task HandleNotificationAsync(NotificationMessage message, CancellationToken serverClosing);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<HandleRequestAsync>d__32")]
private Task HandleRequestAsync(RequestMessage request, CancellationToken serverClosing);
    private void CompleteRequest(ConcurrentDictionary`2& rpcStates, int reqId, Action`1<TaskCompletionSource`1<object>> completion);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<HandleRequestCoreAsync>d__34")]
private Task`1<object> HandleRequestCoreAsync(RequestMessage message, RpcInvocationState rpcInvocationState);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<ExecuteRequestAsync>d__35")]
private Task`1<ResponseArgsBase> ExecuteRequestAsync(RequestArgsBase args, string method, ServiceProvider perRequestServiceProvider);
    internal static Dictionary`2<string, object> GetDiscoveryMetrics(DiscoverRequestArgs args, DateTimeOffset requestStart, DateTimeOffset requestStop, DateTimeOffset adapterLoadStart, DateTimeOffset adapterLoadStop, DateTimeOffset requestExecuteStart, DateTimeOffset requestExecuteStop, long totalTestsDiscovered);
    internal static Dictionary`2<string, object> GetRunMetrics(RunRequestArgs args, DateTimeOffset requestStart, DateTimeOffset requestStop, DateTimeOffset adapterLoadStart, DateTimeOffset adapterLoadStop, DateTimeOffset requestExecuteStart, DateTimeOffset requestExecuteStop, TestNodeStatistics statistics);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendErrorAsync>d__38")]
private Task SendErrorAsync(int reqId, int errorCode, string message, object data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendResponseAsync>d__39")]
private Task SendResponseAsync(int reqId, object result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendMessageAsync>d__40")]
private Task SendMessageAsync(string method, object params, CancellationToken cancellationToken, bool checkServerExit, bool rethrowException);
    public sealed virtual void Dispose();
    internal Task SendTestUpdateCompleteAsync(Guid runId);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendTestUpdateAsync>d__43")]
public sealed virtual Task SendTestUpdateAsync(TestNodeStateChangedEventArgs update);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendTelemetryEventUpdateAsync>d__44")]
public sealed virtual Task SendTelemetryEventUpdateAsync(TelemetryEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendClientLaunchDebuggerAsync>d__45")]
public Task SendClientLaunchDebuggerAsync(ProcessInfoArgs args);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendClientAttachDebuggerAsync>d__46")]
public Task SendClientAttachDebuggerAsync(AttachDebuggerInfoArgs args);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<SendRequestAsync>d__47")]
private Task SendRequestAsync(string method, object params, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ServerTestHost/<PushDataAsync>d__48")]
public sealed virtual Task PushDataAsync(IData value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.TestFrameworkBuilderData : object {
    [CompilerGeneratedAttribute]
private ServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestExecutionRequestFactory <TestExecutionRequestFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestFrameworkInvoker <TestExecutionRequestInvoker>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestExecutionFilterFactory <TestExecutionFilterFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlatformOutputDevice <PlatformOutputDisplayService>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDataConsumer> <ServerPerCallConsumers>k__BackingField;
    [CompilerGeneratedAttribute]
private TestFrameworkManager <TestFrameworkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private TestHostManager <TestSessionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageBusProxy <MessageBusProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsForDiscoveryRequest>k__BackingField;
    public ServiceProvider ServiceProvider { get; }
    public ITestExecutionRequestFactory TestExecutionRequestFactory { get; }
    public ITestFrameworkInvoker TestExecutionRequestInvoker { get; }
    public ITestExecutionFilterFactory TestExecutionFilterFactory { get; }
    public IPlatformOutputDevice PlatformOutputDisplayService { get; }
    public IEnumerable`1<IDataConsumer> ServerPerCallConsumers { get; }
    public TestFrameworkManager TestFrameworkManager { get; }
    public TestHostManager TestSessionManager { get; }
    public MessageBusProxy MessageBusProxy { get; }
    public bool IsForDiscoveryRequest { get; }
    public TestFrameworkBuilderData(ServiceProvider serviceProvider, ITestExecutionRequestFactory testExecutionRequestFactory, ITestFrameworkInvoker testExecutionRequestInvoker, ITestExecutionFilterFactory testExecutionFilterFactory, IPlatformOutputDevice platformOutputDisplayService, IEnumerable`1<IDataConsumer> serverPerCallConsumers, TestFrameworkManager testFrameworkManager, TestHostManager testSessionManager, MessageBusProxy messageBusProxy, bool isForDiscoveryRequest);
    [CompilerGeneratedAttribute]
public ServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public ITestExecutionRequestFactory get_TestExecutionRequestFactory();
    [CompilerGeneratedAttribute]
public ITestFrameworkInvoker get_TestExecutionRequestInvoker();
    [CompilerGeneratedAttribute]
public ITestExecutionFilterFactory get_TestExecutionFilterFactory();
    [CompilerGeneratedAttribute]
public IPlatformOutputDevice get_PlatformOutputDisplayService();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDataConsumer> get_ServerPerCallConsumers();
    [CompilerGeneratedAttribute]
public TestFrameworkManager get_TestFrameworkManager();
    [CompilerGeneratedAttribute]
public TestHostManager get_TestSessionManager();
    [CompilerGeneratedAttribute]
public MessageBusProxy get_MessageBusProxy();
    [CompilerGeneratedAttribute]
public bool get_IsForDiscoveryRequest();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.TestFrameworkProxy : object {
    private ITestFramework _testFramework;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public TestFrameworkProxy(ITestFramework testFramework);
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual Task`1<CreateTestSessionResult> CreateTestSessionAsync(CreateTestSessionContext context);
    public sealed virtual Task ExecuteRequestAsync(ExecuteRequestContext context);
    public sealed virtual Task`1<CloseTestSessionResult> CloseTestSessionAsync(CloseTestSessionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.TestHostBuilder : object {
    [CompilerGeneratedAttribute]
private IRuntimeFeature <runtimeFeature>P;
    [CompilerGeneratedAttribute]
private IEnvironment <environment>P;
    [CompilerGeneratedAttribute]
private IProcessHandler <processHandler>P;
    private IFileSystem _fileSystem;
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITestFrameworkManager <TestFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestHostManager <TestHost>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationManager <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingManager <Logging>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlatformOutputDeviceManager <OutputDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommandLineManager <CommandLine>k__BackingField;
    [CompilerGeneratedAttribute]
private ITelemetryManager <Telemetry>k__BackingField;
    [CompilerGeneratedAttribute]
private IServerModeManager <ServerMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestHostControllersManager <TestHostControllers>k__BackingField;
    [CompilerGeneratedAttribute]
private IToolsManager <Tools>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestHostOrchestratorManager <TestHostOrchestratorManager>k__BackingField;
    [NullableAttribute("2")]
public ITestFrameworkManager TestFramework { get; public set; }
    public ITestHostManager TestHost { get; }
    public IConfigurationManager Configuration { get; }
    public ILoggingManager Logging { get; }
    public IPlatformOutputDeviceManager OutputDisplay { get; }
    public ICommandLineManager CommandLine { get; }
    public ITelemetryManager Telemetry { get; }
    public IServerModeManager ServerMode { get; }
    public ITestHostControllersManager TestHostControllers { get; }
    public IToolsManager Tools { get; }
    public ITestHostOrchestratorManager TestHostOrchestratorManager { get; }
    public TestHostBuilder(IFileSystem fileSystem, IRuntimeFeature runtimeFeature, IEnvironment environment, IProcessHandler processHandler, ITestApplicationModuleInfo testApplicationModuleInfo);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual ITestFrameworkManager get_TestFramework();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_TestFramework(ITestFrameworkManager value);
    [CompilerGeneratedAttribute]
public sealed virtual ITestHostManager get_TestHost();
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationManager get_Configuration();
    [CompilerGeneratedAttribute]
public sealed virtual ILoggingManager get_Logging();
    [CompilerGeneratedAttribute]
public sealed virtual IPlatformOutputDeviceManager get_OutputDisplay();
    [CompilerGeneratedAttribute]
public sealed virtual ICommandLineManager get_CommandLine();
    [CompilerGeneratedAttribute]
public sealed virtual ITelemetryManager get_Telemetry();
    [CompilerGeneratedAttribute]
public sealed virtual IServerModeManager get_ServerMode();
    [CompilerGeneratedAttribute]
public sealed virtual ITestHostControllersManager get_TestHostControllers();
    [CompilerGeneratedAttribute]
public sealed virtual IToolsManager get_Tools();
    [CompilerGeneratedAttribute]
public sealed virtual ITestHostOrchestratorManager get_TestHostOrchestratorManager();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostBuilder/<BuildAsync>d__40")]
public sealed virtual Task`1<ITestHost> BuildAsync(ApplicationLoggingState loggingState, TestApplicationOptions testApplicationOptions, IUnhandledExceptionsHandler unhandledExceptionsHandler, DateTimeOffset createBuilderStart);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostBuilder/<ConnectToTestHostProcessMonitorIfAvailableAsync>d__41")]
private static Task`1<NamedPipeClient> ConnectToTestHostProcessMonitorIfAvailableAsync(IProcessHandler processHandler, CTRLPlusCCancellationTokenSource testApplicationCancellationTokenSource, ILogger logger, TestHostControllerInfo testHostControllerInfo, AggregatedConfiguration configuration, SystemEnvironment environment);
    protected virtual void AddApplicationMetadata(IServiceProvider serviceProvider, Dictionary`2<string, object> builderMetadata);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostBuilder/<LogTestHostCreatedAsync>d__43")]
private static Task LogTestHostCreatedAsync(IServiceProvider serviceProvider, string mode, Dictionary`2<string, object> metrics, DateTimeOffset stop);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostBuilder/<BuildTestFrameworkAsync>d__44")]
private Task`1<ITestFramework> BuildTestFrameworkAsync(TestFrameworkBuilderData testFrameworkBuilderData);
    protected virtual ConsoleTestHost CreateConsoleTestHost(ServiceProvider serviceProvider, Func`2<TestFrameworkBuilderData, Task`1<ITestFramework>> buildTestFrameworkAsync, TestFrameworkManager testFrameworkManager, TestHostManager testHostManager, ITestApplicationModuleInfo testApplicationModuleInfo);
    protected virtual bool SkipAddingService(object service);
    protected virtual void AfterTestAdapterCreation(ServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostBuilder/<AddServiceIfNotSkippedAsync>d__48")]
private Task AddServiceIfNotSkippedAsync(object service, ServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostBuilder/<RegisterAsServiceOrConsumerOrBothAsync>d__49")]
private Task RegisterAsServiceOrConsumerOrBothAsync(object service, ServiceProvider serviceProvider, List`1<IDataConsumer> dataConsumersBuilder);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostBuilder/<DisplayBannerIfEnabledAsync>d__50")]
private Task DisplayBannerIfEnabledAsync(ApplicationLoggingState loggingState, IPlatformOutputDevice platformOutputDevice, ITestFrameworkCapabilities testFrameworkCapabilities);
}
internal class Microsoft.Testing.Platform.Hosts.TestHostControlledHost : object {
    [NullableAttribute("1")]
private NamedPipeClient _namedPipeClient;
    [NullableAttribute("1")]
private ITestHost _innerTestHost;
    private CancellationToken _cancellationToken;
    [NullableContextAttribute("1")]
public TestHostControlledHost(NamedPipeClient testHostControllerPipeClient, ITestHost innerTestHost, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostControlledHost/<RunAsync>d__4")]
public sealed virtual Task`1<int> RunAsync();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostControlledHost/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.TestHostControllersTestHost : CommonTestHost {
    private TestHostControllerConfiguration _testHostsInformation;
    private IEnvironment _environment;
    private IClock _clock;
    private ILoggerFactory _loggerFactory;
    private ILogger`1<TestHostControllersTestHost> _logger;
    private ManualResetEventSlim _waitForPid;
    private bool _testHostGracefullyClosed;
    private Nullable`1<int> _testHostExitCode;
    private Nullable`1<int> _testHostPID;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    protected bool RunTestApplicationLifeCycleCallbacks { get; }
    public TestHostControllersTestHost(TestHostControllerConfiguration testHostsInformation, ServiceProvider serviceProvider, IEnvironment environment, ILoggerFactory loggerFactory, IClock clock);
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    protected virtual bool get_RunTestApplicationLifeCycleCallbacks();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostControllersTestHost/<InternalRunAsync>d__21")]
protected virtual Task`1<int> InternalRunAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostControllersTestHost/<DisposeServicesAsync>d__22")]
private Task DisposeServicesAsync();
    private Task`1<IResponse> HandleRequestAsync(IRequest request);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.TestHostOrchestratorHost : object {
    private TestHostOrchestratorConfiguration _testHostOrchestratorConfiguration;
    private ServiceProvider _serviceProvider;
    public TestHostOrchestratorHost(TestHostOrchestratorConfiguration testHostOrchestratorConfiguration, ServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.TestHostOrchestratorHost/<RunAsync>d__3")]
public sealed virtual Task`1<int> RunAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Hosts.ToolsTestHost : object {
    private IReadOnlyList`1<ITool> _toolsInformation;
    private ServiceProvider _serviceProvider;
    private CommandLineHandler _commandLineHandler;
    private IPlatformOutputDevice _platformOutputDevice;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public ToolsTestHost(IReadOnlyList`1<ITool> toolsInformation, ServiceProvider serviceProvider, CommandLineHandler commandLineHandler, IPlatformOutputDevice platformOutputDevice);
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ToolsTestHost/<RunAsync>d__14")]
public sealed virtual Task`1<int> RunAsync();
    private bool UnknownOptions(String& error, ITool tool);
    private bool ExtensionArgumentArityAreInvalid(String& error, ITool tool);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ToolsTestHost/<ValidateOptionsArgumentsAsync>d__17")]
private Task`1<ValidationResult> ValidateOptionsArgumentsAsync(ITool tool);
    [IteratorStateMachineAttribute("Microsoft.Testing.Platform.Hosts.ToolsTestHost/<GetAllCommandLineOptionsProviderByOptionName>d__18")]
private IEnumerable`1<ICommandLineOptionsProvider> GetAllCommandLineOptionsProviderByOptionName(string optionName);
}
internal static class Microsoft.Testing.Platform.IPC.CommandLineOptionMessageFieldsId : object {
    public static ushort Name;
    public static ushort Description;
    public static ushort IsHidden;
    public static ushort IsBuiltIn;
}
internal static class Microsoft.Testing.Platform.IPC.CommandLineOptionMessagesFieldsId : object {
    public static int MessagesSerializerId;
    public static ushort ModulePath;
    public static ushort CommandLineOptionMessageList;
}
internal static class Microsoft.Testing.Platform.IPC.DiscoveredTestMessageFieldsId : object {
    public static int MessagesSerializerId;
    public static ushort Uid;
    public static ushort DisplayName;
    public static ushort ExecutionId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.DotnetTestDataConsumer : object {
    [NullableAttribute("2")]
private DotnetTestConnection _dotnetTestConnection;
    private IEnvironment _environment;
    public Type[] DataTypesConsumed { get; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    [NullableAttribute("2")]
private string ExecutionId { get; }
    public DotnetTestDataConsumer(DotnetTestConnection dotnetTestConnection, IEnvironment environment);
    public sealed virtual Type[] get_DataTypesConsumed();
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    [NullableContextAttribute("2")]
private string get_ExecutionId();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.DotnetTestDataConsumer/<ConsumeAsync>d__15")]
public sealed virtual Task ConsumeAsync(IDataProducer dataProducer, IData value, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static void GetTestNodeDetails(TestNodeUpdateMessage testNodeUpdateMessage, Nullable`1& state, String& reason, String& errorMessage, String& errorStackTrace);
    public sealed virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.DotnetTestDataConsumer/<OnTestSessionStartingAsync>d__18")]
public sealed virtual Task OnTestSessionStartingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.DotnetTestDataConsumer/<OnTestSessionFinishingAsync>d__19")]
public sealed virtual Task OnTestSessionFinishingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
}
internal static class Microsoft.Testing.Platform.IPC.FailedTestResultMessageFieldsId : object {
    public static int MessagesSerializerId;
    public static ushort Uid;
    public static ushort DisplayName;
    public static ushort State;
    public static ushort Reason;
    public static ushort ErrorMessage;
    public static ushort ErrorStackTrace;
    public static ushort SessionUid;
    public static ushort ExecutionId;
}
internal static class Microsoft.Testing.Platform.IPC.FileArtifactInfoFieldsId : object {
    public static int MessagesSerializerId;
    public static ushort FullPath;
    public static ushort DisplayName;
    public static ushort Description;
    public static ushort TestUid;
    public static ushort TestDisplayName;
    public static ushort SessionUid;
    public static ushort ExecutionId;
}
internal static class Microsoft.Testing.Platform.IPC.HandshakeInfoFieldsId : object {
    public static int MessagesSerializerId;
}
internal static class Microsoft.Testing.Platform.IPC.HandshakeInfoPropertyNames : object {
    internal static byte PID;
    internal static byte Architecture;
    internal static byte Framework;
    internal static byte OS;
    internal static byte SupportedProtocolVersions;
    internal static byte HostType;
    internal static byte ModulePath;
    internal static byte ExecutionId;
}
internal interface Microsoft.Testing.Platform.IPC.IClient {
    public bool IsConnected { get; }
    public abstract virtual bool get_IsConnected();
    [NullableContextAttribute("1")]
public abstract virtual Task ConnectAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TResponse> RequestReplyAsync(TRequest request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.IPC.INamedPipeBase {
    public abstract virtual void RegisterSerializer(INamedPipeSerializer namedPipeSerializer, Type type);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.IPC.INamedPipeSerializer {
    public int Id { get; }
    public abstract virtual int get_Id();
    public abstract virtual void Serialize(object objectToSerialize, Stream stream);
    public abstract virtual object Deserialize(Stream stream);
}
internal interface Microsoft.Testing.Platform.IPC.IRequest {
}
internal interface Microsoft.Testing.Platform.IPC.IResponse {
}
internal interface Microsoft.Testing.Platform.IPC.IServer {
    [NullableAttribute("1")]
public PipeNameDescription PipeName { get; }
    [NullableContextAttribute("1")]
public abstract virtual PipeNameDescription get_PipeName();
    [NullableContextAttribute("1")]
public abstract virtual Task WaitConnectionAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.CommandLineOptionMessage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsBuiltIn>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<bool> IsHidden { get; public set; }
    public Nullable`1<bool> IsBuiltIn { get; public set; }
    public CommandLineOptionMessage(string Name, string Description, Nullable`1<bool> IsHidden, Nullable`1<bool> IsBuiltIn);
    [CompilerGeneratedAttribute]
private CommandLineOptionMessage(CommandLineOptionMessage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHidden();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsBuiltIn();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsBuiltIn(Nullable`1<bool> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CommandLineOptionMessage left, CommandLineOptionMessage right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CommandLineOptionMessage left, CommandLineOptionMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CommandLineOptionMessage other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CommandLineOptionMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& Description, Nullable`1& IsHidden, Nullable`1& IsBuiltIn);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.CommandLineOptionMessages : object {
    [CompilerGeneratedAttribute]
private string <ModulePath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private CommandLineOptionMessage[] <CommandLineOptionMessageList>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string ModulePath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CommandLineOptionMessage[] CommandLineOptionMessageList { get; public set; }
    public CommandLineOptionMessages(string ModulePath, CommandLineOptionMessage[] CommandLineOptionMessageList);
    [CompilerGeneratedAttribute]
private CommandLineOptionMessages(CommandLineOptionMessages original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ModulePath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModulePath(string value);
    [CompilerGeneratedAttribute]
public CommandLineOptionMessage[] get_CommandLineOptionMessageList();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandLineOptionMessageList(CommandLineOptionMessage[] value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(CommandLineOptionMessages left, CommandLineOptionMessages right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(CommandLineOptionMessages left, CommandLineOptionMessages right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(CommandLineOptionMessages other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CommandLineOptionMessages <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& ModulePath, CommandLineOptionMessage[]& CommandLineOptionMessageList);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.DiscoveredTestMessage : object {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Uid { get; public set; }
    public string DisplayName { get; public set; }
    public string ExecutionId { get; public set; }
    public DiscoveredTestMessage(string Uid, string DisplayName, string ExecutionId);
    [CompilerGeneratedAttribute]
private DiscoveredTestMessage(DiscoveredTestMessage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DiscoveredTestMessage left, DiscoveredTestMessage right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DiscoveredTestMessage left, DiscoveredTestMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DiscoveredTestMessage other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DiscoveredTestMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Uid, String& DisplayName, String& ExecutionId);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.FailedTestResultMessage : object {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Uid { get; public set; }
    public string DisplayName { get; public set; }
    public Nullable`1<byte> State { get; public set; }
    public string Reason { get; public set; }
    public string ErrorMessage { get; public set; }
    public string ErrorStackTrace { get; public set; }
    public string SessionUid { get; public set; }
    public string ExecutionId { get; public set; }
    public FailedTestResultMessage(string Uid, string DisplayName, Nullable`1<byte> State, string Reason, string ErrorMessage, string ErrorStackTrace, string SessionUid, string ExecutionId);
    [CompilerGeneratedAttribute]
private FailedTestResultMessage(FailedTestResultMessage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_State();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_State(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reason(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorStackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_SessionUid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SessionUid(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FailedTestResultMessage left, FailedTestResultMessage right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FailedTestResultMessage left, FailedTestResultMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FailedTestResultMessage other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public FailedTestResultMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Uid, String& DisplayName, Nullable`1& State, String& Reason, String& ErrorMessage, String& ErrorStackTrace, String& SessionUid, String& ExecutionId);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.FileArtifactInfo : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string FullPath { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string TestUid { get; public set; }
    public string TestDisplayName { get; public set; }
    public string SessionUid { get; public set; }
    public string ExecutionId { get; public set; }
    public FileArtifactInfo(string FullPath, string DisplayName, string Description, string TestUid, string TestDisplayName, string SessionUid, string ExecutionId);
    [CompilerGeneratedAttribute]
private FileArtifactInfo(FileArtifactInfo original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FullPath(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_TestUid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestUid(string value);
    [CompilerGeneratedAttribute]
public string get_TestDisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_SessionUid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SessionUid(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(FileArtifactInfo left, FileArtifactInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(FileArtifactInfo left, FileArtifactInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(FileArtifactInfo other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public FileArtifactInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& FullPath, String& DisplayName, String& Description, String& TestUid, String& TestDisplayName, String& SessionUid, String& ExecutionId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.HandshakeInfo : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<byte, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<byte, string> Properties { get; public set; }
    public HandshakeInfo(Dictionary`2<byte, string> Properties);
    [CompilerGeneratedAttribute]
private HandshakeInfo(HandshakeInfo original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Dictionary`2<byte, string> get_Properties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Properties(Dictionary`2<byte, string> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(HandshakeInfo left, HandshakeInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(HandshakeInfo left, HandshakeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(HandshakeInfo other);
    [CompilerGeneratedAttribute]
public HandshakeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Dictionary`2& Properties);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.SuccessfulTestResultMessage : object {
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Uid { get; public set; }
    public string DisplayName { get; public set; }
    public Nullable`1<byte> State { get; public set; }
    public string Reason { get; public set; }
    public string SessionUid { get; public set; }
    public string ExecutionId { get; public set; }
    public SuccessfulTestResultMessage(string Uid, string DisplayName, Nullable`1<byte> State, string Reason, string SessionUid, string ExecutionId);
    [CompilerGeneratedAttribute]
private SuccessfulTestResultMessage(SuccessfulTestResultMessage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Uid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Uid(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_State();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_State(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reason(string value);
    [CompilerGeneratedAttribute]
public string get_SessionUid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SessionUid(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(SuccessfulTestResultMessage left, SuccessfulTestResultMessage right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(SuccessfulTestResultMessage left, SuccessfulTestResultMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SuccessfulTestResultMessage other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public SuccessfulTestResultMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Uid, String& DisplayName, Nullable`1& State, String& Reason, String& SessionUid, String& ExecutionId);
}
internal class Microsoft.Testing.Platform.IPC.Models.TestHostProcessExitRequest : object {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public int ExitCode { get; }
    public TestHostProcessExitRequest(int returnCode);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
}
internal class Microsoft.Testing.Platform.IPC.Models.TestHostProcessPIDRequest : object {
    [CompilerGeneratedAttribute]
private int <PID>k__BackingField;
    public int PID { get; }
    public TestHostProcessPIDRequest(int pid);
    [CompilerGeneratedAttribute]
public int get_PID();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Models.TestSessionEvent : object {
    [CompilerGeneratedAttribute]
private Nullable`1<byte> <SessionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionUid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Nullable`1<byte> SessionType { get; public set; }
    public string SessionUid { get; public set; }
    public string ExecutionId { get; public set; }
    public TestSessionEvent(Nullable`1<byte> SessionType, string SessionUid, string ExecutionId);
    [CompilerGeneratedAttribute]
private TestSessionEvent(TestSessionEvent original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<byte> get_SessionType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SessionType(Nullable`1<byte> value);
    [CompilerGeneratedAttribute]
public string get_SessionUid();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SessionUid(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TestSessionEvent left, TestSessionEvent right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TestSessionEvent left, TestSessionEvent right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestSessionEvent other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TestSessionEvent <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Nullable`1& SessionType, String& SessionUid, String& ExecutionId);
}
internal class Microsoft.Testing.Platform.IPC.Models.VoidResponse : object {
    [NullableAttribute("1")]
public static VoidResponse CachedInstance;
    private static VoidResponse();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Testing.Platform.IPC.NamedPipeBase : object {
    private Dictionary`2<Type, object> _typeSerializer;
    private Dictionary`2<int, object> _idSerializer;
    public sealed virtual void RegisterSerializer(INamedPipeSerializer namedPipeSerializer, Type type);
    protected INamedPipeSerializer GetSerializer(int id);
    protected INamedPipeSerializer GetSerializer(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.NamedPipeClient : NamedPipeBase {
    private NamedPipeClientStream _namedPipeClientStream;
    private SemaphoreSlim _lock;
    private MemoryStream _serializationBuffer;
    private MemoryStream _messageBuffer;
    private Byte[] _readBuffer;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    public string PipeName { get; }
    public bool IsConnected { get; }
    public NamedPipeClient(string name);
    [CompilerGeneratedAttribute]
public string get_PipeName();
    public sealed virtual bool get_IsConnected();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.NamedPipeClient/<ConnectAsync>d__12")]
public sealed virtual Task ConnectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.NamedPipeClient/<RequestReplyAsync>d__13`2")]
public sealed virtual Task`1<TResponse> RequestReplyAsync(TRequest request, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.NamedPipeClient/<DisposeAsync>d__15")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.NamedPipeServer : NamedPipeBase {
    private Func`2<IRequest, Task`1<IResponse>> _callback;
    private IEnvironment _environment;
    private NamedPipeServerStream _namedPipeServerStream;
    private ILogger _logger;
    private ITask _task;
    private CancellationToken _cancellationToken;
    private MemoryStream _serializationBuffer;
    private MemoryStream _messageBuffer;
    private Byte[] _readBuffer;
    [NullableAttribute("2")]
private Task _loopTask;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private PipeNameDescription <PipeName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasConnected>k__BackingField;
    public PipeNameDescription PipeName { get; }
    public bool WasConnected { get; private set; }
    public NamedPipeServer(string name, Func`2<IRequest, Task`1<IResponse>> callback, IEnvironment environment, ILogger logger, ITask task, CancellationToken cancellationToken);
    public NamedPipeServer(PipeNameDescription pipeNameDescription, Func`2<IRequest, Task`1<IResponse>> callback, IEnvironment environment, ILogger logger, ITask task, CancellationToken cancellationToken);
    public NamedPipeServer(PipeNameDescription pipeNameDescription, Func`2<IRequest, Task`1<IResponse>> callback, IEnvironment environment, ILogger logger, ITask task, int maxNumberOfServerInstances, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual PipeNameDescription get_PipeName();
    [CompilerGeneratedAttribute]
public bool get_WasConnected();
    [CompilerGeneratedAttribute]
private void set_WasConnected(bool value);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.NamedPipeServer/<WaitConnectionAsync>d__21")]
public sealed virtual Task WaitConnectionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.NamedPipeServer/<InternalLoopAsync>d__22")]
private Task InternalLoopAsync(CancellationToken cancellationToken);
    public static PipeNameDescription GetPipeName(string name);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.NamedPipeServer/<DisposeAsync>d__25")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.IPC.NamedPipeServer/<<WaitConnectionAsync>b__21_0>d")]
[CompilerGeneratedAttribute]
private Task <WaitConnectionAsync>b__21_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.PipeNameDescription : object {
    private bool _isDirectory;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public PipeNameDescription(string name, bool isDirectory);
    [CompilerGeneratedAttribute]
public string get_Name();
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
}
internal static class Microsoft.Testing.Platform.IPC.ProtocolConstants : object {
    [NullableAttribute("1")]
internal static string Version;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Testing.Platform.IPC.Serializers.BaseSerializer : object {
    protected static string ReadString(Stream stream);
    protected static void WriteString(Stream stream, string str);
    protected static void WriteStringSize(Stream stream, string str);
    [NullableContextAttribute("0")]
protected static void WriteSize(Stream stream);
    protected static void WriteInt(Stream stream, int value);
    protected static void WriteLong(Stream stream, long value);
    protected static void WriteShort(Stream stream, ushort value);
    protected static void WriteBool(Stream stream, bool value);
    protected static int ReadInt(Stream stream);
    protected static long ReadLong(Stream stream);
    protected static ushort ReadShort(Stream stream);
    protected static bool ReadBool(Stream stream);
    protected static byte ReadByte(Stream stream);
    protected static void WriteByte(Stream stream, byte value);
    protected static void WriteField(Stream stream, ushort id, string value);
    protected static void WriteField(Stream stream, string value);
    protected static void WriteField(Stream stream, Nullable`1<byte> value);
    protected static void WriteField(Stream stream, ushort id, Nullable`1<bool> value);
    protected static void WriteField(Stream stream, ushort id, Nullable`1<byte> value);
    protected static void SetPosition(Stream stream, long position);
    protected static void WriteAtPosition(Stream stream, int value, long position);
    [NullableContextAttribute("2")]
private static int GetSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Serializers.CommandLineOptionMessagesSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    public sealed virtual object Deserialize(Stream stream);
    private static List`1<CommandLineOptionMessage> ReadCommandLineOptionMessagesPayload(Stream stream);
    public sealed virtual void Serialize(object objectToSerialize, Stream stream);
    private static void WriteCommandLineOptionMessagesPayload(Stream stream, CommandLineOptionMessage[] commandLineOptionMessageList);
    private static ushort GetFieldCount(CommandLineOptionMessages commandLineOptionMessages);
    private static ushort GetFieldCount(CommandLineOptionMessage commandLineOptionMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Serializers.DiscoveredTestMessageSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    public sealed virtual object Deserialize(Stream stream);
    public sealed virtual void Serialize(object objectToSerialize, Stream stream);
    private static ushort GetFieldCount(DiscoveredTestMessage discoveredTestMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Serializers.FailedTestResultMessageSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    public sealed virtual object Deserialize(Stream stream);
    public sealed virtual void Serialize(object objectToSerialize, Stream stream);
    private static ushort GetFieldCount(FailedTestResultMessage testResultMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Serializers.FileArtifactInfoSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    public sealed virtual object Deserialize(Stream stream);
    public sealed virtual void Serialize(object objectToSerialize, Stream stream);
    private static ushort GetFieldCount(FileArtifactInfo fileArtifactInfo);
}
internal class Microsoft.Testing.Platform.IPC.Serializers.HandshakeInfoSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    [NullableContextAttribute("1")]
public sealed virtual object Deserialize(Stream stream);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(object objectToSerialize, Stream stream);
}
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.IPC.Serializers.RegisterSerializers : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RegisterAllSerializers(NamedPipeBase namedPipeBase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Serializers.SuccessfulTestResultMessageSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    public sealed virtual object Deserialize(Stream stream);
    public sealed virtual void Serialize(object objectToSerialize, Stream stream);
    private static ushort GetFieldCount(SuccessfulTestResultMessage testResultMessage);
}
internal class Microsoft.Testing.Platform.IPC.Serializers.TestHostProcessExitRequestSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    [NullableContextAttribute("1")]
public sealed virtual object Deserialize(Stream stream);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(object obj, Stream stream);
}
internal class Microsoft.Testing.Platform.IPC.Serializers.TestHostProcessPIDRequestSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    [NullableContextAttribute("1")]
public sealed virtual object Deserialize(Stream stream);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(object obj, Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.IPC.Serializers.TestSessionEventSerializer : BaseSerializer {
    public int Id { get; }
    public sealed virtual int get_Id();
    public sealed virtual object Deserialize(Stream stream);
    public sealed virtual void Serialize(object objectToSerialize, Stream stream);
    private static ushort GetFieldCount(TestSessionEvent testSessionEvent);
}
internal class Microsoft.Testing.Platform.IPC.Serializers.VoidResponseSerializer : object {
    public int Id { get; }
    public sealed virtual int get_Id();
    [NullableContextAttribute("1")]
public sealed virtual object Deserialize(Stream _);
    [NullableContextAttribute("1")]
public sealed virtual void Serialize(object _, Stream __);
}
internal static class Microsoft.Testing.Platform.IPC.SessionEventTypes : object {
    internal static byte TestSessionStart;
    internal static byte TestSessionEnd;
}
internal static class Microsoft.Testing.Platform.IPC.SuccessfulTestResultMessageFieldsId : object {
    public static int MessagesSerializerId;
    public static ushort Uid;
    public static ushort DisplayName;
    public static ushort State;
    public static ushort Reason;
    public static ushort SessionUid;
    public static ushort ExecutionId;
}
internal static class Microsoft.Testing.Platform.IPC.TestHostProcessExitRequestFieldsId : object {
    public static int MessagesSerializerId;
}
internal static class Microsoft.Testing.Platform.IPC.TestHostProcessPIDRequestFieldsId : object {
    public static int MessagesSerializerId;
}
internal static class Microsoft.Testing.Platform.IPC.TestSessionEventFieldsId : object {
    public static int MessagesSerializerId;
    public static ushort SessionType;
    public static ushort SessionUid;
    public static ushort ExecutionId;
}
internal static class Microsoft.Testing.Platform.IPC.TestStates : object {
    internal static byte Discovered;
    internal static byte Passed;
    internal static byte Skipped;
    internal static byte Failed;
    internal static byte Error;
    internal static byte Timeout;
    internal static byte Cancelled;
}
internal static class Microsoft.Testing.Platform.IPC.VoidResponseFieldsId : object {
    public static int MessagesSerializerId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.ApplicationLoggingState : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FileLoggerProvider <FileLoggerProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandLineParseResult <CommandLineParseResult>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSynchronousWrite>k__BackingField;
    [NullableAttribute("2")]
public FileLoggerProvider FileLoggerProvider { get; }
    public LogLevel LogLevel { get; }
    public CommandLineParseResult CommandLineParseResult { get; }
    public bool IsSynchronousWrite { get; }
    public ApplicationLoggingState(LogLevel logLevel, CommandLineParseResult commandLineParseResult);
    public ApplicationLoggingState(LogLevel logLevel, CommandLineParseResult commandLineParseResult, FileLoggerProvider fileLoggerProvider, bool isSynchronousWrite);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FileLoggerProvider get_FileLoggerProvider();
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public CommandLineParseResult get_CommandLineParseResult();
    [CompilerGeneratedAttribute]
public bool get_IsSynchronousWrite();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.FileLogger : object {
    private SemaphoreSlim _semaphore;
    private FileLoggerOptions _options;
    private LogLevel _logLevel;
    private IClock _clock;
    private IConsole _console;
    private IFileStream _fileStream;
    private StreamWriter _writer;
    [NullableAttribute("2")]
private Task _logLoop;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Channel`1<string> _channel;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; private set; }
    public FileLogger(FileLoggerOptions options, LogLevel logLevel, IClock clock, ITask task, IConsole console, IFileSystem fileSystem, IFileStreamFactory fileStreamFactory);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    private static IFileStream OpenFileStreamForAppend(IFileStreamFactory fileStreamFactory, string fileName);
    private IFileStream CreateFileStream(IFileStreamFactory fileStreamFactory, string fileName);
    public bool IsEnabled(LogLevel logLevel);
    public void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter, string category);
    private void InternalSyncLog(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter, string category);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.FileLogger/<LogAsync>d__20`1")]
public Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter, string category);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.FileLogger/<InternalAsyncLogAsync>d__21`1")]
private Task InternalAsyncLogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter, string category);
    private void EnqueueLog(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter, string category);
    private string BuildLogEntry(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter, string category);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.FileLogger/<WriteLogToFileAsync>d__24")]
private Task WriteLogToFileAsync();
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void EnsureAsyncLogObjectsAreNotNull();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.FileLogger/<DisposeAsync>d__27")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.FileLoggerCategory : object {
    private FileLogger _fileLogger;
    private string _category;
    public FileLoggerCategory(FileLogger fileLogger, string category);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.FileLoggerCategory/<LogAsync>d__5`1")]
public sealed virtual Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.FileLoggerInformation : object {
    [CompilerGeneratedAttribute]
private bool <SyncronousWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private FileInfo <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool SyncronousWrite { get; public set; }
    public FileInfo LogFile { get; public set; }
    public LogLevel LogLevel { get; public set; }
    public FileLoggerInformation(bool SyncronousWrite, FileInfo LogFile, LogLevel LogLevel);
    [CompilerGeneratedAttribute]
protected FileLoggerInformation(FileLoggerInformation original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SyncronousWrite();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SyncronousWrite(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FileInfo get_LogFile();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LogFile(FileInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LogLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(FileLoggerInformation left, FileLoggerInformation right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(FileLoggerInformation left, FileLoggerInformation right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(FileLoggerInformation other);
    [CompilerGeneratedAttribute]
public virtual FileLoggerInformation <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& SyncronousWrite, FileInfo& LogFile, LogLevel& LogLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.FileLoggerOptions : object {
    [CompilerGeneratedAttribute]
private string <LogFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogPrefixName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SyncFlush>k__BackingField;
    public string LogFolder { get; }
    public string LogPrefixName { get; }
    [NullableAttribute("2")]
public string FileName { get; }
    public bool SyncFlush { get; }
    public FileLoggerOptions(string logFolder, string logPrefixName, string fileName, bool syncFlush);
    [CompilerGeneratedAttribute]
public string get_LogFolder();
    [CompilerGeneratedAttribute]
public string get_LogPrefixName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public bool get_SyncFlush();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.FileLoggerProvider : object {
    private FileLoggerOptions _options;
    private IClock _clock;
    private ITask _task;
    private IConsole _console;
    private IFileSystem _fileSystem;
    private bool _customDirectory;
    private IFileStreamFactory _fileStreamFactory;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private FileLogger <FileLogger>k__BackingField;
    public LogLevel LogLevel { get; }
    public FileLogger FileLogger { get; private set; }
    public bool SyncFlush { get; }
    public FileLoggerProvider(FileLoggerOptions options, LogLevel logLevel, bool customDirectory, IClock clock, ITask task, IConsole console, IFileSystem fileSystem, IFileStreamFactory fileStreamFactory);
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public FileLogger get_FileLogger();
    [CompilerGeneratedAttribute]
private void set_FileLogger(FileLogger value);
    public bool get_SyncFlush();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.FileLoggerProvider/<CheckLogFolderAndMoveToTheNewIfNeededAsync>d__17")]
public sealed virtual Task CheckLogFolderAndMoveToTheNewIfNeededAsync(string testResultDirectory);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.FileLoggerProvider/<DisposeAsync>d__20")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Logging.IFileLoggerInformation {
    public bool SyncronousWrite { get; }
    public FileInfo LogFile { get; }
    public LogLevel LogLevel { get; }
    public abstract virtual bool get_SyncronousWrite();
    public abstract virtual FileInfo get_LogFile();
    public abstract virtual LogLevel get_LogLevel();
}
internal interface Microsoft.Testing.Platform.Logging.IFileLoggerProvider {
    [NullableContextAttribute("1")]
public abstract virtual Task CheckLogFolderAndMoveToTheNewIfNeededAsync(string testResultDirectory);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Logging.ILogger {
    public abstract virtual Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [NullableContextAttribute("2")]
public abstract virtual void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public abstract virtual bool IsEnabled(LogLevel logLevel);
}
public interface Microsoft.Testing.Platform.Logging.ILogger`1 {
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Logging.ILoggerFactory {
    public abstract virtual ILogger CreateLogger(string categoryName);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Logging.ILoggerProvider {
    public abstract virtual ILogger CreateLogger(string categoryName);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Logging.ILoggingManager {
    public abstract virtual void AddProvider(Func`3<LogLevel, IServiceProvider, ILoggerProvider> loggerProviderFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.Logger : object {
    private ILogger[] _loggers;
    private LogLevel _logLevel;
    public Logger(ILogger[] loggers, LogLevel logLevel);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.Logger/<LogAsync>d__5`1")]
public sealed virtual Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.Logger`1 : object {
    private ILogger _logger;
    public Logger`1(ILoggerFactory loggerFactory);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private static string GetCategoryName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.LoggerFactory : object {
    private object _sync;
    private ILoggerProvider[] _loggerProviders;
    private LogLevel _logLevel;
    private IMonitor _monitor;
    private Dictionary`2<string, Logger> _loggers;
    public LoggerFactory(ILoggerProvider[] loggerProviders, LogLevel logLevel, IMonitor monitor);
    public sealed virtual ILogger CreateLogger(string categoryName);
    private ILogger[] CreateLoggers(string categoryName);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.LoggerFactory/<DisposeAsync>d__9")]
public sealed virtual ValueTask DisposeAsync();
}
[ExtensionAttribute]
public static class Microsoft.Testing.Platform.Logging.LoggerFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILogger`1<TCategoryName> CreateLogger(ILoggerFactory factory);
}
internal class Microsoft.Testing.Platform.Logging.LoggerFactoryProxy : object {
    [NullableAttribute("2")]
private ILoggerFactory _loggerFactory;
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string categoryName);
    [NullableContextAttribute("1")]
public void SetLoggerFactory(ILoggerFactory loggerFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Testing.Platform.Logging.LoggingExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Func`3<string, Exception, string> Formatter;
    private static LoggingExtensions();
    [ExtensionAttribute]
public static Task LogTraceAsync(ILogger logger, string message);
    [ExtensionAttribute]
public static Task LogDebugAsync(ILogger logger, string message);
    [ExtensionAttribute]
public static Task LogInformationAsync(ILogger logger, string message);
    [ExtensionAttribute]
public static Task LogWarningAsync(ILogger logger, string message);
    [ExtensionAttribute]
public static Task LogErrorAsync(ILogger logger, string message);
    [ExtensionAttribute]
public static Task LogErrorAsync(ILogger logger, string message, Exception ex);
    [ExtensionAttribute]
public static Task LogErrorAsync(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static Task LogCriticalAsync(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogTrace(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogDebug(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogInformation(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogWarning(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogError(ILogger logger, string message);
    [ExtensionAttribute]
public static void LogError(ILogger logger, string message, Exception ex);
    [ExtensionAttribute]
public static void LogError(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void LogCritical(ILogger logger, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.LoggingManager : object {
    private List`1<Func`3<LogLevel, IServiceProvider, ILoggerProvider>> _loggerProviderFullFactories;
    public sealed virtual void AddProvider(Func`3<LogLevel, IServiceProvider, ILoggerProvider> loggerProviderFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.LoggingManager/<BuildAsync>d__2")]
internal Task`1<ILoggerFactory> BuildAsync(IServiceProvider serviceProvider, LogLevel logLevel, IMonitor monitor);
}
public enum Microsoft.Testing.Platform.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
    public static LogLevel None;
}
internal class Microsoft.Testing.Platform.Logging.NopLogger : object {
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [NullableContextAttribute("1")]
public sealed virtual Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.ServerLoggerForwarder : object {
    private LogLevel _logLevel;
    private IServerTestHost _serverTestHost;
    private Task _logLoop;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Channel`1<ServerLogMessage> _channel;
    private bool _isDisposed;
    public ServerLoggerForwarder(LogLevel logLevel, ITask task, IServerTestHost serverTestHost);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.ServerLoggerForwarder/<WriteLogMessageAsync>d__6")]
private Task WriteLogMessageAsync();
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.ServerLoggerForwarder/<LogAsync>d__9`1")]
public sealed virtual Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.ServerLoggerForwarder/<PushServerLogMessageToTheMessageBusAsync>d__10")]
private Task PushServerLogMessageToTheMessageBusAsync(ServerLogMessage logMessage);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void EnsureAsyncLogObjectsAreNotNull();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.ServerLoggerForwarder/<DisposeAsync>d__13")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.ServerLoggerForwarderProvider : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <serviceProvider>P;
    private LogLevel _logLevel;
    private ServerLogMessageInMemoryStore _serverLogMessageInMemoryStore;
    [NullableAttribute("2")]
private ServerTestHost _serverTestHost;
    public ServerLoggerForwarderProvider(LogLevel logLevel, IServiceProvider serviceProvider);
    public sealed virtual ILogger CreateLogger(string categoryName);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.ServerLoggerForwarderProvider/<InitializeAsync>d__6")]
public Task InitializeAsync(ServerTestHost serverTestHost);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.ServerLogMessage : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string DisplayName { get; }
    public string Description { get; }
    public LogLevel Level { get; }
    public string Message { get; }
    public ServerLogMessage(LogLevel level, string message);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public LogLevel get_Level();
    [CompilerGeneratedAttribute]
public string get_Message();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Logging.ServerLogMessageInMemoryStore : object {
    private LogLevel _logLevel;
    private ConcurrentBag`1<ServerLogMessage> _values;
    [NullableAttribute("2")]
private ServerTestHost _serverTestHost;
    public ServerLogMessageInMemoryStore(LogLevel logLevel);
    public void Initialize(ServerTestHost serverTestHost);
    public sealed virtual IEnumerator`1<ServerLogMessage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    [NullableContextAttribute("2")]
public sealed virtual void Log(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Logging.ServerLogMessageInMemoryStore/<LogAsync>d__9`1")]
public sealed virtual Task LogAsync(LogLevel logLevel, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public void Clean();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Testing.Platform.Logging.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static TypeNameHelper();
    [NullableContextAttribute("2")]
public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    [NullableContextAttribute("2")]
private static string ProcessType(StringBuilder& builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("DataConsumer = {DataConsumer.Uid}")]
internal class Microsoft.Testing.Platform.Messages.AsyncConsumerDataProcessor : object {
    private ITask _task;
    private CancellationToken _cancellationToken;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Channel`1<ValueTuple`2<IDataProducer, IData>> _channel;
    private TaskCompletionSource _consumerState;
    private Task _consumeTask;
    private long _totalPayloadReceived;
    private long _totalPayloadProcessed;
    [CompilerGeneratedAttribute]
private IDataConsumer <DataConsumer>k__BackingField;
    public IDataConsumer DataConsumer { get; }
    public AsyncConsumerDataProcessor(IDataConsumer consumer, ITask task, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public IDataConsumer get_DataConsumer();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsyncConsumerDataProcessor/<PublishAsync>d__11")]
public Task PublishAsync(IDataProducer dataProducer, IData data);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsyncConsumerDataProcessor/<ConsumeAsync>d__12")]
private Task ConsumeAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsyncConsumerDataProcessor/<CompleteAddingAsync>d__13")]
public Task CompleteAddingAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsyncConsumerDataProcessor/<DrainDataAsync>d__14")]
public Task`1<long> DrainDataAsync();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Messages.AsynchronousMessageBus : BaseMessageBus {
    private static int DefaultDrainAttempt;
    private ITask _task;
    private IEnvironment _environment;
    private ILogger`1<AsynchronousMessageBus> _logger;
    private bool _isTraceLoggingEnabled;
    private Dictionary`2<IDataConsumer, AsyncConsumerDataProcessor> _consumerProcessor;
    private Dictionary`2<Type, List`1<AsyncConsumerDataProcessor>> _dataTypeConsumers;
    private IDataConsumer[] _dataConsumers;
    private ITestApplicationCancellationTokenSource _testApplicationCancellationTokenSource;
    private bool _disabled;
    public IDataConsumer[] DataConsumerServices { get; }
    public AsynchronousMessageBus(IDataConsumer[] dataConsumers, ITestApplicationCancellationTokenSource testApplicationCancellationTokenSource, ITask task, ILoggerFactory loggerFactory, IEnvironment environment);
    public virtual IDataConsumer[] get_DataConsumerServices();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsynchronousMessageBus/<InitAsync>d__13")]
public virtual Task InitAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsynchronousMessageBus/<BuildConsumerProducersAsync>d__14")]
private Task BuildConsumerProducersAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsynchronousMessageBus/<PublishAsync>d__15")]
public virtual Task PublishAsync(IDataProducer dataProducer, IData data);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsynchronousMessageBus/<LogDataAsync>d__16")]
private Task LogDataAsync(IDataProducer dataProducer, IData data);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsynchronousMessageBus/<DrainDataAsync>d__17")]
public virtual Task DrainDataAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.AsynchronousMessageBus/<DisableAsync>d__18")]
public virtual Task DisableAsync();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Testing.Platform.Messages.BaseMessageBus : object {
    public IDataConsumer[] DataConsumerServices { get; }
    public abstract virtual IDataConsumer[] get_DataConsumerServices();
    public abstract virtual Task InitAsync();
    public abstract virtual Task DrainDataAsync();
    public abstract virtual Task DisableAsync();
    public abstract virtual Task PublishAsync(IDataProducer dataProducer, IData data);
    public abstract virtual void Dispose();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Messages.IMessageBus {
    public abstract virtual Task PublishAsync(IDataProducer dataProducer, IData data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Messages.ListTestsMessageBus : BaseMessageBus {
    private ITestFramework _testFramework;
    private ITestApplicationCancellationTokenSource _testApplicationCancellationTokenSource;
    private IOutputDevice _outputDisplay;
    private IEnvironment _environment;
    private ITestApplicationProcessExitCode _testApplicationProcessExitCode;
    [NullableAttribute("2")]
private DotnetTestConnection _dotnetTestConnection;
    [NullableAttribute("2")]
private DotnetTestDataConsumer _dotnetTestDataConsumer;
    private ILogger`1<ListTestsMessageBus> _logger;
    private IAsyncMonitor _asyncMonitor;
    private bool _printTitle;
    public IDataConsumer[] DataConsumerServices { get; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public ListTestsMessageBus(ITestFramework testFramework, ITestApplicationCancellationTokenSource testApplicationCancellationTokenSource, ILoggerFactory loggerFactory, IOutputDevice outputDisplay, IAsyncMonitorFactory asyncMonitorFactory, IEnvironment environment, ITestApplicationProcessExitCode testApplicationProcessExitCode, DotnetTestConnection dotnetTestConnection, DotnetTestDataConsumer dotnetTestDataConsumer);
    public virtual IDataConsumer[] get_DataConsumerServices();
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public virtual Task DisableAsync();
    public virtual void Dispose();
    public virtual Task DrainDataAsync();
    public virtual Task InitAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.ListTestsMessageBus/<PublishAsync>d__26")]
public virtual Task PublishAsync(IDataProducer dataProducer, IData data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Messages.MessageBusProxy : BaseMessageBus {
    [NullableAttribute("2")]
private BaseMessageBus _messageBus;
    public IDataConsumer[] DataConsumerServices { get; }
    public virtual IDataConsumer[] get_DataConsumerServices();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.MessageBusProxy/<InitAsync>d__3")]
public virtual Task InitAsync();
    public void SetBuiltMessageBus(BaseMessageBus messageBus);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.MessageBusProxy/<PublishAsync>d__5")]
public virtual Task PublishAsync(IDataProducer dataProducer, IData data);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.MessageBusProxy/<DrainDataAsync>d__6")]
public virtual Task DrainDataAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Messages.MessageBusProxy/<DisableAsync>d__7")]
public virtual Task DisableAsync();
    [MemberNotNullAttribute("_messageBus")]
private void EnsureMessageBusAvailable();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.Messages.TestNodePropertiesCategories : object {
    [CompilerGeneratedAttribute]
private static Type[] <WellKnownTestNodeDiscoveredProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private static Type[] <WellKnownTestNodeTestRunOutcomeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private static Type[] <WellKnownTestNodeTestRunOutcomeFailedProperties>k__BackingField;
    public static Type[] WellKnownTestNodeDiscoveredProperties { get; }
    public static Type[] WellKnownTestNodeTestRunOutcomeProperties { get; }
    public static Type[] WellKnownTestNodeTestRunOutcomeFailedProperties { get; }
    private static TestNodePropertiesCategories();
    [CompilerGeneratedAttribute]
public static Type[] get_WellKnownTestNodeDiscoveredProperties();
    [CompilerGeneratedAttribute]
public static Type[] get_WellKnownTestNodeTestRunOutcomeProperties();
    [CompilerGeneratedAttribute]
public static Type[] get_WellKnownTestNodeTestRunOutcomeFailedProperties();
}
internal class Microsoft.Testing.Platform.Messages.TestNodeStateStatistics : ValueType {
    [CompilerGeneratedAttribute]
private bool <HasPassed>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalPassedRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalFailedRetries>k__BackingField;
    public bool HasPassed { get; public set; }
    public long TotalPassedRetries { get; public set; }
    public long TotalFailedRetries { get; public set; }
    public TestNodeStateStatistics(bool HasPassed, long TotalPassedRetries, long TotalFailedRetries);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_HasPassed();
    [CompilerGeneratedAttribute]
public void set_HasPassed(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalPassedRetries();
    [CompilerGeneratedAttribute]
public void set_TotalPassedRetries(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalFailedRetries();
    [CompilerGeneratedAttribute]
public void set_TotalFailedRetries(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TestNodeStateStatistics left, TestNodeStateStatistics right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TestNodeStateStatistics left, TestNodeStateStatistics right);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TestNodeStateStatistics other);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public void Deconstruct(Boolean& HasPassed, Int64& TotalPassedRetries, Int64& TotalFailedRetries);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.OutputDevice.ExceptionOutputDeviceData : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public ExceptionOutputDeviceData(Exception exception);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceData : TextOutputDeviceData {
    [CompilerGeneratedAttribute]
private IColor <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private IColor <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Padding>k__BackingField;
    public IColor ForegroundColor { get; public set; }
    public IColor BackgroundColor { get; public set; }
    public Nullable`1<int> Padding { get; public set; }
    [NullableContextAttribute("1")]
public FormattedTextOutputDeviceData(string text);
    [CompilerGeneratedAttribute]
public IColor get_ForegroundColor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ForegroundColor(IColor value);
    [CompilerGeneratedAttribute]
public IColor get_BackgroundColor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BackgroundColor(IColor value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Padding();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Padding(Nullable`1<int> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.OutputDevice.FormattedTextOutputDeviceDataBuilder : object {
    public static FormattedTextOutputDeviceData CreateGreenConsoleColorText(string text);
    public static FormattedTextOutputDeviceData CreateRedConsoleColorText(string text);
    public static FormattedTextOutputDeviceData CreateYellowConsoleColorText(string text);
}
public interface Microsoft.Testing.Platform.OutputDevice.IColor {
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.OutputDevice.IOutputDevice {
    public abstract virtual Task DisplayAsync(IOutputDeviceDataProducer producer, IOutputDeviceData data);
}
public interface Microsoft.Testing.Platform.OutputDevice.IOutputDeviceData {
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.OutputDevice.IPlatformOutputDevice {
    public abstract virtual Task DisplayBannerAsync(string bannerMessage);
    public abstract virtual Task DisplayBeforeSessionStartAsync();
    public abstract virtual Task DisplayAfterSessionEndRunAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.OutputDevice.IPlatformOutputDeviceManager {
    public abstract virtual void SetPlatformOutputDevice(Func`2<IServiceProvider, IPlatformOutputDevice> provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.PlatformOutputDeviceManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IServiceProvider, IPlatformOutputDevice> _platformOutputDeviceFactory;
    public sealed virtual void SetPlatformOutputDevice(Func`2<IServiceProvider, IPlatformOutputDevice> platformOutputDeviceFactory);
    public IPlatformOutputDevice Build(ServiceProvider serviceProvider);
    public static TerminalOutputDevice GetDefaultTerminalOutputDevice(ServiceProvider serviceProvider);
}
public class Microsoft.Testing.Platform.OutputDevice.SystemConsoleColor : object {
    [CompilerGeneratedAttribute]
private ConsoleColor <ConsoleColor>k__BackingField;
    public ConsoleColor ConsoleColor { get; public set; }
    [CompilerGeneratedAttribute]
public ConsoleColor get_ConsoleColor();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConsoleColor(ConsoleColor value);
}
internal static class Microsoft.Testing.Platform.OutputDevice.TargetFrameworkParser : object {
    [NullableContextAttribute("2")]
public static string GetShortTargetFramework(string frameworkDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiCodes : object {
    public static string Esc;
    public static string CSI;
    public static string SetColor;
    public static string SetBold;
    public static string SetDefaultColor;
    public static string LinkPrefix;
    public static string LinkInfix;
    public static string LinkSuffix;
    public static string MoveUpToLineStart;
    public static string MoveForward;
    public static string MoveBackward;
    public static string EraseInDisplay;
    public static string EraseInLine;
    public static string HideCursor;
    public static string ShowCursor;
    public static string SetBusySpinner;
    public static string RemoveBusySpinner;
    public static string Colorize(string s, TerminalColor color);
    public static string MakeBold(string s);
    public static string MoveCursorBackward(int count);
    public static string SetCursorHorizontal(int column);
}
internal static class Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiDetector : object {
    [NullableAttribute("1")]
private static Regex[] TerminalsRegexes;
    private static AnsiDetector();
    [NullableContextAttribute("2")]
public static bool IsAnsiSupported(string termType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminal : object {
    private static String[] KnownFileExtensions;
    private IConsole _console;
    [NullableAttribute("2")]
private string _baseDirectory;
    private bool _useBusyIndicator;
    private StringBuilder _stringBuilder;
    private bool _isBatching;
    private AnsiTerminalTestProgressFrame _currentFrame;
    public int Width { get; }
    public int Height { get; }
    public AnsiTerminal(IConsole console, string baseDirectory);
    private static AnsiTerminal();
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
    public sealed virtual void Append(char value);
    public sealed virtual void Append(string value);
    public sealed virtual void AppendLine();
    public sealed virtual void AppendLine(string value);
    public sealed virtual void SetColor(TerminalColor color);
    public sealed virtual void ResetColor();
    public sealed virtual void ShowCursor();
    public sealed virtual void HideCursor();
    public sealed virtual void StartUpdate();
    public sealed virtual void StopUpdate();
    [NullableContextAttribute("2")]
public sealed virtual void AppendLink(string path, Nullable`1<int> lineNumber);
    public void MoveCursorUp(int lineCount);
    public void SetCursorHorizontal(int position);
    public sealed virtual void EraseProgress();
    public sealed virtual void RenderProgress(TestProgressState[] progress);
    public sealed virtual void StartBusyIndicator();
    public sealed virtual void StopBusyIndicator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.AnsiTerminalTestProgressFrame : object {
    private static int MaxColumn;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] _progressItems;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProgressCount>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public int ProgressCount { get; private set; }
    public AnsiTerminalTestProgressFrame(TestProgressState[] nodes, int width, int height);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public int get_ProgressCount();
    [CompilerGeneratedAttribute]
private void set_ProgressCount(int value);
    public void AppendTestWorkerProgress(int i, AnsiTerminal terminal);
    private static void AppendToWidth(AnsiTerminal terminal, string text, int width, Int32& charsTaken);
    public void Render(AnsiTerminalTestProgressFrame previousFrame, AnsiTerminal terminal);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.ErrorMessage : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Text { get; public set; }
    public ErrorMessage(string Text);
    [CompilerGeneratedAttribute]
protected ErrorMessage(ErrorMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ErrorMessage left, ErrorMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ErrorMessage left, ErrorMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ErrorMessage other);
    [CompilerGeneratedAttribute]
public virtual ErrorMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Text);
}
internal static class Microsoft.Testing.Platform.OutputDevice.Terminal.FileUtilities : object {
    internal static StringComparison PathComparison;
    [NullableAttribute("1")]
internal static StringComparer PathComparer;
    private static FileUtilities();
    public static bool GetIsFileSystemCaseSensitive();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.OutputDevice.Terminal.HumanReadableDurationFormatter : object {
    public static void Append(ITerminal terminal, TimeSpan duration, bool wrapInParentheses);
    private static string GetFormattedPart(int value, bool hasParentValue, string suffix, int paddingWitdh);
    public static string Render(TimeSpan duration, bool wrapInParentheses, bool showMilliseconds);
}
internal interface Microsoft.Testing.Platform.OutputDevice.Terminal.IProgressMessage {
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.OutputDevice.Terminal.ITerminal {
    public int Width { get; }
    public int Height { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
    public abstract virtual void Append(char value);
    public abstract virtual void Append(string value);
    public abstract virtual void AppendLine();
    public abstract virtual void AppendLine(string value);
    public abstract virtual void AppendLink(string path, Nullable`1<int> lineNumber);
    public abstract virtual void SetColor(TerminalColor color);
    public abstract virtual void ResetColor();
    public abstract virtual void ShowCursor();
    public abstract virtual void HideCursor();
    public abstract virtual void StartUpdate();
    public abstract virtual void StopUpdate();
    public abstract virtual void EraseProgress();
    public abstract virtual void RenderProgress(TestProgressState[] progress);
    public abstract virtual void StartBusyIndicator();
    public abstract virtual void StopBusyIndicator();
}
internal static class Microsoft.Testing.Platform.OutputDevice.Terminal.NativeMethods : object {
    internal static UInt32 FILE_TYPE_CHAR;
    internal static int STD_OUTPUT_HANDLE;
    internal static int STD_ERROR_HANDLE;
    internal static UInt32 ENABLE_VIRTUAL_TERMINAL_PROCESSING;
    private static Nullable`1<bool> s_isWindows;
    [SupportedOSPlatformGuardAttribute("windows")]
internal static bool IsWindows { get; }
    internal static bool get_IsWindows();
    internal static ValueTuple`3<bool, bool, Nullable`1<UInt32>> QueryIsScreenAndTryEnableAnsiColorCodes(StreamHandleType handleType);
    internal static void RestoreConsoleMode(Nullable`1<UInt32> originalConsoleMode, StreamHandleType handleType);
    [SupportedOSPlatformAttribute("windows")]
internal static IntPtr GetStdHandle(int nStdHandle);
    [SupportedOSPlatformAttribute("windows")]
internal static UInt32 GetFileType(IntPtr hFile);
    internal static bool GetConsoleMode(IntPtr hConsoleHandle, UInt32& lpMode);
    internal static bool SetConsoleMode(IntPtr hConsoleHandle, UInt32 dwMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.NonAnsiTerminal : object {
    private IConsole _console;
    private ConsoleColor _defaultForegroundColor;
    private StringBuilder _stringBuilder;
    private bool _isBatching;
    public int Width { get; }
    public int Height { get; }
    public NonAnsiTerminal(IConsole console);
    public sealed virtual int get_Width();
    public sealed virtual int get_Height();
    public sealed virtual void Append(char value);
    public sealed virtual void Append(string value);
    public sealed virtual void AppendLine();
    public sealed virtual void AppendLine(string value);
    public sealed virtual void AppendLink(string path, Nullable`1<int> lineNumber);
    public sealed virtual void SetColor(TerminalColor color);
    public sealed virtual void ResetColor();
    public sealed virtual void ShowCursor();
    public sealed virtual void HideCursor();
    public sealed virtual void StartUpdate();
    public sealed virtual void StopUpdate();
    private ConsoleColor ToConsoleColor(TerminalColor color);
    public sealed virtual void EraseProgress();
    public sealed virtual void RenderProgress(TestProgressState[] progress);
    public sealed virtual void StartBusyIndicator();
    public sealed virtual void StopBusyIndicator();
}
internal enum Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalColor : Enum {
    public int value__;
    public static TerminalColor Black;
    public static TerminalColor DarkRed;
    public static TerminalColor DarkGreen;
    public static TerminalColor DarkYellow;
    public static TerminalColor DarkBlue;
    public static TerminalColor DarkMagenta;
    public static TerminalColor DarkCyan;
    public static TerminalColor DarkWhite;
    public static TerminalColor Default;
    public static TerminalColor Gray;
    public static TerminalColor Red;
    public static TerminalColor Green;
    public static TerminalColor Yellow;
    public static TerminalColor Blue;
    public static TerminalColor Magenta;
    public static TerminalColor Cyan;
    public static TerminalColor White;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporter : object {
    private static String[] NewLineStrings;
    internal static string SingleIndentation;
    internal static string DoubleIndentation;
    internal static string TripleIndentation;
    [CompilerGeneratedAttribute]
private Func`1<IStopwatch> <CreateStopwatch>k__BackingField;
    private Dictionary`2<string, TestProgressState> _assemblies;
    private List`1<TestRunArtifact> _artifacts;
    private TerminalTestReporterOptions _options;
    private TestProgressStateAwareTerminal _terminalWithProgress;
    private Nullable`1<UInt32> _originalConsoleMode;
    private Nullable`1<DateTimeOffset> _testExecutionStartTime;
    private Nullable`1<DateTimeOffset> _testExecutionEndTime;
    private int _buildErrorsCount;
    private bool _wasCancelled;
    internal Func`1<IStopwatch> CreateStopwatch { get; internal set; }
    internal TerminalTestReporter(IConsole console, TerminalTestReporterOptions options);
    private static TerminalTestReporter();
    [CompilerGeneratedAttribute]
internal Func`1<IStopwatch> get_CreateStopwatch();
    [CompilerGeneratedAttribute]
internal void set_CreateStopwatch(Func`1<IStopwatch> value);
    [GeneratedRegexAttribute("^   at ((?<code>.+) in (?<file>.+):line (?<line>\d+)|(?<code1>.+))$", "4", "1000")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
private static Regex GetFrameRegex();
    public void TestExecutionStarted(DateTimeOffset testStartTime, int workerCount);
    [NullableContextAttribute("2")]
public void AssemblyRunStarted(string assembly, string targetFramework, string architecture);
    private TestProgressState GetOrAddAssemblyRun(string assembly, string targetFramework, string architecture);
    internal void TestExecutionCompleted(DateTimeOffset endTime);
    private void AppendTestRunSummary(ITerminal terminal);
    private static void AppendAssemblyResult(ITerminal terminal, bool succeeded, int countErrors, int countWarnings);
    [NullableContextAttribute("2")]
internal void TestCompleted(string assembly, string targetFramework, string architecture, string displayName, TestOutcome outcome, TimeSpan duration, string errorMessage, string errorStackTrace, string expected, string actual);
    [NullableContextAttribute("2")]
internal void RenderTestCompleted(ITerminal terminal, string assembly, string targetFramework, string architecture, string displayName, TestOutcome outcome, TimeSpan duration, string errorMessage, string errorStackTrace, string expected, string actual);
    private static void AppendAssemblyLinkTargetFrameworkAndArchitecture(ITerminal terminal, string assembly, string targetFramework, string architecture);
    private static void FormatStackTrace(ITerminal terminal, string errorStackTrace);
    internal static void AppendStackFrame(ITerminal terminal, string stackTraceLine);
    [NullableContextAttribute("2")]
private static void FormatExpectedAndActual(ITerminal terminal, string expected, string actual);
    private static void FormatErrorMessage(ITerminal terminal, string errorMessage);
    private static void AppendIndentedLine(ITerminal terminal, string message, string indent);
    [NullableContextAttribute("2")]
internal void AssemblyRunCompleted(string assembly, string targetFramework, string architecture);
    private static void AppendAssemblySummary(TestProgressState assemblyRun, ITerminal terminal);
    private static void AppendLongDuration(ITerminal terminal, TimeSpan duration, bool wrapInParentheses, bool colorize);
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
public void ArtifactAdded(bool outOfProcess, string assembly, string targetFramework, string architecture, string testName, string path);
    internal void StartCancelling();
    internal void WriteErrorMessage(string assembly, string targetFramework, string architecture, string text, Nullable`1<int> padding);
    internal void WriteWarningMessage(string assembly, string targetFramework, string architecture, string text, Nullable`1<int> padding);
    internal void WriteErrorMessage(string assembly, string targetFramework, string architecture, Exception exception);
    internal void WriteMessage(string text, SystemConsoleColor color, Nullable`1<int> padding);
    private static TerminalColor ToTerminalColor(ConsoleColor consoleColor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterCommandLineOptionsProvider : object {
    public static string NoProgressOption;
    public static string NoAnsiOption;
    public static string OutputOption;
    public static string OutputOptionNormalArgument;
    public static string OutputOptionDetailedArgument;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual IReadOnlyCollection`1<CommandLineOption> GetCommandLineOptions();
    public sealed virtual Task`1<ValidationResult> ValidateOptionArgumentsAsync(CommandLineOption commandOption, String[] arguments);
    public sealed virtual Task`1<ValidationResult> ValidateCommandLineOptionsAsync(ICommandLineOptions commandLineOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.TerminalTestReporterOptions : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <BaseDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPassedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowAssemblyStartAndComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumExpectedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Nullable`1<bool>> <ShowProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAnsi>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForceAnsi>k__BackingField;
    [NullableAttribute("2")]
public string BaseDirectory { get; public set; }
    public bool ShowPassedTests { get; public set; }
    public bool ShowAssembly { get; public set; }
    public bool ShowAssemblyStartAndComplete { get; public set; }
    public int MinimumExpectedTests { get; public set; }
    public Func`1<Nullable`1<bool>> ShowProgress { get; public set; }
    public bool UseAnsi { get; public set; }
    internal Nullable`1<bool> ForceAnsi { get; internal set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_BaseDirectory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BaseDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowPassedTests();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowPassedTests(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowAssembly();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowAssembly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowAssemblyStartAndComplete();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowAssemblyStartAndComplete(bool value);
    [CompilerGeneratedAttribute]
public int get_MinimumExpectedTests();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MinimumExpectedTests(int value);
    [CompilerGeneratedAttribute]
public Func`1<Nullable`1<bool>> get_ShowProgress();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShowProgress(Func`1<Nullable`1<bool>> value);
    [CompilerGeneratedAttribute]
public bool get_UseAnsi();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseAnsi(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ForceAnsi();
    [CompilerGeneratedAttribute]
internal Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ForceAnsi(Nullable`1<bool> value);
}
internal enum Microsoft.Testing.Platform.OutputDevice.Terminal.TestOutcome : Enum {
    public int value__;
    public static TestOutcome Error;
    public static TestOutcome Fail;
    public static TestOutcome Passed;
    public static TestOutcome Skipped;
    public static TestOutcome Timeout;
    public static TestOutcome Canceled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressState : object {
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private IStopwatch <Stopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IProgressMessage> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PassedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkippedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalTests>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Detail>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SlotIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastUpdate>k__BackingField;
    public string Assembly { get; }
    public string AssemblyName { get; }
    [NullableAttribute("2")]
public string TargetFramework { get; }
    [NullableAttribute("2")]
public string Architecture { get; }
    public IStopwatch Stopwatch { get; }
    public List`1<string> Attachments { get; }
    public List`1<IProgressMessage> Messages { get; }
    public int FailedTests { get; internal set; }
    public int PassedTests { get; internal set; }
    public int SkippedTests { get; internal set; }
    public int TotalTests { get; internal set; }
    [NullableAttribute("2")]
public string Detail { get; internal set; }
    public int SlotIndex { get; internal set; }
    public long LastUpdate { get; internal set; }
    public TestProgressState(string assembly, string targetFramework, string architecture, IStopwatch stopwatch);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TargetFramework();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public IStopwatch get_Stopwatch();
    [CompilerGeneratedAttribute]
public List`1<string> get_Attachments();
    [CompilerGeneratedAttribute]
public List`1<IProgressMessage> get_Messages();
    [CompilerGeneratedAttribute]
public int get_FailedTests();
    [CompilerGeneratedAttribute]
internal void set_FailedTests(int value);
    [CompilerGeneratedAttribute]
public int get_PassedTests();
    [CompilerGeneratedAttribute]
internal void set_PassedTests(int value);
    [CompilerGeneratedAttribute]
public int get_SkippedTests();
    [CompilerGeneratedAttribute]
internal void set_SkippedTests(int value);
    [CompilerGeneratedAttribute]
public int get_TotalTests();
    [CompilerGeneratedAttribute]
internal void set_TotalTests(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Detail();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Detail(string value);
    [CompilerGeneratedAttribute]
public int get_SlotIndex();
    [CompilerGeneratedAttribute]
internal void set_SlotIndex(int value);
    [CompilerGeneratedAttribute]
public long get_LastUpdate();
    [CompilerGeneratedAttribute]
internal void set_LastUpdate(long value);
    internal void AddError(string text);
    internal void AddWarning(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.TestProgressStateAwareTerminal : object {
    private CancellationTokenSource _cts;
    private object _lock;
    private ITerminal _terminal;
    private Func`1<Nullable`1<bool>> _showProgress;
    private bool _writeProgressImmediatelyAfterOutput;
    private int _updateEvery;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private TestProgressState[] _progressItems;
    private Nullable`1<bool> _showProgressCached;
    [NullableAttribute("2")]
private Thread _refresher;
    private long _counter;
    public TestProgressStateAwareTerminal(ITerminal terminal, Func`1<Nullable`1<bool>> showProgress, bool writeProgressImmediatelyAfterOutput, int updateEvery);
    private void ThreadProc();
    public int AddWorker(TestProgressState testWorker);
    public void StartShowingProgress(int workerCount);
    internal void StopShowingProgress();
    public sealed virtual void Dispose();
    internal void WriteToTerminal(Action`1<ITerminal> write);
    internal void RemoveWorker(int slotIndex);
    internal void UpdateWorker(int slotIndex);
    private bool GetShowProgress();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.TestRunArtifact : object {
    [CompilerGeneratedAttribute]
private bool <OutOfProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestName>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool OutOfProcess { get; public set; }
    public string Assembly { get; public set; }
    public string TargetFramework { get; public set; }
    public string Architecture { get; public set; }
    public string TestName { get; public set; }
    [NullableAttribute("1")]
public string Path { get; public set; }
    public TestRunArtifact(bool OutOfProcess, string Assembly, string TargetFramework, string Architecture, string TestName, string Path);
    [CompilerGeneratedAttribute]
protected TestRunArtifact(TestRunArtifact original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_OutOfProcess();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OutOfProcess(bool value);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_TestName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestName(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Path();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Path(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TestRunArtifact left, TestRunArtifact right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TestRunArtifact left, TestRunArtifact right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(TestRunArtifact other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual TestRunArtifact <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& OutOfProcess, String& Assembly, String& TargetFramework, String& Architecture, String& TestName, String& Path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.Terminal.WarningMessage : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Text { get; public set; }
    public WarningMessage(string Text);
    [CompilerGeneratedAttribute]
protected WarningMessage(WarningMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Text(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(WarningMessage left, WarningMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(WarningMessage left, WarningMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(WarningMessage other);
    [CompilerGeneratedAttribute]
public virtual WarningMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice : object {
    private static string TESTINGPLATFORM_CONSOLEOUTPUTDEVICE_SKIP_BANNER;
    private ITestApplicationCancellationTokenSource _testApplicationCancellationTokenSource;
    private IConsole _console;
    private ITestApplicationModuleInfo _testApplicationModuleInfo;
    private ITestHostControllerInfo _testHostControllerInfo;
    private IAsyncMonitor _asyncMonitor;
    private IRuntimeFeature _runtimeFeature;
    private IEnvironment _environment;
    private IProcessHandler _process;
    private IPlatformInformation _platformInformation;
    private ICommandLineOptions _commandLineOptions;
    [NullableAttribute("2")]
private IFileLoggerInformation _fileLoggerInformation;
    private ILoggerFactory _loggerFactory;
    private IClock _clock;
    [NullableAttribute("2")]
private string _longArchitecture;
    [NullableAttribute("2")]
private string _shortArchitecture;
    [NullableAttribute("2")]
private string _runtimeFramework;
    [NullableAttribute("2")]
private string _targetFramework;
    private string _assemblyName;
    private Char[] _dash;
    [NullableAttribute("2")]
private TerminalTestReporter _terminalTestReporter;
    private bool _firstCallTo_OnSessionStartingAsync;
    private bool _bannerDisplayed;
    private Nullable`1<TestRequestExecutionTimeInfo> _testRequestExecutionTimeInfo;
    private bool _isVSTestMode;
    private bool _isListTests;
    private bool _isServerMode;
    [NullableAttribute("2")]
private ILogger _logger;
    [CompilerGeneratedAttribute]
private Type[] <DataTypesConsumed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public Type[] DataTypesConsumed { get; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public TerminalOutputDevice(ITestApplicationCancellationTokenSource testApplicationCancellationTokenSource, IConsole console, ITestApplicationModuleInfo testApplicationModuleInfo, ITestHostControllerInfo testHostControllerInfo, IAsyncMonitor asyncMonitor, IRuntimeFeature runtimeFeature, IEnvironment environment, IProcessHandler process, IPlatformInformation platformInformation, ICommandLineOptions commandLineOptions, IFileLoggerInformation fileLoggerInformation, ILoggerFactory loggerFactory, IClock clock);
    public sealed virtual Task InitializeAsync();
    private string GetShortArchitecture(string runtimeIdentifier);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_DataTypesConsumed();
    [CompilerGeneratedAttribute]
public virtual string get_Uid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    public virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice/<LogDebugAsync>d__47")]
private Task LogDebugAsync(string message);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice/<DisplayBannerAsync>d__48")]
public virtual Task DisplayBannerAsync(string bannerMessage);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice/<DisplayBeforeSessionStartAsync>d__49")]
public sealed virtual Task DisplayBeforeSessionStartAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice/<DisplayAfterSessionEndRunAsync>d__50")]
public sealed virtual Task DisplayAfterSessionEndRunAsync();
    public sealed virtual Task OnTestSessionFinishingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
    public sealed virtual Task OnTestSessionStartingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice/<DisplayAsync>d__53")]
public sealed virtual Task DisplayAsync(IOutputDeviceDataProducer producer, IOutputDeviceData data);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.OutputDevice.TerminalOutputDevice/<ConsumeAsync>d__54")]
public sealed virtual Task ConsumeAsync(IDataProducer dataProducer, IData value, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <InitializeAsync>b__29_1();
    [CompilerGeneratedAttribute]
private void <InitializeAsync>b__29_2();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.OutputDevice.TextOutputDeviceData : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public TextOutputDeviceData(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Requests.ConsoleTestExecutionFilterFactory : object {
    private ICommandLineOptions _commandLineService;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public ConsoleTestExecutionFilterFactory(ICommandLineOptions commandLineService);
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual Task`1<ValueTuple`2<bool, ITestExecutionFilter>> TryCreateAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Requests.ConsoleTestExecutionRequestFactory : object {
    private ICommandLineOptions _commandLineService;
    private ITestExecutionFilterFactory _testExecutionFilterFactory;
    public ConsoleTestExecutionRequestFactory(ICommandLineOptions commandLineService, ITestExecutionFilterFactory testExecutionFilterFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Requests.ConsoleTestExecutionRequestFactory/<CreateRequestAsync>d__3")]
public sealed virtual Task`1<TestExecutionRequest> CreateRequestAsync(TestSessionContext session);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Requests.DiscoverTestExecutionRequest : TestExecutionRequest {
    public DiscoverTestExecutionRequest(TestSessionContext session, ITestExecutionFilter executionFilter);
    public DiscoverTestExecutionRequest(TestSessionContext session);
}
internal abstract class Microsoft.Testing.Platform.Requests.FilterExpression : object {
}
internal enum Microsoft.Testing.Platform.Requests.FilterOperator : Enum {
    public int value__;
    public static FilterOperator Not;
    public static FilterOperator And;
    public static FilterOperator Or;
    public static FilterOperator Equals;
}
[ExperimentalAttribute("TPEXP")]
public interface Microsoft.Testing.Platform.Requests.IExecuteRequestCompletionNotifier {
    public abstract virtual void Complete();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.Requests.IRequest {
    public TestSessionContext Session { get; }
    public abstract virtual TestSessionContext get_Session();
}
public interface Microsoft.Testing.Platform.Requests.ITestExecutionFilter {
}
internal interface Microsoft.Testing.Platform.Requests.ITestExecutionFilterFactory {
    public abstract virtual Task`1<ValueTuple`2<bool, ITestExecutionFilter>> TryCreateAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Requests.ITestExecutionRequestFactory {
    public abstract virtual Task`1<TestExecutionRequest> CreateRequestAsync(TestSessionContext session);
}
internal interface Microsoft.Testing.Platform.Requests.ITestFrameworkInvoker {
    [NullableContextAttribute("1")]
public abstract virtual Task ExecuteAsync(ITestFramework testFramework, ClientInfo client, CancellationToken cancellationToken);
}
internal class Microsoft.Testing.Platform.Requests.NopExpression : FilterExpression {
}
[ExperimentalAttribute("TPEXP")]
public class Microsoft.Testing.Platform.Requests.NopFilter : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Requests.OperatorExpression : FilterExpression {
    [CompilerGeneratedAttribute]
private FilterOperator <Op>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<FilterExpression> <SubExpressions>k__BackingField;
    public FilterOperator Op { get; }
    public IReadOnlyCollection`1<FilterExpression> SubExpressions { get; }
    public OperatorExpression(FilterOperator op, IReadOnlyCollection`1<FilterExpression> subExpressions);
    [CompilerGeneratedAttribute]
public FilterOperator get_Op();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<FilterExpression> get_SubExpressions();
}
internal enum Microsoft.Testing.Platform.Requests.OperatorKind : Enum {
    public int value__;
    public static OperatorKind None;
    public static OperatorKind Separator;
    public static OperatorKind LeftBrace;
    public static OperatorKind RightBrace;
    public static OperatorKind LeftParameter;
    public static OperatorKind RightParameter;
    public static OperatorKind FilterEquals;
    public static OperatorKind Or;
    public static OperatorKind And;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Requests.PropertyExpression : FilterExpression {
    [CompilerGeneratedAttribute]
private ValueExpression <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueExpression <Value>k__BackingField;
    public ValueExpression PropertyName { get; }
    public ValueExpression Value { get; }
    public PropertyExpression(ValueExpression propertyName, ValueExpression value);
    [CompilerGeneratedAttribute]
public ValueExpression get_PropertyName();
    [CompilerGeneratedAttribute]
public ValueExpression get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Requests.RunTestExecutionRequest : TestExecutionRequest {
    public RunTestExecutionRequest(TestSessionContext session, ITestExecutionFilter executionFilter);
    public RunTestExecutionRequest(TestSessionContext session);
}
internal class Microsoft.Testing.Platform.Requests.SemaphoreSlimRequestCompleteNotifier : object {
    [NullableAttribute("1")]
private SemaphoreSlim _semaphore;
    [NullableContextAttribute("1")]
public SemaphoreSlimRequestCompleteNotifier(SemaphoreSlim semaphore);
    public sealed virtual void Complete();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Requests.ServerTestExecutionFilterFactory : object {
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual Task`1<ValueTuple`2<bool, ITestExecutionFilter>> TryCreateAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Requests.ServerTestExecutionRequestFactory : object {
    private Func`2<TestSessionContext, TestExecutionRequest> _factory;
    public ServerTestExecutionRequestFactory(Func`2<TestSessionContext, TestExecutionRequest> factory);
    public sealed virtual Task`1<TestExecutionRequest> CreateRequestAsync(TestSessionContext session);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Testing.Platform.Requests.TestExecutionRequest : object {
    [CompilerGeneratedAttribute]
private ITestExecutionFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private TestSessionContext <Session>k__BackingField;
    public ITestExecutionFilter Filter { get; }
    public TestSessionContext Session { get; }
    protected TestExecutionRequest(TestSessionContext session, ITestExecutionFilter filter);
    [CompilerGeneratedAttribute]
public ITestExecutionFilter get_Filter();
    [CompilerGeneratedAttribute]
public sealed virtual TestSessionContext get_Session();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Requests.TestHostTestFrameworkInvoker : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    protected IServiceProvider ServiceProvider { get; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public Type[] DataTypesProduced { get; }
    public TestHostTestFrameworkInvoker(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Type[] get_DataTypesProduced();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Requests.TestHostTestFrameworkInvoker/<ExecuteAsync>d__15")]
public sealed virtual Task ExecuteAsync(ITestFramework testFramework, ClientInfo client, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Requests.TestHostTestFrameworkInvoker/<ExecuteRequestAsync>d__16")]
public virtual Task ExecuteRequestAsync(ITestFramework testFramework, TestExecutionRequest request, IMessageBus messageBus, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.Requests.TestHostTestFrameworkInvoker/<HandleTestSessionResultAsync>d__17")]
private Task HandleTestSessionResultAsync(bool isSuccess, string warningMessage, string errorMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.Requests.TestNodeUidListFilter : object {
    [CompilerGeneratedAttribute]
private TestNodeUid[] <TestNodeUids>k__BackingField;
    public TestNodeUid[] TestNodeUids { get; }
    public TestNodeUidListFilter(TestNodeUid[] testNodeUids);
    [CompilerGeneratedAttribute]
public TestNodeUid[] get_TestNodeUids();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("TPEXP")]
public class Microsoft.Testing.Platform.Requests.TreeNodeFilter : object {
    public static char PathSeparator;
    internal static char PropertyPerEdgeStartChar;
    internal static char PropertyPerEdgeEndChar;
    internal static string AllNodesBelowRegexString;
    private List`1<FilterExpression> _filters;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    public string Filter { get; }
    internal TreeNodeFilter(string filter);
    [CompilerGeneratedAttribute]
public string get_Filter();
    private static List`1<FilterExpression> ParseFilter(string filter);
    private static void ValidateExpression(FilterExpression expr, bool isMatchAllAllowed);
    private static void ProcessStackOperator(OperatorKind op, Stack`1<FilterExpression> expr, Stack`1<OperatorKind> ops);
    [IteratorStateMachineAttribute("Microsoft.Testing.Platform.Requests.TreeNodeFilter/<TokenizeFilter>d__12")]
private static IEnumerable`1<string> TokenizeFilter(string filter);
    public bool MatchesFilter(string testNodeFullPath, PropertyBag filterableProperties);
    private static bool MatchFilterPattern(FilterExpression filterExpression, string testNodeFullPath, int startFragmentIndex, int endFragmentIndex, PropertyBag properties);
    private static bool MatchFilterPattern(FilterExpression filterExpression, string testNodeFragment, PropertyBag properties);
    private static bool MatchProperties(FilterExpression propertyExpr, PropertyBag properties);
    [CompilerGeneratedAttribute]
internal static void <ParseFilter>g__ProcessHigherPrecedenceOperators|9_0(Stack`1<FilterExpression> expressionStack, Stack`1<OperatorKind> operatorStack, OperatorKind currentOp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Value}[{Properties}]")]
internal class Microsoft.Testing.Platform.Requests.ValueAndPropertyExpression : FilterExpression {
    [CompilerGeneratedAttribute]
private FilterExpression <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterExpression <Properties>k__BackingField;
    public FilterExpression Value { get; }
    public FilterExpression Properties { get; }
    public ValueAndPropertyExpression(FilterExpression value, FilterExpression properties);
    [CompilerGeneratedAttribute]
public FilterExpression get_Value();
    [CompilerGeneratedAttribute]
public FilterExpression get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Regex}")]
internal class Microsoft.Testing.Platform.Requests.ValueExpression : FilterExpression {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Regex <Regex>k__BackingField;
    public string Value { get; }
    public Regex Regex { get; }
    public ValueExpression(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public Regex get_Regex();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Testing.Platform.Resources.PlatformResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Aborted { get; }
    internal static string Actual { get; }
    internal static string CancelledLowercase { get; }
    internal static string CancellingTestSession { get; }
    internal static string CannotCreateTestExecutionFilterErrorMessage { get; }
    internal static string CannotCreateUniqueLogFileErrorMessage { get; }
    internal static string CannotRemoveEnvironmentVariableAtThisStageErrorMessage { get; }
    internal static string CannotRemoveEnvironmentVariableItIsLockedErrorMessage { get; }
    internal static string CannotSetEnvironmentVariableAtThisStageErrorMessage { get; }
    internal static string CannotSetEnvironmentVariableItIsLockedErrorMessage { get; }
    internal static string CannotStartProcessErrorMessage { get; }
    internal static string CommandLineInvalidArgumentsForOption { get; }
    internal static string CommandLineInvalidArityErrorMessage { get; }
    internal static string CommandLineInvalidConfiguration { get; }
    internal static string CommandLineInvalidOptionName { get; }
    internal static string CommandLineOptionExpectsAtLeastArguments { get; }
    internal static string CommandLineOptionExpectsAtMostArguments { get; }
    internal static string CommandLineOptionExpectsNoArguments { get; }
    internal static string CommandLineOptionIsDeclaredByMultipleProviders { get; }
    internal static string CommandLineOptionIsDeclaredByMultipleProvidersWorkaround { get; }
    internal static string CommandLineOptionIsReserved { get; }
    internal static string CommandLineOptionIsUsingReservedPrefix { get; }
    internal static string CommandLineOptionsNotReady { get; }
    internal static string CommandLineParserUnexpectedArgument { get; }
    internal static string CommandLineParserUnexpectedNullArgument { get; }
    internal static string CommandLineParserUnexpectedSingleQuoteInArgument { get; }
    internal static string CommandLineParserUnexpectedSingleQuoteInArgumentForOption { get; }
    internal static string CommandLineUnknownOption { get; }
    internal static string CompositeServiceFactoryInstanceAlreadyRegistered { get; }
    internal static string ConfigurationManagerCannotFindDefaultJsonConfigurationErrorMessage { get; }
    internal static string ConnectingToClientHost { get; }
    internal static string ConsoleIsAlreadyInBatchingMode { get; }
    internal static string ConsoleTestExecutionFilterFactoryDescription { get; }
    internal static string ConsoleTestExecutionFilterFactoryDisplayName { get; }
    internal static string CouldNotFindDirectoryErrorMessage { get; }
    internal static string DiagnosticFileLevelWithAsyncFlush { get; }
    internal static string DiagnosticFileLevelWithFlush { get; }
    internal static string EnvironmentVariableProviderFailedWithError { get; }
    internal static string Expected { get; }
    internal static string ExtensionDoesNotImplementGivenInterfaceErrorMessage { get; }
    internal static string ExtensionWithSameUidAlreadyRegisteredErrorMessage { get; }
    internal static string Failed { get; }
    internal static string FailedLowercase { get; }
    internal static string FailedToWriteLogToChannelErrorMessage { get; }
    internal static string FailedWithErrors { get; }
    internal static string FailedWithErrorsAndWarnings { get; }
    internal static string FailedWithWarnings { get; }
    internal static string ForTest { get; }
    internal static string FromFile { get; }
    internal static string GlobalValidationOfTestHostEnvironmentVariablesFailedErrorMessage { get; }
    internal static string HelpApplicationUsage { get; }
    internal static string HelpExecuteTestApplication { get; }
    internal static string HelpExtensionOptions { get; }
    internal static string HelpNoExtensionRegistered { get; }
    internal static string HelpOptions { get; }
    internal static string HelpTestApplicationRunner { get; }
    internal static string InProcessArtifactsProduced { get; }
    internal static string InternalLoopAsyncDidNotExitSuccessfullyErrorMessage { get; }
    internal static string InvalidCommandLineArguments { get; }
    internal static string JsonConfigurationFileParserDuplicateKeyErrorMessage { get; }
    internal static string JsonConfigurationFileParserTopLevelElementIsNotAnObjectErrorMessage { get; }
    internal static string JsonConfigurationFileParserUnsupportedTokenErrorMessage { get; }
    internal static string JsonRpcTcpServerDescription { get; }
    internal static string JsonRpcTcpServerToSingleClientDescription { get; }
    internal static string LoggerFactoryNotReady { get; }
    internal static string MessageBusNotReady { get; }
    internal static string MinimumExpectedTestsPolicyViolation { get; }
    internal static string MissingClientPortFoJsonRpc { get; }
    internal static string NoSerializerRegisteredWithIdErrorMessage { get; }
    internal static string NoSerializerRegisteredWithTypeErrorMessage { get; }
    internal static string NotAvailable { get; }
    internal static string NotFound { get; }
    internal static string OutOfProcessArtifactsProduced { get; }
    internal static string Passed { get; }
    internal static string PassedLowercase { get; }
    internal static string PlatformCommandLineClientHostOptionDescription { get; }
    internal static string PlatformCommandLineClientPortOptionDescription { get; }
    internal static string PlatformCommandLineDiagnosticFileLoggerSynchronousWriteOptionDescription { get; }
    internal static string PlatformCommandLineDiagnosticOptionDescription { get; }
    internal static string PlatformCommandLineDiagnosticOptionExpectsSingleArgumentErrorMessage { get; }
    internal static string PlatformCommandLineDiagnosticOptionIsMissing { get; }
    internal static string PlatformCommandLineDiagnosticOutputDirectoryOptionDescription { get; }
    internal static string PlatformCommandLineDiagnosticOutputFilePrefixOptionDescription { get; }
    internal static string PlatformCommandLineDiagnosticVerbosityOptionDescription { get; }
    internal static string PlatformCommandLineDiscoverTestsOptionDescription { get; }
    internal static string PlatformCommandLineDotnetTestPipe { get; }
    internal static string PlatformCommandLineExitOnProcessExitInvalidDependentProcess { get; }
    internal static string PlatformCommandLineExitOnProcessExitOptionDescription { get; }
    internal static string PlatformCommandLineExitOnProcessExitSingleArgument { get; }
    internal static string PlatformCommandLineHelpOptionDescription { get; }
    internal static string PlatformCommandLineIgnoreExitCodeOptionDescription { get; }
    internal static string PlatformCommandLineInfoOptionDescription { get; }
    internal static string PlatformCommandLineMinimumExpectedTestsIncompatibleDiscoverTests { get; }
    internal static string PlatformCommandLineMinimumExpectedTestsOptionSingleArgument { get; }
    internal static string PlatformCommandLineNoBannerOptionDescription { get; }
    internal static string PlatformCommandLinePortOptionDescription { get; }
    internal static string PlatformCommandLinePortOptionSingleArgument { get; }
    internal static string PlatformCommandLineProviderDescription { get; }
    internal static string PlatformCommandLineProviderDisplayName { get; }
    internal static string PlatformCommandLineResultDirectoryOptionDescription { get; }
    internal static string PlatformCommandLineServerOptionDescription { get; }
    internal static string PlatformCommandLineSkipBuildersNumberCheckOptionDescription { get; }
    internal static string PlatformCommandLineTestHostControllerPIDOptionDescription { get; }
    internal static string PlatformCommandLineTimeoutArgumentErrorMessage { get; }
    internal static string PlatformCommandLineTimeoutOptionDescription { get; }
    internal static string PlatformCommandLineVSTestAdapterModeOptionDescription { get; }
    internal static string ProcessHasNotYetExitedErrorMessage { get; }
    internal static string RetryFailedAfterTriesErrorMessage { get; }
    internal static string RunningTestsFrom { get; }
    internal static string ServerLogMessageDescription { get; }
    internal static string ServerLogMessageDisplayName { get; }
    internal static string ServerTestExecutionFilterFactoryDescription { get; }
    internal static string ServerTestExecutionFilterFactoryDisplayName { get; }
    internal static string ServiceProviderCannotFindServiceErrorMessage { get; }
    internal static string ServiceProviderServiceAlreadyRegistered { get; }
    internal static string ServiceProviderShouldNotRegisterTestFramework { get; }
    internal static string Skipped { get; }
    internal static string SkippedLowercase { get; }
    internal static string StackFrameAt { get; }
    internal static string StackFrameIn { get; }
    internal static string StackTrace { get; }
    internal static string StartingServer { get; }
    internal static string TelemetryNotice { get; }
    internal static string TelemetryProviderAlreadySetErrorMessage { get; }
    internal static string TerminalNoAnsiOptionDescription { get; }
    internal static string TerminalNoProgressOptionDescription { get; }
    internal static string TerminalOutputOptionDescription { get; }
    internal static string TerminalOutputOptionInvalidArgument { get; }
    internal static string TerminalTestReporterDescription { get; }
    internal static string TerminalTestReporterDisplayName { get; }
    internal static string TestAdapterInvokerFactoryAlreadySetErrorMessage { get; }
    internal static string TestApplicationBuilderApplicationAlreadyRegistered { get; }
    internal static string TestApplicationBuilderFrameworkAdapterFactoryAlreadyRegisteredErrorMessage { get; }
    internal static string TestApplicationBuilderTestFrameworkCapabilitiesAlreadyRegistered { get; }
    internal static string TestApplicationBuilderTestFrameworkNotRegistered { get; }
    internal static string TestApplicationResultDescription { get; }
    internal static string TestApplicationResultDisplayName { get; }
    internal static string TestApplicationVSTestModeTooManyBuilders { get; }
    internal static string TEstExecutionFilterFactoryFactoryAlreadySetErrorMessage { get; }
    internal static string TestFrameworkProxyApiShouldNotBeCalled { get; }
    internal static string TestHostAdapterInvokerFailedTestSessionErrorMessage { get; }
    internal static string TestProcessDidNotExitGracefullyErrorMessage { get; }
    internal static string TestRunSummary { get; }
    internal static string TimeoutAcquiringSemaphoreErrorMessage { get; }
    internal static string TimeoutFlushingLogsErrorMessage { get; }
    internal static string Total { get; }
    internal static string TreeNodeFilterCannotContainSlashCharacterErrorMessage { get; }
    internal static string TreeNodeFilterDescription { get; }
    internal static string TreeNodeFilterEscapeCharacterShouldNotBeLastErrorMessage { get; }
    internal static string TreeNodeFilterOnlyLastLevelCanContainMutiLevelWildcardErrorMessage { get; }
    internal static string TreeNodeFilterOperatorNotAllowedErrorMessage { get; }
    internal static string TreeNodeFilterPathShouldStartWithSlashErrorMessage { get; }
    internal static string TreeNodeFilterUnbalancedFilterErrorMessage { get; }
    internal static string TreeNodeFilterUnexpectedSlashOperatorErrorMessage { get; }
    internal static string UnexpectedCallTelemetryIsDisabledErrorMessage { get; }
    internal static string UnexpectedExceptionDuringByteConversionErrorMessage { get; }
    internal static string UnexpectedExceptionInFileLoggerErrorMessage { get; }
    internal static string UnexpectedStateErrorMessage { get; }
    internal static string UnknownCommunicationProtocolErrorMessage { get; }
    internal static string UnreachableLocationErrorMessage { get; }
    internal static string ZeroTestsRan { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Aborted();
    internal static string get_Actual();
    internal static string get_CancelledLowercase();
    internal static string get_CancellingTestSession();
    internal static string get_CannotCreateTestExecutionFilterErrorMessage();
    internal static string get_CannotCreateUniqueLogFileErrorMessage();
    internal static string get_CannotRemoveEnvironmentVariableAtThisStageErrorMessage();
    internal static string get_CannotRemoveEnvironmentVariableItIsLockedErrorMessage();
    internal static string get_CannotSetEnvironmentVariableAtThisStageErrorMessage();
    internal static string get_CannotSetEnvironmentVariableItIsLockedErrorMessage();
    internal static string get_CannotStartProcessErrorMessage();
    internal static string get_CommandLineInvalidArgumentsForOption();
    internal static string get_CommandLineInvalidArityErrorMessage();
    internal static string get_CommandLineInvalidConfiguration();
    internal static string get_CommandLineInvalidOptionName();
    internal static string get_CommandLineOptionExpectsAtLeastArguments();
    internal static string get_CommandLineOptionExpectsAtMostArguments();
    internal static string get_CommandLineOptionExpectsNoArguments();
    internal static string get_CommandLineOptionIsDeclaredByMultipleProviders();
    internal static string get_CommandLineOptionIsDeclaredByMultipleProvidersWorkaround();
    internal static string get_CommandLineOptionIsReserved();
    internal static string get_CommandLineOptionIsUsingReservedPrefix();
    internal static string get_CommandLineOptionsNotReady();
    internal static string get_CommandLineParserUnexpectedArgument();
    internal static string get_CommandLineParserUnexpectedNullArgument();
    internal static string get_CommandLineParserUnexpectedSingleQuoteInArgument();
    internal static string get_CommandLineParserUnexpectedSingleQuoteInArgumentForOption();
    internal static string get_CommandLineUnknownOption();
    internal static string get_CompositeServiceFactoryInstanceAlreadyRegistered();
    internal static string get_ConfigurationManagerCannotFindDefaultJsonConfigurationErrorMessage();
    internal static string get_ConnectingToClientHost();
    internal static string get_ConsoleIsAlreadyInBatchingMode();
    internal static string get_ConsoleTestExecutionFilterFactoryDescription();
    internal static string get_ConsoleTestExecutionFilterFactoryDisplayName();
    internal static string get_CouldNotFindDirectoryErrorMessage();
    internal static string get_DiagnosticFileLevelWithAsyncFlush();
    internal static string get_DiagnosticFileLevelWithFlush();
    internal static string get_EnvironmentVariableProviderFailedWithError();
    internal static string get_Expected();
    internal static string get_ExtensionDoesNotImplementGivenInterfaceErrorMessage();
    internal static string get_ExtensionWithSameUidAlreadyRegisteredErrorMessage();
    internal static string get_Failed();
    internal static string get_FailedLowercase();
    internal static string get_FailedToWriteLogToChannelErrorMessage();
    internal static string get_FailedWithErrors();
    internal static string get_FailedWithErrorsAndWarnings();
    internal static string get_FailedWithWarnings();
    internal static string get_ForTest();
    internal static string get_FromFile();
    internal static string get_GlobalValidationOfTestHostEnvironmentVariablesFailedErrorMessage();
    internal static string get_HelpApplicationUsage();
    internal static string get_HelpExecuteTestApplication();
    internal static string get_HelpExtensionOptions();
    internal static string get_HelpNoExtensionRegistered();
    internal static string get_HelpOptions();
    internal static string get_HelpTestApplicationRunner();
    internal static string get_InProcessArtifactsProduced();
    internal static string get_InternalLoopAsyncDidNotExitSuccessfullyErrorMessage();
    internal static string get_InvalidCommandLineArguments();
    internal static string get_JsonConfigurationFileParserDuplicateKeyErrorMessage();
    internal static string get_JsonConfigurationFileParserTopLevelElementIsNotAnObjectErrorMessage();
    internal static string get_JsonConfigurationFileParserUnsupportedTokenErrorMessage();
    internal static string get_JsonRpcTcpServerDescription();
    internal static string get_JsonRpcTcpServerToSingleClientDescription();
    internal static string get_LoggerFactoryNotReady();
    internal static string get_MessageBusNotReady();
    internal static string get_MinimumExpectedTestsPolicyViolation();
    internal static string get_MissingClientPortFoJsonRpc();
    internal static string get_NoSerializerRegisteredWithIdErrorMessage();
    internal static string get_NoSerializerRegisteredWithTypeErrorMessage();
    internal static string get_NotAvailable();
    internal static string get_NotFound();
    internal static string get_OutOfProcessArtifactsProduced();
    internal static string get_Passed();
    internal static string get_PassedLowercase();
    internal static string get_PlatformCommandLineClientHostOptionDescription();
    internal static string get_PlatformCommandLineClientPortOptionDescription();
    internal static string get_PlatformCommandLineDiagnosticFileLoggerSynchronousWriteOptionDescription();
    internal static string get_PlatformCommandLineDiagnosticOptionDescription();
    internal static string get_PlatformCommandLineDiagnosticOptionExpectsSingleArgumentErrorMessage();
    internal static string get_PlatformCommandLineDiagnosticOptionIsMissing();
    internal static string get_PlatformCommandLineDiagnosticOutputDirectoryOptionDescription();
    internal static string get_PlatformCommandLineDiagnosticOutputFilePrefixOptionDescription();
    internal static string get_PlatformCommandLineDiagnosticVerbosityOptionDescription();
    internal static string get_PlatformCommandLineDiscoverTestsOptionDescription();
    internal static string get_PlatformCommandLineDotnetTestPipe();
    internal static string get_PlatformCommandLineExitOnProcessExitInvalidDependentProcess();
    internal static string get_PlatformCommandLineExitOnProcessExitOptionDescription();
    internal static string get_PlatformCommandLineExitOnProcessExitSingleArgument();
    internal static string get_PlatformCommandLineHelpOptionDescription();
    internal static string get_PlatformCommandLineIgnoreExitCodeOptionDescription();
    internal static string get_PlatformCommandLineInfoOptionDescription();
    internal static string get_PlatformCommandLineMinimumExpectedTestsIncompatibleDiscoverTests();
    internal static string get_PlatformCommandLineMinimumExpectedTestsOptionSingleArgument();
    internal static string get_PlatformCommandLineNoBannerOptionDescription();
    internal static string get_PlatformCommandLinePortOptionDescription();
    internal static string get_PlatformCommandLinePortOptionSingleArgument();
    internal static string get_PlatformCommandLineProviderDescription();
    internal static string get_PlatformCommandLineProviderDisplayName();
    internal static string get_PlatformCommandLineResultDirectoryOptionDescription();
    internal static string get_PlatformCommandLineServerOptionDescription();
    internal static string get_PlatformCommandLineSkipBuildersNumberCheckOptionDescription();
    internal static string get_PlatformCommandLineTestHostControllerPIDOptionDescription();
    internal static string get_PlatformCommandLineTimeoutArgumentErrorMessage();
    internal static string get_PlatformCommandLineTimeoutOptionDescription();
    internal static string get_PlatformCommandLineVSTestAdapterModeOptionDescription();
    internal static string get_ProcessHasNotYetExitedErrorMessage();
    internal static string get_RetryFailedAfterTriesErrorMessage();
    internal static string get_RunningTestsFrom();
    internal static string get_ServerLogMessageDescription();
    internal static string get_ServerLogMessageDisplayName();
    internal static string get_ServerTestExecutionFilterFactoryDescription();
    internal static string get_ServerTestExecutionFilterFactoryDisplayName();
    internal static string get_ServiceProviderCannotFindServiceErrorMessage();
    internal static string get_ServiceProviderServiceAlreadyRegistered();
    internal static string get_ServiceProviderShouldNotRegisterTestFramework();
    internal static string get_Skipped();
    internal static string get_SkippedLowercase();
    internal static string get_StackFrameAt();
    internal static string get_StackFrameIn();
    internal static string get_StackTrace();
    internal static string get_StartingServer();
    internal static string get_TelemetryNotice();
    internal static string get_TelemetryProviderAlreadySetErrorMessage();
    internal static string get_TerminalNoAnsiOptionDescription();
    internal static string get_TerminalNoProgressOptionDescription();
    internal static string get_TerminalOutputOptionDescription();
    internal static string get_TerminalOutputOptionInvalidArgument();
    internal static string get_TerminalTestReporterDescription();
    internal static string get_TerminalTestReporterDisplayName();
    internal static string get_TestAdapterInvokerFactoryAlreadySetErrorMessage();
    internal static string get_TestApplicationBuilderApplicationAlreadyRegistered();
    internal static string get_TestApplicationBuilderFrameworkAdapterFactoryAlreadyRegisteredErrorMessage();
    internal static string get_TestApplicationBuilderTestFrameworkCapabilitiesAlreadyRegistered();
    internal static string get_TestApplicationBuilderTestFrameworkNotRegistered();
    internal static string get_TestApplicationResultDescription();
    internal static string get_TestApplicationResultDisplayName();
    internal static string get_TestApplicationVSTestModeTooManyBuilders();
    internal static string get_TEstExecutionFilterFactoryFactoryAlreadySetErrorMessage();
    internal static string get_TestFrameworkProxyApiShouldNotBeCalled();
    internal static string get_TestHostAdapterInvokerFailedTestSessionErrorMessage();
    internal static string get_TestProcessDidNotExitGracefullyErrorMessage();
    internal static string get_TestRunSummary();
    internal static string get_TimeoutAcquiringSemaphoreErrorMessage();
    internal static string get_TimeoutFlushingLogsErrorMessage();
    internal static string get_Total();
    internal static string get_TreeNodeFilterCannotContainSlashCharacterErrorMessage();
    internal static string get_TreeNodeFilterDescription();
    internal static string get_TreeNodeFilterEscapeCharacterShouldNotBeLastErrorMessage();
    internal static string get_TreeNodeFilterOnlyLastLevelCanContainMutiLevelWildcardErrorMessage();
    internal static string get_TreeNodeFilterOperatorNotAllowedErrorMessage();
    internal static string get_TreeNodeFilterPathShouldStartWithSlashErrorMessage();
    internal static string get_TreeNodeFilterUnbalancedFilterErrorMessage();
    internal static string get_TreeNodeFilterUnexpectedSlashOperatorErrorMessage();
    internal static string get_UnexpectedCallTelemetryIsDisabledErrorMessage();
    internal static string get_UnexpectedExceptionDuringByteConversionErrorMessage();
    internal static string get_UnexpectedExceptionInFileLoggerErrorMessage();
    internal static string get_UnexpectedStateErrorMessage();
    internal static string get_UnknownCommunicationProtocolErrorMessage();
    internal static string get_UnreachableLocationErrorMessage();
    internal static string get_ZeroTestsRan();
}
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Testing.Platform.RoslynDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Testing.Platform.RoslynHashCode : ValueType {
    private static UInt32 Prime1;
    private static UInt32 Prime2;
    private static UInt32 Prime3;
    private static UInt32 Prime4;
    private static UInt32 Prime5;
    private static UInt32 s_seed;
    private UInt32 _v1;
    private UInt32 _v2;
    private UInt32 _v3;
    private UInt32 _v4;
    private UInt32 _queue1;
    private UInt32 _queue2;
    private UInt32 _queue3;
    private UInt32 _length;
    private static RoslynHashCode();
    private static UInt32 GenerateGlobalSeed();
    public static int Combine(T1 value1);
    public static int Combine(T1 value1, T2 value2);
    public static int Combine(T1 value1, T2 value2, T3 value3);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    public static int Combine(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    private static void Initialize(UInt32& v1, UInt32& v2, UInt32& v3, UInt32& v4);
    private static UInt32 Round(UInt32 hash, UInt32 input);
    private static UInt32 QueueRound(UInt32 hash, UInt32 queuedValue);
    private static UInt32 MixState(UInt32 v1, UInt32 v2, UInt32 v3, UInt32 v4);
    private static UInt32 MixEmptyState();
    private static UInt32 MixFinal(UInt32 hash);
    public void Add(T value);
    public void Add(T value, IEqualityComparer`1<T> comparer);
    private void Add(int value);
    [IsReadOnlyAttribute]
public int ToHashCode();
    [IsReadOnlyAttribute]
[ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.", "True")]
[EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[ObsoleteAttribute("HashCode is a mutable struct and should not be compared with other HashCodes.", "True")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Testing.Platform.RoslynString : object {
    public static bool IsNullOrEmpty(string value);
    public static bool IsNullOrWhiteSpace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.Artifact : object {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Producer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Uri { get; public set; }
    public string Producer { get; public set; }
    public string Type { get; public set; }
    public string DisplayName { get; public set; }
    [NullableAttribute("2")]
public string Description { get; public set; }
    public Artifact(string Uri, string Producer, string Type, string DisplayName, string Description);
    [CompilerGeneratedAttribute]
protected Artifact(Artifact original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_Producer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Producer(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DisplayName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(Artifact left, Artifact right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(Artifact left, Artifact right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(Artifact other);
    [CompilerGeneratedAttribute]
public virtual Artifact <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Uri, String& Producer, String& Type, String& DisplayName, String& Description);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.AttachDebuggerInfoArgs : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int ProcessId { get; public set; }
    public AttachDebuggerInfoArgs(int ProcessId);
    [CompilerGeneratedAttribute]
protected AttachDebuggerInfoArgs(AttachDebuggerInfoArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AttachDebuggerInfoArgs left, AttachDebuggerInfoArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AttachDebuggerInfoArgs left, AttachDebuggerInfoArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AttachDebuggerInfoArgs other);
    [CompilerGeneratedAttribute]
public virtual AttachDebuggerInfoArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& ProcessId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.CancelRequestArgs : object {
    [CompilerGeneratedAttribute]
private int <CancelRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int CancelRequestId { get; public set; }
    public CancelRequestArgs(int CancelRequestId);
    [CompilerGeneratedAttribute]
protected CancelRequestArgs(CancelRequestArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_CancelRequestId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancelRequestId(int value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CancelRequestArgs left, CancelRequestArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CancelRequestArgs left, CancelRequestArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(CancelRequestArgs other);
    [CompilerGeneratedAttribute]
public virtual CancelRequestArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& CancelRequestId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ClientCapabilities : object {
    [CompilerGeneratedAttribute]
private bool <DebuggerProvider>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool DebuggerProvider { get; public set; }
    public ClientCapabilities(bool DebuggerProvider);
    [CompilerGeneratedAttribute]
protected ClientCapabilities(ClientCapabilities original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_DebuggerProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DebuggerProvider(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ClientCapabilities left, ClientCapabilities right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ClientCapabilities left, ClientCapabilities right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ClientCapabilities other);
    [CompilerGeneratedAttribute]
public virtual ClientCapabilities <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& DebuggerProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ClientInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public ClientInfo(string Name, string Version);
    [CompilerGeneratedAttribute]
protected ClientInfo(ClientInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ClientInfo left, ClientInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ClientInfo left, ClientInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ClientInfo other);
    [CompilerGeneratedAttribute]
public virtual ClientInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& Version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ClientTestingCapabilities : object {
    [CompilerGeneratedAttribute]
private bool <DebuggerProvider>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool DebuggerProvider { get; public set; }
    public ClientTestingCapabilities(bool DebuggerProvider);
    [CompilerGeneratedAttribute]
protected ClientTestingCapabilities(ClientTestingCapabilities original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_DebuggerProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DebuggerProvider(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ClientTestingCapabilities left, ClientTestingCapabilities right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ClientTestingCapabilities left, ClientTestingCapabilities right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ClientTestingCapabilities other);
    [CompilerGeneratedAttribute]
public virtual ClientTestingCapabilities <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& DebuggerProvider);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.DiscoverRequestArgs : RequestArgsBase {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DiscoverRequestArgs(Guid RunId, ICollection`1<TestNode> TestNodes, string GraphFilter);
    [CompilerGeneratedAttribute]
protected DiscoverRequestArgs(DiscoverRequestArgs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DiscoverRequestArgs left, DiscoverRequestArgs right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DiscoverRequestArgs left, DiscoverRequestArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RequestArgsBase other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(DiscoverRequestArgs other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override DiscoverRequestArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& RunId, ICollection`1& TestNodes, String& GraphFilter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.DiscoverResponseArgs : ResponseArgsBase {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected DiscoverResponseArgs(DiscoverResponseArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DiscoverResponseArgs left, DiscoverResponseArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DiscoverResponseArgs left, DiscoverResponseArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ResponseArgsBase other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DiscoverResponseArgs other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override DiscoverResponseArgs <Clone>$();
}
internal class Microsoft.Testing.Platform.ServerMode.ErrorCodes : object {
    public static int ParseError;
    public static int InvalidRequest;
    public static int MethodNotFound;
    public static int InvalidParams;
    public static int InternalError;
    public static int ServerNotInitialized;
    public static int LspErrorRangeStart;
    public static int RequestCanceled;
    public static int LspErrorRangeEnd;
    public static int TestingPlatformErrorRangeStart;
    public static int TestingPlatformErrorRangeEnd;
    private static ErrorCodes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ErrorMessage : RpcMessage {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int Id { get; public set; }
    public int ErrorCode { get; public set; }
    public string Message { get; public set; }
    [NullableAttribute("2")]
public object Data { get; public set; }
    public ErrorMessage(int Id, int ErrorCode, string Message, object Data);
    [CompilerGeneratedAttribute]
protected ErrorMessage(ErrorMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Message(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Data();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Data(object value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ErrorMessage left, ErrorMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ErrorMessage left, ErrorMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RpcMessage other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ErrorMessage other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override ErrorMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& Id, Int32& ErrorCode, String& Message, Object& Data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ExitRequestArgs : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected ExitRequestArgs(ExitRequestArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExitRequestArgs left, ExitRequestArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExitRequestArgs left, ExitRequestArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ExitRequestArgs other);
    [CompilerGeneratedAttribute]
public virtual ExitRequestArgs <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.FormatterUtilities : object {
    internal static IMessageFormatter CreateFormatter();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.ServerMode.ICommunicationProtocol {
    public string Name { get; }
    public string Version { get; }
    public string Description { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Version();
    public abstract virtual string get_Description();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.ServerMode.IMessageFormatter {
    public string Id { get; }
    public abstract virtual string get_Id();
    [NullableContextAttribute("0")]
public abstract virtual T Deserialize(ReadOnlyMemory`1<char> serializedUtf8Content);
    public abstract virtual Task`1<string> SerializeAsync(object obj);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.ServerMode.IMessageHandler {
    public abstract virtual Task`1<RpcMessage> ReadAsync(CancellationToken cancellationToken);
    public abstract virtual Task WriteRequestAsync(RpcMessage message, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.ServerMode.IMessageHandlerFactory {
    internal abstract virtual Task`1<IMessageHandler> CreateMessageHandlerAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.InitializeRequestArgs : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientInfo <ClientInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCapabilities <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int ProcessId { get; public set; }
    public ClientInfo ClientInfo { get; public set; }
    public ClientCapabilities Capabilities { get; public set; }
    public InitializeRequestArgs(int ProcessId, ClientInfo ClientInfo, ClientCapabilities Capabilities);
    [CompilerGeneratedAttribute]
protected InitializeRequestArgs(InitializeRequestArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public ClientInfo get_ClientInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClientInfo(ClientInfo value);
    [CompilerGeneratedAttribute]
public ClientCapabilities get_Capabilities();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Capabilities(ClientCapabilities value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(InitializeRequestArgs left, InitializeRequestArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(InitializeRequestArgs left, InitializeRequestArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(InitializeRequestArgs other);
    [CompilerGeneratedAttribute]
public virtual InitializeRequestArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& ProcessId, ClientInfo& ClientInfo, ClientCapabilities& Capabilities);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.InitializeResponseArgs : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerInfo <ServerInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ServerCapabilities <Capabilities>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Nullable`1<int> ProcessId { get; public set; }
    public ServerInfo ServerInfo { get; public set; }
    public ServerCapabilities Capabilities { get; public set; }
    public InitializeResponseArgs(Nullable`1<int> ProcessId, ServerInfo ServerInfo, ServerCapabilities Capabilities);
    [CompilerGeneratedAttribute]
protected InitializeResponseArgs(InitializeResponseArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ProcessId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ProcessId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public ServerInfo get_ServerInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ServerInfo(ServerInfo value);
    [CompilerGeneratedAttribute]
public ServerCapabilities get_Capabilities();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Capabilities(ServerCapabilities value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(InitializeResponseArgs left, InitializeResponseArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(InitializeResponseArgs left, InitializeResponseArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(InitializeResponseArgs other);
    [CompilerGeneratedAttribute]
public virtual InitializeResponseArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Nullable`1& ProcessId, ServerInfo& ServerInfo, ServerCapabilities& Capabilities);
}
[NullableContextAttribute("2")]
internal interface Microsoft.Testing.Platform.ServerMode.IObjectDeserializer {
    public abstract virtual object DeserializeObject(IDictionary`2<string, object> properties);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.ServerMode.IObjectSerializer {
    public abstract virtual IDictionary`2<string, object> SerializeObject(object obj);
}
internal interface Microsoft.Testing.Platform.ServerMode.IServerModeManager {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.Json.Json : object {
    private Dictionary`2<Type, JsonDeserializer> _deserializers;
    private Dictionary`2<Type, JsonSerializer> _serializers;
    private ObjectPool`1<MemoryStream> _memoryStreamPool;
    public Json(Dictionary`2<Type, JsonSerializer> serializers, Dictionary`2<Type, JsonDeserializer> deserializers);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.Json.Json/<SerializeAsync>d__4")]
public Task`1<string> SerializeAsync(object obj);
    [NullableContextAttribute("0")]
public T Deserialize(ReadOnlyMemory`1<char> utf8Json);
    internal T Bind(IEnumerable`1<JsonProperty> properties);
    [NullableContextAttribute("2")]
internal T Bind(JsonElement element, string property);
    [NullableContextAttribute("2")]
internal bool TryBind(JsonElement element, T& value, string property);
    [NullableContextAttribute("2")]
internal bool TryArrayBind(JsonElement element, T[]& value, string property);
    private T Deserialize(JsonElement element);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.Json.Json/<SerializeAsync>d__11")]
private Task SerializeAsync(object obj, Utf8JsonWriter writer);
    private static void ValidateJsonRpcHeader(Json json, JsonElement jsonElement);
}
internal abstract class Microsoft.Testing.Platform.ServerMode.Json.JsonCollectionDeserializer`1 : JsonDeserializer {
    [NullableContextAttribute("1")]
internal abstract virtual TCollection CreateObject(Json json, JsonElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Testing.Platform.ServerMode.Json.JsonCollectionDeserializer`2 : JsonCollectionDeserializer`1<TCollection> {
    private Func`2<JsonElement, TCollection> _createCollection;
    private Action`2<TCollection, TItem> _addItem;
    public JsonCollectionDeserializer`2(Func`2<JsonElement, TCollection> createCollection, Action`2<TCollection, TItem> addItem);
    public TCollection CreateCollection(JsonElement jsonElement);
    public void AddItem(TCollection collection, TItem item);
    internal virtual TCollection CreateObject(Json json, JsonElement element);
}
internal abstract class Microsoft.Testing.Platform.ServerMode.Json.JsonDeserializer : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.Json.JsonElementDeserializer`1 : JsonDeserializer {
    private Func`3<Json, JsonElement, T> _activator;
    public JsonElementDeserializer`1(Func`3<Json, JsonElement, T> createObject);
    internal T CreateObject(Json json, JsonElement element);
}
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.ServerMode.Json.JsonExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<JsonProperty> AllExcept(JsonElement element, String[] properties);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Testing.Platform.ServerMode.Json.JsoniteProperties : Dictionary`2<string, object> {
}
internal abstract class Microsoft.Testing.Platform.ServerMode.Json.JsonObjectSerializer : JsonSerializer {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<object, ValueTuple`2[]> <Properties>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, ValueTuple`2[]> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<object, ValueTuple`2[]> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Func`2<object, ValueTuple`2[]> value);
    [NullableContextAttribute("1")]
public ValueTuple`2[] GetProperties(object o);
}
internal class Microsoft.Testing.Platform.ServerMode.Json.JsonObjectSerializer`1 : JsonObjectSerializer {
    public JsonObjectSerializer`1(Func`2<T, ValueTuple`2[]> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.Json.JsonPropertyCollectionDeserializer`1 : JsonDeserializer {
    private Func`3<Json, IEnumerable`1<JsonProperty>, T> _creator;
    public JsonPropertyCollectionDeserializer`1(Func`3<Json, IEnumerable`1<JsonProperty>, T> creator);
    internal T CreateObject(Json json, IEnumerable`1<JsonProperty> properties);
}
internal abstract class Microsoft.Testing.Platform.ServerMode.Json.JsonSerializer : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Testing.Platform.ServerMode.Json.JsonValueSerializer : JsonSerializer {
    [CompilerGeneratedAttribute]
private Action`2<Utf8JsonWriter, object> <Serialize>k__BackingField;
    public Action`2<Utf8JsonWriter, object> Serialize { get; protected set; }
    [CompilerGeneratedAttribute]
public Action`2<Utf8JsonWriter, object> get_Serialize();
    [CompilerGeneratedAttribute]
protected void set_Serialize(Action`2<Utf8JsonWriter, object> value);
}
internal class Microsoft.Testing.Platform.ServerMode.Json.JsonValueSerializer`1 : JsonValueSerializer {
    [NullableContextAttribute("1")]
public JsonValueSerializer`1(Action`2<Utf8JsonWriter, T> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.ServerMode.JsonRpcMethods : object {
    public static string Initialize;
    public static string TestingDiscoverTests;
    public static string TestingRunTests;
    public static string TestingTestUpdatesTests;
    public static string TelemetryUpdate;
    public static string ClientLaunchDebugger;
    public static string ClientAttachDebugger;
    public static string ClientLog;
    public static string Exit;
    public static string CancelRequest;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.ServerMode.JsonRpcStrings : object {
    public static string JsonRpc;
    public static string Id;
    public static string Method;
    public static string Params;
    public static string Result;
    public static string Code;
    public static string Error;
    public static string Data;
    public static string ProcessId;
    public static string ClientInfo;
    public static string ServerInfo;
    public static string Name;
    public static string Version;
    public static string Capabilities;
    public static string Testing;
    public static string DebuggerProvider;
    public static string SupportsDiscovery;
    public static string MultiRequestSupport;
    public static string VSTestProviderSupport;
    public static string RunId;
    public static string Tests;
    public static string Filter;
    internal static string Parent;
    internal static string Node;
    internal static string Changes;
    public static string Level;
    public static string Message;
    public static string EventName;
    public static string Metrics;
    public static string Program;
    public static string Args;
    public static string WorkingDirectory;
    public static string EnvironmentVariables;
    public static string Attachments;
    public static string Uri;
    public static string Producer;
    public static string Type;
    public static string DisplayName;
    public static string Description;
    public static string Uid;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.JsonRpcTcpServerToSingleClient : object {
    [CompilerGeneratedAttribute]
private string <ClientHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClientPort>k__BackingField;
    public string ClientHostName { get; }
    public int ClientPort { get; }
    public string Name { get; }
    public string Version { get; }
    public string Description { get; }
    public JsonRpcTcpServerToSingleClient(string clientHostName, int clientPort);
    [CompilerGeneratedAttribute]
public string get_ClientHostName();
    [CompilerGeneratedAttribute]
public int get_ClientPort();
    public sealed virtual string get_Name();
    public sealed virtual string get_Version();
    public sealed virtual string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.LogEventArgs : object {
    [CompilerGeneratedAttribute]
private ServerLogMessage <LogMessage>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ServerLogMessage LogMessage { get; public set; }
    public LogEventArgs(ServerLogMessage LogMessage);
    [CompilerGeneratedAttribute]
protected LogEventArgs(LogEventArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ServerLogMessage get_LogMessage();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LogMessage(ServerLogMessage value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LogEventArgs left, LogEventArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LogEventArgs left, LogEventArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LogEventArgs other);
    [CompilerGeneratedAttribute]
public virtual LogEventArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ServerLogMessage& LogMessage);
}
internal class Microsoft.Testing.Platform.ServerMode.MessageFormatException : Exception {
    [NullableContextAttribute("1")]
public MessageFormatException(string err);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.NotificationMessage : RpcMessage {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Params>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Method { get; public set; }
    [NullableAttribute("2")]
public object Params { get; public set; }
    public NotificationMessage(string Method, object Params);
    [CompilerGeneratedAttribute]
protected NotificationMessage(NotificationMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Method(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Params();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Params(object value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(NotificationMessage left, NotificationMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(NotificationMessage left, NotificationMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RpcMessage other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(NotificationMessage other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override NotificationMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Method, Object& Params);
}
internal class Microsoft.Testing.Platform.ServerMode.ObjectDeserializer`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IDictionary`2<string, object>, T> _fn;
    public ObjectDeserializer`1(Func`2<IDictionary`2<string, object>, T> fn);
    [NullableContextAttribute("2")]
public sealed virtual object DeserializeObject(IDictionary`2<string, object> properties);
}
internal class Microsoft.Testing.Platform.ServerMode.ObjectSerializer`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<T, IDictionary`2<string, object>> _fn;
    public ObjectSerializer`1(Func`2<T, IDictionary`2<string, object>> fn);
    [NullableContextAttribute("1")]
public sealed virtual IDictionary`2<string, object> SerializeObject(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer : object {
    private static int TestNodeUpdateDelayInMs;
    private ConcurrentDictionary`2<TestNodeUid, TestNodeStateStatistics> _testNodeUidToStateStatistics;
    private ConcurrentDictionary`2<TestNodeUid, byte> _discoveredTestNodeUids;
    private SemaphoreSlim _nodeAggregatorSemaphore;
    private SemaphoreSlim _nodeUpdateSemaphore;
    private ITestSessionContext _testSessionContext;
    private TaskCompletionSource`1<bool> _testSessionEnd;
    private IServerTestHost _serverTestHost;
    private ITask _task;
    [NullableAttribute("2")]
private Task _idleUpdateTask;
    private TestNodeStateChangeAggregator _nodeUpdatesAggregator;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Type[] <DataTypesConsumed>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Artifact> <Artifacts>k__BackingField;
    public Type[] DataTypesConsumed { get; }
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public List`1<Artifact> Artifacts { get; }
    public PerRequestServerDataConsumer(IServiceProvider serviceProvider, IServerTestHost serverTestHost, Guid runId, ITask task);
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_DataTypesConsumed();
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public List`1<Artifact> get_Artifacts();
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public TestNodeStatistics GetTestNodeStatistics();
    internal Task GetIdleUpdateTaskAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer/<ProcessTestNodeUpdateAsync>d__30")]
private Task ProcessTestNodeUpdateAsync(TestNodeUpdateMessage update, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer/<SendTestNodeUpdatesOnIdleAsync>d__31")]
private Task SendTestNodeUpdatesOnIdleAsync(Guid runId);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer/<SendTestNodeUpdatesIfNecessaryAsync>d__32")]
private Task SendTestNodeUpdatesIfNecessaryAsync(Guid runId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer/<OnTestSessionFinishingAsync>d__33")]
public sealed virtual Task OnTestSessionFinishingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.PerRequestServerDataConsumer/<ConsumeAsync>d__34")]
public sealed virtual Task ConsumeAsync(IDataProducer dataProducer, IData value, CancellationToken cancellationToken);
    internal void PopulateTestNodeStatistics(TestNodeUpdateMessage message);
    private void AddOrUpdateTestNodeStateStatistics(TestNodeUid testNodeUid, bool hasPassed);
    public sealed virtual void Dispose();
    public sealed virtual Task OnTestSessionStartingAsync(SessionUid sessionUid, CancellationToken cancellationToken);
}
internal class Microsoft.Testing.Platform.ServerMode.PerRequestTestSessionContext : object {
    [NullableAttribute("1")]
private CancellationTokenSource _cancellationTokenSource;
    [CompilerGeneratedAttribute]
private SessionUid <SessionId>k__BackingField;
    public SessionUid SessionId { get; }
    public CancellationToken CancellationToken { get; }
    public PerRequestTestSessionContext(CancellationToken rpcCancellationToken, CancellationToken testApplicationcancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual SessionUid get_SessionId();
    public sealed virtual CancellationToken get_CancellationToken();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ProcessInfoArgs : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Program>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [NullableAttribute("1")]
public string Program { get; public set; }
    public string Args { get; public set; }
    public string WorkingDirectory { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    public ProcessInfoArgs(string Program, string Args, string WorkingDirectory, IDictionary`2<string, string> EnvironmentVariables);
    [CompilerGeneratedAttribute]
protected ProcessInfoArgs(ProcessInfoArgs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Program();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Program(string value);
    [CompilerGeneratedAttribute]
public string get_Args();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Args(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnvironmentVariables(IDictionary`2<string, string> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ProcessInfoArgs left, ProcessInfoArgs right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ProcessInfoArgs left, ProcessInfoArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(ProcessInfoArgs other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ProcessInfoArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Program, String& Args, String& WorkingDirectory, IDictionary`2& EnvironmentVariables);
}
internal class Microsoft.Testing.Platform.ServerMode.RemoteInvocationException : Exception {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.RequestArgsBase : object {
    [CompilerGeneratedAttribute]
private Guid <RunId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<TestNode> <TestNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GraphFilter>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Guid RunId { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<TestNode> TestNodes { get; public set; }
    public string GraphFilter { get; public set; }
    public RequestArgsBase(Guid RunId, ICollection`1<TestNode> TestNodes, string GraphFilter);
    [CompilerGeneratedAttribute]
protected RequestArgsBase(RequestArgsBase original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Guid get_RunId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RunId(Guid value);
    [CompilerGeneratedAttribute]
public ICollection`1<TestNode> get_TestNodes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestNodes(ICollection`1<TestNode> value);
    [CompilerGeneratedAttribute]
public string get_GraphFilter();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GraphFilter(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RequestArgsBase left, RequestArgsBase right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RequestArgsBase left, RequestArgsBase right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(RequestArgsBase other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual RequestArgsBase <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& RunId, ICollection`1& TestNodes, String& GraphFilter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.RequestMessage : RpcMessage {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Params>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int Id { get; public set; }
    public string Method { get; public set; }
    [NullableAttribute("2")]
public object Params { get; public set; }
    public RequestMessage(int Id, string Method, object Params);
    [CompilerGeneratedAttribute]
protected RequestMessage(RequestMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Method(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Params();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Params(object value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RequestMessage left, RequestMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RequestMessage left, RequestMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RpcMessage other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RequestMessage other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override RequestMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& Id, String& Method, Object& Params);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ResponseArgsBase : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected ResponseArgsBase(ResponseArgsBase original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResponseArgsBase left, ResponseArgsBase right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResponseArgsBase left, ResponseArgsBase right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ResponseArgsBase other);
    [CompilerGeneratedAttribute]
public virtual ResponseArgsBase <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ResponseMessage : RpcMessage {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int Id { get; public set; }
    public object Result { get; public set; }
    public ResponseMessage(int Id, object Result);
    [CompilerGeneratedAttribute]
protected ResponseMessage(ResponseMessage original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(int value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Result(object value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ResponseMessage left, ResponseMessage right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ResponseMessage left, ResponseMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RpcMessage other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(ResponseMessage other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override ResponseMessage <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& Id, Object& Result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Testing.Platform.ServerMode.RpcMessage : object {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
protected RpcMessage(RpcMessage original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RpcMessage left, RpcMessage right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RpcMessage left, RpcMessage right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RpcMessage other);
    [CompilerGeneratedAttribute]
public abstract virtual RpcMessage <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.RunRequestArgs : RequestArgsBase {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public RunRequestArgs(Guid RunId, ICollection`1<TestNode> TestNodes, string GraphFilter);
    [CompilerGeneratedAttribute]
protected RunRequestArgs(RunRequestArgs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RunRequestArgs left, RunRequestArgs right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RunRequestArgs left, RunRequestArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RequestArgsBase other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(RunRequestArgs other);
    [NullableContextAttribute("1")]
[PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override RunRequestArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& RunId, ICollection`1& TestNodes, String& GraphFilter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.RunResponseArgs : ResponseArgsBase {
    [CompilerGeneratedAttribute]
private Artifact[] <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Artifact[] Artifacts { get; public set; }
    public RunResponseArgs(Artifact[] Artifacts);
    [CompilerGeneratedAttribute]
protected RunResponseArgs(RunResponseArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Artifact[] get_Artifacts();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Artifacts(Artifact[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RunResponseArgs left, RunResponseArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RunResponseArgs left, RunResponseArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ResponseArgsBase other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(RunResponseArgs other);
    [PreserveBaseOverridesAttribute]
[CompilerGeneratedAttribute]
public virtual override RunResponseArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Artifact[]& Artifacts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.ServerMode.SerializerUtilities : object {
    private static Dictionary`2<Type, IObjectSerializer> Serializers;
    private static Dictionary`2<Type, IObjectDeserializer> Deserializers;
    public static IEnumerable`1<Type> SerializerTypes { get; }
    public static IEnumerable`1<Type> DeserializerTypes { get; }
    private static SerializerUtilities();
    public static IEnumerable`1<Type> get_SerializerTypes();
    public static IEnumerable`1<Type> get_DeserializerTypes();
    public static T Deserialize(IDictionary`2<string, object> properties);
    public static object Deserialize(Type t, IDictionary`2<string, object> properties);
    public static IDictionary`2<string, object> Serialize(T obj);
    public static IDictionary`2<string, object> SerializeObject(object obj);
    public static IDictionary`2<string, object> Serialize(Type t, object obj);
    private static void ValidateJsonRpcHeader(IDictionary`2<string, object> properties);
    private static object GetOptionalPropertyFromJson(IDictionary`2<string, object> properties, string propertyName);
    private static T GetRequiredPropertyFromJson(IDictionary`2<string, object> properties, string propertyName);
    [NullableContextAttribute("2")]
private static Nullable`1<int> GetIdFromJson(object idObj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ServerCapabilities : object {
    [CompilerGeneratedAttribute]
private ServerTestingCapabilities <TestingCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public ServerTestingCapabilities TestingCapabilities { get; public set; }
    public ServerCapabilities(ServerTestingCapabilities TestingCapabilities);
    [CompilerGeneratedAttribute]
protected ServerCapabilities(ServerCapabilities original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ServerTestingCapabilities get_TestingCapabilities();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TestingCapabilities(ServerTestingCapabilities value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ServerCapabilities left, ServerCapabilities right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ServerCapabilities left, ServerCapabilities right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ServerCapabilities other);
    [CompilerGeneratedAttribute]
public virtual ServerCapabilities <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(ServerTestingCapabilities& TestingCapabilities);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public ServerInfo(string Name, string Version);
    [CompilerGeneratedAttribute]
protected ServerInfo(ServerInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ServerInfo left, ServerInfo right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ServerInfo left, ServerInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ServerInfo other);
    [CompilerGeneratedAttribute]
public virtual ServerInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& Version);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ServerModeManager : object {
    [CompilerGeneratedAttribute]
private ICommunicationProtocol <CommunicationProtocol>k__BackingField;
    internal ICommunicationProtocol CommunicationProtocol { get; internal set; }
    [CompilerGeneratedAttribute]
internal ICommunicationProtocol get_CommunicationProtocol();
    [CompilerGeneratedAttribute]
internal void set_CommunicationProtocol(ICommunicationProtocol value);
    [NullableContextAttribute("1")]
internal IMessageHandlerFactory Build(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ServerModePerCallOutputDevice : object {
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual Task DisplayAfterSessionEndRunAsync();
    public sealed virtual Task DisplayAsync(IOutputDeviceDataProducer producer, IOutputDeviceData data);
    public sealed virtual Task DisplayBannerAsync(string bannerMessage);
    public sealed virtual Task DisplayBeforeSessionStartAsync();
    public sealed virtual Task`1<bool> IsEnabledAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.ServerTestingCapabilities : object {
    [CompilerGeneratedAttribute]
private bool <SupportsDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultiRequestSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VSTestProviderSupport>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool SupportsDiscovery { get; public set; }
    public bool MultiRequestSupport { get; public set; }
    public bool VSTestProviderSupport { get; public set; }
    public ServerTestingCapabilities(bool SupportsDiscovery, bool MultiRequestSupport, bool VSTestProviderSupport);
    [CompilerGeneratedAttribute]
protected ServerTestingCapabilities(ServerTestingCapabilities original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_SupportsDiscovery();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SupportsDiscovery(bool value);
    [CompilerGeneratedAttribute]
public bool get_MultiRequestSupport();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MultiRequestSupport(bool value);
    [CompilerGeneratedAttribute]
public bool get_VSTestProviderSupport();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VSTestProviderSupport(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ServerTestingCapabilities left, ServerTestingCapabilities right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ServerTestingCapabilities left, ServerTestingCapabilities right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ServerTestingCapabilities other);
    [CompilerGeneratedAttribute]
public virtual ServerTestingCapabilities <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& SupportsDiscovery, Boolean& MultiRequestSupport, Boolean& VSTestProviderSupport);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.StreamMessageHandler : object {
    private Stream _clientToServerStream;
    private Stream _serverToClientStream;
    private StreamReader _reader;
    private StreamWriter _writer;
    private IMessageFormatter _formatter;
    private bool _isDisposed;
    public StreamMessageHandler(Stream clientToServerStream, Stream serverToClientStream, IMessageFormatter formatter);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.StreamMessageHandler/<ReadAsync>d__7")]
public virtual Task`1<RpcMessage> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.StreamMessageHandler/<ReadHeadersAsync>d__8")]
private Task`1<ValueTuple`2<int, string>> ReadHeadersAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.StreamMessageHandler/<WriteRequestAsync>d__9")]
public sealed virtual Task WriteRequestAsync(RpcMessage message, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.TcpMessageHandler : StreamMessageHandler {
    private TcpClient _client;
    public TcpMessageHandler(TcpClient client, Stream clientToServerStream, Stream serverToClientStream, IMessageFormatter formatter);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.ServerMode.TcpMessageHandler/<ReadAsync>d__2")]
public virtual Task`1<RpcMessage> ReadAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<RpcMessage> <>n__0(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.TelemetryEventArgs : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string EventName { get; public set; }
    public IDictionary`2<string, object> Metrics { get; public set; }
    public TelemetryEventArgs(string EventName, IDictionary`2<string, object> Metrics);
    [CompilerGeneratedAttribute]
protected TelemetryEventArgs(TelemetryEventArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EventName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Metrics(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TelemetryEventArgs left, TelemetryEventArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TelemetryEventArgs left, TelemetryEventArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TelemetryEventArgs other);
    [CompilerGeneratedAttribute]
public virtual TelemetryEventArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& EventName, IDictionary`2& Metrics);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.ServerMode.TestNodeStateChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private Guid <RunId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private TestNodeUpdateMessage[] <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public Guid RunId { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TestNodeUpdateMessage[] Changes { get; public set; }
    public TestNodeStateChangedEventArgs(Guid RunId, TestNodeUpdateMessage[] Changes);
    [CompilerGeneratedAttribute]
protected TestNodeStateChangedEventArgs(TestNodeStateChangedEventArgs original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Guid get_RunId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RunId(Guid value);
    [CompilerGeneratedAttribute]
public TestNodeUpdateMessage[] get_Changes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Changes(TestNodeUpdateMessage[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TestNodeStateChangedEventArgs left, TestNodeStateChangedEventArgs right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TestNodeStateChangedEventArgs left, TestNodeStateChangedEventArgs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TestNodeStateChangedEventArgs other);
    [CompilerGeneratedAttribute]
public virtual TestNodeStateChangedEventArgs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Guid& RunId, TestNodeUpdateMessage[]& Changes);
}
internal class Microsoft.Testing.Platform.ServerMode.TestNodeStatistics : ValueType {
    [CompilerGeneratedAttribute]
private long <TotalDiscoveredTests>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalPassedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalFailedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalPassedRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalFailedRetries>k__BackingField;
    public long TotalDiscoveredTests { get; public set; }
    public long TotalPassedTests { get; public set; }
    public long TotalFailedTests { get; public set; }
    public long TotalPassedRetries { get; public set; }
    public long TotalFailedRetries { get; public set; }
    public TestNodeStatistics(long totalDiscoveredTests, long totalPassedTests, long totalFailedTests, long totalPassedRetries, long totalFailedRetries);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalDiscoveredTests();
    [CompilerGeneratedAttribute]
public void set_TotalDiscoveredTests(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalPassedTests();
    [CompilerGeneratedAttribute]
public void set_TotalPassedTests(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalFailedTests();
    [CompilerGeneratedAttribute]
public void set_TotalFailedTests(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalPassedRetries();
    [CompilerGeneratedAttribute]
public void set_TotalPassedRetries(long value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public long get_TotalFailedRetries();
    [CompilerGeneratedAttribute]
public void set_TotalFailedRetries(long value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Services.ClientInfoService : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Id { get; public set; }
    public string Version { get; public set; }
    public ClientInfoService(string Id, string Version);
    [CompilerGeneratedAttribute]
private ClientInfoService(ClientInfoService original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ClientInfoService left, ClientInfoService right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ClientInfoService left, ClientInfoService right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ClientInfoService other);
    [CompilerGeneratedAttribute]
public ClientInfoService <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Id, String& Version);
}
internal class Microsoft.Testing.Platform.Services.CTRLPlusCCancellationTokenSource : object {
    [NullableAttribute("1")]
private CancellationTokenSource _cancellationTokenSource;
    [NullableAttribute("2")]
private ILogger _logger;
    public CancellationToken CancellationToken { get; }
    [NullableContextAttribute("2")]
public CTRLPlusCCancellationTokenSource(IConsole console, ILogger logger);
    public void CancelAfter(TimeSpan timeout);
    public sealed virtual CancellationToken get_CancellationToken();
    [NullableContextAttribute("1")]
private void OnConsoleCancelKeyPressed(object sender, ConsoleCancelEventArgs e);
    public sealed virtual void Dispose();
    public sealed virtual void Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Services.CurrentTestApplicationModuleInfo : object {
    private IEnvironment _environment;
    private IProcessHandler _process;
    private static String[] MuxerExec;
    public bool IsCurrentTestApplicationHostDotnetMuxer { get; }
    public bool IsCurrentTestApplicationModuleExecutable { get; }
    public bool IsAppHostOrSingleFileOrNativeAot { get; }
    public CurrentTestApplicationModuleInfo(IEnvironment environment, IProcessHandler process);
    private static CurrentTestApplicationModuleInfo();
    public sealed virtual bool get_IsCurrentTestApplicationHostDotnetMuxer();
    public sealed virtual bool get_IsCurrentTestApplicationModuleExecutable();
    public sealed virtual bool get_IsAppHostOrSingleFileOrNativeAot();
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3000:Avoid accessing Assembly file path when publishing as a single file")]
public sealed virtual string GetCurrentTestApplicationFullPath();
    public sealed virtual string GetProcessPath();
    public sealed virtual String[] GetCommandLineArgs();
    public sealed virtual string GetCommandLineArguments();
    private static string GetProcessPath(IEnvironment environment, IProcessHandler process, bool throwOnNull);
    public sealed virtual ExecutableInfo GetCurrentExecutableInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Services.ExecutableInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Workspace>k__BackingField;
    public string FileName { get; }
    public IEnumerable`1<string> Arguments { get; }
    public string Workspace { get; }
    public ExecutableInfo(string fileName, IEnumerable`1<string> arguments, string workspace);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public string get_Workspace();
}
[NullableContextAttribute("1")]
[ExperimentalAttribute("TPEXP")]
public interface Microsoft.Testing.Platform.Services.IClientInfo {
    public string Id { get; }
    public string Version { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Version();
}
[NullableContextAttribute("2")]
[ExperimentalAttribute("TPEXP")]
public interface Microsoft.Testing.Platform.Services.IPlatformInformation {
    [NullableAttribute("1")]
public string Name { get; }
    public Nullable`1<DateTimeOffset> BuildDate { get; }
    public string Version { get; }
    public string CommitHash { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_Name();
    public abstract virtual Nullable`1<DateTimeOffset> get_BuildDate();
    public abstract virtual string get_Version();
    public abstract virtual string get_CommitHash();
}
internal interface Microsoft.Testing.Platform.Services.ITestApplicationCancellationTokenSource {
    public CancellationToken CancellationToken { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual void Cancel();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Services.ITestApplicationModuleInfo {
    public bool IsCurrentTestApplicationHostDotnetMuxer { get; }
    public bool IsCurrentTestApplicationModuleExecutable { get; }
    public bool IsAppHostOrSingleFileOrNativeAot { get; }
    public abstract virtual bool get_IsCurrentTestApplicationHostDotnetMuxer();
    public abstract virtual bool get_IsCurrentTestApplicationModuleExecutable();
    public abstract virtual bool get_IsAppHostOrSingleFileOrNativeAot();
    public abstract virtual string GetCommandLineArguments();
    public abstract virtual string GetCurrentTestApplicationFullPath();
    public abstract virtual string GetProcessPath();
    public abstract virtual String[] GetCommandLineArgs();
    public abstract virtual ExecutableInfo GetCurrentExecutableInfo();
}
internal interface Microsoft.Testing.Platform.Services.ITestApplicationProcessExitCode {
    public bool HasTestAdapterTestSessionFailure { get; }
    [NullableAttribute("2")]
public string TestAdapterTestSessionFailureErrorMessage { get; }
    public abstract virtual bool get_HasTestAdapterTestSessionFailure();
    [NullableContextAttribute("2")]
public abstract virtual string get_TestAdapterTestSessionFailureErrorMessage();
    [NullableContextAttribute("1")]
public abstract virtual Task SetTestAdapterTestSessionFailureAsync(string errorMessage);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<int> GetProcessExitCodeAsync();
    [NullableContextAttribute("1")]
public abstract virtual Statistics GetStatistics();
}
internal interface Microsoft.Testing.Platform.Services.ITestSessionContext {
    public SessionUid SessionId { get; }
    public CancellationToken CancellationToken { get; }
    public abstract virtual SessionUid get_SessionId();
    public abstract virtual CancellationToken get_CancellationToken();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Services.PlatformInformation : object {
    private static char PlusSign;
    [NullableAttribute("1")]
private static string BuildTimeAttributeName;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <BuildDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitHash>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public Nullable`1<DateTimeOffset> BuildDate { get; }
    public string Version { get; }
    public string CommitHash { get; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_BuildDate();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CommitHash();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Services.ServiceProvider : object {
    private List`1<object> _services;
    [CompilerGeneratedAttribute]
private bool <AllowTestAdapterFrameworkRegistration>k__BackingField;
    internal IReadOnlyCollection`1<object> Services { get; }
    public bool AllowTestAdapterFrameworkRegistration { get; public set; }
    private static Type[] InternalOnlyExtensions { get; }
    internal IReadOnlyCollection`1<object> get_Services();
    [CompilerGeneratedAttribute]
public bool get_AllowTestAdapterFrameworkRegistration();
    [CompilerGeneratedAttribute]
public void set_AllowTestAdapterFrameworkRegistration(bool value);
    private static Type[] get_InternalOnlyExtensions();
    public void AddService(object service, bool throwIfSameInstanceExit);
    public void AddServices(Object[] services, bool throwIfSameInstanceExit);
    public bool TryAddService(object service);
    [IteratorStateMachineAttribute("Microsoft.Testing.Platform.Services.ServiceProvider/<GetServicesInternal>d__12")]
public IEnumerable`1<object> GetServicesInternal(Type serviceType, bool stopAtFirst, bool skipInternalOnlyExtensions);
    public object GetServiceInternal(Type serviceType, bool skipInternalOnlyExtensions);
    public object Clone(Func`2<object, bool> filter);
    public sealed virtual object Clone();
    public sealed virtual object GetService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Testing.Platform.Services.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static TService GetRequiredService(IServiceProvider provider);
    [ExtensionAttribute]
public static TService GetService(IServiceProvider provider);
    [ExtensionAttribute]
public static IMessageBus GetMessageBus(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static IConfiguration GetConfiguration(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static ICommandLineOptions GetCommandLineOptions(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static ILoggerFactory GetLoggerFactory(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static IOutputDevice GetOutputDevice(IServiceProvider serviceProvider);
    [ExtensionAttribute]
[ExperimentalAttribute("TPEXP")]
public static IClientInfo GetClientInfo(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static TService GetRequiredServiceInternal(IServiceProvider provider);
    [ExtensionAttribute]
internal static TService GetServiceInternal(IServiceProvider provider);
    [ExtensionAttribute]
internal static IEnumerable`1<TService> GetServicesInternal(IServiceProvider provider);
    [ExtensionAttribute]
internal static ITestSessionContext GetTestSessionContext(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IClock GetSystemClock(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITask GetTask(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IPlatformOutputDevice GetPlatformOutputDevice(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IEnvironment GetEnvironment(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestApplicationModuleInfo GetTestApplicationModuleInfo(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestHostControllerInfo GetTestHostControllerInfo(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IProcessHandler GetProcessHandler(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IClock GetClock(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static BaseMessageBus GetBaseMessageBus(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IConsole GetConsole(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IRuntimeFeature GetRuntimeFeature(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IAsyncMonitorFactory GetAsyncMonitorFactory(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestApplicationProcessExitCode GetTestApplicationProcessExitCode(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IMonitor GetMonitor(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestApplicationCancellationTokenSource GetTestApplicationCancellationTokenSource(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITelemetryInformation GetTelemetryInformation(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITelemetryCollector GetTelemetryCollector(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestFramework GetTestFramework(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestFrameworkInvoker GetTestAdapterInvoker(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IUnhandledExceptionsPolicy GetUnhandledExceptionsPolicy(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestExecutionRequestFactory GetTestExecutionRequestFactory(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IFileSystem GetFileSystem(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static ITestFrameworkCapabilities GetTestFrameworkCapabilities(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static CommandLineParseResult GetCommandLineParseResult(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IPlatformInformation GetPlatformInformation(IServiceProvider serviceProvider);
    [ExtensionAttribute]
internal static IFileLoggerInformation GetFileLoggerInformation(IServiceProvider serviceProvider);
}
internal class Microsoft.Testing.Platform.Services.Statistics : object {
    [CompilerGeneratedAttribute]
private int <TotalRanTests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalFailedTests>k__BackingField;
    public int TotalRanTests { get; public set; }
    public int TotalFailedTests { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TotalRanTests();
    [CompilerGeneratedAttribute]
public void set_TotalRanTests(int value);
    [CompilerGeneratedAttribute]
public int get_TotalFailedTests();
    [CompilerGeneratedAttribute]
public void set_TotalFailedTests(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Services.TestApplicationResult : object {
    private IOutputDevice _outputService;
    private ITestApplicationCancellationTokenSource _testApplicationCancellationTokenSource;
    private ICommandLineOptions _commandLineOptions;
    private IEnvironment _environment;
    private List`1<TestApplicationResultLogger> _testApplicationResultLoggers;
    private List`1<TestNode> _failedTests;
    private int _totalRanTests;
    private bool _testAdapterTestSessionFailure;
    [CompilerGeneratedAttribute]
private string <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <DataTypesConsumed>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestAdapterTestSessionFailureErrorMessage>k__BackingField;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public Type[] DataTypesConsumed { get; }
    public bool HasTestAdapterTestSessionFailure { get; }
    [NullableAttribute("2")]
public string TestAdapterTestSessionFailureErrorMessage { get; private set; }
    public TestApplicationResult(IOutputDevice outputService, ITestApplicationCancellationTokenSource testApplicationCancellationTokenSource, ICommandLineOptions commandLineOptions, IEnvironment environment);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Uid();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual Type[] get_DataTypesConsumed();
    public sealed virtual bool get_HasTestAdapterTestSessionFailure();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestAdapterTestSessionFailureErrorMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_TestAdapterTestSessionFailureErrorMessage(string value);
    public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual Task ConsumeAsync(IDataProducer dataProducer, IData value, CancellationToken cancellationToken);
    public sealed virtual ILogger CreateLogger(string categoryName);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Services.TestApplicationResult/<GetProcessExitCodeAsync>d__33")]
public sealed virtual Task`1<int> GetProcessExitCodeAsync();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Services.TestApplicationResult/<SetTestAdapterTestSessionFailureAsync>d__34")]
public sealed virtual Task SetTestAdapterTestSessionFailureAsync(string errorMessage);
    public sealed virtual Statistics GetStatistics();
}
internal class Microsoft.Testing.Platform.Services.TestSessionContext : object {
    [CompilerGeneratedAttribute]
private SessionUid <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public SessionUid SessionId { get; }
    public CancellationToken CancellationToken { get; }
    public TestSessionContext(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual SessionUid get_SessionId();
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Telemetry.ExtensionInformation : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public string Id { get; }
    public string Version { get; }
    public bool Enabled { get; }
    public ExtensionInformation(string id, string version, bool enabled);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public bool get_Enabled();
}
internal static class Microsoft.Testing.Platform.Telemetry.ExtensionInformationCollector : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Testing.Platform.Telemetry.ExtensionInformationCollector/<CollectAndSerializeToJsonAsync>d__0")]
public static Task`1<string> CollectAndSerializeToJsonAsync(ServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Telemetry.ITelemetryCollector {
    public abstract virtual Task LogEventAsync(string eventName, IDictionary`2<string, object> paramsMap);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Telemetry.ITelemetryInformation {
    public bool IsEnabled { get; }
    public string Version { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual string get_Version();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Telemetry.ITelemetryManager {
    public abstract virtual void AddTelemetryCollectorProvider(Func`2<IServiceProvider, ITelemetryCollector> telemetryCollectorFactory);
}
internal class Microsoft.Testing.Platform.Telemetry.NopTelemetryService : object {
    private bool _enabled;
    public NopTelemetryService(bool enabled);
    [NullableContextAttribute("1")]
public sealed virtual Task LogEventAsync(string eventName, IDictionary`2<string, object> paramsMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Telemetry.ServerTelemetry : object {
    private IServerTestHost _serverTestHost;
    public ServerTelemetry(IServerTestHost serverTestHost);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Telemetry.ServerTelemetry/<LogEventAsync>d__2")]
public sealed virtual Task LogEventAsync(string eventName, IDictionary`2<string, object> paramsMap);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Telemetry.ServerTelemetry/<PushTelemetryToServerTestHostAsync>d__3")]
private Task PushTelemetryToServerTestHostAsync(TelemetryEventArgs telemetryEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.Telemetry.TelemetryEvents : object {
    public static string TestHostBuiltEventName;
    public static string ConsoleTestHostExitEventName;
    public static string TestHostControllersTestHostExitEventName;
    public static string TestsDiscoveryEventName;
    public static string TestsRunEventName;
}
[ExtensionAttribute]
internal static class Microsoft.Testing.Platform.Telemetry.TelemetryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static string AsTelemetryBool(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Telemetry.TelemetryInformation : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public bool IsEnabled { get; }
    public string Version { get; }
    public TelemetryInformation(bool isEnabled, string version);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Telemetry.TelemetryManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IServiceProvider, ITelemetryCollector> _telemetryFactory;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    public sealed virtual void AddTelemetryCollectorProvider(Func`2<IServiceProvider, ITelemetryCollector> telemetryFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Telemetry.TelemetryManager/<BuildAsync>d__10")]
public Task`1<ITelemetryCollector> BuildAsync(ServiceProvider serviceProvider, ILoggerFactory loggerFactory, TestApplicationOptions testApplicationOptions);
    public sealed virtual Task`1<bool> IsEnabledAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Testing.Platform.Telemetry.TelemetryProperties : object {
    public static string VersionPropertyName;
    public static string SessionId;
    public static string ReporterIdPropertyName;
    public static string IsCIPropertyName;
    public static string VersionValue;
    public static string True;
    public static string False;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.TestHost.ClientInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Id { get; }
    public string Version { get; }
    internal ClientInfo(string id, string version);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Version();
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.TestHost.ITestHostManager {
    public abstract virtual void AddTestApplicationLifecycleCallbacks(Func`2<IServiceProvider, ITestApplicationLifecycleCallbacks> testApplicationLifecycleCallbacks);
    public abstract virtual void AddDataConsumer(Func`2<IServiceProvider, IDataConsumer> dataConsumerFactory);
    public abstract virtual void AddDataConsumer(CompositeExtensionFactory`1<T> compositeServiceFactory);
    public abstract virtual void AddTestSessionLifetimeHandle(Func`2<IServiceProvider, ITestSessionLifetimeHandler> testSessionLifetimeHandleFactory);
    public abstract virtual void AddTestSessionLifetimeHandle(CompositeExtensionFactory`1<T> compositeServiceFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.Testing.Platform.TestHost.SessionUid : ValueType {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public SessionUid(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.TestHost.TestHostManager : object {
    private List`1<object> _factoryOrdering;
    private List`1<Func`2<IServiceProvider, ITestApplicationLifecycleCallbacks>> _testApplicationLifecycleCallbacksFactories;
    private List`1<Func`2<IServiceProvider, IDataConsumer>> _dataConsumerFactories;
    private List`1<Func`2<IServiceProvider, ITestSessionLifetimeHandler>> _testSessionLifetimeHandlerFactories;
    private List`1<ICompositeExtensionFactory> _dataConsumersCompositeServiceFactories;
    private List`1<ICompositeExtensionFactory> _testSessionLifetimeHandlerCompositeFactories;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IServiceProvider, ITestExecutionFilterFactory> _testExecutionFilterFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<IServiceProvider, ITestFrameworkInvoker> _testFrameworkInvokerFactory;
    public void AddTestFrameworkInvoker(Func`2<IServiceProvider, ITestFrameworkInvoker> testFrameworkInvokerFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.TestHost.TestHostManager/<TryBuildTestAdapterInvokerAsync>d__9")]
internal Task`1<ActionResult`1<ITestFrameworkInvoker>> TryBuildTestAdapterInvokerAsync(ServiceProvider serviceProvider);
    public void AddTestExecutionFilterFactory(Func`2<IServiceProvider, ITestExecutionFilterFactory> testExecutionFilterFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.TestHost.TestHostManager/<TryBuildTestExecutionFilterFactoryAsync>d__11")]
internal Task`1<ActionResult`1<ITestExecutionFilterFactory>> TryBuildTestExecutionFilterFactoryAsync(ServiceProvider serviceProvider);
    public sealed virtual void AddTestApplicationLifecycleCallbacks(Func`2<IServiceProvider, ITestApplicationLifecycleCallbacks> testApplicationLifecycleCallbacks);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.TestHost.TestHostManager/<BuildTestApplicationLifecycleCallbackAsync>d__13")]
internal Task`1<ITestApplicationLifecycleCallbacks[]> BuildTestApplicationLifecycleCallbackAsync(ServiceProvider serviceProvider);
    public sealed virtual void AddDataConsumer(Func`2<IServiceProvider, IDataConsumer> dataConsumerFactory);
    public sealed virtual void AddDataConsumer(CompositeExtensionFactory`1<T> compositeServiceFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.TestHost.TestHostManager/<BuildDataConsumersAsync>d__16")]
internal Task`1<ValueTuple`2[]> BuildDataConsumersAsync(ServiceProvider serviceProvider, List`1<ICompositeExtensionFactory> alreadyBuiltServices);
    public sealed virtual void AddTestSessionLifetimeHandle(Func`2<IServiceProvider, ITestSessionLifetimeHandler> testSessionLifetimeHandleFactory);
    public sealed virtual void AddTestSessionLifetimeHandle(CompositeExtensionFactory`1<T> compositeServiceFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.TestHost.TestHostManager/<BuildTestSessionLifetimeHandleAsync>d__19")]
internal Task`1<ValueTuple`2[]> BuildTestSessionLifetimeHandleAsync(ServiceProvider serviceProvider, List`1<ICompositeExtensionFactory> alreadyBuiltServices);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Testing.Platform.TestHost.TestSessionContext : object {
    [CompilerGeneratedAttribute]
private SessionUid <SessionUid>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientInfo <Client>k__BackingField;
    public SessionUid SessionUid { get; }
    [ObsoleteAttribute("Client is obsolete, use the Microsoft.Testing.Platform.Services.IClientInfo instead")]
public ClientInfo Client { get; }
    internal TestSessionContext(SessionUid sessionUid, ClientInfo client);
    [CompilerGeneratedAttribute]
public SessionUid get_SessionUid();
    [CompilerGeneratedAttribute]
public ClientInfo get_Client();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Testing.Platform.TestHost.WellKnownClients : object {
    public static string TestingPlatformConsole;
    public static string VisualStudio;
    private static WellKnownClients();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.TestHostControllers.EnvironmentVariables : object {
    private static string StrippedSecretValue;
    private Dictionary`2<string, OwnedEnvironmentVariable> _environmentVariables;
    private ILogger`1<EnvironmentVariables> _logger;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITestHostEnvironmentVariableProvider <CurrentProvider>k__BackingField;
    [NullableAttribute("2")]
public ITestHostEnvironmentVariableProvider CurrentProvider { get; public set; }
    public EnvironmentVariables(ILoggerFactory loggerFactory);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ITestHostEnvironmentVariableProvider get_CurrentProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CurrentProvider(ITestHostEnvironmentVariableProvider value);
    public sealed virtual void SetVariable(EnvironmentVariable environmentVariable);
    public sealed virtual bool TryGetVariable(string variable, OwnedEnvironmentVariable& environmentVariable);
    public sealed virtual void RemoveVariable(string variable);
    public IReadOnlyCollection`1<EnvironmentVariable> GetAll();
}
internal interface Microsoft.Testing.Platform.TestHostControllers.ITestHostControllerInfo {
    public bool HasTestHostController { get; }
    public Nullable`1<bool> IsCurrentProcessTestHostController { get; }
    public abstract virtual bool get_HasTestHostController();
    public abstract virtual Nullable`1<bool> get_IsCurrentProcessTestHostController();
    public abstract virtual Nullable`1<int> GetTestHostControllerPID(bool throwIfMissing);
}
[NullableContextAttribute("1")]
public interface Microsoft.Testing.Platform.TestHostControllers.ITestHostControllersManager {
    public abstract virtual void AddEnvironmentVariableProvider(Func`2<IServiceProvider, ITestHostEnvironmentVariableProvider> environmentVariableProviderFactory);
    public abstract virtual void AddEnvironmentVariableProvider(CompositeExtensionFactory`1<T> compositeServiceFactory);
    public abstract virtual void AddProcessLifetimeHandler(Func`2<IServiceProvider, ITestHostProcessLifetimeHandler> lifetimeHandler);
    public abstract virtual void AddProcessLifetimeHandler(CompositeExtensionFactory`1<T> compositeServiceFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.TestHostControllers.SystemEnvironmentVariableProvider : object {
    private SystemExtension _systemExtension;
    private IEnvironment _environment;
    public string Uid { get; }
    public string Version { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public SystemEnvironmentVariableProvider(IEnvironment environment);
    public sealed virtual string get_Uid();
    public sealed virtual string get_Version();
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_Description();
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.TestHostControllers.SystemEnvironmentVariableProvider/<IsEnabledAsync>d__11")]
public sealed virtual Task`1<bool> IsEnabledAsync();
    public sealed virtual Task UpdateAsync(IEnvironmentVariables environmentVariables);
    public sealed virtual Task`1<ValidationResult> ValidateTestHostEnvironmentVariablesAsync(IReadOnlyEnvironmentVariables environmentVariables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.TestHostControllers.TestHostControllerConfiguration : object {
    [CompilerGeneratedAttribute]
private ITestHostEnvironmentVariableProvider[] <EnvironmentVariableProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestHostProcessLifetimeHandler[] <LifetimeHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataConsumer[] <DataConsumer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireProcessRestart>k__BackingField;
    public ITestHostEnvironmentVariableProvider[] EnvironmentVariableProviders { get; }
    public ITestHostProcessLifetimeHandler[] LifetimeHandlers { get; }
    public IDataConsumer[] DataConsumer { get; }
    public bool RequireProcessRestart { get; }
    public TestHostControllerConfiguration(ITestHostEnvironmentVariableProvider[] environmentVariableProviders, ITestHostProcessLifetimeHandler[] lifetimeHandlers, IDataConsumer[] dataConsumer, bool requireProcessRestart);
    [CompilerGeneratedAttribute]
public ITestHostEnvironmentVariableProvider[] get_EnvironmentVariableProviders();
    [CompilerGeneratedAttribute]
public ITestHostProcessLifetimeHandler[] get_LifetimeHandlers();
    [CompilerGeneratedAttribute]
public IDataConsumer[] get_DataConsumer();
    [CompilerGeneratedAttribute]
public bool get_RequireProcessRestart();
}
internal class Microsoft.Testing.Platform.TestHostControllers.TestHostControllerInfo : object {
    [NullableAttribute("1")]
private CommandLineParseResult _parseResult;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsCurrentProcessTestHostController>k__BackingField;
    public bool HasTestHostController { get; }
    public Nullable`1<bool> IsCurrentProcessTestHostController { get; public set; }
    [NullableContextAttribute("1")]
public TestHostControllerInfo(CommandLineParseResult parseResult);
    public sealed virtual bool get_HasTestHostController();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_IsCurrentProcessTestHostController();
    [CompilerGeneratedAttribute]
public void set_IsCurrentProcessTestHostController(Nullable`1<bool> value);
    public sealed virtual Nullable`1<int> GetTestHostControllerPID(bool throwIfMissing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.TestHostControllers.TestHostControllersManager : object {
    private List`1<object> _factoryOrdering;
    private List`1<Func`2<IServiceProvider, ITestHostEnvironmentVariableProvider>> _environmentVariableProviderFactories;
    private List`1<Func`2<IServiceProvider, ITestHostProcessLifetimeHandler>> _lifetimeHandlerFactories;
    private List`1<Func`2<IServiceProvider, IDataConsumer>> _dataConsumerFactories;
    private List`1<ICompositeExtensionFactory> _environmentVariableProviderCompositeFactories;
    private List`1<ICompositeExtensionFactory> _lifetimeHandlerCompositeFactories;
    private List`1<ICompositeExtensionFactory> _alreadyBuiltServices;
    private List`1<ICompositeExtensionFactory> _dataConsumersCompositeServiceFactories;
    public sealed virtual void AddEnvironmentVariableProvider(Func`2<IServiceProvider, ITestHostEnvironmentVariableProvider> environmentVariableProviderFactory);
    public sealed virtual void AddEnvironmentVariableProvider(CompositeExtensionFactory`1<T> compositeServiceFactory);
    public sealed virtual void AddProcessLifetimeHandler(Func`2<IServiceProvider, ITestHostProcessLifetimeHandler> lifetimeHandler);
    public sealed virtual void AddProcessLifetimeHandler(CompositeExtensionFactory`1<T> compositeServiceFactory);
    public void AddDataConsumer(Func`2<IServiceProvider, IDataConsumer> dataConsumerFactory);
    public void AddDataConsumer(CompositeExtensionFactory`1<T> compositeServiceFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.TestHostControllers.TestHostControllersManager/<BuildAsync>d__14")]
internal Task`1<TestHostControllerConfiguration> BuildAsync(ServiceProvider serviceProvider);
}
internal class Microsoft.Testing.Platform.TestHostControllers.TestHostProcessInformation : object {
    private Nullable`1<int> _exitCode;
    private Nullable`1<bool> _hasExitedGracefully;
    [CompilerGeneratedAttribute]
private int <PID>k__BackingField;
    public int PID { get; }
    public int ExitCode { get; }
    public bool HasExitedGracefully { get; }
    public TestHostProcessInformation(int pid);
    public TestHostProcessInformation(int pid, int exitCode, bool hasExitedGracefully);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PID();
    public sealed virtual int get_ExitCode();
    public sealed virtual bool get_HasExitedGracefully();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Tools.ITool {
    public string Name { get; }
    public bool Hidden { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_Hidden();
    public abstract virtual Task`1<int> RunAsync();
}
internal interface Microsoft.Testing.Platform.Tools.IToolCommandLineOptionsProvider {
    [NullableAttribute("1")]
public string ToolName { get; }
    [NullableContextAttribute("1")]
public abstract virtual string get_ToolName();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Testing.Platform.Tools.IToolsManager {
    public abstract virtual void AddTool(Func`2<IServiceProvider, ITool> toolFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Testing.Platform.Tools.ToolsManager : object {
    private List`1<Func`2<IServiceProvider, ITool>> _toolsFactories;
    public sealed virtual void AddTool(Func`2<IServiceProvider, ITool> toolFactory);
    [AsyncStateMachineAttribute("Microsoft.Testing.Platform.Tools.ToolsManager/<BuildAsync>d__2")]
internal Task`1<IReadOnlyList`1<ITool>> BuildAsync(IServiceProvider serviceProvider);
}
internal static class PlatformVersion : object {
    [NullableAttribute("1")]
public static string Version;
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.BytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-string-system-iformatprovider-system-byte@)")]
public static bool TryParse(string target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Byte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Byte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.DoublePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-string-system-iformatprovider-system-double@)")]
public static bool TryParse(string target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-byte))-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Double& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse#system-double-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-double@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Double& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.EnumPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getvalues")]
public static TEnum[] GetValues();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.getnames")]
public static String[] GetNames();
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-string-system-boolean)")]
public static TEnum Parse(string value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char)))")]
public static TEnum Parse(ReadOnlySpan`1<char> value);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse#system-enum-parse-1(system-readonlyspan((system-char))-system-boolean)")]
public static TEnum Parse(ReadOnlySpan`1<char> value, bool ignoreCase);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, TEnum& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse#system-enum-tryparse-1(system-readonlyspan((system-char))-system-boolean-0@)")]
public static bool TryParse(ReadOnlySpan`1<char> value, bool ignoreCase, TEnum& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.Guard : object {
    public static void FileExists(string path, string argumentName);
    public static void DirectoryExists(string path, string argumentName);
    public static void NotEmpty(string value, string argumentName);
    public static void NotEmpty(ReadOnlySpan`1<T> value, string argumentName);
    public static void NotEmpty(Span`1<T> value, string argumentName);
    public static void NotEmpty(Nullable`1<Memory`1<T>> value, string argumentName);
    public static void NotEmpty(Memory`1<T> value, string argumentName);
    public static void NotEmpty(Nullable`1<ReadOnlyMemory`1<T>> value, string argumentName);
    public static void NotEmpty(ReadOnlyMemory`1<T> value, string argumentName);
    public static void NotEmpty(T value, string argumentName);
    public static T NotNull(T argument, string name);
    [NullableContextAttribute("2")]
public static string NotNull(string argument, string name);
    public static string NotNullOrEmpty(string value, string argumentName);
    public static T NotNullOrEmpty(T value, string argumentName);
    public static Memory`1<char> NotNullOrEmpty(Nullable`1<Memory`1<char>> value, string argumentName);
    public static ReadOnlyMemory`1<char> NotNullOrEmpty(Nullable`1<ReadOnlyMemory`1<char>> value, string argumentName);
    public static string NotNullOrWhiteSpace(string value, string argumentName);
    public static Memory`1<char> NotNullOrWhiteSpace(Nullable`1<Memory`1<char>> value, string argumentName);
    public static ReadOnlyMemory`1<char> NotNullOrWhiteSpace(Nullable`1<ReadOnlyMemory`1<char>> value, string argumentName);
    public static void NotWhiteSpace(string value, string argumentName);
    public static void NotWhiteSpace(ReadOnlySpan`1<char> value, string argumentName);
    public static void NotWhiteSpace(Nullable`1<Memory`1<char>> value, string argumentName);
    public static void NotWhiteSpace(Nullable`1<ReadOnlyMemory`1<char>> value, string argumentName);
    public static void NotWhiteSpace(Span`1<char> value, string argumentName);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.GuidPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.guid.tryparse#system-guid-tryparse(system-string-system-iformatprovider-system-guid@)")]
public static bool TryParse(string target, IFormatProvider provider, Guid& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.byte.tryparse#system-byte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-byte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Byte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.IntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-string-system-iformatprovider-system-int32@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse#system-int32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.LongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-string-system-iformatprovider-system-int64@)")]
public static bool TryParse(string target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int64.tryparse#system-int64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int32& result);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.Polyfill : object {
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.cancelasync")]
public static Task CancelAsync(CancellationTokenSource target);
    [IteratorStateMachineAttribute("Polyfills.Polyfill/<Index>d__1`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.index#system-linq-enumerable-index-1(system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<ValueTuple`2<int, TSource>> Index(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-system-func((-1-2))-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregateby#system-linq-enumerable-aggregateby-3(system-collections-generic-ienumerable((-0))-system-func((-0-1))-2-system-func((-2-0-2))-system-collections-generic-iequalitycomparer((-1)))")]
public static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfills.Polyfill/<AggregateByIterator>d__4`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfills.Polyfill/<AggregateByIterator>d__5`3")]
private static IEnumerable`1<KeyValuePair`2<TKey, TAccumulate>> AggregateByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.countby")]
public static IEnumerable`1<KeyValuePair`2<TKey, int>> CountBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> keyComparer);
    [IteratorStateMachineAttribute("Polyfills.Polyfill/<CountByIterator>d__7`2")]
private static IEnumerable`1<KeyValuePair`2<TKey, int>> CountByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, int> BuildCountDictionary(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> selector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource[] items);
    [IteratorStateMachineAttribute("Polyfills.Polyfill/<Except>d__11`1")]
[ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except#system-linq-enumerable-except-1(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-0))-system-collections-generic-iequalitycomparer((-0)))")]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> target, IEqualityComparer`1<TSource> comparer, TSource[] items);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.addrange")]
public static void AddRange(List`1<T> target, ReadOnlySpan`1<T> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.insertrange")]
public static void InsertRange(List`1<T> target, int index, ReadOnlySpan`1<T> source);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.collectionextensions.copyto")]
public static void CopyTo(List`1<T> target, Span`1<T> destination);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.nanoseconds")]
public static int Nanoseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.nanosecond")]
public static int Nanosecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.nanosecond")]
public static int Nanosecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.timespan.microsecond")]
public static int Microseconds(TimeSpan target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetime.microsecond")]
public static int Microsecond(DateTime target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.microsecond")]
public static int Microsecond(DateTimeOffset target);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.random.nextbytes#system-random-nextbytes(system-span((system-byte)))")]
public static void Shuffle(Random target, T[] values);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.random.nextbytes#system-random-nextbytes(system-span((system-byte)))")]
public static void Shuffle(Random target, Span`1<T> values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.append#system-text-stringbuilder-append(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder Append(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, AppendInterpolatedStringHandler& handler);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.appendline#system-text-stringbuilder-appendline(system-iformatprovider-system-text-stringbuilder-appendinterpolatedstringhandler@)")]
public static StringBuilder AppendLine(StringBuilder target, IFormatProvider provider, AppendInterpolatedStringHandler& handler);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.replace#system-text-stringbuilder-replace(system-readonlyspan((system-char))-system-readonlyspan((system-char)))")]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.replace#system-text-stringbuilder-replace(system-char-system-char-system-int32-system-int32)")]
public static StringBuilder Replace(StringBuilder target, ReadOnlySpan`1<char> oldValue, ReadOnlySpan`1<char> newValue, int startIndex, int count);
    [ExtensionAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.type.isgenericmethodparameter")]
public static bool IsGenericMethodParameter(Type target);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type target);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type target);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|4_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<TKey, TAccumulate> <AggregateByIterator>g__PopulateDictionary|5_0(IEnumerator`1<TSource> enumerator, Func`2<TSource, TKey> keySelector, Func`2<TKey, TAccumulate> seedSelector, Func`3<TAccumulate, TSource, TAccumulate> func, IEqualityComparer`1<TKey> keyComparer);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.RegexPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.ismatch#system-text-regularexpressions-regex-ismatch(system-readonlyspan((system-char))-system-string)")]
public static bool IsMatch(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions-system-timespan)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options, TimeSpan timeout);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.enumeratematches#system-text-regularexpressions-regex-enumeratematches(system-readonlyspan((system-char))-system-string-system-text-regularexpressions-regexoptions)")]
public static ValueMatchEnumerator EnumerateMatches(ReadOnlySpan`1<char> input, string pattern, RegexOptions options);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.SBytePolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-string-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(string target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, SByte& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.sbyte.tryparse#system-sbyte-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-sbyte@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, SByte& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.ShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-string-system-iformatprovider-system-int16@)")]
public static bool TryParse(string target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, Int16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.int16.tryparse#system-int16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-int16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, Int16& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.StringPolyfill : object {
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string())")]
public static string Join(char separator, String[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-object())")]
public static string Join(char separator, Object[] values);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join(system-char-system-string()-system-int32-system-int32)")]
public static string Join(char separator, String[] value, int startIndex, int count);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.string.join#system-string-join-1(system-char-system-collections-generic-ienumerable((-0)))")]
public static string Join(char separator, IEnumerable`1<T> values);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.UIntPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-string-system-iformatprovider-system-uint32@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt32& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint32.tryparse#system-uint32-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint32@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt32& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.ULongPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-string-system-iformatprovider-system-uint64@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt64& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint64.tryparse#system-uint64-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint64@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt64& result);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class Polyfills.UShortPolyfill : object {
    [NullableContextAttribute("2")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-string-system-iformatprovider-system-uint16@)")]
public static bool TryParse(string target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-byte))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, NumberStyles style, IFormatProvider provider, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<byte> target, UInt16& result);
    [DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.uint16.tryparse#system-uint16-tryparse(system-readonlyspan((system-char))-system-globalization-numberstyles-system-iformatprovider-system-uint16@)")]
public static bool TryParse(ReadOnlySpan`1<char> target, NumberStyles style, IFormatProvider provider, UInt16& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("6143")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.experimentalattribute")]
internal class System.Diagnostics.CodeAnalysis.ExperimentalAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DiagnosticId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlFormat>k__BackingField;
    public string DiagnosticId { get; }
    [NullableAttribute("2")]
public string UrlFormat { get; public set; }
    public ExperimentalAttribute(string diagnosticId);
    [CompilerGeneratedAttribute]
public string get_DiagnosticId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlFormat(string value);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
[AttributeUsageAttribute("1036")]
[DescriptionAttribute("https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.collectionbuilderattribute")]
internal class System.Runtime.CompilerServices.CollectionBuilderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BuilderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public Type BuilderType { get; }
    public string MethodName { get; }
    public CollectionBuilderAttribute(Type builderType, string methodName);
    [CompilerGeneratedAttribute]
public Type get_BuilderType();
    [CompilerGeneratedAttribute]
public string get_MethodName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__GetFrameRegex_1 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__GetFrameRegex_1 Instance;
    private static <RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__GetFrameRegex_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__GetRegex_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__GetRegex_0 Instance;
    private static <RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__GetRegex_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "7.0.10.26716")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>FB313BE7B4459FDC13B8962C6CF6F7B748DB705E907970074ED08517A65C1C6AF__Utilities();
    [NullableContextAttribute("1")]
internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|2_0(Int32[]& stack, Int32& pos, int arg0, int arg1);
}
