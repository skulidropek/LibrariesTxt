[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.TestPlatform.TestHostProvider.Hosting.TestHostManagerCallbacks : object {
    private static int E_HANDLE;
    private bool _forwardOutput;
    [NullableAttribute("2")]
private IMessageLogger _messageLogger;
    [NullableContextAttribute("2")]
public TestHostManagerCallbacks(bool forwardOutput, IMessageLogger logger);
    public void StandardOutputReceivedCallback(StringBuilder testHostProcessStdOut, string data);
    public void ErrorReceivedCallback(StringBuilder testHostProcessStdError, string data);
    public static void ExitCallBack(IProcessHelper processHelper, object process, StringBuilder testHostProcessStdError, Action`1<HostProviderEventArgs> onHostExited);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.TestPlatform.TestHostProvider.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string MultipleFileVersions { get; }
    internal static string UnableToFindDepsFile { get; }
    internal static string SuggestPublishTestProject { get; }
    internal static string NoDotnetMuxerFoundForArchitecture { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_MultipleFileVersions();
    internal static string get_UnableToFindDepsFile();
    internal static string get_SuggestPublishTestProject();
    internal static string get_NoDotnetMuxerFoundForArchitecture();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.TestPlatform.TestHostProvider.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
internal static class Microsoft.TestPlatform.TestHostProvider.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionUriAttribute("HostProvider://DefaultTestHost")]
[FriendlyNameAttribute("DefaultTestHost")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Hosting.DefaultTestHostManager : object {
    private static string DefaultTestHostUri;
    private static string DefaultTestHostFriendlyName;
    private static string TestAdapterEndsWithPattern;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> SupportedTargetFrameworks;
    private IProcessHelper _processHelper;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IDotnetHostHelper _dotnetHostHelper;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    private bool _disableAppDomain;
    private Architecture _architecture;
    [NullableAttribute("2")]
private Framework _targetFramework;
    [NullableAttribute("2")]
private ITestHostLauncher _customTestHostLauncher;
    [NullableAttribute("2")]
private Process _testHostProcess;
    [NullableAttribute("2")]
private StringBuilder _testHostProcessStdError;
    [NullableAttribute("2")]
private StringBuilder _testHostProcessStdOut;
    [NullableAttribute("2")]
private IMessageLogger _messageLogger;
    private bool _captureOutput;
    private bool _hostExitedEventRaised;
    [NullableAttribute("2")]
private TestHostManagerCallbacks _testHostManagerCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<HostProviderEventArgs> HostLaunched;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<HostProviderEventArgs> HostExited;
    [CompilerGeneratedAttribute]
private bool <Shared>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public bool Shared { get; private set; }
    public IDictionary`2<string, string> Properties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<object> ExitCallBack { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, string> ErrorReceivedCallback { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, string> OutputReceivedCallback { get; }
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
private bool IsInitialized { get; private set; }
    internal DefaultTestHostManager(IProcessHelper processHelper, IFileHelper fileHelper, IDotnetHostHelper dotnetHostHelper, IEnvironment environment, IEnvironmentVariableHelper environmentVariableHelper);
    private static DefaultTestHostManager();
    [CompilerGeneratedAttribute]
public sealed virtual void add_HostLaunched(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HostLaunched(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_HostExited(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HostExited(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Shared();
    [CompilerGeneratedAttribute]
private void set_Shared(bool value);
    public IDictionary`2<string, string> get_Properties();
    private Action`1<object> get_ExitCallBack();
    private Action`2<object, string> get_ErrorReceivedCallback();
    private Action`2<object, string> get_OutputReceivedCallback();
    public sealed virtual void SetCustomLauncher(ITestHostLauncher customLauncher);
    public sealed virtual TestHostConnectionInfo GetTestHostConnectionInfo();
    public sealed virtual Task`1<bool> LaunchTestHostAsync(TestProcessStartInfo testHostStartInfo, CancellationToken cancellationToken);
    public virtual TestProcessStartInfo GetTestHostProcessStartInfo(IEnumerable`1<string> sources, IDictionary`2<string, string> environmentVariables, TestRunnerConnectionInfo connectionInfo);
    private static string GetTestHostName(Architecture architecture, Framework targetFramework, PlatformArchitecture processArchitecture);
    public sealed virtual IEnumerable`1<string> GetTestPlatformExtensions(IEnumerable`1<string> sources, IEnumerable`1<string> extensions);
    public sealed virtual IEnumerable`1<string> GetTestSources(IEnumerable`1<string> sources);
    [NullableContextAttribute("2")]
public sealed virtual bool CanExecuteCurrentRunConfiguration(string runsettingsXml);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
private bool get_IsInitialized();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
private void set_IsInitialized(bool value);
    public sealed virtual void Initialize(IMessageLogger logger, string runsettingsXml);
    public sealed virtual Task CleanTestHostAsync(CancellationToken cancellationToken);
    public sealed virtual bool AttachDebuggerToTestHost();
    private IEnumerable`1<string> FilterExtensionsBasedOnVersion(IEnumerable`1<string> extensions);
    private Version GetAndLogFileVersion(string path);
    private void OnHostLaunched(HostProviderEventArgs e);
    private void OnHostExited(HostProviderEventArgs e);
    [MemberNotNullWhenAttribute("True", "Mono.Cecil.CustomAttributeArgument[]")]
private bool LaunchHost(TestProcessStartInfo testHostStartInfo, CancellationToken cancellationToken);
    internal static void AdjustProcessPriorityBasedOnSettings(Process testHostProcess, IDictionary`2<string, string> testHostEnvironmentVariables);
    private static string GetUwpSources(string uwpSource);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_ExitCallBack>b__35_0(object process);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_ErrorReceivedCallback>b__37_0(object process, string data);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_OutputReceivedCallback>b__39_0(object process, string data);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetTestPlatformExtensions>b__45_0(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionUriAttribute("HostProvider://DotnetTestHost")]
[FriendlyNameAttribute("DotnetTestHost")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Hosting.DotnetTestHostManager : object {
    private static string DotnetTestHostUri;
    private static string DotnetTestHostFriendlyName;
    private static string TestAdapterRegexPattern;
    private static string PROCESSOR_ARCHITECTURE;
    private IDotnetHostHelper _dotnetHostHelper;
    private IEnvironment _platformEnvironment;
    private IProcessHelper _processHelper;
    private IRunSettingsHelper _runsettingHelper;
    private IFileHelper _fileHelper;
    private IWindowsRegistryHelper _windowsRegistryHelper;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    [NullableAttribute("2")]
private ITestHostLauncher _customTestHostLauncher;
    [NullableAttribute("2")]
private Process _testHostProcess;
    [NullableAttribute("2")]
private StringBuilder _testHostProcessStdError;
    [NullableAttribute("2")]
private StringBuilder _testHostProcessStdOut;
    private bool _hostExitedEventRaised;
    private string _hostPackageVersion;
    private Architecture _architecture;
    [NullableAttribute("2")]
private Framework _targetFramework;
    private bool _isVersionCheckRequired;
    [NullableAttribute("2")]
private string _dotnetHostPath;
    private bool _captureOutput;
    [NullableAttribute("2")]
private protected TestHostManagerCallbacks _testHostManagerCallbacks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<HostProviderEventArgs> HostLaunched;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<HostProviderEventArgs> HostExited;
    public bool Shared { get; }
    internal bool IsVersionCheckRequired { get; private set; }
    internal bool MakeRunsettingsCompatible { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<object> ExitCallBack { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, string> ErrorReceivedCallback { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<object, string> OutputReceivedCallback { get; }
    internal DotnetTestHostManager(IProcessHelper processHelper, IFileHelper fileHelper, IDotnetHostHelper dotnetHostHelper, IEnvironment platformEnvironment, IRunSettingsHelper runsettingHelper, IWindowsRegistryHelper windowsRegistryHelper, IEnvironmentVariableHelper environmentVariableHelper);
    [CompilerGeneratedAttribute]
public sealed virtual void add_HostLaunched(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HostLaunched(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_HostExited(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_HostExited(EventHandler`1<HostProviderEventArgs> value);
    public sealed virtual bool get_Shared();
    internal virtual bool get_IsVersionCheckRequired();
    private void set_IsVersionCheckRequired(bool value);
    internal bool get_MakeRunsettingsCompatible();
    private Action`1<object> get_ExitCallBack();
    private Action`2<object, string> get_ErrorReceivedCallback();
    private Action`2<object, string> get_OutputReceivedCallback();
    public sealed virtual void Initialize(IMessageLogger logger, string runsettingsXml);
    public sealed virtual void SetCustomLauncher(ITestHostLauncher customLauncher);
    public sealed virtual TestHostConnectionInfo GetTestHostConnectionInfo();
    public sealed virtual Task`1<bool> LaunchTestHostAsync(TestProcessStartInfo testHostStartInfo, CancellationToken cancellationToken);
    public virtual TestProcessStartInfo GetTestHostProcessStartInfo(IEnumerable`1<string> sources, IDictionary`2<string, string> environmentVariables, TestRunnerConnectionInfo connectionInfo);
    public sealed virtual IEnumerable`1<string> GetTestPlatformExtensions(IEnumerable`1<string> sources, IEnumerable`1<string> extensions);
    public sealed virtual IEnumerable`1<string> GetTestSources(IEnumerable`1<string> sources);
    [NullableContextAttribute("2")]
public sealed virtual bool CanExecuteCurrentRunConfiguration(string runsettingsXml);
    public sealed virtual Task CleanTestHostAsync(CancellationToken cancellationToken);
    public sealed virtual bool AttachDebuggerToTestHost();
    private void OnHostLaunched(HostProviderEventArgs e);
    private void OnHostExited(HostProviderEventArgs e);
    [MemberNotNullAttribute("_testHostProcessStdError")]
[MemberNotNullWhenAttribute("True", "_testHostProcess")]
private bool LaunchHost(TestProcessStartInfo testHostStartInfo, CancellationToken cancellationToken);
    private string GetTestHostPath(string runtimeConfigDevPath, string depsFilePath, string sourceDirectory);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_ExitCallBack>b__39_0(object process);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_ErrorReceivedCallback>b__41_0(object process, string data);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_OutputReceivedCallback>b__43_0(object process, string data);
    [CompilerGeneratedAttribute]
internal static bool <GetTestHostProcessStartInfo>g__IsRunningWithDotnetMuxer|48_0(string currentProcessPath);
    [CompilerGeneratedAttribute]
private bool <GetTestHostProcessStartInfo>g__IsWinOnArm|48_1(<>c__DisplayClass48_0& );
    [CompilerGeneratedAttribute]
internal static PlatformArchitecture <GetTestHostProcessStartInfo>g__TranslateToPlatformArchitecture|48_2(Architecture targetArchitecture);
    [CompilerGeneratedAttribute]
internal static bool <GetTestHostProcessStartInfo>g__IsSameArchitecture|48_3(Architecture targetArchitecture, PlatformArchitecture platformAchitecture);
    [CompilerGeneratedAttribute]
private bool <GetTestHostProcessStartInfo>g__SilentlyForceToX64|48_4(string sourcePath, <>c__DisplayClass48_0& );
    [CompilerGeneratedAttribute]
private bool <GetTestHostProcessStartInfo>g__IsNativeModule|48_5(string modulePath, <>c__DisplayClass48_0& );
}
internal static class Microsoft.VisualStudio.TestPlatform.DesktopTestHostRuntimeProvider.AppxManifestFile : object {
    [NullableContextAttribute("1")]
public static string GetApplicationExecutableName(string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class Microsoft.VisualStudio.TestPlatform.TestExtensionTypesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <Types>k__BackingField;
    public Type[] Types { get; }
    public TestExtensionTypesAttribute(Type[] types);
    [CompilerGeneratedAttribute]
public Type[] get_Types();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
