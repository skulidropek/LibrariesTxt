[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
internal interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler {
    public string LocalPath { get; public set; }
    public string RemotePath { get; public set; }
    public abstract virtual string get_LocalPath();
    public abstract virtual void set_LocalPath(string value);
    public abstract virtual string get_RemotePath();
    public abstract virtual void set_RemotePath(string value);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter {
    [NullableContextAttribute("2")]
public abstract virtual string UpdatePath(string path, PathConversionDirection updateDirection);
    public abstract virtual IEnumerable`1<string> UpdatePaths(IEnumerable`1<string> paths, PathConversionDirection updateDirection);
    public abstract virtual TestCase UpdateTestCase(TestCase testCase, PathConversionDirection updateDirection);
    public abstract virtual IEnumerable`1<TestCase> UpdateTestCases(IEnumerable`1<TestCase> testCases, PathConversionDirection updateDirection);
    public abstract virtual TestRunCompleteEventArgs UpdateTestRunCompleteEventArgs(TestRunCompleteEventArgs testRunCompleteEventArgs, PathConversionDirection updateDirection);
    public abstract virtual TestRunChangedEventArgs UpdateTestRunChangedEventArgs(TestRunChangedEventArgs testRunChangedArgs, PathConversionDirection updateDirection);
    public abstract virtual Collection`1<AttachmentSet> UpdateAttachmentSets(Collection`1<AttachmentSet> attachmentSets, PathConversionDirection updateDirection);
    public abstract virtual ICollection`1<AttachmentSet> UpdateAttachmentSets(ICollection`1<AttachmentSet> attachmentSets, PathConversionDirection updateDirection);
    public abstract virtual DiscoveryCriteria UpdateDiscoveryCriteria(DiscoveryCriteria discoveryCriteria, PathConversionDirection updateDirection);
    public abstract virtual TestRunCriteriaWithSources UpdateTestRunCriteriaWithSources(TestRunCriteriaWithSources testRunCriteriaWithSources, PathConversionDirection updateDirection);
    public abstract virtual TestRunCriteriaWithTests UpdateTestRunCriteriaWithTests(TestRunCriteriaWithTests testRunCriteriaWithTests, PathConversionDirection updateDirection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.NullPathConverter : object {
    private static Lazy`1<NullPathConverter> LazyInstance;
    public static NullPathConverter Instance { get; }
    private static NullPathConverter();
    public static NullPathConverter get_Instance();
    private sealed virtual override Collection`1<AttachmentSet> Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateAttachmentSets(Collection`1<AttachmentSet> attachmentSets, PathConversionDirection _);
    private sealed virtual override ICollection`1<AttachmentSet> Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateAttachmentSets(ICollection`1<AttachmentSet> attachmentSets, PathConversionDirection _);
    private sealed virtual override DiscoveryCriteria Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateDiscoveryCriteria(DiscoveryCriteria discoveryCriteria, PathConversionDirection _);
    [NullableContextAttribute("2")]
private sealed virtual override string Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdatePath(string path, PathConversionDirection _);
    private sealed virtual override IEnumerable`1<string> Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdatePaths(IEnumerable`1<string> paths, PathConversionDirection _);
    private sealed virtual override TestCase Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateTestCase(TestCase testCase, PathConversionDirection _);
    private sealed virtual override IEnumerable`1<TestCase> Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateTestCases(IEnumerable`1<TestCase> testCases, PathConversionDirection _);
    private sealed virtual override TestRunChangedEventArgs Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateTestRunChangedEventArgs(TestRunChangedEventArgs testRunChangedArgs, PathConversionDirection _);
    private sealed virtual override TestRunCompleteEventArgs Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateTestRunCompleteEventArgs(TestRunCompleteEventArgs testRunCompleteEventArgs, PathConversionDirection _);
    private sealed virtual override TestRunCriteriaWithSources Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateTestRunCriteriaWithSources(TestRunCriteriaWithSources testRunCriteriaWithSources, PathConversionDirection _);
    private sealed virtual override TestRunCriteriaWithTests Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IPathConverter.UpdateTestRunCriteriaWithTests(TestRunCriteriaWithTests testRunCriteriaWithTests, PathConversionDirection _);
}
internal enum Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.PathConversionDirection : Enum {
    public int value__;
    public static PathConversionDirection Receive;
    public static PathConversionDirection Send;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.PathConverter : object {
    private string _deploymentPath;
    private string _originalPath;
    public PathConverter(string originalPath, string deploymentPath, IFileHelper fileHelper);
    [NullableContextAttribute("2")]
public sealed virtual string UpdatePath(string path, PathConversionDirection updateDirection);
    public sealed virtual IEnumerable`1<string> UpdatePaths(IEnumerable`1<string> paths, PathConversionDirection updateDirection);
    public sealed virtual TestCase UpdateTestCase(TestCase testCase, PathConversionDirection updateDirection);
    public sealed virtual IEnumerable`1<TestCase> UpdateTestCases(IEnumerable`1<TestCase> testCases, PathConversionDirection updateDirection);
    public sealed virtual TestRunCompleteEventArgs UpdateTestRunCompleteEventArgs(TestRunCompleteEventArgs testRunCompleteEventArgs, PathConversionDirection updateDirection);
    public sealed virtual TestRunChangedEventArgs UpdateTestRunChangedEventArgs(TestRunChangedEventArgs testRunChangedArgs, PathConversionDirection updateDirection);
    public sealed virtual Collection`1<AttachmentSet> UpdateAttachmentSets(Collection`1<AttachmentSet> attachmentSets, PathConversionDirection updateDirection);
    public sealed virtual ICollection`1<AttachmentSet> UpdateAttachmentSets(ICollection`1<AttachmentSet> attachmentSets, PathConversionDirection updateDirection);
    private static AttachmentSet UpdateAttachmentSet(AttachmentSet attachmentSet, PathConversionDirection updateDirection);
    private static UriDataAttachment UpdateAttachment(UriDataAttachment attachment, PathConversionDirection _);
    private IEnumerable`1<TestResult> UpdateTestResults(IEnumerable`1<TestResult> testResults, PathConversionDirection updateDirection);
    public sealed virtual DiscoveryCriteria UpdateDiscoveryCriteria(DiscoveryCriteria discoveryCriteria, PathConversionDirection updateDirection);
    public sealed virtual TestRunCriteriaWithSources UpdateTestRunCriteriaWithSources(TestRunCriteriaWithSources testRunCriteriaWithSources, PathConversionDirection updateDirection);
    public sealed virtual TestRunCriteriaWithTests UpdateTestRunCriteriaWithTests(TestRunCriteriaWithTests testRunCriteriaWithTests, PathConversionDirection updateDirection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler : object {
    private int _highestSupportedVersion;
    private IDataSerializer _dataSerializer;
    private ICommunicationEndpointFactory _communicationEndpointFactory;
    private JobQueue`1<Action> _jobQueue;
    private IFileHelper _fileHelper;
    private ManualResetEventSlim _requestSenderConnected;
    private ManualResetEventSlim _testHostManagerFactoryReady;
    private ManualResetEventSlim _sessionCompleted;
    private int _protocolVersion;
    [NullableAttribute("2")]
private ITestHostManagerFactory _testHostManagerFactory;
    [NullableAttribute("2")]
private ICommunicationEndPoint _communicationEndPoint;
    [NullableAttribute("2")]
private ICommunicationChannel _channel;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Message> _onLaunchAdapterProcessWithDebuggerAttachedAckReceived;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<Message> _onAttachDebuggerAckRecieved;
    private IPathConverter _pathConverter;
    [NullableAttribute("2")]
private Exception _messageProcessingUnrecoverableError;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private TestHostConnectionInfo <ConnectionInfo>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.LocalPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.RemotePath>k__BackingField;
    public TestHostConnectionInfo ConnectionInfo { get; public set; }
    [NullableAttribute("2")]
private string Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.LocalPath { get; private set; }
    [NullableAttribute("2")]
private string Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.RemotePath { get; private set; }
    protected TestRequestHandler(TestHostConnectionInfo connectionInfo, ICommunicationEndpointFactory communicationEndpointFactory, IDataSerializer dataSerializer, JobQueue`1<Action> jobQueue, Action`1<Message> onLaunchAdapterProcessWithDebuggerAttachedAckReceived, Action`1<Message> onAttachDebuggerAckRecieved);
    protected TestRequestHandler(IDataSerializer dataSerializer, ICommunicationEndpointFactory communicationEndpointFactory);
    [CompilerGeneratedAttribute]
public sealed virtual TestHostConnectionInfo get_ConnectionInfo();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionInfo(TestHostConnectionInfo value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.get_LocalPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.set_LocalPath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private sealed virtual override string Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.get_RemotePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.IDeploymentAwareTestRequestHandler.set_RemotePath(string value);
    public virtual void InitializeCommunication();
    public sealed virtual bool WaitForRequestSenderConnection(int connectionTimeout);
    public sealed virtual void ProcessRequests(ITestHostManagerFactory testHostManagerFactory);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Close();
    public sealed virtual void SendTestCases(IEnumerable`1<TestCase> discoveredTestCases);
    [NullableContextAttribute("2")]
public sealed virtual void SendTestRunStatistics(TestRunChangedEventArgs testRunChangedArgs);
    [NullableContextAttribute("2")]
public sealed virtual void SendLog(TestMessageLevel messageLevel, string message);
    public sealed virtual void SendExecutionComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    public sealed virtual void DiscoveryComplete(DiscoveryCompleteEventArgs discoveryCompleteEventArgs, IEnumerable`1<TestCase> lastChunk);
    [NullableContextAttribute("2")]
public sealed virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public sealed virtual bool AttachDebuggerToProcess(AttachDebuggerInfo attachDebuggerInfo);
    public void OnMessageReceived(object sender, MessageReceivedEventArgs messageReceivedArgs);
    [NullableContextAttribute("2")]
private static ITestCaseEventsHandler GetTestCaseEventsHandler(string runSettings);
    private void SendData(string data);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <InitializeCommunication>b__32_0(object sender, ConnectedEventArgs connectedArgs);
}
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.FrameworkHandle : TestExecutionRecorder {
    [NullableAttribute("1")]
private TestExecutionContext _testExecutionContext;
    [NullableAttribute("1")]
private IInternalTestRunEventsHandler _testRunEventsHandler;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private bool <EnableShutdownAfterTestRun>k__BackingField;
    public bool EnableShutdownAfterTestRun { get; public set; }
    [NullableContextAttribute("1")]
public FrameworkHandle(ITestCaseEventsHandler testCaseEventsHandler, ITestRunCache testRunCache, TestExecutionContext testExecutionContext, IInternalTestRunEventsHandler testRunEventsHandler);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnableShutdownAfterTestRun();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnableShutdownAfterTestRun(bool value);
    [NullableContextAttribute("2")]
public sealed virtual int LaunchProcessWithDebuggerAttached(string filePath, string workingDirectory, string arguments, IDictionary`2<string, string> environmentVariables);
    public sealed virtual bool AttachDebuggerToProcess(int pid);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext : DiscoveryContext {
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InIsolation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDataCollectionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBeingDebugged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestRunDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionDirectory>k__BackingField;
    public bool KeepAlive { get; internal set; }
    public bool InIsolation { get; internal set; }
    public bool IsDataCollectionEnabled { get; internal set; }
    public bool IsBeingDebugged { get; internal set; }
    public string TestRunDirectory { get; internal set; }
    public string SolutionDirectory { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepAlive();
    [CompilerGeneratedAttribute]
internal void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InIsolation();
    [CompilerGeneratedAttribute]
internal void set_InIsolation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDataCollectionEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsDataCollectionEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBeingDebugged();
    [CompilerGeneratedAttribute]
internal void set_IsBeingDebugged(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TestRunDirectory();
    [CompilerGeneratedAttribute]
internal void set_TestRunDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SolutionDirectory();
    [CompilerGeneratedAttribute]
internal void set_SolutionDirectory(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.TestExecutionRecorder : TestSessionMessageLogger {
    private List`1<AttachmentSet> _attachmentSets;
    private ITestRunCache _testRunCache;
    [NullableAttribute("2")]
private ITestCaseEventsHandler _testCaseEventsHandler;
    private HashSet`1<Guid> _testCaseInProgressMap;
    private object _testCaseInProgressSyncObject;
    internal Collection`1<AttachmentSet> Attachments { get; }
    public TestExecutionRecorder(ITestCaseEventsHandler testCaseEventsHandler, ITestRunCache testRunCache);
    internal Collection`1<AttachmentSet> get_Attachments();
    public sealed virtual void RecordStart(TestCase testCase);
    public sealed virtual void RecordResult(TestResult testResult);
    public sealed virtual void RecordEnd(TestCase testCase, TestOutcome outcome);
    private void SendTestCaseEnd(TestCase testCase, TestOutcome outcome);
    public sealed virtual void RecordAttachments(IList`1<AttachmentSet> attachments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ArtifactProcessing.Artifact : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactType <Type>k__BackingField;
    public string FileName { get; }
    public ArtifactType Type { get; }
    public Artifact(string fileName, ArtifactType type);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public ArtifactType get_Type();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ArtifactProcessing.ArtifactProcessingManager : object {
    private static string RunsettingsFileName;
    private static string ExecutionCompleteFileName;
    [NullableAttribute("2")]
private string _testSessionCorrelationId;
    private IFileHelper _fileHelper;
    private ITestRunAttachmentsProcessingManager _testRunAttachmentsProcessingManager;
    [NullableAttribute("2")]
private string _testSessionProcessArtifactFolder;
    [NullableAttribute("2")]
private string _processArtifactFolder;
    private IDataSerializer _dataSerialized;
    private ITestRunAttachmentsProcessingEventsHandler _testRunAttachmentsProcessingEventsHandler;
    private IFeatureFlag _featureFlag;
    [NullableContextAttribute("2")]
public ArtifactProcessingManager(string testSessionCorrelationId);
    public ArtifactProcessingManager(string testSessionCorrelationId, IFileHelper fileHelper, ITestRunAttachmentsProcessingManager testRunAttachmentsProcessingManager, IDataSerializer dataSerialized, ITestRunAttachmentsProcessingEventsHandler testRunAttachmentsProcessingEventsHandler, IFeatureFlag featureFlag);
    public sealed virtual void CollectArtifacts(TestRunCompleteEventArgs testRunCompleteEventArgs, string runSettingsXml);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ArtifactProcessing.ArtifactProcessingManager/<PostProcessArtifactsAsync>d__13")]
public sealed virtual Task PostProcessArtifactsAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ArtifactProcessing.ArtifactProcessingManager/<DataCollectorsAttachmentsPostProcessing>d__14")]
private Task DataCollectorsAttachmentsPostProcessing(TestArtifacts[] testArtifacts);
    private TestArtifacts[] LoadTestArtifacts();
    private static Artifact ParseArtifact(string fileName);
    private static bool IsTelemetryOptedIn();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private long <DataCollectorsAttachmentsPostProcessing>b__14_1(Artifact x);
}
internal enum Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ArtifactProcessing.ArtifactType : Enum {
    public int value__;
    public static ArtifactType ExecutionComplete;
    public static ArtifactType Runsettings;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ArtifactProcessing.PostProcessingTestRunAttachmentsProcessingEventsHandler : object {
    private IOutput _consoleOutput;
    private ConcurrentBag`1<AttachmentSet> _attachmentsSet;
    public PostProcessingTestRunAttachmentsProcessingEventsHandler(IOutput consoleOutput);
    [NullableContextAttribute("2")]
public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual void HandleRawMessage(string rawMessage);
    public sealed virtual void HandleTestRunAttachmentsProcessingProgress(TestRunAttachmentsProcessingProgressEventArgs attachmentsProcessingProgressEventArgs);
    public sealed virtual void HandleProcessedAttachmentsChunk(IEnumerable`1<AttachmentSet> attachments);
    public sealed virtual void HandleTestRunAttachmentsProcessingComplete(TestRunAttachmentsProcessingCompleteEventArgs attachmentsProcessingCompleteEventArgs, IEnumerable`1<AttachmentSet> lastChunk);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ArtifactProcessing.TestArtifacts : object {
    [CompilerGeneratedAttribute]
private Artifact[] <Artifacts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestSession>k__BackingField;
    public Artifact[] Artifacts { get; public set; }
    public string TestSession { get; }
    public TestArtifacts(string testSession, Artifact[] artifacts);
    [CompilerGeneratedAttribute]
public Artifact[] get_Artifacts();
    [CompilerGeneratedAttribute]
public void set_Artifacts(Artifact[] value);
    [CompilerGeneratedAttribute]
public string get_TestSession();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DataCollectionRunEventsHandler : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<Tuple`2<TestMessageLevel, string>> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RawMessages>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<Tuple`2<TestMessageLevel, string>> Messages { get; private set; }
    public List`1<string> RawMessages { get; private set; }
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<TestMessageLevel, string>> get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(List`1<Tuple`2<TestMessageLevel, string>> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RawMessages();
    [CompilerGeneratedAttribute]
private void set_RawMessages(List`1<string> value);
    [NullableContextAttribute("2")]
public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual void HandleRawMessage(string rawMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.DiscoveryCriteriaExtensions : object {
    [ExtensionAttribute]
public static void UpdateDiscoveryCriteria(DiscoveryCriteria discoveryCriteria, ITestRuntimeProvider testRuntimeProvider);
    private static void UpdateTestSources(IEnumerable`1<string> sources, Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyDiscoveryManager : object {
    private ITestHostManagerFactory _testHostManagerFactory;
    private IDiscoveryManager _discoveryManager;
    private ITestRuntimeProvider _testHostManager;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public bool IsInitialized { get; private set; }
    public InProcessProxyDiscoveryManager(ITestRuntimeProvider testHostManager, ITestHostManagerFactory testHostManagerFactory);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Initialize(bool skipDefaultAdapters);
    public sealed virtual void DiscoverTests(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler);
    public sealed virtual void Close();
    public sealed virtual void Abort();
    public sealed virtual void Abort(ITestDiscoveryEventsHandler2 eventHandler);
    private void InitializeExtensions(IEnumerable`1<string> sources);
    public sealed virtual void InitializeDiscovery(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler, bool skipDefaultAdapters);
    [CompilerGeneratedAttribute]
private void <Abort>b__11_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.InProcessProxyExecutionManager : object {
    private ITestHostManagerFactory _testHostManagerFactory;
    private IExecutionManager _executionManager;
    private ITestRuntimeProvider _testHostManager;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public bool IsInitialized { get; private set; }
    public InProcessProxyExecutionManager(ITestRuntimeProvider testHostManager, ITestHostManagerFactory testHostManagerFactory);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Initialize(bool skipDefaultAdapters);
    public sealed virtual int StartTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler);
    public sealed virtual void Abort(IInternalTestRunEventsHandler eventHandler);
    public sealed virtual void Cancel(IInternalTestRunEventsHandler eventHandler);
    public sealed virtual void Close();
    private void InitializeExtensions(IEnumerable`1<string> sources);
    public sealed virtual void InitializeTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.LoggerNameValueConfigurationManager : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <NameValuePairs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, string> NameValuePairs { get; }
    public LoggerNameValueConfigurationManager(XmlElement configurationElement);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_NameValuePairs();
    private void Initialize(XmlElement configurationElement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.DiscoveryDataAggregator : object {
    private object _dataUpdateSyncObject;
    private ConcurrentDictionary`2<string, object> _metricsAggregator;
    private ConcurrentDictionary`2<string, DiscoveryStatus> _sourcesWithDiscoveryStatus;
    private int _isMessageSent;
    [CompilerGeneratedAttribute]
private bool <IsAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalTests>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <DiscoveredExtensions>k__BackingField;
    public bool IsAborted { get; private set; }
    public long TotalTests { get; private set; }
    public Dictionary`2<string, HashSet`1<string>> DiscoveredExtensions { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsAborted();
    [CompilerGeneratedAttribute]
private void set_IsAborted(bool value);
    [CompilerGeneratedAttribute]
public long get_TotalTests();
    [CompilerGeneratedAttribute]
private void set_TotalTests(long value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_DiscoveredExtensions();
    [CompilerGeneratedAttribute]
private void set_DiscoveredExtensions(Dictionary`2<string, HashSet`1<string>> value);
    public IDictionary`2<string, object> GetMetrics();
    public void MarkAsAborted();
    public void Aggregate(DiscoveryCompleteEventArgs discoveryCompleteEventArgs);
    public void AggregateMetrics(IDictionary`2<string, object> metrics);
    public bool TryAggregateIsMessageSent();
    public List`1<string> GetSourcesWithStatus(DiscoveryStatus discoveryStatus);
    [NullableContextAttribute("2")]
public void MarkSourcesWithStatus(IEnumerable`1<string> sources, DiscoveryStatus status);
    [NullableContextAttribute("2")]
public string MarkSourcesBasedOnDiscoveredTestCases(string previousSource, IEnumerable`1<TestCase> testCases);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelDiscoveryEventsHandler : object {
    private IProxyDiscoveryManager _proxyDiscoveryManager;
    private ITestDiscoveryEventsHandler2 _actualDiscoveryEventsHandler;
    private IParallelProxyDiscoveryManager _parallelProxyDiscoveryManager;
    private DiscoveryDataAggregator _discoveryDataAggregator;
    private IDataSerializer _dataSerializer;
    private IRequestData _requestData;
    public ParallelDiscoveryEventsHandler(IRequestData requestData, IProxyDiscoveryManager proxyDiscoveryManager, ITestDiscoveryEventsHandler2 actualDiscoveryEventsHandler, IParallelProxyDiscoveryManager parallelProxyDiscoveryManager, DiscoveryDataAggregator discoveryDataAggregator);
    internal ParallelDiscoveryEventsHandler(IRequestData requestData, IProxyDiscoveryManager proxyDiscoveryManager, ITestDiscoveryEventsHandler2 actualDiscoveryEventsHandler, IParallelProxyDiscoveryManager parallelProxyDiscoveryManager, DiscoveryDataAggregator discoveryDataAggregator, IDataSerializer dataSerializer);
    public sealed virtual void HandleDiscoveryComplete(DiscoveryCompleteEventArgs discoveryCompleteEventArgs, IEnumerable`1<TestCase> lastChunk);
    public sealed virtual void HandleRawMessage(string rawMessage);
    public sealed virtual void HandleDiscoveredTests(IEnumerable`1<TestCase> discoveredTestCases);
    [NullableContextAttribute("2")]
public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    private void ConvertToRawMessageAndSend(string messageType, object payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyDiscoveryManager : object {
    private IDataSerializer _dataSerializer;
    private DiscoveryDataAggregator _dataAggregator;
    private bool _isParallel;
    private ParallelOperationManager`3<IProxyDiscoveryManager, ITestDiscoveryEventsHandler2, DiscoveryCriteria> _parallelOperationManager;
    private Dictionary`2<string, TestRuntimeProviderInfo> _sourceToTestHostProviderMap;
    private IRequestData _requestData;
    private int _discoveryCompletedClients;
    private int _availableTestSources;
    private int _availableWorkloads;
    private bool _skipDefaultAdapters;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private bool <IsAbortRequested>k__BackingField;
    private object _discoveryStatusLockObject;
    public bool IsAbortRequested { get; private set; }
    public ParallelProxyDiscoveryManager(IRequestData requestData, Func`3<TestRuntimeProviderInfo, DiscoveryCriteria, IProxyDiscoveryManager> actualProxyManagerCreator, DiscoveryDataAggregator dataAggregator, int parallelLevel, List`1<TestRuntimeProviderInfo> testHostProviders);
    internal ParallelProxyDiscoveryManager(IRequestData requestData, Func`3<TestRuntimeProviderInfo, DiscoveryCriteria, IProxyDiscoveryManager> actualProxyManagerCreator, DiscoveryDataAggregator dataAggregator, IDataSerializer dataSerializer, int parallelLevel, List`1<TestRuntimeProviderInfo> testHostProviders);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsAbortRequested();
    [CompilerGeneratedAttribute]
private void set_IsAbortRequested(bool value);
    public sealed virtual void Initialize(bool skipDefaultAdapters);
    public sealed virtual void DiscoverTests(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler);
    private ITestDiscoveryEventsHandler2 GetParallelEventHandler(ITestDiscoveryEventsHandler2 eventHandler, IProxyDiscoveryManager concurrentManager);
    public sealed virtual void Abort();
    public sealed virtual void Abort(ITestDiscoveryEventsHandler2 eventHandler);
    public sealed virtual void Close();
    public sealed virtual bool HandlePartialDiscoveryComplete(IProxyDiscoveryManager proxyDiscoveryManager, long totalTests, IEnumerable`1<TestCase> lastChunk, bool isAborted);
    private List`1<ProviderSpecificWorkload`1<DiscoveryCriteria>> SplitToWorkloads(DiscoveryCriteria discoveryCriteria, Dictionary`2<string, TestRuntimeProviderInfo> sourceToTestHostProviderMap);
    private Task InitializeDiscoverTestsOnConcurrentManager(IProxyDiscoveryManager proxyDiscoveryManager, ITestDiscoveryEventsHandler2 eventHandler, DiscoveryCriteria discoveryCriteria);
    private void DiscoverTestsOnConcurrentManager(IProxyDiscoveryManager proxyDiscoveryManager, ITestDiscoveryEventsHandler2 eventHandler, DiscoveryCriteria discoveryCriteria, bool initialized, Task task);
    private void HandleError(ITestDiscoveryEventsHandler2 eventHandler, Task t);
    public sealed virtual void InitializeDiscovery(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler, bool skipDefaultAdapters);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal static DiscoveryCriteria <SplitToWorkloads>g__NewDiscoveryCriteriaFromSourceAndSettings|25_2(IEnumerable`1<string> sources, DiscoveryCriteria discoveryCriteria, string runsettingsXml);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelProxyExecutionManager : object {
    private IDataSerializer _dataSerializer;
    private bool _isParallel;
    private int _parallelLevel;
    private ParallelOperationManager`3<IProxyExecutionManager, IInternalTestRunEventsHandler, TestRunCriteria> _parallelOperationManager;
    private Dictionary`2<string, TestRuntimeProviderInfo> _sourceToTestHostProviderMap;
    private bool _isDisposed;
    private bool _abortRequested;
    private int _runCompletedClients;
    private int _runStartedClients;
    private int _availableWorkloads;
    [NullableAttribute("2")]
private ParallelRunDataAggregator _currentRunDataAggregator;
    private IRequestData _requestData;
    private bool _skipDefaultAdapters;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    private object _executionStatusLockObject;
    public bool IsInitialized { get; private set; }
    public ParallelProxyExecutionManager(IRequestData requestData, Func`3<TestRuntimeProviderInfo, TestRunCriteria, IProxyExecutionManager> actualProxyManagerCreator, int parallelLevel, List`1<TestRuntimeProviderInfo> testHostProviders);
    internal ParallelProxyExecutionManager(IRequestData requestData, Func`3<TestRuntimeProviderInfo, TestRunCriteria, IProxyExecutionManager> actualProxyManagerCreator, IDataSerializer dataSerializer, int parallelLevel, List`1<TestRuntimeProviderInfo> testHostProviders);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Initialize(bool skipDefaultAdapters);
    public sealed virtual int StartTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler);
    public sealed virtual void Abort(IInternalTestRunEventsHandler runEventsHandler);
    public sealed virtual void Cancel(IInternalTestRunEventsHandler runEventsHandler);
    public sealed virtual void Close();
    public sealed virtual bool HandlePartialRunComplete(IProxyExecutionManager proxyExecutionManager, TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    private List`1<ProviderSpecificWorkload`1<TestRunCriteria>> SplitToWorkloads(TestRunCriteria testRunCriteria, Dictionary`2<string, TestRuntimeProviderInfo> sourceToTestHostProviderMap);
    private ParallelRunEventsHandler GetParallelEventHandler(IInternalTestRunEventsHandler eventHandler, IProxyExecutionManager concurrentManager);
    private Task PrepareTestRunOnConcurrentManager(IProxyExecutionManager proxyExecutionManager, IInternalTestRunEventsHandler eventHandler, TestRunCriteria testRunCriteria);
    private void StartTestRunOnConcurrentManager(IProxyExecutionManager proxyExecutionManager, IInternalTestRunEventsHandler eventHandler, TestRunCriteria testRunCriteria, bool initialized, Task initTask);
    public sealed virtual void InitializeTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunDataAggregator : object {
    private List`1<string> _executorUris;
    private List`1<ITestRunStatistics> _testRunStatsList;
    private ConcurrentDictionary`2<string, object> _metricsAggregator;
    private object _dataUpdateSyncObject;
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<AttachmentSet> <RunContextAttachments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AttachmentSet> <RunCompleteArgsAttachments>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<InvokedDataCollector> <InvokedDataCollectors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Exception> <Exceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <DiscoveredExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    public TimeSpan ElapsedTime { get; public set; }
    public Collection`1<AttachmentSet> RunContextAttachments { get; public set; }
    public List`1<AttachmentSet> RunCompleteArgsAttachments { get; }
    public Collection`1<InvokedDataCollector> InvokedDataCollectors { get; public set; }
    public List`1<Exception> Exceptions { get; }
    public HashSet`1<string> ExecutorUris { get; }
    public Dictionary`2<string, HashSet`1<string>> DiscoveredExtensions { get; private set; }
    public bool IsAborted { get; private set; }
    public bool IsCanceled { get; private set; }
    public string RunSettings { get; }
    public ParallelRunDataAggregator(string runSettingsXml);
    [CompilerGeneratedAttribute]
public TimeSpan get_ElapsedTime();
    [CompilerGeneratedAttribute]
public void set_ElapsedTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public Collection`1<AttachmentSet> get_RunContextAttachments();
    [CompilerGeneratedAttribute]
public void set_RunContextAttachments(Collection`1<AttachmentSet> value);
    [CompilerGeneratedAttribute]
public List`1<AttachmentSet> get_RunCompleteArgsAttachments();
    [CompilerGeneratedAttribute]
public Collection`1<InvokedDataCollector> get_InvokedDataCollectors();
    [CompilerGeneratedAttribute]
public void set_InvokedDataCollectors(Collection`1<InvokedDataCollector> value);
    [CompilerGeneratedAttribute]
public List`1<Exception> get_Exceptions();
    public HashSet`1<string> get_ExecutorUris();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_DiscoveredExtensions();
    [CompilerGeneratedAttribute]
private void set_DiscoveredExtensions(Dictionary`2<string, HashSet`1<string>> value);
    [CompilerGeneratedAttribute]
public bool get_IsAborted();
    [CompilerGeneratedAttribute]
private void set_IsAborted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
private void set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    public ITestRunStatistics GetAggregatedRunStats();
    public IDictionary`2<string, object> GetAggregatedRunDataMetrics();
    [NullableContextAttribute("2")]
public Exception GetAggregatedException();
    [NullableContextAttribute("2")]
public void Aggregate(ITestRunStatistics testRunStats, ICollection`1<string> executorUris, Exception exception, TimeSpan elapsedTime, bool isAborted, bool isCanceled, ICollection`1<AttachmentSet> runContextAttachments, Collection`1<AttachmentSet> runCompleteArgsAttachments, Collection`1<InvokedDataCollector> invokedDataCollectors, Dictionary`2<string, HashSet`1<string>> discoveredExtensions);
    public void AggregateRunDataMetrics(IDictionary`2<string, object> metrics);
    public void MarkAsAborted();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ParallelRunEventsHandler : object {
    private IProxyExecutionManager _proxyExecutionManager;
    private IInternalTestRunEventsHandler _actualRunEventsHandler;
    private IParallelProxyExecutionManager _parallelProxyExecutionManager;
    private ParallelRunDataAggregator _runDataAggregator;
    private IDataSerializer _dataSerializer;
    protected IRequestData _requestData;
    public ParallelRunEventsHandler(IRequestData requestData, IProxyExecutionManager proxyExecutionManager, IInternalTestRunEventsHandler actualRunEventsHandler, IParallelProxyExecutionManager parallelProxyExecutionManager, ParallelRunDataAggregator runDataAggregator);
    internal ParallelRunEventsHandler(IRequestData requestData, IProxyExecutionManager proxyExecutionManager, IInternalTestRunEventsHandler actualRunEventsHandler, IParallelProxyExecutionManager parallelProxyExecutionManager, ParallelRunDataAggregator runDataAggregator, IDataSerializer dataSerializer);
    public virtual void HandleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    protected bool HandleSingleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    protected void HandleParallelTestRunComplete(TestRunCompleteEventArgs completedArgs);
    public sealed virtual void HandleRawMessage(string rawMessage);
    [NullableContextAttribute("2")]
public sealed virtual void HandleTestRunStatsChange(TestRunChangedEventArgs testRunChangedArgs);
    [NullableContextAttribute("2")]
public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public sealed virtual bool AttachDebuggerToProcess(AttachDebuggerInfo attachDebuggerInfo);
    private void ConvertToRawMessageAndSend(string messageType, object payload);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.Parallel.ProviderSpecificWorkload`1 : object {
    [CompilerGeneratedAttribute]
private T <Work>k__BackingField;
    [CompilerGeneratedAttribute]
private TestRuntimeProviderInfo <Provider>k__BackingField;
    public T Work { get; }
    public TestRuntimeProviderInfo Provider { get; protected set; }
    public bool HasProvider { get; }
    public ProviderSpecificWorkload`1(T work, TestRuntimeProviderInfo provider);
    [CompilerGeneratedAttribute]
public T get_Work();
    [CompilerGeneratedAttribute]
public TestRuntimeProviderInfo get_Provider();
    [CompilerGeneratedAttribute]
protected void set_Provider(TestRuntimeProviderInfo value);
    public bool get_HasProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ParallelOperationManager`3 : object {
    private static int PreStart;
    private static int VSTEST_HOSTPRESTART_COUNT;
    private Func`3<TestRuntimeProviderInfo, TWorkload, TManager> _createNewManager;
    [NullableAttribute("2")]
private TEventHandler _eventHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<TEventHandler, TManager, TEventHandler> _getEventHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<TManager, TEventHandler, TWorkload, Task> _initializeWorkload;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`5<TManager, TEventHandler, TWorkload, bool, Task> _runWorkload;
    private bool _acceptMoreWork;
    private List`1<ProviderSpecificWorkload`1<TWorkload>> _workloads;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Slot<TManager, TEventHandler, TWorkload>> _managerSlots;
    private object _lock;
    [CompilerGeneratedAttribute]
private int <MaxParallelLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OccupiedSlotCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AvailableSlotCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PreStartCount>k__BackingField;
    public int MaxParallelLevel { get; }
    public int OccupiedSlotCount { get; private set; }
    public int AvailableSlotCount { get; private set; }
    public int PreStartCount { get; private set; }
    public ParallelOperationManager`3(Func`3<TestRuntimeProviderInfo, TWorkload, TManager> createNewManager, int parallelLevel);
    private static ParallelOperationManager`3();
    [CompilerGeneratedAttribute]
public int get_MaxParallelLevel();
    [CompilerGeneratedAttribute]
public int get_OccupiedSlotCount();
    [CompilerGeneratedAttribute]
private void set_OccupiedSlotCount(int value);
    [CompilerGeneratedAttribute]
public int get_AvailableSlotCount();
    [CompilerGeneratedAttribute]
private void set_AvailableSlotCount(int value);
    [CompilerGeneratedAttribute]
public int get_PreStartCount();
    [CompilerGeneratedAttribute]
private void set_PreStartCount(int value);
    private void ClearSlots(bool acceptMoreWork);
    private void SetOccupiedSlotCount();
    public void StartWork(List`1<ProviderSpecificWorkload`1<TWorkload>> workloads, TEventHandler eventHandler, Func`3<TEventHandler, TManager, TEventHandler> getEventHandler, Func`4<TManager, TEventHandler, TWorkload, Task> initializeWorkload, Action`5<TManager, TEventHandler, TWorkload, bool, Task> runWorkload);
    private bool RunWorkInParallel();
    public bool RunNextWork(TManager completedManager);
    private void ClearCompletedSlot(TManager completedManager);
    private static string GetSourcesForSlotExpensive(Slot<TManager, TEventHandler, TWorkload> slot);
    public void DoActionOnAllManagers(Action`1<TManager> action, bool doActionsInParallel);
    private static void DoManagerAction(Action action);
    internal void StopAllManagers();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager : object {
    [NullableAttribute("2")]
private TestSessionInfo _testSessionInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<string, ProxyDiscoveryManager, ProxyOperationManager> _proxyOperationManagerCreator;
    private DiscoveryDataAggregator _discoveryDataAggregator;
    private IFileHelper _fileHelper;
    private IDataSerializer _dataSerializer;
    [NullableAttribute("2")]
private ITestRuntimeProvider _testHostManager;
    private bool _isCommunicationEstablished;
    [NullableAttribute("2")]
private ProxyOperationManager _proxyOperationManager;
    [NullableAttribute("2")]
private ITestDiscoveryEventsHandler2 _baseTestDiscoveryEventsHandler;
    private bool _skipDefaultAdapters;
    [NullableAttribute("2")]
private string _previousSource;
    public ProxyDiscoveryManager(TestSessionInfo testSessionInfo, Func`3<string, ProxyDiscoveryManager, ProxyOperationManager> proxyOperationManagerCreator);
    internal ProxyDiscoveryManager(TestSessionInfo testSessionInfo, Func`3<string, ProxyDiscoveryManager, ProxyOperationManager> proxyOperationManagerCreator, DiscoveryDataAggregator discoveryDataAggregator);
    public ProxyDiscoveryManager(IRequestData requestData, ITestRequestSender testRequestSender, ITestRuntimeProvider testHostManager);
    [NullableContextAttribute("2")]
internal ProxyDiscoveryManager(IRequestData requestData, ITestRequestSender requestSender, ITestRuntimeProvider testHostManager, Framework testhostManagerFramework, DiscoveryDataAggregator discoveryDataAggregator, IDataSerializer dataSerializer, IFileHelper fileHelper);
    public sealed virtual void Initialize(bool skipDefaultAdapters);
    public sealed virtual void InitializeDiscovery(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler, bool skipDefaultAdapters);
    public sealed virtual void DiscoverTests(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler);
    private void HandleException(Exception exception);
    public sealed virtual void Abort();
    public sealed virtual void Abort(ITestDiscoveryEventsHandler2 eventHandler);
    public sealed virtual void Close();
    public sealed virtual void HandleDiscoveryComplete(DiscoveryCompleteEventArgs discoveryCompleteEventArgs, IEnumerable`1<TestCase> lastChunk);
    public sealed virtual void HandleDiscoveredTests(IEnumerable`1<TestCase> discoveredTestCases);
    public sealed virtual void HandleRawMessage(string rawMessage);
    [NullableContextAttribute("2")]
public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public virtual TestProcessStartInfo UpdateTestProcessStartInfo(TestProcessStartInfo testProcessStartInfo);
    private void InitializeExtensions(IEnumerable`1<string> sources, bool skipDefaultAdapters);
    private void LogMessage(TestMessageLevel testMessageLevel, string message);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <InitializeExtensions>b__27_0(string extension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager : object {
    [NullableAttribute("2")]
private TestSessionInfo _testSessionInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<string, ProxyExecutionManager, ProxyOperationManager> _proxyOperationManagerCreator;
    private IFileHelper _fileHelper;
    private IDataSerializer _dataSerializer;
    private bool _debugEnabledForTestSession;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _testSources;
    [NullableAttribute("2")]
private ITestRuntimeProvider _testHostManager;
    private bool _isCommunicationEstablished;
    [NullableAttribute("2")]
private ProxyOperationManager _proxyOperationManager;
    [NullableAttribute("2")]
private IInternalTestRunEventsHandler _baseTestRunEventsHandler;
    private bool _skipDefaultAdapters;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public bool IsInitialized { get; private set; }
    public CancellationTokenSource CancellationTokenSource { get; public set; }
    public ProxyExecutionManager(TestSessionInfo testSessionInfo, Func`3<string, ProxyExecutionManager, ProxyOperationManager> proxyOperationManagerCreator, bool debugEnabledForTestSession);
    public ProxyExecutionManager(IRequestData requestData, ITestRequestSender requestSender, ITestRuntimeProvider testHostManager, Framework testHostManagerFramework);
    internal ProxyExecutionManager(IRequestData requestData, ITestRequestSender requestSender, ITestRuntimeProvider testHostManager, Framework testHostManagerFramework, IDataSerializer dataSerializer, IFileHelper fileHelper);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public CancellationTokenSource get_CancellationTokenSource();
    public void set_CancellationTokenSource(CancellationTokenSource value);
    public virtual void Initialize(bool skipDefaultAdapters);
    public virtual void InitializeTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler);
    public virtual int StartTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler);
    private void HandleError(Exception exception);
    public virtual void Cancel(IInternalTestRunEventsHandler eventHandler);
    public sealed virtual void Abort(IInternalTestRunEventsHandler eventHandler);
    public sealed virtual void Close();
    public virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public sealed virtual bool AttachDebuggerToProcess(AttachDebuggerInfo attachDebuggerInfo);
    public sealed virtual void HandleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    [NullableContextAttribute("2")]
public sealed virtual void HandleTestRunStatsChange(TestRunChangedEventArgs testRunChangedArgs);
    public sealed virtual void HandleRawMessage(string rawMessage);
    [NullableContextAttribute("2")]
public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public virtual TestProcessStartInfo UpdateTestProcessStartInfo(TestProcessStartInfo testProcessStartInfo);
    public virtual bool SetupChannel(IEnumerable`1<string> sources, string runSettings);
    private void LogMessage(TestMessageLevel testMessageLevel, string message);
    private void InitializeExtensions(IEnumerable`1<string> sources);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <InitializeExtensions>b__37_0(string extension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManagerWithDataCollection : ProxyExecutionManager {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _dataCollectionEnvironmentVariables;
    private int _dataCollectionPort;
    private IRequestData _requestData;
    [CompilerGeneratedAttribute]
private DataCollectionRunEventsHandler <DataCollectionRunEventsHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IProxyDataCollectionManager <ProxyDataCollectionManager>k__BackingField;
    internal DataCollectionRunEventsHandler DataCollectionRunEventsHandler { get; private set; }
    internal IProxyDataCollectionManager ProxyDataCollectionManager { get; private set; }
    internal CancellationToken CancellationToken { get; }
    public ProxyExecutionManagerWithDataCollection(IRequestData requestData, ITestRequestSender requestSender, ITestRuntimeProvider testHostManager, Framework testHostManagerFramework, IProxyDataCollectionManager proxyDataCollectionManager);
    private void TestHostLaunchedHandler(object sender, HostProviderEventArgs e);
    [CompilerGeneratedAttribute]
internal DataCollectionRunEventsHandler get_DataCollectionRunEventsHandler();
    [CompilerGeneratedAttribute]
private void set_DataCollectionRunEventsHandler(DataCollectionRunEventsHandler value);
    [CompilerGeneratedAttribute]
internal IProxyDataCollectionManager get_ProxyDataCollectionManager();
    [CompilerGeneratedAttribute]
private void set_ProxyDataCollectionManager(IProxyDataCollectionManager value);
    internal CancellationToken get_CancellationToken();
    public virtual void Initialize(bool skipDefaultAdapters);
    public virtual int StartTestRun(TestRunCriteria testRunCriteria, IInternalTestRunEventsHandler eventHandler);
    public virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public virtual TestProcessStartInfo UpdateTestProcessStartInfo(TestProcessStartInfo testProcessStartInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager : object {
    internal static string DotnetTesthostFriendlyName;
    internal static string DefaultTesthostFriendlyName;
    private string _versionCheckPropertyName;
    private string _makeRunsettingsCompatiblePropertyName;
    private ManualResetEventSlim _testHostExited;
    private IProcessHelper _processHelper;
    [NullableAttribute("2")]
private IBaseProxy _baseProxy;
    private bool _versionCheckRequired;
    private bool _makeRunsettingsCompatible;
    private bool _makeRunsettingsCompatibleSet;
    private bool _initialized;
    private bool _testHostLaunched;
    private int _testHostProcessId;
    [NullableAttribute("2")]
private string _testHostProcessStdError;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IRequestData <RequestData>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestRequestSender <RequestSender>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestRuntimeProvider <TestHostManager>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTestSessionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Framework <TestHostManagerFramework>k__BackingField;
    [NullableAttribute("2")]
public IRequestData RequestData { get; public set; }
    public ITestRequestSender RequestSender { get; public set; }
    public ITestRuntimeProvider TestHostManager { get; public set; }
    internal int Id { get; internal set; }
    internal bool IsTestSessionEnabled { get; internal set; }
    public CancellationTokenSource CancellationTokenSource { get; public set; }
    [NullableAttribute("2")]
public Framework TestHostManagerFramework { get; }
    public ProxyOperationManager(IRequestData requestData, ITestRequestSender requestSender, ITestRuntimeProvider testHostManager, Framework testhostManagerFramework);
    [NullableContextAttribute("2")]
public ProxyOperationManager(IRequestData requestData, ITestRequestSender requestSender, ITestRuntimeProvider testHostManager, Framework testhostManagerFramework, IBaseProxy baseProxy);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IRequestData get_RequestData();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestData(IRequestData value);
    [CompilerGeneratedAttribute]
public ITestRequestSender get_RequestSender();
    [CompilerGeneratedAttribute]
public void set_RequestSender(ITestRequestSender value);
    [CompilerGeneratedAttribute]
public ITestRuntimeProvider get_TestHostManager();
    [CompilerGeneratedAttribute]
public void set_TestHostManager(ITestRuntimeProvider value);
    [CompilerGeneratedAttribute]
internal int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsTestSessionEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsTestSessionEnabled(bool value);
    [CompilerGeneratedAttribute]
public CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
public void set_CancellationTokenSource(CancellationTokenSource value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Framework get_TestHostManagerFramework();
    public virtual void Initialize(bool skipDefaultAdapters);
    public virtual bool SetupChannel(IEnumerable`1<string> sources, string runSettings, ITestMessageEventHandler eventHandler);
    public virtual bool SetupChannel(IEnumerable`1<string> sources, string runSettings);
    public virtual void Close();
    public virtual TestProcessStartInfo UpdateTestProcessStartInfo(TestProcessStartInfo testProcessStartInfo);
    [NullableContextAttribute("2")]
public string RemoveNodesFromRunsettingsIfRequired(string runsettingsXml, Action`2<TestMessageLevel, string> logMessage);
    internal virtual string ReadTesthostFriendlyName();
    internal bool IsTesthostCompatibleWithTestSessions();
    [NullableContextAttribute("2")]
private static string GetTimestampedLogFile(string logFile);
    private void CompatIssueWithVersionCheckAndRunsettings();
    [NullableContextAttribute("2")]
private void TestHostManagerHostLaunched(object sender, HostProviderEventArgs e);
    [NullableContextAttribute("2")]
private void TestHostManagerHostExited(object sender, HostProviderEventArgs e);
    private void ThrowOnTestHostExited(IEnumerable`1<string> sources, bool testHostExited);
    private void ThrowExceptionOnConnectionFailure(IEnumerable`1<string> sources, int connTimeout);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <CompatIssueWithVersionCheckAndRunsettings>b__52_0(PropertyInfo p);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <CompatIssueWithVersionCheckAndRunsettings>b__52_1(PropertyInfo p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection : ProxyOperationManager {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> _dataCollectionEnvironmentVariables;
    private IRequestData _requestData;
    private int _dataCollectionPort;
    [CompilerGeneratedAttribute]
private DataCollectionRunEventsHandler <DataCollectionRunEventsHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IProxyDataCollectionManager <ProxyDataCollectionManager>k__BackingField;
    internal DataCollectionRunEventsHandler DataCollectionRunEventsHandler { get; private set; }
    internal IProxyDataCollectionManager ProxyDataCollectionManager { get; private set; }
    public ProxyOperationManagerWithDataCollection(IRequestData requestData, ITestRequestSender requestSender, ITestRuntimeProvider testHostManager, Framework testHostManagerFramework, IProxyDataCollectionManager proxyDataCollectionManager);
    public virtual void Initialize(bool skipDefaultAdapters);
    public virtual TestProcessStartInfo UpdateTestProcessStartInfo(TestProcessStartInfo testProcessStartInfo);
    public virtual bool SetupChannel(IEnumerable`1<string> sources, string runSettings, ITestMessageEventHandler eventHandler);
    [CompilerGeneratedAttribute]
internal DataCollectionRunEventsHandler get_DataCollectionRunEventsHandler();
    [CompilerGeneratedAttribute]
private void set_DataCollectionRunEventsHandler(DataCollectionRunEventsHandler value);
    [CompilerGeneratedAttribute]
internal IProxyDataCollectionManager get_ProxyDataCollectionManager();
    [CompilerGeneratedAttribute]
private void set_ProxyDataCollectionManager(IProxyDataCollectionManager value);
    private void TestHostLaunchedHandler(object sender, HostProviderEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestLoggerManager : object {
    private bool _isDisposed;
    private HashSet`1<Type> _initializedLoggers;
    [NullableAttribute("2")]
private string _testRunDirectory;
    [NullableAttribute("2")]
private string _targetFramework;
    private bool _treatNoTestsAsError;
    private InternalTestLoggerEvents _loggerEvents;
    private IMessageLogger _messageLogger;
    private IRequestData _requestData;
    [NullableAttribute("2")]
private TestLoggerExtensionManager _testLoggerExtensionManager;
    private IAssemblyLoadContext _assemblyLoadContext;
    public bool LoggersInitialized { get; }
    private TestLoggerExtensionManager TestLoggerExtensionManager { get; }
    public TestLoggerManager(IRequestData requestData, IMessageLogger messageLogger, InternalTestLoggerEvents loggerEvents);
    internal TestLoggerManager(IRequestData requestData, IMessageLogger messageLogger, InternalTestLoggerEvents loggerEvents, IAssemblyLoadContext assemblyLoadContext);
    public sealed virtual bool get_LoggersInitialized();
    private TestLoggerExtensionManager get_TestLoggerExtensionManager();
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string runSettings);
    public sealed virtual void HandleTestRunMessage(TestRunMessageEventArgs e);
    public sealed virtual void HandleTestRunStatsChange(TestRunChangedEventArgs e);
    public sealed virtual void HandleTestRunStart(TestRunStartEventArgs e);
    public sealed virtual void HandleTestRunComplete(TestRunCompleteEventArgs e);
    public sealed virtual void HandleDiscoveryMessage(TestRunMessageEventArgs e);
    public sealed virtual void HandleDiscoveredTests(DiscoveredTestsEventArgs e);
    public sealed virtual void HandleDiscoveryComplete(DiscoveryCompleteEventArgs e);
    public sealed virtual void HandleDiscoveryStart(DiscoveryStartEventArgs e);
    public sealed virtual void Dispose();
    internal bool InitializeLoggerByUri(Uri uri, Dictionary`2<string, string> parameters);
    [NullableContextAttribute("2")]
internal bool TryGetUriFromFriendlyName(string friendlyName, Uri& loggerUri);
    [NullableContextAttribute("2")]
internal static string GetResultsDirectory(string runSettings);
    [NullableContextAttribute("2")]
internal static Framework GetTargetFramework(string runSettings);
    [NullableContextAttribute("2")]
internal static bool GetTreatNoTestsAsError(string runSettings);
    internal void EnableLogging();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("2")]
private static Dictionary`2<string, string> GetParametersFromConfigurationElement(XmlElement configuration);
    private bool InitializeLoggerByType(string assemblyQualifiedName, string codeBase, Dictionary`2<string, string> parameters);
    [NullableContextAttribute("2")]
private bool InitializeLogger(object logger, string extensionUri, Dictionary`2<string, string> parameters);
    private Dictionary`2<string, string> UpdateLoggerParameters(Dictionary`2<string, string> parameters);
    private void CheckDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRunCriteriaExtensions : object {
    [ExtensionAttribute]
public static TestRunCriteriaWithSources CreateTestRunCriteriaForSources(TestRunCriteria testRunCriteria, ITestRuntimeProvider testRuntimeProvider, string runSettings, TestExecutionContext executionContext, IEnumerable`1<string> inputPackages);
    [ExtensionAttribute]
public static TestRunCriteriaWithTests CreateTestRunCriteriaForTests(TestRunCriteria testRunCriteria, ITestRuntimeProvider testRuntimeProvider, string runSettings, TestExecutionContext executionContext, IEnumerable`1<string> inputPackages);
    [NullableContextAttribute("2")]
private static bool TryCheckTestSourceDifferFromPackage(ITestRuntimeProvider testRuntimeProvider, IEnumerable`1<string> inputPackages, IEnumerable`1& actualTestSources);
    private static void UpdateTestSources(IEnumerable`1<string> sources, Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shared>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<SourceDetail> <SourceDetails>k__BackingField;
    public Type Type { get; }
    public bool Shared { get; }
    public string RunSettings { get; }
    [NullableAttribute("1")]
public List`1<SourceDetail> SourceDetails { get; }
    public TestRuntimeProviderInfo(Type type, bool shared, string runSettings, List`1<SourceDetail> sourceDetails);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public bool get_Shared();
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public List`1<SourceDetail> get_SourceDetails();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Constants : object {
    internal static IList`1<string> DefaultAdapters;
    internal static string DefaultAdapterLocation;
    private static Constants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Constants : object {
    public static string TestSessionStartMethodName;
    public static string TestSessionEndMethodName;
    public static string TestCaseStartMethodName;
    public static string TestCaseEndMethodName;
    public static string TestSourcesPropertyName;
    public static string CoverletDataCollectorCodebase;
    public static string CoverletDataCollectorTypeName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncher : object {
    protected IProcessHelper _processHelper;
    protected IMessageLogger _messageLogger;
    protected StringBuilder _processStdError;
    [CompilerGeneratedAttribute]
private int <DataCollectorProcessId>k__BackingField;
    public int DataCollectorProcessId { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`1<object> ExitCallBack { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`2<object, string> ErrorReceivedCallback { get; }
    public DataCollectionLauncher(IProcessHelper processHelper, IMessageLogger messageLogger);
    [CompilerGeneratedAttribute]
public sealed virtual int get_DataCollectorProcessId();
    [CompilerGeneratedAttribute]
protected void set_DataCollectorProcessId(int value);
    protected Action`1<object> get_ExitCallBack();
    protected Action`2<object, string> get_ErrorReceivedCallback();
    public abstract virtual int LaunchDataCollector(IDictionary`2<string, string> environmentVariables, IList`1<string> commandLineArguments);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_ExitCallBack>b__9_0(object process);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_ErrorReceivedCallback>b__11_0(object process, string data);
}
internal static class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionLauncherFactory : object {
    [NullableContextAttribute("1")]
internal static IDataCollectionLauncher GetDataCollectorLauncher(IProcessHelper processHelper, string settingsXml);
}
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters : object {
    [CompilerGeneratedAttribute]
private bool <AreTestCaseLevelEventsRequired>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataCollectionEventsPort>k__BackingField;
    public bool AreTestCaseLevelEventsRequired { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> EnvironmentVariables { get; private set; }
    public int DataCollectionEventsPort { get; private set; }
    public DataCollectionParameters(bool areTestCaseLevelEventsRequired, IDictionary`2<string, string> environmentVariables, int dataCollectionEventsPort);
    [CompilerGeneratedAttribute]
public bool get_AreTestCaseLevelEventsRequired();
    [CompilerGeneratedAttribute]
private void set_AreTestCaseLevelEventsRequired(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
private void set_EnvironmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public int get_DataCollectionEventsPort();
    [CompilerGeneratedAttribute]
private void set_DataCollectionEventsPort(int value);
    [NullableContextAttribute("1")]
public static DataCollectionParameters CreateDefaultParameterInstance();
}
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Collection`1<AttachmentSet> <Attachments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Collection`1<InvokedDataCollector> <InvokedDataCollectors>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Collection`1<AttachmentSet> Attachments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Collection`1<InvokedDataCollector> InvokedDataCollectors { get; }
    public DataCollectionResult(Collection`1<AttachmentSet> attachments, Collection`1<InvokedDataCollector> invokedDataCollectors);
    [CompilerGeneratedAttribute]
public Collection`1<AttachmentSet> get_Attachments();
    [CompilerGeneratedAttribute]
public Collection`1<InvokedDataCollector> get_InvokedDataCollectors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionTestRunEventsHandler : object {
    private IProxyDataCollectionManager _proxyDataCollectionManager;
    private IInternalTestRunEventsHandler _testRunEventsHandler;
    private CancellationToken _cancellationToken;
    private IDataSerializer _dataSerializer;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Collection`1<AttachmentSet> _dataCollectionAttachmentSets;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Collection`1<InvokedDataCollector> _invokedDataCollectors;
    public DataCollectionTestRunEventsHandler(IInternalTestRunEventsHandler baseTestRunEventsHandler, IProxyDataCollectionManager proxyDataCollectionManager, CancellationToken cancellationToken);
    public DataCollectionTestRunEventsHandler(IInternalTestRunEventsHandler baseTestRunEventsHandler, IProxyDataCollectionManager proxyDataCollectionManager, IDataSerializer dataSerializer, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual void HandleLogMessage(TestMessageLevel level, string message);
    public sealed virtual void HandleRawMessage(string rawMessage);
    public sealed virtual void HandleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    [NullableContextAttribute("2")]
public sealed virtual void HandleTestRunStatsChange(TestRunChangedEventArgs testRunChangedArgs);
    public sealed virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public sealed virtual bool AttachDebuggerToProcess(AttachDebuggerInfo attachDebuggerInfo);
    internal static ICollection`1<AttachmentSet> GetCombinedAttachmentSets(Collection`1<AttachmentSet> originalAttachmentSets, ICollection`1<AttachmentSet> newAttachments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DefaultDataCollectionLauncher : DataCollectionLauncher {
    private static string DataCollectorProcessName;
    private static string DataCollectorProcessNameArm64;
    internal DefaultDataCollectionLauncher(IProcessHelper processHelper, IMessageLogger messageLogger);
    public virtual int LaunchDataCollector(IDictionary`2<string, string> environmentVariables, IList`1<string> commandLineArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DotnetDataCollectionLauncher : DataCollectionLauncher {
    private static string DataCollectorProcessName;
    private IFileHelper _fileHelper;
    internal DotnetDataCollectionLauncher(IProcessHelper processHelper, IFileHelper fileHelper, IMessageLogger messageLogger);
    public virtual int LaunchDataCollector(IDictionary`2<string, string> environmentVariables, IList`1<string> commandLineArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionExtensionManager : object {
    private static string DataCollectorEndsWithPattern;
    private IDataCollectionSink _inProcDataCollectionSink;
    [NullableAttribute("2")]
private string _defaultCodeBase;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal HashSet`1<string> CodeBasePaths;
    private IFileHelper _fileHelper;
    internal IDictionary`2<string, IInProcDataCollector> InProcDataCollectors;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<DataCollectorSettings> _inProcDataCollectorSettingsCollection;
    [CompilerGeneratedAttribute]
private bool <IsInProcDataCollectionEnabled>k__BackingField;
    public bool IsInProcDataCollectionEnabled { get; private set; }
    public InProcDataCollectionExtensionManager(string runSettings, ITestEventsPublisher testEventsPublisher, string defaultCodeBase, TestPluginCache testPluginCache);
    protected InProcDataCollectionExtensionManager(string runSettings, ITestEventsPublisher testEventsPublisher, string defaultCodeBase, TestPluginCache testPluginCache, IFileHelper fileHelper);
    [CompilerGeneratedAttribute]
public bool get_IsInProcDataCollectionEnabled();
    [CompilerGeneratedAttribute]
private void set_IsInProcDataCollectionEnabled(bool value);
    protected virtual IInProcDataCollector CreateDataCollector(string assemblyQualifiedName, string codebase, XmlElement configuration, Type interfaceType);
    private void TriggerTestSessionStart(object sender, SessionStartEventArgs e);
    private void TriggerTestSessionEnd(object sender, SessionEndEventArgs e);
    private void TriggerTestCaseStart(object sender, TestCaseStartEventArgs e);
    private void TriggerTestCaseEnd(object sender, TestCaseEndEventArgs e);
    private void TriggerUpdateTestResult(object sender, TestResultEventArgs e);
    [NullableContextAttribute("2")]
private void InitializeInProcDataCollectors(string runSettings);
    private string GetCodebase(string codeBase);
    private static IDictionary`2<string, object> GetSessionStartProperties(SessionStartEventArgs sessionStartEventArgs);
    private void TriggerInProcDataCollectionMethods(string methodName, InProcDataCollectionArgs methodArg);
    private void SetInProcDataCollectionDataInTestResult(TestResult testResult);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollectionSink : object {
    private IDictionary`2<Guid, TestCaseDataCollectionData> _testCaseDataCollectionDataMap;
    public sealed virtual void SendData(DataCollectionContext dataCollectionContext, string key, string value);
    public IDictionary`2<string, string> GetDataCollectionDataSetForTestCase(Guid testCaseId);
    private void AddKeyValuePairToDictionary(Guid testCaseId, string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.InProcDataCollector : object {
    [NullableAttribute("2")]
private Type _dataCollectorType;
    [NullableAttribute("2")]
private object _dataCollectorObject;
    [NullableAttribute("2")]
private string _configXml;
    private IAssemblyLoadContext _assemblyLoadContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [NullableAttribute("2")]
public string AssemblyQualifiedName { get; private set; }
    public InProcDataCollector(string codeBase, string assemblyQualifiedName, Type interfaceType, string configXml);
    internal InProcDataCollector(string codeBase, string assemblyQualifiedName, Type interfaceType, string configXml, IAssemblyLoadContext assemblyLoadContext, TestPluginCache testPluginCache);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyQualifiedName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_AssemblyQualifiedName(string value);
    public sealed virtual void LoadDataCollector(IDataCollectionSink inProcDataCollectionSink);
    public sealed virtual void TriggerInProcDataCollectionMethod(string methodName, InProcDataCollectionArgs methodArg);
    private static void InitializeDataCollector(object obj, IDataCollectionSink inProcDataCollectionSink);
    private static MethodInfo GetMethodInfoFromType(Type type, string funcName, Type[] argumentTypes);
    [NullableContextAttribute("2")]
private static object CreateObjectFromType(Type type);
    private Assembly LoadInProcDataCollectorExtension(string codeBase);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectionLauncher {
    public int DataCollectorProcessId { get; }
    public abstract virtual int get_DataCollectorProcessId();
    public abstract virtual int LaunchDataCollector(IDictionary`2<string, string> environmentVariables, IList`1<string> commandLineArguments);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectorsSettingsProvider {
    public DataCollectionRunSettings Settings { get; }
    public abstract virtual DataCollectionRunSettings get_Settings();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IInProcDataCollector {
    [NullableAttribute("2")]
public string AssemblyQualifiedName { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_AssemblyQualifiedName();
    public abstract virtual void LoadDataCollector(IDataCollectionSink inProcDataCollectionSink);
    public abstract virtual void TriggerInProcDataCollectionMethod(string methodName, InProcDataCollectionArgs methodArg);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager {
    [NullableAttribute("2")]
public string SettingsXml { get; }
    public IEnumerable`1<string> Sources { get; }
    public abstract virtual void Initialize();
    [NullableContextAttribute("2")]
public abstract virtual string get_SettingsXml();
    public abstract virtual IEnumerable`1<string> get_Sources();
    public abstract virtual DataCollectionParameters BeforeTestRunStart(bool resetDataCollectors, bool isRunStartingNow, ITestMessageEventHandler runEventsHandler);
    public abstract virtual DataCollectionResult AfterTestRunEnd(bool isCanceled, ITestMessageEventHandler runEventsHandler);
    public abstract virtual void TestHostLaunched(int processId);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.ITestEventsPublisher {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestResult(EventHandler`1<TestResultEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestResult(EventHandler`1<TestResultEventArgs> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ParallelDataCollectionEventsHandler : ParallelRunEventsHandler {
    private ParallelRunDataAggregator _runDataAggregator;
    [NullableAttribute("2")]
private ITestRunAttachmentsProcessingManager _attachmentsProcessingManager;
    private CancellationToken _cancellationToken;
    public ParallelDataCollectionEventsHandler(IRequestData requestData, IProxyExecutionManager proxyExecutionManager, IInternalTestRunEventsHandler actualRunEventsHandler, IParallelProxyExecutionManager parallelProxyExecutionManager, ParallelRunDataAggregator runDataAggregator, ITestRunAttachmentsProcessingManager attachmentsProcessingManager, CancellationToken cancellationToken);
    internal ParallelDataCollectionEventsHandler(IRequestData requestData, IProxyExecutionManager proxyExecutionManager, IInternalTestRunEventsHandler actualRunEventsHandler, IParallelProxyExecutionManager parallelProxyExecutionManager, ParallelRunDataAggregator runDataAggregator, IDataSerializer dataSerializer);
    public virtual void HandleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyDataCollectionManager : object {
    private static string PortOption;
    private static string DiagOption;
    private static string ParentProcessIdOption;
    private static string TraceLevelOption;
    public static string DebugEnvironmentVaribleName;
    private IDataCollectionRequestSender _dataCollectionRequestSender;
    private IDataCollectionLauncher _dataCollectionLauncher;
    private IProcessHelper _processHelper;
    private IRequestData _requestData;
    private int _dataCollectionPort;
    private int _dataCollectionProcessId;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SettingsXml>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Sources>k__BackingField;
    [NullableAttribute("2")]
public string SettingsXml { get; }
    public IEnumerable`1<string> Sources { get; }
    public ProxyDataCollectionManager(IRequestData requestData, string settingsXml, IEnumerable`1<string> sources);
    internal ProxyDataCollectionManager(IRequestData requestData, string settingsXml, IEnumerable`1<string> sources, IProcessHelper processHelper);
    internal ProxyDataCollectionManager(IRequestData requestData, string settingsXml, IEnumerable`1<string> sources, IDataCollectionRequestSender dataCollectionRequestSender, IProcessHelper processHelper, IDataCollectionLauncher dataCollectionLauncher);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_SettingsXml();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Sources();
    public sealed virtual DataCollectionResult AfterTestRunEnd(bool isCanceled, ITestMessageEventHandler runEventsHandler);
    public sealed virtual DataCollectionParameters BeforeTestRunStart(bool resetDataCollectors, bool isRunStartingNow, ITestMessageEventHandler runEventsHandler);
    public sealed virtual void TestHostLaunched(int processId);
    public sealed virtual void Dispose();
    public sealed virtual void Initialize();
    private int GetConnectionTimeout(int processId);
    private static void InvokeDataCollectionServiceAction(Action action, ITestMessageEventHandler runEventsHandler);
    private static void HandleExceptionMessage(ITestMessageEventHandler runEventsHandler, Exception exception);
    private IList`1<string> GetCommandLineArguments(int portNumber);
    private static string GetTimestampedLogFile(string logFile);
    [NullableContextAttribute("2")]
private static string UpdateExtensionsFolderInRunSettings(string settingsXml);
    private void LogEnabledDataCollectors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.ProxyOutOfProcDataCollectionManager : object {
    private IDataCollectionTestCaseEventSender _dataCollectionTestCaseEventSender;
    private ITestEventsPublisher _testEventsPublisher;
    private Dictionary`2<Guid, Collection`1<AttachmentSet>> _attachmentsCache;
    private object _syncObject;
    public ProxyOutOfProcDataCollectionManager(IDataCollectionTestCaseEventSender dataCollectionTestCaseEventSender, ITestEventsPublisher testEventsPublisher);
    private void TriggerTestCaseStart(object sender, TestCaseStartEventArgs e);
    private void TriggerTestCaseEnd(object sender, TestCaseEndEventArgs e);
    private void TriggerSendTestResult(object sender, TestResultEventArgs e);
    private void TriggerTestSessionEnd(object sender, SessionEndEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscovererEnumerator : object {
    private DiscoveryResultCache _discoveryResultCache;
    private ITestPlatformEventSource _testPlatformEventSource;
    private IRequestData _requestData;
    private IAssemblyProperties _assemblyProperties;
    private CancellationToken _cancellationToken;
    public DiscovererEnumerator(IRequestData requestData, DiscoveryResultCache discoveryResultCache, CancellationToken token);
    public DiscovererEnumerator(IRequestData requestData, DiscoveryResultCache discoveryResultCache, ITestPlatformEventSource testPlatformEventSource, CancellationToken token);
    public DiscovererEnumerator(IRequestData requestData, DiscoveryResultCache discoveryResultCache, ITestPlatformEventSource testPlatformEventSource, IAssemblyProperties assemblyProperties, CancellationToken token);
    public void LoadTests(IDictionary`2<string, IEnumerable`1<string>> testExtensionSourceMap, IRunSettings settings, string testCaseFilter, IMessageLogger logger);
    private void LoadTestsFromAnExtension(string extensionAssembly, IEnumerable`1<string> sources, IRunSettings settings, string testCaseFilter, IMessageLogger logger);
    private static void LogTestsDiscoveryCancellation(IMessageLogger logger);
    private void CollectTelemetryAtEnd(double totalTimeTakenByAdapters, double totalAdaptersUsed);
    private void DiscoverTestsFromSingleDiscoverer(LazyExtension`2<ITestDiscoverer, ITestDiscovererCapabilities> discoverer, Dictionary`2<LazyExtension`2<ITestDiscoverer, ITestDiscovererCapabilities>, IEnumerable`1<string>> discovererToSourcesMap, DiscoveryContext context, TestCaseDiscoverySink discoverySink, IMessageLogger logger, Double& totalAdaptersUsed, Double& totalTimeTakenByAdapters);
    private static bool TryToLoadDiscoverer(LazyExtension`2<ITestDiscoverer, ITestDiscovererCapabilities> discoverer, IMessageLogger logger, Type& discovererType);
    private static bool IsDiscovererFromDeprecatedLocations(LazyExtension`2<ITestDiscoverer, ITestDiscovererCapabilities> discoverer);
    private static void LogWarningOnNoTestsDiscovered(IEnumerable`1<string> sources, string testCaseFilter, IMessageLogger logger);
    private static void SetAdapterLoggingSettings(IMessageLogger messageLogger, IRunSettings runSettings);
    internal static Dictionary`2<LazyExtension`2<ITestDiscoverer, ITestDiscovererCapabilities>, IEnumerable`1<string>> GetDiscovererToSourcesMap(string extensionAssembly, IEnumerable`1<string> sources, IMessageLogger logger, IAssemblyProperties assemblyProperties);
    private static IDictionary`2<AssemblyType, IList`1<string>> GetAssemblyTypeToSoucesMap(IEnumerable`1<string> sources, IAssemblyProperties assemblyProperties);
    private static bool IsAssembly(string filePath);
    private static IEnumerable`1<LazyExtension`2<ITestDiscoverer, ITestDiscovererCapabilities>> GetDiscoverers(string extensionAssembly, bool throwOnError);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext : object {
    [CompilerGeneratedAttribute]
private IRunSettings <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterExpressionWrapper <FilterExpressionWrapper>k__BackingField;
    public IRunSettings RunSettings { get; internal set; }
    internal FilterExpressionWrapper FilterExpressionWrapper { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual IRunSettings get_RunSettings();
    [CompilerGeneratedAttribute]
internal void set_RunSettings(IRunSettings value);
    public sealed virtual ITestCaseFilterExpression GetTestCaseFilter(IEnumerable`1<string> supportedProperties, Func`2<string, TestProperty> propertyProvider);
    [CompilerGeneratedAttribute]
internal FilterExpressionWrapper get_FilterExpressionWrapper();
    [CompilerGeneratedAttribute]
internal void set_FilterExpressionWrapper(FilterExpressionWrapper value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager : object {
    private TestSessionMessageLogger _sessionMessageLogger;
    private ITestPlatformEventSource _testPlatformEventSource;
    private IRequestData _requestData;
    private CancellationTokenSource _cancellationTokenSource;
    private DiscoveryDataAggregator _discoveryDataAggregator;
    [NullableAttribute("2")]
private DiscoveryCriteria _discoveryCriteria;
    [NullableAttribute("2")]
private ITestDiscoveryEventsHandler2 _testDiscoveryEventsHandler;
    [NullableAttribute("2")]
private string _previousSource;
    public DiscoveryManager(IRequestData requestData);
    protected DiscoveryManager(IRequestData requestData, ITestPlatformEventSource testPlatformEventSource);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(IEnumerable`1<string> pathToAdditionalExtensions, ITestDiscoveryEventsHandler2 eventHandler);
    public sealed virtual void DiscoverTests(DiscoveryCriteria discoveryCriteria, ITestDiscoveryEventsHandler2 eventHandler);
    public sealed virtual void Abort();
    public sealed virtual void Abort(ITestDiscoveryEventsHandler2 eventHandler);
    private void OnReportTestCases(ICollection`1<TestCase> testCases);
    internal static HashSet`1<string> GetValidSources(IEnumerable`1<string> sources, IMessageLogger logger, string package);
    private void TestSessionMessageHandler(object sender, TestRunMessageEventArgs e);
    private static void UpdateTestCases(IEnumerable`1<TestCase> testCases, string package);
    [CompilerGeneratedAttribute]
internal static void <GetValidSources>g__SendWarning|15_0(<>c__DisplayClass15_0& , <>c__DisplayClass15_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryResultCache : object {
    private OnReportTestCases _onReportTestCases;
    private long _cacheSize;
    private TimeSpan _cacheTimeout;
    private DateTime _lastUpdate;
    private List`1<TestCase> _tests;
    private object _syncObject;
    [CompilerGeneratedAttribute]
private long <TotalDiscoveredTests>k__BackingField;
    public IList`1<TestCase> Tests { get; }
    public long TotalDiscoveredTests { get; private set; }
    public DiscoveryResultCache(long cacheSize, TimeSpan discoveredTestEventTimeout, OnReportTestCases onReportTestCases);
    public IList`1<TestCase> get_Tests();
    [CompilerGeneratedAttribute]
public long get_TotalDiscoveredTests();
    [CompilerGeneratedAttribute]
private void set_TotalDiscoveredTests(long value);
    public void AddTest(TestCase test);
}
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.TestCaseDiscoverySink : object {
    [NullableAttribute("2")]
private DiscoveryResultCache _discoveryRequestCache;
    [NullableContextAttribute("2")]
internal TestCaseDiscoverySink(DiscoveryResultCache discoveryRequestCache);
    [NullableContextAttribute("1")]
public sealed virtual void SendTestCase(TestCase discoveredTest);
}
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.EventHandlers.TestCaseEventsHandler : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SessionStartEventArgs> SessionStart;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<SessionEndEventArgs> SessionEnd;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<TestCaseStartEventArgs> TestCaseStart;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<TestCaseEndEventArgs> TestCaseEnd;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<TestResultEventArgs> TestResult;
    [CompilerGeneratedAttribute]
public sealed virtual void add_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestResult(EventHandler`1<TestResultEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestResult(EventHandler`1<TestResultEventArgs> value);
    [NullableContextAttribute("1")]
public sealed virtual void SendTestCaseStart(TestCase testCase);
    [NullableContextAttribute("1")]
public sealed virtual void SendTestCaseEnd(TestCase testCase, TestOutcome outcome);
    [NullableContextAttribute("1")]
public sealed virtual void SendTestResult(TestResult result);
    public sealed virtual void SendSessionStart(IDictionary`2<string, object> properties);
    public sealed virtual void SendSessionEnd();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.BaseRunTests : object {
    [NullableAttribute("2")]
private ITestCaseEventsHandler _testCaseEventsHandler;
    private ITestPlatformEventSource _testPlatformEventSource;
    private IThread _platformThread;
    private RunConfiguration _runConfiguration;
    private IDataSerializer _dataSerializer;
    [NullableAttribute("2")]
private protected string _package;
    private IRequestData _requestData;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isCancellationRequested;
    [NullableAttribute("2")]
private ITestExecutor _activeExecutor;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TestExecutionContext <TestExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalTestRunEventsHandler <TestRunEventsHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestRunCache <TestRunCache>k__BackingField;
    [CompilerGeneratedAttribute]
private RunContext <RunContext>k__BackingField;
    [CompilerGeneratedAttribute]
private FrameworkHandle <FrameworkHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ExecutorUrisThatRanTests>k__BackingField;
    [NullableAttribute("2")]
protected string RunSettings { get; }
    protected TestExecutionContext TestExecutionContext { get; }
    protected IInternalTestRunEventsHandler TestRunEventsHandler { get; }
    protected ITestRunCache TestRunCache { get; }
    protected bool IsCancellationRequested { get; }
    protected RunContext RunContext { get; }
    protected FrameworkHandle FrameworkHandle { get; }
    protected ICollection`1<string> ExecutorUrisThatRanTests { get; }
    protected BaseRunTests(IRequestData requestData, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler testRunEventsHandler, ITestPlatformEventSource testPlatformEventSource);
    protected BaseRunTests(IRequestData requestData, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler testRunEventsHandler, ITestPlatformEventSource testPlatformEventSource, ITestEventsPublisher testEventsPublisher, IThread platformThread, IDataSerializer dataSerializer);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected string get_RunSettings();
    [CompilerGeneratedAttribute]
protected TestExecutionContext get_TestExecutionContext();
    [CompilerGeneratedAttribute]
protected IInternalTestRunEventsHandler get_TestRunEventsHandler();
    [CompilerGeneratedAttribute]
protected ITestRunCache get_TestRunCache();
    protected bool get_IsCancellationRequested();
    [CompilerGeneratedAttribute]
protected RunContext get_RunContext();
    [CompilerGeneratedAttribute]
protected FrameworkHandle get_FrameworkHandle();
    [CompilerGeneratedAttribute]
protected ICollection`1<string> get_ExecutorUrisThatRanTests();
    public void RunTests();
    internal void Abort();
    internal void Cancel();
    protected abstract virtual void BeforeRaisingTestRunComplete(bool exceptionsHitDuringRunTests);
    protected abstract virtual IEnumerable`1<Tuple`2<Uri, string>> GetExecutorUriExtensionMap(IFrameworkHandle testExecutorFrameworkHandle, RunContext runContext);
    protected abstract virtual void InvokeExecutor(LazyExtension`2<ITestExecutor, ITestExecutorCapabilities> executor, Tuple`2<Uri, string> executorUriExtensionTuple, RunContext runContext, IFrameworkHandle frameworkHandle);
    protected abstract virtual bool ShouldAttachDebuggerToTestHost(LazyExtension`2<ITestExecutor, ITestExecutorCapabilities> executor, Tuple`2<Uri, string> executorUriExtensionTuple, RunContext runContext);
    protected abstract virtual void SendSessionStart();
    protected abstract virtual void SendSessionEnd();
    private static void CancelTestRunInternal(ITestExecutor executor);
    private void OnTestRunMessage(object sender, TestRunMessageEventArgs e);
    private Nullable`1<TimeSpan> RunTestsInternal();
    private bool RunTestInternalWithExecutors(IEnumerable`1<Tuple`2<Uri, string>> executorUriExtensionMap, long totalTests);
    private bool NotRequiredStaThread();
    private static TestExecutorExtensionManager GetExecutorExtensionManager(string extensionAssembly);
    private static void SetAdapterLoggingSettings();
    [NullableContextAttribute("2")]
private void RaiseTestRunComplete(Exception exception, bool canceled, bool aborted, TimeSpan elapsedTime);
    private bool IsTestSourceIsPackage();
    private void OnCacheHit(TestRunStatistics testRunStats, ICollection`1<TestResult> results, ICollection`1<TestCase> inProgressTestCases);
    private bool TryToRunInStaThread(Action action, bool waitForCompletion);
    private void UpdateTestCaseSourceToPackage(ICollection`1<TestResult> testResults, ICollection`1<TestCase> inProgressTestCases, ICollection`1& updatedTestResults, ICollection`1& updatedInProgressTestCases);
    private ICollection`1<TestResult> UpdateTestResults(ICollection`1<TestResult> testResults, string package);
    [NullableContextAttribute("2")]
private ICollection`1<TestCase> UpdateInProgressTests(ICollection`1<TestCase> inProgressTestCases, string package);
    [CompilerGeneratedAttribute]
private void <Cancel>b__36_0();
    [CompilerGeneratedAttribute]
private void <Cancel>b__36_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager : object {
    private ITestPlatformEventSource _testPlatformEventSource;
    private IRequestData _requestData;
    [NullableAttribute("2")]
private TestSessionMessageLogger _sessionMessageLogger;
    [NullableAttribute("2")]
private BaseRunTests _activeTestRun;
    [NullableAttribute("2")]
private ITestMessageEventHandler _testMessageEventsHandler;
    public ExecutionManager(IRequestData requestData);
    protected ExecutionManager(ITestPlatformEventSource testPlatformEventSource, IRequestData requestData);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(IEnumerable`1<string> pathToAdditionalExtensions, ITestMessageEventHandler testMessageEventsHandler);
    public sealed virtual void StartTestRun(Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler runEventsHandler);
    public sealed virtual void StartTestRun(IEnumerable`1<TestCase> tests, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler runEventsHandler);
    public sealed virtual void Cancel(IInternalTestRunEventsHandler testRunEventsHandler);
    public sealed virtual void Abort(IInternalTestRunEventsHandler testRunEventsHandler);
    private static void LoadExtensions();
    [NullableContextAttribute("2")]
private static void InitializeDataCollectors(string runSettings, ITestEventsPublisher testEventsPublisher, string defaultCodeBase);
    private void TestSessionMessageHandler(object sender, TestRunMessageEventArgs e);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ITestRunCache {
    public ICollection`1<TestResult> TestResults { get; }
    public ICollection`1<TestCase> InProgressTests { get; }
    public long TotalExecutedTests { get; }
    public TestRunStatistics TestRunStatistics { get; }
    public IDictionary`2<string, int> AdapterTelemetry { get; }
    public abstract virtual ICollection`1<TestResult> get_TestResults();
    public abstract virtual ICollection`1<TestCase> get_InProgressTests();
    public abstract virtual long get_TotalExecutedTests();
    public abstract virtual TestRunStatistics get_TestRunStatistics();
    public abstract virtual IDictionary`2<string, int> get_AdapterTelemetry();
    public abstract virtual void OnTestStarted(TestCase testCase);
    public abstract virtual void OnNewTestResult(TestResult testResult);
    public abstract virtual bool OnTestCompletion(TestCase completedTest);
    public abstract virtual ICollection`1<TestResult> GetLastChunk();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.MsTestV1TelemetryHelper : object {
    private static TestProperty s_testTypeProperty;
    private static TestProperty s_extensionIdProperty;
    internal static bool IsMsTestV1Adapter(Uri executorUri);
    internal static bool IsMsTestV1Adapter(string executorUri);
    [NullableContextAttribute("1")]
internal static void AddTelemetry(TestResult testResult, IDictionary`2<string, int> adapterTelemetry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithSources : BaseRunTests {
    private Dictionary`2<string, IEnumerable`1<string>> _adapterSourceMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Tuple`2<Uri, string>, IEnumerable`1<string>> _executorUriVsSourceList;
    [NullableAttribute("2")]
private ITestCaseEventsHandler _testCaseEventsHandler;
    public RunTestsWithSources(IRequestData requestData, Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler testRunEventsHandler);
    internal RunTestsWithSources(IRequestData requestData, Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler testRunEventsHandler, Dictionary`2<Tuple`2<Uri, string>, IEnumerable`1<string>> executorUriVsSourceList);
    protected virtual void BeforeRaisingTestRunComplete(bool exceptionsHitDuringRunTests);
    private void LogWarningOnNoTestsExecuted();
    protected virtual IEnumerable`1<Tuple`2<Uri, string>> GetExecutorUriExtensionMap(IFrameworkHandle testExecutorFrameworkHandle, RunContext runContext);
    protected virtual void InvokeExecutor(LazyExtension`2<ITestExecutor, ITestExecutorCapabilities> executor, Tuple`2<Uri, string> executorUriExtensionTuple, RunContext runContext, IFrameworkHandle frameworkHandle);
    protected virtual bool ShouldAttachDebuggerToTestHost(LazyExtension`2<ITestExecutor, ITestExecutorCapabilities> executor, Tuple`2<Uri, string> executorUriExtensionTuple, RunContext runContext);
    private Dictionary`2<Tuple`2<Uri, string>, IEnumerable`1<string>> GetExecutorVsSourcesList(IMessageLogger logger);
    protected virtual void SendSessionEnd();
    protected virtual void SendSessionStart();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.RunTestsWithTests : BaseRunTests {
    private IEnumerable`1<TestCase> _testCases;
    [NullableAttribute("2")]
private ITestCaseEventsHandler _testCaseEventsHandler;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Tuple`2<Uri, string>, List`1<TestCase>> _executorUriVsTestList;
    public RunTestsWithTests(IRequestData requestData, IEnumerable`1<TestCase> testCases, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler testRunEventsHandler);
    internal RunTestsWithTests(IRequestData requestData, IEnumerable`1<TestCase> testCases, string package, string runSettings, TestExecutionContext testExecutionContext, ITestCaseEventsHandler testCaseEventsHandler, IInternalTestRunEventsHandler testRunEventsHandler, Dictionary`2<Tuple`2<Uri, string>, List`1<TestCase>> executorUriVsTestList);
    protected virtual void BeforeRaisingTestRunComplete(bool exceptionsHitDuringRunTests);
    protected virtual IEnumerable`1<Tuple`2<Uri, string>> GetExecutorUriExtensionMap(IFrameworkHandle testExecutorFrameworkHandle, RunContext runContext);
    protected virtual void InvokeExecutor(LazyExtension`2<ITestExecutor, ITestExecutorCapabilities> executor, Tuple`2<Uri, string> executorUri, RunContext runContext, IFrameworkHandle frameworkHandle);
    protected virtual bool ShouldAttachDebuggerToTestHost(LazyExtension`2<ITestExecutor, ITestExecutorCapabilities> executor, Tuple`2<Uri, string> executorUri, RunContext runContext);
    protected virtual void SendSessionEnd();
    protected virtual void SendSessionStart();
    private static Dictionary`2<Tuple`2<Uri, string>, List`1<TestCase>> GetExecutorVsTestCaseList(IEnumerable`1<TestCase> tests);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.TestRunCache : object {
    private bool _isDisposed;
    private Dictionary`2<TestOutcome, long> _runStats;
    private long _totalExecutedTests;
    private OnCacheHit _onCacheHit;
    private long _cacheSize;
    private TimeSpan _cacheTimeout;
    private Timer _timer;
    private DateTime _lastUpdate;
    private ICollection`1<TestCase> _inProgressTests;
    private ICollection`1<TestResult> _testResults;
    private object _syncObject;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, int> <AdapterTelemetry>k__BackingField;
    public ICollection`1<TestResult> TestResults { get; }
    public ICollection`1<TestCase> InProgressTests { get; }
    public long TotalExecutedTests { get; }
    public TestRunStatistics TestRunStatistics { get; }
    public IDictionary`2<string, int> AdapterTelemetry { get; public set; }
    internal TestRunCache(long cacheSize, TimeSpan cacheTimeout, OnCacheHit onCacheHit);
    public sealed virtual ICollection`1<TestResult> get_TestResults();
    public sealed virtual ICollection`1<TestCase> get_InProgressTests();
    public sealed virtual long get_TotalExecutedTests();
    public sealed virtual TestRunStatistics get_TestRunStatistics();
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, int> get_AdapterTelemetry();
    [CompilerGeneratedAttribute]
public void set_AdapterTelemetry(IDictionary`2<string, int> value);
    public sealed virtual void Dispose();
    public sealed virtual void OnTestStarted(TestCase testCase);
    public sealed virtual void OnNewTestResult(TestResult testResult);
    [NullableContextAttribute("2")]
public sealed virtual bool OnTestCompletion(TestCase completedTest);
    public sealed virtual ICollection`1<TestResult> GetLastChunk();
    protected virtual void Dispose(bool disposing);
    private void CheckForCacheHit();
    private void CheckForCacheHitOnTimer();
    private void SendResults();
    [NullableContextAttribute("2")]
private void OnCacheTimeHit(object state);
    private void RemoveInProgress(TestResult result);
}
internal enum Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyDisposalOnCreationFailPolicy : Enum {
    public int value__;
    public static ProxyDisposalOnCreationFailPolicy DisposeAllOnFailure;
    public static ProxyDisposalOnCreationFailPolicy AllowProxySetupFailures;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyOperationManagerContainer : object {
    [CompilerGeneratedAttribute]
private ProxyOperationManager <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAvailable>k__BackingField;
    public ProxyOperationManager Proxy { get; public set; }
    public bool IsAvailable { get; public set; }
    public ProxyOperationManagerContainer(ProxyOperationManager proxy, bool available);
    [CompilerGeneratedAttribute]
public ProxyOperationManager get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(ProxyOperationManager value);
    [CompilerGeneratedAttribute]
public bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public void set_IsAvailable(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager : object {
    private object _lockObject;
    private object _proxyOperationLockObject;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _proxySetupFailed;
    private StartTestSessionCriteria _testSessionCriteria;
    private int _maxTesthostCount;
    [NullableAttribute("2")]
private TestSessionInfo _testSessionInfo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<TestRuntimeProviderInfo, ProxyOperationManager> _proxyCreator;
    private List`1<TestRuntimeProviderInfo> _runtimeProviders;
    private IList`1<ProxyOperationManagerContainer> _proxyContainerList;
    private IDictionary`2<string, int> _proxyMap;
    private Stopwatch _testSessionStopwatch;
    private Dictionary`2<string, TestRuntimeProviderInfo> _sourceToRuntimeProviderInfoMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _testSessionEnvironmentVariables;
    [CompilerGeneratedAttribute]
private ProxyDisposalOnCreationFailPolicy <DisposalPolicy>k__BackingField;
    internal ProxyDisposalOnCreationFailPolicy DisposalPolicy { get; internal set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, string> TestSessionEnvironmentVariables { get; }
    public ProxyTestSessionManager(StartTestSessionCriteria criteria, int maxTesthostCount, Func`2<TestRuntimeProviderInfo, ProxyOperationManager> proxyCreator, List`1<TestRuntimeProviderInfo> runtimeProviders);
    [CompilerGeneratedAttribute]
internal ProxyDisposalOnCreationFailPolicy get_DisposalPolicy();
    [CompilerGeneratedAttribute]
internal void set_DisposalPolicy(ProxyDisposalOnCreationFailPolicy value);
    private IDictionary`2<string, string> get_TestSessionEnvironmentVariables();
    public virtual bool StartSession(ITestSessionEventsHandler eventsHandler, IRequestData requestData);
    public virtual bool StopSession(IRequestData requestData);
    public virtual ProxyOperationManager DequeueProxy(string source, string runSettings);
    public virtual bool EnqueueProxy(int proxyId);
    private int EnqueueNewProxy(IList`1<string> sources, ProxyOperationManagerContainer operationManagerContainer);
    private bool SetupRawProxy(IList`1<string> sources, TestRuntimeProviderInfo runtimeProviderInfo);
    private void DisposeProxies();
    [NullableContextAttribute("2")]
private bool CheckRunSettingsAreCompatible(string requestRunSettings);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessDenied { get; }
    internal static string AttachDebuggerToDefaultTestHostFailure { get; }
    internal static string AttachmentOutputFormat { get; }
    internal static string AttachmentsBanner { get; }
    internal static string DataCollectorDebuggerWarning { get; }
    internal static string DeprecatedAdapterPath { get; }
    internal static string DiscovererInstantiationException { get; }
    internal static string DuplicateAdaptersFound { get; }
    internal static string DuplicateSource { get; }
    internal static string ExceptionFromLoadTests { get; }
    internal static string ExceptionFromRunTests { get; }
    internal static string ExecutionThreadApartmentStateNotSupportedForFramework { get; }
    internal static string FailedToLaunchTestHost { get; }
    internal static string FileNotFound { get; }
    internal static string HostDebuggerWarning { get; }
    internal static string IgnoringExecutorAsNoDefaultExecutorUriAttribute { get; }
    internal static string InitializationFailed { get; }
    internal static string LaunchDebugProcessNotAllowedForANonDebugRun { get; }
    internal static string NoAvailableProxyForDeque { get; }
    internal static string NoDotnetExeFound { get; }
    internal static string NoMatchingExecutor { get; }
    internal static string NonExistingExtensions { get; }
    internal static string NoProxyMatchesDescription { get; }
    internal static string NoSuchProxyId { get; }
    internal static string NoSuitableRuntimeProviderFound { get; }
    internal static string NoTestHostProviderFound { get; }
    internal static string NoTestsAvailableForGivenTestCaseFilter { get; }
    internal static string NoValidSourceFoundForDiscovery { get; }
    internal static string OldTestHostIsGettingUsed { get; }
    internal static string ProxyIsAlreadyAvailable { get; }
    internal static string SkippingSource { get; }
    internal static string StringSeperator { get; }
    internal static string TestDiscoveryCancelled { get; }
    internal static string TesthostDiagLogOutputFile { get; }
    internal static string TestHostExitedWithError { get; }
    internal static string TestRunFailed_NoDiscovererFound_NoTestsAreAvailableInTheSources { get; }
    internal static string UnsupportedPropertiesInTestCaseFilter { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessDenied();
    internal static string get_AttachDebuggerToDefaultTestHostFailure();
    internal static string get_AttachmentOutputFormat();
    internal static string get_AttachmentsBanner();
    internal static string get_DataCollectorDebuggerWarning();
    internal static string get_DeprecatedAdapterPath();
    internal static string get_DiscovererInstantiationException();
    internal static string get_DuplicateAdaptersFound();
    internal static string get_DuplicateSource();
    internal static string get_ExceptionFromLoadTests();
    internal static string get_ExceptionFromRunTests();
    internal static string get_ExecutionThreadApartmentStateNotSupportedForFramework();
    internal static string get_FailedToLaunchTestHost();
    internal static string get_FileNotFound();
    internal static string get_HostDebuggerWarning();
    internal static string get_IgnoringExecutorAsNoDefaultExecutorUriAttribute();
    internal static string get_InitializationFailed();
    internal static string get_LaunchDebugProcessNotAllowedForANonDebugRun();
    internal static string get_NoAvailableProxyForDeque();
    internal static string get_NoDotnetExeFound();
    internal static string get_NoMatchingExecutor();
    internal static string get_NonExistingExtensions();
    internal static string get_NoProxyMatchesDescription();
    internal static string get_NoSuchProxyId();
    internal static string get_NoSuitableRuntimeProviderFound();
    internal static string get_NoTestHostProviderFound();
    internal static string get_NoTestsAvailableForGivenTestCaseFilter();
    internal static string get_NoValidSourceFoundForDiscovery();
    internal static string get_OldTestHostIsGettingUsed();
    internal static string get_ProxyIsAlreadyAvailable();
    internal static string get_SkippingSource();
    internal static string get_StringSeperator();
    internal static string get_TestDiscoveryCancelled();
    internal static string get_TesthostDiagLogOutputFile();
    internal static string get_TestHostExitedWithError();
    internal static string get_TestRunFailed_NoDiscovererFound_NoTestsAreAvailableInTheSources();
    internal static string get_UnsupportedPropertiesInTestCaseFilter();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine : object {
    private ITestRuntimeProviderManager _testHostProviderManager;
    private IProcessHelper _processHelper;
    private IEnvironment _environment;
    [NullableAttribute("2")]
private ITestExtensionManager _testExtensionManager;
    protected internal TestEngine(TestRuntimeProviderManager testHostProviderManager, IProcessHelper processHelper);
    internal TestEngine(ITestRuntimeProviderManager testHostProviderManager, IProcessHelper processHelper, IEnvironment environment);
    public sealed virtual IProxyDiscoveryManager GetDiscoveryManager(IRequestData requestData, DiscoveryCriteria discoveryCriteria, IDictionary`2<string, SourceDetail> sourceToSourceDetailMap, IWarningLogger warningLogger);
    public sealed virtual IProxyExecutionManager GetExecutionManager(IRequestData requestData, TestRunCriteria testRunCriteria, IDictionary`2<string, SourceDetail> sourceToSourceDetailMap, IWarningLogger warningLogger);
    internal IProxyExecutionManager CreateNonParallelExecutionManager(IRequestData requestData, TestRunCriteria testRunCriteria, bool isDataCollectorEnabled, TestRuntimeProviderInfo runtimeProviderInfo);
    public sealed virtual IProxyTestSessionManager GetTestSessionManager(IRequestData requestData, StartTestSessionCriteria testSessionCriteria, IDictionary`2<string, SourceDetail> sourceToSourceDetailMap, IWarningLogger warningLogger);
    private List`1<TestRuntimeProviderInfo> GetTestRuntimeProvidersForUniqueConfigurations(string runSettings, IDictionary`2<string, SourceDetail> sourceToSourceDetailMap, IWarningLogger warningLogger, ITestRuntimeProvider& mostRecentlyCreatedInstance);
    public sealed virtual ITestExtensionManager GetExtensionManager();
    public sealed virtual ITestLoggerManager GetLoggerManager(IRequestData requestData);
    private static int GetDistinctNumberOfSources(TestRunCriteria testRunCriteria);
    [NullableContextAttribute("2")]
private int VerifyParallelSettingAndCalculateParallelLevel(int sourceCount, string runSettings);
    private bool ShouldRunInProcess(string runsettings, bool isParallelEnabled, bool isDataCollectorEnabled, List`1<TestRuntimeProviderInfo> testHostProviders);
    [NullableContextAttribute("2")]
private static void ThrowExceptionIfTestHostManagerIsNull(ITestRuntimeProvider testHostManager, string settingsXml);
    private static void WarnAboutNotFoundRuntimeProvidersOrThrowWhenNoneAreFound(List`1<TestRuntimeProviderInfo> testRuntimeProviders, IWarningLogger warningLogger);
    [NullableContextAttribute("2")]
internal static Nullable`1<int> GetTargetFrameworkTestHostDemultiplexer(string runsettings);
}
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager : object {
    public sealed virtual void ClearExtensions();
    public sealed virtual void UseAdditionalExtensions(IEnumerable`1<string> pathToAdditionalExtensions, bool skipExtensionFilters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory : object {
    [NullableAttribute("2")]
private IDiscoveryManager _discoveryManager;
    [NullableAttribute("2")]
private IExecutionManager _executionManager;
    private bool _telemetryOptedIn;
    public TestHostManagerFactory(bool telemetryOptedIn);
    public sealed virtual IDiscoveryManager GetDiscoveryManager();
    public sealed virtual IExecutionManager GetExecutionManager();
    private static RequestData GetRequestData(bool telemetryOptedIn);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.DataCollectorAttachmentsProcessorsFactory : object {
    private static string CoverageFriendlyName;
    private static ConcurrentDictionary`2<string, DataCollectorExtensionManager> DataCollectorExtensionManagerCache;
    private static DataCollectorAttachmentsProcessorsFactory();
    public sealed virtual DataCollectorAttachmentProcessor[] Create(InvokedDataCollector[] invokedDataCollectors, IMessageLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager : object {
    private static string AttachmentsProcessingCompleted;
    private static string AttachmentsProcessingCanceled;
    private static string AttachmentsProcessingFailed;
    private ITestPlatformEventSource _testPlatformEventSource;
    private IDataCollectorAttachmentsProcessorsFactory _dataCollectorAttachmentsProcessorsFactory;
    public TestRunAttachmentsProcessingManager(ITestPlatformEventSource testPlatformEventSource, IDataCollectorAttachmentsProcessorsFactory dataCollectorAttachmentsProcessorsFactory);
    private static TestRunAttachmentsProcessingManager();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager/<ProcessTestRunAttachmentsAsync>d__6")]
public sealed virtual Task ProcessTestRunAttachmentsAsync(string runSettingsXml, IRequestData requestData, IEnumerable`1<AttachmentSet> attachments, IEnumerable`1<InvokedDataCollector> invokedDataCollector, ITestRunAttachmentsProcessingEventsHandler eventHandler, CancellationToken cancellationToken);
    public sealed virtual Task`1<Collection`1<AttachmentSet>> ProcessTestRunAttachmentsAsync(string runSettingsXml, IRequestData requestData, IEnumerable`1<AttachmentSet> attachments, IEnumerable`1<InvokedDataCollector> invokedDataCollector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager/<InternalProcessTestRunAttachmentsAsync>d__8")]
private Task`1<Collection`1<AttachmentSet>> InternalProcessTestRunAttachmentsAsync(string runSettingsXml, IRequestData requestData, IEnumerable`1<AttachmentSet> attachments, IEnumerable`1<InvokedDataCollector> invokedDataCollector, ITestRunAttachmentsProcessingEventsHandler eventHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestRunAttachmentsProcessing.TestRunAttachmentsProcessingManager/<ProcessAttachmentsAsync>d__9")]
private Task`1<Collection`1<AttachmentSet>> ProcessAttachmentsAsync(string runSettingsXml, Collection`1<AttachmentSet> attachments, IEnumerable`1<InvokedDataCollector> invokedDataCollector, ITestRunAttachmentsProcessingEventsHandler eventsHandler, CancellationToken cancellationToken);
    private Collection`1<AttachmentSet> FinalizeOperation(IRequestData requestData, TestRunAttachmentsProcessingCompleteEventArgs completeArgs, Collection`1<AttachmentSet> attachments, Stopwatch stopwatch, ITestRunAttachmentsProcessingEventsHandler eventHandler);
    private static IMessageLogger CreateMessageLogger(ITestRunAttachmentsProcessingEventsHandler eventsHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool : object {
    private static object InstanceLockObject;
    [NullableAttribute("2")]
private static TestSessionPool modreq(System.Runtime.CompilerServices.IsVolatile) s_instance;
    private object _lockObject;
    private Dictionary`2<TestSessionInfo, ProxyTestSessionManager> _sessionPool;
    public static TestSessionPool Instance { get; internal set; }
    private static TestSessionPool();
    public static TestSessionPool get_Instance();
    internal static void set_Instance(TestSessionPool value);
    public virtual bool AddSession(TestSessionInfo testSessionInfo, ProxyTestSessionManager proxyManager);
    public virtual bool KillSession(TestSessionInfo testSessionInfo, IRequestData requestData);
    public virtual ProxyOperationManager TryTakeProxy(TestSessionInfo testSessionInfo, string source, string runSettings, IRequestData requestData);
    public virtual bool ReturnProxy(TestSessionInfo testSessionInfo, int proxyId);
}
internal static class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
internal static class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.SourceDetailHelper : object {
    [NullableContextAttribute("1")]
internal static string UpdateRunSettingsFromSourceDetail(string runSettings, SourceDetail sourceDetail);
}
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.TestCaseFilterDeterminer : object {
    private static int MaxLengthOfTestCaseFilterToShow;
    [NullableContextAttribute("1")]
internal static string ShortenTestCaseFilterIfRequired(string testCaseFilter);
}
internal class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Utilities.TestSourcesUtility : object {
    internal static IEnumerable`1<string> GetSources(Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap);
    internal static IEnumerable`1<string> GetSources(IEnumerable`1<TestCase> tests);
    [NullableContextAttribute("2")]
internal static string GetDefaultCodebasePath(Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap);
    [NullableContextAttribute("1")]
internal static string GetDefaultCodebasePath(IEnumerable`1<TestCase> tests);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
