[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.TestPlatform.PlatformAbstractions.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
internal static class Microsoft.TestPlatform.PlatformAbstractions.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ConditionalAttribute("DEBUG")]
[AttributeUsageAttribute("64")]
internal class Microsoft.TestPlatform.PlatformAbstractions.VersionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; public set; }
    public VersionAttribute(int version);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.IPlatformEqtTrace {
    public bool DoNotInitialize { get; public set; }
    public abstract virtual bool get_DoNotInitialize();
    public abstract virtual void set_DoNotInitialize(bool value);
    public abstract virtual void WriteLine(PlatformTraceLevel level, string message);
    public abstract virtual bool InitializeVerboseTrace(string customLogFile);
    public abstract virtual bool InitializeTrace(string customLogFile, PlatformTraceLevel traceLevel);
    public abstract virtual bool ShouldTrace(PlatformTraceLevel traceLevel);
    public abstract virtual string GetLogFile();
    public abstract virtual void SetTraceLevel(PlatformTraceLevel value);
    public abstract virtual PlatformTraceLevel GetTraceLevel();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformEqtTrace : object {
    [NullableAttribute("1")]
private static string ListenerName;
    [NullableAttribute("1")]
private static Dictionary`2<TraceLevel, SourceLevels> TraceSourceLevelsMap;
    [NullableAttribute("1")]
private static Dictionary`2<SourceLevels, TraceLevel> SourceTraceLevelsMap;
    [NullableAttribute("1")]
private static Dictionary`2<TraceLevel, TraceEventType> TraceLevelEventTypeMap;
    [NullableAttribute("1")]
private static string ProcessName;
    private static int ProcessId;
    [NullableAttribute("1")]
private static object LockObject;
    private static TraceSource s_traceSource;
    private static bool s_isInitialized;
    [NullableAttribute("1")]
private static object IsInitializationLock;
    private static int s_traceFileSize;
    private static int DefaultTraceFileSize;
    [CompilerGeneratedAttribute]
private static string <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ErrorOnInitialization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotInitialize>k__BackingField;
    public static string LogFile { get; private set; }
    public static TraceLevel TraceLevel { get; public set; }
    public static string ErrorOnInitialization { get; public set; }
    public bool DoNotInitialize { get; public set; }
    [NullableAttribute("1")]
private static TraceSource Source { get; }
    private static PlatformEqtTrace();
    [CompilerGeneratedAttribute]
public static string get_LogFile();
    [CompilerGeneratedAttribute]
private static void set_LogFile(string value);
    public static TraceLevel get_TraceLevel();
    public static void set_TraceLevel(TraceLevel value);
    [CompilerGeneratedAttribute]
public static string get_ErrorOnInitialization();
    [CompilerGeneratedAttribute]
public static void set_ErrorOnInitialization(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DoNotInitialize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DoNotInitialize(bool value);
    [NullableContextAttribute("1")]
private static TraceSource get_Source();
    public sealed virtual bool InitializeVerboseTrace(string customLogFile);
    public sealed virtual bool InitializeTrace(string customLogFile, PlatformTraceLevel platformTraceLevel);
    public sealed virtual bool ShouldTrace(PlatformTraceLevel traceLevel);
    public sealed virtual string GetLogFile();
    public sealed virtual void WriteLine(PlatformTraceLevel level, string message);
    public sealed virtual void SetTraceLevel(PlatformTraceLevel value);
    public sealed virtual PlatformTraceLevel GetTraceLevel();
    public TraceLevel MapPlatformTraceToTrace(PlatformTraceLevel traceLevel);
    internal static void SetupRemoteListeners(TraceListener listener);
    [NullableContextAttribute("1")]
private static void LogIgnoredException(Exception e);
    private static bool EnsureTraceIsInitialized();
    [NullableContextAttribute("1")]
private static string GetProcessName();
    private static int GetProcessId();
    private static void UnInitializeTrace();
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.PlatformTraceLevel : Enum {
    public int value__;
    public static PlatformTraceLevel Off;
    public static PlatformTraceLevel Error;
    public static PlatformTraceLevel Warning;
    public static PlatformTraceLevel Info;
    public static PlatformTraceLevel Verbose;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.RollingFileTraceListener : TextWriterTraceListener {
    private int _rollSizeInBytes;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private string <TraceFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamWriterRollingHelper <RollingHelper>k__BackingField;
    internal string TraceFileName { get; private set; }
    internal StreamWriterRollingHelper RollingHelper { get; }
    public RollingFileTraceListener(string fileName, string name, int rollSizeKB);
    [CompilerGeneratedAttribute]
internal string get_TraceFileName();
    [CompilerGeneratedAttribute]
private void set_TraceFileName(string value);
    [CompilerGeneratedAttribute]
internal StreamWriterRollingHelper get_RollingHelper();
    [NullableContextAttribute("2")]
public virtual void WriteLine(string message);
    internal static TallyKeepingFileStreamWriter OpenTextWriter(string fileName);
    protected virtual void Dispose(bool disposing);
    private static Encoding GetEncodingWithFallback();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.AssemblyResolveEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public AssemblyResolveEventArgs(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.AssemblyResolveEventHandler : MulticastDelegate {
    public AssemblyResolveEventHandler(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual Assembly Invoke(object sender, AssemblyResolveEventArgs args);
    public virtual IAsyncResult BeginInvoke(object sender, AssemblyResolveEventArgs args, AsyncCallback callback, object object);
    public virtual Assembly EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IAssemblyLoadContext {
    public abstract virtual Assembly LoadAssemblyFromPath(string assemblyPath);
    public abstract virtual AssemblyName GetAssemblyNameFromPath(string assemblyPath);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IAssemblyResolver {
    [CompilerGeneratedAttribute]
public abstract virtual void add_AssemblyResolve(AssemblyResolveEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AssemblyResolve(AssemblyResolveEventHandler value);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IEnvironment {
    public PlatformArchitecture Architecture { get; }
    public PlatformOperatingSystem OperatingSystem { get; }
    public string OperatingSystemVersion { get; }
    public int ProcessorCount { get; }
    public abstract virtual PlatformArchitecture get_Architecture();
    public abstract virtual PlatformOperatingSystem get_OperatingSystem();
    public abstract virtual string get_OperatingSystemVersion();
    public abstract virtual void Exit(int exitcode);
    public abstract virtual int GetCurrentManagedThreadId();
    public abstract virtual int get_ProcessorCount();
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper {
    public abstract virtual object LaunchProcess(string processPath, string arguments, string workingDirectory, IDictionary`2<string, string> envVariables, Action`2<object, string> errorCallback, Action`1<object> exitCallBack, Action`2<object, string> outputCallBack);
    public abstract virtual string GetCurrentProcessFileName();
    [NullableContextAttribute("1")]
public abstract virtual string GetCurrentProcessLocation();
    public abstract virtual string GetTestEngineDirectory();
    [NullableContextAttribute("1")]
public abstract virtual string GetNativeDllDirectory();
    public abstract virtual PlatformArchitecture GetCurrentProcessArchitecture();
    public abstract virtual PlatformArchitecture GetProcessArchitecture(int processId);
    public abstract virtual int GetCurrentProcessId();
    public abstract virtual int GetProcessId(object process);
    [NullableContextAttribute("1")]
public abstract virtual string GetProcessName(int processId);
    public abstract virtual bool TryGetExitCode(object process, Int32& exitCode);
    public abstract virtual void SetExitCallback(int processId, Action`1<object> callbackAction);
    public abstract virtual void TerminateProcess(object process);
    public abstract virtual void WaitForProcessExit(object process);
    public abstract virtual IntPtr GetProcessHandle(int processId);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IStream {
    public abstract virtual Stream CreateBufferedStream(Stream stream, int bufferSize);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IThread {
    public abstract virtual void Run(Action action, PlatformApartmentState apartmentState, bool waitForCompletion);
}
internal class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.NativeMethods : object {
    public static ushort IMAGE_FILE_MACHINE_ARM64;
    public static ushort IMAGE_FILE_MACHINE_UNKNOWN;
    public static bool IsWow64Process2(IntPtr process, UInt16& processMachine, UInt16& nativeMachine);
    internal static bool IsWow64Process(IntPtr process, Boolean& wow64Process);
}
public enum Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformApartmentState : Enum {
    public int value__;
    public static PlatformApartmentState MTA;
    public static PlatformApartmentState STA;
}
public enum Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformArchitecture : Enum {
    public int value__;
    public static PlatformArchitecture X86;
    public static PlatformArchitecture X64;
    public static PlatformArchitecture ARM;
    public static PlatformArchitecture ARM64;
    public static PlatformArchitecture S390x;
    public static PlatformArchitecture Ppc64le;
    public static PlatformArchitecture RiscV64;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformAssemblyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetAssemblyLocation(Assembly assembly);
}
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformAssemblyLoadContext : object {
    [NullableContextAttribute("1")]
public sealed virtual AssemblyName GetAssemblyNameFromPath(string assemblyPath);
    [NullableContextAttribute("1")]
public sealed virtual Assembly LoadAssemblyFromPath(string assemblyPath);
}
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformAssemblyResolver : object {
    private bool _disposed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private AssemblyResolveEventHandler AssemblyResolve;
    protected virtual override void Finalize();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_AssemblyResolve(AssemblyResolveEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_AssemblyResolve(AssemblyResolveEventHandler value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
private Assembly AssemblyResolverEvent(object sender, object eventArgs);
}
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformEnvironment : object {
    public PlatformArchitecture Architecture { get; }
    public PlatformOperatingSystem OperatingSystem { get; }
    [NullableAttribute("1")]
public string OperatingSystemVersion { get; }
    public int ProcessorCount { get; }
    public sealed virtual PlatformArchitecture get_Architecture();
    public sealed virtual PlatformOperatingSystem get_OperatingSystem();
    [NullableContextAttribute("1")]
public sealed virtual string get_OperatingSystemVersion();
    public sealed virtual int get_ProcessorCount();
    public sealed virtual void Exit(int exitcode);
    public sealed virtual int GetCurrentManagedThreadId();
}
public enum Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformOperatingSystem : Enum {
    public int value__;
    public static PlatformOperatingSystem Windows;
    public static PlatformOperatingSystem Unix;
    public static PlatformOperatingSystem OSX;
}
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformStream : object {
    [NullableContextAttribute("1")]
public sealed virtual Stream CreateBufferedStream(Stream stream, int bufferSize);
}
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.PlatformThread : object {
    [NullableContextAttribute("2")]
public sealed virtual void Run(Action action, PlatformApartmentState apartmentState, bool waitForCompletion);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessHelper : object {
    private static string Arm;
    private Process _currentProcess;
    private IEnvironment _environment;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static IDictionary`2<string, string> <ExternalEnvironmentVariables>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static IDictionary`2<string, string> ExternalEnvironmentVariables { get; internal set; }
    internal ProcessHelper(IEnvironment environment);
    private static ProcessHelper();
    [CompilerGeneratedAttribute]
internal static IDictionary`2<string, string> get_ExternalEnvironmentVariables();
    [CompilerGeneratedAttribute]
internal static void set_ExternalEnvironmentVariables(IDictionary`2<string, string> value);
    [NullableContextAttribute("2")]
public sealed virtual object LaunchProcess(string processPath, string arguments, string workingDirectory, IDictionary`2<string, string> envVariables, Action`2<object, string> errorCallback, Action`1<object> exitCallBack, Action`2<object, string> outputCallBack);
    [NullableContextAttribute("2")]
public sealed virtual string GetCurrentProcessFileName();
    [NullableContextAttribute("2")]
public sealed virtual string GetTestEngineDirectory();
    public sealed virtual int GetCurrentProcessId();
    public sealed virtual string GetProcessName(int processId);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetExitCode(object process, Int32& exitCode);
    [NullableContextAttribute("2")]
public sealed virtual void SetExitCallback(int processId, Action`1<object> callbackAction);
    [NullableContextAttribute("2")]
public sealed virtual void TerminateProcess(object process);
    [NullableContextAttribute("2")]
public sealed virtual int GetProcessId(object process);
    public sealed virtual string GetNativeDllDirectory();
    private string GetFormattedCurrentProcessArchitecture();
    [NullableContextAttribute("2")]
public sealed virtual void WaitForProcessExit(object process);
    public sealed virtual string GetCurrentProcessLocation();
    public sealed virtual IntPtr GetProcessHandle(int processId);
    public sealed virtual PlatformArchitecture GetCurrentProcessArchitecture();
    public sealed virtual PlatformArchitecture GetProcessArchitecture(int processId);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ProcessStartInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddEnvironmentVariable(ProcessStartInfo startInfo, string name, string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.ThreadApartmentStateNotSupportedException : Exception {
    public ThreadApartmentStateNotSupportedException(string message);
    public ThreadApartmentStateNotSupportedException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
