[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.CommandArgumentPair : object {
    internal static string Separator;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Argument>k__BackingField;
    public string Command { get; private set; }
    public string Argument { get; private set; }
    public CommandArgumentPair(string input);
    public CommandArgumentPair(string command, string argument);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
    [CompilerGeneratedAttribute]
public string get_Argument();
    [CompilerGeneratedAttribute]
private void set_Argument(string value);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void Parse(string input);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CommandLine.CommandLineException : Exception {
    public CommandLineException(string message);
    public CommandLineException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.CommandLineOptions : object {
    public static long DefaultRunBatchSize;
    public static long DefaultDiscoveryBatchSize;
    [NullableAttribute("1")]
public static string UseVsixExtensionsKey;
    private TimeSpan _defaultRetrievalTimeout;
    private static CommandLineOptions s_instance;
    [NullableAttribute("1")]
private List`1<string> _sources;
    private Architecture _architecture;
    private Framework _frameworkVersion;
    [CompilerGeneratedAttribute]
private bool <Parallel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InIsolation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCodeCoverage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAutoFakes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVsixExtensions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <TestAdapterPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TestAdapterLoadingStrategy <TestAdapterLoadingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TestStatsEventTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseFilterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListTestsTargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDesignMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ArchitectureSpecified>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IFileHelper <FileHelper>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private FilePatternParser <FilePatternParser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FrameworkVersionSpecified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactProcessingMode <ArtifactProcessingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestSessionCorrelationId>k__BackingField;
    [NullableAttribute("1")]
internal static CommandLineOptions Instance { get; }
    public bool Parallel { get; public set; }
    public bool InIsolation { get; public set; }
    [NullableAttribute("1")]
public IEnumerable`1<string> Sources { get; }
    public bool EnableCodeCoverage { get; public set; }
    public bool DisableAutoFakes { get; public set; }
    public bool UseVsixExtensions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] TestAdapterPath { get; public set; }
    public TestAdapterLoadingStrategy TestAdapterLoadingStrategy { get; public set; }
    public int ParentProcessId { get; public set; }
    public int Port { get; public set; }
    public string Configuration { get; public set; }
    public string BuildBasePath { get; public set; }
    public string Output { get; public set; }
    public long BatchSize { get; public set; }
    public TimeSpan TestStatsEventTimeout { get; public set; }
    public string TestCaseFilterValue { get; public set; }
    public string ListTestsTargetPath { get; public set; }
    public string TargetDevice { get; public set; }
    public bool HasPhoneContext { get; }
    public bool TestAdapterPathsSet { get; }
    public Architecture TargetArchitecture { get; public set; }
    public bool IsDesignMode { get; public set; }
    public bool ShouldCollectSourceInformation { get; }
    internal bool ArchitectureSpecified { get; private set; }
    [NullableAttribute("1")]
internal IFileHelper FileHelper { get; internal set; }
    [NullableAttribute("1")]
internal FilePatternParser FilePatternParser { get; internal set; }
    internal Framework TargetFrameworkVersion { get; internal set; }
    [MemberNotNullWhenAttribute("True", "TargetFrameworkVersion")]
internal bool FrameworkVersionSpecified { get; private set; }
    internal string ResultsDirectory { get; internal set; }
    internal string SettingsFile { get; internal set; }
    internal ArtifactProcessingMode ArtifactProcessingMode { get; internal set; }
    internal string TestSessionCorrelationId { get; internal set; }
    [NullableContextAttribute("1")]
internal static CommandLineOptions get_Instance();
    [CompilerGeneratedAttribute]
public bool get_Parallel();
    [CompilerGeneratedAttribute]
public void set_Parallel(bool value);
    [CompilerGeneratedAttribute]
public bool get_InIsolation();
    [CompilerGeneratedAttribute]
public void set_InIsolation(bool value);
    [NullableContextAttribute("1")]
public IEnumerable`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public bool get_EnableCodeCoverage();
    [CompilerGeneratedAttribute]
public void set_EnableCodeCoverage(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAutoFakes();
    [CompilerGeneratedAttribute]
public void set_DisableAutoFakes(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseVsixExtensions();
    [CompilerGeneratedAttribute]
public void set_UseVsixExtensions(bool value);
    [CompilerGeneratedAttribute]
public String[] get_TestAdapterPath();
    [CompilerGeneratedAttribute]
public void set_TestAdapterPath(String[] value);
    [CompilerGeneratedAttribute]
public TestAdapterLoadingStrategy get_TestAdapterLoadingStrategy();
    [CompilerGeneratedAttribute]
public void set_TestAdapterLoadingStrategy(TestAdapterLoadingStrategy value);
    [CompilerGeneratedAttribute]
public int get_ParentProcessId();
    [CompilerGeneratedAttribute]
public void set_ParentProcessId(int value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_BuildBasePath();
    [CompilerGeneratedAttribute]
public void set_BuildBasePath(string value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    [CompilerGeneratedAttribute]
public long get_BatchSize();
    [CompilerGeneratedAttribute]
public void set_BatchSize(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TestStatsEventTimeout();
    [CompilerGeneratedAttribute]
public void set_TestStatsEventTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_TestCaseFilterValue();
    [CompilerGeneratedAttribute]
public void set_TestCaseFilterValue(string value);
    [CompilerGeneratedAttribute]
public string get_ListTestsTargetPath();
    [CompilerGeneratedAttribute]
public void set_ListTestsTargetPath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetDevice();
    [CompilerGeneratedAttribute]
public void set_TargetDevice(string value);
    public bool get_HasPhoneContext();
    public bool get_TestAdapterPathsSet();
    public Architecture get_TargetArchitecture();
    public void set_TargetArchitecture(Architecture value);
    [CompilerGeneratedAttribute]
public bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
public void set_IsDesignMode(bool value);
    public bool get_ShouldCollectSourceInformation();
    [CompilerGeneratedAttribute]
internal bool get_ArchitectureSpecified();
    [CompilerGeneratedAttribute]
private void set_ArchitectureSpecified(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal IFileHelper get_FileHelper();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_FileHelper(IFileHelper value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal FilePatternParser get_FilePatternParser();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal void set_FilePatternParser(FilePatternParser value);
    internal Framework get_TargetFrameworkVersion();
    internal void set_TargetFrameworkVersion(Framework value);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "TargetFrameworkVersion")]
internal bool get_FrameworkVersionSpecified();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "TargetFrameworkVersion")]
private void set_FrameworkVersionSpecified(bool value);
    [CompilerGeneratedAttribute]
internal string get_ResultsDirectory();
    [CompilerGeneratedAttribute]
internal void set_ResultsDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_SettingsFile();
    [CompilerGeneratedAttribute]
internal void set_SettingsFile(string value);
    [CompilerGeneratedAttribute]
internal ArtifactProcessingMode get_ArtifactProcessingMode();
    [CompilerGeneratedAttribute]
internal void set_ArtifactProcessingMode(ArtifactProcessingMode value);
    [CompilerGeneratedAttribute]
internal string get_TestSessionCorrelationId();
    [CompilerGeneratedAttribute]
internal void set_TestSessionCorrelationId(string value);
    [NullableContextAttribute("1")]
public void AddSource(string source);
    internal static void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.DiscoveryHandlerToEventsRegistrarAdapter : object {
    private ITestDiscoveryEventsHandler2 _handler;
    private EventHandler`1<DiscoveredTestsEventArgs> _handleDiscoveredTests;
    private EventHandler`1<TestRunMessageEventArgs> _handleLogMessage;
    private EventHandler`1<DiscoveryCompleteEventArgs> _handleDiscoveryComplete;
    private EventHandler`1<string> _handleRawMessage;
    public DiscoveryHandlerToEventsRegistrarAdapter(ITestDiscoveryEventsHandler2 handler);
    public sealed virtual void LogWarning(string message);
    public sealed virtual void RegisterDiscoveryEvents(IDiscoveryRequest discoveryRequest);
    public sealed virtual void UnregisterDiscoveryEvents(IDiscoveryRequest discoveryRequest);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object _, DiscoveredTestsEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(object _, TestRunMessageEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_2(object _, DiscoveryCompleteEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Executor : object {
    private static string NonARM64RunnerName;
    private ITestPlatformEventSource _testPlatformEventSource;
    private IProcessHelper _processHelper;
    private IEnvironment _environment;
    private bool _showHelp;
    [CompilerGeneratedAttribute]
private IOutput <Output>k__BackingField;
    private IOutput Output { get; private set; }
    public Executor(IOutput output);
    internal Executor(IOutput output, ITestPlatformEventSource testPlatformEventSource, IProcessHelper processHelper, IEnvironment environment);
    [CompilerGeneratedAttribute]
private IOutput get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(IOutput value);
    internal int Execute(String[] args);
    private int GetArgumentProcessors(String[] args, List`1& processors);
    private int IdentifyDuplicateArguments(IEnumerable`1<IArgumentProcessor> argumentProcessors);
    private static void EnsureActionArgumentIsPresent(List`1<IArgumentProcessor> argumentProcessors, ArgumentProcessorFactory processorFactory);
    private bool ExecuteArgumentProcessor(IArgumentProcessor processor, Int32& exitCode);
    private void PrintSplashScreen(bool isDiag, String[] args);
    private void PrintWarningIfInvokedThroughDotnetVSTest(String[] args);
    private void PrintWarningIfRunningEmulatedOnArm64();
    private int FlattenArguments(IEnumerable`1<string> arguments, String[]& flattenedArguments);
    public bool ReadArgumentsAndSanitize(string fileName, String& args, String[]& arguments);
    private bool GetContentUsingFile(string fileName, String& contents);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper : object {
    private int _highestSupportedVersion;
    private ITranslationLayerRequestSender _requestSender;
    private ITestPlatformEventSource _testPlatformEventSource;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ITestRequestManager <TestRequestManager>k__BackingField;
    [NullableAttribute("2")]
internal ITestRequestManager TestRequestManager { get; internal set; }
    public InProcessVsTestConsoleWrapper(ConsoleParameters consoleParameters);
    internal InProcessVsTestConsoleWrapper(ConsoleParameters consoleParameters, IEnvironmentVariableHelper environmentVariableHelper, ITranslationLayerRequestSender requestSender, ITestRequestManager testRequestManager, Executor executor, ITestPlatformEventSource testPlatformEventSource, UiLanguageOverride languageOverride);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal ITestRequestManager get_TestRequestManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TestRequestManager(ITestRequestManager value);
    public sealed virtual void AbortTestRun();
    public sealed virtual void CancelDiscovery();
    public sealed virtual void CancelTestRun();
    public sealed virtual void EndSession();
    public sealed virtual void StartSession();
    [ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual ITestSession StartTestSession(IList`1<string> sources, string runSettings, ITestSessionEventsHandler eventsHandler);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual ITestSession StartTestSession(IList`1<string> sources, string runSettings, TestPlatformOptions options, ITestSessionEventsHandler eventsHandler);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual ITestSession StartTestSession(IList`1<string> sources, string runSettings, TestPlatformOptions options, ITestSessionEventsHandler eventsHandler, ITestHostLauncher testHostLauncher);
    [ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual bool StopTestSession(TestSessionInfo testSessionInfo, ITestSessionEventsHandler eventsHandler);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual bool StopTestSession(TestSessionInfo testSessionInfo, TestPlatformOptions options, ITestSessionEventsHandler eventsHandler);
    public sealed virtual void InitializeExtensions(IEnumerable`1<string> pathToAdditionalExtensions);
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, string discoverySettings, ITestDiscoveryEventsHandler discoveryEventsHandler);
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    [NullableContextAttribute("2")]
public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    [NullableContextAttribute("2")]
public sealed virtual void RunTests(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    [NullableContextAttribute("2")]
public sealed virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual void RunTests(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler);
    public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [NullableContextAttribute("2")]
public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [NullableContextAttribute("2")]
public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [NullableContextAttribute("2")]
public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [NullableContextAttribute("2")]
public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [NullableContextAttribute("2")]
public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [NullableContextAttribute("2")]
public sealed virtual void RunTestsWithCustomTestHost(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<DiscoverTestsAsync>d__40")]
public sealed virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string discoverySettings, ITestDiscoveryEventsHandler discoveryEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<DiscoverTestsAsync>d__41")]
public sealed virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public sealed virtual Task DiscoverTestsAsync(IEnumerable`1<string> sources, string discoverySettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestDiscoveryEventsHandler2 discoveryEventsHandler);
    public sealed virtual Task InitializeExtensionsAsync(IEnumerable`1<string> pathToAdditionalExtensions);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<ProcessTestRunAttachmentsAsync>d__44")]
public sealed virtual Task ProcessTestRunAttachmentsAsync(IEnumerable`1<AttachmentSet> attachments, string processingSettings, bool isLastBatch, bool collectMetrics, ITestRunAttachmentsProcessingEventsHandler eventsHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<ProcessTestRunAttachmentsAsync>d__45")]
public sealed virtual Task ProcessTestRunAttachmentsAsync(IEnumerable`1<AttachmentSet> attachments, IEnumerable`1<InvokedDataCollector> invokedDataCollectors, string processingSettings, bool isLastBatch, bool collectMetrics, ITestRunAttachmentsProcessingEventsHandler eventsHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsAsync>d__46")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsAsync>d__47")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual Task RunTestsAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsAsync>d__50")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsAsync>d__51")]
public sealed virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler);
    public sealed virtual Task RunTestsAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__54")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__55")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<string> sources, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__58")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<RunTestsWithCustomTestHostAsync>d__59")]
public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual Task RunTestsWithCustomTestHostAsync(IEnumerable`1<TestCase> testCases, string runSettings, TestPlatformOptions options, TestSessionInfo testSessionInfo, ITestRunEventsHandler testRunEventsHandler, ITelemetryEventsHandler telemetryEventsHandler, ITestHostLauncher customTestHostLauncher);
    public sealed virtual Task StartSessionAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<StartTestSessionAsync>d__63")]
[ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual Task`1<ITestSession> StartTestSessionAsync(IList`1<string> sources, string runSettings, ITestSessionEventsHandler eventsHandler);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<StartTestSessionAsync>d__64")]
[ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual Task`1<ITestSession> StartTestSessionAsync(IList`1<string> sources, string runSettings, TestPlatformOptions options, ITestSessionEventsHandler eventsHandler);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual Task`1<ITestSession> StartTestSessionAsync(IList`1<string> sources, string runSettings, TestPlatformOptions options, ITestSessionEventsHandler eventsHandler, ITestHostLauncher testHostLauncher);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.InProcessVsTestConsoleWrapper/<StopTestSessionAsync>d__66")]
[ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual Task`1<bool> StopTestSessionAsync(TestSessionInfo testSessionInfo, ITestSessionEventsHandler eventsHandler);
    [ObsoleteAttribute("This API is not final yet and is subject to changes.", "False")]
public sealed virtual Task`1<bool> StopTestSessionAsync(TestSessionInfo testSessionInfo, TestPlatformOptions options, ITestSessionEventsHandler eventsHandler);
    private bool WaitForConnection();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.ConsoleHelper : object {
    public int CursorLeft { get; }
    public int CursorTop { get; }
    public int WindowWidth { get; }
    public sealed virtual int get_CursorLeft();
    public sealed virtual int get_CursorTop();
    public sealed virtual int get_WindowWidth();
    public sealed virtual void SetCursorPosition(int left, int top);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[FriendlyNameAttribute("Console")]
[ExtensionUriAttribute("logger://Microsoft/TestPlatform/ConsoleLogger/v1")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.ConsoleLogger : object {
    private static string TestMessageFormattingPrefix;
    private static string TestResultPrefix;
    private static string TestResultSuffix;
    internal static bool AppendPrefix;
    internal static bool EnableProgress;
    public static string ExtensionUri;
    public static string FriendlyName;
    public static string VerbosityParam;
    public static string PrefixParam;
    public static string ProgressIndicatorParam;
    public static string ParentExecutionIdPropertyIdentifier;
    public static string ExecutionIdPropertyIdentifier;
    private static int LongestResultIndicator;
    private bool _testRunHasErrorMessages;
    [NullableAttribute("2")]
private string _targetFramework;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static IOutput <Output>k__BackingField;
    [NullableAttribute("2")]
private IProgressIndicator _progressIndicator;
    private IFeatureFlag _featureFlag;
    [CompilerGeneratedAttribute]
private Verbosity <VerbosityLevel>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Guid, MinimalTestResult> <LeafTestResults>k__BackingField;
    [NullableAttribute("2")]
protected static IOutput Output { get; private set; }
    public Verbosity VerbosityLevel { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Guid, MinimalTestResult> LeafTestResults { get; private set; }
    internal ConsoleLogger(IOutput output, IProgressIndicator progressIndicator, IFeatureFlag featureFlag);
    private static ConsoleLogger();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected static IOutput get_Output();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private static void set_Output(IOutput value);
    [CompilerGeneratedAttribute]
public Verbosity get_VerbosityLevel();
    [CompilerGeneratedAttribute]
private void set_VerbosityLevel(Verbosity value);
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Guid, MinimalTestResult> get_LeafTestResults();
    [CompilerGeneratedAttribute]
private void set_LeafTestResults(ConcurrentDictionary`2<Guid, MinimalTestResult> value);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Initialize(TestLoggerEvents events, string testRunDirectory);
    public sealed virtual void Initialize(TestLoggerEvents events, Dictionary`2<string, string> parameters);
    private static void PrintTimeSpan(TimeSpan timeSpan);
    private static string GetFormattedOutput(Collection`1<TestResultMessage> testMessageCollection);
    private static Collection`1<TestResultMessage> GetTestMessages(Collection`1<TestResultMessage> messages, string requiredCategory);
    private static void DisplayFullInformation(TestResult result);
    private static Guid GetParentExecutionId(TestResult testResult);
    private static Guid GetExecutionId(TestResult testResult);
    private void TestRunStartHandler(object sender, TestRunStartEventArgs e);
    private void TestMessageHandler(object sender, TestRunMessageEventArgs e);
    private void TestResultHandler(object sender, TestResultEventArgs e);
    [NullableContextAttribute("2")]
private static string GetFormattedDurationString(TimeSpan duration);
    private void TestRunCompleteHandler(object sender, TestRunCompleteEventArgs e);
    public static void RaiseTestRunWarning(string warningMessage);
    [CompilerGeneratedAttribute]
internal static string <TestResultHandler>g__GetFormattedTestIndicator|42_0(string indicator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.EventRegistrarToWarningLoggerAdapter : object {
    private IBaseTestEventsRegistrar _testEventsRegistrar;
    public EventRegistrarToWarningLoggerAdapter(IBaseTestEventsRegistrar testEventsRegistrar);
    public sealed virtual void LogWarning(string message);
}
internal interface Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.IConsoleHelper {
    public int CursorLeft { get; }
    public int CursorTop { get; }
    public int WindowWidth { get; }
    public abstract virtual int get_CursorLeft();
    public abstract virtual int get_CursorTop();
    public abstract virtual int get_WindowWidth();
    public abstract virtual void SetCursorPosition(int left, int top);
}
internal interface Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.IProgressIndicator {
    public abstract virtual void Start();
    public abstract virtual void Pause();
    public abstract virtual void Stop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionUriAttribute("logger://Microsoft/TestPlatform/MSBuildLogger/v1")]
[FriendlyNameAttribute("Microsoft.TestPlatform.MSBuildLogger")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.MSBuildLogger : object {
    public static string ExtensionUri;
    public static string FriendlyName;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static IOutput <Output>k__BackingField;
    [NullableAttribute("2")]
protected static IOutput Output { get; private set; }
    internal MSBuildLogger(IOutput output);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected static IOutput get_Output();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private static void set_Output(IOutput value);
    [MemberNotNullAttribute("Output")]
public sealed virtual void Initialize(TestLoggerEvents events, string testRunDirectory);
    public sealed virtual void Initialize(TestLoggerEvents events, Dictionary`2<string, string> parameters);
    private void TestMessageHandler(object sender, TestRunMessageEventArgs e);
    private void TestRunCompleteHandler(object sender, TestRunCompleteEventArgs e);
    private void TestResultHandler(object sender, TestResultEventArgs e);
    private static void SendMessage(string name, String[] data);
    private static string FormatMessage(string name, String[] data);
    [NullableContextAttribute("2")]
private static string Escape(string input);
    private static Collection`1<TestResultMessage> GetTestMessages(Collection`1<TestResultMessage> messages, string requiredCategory);
    private static void AppendOutputs(TestResult result, StringBuilder stringBuilder);
    private static void AddFormattedOutput(Collection`1<TestResultMessage> testMessageCollection, StringBuilder stringBuilder);
    internal static string GetFormattedDurationString(TimeSpan duration);
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.NullWarningLogger : object {
    [NullableContextAttribute("1")]
public sealed virtual void LogWarning(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.Product : object {
    public static string Version;
    private static Product();
    private static string GetProductVersion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.ProgressIndicator : object {
    private object _syncObject;
    private int _dotCounter;
    [NullableAttribute("2")]
private Timer _timer;
    private string _testRunProgressString;
    [CompilerGeneratedAttribute]
private IOutput <ConsoleOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsoleHelper <ConsoleHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    public IOutput ConsoleOutput { get; private set; }
    public IConsoleHelper ConsoleHelper { get; private set; }
    public bool IsRunning { get; private set; }
    public ProgressIndicator(IOutput output, IConsoleHelper consoleHelper);
    [CompilerGeneratedAttribute]
public IOutput get_ConsoleOutput();
    [CompilerGeneratedAttribute]
private void set_ConsoleOutput(IOutput value);
    [CompilerGeneratedAttribute]
public IConsoleHelper get_ConsoleHelper();
    [CompilerGeneratedAttribute]
private void set_ConsoleHelper(IConsoleHelper value);
    [CompilerGeneratedAttribute]
public bool get_IsRunning();
    [CompilerGeneratedAttribute]
private void set_IsRunning(bool value);
    public sealed virtual void Start();
    private void Clear(int startPos);
    public sealed virtual void Pause();
    public sealed virtual void Stop();
    private void Timer_Elapsed(object sender, ElapsedEventArgs e);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.SourceSummary : object {
    [CompilerGeneratedAttribute]
private int <TotalTests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PassedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkippedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    public int TotalTests { get; public set; }
    public int PassedTests { get; public set; }
    public int FailedTests { get; public set; }
    public int SkippedTests { get; public set; }
    public TimeSpan Duration { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TotalTests();
    [CompilerGeneratedAttribute]
public void set_TotalTests(int value);
    [CompilerGeneratedAttribute]
public int get_PassedTests();
    [CompilerGeneratedAttribute]
public void set_PassedTests(int value);
    [CompilerGeneratedAttribute]
public int get_FailedTests();
    [CompilerGeneratedAttribute]
public void set_FailedTests(int value);
    [CompilerGeneratedAttribute]
public int get_SkippedTests();
    [CompilerGeneratedAttribute]
public void set_SkippedTests(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Internal.StackTraceHelper : object {
    private static Regex s_regex;
    internal static bool TryFindLocationFromStackFrame(string errorStackTrace, String& file, String& lineNumber, String& place);
    private static bool TryGetStackFrameLocation(string stackFrame, String& line, String& file, String& place);
    [MemberNotNullAttribute("s_regex")]
private static void InitializeRegex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.AeDebuggerArgumentExecutor : object {
    private static int ProcDumpTimeoutSeconds;
    private static string InstallCommandArgumentName;
    private static string UninstallCommandArgumentName;
    private IEnvironment _environment;
    private IFileHelper _fileHelper;
    private IProcessHelper _processHelper;
    private IOutput _output;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    [NullableAttribute("2")]
private string _argument;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, string> _collectDumpParameters;
    private ProcDumpExecutableHelper _procDumpExecutableHelper;
    public AeDebuggerArgumentExecutor(IEnvironment environment, IFileHelper fileHelper, IProcessHelper processHelper, IOutput output, IEnvironmentVariableHelper environmentVariableHelper);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private ArgumentProcessorResult InstallUnistallPostmortemDebugger(bool install);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <InstallUnistallPostmortemDebugger>b__14_2(object _, string data);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <InstallUnistallPostmortemDebugger>b__14_3(object _, string data);
    [CompilerGeneratedAttribute]
private bool <InstallUnistallPostmortemDebugger>g__TryGetDirectoryInfoAndReportToOutput|14_0(Dictionary`2<string, string> collectDumpParameters, string directoryArgumentName, string invalidArgumentErrorMessage, string invalidDirectoryErrorMessage, DirectoryInfo& directoryInfo);
    [CompilerGeneratedAttribute]
private bool <InstallUnistallPostmortemDebugger>g__TryGetDirectoryInfo|14_1(Dictionary`2<string, string> collectDumpParameters, string directoryArgumentName, DirectoryInfo& directoryInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.AeDebuggerArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.AeDebuggerArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    [NullableAttribute("2")]
public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    [NullableContextAttribute("2")]
public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArgumentProcessorFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, IArgumentProcessor> _commandToProcessorMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, IArgumentProcessor> _specialCommandToProcessorMap;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IArgumentProcessor> <AllArgumentProcessors>k__BackingField;
    public IEnumerable`1<IArgumentProcessor> AllArgumentProcessors { get; }
    internal Dictionary`2<string, IArgumentProcessor> CommandToProcessorMap { get; }
    internal Dictionary`2<string, IArgumentProcessor> SpecialCommandToProcessorMap { get; }
    private static IList`1<IArgumentProcessor> DefaultArgumentProcessors { get; }
    protected ArgumentProcessorFactory(IEnumerable`1<IArgumentProcessor> argumentProcessors);
    internal static ArgumentProcessorFactory Create(IFeatureFlag featureFlag);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IArgumentProcessor> get_AllArgumentProcessors();
    internal Dictionary`2<string, IArgumentProcessor> get_CommandToProcessorMap();
    internal Dictionary`2<string, IArgumentProcessor> get_SpecialCommandToProcessorMap();
    public IArgumentProcessor CreateArgumentProcessor(string argument);
    public IArgumentProcessor CreateArgumentProcessor(string command, String[] arguments);
    public IArgumentProcessor CreateDefaultActionArgumentProcessor();
    public IEnumerable`1<IArgumentProcessor> GetArgumentProcessorsToAlwaysExecute();
    private static IList`1<IArgumentProcessor> get_DefaultArgumentProcessors();
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private void BuildCommandMaps();
    public static IArgumentProcessor WrapLazyProcessorToInitializeOnInstantiation(IArgumentProcessor processor, string initArg);
    private static IArgumentProcessor WrapLazyProcessorToInitializeOnInstantiation(IArgumentProcessor processor, String[] initArgs);
}
internal enum Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArgumentProcessorPriority : Enum {
    public int value__;
    public static ArgumentProcessorPriority Maximum;
    public static ArgumentProcessorPriority Help;
    public static ArgumentProcessorPriority Diag;
    public static ArgumentProcessorPriority DesignMode;
    public static ArgumentProcessorPriority VsixExtensions;
    public static ArgumentProcessorPriority RunSettings;
    public static ArgumentProcessorPriority TestAdapterPath;
    public static ArgumentProcessorPriority TestAdapterLoadingStrategy;
    public static ArgumentProcessorPriority AutoUpdateRunSettings;
    public static ArgumentProcessorPriority CliRunSettings;
    public static ArgumentProcessorPriority Logging;
    public static ArgumentProcessorPriority StartLogging;
    public static ArgumentProcessorPriority Normal;
    public static ArgumentProcessorPriority Minimum;
}
public enum Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArgumentProcessorResult : Enum {
    public int value__;
    public static ArgumentProcessorResult Success;
    public static ArgumentProcessorResult Fail;
    public static ArgumentProcessorResult Abort;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArtifactProcessingCollectModeProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArtifactProcessingCollectModeProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public ArgumentProcessorPriority Priority { get; }
    public HelpContentPriority HelpPriority { get; }
    [NullableAttribute("2")]
public string HelpContentResourceName { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual HelpContentPriority get_HelpPriority();
    [NullableContextAttribute("2")]
public virtual string get_HelpContentResourceName();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArtifactProcessingCollectModeProcessorExecutor : object {
    [NullableAttribute("1")]
private CommandLineOptions _commandLineOptions;
    [NullableContextAttribute("1")]
public ArtifactProcessingCollectModeProcessorExecutor(CommandLineOptions options);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string _);
    public sealed virtual ArgumentProcessorResult Execute();
}
internal enum Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArtifactProcessingMode : Enum {
    public int value__;
    public static ArtifactProcessingMode None;
    public static ArtifactProcessingMode Collect;
    public static ArtifactProcessingMode PostProcess;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArtifactProcessingPostProcessModeProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    [NullableContextAttribute("2")]
public static bool ContainsPostProcessCommand(String[] args, IFeatureFlag featureFlag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArtifactProcessingPostProcessModeProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public ArgumentProcessorPriority Priority { get; }
    public HelpContentPriority HelpPriority { get; }
    [NullableAttribute("2")]
public string HelpContentResourceName { get; }
    public bool IsAction { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual HelpContentPriority get_HelpPriority();
    [NullableContextAttribute("2")]
public virtual string get_HelpContentResourceName();
    public virtual bool get_IsAction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ArtifactProcessingPostProcessModeProcessorExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IArtifactProcessingManager _artifactProcessingManage;
    public ArtifactProcessingPostProcessModeProcessorExecutor(CommandLineOptions options, IArtifactProcessingManager artifactProcessingManager);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string _);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.BaseArgumentProcessorCapabilities : object {
    public bool AllowMultiple { get; }
    public bool AlwaysExecute { get; }
    [NullableAttribute("1")]
public string CommandName { get; }
    public string ShortCommandName { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public bool IsAction { get; }
    public bool IsSpecialCommand { get; }
    public ArgumentProcessorPriority Priority { get; }
    public virtual bool get_AllowMultiple();
    public virtual bool get_AlwaysExecute();
    [NullableContextAttribute("1")]
public abstract virtual string get_CommandName();
    public virtual string get_ShortCommandName();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
    public virtual bool get_IsAction();
    public virtual bool get_IsSpecialCommand();
    public virtual ArgumentProcessorPriority get_Priority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.CliRunSettingsArgumentExecutor : object {
    private IRunSettingsProvider _runSettingsManager;
    private CommandLineOptions _commandLineOptions;
    internal CliRunSettingsArgumentExecutor(IRunSettingsProvider runSettingsManager, CommandLineOptions commandLineOptions);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual void Initialize(String[] arguments);
    public sealed virtual ArgumentProcessorResult Execute();
    private void CreateOrOverwriteRunSettings(IRunSettingsProvider runSettingsProvider, String[] args);
    private static bool UpdateTestRunParameterNode(IRunSettingsProvider runSettingsProvider, string node);
    private void UpdateFrameworkAndPlatform(string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.CliRunSettingsArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.CliRunSettingsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.CollectArgumentExecutor : object {
    private IRunSettingsProvider _runSettingsManager;
    private IFileHelper _fileHelper;
    internal static List`1<string> EnabledDataCollectors;
    internal CollectArgumentExecutor(IRunSettingsProvider runSettingsManager, IFileHelper fileHelper);
    private static CollectArgumentExecutor();
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    private static string GetCoverletCodeBasePath(IRunSettingsProvider runSettingProvider, IFileHelper fileHelper);
    public sealed virtual ArgumentProcessorResult Execute();
    internal static DataCollectorSettings EnableDataCollectorUsingFriendlyName(string argument, DataCollectionRunSettings dataCollectionRunSettings);
    private static void AddDataCollectorConfigurations(String[] configurations, DataCollectorSettings dataCollectorSettings, string exceptionMessage);
    private static void AddOrUpdateConfiguration(XmlElement configuration, string configurationName, string configurationValue);
    internal static void EnableCoverletInProcDataCollector(string argument, DataCollectionRunSettings dataCollectionRunSettings, IRunSettingsProvider runSettingProvider, IFileHelper fileHelper);
    private static bool DoesDataCollectorSettingsExist(string friendlyName, DataCollectionRunSettings dataCollectionRunSettings, DataCollectorSettings& dataCollectorSettings);
    internal static void AddDataCollectorToRunSettings(string arguments, IRunSettingsProvider runSettingsManager, IFileHelper fileHelper);
    internal static void AddDataCollectorToRunSettings(String[] arguments, IRunSettingsProvider runSettingsManager, IFileHelper fileHelper, string exceptionMessage);
    internal static void AddDataCollectorFriendlyName(string friendlyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.CollectArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.CollectArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.DisableAutoFakesArgumentExecutor : object {
    [NullableAttribute("1")]
private CommandLineOptions _commandLineOptions;
    [NullableContextAttribute("1")]
public DisableAutoFakesArgumentExecutor(CommandLineOptions commandLineOptions);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.DisableAutoFakesArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.DisableAutoFakesArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public bool AllowMultiple { get; }
    public string CommandName { get; }
    public ArgumentProcessorPriority Priority { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual bool get_AllowMultiple();
    public virtual string get_CommandName();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableBlameArgumentExecutor : object {
    private static string BlameFriendlyName;
    private IRunSettingsProvider _runSettingsManager;
    private IEnvironment _environment;
    private IFileHelper _fileHelper;
    [CompilerGeneratedAttribute]
private IOutput <Output>k__BackingField;
    internal IOutput Output { get; internal set; }
    internal EnableBlameArgumentExecutor(IRunSettingsProvider runSettingsManager, IEnvironment environment, IFileHelper fileHelper);
    private static EnableBlameArgumentExecutor();
    [CompilerGeneratedAttribute]
internal IOutput get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(IOutput value);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private void InitializeBlame(bool enableCrashDump, bool enableHangDump, bool monitorPostMortemDebugger, Dictionary`2<string, string> collectDumpParameters);
    [NullableContextAttribute("2")]
private static string GetResultsDirectory(string settings);
    private static void AddCollectDumpNode(Dictionary`2<string, string> parameters, XmlDocument xmlDocument, XmlElement outernode);
    private static void AddCollectHangDumpNode(Dictionary`2<string, string> parameters, XmlDocument xmlDocument, XmlElement outernode);
    private static void AddMonitorPostMortemDebuggerNode(Dictionary`2<string, string> parameters, XmlDocument xmlDocument, XmlElement outernode);
    private static void AddNode(Dictionary`2<string, string> parameters, XmlDocument xmlDocument, XmlElement outernode, string nodeName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableBlameArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableBlameArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableCodeCoverageArgumentExecutor : object {
    private IRunSettingsProvider _runSettingsManager;
    private CommandLineOptions _commandLineOptions;
    private IFileHelper _fileHelper;
    internal static string FriendlyName;
    private static string XPathSeperator;
    private static String[] NodeNames;
    private static string CodeCoverageCollectorSettingsTemplate;
    internal EnableCodeCoverageArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager, IFileHelper fileHelper);
    private static EnableCodeCoverageArgumentExecutor();
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private void UpdateWithCodeCoverageSettingsIfNotConfigured();
    private static string GetMissingNodesTextIfAny(string existingPath, string fullpath);
    private static bool ContainsDataCollectorWithFriendlyName(IXPathNavigable runSettingDocument, string dataCollectorFriendlyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableCodeCoverageArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableCodeCoverageArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableDiagArgumentExecutor : object {
    private IFileHelper _fileHelper;
    private IProcessHelper _processHelper;
    public static string TraceLevelParam;
    public EnableDiagArgumentExecutor(IFileHelper fileHelper, IProcessHelper processHelper);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private static void InitializeDiagLogging(string diagFilePath, Dictionary`2<string, string> diagParameters);
    private static PlatformTraceLevel GetDiagTraceLevel(Dictionary`2<string, string> diagParameters);
    private string GetDiagFilePath(string diagFilePathArgument);
    private void CreateDirectoryIfNotExists(string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableDiagArgumentProcessor : object {
    public static string CommandName;
    private IFileHelper _fileHelper;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    protected EnableDiagArgumentProcessor(IFileHelper fileHelper);
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    [CompilerGeneratedAttribute]
private IArgumentExecutor <get_Executor>b__9_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableDiagArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableLoggerArgumentExecutor : object {
    [NullableAttribute("1")]
private IRunSettingsProvider _runSettingsManager;
    [NullableContextAttribute("1")]
public EnableLoggerArgumentExecutor(IRunSettingsProvider runSettingsManager);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableLoggerArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnableLoggerArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.EnvironmentArgumentProcessor : object {
    public static string ShortCommandName;
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.FrameworkArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    public static string RunSettingsPath;
    public FrameworkArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.FrameworkArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.FrameworkArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.HelpArgumentExecutor : object {
    [CompilerGeneratedAttribute]
private IOutput <Output>k__BackingField;
    internal IOutput Output { get; internal set; }
    [CompilerGeneratedAttribute]
internal IOutput get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(IOutput value);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private string LookupHelpDescription(IArgumentProcessor argumentProcessor);
    private void OutputSection(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.HelpArgumentProcessor : object {
    public static string CommandName;
    public static string ShortCommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.HelpArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public string ShortCommandName { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public virtual string get_CommandName();
    public virtual string get_ShortCommandName();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
}
internal enum Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.HelpContentPriority : Enum {
    public int value__;
    public static HelpContentPriority None;
    public static HelpContentPriority RunTestsArgumentProcessorHelpPriority;
    public static HelpContentPriority RunSpecificTestsArgumentProcessorHelpPriority;
    public static HelpContentPriority TestCaseFilterArgumentProcessorHelpPriority;
    public static HelpContentPriority FrameworkArgumentProcessorHelpPriority;
    public static HelpContentPriority PlatformArgumentProcessorHelpPriority;
    public static HelpContentPriority EnvironmentArgumentProcessorHelpPriority;
    public static HelpContentPriority RunSettingsArgumentProcessorHelpPriority;
    public static HelpContentPriority CliRunSettingsArgumentProcessorHelpPriority;
    public static HelpContentPriority ListTestsArgumentProcessorHelpPriority;
    public static HelpContentPriority ParallelArgumentProcessorHelpPriority;
    public static HelpContentPriority TestAdapterPathArgumentProcessorHelpPriority;
    public static HelpContentPriority TestAdapterLoadingStrategyArgumentProcessorHelpPriority;
    public static HelpContentPriority EnableDiagArgumentProcessorHelpPriority;
    public static HelpContentPriority EnableLoggerArgumentProcessorHelpPriority;
    public static HelpContentPriority ResultsDirectoryArgumentProcessorHelpPriority;
    public static HelpContentPriority ParentProcessIdArgumentProcessorHelpPriority;
    public static HelpContentPriority PortArgumentProcessorHelpPriority;
    public static HelpContentPriority HelpArgumentProcessorHelpPriority;
    public static HelpContentPriority EnableCodeCoverageArgumentProcessorHelpPriority;
    public static HelpContentPriority CollectArgumentProcessorHelpPriority;
    public static HelpContentPriority InIsolationArgumentProcessorHelpPriority;
    public static HelpContentPriority DisableAutoFakesArgumentProcessorHelpPriority;
    public static HelpContentPriority UseVsixArgumentProcessorHelpPriority;
    public static HelpContentPriority ListDiscoverersArgumentProcessorHelpPriority;
    public static HelpContentPriority ListExecutorsArgumentProcessorHelpPriority;
    public static HelpContentPriority ListLoggersArgumentProcessorHelpPriority;
    public static HelpContentPriority ListSettingsProvidersArgumentProcessorHelpPriority;
    public static HelpContentPriority ResponseFileArgumentProcessorHelpPriority;
}
[NullableContextAttribute("2")]
internal interface Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.IArgumentExecutor {
    public abstract virtual void Initialize(string argument);
    public abstract virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.IArgumentProcessor {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    public abstract virtual Lazy`1<IArgumentExecutor> get_Executor();
    public abstract virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    public abstract virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
}
[NullableContextAttribute("2")]
internal interface Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.IArgumentProcessorCapabilities {
    public string ShortCommandName { get; }
    [NullableAttribute("1")]
public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsSpecialCommand { get; }
    public bool AlwaysExecute { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public abstract virtual string get_ShortCommandName();
    [NullableContextAttribute("1")]
public abstract virtual string get_CommandName();
    public abstract virtual bool get_AllowMultiple();
    public abstract virtual bool get_IsSpecialCommand();
    public abstract virtual bool get_AlwaysExecute();
    public abstract virtual bool get_IsAction();
    public abstract virtual ArgumentProcessorPriority get_Priority();
    public abstract virtual string get_HelpContentResourceName();
    public abstract virtual HelpContentPriority get_HelpPriority();
}
internal interface Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.IArgumentsExecutor {
    public abstract virtual void Initialize(String[] arguments);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.IAssemblyMetadataProvider {
    public abstract virtual FrameworkName GetFrameworkName(string filePath);
    public abstract virtual Architecture GetArchitecture(string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.InIsolationArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    public static string RunSettingsPath;
    public InIsolationArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.InIsolationArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.InIsolationArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListDiscoverersArgumentExecutor : object {
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListDiscoverersArgumentProcessor : ListExtensionsArgumentProcessor {
    [NullableAttribute("1")]
private static string CommandName;
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListExecutorsArgumentExecutor : object {
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListExecutorsArgumentProcessor : ListExtensionsArgumentProcessor {
    [NullableAttribute("1")]
private static string CommandName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListExtensionsArgumentProcessor : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    private Func`1<IArgumentExecutor> _getExecutor;
    private Func`1<IArgumentProcessorCapabilities> _getCapabilities;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    public ListExtensionsArgumentProcessor(Func`1<IArgumentExecutor> getExecutor, Func`1<IArgumentProcessorCapabilities> getCapabilities);
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListExtensionsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    private string _commandName;
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ListExtensionsArgumentProcessorCapabilities(string commandName);
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListFullyQualifiedTestsArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private ITestRequestManager _testRequestManager;
    internal IOutput Output;
    private IRunSettingsProvider _runSettingsManager;
    private ITestDiscoveryEventsRegistrar _discoveryEventsRegistrar;
    private List`1<string> _discoveredTests;
    public ListFullyQualifiedTestsArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsProvider, ITestRequestManager testRequestManager);
    internal ListFullyQualifiedTestsArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsProvider, ITestRequestManager testRequestManager, IOutput output);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListFullyQualifiedTestsArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListFullyQualifiedTestsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListLoggersArgumentExecutor : object {
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListLoggersArgumentProcessor : ListExtensionsArgumentProcessor {
    [NullableAttribute("1")]
private static string CommandName;
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListSettingsProvidersArgumentExecutor : object {
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListSettingsProvidersArgumentProcessor : ListExtensionsArgumentProcessor {
    [NullableAttribute("1")]
private static string CommandName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListTestsArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private ITestRequestManager _testRequestManager;
    internal IOutput Output;
    private IRunSettingsProvider _runSettingsManager;
    private ITestDiscoveryEventsRegistrar _discoveryEventsRegistrar;
    public ListTestsArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsProvider, ITestRequestManager testRequestManager);
    internal ListTestsArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsProvider, ITestRequestManager testRequestManager, IOutput output);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListTestsArgumentProcessor : object {
    public static string ShortCommandName;
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListTestsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public string ShortCommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual string get_ShortCommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListTestsTargetPathArgumentExecutor : object {
    [NullableAttribute("1")]
private CommandLineOptions _commandLineOptions;
    [NullableContextAttribute("1")]
public ListTestsTargetPathArgumentExecutor(CommandLineOptions options);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListTestsTargetPathArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ListTestsTargetPathArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ParallelArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    public static string RunSettingsPath;
    public ParallelArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ParallelArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ParallelArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ParentProcessIdArgumentExecutor : object {
    [NullableAttribute("1")]
private CommandLineOptions _commandLineOptions;
    [NullableContextAttribute("1")]
public ParentProcessIdArgumentExecutor(CommandLineOptions options);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ParentProcessIdArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ParentProcessIdArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.PlatformArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    public static string RunSettingsPath;
    public PlatformArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.PlatformArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.PlatformArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.PortArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private ITestRequestManager _testRequestManager;
    private Func`3<int, IProcessHelper, IDesignModeClient> _designModeInitializer;
    [NullableAttribute("2")]
private IDesignModeClient _designModeClient;
    private IProcessHelper _processHelper;
    public PortArgumentExecutor(CommandLineOptions options, ITestRequestManager testRequestManager);
    internal PortArgumentExecutor(CommandLineOptions options, ITestRequestManager testRequestManager, IProcessHelper processHelper);
    internal PortArgumentExecutor(CommandLineOptions options, ITestRequestManager testRequestManager, Func`3<int, IProcessHelper, IDesignModeClient> designModeInitializer, IProcessHelper processHelper);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private static IDesignModeClient InitializeDesignMode(int parentProcessId, IProcessHelper processHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.PortArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.PortArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ResponseFileArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<IArgumentExecutor> <Executor>k__BackingField;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    [CompilerGeneratedAttribute]
public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ResponseFileArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public bool IsSpecialCommand { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual bool get_IsSpecialCommand();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ResultsDirectoryArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    public static string RunSettingsPath;
    public ResultsDirectoryArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ResultsDirectoryArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ResultsDirectoryArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunSettingsArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    [CompilerGeneratedAttribute]
private IFileHelper <FileHelper>k__BackingField;
    internal IFileHelper FileHelper { get; internal set; }
    internal RunSettingsArgumentExecutor(CommandLineOptions commandLineOptions, IRunSettingsProvider runSettingsManager);
    [CompilerGeneratedAttribute]
internal IFileHelper get_FileHelper();
    [CompilerGeneratedAttribute]
internal void set_FileHelper(IFileHelper value);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    private void ExtractFrameworkAndPlatform();
    protected virtual XmlReader GetReaderForFile(string runSettingsFile);
    private XmlDocument GetRunSettingsDocument(string runSettingsFile);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunSettingsArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunSettingsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunSpecificTestsArgumentExecutor : object {
    public static char SplitDelimiter;
    public static char EscapeDelimiter;
    private CommandLineOptions _commandLineOptions;
    private ITestRequestManager _testRequestManager;
    internal IOutput Output;
    private IRunSettingsProvider _runSettingsManager;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Collection`1<string> _selectedTestNames;
    private long _discoveredTestCount;
    private Collection`1<TestCase> _selectedTestCases;
    [NullableAttribute("2")]
private string _effectiveRunSettings;
    private HashSet`1<string> _undiscoveredFilters;
    private ITestDiscoveryEventsRegistrar _discoveryEventsRegistrar;
    private ITestRunEventsRegistrar _testRunEventsRegistrar;
    public RunSpecificTestsArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsProvider, ITestRequestManager testRequestManager, IArtifactProcessingManager artifactProcessingManager, IOutput output);
    [NullableContextAttribute("2")]
[MemberNotNullAttribute("_selectedTestNames")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private void DiscoverTestsAndSelectSpecified(IEnumerable`1<string> sources);
    private void ExecuteSelectedTests();
    private void DiscoveryRequest_OnDiscoveredTests(object sender, DiscoveredTestsEventArgs args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunSpecificTestsArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunSpecificTestsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool IsAction { get; }
    public bool AllowMultiple { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public ArgumentProcessorPriority Priority { get; }
    public virtual string get_CommandName();
    public virtual bool get_IsAction();
    public virtual bool get_AllowMultiple();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
    public virtual ArgumentProcessorPriority get_Priority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunTestsArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private ITestRequestManager _testRequestManager;
    internal IOutput Output;
    private IRunSettingsProvider _runSettingsManager;
    private ITestRunEventsRegistrar _testRunEventsRegistrar;
    private static long s_numberOfExecutedTests;
    public RunTestsArgumentExecutor(CommandLineOptions commandLineOptions, IRunSettingsProvider runSettingsProvider, ITestRequestManager testRequestManager, IArtifactProcessingManager artifactProcessingManager, IOutput output);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    private void RunTests(string runSettings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunTestsArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.RunTestsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public bool IsSpecialCommand { get; }
    public bool AlwaysExecute { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
    public virtual bool get_IsSpecialCommand();
    public virtual bool get_AlwaysExecute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ShowDeprecateDotnetVStestMessageArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public static bool ContainsShowDeprecateDotnetVSTestMessageCommand(String[] args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ShowDeprecateDotnetVStestMessageProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public ArgumentProcessorPriority Priority { get; }
    public HelpContentPriority HelpPriority { get; }
    [NullableAttribute("2")]
public string HelpContentResourceName { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual HelpContentPriority get_HelpPriority();
    [NullableContextAttribute("2")]
public virtual string get_HelpContentResourceName();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.ShowDeprecateDotnetVStestMessageProcessorExecutor : object {
    public sealed virtual ArgumentProcessorResult Execute();
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestAdapterLoadingStrategyArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    private IOutput _output;
    private IFileHelper _fileHelper;
    public static string RunSettingsPath;
    public TestAdapterLoadingStrategyArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager, IOutput output, IFileHelper fileHelper);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    [NullableContextAttribute("2")]
private void ExtractStrategy(string value, TestAdapterLoadingStrategy& strategy);
    private void InitializeDefaultStrategy();
    private void InitializeStrategy(TestAdapterLoadingStrategy strategy);
    private void ForceIsolation();
    private void ValidateTestAdapterPaths(TestAdapterLoadingStrategy strategy);
    private void SetStrategy(TestAdapterLoadingStrategy strategy);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestAdapterLoadingStrategyArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestAdapterLoadingStrategyArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public bool AlwaysExecute { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual bool get_AlwaysExecute();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestAdapterPathArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private IRunSettingsProvider _runSettingsManager;
    private IOutput _output;
    private IFileHelper _fileHelper;
    internal static Char[] ArgumentSeparators;
    public static string RunSettingsPath;
    public TestAdapterPathArgumentExecutor(CommandLineOptions options, IRunSettingsProvider runSettingsManager, IOutput output, IFileHelper fileHelper);
    private static TestAdapterPathArgumentExecutor();
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
    internal static String[] SplitPaths(string paths);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestAdapterPathArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestAdapterPathArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestCaseFilterArgumentExecutor : object {
    [NullableAttribute("1")]
private CommandLineOptions _commandLineOptions;
    [NullableContextAttribute("1")]
public TestCaseFilterArgumentExecutor(CommandLineOptions options);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestCaseFilterArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestCaseFilterArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public string HelpContentResourceName { get; }
    public HelpContentPriority HelpPriority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual string get_HelpContentResourceName();
    public virtual HelpContentPriority get_HelpPriority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestSessionCorrelationIdProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestSessionCorrelationIdProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public ArgumentProcessorPriority Priority { get; }
    public HelpContentPriority HelpPriority { get; }
    [NullableAttribute("2")]
public string HelpContentResourceName { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual HelpContentPriority get_HelpPriority();
    [NullableContextAttribute("2")]
public virtual string get_HelpContentResourceName();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestSessionCorrelationIdProcessorModeProcessorExecutor : object {
    [NullableAttribute("1")]
private CommandLineOptions _commandLineOptions;
    [NullableContextAttribute("1")]
public TestSessionCorrelationIdProcessorModeProcessorExecutor(CommandLineOptions options);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestSourceArgumentExecutor : object {
    [NullableAttribute("1")]
private CommandLineOptions _testSources;
    [NullableContextAttribute("1")]
public TestSourceArgumentExecutor(CommandLineOptions testSources);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestSourceArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.TestSourceArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public ArgumentProcessorPriority Priority { get; }
    public bool IsSpecialCommand { get; }
    public virtual string get_CommandName();
    public virtual ArgumentProcessorPriority get_Priority();
    public virtual bool get_IsSpecialCommand();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.UseVsixExtensionsArgumentExecutor : object {
    private CommandLineOptions _commandLineOptions;
    private ITestRequestManager _testRequestManager;
    private IVSExtensionManager _extensionManager;
    private IOutput _output;
    internal UseVsixExtensionsArgumentExecutor(CommandLineOptions commandLineOptions, ITestRequestManager testRequestManager, IVSExtensionManager extensionManager, IOutput output);
    [NullableContextAttribute("2")]
public sealed virtual void Initialize(string argument);
    public sealed virtual ArgumentProcessorResult Execute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.UseVsixExtensionsArgumentProcessor : object {
    public static string CommandName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentProcessorCapabilities> _metadata;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<IArgumentExecutor> _executor;
    public Lazy`1<IArgumentProcessorCapabilities> Metadata { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<IArgumentExecutor> Executor { get; public set; }
    public sealed virtual Lazy`1<IArgumentProcessorCapabilities> get_Metadata();
    public sealed virtual Lazy`1<IArgumentExecutor> get_Executor();
    public sealed virtual void set_Executor(Lazy`1<IArgumentExecutor> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.UseVsixExtensionsArgumentProcessorCapabilities : BaseArgumentProcessorCapabilities {
    public string CommandName { get; }
    public bool AllowMultiple { get; }
    public bool IsAction { get; }
    public ArgumentProcessorPriority Priority { get; }
    public virtual string get_CommandName();
    public virtual bool get_AllowMultiple();
    public virtual bool get_IsAction();
    public virtual ArgumentProcessorPriority get_Priority();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.Utilities.ArgumentProcessorUtilities : object {
    public static Char[] SemiColonArgumentSeparator;
    public static Char[] EqualNameValueSeparator;
    private static ArgumentProcessorUtilities();
    public static String[] GetArgumentList(string rawArgument, Char[] argumentSeparator, string exceptionMessage);
    public static Dictionary`2<string, string> GetArgumentParameters(IEnumerable`1<string> parameterArgs, Char[] nameValueSeparator, string exceptionMessage);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.Utilities.AssemblyMetadataProvider : object {
    [NullableAttribute("2")]
private static AssemblyMetadataProvider s_instance;
    private IFileHelper _fileHelper;
    public static AssemblyMetadataProvider Instance { get; }
    internal AssemblyMetadataProvider(IFileHelper fileHelper);
    public static AssemblyMetadataProvider get_Instance();
    public sealed virtual FrameworkName GetFrameworkName(string filePath);
    public sealed virtual Architecture GetArchitecture(string assemblyPath);
    private Architecture GetArchitectureFromAssemblyMetadata(string path);
    private static FrameworkName GetFrameworkNameFromAssemblyMetadata(Stream assemblyStream);
    private Architecture MapToArchitecture(ProcessorArchitecture processorArchitecture, string assemblyPath);
    public Architecture GetArchitectureForSource(string imagePath);
}
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Processors.Utilities.LoggerUtilities : object {
    [NullableContextAttribute("1")]
public static void AddLoggerToRunSettings(string loggerIdentifier, Dictionary`2<string, string> loggerParameters, IRunSettingsProvider runSettingsManager);
}
public static class Microsoft.VisualStudio.TestPlatform.CommandLine.Program : object {
    public static int Main(String[] args);
    [NullableContextAttribute("1")]
internal static int Run(String[] args, UiLanguageOverride uiLanguageOverride);
}
public interface Microsoft.VisualStudio.TestPlatform.CommandLine.Publisher.IMetricsPublisher {
    [NullableContextAttribute("1")]
public abstract virtual void PublishMetrics(string eventName, IDictionary`2<string, object> metrics);
}
public class Microsoft.VisualStudio.TestPlatform.CommandLine.Publisher.MetricsPublisherFactory : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.CommandLine.Publisher.MetricsPublisherFactory/<GetMetricsPublisher>d__0")]
public static Task`1<IMetricsPublisher> GetMetricsPublisher(bool isTelemetryOptedIn, bool isDesignMode);
}
public class Microsoft.VisualStudio.TestPlatform.CommandLine.Publisher.NoOpMetricsPublisher : object {
    [NullableContextAttribute("1")]
public sealed virtual void PublishMetrics(string eventName, IDictionary`2<string, object> metrics);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.VisualStudio.TestPlatform.CommandLine.Publisher.TextFileTelemetryPublisher : object {
    [NullableContextAttribute("1")]
public sealed virtual void PublishMetrics(string eventName, IDictionary`2<string, object> metrics);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
internal static void LogToFile(string eventName, IDictionary`2<string, object> metrics, IFileHelper fileHelper);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddnlInfoMessagesBanner { get; }
    internal static string AppContainerTestPrerequisiteFail { get; }
    internal static string AppxBundleSourceWarning { get; }
    internal static string AssemblyPathInvalid { get; }
    internal static string AttachmentOutputFormat { get; }
    internal static string AttachmentsBanner { get; }
    internal static string AvailableDiscoverersHeaderMessage { get; }
    internal static string AvailableExecutorsHeaderMessage { get; }
    internal static string AvailableExtensionFormat { get; }
    internal static string AvailableExtensionsMetadataFormat { get; }
    internal static string AvailableLoggersHeaderMessage { get; }
    internal static string AvailableSettingsProvidersHeaderMessage { get; }
    internal static string AvailableTestsFormat { get; }
    internal static string BatchSizeRequired { get; }
    internal static string BlameCollectDumpNotSupportedForPlatform { get; }
    internal static string BlameCollectDumpTestTimeoutNotSupportedForPlatform { get; }
    internal static string BlameIncorrectOption { get; }
    internal static string BuildBasePathArgumentHelp { get; }
    internal static string BuildBasePathNotFound { get; }
    internal static string CannotBeNullOrEmpty { get; }
    internal static string CLIRunSettingsArgumentHelp { get; }
    internal static string CollectArgumentHelp { get; }
    internal static string CollectWithTestSettingErrorMessage { get; }
    internal static string CommandLineError { get; }
    internal static string CommandLineInformational { get; }
    internal static string CommandLineWarning { get; }
    internal static string CommaSeparatedFormat { get; }
    internal static string ConfigurationArgumentHelp { get; }
    internal static string DataCollectorFriendlyNameInvalid { get; }
    internal static string Days { get; }
    internal static string DbgTrcMessagesBanner { get; }
    internal static string DesignModeClientTimeoutError { get; }
    internal static string DisableAutoFakesUsage { get; }
    internal static string DisablingCodeCoverageInAppContainerTestExecution { get; }
    internal static string DisablingCodeCoverageInPhoneAppContainerTestExecution { get; }
    internal static string DisablingDataCollectionInAppContainerTestExecution { get; }
    internal static string DisablingDataCollectionInPhoneAppContainerTestExecution { get; }
    internal static string DisablingDCOnExceptionWhileParsingDCInfo { get; }
    internal static string DiscoveryFailed { get; }
    internal static string DuplicateArgumentError { get; }
    internal static string EnableBlameUsage { get; }
    internal static string EnableCodeCoverageArgumentProcessorHelp { get; }
    internal static string EnableDiagUsage { get; }
    internal static string EnableLoggerArgumentsInNetCore { get; }
    internal static string EnableLoggersArgumentHelp { get; }
    internal static string EnvironmentArgumentHelp { get; }
    internal static string EnvironmentVariableXIsOverriden { get; }
    internal static string ErrorHostingCommunicationChannel { get; }
    internal static string ErrorMessageBanner { get; }
    internal static string Examples { get; }
    internal static string ExceptionFromExtension { get; }
    internal static string ExecutionTimeFormatString { get; }
    internal static string ExtensionUriFormat { get; }
    internal static string FailedTestIndicator { get; }
    internal static string FileNotFound { get; }
    internal static string Framework35NotSupported { get; }
    internal static string FrameworkArgumentHelp { get; }
    internal static string FrameworkVersionRequired { get; }
    internal static string HelpArgumentHelp { get; }
    internal static string HelpArgumentsText { get; }
    internal static string HelpDescriptionText { get; }
    internal static string HelpOptionsText { get; }
    internal static string HelpUsageText { get; }
    internal static string Hours { get; }
    internal static string InIsolationDeprecated { get; }
    internal static string InIsolationHelp { get; }
    internal static string InvalidAeDebuggerArgument { get; }
    internal static string InvalidArgument { get; }
    internal static string InvalidBatchSize { get; }
    internal static string InvalidBlameArgument { get; }
    internal static string InvalidConfiguration { get; }
    internal static string InvalidDiagArgument { get; }
    internal static string InvalidDiagFilePath { get; }
    internal static string InvalidEnableCodeCoverageCommand { get; }
    internal static string InvalidFrameworkVersion { get; }
    internal static string InvalidInIsolationCommand { get; }
    internal static string InvalidLoggerArgument { get; }
    internal static string InvalidParallelCommand { get; }
    internal static string InvalidParentProcessIdArgument { get; }
    internal static string InvalidPlatformType { get; }
    internal static string InvalidPortArgument { get; }
    internal static string InvalidProcDumpDirectoryPath { get; }
    internal static string InvalidProcDumpToolDirectoryPath { get; }
    internal static string InvalidResultsDirectoryPathCommand { get; }
    internal static string InvalidTestAdapterPathCommand { get; }
    internal static string InvalidTestCaseFilterValueForSpecificTests { get; }
    internal static string InvalidTestRunParameterArgument { get; }
    internal static string InvalidTestSessionCorrelationId { get; }
    internal static string InvalidUseVsixExtensionsCommand { get; }
    internal static string ListDiscoverersHelp { get; }
    internal static string ListExecutorsHelp { get; }
    internal static string ListLoggersHelp { get; }
    internal static string ListSettingsProvidersHelp { get; }
    internal static string ListTestsHeaderMessage { get; }
    internal static string ListTestsHelp { get; }
    internal static string LoggerFileIsReadOnly { get; }
    internal static string LoggerFriendlyNameFormat { get; }
    internal static string LoggerNotFound { get; }
    internal static string LoggerUriFormat { get; }
    internal static string LoggerUriInvalid { get; }
    internal static string MalformedRunSettingsKey { get; }
    internal static string MicrosoftCommandLineTitle { get; }
    internal static string Minutes { get; }
    internal static string MissingTestSourceFile { get; }
    internal static string NoAdaptersFoundInTestAdapterPath { get; }
    internal static string NoArgumentProcessorFound { get; }
    internal static string NoArgumentsProvided { get; }
    internal static string NonDefaultFrameworkAndOrArchDetected { get; }
    internal static string None { get; }
    internal static string NoTestEntryPoint { get; }
    internal static string NoTestsAvailableAfterFiltering { get; }
    internal static string NoTestsAvailableInSources { get; }
    internal static string NotRunTestIndicator { get; }
    internal static string OpenResponseFileError { get; }
    internal static string OutputArgumentHelp { get; }
    internal static string OutputPathNotFound { get; }
    internal static string ParallelArgumentProcessorHelp { get; }
    internal static string ParentProcessIdArgumentHelp { get; }
    internal static string PassedTestIndicator { get; }
    internal static string PhoneAppContainerTestPrerequisiteFail { get; }
    internal static string PhoneNoTestEntryPoint { get; }
    internal static string PlatformArgumentHelp { get; }
    internal static string PlatformTypeRequired { get; }
    internal static string PortArgumentHelp { get; }
    internal static string PostmortemDebuggerNotSupportedForCurrentOS { get; }
    internal static string ProcDumpDirectoryPathArgumenNotFound { get; }
    internal static string ProcDumpFileNameNotFound { get; }
    internal static string ProcDumpToolDirectoryPathArgumenNotFound { get; }
    internal static string ProgressIndicatorString { get; }
    internal static string ProjectPathNotFound { get; }
    internal static string RequestHandlerConnectionTimedOut { get; }
    internal static string ResponseFileArgumentHelp { get; }
    internal static string ResultsDirectoryArgumentHelp { get; }
    internal static string ResultsDirectoryValueRequired { get; }
    internal static string RunSettingsArgumentHelp { get; }
    internal static string RunSettingsFileNotFound { get; }
    internal static string RunSettingsRequired { get; }
    internal static string RunsettingsWithDCErrorMessage { get; }
    internal static string RunSingleAppContainerSource { get; }
    internal static string RunSpecificTestsHelp { get; }
    internal static string RunTestsArgumentHelp { get; }
    internal static string SearchStringDelimiter { get; }
    internal static string Seconds { get; }
    internal static string SettingFormat { get; }
    internal static string SkippedTestIndicator { get; }
    internal static string SomeTestsUnavailableAfterFiltering { get; }
    internal static string SpecificTestsRequired { get; }
    internal static string StacktraceBanner { get; }
    internal static string StartingDiscovery { get; }
    internal static string StartingExecution { get; }
    internal static string StartTestSessionTimedOut { get; }
    internal static string StdErrMessagesBanner { get; }
    internal static string StdOutMessagesBanner { get; }
    internal static string StopTestSessionTimedOut { get; }
    internal static string StringFormatToJoinTwoStrings { get; }
    internal static string SuggestTestAdapterPathIfNoTestsIsFound { get; }
    internal static string SupportedFileTypesIndicator { get; }
    internal static string SupportedFileWithoutSeparator { get; }
    internal static string SupportedFileWithSeparator { get; }
    internal static string SwitchToIsolationInAppContainerMode { get; }
    internal static string SwitchToIsolationInMultiTargetingMode { get; }
    internal static string SwitchToIsolationInPhoneAppContainerMode { get; }
    internal static string SwitchToNoIsolation { get; }
    internal static string TestAdapterLoadingStrategyHelp { get; }
    internal static string TestAdapterLoadingStrategyValueInvalid { get; }
    internal static string TestAdapterLoadingStrategyValueInvalidRecursive { get; }
    internal static string TestAdapterPathDoesNotExist { get; }
    internal static string TestAdapterPathHelp { get; }
    internal static string TestAdapterPathValueRequired { get; }
    internal static string TestAdapterPathValueRequiredWhenStrategyXIsUsed { get; }
    internal static string TestCaseFilterArgumentHelp { get; }
    internal static string TestCaseFilterValueRequired { get; }
    internal static string TestRunAborted { get; }
    internal static string TestRunAbortedWithError { get; }
    internal static string TestRunCanceled { get; }
    internal static string TestRunFailed { get; }
    internal static string TestRunSuccessful { get; }
    internal static string TestRunSummary { get; }
    internal static string TestRunSummaryAssemblyAndFramework { get; }
    internal static string TestRunSummaryFailedTests { get; }
    internal static string TestRunSummaryForCanceledOrAbortedRun { get; }
    internal static string TestRunSummaryPassedTests { get; }
    internal static string TestRunSummarySkippedTests { get; }
    internal static string TestRunSummaryTotalTests { get; }
    internal static string TestSettingsFrameworkMismatch { get; }
    internal static string TestSourceFileNotFound { get; }
    internal static string TestSourcesDiscovered { get; }
    internal static string TimeElapsed { get; }
    internal static string UriOfDefaultExecutor { get; }
    internal static string UseVsixExtensionsDeprecation { get; }
    internal static string UseVsixExtensionsHelp { get; }
    internal static string UseVsixExtensionsValueRequired { get; }
    internal static string VSTestDeprecationMessage { get; }
    internal static string VstestDiagLogOutputPath { get; }
    internal static string WarningEmulatedOnArm64 { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddnlInfoMessagesBanner();
    internal static string get_AppContainerTestPrerequisiteFail();
    internal static string get_AppxBundleSourceWarning();
    internal static string get_AssemblyPathInvalid();
    internal static string get_AttachmentOutputFormat();
    internal static string get_AttachmentsBanner();
    internal static string get_AvailableDiscoverersHeaderMessage();
    internal static string get_AvailableExecutorsHeaderMessage();
    internal static string get_AvailableExtensionFormat();
    internal static string get_AvailableExtensionsMetadataFormat();
    internal static string get_AvailableLoggersHeaderMessage();
    internal static string get_AvailableSettingsProvidersHeaderMessage();
    internal static string get_AvailableTestsFormat();
    internal static string get_BatchSizeRequired();
    internal static string get_BlameCollectDumpNotSupportedForPlatform();
    internal static string get_BlameCollectDumpTestTimeoutNotSupportedForPlatform();
    internal static string get_BlameIncorrectOption();
    internal static string get_BuildBasePathArgumentHelp();
    internal static string get_BuildBasePathNotFound();
    internal static string get_CannotBeNullOrEmpty();
    internal static string get_CLIRunSettingsArgumentHelp();
    internal static string get_CollectArgumentHelp();
    internal static string get_CollectWithTestSettingErrorMessage();
    internal static string get_CommandLineError();
    internal static string get_CommandLineInformational();
    internal static string get_CommandLineWarning();
    internal static string get_CommaSeparatedFormat();
    internal static string get_ConfigurationArgumentHelp();
    internal static string get_DataCollectorFriendlyNameInvalid();
    internal static string get_Days();
    internal static string get_DbgTrcMessagesBanner();
    internal static string get_DesignModeClientTimeoutError();
    internal static string get_DisableAutoFakesUsage();
    internal static string get_DisablingCodeCoverageInAppContainerTestExecution();
    internal static string get_DisablingCodeCoverageInPhoneAppContainerTestExecution();
    internal static string get_DisablingDataCollectionInAppContainerTestExecution();
    internal static string get_DisablingDataCollectionInPhoneAppContainerTestExecution();
    internal static string get_DisablingDCOnExceptionWhileParsingDCInfo();
    internal static string get_DiscoveryFailed();
    internal static string get_DuplicateArgumentError();
    internal static string get_EnableBlameUsage();
    internal static string get_EnableCodeCoverageArgumentProcessorHelp();
    internal static string get_EnableDiagUsage();
    internal static string get_EnableLoggerArgumentsInNetCore();
    internal static string get_EnableLoggersArgumentHelp();
    internal static string get_EnvironmentArgumentHelp();
    internal static string get_EnvironmentVariableXIsOverriden();
    internal static string get_ErrorHostingCommunicationChannel();
    internal static string get_ErrorMessageBanner();
    internal static string get_Examples();
    internal static string get_ExceptionFromExtension();
    internal static string get_ExecutionTimeFormatString();
    internal static string get_ExtensionUriFormat();
    internal static string get_FailedTestIndicator();
    internal static string get_FileNotFound();
    internal static string get_Framework35NotSupported();
    internal static string get_FrameworkArgumentHelp();
    internal static string get_FrameworkVersionRequired();
    internal static string get_HelpArgumentHelp();
    internal static string get_HelpArgumentsText();
    internal static string get_HelpDescriptionText();
    internal static string get_HelpOptionsText();
    internal static string get_HelpUsageText();
    internal static string get_Hours();
    internal static string get_InIsolationDeprecated();
    internal static string get_InIsolationHelp();
    internal static string get_InvalidAeDebuggerArgument();
    internal static string get_InvalidArgument();
    internal static string get_InvalidBatchSize();
    internal static string get_InvalidBlameArgument();
    internal static string get_InvalidConfiguration();
    internal static string get_InvalidDiagArgument();
    internal static string get_InvalidDiagFilePath();
    internal static string get_InvalidEnableCodeCoverageCommand();
    internal static string get_InvalidFrameworkVersion();
    internal static string get_InvalidInIsolationCommand();
    internal static string get_InvalidLoggerArgument();
    internal static string get_InvalidParallelCommand();
    internal static string get_InvalidParentProcessIdArgument();
    internal static string get_InvalidPlatformType();
    internal static string get_InvalidPortArgument();
    internal static string get_InvalidProcDumpDirectoryPath();
    internal static string get_InvalidProcDumpToolDirectoryPath();
    internal static string get_InvalidResultsDirectoryPathCommand();
    internal static string get_InvalidTestAdapterPathCommand();
    internal static string get_InvalidTestCaseFilterValueForSpecificTests();
    internal static string get_InvalidTestRunParameterArgument();
    internal static string get_InvalidTestSessionCorrelationId();
    internal static string get_InvalidUseVsixExtensionsCommand();
    internal static string get_ListDiscoverersHelp();
    internal static string get_ListExecutorsHelp();
    internal static string get_ListLoggersHelp();
    internal static string get_ListSettingsProvidersHelp();
    internal static string get_ListTestsHeaderMessage();
    internal static string get_ListTestsHelp();
    internal static string get_LoggerFileIsReadOnly();
    internal static string get_LoggerFriendlyNameFormat();
    internal static string get_LoggerNotFound();
    internal static string get_LoggerUriFormat();
    internal static string get_LoggerUriInvalid();
    internal static string get_MalformedRunSettingsKey();
    internal static string get_MicrosoftCommandLineTitle();
    internal static string get_Minutes();
    internal static string get_MissingTestSourceFile();
    internal static string get_NoAdaptersFoundInTestAdapterPath();
    internal static string get_NoArgumentProcessorFound();
    internal static string get_NoArgumentsProvided();
    internal static string get_NonDefaultFrameworkAndOrArchDetected();
    internal static string get_None();
    internal static string get_NoTestEntryPoint();
    internal static string get_NoTestsAvailableAfterFiltering();
    internal static string get_NoTestsAvailableInSources();
    internal static string get_NotRunTestIndicator();
    internal static string get_OpenResponseFileError();
    internal static string get_OutputArgumentHelp();
    internal static string get_OutputPathNotFound();
    internal static string get_ParallelArgumentProcessorHelp();
    internal static string get_ParentProcessIdArgumentHelp();
    internal static string get_PassedTestIndicator();
    internal static string get_PhoneAppContainerTestPrerequisiteFail();
    internal static string get_PhoneNoTestEntryPoint();
    internal static string get_PlatformArgumentHelp();
    internal static string get_PlatformTypeRequired();
    internal static string get_PortArgumentHelp();
    internal static string get_PostmortemDebuggerNotSupportedForCurrentOS();
    internal static string get_ProcDumpDirectoryPathArgumenNotFound();
    internal static string get_ProcDumpFileNameNotFound();
    internal static string get_ProcDumpToolDirectoryPathArgumenNotFound();
    internal static string get_ProgressIndicatorString();
    internal static string get_ProjectPathNotFound();
    internal static string get_RequestHandlerConnectionTimedOut();
    internal static string get_ResponseFileArgumentHelp();
    internal static string get_ResultsDirectoryArgumentHelp();
    internal static string get_ResultsDirectoryValueRequired();
    internal static string get_RunSettingsArgumentHelp();
    internal static string get_RunSettingsFileNotFound();
    internal static string get_RunSettingsRequired();
    internal static string get_RunsettingsWithDCErrorMessage();
    internal static string get_RunSingleAppContainerSource();
    internal static string get_RunSpecificTestsHelp();
    internal static string get_RunTestsArgumentHelp();
    internal static string get_SearchStringDelimiter();
    internal static string get_Seconds();
    internal static string get_SettingFormat();
    internal static string get_SkippedTestIndicator();
    internal static string get_SomeTestsUnavailableAfterFiltering();
    internal static string get_SpecificTestsRequired();
    internal static string get_StacktraceBanner();
    internal static string get_StartingDiscovery();
    internal static string get_StartingExecution();
    internal static string get_StartTestSessionTimedOut();
    internal static string get_StdErrMessagesBanner();
    internal static string get_StdOutMessagesBanner();
    internal static string get_StopTestSessionTimedOut();
    internal static string get_StringFormatToJoinTwoStrings();
    internal static string get_SuggestTestAdapterPathIfNoTestsIsFound();
    internal static string get_SupportedFileTypesIndicator();
    internal static string get_SupportedFileWithoutSeparator();
    internal static string get_SupportedFileWithSeparator();
    internal static string get_SwitchToIsolationInAppContainerMode();
    internal static string get_SwitchToIsolationInMultiTargetingMode();
    internal static string get_SwitchToIsolationInPhoneAppContainerMode();
    internal static string get_SwitchToNoIsolation();
    internal static string get_TestAdapterLoadingStrategyHelp();
    internal static string get_TestAdapterLoadingStrategyValueInvalid();
    internal static string get_TestAdapterLoadingStrategyValueInvalidRecursive();
    internal static string get_TestAdapterPathDoesNotExist();
    internal static string get_TestAdapterPathHelp();
    internal static string get_TestAdapterPathValueRequired();
    internal static string get_TestAdapterPathValueRequiredWhenStrategyXIsUsed();
    internal static string get_TestCaseFilterArgumentHelp();
    internal static string get_TestCaseFilterValueRequired();
    internal static string get_TestRunAborted();
    internal static string get_TestRunAbortedWithError();
    internal static string get_TestRunCanceled();
    internal static string get_TestRunFailed();
    internal static string get_TestRunSuccessful();
    internal static string get_TestRunSummary();
    internal static string get_TestRunSummaryAssemblyAndFramework();
    internal static string get_TestRunSummaryFailedTests();
    internal static string get_TestRunSummaryForCanceledOrAbortedRun();
    internal static string get_TestRunSummaryPassedTests();
    internal static string get_TestRunSummarySkippedTests();
    internal static string get_TestRunSummaryTotalTests();
    internal static string get_TestSettingsFrameworkMismatch();
    internal static string get_TestSourceFileNotFound();
    internal static string get_TestSourcesDiscovered();
    internal static string get_TimeElapsed();
    internal static string get_UriOfDefaultExecutor();
    internal static string get_UseVsixExtensionsDeprecation();
    internal static string get_UseVsixExtensionsHelp();
    internal static string get_UseVsixExtensionsValueRequired();
    internal static string get_VSTestDeprecationMessage();
    internal static string get_VstestDiagLogOutputPath();
    internal static string get_WarningEmulatedOnArm64();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.RunHandlerToEventsRegistrarAdapter : object {
    private ITestRunEventsHandler _handler;
    private EventHandler`1<TestRunMessageEventArgs> _handleLogMessage;
    private EventHandler`1<string> _handleRawMessage;
    private EventHandler`1<TestRunChangedEventArgs> _handleTestRunStatsChange;
    private EventHandler`1<TestRunCompleteEventArgs> _handleTestRunComplete;
    public RunHandlerToEventsRegistrarAdapter(ITestRunEventsHandler handler);
    public sealed virtual void LogWarning(string message);
    public sealed virtual void RegisterTestRunEvents(ITestRunRequest testRunRequest);
    public sealed virtual void UnregisterTestRunEvents(ITestRunRequest testRunRequest);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object _, TestRunMessageEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_2(object _, TestRunCompleteEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_3(object _, TestRunChangedEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.CommandLine.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.CommandLine.TestPlatformHelpers.KnownPlatformSourceFilter : object {
    private static HashSet`1<string> KnownPlatformSources;
    private static KnownPlatformSourceFilter();
    internal static List`1<string> FilterKnownPlatformSources(List`1<string> sources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.TestPlatformHelpers.TestRequestManager : object {
    [NullableAttribute("2")]
private static ITestRequestManager s_testRequestManagerInstance;
    private ITestPlatform _testPlatform;
    private ITestPlatformEventSource _testPlatformEventSource;
    private Task`1<IMetricsPublisher> _metricsPublisher;
    private object _syncObject;
    private bool _isDisposed;
    private bool _telemetryOptedIn;
    private CommandLineOptions _commandLineOptions;
    private TestRunResultAggregator _testRunResultAggregator;
    private InferHelper _inferHelper;
    private IProcessHelper _processHelper;
    private ITestRunAttachmentsProcessingManager _attachmentsProcessingManager;
    private IEnvironment _environment;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    [NullableAttribute("2")]
private ITestRunRequest _currentTestRunRequest;
    [NullableAttribute("2")]
private IDiscoveryRequest _currentDiscoveryRequest;
    [NullableAttribute("2")]
private CancellationTokenSource _currentAttachmentsProcessingCancellationTokenSource;
    public static ITestRequestManager Instance { get; }
    internal TestRequestManager(CommandLineOptions commandLineOptions, ITestPlatform testPlatform, TestRunResultAggregator testRunResultAggregator, ITestPlatformEventSource testPlatformEventSource, InferHelper inferHelper, Task`1<IMetricsPublisher> metricsPublisher, IProcessHelper processHelper, ITestRunAttachmentsProcessingManager attachmentsProcessingManager, IEnvironment environment, IEnvironmentVariableHelper environmentVariableHelper);
    public static ITestRequestManager get_Instance();
    public sealed virtual void InitializeExtensions(IEnumerable`1<string> pathToAdditionalExtensions, bool skipExtensionFilters);
    public sealed virtual void ResetOptions();
    public sealed virtual void DiscoverTests(DiscoveryRequestPayload discoveryPayload, ITestDiscoveryEventsRegistrar discoveryEventsRegistrar, ProtocolConfig protocolConfig);
    public sealed virtual void RunTests(TestRunRequestPayload testRunRequestPayload, ITestHostLauncher3 testHostLauncher, ITestRunEventsRegistrar testRunEventsRegistrar, ProtocolConfig protocolConfig);
    public sealed virtual void ProcessTestRunAttachments(TestRunAttachmentsProcessingPayload attachmentsProcessingPayload, ITestRunAttachmentsProcessingEventsHandler attachmentsProcessingEventsHandler, ProtocolConfig protocolConfig);
    public sealed virtual void StartTestSession(StartTestSessionPayload payload, ITestHostLauncher3 testHostLauncher, ITestSessionEventsHandler eventsHandler, ProtocolConfig protocolConfig);
    public sealed virtual void StopTestSession(StopTestSessionPayload payload, ITestSessionEventsHandler eventsHandler, ProtocolConfig protocolConfig);
    private static void LogTelemetryForLegacySettings(IRequestData requestData, string runsettings);
    public sealed virtual void CancelTestRun();
    public sealed virtual void CancelDiscovery();
    public sealed virtual void AbortTestRun();
    public sealed virtual void CancelTestRunAttachmentsProcessing();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private bool UpdateRunSettingsIfRequired(string runsettingsXml, IList`1<string> sources, IBaseTestEventsRegistrar registrar, bool isDiscovery, String& updatedRunSettingsXml, IDictionary`2& sourceToArchitectureMap, IDictionary`2& sourceToFrameworkMap);
    private string AddFakesConfigurationToRunsettings(IList`1<string> sources, string runsettings);
    private bool AddOrUpdateBuiltInLoggers(XmlDocument document, RunConfiguration runConfiguration, LoggerRunSettings loggerRunSettings);
    private static bool UpdateTargetDevice(XPathNavigator navigator, XmlDocument document);
    private bool UpdateCollectSourceInformation(XmlDocument document, RunConfiguration runConfiguration);
    private bool UpdateDesignMode(XmlDocument document, RunConfiguration runConfiguration);
    internal static bool AddOrUpdateBatchSize(XmlDocument document, RunConfiguration runConfiguration, bool isDiscovery);
    private static void CheckSourcesForCompatibility(Framework chosenFramework, Architecture chosenPlatform, Architecture defaultArchitecture, IDictionary`2<string, Architecture> sourcePlatforms, IDictionary`2<string, Framework> sourceFrameworks, IBaseTestEventsRegistrar registrar);
    private bool UpdatePlatform(XmlDocument document, XPathNavigator navigator, IList`1<string> sources, Architecture defaultArchitecture, Architecture& commonPlatform, IDictionary`2& sourceToPlatformMap);
    private bool UpdateFrameworkInRunSettingsIfRequired(XmlDocument document, XPathNavigator navigator, IList`1<string> sources, IBaseTestEventsRegistrar registrar, Framework& commonFramework, IDictionary`2& sourceToFrameworkMap);
    [NullableContextAttribute("2")]
private static void WriteWarningForNetFramework35IsUnsupported(IBaseTestEventsRegistrar registrar, Framework commonFramework);
    private static void AddConsoleLogger(XmlDocument document, LoggerRunSettings loggerRunSettings);
    private static bool UpdateConsoleLoggerIfExists(XmlDocument document, LoggerRunSettings loggerRunSettings);
    private static bool UpdateMSBuildLoggerIfExists(XmlDocument document, LoggerRunSettings loggerRunSettings);
    private void RunTests(IRequestData requestData, TestRunCriteria testRunCriteria, ITestRunEventsRegistrar testRunEventsRegistrar, TestPlatformOptions options, Dictionary`2<string, SourceDetail> sourceToSourceDetailMap);
    private bool IsFrameworkSetByRunSettings(XPathNavigator navigator, Framework& chosenFramework);
    private bool IsPlatformSetByRunSettings(XPathNavigator navigator, Architecture& chosenPlatform);
    private static void CollectMetrics(IRequestData requestData, RunConfiguration runConfiguration);
    private static bool IsTelemetryOptedIn();
    private void LogCommandsTelemetryPoints(IRequestData requestData);
    private IRequestData GetRequestData(ProtocolConfig protocolConfig);
    private static List`1<string> GetSources(TestRunRequestPayload testRunRequestPayload);
    [CompilerGeneratedAttribute]
private Architecture <UpdateRunSettingsIfRequired>g__GetDefaultArchitecture|35_0(RunConfiguration runConfiguration);
    [CompilerGeneratedAttribute]
internal static Architecture <UpdateRunSettingsIfRequired>g__TranslateToArchitecture|35_1(PlatformArchitecture targetArchitecture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLine.TestRunResultAggregator : object {
    [NullableAttribute("2")]
private static TestRunResultAggregator s_instance;
    [CompilerGeneratedAttribute]
private TestOutcome <Outcome>k__BackingField;
    public static TestRunResultAggregator Instance { get; }
    public TestOutcome Outcome { get; private set; }
    public static TestRunResultAggregator get_Instance();
    [CompilerGeneratedAttribute]
public TestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
private void set_Outcome(TestOutcome value);
    public void RegisterTestRunEvents(ITestRunRequest testRunRequest);
    public void UnregisterTestRunEvents(ITestRunRequest testRunRequest);
    public void MarkTestRunFailed();
    public void Reset();
    private void TestRunCompletionHandler(object sender, TestRunCompleteEventArgs e);
    private void TestRunMessageHandler(object sender, TestRunMessageEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CommandLine.TestSourceException : Exception {
    public TestSourceException(string message);
    public TestSourceException(string message, Exception innerException);
}
internal static class Microsoft.VisualStudio.TestPlatform.CommandLine.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
public static class Microsoft.VisualStudio.TestPlatform.CommandLineUtilities.GenerateFakesUtilities : object {
    [NullableContextAttribute("1")]
internal static string GenerateFakesSettings(CommandLineOptions commandLineOptions, IEnumerable`1<string> sources, string runSettingsXml);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.CommandLineUtilities.InferHelper : object {
    private IAssemblyMetadataProvider _assemblyMetadataProvider;
    internal InferHelper(IAssemblyMetadataProvider assemblyMetadataProvider);
    public Architecture AutoDetectArchitecture(IList`1<string> sources, Architecture defaultArchitecture, IDictionary`2& sourceToPlatformMap);
    public Framework AutoDetectFramework(IList`1<string> sources, IDictionary`2& sourceToFrameworkMap);
    private Framework DetermineFramework(IEnumerable`1<string> sources, IDictionary`2& sourceToFrameworkMap, Boolean& conflictInFxIdentifier);
    [NullableContextAttribute("2")]
private static bool IsDllOrExe(string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.Execution.DebuggerBreakpoint : object {
    internal static void AttachVisualStudioDebugger(string environmentVariable);
    private static bool AttachVs(Process process, Nullable`1<int> vsPid);
    [NullableContextAttribute("2")]
private static string FindAttachVs();
    private static string FindOnPath(string exeName);
    internal static void WaitForDebugger(string environmentVariable);
    internal static void WaitForNativeDebugger(string environmentVariable);
    private static void Break();
    private static bool ShouldNotBreak();
    private static void BreakNative();
    internal static bool IsDebuggerPresent();
    internal static void DebugBreak();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Execution.ProcDumpExecutableHelper : object {
    private static string ProcdumpUnixProcess;
    private IProcessHelper _processHelper;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    public ProcDumpExecutableHelper(IProcessHelper processHelper, IFileHelper fileHelper, IEnvironment environment, IEnvironmentVariableHelper environmentVariableHelper);
    public static string ProcDumpFileName(PlatformArchitecture architecture);
    public bool TryGetProcDumpExecutable(String& path);
    public bool TryGetProcDumpExecutable(int processId, String& path);
    public bool TryGetProcDumpExecutable(PlatformArchitecture architecture, String& path);
    private bool TryGetExecutablePath(string executable, String& executablePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Execution.UiLanguageOverride : object {
    private static string DOTNET_CLI_UI_LANGUAGE;
    private static string VSLANG;
    private static string PreferredUILang;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    private Action`1<CultureInfo> _setDefaultThreadCurrentUICulture;
    public UiLanguageOverride(IEnvironmentVariableHelper environmentVariableHelper, Action`1<CultureInfo> setDefaultThreadCurrentUICulture);
    internal void SetCultureSpecifiedByUser();
    private static void ApplyOverrideToCurrentProcess(CultureInfo language, Action`1<CultureInfo> setDefaultThreadCurrentUICulture);
    private static CultureInfo GetOverriddenUiLanguage(IEnvironmentVariableHelper environmentVariableHelper);
    private static void FlowOverrideToChildProcesses(CultureInfo language, IEnvironmentVariableHelper environmentVariableHelper);
    private static void SetIfNotAlreadySet(string environmentVariableName, string value, IEnvironmentVariableHelper environmentVariableHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.Execution.WellKnownDebugEnvironmentVariables : object {
    public static string VSTEST_BLAMEDATACOLLECTOR_DEBUG;
    public static string VSTEST_DATACOLLECTOR_DEBUG;
    public static string VSTEST_HOST_DEBUG;
    public static string VSTEST_RUNNER_DEBUG;
    public static string VSTEST_DATACOLLECTOR_DEBUG_ATTACHVS;
    public static string VSTEST_HOST_DEBUG_ATTACHVS;
    public static string VSTEST_RUNNER_DEBUG_ATTACHVS;
    public static string VSTEST_HOST_NATIVE_DEBUG;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class vstest.console.Internal.FilePatternParser : object {
    private Matcher _matcher;
    private IFileHelper _fileHelper;
    private Char[] _wildCardCharacters;
    internal FilePatternParser(Matcher matcher, IFileHelper fileHelper);
    public List`1<string> GetMatchingFiles(string filePattern);
    private Tuple`2<string, string> SplitFilePatternOnWildCard(string filePattern);
}
