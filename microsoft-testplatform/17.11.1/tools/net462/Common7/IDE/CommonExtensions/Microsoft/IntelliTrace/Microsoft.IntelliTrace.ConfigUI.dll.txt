internal class Microsoft.VisualStudio.TraceConfigUI.AdvancedSettingsControl : ScrollViewer {
    private TraceConfigAdvancedSettings m_settings;
    private FolderBrowserDialog m_folderBrowserDialog;
    private Int64[] m_arrayOfLogSizes;
    private String[] m_arrayOfLogSizeStrings;
    internal AdvancedSettingsControl AdvancedSettingsControlRoot;
    internal CheckBox m_saveRecordingsCheckbox;
    internal TextBox m_logLocationTextBox;
    internal Button m_openLogPathButton;
    internal Label m_logSizeLabel;
    internal ComboBox m_logSizeComboBox;
    internal CheckBox m_enableTfsSearchCheckBox;
    internal CheckBox m_limitEvents;
    internal GroupBox m_callsSettingGroup;
    internal CheckBox m_navGutterCheckBox;
    private bool _contentLoaded;
    internal AdvancedSettingsControl(TraceConfigAdvancedSettings settings);
    private void m_openLogPathButton_Click(object sender, RoutedEventArgs e);
    private void m_saveRecordingsCheckbox_Click(object sender, RoutedEventArgs e);
    public void ResetToTheseSettings(TraceConfigAdvancedSettings settings);
    internal void ConfigureForTest();
    private void InitializeUI();
    private int ConvertSizeToComboBoxIndex(long maxLogSizeInMB);
    internal bool ValidateSettings(String& errorMessage);
    internal static bool ValidateAutoSavePath(string path, String& errorMessage);
    internal void CancelChanges();
    internal TraceConfigAdvancedSettings ApplyChanges();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceConfigUI.ConfigEditorLayoutManager : object {
    private FrameworkElement _rootElement;
    private Panel _panel;
    public Panel RootPanel { get; }
    public ConfigEditorLayoutManager(ElementHost host, FrameworkElement rootElement);
    private void PanelSizeChanged(object sender, EventArgs e);
    public Panel get_RootPanel();
}
internal class Microsoft.VisualStudio.TraceConfigUI.DiagnosticEventsControl : UserControl {
    private TraceConfigDiagnosticEventsSettings m_defaultSettings;
    private TraceConfigDiagnosticEventsSettings m_settings;
    private TraceConfigDiagnosticEventsSettings m_uiSettings;
    private List`1<DiagnosticEventCategoryItem> m_categories;
    internal DiagnosticEventsControl DiagnosticEventsControlRoot;
    internal Label m_diagnosticEventsLabel;
    internal AccessibleTreeView m_tree;
    internal Label m_diagnosticEventsInfoLabel;
    internal Button m_restoreButton;
    private bool _contentLoaded;
    public DiagnosticEventsControl(TraceConfigDiagnosticEventsSettings settings, TraceConfigDiagnosticEventsSettings defaultSettings);
    private void RestoreButtonClick(object sender, RoutedEventArgs e);
    public void ResetToTheseSettings(TraceConfigDiagnosticEventsSettings settings);
    private void m_tree_KeyUp(object sender, KeyEventArgs e);
    private void InitializeUI();
    public bool ApplyChanges(TraceConfigDiagnosticEventsSettings& settings);
    public void CancelChanges();
    private void CheckBox_Item_Toggled(object sender, RoutedEventArgs e);
    private void RaiseToggleStateAutomationEvent(TreeViewItem treeViewItem, ToggleState previousState, ToggleState newState);
    private void CheckBox_Item_Click(object sender, RoutedEventArgs e);
    private TreeViewItem GetTreeViewItemFromDiagnosticItem(object diagnosticItem);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceConfigUI.ExclusionListAddDialog : Window {
    [CompilerGeneratedAttribute]
private WpfDialogAssistant <DialogAssistant>k__BackingField;
    internal ExclusionListAddDialog ExclusionListAddDialogRoot;
    internal Label m_descriptionLabel;
    internal TextBox m_filterText;
    internal Label m_sampleLabel;
    internal Button m_okButton;
    internal Button m_cancelButton;
    private bool _contentLoaded;
    internal WpfDialogAssistant DialogAssistant { get; private set; }
    public ExclusionListAddDialog(TraceConfigDialogStyle traceConfigDialogStyle);
    public ExclusionListAddDialog(IntPtr parentHandle, TraceConfigDialogStyle traceConfigDialogStyle);
    public ExclusionListAddDialog(Window parentWindow, TraceConfigDialogStyle traceConfigDialogStyle);
    private void ExclusionListAddDialogLoaded(object sender, RoutedEventArgs e);
    private void ok_Click(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
internal WpfDialogAssistant get_DialogAssistant();
    [CompilerGeneratedAttribute]
private void set_DialogAssistant(WpfDialogAssistant value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceConfigUI.ExclusionListControl : UserControl {
    private TraceConfigExclusionListSettings m_settings;
    private TraceConfigExclusionListSettings m_defaultSettings;
    private TraceConfigDialogStyle m_traceConfigDialogStyle;
    internal ExclusionListControl ExclusionListControlRoot;
    internal AutoCheckRadioButton m_exclusionRadioButton;
    internal AutoCheckRadioButton m_inclusionRadioButton;
    internal ListView m_listView;
    internal Button m_addButton;
    internal Button m_removeButton;
    internal Button m_restoreButton;
    private bool _contentLoaded;
    unknown string ExclusionRadioButtonText {internal set; }
    unknown string InclusionRadioButtonText {internal set; }
    internal ExclusionListControl(TraceConfigExclusionListSettings settings);
    internal ExclusionListControl(TraceConfigExclusionListSettings settings, TraceConfigExclusionListSettings defaultSettings, TraceConfigDialogStyle traceConfigDialogStyle);
    internal void set_ExclusionRadioButtonText(string value);
    internal void set_InclusionRadioButtonText(string value);
    private void RestoreButtonClick(object sender, RoutedEventArgs e);
    public void ResetToTheseSettings(TraceConfigExclusionListSettings settings);
    public void UpdateUI(TraceConfigExclusionListSettings settings);
    private string FormatString(string name);
    private string UnformatString(string formattedString);
    private void InitializeUI();
    internal TraceConfigExclusionListSettings ApplyChanges();
    internal void CancelChanges();
    private void m_removeButton_Click(object sender, RoutedEventArgs e);
    private void ListViewSelectionChanged(object sender, SelectionChangedEventArgs e);
    private void m_addButton_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceConfigUI.GeneralSettingsControl : ScrollViewer {
    private Int32[] m_arrayOfMaxSnapshotOnExceptions;
    private TraceConfigGeneralSettings m_configSettings;
    private bool _showSnapshotOption;
    private GeneralSettingsViewModel m_generalSettingsViewModel;
    private bool _isConfigureForTest;
    internal GeneralSettingsControl GeneralSettingsControlRoot;
    internal CheckBox m_enableProteusCheckBox;
    internal AutoCheckRadioButton m_lowRadioButton;
    internal Label m_lowLabel;
    internal AccessText m_lowLabelText;
    internal AutoCheckRadioButton m_highRadioButton;
    internal Label m_highLabel;
    internal AccessText m_highLabelText;
    internal AutoCheckRadioButton m_snapshotRadioButton;
    internal AccessText m_snapshotLabelText;
    internal AccessText m_unsupportedSnapshotLabel;
    internal CheckBox m_enableSnapshotOnExceptionCheckBox;
    internal ComboBox m_maxSnapshotOnExceptionComboBox;
    internal CheckBox m_aspnetCollectCheckBox;
    internal Image m_optionChangedWarningImage;
    internal Label m_optionChangedWarningLabel;
    internal LiveTextBlock m_optionChangedWarningText;
    internal Image m_optionWarning1Image;
    internal Label m_optionWarning1Label;
    internal LiveTextBlock m_optionWarning1Text;
    private bool _contentLoaded;
    internal GeneralSettingsControl(TraceConfigGeneralSettings settings, bool showSnapshotOption, bool isSnapshotSupported);
    public void ResetToTheseSettings(TraceConfigGeneralSettings settings);
    internal void ConfigureForTest();
    private static void DisplayWarning(Image warningImage, Label warningLabel, LiveTextBlock warningTextControl, string message);
    private static void HideWarning(Image warningImage, Label warningLabel, LiveTextBlock warningTextControl);
    private void InitializeViewModelAndUI();
    internal TraceConfigGeneralSettings ApplyChanges();
    internal void CancelChanges();
    internal bool ValidateSettings(String& errorMessage);
    private void NumericInputFilter(object sender, TextCompositionEventArgs e);
    private void SpaceInputFilter(object sender, KeyEventArgs e);
    private void OnComboBoxValueChanged(object sender, TextChangedEventArgs e);
    private void OnOptionChanged(object sender, RoutedEventArgs e);
    private void OnGeneralSettingsChanged();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceConfigUI.NativeMethods : object {
    internal static int DLGC_WANTCHARS;
    internal static int WM_GETDLGCODE;
    public static int WS_MINIMIZEBOX;
    public static int WS_MAXIMIZEBOX;
    public static int WS_BORDER;
    public static int GWL_STYLE;
    public static int GWL_EXSTYLE;
    public static int WS_EX_DLGMODALFRAME;
    public static int WS_EX_CONTROLPARENT;
    public static int WS_POPUP;
    public static int WS_CHILD;
    public static int WM_SETICON;
    public static int ICON_BIG;
    public static int ICON_SMALL;
    internal static void OnSourceChanged(object sender, SourceChangedEventArgs e);
    private static IntPtr ChildHwndSourceHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    public static bool GetWindowRect(IntPtr hwnd, RECT& rect);
    public static int GetWindowLong(IntPtr hWnd, int nIndex);
    public static int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
    public static IntPtr GetParent(IntPtr window);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    public static bool NativeMethodExists(string libraryName, string methodName);
    private static UIntPtr LoadLibrary(string lpFileName);
    private static UIntPtr GetProcAddress(UIntPtr hModule, string lpProcName);
    private static bool FreeLibrary(UIntPtr hModule);
}
[DataCollectorConfigurationEditorTypeUriAttribute("configurationeditor://Microsoft/TestImpact/1.0")]
public class Microsoft.VisualStudio.TraceConfigUI.TestImpactCollectorConfigEditor : UserControl {
    private ExclusionListControl _excludeModules;
    private ExclusionListControl _excludeProcesses;
    private CheckBox _aspnetCollectCheckBox;
    private ConfigEditorLayoutManager _layoutManager;
    [CompilerGeneratedAttribute]
private bool <IsRemoteRole>k__BackingField;
    private DataCollectorSettings _settings;
    private XmlNode _workerProcessListNode;
    private XmlNode _maximumTestCountNode;
    private IContainer components;
    public string Caption { get; }
    public string Description { get; }
    private bool IsRemoteRole { get; private set; }
    public string get_Caption();
    public string get_Description();
    [CompilerGeneratedAttribute]
private bool get_IsRemoteRole();
    [CompilerGeneratedAttribute]
private void set_IsRemoteRole(bool value);
    public sealed virtual void Initialize(IServiceProvider serviceProvider, DataCollectorSettings settings);
    public sealed virtual void ResetToAgentDefaults();
    public sealed virtual DataCollectorSettings SaveData();
    public sealed virtual bool VerifyData();
    private void PopulateUI(XmlElement settings);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
[DataCollectorConfigurationEditorTypeUriAttribute("configurationeditor://Microsoft/TraceDebugger/1.0")]
public class Microsoft.VisualStudio.TraceConfigUI.TraceCollectorConfigEditor : UserControl {
    private DataCollectorSettings m_dataCollectorSettings;
    private GeneralSettingsControl m_generalSettingsControl;
    private ExclusionListControl m_moduleListControl;
    private ExclusionListControl m_processListControl;
    private DiagnosticEventsControl m_diagnosticEventsControl;
    private AdvancedSettingsControl m_advancedSettingsControl;
    private TraceConfigGeneralSettings m_generalSettings;
    private TraceConfigExclusionListSettings m_moduleSettings;
    private TraceConfigExclusionListSettings m_processSettings;
    private TraceConfigDiagnosticEventsSettings m_diagnosticEventsSettings;
    private TraceConfigAdvancedSettings m_advancedSettings;
    private _CollectionPlan m_cp;
    private ConfigEditorLayoutManager _layoutManager;
    [CompilerGeneratedAttribute]
private bool <IsRemoteRole>k__BackingField;
    private IContainer components;
    public string Caption { get; }
    public string Description { get; }
    private bool IsRemoteRole { get; private set; }
    public string get_Caption();
    public string get_Description();
    [CompilerGeneratedAttribute]
private bool get_IsRemoteRole();
    [CompilerGeneratedAttribute]
private void set_IsRemoteRole(bool value);
    public sealed virtual void Initialize(IServiceProvider serviceProvider, DataCollectorSettings settings);
    public sealed virtual void ResetToAgentDefaults();
    public sealed virtual DataCollectorSettings SaveData();
    public sealed virtual bool VerifyData();
    private void InitializeSettings(bool bUseDefault);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class Microsoft.VisualStudio.TraceConfigUI.TraceConfigAdvancedSettings : object {
    private long m_maxSizeOfRecordingInMB;
    private long m_maxSizeOfRecordingInBlocks;
    private static long s_logBlockSize;
    private static long s_sizeOfMB;
    [CompilerGeneratedAttribute]
private bool <SaveRecordings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RecordingPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstrumentSmallFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayNavigationGutter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTfsSymbolSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowExternalEvents>k__BackingField;
    internal bool SaveRecordings { get; internal set; }
    internal string RecordingPath { get; internal set; }
    internal long MaxSizeOfRecordingInMB { get; internal set; }
    internal long MaxSizeOfRecordingInBlocks { get; internal set; }
    internal bool InstrumentSmallFunctions { get; internal set; }
    internal bool DisplayNavigationGutter { get; internal set; }
    internal bool EnableTfsSymbolSearch { get; internal set; }
    internal bool LimitEvents { get; internal set; }
    internal bool ShowExternalEvents { get; internal set; }
    internal TraceConfigAdvancedSettings(_CollectionPlan config);
    private static TraceConfigAdvancedSettings();
    [CompilerGeneratedAttribute]
internal bool get_SaveRecordings();
    [CompilerGeneratedAttribute]
internal void set_SaveRecordings(bool value);
    [CompilerGeneratedAttribute]
internal string get_RecordingPath();
    [CompilerGeneratedAttribute]
internal void set_RecordingPath(string value);
    internal long get_MaxSizeOfRecordingInMB();
    internal void set_MaxSizeOfRecordingInMB(long value);
    internal long get_MaxSizeOfRecordingInBlocks();
    internal void set_MaxSizeOfRecordingInBlocks(long value);
    [CompilerGeneratedAttribute]
internal bool get_InstrumentSmallFunctions();
    [CompilerGeneratedAttribute]
internal void set_InstrumentSmallFunctions(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DisplayNavigationGutter();
    [CompilerGeneratedAttribute]
internal void set_DisplayNavigationGutter(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableTfsSymbolSearch();
    [CompilerGeneratedAttribute]
internal void set_EnableTfsSymbolSearch(bool value);
    [CompilerGeneratedAttribute]
internal bool get_LimitEvents();
    [CompilerGeneratedAttribute]
internal void set_LimitEvents(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShowExternalEvents();
    [CompilerGeneratedAttribute]
internal void set_ShowExternalEvents(bool value);
    internal static long ConvertBlocksToMB(long maxLogSizeInBlocks);
    internal static long ConvertMBToBlocks(long maxLogSizeInMB);
    internal TraceConfigAdvancedSettings Clone();
    private sealed virtual override object System.ICloneable.Clone();
}
internal class Microsoft.VisualStudio.TraceConfigUI.TraceConfigDiagnosticEventsSettings : object {
    private _CollectionPlan m_collectionPlan;
    public _HiddenTracePointProvider NotifyPoints { get; }
    public TraceConfigDiagnosticEventsSettings(_CollectionPlan config);
    public _HiddenTracePointProvider get_NotifyPoints();
    public TraceConfigDiagnosticEventsSettings Clone();
}
internal class Microsoft.VisualStudio.TraceConfigUI.TraceConfigDialogStyle : object {
    [CompilerGeneratedAttribute]
private SolidColorBrush <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private SolidColorBrush <ForegroundColor>k__BackingField;
    public SolidColorBrush BackgroundColor { get; internal set; }
    public SolidColorBrush ForegroundColor { get; internal set; }
    [CompilerGeneratedAttribute]
public SolidColorBrush get_BackgroundColor();
    [CompilerGeneratedAttribute]
internal void set_BackgroundColor(SolidColorBrush value);
    [CompilerGeneratedAttribute]
public SolidColorBrush get_ForegroundColor();
    [CompilerGeneratedAttribute]
internal void set_ForegroundColor(SolidColorBrush value);
}
internal class Microsoft.VisualStudio.TraceConfigUI.TraceConfigExclusionListSettings : object {
    private List`1<string> m_list;
    [CompilerGeneratedAttribute]
private bool <IsExclusionList>k__BackingField;
    public bool IsExclusionList { get; public set; }
    public List`1<string> List { get; }
    public TraceConfigExclusionListSettings(_NameList nameList);
    [CompilerGeneratedAttribute]
public bool get_IsExclusionList();
    [CompilerGeneratedAttribute]
public void set_IsExclusionList(bool value);
    public List`1<string> get_List();
    public TraceConfigExclusionListSettings Clone();
}
internal class Microsoft.VisualStudio.TraceConfigUI.TraceConfigGeneralSettings : object {
    [CompilerGeneratedAttribute]
private bool <ProteusEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstrumentationEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SnapshotEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SnapshotOnExceptionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxSnapshotOnException>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SnapshotPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectFromASPNet>k__BackingField;
    internal bool ProteusEnabled { get; internal set; }
    internal bool InstrumentationEnabled { get; internal set; }
    internal bool SnapshotEnabled { get; internal set; }
    internal bool SnapshotOnExceptionEnabled { get; internal set; }
    internal UInt32 MaxSnapshotOnException { get; internal set; }
    internal UInt32 SnapshotPrompt { get; internal set; }
    internal bool CollectFromASPNet { get; internal set; }
    private TraceConfigGeneralSettings(TraceConfigGeneralSettings other);
    internal TraceConfigGeneralSettings(_CollectionPlan config, bool isRemoteRole);
    [CompilerGeneratedAttribute]
internal bool get_ProteusEnabled();
    [CompilerGeneratedAttribute]
internal void set_ProteusEnabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_InstrumentationEnabled();
    [CompilerGeneratedAttribute]
internal void set_InstrumentationEnabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SnapshotEnabled();
    [CompilerGeneratedAttribute]
internal void set_SnapshotEnabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SnapshotOnExceptionEnabled();
    [CompilerGeneratedAttribute]
internal void set_SnapshotOnExceptionEnabled(bool value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MaxSnapshotOnException();
    [CompilerGeneratedAttribute]
internal void set_MaxSnapshotOnException(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_SnapshotPrompt();
    [CompilerGeneratedAttribute]
internal void set_SnapshotPrompt(UInt32 value);
    [CompilerGeneratedAttribute]
internal bool get_CollectFromASPNet();
    [CompilerGeneratedAttribute]
internal void set_CollectFromASPNet(bool value);
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TraceConfigUI.TraceConfigProcessSettings : object {
    private List`1<string> m_processList;
    [CompilerGeneratedAttribute]
private bool <IsProcessExclusionList>k__BackingField;
    internal bool IsProcessExclusionList { get; internal set; }
    internal List`1<string> ProcessList { get; }
    internal TraceConfigProcessSettings(_CollectionPlan config);
    [CompilerGeneratedAttribute]
internal bool get_IsProcessExclusionList();
    [CompilerGeneratedAttribute]
internal void set_IsProcessExclusionList(bool value);
    internal List`1<string> get_ProcessList();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TraceConfigUI.TraceConfigUIResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string Advanced { get; }
    public static string ASPNetCollectCheckboxLabel { get; }
    public static string ASPNetCollectionMoreInformation { get; }
    public static string CancelButtonText { get; }
    public static string CollectSteppingEventDataLabel { get; }
    public static string CollectSteppingEventsLabel { get; }
    public static string DiagnosticEventsControlInfo { get; }
    public static string DiagnosticEventsControlLabel { get; }
    public static string EnableProteus { get; }
    public static string ErrorInvalidLogPath { get; }
    public static string ErrorInvalidLogPathTitle { get; }
    public static string ErrorInvalidMaxSnapshotOnException { get; }
    public static string ErrorNetworkLogPath { get; }
    public static string ErrorUnauthorizedLogPath { get; }
    public static string ExceptionSnapshotLabel { get; }
    public static string ExclusionListAddButtonText { get; }
    public static string ExclusionListAddDialogAddButtonText { get; }
    public static string ExclusionListAddDialogDescription { get; }
    public static string ExclusionListAddDialogSampleText { get; }
    public static string ExclusionListAddDialogTitle { get; }
    public static string ExclusionListCancelButtonText { get; }
    public static string ExclusionListRemoveButtonText { get; }
    public static string FunctionLevelTracingDisabled { get; }
    public static string FunctionLevelTracingDisableEnCWarning { get; }
    public static string FunctionLevelTracingSetting { get; }
    public static string FunctionParameterSettings { get; }
    public static string General { get; }
    public static string GeneralDebugOnlyExplanation { get; }
    public static string HighSettingLabel { get; }
    public static string IndependentEvents_RootNode { get; }
    public static string IndependentEventsSettings { get; }
    public static string LimitEvents { get; }
    public static string LogFileGroupHeader { get; }
    public static string LogRetentionSettings { get; }
    public static string LogSize_100MB { get; }
    public static string LogSize_10GB { get; }
    public static string LogSize_1GB { get; }
    public static string LogSize_20GB { get; }
    public static string LogSize_250MB { get; }
    public static string LogSize_2GB { get; }
    public static string LogSize_500MB { get; }
    public static string LogSize_5GB { get; }
    public static string LogSize_None { get; }
    public static string LogSizeLabel { get; }
    public static string LowSetting { get; }
    public static string LowSettingLabel { get; }
    public static string MaxSnapshotOnException { get; }
    public static string ModuleListExcludeButtonText { get; }
    public static string ModuleListIncludeButtonText { get; }
    public static string Modules { get; }
    public static string NavGutterLabel { get; }
    public static string OKButtonText { get; }
    public static string OpenFileButtonText { get; }
    public static string OtherCategory { get; }
    public static string Processes { get; }
    public static string ProcessListExcludeButtonText { get; }
    public static string ProcessListIncludeButtonText { get; }
    public static string RecordingPathBrowserLabel { get; }
    public static string RestoreButtonText { get; }
    public static string RestoreDefaultsButtonText { get; }
    public static string SaveLogsCheckboxLabel { get; }
    public static string SnapshotPerfWarning { get; }
    public static string SnapshotSetting { get; }
    public static string SnapshotSettingInfo { get; }
    public static string SnapshotSettingLabel { get; }
    public static string TestImpactConfigEditorCaption { get; }
    public static string TestImpactConfigEditorDescription { get; }
    public static string TfsSearchLabel { get; }
    public static string TraceCollectorConfigEditorCaption { get; }
    public static string TraceCollectorConfigEditorDescription { get; }
    public static string Warning_RestartDebugging { get; }
    public static string WarningImage { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Advanced();
    public static string get_ASPNetCollectCheckboxLabel();
    public static string get_ASPNetCollectionMoreInformation();
    public static string get_CancelButtonText();
    public static string get_CollectSteppingEventDataLabel();
    public static string get_CollectSteppingEventsLabel();
    public static string get_DiagnosticEventsControlInfo();
    public static string get_DiagnosticEventsControlLabel();
    public static string get_EnableProteus();
    public static string get_ErrorInvalidLogPath();
    public static string get_ErrorInvalidLogPathTitle();
    public static string get_ErrorInvalidMaxSnapshotOnException();
    public static string get_ErrorNetworkLogPath();
    public static string get_ErrorUnauthorizedLogPath();
    public static string get_ExceptionSnapshotLabel();
    public static string get_ExclusionListAddButtonText();
    public static string get_ExclusionListAddDialogAddButtonText();
    public static string get_ExclusionListAddDialogDescription();
    public static string get_ExclusionListAddDialogSampleText();
    public static string get_ExclusionListAddDialogTitle();
    public static string get_ExclusionListCancelButtonText();
    public static string get_ExclusionListRemoveButtonText();
    public static string get_FunctionLevelTracingDisabled();
    public static string get_FunctionLevelTracingDisableEnCWarning();
    public static string get_FunctionLevelTracingSetting();
    public static string get_FunctionParameterSettings();
    public static string get_General();
    public static string get_GeneralDebugOnlyExplanation();
    public static string get_HighSettingLabel();
    public static string get_IndependentEvents_RootNode();
    public static string get_IndependentEventsSettings();
    public static string get_LimitEvents();
    public static string get_LogFileGroupHeader();
    public static string get_LogRetentionSettings();
    public static string get_LogSize_100MB();
    public static string get_LogSize_10GB();
    public static string get_LogSize_1GB();
    public static string get_LogSize_20GB();
    public static string get_LogSize_250MB();
    public static string get_LogSize_2GB();
    public static string get_LogSize_500MB();
    public static string get_LogSize_5GB();
    public static string get_LogSize_None();
    public static string get_LogSizeLabel();
    public static string get_LowSetting();
    public static string get_LowSettingLabel();
    public static string get_MaxSnapshotOnException();
    public static string get_ModuleListExcludeButtonText();
    public static string get_ModuleListIncludeButtonText();
    public static string get_Modules();
    public static string get_NavGutterLabel();
    public static string get_OKButtonText();
    public static string get_OpenFileButtonText();
    public static string get_OtherCategory();
    public static string get_Processes();
    public static string get_ProcessListExcludeButtonText();
    public static string get_ProcessListIncludeButtonText();
    public static string get_RecordingPathBrowserLabel();
    public static string get_RestoreButtonText();
    public static string get_RestoreDefaultsButtonText();
    public static string get_SaveLogsCheckboxLabel();
    public static string get_SnapshotPerfWarning();
    public static string get_SnapshotSetting();
    public static string get_SnapshotSettingInfo();
    public static string get_SnapshotSettingLabel();
    public static string get_TestImpactConfigEditorCaption();
    public static string get_TestImpactConfigEditorDescription();
    public static string get_TfsSearchLabel();
    public static string get_TraceCollectorConfigEditorCaption();
    public static string get_TraceCollectorConfigEditorDescription();
    public static string get_Warning_RestartDebugging();
    public static string get_WarningImage();
}
internal class Microsoft.VisualStudio.TraceConfigUI.WpfDialogAssistant : object {
    private Window m_window;
    private HwndSource m_hwndSource;
    private WindowInteropHelper m_interopHelper;
    public bool ShowInTaskbar { get; public set; }
    protected IntPtr Handle { get; }
    protected HwndSource HandleSource { get; }
    public WpfDialogAssistant(Window window);
    public bool get_ShowInTaskbar();
    public void set_ShowInTaskbar(bool value);
    public void SetOwner(Window owner);
    public void SetOwner(IntPtr hwnd);
    public void SetOwner(Form form);
    public void SetOwner(IWin32Window win32Window);
    private IntPtr GetProperOwnerWindow(IntPtr owner);
    protected IntPtr get_Handle();
    protected HwndSource get_HandleSource();
    protected virtual void InitializeWindowStyle();
    private void InitializeWindowPosition();
    private void Window_SourceInitialized(object sender, EventArgs e);
}
