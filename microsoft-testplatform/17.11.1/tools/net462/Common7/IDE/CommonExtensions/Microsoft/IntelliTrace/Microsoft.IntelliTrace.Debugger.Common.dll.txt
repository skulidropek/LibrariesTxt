internal class Microsoft.IntelliTrace.Debugger.Common.DT_CALLSTACKFRAMES : ValueType {
    public int bIsUserCode;
    public UInt32 dwMethodToken;
    public UInt32 dwMethodVersion;
    public UInt32 ilOffset;
    public Guid guidMVID;
    public ulong lwFrameBase;
    public ulong lwFrameSize;
    public static DT_CALLSTACKFRAMES ReadFromByteArray(Byte[] bytes, int startIndex, Int32& nextLocation);
}
internal class Microsoft.IntelliTrace.Debugger.Common.ExceptionNotifyData : object {
    [CompilerGeneratedAttribute]
private int <ExceptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private NOTIFY_EXCEPTION_TYPE <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <CallOffsetInHandlerFrame>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FrameDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HaveSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WinRtDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private DT_CALLSTACKFRAMES <HandlerLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    public int ExceptionId { get; public set; }
    public NOTIFY_EXCEPTION_TYPE ExceptionType { get; public set; }
    public string Message { get; internal set; }
    public UInt32 CallOffsetInHandlerFrame { get; public set; }
    public UInt32 FrameDepth { get; public set; }
    public bool HaveSnapshot { get; public set; }
    public string WinRtDescription { get; public set; }
    public DT_CALLSTACKFRAMES HandlerLocation { get; public set; }
    public string ModuleName { get; public set; }
    public ExceptionNotifyData(NOTIFY_EXCEPTION_TYPE exceptionType, DT_CALLSTACKFRAMES handlerLocation, string msg, UInt32 dwCallOffsetInHandlerFrame, UInt32 dwFrameDepth, string winRtDescription);
    [CompilerGeneratedAttribute]
public int get_ExceptionId();
    [CompilerGeneratedAttribute]
public void set_ExceptionId(int value);
    [CompilerGeneratedAttribute]
public NOTIFY_EXCEPTION_TYPE get_ExceptionType();
    [CompilerGeneratedAttribute]
public void set_ExceptionType(NOTIFY_EXCEPTION_TYPE value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_CallOffsetInHandlerFrame();
    [CompilerGeneratedAttribute]
public void set_CallOffsetInHandlerFrame(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_FrameDepth();
    [CompilerGeneratedAttribute]
public void set_FrameDepth(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_HaveSnapshot();
    [CompilerGeneratedAttribute]
public void set_HaveSnapshot(bool value);
    [CompilerGeneratedAttribute]
public string get_WinRtDescription();
    [CompilerGeneratedAttribute]
public void set_WinRtDescription(string value);
    [CompilerGeneratedAttribute]
public DT_CALLSTACKFRAMES get_HandlerLocation();
    [CompilerGeneratedAttribute]
public void set_HandlerLocation(DT_CALLSTACKFRAMES value);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
}
internal interface Microsoft.IntelliTrace.Debugger.Common.IDebugEngineAlert {
    public abstract virtual int AlertEnteringBreakMode(ulong id, UInt32 tid, NOTIFY_STOP_TYPE stopType);
    public abstract virtual int AlertException(ulong id, UInt32 tid, ExceptionNotifyData data);
    public abstract virtual int AlertExitingBreakMode();
    public abstract virtual int AlertModuleLoad(ulong id, string strModulePath, Guid& moduleId, UInt32 appDomainId, ulong baseAddress, bool isUserCode);
    public abstract virtual int AlertModuleUnload(ulong id, Guid& moduleId, UInt32 appDomainId);
    public abstract virtual int AlertSymbolLoad(ulong id, string strModulePath, Guid& moduleId, UInt32 appDomainId, ulong baseAddress);
    public abstract virtual int AlertNotifyPoint(ulong id, UInt32 tid, Guid& moduleId, UInt32 appDomainId, UInt32 notifyPointId);
    public abstract virtual int AlertProgramDestroy();
    public abstract virtual int AlertThreadCreate(ulong id, UInt32 dwTid, string strPriorityName, string strName, UInt32 dwCategory);
    public abstract virtual int AlertThreadDestroy(ulong id, UInt32 dwTid);
    public abstract virtual int AlertThreadNameChange(ulong id, UInt32 dwTid, string strName, UInt32 dwCategory);
    public abstract virtual int DisambiguateNotifyPoint(UInt32 notifyPointId, object pMetadata, UInt32 ctMethodTokens, UInt32[] rgdwMethodTokens, UInt32& pdwMatchingMethodToken);
    public abstract virtual int AlertBeforeContinueExecution(UInt32 tid);
}
internal interface Microsoft.IntelliTrace.Debugger.Common.IDebugEngineConnectionPoint {
    public DkmProcess Process { get; }
    public abstract virtual int Advise(IDebugEngineAlert pClientAlertSink);
    public abstract virtual int GetDebugSymbolProviderDirect(Object& ppSymbolProviderDirect);
    public abstract virtual int GetDebugTargetDataProvider(IDebugTargetDataProvider& ppDebugTargetDataProvider);
    public abstract virtual int UnAdvise();
    public abstract virtual DkmProcess get_Process();
}
internal interface Microsoft.IntelliTrace.Debugger.Common.IDebugTargetDataProvider {
    public abstract virtual int ExecuteDataQueries(UInt32 tid, DataQuery dataQuery, ExceptionNotifyData exceptionData, UInt32 cbMaxResults, Byte[] pDataResults, UInt32& pcbResults);
    public abstract virtual int ExecuteProgrammableDataQuery(UInt32 tid, object pProgrammableDataQuery);
    public abstract virtual int GetCallstack(UInt32 tid, int ctCallstack, DT_CALLSTACKFRAMES[]& rgFrames, UInt32& ctFramesSharedWithPrevious);
}
internal interface Microsoft.IntelliTrace.Debugger.Common.INotifyPointService {
    public abstract virtual int GetNotifyPointBindCount(UInt32 notifyPointId, UInt32& cBindInstances);
    public abstract virtual int GetNotifyPointBoundInfo(UInt32 notifyPointId, UInt32 dwBindId, NP_BOUNDINFO[] pBoundInfo);
    public abstract virtual int InstallNotifyPoints(UInt32 ctNotifiyInstallRequests, NP_INSTALL_REQUEST[] rgNotifyInstallRequests);
    public abstract virtual int UnInstallNotifyPoints(UInt32 ctNotifyPointIds, UInt32[] rgNotifyPointIds);
}
internal enum Microsoft.IntelliTrace.Debugger.Common.MODSPEC_VERSION : Enum {
    public int value__;
    public static MODSPEC_VERSION MODSPEC_ANY_VERSION;
}
internal class Microsoft.IntelliTrace.Debugger.Common.MODULE_VERSION_SPEC : ValueType {
    public ushort usBuildNumber;
    public ushort usMajorVersion;
    public ushort usMinorVersion;
    public ushort usRevisionNumber;
}
internal enum Microsoft.IntelliTrace.Debugger.Common.NP_BINDLOCATION : Enum {
    public int value__;
    public static NP_BINDLOCATION NP_BINDLOCATION_NONE;
    public static NP_BINDLOCATION NP_BINDLOCATION_START;
    public static NP_BINDLOCATION NP_BINDLOCATION_RETURN;
}
internal class Microsoft.IntelliTrace.Debugger.Common.NP_BOUNDINFO : ValueType {
    public UInt32 dwMethodToken;
    public Guid guidMVID;
}
internal class Microsoft.IntelliTrace.Debugger.Common.NP_INSTALL_REQUEST : ValueType {
    public NP_BINDLOCATION bindLocation;
    public string bstrAssemblyName;
    public string bstrClassName;
    public string bstrMethodName;
    public UInt32 dwNotifyPointId;
    public MODULE_VERSION_SPEC maxVersion;
    public MODULE_VERSION_SPEC minVersion;
}
