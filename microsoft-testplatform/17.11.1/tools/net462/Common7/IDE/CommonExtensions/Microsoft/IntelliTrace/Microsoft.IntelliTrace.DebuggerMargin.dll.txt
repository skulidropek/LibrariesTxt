[ValueConversionAttribute("Microsoft.IntelliTrace.Internal.ProteusMarginItemType", "System.String")]
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.ButtonAutomationNameConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("Microsoft.IntelliTrace.Internal.ProteusMarginItemType", "System.Windows.Input.ICommand")]
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.ButtonCommandConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("Microsoft.VisualStudio.IntelliTrace.SourceControl.TextEditorInformation", "System.Double")]
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.ButtonHeightConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("Microsoft.IntelliTrace.Internal.ProteusMarginItemType", "System.String")]
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.ButtonToolTipConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private string AddKeyBindingToTip(string toolTip, string commandName);
    private string GetKeyBindingForCommand(string commandName);
    private string StripContextFromBinding(string binding);
}
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.ButtonTopConverter : object {
    private static int OFFSCREEN_LOCATION;
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.ButtonVisibilityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public static class Microsoft.VisualStudio.IntelliTrace.SourceControl.CommonConstants : object {
    public static string IntelliTraceEditorAssetLoaderName;
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.DebuggerEventsListener : object {
    private IDebuggerInternal _debugger;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Action`2<IDebuggerInternal, IDebugStackFrame2> CurrentFrameChanged;
    public DebuggerEventsListener(IDebuggerInternal debugger);
    [CompilerGeneratedAttribute]
public void add_CurrentFrameChanged(Action`2<IDebuggerInternal, IDebugStackFrame2> value);
    [CompilerGeneratedAttribute]
public void remove_CurrentFrameChanged(Action`2<IDebuggerInternal, IDebugStackFrame2> value);
    public sealed virtual void Dispose();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentFrameChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentProcessChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentProgramChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentStatementChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentThreadChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnEnterRunMode();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnModeChange(UInt32 NewDebugMode);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessCreate(IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessDeregister(IDebugCoreServer2 pServer, IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessDestroy(IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessRegister(IDebugCoreServer2 pServer, IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnSessionCreate(IDebugSession2 pSession);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnSessionDestroy(IDebugSession2 pSession);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnSetNextStatement();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnShellModeChange(UInt32 NewShellMode);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnThreadCreate(IDebugThread2 pThread);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnThreadDestroy(IDebugThread2 pThread);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnTimeContextChange();
    private void ComRelease(object comObject);
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModeGlyphFactory : object {
    public sealed virtual UIElement GenerateGlyph(IWpfTextViewLine line, ISuggestionTag tag);
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModeTag : object {
    private MonikerGlyph _glyph;
    private ToolTip _toolTip;
    public UIElement Glyph { get; }
    public Cursor Cursor { get; }
    public UIElement get_Glyph();
    public sealed virtual Cursor get_Cursor();
    private void OnGlyphUnloaded(object sender, RoutedEventArgs e);
    public sealed virtual void OnMouseHover();
    public sealed virtual void OnMouseLeave();
    private void HideToolTip();
    private void ShowToolTip();
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModeTagger : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<SnapshotSpanEventArgs> TagsChanged;
    private IServiceProvider _serviceProvider;
    private ITextBuffer _buffer;
    private IVsTextBuffer _vsBuffer;
    private HistoricalSourceIntegration _sourceIntegration;
    private Nullable`1<SnapshotSpan> _currentSpan;
    private ProteusDocumentChecksum _checksum;
    private bool _checksumCalculated;
    private ProteusDocumentChecksum Checksum { get; }
    public HistoricalModeTagger(IServiceProvider serviceProvider, ITextBuffer buffer, IVsEditorAdaptersFactoryService adapterFactory);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TagsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TagsChanged(EventHandler`1<SnapshotSpanEventArgs> value);
    private ProteusDocumentChecksum get_Checksum();
    private void OnHistoricalCodeContextChanged(object sender, HistoricalCodeContext context);
    private void UpdateTags(HistoricalCodeContext currentContext);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModeTagger/<GetTags>d__15")]
public sealed virtual IEnumerable`1<ITagSpan`1<HistoricalModeTag>> GetTags(NormalizedSnapshotSpanCollection spans);
    public sealed virtual void Dispose();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Tagging.ITaggerProvider")]
[ContentTypeAttribute("CSharp")]
[ContentTypeAttribute("Basic")]
[ContentTypeAttribute("WebForms")]
[ContentTypeAttribute("XAML")]
[ContentTypeAttribute("F#")]
[TagTypeAttribute("Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModeTag")]
[DeferCreationAttribute]
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModeTaggerProvider : object {
    private IServiceProvider _serviceProvider;
    private IVsEditorAdaptersFactoryService _adapterFactory;
    [ImportingConstructorAttribute]
public HistoricalModeTaggerProvider(SVsServiceProvider serviceProvider, IVsEditorAdaptersFactoryService adapterFactory);
    public sealed virtual ITagger`1<T> CreateTagger(ITextBuffer buffer);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider`1<Microsoft.VisualStudio.Text.Editor.ISuggestionTag>")]
[NameAttribute("HistoricalModeGlyph")]
[OrderAttribute]
[ContentTypeAttribute("CSharp")]
[ContentTypeAttribute("Basic")]
[ContentTypeAttribute("WebForms")]
[ContentTypeAttribute("XAML")]
[ContentTypeAttribute("F#")]
[TagTypeAttribute("Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModeTag")]
[DeferCreationAttribute]
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalModyGlyphFactoryProvider : object {
    public sealed virtual IGlyphFactory`1<ISuggestionTag> GetGlyphFactory(IWpfTextView view, IWpfTextViewMargin margin);
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.HistoricalSourceIntegration : object {
    private IDisposable _debuggerEventListenr;
    private IServiceProvider _serviceProvider;
    private HistoricalCodeContext _currentHistoricalCodeContext;
    [CompilerGeneratedAttribute]
private EventHandler`1<HistoricalCodeContext> HistoricalCodeContextChanged;
    [CompilerGeneratedAttribute]
private bool <IsHistoricalDebugging>k__BackingField;
    public HistoricalCodeContext CurrentHistoricalCodeContext { get; private set; }
    public bool IsHistoricalDebugging { get; private set; }
    public HistoricalSourceIntegration(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public void add_HistoricalCodeContextChanged(EventHandler`1<HistoricalCodeContext> value);
    [CompilerGeneratedAttribute]
public void remove_HistoricalCodeContextChanged(EventHandler`1<HistoricalCodeContext> value);
    public HistoricalCodeContext get_CurrentHistoricalCodeContext();
    private void set_CurrentHistoricalCodeContext(HistoricalCodeContext value);
    [CompilerGeneratedAttribute]
public bool get_IsHistoricalDebugging();
    [CompilerGeneratedAttribute]
private void set_IsHistoricalDebugging(bool value);
    private static HistoricalCodeContext GetCurrentCodeContext(IDebugStackFrame2 stackFrame);
    private void OnHistoricalModeChanged(object sender, UIContextChangedEventArgs e);
    private void OnDebuggerFrameChanged(IDebuggerInternal debugger, IDebugStackFrame2 stackFrame);
    public sealed virtual void Dispose();
    private void DisposeDebuggerEvents();
}
internal interface Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.IMouseInteractionTag {
    public Cursor Cursor { get; }
    public abstract virtual Cursor get_Cursor();
    public abstract virtual void OnMouseHover();
    public abstract virtual void OnMouseLeave();
}
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.MonikerGlyph : UserControl {
    internal CrispImage _image;
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.MouseProcessor : MouseProcessorBase {
    private IWpfTextViewHost _host;
    private IWpfTextViewMargin _margin;
    private ITagAggregator`1<ITag> _aggregator;
    private ITextViewLine _currentLine;
    private DispatcherTimer _hoverTimer;
    private IMouseInteractionTag _tagUnderMouse;
    private Cursor _marginCursor;
    public MouseProcessor(IWpfTextViewHost wpfTextViewHost, IWpfTextViewMargin margin, IViewTagAggregatorFactoryService tagAggregatorService);
    public virtual void PreprocessMouseLeave(MouseEventArgs e);
    public virtual void PreprocessMouseMove(MouseEventArgs e);
    private void OnHover(object sender, EventArgs e);
    private void UpdateCursor();
    private IMouseInteractionTag GetTagUnderMouse();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider")]
[NameAttribute("HistoricalModeHintMouseProcessorProvider")]
[OrderAttribute]
[GlyphMarginAttribute("Suggestion")]
[ContentTypeAttribute("CSharp")]
[ContentTypeAttribute("Basic")]
[ContentTypeAttribute("WebForms")]
[ContentTypeAttribute("XAML")]
[ContentTypeAttribute("F#")]
[TextViewRoleAttribute("PRIMARYDOCUMENT")]
[DeferCreationAttribute]
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.HistoricalModeHint.MouseProcessorProvider : object {
    private IViewTagAggregatorFactoryService _tagAggregatorService;
    [ImportingConstructorAttribute]
public MouseProcessorProvider(IViewTagAggregatorFactoryService tagAggregatorService);
    public sealed virtual IMouseProcessor GetAssociatedMouseProcessor(IWpfTextViewHost wpfTextViewHost, IWpfTextViewMargin margin);
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.MarginIconMonikerConverter : ValueConverter`2<ProteusMarginItemType, ImageMoniker> {
    protected virtual ImageMoniker Convert(ProteusMarginItemType marginItem, object parameter, CultureInfo culture);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.MarginResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string GoToLiveAutomationName { get; }
    internal static string GoToLiveTip { get; }
    internal static string SeekBackAutomationName { get; }
    internal static string SeekBackTip { get; }
    internal static string SeekNextAutomationName { get; }
    internal static string SeekNextTip { get; }
    internal static string StackLocationAutomationName { get; }
    internal static string StackLocationTip { get; }
    internal static string StepIntoAutomationName { get; }
    internal static string StepIntoTip { get; }
    internal static string StepOutAutomationName { get; }
    internal static string StepOutTip { get; }
    internal static string ToolTip_HistoricalDebugging { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_GoToLiveAutomationName();
    internal static string get_GoToLiveTip();
    internal static string get_SeekBackAutomationName();
    internal static string get_SeekBackTip();
    internal static string get_SeekNextAutomationName();
    internal static string get_SeekNextTip();
    internal static string get_StackLocationAutomationName();
    internal static string get_StackLocationTip();
    internal static string get_StepIntoAutomationName();
    internal static string get_StepIntoTip();
    internal static string get_StepOutAutomationName();
    internal static string get_StepOutTip();
    internal static string get_ToolTip_HistoricalDebugging();
}
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.ProteusMargin : Canvas {
    [CompilerGeneratedAttribute]
private TextEditorInformation <EditorInformation>k__BackingField;
    private double _editorZoomLevel;
    private IWpfTextView _textView;
    private IVsTextBuffer _vsBuffer;
    private ProteusMarginInstance _marginInstance;
    private bool _hideMargin;
    private bool _isDisposed;
    private bool _proteusEventsRegistered;
    private bool _updatingGutterVisibility;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public static RoutedCommand StepIntoCommand;
    public static RoutedCommand SeekPreviousCommand;
    public static RoutedCommand SeekNextCommand;
    public static RoutedCommand JumpOutCommand;
    public static RoutedCommand GoToLiveCommand;
    public static RoutedCommand StackLocationCommand;
    internal ProteusMargin _mainMarginCanvas;
    internal ContextMenu MarginContextMenu;
    internal ItemsControl MarginItemsControl;
    private bool _contentLoaded;
    public FrameworkElement VisualElement { get; }
    public double MarginSize { get; }
    public bool Enabled { get; public set; }
    public double EditorZoomLevel { get; private set; }
    public IWpfTextView TextView { get; }
    public double LineHeight { get; }
    public int FirstVisibleLine { get; }
    public double FirstLineOffset { get; }
    public int LastVisibleLine { get; }
    public ObservableCollection`1<ProteusMarginItem> MarginItems { get; }
    public ITextSnapshot TextSnapshot { get; }
    public IWpfTextViewLineCollection LineCollection { get; }
    public double MarginHeight { get; }
    public TextEditorInformation EditorInformation { get; private set; }
    internal bool IsUpdatingGutterVisibility { get; }
    public ProteusMargin(IWpfTextView wpfTextView, IVsEditorAdaptersFactoryService adapterFactory);
    private static ProteusMargin();
    public sealed virtual FrameworkElement get_VisualElement();
    public sealed virtual double get_MarginSize();
    public sealed virtual ITextViewMargin GetTextViewMargin(string marginName);
    public sealed virtual bool get_Enabled();
    public void set_Enabled(bool value);
    public sealed virtual void Dispose();
    public double get_EditorZoomLevel();
    private void set_EditorZoomLevel(double value);
    public IWpfTextView get_TextView();
    public double get_LineHeight();
    public int get_FirstVisibleLine();
    public double get_FirstLineOffset();
    public int get_LastVisibleLine();
    public ObservableCollection`1<ProteusMarginItem> get_MarginItems();
    public ITextSnapshot get_TextSnapshot();
    public IWpfTextViewLineCollection get_LineCollection();
    public double get_MarginHeight();
    [CompilerGeneratedAttribute]
public TextEditorInformation get_EditorInformation();
    [CompilerGeneratedAttribute]
private void set_EditorInformation(TextEditorInformation value);
    internal bool get_IsUpdatingGutterVisibility();
    private bool CreateMarginInstance();
    private bool RegisterMarginWithTraceLogPackage(ITracePackage package);
    private void RegisterProteusEvents();
    private void RegisterEditorEvents();
    private void DeregisterEditorEvents();
    private void TextView_ZoomLevelChanged(object sender, ZoomLevelChangedEventArgs ea);
    private void DeregisterProteusEvents();
    private void ThrowIfDisposed();
    protected void OnPropertyChanged(string name);
    private void UpdateMarginVisibility(ITracePackage package);
    private void TextView_LayoutChanged(object sender, TextViewLayoutChangedEventArgs e);
    private void TextView_Closed(object sender, EventArgs e);
    private void TraceLogPackage_DebugModeChanged(object sender, DebugModeChangedEventArgs ea);
    private void TraceLogPackage_DebugContextChanged(object sender, EventArgs e);
    private void HideMarginsClick(object sender, RoutedEventArgs e);
    private void TraceLogPackage_ToolsOptionChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void CanExecuteStepIntoCommand(object sender, CanExecuteRoutedEventArgs e);
    internal void ExecuteStepIntoCommand(object sender, ExecutedRoutedEventArgs e);
    internal void CanExecuteSeekPreviousCommand(object sender, CanExecuteRoutedEventArgs e);
    internal void ExecuteSeekPreviousCommand(object sender, ExecutedRoutedEventArgs e);
    internal void CanExecuteSeekNextCommand(object sender, CanExecuteRoutedEventArgs e);
    internal void ExecuteSeekNextCommand(object sender, ExecutedRoutedEventArgs e);
    internal void CanExecuteJumpOutCommand(object sender, CanExecuteRoutedEventArgs e);
    internal void ExecuteJumpOutCommand(object sender, ExecutedRoutedEventArgs e);
    internal void CanExecuteGoToLiveCommand(object sender, CanExecuteRoutedEventArgs e);
    internal void ExecuteGoToLiveCommand(object sender, ExecutedRoutedEventArgs e);
    internal void CanExecuteStackLocationCommand(object sender, CanExecuteRoutedEventArgs e);
    internal void ExecuteStackLocationCommand(object sender, ExecutedRoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[NameAttribute("IntelliTraceDebuggerMargin")]
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider")]
[OrderAttribute]
[MarginContainerAttribute("Left")]
[ContentTypeAttribute("CSharp")]
[ContentTypeAttribute("Basic")]
[ContentTypeAttribute("WebForms")]
[ContentTypeAttribute("XAML")]
[ContentTypeAttribute("F#")]
[TextViewRoleAttribute("PRIMARYDOCUMENT")]
[DeferCreationAttribute]
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.ProteusMarginFactory : object {
    private IVsEditorAdaptersFactoryService _adapterFactory;
    [ImportingConstructorAttribute]
public ProteusMarginFactory(IVsEditorAdaptersFactoryService adapterFactory);
    public sealed virtual IWpfTextViewMargin CreateMargin(IWpfTextViewHost wpfTextViewHost, IWpfTextViewMargin parent);
}
public class Microsoft.VisualStudio.IntelliTrace.SourceControl.TextEditorInformation : object {
    private ProteusMargin _margin;
    public ITextSnapshot TextSnapshot { get; }
    public IWpfTextView TextView { get; }
    public IWpfTextViewLineCollection LineCollection { get; }
    public double MarginHeight { get; }
    public double LineHeight { get; }
    internal TextEditorInformation(ProteusMargin margin);
    public ITextSnapshot get_TextSnapshot();
    public IWpfTextView get_TextView();
    public IWpfTextViewLineCollection get_LineCollection();
    public double get_MarginHeight();
    public double get_LineHeight();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.IntelliTrace.SourceControl.TextUtilities : object {
    [ExtensionAttribute]
public static ProteusDocumentChecksum GetChecksum(IVsTextBuffer vsTextBuffer);
    private static bool CalculateChecksum(IPersistFileCheckSum fileChecksum, Guid algorithm, Byte[]& buffer, UInt32& size);
}
internal class Microsoft.VisualStudio.IntelliTrace.SourceControl.ZoomToScaleFactorConverter : ValueConverter`2<double, double> {
    protected virtual double Convert(double zoom, object parameter, CultureInfo culture);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
