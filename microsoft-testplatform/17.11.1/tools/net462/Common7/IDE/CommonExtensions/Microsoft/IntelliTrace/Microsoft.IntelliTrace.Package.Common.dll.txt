internal static class MarginNames : object {
    internal static string strDebuggerMargin;
    internal static string strSearchMargin;
}
[ExtensionAttribute]
internal static class Microsoft.IntelliTrace.Internal.CodeContextExtensions : object {
    [ExtensionAttribute]
public static bool TryGetChecksumAndLineNumber(IDebugCodeContext3 codeContext, String& sourceFileName, UInt32& lineNumber, ProteusDocumentChecksum& docChecksum);
    [ExtensionAttribute]
public static bool TryGetChecksumAndLineNumber(IDebugCodeContext2 codeContext, String& sourceFileName, UInt32& lineNumber, ProteusDocumentChecksum& proteusDocChecksum);
}
public abstract class Microsoft.IntelliTrace.Internal.Converters.AutomationNameConverter`1 : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    protected abstract virtual string BuildAutomationName(T item, bool isGrouped);
}
internal class Microsoft.IntelliTrace.Internal.Converters.DefaultAutomationNameConverter : AutomationNameConverter`1<object> {
    protected virtual string BuildAutomationName(object item, bool isGrouped);
}
internal interface Microsoft.IntelliTrace.Internal.Converters.IMarginImageFetcher {
    public abstract virtual BitmapImage GetMarginImage(object imageParameter);
}
public class Microsoft.IntelliTrace.Internal.Converters.MarginButtonContentConverter : object {
    private GrayscaleImageConverter _grayConverter;
    private static Color _translucentColor;
    private static MarginButtonContentConverter();
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public static Uri MakePackUri(string path);
}
internal class Microsoft.IntelliTrace.Internal.Converters.SearchGridAutomationConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.IntelliTrace.Internal.DebuggerOptionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DEBUGGER_OPTIONS <Option>k__BackingField;
    public DEBUGGER_OPTIONS Option { get; private set; }
    public DebuggerOptionChangedEventArgs(DEBUGGER_OPTIONS option);
    [CompilerGeneratedAttribute]
public DEBUGGER_OPTIONS get_Option();
    [CompilerGeneratedAttribute]
private void set_Option(DEBUGGER_OPTIONS value);
}
public class Microsoft.IntelliTrace.Internal.DebugMarginEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ProteusMarginInstance <Margin>k__BackingField;
    public ProteusMarginInstance Margin { get; private set; }
    public DebugMarginEventArgs(ProteusMarginInstance instance);
    [CompilerGeneratedAttribute]
public ProteusMarginInstance get_Margin();
    [CompilerGeneratedAttribute]
private void set_Margin(ProteusMarginInstance value);
}
public class Microsoft.IntelliTrace.Internal.DebugModeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DBGMODE <NewMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DBGMODE <OldMode>k__BackingField;
    public DBGMODE NewMode { get; private set; }
    public DBGMODE OldMode { get; private set; }
    public DebugModeChangedEventArgs(DBGMODE oldMode, DBGMODE newMode);
    [CompilerGeneratedAttribute]
public DBGMODE get_NewMode();
    [CompilerGeneratedAttribute]
private void set_NewMode(DBGMODE value);
    [CompilerGeneratedAttribute]
public DBGMODE get_OldMode();
    [CompilerGeneratedAttribute]
private void set_OldMode(DBGMODE value);
}
internal static class Microsoft.IntelliTrace.Internal.HashGuids : object {
    public static Guid SourceHashMD5;
    public static Guid SourceHashSHA1;
    public static Guid SourceHashSHA256;
    private static HashGuids();
}
internal class Microsoft.IntelliTrace.Internal.HistoricalCodeContext : object {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private ProteusDocumentChecksum <Checksum>k__BackingField;
    public int Line { get; private set; }
    public ProteusDocumentChecksum Checksum { get; private set; }
    public HistoricalCodeContext(int line, ProteusDocumentChecksum checksum);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
private void set_Line(int value);
    [CompilerGeneratedAttribute]
public ProteusDocumentChecksum get_Checksum();
    [CompilerGeneratedAttribute]
private void set_Checksum(ProteusDocumentChecksum value);
}
public interface Microsoft.IntelliTrace.Internal.IDefaultTracePackage {
    public bool ProteusEnabled { get; }
    public bool EnableInstrumentation { get; }
    public bool DisplayNavigationGutter { get; public set; }
    public bool TfsSymbolSearchEnabled { get; }
    public IServiceProvider Provider { get; }
    public abstract virtual bool get_ProteusEnabled();
    public abstract virtual bool get_EnableInstrumentation();
    public abstract virtual bool get_DisplayNavigationGutter();
    public abstract virtual void set_DisplayNavigationGutter(bool value);
    public abstract virtual bool get_TfsSymbolSearchEnabled();
    public abstract virtual void ApplyToolsOptionsChanges();
    public abstract virtual IServiceProvider get_Provider();
}
public interface Microsoft.IntelliTrace.Internal.IHistoricalSearchMargin {
    public object DataContext { get; public set; }
    public bool Enabled { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_SearchCancelled(SearchCancelledEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SearchCancelled(SearchCancelledEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SearchContextChanged(SearchContextChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SearchContextChanged(SearchContextChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MarginClosed(SearchMarginClosedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MarginClosed(SearchMarginClosedEventHandler value);
    public abstract virtual object get_DataContext();
    public abstract virtual void set_DataContext(object value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual void FocusSearchResults();
}
public interface Microsoft.IntelliTrace.Internal.IProcessProperties {
    public abstract virtual bool IsIntelliTraceEnabledForCurrentProcess();
    public abstract virtual bool IsInstrumentationEnabledForCurrentProcess();
}
public interface Microsoft.IntelliTrace.Internal.IProteusSourceIntegration {
    public Dictionary`2<ProteusMarginItem, ProteusMarginItem> MarginItemsDictionary { get; }
    public bool UpdatingUI { get; }
    public abstract virtual void DisableMargins();
    public abstract virtual Dictionary`2<ProteusMarginItem, ProteusMarginItem> get_MarginItemsDictionary();
    public abstract virtual bool RegisterProteusMargin(ProteusMarginInstance newMargin);
    public abstract virtual void UnregisterProteusMargin(ProteusMarginInstance removeMargin);
    public abstract virtual void UpdateProteusMarginChecksum(ProteusDocumentChecksum newChecksum, ProteusMarginInstance updateInstance);
    public abstract virtual void UpdateSourceControlUI();
    public abstract virtual bool get_UpdatingUI();
}
public interface Microsoft.IntelliTrace.Internal.ITfsSymbolPathResolver {
    public Control BusySpinnerControl { get; }
    public abstract virtual Control get_BusySpinnerControl();
    public abstract virtual SymbolPathResolverResult ResolveSymbolPath(Uri teamFoundationServerUri, string teamProjectName, int testRunId, Action`1<string> statusMessageCallback, Func`1<bool> continueCallback, String& symbolPath);
}
public interface Microsoft.IntelliTrace.Internal.ITracePackage {
    public ITraceStepper Stepper { get; }
    public bool IsTraceLoaded { get; }
    public IProteusSourceIntegration SourceIntegration { get; }
    public DBGMODE DebugMode { get; }
    public Dictionary`2<int, bool> NotifyPointEnabledState { get; }
    public bool IsPackageInRunMode { get; }
    public bool IsPackageInBreakMode { get; }
    public IVsUIShell Shell { get; }
    public DTE DTE { get; }
    public abstract virtual ITraceStepper get_Stepper();
    public abstract virtual bool get_IsTraceLoaded();
    public abstract virtual IProteusSourceIntegration get_SourceIntegration();
    public abstract virtual DBGMODE get_DebugMode();
    public abstract virtual Dictionary`2<int, bool> get_NotifyPointEnabledState();
    public abstract virtual bool get_IsPackageInRunMode();
    public abstract virtual bool get_IsPackageInBreakMode();
    public abstract virtual IVsUIShell get_Shell();
    [CompilerGeneratedAttribute]
public abstract virtual void add_DebugContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DebugContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ToolsOptionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ToolsOptionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DebuggerOptionChanged(EventHandler`1<DebuggerOptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DebuggerOptionChanged(EventHandler`1<DebuggerOptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MarginItemsContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MarginItemsContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ExitingBreakMode(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ExitingBreakMode(EventHandler value);
    public abstract virtual DTE get_DTE();
    public abstract virtual object GetService(Type type);
}
public interface Microsoft.IntelliTrace.Internal.ITraceStepper {
    public IProcessProperties ProcessProperties { get; }
    public bool CanStepInto { get; }
    public bool CanStepOut { get; }
    public bool CanStepOver { get; }
    public bool InLiveMode { get; }
    public int CurrentLoggerThreadID { get; }
    public abstract virtual IProcessProperties get_ProcessProperties();
    public abstract virtual bool get_CanStepInto();
    public abstract virtual void StepInto();
    public abstract virtual bool get_CanStepOut();
    public abstract virtual void StepOut();
    public abstract virtual bool get_CanStepOver();
    public abstract virtual void StepOver();
    public abstract virtual bool get_InLiveMode();
    public abstract virtual bool RetrieveAndSetTimeContext(IHistoricalDebuggingFrame frame, int loggerTid);
    public abstract virtual int get_CurrentLoggerThreadID();
}
public interface Microsoft.IntelliTrace.Internal.IUICommandTarget {
    public abstract virtual void ShowEventList(object sender, EventArgs args);
    public abstract virtual void ShowEventListStatus(object sender, EventArgs args);
    public abstract virtual void ShowCallsView(object sender, EventArgs args);
    public abstract virtual void ShowCallsViewStatus(object sender, EventArgs args);
    public abstract virtual void StepInto(object sender, EventArgs args);
    public abstract virtual void StepIntoStatus(object sender, EventArgs args);
    public abstract virtual void StepOut(object sender, EventArgs args);
    public abstract virtual void StepOutStatus(object sender, EventArgs args);
    public abstract virtual void StepOver(object sender, EventArgs args);
    public abstract virtual void StepOverStatus(object sender, EventArgs args);
    public abstract virtual void StepBack(object sender, EventArgs args);
    public abstract virtual void StepBackStatus(object sender, EventArgs args);
    public abstract virtual void GoToLiveMode(object sender, EventArgs args);
    public abstract virtual void GoToLiveModeStatus(object sender, EventArgs args);
    public abstract virtual void SearchHistoryByLine(object sender, EventArgs args);
    public abstract virtual void SearchHistoryByLineStatus(object sender, EventArgs args);
    public abstract virtual void SearchHistoryByMethod(object sender, EventArgs args);
    public abstract virtual void SearchHistoryByMethodStatus(object sender, EventArgs args);
    public abstract virtual void OpenLogDocument(object sender, EventArgs args);
    public abstract virtual void OpenLogDocumentStatus(object sender, EventArgs args);
    public abstract virtual void SaveTrace(object sender, EventArgs args);
    public abstract virtual void SaveTraceStatus(object sender, EventArgs args);
    public abstract virtual void OpenToolsOptions(object sender, EventArgs args);
    public abstract virtual void OpenToolsOptionsStatus(object sender, EventArgs args);
    public abstract virtual void OpenSolution(object sender, EventArgs args);
    public abstract virtual void OpenSolutionStatus(object sender, EventArgs args);
    public abstract virtual void StepBackward(object sender, EventArgs args);
    public abstract virtual void StepBackwardStatus(object sender, EventArgs args);
    public abstract virtual void StepForward(object sender, EventArgs args);
    public abstract virtual void StepForwardStatus(object sender, EventArgs args);
    public abstract virtual void NavigateToSearchMarginStatus(object sender, EventArgs args);
    public abstract virtual void NavigateToSearchMargin(object sender, EventArgs args);
}
public class Microsoft.IntelliTrace.Internal.MarginDeregisteredEventHandler : MulticastDelegate {
    public MarginDeregisteredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.IntelliTrace.Internal.MarginEvents : object {
    private List`1<ProteusMarginInstance> _margins;
    [CompilerGeneratedAttribute]
private EventHandler`1<DebugMarginEventArgs> DebugMarginCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<DebugMarginEventArgs> DebugMarginDestroyed;
    [CompilerGeneratedAttribute]
private EventHandler SearchMarginCreated;
    [CompilerGeneratedAttribute]
private void add_DebugMarginCreated(EventHandler`1<DebugMarginEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_DebugMarginCreated(EventHandler`1<DebugMarginEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_DebugMarginDestroyed(EventHandler`1<DebugMarginEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_DebugMarginDestroyed(EventHandler`1<DebugMarginEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SearchMarginCreated(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SearchMarginCreated(EventHandler value);
    public void RegisterForMarginCreation(EventHandler`1<DebugMarginEventArgs> handler);
    public void RegisterForMarginDisposal(EventHandler`1<DebugMarginEventArgs> handler);
    public void FireDebugMarginCreated(ProteusMarginInstance instance);
    public void FireDebugMarginDestroyed(ProteusMarginInstance instance);
    public void FireSearchMarginCreated(IHistoricalSearchMargin searchMargin);
}
public static class Microsoft.IntelliTrace.Internal.MessageBoxHelper : object {
    public static void ShowError(IServiceProvider serviceProvider, string errorText);
    public static void ShowError(IServiceProvider serviceProvider, string errorText, string f1Keyword);
    public static void ShowMessageBox(IServiceProvider serviceProvider, string messageText);
    public static DialogResult ShowMessageBox(IServiceProvider serviceProvider, string messageText, OLEMSGBUTTON messageButtons, OLEMSGDEFBUTTON defaultButton, OLEMSGICON messageIcon);
    public static DialogResult ShowMessageBox(IServiceProvider serviceProvider, string messageText, string f1Keyword, OLEMSGBUTTON messageButtons, OLEMSGDEFBUTTON defaultButton, OLEMSGICON messageIcon);
}
public abstract class Microsoft.IntelliTrace.Internal.MVVM.TraceLogViewModelBase : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void OnPropertyChanged(string name);
    protected void ChangePropertyValue(T& currentValue, T newValue, string name);
    public static string GetPropertyName(Expression`1<Func`1<T>> propertyCall);
    public static string GetPropertyName(Expression`1<Func`2<P, T>> propertyCall);
}
public class Microsoft.IntelliTrace.Internal.NavigatorProxy : object {
    private static NavigatorProxy _instance;
    public static NavigatorProxy Instance { get; }
    private static IHistoricalDebuggingNavigator Navigator { get; }
    private static NavigatorProxy();
    public static NavigatorProxy get_Instance();
    public sealed virtual IHistoricalDebuggingFrame GetCurrentFrame();
    public sealed virtual bool GetGoToNextEventStatus();
    public sealed virtual bool GetGoToPreviousEventStatus();
    public sealed virtual void GoToNextEvent();
    public sealed virtual void GoToPreviousEvent();
    private static IHistoricalDebuggingNavigator get_Navigator();
}
internal static class Microsoft.IntelliTrace.Internal.PackageCommandIds : object {
    internal static int ProteusSourceContextMenu;
    internal static int HubDetailsViewFilterContextMenu;
    internal static int HubDetailsViewFilterCategorySubMenu;
    internal static int HubDetailsViewFilterThreadsSubMenu;
    internal static int EventListCommand;
    internal static int MenuGoToNextEventCommand;
    internal static int MenuGoToPreviousEventCommand;
    internal static int MenuGotoMethodEnterCommand;
    internal static int MenuGotoCallsiteCommand;
    internal static int MenuGotoLiveFrameCommand;
    internal static int MenuOpenToolsOpenCommand;
    internal static int MenuSaveTraceCommand;
    internal static int SourceContextSearchHistoryCommand;
    internal static int MenuOpenLogCommand;
    internal static int SourceContextSearchHistoryMethodCommand;
    internal static int DebugToolbarSearchHistoryCommand;
    internal static int CallsViewCommand;
    internal static int ShowWebRequestDetailsForCorrelationIdCommand;
    internal static int OpenSolutionFromTraceCommand;
    internal static int HubDetailsViewShowExternalEventsCommand;
    internal static int HubDetailsViewFilterCategoryOpenOption;
    internal static int HubDetailsViewListShowEventsFromAllThreads;
    internal static int HubDetailsViewFilterThreadsAllThreads;
    internal static int HubDetailsViewFilterThreadsListBase;
    internal static int HubDetailsViewFilterThreadsListLast;
    internal static int StepBackwardCommand;
    internal static int StepForwardCommand;
    internal static int EditorNavigateToSearchMarginCommand;
}
public class Microsoft.IntelliTrace.Internal.PackageEvents : object {
    private List`1<ITracePackage> _packageInstances;
    [CompilerGeneratedAttribute]
private EventHandler`1<DebugModeChangedEventArgs> DebugModeChanged;
    [CompilerGeneratedAttribute]
private EventHandler DebugContextChanged;
    [CompilerGeneratedAttribute]
private EventHandler MarginItemsContextChanged;
    [CompilerGeneratedAttribute]
private EventHandler ToolsOptionChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<PackageLoadedEventArgs> TraceLogPackageLoaded;
    [CompilerGeneratedAttribute]
public void add_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_DebugContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DebugContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_MarginItemsContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MarginItemsContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ToolsOptionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ToolsOptionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
private void add_TraceLogPackageLoaded(EventHandler`1<PackageLoadedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_TraceLogPackageLoaded(EventHandler`1<PackageLoadedEventArgs> value);
    public void RegisterForPackageLoad(EventHandler`1<PackageLoadedEventArgs> handler);
    public void UnregisterForPackageLoad(EventHandler`1<PackageLoadedEventArgs> handler);
    public void FireTraceLogPackageLoaded(ITracePackage package);
    private void DebugModeChangedHandler(object sender, DebugModeChangedEventArgs e);
    private void DebugContextChangedHandler(object sender, EventArgs e);
    private void MarginItemsContextChangedHandler(object sender, EventArgs e);
    private void ToolsOptionChangedHandler(object sender, EventArgs e);
}
public class Microsoft.IntelliTrace.Internal.PackageLoadedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ITracePackage <Package>k__BackingField;
    public ITracePackage Package { get; private set; }
    public PackageLoadedEventArgs(ITracePackage package);
    [CompilerGeneratedAttribute]
public ITracePackage get_Package();
    [CompilerGeneratedAttribute]
private void set_Package(ITracePackage value);
}
public class Microsoft.IntelliTrace.Internal.ProteusDocumentChecksum : object {
    private Dictionary`2<ChecksumAlgorithm, ChecksumHash> _checksums;
    private ChecksumAlgorithm _algorithm;
    private string _fileName;
    public ProteusDocumentChecksum(Byte[] newMD5Hash, UInt32 newMD5Length, Byte[] newSHA1Hash, UInt32 newSHA1Length, Byte[] newSHA256Hash, UInt32 newSHA256Length, string fileName);
    public ProteusDocumentChecksum(Byte[] hash, UInt32 length, Guid algorithm, string fileName);
    private void Initialize(string fileName);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class Microsoft.IntelliTrace.Internal.ProteusMarginEqualityComparer : object {
    public sealed virtual bool Equals(ProteusDocumentChecksum x, ProteusDocumentChecksum y);
    public sealed virtual int GetHashCode(ProteusDocumentChecksum checksum);
}
public class Microsoft.IntelliTrace.Internal.ProteusMarginInstance : object {
    private ObservableCollection`1<ProteusMarginItem> _marginItems;
    [CompilerGeneratedAttribute]
private ProteusDocumentChecksum <DocumentChecksum>k__BackingField;
    [CompilerGeneratedAttribute]
private MarginDeregisteredEventHandler MarginDeregistered;
    public ObservableCollection`1<ProteusMarginItem> MarginItems { get; }
    public ProteusDocumentChecksum DocumentChecksum { get; private set; }
    public ProteusMarginInstance(ProteusDocumentChecksum docChecksum);
    public ObservableCollection`1<ProteusMarginItem> get_MarginItems();
    [CompilerGeneratedAttribute]
public ProteusDocumentChecksum get_DocumentChecksum();
    [CompilerGeneratedAttribute]
private void set_DocumentChecksum(ProteusDocumentChecksum value);
    public void Deregister();
    public void UpdateDocumentChecksum(ProteusDocumentChecksum newChecksum);
    [CompilerGeneratedAttribute]
public void add_MarginDeregistered(MarginDeregisteredEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MarginDeregistered(MarginDeregisteredEventHandler value);
}
public class Microsoft.IntelliTrace.Internal.ProteusMarginItem : TraceLogViewModelBase {
    private ProteusMarginItemType _itemType;
    private UInt32 _sourceLine;
    [CompilerGeneratedAttribute]
private int <RelativeLineNumber>k__BackingField;
    private string _sourceFileName;
    private ProteusDocumentChecksum _documentChecksum;
    private bool _enabled;
    private bool _visible;
    private object _tag;
    public ProteusMarginItemType ItemType { get; private set; }
    public UInt32 SourceLine { get; public set; }
    public int RelativeLineNumber { get; private set; }
    public string SourceFileName { get; private set; }
    public ProteusDocumentChecksum DocumentChecksum { get; private set; }
    public bool Enabled { get; private set; }
    public bool Visible { get; public set; }
    public bool ShowDisabled { get; }
    public object Tag { get; private set; }
    public ProteusMarginItem(ProteusMarginItemType itemType, string sourceFileName, UInt32 lineNumber, bool enabled, ProteusDocumentChecksum docChecksum);
    public ProteusMarginItem(ProteusMarginItemType itemType, string sourceFileName, UInt32 lineNumber, bool enabled, ProteusDocumentChecksum docChecksum, object tag);
    public ProteusMarginItem(ProteusMarginItemType itemType, string sourceFileName, UInt32 pivotLineNumber, bool enabled, ProteusDocumentChecksum docChecksum, object tag, int relativeLineNumber);
    public ProteusMarginItemType get_ItemType();
    private void set_ItemType(ProteusMarginItemType value);
    public UInt32 get_SourceLine();
    public void set_SourceLine(UInt32 value);
    [CompilerGeneratedAttribute]
public int get_RelativeLineNumber();
    [CompilerGeneratedAttribute]
private void set_RelativeLineNumber(int value);
    public string get_SourceFileName();
    private void set_SourceFileName(string value);
    public ProteusDocumentChecksum get_DocumentChecksum();
    private void set_DocumentChecksum(ProteusDocumentChecksum value);
    public bool get_Enabled();
    private void set_Enabled(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool get_ShowDisabled();
    public object get_Tag();
    private void set_Tag(object value);
    public virtual int GetHashCode();
}
public class Microsoft.IntelliTrace.Internal.ProteusMarginItemEqualityComparer : object {
    public sealed virtual bool Equals(ProteusMarginItem x, ProteusMarginItem y);
    public sealed virtual int GetHashCode(ProteusMarginItem obj);
}
public enum Microsoft.IntelliTrace.Internal.ProteusMarginItemType : Enum {
    public int value__;
    public static ProteusMarginItemType StepInto;
    public static ProteusMarginItemType SeekNext;
    public static ProteusMarginItemType SeekPrevious;
    public static ProteusMarginItemType JumpOut;
    public static ProteusMarginItemType GoToLive;
    public static ProteusMarginItemType StackLocation;
}
public class Microsoft.IntelliTrace.Internal.SearchCancelledEventHandler : MulticastDelegate {
    public SearchCancelledEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.IntelliTrace.Internal.SearchContextChangedEvent : Enum {
    public int value__;
    public static SearchContextChangedEvent MoveFirst;
    public static SearchContextChangedEvent MovePrevious;
    public static SearchContextChangedEvent MoveNext;
    public static SearchContextChangedEvent MoveLast;
}
public class Microsoft.IntelliTrace.Internal.SearchContextChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SearchContextChangedEvent <EventType>k__BackingField;
    public SearchContextChangedEvent EventType { get; private set; }
    public SearchContextChangedEventArgs(SearchContextChangedEvent eventType);
    [CompilerGeneratedAttribute]
public SearchContextChangedEvent get_EventType();
    [CompilerGeneratedAttribute]
private void set_EventType(SearchContextChangedEvent value);
}
public class Microsoft.IntelliTrace.Internal.SearchContextChangedEventHandler : MulticastDelegate {
    public SearchContextChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SearchContextChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SearchContextChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.IntelliTrace.Internal.SearchMarginClosedEventHandler : MulticastDelegate {
    public SearchMarginClosedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.IntelliTrace.Internal.SingletonPackageProxy : object {
    private static object s_lock;
    private static PackageEvents s_packageEvents;
    private static MarginEvents s_marginEvents;
    private static IDefaultTracePackage s_defaultPkg;
    private static ITracePackage s_currentPkg;
    public static PackageEvents PackageEvents { get; }
    public static MarginEvents MarginEvents { get; }
    public static bool IsPackageLoaded { get; }
    public static IDefaultTracePackage Default { get; public set; }
    public static ITracePackage Current { get; }
    private static SingletonPackageProxy();
    public static PackageEvents get_PackageEvents();
    public static MarginEvents get_MarginEvents();
    public static bool get_IsPackageLoaded();
    public static bool IsDefaultPackage(ITracePackage package);
    public static IDefaultTracePackage get_Default();
    public static void set_Default(IDefaultTracePackage value);
    public static ITracePackage get_Current();
    public static IDisposable SetCurrent(ITracePackage pkg);
    private static void ClearCurrentPackage(ITracePackage pkg);
    private static void PostCommand(int command);
    public static void PostStepIntoCommand();
    public static void PostSeekNextCommand();
    public static void PostSeekPreviousCommand();
    public static void PostJumpOutCommand();
    public static void PostGoToLiveCommand();
    public static void PostSearchHistoryCommand();
    public static void PostSearchHistoryMethodCommand();
    public static void ExecuteStackLocationCommand(object originalSource);
}
public class Microsoft.IntelliTrace.Internal.SummaryPage.SummaryPageSearchControl : UserControl {
    private static DependencyProperty GridControlHeightProperty;
    private static DependencyProperty GridControlMinHeightProperty;
    private static DependencyProperty GridControlMaxHeightProperty;
    private static DependencyProperty GroupingCheckBoxVisibilityProperty;
    private static DependencyProperty GroupingCheckBoxContentProperty;
    private static DependencyProperty IsGroupingCheckBoxCheckedProperty;
    private static DependencyProperty AutomationNameConverterProperty;
    private static DependencyProperty SearchTooltipProperty;
    private static DependencyProperty SearchStartTooltipProperty;
    private static DependencyProperty SearchClearTooltipProperty;
    private static DependencyProperty SearchWatermarkProperty;
    private static int DefaultSearchControlMaxWidth;
    private SimpleSearchProvider _searchProvider;
    private SimpleSearchTextManager _textManager;
    [CompilerGeneratedAttribute]
private EventHandler`1<SelectionChangedEventArgs> SelectionChanged;
    [CompilerGeneratedAttribute]
private RoutedEventHandler GroupingCheckBoxChecked;
    [CompilerGeneratedAttribute]
private RoutedEventHandler GroupingCheckBoxUnchecked;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal SummaryPageSearchControl SummaryPageSearchControlElement;
    internal Border _searchElementHost;
    internal CheckBox GroupingCheckBox;
    internal SearchGridView searchView;
    private bool _contentLoaded;
    public double GridControlHeight { get; public set; }
    public double GridControlMinHeight { get; public set; }
    public double GridControlMaxHeight { get; public set; }
    public Visibility GroupingCheckBoxVisibility { get; public set; }
    public string GroupingCheckBoxContent { get; public set; }
    public Nullable`1<bool> IsGroupingCheckBoxChecked { get; public set; }
    public IValueConverter AutomationNameConverter { get; public set; }
    public string SearchTooltip { get; public set; }
    public string SearchStartTooltip { get; public set; }
    public string SearchClearTooltip { get; public set; }
    public string SearchWatermark { get; public set; }
    public SearchGridView SearchGridView { get; }
    public ListView ListView { get; }
    internal SimpleSearchTextManager TextSearchManager { get; }
    public object SelectedItem { get; }
    public bool HasSelectedItem { get; }
    private static SummaryPageSearchControl();
    public double get_GridControlHeight();
    public void set_GridControlHeight(double value);
    public double get_GridControlMinHeight();
    public void set_GridControlMinHeight(double value);
    public double get_GridControlMaxHeight();
    public void set_GridControlMaxHeight(double value);
    public Visibility get_GroupingCheckBoxVisibility();
    public void set_GroupingCheckBoxVisibility(Visibility value);
    public string get_GroupingCheckBoxContent();
    public void set_GroupingCheckBoxContent(string value);
    public Nullable`1<bool> get_IsGroupingCheckBoxChecked();
    public void set_IsGroupingCheckBoxChecked(Nullable`1<bool> value);
    public IValueConverter get_AutomationNameConverter();
    public void set_AutomationNameConverter(IValueConverter value);
    public string get_SearchTooltip();
    public void set_SearchTooltip(string value);
    public string get_SearchStartTooltip();
    public void set_SearchStartTooltip(string value);
    public string get_SearchClearTooltip();
    public void set_SearchClearTooltip(string value);
    public string get_SearchWatermark();
    public void set_SearchWatermark(string value);
    private void SummaryPageSearchControl_Loaded(object sender, RoutedEventArgs e);
    private void ListView_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void GroupingCheckBox_Checked(object sender, RoutedEventArgs e);
    private void GroupingCheckBox_Unchecked(object sender, RoutedEventArgs e);
    public void AddColumn(GridViewColumn col);
    public SearchGridView get_SearchGridView();
    public ListView get_ListView();
    internal SimpleSearchTextManager get_TextSearchManager();
    public virtual void OnApplyTemplate();
    public object get_SelectedItem();
    public bool get_HasSelectedItem();
    public void Close();
    private static void OnSearchTooltipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSearchStartTooltipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSearchClearTooltipChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    private static void OnSearchWatermarkChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SelectionChanged(EventHandler`1<SelectionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_GroupingCheckBoxChecked(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GroupingCheckBoxChecked(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_GroupingCheckBoxUnchecked(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_GroupingCheckBoxUnchecked(RoutedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public enum Microsoft.IntelliTrace.Internal.SymbolPathResolverResult : Enum {
    public int value__;
    public static SymbolPathResolverResult Success;
    public static SymbolPathResolverResult TeamProjectNotFound;
    public static SymbolPathResolverResult TestRunNotFound;
    public static SymbolPathResolverResult NoAssociatedBuild;
    public static SymbolPathResolverResult BuildNotFound;
    public static SymbolPathResolverResult BuildHasNoSymbolServer;
    public static SymbolPathResolverResult Cancelled;
}
public class Microsoft.IntelliTrace.Internal.TfsSymbolPathResolverException : Exception {
    public TfsSymbolPathResolverException(string message);
    public TfsSymbolPathResolverException(string message, Exception inner);
    protected TfsSymbolPathResolverException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TraceLogPackage.HistoricalDebugEngineException : InvalidOperationException {
    public HistoricalDebugEngineException(string message);
    public HistoricalDebugEngineException(string message, Exception inner);
    protected HistoricalDebugEngineException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.VisualStudio.TraceLogPackage.IntelliTraceColors : object {
    public static Guid Category;
    private static ThemeResourceKey _DebugHistoryControlPanelColorKey;
    private static ThemeResourceKey _DebugHistoryControlPanelBrushKey;
    private static ThemeResourceKey _DebugHistoryControlPanelTextColorKey;
    private static ThemeResourceKey _DebugHistoryControlPanelTextBrushKey;
    private static ThemeResourceKey _ReportAccentBackgroundColorKey;
    private static ThemeResourceKey _ReportAccentBackgroundBrushKey;
    private static ThemeResourceKey _VizSurfaceRedDarkHighlightColorKey;
    private static ThemeResourceKey _VizSurfaceRedDarkHighlightBrushKey;
    private static ThemeResourceKey _VizSurfaceRedDarkHoverColorKey;
    private static ThemeResourceKey _VizSurfaceRedDarkHoverBrushKey;
    private static ThemeResourceKey _VizSurfaceRedDarkTextColorKey;
    private static ThemeResourceKey _VizSurfaceRedDarkTextBrushKey;
    private static ThemeResourceKey _IntelliTraceTimelineBreakAllBorderColorKey;
    private static ThemeResourceKey _IntelliTraceTimelineBreakAllBorderBrushKey;
    private static ThemeResourceKey _IntelliTraceTimelineBreakAllFillColorKey;
    private static ThemeResourceKey _IntelliTraceTimelineBreakAllFillBrushKey;
    private static ThemeResourceKey _IntelliTraceTImelineBreakpointBorderColorKey;
    private static ThemeResourceKey _IntelliTraceTImelineBreakpointBorderBrushKey;
    private static ThemeResourceKey _IntelliTraceTimelineBreakpointFillColorKey;
    private static ThemeResourceKey _IntelliTraceTimelineBreakpointFillBrushKey;
    private static ThemeResourceKey _IntelliTraceTimelineExceptionBorderColorKey;
    private static ThemeResourceKey _IntelliTraceTimelineExceptionBorderBrushKey;
    private static ThemeResourceKey _IntelliTraceTimelineExceptionFillColorKey;
    private static ThemeResourceKey _IntelliTraceTimelineExceptionFillBrushKey;
    private static ThemeResourceKey _IntelliTraceTimelineStepBorderColorKey;
    private static ThemeResourceKey _IntelliTraceTimelineStepBorderBrushKey;
    private static ThemeResourceKey _IntelliTraceTimelineStepFillColorKey;
    private static ThemeResourceKey _IntelliTraceTimelineStepFillBrushKey;
    public static ThemeResourceKey DebugHistoryControlPanelColorKey { get; }
    public static ThemeResourceKey DebugHistoryControlPanelBrushKey { get; }
    public static ThemeResourceKey DebugHistoryControlPanelTextColorKey { get; }
    public static ThemeResourceKey DebugHistoryControlPanelTextBrushKey { get; }
    public static ThemeResourceKey ReportAccentBackgroundColorKey { get; }
    public static ThemeResourceKey ReportAccentBackgroundBrushKey { get; }
    public static ThemeResourceKey VizSurfaceRedDarkHighlightColorKey { get; }
    public static ThemeResourceKey VizSurfaceRedDarkHighlightBrushKey { get; }
    public static ThemeResourceKey VizSurfaceRedDarkHoverColorKey { get; }
    public static ThemeResourceKey VizSurfaceRedDarkHoverBrushKey { get; }
    public static ThemeResourceKey VizSurfaceRedDarkTextColorKey { get; }
    public static ThemeResourceKey VizSurfaceRedDarkTextBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineBreakAllBorderColorKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineBreakAllBorderBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineBreakAllFillColorKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineBreakAllFillBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTImelineBreakpointBorderColorKey { get; }
    public static ThemeResourceKey IntelliTraceTImelineBreakpointBorderBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineBreakpointFillColorKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineBreakpointFillBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineExceptionBorderColorKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineExceptionBorderBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineExceptionFillColorKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineExceptionFillBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineStepBorderColorKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineStepBorderBrushKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineStepFillColorKey { get; }
    public static ThemeResourceKey IntelliTraceTimelineStepFillBrushKey { get; }
    private static IntelliTraceColors();
    public static ThemeResourceKey get_DebugHistoryControlPanelColorKey();
    public static ThemeResourceKey get_DebugHistoryControlPanelBrushKey();
    public static ThemeResourceKey get_DebugHistoryControlPanelTextColorKey();
    public static ThemeResourceKey get_DebugHistoryControlPanelTextBrushKey();
    public static ThemeResourceKey get_ReportAccentBackgroundColorKey();
    public static ThemeResourceKey get_ReportAccentBackgroundBrushKey();
    public static ThemeResourceKey get_VizSurfaceRedDarkHighlightColorKey();
    public static ThemeResourceKey get_VizSurfaceRedDarkHighlightBrushKey();
    public static ThemeResourceKey get_VizSurfaceRedDarkHoverColorKey();
    public static ThemeResourceKey get_VizSurfaceRedDarkHoverBrushKey();
    public static ThemeResourceKey get_VizSurfaceRedDarkTextColorKey();
    public static ThemeResourceKey get_VizSurfaceRedDarkTextBrushKey();
    public static ThemeResourceKey get_IntelliTraceTimelineBreakAllBorderColorKey();
    public static ThemeResourceKey get_IntelliTraceTimelineBreakAllBorderBrushKey();
    public static ThemeResourceKey get_IntelliTraceTimelineBreakAllFillColorKey();
    public static ThemeResourceKey get_IntelliTraceTimelineBreakAllFillBrushKey();
    public static ThemeResourceKey get_IntelliTraceTImelineBreakpointBorderColorKey();
    public static ThemeResourceKey get_IntelliTraceTImelineBreakpointBorderBrushKey();
    public static ThemeResourceKey get_IntelliTraceTimelineBreakpointFillColorKey();
    public static ThemeResourceKey get_IntelliTraceTimelineBreakpointFillBrushKey();
    public static ThemeResourceKey get_IntelliTraceTimelineExceptionBorderColorKey();
    public static ThemeResourceKey get_IntelliTraceTimelineExceptionBorderBrushKey();
    public static ThemeResourceKey get_IntelliTraceTimelineExceptionFillColorKey();
    public static ThemeResourceKey get_IntelliTraceTimelineExceptionFillBrushKey();
    public static ThemeResourceKey get_IntelliTraceTimelineStepBorderColorKey();
    public static ThemeResourceKey get_IntelliTraceTimelineStepBorderBrushKey();
    public static ThemeResourceKey get_IntelliTraceTimelineStepFillColorKey();
    public static ThemeResourceKey get_IntelliTraceTimelineStepFillBrushKey();
}
internal static class PackageGuids : object {
    internal static Guid guidIntelliTracePackage;
    internal static Guid guidIntelliTraceCmdSet;
    internal static Guid guidIntelliTraceHubExtensionCmdSet;
    internal static Guid guidDetailsEditorFactory;
    internal static Guid guidAD7Engine;
    internal static Guid guidTraceDebugEngine;
    internal static Guid guidCustomDebuggerEventHandlerService;
    internal static Guid guidNativeEngine;
    internal static string strIntelliTracePackageGuid;
    internal static string strSolutionExplorerToolWindowGuid;
    internal static string strDebugLaunchHookGuid;
    internal static string strEditorFactoryChooserGuid;
    internal static string strToolsOptionsAdvancedGuid;
    internal static string strToolsOptionsDiagnosticEventsGuid;
    internal static string strToolsOptionsGeneralGuid;
    internal static string strToolsOptionsModulesGuid;
    internal static string strTraceLogEditorFactoryGuid;
    internal static string strDetailsEditorFactoryGuid;
    internal static string strDebugEngineGuid;
    internal static string strProgramProviderGuid;
    internal static string strCustomDebuggerEventHandlerServiceGuid;
    internal static string strSnapshotDebuggerEventHandlerServiceGuid;
    private static PackageGuids();
}
internal static class VsComponentMessageCodes : object {
    internal static UInt32 GetTraceAttachSettings;
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
