[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[InterfaceTypeAttribute("1")]
[GuidAttribute("5E1C7ABD-5EBF-462C-866A-8FDCD3678250")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Debugger.Interop.IDebugTimedEvent140 {
    public abstract virtual void GetTimeStamp(UInt64& pTimeStamp);
}
[CompilerGeneratedAttribute]
[GuidAttribute("D4A891BB-3F73-4964-A599-8B1210BCBC95")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Debugger.Interop.IDebugWrappedMessageEvent140 {
    public abstract virtual void GetTimedEventCount(UInt32& pceltEvents);
    public abstract virtual void GetTimedEvent(UInt32 index, String& pbstrMessage, UInt64& timeStamp);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.AggregatedStack : object {
    private List`1<DiagnosticEventInstance> _diagnosticEventInstances;
    [CompilerGeneratedAttribute]
private IPrefixTreeNode`1<IIntelliTraceStackFrame> <RawFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    private IPrefixTreeNode`1<IIntelliTraceStackFrame> RawFrames { get; private set; }
    public int Count { get; internal set; }
    public int FrameCount { get; }
    public IEnumerable`1<IIntelliTraceStackFrame> BottomUpFrames { get; }
    public IEnumerable`1<IIntelliTraceStackFrame> TopDownFrames { get; }
    public IList`1<DiagnosticEventInstance> DiagnosticEventInstances { get; }
    internal AggregatedStack(IPrefixTreeNode`1<IIntelliTraceStackFrame> rawFrames);
    [CompilerGeneratedAttribute]
private IPrefixTreeNode`1<IIntelliTraceStackFrame> get_RawFrames();
    [CompilerGeneratedAttribute]
private void set_RawFrames(IPrefixTreeNode`1<IIntelliTraceStackFrame> value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
internal void set_Count(int value);
    public int get_FrameCount();
    public IEnumerable`1<IIntelliTraceStackFrame> get_BottomUpFrames();
    public IEnumerable`1<IIntelliTraceStackFrame> get_TopDownFrames();
    public IList`1<DiagnosticEventInstance> get_DiagnosticEventInstances();
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.DiagnosticEventInstance : object {
    [CompilerGeneratedAttribute]
private long <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LoggerThreadId>k__BackingField;
    public long Ordinal { get; private set; }
    public Nullable`1<Guid> ActivityId { get; private set; }
    public int LoggerThreadId { get; private set; }
    public DiagnosticEventInstance(long ordinal, Nullable`1<Guid> activityId, int loggerThreadId);
    [CompilerGeneratedAttribute]
public long get_Ordinal();
    [CompilerGeneratedAttribute]
private void set_Ordinal(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ActivityId();
    [CompilerGeneratedAttribute]
private void set_ActivityId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public int get_LoggerThreadId();
    [CompilerGeneratedAttribute]
private void set_LoggerThreadId(int value);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.ExceptionAnalysisResults : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, StackAggregator> <AggregatedData>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<long, Location> <EventRedirects>k__BackingField;
    public IDictionary`2<string, StackAggregator> AggregatedData { get; public set; }
    public IDictionary`2<long, Location> EventRedirects { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, StackAggregator> get_AggregatedData();
    [CompilerGeneratedAttribute]
public void set_AggregatedData(IDictionary`2<string, StackAggregator> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<long, Location> get_EventRedirects();
    [CompilerGeneratedAttribute]
public void set_EventRedirects(IDictionary`2<long, Location> value);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.ExceptionGroupingAnalysis : object {
    private TraceLog _log;
    public ExceptionGroupingAnalysis(TraceLog log);
    public GroupedExceptionAnalysisResults GroupExceptions();
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.ExceptionInstance : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandle <Exception>k__BackingField;
    public int Count { get; public set; }
    public EventHandle Exception { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public EventHandle get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(EventHandle value);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.GlobalExceptionAnalysis : object {
    private static string PageType;
    private static string ProcessRequestMainName;
    private static string ProcessRequestName;
    private static string TemplateControlType;
    private static string OnErrorName;
    private static Byte[] Signature;
    private static string SystemWebName;
    [CompilerGeneratedAttribute]
private int <UnhandledExceptionEventId>k__BackingField;
    [CompilerGeneratedAttribute]
private IIntelliTraceTokenProvider <TokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IIntelliTraceThreadProvider <ThreadProvider>k__BackingField;
    private UInt32 _processRequestMainToken;
    private UInt32 _onErrorToken;
    private UInt32 _processRequestToken;
    private int UnhandledExceptionEventId { get; private set; }
    private IIntelliTraceTokenProvider TokenProvider { get; private set; }
    private IIntelliTraceThreadProvider ThreadProvider { get; private set; }
    public GlobalExceptionAnalysis(IIntelliTraceTokenProvider tokenProvider, IIntelliTraceThreadProvider threadProvider, int unhandledExceptionEventId);
    private static GlobalExceptionAnalysis();
    [CompilerGeneratedAttribute]
private int get_UnhandledExceptionEventId();
    [CompilerGeneratedAttribute]
private void set_UnhandledExceptionEventId(int value);
    [CompilerGeneratedAttribute]
private IIntelliTraceTokenProvider get_TokenProvider();
    [CompilerGeneratedAttribute]
private void set_TokenProvider(IIntelliTraceTokenProvider value);
    [CompilerGeneratedAttribute]
private IIntelliTraceThreadProvider get_ThreadProvider();
    [CompilerGeneratedAttribute]
private void set_ThreadProvider(IIntelliTraceThreadProvider value);
    public bool InitializeSymbols(ProgramSymbols symbols);
    public ExceptionAnalysisResults AggregateExceptions(IEnumerable`1<DiagnosticEvent> exceptionRelatedEvents);
    private static Nullable`1<UInt32> GetMethodToken(ProgramSymbols symbols, IIntelliTraceTokenProvider provider, string moduleName, string typeName, string methodName, Byte[] signature);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.GroupedExceptionAnalysisResults : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExceptionInstance> <GroupedExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExceptionInstance> <UngroupedExceptions>k__BackingField;
    public IEnumerable`1<ExceptionInstance> GroupedExceptions { get; public set; }
    public IEnumerable`1<ExceptionInstance> UngroupedExceptions { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExceptionInstance> get_GroupedExceptions();
    [CompilerGeneratedAttribute]
public void set_GroupedExceptions(IEnumerable`1<ExceptionInstance> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ExceptionInstance> get_UngroupedExceptions();
    [CompilerGeneratedAttribute]
public void set_UngroupedExceptions(IEnumerable`1<ExceptionInstance> value);
}
internal interface Microsoft.VisualStudio.IntelliTrace.Analysis.IPrefixTreeNode`1 {
    public IEnumerable`1<T> Characters { get; }
    public IEnumerable`1<T> ReverseCharacters { get; }
    public int Length { get; }
    public object Data { get; public set; }
    public abstract virtual IEnumerable`1<T> get_Characters();
    public abstract virtual IEnumerable`1<T> get_ReverseCharacters();
    public abstract virtual int get_Length();
    public abstract virtual object get_Data();
    public abstract virtual void set_Data(object value);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.PrefixTree`1 : object {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<T> <EqualityChecker>k__BackingField;
    [CompilerGeneratedAttribute]
private PrefixTreeNode`1<T> <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    internal IEqualityComparer`1<T> EqualityChecker { get; internal set; }
    private PrefixTreeNode`1<T> Root { get; private set; }
    public IEnumerable`1<PrefixTreeNode`1<T>> SubStrings { get; }
    public int Count { get; private set; }
    public PrefixTree`1(IEqualityComparer`1<T> equalityChecker);
    [CompilerGeneratedAttribute]
internal IEqualityComparer`1<T> get_EqualityChecker();
    [CompilerGeneratedAttribute]
internal void set_EqualityChecker(IEqualityComparer`1<T> value);
    [CompilerGeneratedAttribute]
private PrefixTreeNode`1<T> get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(PrefixTreeNode`1<T> value);
    public IEnumerable`1<PrefixTreeNode`1<T>> get_SubStrings();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public IPrefixTreeNode`1<T> AddSubString(IEnumerable`1<T> characters);
    public bool ContainsSubString(IEnumerable`1<T> characters);
    public IPrefixTreeNode`1<T> FindSubString(IEnumerable`1<T> characters);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.PrefixTreeNode`1 : object {
    [CompilerGeneratedAttribute]
private T <Character>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PrefixTreeNode`1<T>> <ChildNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private PrefixTreeNode`1<T> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTerminating>k__BackingField;
    [CompilerGeneratedAttribute]
private PrefixTree`1<T> <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public T Character { get; private set; }
    public List`1<PrefixTreeNode`1<T>> ChildNodes { get; private set; }
    public PrefixTreeNode`1<T> Parent { get; private set; }
    public bool IsTerminating { get; private set; }
    private PrefixTree`1<T> Tree { get; private set; }
    public object Data { get; public set; }
    public IEnumerable`1<PrefixTreeNode`1<T>> AllSubStrings { get; }
    public IEnumerable`1<T> ReverseCharacters { get; }
    public IEnumerable`1<T> Characters { get; }
    public int Length { get; private set; }
    private PrefixTreeNode`1(PrefixTree`1<T> tree, PrefixTreeNode`1<T> parent);
    [CompilerGeneratedAttribute]
public T get_Character();
    [CompilerGeneratedAttribute]
private void set_Character(T value);
    [CompilerGeneratedAttribute]
public List`1<PrefixTreeNode`1<T>> get_ChildNodes();
    [CompilerGeneratedAttribute]
private void set_ChildNodes(List`1<PrefixTreeNode`1<T>> value);
    [CompilerGeneratedAttribute]
public PrefixTreeNode`1<T> get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(PrefixTreeNode`1<T> value);
    [CompilerGeneratedAttribute]
public bool get_IsTerminating();
    [CompilerGeneratedAttribute]
private void set_IsTerminating(bool value);
    [CompilerGeneratedAttribute]
private PrefixTree`1<T> get_Tree();
    [CompilerGeneratedAttribute]
private void set_Tree(PrefixTree`1<T> value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(object value);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.IntelliTrace.Analysis.PrefixTreeNode`1/<get_AllSubStrings>d__25")]
public IEnumerable`1<PrefixTreeNode`1<T>> get_AllSubStrings();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.IntelliTrace.Analysis.PrefixTreeNode`1/<get_ReverseCharacters>d__27")]
public sealed virtual IEnumerable`1<T> get_ReverseCharacters();
    public sealed virtual IEnumerable`1<T> get_Characters();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    internal static PrefixTreeNode`1<T> CreateRootNode(PrefixTree`1<T> tree);
    private PrefixTreeNode`1<T> FindChild(T character);
    private PrefixTreeNode`1<T> AddChild(T character);
    internal bool AddSubString(IEnumerable`1<T> characters, PrefixTreeNode`1& result);
    internal PrefixTreeNode`1<T> FindSubString(IEnumerable`1<T> characters);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.StackAggregator : object {
    [CompilerGeneratedAttribute]
private PrefixTree`1<IIntelliTraceStackFrame> <StackTree>k__BackingField;
    private PrefixTree`1<IIntelliTraceStackFrame> StackTree { get; private set; }
    public int Count { get; }
    public IEnumerable`1<AggregatedStack> Stacks { get; }
    [CompilerGeneratedAttribute]
private PrefixTree`1<IIntelliTraceStackFrame> get_StackTree();
    [CompilerGeneratedAttribute]
private void set_StackTree(PrefixTree`1<IIntelliTraceStackFrame> value);
    public int get_Count();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.IntelliTrace.Analysis.StackAggregator/<get_Stacks>d__7")]
public IEnumerable`1<AggregatedStack> get_Stacks();
    public bool ContainsStack(IEnumerable`1<IIntelliTraceStackFrame> stackFrames);
    public AggregatedStack AddStack(DiagnosticEventInstance exceptionEvent, IEnumerable`1<IIntelliTraceStackFrame> stackFrames);
    public AggregatedStack GetStack(IEnumerable`1<IIntelliTraceStackFrame> stackFrame);
}
internal class Microsoft.VisualStudio.IntelliTrace.Analysis.StackFrameComparer : object {
    public sealed virtual bool Equals(IIntelliTraceStackFrame x, IIntelliTraceStackFrame y);
    public sealed virtual int GetHashCode(IIntelliTraceStackFrame obj);
}
internal enum Microsoft.VisualStudio.TraceLogPackage.AD7DebuggerEvent : Enum {
    public int value__;
    public static AD7DebuggerEvent SessionCreate;
    public static AD7DebuggerEvent SessionDestroy;
    public static AD7DebuggerEvent ProcessCreate;
    public static AD7DebuggerEvent ProcessDestroy;
    public static AD7DebuggerEvent ProcessStop;
    public static AD7DebuggerEvent ProcessContinue;
    public static AD7DebuggerEvent ProcessEnterBreak;
}
internal enum Microsoft.VisualStudio.TraceLogPackage.Analysis.ColumnSortOrder : Enum {
    public int value__;
    public static ColumnSortOrder Method;
    public static ColumnSortOrder EndTime;
    public static ColumnSortOrder StartTime;
    public static ColumnSortOrder Duration;
    public static ColumnSortOrder Url;
    public static ColumnSortOrder Response;
    public static ColumnSortOrder UserAgent;
    public static ColumnSortOrder Ip;
    public static ColumnSortOrder SessionId;
    public static ColumnSortOrder Description;
    public static ColumnSortOrder Source;
    public static ColumnSortOrder LightEvent;
    public static ColumnSortOrder GroupDescriptionCount;
    public static ColumnSortOrder GroupDescriptionAverageDuration;
    public static ColumnSortOrder GroupDescriptionMaxDuration;
    public static ColumnSortOrder GroupDescriptionNewestEventTime;
}
internal class Microsoft.VisualStudio.TraceLogPackage.Analysis.PerformanceEventAnalyzer : ScopedEventAnalyzer`1<PerformanceDataEvent> {
    public static ColumnSortOrder PerformanceEventDefaultSortOrder;
    public static ListSortDirection PerformanceEventDefaultSortDirection;
    public static ColumnSortOrder PerformanceGroupDefaultSortOrder;
    public static ListSortDirection PerformanceGroupDefaultSortDirection;
    private static int DescriptionBatchSize;
    private Dispatcher _tempDispatcher;
    [CompilerGeneratedAttribute]
private IntelliTraceProcess <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceDescriptionWeaver <PerformanceDescriptionWeaver>k__BackingField;
    private Dictionary`2<int, PerformanceEventDescriptionGroup> _descriptionOrderCache;
    private List`1<PerformanceEventDescriptionGroup> _descriptionGroups;
    private List`1<PerformanceEventDescriptionGroup> _filteredDescriptionGroups;
    private IntelliTraceProcess Process { get; private set; }
    private PerformanceDescriptionWeaver PerformanceDescriptionWeaver { get; private set; }
    public PerformanceEventAnalyzer(IntelliTraceProcess process);
    [CompilerGeneratedAttribute]
private IntelliTraceProcess get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(IntelliTraceProcess value);
    [CompilerGeneratedAttribute]
private PerformanceDescriptionWeaver get_PerformanceDescriptionWeaver();
    [CompilerGeneratedAttribute]
private void set_PerformanceDescriptionWeaver(PerformanceDescriptionWeaver value);
    public void PreProcessPerformanceEvents(Dispatcher dispatcher);
    public PerformanceEventDescriptionGroup GetGroupForPerformanceEvent(PerformanceDataEvent ev);
    public string GetDescriptionForPerformanceEvent(PerformanceDataEvent ev);
    public PerformanceDataEvent GetPerformanceEventById(int id);
    internal IAccessList`1<PerformanceDataEvent> GetPerformanceDataAccessList();
    internal IAccessList`1<PerformanceDataEvent> GetPerformanceDataAccessList(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal IAccessList`1<PerformanceDataEvent> GetPerformanceDataAccessList(Predicate`1<PerformanceDataEvent> filterPredicate, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal IAccessList`1<PerformanceEventDescriptionGroup> GetGroupedPerformanceDataAccessList(bool hideLightEvents);
    internal IAccessList`1<PerformanceEventDescriptionGroup> GetGroupedPerformanceDataAccessList(ColumnSortOrder sortOrder, ListSortDirection sortDirection, bool hideLightEvents);
    internal IAccessList`1<PerformanceEventDescriptionGroup> GetGroupedPerformanceDataAccessList(Predicate`1<PerformanceEventDescriptionGroup> filterPredicate, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection, bool hideLightEvents);
    internal void ClearPerformanceDataEventFilter();
    protected virtual void SetComparisonFunctions();
    protected virtual void PreProcess(StreamChainFilter`1<PerformanceDataEvent> source);
    private static IAccessList`1<PerformanceEventDescriptionGroup> GetSortedDescriptionGroupsList(List`1<PerformanceEventDescriptionGroup> descriptionGroups, ColumnSortOrder sortOrder, ListSortDirection sortDirection, bool hideLightEvents);
    private void BuildDescriptionBatch(PerformanceEventDescriptionFormatter formatter, List`1<PerformanceEventDescription> batchedDescriptions, List`1<CachedDescription> cachedDescriptions);
    private static PerformanceEventDescriptionSegment GetRelatedSegment(DescriptionPiece ev, PerformanceEventDescription re);
    private IEnumerable`1<DescriptionPiece> SelectDescriptionEvents(EventWrapper`1<PerformanceDataEvent> ev);
    private static void ExtractDescriptionEvents(List`1<DescriptionPiece> descriptionRelatedEvents, PerformanceDataEvent dataEvent, PerformanceEventDescriptionData descriptionData, bool isHeaviest);
    [CompilerGeneratedAttribute]
private int <SetComparisonFunctions>b__31_4(PerformanceDataEvent x, PerformanceDataEvent y);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Analysis.PerformanceEventDescriptionGroup : object {
    private Chain _eventChain;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastHeavyTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastLightTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalHeavyTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LongestHeavyTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LongestLightTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalLightTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LightEventCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <HeavyEventCount>k__BackingField;
    [CompilerGeneratedAttribute]
private EventToken <SlowestHeavyEventInGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private EventToken <SlowestLightEventInGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private EventToken <LastHeavyEventInGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private EventToken <LastLightEventInGroup>k__BackingField;
    public string Description { get; public set; }
    public long LastHeavyTime { get; public set; }
    public long LastLightTime { get; public set; }
    public long TotalHeavyTicks { get; public set; }
    public long LongestHeavyTicks { get; public set; }
    public long LongestLightTicks { get; public set; }
    public long TotalLightTicks { get; public set; }
    public UInt32 LightEventCount { get; public set; }
    public UInt32 HeavyEventCount { get; public set; }
    public EventToken SlowestHeavyEventInGroup { get; public set; }
    public EventToken SlowestLightEventInGroup { get; public set; }
    public EventToken LastHeavyEventInGroup { get; public set; }
    public EventToken LastLightEventInGroup { get; public set; }
    public PerformanceEventDescriptionGroup(Chain eventChain);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public long get_LastHeavyTime();
    [CompilerGeneratedAttribute]
public void set_LastHeavyTime(long value);
    [CompilerGeneratedAttribute]
public long get_LastLightTime();
    [CompilerGeneratedAttribute]
public void set_LastLightTime(long value);
    [CompilerGeneratedAttribute]
public long get_TotalHeavyTicks();
    [CompilerGeneratedAttribute]
public void set_TotalHeavyTicks(long value);
    [CompilerGeneratedAttribute]
public long get_LongestHeavyTicks();
    [CompilerGeneratedAttribute]
public void set_LongestHeavyTicks(long value);
    [CompilerGeneratedAttribute]
public long get_LongestLightTicks();
    [CompilerGeneratedAttribute]
public void set_LongestLightTicks(long value);
    [CompilerGeneratedAttribute]
public long get_TotalLightTicks();
    [CompilerGeneratedAttribute]
public void set_TotalLightTicks(long value);
    [CompilerGeneratedAttribute]
public UInt32 get_LightEventCount();
    [CompilerGeneratedAttribute]
public void set_LightEventCount(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_HeavyEventCount();
    [CompilerGeneratedAttribute]
public void set_HeavyEventCount(UInt32 value);
    [CompilerGeneratedAttribute]
public EventToken get_SlowestHeavyEventInGroup();
    [CompilerGeneratedAttribute]
public void set_SlowestHeavyEventInGroup(EventToken value);
    [CompilerGeneratedAttribute]
public EventToken get_SlowestLightEventInGroup();
    [CompilerGeneratedAttribute]
public void set_SlowestLightEventInGroup(EventToken value);
    [CompilerGeneratedAttribute]
public EventToken get_LastHeavyEventInGroup();
    [CompilerGeneratedAttribute]
public void set_LastHeavyEventInGroup(EventToken value);
    [CompilerGeneratedAttribute]
public EventToken get_LastLightEventInGroup();
    [CompilerGeneratedAttribute]
public void set_LastLightEventInGroup(EventToken value);
    public PerformanceDataEvent GetLastHeavyEventInGroup();
    public PerformanceDataEvent GetLastLightEventInGroup();
    public PerformanceDataEvent GetLongestHeavyEventInGroup();
    public PerformanceDataEvent GetLongestLightEventInGroup();
    private PerformanceDataEvent GetEvent(UInt32 eventCount, EventToken token);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.Analysis.PerformanceGroupExtensions : object {
    [ExtensionAttribute]
public static UInt32 GetEventCount(PerformanceEventDescriptionGroup group, bool hideLightEvents);
    [ExtensionAttribute]
public static long GetTotalTicks(PerformanceEventDescriptionGroup group, bool hideLightEvents);
    [ExtensionAttribute]
public static long GetMaxTicks(PerformanceEventDescriptionGroup group, bool hideLightEvents);
    [ExtensionAttribute]
public static long GetLastTime(PerformanceEventDescriptionGroup group, bool hideLightEvents);
    [ExtensionAttribute]
public static long GetAverageDuration(PerformanceEventDescriptionGroup group, bool hideLightEvents);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Analysis.PreparedFilters`1 : object {
    private Dictionary`2<ColumnSortOrder, FilterIndex`1<T>> _indexes;
    private ScopedEventAnalyzer`1<T> _analyzer;
    public PreparedFilters`1(ScopedEventAnalyzer`1<T> analyzer);
    public void CalculateIndexes(StreamChainFilter`1<T> source, IEnumerable`1<ColumnSortOrder> sorts);
    public IAccessList`1<T> GetPreparedFilter(WebRequestStreamChain chain, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    private void AddSortOrderIndex(StreamChainFilter`1<T> source, ColumnSortOrder sortOrder);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Analysis.ScopedEventAnalyzer`1 : object {
    [CompilerGeneratedAttribute]
private bool <PreProcessingDone>k__BackingField;
    [CompilerGeneratedAttribute]
private IntelliTraceFileBase <File>k__BackingField;
    [CompilerGeneratedAttribute]
private WebChainWeaver <WebChainWeaver>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<ColumnSortOrder, Comparison`1<T>> <RequestComparisonFunctions>k__BackingField;
    private PreparedFilters`1<T> _filters;
    private WhereFilter`1<T> _filteredList;
    private WebRequestStreamChain _filterChain;
    protected bool PreProcessingDone { get; private set; }
    protected IntelliTraceFileBase File { get; private set; }
    protected WebChainWeaver WebChainWeaver { get; private set; }
    public IDictionary`2<ColumnSortOrder, Comparison`1<T>> RequestComparisonFunctions { get; private set; }
    protected ScopedEventAnalyzer`1(IntelliTraceFileBase file);
    [CompilerGeneratedAttribute]
protected bool get_PreProcessingDone();
    [CompilerGeneratedAttribute]
private void set_PreProcessingDone(bool value);
    [CompilerGeneratedAttribute]
protected IntelliTraceFileBase get_File();
    [CompilerGeneratedAttribute]
private void set_File(IntelliTraceFileBase value);
    [CompilerGeneratedAttribute]
protected WebChainWeaver get_WebChainWeaver();
    [CompilerGeneratedAttribute]
private void set_WebChainWeaver(WebChainWeaver value);
    [CompilerGeneratedAttribute]
public IDictionary`2<ColumnSortOrder, Comparison`1<T>> get_RequestComparisonFunctions();
    [CompilerGeneratedAttribute]
private void set_RequestComparisonFunctions(IDictionary`2<ColumnSortOrder, Comparison`1<T>> value);
    protected virtual void PreProcess(StreamChainFilter`1<T> source);
    protected abstract virtual void SetComparisonFunctions();
    protected virtual IEnumerable`1<ColumnSortOrder> GetPreparedFilters();
    private IAccessList`1<T> AddSortChainFilter(ChainFilter`1<T> sourceChain, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    private void InitializePreparedFilters(StreamChainFilter`1<T> source);
    protected virtual void PreProcessEvents();
    internal IAccessList`1<T> GetAccessList();
    public IAccessList`1<T> GetAccessList(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    public IAccessList`1<T> GetAccessList(Predicate`1<T> filterPredicate, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    public void ClearFilter();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Analysis.WebRequestEventAnalyzer : ScopedEventAnalyzer`1<WebRequestEvent> {
    public static ColumnSortOrder WebRequestDefaultSortOrder;
    public static ListSortDirection WebRequestDefaultSortDirection;
    private Dictionary`2<Guid, EventToken> _activityIdMapping;
    public WebRequestEventAnalyzer(IntelliTraceFileBase file);
    public void PreProcessWebRequests();
    protected virtual void PreProcess(StreamChainFilter`1<WebRequestEvent> source);
    public WebRequestEvent GetWebRequestEventForActivityId(Guid activityId);
    private void InitializeActivityIdMapping(StreamChainFilter`1<WebRequestEvent> source);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.Analysis.WebRequestEventAnalyzer/<GetPreparedFilters>d__8")]
protected virtual IEnumerable`1<ColumnSortOrder> GetPreparedFilters();
    protected virtual void SetComparisonFunctions();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<ColumnSortOrder> <>n__0();
}
internal class Microsoft.VisualStudio.TraceLogPackage.AnalysisLoadData : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, StackAggregator> <AggregatedData>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticEventRedirect <DiagnosticEventRedirect>k__BackingField;
    public IDictionary`2<string, StackAggregator> AggregatedData { get; public set; }
    public IDiagnosticEventRedirect DiagnosticEventRedirect { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, StackAggregator> get_AggregatedData();
    [CompilerGeneratedAttribute]
public void set_AggregatedData(IDictionary`2<string, StackAggregator> value);
    [CompilerGeneratedAttribute]
public IDiagnosticEventRedirect get_DiagnosticEventRedirect();
    [CompilerGeneratedAttribute]
public void set_DiagnosticEventRedirect(IDiagnosticEventRedirect value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.AnalysisRedirector : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<long, Location> <EventRedirect>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    public IDictionary`2<long, Location> EventRedirect { get; public set; }
    public int EventId { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<long, Location> get_EventRedirect();
    [CompilerGeneratedAttribute]
public void set_EventRedirect(IDictionary`2<long, Location> value);
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(int value);
    public sealed virtual bool CanRedirect(DiagnosticEvent original);
    public sealed virtual Location Redirect(DiagnosticEvent original);
}
internal class Microsoft.VisualStudio.TraceLogPackage.AnalysisWorker : object {
    [CompilerGeneratedAttribute]
private GlobalExceptionAnalysis <GlobalExceptionAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <TraceLog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanAnalyzeExceptions>k__BackingField;
    private GlobalExceptionAnalysis GlobalExceptionAnalysis { get; private set; }
    private TraceLog TraceLog { get; private set; }
    private bool CanAnalyzeExceptions { get; private set; }
    public AnalysisWorker(TraceLog traceLog);
    [CompilerGeneratedAttribute]
private GlobalExceptionAnalysis get_GlobalExceptionAnalysis();
    [CompilerGeneratedAttribute]
private void set_GlobalExceptionAnalysis(GlobalExceptionAnalysis value);
    [CompilerGeneratedAttribute]
private TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
private void set_TraceLog(TraceLog value);
    [CompilerGeneratedAttribute]
private bool get_CanAnalyzeExceptions();
    [CompilerGeneratedAttribute]
private void set_CanAnalyzeExceptions(bool value);
    public void InitializeSymbols(ProgramSymbols symbols);
    public AnalysisLoadData AggregateExceptions();
    private DiagnosticChain GetChain();
}
internal class Microsoft.VisualStudio.TraceLogPackage.AppInsightsLogPlaybackTelemetryService : object {
    private static IVsTelemetrySession _telemetrySession;
    private static IVsTelemetryService _telemetrySevice;
    private static string IntelliTraceEventGroup;
    private static string LogOpeningEvent;
    private static string IntelliTracePropertyGroup;
    private static string IntelliTraceLogPropertyGroup;
    private static string IntelliTraceLogLaunchTypePropery;
    private static string IntelliTraceLogTargetProperty;
    private static string IntelliTraceLogTruncatedProperty;
    private static string IntelliTraceLogFileSizeProperty;
    private static string IntelliTraceLogVersionPropertyGroup;
    private static string IntelliTraceLogVersionMajorProperty;
    private static string IntelliTraceLogVersionMinorProperty;
    private static string IntelliTraceLogVersionReleaseProperty;
    private static string IntelliTraceLogHasCallsInfoProperty;
    private static string IntelliTraceLogHasExceptionDataProperty;
    private static string IntelliTraceLogHasPerformanceDataProperty;
    private static string IntelliTraceLogHasBuildInfoProperty;
    private static string IntelliTraceLogHasAzureDataProperty;
    private static string IntelliTraceLogLaunchTypeValueF5;
    private static string IntelliTraceLogLaunchTypeValueAttach;
    private static string IntelliTraceLogLaunchTypeValueCommandLine;
    private static string IntelliTraceLogLaunchTypeValueSystemCenterAPI;
    private static string IntelliTraceLogLaunchTypeValueGenericAPI;
    private static string IntelliTraceLogLaunchTypeValueMMAAPI;
    private static string IntelliTraceLogLaunchTypeValueAppInsights;
    private static string IntelliTraceLogLaunchTypeValuePowerShellIIS;
    private static string IntelliTraceLogLaunchTypeValueTest;
    private static string IntelliTraceLogLaunchTypeValueMSTest;
    private static string IntelliTraceLogLaunchTypeValueMTM;
    private static string IntelliTraceLogLaunchTypeValueOther;
    private static string IntelliTraceLogTargetValueSharePoint;
    private static string IntelliTraceLogTargetValueASPNet;
    private static AppInsightsLogPlaybackTelemetryService();
    public sealed virtual void OnLogOpening(LogOpeningInfo info);
    public static void GetLaunchTypeAndTarget(TraceLog traceLog, FileVersionInfo fileVersionInfo, String& launchType, String& target);
    public static long GetLogFileSize(string fileName);
    public static bool HasAzureData(TraceLog traceLog);
    public static bool IsLogTruncated(IntelliTraceFile traceLogFile, TraceLog traceLog, FileVersionInfo fileVersionInfo);
    public static bool HasCallsInfo(TraceLog traceLog);
    public static bool HasExceptionData(TraceLogPageComponentSource source);
    public static bool HasPerformanceData(TraceLogPageComponentSource source, TraceLog traceLog);
    public static bool HasBuildInfo(TraceLog traceLog);
    private static bool IsFlagSet(int value, int flag);
    private static bool IsDev11RTMVersion(FileVersionInfo fileVersionInfo);
}
internal class Microsoft.VisualStudio.TraceLogPackage.AppInsightsToolsOptionTelemetryService : object {
    private static IVsTelemetrySession _telemetrySession;
    private static IVsTelemetryService _telemetrySevice;
    private static string ToolOptionsEventGroup;
    private static string IntelliTraceStatusEvent;
    private static string ToolOptionsPropertyGroup;
    private static string IntelliTraceStatusProperty;
    private static string IntelliTraceSnapshotOnExceptionProperty;
    private static string MaxIntelliTraceSnapshotOnExceptionProperty;
    private static string IntelliTraceStatusOff;
    private static string IntelliTraceStatusOnWithSnapshots;
    private static string IntelliTraceStatusOnWithEvents;
    private static string IntelliTraceStatusOnWithCalls;
    private static AppInsightsToolsOptionTelemetryService();
    public sealed virtual void OnDisableIntelliTrace();
    public sealed virtual void OnEnableIntelliTraceWithEvents();
    public sealed virtual void OnEnableIntelliTraceWithSnapshots();
    public sealed virtual void OnEnableIntelliTraceWithCalls();
    public sealed virtual void OnIntelliTraceSnapshotOnException(Nullable`1<bool> isEnabled, Nullable`1<int> maxNumber);
}
public class Microsoft.VisualStudio.TraceLogPackage.CalloutPopup : Popup {
    private Action _dismissAction;
    internal CalloutPopup root;
    internal RectPlacementCalloutBorder calloutBorder;
    private bool _contentLoaded;
    public void Open(Action dismissAction);
    public void Dismiss();
    private void CalloutPopup_Opened(object sender, EventArgs e);
    private void CalloutPopup_IsKeyboardFocusWithinChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void CalloutPopup_KeyDown(object sender, KeyEventArgs e);
    private void RestoreFocusToTarget();
    private void CalloutPopup_Closed(object sender, EventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.ChildFrameRetriever : object {
    private IHistoricalDebuggingFrame _parent;
    private IBidiEnumChildNodeInfo100 _enum;
    private static int _numOfPages;
    private FramePage[] _cachedPages;
    private static int _pageSize;
    private int _rowCount;
    private int _lowestDataIndexFetched;
    private int _highestDataIndexFetched;
    private bool _lowestDataIndexReached;
    private bool _highestDataIndexReached;
    private int _currentIndex;
    private bool _isFetchAndCachePageQueued;
    private bool _COMInvokeInProgress;
    private bool _disposed;
    private NullChildFrameRetriever _zombieRetriever;
    [CompilerGeneratedAttribute]
private EventHandler`1<RowCountChangedEventArgs> RowCountChanged;
    [CompilerGeneratedAttribute]
private EventHandler NewDataFetched;
    internal int RowCount { get; }
    internal IHistoricalDebuggingFrame Parent { get; }
    internal bool LowestIndexReached { get; }
    internal bool HighestIndexReached { get; }
    internal ChildFrameRetriever(IHistoricalDebuggingFrame parent, IBidiEnumChildNodeInfo100 pEnum);
    private static ChildFrameRetriever();
    [CompilerGeneratedAttribute]
internal void add_RowCountChanged(EventHandler`1<RowCountChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RowCountChanged(EventHandler`1<RowCountChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_NewDataFetched(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_NewDataFetched(EventHandler value);
    internal virtual int get_RowCount();
    internal virtual IHistoricalDebuggingFrame get_Parent();
    internal virtual bool get_LowestIndexReached();
    internal virtual bool get_HighestIndexReached();
    private int MapToLowerBound(int dataRowIndex);
    private int MapToUpperBound(int dataRowIndex);
    private void Reset(ENUM_ORIGIN origin);
    private void ResetDueToError();
    private void SetErrorState();
    private void Zombify();
    private void PopulatePages(int startingIndexOfCachedPages, List`1<IHistoricalDebuggingFrame> fetchedNodes, int rowIndexOfFirstItem);
    internal virtual int Prefetch(ChildFrameRetrieverOrigin origin);
    private List`1<IHistoricalDebuggingFrame> Next(int count);
    private List`1<IHistoricalDebuggingFrame> Previous(int count);
    private bool SkipForward(int count);
    private bool SkipBackward(int count);
    private int FindCachedPage(int rowIndex);
    private int FindFurthestPageIndex(int rowIndex);
    private List`1<IHistoricalDebuggingFrame> FetchPage(int dataRowIndex, Int32& pageIndexEdge, Boolean& isForward);
    private void FetchAndCachePage(int dataRowIndex);
    private void UpdateRowCount(int dataRowIndex);
    internal virtual IHistoricalDebuggingFrame RetrieveFrame(int contentDataGridIndex);
    internal virtual int IndexOfFrame(IHistoricalDebuggingFrame frame);
    public virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum Microsoft.VisualStudio.TraceLogPackage.ChildFrameRetrieverOrigin : Enum {
    public int value__;
    public static ChildFrameRetrieverOrigin CurrentFrame;
    public static ChildFrameRetrieverOrigin Begin;
    public static ChildFrameRetrieverOrigin End;
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeLensCalloutBorder : Decorator {
    public static DependencyProperty BorderWidthProperty;
    public static DependencyProperty PaddingProperty;
    public static DependencyProperty BorderBrushProperty;
    public static DependencyProperty BackgroundProperty;
    public static DependencyProperty CalloutSizeProperty;
    public static DependencyProperty CalloutTargetProperty;
    public static DependencyProperty MinSquishHeightProperty;
    private static int WM_WINDOWPOSCHANGED;
    private static double DBL_EPSILON;
    [CompilerGeneratedAttribute]
private int <MonitorTop>k__BackingField;
    private Nullable`1<Point> lastTargetScreenLocation;
    [CompilerGeneratedAttribute]
private Point <LastPopupScreenLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private StreamGeometry <BorderGeometryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private GuidelineSet <GuidelineCache>k__BackingField;
    [CompilerGeneratedAttribute]
private HwndSource <HwndCache>k__BackingField;
    public double BorderWidth { get; public set; }
    public Thickness Padding { get; public set; }
    public Brush BorderBrush { get; public set; }
    public Brush Background { get; public set; }
    public Size CalloutSize { get; public set; }
    public double MinSquishHeight { get; public set; }
    public UIElement CalloutTarget { get; public set; }
    private int MonitorTop { get; private set; }
    private Nullable`1<Point> LastTargetScreenLocation { get; private set; }
    protected Point CalloutTargetLocation { get; }
    private Point LastPopupScreenLocation { get; private set; }
    private StreamGeometry BorderGeometryCache { get; private set; }
    private GuidelineSet GuidelineCache { get; private set; }
    private HwndSource HwndCache { get; private set; }
    private static CodeLensCalloutBorder();
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public Thickness get_Padding();
    public void set_Padding(Thickness value);
    public Brush get_BorderBrush();
    public void set_BorderBrush(Brush value);
    public Brush get_Background();
    public void set_Background(Brush value);
    public Size get_CalloutSize();
    public void set_CalloutSize(Size value);
    public double get_MinSquishHeight();
    public void set_MinSquishHeight(double value);
    public UIElement get_CalloutTarget();
    public void set_CalloutTarget(UIElement value);
    public Size GetMaxContentSize(double maxContainerWidth, double maxContainerHeight);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext dc);
    private void SourceChangedHandler(object sender, SourceChangedEventArgs e);
    private void Invalidate();
    private IntPtr WndProcHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    private static void OnCalloutTargetChanged(DependencyObject d, DependencyPropertyChangedEventArgs args);
    private void PlacementTargetLayoutChanged(object sender, EventArgs e);
    private static bool IsThicknessValid(object value);
    private static bool IsZero(double value);
    private static Size HelperCollapseThickness(Thickness th);
    private static Rect HelperDeflateRect(Rect rt, Thickness thick);
    private static GuidelineSet GenerateCalloutGeometry(StreamGeometryContext ctx, Rect rect, Size calloutSize, double calloutOffset, bool calloutBelow, double thickness);
    [CompilerGeneratedAttribute]
private int get_MonitorTop();
    [CompilerGeneratedAttribute]
private void set_MonitorTop(int value);
    private void UpdateMonitorTop(Nullable`1<Point> screenCoord);
    private Nullable`1<Point> get_LastTargetScreenLocation();
    private void set_LastTargetScreenLocation(Nullable`1<Point> value);
    protected virtual Point get_CalloutTargetLocation();
    [CompilerGeneratedAttribute]
private Point get_LastPopupScreenLocation();
    [CompilerGeneratedAttribute]
private void set_LastPopupScreenLocation(Point value);
    [CompilerGeneratedAttribute]
private StreamGeometry get_BorderGeometryCache();
    [CompilerGeneratedAttribute]
private void set_BorderGeometryCache(StreamGeometry value);
    [CompilerGeneratedAttribute]
private GuidelineSet get_GuidelineCache();
    [CompilerGeneratedAttribute]
private void set_GuidelineCache(GuidelineSet value);
    [CompilerGeneratedAttribute]
private HwndSource get_HwndCache();
    [CompilerGeneratedAttribute]
private void set_HwndCache(HwndSource value);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.CodeLensControlColors : object {
    public static Guid Category;
    private static ThemeResourceKey _ActionLinkColorKey;
    private static ThemeResourceKey _ActionLinkBrushKey;
    private static ThemeResourceKey _ActionLinkDisabledColorKey;
    private static ThemeResourceKey _ActionLinkDisabledBrushKey;
    private static ThemeResourceKey _ActionLinkItemTextColorKey;
    private static ThemeResourceKey _ActionLinkItemTextBrushKey;
    private static ThemeResourceKey _ActionLinkItemDisabledTextColorKey;
    private static ThemeResourceKey _ActionLinkItemDisabledTextBrushKey;
    private static ThemeResourceKey _ActionLinkItemHoverTextColorKey;
    private static ThemeResourceKey _ActionLinkItemHoverTextBrushKey;
    private static ThemeResourceKey _ActionLinkItemSelectedTextColorKey;
    private static ThemeResourceKey _ActionLinkItemSelectedTextBrushKey;
    private static ThemeResourceKey _ActionLinkItemSelectedNotFocusedTextColorKey;
    private static ThemeResourceKey _ActionLinkItemSelectedNotFocusedTextBrushKey;
    private static ThemeResourceKey _BodyTextColorKey;
    private static ThemeResourceKey _BodyTextBrushKey;
    private static ThemeResourceKey _DiffViewHighlightColorKey;
    private static ThemeResourceKey _DiffViewHighlightBrushKey;
    private static ThemeResourceKey _SystemGrayTextColorKey;
    private static ThemeResourceKey _SystemGrayTextBrushKey;
    private static ThemeResourceKey _GrayTextHoverColorKey;
    private static ThemeResourceKey _GrayTextHoverBrushKey;
    private static ThemeResourceKey _HeaderTextColorKey;
    private static ThemeResourceKey _HeaderTextBrushKey;
    private static ThemeResourceKey _ItemHoverTextColorKey;
    private static ThemeResourceKey _ItemHoverTextBrushKey;
    private static ThemeResourceKey _ItemSelectedTextColorKey;
    private static ThemeResourceKey _ItemSelectedTextBrushKey;
    private static ThemeResourceKey _ItemSelectedTextTextColorKey;
    private static ThemeResourceKey _ItemSelectedTextTextBrushKey;
    private static ThemeResourceKey _PopupColorKey;
    private static ThemeResourceKey _PopupBrushKey;
    private static ThemeResourceKey _PopupTextColorKey;
    private static ThemeResourceKey _PopupTextBrushKey;
    private static ThemeResourceKey _PopupBorderColorKey;
    private static ThemeResourceKey _PopupBorderBrushKey;
    private static ThemeResourceKey _PopupHoverColorKey;
    private static ThemeResourceKey _PopupHoverBrushKey;
    private static ThemeResourceKey _PopupPinButtonHoverColorKey;
    private static ThemeResourceKey _PopupPinButtonHoverBrushKey;
    private static ThemeResourceKey _PopupPinButtonHoverTextColorKey;
    private static ThemeResourceKey _PopupPinButtonHoverTextBrushKey;
    private static ThemeResourceKey _PopupPinButtonMouseDownColorKey;
    private static ThemeResourceKey _PopupPinButtonMouseDownBrushKey;
    private static ThemeResourceKey _PopupPinButtonMouseDownTextColorKey;
    private static ThemeResourceKey _PopupPinButtonMouseDownTextBrushKey;
    private static ThemeResourceKey _PopupSelectedColorKey;
    private static ThemeResourceKey _PopupSelectedBrushKey;
    private static ThemeResourceKey _PopupSelectedInactiveColorKey;
    private static ThemeResourceKey _PopupSelectedInactiveBrushKey;
    private static ThemeResourceKey _PopupSelectedInactiveTextColorKey;
    private static ThemeResourceKey _PopupSelectedInactiveTextBrushKey;
    private static ThemeResourceKey _SubduedBorderColorKey;
    private static ThemeResourceKey _SubduedBorderBrushKey;
    private static ThemeResourceKey _SubduedTextColorKey;
    private static ThemeResourceKey _SubduedTextBrushKey;
    private static ThemeResourceKey _TextHoverColorKey;
    private static ThemeResourceKey _TextHoverBrushKey;
    private static ThemeResourceKey _TextSelectedColorKey;
    private static ThemeResourceKey _TextSelectedBrushKey;
    private static ThemeResourceKey _YouAreHereBackgroundColorKey;
    private static ThemeResourceKey _YouAreHereBackgroundBrushKey;
    private static ThemeResourceKey _YouAreHereTextColorKey;
    private static ThemeResourceKey _YouAreHereTextBrushKey;
    public static ThemeResourceKey ActionLinkColorKey { get; }
    public static ThemeResourceKey ActionLinkBrushKey { get; }
    public static ThemeResourceKey ActionLinkDisabledColorKey { get; }
    public static ThemeResourceKey ActionLinkDisabledBrushKey { get; }
    public static ThemeResourceKey ActionLinkItemTextColorKey { get; }
    public static ThemeResourceKey ActionLinkItemTextBrushKey { get; }
    public static ThemeResourceKey ActionLinkItemDisabledTextColorKey { get; }
    public static ThemeResourceKey ActionLinkItemDisabledTextBrushKey { get; }
    public static ThemeResourceKey ActionLinkItemHoverTextColorKey { get; }
    public static ThemeResourceKey ActionLinkItemHoverTextBrushKey { get; }
    public static ThemeResourceKey ActionLinkItemSelectedTextColorKey { get; }
    public static ThemeResourceKey ActionLinkItemSelectedTextBrushKey { get; }
    public static ThemeResourceKey ActionLinkItemSelectedNotFocusedTextColorKey { get; }
    public static ThemeResourceKey ActionLinkItemSelectedNotFocusedTextBrushKey { get; }
    public static ThemeResourceKey BodyTextColorKey { get; }
    public static ThemeResourceKey BodyTextBrushKey { get; }
    public static ThemeResourceKey DiffViewHighlightColorKey { get; }
    public static ThemeResourceKey DiffViewHighlightBrushKey { get; }
    public static ThemeResourceKey SystemGrayTextColorKey { get; }
    public static ThemeResourceKey SystemGrayTextBrushKey { get; }
    public static ThemeResourceKey GrayTextHoverColorKey { get; }
    public static ThemeResourceKey GrayTextHoverBrushKey { get; }
    public static ThemeResourceKey HeaderTextColorKey { get; }
    public static ThemeResourceKey HeaderTextBrushKey { get; }
    public static ThemeResourceKey ItemHoverTextColorKey { get; }
    public static ThemeResourceKey ItemHoverTextBrushKey { get; }
    public static ThemeResourceKey ItemSelectedTextColorKey { get; }
    public static ThemeResourceKey ItemSelectedTextBrushKey { get; }
    public static ThemeResourceKey ItemSelectedTextTextColorKey { get; }
    public static ThemeResourceKey ItemSelectedTextTextBrushKey { get; }
    public static ThemeResourceKey PopupColorKey { get; }
    public static ThemeResourceKey PopupBrushKey { get; }
    public static ThemeResourceKey PopupTextColorKey { get; }
    public static ThemeResourceKey PopupTextBrushKey { get; }
    public static ThemeResourceKey PopupBorderColorKey { get; }
    public static ThemeResourceKey PopupBorderBrushKey { get; }
    public static ThemeResourceKey PopupHoverColorKey { get; }
    public static ThemeResourceKey PopupHoverBrushKey { get; }
    public static ThemeResourceKey PopupPinButtonHoverColorKey { get; }
    public static ThemeResourceKey PopupPinButtonHoverBrushKey { get; }
    public static ThemeResourceKey PopupPinButtonHoverTextColorKey { get; }
    public static ThemeResourceKey PopupPinButtonHoverTextBrushKey { get; }
    public static ThemeResourceKey PopupPinButtonMouseDownColorKey { get; }
    public static ThemeResourceKey PopupPinButtonMouseDownBrushKey { get; }
    public static ThemeResourceKey PopupPinButtonMouseDownTextColorKey { get; }
    public static ThemeResourceKey PopupPinButtonMouseDownTextBrushKey { get; }
    public static ThemeResourceKey PopupSelectedColorKey { get; }
    public static ThemeResourceKey PopupSelectedBrushKey { get; }
    public static ThemeResourceKey PopupSelectedInactiveColorKey { get; }
    public static ThemeResourceKey PopupSelectedInactiveBrushKey { get; }
    public static ThemeResourceKey PopupSelectedInactiveTextColorKey { get; }
    public static ThemeResourceKey PopupSelectedInactiveTextBrushKey { get; }
    public static ThemeResourceKey SubduedBorderColorKey { get; }
    public static ThemeResourceKey SubduedBorderBrushKey { get; }
    public static ThemeResourceKey SubduedTextColorKey { get; }
    public static ThemeResourceKey SubduedTextBrushKey { get; }
    public static ThemeResourceKey TextHoverColorKey { get; }
    public static ThemeResourceKey TextHoverBrushKey { get; }
    public static ThemeResourceKey TextSelectedColorKey { get; }
    public static ThemeResourceKey TextSelectedBrushKey { get; }
    public static ThemeResourceKey YouAreHereBackgroundColorKey { get; }
    public static ThemeResourceKey YouAreHereBackgroundBrushKey { get; }
    public static ThemeResourceKey YouAreHereTextColorKey { get; }
    public static ThemeResourceKey YouAreHereTextBrushKey { get; }
    private static CodeLensControlColors();
    public static ThemeResourceKey get_ActionLinkColorKey();
    public static ThemeResourceKey get_ActionLinkBrushKey();
    public static ThemeResourceKey get_ActionLinkDisabledColorKey();
    public static ThemeResourceKey get_ActionLinkDisabledBrushKey();
    public static ThemeResourceKey get_ActionLinkItemTextColorKey();
    public static ThemeResourceKey get_ActionLinkItemTextBrushKey();
    public static ThemeResourceKey get_ActionLinkItemDisabledTextColorKey();
    public static ThemeResourceKey get_ActionLinkItemDisabledTextBrushKey();
    public static ThemeResourceKey get_ActionLinkItemHoverTextColorKey();
    public static ThemeResourceKey get_ActionLinkItemHoverTextBrushKey();
    public static ThemeResourceKey get_ActionLinkItemSelectedTextColorKey();
    public static ThemeResourceKey get_ActionLinkItemSelectedTextBrushKey();
    public static ThemeResourceKey get_ActionLinkItemSelectedNotFocusedTextColorKey();
    public static ThemeResourceKey get_ActionLinkItemSelectedNotFocusedTextBrushKey();
    public static ThemeResourceKey get_BodyTextColorKey();
    public static ThemeResourceKey get_BodyTextBrushKey();
    public static ThemeResourceKey get_DiffViewHighlightColorKey();
    public static ThemeResourceKey get_DiffViewHighlightBrushKey();
    public static ThemeResourceKey get_SystemGrayTextColorKey();
    public static ThemeResourceKey get_SystemGrayTextBrushKey();
    public static ThemeResourceKey get_GrayTextHoverColorKey();
    public static ThemeResourceKey get_GrayTextHoverBrushKey();
    public static ThemeResourceKey get_HeaderTextColorKey();
    public static ThemeResourceKey get_HeaderTextBrushKey();
    public static ThemeResourceKey get_ItemHoverTextColorKey();
    public static ThemeResourceKey get_ItemHoverTextBrushKey();
    public static ThemeResourceKey get_ItemSelectedTextColorKey();
    public static ThemeResourceKey get_ItemSelectedTextBrushKey();
    public static ThemeResourceKey get_ItemSelectedTextTextColorKey();
    public static ThemeResourceKey get_ItemSelectedTextTextBrushKey();
    public static ThemeResourceKey get_PopupColorKey();
    public static ThemeResourceKey get_PopupBrushKey();
    public static ThemeResourceKey get_PopupTextColorKey();
    public static ThemeResourceKey get_PopupTextBrushKey();
    public static ThemeResourceKey get_PopupBorderColorKey();
    public static ThemeResourceKey get_PopupBorderBrushKey();
    public static ThemeResourceKey get_PopupHoverColorKey();
    public static ThemeResourceKey get_PopupHoverBrushKey();
    public static ThemeResourceKey get_PopupPinButtonHoverColorKey();
    public static ThemeResourceKey get_PopupPinButtonHoverBrushKey();
    public static ThemeResourceKey get_PopupPinButtonHoverTextColorKey();
    public static ThemeResourceKey get_PopupPinButtonHoverTextBrushKey();
    public static ThemeResourceKey get_PopupPinButtonMouseDownColorKey();
    public static ThemeResourceKey get_PopupPinButtonMouseDownBrushKey();
    public static ThemeResourceKey get_PopupPinButtonMouseDownTextColorKey();
    public static ThemeResourceKey get_PopupPinButtonMouseDownTextBrushKey();
    public static ThemeResourceKey get_PopupSelectedColorKey();
    public static ThemeResourceKey get_PopupSelectedBrushKey();
    public static ThemeResourceKey get_PopupSelectedInactiveColorKey();
    public static ThemeResourceKey get_PopupSelectedInactiveBrushKey();
    public static ThemeResourceKey get_PopupSelectedInactiveTextColorKey();
    public static ThemeResourceKey get_PopupSelectedInactiveTextBrushKey();
    public static ThemeResourceKey get_SubduedBorderColorKey();
    public static ThemeResourceKey get_SubduedBorderBrushKey();
    public static ThemeResourceKey get_SubduedTextColorKey();
    public static ThemeResourceKey get_SubduedTextBrushKey();
    public static ThemeResourceKey get_TextHoverColorKey();
    public static ThemeResourceKey get_TextHoverBrushKey();
    public static ThemeResourceKey get_TextSelectedColorKey();
    public static ThemeResourceKey get_TextSelectedBrushKey();
    public static ThemeResourceKey get_YouAreHereBackgroundColorKey();
    public static ThemeResourceKey get_YouAreHereBackgroundBrushKey();
    public static ThemeResourceKey get_YouAreHereTextColorKey();
    public static ThemeResourceKey get_YouAreHereTextBrushKey();
}
[ExportAttribute("Microsoft.VisualStudio.Progression.Controls.ICustomContentProvider")]
[ExportMetadataAttribute("NodeCategory", "Mono.Cecil.CustomAttributeArgument")]
public class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CallTreeContentProvider : object {
    public static string CurrentCallStackEntry;
    private static CodeLensStyleProvider _codeLensStyleProvider;
    private static CallTreeContentProvider();
    public sealed virtual Size CalculateVisualSize(GraphNode node, IMeasurementHelper helper);
    public sealed virtual UIElement GetContent(GraphNode node);
    public sealed virtual void OnUserPreferenceChanged(UIElement element, GraphNode node);
    private bool IsContentEnabled(GraphNode node);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.CodeLensPresenterStyleProxy : CodeLensPresenterStyle {
    private CodeLensPresenterStyle _defaultStyle;
    private TextRunProperties _indicatorTextRunProperties;
    private TextRunProperties _indicatorHoveredTextRunProperties;
    private TextRunProperties _indicatorSelectedTextRunProperties;
    private Brush _linkBrush;
    private Brush _linkHoverBrush;
    public TextRunProperties IndicatorTextRunProperties { get; public set; }
    public TextRunProperties IndicatorHoveredTextRunProperties { get; public set; }
    public TextRunProperties IndicatorSelectedTextRunProperties { get; public set; }
    public TextRunProperties IndicatorDisabledTextRunProperties { get; public set; }
    public Brush AccessKeyBackgroundBrush { get; public set; }
    public Brush AccessKeyBorderBrush { get; public set; }
    public Brush AccessKeyDisabledBackgroundBrush { get; public set; }
    public Brush AccessKeyDisabledBorderBrush { get; public set; }
    public Brush AccessKeyDisabledTextBrush { get; public set; }
    public Brush AccessKeyTextBrush { get; public set; }
    public Nullable`1<bool> AreAnimationsAllowed { get; public set; }
    public Nullable`1<bool> AreGradientsAllowed { get; public set; }
    public Color DropShadowColor { get; public set; }
    public Brush IndicatorSeparatorBrush { get; public set; }
    public Brush PopupBackgroundBrush { get; public set; }
    public Color PopupBackgroundColor { get; public set; }
    public Brush PopupBorderBrush { get; public set; }
    public Brush PopupPinButtonHoverBackgroundBrush { get; public set; }
    public Brush PopupPinButtonHoverForegroundBrush { get; public set; }
    public Brush PopupPinButtonMouseDownBackgroundBrush { get; public set; }
    public Brush PopupPinButtonMouseDownForegroundBrush { get; public set; }
    public Brush PopupTextBrush { get; public set; }
    public Brush ToolTipBackgroundBrush { get; }
    public Brush ToolTipBorderBrush { get; }
    public TextRunProperties ToolTipTextRunProperties { get; }
    public CodeLensPresenterStyleProxy(CodeLensPresenterStyle defaultStyle);
    public virtual TextRunProperties get_IndicatorTextRunProperties();
    public virtual void set_IndicatorTextRunProperties(TextRunProperties value);
    public virtual TextRunProperties get_IndicatorHoveredTextRunProperties();
    public virtual void set_IndicatorHoveredTextRunProperties(TextRunProperties value);
    public virtual TextRunProperties get_IndicatorSelectedTextRunProperties();
    public virtual void set_IndicatorSelectedTextRunProperties(TextRunProperties value);
    public virtual TextRunProperties get_IndicatorDisabledTextRunProperties();
    public virtual void set_IndicatorDisabledTextRunProperties(TextRunProperties value);
    public virtual Brush get_AccessKeyBackgroundBrush();
    public virtual void set_AccessKeyBackgroundBrush(Brush value);
    public virtual Brush get_AccessKeyBorderBrush();
    public virtual void set_AccessKeyBorderBrush(Brush value);
    public virtual Brush get_AccessKeyDisabledBackgroundBrush();
    public virtual void set_AccessKeyDisabledBackgroundBrush(Brush value);
    public virtual Brush get_AccessKeyDisabledBorderBrush();
    public virtual void set_AccessKeyDisabledBorderBrush(Brush value);
    public virtual Brush get_AccessKeyDisabledTextBrush();
    public virtual void set_AccessKeyDisabledTextBrush(Brush value);
    public virtual Brush get_AccessKeyTextBrush();
    public virtual void set_AccessKeyTextBrush(Brush value);
    public virtual Nullable`1<bool> get_AreAnimationsAllowed();
    public virtual void set_AreAnimationsAllowed(Nullable`1<bool> value);
    public virtual Nullable`1<bool> get_AreGradientsAllowed();
    public virtual void set_AreGradientsAllowed(Nullable`1<bool> value);
    public virtual Color get_DropShadowColor();
    public virtual void set_DropShadowColor(Color value);
    public virtual Brush get_IndicatorSeparatorBrush();
    public virtual void set_IndicatorSeparatorBrush(Brush value);
    public virtual Brush get_PopupBackgroundBrush();
    public virtual void set_PopupBackgroundBrush(Brush value);
    public virtual Color get_PopupBackgroundColor();
    public virtual void set_PopupBackgroundColor(Color value);
    public virtual Brush get_PopupBorderBrush();
    public virtual void set_PopupBorderBrush(Brush value);
    public virtual Brush get_PopupPinButtonHoverBackgroundBrush();
    public virtual void set_PopupPinButtonHoverBackgroundBrush(Brush value);
    public virtual Brush get_PopupPinButtonHoverForegroundBrush();
    public virtual void set_PopupPinButtonHoverForegroundBrush(Brush value);
    public virtual Brush get_PopupPinButtonMouseDownBackgroundBrush();
    public virtual void set_PopupPinButtonMouseDownBackgroundBrush(Brush value);
    public virtual Brush get_PopupPinButtonMouseDownForegroundBrush();
    public virtual void set_PopupPinButtonMouseDownForegroundBrush(Brush value);
    public virtual Brush get_PopupTextBrush();
    public virtual void set_PopupTextBrush(Brush value);
    public virtual Brush get_ToolTipBackgroundBrush();
    public virtual Brush get_ToolTipBorderBrush();
    public virtual TextRunProperties get_ToolTipTextRunProperties();
    private TextRunProperties CreateFromDefaultStyle(TextRunProperties defaultStyle, Brush foregroundBrush, TextDecorationCollection textDecorations);
    private void DefaultStyle_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OnPropertyChanged(string name);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.CodeLensStyleProvider : object {
    [ImportAttribute]
private ICodeLensAdornmentCache _adornmentCache;
    private CodeLensPresenterStyleProxy _codeLensPresenterStyleProxy;
    private TextFormattingRunProperties _fallbackTextRunProperties;
    internal ICodeLensAdornmentCache AdornmentCache { get; }
    internal CodeLensPresenterStyleProxy CodeLensPresenterStyleProxy { get; }
    internal TextFormattingRunProperties FallbackTextRunProperties { get; }
    internal ICodeLensAdornmentCache get_AdornmentCache();
    internal CodeLensPresenterStyleProxy get_CodeLensPresenterStyleProxy();
    internal TextFormattingRunProperties get_FallbackTextRunProperties();
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ColumnsToStringConverter : object {
    public sealed virtual object Convert(object o, Type type, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object o, Type type, object parameter, CultureInfo culture);
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.DataPointViewModelProviderAttribute : ExportAttribute {
    private string targetDataPointTypeName;
    public string TargetDataPointTypeName { get; }
    public DataPointViewModelProviderAttribute(Type targetDataPointType);
    public string get_TargetDataPointTypeName();
}
[ContentPropertyAttribute("DetailsTemplate")]
public abstract class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.DetailsTemplateProvider : object {
    [CompilerGeneratedAttribute]
private DataTemplate <DetailsTemplate>k__BackingField;
    public DataTemplate DetailsTemplate { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual DataTemplate get_DetailsTemplate();
    [CompilerGeneratedAttribute]
protected void set_DetailsTemplate(DataTemplate value);
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.DetailsTemplateProviderAttribute : ExportAttribute {
    private string targetViewModelTypeName;
    public string TargetViewModelTypeName { get; }
    public DetailsTemplateProviderAttribute(Type targetViewModelType);
    public string get_TargetViewModelTypeName();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.IntelliTraceContentTypeProvider : object {
    public static string IntelliTraceCodeMapContentTypeName;
    [CompilerGeneratedAttribute]
private static ContentTypeDefinition <IntelliTraceContentTypeDefinition>k__BackingField;
    [ExportAttribute]
[NameAttribute("IntelliTraceCodeMap")]
[BaseDefinitionAttribute("any")]
internal static ContentTypeDefinition IntelliTraceContentTypeDefinition { get; internal set; }
    [CompilerGeneratedAttribute]
internal static ContentTypeDefinition get_IntelliTraceContentTypeDefinition();
    [CompilerGeneratedAttribute]
internal static void set_IntelliTraceContentTypeDefinition(ContentTypeDefinition value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.LevelToIndentConverter : object {
    private static double IndentSize;
    public sealed virtual object Convert(object o, Type type, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object o, Type type, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParameterRowViewModel : TraceLogViewModelBase {
    private IDataElement _data;
    private IList`1<ParameterRowViewModel> _children;
    private bool _initializedChildren;
    private bool _isExpanded;
    public string Name { get; }
    public string TypeName { get; }
    public string Value { get; }
    public IList`1<ParameterRowViewModel> Children { get; }
    public bool IsExpanded { get; public set; }
    public ParameterRowViewModel(IDataElement data);
    public string get_Name();
    public string get_TypeName();
    public string get_Value();
    public IList`1<ParameterRowViewModel> get_Children();
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersAdornmentControl : UserControl {
    private ParametersDescriptor _descriptor;
    private ParametersTag _tag;
    private CodeLensAdornment _adornment;
    private ICodeLensAdornmentCache _adornmentCache;
    private CodeLensPresenterStyle _adornmentStyle;
    private IContentType _intelliTraceContentType;
    internal ParametersAdornmentControl parametersAdornmentControl;
    internal ContentControl ContentHost;
    private bool _contentLoaded;
    private bool IsConnected { get; }
    internal IContentType ContentType { get; }
    private bool get_IsConnected();
    public void Initialize(GraphNodeId nodeId, bool isResolved, string descriptorName, ICodeLensAdornmentCache adornmentCache, CodeLensPresenterStyle style);
    internal IContentType get_ContentType();
    private void OnDebugModeChanged(object sender, DebugModeChangedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersAdornmentControl/<OnSourceChanged>d__13")]
private void OnSourceChanged(object sender, SourceChangedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersAdornmentControl/<ConnectAdornmentAsync>d__14")]
private Task ConnectAdornmentAsync();
    private void DisconnectAdornment();
    private void Cleanup();
    private void ContentHost_KeyDown(object sender, KeyEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersDataPoint : object {
    [CompilerGeneratedAttribute]
private GraphNodeId <GraphNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptorName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResolved>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler Invalidated;
    public GraphNodeId GraphNodeId { get; private set; }
    public string DescriptorName { get; private set; }
    public bool IsResolved { get; private set; }
    public ParametersDataPoint(ParametersDescriptor paramDescriptor);
    [CompilerGeneratedAttribute]
public GraphNodeId get_GraphNodeId();
    [CompilerGeneratedAttribute]
private void set_GraphNodeId(GraphNodeId value);
    [CompilerGeneratedAttribute]
public string get_DescriptorName();
    [CompilerGeneratedAttribute]
private void set_DescriptorName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsResolved();
    [CompilerGeneratedAttribute]
private void set_IsResolved(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Invalidated(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Invalidated(EventHandler value);
    public sealed virtual Task`1<object> GetDataAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<object> GetDetailsAsync(CancellationToken cancellationToken);
    public void Invalidate();
}
[ExportAttribute("Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider")]
[ContentTypeAttribute("IntelliTraceCodeMap")]
[NameAttribute("IntelliTrace")]
[LocalizedNameAttribute("Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.Views.ParametersPopupResource", "IntelliTraceCodeLensProviderName")]
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersDataPointProvider : object {
    public static string IndicatorName;
    public sealed virtual Task`1<bool> CanCreateDataPointAsync(ICodeLensDescriptor descriptor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersDataPointProvider/<CreateDataPointAsync>d__2")]
public sealed virtual Task`1<IAsyncCodeLensDataPoint> CreateDataPointAsync(ICodeLensDescriptor descriptor, CancellationToken cancellationToken);
}
[DataPointViewModelProviderAttribute("Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersDataPoint")]
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersDataPointViewModelProvider : object {
    public sealed virtual IAsyncCodeLensDataPointViewModel GetViewModel(IAsyncCodeLensDataPoint dataPoint);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersDescriptor : object {
    [CompilerGeneratedAttribute]
private GraphNodeId <GraphNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DescriptorName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResolved>k__BackingField;
    public GraphNodeId GraphNodeId { get; private set; }
    public string DescriptorName { get; private set; }
    public bool IsResolved { get; private set; }
    public string ElementDescription { get; }
    public string FilePath { get; }
    public Guid ProjectGuid { get; }
    public Nullable`1<Span> ApplicableSpan { get; }
    public CodeElementKinds Kind { get; }
    public ParametersDescriptor(GraphNodeId nodeId, bool isResolved, string descriptorName);
    [CompilerGeneratedAttribute]
public GraphNodeId get_GraphNodeId();
    [CompilerGeneratedAttribute]
private void set_GraphNodeId(GraphNodeId value);
    [CompilerGeneratedAttribute]
public string get_DescriptorName();
    [CompilerGeneratedAttribute]
private void set_DescriptorName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsResolved();
    [CompilerGeneratedAttribute]
private void set_IsResolved(bool value);
    public sealed virtual string get_ElementDescription();
    public sealed virtual string get_FilePath();
    public sealed virtual Guid get_ProjectGuid();
    public sealed virtual Nullable`1<Span> get_ApplicableSpan();
    public sealed virtual CodeElementKinds get_Kind();
}
public class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersPopupContentControl : UserControl {
    internal TextBlock MethodNameTextBlock;
    internal Grid helperField0;
    internal Grid helperField1;
    internal Grid helperField2;
    internal TreeGridView treeGridView;
    private bool _contentLoaded;
    private void Expander_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersTag : object {
    private ParametersDescriptor _descriptor;
    [CompilerGeneratedAttribute]
private EventHandler Disconnected;
    public ParametersDescriptor Descriptor { get; }
    private ICodeLensDescriptor Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag.Descriptor { get; }
    public ParametersTag(ParametersDescriptor descriptor);
    public ParametersDescriptor get_Descriptor();
    private sealed virtual override ICodeLensDescriptor Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag.get_Descriptor();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Disconnected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Disconnected(EventHandler value);
    public void Close();
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersViewModel : TraceLogViewModelBase {
    private bool _isLoadingDetails;
    private string _detailsFailureInfo;
    private ParametersDataPoint _dataPoint;
    private ICommand _refreshCommand;
    private GraphNodeId _graphNodeId;
    private string _fullMethodName;
    private bool _isDisposed;
    private IList`1<ParameterRowViewModel> _parameters;
    public string Descriptor { get; }
    public bool HasDetails { get; }
    public Nullable`1<bool> HasData { get; }
    public bool IsVisible { get; }
    public IAsyncCodeLensDataPoint DataPoint { get; }
    public string AdditionalInformation { get; }
    public ICommand RefreshCommand { get; }
    public string DetailsFailureInfo { get; private set; }
    public bool IsLoadingDetails { get; private set; }
    public double ImageOpacity { get; }
    public ImageId ImageId { get; }
    public string FullMethodName { get; }
    public IList`1<ParameterRowViewModel> Parameters { get; }
    public ParametersViewModel(ParametersDataPoint dataPoint);
    public sealed virtual void Dispose();
    public sealed virtual string get_Descriptor();
    public sealed virtual bool get_HasDetails();
    public sealed virtual Nullable`1<bool> get_HasData();
    public sealed virtual bool get_IsVisible();
    public sealed virtual IAsyncCodeLensDataPoint get_DataPoint();
    public sealed virtual string get_AdditionalInformation();
    public sealed virtual ICommand get_RefreshCommand();
    public sealed virtual string get_DetailsFailureInfo();
    private void set_DetailsFailureInfo(string value);
    public sealed virtual bool get_IsLoadingDetails();
    private void set_IsLoadingDetails(bool value);
    public sealed virtual double get_ImageOpacity();
    public sealed virtual ImageId get_ImageId();
    public virtual string ToString();
    public string get_FullMethodName();
    public IList`1<ParameterRowViewModel> get_Parameters();
    private void Initialize();
    private void ReleaseEventHandlers();
    private void SetParametersData();
    private void SetParametersData(ICallStackFrame frame);
    private void ResetParametersData();
    private void OnCurrentFrameIndexChanged(object sender, CurrentFrameIndexChangedEventArgs args);
    private void OnGraphNodesChanged(object sender, GraphNodesChangedEventArgs args);
    private void Refresh();
    private void OnDataPointInvalidate(object sender, EventArgs e);
    private void NotifyDataRefresh();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object param);
}
[DetailsTemplateProviderAttribute("Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersViewModel")]
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.ParametersViewProvider : DetailsTemplateProvider {
    private bool _contentLoaded;
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.TreeGridView : TreeView {
    public static DependencyProperty ColumnsProperty;
    public GridViewColumnCollection Columns { get; public set; }
    private static TreeGridView();
    public GridViewColumnCollection get_Columns();
    public void set_Columns(GridViewColumnCollection value);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.TreeGridViewItem : TreeViewItem {
    private int _level;
    [CompilerGeneratedAttribute]
private bool <IsUserEvent>k__BackingField;
    public bool IsUserEvent { get; public set; }
    public int Level { get; }
    [CompilerGeneratedAttribute]
public bool get_IsUserEvent();
    [CompilerGeneratedAttribute]
public void set_IsUserEvent(bool value);
    public int get_Level();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseButtonEventArgs e);
    protected virtual void OnExpanded(RoutedEventArgs e);
    protected virtual void OnCollapsed(RoutedEventArgs e);
    private void HandleUserEvent();
    private void BringItemsIntoView();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.Views.ParametersPopupResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CodeLensParametersName { get; }
    public static string CodeLensParametersTooltip { get; }
    public static string IntelliTraceCodeLensProviderName { get; }
    public static string ParametersColumnHeaderName { get; }
    public static string ParametersColumnHeaderTypeName { get; }
    public static string ParametersColumnHeaderValue { get; }
    public static string TreeViewColumnNamesPrefix { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CodeLensParametersName();
    public static string get_CodeLensParametersTooltip();
    public static string get_IntelliTraceCodeLensProviderName();
    public static string get_ParametersColumnHeaderName();
    public static string get_ParametersColumnHeaderTypeName();
    public static string get_ParametersColumnHeaderValue();
    public static string get_TreeViewColumnNamesPrefix();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeLens.VisualTreeUtility : object {
    [ExtensionAttribute]
public static T FindFirstChildOfType_DepthFirst(DependencyObject depObj, UInt32 maxDepth);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CodeMapCallTree : object {
    public static int CurrentStackFrameInstance;
    private static int cmdId_ShowCallStack;
    private static Guid guidArchitectureExplorerPackageCmdSet;
    private bool _isShown;
    private bool _isInitialized;
    private Nullable`1<bool> _isCodeMapIntegrationEnabled;
    private List`1<CallStackInfo> _callStackInfoCache;
    private bool _isCallStackInfoCacheInvalid;
    private int _currentFrameIndex;
    private static string _exceptionNodeId;
    public EventHandler`1<GraphNodesChangedEventArgs> GraphNodesChanged;
    public EventHandler`1<CurrentFrameIndexChangedEventArgs> CurrentFrameIndexChanged;
    public bool IsCodeMapIntegrationEnabled { get; }
    private static bool FilterNonUserCode { get; }
    private bool IsInPartialState { get; }
    private static CodeMapCallTree();
    public void Initialize();
    public void Cleanup();
    public void Show();
    public bool get_IsCodeMapIntegrationEnabled();
    public int GetCallStackFramesCount(GraphNodeId id, bool isResolved);
    public ICallStackFrame GetCallStackFrame(GraphNodeId id, int frameInstance, bool isResolved);
    private void OnDebugModeChanged(object sender, DebugModeChangedEventArgs e);
    private void OnDebuggerOptionChanged(object sender, DebuggerOptionChangedEventArgs e);
    private bool IsRefreshRequired(DEBUGGER_OPTIONS options);
    private void OnTimeContextChanged(object sender, TimeContextChangedEventArgs e);
    private void OnCurrentFrameChanged(object sender, EventArgs e);
    private void OnMergeCustomContentToCallStack(ActionContext context);
    private void InvalidateCallStackInfoCache();
    private void UpdateCallStackCache();
    private void Refresh();
    private static bool get_FilterNonUserCode();
    private bool get_IsInPartialState();
    private void RaiseGraphNodesChangedEvent();
    private void RaiseCurrentFrameIndexChangedEvent();
    private void AddExceptionDescription(Graph graph);
    private static bool MatchGraphNodeToCallStackInfo(GraphNode node, CallStackInfo callStackInfo);
    public static bool ResolvedNodeHasParameters(GraphNodeId id);
    public static CodeQualifiedIdentifierStackMethodBuilder GetStackMethodBuilder(GraphNodeId id);
    public static GraphNodeId GetQualifiedGraphNodeId(GraphNodeId id);
    private static CodeQualifiedIdentifierStackMethodBuilder GetStackMethodBuilder(ICallStackFrame frame);
    private static GraphNodeId GetQualifiedGraphNodeId(ICallStackFrame frame);
    private static GraphNodeId GetResolvedGraphNodeId(Graph graph, GraphNodeId id, ICallStackFrame frame);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.CurrentFrameIndexChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private GraphNodeId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private ICallStackFrame <Frame>k__BackingField;
    public GraphNodeId Id { get; private set; }
    public int Index { get; private set; }
    public ICallStackFrame Frame { get; private set; }
    public CurrentFrameIndexChangedEventArgs(GraphNodeId id, int index, ICallStackFrame frame);
    [CompilerGeneratedAttribute]
public GraphNodeId get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(GraphNodeId value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
private void set_Index(int value);
    [CompilerGeneratedAttribute]
public ICallStackFrame get_Frame();
    [CompilerGeneratedAttribute]
private void set_Frame(ICallStackFrame value);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.CodeMap.DebugFrameHelpers : object {
    private static UInt32 Timeout;
    public static IList`1<ICallStackFrame> GetCurrentTimeContextFrames(IDebugThread2 currentThread, bool filterNonUserCode);
    public static int GetCurrentFrameIndex(IDebugStackFrame2 currentStackFrame);
    public static string GetExceptionDescription(IDebugStackFrame2 topMostFrame);
    private static IEnumerable`1<FRAMEINFO> GetFrames(IEnumDebugFrameInfo2 framesEnum);
}
internal class Microsoft.VisualStudio.TraceLogPackage.CodeMap.GraphNodesChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable`1<GraphNodeId> <NewNodeIds>k__BackingField;
    public IEnumerable`1<GraphNodeId> NewNodeIds { get; private set; }
    public GraphNodesChangedEventArgs(IEnumerable`1<GraphNodeId> newNodeIds);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GraphNodeId> get_NewNodeIds();
    [CompilerGeneratedAttribute]
private void set_NewNodeIds(IEnumerable`1<GraphNodeId> value);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.CodeMap.ICallStackFrame {
    public string FullyQualifiedName { get; }
    public string ModuleName { get; }
    public string ReturnType { get; }
    public string Language { get; }
    public IList`1<IDataElement> Parameters { get; }
    public abstract virtual string get_FullyQualifiedName();
    public abstract virtual string get_ModuleName();
    public abstract virtual string get_ReturnType();
    public abstract virtual string get_Language();
    public abstract virtual IList`1<IDataElement> get_Parameters();
}
internal class Microsoft.VisualStudio.TraceLogPackage.CollectionPlanStore : object {
    private object _lock;
    private Dictionary`2<UInt32, StoreInfoAndTask> _volatileStores;
    private Dictionary`2<string, StoreInfo> _tempExeTargetVolatileStores;
    private Dictionary`2<string, StoreInfo> _tempWebTargetVolatileStores;
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CollectionPlanStore/<GetStoreAsync>d__6")]
public Task`1<VolatileSettingsStore> GetStoreAsync(UInt32 processId);
    public VolatileSettingsStore GetStore(UInt32 processId);
    public VolatileSettingsStore GetStore(string uniqueProcessIdentifier);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CollectionPlanStore/<GetCollectionPlanAsync>d__9")]
public sealed virtual Task`1<_CollectionPlan> GetCollectionPlanAsync(UInt32 processId);
    public sealed virtual _CollectionPlan GetCollectionPlan(UInt32 processId);
    public bool ContainsCollectionPlan(UInt32 processId);
    public bool MoveCollectionPlan(string uniqueDebugTargetId, UInt32 pid);
    public bool SetWebProjectCollectionPlan(UInt32 pid);
    public void Cleanup(UInt32 processId);
    public void CleanupAll();
    public sealed virtual void Dispose();
    public string GenerateCollectionPlan(string projectIdentifier, LaunchType launchType, bool fEnableCrossSession, ToolsOptionManager options, string appPackageMoniker, ClrVersionAttachOptions clrAttachOptions, SettingsScope settingsScope);
    public string GenerateCollectionPlan(UInt32 processId, LaunchType launchType, bool fEnableCrossSession, ToolsOptionManager options, string appPackageMoniker, ClrVersionAttachOptions clrAttachOptions, SettingsScope settingsScope);
    private static StoreInfo GenerateCollectionPlanInternal(LaunchType launchType, bool fEnableCrossSession, ToolsOptionManager options, string appPackageMoniker, ClrVersionAttachOptions clrAttachOptions, SettingsScope settingsScope);
    private static string GetAppContainerSID(string appPackageMoniker);
    private static TraceOptions GetInstrumentationOptions(ToolsOptionManager optionManager);
    private static void GetModulesToInstrument(_TraceInstrumentation& traceInstr, ToolsOptionManager options);
    private void SetStoreInfo(UInt32 processId, StoreInfo storeInfo);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CollectionPlanStore/<GetStoreInfoAsync>d__24")]
private Task`1<StoreInfo> GetStoreInfoAsync(UInt32 processId);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Command : object {
    private CommandState m_backwardState;
    private CommandState m_forwardState;
    internal CommandState BackwardState { get; }
    internal CommandState ForwardState { get; }
    internal Command(CommandState backState, CommandState forwardState);
    internal CommandState get_BackwardState();
    internal CommandState get_ForwardState();
}
internal class Microsoft.VisualStudio.TraceLogPackage.CommandHistoryManager : object {
    private IList`1<Command> _backwardCommands;
    private IList`1<Command> _forwardCommands;
    private UInt32 MAX_HISTORY_ITEMS;
    internal bool HasBackwardHistory { get; }
    internal bool HasForwardHistory { get; }
    internal bool get_HasBackwardHistory();
    internal bool get_HasForwardHistory();
    internal void AddHistory(Command command);
    internal Command GoBackward();
    internal Command GoForward();
    internal void Reset();
    private void CheckCapacity(IList`1<Command> list);
    private Command Pop(IList`1<Command> list);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.CommandState : object {
}
internal class Microsoft.VisualStudio.TraceLogPackage.ComObjectWrapper`1 : object {
    private bool _disposed;
    private T _comObject;
    public T ComObject { get; }
    public ComObjectWrapper`1(T comObject);
    public static ComObjectWrapper`1<ComType> AddManagedReference(ComType comObject);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private static void TryReleaseComObject(object comObject);
    protected virtual override void Finalize();
    public T get_ComObject();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.Constants : object {
    internal static Guid SilverlightEngineGuid;
    internal static Guid WorkflowEngineGuid;
    internal static Guid InstrumentationClsid;
    internal static Guid TraceLaunchSettingsCallbackId;
    internal static Guid SQLEngineGuid;
    internal static Guid LocalPortSupplierGuid;
    internal static Guid NativePortSupplierGuid;
    internal static string DefaultRegistryRoot;
    private static Constants();
}
internal enum Microsoft.VisualStudio.TraceLogPackage.ContextChangeSource : Enum {
    public int value__;
    public static ContextChangeSource DebuggerAutomation;
    public static ContextChangeSource DebuggerSDM;
    public static ContextChangeSource TraceLogUI;
}
public class Microsoft.VisualStudio.TraceLogPackage.Converters.ActivityIdConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.BooleanToVisibilityConverterExtended : object {
    [CompilerGeneratedAttribute]
private bool <Negative>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Hidden>k__BackingField;
    public bool Negative { get; public set; }
    public bool Hidden { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Negative();
    [CompilerGeneratedAttribute]
public void set_Negative(bool value);
    [CompilerGeneratedAttribute]
public bool get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(bool value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.CategoryToImageConverter : object {
    private static BitmapImage _debuggerIconImage;
    private static BitmapImage _exceptionIconImage;
    private static BitmapImage _notifyPointIconImage;
    private static BitmapImage DebuggerImage { get; }
    private static BitmapImage ExceptionImage { get; }
    private static BitmapImage NotifyPointImage { get; }
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    private static BitmapImage get_DebuggerImage();
    private static BitmapImage get_ExceptionImage();
    private static BitmapImage get_NotifyPointImage();
    private static BitmapImage CreateImageFromUriString(string uriString);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.DataItemAutomationIdConverter`1 : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    private string BuildAutomationId(T item, IList`1<T> itemList, string commonName, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.DetailsDisplayItemAutomationIdConverter : DataItemAutomationIdConverter`1<DetailsDisplayItem> {
}
[ValueConversionAttribute("Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DisplayExceptionData", "System.Windows.Visibility")]
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.DisplayExceptionStackToVisibilityConverter : object {
    [CompilerGeneratedAttribute]
private bool <Negative>k__BackingField;
    public bool Negative { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Negative();
    [CompilerGeneratedAttribute]
public void set_Negative(bool value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.ExceptionDataAutomationNameConverter : AutomationNameConverter`1<DisplayExceptionData> {
    protected virtual string BuildAutomationName(DisplayExceptionData exceptionData, bool isGrouped);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Converters.FlatListContentConverter : object {
    private static RoutedEventHandler _filePathLinkClickHandler;
    private static Style _listViewItemHyperlinkStyle;
    private static Style _underlineTextBlockStyle;
    private IEventViewModel _eventViewModel;
    [CompilerGeneratedAttribute]
private Style <UnderliningTextBlockStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private Style <VSListViewItemHyperlinkNoUnderlineStyle>k__BackingField;
    public Style UnderliningTextBlockStyle { get; public set; }
    public Style VSListViewItemHyperlinkNoUnderlineStyle { get; public set; }
    protected bool IsWholeTextActionable { get; }
    protected RoutedEventHandler WholeTextClickHandler { get; }
    private static FlatListContentConverter();
    [CompilerGeneratedAttribute]
public Style get_UnderliningTextBlockStyle();
    [CompilerGeneratedAttribute]
public void set_UnderliningTextBlockStyle(Style value);
    [CompilerGeneratedAttribute]
public Style get_VSListViewItemHyperlinkNoUnderlineStyle();
    [CompilerGeneratedAttribute]
public void set_VSListViewItemHyperlinkNoUnderlineStyle(Style value);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    protected bool get_IsWholeTextActionable();
    protected RoutedEventHandler get_WholeTextClickHandler();
    protected TextBlock CreateFormattedTextBlock(string text, TextWrapping wrapping);
    private Inline CreateNonFormattedInline(string text, TextWrapping wrapping);
    private Inline CreateUnderlineTextInline(string text, TextWrapping wrapping);
    protected Hyperlink CreateHyperlink(string text, TextWrapping wrapping, RoutedEventHandler clickAction);
    private static void FilePathLinkClick(object sender, RoutedEventArgs e);
    private static void LongDescriptionNavigate(object sender, RoutedEventArgs e);
    protected abstract virtual string GetPropertyValue(IEventViewModel evt);
    protected abstract virtual object GetSimpleTextContent(string propertyValue);
    protected abstract virtual object GetFormattedContent(string propertyValue);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.FlatListMaxWidthConverter : object {
    private static double Default_MaxWidth;
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.FormatNumberConverter : object {
    public static string FormatNumber(double value, CultureInfo culture);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.LongDescriptionConverter : FlatListContentConverter {
    protected virtual string GetPropertyValue(IEventViewModel evt);
    protected virtual object GetSimpleTextContent(string propertyValue);
    protected virtual object GetFormattedContent(string propertyValue);
}
public class Microsoft.VisualStudio.TraceLogPackage.Converters.NegativeConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Object", "System.Windows.Visibility")]
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.NullToVisibilityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.PerformanceItemAutomationIdConverter : DataItemAutomationIdConverter`1<PerformanceDataSummaryViewModelBase> {
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.PopupCancelLinkToAutomationNameConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.PopupViewModelToAutomationNameConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    private static bool VerifyParameters(Object[] values);
    private static string GetAutomationString(CultureInfo culture, ContentType contentType, string parameterValue, string warningMessage, string statusMessage);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.RequestItemAutomationIdConverter : DataItemAutomationIdConverter`1<RequestViewModel> {
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.ShortDescriptionConverter : FlatListContentConverter {
    private Char[] NewLines;
    protected virtual string GetPropertyValue(IEventViewModel evt);
    protected virtual object GetFormattedContent(string propertyValue);
    protected virtual object GetSimpleTextContent(string propertyValue);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.SizeAdjustmentConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.SlowestNodeItemAutomationIdConverter : DataItemAutomationIdConverter`1<SlowestNodeRow> {
}
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.SummaryAnalysisAutomationIdConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[ValueConversionAttribute("System.Nullable`1<System.DateTime>", "System.String")]
internal class Microsoft.VisualStudio.TraceLogPackage.Converters.TraceLogSummaryPageNullableDateTimeConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[GuidAttribute("0fea70f4-7287-4b6c-a8bf-cbaba6fa7391")]
internal class Microsoft.VisualStudio.TraceLogPackage.CustomDebuggerEventHandlerService : object {
    private static Lazy`1<IDiagnosticTelemetryService> _lazyTelemetryService;
    private PerProcessCache`1<ContinuousDiagnosticEvent> _newContinuousDiagnosticEventsForUniqueProcessId;
    private PerProcessCache`1<ContinuousSymbolLoad> _newContinuousSymbolLoadsForUniqueProcessId;
    private PerProcessCache`1<ContinuousThreadEvent> _newContinuousThreadEventsForUniqueProcessId;
    private bool _isDisposed;
    private static IDiagnosticTelemetryService TelemetryService { get; }
    private static CustomDebuggerEventHandlerService();
    private static IDiagnosticTelemetryService get_TelemetryService();
    public sealed virtual int OnCustomDebugEvent(Guid& ProcessId, VsComponentMessage message);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CustomDebuggerEventHandlerService/<GetNextEvent>d__8")]
public sealed virtual Task`1<ContinuousDiagnosticEvent> GetNextEvent(CancellationToken cancellationToken, Guid uniqueProcessId);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CustomDebuggerEventHandlerService/<GetNextSymbolLoad>d__9")]
public sealed virtual Task`1<ContinuousSymbolLoad> GetNextSymbolLoad(CancellationToken cancellationToken, Guid uniqueProcessId);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.CustomDebuggerEventHandlerService/<GetNextThreadEvent>d__10")]
public sealed virtual Task`1<ContinuousThreadEvent> GetNextThreadEvent(CancellationToken cancellationToken, Guid uniqueProcessId);
    private void OnNewContinuousEvent(ContinuousDiagnosticEvent continuousEvent);
    private void OnNewContinuousEvent(ContinuousDiagnosticEvent continuousEvent, Guid uniqueProcessId);
    private void OnNewSymbolLoad(ContinuousSymbolLoad symbolLoad);
    private void OnNewThreadEvent(ContinuousThreadEvent threadEvent);
    private void OnProcessExit(Guid uniqueProcessId);
    private void LogDroppedEventsTelemetry(Guid uniqueProcessId);
    public sealed virtual void Dispose();
}
[DebuggerDisplayAttribute("Name = {Name}, Type = {TypeName}, Value = {Value}, Children Count = {_enumPropCount}")]
internal class Microsoft.VisualStudio.TraceLogPackage.DebugDataElement : SimpleDataElement {
    private IEnumDebugPropertyInfo2 _enumPropInfo;
    private UInt32 _enumPropCount;
    private Guid _propertyGuid;
    private bool _areChildrenLoaded;
    private IList`1<IDataElement> _debugChildren;
    private string _languageName;
    public bool HasChildren { get; }
    public DebugDataElement(string name, string value, string typeName, IEnumDebugPropertyInfo2 enumPropInfo, UInt32 enumPropCount, Guid propertyGuid, string languageName, bool isPartialData);
    public virtual bool get_HasChildren();
    public virtual IList`1<IDataElement> GetChildren();
    private void LoadDebugChildren();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.DebugEngineUtilities : object {
    public static Guid GetEngineGuid(IntPtr pDebugEngines, int iGuid);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DebugEventHandler : MulticastDelegate {
    public DebugEventHandler(object object, IntPtr method);
    public virtual void Invoke(IDebugEngine2 pEngine, IDebugProcess2 pProcess, IDebugProgram2 pProgram, IDebugThread2 pThread, IDebugEvent2 pEvent, Guid riidEvent, UInt32 dwAttrib);
    public virtual IAsyncResult BeginInvoke(IDebugEngine2 pEngine, IDebugProcess2 pProcess, IDebugProgram2 pProgram, IDebugThread2 pThread, IDebugEvent2 pEvent, Guid riidEvent, UInt32 dwAttrib, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DebuggerEventsHandler : object {
    private bool _hasTimeContextChangeEventOccurred;
    private DBGMODE _debugMode;
    [CompilerGeneratedAttribute]
private DebugEventHandler DebugEvent;
    private bool _receivedEnterBreakStateEvent;
    [CompilerGeneratedAttribute]
public sealed virtual void add_DebugEvent(DebugEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DebugEvent(DebugEventHandler value);
    internal void Reset();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.IDebugEventCallback2.Event(IDebugEngine2 pEngine, IDebugProcess2 pProcess, IDebugProgram2 pProgram, IDebugThread2 pThread, IDebugEvent2 pEvent, Guid& riidEvent, UInt32 dwAttrib);
    private void UpdateLiveDebugContextIfRequired(IDebugProcess2 pProcess, IDebugThread2 pThread);
    private sealed virtual override int Microsoft.VisualStudio.Shell.Interop.IVsDebuggerEvents.OnModeChange(DBGMODE dbgmodeNew);
    private void HandleModeChange(IDebugProcess2 pProcess, IDebugThread2 pThread, AD7DebuggerEvent debuggerEvent);
    private static DBGMODE Convert(AD7DebuggerEvent debuggerEvent);
    private static bool IsIntelliTraceTimeContext(IDebugTimeContext100 timeContext);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebugOptionsUpdate.OnOptionUpdate(DEBUGGER_OPTIONS option, UInt32 dwValue);
    public sealed virtual int OnCurrentFrameChange();
    public sealed virtual int OnCurrentProcessChange();
    public sealed virtual int OnCurrentProgramChange();
    public sealed virtual int OnCurrentStatementChange();
    public sealed virtual int OnCurrentThreadChange();
    public sealed virtual int OnEnterRunMode();
    public sealed virtual int OnModeChange(UInt32 NewDebugMode);
    public sealed virtual int OnProcessCreate(IDebugProcess2 pProcess);
    public sealed virtual int OnProcessDeregister(IDebugCoreServer2 pServer, IDebugProcess2 pProcess);
    public sealed virtual int OnProcessDestroy(IDebugProcess2 pProcess);
    public sealed virtual int OnProcessRegister(IDebugCoreServer2 pServer, IDebugProcess2 pProcess);
    public sealed virtual int OnSessionCreate(IDebugSession2 pSession);
    public sealed virtual int OnSessionDestroy(IDebugSession2 pSession);
    public sealed virtual int OnSetNextStatement();
    public sealed virtual int OnShellModeChange(UInt32 NewShellMode);
    public sealed virtual int OnThreadCreate(IDebugThread2 pThread);
    public sealed virtual int OnThreadDestroy(IDebugThread2 pThread);
    public sealed virtual int OnTimeContextChange();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DebugHistoryControlPanel : UserControl {
    private static string F1KeywordOverview;
    private bool _isJustMyCodeEnabled;
    public static DependencyProperty ControlPanelStateProperty;
    internal DebugHistoryControlPanel DebugHistoryControlPanelElement;
    internal StackPanel _breakAllPanel;
    internal CrispImage _infoIcon;
    internal TextBlock _errorTextBlock;
    internal TextBlock _proteusDisabledText;
    internal Border _MoreOptionsSeparator;
    internal TextBlock _MoreOptionsLabel;
    internal TextBlock _MoreOptionsTextBlock;
    private bool _contentLoaded;
    public DebugHistoryControlPanelState ControlPanelState { get; private set; }
    private static DebugHistoryControlPanel();
    public sealed virtual void Dispose();
    private void DebuggerOptionChanged(object sender, DebuggerOptionChangedEventArgs e);
    private bool GetIsJustMyCodeEnabled();
    private static void ControlPanelStatePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e);
    private void DebuggerBreakImageClicked(object sender, MouseButtonEventArgs e);
    private void DebuggerBreakLinkClicked(object sender, RoutedEventArgs e);
    private void ProteusDisabledLinkLinkClicked(object sender, RoutedEventArgs e);
    private void ShowHelpClicked(object sender, RoutedEventArgs e);
    private void SetJustMyCode();
    public DebugHistoryControlPanelState get_ControlPanelState();
    private void set_ControlPanelState(DebugHistoryControlPanelState value);
    public void SetEnabledState();
    public void SetError(string errorText);
    public void SetDisabledState(string disabledText);
    public void SetDisabledState(IEnumerable`1<Inline> inlines);
    public void SetForDebuggerAttach(string errorText);
    private void SetMoreOptionsControlVisiblity(Visibility value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal enum Microsoft.VisualStudio.TraceLogPackage.DebugHistoryControlPanelState : Enum {
    public int value__;
    public static DebugHistoryControlPanelState HistoricalDebuggingEnabled;
    public static DebugHistoryControlPanelState HistoricalDebuggingDisabled;
    public static DebugHistoryControlPanelState Error;
}
[ComVisibleAttribute("True")]
[GuidAttribute("80c7a336-f1b2-410c-929b-f2213954d984")]
internal class Microsoft.VisualStudio.TraceLogPackage.DebugLaunchHook : object {
    private IVsDebugLaunchHook110 _nextHook;
    private int _SetNextHook(IVsDebugLaunchHook110 pNextHook);
    private int _IsProcessRecycleRequired(VsDebugTargetProcessInfo[] pProcessInfo);
    private int _OnLaunchDebugTargets(UInt32 debugTargetCount, VsDebugTargetInfo4[] debugTargets, VsDebugTargetProcessInfo[] launchResults);
    public static bool IsTargetSupportedInCurrentOption(VsDebugTargetInfo4 target, ToolsOptionManager options);
    private static void UpdateDebugTargetState(bool isTargetSupported);
    public sealed virtual int SetNextHook(IVsDebugLaunchHook110 pNextHook);
    public sealed virtual int IsProcessRecycleRequired(VsDebugTargetProcessInfo[] pProcessInfo);
    public sealed virtual int OnLaunchDebugTargets(UInt32 debugTargetCount, VsDebugTargetInfo4[] debugTargets, VsDebugTargetProcessInfo[] launchResults);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.DebugProcessUtils : object {
    public static bool IsDebugProcessStopped(IDebugProcess2 process);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.AnalysisLaunchHandler : object {
    public static Guid DiagHubAnalysisEditorGuid;
    private static Guid DiagHubPackageGuid;
    private static string NewVerticalTabGroup;
    private static string NewHorizontalTabGroup;
    private static string MoveToPreviousTabGroup;
    private static string MoveToNextTabGroup;
    private static string DiagSessionExtension;
    private static AnalysisLaunchHandler();
    public static void OpenForAnalysis(string itraceFile, IServiceProvider serviceProvider, bool reuseDocumentIfOpened, bool shouldDefaultShowExternal);
    private static string GenerateFileName(string inputFile);
    private static void LoadDiagHubPackage();
    private static void SnapWindow(IServiceProvider serviceProvider, IVsWindowFrame frame);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.Automation.IInvokableItem {
    public abstract virtual void Invoke();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.Automation.InvokableListBoxItemAutomationPeer : ListBoxItemAutomationPeer {
    private object _item;
    private IItemsControlAutomationPeerFactory _factory;
    public InvokableListBoxItemAutomationPeer(object item, ListBoxAutomationPeer selectorAutomationPeer, IItemsControlAutomationPeerFactory factory);
    public sealed virtual void Invoke();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual string GetClassNameCore();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.Automation.InvokableListBoxItemAutomationPeerFactory : object {
    public sealed virtual FrameworkElementAutomationPeer CreateAutomationPeer(Control owner);
    public sealed virtual AutomationPeer CreateItemAutomationPeer(object item, FrameworkElementAutomationPeer itemsControlAutomationPeer);
    public sealed virtual AutomationPeer CreateChildItemAutomationPeer(object item, FrameworkElementAutomationPeer itemsControlAutomationPeer, AutomationPeer parentAutomationPeer);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.CallTreeHostingControl : UserControl {
    private TreeStackControl _treeStackControl;
    private static int RefreshDataTimerDelay;
    private DispatcherTimer _refreshDataTimer;
    private bool _treeStackAdded;
    private bool _isTreeVisible;
    [CompilerGeneratedAttribute]
private bool <IsRefreshingData>k__BackingField;
    internal CallTreeHostingControl CallTreeHostingControlElement;
    internal Grid _rootGrid;
    internal DebugHistoryControlPanel _debugHistoryControlPanel;
    private bool _contentLoaded;
    internal TreeStackControl TreeStackControl { get; }
    public bool IsRefreshingData { get; public set; }
    public bool IsTreeVisible { get; public set; }
    internal TreeStackControl get_TreeStackControl();
    [CompilerGeneratedAttribute]
public bool get_IsRefreshingData();
    [CompilerGeneratedAttribute]
public void set_IsRefreshingData(bool value);
    public bool get_IsTreeVisible();
    public void set_IsTreeVisible(bool value);
    public sealed virtual void Dispose();
    internal void OnDebugContextChange(object sender, EventArgs e);
    internal void OnDebugModeChange(object sender, DebugModeChangedEventArgs e);
    private void OnExitingBreakMode(object sender, EventArgs e);
    private void OnUIRefreshRequested(object sender, UIRefreshRequestedEventArgs e);
    private void DoRefreshData();
    internal void RefreshData();
    private void DetermineControlsToDisplay();
    private FrameworkElement DetermineControlForTreeView();
    private void PostRefreshingData();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private TreeStackControl <get_TreeStackControl>b__6_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__14_0(object <p0>, EventArgs <p1>);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.TreeStackControl : UserControl {
    private static int DefaultRowHeight;
    private static double CallPathListHeightPercentage;
    private CallTreeHostingControl _hostingControl;
    private IHistoricalDebuggingFrame _anchorFrame;
    private TreeDataManager _treeDataMgr;
    private ChildFrameRetriever _childFrameRetriever;
    private bool _isLiveDebugging;
    private bool _needRowHeight;
    private double _rowHeight;
    private double _totalHeight;
    private bool _isInsideUpdateSplitterHeight;
    private ContentItemViewModel _itemWithIpSelectionImage;
    private bool _timeContextChangeInitiatedByCallsView;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private bool <IsUpdatingContextList>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpdatingContentList>k__BackingField;
    internal Grid RootGrid;
    internal RowDefinition CallPathGridRow;
    internal RowDefinition ContentGridRow;
    internal AccessibleListBox CallPathList;
    internal AccessibleListBox ContentList;
    private bool _contentLoaded;
    internal ChildFrameRetriever ChildFrameRetriever { get; }
    internal bool IsUpdatingContextList { get; private set; }
    internal bool IsUpdatingContentList { get; private set; }
    public TreeStackControl(CallTreeHostingControl hostingControl);
    internal ChildFrameRetriever get_ChildFrameRetriever();
    [CompilerGeneratedAttribute]
internal bool get_IsUpdatingContextList();
    [CompilerGeneratedAttribute]
private void set_IsUpdatingContextList(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsUpdatingContentList();
    [CompilerGeneratedAttribute]
private void set_IsUpdatingContentList(bool value);
    public sealed virtual void Dispose();
    public void RefreshControl();
    private void SetFocusToSelectedItem();
    private void UserControl_IsKeyboardFocusWithinChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void ForceUpdateUI();
    private void Reset();
    private void PopulateDataLists(IHistoricalDebuggingFrame anchorFrame, IHistoricalDebuggingFrame currentFrame);
    private void PopulateCallPathList(IHistoricalDebuggingFrame frame);
    private List`1<CallPathItemViewModel> GenerateStack(IHistoricalDebuggingFrame leaf);
    private void PopulateContentList(IHistoricalDebuggingFrame anchorFrame, IHistoricalDebuggingFrame currentFrame);
    private void GenerateContentViewModels(int selectedIndex, bool scrollSelectionIntoView);
    private bool ShouldShowIpSelectionImage(ContentItemViewModel item);
    private void ChildFrameRetriever_NewDataFetched(object sender, EventArgs e);
    private void ChildFrameRetriever_RowCountChanged(object sender, RowCountChangedEventArgs e);
    private ChildFrameRetriever GetChildFrameRetriever(IHistoricalDebuggingFrame parent);
    private void OnTimeContextChanged(object sender, TimeContextChangedEventArgs e);
    private void CallPathList_MouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void CallPathList_KeyDown(object sender, KeyEventArgs e);
    private void ContentList_KeyDown(object sender, KeyEventArgs e);
    private void ContentList_MouseUp(object sender, MouseButtonEventArgs e);
    private void ContentList_MouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void CallPathList_SelectionChanged(object sender, SelectionChangedEventArgs e);
    private void ContentList_SelectionChanged(object sender, SelectionChangedEventArgs e);
    internal void SetAnchorByCallPathItem(int index);
    internal void SetAnchorByContentFrame(IHistoricalDebuggingFrame frame);
    internal void SetTimeContextByFrame(IHistoricalDebuggingFrame frame);
    private void UpdateSplitterHeight();
    private void ListBoxItem_Loaded(object sender, RoutedEventArgs e);
    private void ListBoxItem_SizeChanged(object sender, SizeChangedEventArgs e);
    private void RootGrid_Loaded(object sender, RoutedEventArgs e);
    private void RootGrid_SizeChanged(object sender, SizeChangedEventArgs e);
    private bool IsAnalysisEditorOnScreen();
    private static bool FocusToSelectedItem(ListBox listBox);
    private bool IsLeafFrame(IHistoricalDebuggingFrame frame);
    private void CopyCommand_CanExecute(object sender, CanExecuteRoutedEventArgs e);
    private void CopyCommand_Executed(object sender, ExecutedRoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private bool <GenerateContentViewModels>b__35_1();
    [CompilerGeneratedAttribute]
private void <GenerateContentViewModels>b__35_0();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.ViewModels.CallPathItemViewModel : FrameViewModelBase {
    private IHistoricalDebuggingFrame _currFrame;
    private IHistoricalDebuggingFrame _nextFrame;
    private Action`1<IHistoricalDebuggingFrame> _setTimeContextCallback;
    public string HelpText { get; }
    public IHistoricalDebuggingFrame Frame { get; }
    public IHistoricalDebuggingFrame NextFrame { get; }
    internal CallPathItemViewModel(IHistoricalDebuggingFrame currFrame, IHistoricalDebuggingFrame nextFrame, Action`1<IHistoricalDebuggingFrame> setTimeContextCallback);
    public virtual string get_HelpText();
    public virtual IHistoricalDebuggingFrame get_Frame();
    public IHistoricalDebuggingFrame get_NextFrame();
    public virtual void Invoke();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.ViewModels.ContentItemViewModel : FrameViewModelBase {
    private ChildFrameRetriever _childFrameRetriever;
    private int _index;
    private Func`1<bool> _liveDebuggingChecker;
    private Func`2<ContentItemViewModel, bool> _shouldShowIpSelectionImage;
    private Action`1<IHistoricalDebuggingFrame> _invokeCallback;
    private bool _isFrameInitialized;
    private IHistoricalDebuggingFrame _frame;
    private bool _isSuspended;
    public IHistoricalDebuggingFrame Frame { get; }
    public string HelpText { get; }
    public bool IsIpSelectionImageVisible { get; }
    public bool IsEventTypeImageVisible { get; }
    public ImageMoniker EventTypeImageMoniker { get; }
    public bool IsEventTypeImageToolTipVisible { get; }
    public string EventTypeImageToolTip { get; }
    internal bool IsSuspended { get; internal set; }
    internal bool IsFrameRetrieved { get; }
    internal ContentItemViewModel(ChildFrameRetriever childFrameRetriever, int index, bool isSuspended, Func`1<bool> liveDebuggingChecker, Func`2<ContentItemViewModel, bool> shouldShowIpSelectionImage, Action`1<IHistoricalDebuggingFrame> invokeCallback);
    public virtual IHistoricalDebuggingFrame get_Frame();
    public virtual string get_HelpText();
    public bool get_IsIpSelectionImageVisible();
    public bool get_IsEventTypeImageVisible();
    public ImageMoniker get_EventTypeImageMoniker();
    public bool get_IsEventTypeImageToolTipVisible();
    public string get_EventTypeImageToolTip();
    public virtual void Invoke();
    internal void RefreshData();
    internal bool get_IsSuspended();
    internal void set_IsSuspended(bool value);
    internal bool get_IsFrameRetrieved();
    private string GetEventTypeString(bool helpText);
    private bool isLiveEvent();
    private string FormatContentFrameText(IHistoricalDebuggingFrame frame);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.CallsView.ViewModels.FrameViewModelBase : ViewModelBase {
    public IHistoricalDebuggingFrame Frame { get; }
    public string HelpText { get; }
    public string Name { get; }
    public bool IsTransitionNode { get; }
    public abstract virtual IHistoricalDebuggingFrame get_Frame();
    public abstract virtual string get_HelpText();
    public abstract virtual void Invoke();
    public string get_Name();
    public bool get_IsTransitionNode();
    public virtual string ToString();
    protected static string FormatFrameText(IHistoricalDebuggingFrame frame);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.DebuggerModeProvider : object {
    private DebugMode _currentMode;
    private EventHandler`1<DebugMode> _modeChangeHandler;
    public DebugMode CurrentMode { get; }
    public sealed virtual DebugMode get_CurrentMode();
    public sealed virtual void add_ModeChanged(EventHandler`1<DebugMode> value);
    public sealed virtual void remove_ModeChanged(EventHandler`1<DebugMode> value);
    public sealed virtual void Dispose();
    private void TraceLogPackage_DebugModeChanged(object sender, DebugModeChangedEventArgs e);
    private static DebugMode ConvertDebugMode(DBGMODE debugMode);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.IDebuggerModeProviderFactory")]
[NameAttribute("IntelliTraceDebuggerModeProvider")]
[OrderAttribute]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.DebuggerModeProviderFactory : object {
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IDebuggerModeProvider CreateProvider(IDocument document);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.DebuggerToolMessageReceiver : object {
    private static Lazy`1<IDiagnosticTelemetryService> _lazyTelemetryService;
    private Lazy`1<IIntelliTraceSnapshotService> _lazySnapshotService;
    private IMessageMemory2 _memory;
    private static IDiagnosticTelemetryService TelemetryService { get; }
    private IIntelliTraceSnapshotService SnapshotService { get; }
    private static DebuggerToolMessageReceiver();
    private static IDiagnosticTelemetryService get_TelemetryService();
    private IIntelliTraceSnapshotService get_SnapshotService();
    public sealed virtual DkmCustomMessage SendHigher(DkmCustomMessage customMessage);
    private sealed virtual override void Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmProcessExitNotification.OnProcessExit(DkmProcess process, int exitCode, DkmEventDescriptor eventDescriptor);
    private static void SendToService(DkmTransportConnection transport, DkmProcess process, int eventCode, object data);
    private ContinuousDiagnosticEvent CreateDiagnosticEvent(DkmProcess process, ContinuousEventMessageData messageData);
    private string FormatDebugLocation(DkmProcess process, int thread);
    private static string GetMethodShortName(string methodName);
}
[DebuggerDisplayAttribute("DiagnosticDataId = {DiagnosticDataId}, Category = {CategoryName}")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.DiagnosticEventData : DiagnosticData {
    private Int32[] _callstackMethodTokens;
    private EventType _type;
    private static IDictionary`2<EventType, EventColor> _eventTypeColorMap;
    private static IDictionary`2<EventType, BreakEventType> _eventTypeBreakTypeMap;
    public EventType Type { get; public set; }
    [IgnoreDataMemberAttribute]
public ulong Ordinal { get; public set; }
    [IgnoreDataMemberAttribute]
public int NotifyId { get; public set; }
    public string CategoryName { get; public set; }
    public BreakEventType BreakType { get; public set; }
    public EventImportance EventImportance { get; public set; }
    internal Nullable`1<bool> IsUserEvent { get; internal set; }
    public string TelemetryType { get; public set; }
    public EventColor Color { get; }
    public DiagnosticEventData(Int32[] methodTokens, ulong clockTime);
    private static DiagnosticEventData();
    public EventType get_Type();
    public void set_Type(EventType value);
    public ulong get_Ordinal();
    public void set_Ordinal(ulong value);
    public int get_NotifyId();
    public void set_NotifyId(int value);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public BreakEventType get_BreakType();
    public void set_BreakType(BreakEventType value);
    public EventImportance get_EventImportance();
    public void set_EventImportance(EventImportance value);
    internal Nullable`1<bool> get_IsUserEvent();
    internal void set_IsUserEvent(Nullable`1<bool> value);
    public string get_TelemetryType();
    public void set_TelemetryType(string value);
    internal void UpdateIsUserEvent(IContinuousModuleTracker moduleTracker);
    public EventColor get_Color();
    private BreakEventType GetBreakType();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.DiagnosticsHubResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ActivatedHistoricalCodeContext { get; }
    public static string ActivateHistoricalDebugging { get; }
    public static string ActivateHistoricalDebuggingToolTip { get; }
    public static string ActivateHistoricalSnapshotToolTip { get; }
    public static string ActivateLiveDebugging { get; }
    public static string ActivateLiveDebuggingToolTip { get; }
    public static string AvailableSnapshotImageName { get; }
    public static string CallsHubToolDescription { get; }
    public static string CallsHubToolName { get; }
    public static string CallsViewTitle { get; }
    public static string CategoryName_Tracepoint { get; }
    public static string CategoryNamePrefix { get; }
    public static string ContextMenuThreadFilterText { get; }
    public static string ContextMenuThreadFilterTextUnknownThread { get; }
    public static string EmptyTreeLabel_Break { get; }
    public static string EmptyTreeLabel_ProteusLow { get; }
    public static string EmptyTreeLabel_ProteusLow_Attached { get; }
    public static string EmptyTreeLabel_ProteusLow_NeedRestart { get; }
    public static string EmptyTreeLabel_ProteusLow_Tdlog { get; }
    public static string EventColumnAutomationName { get; }
    public static string EventsHubToolDescription { get; }
    public static string EventsHubToolName { get; }
    public static string EventsViewTitle { get; }
    public static string EventTypeToolTip_Breakpoint { get; }
    public static string EventTypeToolTip_ChildrenPresent { get; }
    public static string EventTypeToolTip_ExceptionCaught { get; }
    public static string EventTypeToolTip_ExceptionThrown { get; }
    public static string EventTypeToolTip_NotifyPoint { get; }
    public static string EventTypeToolTip_Step { get; }
    public static string HelpText_PressEnterToShowEvents { get; }
    public static string IntelliTraceTrackTooltip { get; }
    public static string OutputCategory_FirstChanceException { get; }
    public static string OutputCategory_NativeExceptionThrown { get; }
    public static string OutputCategory_ProcessExit { get; }
    public static string OutputCategory_ProgramOutput { get; }
    public static string OutputCategory_StepFiltering { get; }
    public static string OutputCategory_ThreadExit { get; }
    public static string OutputCategory_Unknown { get; }
    public static string OutputEventCopyStringFormat { get; }
    public static string ProgramExitMessage { get; }
    public static string ProteusDisabled_Errors { get; }
    public static string ShowExternalEvent { get; }
    public static string SnapshotButtonName { get; }
    public static string ThreadExitMessage { get; }
    public static string ThreadStringIdAndName { get; }
    public static string TracePointHit_ShortDescription { get; }
    public static string TreeStackNodeLoading { get; }
    public static string TwoPhrasesAutomationNameFormat { get; }
    public static string UnavailableSnapshotImageName { get; }
    public static string UnknownCategoryName { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ActivatedHistoricalCodeContext();
    public static string get_ActivateHistoricalDebugging();
    public static string get_ActivateHistoricalDebuggingToolTip();
    public static string get_ActivateHistoricalSnapshotToolTip();
    public static string get_ActivateLiveDebugging();
    public static string get_ActivateLiveDebuggingToolTip();
    public static string get_AvailableSnapshotImageName();
    public static string get_CallsHubToolDescription();
    public static string get_CallsHubToolName();
    public static string get_CallsViewTitle();
    public static string get_CategoryName_Tracepoint();
    public static string get_CategoryNamePrefix();
    public static string get_ContextMenuThreadFilterText();
    public static string get_ContextMenuThreadFilterTextUnknownThread();
    public static string get_EmptyTreeLabel_Break();
    public static string get_EmptyTreeLabel_ProteusLow();
    public static string get_EmptyTreeLabel_ProteusLow_Attached();
    public static string get_EmptyTreeLabel_ProteusLow_NeedRestart();
    public static string get_EmptyTreeLabel_ProteusLow_Tdlog();
    public static string get_EventColumnAutomationName();
    public static string get_EventsHubToolDescription();
    public static string get_EventsHubToolName();
    public static string get_EventsViewTitle();
    public static string get_EventTypeToolTip_Breakpoint();
    public static string get_EventTypeToolTip_ChildrenPresent();
    public static string get_EventTypeToolTip_ExceptionCaught();
    public static string get_EventTypeToolTip_ExceptionThrown();
    public static string get_EventTypeToolTip_NotifyPoint();
    public static string get_EventTypeToolTip_Step();
    public static string get_HelpText_PressEnterToShowEvents();
    public static string get_IntelliTraceTrackTooltip();
    public static string get_OutputCategory_FirstChanceException();
    public static string get_OutputCategory_NativeExceptionThrown();
    public static string get_OutputCategory_ProcessExit();
    public static string get_OutputCategory_ProgramOutput();
    public static string get_OutputCategory_StepFiltering();
    public static string get_OutputCategory_ThreadExit();
    public static string get_OutputCategory_Unknown();
    public static string get_OutputEventCopyStringFormat();
    public static string get_ProgramExitMessage();
    public static string get_ProteusDisabled_Errors();
    public static string get_ShowExternalEvent();
    public static string get_SnapshotButtonName();
    public static string get_ThreadExitMessage();
    public static string get_ThreadStringIdAndName();
    public static string get_TracePointHit_ShortDescription();
    public static string get_TreeStackNodeLoading();
    public static string get_TwoPhrasesAutomationNameFormat();
    public static string get_UnavailableSnapshotImageName();
    public static string get_UnknownCategoryName();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.BreakEventDecorator : DiagnosticDataDecorator {
    private ExtensionMonikers _monikers;
    private EventKinds _eventKinds;
    private LinkedList`1<DiagnosticData> _breakEventCandidates;
    private LinkedList`1<DiagnosticData> _intelliTraceCandidates;
    private ulong _latestMatchedBreakEventClockTime;
    internal BreakEventDecorator(ExtensionMonikers monikers, EventKinds eventKinds);
    public virtual void EventOccurred(DiagnosticDataChangeCollection diagnosticDataChangeCollection);
    private static bool ShouldSetBreakEventOrdinal(BreakEventType breakEventType, DiagnosticData intelliTraceEvent);
    private static DiagnosticData PickIntelliTraceEvent(IEnumerable`1<DiagnosticData> intelliTraceEvents);
    private void TransferData(DiagnosticDataChangeCollection changeCollection, DiagnosticData breakEvent, DiagnosticData intelliTraceEvent, bool requiresRefresh);
    [CompilerGeneratedAttribute]
private bool <EventOccurred>b__6_0(DiagnosticData d);
    [CompilerGeneratedAttribute]
private bool <EventOccurred>b__6_1(DiagnosticData d);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.DiagnosticDataDecoratorFactory")]
[NameAttribute("BreakEventDecorator")]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.BreakEventDecoratorFactory : DiagnosticDataDecoratorFactory {
    public virtual DiagnosticDataDecorator CreateDecorator(HubExtensionServices hubServices);
    public virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousDiagnosticEvent : object {
    [CompilerGeneratedAttribute]
private _NotifyPointData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <ModuleIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    public _NotifyPointData Data { get; }
    public Int32[] ModuleIds { get; }
    public Guid UniqueProcessId { get; }
    public string DebugLocation { get; public set; }
    public string ModuleName { get; public set; }
    public ContinuousDiagnosticEvent(Nullable`1<Guid> uniqueProcessId);
    public ContinuousDiagnosticEvent(Guid uniqueProcessId, _NotifyPointData data, Int32[] moduleIds);
    [CompilerGeneratedAttribute]
public _NotifyPointData get_Data();
    [CompilerGeneratedAttribute]
public Int32[] get_ModuleIds();
    [CompilerGeneratedAttribute]
public Guid get_UniqueProcessId();
    [CompilerGeneratedAttribute]
public string get_DebugLocation();
    [CompilerGeneratedAttribute]
public void set_DebugLocation(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousEventProcessor : object {
    private IContinuousEventService _continuousEventService;
    private IStepBackwardService _stepBackwardService;
    private ISession _session;
    private IDocument _document;
    private IHubServiceProvider _serviceProvider;
    private ICategoryNameProvider _categoryNameProvider;
    private Dispatcher _dispatcher;
    private BufferBlock`1<ContinuousDiagnosticEvent> _events;
    private ICollectionPlanStore _cpStore;
    private TaskCompletionSource`1<bool> _initializeHistoricalProcess;
    private TaskCompletionSource`1<bool> _initializeTask;
    private Task _receiveEventsTask;
    private CancellationTokenSource _receiveEventsCancellationTokenSource;
    private IDictionary`2<string, string> _categoryTable;
    private IDictionary`2<int, HeuristicNotifyPointSpecification> _npTable;
    private TraceLogSandbox _sandbox;
    private SessionStateTracker _sessionStateTracker;
    private bool _isNativeScenario;
    private bool _isDisposed;
    private Guid _uniqueProcessId;
    public string Kind { get; }
    public ContinuousEventProcessor(ICollectionPlanStore cpStore, ICategoryNameProvider categoryProvider, IHubServiceProvider serviceProvider, IDocument document, Dispatcher dispatcher, IStepBackwardService stepBackwardService, bool isNativeScenario);
    private void Session_StateChanged(object sender, SessionStateTransitionedEventArgs e);
    public sealed virtual string get_Kind();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousEventProcessor/<GetNext>d__24")]
public sealed virtual Task`1<DiagnosticData> GetNext(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousEventProcessor/<RunDoReceiveEvents>d__25")]
private Task RunDoReceiveEvents(CancellationToken cancellationToken);
    private DiagnosticEventData TransformExceptionEvent(ContinuousDiagnosticEvent result);
    private DiagnosticEventData TransformEvent(ContinuousDiagnosticEvent result);
    private void ExecutePdq(ProgrammableDataQuerySpec spec, Byte[] buffer, string eventCategoryName, String& shortDesc, String& longDesc);
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticDataProviderFactory")]
[NameAttribute("ContinuousIntelliTraceEventProvider")]
[EventKindAttribute("IntelliTrace")]
[ExtensionContextAttribute]
[DataVisualizationAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousEventProcessorFactory : ContinuousEventProcessorFactoryBase {
    private IHubServiceProvider _hubServiceProvider;
    private bool _IsNativeScenario;
    [ImportingConstructorAttribute]
public ContinuousEventProcessorFactory(IHubServiceProvider hubServiceProvider);
    public virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public virtual IDiagnosticDataProvider CreateDataProvider(HubExtensionServices hubServices);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousEventProcessorFactoryBase : object {
    [ConditionalAttribute("DEBUG")]
protected void SetIsSupportedCalled();
    [ConditionalAttribute("DEBUG")]
private void AssertIsSupportedCalled();
    public virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public abstract virtual IDiagnosticDataProvider CreateDataProvider(HubExtensionServices hubServices);
    public sealed virtual IDictionary`2<string, object> GetHubToolStartTelemetryProperties();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousEventTrackerBase : object {
    [CompilerGeneratedAttribute]
private IHubServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private IContinuousEventService <ContinuousEventService>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <ReceiverCancellationToken>k__BackingField;
    private CancellationTokenSource _receiverCancellationTokenSource;
    private SessionStateTracker _sessionStateTracker;
    private bool _isDisposed;
    protected IHubServiceProvider ServiceProvider { get; }
    protected IDocument Document { get; }
    protected IContinuousEventService ContinuousEventService { get; }
    protected Guid UniqueProcessId { get; private set; }
    protected CancellationToken ReceiverCancellationToken { get; }
    public ContinuousEventTrackerBase(IHubServiceProvider serviceProvider, IDocument document);
    [CompilerGeneratedAttribute]
protected IHubServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
protected IDocument get_Document();
    [CompilerGeneratedAttribute]
protected IContinuousEventService get_ContinuousEventService();
    [CompilerGeneratedAttribute]
protected Guid get_UniqueProcessId();
    [CompilerGeneratedAttribute]
private void set_UniqueProcessId(Guid value);
    [CompilerGeneratedAttribute]
protected CancellationToken get_ReceiverCancellationToken();
    protected abstract virtual void OnCollectionStarted();
    private void SubscribeCollectionStarted(EventHandler`1<SessionStateTransitionedEventArgs> handler);
    private void SessionStateTracker_CollectionStarted(object sender, SessionStateTransitionedEventArgs state);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousExceptionEvent : ContinuousDiagnosticEvent {
    [CompilerGeneratedAttribute]
private int <ExceptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionName>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EventTime>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ThreadId>k__BackingField;
    public int ExceptionId { get; }
    public string ExceptionName { get; }
    public ulong EventId { get; }
    public long EventTime { get; }
    public UInt32 ThreadId { get; }
    public ContinuousExceptionEvent(DkmCustomMessage customMessage, NativeExceptionInformation messageData);
    [CompilerGeneratedAttribute]
public int get_ExceptionId();
    [CompilerGeneratedAttribute]
public string get_ExceptionName();
    [CompilerGeneratedAttribute]
public ulong get_EventId();
    [CompilerGeneratedAttribute]
public long get_EventTime();
    [CompilerGeneratedAttribute]
public UInt32 get_ThreadId();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousModuleTracker : ContinuousEventTrackerBase {
    private Task _receiveSymbolLoads;
    private ConcurrentHashSet`1<int> _userCodeModuleIds;
    [CompilerGeneratedAttribute]
private Action NewSymbolLoad;
    public ContinuousModuleTracker(IHubServiceProvider serviceProvider, IDocument document);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NewSymbolLoad(Action value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NewSymbolLoad(Action value);
    public sealed virtual bool GetIsUserCode(int moduleId);
    protected virtual void OnCollectionStarted();
    private Task RunDoReceiveSymbolLoads(CancellationToken cancellationToken);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousSymbolLoad : object {
    [CompilerGeneratedAttribute]
private int <ModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueProcessId>k__BackingField;
    public int ModuleId { get; }
    public Guid UniqueProcessId { get; }
    public ContinuousSymbolLoad(Guid uniqueProcessId, int moduleId);
    [CompilerGeneratedAttribute]
public int get_ModuleId();
    [CompilerGeneratedAttribute]
public Guid get_UniqueProcessId();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousThreadEvent : object {
    [CompilerGeneratedAttribute]
private int <EventCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueProcessId>k__BackingField;
    public int EventCode { get; }
    public int ThreadId { get; }
    public string ThreadName { get; }
    public Guid UniqueProcessId { get; }
    public ContinuousThreadEvent(int eventCode, int threadId, string threadName, Guid uniqueProcessId);
    [CompilerGeneratedAttribute]
public int get_EventCode();
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public string get_ThreadName();
    [CompilerGeneratedAttribute]
public Guid get_UniqueProcessId();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.ContinuousThreadTracker : ContinuousEventTrackerBase {
    private ConcurrentDictionary`2<int, string> _threadIdToNameDict;
    private Task _receiveThreadEvents;
    public ContinuousThreadTracker(IHubServiceProvider serviceProvider, IDocument document);
    protected virtual void OnCollectionStarted();
    private Task RunDoReceiveThreadEvents(CancellationToken cancellationToken);
    public sealed virtual bool GetThreadName(int threadId, String& name);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.IContinuousEventService {
    public abstract virtual Task`1<ContinuousDiagnosticEvent> GetNextEvent(CancellationToken cancellationToken, Guid uniqueProcessId);
    public abstract virtual Task`1<ContinuousSymbolLoad> GetNextSymbolLoad(CancellationToken cancellationToken, Guid uniqueProcessId);
    public abstract virtual Task`1<ContinuousThreadEvent> GetNextThreadEvent(CancellationToken cancellationToken, Guid uniqueProcessId);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.IContinuousModuleTracker {
    [CompilerGeneratedAttribute]
public abstract virtual void add_NewSymbolLoad(Action value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_NewSymbolLoad(Action value);
    public abstract virtual bool GetIsUserCode(int moduleId);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ContinuousIntelliTraceProvider.IContinuousThreadTracker {
    public abstract virtual bool GetThreadName(int threadId, String& name);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ISnapshotDataService {
    public abstract virtual Task`1<SnapshotDescriptor> GetNextEvent(CancellationToken cancellationToken, Guid uniqueProcessId);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.NoOpDataProvider : object {
    private TaskCompletionSource`1<DiagnosticData> _indefiniteTask;
    private string _eventKind;
    public string Kind { get; }
    public NoOpDataProvider(string eventKind);
    public sealed virtual Task`1<DiagnosticData> GetNext(CancellationToken cancellationToken);
    public sealed virtual string get_Kind();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.OutputEventProvider.DebuggerOutputEvent : object {
    private static Dictionary`2<EventType, string> _outputCategoryNameMap;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ulong> <QPCTimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private EventType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProcessId>k__BackingField;
    public string Message { get; private set; }
    public Nullable`1<ulong> QPCTimeStamp { get; private set; }
    public EventType Type { get; private set; }
    public Guid ProcessId { get; private set; }
    public DebuggerOutputEvent(string message, Nullable`1<ulong> timestamp, EventType type, Guid processId);
    private static DebuggerOutputEvent();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ulong> get_QPCTimeStamp();
    [CompilerGeneratedAttribute]
private void set_QPCTimeStamp(Nullable`1<ulong> value);
    [CompilerGeneratedAttribute]
public EventType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(EventType value);
    [CompilerGeneratedAttribute]
public Guid get_ProcessId();
    [CompilerGeneratedAttribute]
private void set_ProcessId(Guid value);
    internal static string GetCategoryName(EventType type);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.OutputEventProvider.OutputEventProvider : object {
    private ISDMDebugEventProvider _debugEventProvider;
    private bool _disposed;
    private Dispatcher _dispatcher;
    private ISession _session;
    private SessionStateTracker _sessionStateTracker;
    private IHubServiceProvider _hubServiceProvider;
    private IDocument _document;
    private Nullable`1<Guid> _debugTargetUniquePid;
    private BufferBlock`1<DebuggerOutputEvent> _events;
    private TaskCompletionSource`1<object> _initializationTask;
    private CancellationTokenSource _receiveEventsCancellationTokenSource;
    private ulong _previousClockTime;
    public string Kind { get; }
    public Nullable`1<Guid> DebugTargetUniquePid { get; }
    internal OutputEventProvider(IHubServiceProvider serviceProvider, IDocument document, Dispatcher dispatcher);
    private void InitializeDebuggerService();
    private void CleanupDebugSession();
    private void Event(IDebugEngine2 pEngine, IDebugProcess2 pProcess, IDebugProgram2 pProgram, IDebugThread2 pThread, IDebugEvent2 pEvent, Guid riidEvent, UInt32 dwAttrib);
    private static Nullable`1<ulong> GetTimeStamp(IDebugEvent2 pEvent);
    private bool ProcessWrappedMessageEvent(IDebugEvent2 pEvent, EventType type, Guid pid);
    private void ProcessDebugMessageEvent(IDebugEvent2 pEvent, Guid pid);
    private void ProcessOutputStringEvent(IDebugEvent2 pEvent, Guid pid);
    private void ProcessProgramDestroyEvent(IDebugEvent2 pEvent, IDebugProgram2 pProgram, Guid pid, UInt32 physicalProcessId);
    private void ProcessThreadDestoryEvent(IDebugEvent2 pEvent, IDebugThread2 pThread, Guid pid);
    private void ProcessModuleLoadEvent(IDebugEvent2 pEvent, Guid pid);
    public sealed virtual string get_Kind();
    public Nullable`1<Guid> get_DebugTargetUniquePid();
    public sealed virtual void Dispose();
    private void Session_StateChanged(object sender, SessionStateTransitionedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.OutputEventProvider.OutputEventProvider/<GetNext>d__29")]
public sealed virtual Task`1<DiagnosticData> GetNext(CancellationToken cancellationToken);
    private void ThrowIfDisposed();
    private void SetDebuggerProcess();
    private DiagnosticEventData TransformEvent(DebuggerOutputEvent outputEvent);
    private Task AddEvent(DebuggerOutputEvent outputEvent);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticDataProviderFactory")]
[NameAttribute("OutputEventProvider")]
[EventKindAttribute("Output")]
[ExtensionContextAttribute]
[DataVisualizationAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.OutputEventProvider.OutputEventProviderFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public OutputEventProviderFactory(IHubServiceProvider hubServiceProvider);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IDiagnosticDataProvider CreateDataProvider(HubExtensionServices hubServices);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.PlaybackEventKindDecorator : DiagnosticDataDecorator {
    private EventKinds _eventKinds;
    public PlaybackEventKindDecorator(EventKinds eventKinds);
    public virtual void EventOccurred(DiagnosticDataChangeCollection diagnosticEvents);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.PlaybackRuler : object {
    public sealed virtual bool IsInTimeSelection(DiagnosticData e);
    public sealed virtual void RestartSampling();
    public sealed virtual IEnumerable`1<DiagnosticData> SampleEventListForSwimlane(IEnumerable`1<DiagnosticData> rawList, ulong selectedDiagnosticDataId);
    public sealed virtual bool SetClientWidth(int clientWidth);
    public sealed virtual bool SetSelectionTimeRange(long selectionTimeRangeBeginMicroseconds, long selectionTimeRangeEndMicroseconds);
    public sealed virtual bool SetViewportTimeRange(long viewportTimeRangeBeginMicroseconds, long viewportTimeRangeEndMicroseconds);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.PlaybackTimeProvider : object {
    private QpcTimeProperties _qpcTimeProperties;
    private static long NanosecondsPerSecond;
    public PlaybackTimeProvider(QpcTimeProperties qpcTimeProperties);
    public sealed virtual void ConvertQpcTimeToEventTimeNs(IList`1<ulong> timeBuffer, CancellationToken token);
    public sealed virtual Task ConvertQpcTimeToEventTimeNsAsync(IList`1<ulong> timeBuffer, CancellationToken token);
    private static ulong ConvertQpcTimeToNanoseconds(QpcTimeProperties qpcTimeProperties, ulong qpcTime);
    public sealed virtual ulong GetCurrentTime();
    public sealed virtual void Dispose();
}
public static class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.ServiceConstants : object {
    public static string ServiceGuidString;
    public static Guid ComponentGuid;
    private static ServiceConstants();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataDecorator : DiagnosticDataDecorator {
    private int _intelliTraceRendererId;
    private EventKinds _eventKinds;
    private int _snapshotEventKindId;
    private int _intelliTraceEventKindId;
    private IDictionary`2<ulong, DiagnosticData> _diagnosticDataWithSnapshot;
    private LinkedList`1<SnapshotDiagnosticData> _cachedSnapshots;
    private List`1<DiagnosticData> _cachedBreakEvents;
    private List`1<DiagnosticData> _cachedExceptionEvents;
    private bool _isAD7ALIntegration;
    internal IList`1<DiagnosticData> TestHookCachedBreakEvents { get; }
    internal IList`1<DiagnosticData> TestHookCachedExceptionEvents { get; }
    internal SnapshotDataDecorator(ExtensionMonikers monikers, EventKinds eventKinds, bool isAD7ALIntegration);
    public virtual void EventOccurred(DiagnosticDataChangeCollection diagnosticDataChangeCollection);
    private static ulong GetDebuggerId(DiagnosticData data);
    private bool IsSnapshotEvent(DiagnosticData data);
    private bool IsBreakEvent(DiagnosticData data);
    private bool IsIntelliTraceEvent(DiagnosticData data);
    private bool MatchAndTransferSnapshotData(DiagnosticDataChangeCollection changeCollection, DiagnosticData newData, LinkedList`1<SnapshotDiagnosticData> cachedSnapshots, IDictionary`2<ulong, DiagnosticData> dataWithSnapshot);
    private bool TryTransferSnapshotData(DiagnosticDataChangeCollection changeCollection, SnapshotDiagnosticData snapshot, IList`1<DiagnosticData> cachedDataList, IList`1<DiagnosticData> newDataList, IDictionary`2<ulong, DiagnosticData> cachedDataWithSnapshot, IDictionary`2<ulong, DiagnosticData> newDataWithSnapshot);
    private DiagnosticData TryTransferSnapshotData(DiagnosticDataChangeCollection changeCollection, SnapshotDiagnosticData snapshot, IList`1<DiagnosticData> dataList, bool requireRefresh);
    private void TransferSnapshotData(DiagnosticDataChangeCollection changeCollection, SnapshotDiagnosticData snapshot, DiagnosticData data, bool requireRefresh);
    private void TransferSnapshotApiSnapshotData(DiagnosticDataChangeCollection changeCollection, SnapshotDiagnosticData snapshot, DiagnosticData data, bool requireRefresh);
    private void TransferAD7ALSnapshotData(DiagnosticDataChangeCollection changeCollection, SnapshotDiagnosticData snapshot, DiagnosticData data, bool requireRefresh);
    private bool TryClearSnapshotData(DiagnosticDataChangeCollection changeCollection, SnapshotDiagnosticData snapshot, IDictionary`2<ulong, DiagnosticData> dataWithSnapshot, bool requireRefresh);
    private void ClearSnapshotData(DiagnosticDataChangeCollection changeCollection, DiagnosticData data, bool requireRefresh);
    private void ClearSnapshotApiSnapshotData(DiagnosticDataChangeCollection changeCollection, DiagnosticData data, bool requireRefresh);
    private void ClearAD7ALSnapshotData(DiagnosticDataChangeCollection changeCollection, DiagnosticData data, bool requireRefresh);
    internal IList`1<DiagnosticData> get_TestHookCachedBreakEvents();
    internal IList`1<DiagnosticData> get_TestHookCachedExceptionEvents();
    [CompilerGeneratedAttribute]
private void <EventOccurred>g__RemoveCachedExceptionEvents|10_0(ulong timeStamp, UInt32 threadId, <>c__DisplayClass10_0& );
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.DiagnosticDataDecoratorFactory")]
[NameAttribute("DecoratorName")]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataDecoratorFactory : DiagnosticDataDecoratorFactory {
    public virtual DiagnosticDataDecorator CreateDecorator(HubExtensionServices hubServices);
    public virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataProvider : object {
    private static Guid TraceDebuggerEngineGuid;
    private ISession _session;
    private IDocument _document;
    private IHubServiceProvider _serviceProvider;
    private SnapshotDataService _snapshotDataService;
    private SessionStateTracker _sessionStateTracker;
    private AsyncDisposer _asyncDisposer;
    private Dispatcher _dispatcher;
    private bool _isAD7ALIntegration;
    private IIntelliTraceSnapshotService _intelliTraceSnapshotService;
    private UInt32 _intelliTraceSnapshotServiceCookies;
    private TaskCompletionSource`1<bool> _initializeTask;
    private Task _receiveEventsTask;
    private CancellationTokenSource _receiveEventsCancellationTokenSource;
    private Guid _uniqueProcessId;
    private BufferBlock`1<SnapshotDescriptor> _events;
    public string Kind { get; }
    public SnapshotDataProvider(IHubServiceProvider serviceProvider, IDocument document, Dispatcher dispatcher, bool isAD7ALIntegration, IIntelliTraceSnapshotService intelliTraceSnapshotService);
    private static SnapshotDataProvider();
    public sealed virtual string get_Kind();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataProvider/<DisposeAsync>d__20")]
private Task DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataProvider/<GetNext>d__21")]
public sealed virtual Task`1<DiagnosticData> GetNext(CancellationToken cancellationToken);
    private void Session_StateChanged(object sender, SessionStateTransitionedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataProvider/<RunDoReceiveEvents>d__23")]
private Task RunDoReceiveEvents(CancellationToken cancellationToken);
    private void ThrowIfDisposed();
    [CompilerGeneratedAttribute]
private void <DisposeAsync>b__20_0();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataProviderConstants : object {
    public static string ProviderName;
    public static string EventKindName;
    public static string DecoratorName;
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticDataProviderFactory")]
[NameAttribute("F5SnapshotDataProvider")]
[EventKindAttribute("F5Snapshot")]
[ExtensionContextAttribute]
[DataVisualizationAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataProviderFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public SnapshotDataProviderFactory(IHubServiceProvider hubServiceProvider);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IDiagnosticDataProvider CreateDataProvider(HubExtensionServices hubServices);
}
[GuidAttribute("4456CB7C-35B5-41CF-8B86-D4149A86E2F4")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataService : object {
    private bool _isDisposed;
    private Dispatcher _dispatcher;
    private PerProcessCache`1<SnapshotDescriptor> _snapshotDescriptorForUniqueProcessId;
    private bool _isAD7ALIntegration;
    private IIntelliTraceSnapshotService _intelliTraceSnapshotService;
    private IDictionary`2<ulong, ComObjectWrapper`1<IDebugSessionProcess100>> _managedProcesses;
    public SnapshotDataService(Dispatcher dispatcher, IIntelliTraceSnapshotService intelliTraceSnapshotService);
    public sealed virtual void Dispose();
    public sealed virtual int OnCustomDebugEvent(Guid& ProcessId, VsComponentMessage message);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDataService/<GetNextEvent>d__10")]
public sealed virtual Task`1<SnapshotDescriptor> GetNextEvent(CancellationToken cancellationToken, Guid uniqueProcessId);
    private void OnTimeContextCreated(object sender, TimeContextCreatedEventArgs eventArgs);
    private void OnTimeContextRemoved(object sender, TimeContextRemovedEventArgs eventArgs);
    private void OnEnterBreakState(object sender, EnterBreakStateEventArgs eventArgs);
    private void OnSessionDestroy(object sender, EventArgs args);
    private void OnNewSnapshotDescriptor(SnapshotDescriptor snapshotDescriptor);
    private void OnProcessDestroyed(object sender, IDebugProcess2 process);
    private int OnProcessExit(Guid uniqueProcessId);
    private void ThrowIfDisposed();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDescriptor : object {
    [CompilerGeneratedAttribute]
private SnapshotOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProcessGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <QPCTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugSessionProcess100 <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugTimeContext100 <DebugTimeContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SnapshotId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SnapshotProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <StoppingThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private DkmProcess <OriginalDkmProcess>k__BackingField;
    public SnapshotOperation Operation { get; }
    public Guid ProcessGuid { get; }
    public ulong QPCTime { get; }
    public IDebugSessionProcess100 Process { get; private set; }
    public IDebugTimeContext100 DebugTimeContext { get; private set; }
    public ulong SnapshotId { get; private set; }
    public int SnapshotProcessId { get; }
    public UInt32 StoppingThreadId { get; }
    public DkmProcess OriginalDkmProcess { get; }
    private SnapshotDescriptor(Guid processGuid, ulong qpcTime, ulong snapshotId, IDebugSessionProcess100 process, IDebugTimeContext100 debugTimeContext, UInt32 stoppingThreadId);
    private SnapshotDescriptor(Guid processGuid, ulong qpcTime, ulong snapshotId);
    private SnapshotDescriptor(Guid processGuid, ulong qpcTime);
    private SnapshotDescriptor(SnapshotOperation operation, Guid processGuid, ulong qpcTime, ulong snapshotId, DkmProcess originalDkmProcess, int snapshotProcessId, UInt32 stoppingThreadId);
    private SnapshotDescriptor(SnapshotOperation operation, Guid processGuid, ulong qpcTime);
    private SnapshotDescriptor(SnapshotOperation operation, Guid processGuid, ulong qpcTime, UInt32 stoppingThreadId);
    [CompilerGeneratedAttribute]
public SnapshotOperation get_Operation();
    [CompilerGeneratedAttribute]
public Guid get_ProcessGuid();
    [CompilerGeneratedAttribute]
public ulong get_QPCTime();
    [CompilerGeneratedAttribute]
public IDebugSessionProcess100 get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(IDebugSessionProcess100 value);
    [CompilerGeneratedAttribute]
public IDebugTimeContext100 get_DebugTimeContext();
    [CompilerGeneratedAttribute]
private void set_DebugTimeContext(IDebugTimeContext100 value);
    [CompilerGeneratedAttribute]
public ulong get_SnapshotId();
    [CompilerGeneratedAttribute]
private void set_SnapshotId(ulong value);
    [CompilerGeneratedAttribute]
public int get_SnapshotProcessId();
    [CompilerGeneratedAttribute]
public UInt32 get_StoppingThreadId();
    [CompilerGeneratedAttribute]
public DkmProcess get_OriginalDkmProcess();
    public static SnapshotDescriptor CreateDescriptorFromTimeContextCreated(Guid processGuid, ulong qpcTime, ulong snapshotId, IDebugSessionProcess100 process, IDebugTimeContext100 debugTimeContext, UInt32 stoppingThreadId);
    public static SnapshotDescriptor CreateDescriptorFromTimeContextRemoved(Guid processGuid, ulong qpcTime, ulong snapshotId);
    public static SnapshotDescriptor CreateDescriptorFromBreakEvent(Guid processGuid, ulong qpcTime);
    public static SnapshotDescriptor CreateDescriptorFromSnapshotApi(SnapshotOperation operation, Guid processGuid, ulong qpcTime, ulong snapshotId, DkmProcess originalDkmProcess, int snapshotProcessId, UInt32 stoppingThreadId);
    public static SnapshotDescriptor CreateDescriptorForTests(SnapshotOperation operation, Guid processGuid, ulong qpcTime, ulong snapshotId, IDebugSessionProcess100 process, IDebugTimeContext100 debugTimeContext, UInt32 stoppingThreadId);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotDiagnosticData : DiagnosticData {
    private SnapshotDescriptor _snapshotDescriptor;
    public IDebugSessionProcess100 Process { get; }
    public SnapshotOperation Operation { get; }
    public ulong SnapshotId { get; }
    public IDebugTimeContext100 DebugTimeContext { get; }
    public DkmProcess OriginalDkmProcess { get; }
    public int SnapshotProcessId { get; }
    public SnapshotDiagnosticData(SnapshotDescriptor snapshotDescriptor);
    public IDebugSessionProcess100 get_Process();
    public SnapshotOperation get_Operation();
    public ulong get_SnapshotId();
    public IDebugTimeContext100 get_DebugTimeContext();
    public DkmProcess get_OriginalDkmProcess();
    public int get_SnapshotProcessId();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotEventListener : object {
    private bool _isAD7ALIntegration;
    public sealed virtual void OnProcessSnapshotAdded(DkmProcess dkmProcess, DkmProcessSnapshot processSnapshot, DkmEventDescriptor eventDescriptor);
    public sealed virtual void OnProcessSnapshotRemoved(DkmProcess dkmProcess, DkmProcessSnapshot processSnapshot, DkmEventDescriptor eventDescriptor);
    private sealed virtual override void Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmProcessExitNotification.OnProcessExit(DkmProcess process, int exitCode, DkmEventDescriptor eventDescriptor);
    public sealed virtual void OnRuntimeBreakpoint(DkmRuntimeBreakpoint runtimeBreakpoint, DkmThread thread, bool hasException, DkmEventDescriptorS eventDescriptor);
    public sealed virtual void OnStepComplete(DkmStepper stepper, DkmThread thread, bool hasException, DkmEventDescriptorS eventDescriptor);
    private static void SendToService(DkmProcess process, int eventCode, object data);
}
internal enum Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SnapshotOperation : Enum {
    public int value__;
    public static SnapshotOperation Add;
    public static SnapshotOperation Remove;
    public static SnapshotOperation ClearBreakEvent;
}
[GuidAttribute("939E1B66-C374-417C-B1A3-E1FC9AE21433")]
[ComVisibleAttribute("True")]
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.SSnapshotDebuggerEventHandlerService {
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.DebugTraceEventReader : object {
    private TraceEventQueryManager _query;
    private Nullable`1<UInt32> _count;
    private UInt32 _position;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    public TraceEventQueryManager TraceEventQueryManager { get; }
    public DebugTraceEventReader(TraceEventQueryManager query);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual IList`1<TraceEventInfo> GetTraceEvents(int offset, int count);
    public sealed virtual TraceEventInfo GetLiveEvent();
    public sealed virtual int GetCount();
    public sealed virtual void Update();
    public sealed virtual void Dispose();
    public IDebugTimeContext100 GetTimeContextOfEvent(ulong eventId);
    public TraceEventQueryManager get_TraceEventQueryManager();
    private void ThrowIfDisposed();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.DebugTraceEventReaderFactory : object {
    private HistoricalDataManager _dataManager;
    public DebugTraceEventReaderFactory(HistoricalDataManager dataManager);
    public sealed virtual ITraceEventReader GetTraceEventReader(FilterNode filter);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.ITimeContextProvider {
    public abstract virtual bool TrySetTimeContext(DiagnosticData data);
    public abstract virtual bool TrySetTimeContext(ulong ordinal, int threadId);
    public abstract virtual void GoToLiveMode();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.ITraceEventReader {
    public bool IsDisposed { get; }
    public abstract virtual IList`1<TraceEventInfo> GetTraceEvents(int offset, int count);
    public abstract virtual int GetCount();
    public abstract virtual void Update();
    public abstract virtual TraceEventInfo GetLiveEvent();
    public abstract virtual bool get_IsDisposed();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.ITraceEventReaderFactory {
    public abstract virtual ITraceEventReader GetTraceEventReader(FilterNode filter);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.PlaybackEventProvider : object {
    private static int TraceEventBatchSize;
    private ITraceEventReaderFactory _dataReaderFactory;
    private ICategoryNameProvider _categoryProvider;
    private BufferBlock`1<DiagnosticData> _data;
    private Task _dataReadTask;
    private CancellationTokenSource _disposeCancellationTokenSource;
    private bool _isDataRead;
    private AsyncDisposer _asyncDisposer;
    public string Kind { get; }
    public PlaybackEventProvider(ITraceEventReaderFactory dataReaderFactory, ICategoryNameProvider categoryProvider);
    private void StartDataRead();
    internal static FilterNode GetDefaultQueryFilterNode();
    private static BinopNode GetNotifyNode(bool match, int notifyId);
    private void ReadTraceEvents(ITraceEventReader reader, CancellationToken cancellationToken, ICategoryNameProvider categoryProvider);
    private static IList`1<DiagnosticEventData> PrepareEvents(IList`1<TraceEventInfo> traceEvents, ICategoryNameProvider categoryNameProvider, CancellationToken token);
    public sealed virtual string get_Kind();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.PlaybackEventProvider/<GetNext>d__16")]
public sealed virtual Task`1<DiagnosticData> GetNext(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.PlaybackEventProvider/<DisposeAsync>d__18")]
private void DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.PlaybackEventProvider/<<StartDataRead>b__9_0>d")]
[CompilerGeneratedAttribute]
private Task <StartDataRead>b__9_0();
}
public class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.ReaderDisposedException : ObjectDisposedException {
    public ReaderDisposedException(string objectName);
    protected ReaderDisposedException(SerializationInfo info, StreamingContext context);
    public ReaderDisposedException(string message, Exception innerException);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TraceEventProvider.TimeContextProvider : object {
    private HistoricalDataManager _historicalDataManager;
    private bool _isLiveDebugging;
    private IReadOnlyDiagnosticDataCache _dataCache;
    private IInternalEventAggregator _eventAggregator;
    private IDiagnosticTelemetryService _telemetryService;
    private Dispatcher _dispatcher;
    private TimeContext _pendingTimeContext;
    private EventKinds _eventKinds;
    private IIntelliTraceSnapshotService _intelliTraceSnapshotService;
    public TimeContextProvider(HistoricalDataManager historicalDataManager, bool isLiveDebugging, IReadOnlyDiagnosticDataCache dataCache, IInternalEventAggregator eventAggregator, IDiagnosticTelemetryService telemetryService, Dispatcher dispatcher, EventKinds eventKinds, IIntelliTraceSnapshotService intelliTraceSnapshotService);
    public sealed virtual bool TrySetTimeContext(DiagnosticData data);
    public sealed virtual bool TrySetTimeContext(ulong ordinal, int threadId);
    public sealed virtual void GoToLiveMode();
    private void EventAggregator_DataReset(EventArgs args);
    private void OnTimeContextChanged(object sender, TimeContextChangedEventArgs eventArgs);
    public sealed virtual void Dispose();
    private DiagnosticData GetDiagnosticDataByTimeContext(DEBUG_TIME_CONTEXT_TYPE timeContextType, ulong canonicalValue);
    [CompilerGeneratedAttribute]
private void <EventAggregator_DataReset>b__14_0();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TracepointEventDecorator : DiagnosticDataDecorator {
    private Dictionary`2<ulong, List`1<DiagnosticData>> _tracepointEventCandidates;
    private Dictionary`2<ulong, List`1<DiagnosticData>> _breakAndIntelliTraceEventCandidates;
    private DiagnosticData _latestMatchedTracepointEvent;
    private ulong _latestSeenTracepointClockTime;
    private ulong _latestSeenBreakOrIntelliTraceClockTime;
    private EventKinds _eventKinds;
    public TracepointEventDecorator(EventKinds eventKinds);
    public virtual void EventOccurred(DiagnosticDataChangeCollection diagnosticDataChangeCollection);
    private static void CompareAndReplace(DiagnosticData& target, DiagnosticData source);
    private static Dictionary`2<ulong, List`1<DiagnosticData>> CreateNewCandidates(IDictionary`2<ulong, List`1<DiagnosticData>> candidates, IDictionary`2<ulong, List`1<DiagnosticData>> newData, ulong largestMatchedDataClockTime);
    private DiagnosticData ProcessTracepointCandidate(Dictionary`2<ulong, List`1<DiagnosticData>> outputEvents, KeyValuePair`2<ulong, List`1<DiagnosticData>> breakOrIntelliTraceEvents, DiagnosticDataChangeCollection diagnosticDataChangeCollection, bool requiresRefreshingBreakEvent);
    private static bool IsDataRemoved(DiagnosticDataChangeCollection diagnosticDataChangeCollection, DiagnosticData data);
    private void TransferData(DiagnosticDataChangeCollection changeCollection, DiagnosticData breakOrIntelliTraceEvent, DiagnosticData outputEvent, bool requiresRefresh);
    [CompilerGeneratedAttribute]
private bool <EventOccurred>b__7_0(DiagnosticData d);
    [CompilerGeneratedAttribute]
private bool <ProcessTracepointCandidate>b__10_0(DiagnosticData d);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.DiagnosticDataDecoratorFactory")]
[NameAttribute("TracepointEventDecorator")]
[OrderAttribute]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.EventProvider.TracepointEventDecoratorFactory : DiagnosticDataDecoratorFactory {
    public virtual DiagnosticDataDecorator CreateDecorator(HubExtensionServices hubServices);
    public virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.CollectionPlanCategoryProvider : CollectionPlanCategoryProviderBase {
    private _CollectionPlan _collectionPlan;
    private static IDictionary`2<string, int> CategoryIdOrderTable;
    private static int ExtraCategoryOrder;
    public CollectionPlanCategoryProvider(_CollectionPlan collectionPlan);
    private static CollectionPlanCategoryProvider();
    public virtual bool IsConsoleEnabled();
    public virtual IEnumerable`1<DiagnosticDataCategory> GetCategories();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.JmcItemFilterBase : MenuItemFilter {
    public static string ShouldDefaultShowExternalMetadataKey;
    private Dispatcher _dispatcher;
    private EventAggregator _eventAggregator;
    private Timer _refreshFilterTimer;
    private object _refreshFilterTimerLock;
    private LoggedMenuCommand _showExternalEventsCommand;
    private UInt32 modreq(System.Runtime.CompilerServices.IsVolatile) _externalEventCount;
    private EventKinds _eventKinds;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _jmcEnabled;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _showExternalEvents;
    public JmcItemFilterBase(IHubServiceProvider hubServiceProvider, HubExtensionServices hubService, FilterMenuContext menuContext, Dispatcher dispatcher);
    public virtual void InitializeMenuItems();
    public virtual bool IsFiltered(DiagnosticData diagnosticData);
    protected virtual void Dispose(bool disposing);
    protected DiagnosticEventData GetIntelliTraceEventForJustMyCode(DiagnosticData diagnosticData);
    protected void StartRefreshFilterTimer();
    private void LogUserInteraction(OleMenuCommand command);
    private void OnDebugOptionUpdate(object sender, DebuggerOptionChangedEventArgs args);
    private void EventAggregator_ExternalEventsCountChanged(ExternalEventsCountArgs args);
    private void OnShowExternalEventCommandChanged(object sender, EventArgs args);
    private void QueryShowExternalEventCommandStatus(object sender, EventArgs args);
    private void ClearShowExternalEventsCommand();
    private void UpdateShowExternalEvents(bool newValue);
    private void ClearRefreshFilterTimer();
    private void StopRefreshFilterTimer();
    private void OnRefreshFilterTimer(object sender, ElapsedEventArgs args);
    [CompilerGeneratedAttribute]
private void <InitializeMenuItems>b__11_0();
    [CompilerGeneratedAttribute]
private void <OnRefreshFilterTimer>b__25_0();
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticDataCategoryProviderFactory")]
[ExtensionContextAttribute]
[NameAttribute("IntelliTraceLiveDebuggingCategoryProvider")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.LiveCategoryProviderFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public LiveCategoryProviderFactory(IHubServiceProvider serviceProvider);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IDiagnosticDataCategoryProvider CreateCategoryProvider(HubExtensionServices services);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.LiveDebuggingJmcItemFilter : JmcItemFilterBase {
    private ContinuousModuleTracker _moduleTracker;
    private IStepBackwardService _stepBackwardService;
    public LiveDebuggingJmcItemFilter(IHubServiceProvider hubServiceProvider, HubExtensionServices hubService, FilterMenuContext menuContext, Dispatcher dispatcher, IStepBackwardService stepBackwardService);
    public virtual bool IsFiltered(DiagnosticData diagnosticData);
    protected virtual void Dispose(bool isDisposing);
    private void OnNewSymbolLoad();
    [CompilerGeneratedAttribute]
private void <OnNewSymbolLoad>b__5_0();
}
[ExtensionContextAttribute]
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Filter.Menu.IMenuItemFilterFactory")]
[NameAttribute("IntelliTraceJMCItemFilter")]
[OrderAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.LiveDebuggingJmcItemFilterFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public LiveDebuggingJmcItemFilterFactory(IHubServiceProvider hubServiceProvider);
    public sealed virtual MenuItemFilter CreateMenuItemFilter(HubExtensionServices hubServices, FilterMenuContext menuContext, Dispatcher dispatcher);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackCategoryItemFilter : CategoryItemFilterBase {
    public PlaybackCategoryItemFilter(IHubServiceProvider hubServiceProvider, HubExtensionServices hubService, FilterMenuContext menuContext);
}
[ExtensionContextAttribute]
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Filter.Menu.IMenuItemFilterFactory")]
[NameAttribute("CategoryItemFilter")]
[OrderAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackCategoryItemFilterFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public PlaybackCategoryItemFilterFactory(IHubServiceProvider hubServiceProvider);
    public sealed virtual MenuItemFilter CreateMenuItemFilter(HubExtensionServices hubServices, FilterMenuContext menuContext, Dispatcher dispatcher);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticDataCategoryProviderFactory")]
[ExtensionContextAttribute]
[NameAttribute("IntelliTracePlaybackCategoryProvider")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackCategoryProviderFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public PlaybackCategoryProviderFactory(IHubServiceProvider serviceProvider);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IDiagnosticDataCategoryProvider CreateCategoryProvider(HubExtensionServices services);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackJmcItemFilter : JmcItemFilterBase {
    public PlaybackJmcItemFilter(IHubServiceProvider hubServiceProvider, HubExtensionServices hubService, FilterMenuContext menuContext, Dispatcher dispatcher);
}
[ExtensionContextAttribute]
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Filter.Menu.IMenuItemFilterFactory")]
[NameAttribute("IntelliTraceJMCItemFilter")]
[OrderAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackJmcItemFilterFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public PlaybackJmcItemFilterFactory(IHubServiceProvider hubServiceProvider);
    public sealed virtual MenuItemFilter CreateMenuItemFilter(HubExtensionServices hubServices, FilterMenuContext menuContext, Dispatcher dispatcher);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
[ExportAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackMenuFilterExtensionsFactory")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackMenuFilterExtensionsFactory : MenuFilterExtensionsFactoryBase {
    [ImportingConstructorAttribute]
public PlaybackMenuFilterExtensionsFactory(Lazy`2[] menuItemFilterFactories, Lazy`2[] categoryProviderFactories);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticDataFilterFactory")]
[NameAttribute("PlaybackDebuggingMenuFilter")]
[OrderAttribute]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.PlaybackMenuFilterFactory : MenuFilterFactoryBase {
    [ImportingConstructorAttribute]
public PlaybackMenuFilterFactory(IHubServiceProvider hubServiceProvider, PlaybackMenuFilterExtensionsFactory menuFilterExtensionsFactory, MenuCommandStore commandStore);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.ThreadItemFilter : MenuItemFilter {
    private LoggedMenuCommand _showAllThreadsCommand;
    private LoggedMenuCommand _selectAllThreadsCommand;
    private DynamicItemMenuCommand _filterThreadsListBase;
    private bool _showAllThreads;
    private EventAggregator _eventAggregator;
    private object _threadInfoLock;
    private Dictionary`2<UInt32, FilteredThreadInformation> _threadIdToThreadInfoMap;
    private List`1<FilteredThreadInformation> _threadInfoList;
    private EventKinds _eventKinds;
    public ThreadItemFilter(IHubServiceProvider hubServiceProvider, HubExtensionServices hubService, FilterMenuContext menuContext);
    public virtual void InitializeMenuItems();
    private void DisposeMenuCommands();
    private void QueryThreadInformationCommandStatus(object sender, EventArgs e);
    private void ThreadInformationCommandChanged(object sender, EventArgs e);
    private void LogUserInteractionThreadChanged(OleMenuCommand command);
    private void QuerySelectAllThreadsCommandStatus(object sender, EventArgs args);
    private void SelectAllThreadsCommandChanged(object sender, EventArgs e);
    private void LogUserInteractionSelectAllThreads(OleMenuCommand command);
    private void QueryShowAllThreadsCommandStatus(object sender, EventArgs args);
    private void ShowAllThreadsCommandChanged(object sender, EventArgs e);
    private void LogUserInteractionShowAllThreads(OleMenuCommand command);
    private bool IsValidFilterItem(int commandId);
    private FilteredThreadInformation GetThreadInfoForCommand(OleMenuCommand command);
    private void EventAggregator_ThreadEventsCountChanged(ThreadEventsCountArgs e);
    private void EventAggregator_EventStatisticsReset(EventArgs e);
    public virtual bool IsFiltered(DiagnosticData data);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <InitializeMenuItems>b__4_0();
    [CompilerGeneratedAttribute]
private void <LogUserInteractionThreadChanged>b__8_0();
    [CompilerGeneratedAttribute]
private void <LogUserInteractionShowAllThreads>b__14_0();
}
[ExtensionContextAttribute]
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Filter.Menu.IMenuItemFilterFactory")]
[NameAttribute("IntelliTraceThreadItemFilter")]
[OrderAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Filter.ThreadItemFilterFactory : object {
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public ThreadItemFilterFactory(IHubServiceProvider hubServiceProvider);
    public sealed virtual MenuItemFilter CreateMenuItemFilter(HubExtensionServices hubServices, FilterMenuContext menuContext, Dispatcher dispatcher);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
[GuidAttribute("701A237A-4C04-45C3-9864-F9DFD514DC63")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.CallsDetailsView : object {
    private static CallTreeHostingControl _callTreeHostingControlInstance;
    public static string CallsDetailsViewGuidString;
    private Lazy`1<CallTreeHostingControl> _callTreeHostingControl;
    private IHubServiceProvider _hubServiceProvider;
    private IDocument _document;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDetailsViewReadyEmitted;
    private bool _isDisposed;
    internal static CallTreeHostingControl CallTreeHostingControlInstance { get; }
    public ControlType ControlType { get; }
    internal CallTreeHostingControl CallTreeHostingControl { get; }
    public CallsDetailsView(IHubServiceProvider hubServiceProvider, IDocument document);
    internal static CallTreeHostingControl get_CallTreeHostingControlInstance();
    public sealed virtual string GetDescription();
    public sealed virtual Guid GetId();
    public sealed virtual string GetTitle();
    public sealed virtual ControlType get_ControlType();
    public sealed virtual object GetViewContent();
    internal CallTreeHostingControl get_CallTreeHostingControl();
    public sealed virtual void Dispose();
    private bool EnsurePackage();
    private static CallTreeHostingControl CreateCallTreeHostingControl();
    private void EmitDetailsViewReady();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.CallsHubTool : HubToolBase {
    private bool _isLiveDebugging;
    private Dispatcher _dispatcher;
    private IViewEventManager _viewEventManager;
    private CallsDetailsView _callsDetailsView;
    public CallsHubTool(IHubServiceProvider hubServiceProvider, IDocument document, Dispatcher dispatcher, bool isLiveDebugging);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.CallsHubTool/<GetDetailsViews>d__5")]
public virtual IEnumerable`1<IDetailsView> GetDetailsViews(ViewDestinations viewDestinations);
    private void DetailsViewSelectionChangedEventHandler(object sender, HubEventArgs`1<DetailsViewInfo> args);
    private void CreateCallsView();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.DetailsViewSelector : object {
    private static Guid EventsDetailsViewInDownSku;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDetailsViewSelectionSuccess;
    private Guid _cachedDetailsViewGuid;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _cachedIsLiveDebugging;
    private IHubServiceProvider _hubServiceProvider;
    private IDocumentsService _documentsService;
    private IViewEventManager _hubEventManager;
    private object _hubEventManagerLock;
    public DetailsViewSelector(IVsDiagnosticsHubService diagnosticsHubService);
    private static DetailsViewSelector();
    public void SelectEventList(bool isLiveDebugging);
    public void SelectCallsView(bool isLiveDebugging);
    private static bool IsCurrentHubDocument(IDocument document, bool isLiveDebugging);
    private void SelectView(Guid detailsViewGuid, bool isLiveDebugging);
    private void OnDetailsViewActivated(object sender, HubEventArgs`1<ViewDestinations> args);
    private void OnDetailsViewDeactivated(object sender, HubEventArgs`1<ViewDestinations> args);
    private void AddDetailsViewEventListeners(IHubServiceProvider hubServiceProvider, IDocument document);
    private void RemoveDetailsViewEventListeners();
}
[GuidAttribute("B40F0059-8DEF-4D75-A895-FEAE3BC22BA9")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.EventsDetailsView : object {
    public static string IntelliTracePlaybackDetailsViewGuidString;
    private IHubServiceProvider _hubServiceProvider;
    private IDocument _document;
    private EventAggregator _eventAggregator;
    private IDiagnosticTelemetryService _telemetryService;
    private IDiagnosticDataCache _dataCache;
    private UIExtensionLoader _uiExtensionLoader;
    private EventKinds _eventKinds;
    private EventTableControl _tableControl;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDetailsViewReadyEmitted;
    public EventTableControl EventTableControl { get; }
    public ControlType ControlType { get; }
    public EventsDetailsView(IHubServiceProvider hubServiceProvider, IDocument document, EventAggregator eventAggregator, IDiagnosticTelemetryService telemetryService, IDiagnosticDataCache dataCache, UIExtensionLoader uiExtensionLoader, EventKinds eventKinds);
    public sealed virtual object GetViewContent();
    public EventTableControl get_EventTableControl();
    private bool EnsurePackage();
    public sealed virtual string GetDescription();
    public sealed virtual Guid GetId();
    public sealed virtual string GetTitle();
    public sealed virtual ControlType get_ControlType();
    public sealed virtual void Dispose();
    private void EmitDetailsViewReady();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.EventsHubTool : HubToolBase {
    private static int BatchSize;
    private static TimeSpan MinWaitTime;
    private static TimeSpan MaxWaitTime;
    private EventsDetailsView _eventsDetailsView;
    private TaskCompletionSource`1<object> _detailsViewInitializationTask;
    private QpcTimeProperties _qpcTimeProperties;
    private DebugMode _debugMode;
    private PlaybackToolExtensions _extensions;
    private IDebuggerModeProvider _debugModeProvider;
    private PlaybackEventProvider _dataProvider;
    private DiagnosticDataCache _dataCache;
    private DiagnosticDataStore _dataStore;
    private RendererCollection _tableRenderers;
    private EventAggregator _eventAggregator;
    private IList`1<DiagnosticDataFilter> _filters;
    private IList`1<DiagnosticDataDecorator> _decorators;
    private DiagnosticService _diagnosticService;
    private DiagnosticTelemetryService _diagnosticTelemetryService;
    private object _hubSessionContext;
    private CancellationTokenSource _disposeCancellationTokenSource;
    private DiagnosticDataBatcher _batcher;
    private EventKinds _eventKinds;
    private AsyncDisposer _asyncDisposer;
    private Dictionary`2<object, IExtensionFactory> cachedFactories;
    public EventsHubTool(IHubServiceProvider hubServiceProvider, IDocument document, PlaybackToolExtensions extensions);
    private static EventsHubTool();
    public virtual IEnumerable`1<IDetailsView> GetDetailsViews(ViewDestinations viewDestinations);
    public sealed virtual IDictionary`2<string, object> GetHubToolStartTelemetryProperties();
    private TExtension CreateExtension(TFactory factory, Func`1<TExtension> factoryMethod, ExtensionRunner safeRunner);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.EventsHubTool/<RunReadLoop>d__28")]
private Task RunReadLoop(ulong unprocessedTimeContextOrdinal, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.EventsHubTool/<DebugModeProvider_ModeChanged>d__29")]
private void DebugModeProvider_ModeChanged(object sender, DebugMode newMode);
    private void InitializeQpcTimeProperties();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.EventsHubTool/<DisposeAsync>d__32")]
private void DisposeAsync(bool disposing);
    public sealed virtual object GetMetadata(object extension, string property);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.EventsHubTool/<InitializeAsync>d__34")]
private Task InitializeAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.EventsHubTool/<<GetDetailsViews>b__25_0>d")]
[CompilerGeneratedAttribute]
private Task <GetDetailsViews>b__25_0();
    [CompilerGeneratedAttribute]
private void <DisposeAsync>b__32_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
    [CompilerGeneratedAttribute]
private void <InitializeAsync>b__34_0();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.HubToolBase : object {
    protected static string DetailsViewSelectionChangedEventName;
    [CompilerGeneratedAttribute]
private IHubServiceProvider <HubServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDocument <Document>k__BackingField;
    private bool _isDisposed;
    protected IHubServiceProvider HubServiceProvider { get; }
    protected IDocument Document { get; }
    protected HubToolBase(IHubServiceProvider hubServiceProvider, IDocument document);
    [CompilerGeneratedAttribute]
protected IHubServiceProvider get_HubServiceProvider();
    [CompilerGeneratedAttribute]
protected IDocument get_Document();
    public virtual IEnumerable`1<ICollectorConfiguration> GetCollectorConfigurations();
    public virtual IDataWarehouseConfiguration GetDataWarehouseConfiguration();
    public virtual IEnumerable`1<IDetailsView> GetDetailsViews(ViewDestinations viewDestinations);
    public virtual IEnumerable`1<ISwimLaneConfiguration> GetSwimLanes(ViewDestinations viewDestinations);
    protected void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.HubToolRuler : object {
    public sealed virtual bool SetSelectionTimeRange(long selectionTimeRangeBeginNanoseconds, long selectionTimeRangeEndNanoseconds);
    public sealed virtual bool IsInTimeSelection(DiagnosticData e);
    public sealed virtual bool SetViewportTimeRange(long viewportTimeRangeBeginNanoseconds, long viewportTimeRangeEndNanoseconds);
    public sealed virtual bool SetClientWidth(int clientWidth);
    public sealed virtual void RestartSampling();
    public sealed virtual IEnumerable`1<DiagnosticData> SampleEventListForSwimlane(IEnumerable`1<DiagnosticData> rawList, ulong selectedDiagnosticDataId);
}
[ExportAttribute("Microsoft.DiagnosticsHub.Tools.IToolFactory")]
[ExportMetadataAttribute("Id", "Mono.Cecil.CustomAttributeArgument")]
[ExportMetadataAttribute("SupportsDebugger", "Mono.Cecil.CustomAttributeArgument")]
[ExportMetadataAttribute("SupportedDebugEngineGuids", "Mono.Cecil.CustomAttributeArgument")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.LiveCallsHubToolFactory : object {
    private static string GuidString;
    private static Guid Guid;
    private IHubServiceProvider _hubServiceProvider;
    public IHubServiceProvider HubServiceProvider { get; }
    public IServiceProvider ServiceProvider { get; }
    [ImportingConstructorAttribute]
public LiveCallsHubToolFactory(IHubServiceProvider hubServiceProvider);
    private static LiveCallsHubToolFactory();
    public IHubServiceProvider get_HubServiceProvider();
    public IServiceProvider get_ServiceProvider();
    public sealed virtual ITool CreateTool(IDocument document);
    public sealed virtual string GetDescription();
    public sealed virtual bool GetExclusivity();
    public sealed virtual string GetName();
    public sealed virtual SupportedScenario IsSupported(PerformanceSessionConfiguration sessionConfiguration);
    public sealed virtual void LaunchStandaloneScenario(PerformanceSessionConfiguration sessionConfiguration);
    public sealed virtual Guid GetId();
    private static bool IsTargetSupported(IPerformanceDebuggerTarget perfDebuggerTarget);
}
[ExportAttribute("Microsoft.DiagnosticsHub.Tools.IToolFactory")]
[ExportMetadataAttribute("Id", "Mono.Cecil.CustomAttributeArgument")]
[ExportMetadataAttribute("SupportsDebugger", "Mono.Cecil.CustomAttributeArgument")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.PlaybackCallsHubToolFactory : object {
    private static string GuidString;
    public static Guid Guid;
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public PlaybackCallsHubToolFactory(IHubServiceProvider hubServiceProvider);
    private static PlaybackCallsHubToolFactory();
    public sealed virtual ITool CreateTool(IDocument document);
    public sealed virtual string GetDescription();
    public sealed virtual bool GetExclusivity();
    public sealed virtual Guid GetId();
    public sealed virtual string GetName();
    public sealed virtual SupportedScenario IsSupported(PerformanceSessionConfiguration sessionConfiguration);
    public sealed virtual void LaunchStandaloneScenario(PerformanceSessionConfiguration sessionConfiguration);
}
[ExportAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.PlaybackEventsHubToolExtensionsFactory")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.PlaybackEventsHubToolExtensionsFactory : ExtensionFactoryCache {
    private Lazy`2[] _filters;
    private SVsServiceProvider _serviceProvider;
    [ImportingConstructorAttribute]
public PlaybackEventsHubToolExtensionsFactory(Lazy`2[] filters, SVsServiceProvider serviceProvider);
    public PlaybackToolExtensions CreateSessionExtensions(PerformanceSessionConfiguration configuration);
}
[ExportAttribute("Microsoft.DiagnosticsHub.Tools.IToolFactory")]
[ExportMetadataAttribute("Id", "Mono.Cecil.CustomAttributeArgument")]
[ExportMetadataAttribute("SupportsDebugger", "Mono.Cecil.CustomAttributeArgument")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.PlaybackEventsHubToolFactory : object {
    private static string GuidString;
    public static Guid Guid;
    private PlaybackEventsHubToolExtensionsFactory _extensionsFactory;
    private IHubServiceProvider _hubServiceProvider;
    [ImportingConstructorAttribute]
public PlaybackEventsHubToolFactory(IHubServiceProvider hubServiceProvider, PlaybackEventsHubToolExtensionsFactory extensionsFactory);
    private static PlaybackEventsHubToolFactory();
    public sealed virtual ITool CreateTool(IDocument document);
    public sealed virtual string GetDescription();
    public sealed virtual bool GetExclusivity();
    public sealed virtual Guid GetId();
    public sealed virtual string GetName();
    public sealed virtual SupportedScenario IsSupported(PerformanceSessionConfiguration sessionConfiguration);
    public sealed virtual void LaunchStandaloneScenario(PerformanceSessionConfiguration sessionConfiguration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.HubTools.PlaybackToolExtensions : object {
    private IEnumerable`1<IDiagnosticDataFilterFactory> _filters;
    private IExtensionMetadataResolver _parentResolver;
    [CompilerGeneratedAttribute]
private UIExtensionLoader <UIExtensionLoader>k__BackingField;
    public IEnumerable`1<IDiagnosticDataFilterFactory> FilterFactories { get; }
    public UIExtensionLoader UIExtensionLoader { get; }
    internal PlaybackToolExtensions(IEnumerable`1<IDiagnosticDataFilterFactory> filters, IExtensionMetadataResolver parentResolver);
    public IEnumerable`1<IDiagnosticDataFilterFactory> get_FilterFactories();
    [CompilerGeneratedAttribute]
public UIExtensionLoader get_UIExtensionLoader();
    public sealed virtual object GetMetadata(object extension, string property);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.IIntelliTraceSnapshotService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TimeContextChanged(EventHandler`1<TimeContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TimeContextChanged(EventHandler`1<TimeContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TimeContextCreated(EventHandler`1<TimeContextCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TimeContextCreated(EventHandler`1<TimeContextCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TimeContextRemoved(EventHandler`1<TimeContextRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TimeContextRemoved(EventHandler`1<TimeContextRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProcessDestroyed(EventHandler`1<IDebugProcess2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProcessDestroyed(EventHandler`1<IDebugProcess2> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EnterBreakState(EventHandler`1<EnterBreakStateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EnterBreakState(EventHandler`1<EnterBreakStateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionCreate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionCreate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionDestroy(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionDestroy(EventHandler`1<EventArgs> value);
    public abstract virtual void InitializeService(UInt32& serviceCookies);
    public abstract virtual void CleanupService(UInt32 serviceCookies);
    public abstract virtual bool GetOrCreateSnapshot(DkmProcess dkmProcess, _NotifyPointData notifyPointData, IContinuousEventExtraData extraData, DkmProcessSnapshot& processSnapshot);
    public abstract virtual bool GetOrCreateExceptionSnapshot(DkmProcess dkmProcess, ulong eventId, int threadId, DkmProcessSnapshot& processSnapshot);
    public abstract virtual void DetermineAndUpdateSnapshotOption();
    public abstract virtual void OnTakeSnapshotSuccess(int spentTime);
    public abstract virtual void OnTakeSnapshotFailure();
    public abstract virtual void OnActivateSnapshot();
    public abstract virtual void SetMonitoredProcess(Guid procuessId, bool isIntelliTraceAttached);
    public abstract virtual void GetStepBackwardStatusOnTimeContext(Boolean& isVisible, Boolean& isEnabled);
    public abstract virtual void StepBackwardOnTimeContext();
    public abstract virtual void GetStepForwardStatusOnTimeContext(Boolean& isVisible, Boolean& isEnabled);
    public abstract virtual void GetGoToLiveModeStatus(Boolean& isVisible, Boolean& isEnabled);
    public abstract virtual void GoToLiveMode();
    public abstract virtual void StepForwardOnTimeContext();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.IntelliTraceEtwAgentProvider : object {
    private static string IntelliTraceEtwAgentClsid;
    private static string IntelliTraceEtwAgentFilename;
    public sealed virtual ICollectorConfiguration CreateCollectorConfiguration();
    public sealed virtual void Dispose();
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.ICollectorConfigurationProviderFactory")]
[ExtensionContextAttribute]
[NameAttribute("IntelliTraceEtwAgentProvider")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.IntelliTraceEtwAgentProviderFactory : object {
    public sealed virtual ICollectorConfigurationProvider CreateCollectorConfigurationProvider(HubExtensionServices hubServices);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.IntelliTraceEventTrackConfigurationProvider : object {
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.IntelliTraceEventTrackConfigurationProvider/<GetTrackConfigurations>d__0")]
public sealed virtual IEnumerable`1<DiagnosticTrackConfiguration> GetTrackConfigurations();
    public sealed virtual void Dispose();
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticTrackConfigurationProviderFactory")]
[ExtensionContextAttribute]
[NameAttribute("IntelliTraceEventTrackConfigurationProvider")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.IntelliTraceEventTrackConfigurationProviderFactory : object {
    public sealed virtual IDiagnosticTrackConfigurationProvider CreateTrackConfigurationProvider(HubExtensionServices hubServices);
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.IntelliTraceSnapshotService : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<TimeContextChangedEventArgs> TimeContextChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<TimeContextCreatedEventArgs> TimeContextCreated;
    [CompilerGeneratedAttribute]
private EventHandler`1<TimeContextRemovedEventArgs> TimeContextRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<IDebugProcess2> ProcessDestroyed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EnterBreakStateEventArgs> EnterBreakState;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> _sessionCreate;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> SessionDestroy;
    private static int slowSnapshotTakenTime;
    private static int _activateSnapshotCount;
    private static int _slowTakeSnapshotCount;
    private static int _normalTakeSnapshotCount;
    private static int _takeSnapshotFailureCount;
    private Dispatcher _dispatcher;
    private IDebuggerInternal157 _debuggerInternal;
    private IVsDebugger _debugger;
    private IIntelliTraceDebuggingStateProvider _intelliTraceDebuggingStateProvider;
    private ToolsOptionManager _toolsOptionManager;
    private Lazy`1<DiagnosticTelemetryService> _debuggingTelemetryService;
    private bool _snapshotOnExceptionEnabled;
    private int _maxSnapshotsOnExceptionsBetweenBreak;
    private IDictionary`2<Guid, ProcessSnapshotAndException> _snapshotExceptions;
    private Nullable`1<Guid> _monitoredProcessId;
    private bool _receivedEnterBreakStateEvent;
    private UInt32 _serviceCookiesId;
    private UInt32 _serviceCookiesRequestCount;
    private TimeContextNavigator _timeContextNavigator;
    private bool _isCPPSnapshotEnabled;
    private bool _isInDebugSession;
    private ManagedTimeContexts _managedTimeContexts;
    public IntelliTraceSnapshotService(Dispatcher dispatcher, ToolsOptionManager toolsOptionManager, Lazy`1<DiagnosticTelemetryService> debuggingTelemetryService, IVsDebugger vsDebugger, IIntelliTraceDebuggingStateProvider intelliTraceDebuggingStateProvider);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeContextChanged(EventHandler`1<TimeContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeContextChanged(EventHandler`1<TimeContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeContextCreated(EventHandler`1<TimeContextCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeContextCreated(EventHandler`1<TimeContextCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TimeContextRemoved(EventHandler`1<TimeContextRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TimeContextRemoved(EventHandler`1<TimeContextRemovedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProcessDestroyed(EventHandler`1<IDebugProcess2> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProcessDestroyed(EventHandler`1<IDebugProcess2> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EnterBreakState(EventHandler`1<EnterBreakStateEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EnterBreakState(EventHandler`1<EnterBreakStateEventArgs> value);
    [CompilerGeneratedAttribute]
private void add__sessionCreate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
private void remove__sessionCreate(EventHandler`1<EventArgs> value);
    public sealed virtual void add_SessionCreate(EventHandler`1<EventArgs> value);
    public sealed virtual void remove_SessionCreate(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_SessionDestroy(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_SessionDestroy(EventHandler`1<EventArgs> value);
    public sealed virtual void InitializeService(UInt32& serviceCookies);
    public sealed virtual void CleanupService(UInt32 serviceCookies);
    public sealed virtual bool GetOrCreateSnapshot(DkmProcess dkmProcess, _NotifyPointData notifyPointData, IContinuousEventExtraData extraData, DkmProcessSnapshot& processSnapshot);
    public sealed virtual bool GetOrCreateExceptionSnapshot(DkmProcess dkmProcess, ulong eventId, int threadId, DkmProcessSnapshot& processSnapshot);
    public sealed virtual void OnTakeSnapshotSuccess(int spentTime);
    public sealed virtual void OnTakeSnapshotFailure();
    public sealed virtual void OnActivateSnapshot();
    public sealed virtual void DetermineAndUpdateSnapshotOption();
    private void OnSessionCreate();
    private void OnSessionDestroy();
    private void OnStartDebugging();
    private void OnEnterBreakState(IDebugProcess2 process, IDebugEvent2 debugEvent);
    public sealed virtual void SetMonitoredProcess(Guid processId, bool isIntelliTraceAttached);
    private void OnProcessDestroy(IDebugProcess2 process);
    public sealed virtual void GetStepBackwardStatusOnTimeContext(Boolean& isVisible, Boolean& isEnabled);
    public sealed virtual void StepBackwardOnTimeContext();
    public sealed virtual void GetStepForwardStatusOnTimeContext(Boolean& isVisible, Boolean& isEnabled);
    public sealed virtual void StepForwardOnTimeContext();
    public sealed virtual void GetGoToLiveModeStatus(Boolean& isVisible, Boolean& isEnabled);
    public sealed virtual void GoToLiveMode();
    private DkmProcessSnapshot TakeSnapshot(DkmProcess dkmProcess, ulong qpcTimeStamp, int stoppingThreadId);
    private void SendTelemetry(IDebugProcess2 process, ProcessSnapshotAndException processSnapshotAndException);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.IDebugEventCallback2.Event(IDebugEngine2 pEngine, IDebugProcess2 pProcess, IDebugProgram2 pProgram, IDebugThread2 pThread, IDebugEvent2 pEvent, Guid& riidEvent, UInt32 dwAttrib);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.OptionsProvider : object {
    public bool LimitEvents { get; }
    public sealed virtual bool get_LimitEvents();
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IOptionsProviderFactory")]
[NameAttribute("IntelliTraceOptionsProvider")]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.OptionsProviderFactory : object {
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IOptionsProvider CreateOptionsProvider();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.ProcessSnapshotAndException : object {
    [CompilerGeneratedAttribute]
private DkmProcess <DkmProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UInt32> <CachedSnapshotIds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ThrownExceptionInfo> <UniqueExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SnapshotsOnExceptionsBetweenBreakCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalTimeOnSnapshot>k__BackingField;
    private DkmProcess DkmProcess { get; }
    public IList`1<UInt32> CachedSnapshotIds { get; }
    public bool IsClosed { get; private set; }
    public HashSet`1<ThrownExceptionInfo> UniqueExceptions { get; }
    public int SnapshotsOnExceptionsBetweenBreakCount { get; public set; }
    public long TotalTimeOnSnapshot { get; public set; }
    public ProcessSnapshotAndException(DkmProcess dkmProcess);
    [CompilerGeneratedAttribute]
private DkmProcess get_DkmProcess();
    [CompilerGeneratedAttribute]
public IList`1<UInt32> get_CachedSnapshotIds();
    [CompilerGeneratedAttribute]
public bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
public HashSet`1<ThrownExceptionInfo> get_UniqueExceptions();
    [CompilerGeneratedAttribute]
public int get_SnapshotsOnExceptionsBetweenBreakCount();
    [CompilerGeneratedAttribute]
public void set_SnapshotsOnExceptionsBetweenBreakCount(int value);
    [CompilerGeneratedAttribute]
public long get_TotalTimeOnSnapshot();
    [CompilerGeneratedAttribute]
public void set_TotalTimeOnSnapshot(long value);
    public void Close();
    public void Reset();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.AD7ALSnapshotDebuggingService : SnapshotDebuggingService {
    public AD7ALSnapshotDebuggingService(Dispatcher dispatcher, IDiagnosticTelemetryService telemetryService, ISnapshotEventAggregator eventAggregator);
    protected virtual bool ActivateSnapshotOverride(DiagnosticData data, IEnumerable`1<Guid> debugEngines, string actionSource);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.IntelliTraceTableRenderer : DiagnosticTableRendererBase {
    private IntelliTraceIconMonikerProvider _iconMonikerProvider;
    private IntelliTraceEventViewModel _liveEventViewModel;
    private IntelliTraceEventViewModel _activatedEventViewModel;
    private ulong _liveDiagnosticDataId;
    private ulong _activatedDiagnosticDataId;
    private bool _isInBreakMode;
    private bool _isLiveDebugging;
    private bool _isInHistoricalMode;
    private SnapshotDebuggingService _snapshotDebuggingService;
    private DiagnosticData _snapshotDetachCandidate;
    private Dispatcher _dispatcher;
    private AsyncDisposer _asyncDisposer;
    private bool _isAD7ALIntegration;
    private Nullable`1<DateTime> _processStartTime;
    private IReadOnlyDiagnosticDataCache _dataCache;
    private ITimeContextProvider _timeContextProvider;
    private IVsImageService2 _vsImageService;
    private IDiagnosticTelemetryService _telemetryService;
    private IInternalEventAggregator _eventAggregatorInternal;
    private DataProvider _dataProvider;
    private ThreadNameProvider _threadNameHelper;
    private int _breakEventKindId;
    private int _intelliTraceEventKindId;
    private string _lastActivateEventActionSource;
    private IIntelliTraceSnapshotService _intelliTraceSnapshotService;
    private UInt32 _intelliTraceSnapshotServiceCookies;
    private IHubServiceProvider _hubServiceProvider;
    private IDocument _document;
    private SessionStateTracker _sessionStateTracker;
    private ComObjectWrapper`1<IDebugSessionProcess100> _debuggedProcess;
    private IList`1<Guid> _debuggedProcessDebugEngines;
    private IDebuggerInternal _debuggerInternal;
    private DiagnosticData _pendingActivatingData;
    private bool _isSnapshotEnabled;
    private DataProvider DataProvider { get; }
    public IntelliTraceTableRenderer(Dispatcher dispatcher, HubExtensionRendererServices hubServices, IVsDebugger vsDebugger, bool isSnapshotEnabled, bool isAD7ALIntegration, IIntelliTraceSnapshotService intelliTraceSnapshotService, int intelliTraceEventKindId);
    public IntelliTraceTableRenderer(Dispatcher dispatcher, HubExtensionRendererServices hubServices, DateTime processStartTime, IIntelliTraceSnapshotService intelliTraceSnapshotService, int intelliTraceEventKindId);
    private DataProvider get_DataProvider();
    private void Initialize(HubExtensionRendererServices hubServices, Dispatcher dispatcher);
    public virtual bool TryCreateColumnContent(DiagnosticData data, string columnId, FrameworkElement& content);
    protected virtual bool TryCreateCopyStringContent(DiagnosticData data, string columnId, String& content);
    protected virtual DiagnosticEventViewModelBase CreateEventViewModel(DiagnosticData data);
    protected virtual void DebugModeChanged(DebugMode mode);
    protected virtual void OnDecoratorEventModified(IEnumerable`1<DiagnosticData> dataCollection);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.IntelliTraceTableRenderer/<Session_StateChanged>d__45")]
private void Session_StateChanged(object sender, SessionStateTransitionedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.IntelliTraceTableRenderer/<DisposeAsync>d__46")]
private Task DisposeAsync();
    private void UpdateViewModelActivationStatus(DiagnosticData data);
    private void SetViewModelActivationStatus(IntelliTraceEventViewModel viewModel);
    private void SetIconAndToolTip(IntelliTraceEventViewModel viewModel, bool isLiveEvent, bool isActiveEvent, SnapshotStatus snapshotStatus);
    private void EventAggregator_ActivatedDataIdChanged(ActivatedDataChangedEventArgs activatedData);
    private void EventAggregator_LiveDataIdChanged(ulong liveDataId);
    private ImageMoniker GetIconMoniker(DiagnosticData diagnosticData);
    private void ActivateEventWrapper(DiagnosticData data);
    private void ActivateEvent(DiagnosticData data, string actionSource);
    private void ActivateIntelliTraceEvent(DiagnosticData data, string actionSource);
    private bool ActivateSnapshot(DiagnosticData data, string actionSource);
    private void ActivateNonIntelliTraceBreakEvent(DiagnosticData data, string actionSource);
    private bool GoToLiveFromSnapshot();
    private bool IsHistoricalMode();
    private bool IsLiveEvent(DiagnosticData data);
    private bool IsActivatedEvent(DiagnosticData data);
    public string GetFormattedThreadString(DiagnosticData data);
    private bool CanHandleData(DiagnosticData data);
    private bool IsDebuggedProcessStopped();
    private bool BreakAllBeforeActivateEvent(DiagnosticData data);
    [CompilerGeneratedAttribute]
private bool <Session_StateChanged>b__45_1();
    [CompilerGeneratedAttribute]
private void <DisposeAsync>b__46_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticTableRendererFactory")]
[NameAttribute("IntelliTraceTableRendererFactory")]
[EventKindAttribute("IntelliTrace")]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.IntelliTraceTableRendererFactory : IntelliTraceTableRendererFactoryBase {
    public static string Name;
    [ImportingConstructorAttribute]
public IntelliTraceTableRendererFactory(IHubServiceProvider hubServiceProvider);
    public virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    protected virtual IDiagnosticTableRenderer CreateTableRendererOverride(Dispatcher dispatcher, HubExtensionRendererServices hubServices, IVsDebugger debuggerService, bool isSnapshotEnabled, bool isAD7ALIntegration, IIntelliTraceSnapshotService intelliTraceSnapshotService);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.IntelliTraceTableRendererFactoryBase : object {
    protected IHubServiceProvider _hubServiceProvider;
    public IntelliTraceTableRendererFactoryBase(IHubServiceProvider hubServiceProvider);
    public abstract virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IDiagnosticTableRenderer CreateTableRenderer(HubExtensionRendererServices hubServices);
    protected abstract virtual IDiagnosticTableRenderer CreateTableRendererOverride(Dispatcher dispatcher, HubExtensionRendererServices hubServices, IVsDebugger debuggerService, bool isSnapshotEnabled, bool isAD7ALIntegration, IIntelliTraceSnapshotService intelliTraceSnapshotService);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.LegacySnapshotDebuggingService : SnapshotDebuggingService {
    private static long SystemCommitThreshold;
    private static long VirtualMemorySize;
    private static long MinimumRequiredMemorySize;
    private static Guid guidReflectionDebugEngine;
    private ConcurrentDictionary`2<ulong, AttachedSnapshotInfo> _attachedSnapshots;
    private ConcurrentDictionary`2<ulong, AttachedSnapshotInfo> _waitingForLoad;
    private IVsDebugger _vsDebugger;
    private long _estimatedRequiredMemory;
    private long _lastUsedMemorySize;
    private long _memoryCheckingCount;
    private Timer _monitorTimer;
    private DiagnosticData _currentSnapshot;
    private object _currentSnapshotLock;
    private IVsDebugger4 _vsDebugger4;
    private IDebuggerInternal _internalDebugger;
    private IDebuggerInternal110 _internalDebugger110;
    private IDebugSession3 _debugSession;
    private IVsDebugger4 VsDebugger4 { get; }
    private IDebuggerInternal InternalDebugger { get; }
    private IDebuggerInternal110 InternalDebugger110 { get; }
    private IDebugSession3 DebugSession { get; }
    public LegacySnapshotDebuggingService(IVsDebugger vsDebugger, Dispatcher dispatcher, IDiagnosticTelemetryService telemetryService, ISnapshotEventAggregator eventAggregator);
    private static LegacySnapshotDebuggingService();
    private IVsDebugger4 get_VsDebugger4();
    private IDebuggerInternal get_InternalDebugger();
    private IDebuggerInternal110 get_InternalDebugger110();
    private IDebugSession3 get_DebugSession();
    protected virtual void Dispose(bool isDisposing);
    protected virtual bool ActivateSnapshotOverride(DiagnosticData data, IEnumerable`1<Guid> debugEngines, string actionSource);
    protected virtual bool CanActivateSnapshotOverride(DiagnosticData data);
    public virtual void OnSnapshotRemoved(DiagnosticData data);
    public virtual void OnCurrentSnapshotCleared();
    private static bool GetSystemCommitData(Int64& commitLimit);
    private bool AttachToSnapshot(DiagnosticData data, DateTime startTime, string actionSource);
    private bool SwitchToSnapshot(DiagnosticData data, string actionSource);
    private void OnProcessLoadComplete(object sender, ProcessLoadCompleteEventArgs e);
    private bool SetDelaySwitchToSnapshot(DiagnosticData data, string actionSource);
    private void HandleSnapshotRemovedOnUIThread(ulong diagnosticDataId);
    private bool DetachSnapshot(AttachedSnapshotInfo snapshotInfo);
    private IntPtr GetEngineList(DkmProcess debugProcess, Int32& engineCount);
    private void MonitorTimerCallback(object state);
    private bool HasEnoughMemory(Int64& maximumMemorySize, Int64& currentMemorySize);
    [CompilerGeneratedAttribute]
private bool <MonitorTimerCallback>b__40_0(KeyValuePair`2<ulong, AttachedSnapshotInfo> pair);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.OutputEventTableRenderer : DiagnosticTableRendererBase {
    private int _outputEventKindId;
    public static string Name;
    public OutputEventTableRenderer(Dispatcher dispatcher, HubExtensionRendererServices hubService);
    protected virtual bool TryCreateCopyStringContent(DiagnosticData data, string columnId, String& content);
    public virtual IEnumerable`1<string> GetSearchableStrings(DiagnosticData data);
    protected virtual DiagnosticEventViewModelBase CreateEventViewModel(DiagnosticData data);
    private bool CanHandleData(DiagnosticData data);
}
[ExportAttribute("Microsoft.VisualStudio.Diagnostics.HubExtensions.Sdk.IDiagnosticTableRendererFactory")]
[NameAttribute("OutputEventTableRenderer")]
[EventKindAttribute("Output")]
[ExtensionContextAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.OutputEventTableRendererFactory : object {
    public sealed virtual bool IsSupported(PerformanceSessionConfiguration configuration);
    public sealed virtual IDiagnosticTableRenderer CreateTableRenderer(HubExtensionRendererServices hubServices);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TableRenderer.SnapshotDebuggingService : object {
    [CompilerGeneratedAttribute]
private ISnapshotEventAggregator <EventAggregator>k__BackingField;
    [CompilerGeneratedAttribute]
private Dispatcher <Dispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticTelemetryService <TelemetryService>k__BackingField;
    private Lazy`1<IIntelliTraceSnapshotService> _intelliTraceSnapshotService;
    protected ISnapshotEventAggregator EventAggregator { get; private set; }
    protected Dispatcher Dispatcher { get; }
    protected IDiagnosticTelemetryService TelemetryService { get; }
    public SnapshotDebuggingService(Dispatcher dispatcher, IDiagnosticTelemetryService telemetryService, ISnapshotEventAggregator eventAggregator);
    [CompilerGeneratedAttribute]
protected ISnapshotEventAggregator get_EventAggregator();
    [CompilerGeneratedAttribute]
private void set_EventAggregator(ISnapshotEventAggregator value);
    [CompilerGeneratedAttribute]
protected Dispatcher get_Dispatcher();
    [CompilerGeneratedAttribute]
protected IDiagnosticTelemetryService get_TelemetryService();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    public bool CanActivateSnapshot(DiagnosticData data);
    protected virtual bool CanActivateSnapshotOverride(DiagnosticData data);
    public bool ActivateSnapshot(DiagnosticData data, IEnumerable`1<Guid> debugEngines, string actionSource);
    protected abstract virtual bool ActivateSnapshotOverride(DiagnosticData data, IEnumerable`1<Guid> debugEngines, string actionSource);
    public virtual void OnCurrentSnapshotCleared();
    public virtual void OnSnapshotRemoved(DiagnosticData data);
    private void OnSnapshotTaken(SnapshotTakenArgs args);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.CompositeImageCreator : object {
    private static int ImageSize;
    private static int OverlaySize;
    private static Dictionary`2<long, IImageHandle> _imageCache;
    private static CompositeImageCreator();
    public static ImageMoniker GetCompositeImage(IVsImageService2 imageService, ImageMoniker imageMoniker1, ImageMoniker imageMoniker2, bool useOverlayImage, int overlaySize);
    private static long GenerateKey(ImageMoniker imageMoniker1, ImageMoniker imageMoniker2);
    private static IImageHandle CreateCompositeImage(IVsImageService2 imageService, ImageMoniker imageMoniker1, ImageMoniker imageMoniker2, int overlaySize);
    private static IImageHandle CreateOverlayCompositeImage(IVsImageService2 imageService, ImageMoniker imageMoniker1, ImageMoniker imageMoniker2);
    private static ImageCompositionLayer CreateLayer(ImageMoniker moniker, int virtualWidth, int virtualHeight, int virtualXOffset, int virtualYOffset, _UIImageHorizontalAlignment horizontalAlignment, _UIImageVerticalAlignment verticalAlignment);
}
[ExportAttribute("Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition")]
[NameAttribute("TableRenderer_DateTime")]
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.DateTimeColumnDefinition : BaseEventTableColumnDefinition {
    public string Name { get; }
    public string DisplayName { get; }
    public bool IsResizable { get; }
    public bool IsMovable { get; }
    public virtual string get_Name();
    public virtual string get_DisplayName();
    public virtual bool get_IsResizable();
    public virtual bool get_IsMovable();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.DescriptionConverterUtilities : object {
    public static TextBlock CreateFormattedTextBlock(string text, TextWrapping wrapping, TextTrimming trimming);
    public static Hyperlink CreateFocusableHyperlink(string text);
    private static void FilePathLinkClick(object sender, RoutedEventArgs e);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.EventIconMonikerHelper : object {
    private static Dictionary`2<EventType, ImageMoniker> eventIconMonikerMap;
    private static ImageMoniker ExceptionIconMoniker;
    private static ImageMoniker TracepointIconMoniker;
    private static ImageMoniker UnimportantIconMoniker;
    public static ImageMoniker CurrentInstructionPointerIconMoniker;
    public static ImageMoniker HistoricInstructionPointerIconMoniker;
    private static EventIconMonikerHelper();
    public static bool GetEventIconMoniker(EventType type, ImageMoniker& imageMoniker);
    public static ImageMoniker GetOverlayImageMoniker(ImageMoniker originalImage);
    private static void InitializeEventIconMonikerMap();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.IntelliTraceEventViewModel : DiagnosticEventViewModelBase {
    private IActionDiagnosticEvent _actionDiagnosticEvent;
    private ActionProvider _actionProvider;
    private bool _isActionProviderSearched;
    private IOrdinalPropertyProvider _ordinalPropertyProvider;
    private DataProvider _dataProvider;
    private bool _isBreakEvent;
    private Nullable`1<DateTime> _processStartTime;
    private string _dateTime;
    private string _dateTimeToolTip;
    private IntelliTraceIconMonikerProvider _iconMonikerProvider;
    public string DateTime { get; public set; }
    public string DateTimeToolTip { get; public set; }
    internal ActionProvider ActionProvider { get; }
    public bool IsDescriptionActionable { get; }
    protected bool HasDuration { get; }
    public Visibility LongDescriptionVisibility { get; }
    public FrameworkElement TruncatedShortDescription { get; }
    public FrameworkElement WrappedShortDescription { get; }
    public FrameworkElement WrappedLongDescription { get; }
    public IntelliTraceEventViewModel(DiagnosticData data, bool isBreakEvent, Nullable`1<DateTime> processStartTime, IOrdinalPropertyProvider ordinalPropertyProvider, DataProvider dataProvider, Action`1<DiagnosticData> activateEventAction, IntelliTraceIconMonikerProvider iconMonikerProvider);
    public virtual void Refresh();
    public string get_DateTime();
    public void set_DateTime(string value);
    public string get_DateTimeToolTip();
    public void set_DateTimeToolTip(string value);
    internal ActionProvider get_ActionProvider();
    public bool get_IsDescriptionActionable();
    public bool ExecuteDescriptionAction();
    protected virtual bool get_HasDuration();
    public virtual Visibility get_LongDescriptionVisibility();
    public virtual FrameworkElement get_TruncatedShortDescription();
    public virtual FrameworkElement get_WrappedShortDescription();
    public virtual FrameworkElement get_WrappedLongDescription();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.IntelliTraceIconMonikerProvider : object {
    private Func`2<DiagnosticData, ImageMoniker> _getIconMoniker;
    public IntelliTraceIconMonikerProvider(Func`2<DiagnosticData, ImageMoniker> getIconMoniker);
    public ImageMoniker GetIconMoniker(DiagnosticData data);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.IntelliTraceLongDescriptionConverter : LongDescriptionConverter {
    protected virtual FrameworkElement Convert(DiagnosticEventViewModelBase descriptionCellViewModel, object parameter, CultureInfo culture);
    protected virtual FrameworkElement GetSimpleTextContent(string value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.IntelliTraceShortDescriptionConverter : ShortDescriptionConverter {
    protected virtual FrameworkElement Convert(DiagnosticEventViewModelBase descriptionCellViewModel, object parameter, CultureInfo culture);
    private FrameworkElement GetFormattedContent(string value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.OutputEventViewModel : DiagnosticEventViewModelBase {
    public Visibility LongDescriptionVisibility { get; }
    public OutputEventViewModel(DiagnosticData data);
    public virtual void Refresh();
    public virtual Visibility get_LongDescriptionVisibility();
    private static ImageMoniker GetIconMoniker(DiagnosticData diagnosticData);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TabularView.ThreadNameProvider : object {
    private bool _isLiveDebugging;
    private IContinuousThreadTracker _liveDebuggingThreadTracker;
    public ThreadNameProvider(bool isLiveDebugging, IHubServiceProvider hubServiceProvider, IDocument document);
    public string GetThreadName(DiagnosticData data);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.ThrownExceptionInfo : object {
    [CompilerGeneratedAttribute]
private string <ExceptionName>k__BackingField;
    [CompilerGeneratedAttribute]
private _StackFrame[] <Stack>k__BackingField;
    [CompilerGeneratedAttribute]
private DkmProcessSnapshot <Snapshot>k__BackingField;
    public string ExceptionName { get; }
    public _StackFrame[] Stack { get; }
    public DkmProcessSnapshot Snapshot { get; public set; }
    public ThrownExceptionInfo(string exceptionName, _StackFrame[] stack);
    [CompilerGeneratedAttribute]
public string get_ExceptionName();
    [CompilerGeneratedAttribute]
public _StackFrame[] get_Stack();
    [CompilerGeneratedAttribute]
public DkmProcessSnapshot get_Snapshot();
    [CompilerGeneratedAttribute]
public void set_Snapshot(DkmProcessSnapshot value);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(ThrownExceptionInfo other);
    private static bool StackFrameEquals(_StackFrame first, _StackFrame second);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.TimeContextNavigator : object {
    private Nullable`1<Guid> _monitoredProcessId;
    private IDictionary`2<Guid, ProcessState> _processesStates;
    public void SetMonitorProcess(Guid processId, IDebuggerInternal debuggerInternal);
    public void OnTimeContextCreated(IDebugProcess2 pProcess, IDebugTimeContext100 timeContext);
    public void OnTimeContextRemoved(IDebugProcess2 pProcess, IDebugTimeContext100 timeContext);
    public void OnTimeContextChanged(IDebugProcess2 pProcess, IDebugTimeContext100 newTimeContext);
    public void OnEnterBreakState(IDebugProcess2 pProcess, IDebugEvent2 debugEvent);
    public void OnExitBreakState(IDebugProcess2 pProcess);
    public void OnSessionDestroy();
    private bool CanStepBackward(ProcessState processState);
    public void GetStepBackwardStatus(Boolean& isVisible, Boolean& isEnabled);
    public void StepBackward();
    private bool CanStepForward(ProcessState processState);
    public void GetStepForwardStatus(Boolean& isVisible, Boolean& isEnabled);
    public void StepForward();
    public void GoToLiveMode();
    private bool VerifyAndGetTimeContextDesc(Guid processId, IDebugTimeContext100 timeContext, bool mustHaveMonitoredProcess, TimeContextDesc& timeContextDesc);
    private ProcessState GetProcessState(Guid processId);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.DiagnosticsHub.Utilities : object {
    public static bool IsSnapshotSupported(PerformanceSessionConfiguration sessionConfiguration);
    public static bool IsIntelliTraceSupported(PerformanceSessionConfiguration sessionConfiguration);
    [ExtensionAttribute]
public static DiagnosticData GetDiagnosticDataByOrdinal(IReadOnlyDiagnosticDataCache dataCache, ulong ordinal, EventKinds eventKinds);
    [ExtensionAttribute]
public static DiagnosticData GetDiagnosticDataBySnapshotId(IReadOnlyDiagnosticDataCache dataCache, ulong snapshotId, EventKinds eventKinds);
    [ExtensionAttribute]
public static DiagnosticData GetDiagnosticDataByDataId(IReadOnlyDiagnosticDataCache dataCache, ulong diagnosticDataId);
    [ExtensionAttribute]
public static bool HasIntelliTraceData(DiagnosticData data);
    private static bool IsSessionSupported(PerformanceSessionConfiguration sessionConfiguration);
    private static bool IsTargetSupported(IPerformanceDebuggerTarget perfDebuggerTarget);
    public static bool IsNativeScenario(PerformanceSessionConfiguration sessionConfiguration);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DisplayAnalysisData : TraceLogViewModelBase {
    private Action`3<long, int, WebRequestInfo> _launchDebugging;
    private TraceLogSummaryAnalysisRepository _analysisRepository;
    [CompilerGeneratedAttribute]
private string <StackText>k__BackingField;
    private Nullable`1<Guid> _selectedCorrelationId;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<IIntelliTraceStackFrame> <StackFrames>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DisplayAnalysisDetailedData> <DetailedData>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgramSymbols <ProgramSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <TraceLog>k__BackingField;
    private DelegateCommand _startDebuggingException;
    public string StackText { get; private set; }
    public string Title { get; }
    public IEnumerable`1<Nullable`1<Guid>> CorrelationIds { get; }
    public Nullable`1<Guid> SelectedCorrelationId { get; public set; }
    public string ExceptionType { get; private set; }
    public int Count { get; private set; }
    public ReadOnlyCollection`1<IIntelliTraceStackFrame> StackFrames { get; private set; }
    public ReadOnlyCollection`1<DisplayAnalysisDetailedData> DetailedData { get; private set; }
    internal ProgramSymbols ProgramSymbols { get; private set; }
    internal TraceLog TraceLog { get; private set; }
    public ICommand StartDebuggingException { get; }
    public DisplayAnalysisData(TraceLogSummaryAnalysisRepository analysisRepository, TraceLog traceLog, ProgramSymbols symbols, string exceptionType, int occurrenceCount, IEnumerable`1<DiagnosticEventInstance> exceptionDetails, IEnumerable`1<IIntelliTraceStackFrame> stackFrames, Action`3<long, int, WebRequestInfo> launchDebugging);
    [CompilerGeneratedAttribute]
public string get_StackText();
    [CompilerGeneratedAttribute]
private void set_StackText(string value);
    public string get_Title();
    public IEnumerable`1<Nullable`1<Guid>> get_CorrelationIds();
    public Nullable`1<Guid> get_SelectedCorrelationId();
    public void set_SelectedCorrelationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<IIntelliTraceStackFrame> get_StackFrames();
    [CompilerGeneratedAttribute]
private void set_StackFrames(ReadOnlyCollection`1<IIntelliTraceStackFrame> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DisplayAnalysisDetailedData> get_DetailedData();
    [CompilerGeneratedAttribute]
private void set_DetailedData(ReadOnlyCollection`1<DisplayAnalysisDetailedData> value);
    [CompilerGeneratedAttribute]
internal ProgramSymbols get_ProgramSymbols();
    [CompilerGeneratedAttribute]
private void set_ProgramSymbols(ProgramSymbols value);
    [CompilerGeneratedAttribute]
internal TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
private void set_TraceLog(TraceLog value);
    public ICommand get_StartDebuggingException();
    private void DoStartDebuggingException();
    private bool CanStartDebuggingException();
    private void SetStackText();
    [CompilerGeneratedAttribute]
private void <get_StartDebuggingException>b__41_0(object param);
    [CompilerGeneratedAttribute]
private bool <get_StartDebuggingException>b__41_1(object param);
    [CompilerGeneratedAttribute]
private bool <DoStartDebuggingException>b__42_0(DisplayAnalysisDetailedData data);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DisplayAnalysisDetailedData : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LoggerThreadId>k__BackingField;
    public Nullable`1<Guid> CorrelationId { get; public set; }
    public long Ordinal { get; public set; }
    public int LoggerThreadId { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public long get_Ordinal();
    [CompilerGeneratedAttribute]
public void set_Ordinal(long value);
    [CompilerGeneratedAttribute]
public int get_LoggerThreadId();
    [CompilerGeneratedAttribute]
public void set_LoggerThreadId(int value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.DisposeUtils : object {
    public static bool TryReplace(T newValue, T& targetObject);
}
internal class Microsoft.VisualStudio.TraceLogPackage.EnterBreakStateEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDebugProcess2 <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugEvent2 <EnterBreakStateEvent>k__BackingField;
    public IDebugProcess2 Process { get; }
    public IDebugEvent2 EnterBreakStateEvent { get; }
    public EnterBreakStateEventArgs(IDebugProcess2 process, IDebugEvent2 enterBreakStateEvent);
    [CompilerGeneratedAttribute]
public IDebugProcess2 get_Process();
    [CompilerGeneratedAttribute]
public IDebugEvent2 get_EnterBreakStateEvent();
}
internal class Microsoft.VisualStudio.TraceLogPackage.EventCategoryItem : object {
    [CompilerGeneratedAttribute]
private string <CategoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    public string CategoryId { get; private set; }
    public string CategoryName { get; private set; }
    public EventCategoryItem(string categoryId, string categoryName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CategoryId();
    [CompilerGeneratedAttribute]
private void set_CategoryId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CategoryName();
    [CompilerGeneratedAttribute]
private void set_CategoryName(string value);
    public virtual string ToString();
    public sealed virtual int CompareTo(IEventCategoryItem other);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.EventViewModelUtils : object {
    public static string ConvertToStringForCopying(IEventViewModel eventData);
}
internal class Microsoft.VisualStudio.TraceLogPackage.ExceptionDataExtractor : object {
    private string _type;
    private string _message;
    private string _winRTMessage;
    private bool _isCritical;
    public string ExceptionType { get; }
    public string ExceptionMessage { get; }
    public string WinRTMessage { get; }
    public bool IsCritical { get; }
    public bool HasExceptionType { get; }
    public bool HasExceptionMessage { get; }
    public bool HasWinRTMessage { get; }
    public ExceptionDataExtractor(Byte[] exceptionDataBytes);
    public string get_ExceptionType();
    public string get_ExceptionMessage();
    public string get_WinRTMessage();
    public bool get_IsCritical();
    public bool get_HasExceptionType();
    public bool get_HasExceptionMessage();
    public bool get_HasWinRTMessage();
}
internal class Microsoft.VisualStudio.TraceLogPackage.ExceptionLoadData : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExceptionInstance> <UngroupedExceptionEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExceptionInstance> <GroupedExceptionEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EmbeddedSymbolInfo> <ModuleMetadata>k__BackingField;
    internal IEnumerable`1<ExceptionInstance> UngroupedExceptionEvents { get; private set; }
    internal IEnumerable`1<ExceptionInstance> GroupedExceptionEvents { get; private set; }
    internal IList`1<EmbeddedSymbolInfo> ModuleMetadata { get; private set; }
    internal ExceptionLoadData(IEnumerable`1<ExceptionInstance> groupedExceptions, IEnumerable`1<ExceptionInstance> ungroupedExceptions, IList`1<EmbeddedSymbolInfo> moduleMetadata);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<ExceptionInstance> get_UngroupedExceptionEvents();
    [CompilerGeneratedAttribute]
private void set_UngroupedExceptionEvents(IEnumerable`1<ExceptionInstance> value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<ExceptionInstance> get_GroupedExceptionEvents();
    [CompilerGeneratedAttribute]
private void set_GroupedExceptionEvents(IEnumerable`1<ExceptionInstance> value);
    [CompilerGeneratedAttribute]
internal IList`1<EmbeddedSymbolInfo> get_ModuleMetadata();
    [CompilerGeneratedAttribute]
private void set_ModuleMetadata(IList`1<EmbeddedSymbolInfo> value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionExtensions : object {
    private IServiceProvider _serviceProvider;
    private Dictionary`2<Tuple`2<string, string>, List`1<ActionExecutor>> _actionExecutors;
    internal IEnumerable`1<ActionProvider> InstalledActionProviders { get; }
    public ActionExtensions(IServiceProvider serviceProvider);
    internal IEnumerable`1<ActionProvider> get_InstalledActionProviders();
    public ActionProvider GetActionProvider(IActionEvent actionEvent, ActionProviderTarget target);
    internal void AddActionProvider(ActionProvider provider);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProvider : object {
    private String[] _supportedParameters;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    protected IServiceProvider ServiceProvider { get; private set; }
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    internal void SetSite(IServiceProvider serviceProvider);
    protected virtual void Initialize();
    public bool IsAvailable();
    public bool CanHandleEvent(IActionEvent actionEvent);
    public bool ExecuteAction(IActionEvent actionEvent);
    public bool CanHandleParameter(string parameterName);
    protected abstract virtual bool DoCanHandleEvent(IActionEvent actionEvent);
    protected abstract virtual bool DoExecuteAction(IActionEvent actionEvent);
    protected abstract virtual bool DoIsAvailable();
    protected virtual bool DoCanHandleParameter(string parameterName);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviderParameterAttribute : Attribute {
    private string _parameterName;
    public string ParameterName { get; }
    public ActionProviderParameterAttribute(string parameterName);
    public string get_ParameterName();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.ActionProviderGuids : object {
    public static string SystemCenterSqlGuidString;
    public static string IntelliTraceSqlGuidString;
    public static string MvcAspGuidString;
    public static string MvcPerformanceGuidString;
    public static Guid SystemCenterSqlGuid;
    public static Guid IntelliTraceSqlGuid;
    public static Guid MvcAspGuid;
    public static Guid MvcPerformanceGuid;
    private static ActionProviderGuids();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.ControllerCache : object {
    [CompilerGeneratedAttribute]
private ICodeElement <CodeElement>k__BackingField;
    private SynchronizedDeferredCache`2<string, IEnumerable`1<ICodeElement>> _actionCache;
    public ICodeElement CodeElement { get; private set; }
    public ControllerCache(ICodeElement element);
    [CompilerGeneratedAttribute]
public ICodeElement get_CodeElement();
    [CompilerGeneratedAttribute]
private void set_CodeElement(ICodeElement value);
    public IEnumerable`1<ICodeElement> GetActions(string actionName, IMvcCodeSearcher searcher);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.DocumentLineReader : LineReaderFactory {
    public DocumentLineReader(IServiceProvider serviceProvider);
    public virtual ILineReader CreateReader(string path);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.ILineReader {
    public abstract virtual string ReadLine();
}
[GuidAttribute("0EE38FD4-2D4E-472D-B646-E062E9D25950")]
[EventCategoryAttribute("IntelliTrace", "system.data", "0.0.0.0")]
[ActionProviderParameterAttribute("@cmdText")]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.IntelliTraceSqlActionProvider : SqlActionProvider {
    private static HashSet`1<string> HandledMethodNames;
    private static IntelliTraceSqlActionProvider();
    protected sealed virtual bool DoCanHandleEvent(IActionEvent iTraceEvent);
    protected internal sealed virtual SqlCommandInformation GetSqlScript(IActionEvent iTraceEvent);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.LineReaderFactory : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    protected IServiceProvider ServiceProvider { get; private set; }
    protected LineReaderFactory(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    public abstract virtual ILineReader CreateReader(string path);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcActionProvider : ActionProvider {
    public static string ControllerName;
    public static string ActionName;
    private static CalloutPopup _calloutPopup;
    private static IMvcCodeSearcher _codeSearcher;
    private static MvcCacheManager _mvcCacheManager;
    public static CalloutPopup CalloutPopup { get; }
    protected IMvcCodeSearcher MvcCodeSearcher { get; }
    private static MvcActionProvider();
    public static CalloutPopup get_CalloutPopup();
    protected IMvcCodeSearcher get_MvcCodeSearcher();
    protected virtual void Initialize();
    protected sealed virtual bool DoCanHandleEvent(IActionEvent actionEvent);
    protected sealed virtual bool DoExecuteAction(IActionEvent actionEvent);
    protected sealed virtual bool DoIsAvailable();
    public sealed virtual string GetParameterToolTip(IDataElement parameterData);
    private void OpenSourceLocation(PopupItem popupItem);
    private Task`1<List`1<PopupItem>> FindControllers(string controller, CancellationToken cancellationToken);
    private Task`1<List`1<PopupItem>> FindActions(string controllerName, string actionName, CancellationToken cancellationToken);
    private static string GetMethodName(ICodeElement action);
    private bool IsSolutionOpened();
    private void SetSearchResults(Task`1<List`1<PopupItem>> task, PopupViewModel popupViewModel, string name, bool isController);
    private void ShowCalloutPopup(UIActionContext actionContext, PopupViewModel popupViewModel, CancellationTokenSource cancellationTokenSource);
    private bool GetIsSolutionBuilt();
    private LineReaderFactory CreateLineReader();
}
[GuidAttribute("317CA419-7FC5-48F9-AA00-C0B1E8065AD9")]
[EventCategoryAttribute("Avicode", "system.web", "0.0.0.0")]
[ActionProviderParameterAttribute("@MVC Controller")]
[ActionProviderParameterAttribute("@MVC Action Name")]
[ActionProviderTargetAttribute("1")]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcAspActionProvider : MvcActionProvider {
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcCacheManager : object {
    private bool _isInitialized;
    private UInt32 _rdtCookie;
    private SynchronizedDeferredCache`2<string, IEnumerable`1<ControllerCache>> _controllerCache;
    private Timer _clearTimer;
    private object _timerLock;
    public void EnsureInitialized(IServiceProvider serviceProvider);
    public IEnumerable`1<ControllerCache> GetControllers(string controllerName, IMvcCodeSearcher searcher);
    public void Clear();
    private void DeferredClear();
    private void ClearTimerElapsed(object sender, ElapsedEventArgs e);
    private void SolutionEvents_AfterClosing();
    private sealed virtual override int Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterAttributeChange(UInt32 docCookie, UInt32 grfAttribs);
    private sealed virtual override int Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterDocumentWindowHide(UInt32 docCookie, IVsWindowFrame pFrame);
    private sealed virtual override int Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterFirstDocumentLock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    private sealed virtual override int Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterSave(UInt32 docCookie);
    private sealed virtual override int Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnBeforeDocumentWindowShow(UInt32 docCookie, int fFirstShow, IVsWindowFrame pFrame);
    private sealed virtual override int Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnBeforeLastDocumentUnlock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
}
[ActionProviderParameterAttribute("@MVC Controller")]
[ActionProviderParameterAttribute("@MVC Action Name")]
[GuidAttribute("235A93E5-AEE3-4752-AA13-0C5494D188A8")]
[EventCategoryAttribute("Avicode", "performance", "0.0.0.0")]
[ActionProviderTargetAttribute("1")]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcPerformanceActionProvider : MvcActionProvider {
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcPopupTreeView : TreeView {
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcPopupTreeViewAutomationPeer : TreeViewAutomationPeer {
    public MvcPopupTreeViewAutomationPeer(MvcPopupTreeView owner);
    protected virtual string GetClassNameCore();
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual string GetNameCore();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcPopupTreeViewDataItemAutomationPeer : TreeViewDataItemAutomationPeer {
    public MvcPopupTreeViewDataItemAutomationPeer(object item, ItemsControlAutomationPeer itemsControlAutomationPeer, TreeViewDataItemAutomationPeer parentDataItemAutomationPeer);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual string GetClassNameCore();
    private AutomationPeer GetItemContainerPeer();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcPopupTreeViewItem : TreeViewItem {
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual bool IsItemItsOwnContainerOverride(object item);
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcPopupTreeViewItemAutomationPeer : TreeViewItemAutomationPeer {
    public MvcPopupTreeViewItemAutomationPeer(MvcPopupTreeViewItem owner);
    protected virtual string GetClassNameCore();
    protected virtual List`1<AutomationPeer> GetChildrenCore();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.ICodeElement {
    public string FullName { get; }
    public string Name { get; }
    public SourceLocation SourceLocation { get; }
    public ImageSource Icon { get; }
    public abstract virtual string get_FullName();
    public abstract virtual string get_Name();
    public abstract virtual SourceLocation get_SourceLocation();
    public abstract virtual ImageSource get_Icon();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.IMvcCodeSearcher {
    public abstract virtual IEnumerable`1<ICodeElement> FindControllers(string controllerName);
    public abstract virtual IEnumerable`1<ICodeElement> FindActions(string actionName, ICodeElement controllerElement);
    public abstract virtual void OpenSourceLocation(ICodeElement codeElement);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.CodeSearchOptions : object {
    public bool SearchExternalItems { get; }
    public bool SearchFileContents { get; }
    public sealed virtual bool get_SearchExternalItems();
    public sealed virtual bool get_SearchFileContents();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.ProgressionCodeSearcher : object {
    private static string MvcAssemblyName;
    private static string MvcNamespaceName;
    private static string MvcControllerClassName;
    private static string MvcActionNameAttributeName;
    private Guid CsGuid;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _providersLoaded;
    private static IActionManager _actionManager;
    private static object _actionManagerLock;
    private IIconService _iconService;
    private IGraphProviderManager _graphProviderManager;
    private static IServiceProvider ServiceProvider { get; }
    public static IActionManager ActionManager { get; }
    private IIconService IconService { get; }
    private IGraphProviderManager GraphProviderManager { get; }
    private static ProgressionCodeSearcher();
    private static IServiceProvider get_ServiceProvider();
    public static IActionManager get_ActionManager();
    private IIconService get_IconService();
    private IGraphProviderManager get_GraphProviderManager();
    public sealed virtual IEnumerable`1<ICodeElement> FindControllers(string controllerName);
    public sealed virtual IEnumerable`1<ICodeElement> FindActions(string actionName, ICodeElement controllerElement);
    public sealed virtual void OpenSourceLocation(ICodeElement codeElement);
    private IEnumerable`1<ICodeElement> FindActions(string actionName, ProgressionNodeClassCodeElement progressionElement);
    private static string GetControllerClassName(string controllerName);
    private static bool IsControllerNode(GraphNode node, IEnumerable`1<GraphNode> baseTypes);
    private static bool IsControllerType(GraphNode node);
    private IEnumerable`1<GraphNode> FindElementsWithText(Graph searchGraph, string queryString);
    private IEnumerable`1<GraphNode> FindBaseClasses(GraphNode node);
    private void PerformGraphSearch(GraphContext context);
    private void LoadProviders(IGraphProviderManager graphProviderManager);
    private bool IsActionNode(string actionName, ProgressionNodeCodeElement codeElement);
    private static bool MatchName(string actionOrControllerName, string classOrMethodName);
    private string GetActionNameAttributeValue(ProgressionNodeCodeElement codeElement);
    private static bool IsActionNameAttributeNode(GraphNode node);
    private string GetActionNameAttributeValueFromAttributeNode(GraphNode attributeNode, Guid programmingLanguage);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.ProgressionNodeClassCodeElement : ProgressionNodeCodeElement {
    [CompilerGeneratedAttribute]
private ProgressionNodeClassCodeElement <BaseType>k__BackingField;
    public ProgressionNodeClassCodeElement BaseType { get; private set; }
    public string FullName { get; }
    public string Name { get; }
    public string AssemblyName { get; }
    private ProgressionNodeClassCodeElement(GraphNode node);
    internal static ProgressionNodeClassCodeElement Create(GraphNode node, IEnumerable`1<GraphNode> baseTypeHierarchy);
    private static bool VerifyClass(GraphNode node);
    [CompilerGeneratedAttribute]
public ProgressionNodeClassCodeElement get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(ProgressionNodeClassCodeElement value);
    public virtual string get_FullName();
    public virtual string get_Name();
    public virtual string get_AssemblyName();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.ProgressionNodeCodeElement : object {
    [CompilerGeneratedAttribute]
private GraphNode <Node>k__BackingField;
    private SourceLocation _sourceLocation;
    private bool _sourceLocationLoaded;
    [CompilerGeneratedAttribute]
private ImageSource <Icon>k__BackingField;
    public GraphNode Node { get; private set; }
    public string FullName { get; }
    public string Name { get; }
    public SourceLocation SourceLocation { get; }
    public string AssemblyName { get; }
    public ImageSource Icon { get; private set; }
    protected ProgressionNodeCodeElement(GraphNode node);
    [CompilerGeneratedAttribute]
public GraphNode get_Node();
    [CompilerGeneratedAttribute]
private void set_Node(GraphNode value);
    public abstract virtual string get_FullName();
    public abstract virtual string get_Name();
    public sealed virtual SourceLocation get_SourceLocation();
    public abstract virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
public sealed virtual ImageSource get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(ImageSource value);
    public static ProgressionNodeCodeElement CreateClass(GraphNode node, IEnumerable`1<GraphNode> baseTypes, IActionManager actionManager, IIconService iconService);
    public static ProgressionNodeCodeElement CreateMethod(GraphNode node, ProgressionNodeClassCodeElement containingClass, IActionManager actionManager, IIconService iconService);
    private static ImageSource GetImageForGraphObject(GraphObject data, IIconService iconService);
    protected virtual void EnsureSourceLocation();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.ProgressionNodeMethodCodeElement : ProgressionNodeCodeElement {
    private string _name;
    private string _signature;
    private bool _signatureLoaded;
    [CompilerGeneratedAttribute]
private ProgressionNodeClassCodeElement <ContainingClass>k__BackingField;
    public string Name { get; }
    public string Signature { get; }
    public string FullName { get; }
    public string AssemblyName { get; }
    public ProgressionNodeClassCodeElement ContainingClass { get; private set; }
    private ProgressionNodeMethodCodeElement(GraphNode node, ProgressionNodeClassCodeElement containingClass);
    public virtual string get_Name();
    public string get_Signature();
    public virtual string get_FullName();
    public virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
public ProgressionNodeClassCodeElement get_ContainingClass();
    [CompilerGeneratedAttribute]
private void set_ContainingClass(ProgressionNodeClassCodeElement value);
    public static ProgressionNodeMethodCodeElement Create(GraphNode node, ProgressionNodeClassCodeElement containingClass);
    private static bool IsMethodNode(GraphNode node);
    internal static string GetMethodName(GraphNode methodNode);
    private void EnsureSignature();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.RelationshipSearchParameters : object {
    public static UInt32 MaximumResultsDefault;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable <SourceItemHints>k__BackingField;
    private UInt32 _maximumResults;
    [CompilerGeneratedAttribute]
private ISolutionSearchOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IVsSearchQuery <SearchQuery>k__BackingField;
    public CancellationToken CancellationToken { get; public set; }
    public string RelationshipHint { get; }
    public IEnumerable SourceItemHints { get; public set; }
    public UInt32 MaximumResults { get; public set; }
    public ISolutionSearchOptions Options { get; public set; }
    public IVsSearchQuery SearchQuery { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    public sealed virtual string get_RelationshipHint();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable get_SourceItemHints();
    [CompilerGeneratedAttribute]
public void set_SourceItemHints(IEnumerable value);
    public sealed virtual UInt32 get_MaximumResults();
    public void set_MaximumResults(UInt32 value);
    public sealed virtual void OnMaximumResultsExceeded();
    [CompilerGeneratedAttribute]
public sealed virtual ISolutionSearchOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(ISolutionSearchOptions value);
    [CompilerGeneratedAttribute]
public sealed virtual IVsSearchQuery get_SearchQuery();
    [CompilerGeneratedAttribute]
public void set_SearchQuery(IVsSearchQuery value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.SimpleCodeSearchQuery : object {
    [CompilerGeneratedAttribute]
private string <SearchString>k__BackingField;
    public UInt32 ParseError { get; }
    public string SearchString { get; private set; }
    public SimpleCodeSearchQuery(string queryString);
    public sealed virtual UInt32 GetTokens(UInt32 dwMaxTokens, IVsSearchToken[] rgpSearchTokens);
    public sealed virtual UInt32 get_ParseError();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SearchString();
    [CompilerGeneratedAttribute]
private void set_SearchString(string value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.Progression.SimpleSearchToken : object {
    private string _searchString;
    public string OriginalTokenText { get; }
    public UInt32 ParseError { get; }
    public string ParsedTokenText { get; }
    public UInt32 TokenStartPosition { get; }
    public SimpleSearchToken(string searchString);
    public sealed virtual string get_OriginalTokenText();
    public sealed virtual UInt32 get_ParseError();
    public sealed virtual string get_ParsedTokenText();
    public sealed virtual UInt32 get_TokenStartPosition();
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.MvcSearch.SourceLocation : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndColumn>k__BackingField;
    public string FileName { get; private set; }
    public int StartLine { get; private set; }
    public int StartColumn { get; private set; }
    public int EndLine { get; private set; }
    public int EndColumn { get; private set; }
    internal SourceLocation(string fileName, int startLine, int startColumn, int endLine, int endColumn);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
private void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
private void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
private void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    [CompilerGeneratedAttribute]
private void set_EndColumn(int value);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.SqlActionProvider : ActionProvider {
    private static Guid SqlScriptEditorFactoryGuid;
    public static string CmdTextParameterName;
    private static Nullable`1<bool> _isSqlScriptEditorAvailable;
    private static bool _isHierarchyItemManagerRetrieved;
    private static IVsHierarchyItemManager _hierarchyItemManager;
    private bool IsSqlScriptEditorAvailable { get; }
    private IVsHierarchyItemManager HierarchyItemManager { get; }
    private static SqlActionProvider();
    private bool get_IsSqlScriptEditorAvailable();
    private IVsHierarchyItemManager get_HierarchyItemManager();
    protected sealed virtual bool DoIsAvailable();
    protected sealed virtual bool DoExecuteAction(IActionEvent itraceEvent);
    private bool OpenSqlEditor(string sqlScript);
    protected internal abstract virtual SqlCommandInformation GetSqlScript(IActionEvent iTraceEvent);
    public sealed virtual string GetParameterToolTip(IDataElement parameterData);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.SynchronizedDeferredCache`2 : object {
    private Dictionary`2<TKey, LockWrapper`1<TKey, TValue, TValue>> _lockedCache;
    public TValue GetOrAddCache(TKey key, Func`1<TValue> fetcher);
    public void Clear();
}
[GuidAttribute("02C4E4F1-512F-413C-83C6-D44F7D861F7B")]
[EventCategoryAttribute("Avicode", "system.data", "0.0.0.0")]
[ActionProviderParameterAttribute("@cmdText")]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.SystemCenterSqlActionProvider : SqlActionProvider {
    protected virtual bool DoCanHandleEvent(IActionEvent itraceEvent);
    protected internal sealed virtual SqlCommandInformation GetSqlScript(IActionEvent iTraceEvent);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.ViewModels.MvcPopupViewModel : PopupViewModel {
    [CompilerGeneratedAttribute]
private ContentType <Content>k__BackingField;
    private string _parameterValue;
    public ContentType Content { get; private set; }
    public string ParameterValue { get; public set; }
    public MvcPopupViewModel(Action cancellationAction, ContentType contentType);
    [CompilerGeneratedAttribute]
public ContentType get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(ContentType value);
    public string get_ParameterValue();
    public void set_ParameterValue(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviders.Views.MvcPopupResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AutomationNameActionPopup { get; }
    internal static string AutomationNameControllerPopup { get; }
    internal static string AutomationNameLink { get; }
    internal static string AutomationNameWarningStatusPopup { get; }
    internal static string MvcPopupTreeViewAutomationName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AutomationNameActionPopup();
    internal static string get_AutomationNameControllerPopup();
    internal static string get_AutomationNameLink();
    internal static string get_AutomationNameWarningStatusPopup();
    internal static string get_MvcPopupTreeViewAutomationName();
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviderTarget : Enum {
    public int value__;
    public static ActionProviderTarget None;
    public static ActionProviderTarget Details;
    public static ActionProviderTarget EventList;
    public static ActionProviderTarget WebEventList;
    public static ActionProviderTarget All;
}
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ActionProviderTargetAttribute : Attribute {
    private ActionProviderTarget _target;
    public ActionProviderTarget Target { get; }
    public ActionProviderTargetAttribute(ActionProviderTarget target);
    public ActionProviderTarget get_Target();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.EventCategoryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <CategoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionRange <VersionRange>k__BackingField;
    public string CategoryId { get; private set; }
    public string ProviderName { get; private set; }
    public VersionRange VersionRange { get; private set; }
    public EventCategoryAttribute(string providerName, string categoryId, string version);
    public EventCategoryAttribute(string providerName, string categoryId, string minVersion, string maxVersion);
    [CompilerGeneratedAttribute]
public string get_CategoryId();
    [CompilerGeneratedAttribute]
private void set_CategoryId(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
private void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public VersionRange get_VersionRange();
    [CompilerGeneratedAttribute]
private void set_VersionRange(VersionRange value);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.Extensibility.IActionCallFrameEvent {
    public string MethodName { get; }
    public IEnumerable`1<IDataElement> ParameterValues { get; }
    public IDataElement ThisValue { get; }
    public abstract virtual string get_MethodName();
    public abstract virtual IEnumerable`1<IDataElement> get_ParameterValues();
    public abstract virtual IDataElement get_ThisValue();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.Extensibility.IActionDiagnosticEvent {
    public string LongDescription { get; }
    public string ShortDescription { get; }
    public IEnumerable`1<IDataElement> CollectedValues { get; }
    public abstract virtual string get_LongDescription();
    public abstract virtual string get_ShortDescription();
    public abstract virtual IEnumerable`1<IDataElement> get_CollectedValues();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.Extensibility.IActionEvent {
    public string Category { get; }
    public string DataProviderName { get; }
    public Version Version { get; }
    public object ActionContextObject { get; }
    public abstract virtual string get_Category();
    public abstract virtual string get_DataProviderName();
    public abstract virtual Version get_Version();
    public abstract virtual object get_ActionContextObject();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.Extensibility.IActionUIProvider {
    public abstract virtual string GetParameterToolTip(IDataElement parameterData);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.LineNumberAndText : object {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public int LineNumber { get; public set; }
    public string Text { get; public set; }
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Microsoft.VisualStudio.TraceLogPackage.Extensibility.PopupContentControl : UserControl {
    [CompilerGeneratedAttribute]
private Action`1<PopupItem> <ItemAction>k__BackingField;
    internal Grid spinnerGrid;
    internal TextBlock loadingMessageTextBlock;
    internal TextBlock cancellationTextBlock;
    internal Hyperlink cancellationHyperlink;
    internal Run cancellationRun;
    internal Grid contentGrid;
    internal ContentControl warningMessageControl;
    internal ContentControl statusMessageControl;
    internal MvcPopupTreeView itemTreeView;
    private bool _contentLoaded;
    internal Action`1<PopupItem> ItemAction { get; private set; }
    internal PopupContentControl(Action`1<PopupItem> itemAction);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [CompilerGeneratedAttribute]
internal Action`1<PopupItem> get_ItemAction();
    [CompilerGeneratedAttribute]
private void set_ItemAction(Action`1<PopupItem> value);
    private void ContentGrid_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void TreeView_KeyDown(object sender, KeyEventArgs e);
    private void TreeView_MouseDoubleClick(object sender, MouseButtonEventArgs e);
    private void ExecuteActionOnSelectedItem();
    private void OpeningToolTip(object sender, ToolTipEventArgs args);
    private CustomPopupPlacement[] PlaceToolTip(Size size, Size targetSize, Point offset);
    private void OnGotoSourceClicked(object sender, RoutedEventArgs e);
    private void OnCollapseAllClicked(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.PopupItem : TraceLogViewModelBase {
    private LineReaderFactory _lineProvider;
    [CompilerGeneratedAttribute]
private ICodeElement <CodeElement>k__BackingField;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<PopupItem> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongDescription>k__BackingField;
    private bool _hasSourceLocation;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartLine>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartColumn>k__BackingField;
    private bool _isLoadingToolTipCodeSnippet;
    private bool _hasToolTipCodeSnippet;
    private ToolTipCodeSnippet _toolTipCodeSnippet;
    private bool _isSelected;
    private bool _isExpanded;
    public ICodeElement CodeElement { get; private set; }
    public ObservableCollection`1<PopupItem> Children { get; private set; }
    public ImageSource Icon { get; }
    public string DisplayName { get; private set; }
    public string LongDescription { get; private set; }
    public bool HasSourceLocation { get; private set; }
    public string FileName { get; private set; }
    public int StartLine { get; private set; }
    public int StartColumn { get; private set; }
    public bool IsLoadingToolTipCodeSnippet { get; private set; }
    public bool HasToolTipCodeSnippet { get; private set; }
    public ToolTipCodeSnippet ToolTipCodeSnippet { get; private set; }
    public bool IsSelected { get; public set; }
    public bool IsSelfOrChildSelected { get; }
    public bool IsExpanded { get; public set; }
    public PopupItem(ICodeElement codeElement, string displayName, LineReaderFactory lineProvider);
    private void Children_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void TriggerIsSelfOrChildSelectedPropertyChanged();
    private void ItemPropertyChanged(object sender, PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
public ICodeElement get_CodeElement();
    [CompilerGeneratedAttribute]
private void set_CodeElement(ICodeElement value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<PopupItem> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(ObservableCollection`1<PopupItem> value);
    public ImageSource get_Icon();
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_LongDescription();
    [CompilerGeneratedAttribute]
private void set_LongDescription(string value);
    public bool get_HasSourceLocation();
    private void set_HasSourceLocation(bool value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
private void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
private void set_StartColumn(int value);
    public bool get_IsLoadingToolTipCodeSnippet();
    private void set_IsLoadingToolTipCodeSnippet(bool value);
    public bool get_HasToolTipCodeSnippet();
    private void set_HasToolTipCodeSnippet(bool value);
    public ToolTipCodeSnippet get_ToolTipCodeSnippet();
    private void set_ToolTipCodeSnippet(ToolTipCodeSnippet value);
    public void HydrateToolTipCodeSnippet();
    private void HydrateToolTipCodeSnippet(ILineReader streamReader);
    private static LineNumberAndText GetLineNumberAndText(int lineNumber, string text);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public bool get_IsSelfOrChildSelected();
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.PopupViewModel : TraceLogViewModelBase {
    [CompilerGeneratedAttribute]
private ICommand <CancellationCommand>k__BackingField;
    private bool _isSearching;
    private string _statusMessage;
    private string _warningMessage;
    private ObservableCollection`1<PopupItem> _items;
    private bool _showStatus;
    public ICommand CancellationCommand { get; private set; }
    public bool IsSearching { get; public set; }
    public string StatusMessage { get; public set; }
    public string WarningMessage { get; public set; }
    public bool HasItem { get; }
    public bool IsTreeView { get; }
    public ObservableCollection`1<PopupItem> Items { get; public set; }
    public bool IsViewSourceHyperlinkEnabled { get; }
    public bool ShowStatus { get; private set; }
    public PopupViewModel(Action cancellationAction);
    [CompilerGeneratedAttribute]
public ICommand get_CancellationCommand();
    [CompilerGeneratedAttribute]
private void set_CancellationCommand(ICommand value);
    public bool get_IsSearching();
    public void set_IsSearching(bool value);
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    public string get_WarningMessage();
    public void set_WarningMessage(string value);
    public bool get_HasItem();
    public bool get_IsTreeView();
    public ObservableCollection`1<PopupItem> get_Items();
    public void set_Items(ObservableCollection`1<PopupItem> value);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs args);
    private void SubscribeToEvents();
    private void UnsubscribeToEvents();
    public bool get_IsViewSourceHyperlinkEnabled();
    public bool get_ShowStatus();
    private void set_ShowStatus(bool value);
}
public static class Microsoft.VisualStudio.TraceLogPackage.Extensibility.SelectorExtensions : object {
    public static DependencyProperty IsScrollBarVisibleProperty;
    public static DependencyProperty CloseToolTipProperty;
    private static SelectorExtensions();
    public static void SetIsScrollBarVisible(DependencyObject dependencyObject, bool isVisible);
    public static bool GetIsScrollBarVisible(DependencyObject dependencyObject);
    public static void SetCloseToolTip(FrameworkElement item, bool closeToolTip);
    public static bool GetCloseToolTip(FrameworkElement item);
    private static void OnCloseToolTipChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e);
    private static void ExecuteCloseToolTip(object sender, ToolTipEventArgs e);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.ToolTipCodeSnippet : object {
    [CompilerGeneratedAttribute]
private string <LongDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private LineNumberAndText <Line1>k__BackingField;
    [CompilerGeneratedAttribute]
private LineNumberAndText <Line2>k__BackingField;
    [CompilerGeneratedAttribute]
private LineNumberAndText <Line3>k__BackingField;
    [CompilerGeneratedAttribute]
private LineNumberAndText <Line4>k__BackingField;
    [CompilerGeneratedAttribute]
private LineNumberAndText <Line5>k__BackingField;
    public string LongDescription { get; public set; }
    public LineNumberAndText Line1 { get; public set; }
    public LineNumberAndText Line2 { get; public set; }
    public LineNumberAndText Line3 { get; public set; }
    public LineNumberAndText Line4 { get; public set; }
    public LineNumberAndText Line5 { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LongDescription();
    [CompilerGeneratedAttribute]
public void set_LongDescription(string value);
    [CompilerGeneratedAttribute]
public LineNumberAndText get_Line1();
    [CompilerGeneratedAttribute]
public void set_Line1(LineNumberAndText value);
    [CompilerGeneratedAttribute]
public LineNumberAndText get_Line2();
    [CompilerGeneratedAttribute]
public void set_Line2(LineNumberAndText value);
    [CompilerGeneratedAttribute]
public LineNumberAndText get_Line3();
    [CompilerGeneratedAttribute]
public void set_Line3(LineNumberAndText value);
    [CompilerGeneratedAttribute]
public LineNumberAndText get_Line4();
    [CompilerGeneratedAttribute]
public void set_Line4(LineNumberAndText value);
    [CompilerGeneratedAttribute]
public LineNumberAndText get_Line5();
    [CompilerGeneratedAttribute]
public void set_Line5(LineNumberAndText value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.UIActionContext : object {
    [CompilerGeneratedAttribute]
private IDataElement <ParameterData>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <TargetUIElement>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <TargetRectangle>k__BackingField;
    public IDataElement ParameterData { get; private set; }
    public UIElement TargetUIElement { get; private set; }
    public Rect TargetRectangle { get; private set; }
    public UIActionContext(IDataElement parameterData, UIElement targetUIElement, Rect targetRectangle);
    [CompilerGeneratedAttribute]
public IDataElement get_ParameterData();
    [CompilerGeneratedAttribute]
private void set_ParameterData(IDataElement value);
    [CompilerGeneratedAttribute]
public UIElement get_TargetUIElement();
    [CompilerGeneratedAttribute]
private void set_TargetUIElement(UIElement value);
    [CompilerGeneratedAttribute]
public Rect get_TargetRectangle();
    [CompilerGeneratedAttribute]
private void set_TargetRectangle(Rect value);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Extensibility.VersioningActionDiagnosticEvent : object {
    [CompilerGeneratedAttribute]
private DataProvider <DataProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ActionContextObject>k__BackingField;
    protected DataProvider DataProvider { get; private set; }
    public string Category { get; }
    public string MethodName { get; }
    public string LongDescription { get; }
    public string ShortDescription { get; }
    public IEnumerable`1<IDataElement> CollectedValues { get; }
    public IEnumerable`1<IDataElement> ParameterValues { get; }
    public IDataElement ThisValue { get; }
    public string DataProviderName { get; }
    public Version Version { get; }
    public object ActionContextObject { get; public set; }
    protected VersioningActionDiagnosticEvent(DataProvider dataProvider);
    [CompilerGeneratedAttribute]
protected DataProvider get_DataProvider();
    [CompilerGeneratedAttribute]
private void set_DataProvider(DataProvider value);
    public abstract virtual string get_Category();
    public abstract virtual string get_MethodName();
    public abstract virtual string get_LongDescription();
    public abstract virtual string get_ShortDescription();
    public abstract virtual IEnumerable`1<IDataElement> get_CollectedValues();
    public abstract virtual IEnumerable`1<IDataElement> get_ParameterValues();
    public abstract virtual IDataElement get_ThisValue();
    public sealed virtual string get_DataProviderName();
    public sealed virtual Version get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual object get_ActionContextObject();
    [CompilerGeneratedAttribute]
public void set_ActionContextObject(object value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Extensibility.VersionRange : object {
    [CompilerGeneratedAttribute]
private Version <MinimumVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MaximumVersion>k__BackingField;
    public Version MinimumVersion { get; private set; }
    public Version MaximumVersion { get; private set; }
    public VersionRange(string version);
    internal VersionRange(string minVersion, string maxVersion);
    [CompilerGeneratedAttribute]
public Version get_MinimumVersion();
    [CompilerGeneratedAttribute]
private void set_MinimumVersion(Version value);
    [CompilerGeneratedAttribute]
public Version get_MaximumVersion();
    [CompilerGeneratedAttribute]
private void set_MaximumVersion(Version value);
    public bool Contains(Version version);
    private bool VersionMatches(Version targetVersion, Version comparedVersion);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.FeatureFlags : object {
    public static string IntelliTraceFilter;
    public static string IntelliTraceProcessSnapshotAD7ALIntegration;
    private static Dictionary`2<string, bool> s_enabledCache;
    private static FeatureFlags();
    public static bool IsFeatureEnabled(IServiceProvider serviceProvider, string featureName, bool defaultValue);
}
internal enum Microsoft.VisualStudio.TraceLogPackage.FilteringMode : Enum {
    public int value__;
    public static FilteringMode None;
    public static FilteringMode Sharepoint;
    public static FilteringMode PerformanceEvent;
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.FilterUtilities : object {
    public static ExprNode BinopFold(IEnumerable`1<ExprNode> nodes, ExprNodeOperators op);
    [ExtensionAttribute]
public static ExprNode And(ExprNode lhs, ExprNode rhs);
    [ExtensionAttribute]
public static ExprNode Or(ExprNode lhs, ExprNode rhs);
}
[DebuggerDisplayAttribute("ShortText = {ShortText}, EventId = {EventId}, IsLeaf = {IsLeaf}")]
internal class Microsoft.VisualStudio.TraceLogPackage.FrameImpl : object {
    private IList`1<IHistoricalDebuggingFrame> m_children;
    private IHistoricalDebuggingFrame m_parent;
    [CompilerGeneratedAttribute]
private string <FrameText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortText>k__BackingField;
    [CompilerGeneratedAttribute]
private PROTEUS_EVENT_TYPE <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLeaf>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public string FrameText { get; private set; }
    public string ShortText { get; private set; }
    internal PROTEUS_EVENT_TYPE EventType { get; private set; }
    public ulong TimeStamp { get; private set; }
    public string Category { get; private set; }
    public IList`1<IHistoricalDebuggingFrame> Children { get; internal set; }
    public int ChildCount { get; }
    public bool IsLeaf { get; private set; }
    public IHistoricalDebuggingFrame Parent { get; private set; }
    public ulong EventId { get; private set; }
    public string Language { get; private set; }
    public int HistoricalEventType { get; }
    internal FrameImpl(NODEINFO node, IHistoricalDebuggingFrame parent);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FrameText();
    [CompilerGeneratedAttribute]
private void set_FrameText(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ShortText();
    [CompilerGeneratedAttribute]
private void set_ShortText(string value);
    [CompilerGeneratedAttribute]
internal PROTEUS_EVENT_TYPE get_EventType();
    [CompilerGeneratedAttribute]
private void set_EventType(PROTEUS_EVENT_TYPE value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_TimeStamp();
    [CompilerGeneratedAttribute]
private void set_TimeStamp(ulong value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    public sealed virtual IList`1<IHistoricalDebuggingFrame> get_Children();
    internal void set_Children(IList`1<IHistoricalDebuggingFrame> value);
    public int get_ChildCount();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLeaf();
    [CompilerGeneratedAttribute]
private void set_IsLeaf(bool value);
    public sealed virtual IHistoricalDebuggingFrame get_Parent();
    private void set_Parent(IHistoricalDebuggingFrame value);
    [CompilerGeneratedAttribute]
public sealed virtual ulong get_EventId();
    [CompilerGeneratedAttribute]
private void set_EventId(ulong value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
private void set_Language(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(FrameImpl frame1, FrameImpl frame2);
    public static bool op_Inequality(FrameImpl frame1, FrameImpl frame2);
    public sealed virtual int get_HistoricalEventType();
}
internal class Microsoft.VisualStudio.TraceLogPackage.GoldBar.CloseGoldBarAction : GoldBarAction {
    public CloseGoldBarAction(GoldBarViewModel parentModel);
    private static ICommand CreateCloseCommand(GoldBarViewModel parentModel);
    private static void ExecuteClose(GoldBarViewModel model);
    private static bool CanExecuteClose(GoldBarViewModel model);
}
internal class Microsoft.VisualStudio.TraceLogPackage.GoldBar.GoldBarAction : GoldBarTextContent {
    private ICommand _action;
    private GoldBarViewModel _parentModel;
    public ICommand Action { get; }
    public GoldBarViewModel ParentModel { get; }
    public GoldBarAction(GoldBarViewModel parentModel, ICommand action, string displayText, string tooltip);
    public ICommand get_Action();
    public GoldBarViewModel get_ParentModel();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.GoldBar.GoldBarGroup : GoldBarItem {
    private ObservableCollection`1<GoldBarItem> _items;
    public IList`1<GoldBarItem> OrderedItems { get; }
    public IList`1<GoldBarItem> get_OrderedItems();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.GoldBar.GoldBarItem : TraceLogViewModelBase {
    private bool _visible;
    public bool IsVisible { get; public set; }
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.GoldBar.GoldBarMessage : GoldBarTextContent {
    private MessageDecoration _decoration;
    public MessageDecoration Decoration { get; public set; }
    public GoldBarMessage(string displayText, string tooltip, MessageDecoration decoration);
    public MessageDecoration get_Decoration();
    public void set_Decoration(MessageDecoration value);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.GoldBar.GoldBarTextContent : GoldBarItem {
    private string _displayText;
    private string _tooltip;
    public string DisplayText { get; public set; }
    public string Tooltip { get; public set; }
    public GoldBarTextContent(string displayText, string tooltip);
    public string get_DisplayText();
    public void set_DisplayText(string value);
    public string get_Tooltip();
    public void set_Tooltip(string value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.GoldBar.GoldBarViewModel : GoldBarGroup {
    private CloseGoldBarAction _closeAction;
    [CompilerGeneratedAttribute]
private bool <UserClosed>k__BackingField;
    public CloseGoldBarAction CloseAction { get; }
    public bool UserClosed { get; public set; }
    public CloseGoldBarAction get_CloseAction();
    [CompilerGeneratedAttribute]
public bool get_UserClosed();
    [CompilerGeneratedAttribute]
public void set_UserClosed(bool value);
    public bool HasVisibleItems();
    [CompilerGeneratedAttribute]
private bool <HasVisibleItems>b__8_0(GoldBarItem item);
}
internal class Microsoft.VisualStudio.TraceLogPackage.GoldBar.GoldBarWrappingLine : GoldBarGroup {
}
internal enum Microsoft.VisualStudio.TraceLogPackage.GoldBar.MessageDecoration : Enum {
    public int value__;
    public static MessageDecoration None;
    public static MessageDecoration Information;
    public static MessageDecoration Error;
    public static MessageDecoration Success;
    public static MessageDecoration Warning;
    public static MessageDecoration Busy;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.GotoCode.GotoCodeResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotExecuteWhenDisabled { get; }
    internal static string CannotFindMatchingSolution { get; }
    internal static string LearnMoreAboutErrorActionText { get; }
    internal static string LearnMoreLink { get; }
    internal static string OpenSolutionActionText { get; }
    internal static string OpenSolutionMessageText { get; }
    internal static string ServiceUnavailable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotExecuteWhenDisabled();
    internal static string get_CannotFindMatchingSolution();
    internal static string get_LearnMoreAboutErrorActionText();
    internal static string get_LearnMoreLink();
    internal static string get_OpenSolutionActionText();
    internal static string get_OpenSolutionMessageText();
    internal static string get_ServiceUnavailable();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.GotoCode.GotoCodeUtilities : object {
    public static void ExtractDataFromBuildInfo(IServiceProvider serviceProvider, XDocument buildInfo, IOpenProjectsRequest& request, String& symbolPath);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost {
    public object ContextData { get; public set; }
    public abstract virtual IBuildInformationSource GetCurrent();
    public abstract virtual object GetCurrentDocumentObject();
    public abstract virtual void BringToFront(IBuildInformationSource source);
    public abstract virtual void InvokeOpenProjectFromCurrentCommand();
    public abstract virtual object get_ContextData();
    public abstract virtual void set_ContextData(object value);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationSource {
    public bool IsLoaded { get; }
    public string LogFile { get; }
    public bool HasProjectBuildInformation { get; }
    public bool HasInvalidBuildInfo { get; }
    public abstract virtual IVsTask GetAsyncLoadTaskAwaiter();
    public abstract virtual bool get_IsLoaded();
    public abstract virtual string get_LogFile();
    public abstract virtual bool get_HasProjectBuildInformation();
    public abstract virtual bool get_HasInvalidBuildInfo();
    public abstract virtual IOpenProjectsRequest GetRequestFromBuildInformation();
    public abstract virtual void RemoveOpenProjectCommand();
}
internal class Microsoft.VisualStudio.TraceLogPackage.GotoCode.OpenProjectGoldBarAction : GoldBarAction {
    public OpenProjectGoldBarAction(GoldBarViewModel parentModel, ICommand openSolutionCommand);
}
internal class Microsoft.VisualStudio.TraceLogPackage.GotoCode.ProjectOpener : object {
    private IBuildInformationHost _host;
    public ProjectOpener(IBuildInformationHost host);
    public ICommand CreateCommand(IBuildInformationSource source);
    public bool IsServiceAvailableForSku();
    public bool CanOpenFromCurrent();
    public void OpenFromCurrent();
    private bool CanOpenFromSource(IBuildInformationSource source);
    private void OpenFromSource(IBuildInformationSource source);
    private bool HasBuildInformation(IBuildInformationSource source);
    private void OpenFromSourceCore(IBuildInformationSource source);
    private bool IsDebugging();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.Guids : object {
    internal static Guid guidManagedEngine;
    internal static Guid guidTraceLogProject;
    internal static Guid guidInteropEngine;
    internal static Guid guidNativeEngine;
    internal static Guid guidScriptEngine;
    internal static Guid guidIVsShell;
    internal static Guid guidCppProjectType;
    internal static Guid guidAppidUsesIsolatedCLR;
    internal static Guid guidIsInHistoricalDebuggingMode;
    internal static Guid ImmediateWindow;
    internal static Guid CommandWindow;
    private static Guids();
}
internal class Microsoft.VisualStudio.TraceLogPackage.HistoricalDataManager : object {
    private static int InvalidLoggerThreadId;
    private Dictionary`2<string, TreeDataManager> m_treeManagerCache;
    protected IP m_IP;
    internal bool m_UpdatingTree;
    internal Dictionary`2<int, List`1<IHistoricalThreadProperties>> _historicalThreadNameDictionary;
    internal Dictionary`2<string, string> _eventCategoriesDictionary;
    private Dictionary`2<Guid, TraceEventQueryManager> m_liveQueryManagers;
    private TraceEventInfo m_liveEvent;
    private bool m_fLiveEventSet;
    private IDebugCallTreeStepper100 m_currentStepper;
    private bool m_timeContextChangeInitiatedByGutter;
    private Timer m_timeContextChangeTimer;
    private static int TimeContextChangeMillisecondDelay;
    private UInt32 _lastSearchId;
    private UInt32 _lastSearchResultId;
    private Dispatcher _mwDisp;
    private bool _isDataManagersStale;
    [CompilerGeneratedAttribute]
private bool <IsSettingTimeContext>k__BackingField;
    public IProcessProperties ProcessProperties { get; }
    internal bool IsSettingTimeContext { get; private set; }
    internal bool InLiveMode { get; }
    internal int CurrentLoggerThreadID { get; }
    internal bool IsInstrumentationEnabled { get; }
    internal IHistoricalDebuggingFrame CurrentFrame { get; }
    internal long CurrentTimeStamp { get; }
    internal IDebugTimeContext100 CurrentTimeContext { get; }
    internal IDebugProcess2 CurrentProcess { get; }
    internal IDebugThread2 CurrentThread { get; }
    internal IEnumerable`1<Guid> CurrentDebugEngines { get; }
    internal bool IsLiveEventSet { get; }
    private bool Microsoft.IntelliTrace.Internal.ITraceStepper.CanStepInto { get; }
    private bool Microsoft.IntelliTrace.Internal.ITraceStepper.CanStepOut { get; }
    private bool Microsoft.IntelliTrace.Internal.ITraceStepper.CanStepOver { get; }
    private bool Microsoft.IntelliTrace.Internal.ITraceStepper.InLiveMode { get; }
    private int Microsoft.IntelliTrace.Internal.ITraceStepper.CurrentLoggerThreadID { get; }
    public sealed virtual IProcessProperties get_ProcessProperties();
    [CompilerGeneratedAttribute]
internal bool get_IsSettingTimeContext();
    [CompilerGeneratedAttribute]
private void set_IsSettingTimeContext(bool value);
    internal bool get_InLiveMode();
    internal int get_CurrentLoggerThreadID();
    internal bool get_IsInstrumentationEnabled();
    internal IHistoricalDebuggingFrame get_CurrentFrame();
    internal long get_CurrentTimeStamp();
    internal IDebugTimeContext100 get_CurrentTimeContext();
    internal IDebugProcess2 get_CurrentProcess();
    internal IDebugThread2 get_CurrentThread();
    internal IEnumerable`1<Guid> get_CurrentDebugEngines();
    internal UInt32 GetLastLiveThreadId(IDebugProcess2 pProcess);
    internal void RemoveLastLiveThreadId(IDebugProcess2 pProcess);
    internal virtual void UpdateLiveContext(IDebugProcess2 pProcess, IDebugThread2 pThread);
    internal void SearchTimerEvent(object source, ElapsedEventArgs args);
    internal void MainThreadSearchAction();
    internal void UpdateData();
    internal virtual bool UpdateDebugContext(IDebugProcess2 pProcess, IDebugThread2 pThread);
    internal bool SwitchToLoggerThread(int loggerThreadId);
    protected IHistoricalDebuggingFrame GetClosestHistoricalFrame(IDebugProcess2 pProcess, IDebugTimeContext100 currentTimeContext, int loggerThreadIdWhenInHistoricalMode);
    internal virtual void UpdateTimeContext(IDebugProcess2 pProcess, IDebugThread2 pThread, IHistoricalDebuggingFrame frame);
    internal bool SetLaunchContext(IDebugProcess2 process, IDebugThread2 pThread, IDebugTimeContext100 timeContext);
    internal TreeDataManager GetCurrentTreeDataManager();
    internal TreeDataManager GetTreeDataManagerForThread(int loggerThreadId);
    internal TraceEventQueryManager GetTraceEventQuery(FilterNode query, TRACEEVENTQUERY_CREATION_FLAG flag);
    internal IDebugCallTreeStepper100 GetCurrentStepper();
    private TreeDataManager GetTreeDataManager(IDebugProcess2 process, int loggerTid);
    internal void Reset();
    internal bool RetrieveAndSetTimeContext(IHistoricalDebuggingFrame frame, int loggerTid);
    internal bool FindAndSetToCorrespondingTimeContext(IDebugTimeContext100 timeContext, int loggerTid);
    internal int FindClosestFunctionCallProperty(IDebugTimeContext100 timeContext, int loggerTid, IDebugProperty3& debugProperty, String& language);
    internal void SetToTimeContextofSearchResult(UInt32 searchId, UInt32 resultId, Int64& timestamp, bool SetTC);
    internal IDebugCodeContext3 GetCodeContextOfNode(ulong nodeId);
    public sealed virtual IList`1<IEventCategoryItem> GetDiagnosticEventCategories();
    public sealed virtual string GetEventCategoryNameById(string categoryId);
    internal IHistoricalThreadProperties GetHistoricalThreadInfoByOsThreadId(int threadId, long ordinal);
    internal List`1<IHistoricalThreadProperties> FetchThreadsForCurrentProcess();
    internal bool GetNotifyPointDataForFrame(IHistoricalDebuggingFrame frame, NP_INSTALL_REQUEST[] bindInfo, String& methodId);
    private void InvalidateLiveEvent();
    internal void SetLiveEvent(TraceEventInfo liveEvent);
    internal bool IsLiveEvent(IHistoricalDebuggingFrame frame);
    internal bool get_IsLiveEventSet();
    internal void EnsureSettingLiveEvent();
    protected IDebugTimeContext100 GetCurrentTimeContextFromProcess(IDebugProcess2 process);
    internal static bool AreProcessesDifferent(IDebugProcess2 process1, IDebugProcess2 process2);
    internal bool IsCurrentProcessStopped();
    private string GetTreeMgrCacheKey(IDebugProcess2 process, int loggerTid);
    private bool IsThreadEqualToCurrentThread(UInt32 threadId);
    private bool TrySetTimeContext(IDebugTimeContext100 timeContext, IHistoricalDebuggingFrame currentFrame, int loggerTid);
    private TraceEventInfo GetLiveEvent();
    private void UpdateDataManagers();
    private void UpdateDataManagers(TreeDataManager treeDataManager);
    private void PopulateThreadsDictionary(IEnumerable`1<IHistoricalThreadProperties> threads);
    private void PopulateCategoriesDictionary(IEnumerable`1<EventCategoryInfo> categories);
    private void InvalidateData();
    protected void ClearPreviousTimeContextData();
    internal bool StepOverStatusCheck();
    internal bool ExecuteStepOver();
    internal bool StepBackStatusCheck();
    internal bool ExecuteStepBack();
    internal bool StepIntoStatusCheck();
    internal void ExecuteStepInto();
    internal bool StepOutStatusCheck();
    private bool CanIntelliTraceRunCurrentProcess();
    internal void ExecuteStepOut();
    internal bool GoToLiveModeStatusCheck();
    internal bool GoToLiveMode();
    internal bool StepBackwardStatusCheck();
    internal bool FindDestinationForStepBack(IDebugTimeContext100& destination);
    internal bool FindDestinationForStepOver(IDebugTimeContext100& destination, Boolean& isLive);
    internal bool StepToTimeContext(IDebugTimeContext100 destination);
    internal static bool IsSameTimeStamp(IDebugTimeContext100 timeContext1, IDebugTimeContext100 timeContext2);
    internal static List`1<IHistoricalThreadProperties> GetHistoricalThreads(IDebugProcess2 process);
    internal static int MapLiveTidToLoggerTid(IDebugProcess2 process, int osThreadId);
    internal static int MapOsTidToLoggerTid(IDebugProcess2 process, int osThreadId, long ordinal);
    private static int GetLoggerThreadId(IDebugProcess2 process, IDebugThread2 thread, IDebugTimeContext100 timeContext);
    private static int GetLoggerThreadId(IDebugTimeContext100 timecontext);
    private sealed virtual override bool Microsoft.VisualStudio.Diagnostics.HistoricalDebugging.IHistoricalDebuggingNavigator.GetGoToPreviousEventStatus();
    private sealed virtual override bool Microsoft.VisualStudio.Diagnostics.HistoricalDebugging.IHistoricalDebuggingNavigator.GetGoToNextEventStatus();
    private sealed virtual override void Microsoft.VisualStudio.Diagnostics.HistoricalDebugging.IHistoricalDebuggingNavigator.GoToPreviousEvent();
    private sealed virtual override void Microsoft.VisualStudio.Diagnostics.HistoricalDebugging.IHistoricalDebuggingNavigator.GoToNextEvent();
    private sealed virtual override IHistoricalDebuggingFrame Microsoft.VisualStudio.Diagnostics.HistoricalDebugging.IHistoricalDebuggingNavigator.GetCurrentFrame();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITraceStepper.get_CanStepInto();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITraceStepper.StepInto();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITraceStepper.get_CanStepOut();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITraceStepper.StepOut();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITraceStepper.get_CanStepOver();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITraceStepper.StepOver();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITraceStepper.get_InLiveMode();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITraceStepper.RetrieveAndSetTimeContext(IHistoricalDebuggingFrame frame, int loggerTid);
    private sealed virtual override int Microsoft.IntelliTrace.Internal.ITraceStepper.get_CurrentLoggerThreadID();
    public sealed virtual IDebugProperty3 GetTreeNodeDebugPropertyAtOrdinal(int threadId, ulong ordinal);
    public sealed virtual int FindClosestFunctionCallPropertyToOrdinal(ulong ordinal, int threadId, IDebugProperty3& debugProperty, String& languageName);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.ICategoryNameProvider {
    public abstract virtual string GetEventCategoryNameById(string category);
    public abstract virtual IList`1<IEventCategoryItem> GetDiagnosticEventCategories();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.ICollectionPlanStore {
    public abstract virtual _CollectionPlan GetCollectionPlan(UInt32 processId);
    public abstract virtual Task`1<_CollectionPlan> GetCollectionPlanAsync(UInt32 processId);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.ICommandUpdateService {
    public abstract virtual void UpdateCommands();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IEventCategoryItem {
    public string CategoryId { get; }
    public string CategoryName { get; }
    public abstract virtual string get_CategoryId();
    public abstract virtual string get_CategoryName();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IEventViewModel {
    public string Name { get; }
    public string CategoryName { get; }
    public string Category { get; }
    public string ThreadName { get; }
    public string Description { get; }
    public int ThreadId { get; }
    public Nullable`1<DateTime> EventTime { get; }
    public Nullable`1<Guid> ActivityId { get; }
    public bool IsDescriptionActionable { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_CategoryName();
    public abstract virtual string get_Category();
    public abstract virtual string get_ThreadName();
    public abstract virtual string get_Description();
    public abstract virtual int get_ThreadId();
    public abstract virtual Nullable`1<DateTime> get_EventTime();
    public abstract virtual Nullable`1<Guid> get_ActivityId();
    public abstract virtual bool get_IsDescriptionActionable();
    public abstract virtual bool ExecuteDescriptionAction();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IHistoricalDebugActions {
    public abstract virtual void LaunchDebugging(long ordinal, int loggerThreadId, WebRequestInfo request);
    public abstract virtual void LaunchHistoricalDebugSession(DisplayThreadData jumpThread);
    public abstract virtual void LaunchDebugging(long ordinal, int loggerThreadId, WebRequestFilterInfo webRequestFilterInfo);
    public abstract virtual void LaunchHistoricalDebugSession(DisplayExceptionData exceptionData);
    public abstract virtual void LaunchHistoricalDebugSession(DisplayTestStep testStep);
    public abstract virtual void SetOverrideShowExternalEvents();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IHistoricalThreadProperties {
    public UInt32 Id { get; }
    public string Name { get; }
    public int LoggerThreadId { get; }
    public long StartOrdinal { get; }
    public long EndOrdinal { get; }
    public abstract virtual UInt32 get_Id();
    public abstract virtual string get_Name();
    public abstract virtual int get_LoggerThreadId();
    public abstract virtual long get_StartOrdinal();
    public abstract virtual long get_EndOrdinal();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider {
    public bool IsPackageInNonErrorBreakOrRunMode { get; }
    public bool IsPackageInBreakMode { get; }
    public bool IsInHistoricalMode { get; }
    public bool IsTraceLogLoaded { get; }
    public bool IsLiveDebuggingWithIntelliTrace { get; }
    public bool IsIntelliTraceAttach { get; }
    public bool IsInstrumentationEnabled { get; }
    public abstract virtual bool get_IsPackageInNonErrorBreakOrRunMode();
    public abstract virtual bool get_IsPackageInBreakMode();
    public abstract virtual bool get_IsInHistoricalMode();
    public abstract virtual bool get_IsTraceLogLoaded();
    public abstract virtual bool get_IsLiveDebuggingWithIntelliTrace();
    public abstract virtual bool get_IsIntelliTraceAttach();
    public abstract virtual bool get_IsInstrumentationEnabled();
    public abstract virtual bool TryGetDebuggerOption(DEBUGGER_OPTIONS option, UInt32& value);
    public abstract virtual void SwitchToHistoricalMode(bool isInHistoricalMode, bool isLiveDebugging);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IInternetSecurityManager {
    public abstract virtual bool IsTrustedPath(string path);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.ILogPlaybackTelemetryService {
    public abstract virtual void OnLogOpening(LogOpeningInfo info);
}
internal class Microsoft.VisualStudio.TraceLogPackage.InfoBar.HistoricalModeInfoBarManager : InfoBarManager {
    private Func`1<bool> _gotoLiveModeAction;
    protected IVsInfoBar InfoBarModel { get; }
    protected bool InfoBarEnabled { get; }
    public HistoricalModeInfoBarManager(IVsUIShell4 uiShell, IVsInfoBarUIFactory infoBarUIFactory, IServiceProvider serviceProvider, Func`1<bool> gotoLiveModeAction);
    protected virtual IVsInfoBar get_InfoBarModel();
    protected virtual bool get_InfoBarEnabled();
    private IVsInfoBarTextSpan[] GetTextSpansForBar();
    private IVsInfoBarActionItem[] GetActionsForBar();
    private void ReturnToLiveMode();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.InfoBar.InfoBarManager : object {
    private static Guid NoSourceToolWindowGuid;
    private static Guid CodeMapEditorGuid;
    private IVsUIShell4 _uiShell;
    private IVsInfoBarUIFactory _infoBarUIFactory;
    private Dictionary`2<IVsWindowFrame, InfoBarWrapper> _infoBars;
    private Dictionary`2<object, Action> _eventHandlers;
    private bool _showInfoBar;
    private bool _isLiveDebugging;
    private bool _isClosedByUser;
    private UInt32 _frameEventsCookie;
    protected IDiagnosticTelemetryService _telemetryService;
    [CompilerGeneratedAttribute]
private bool <IsTemporaryDismiss>k__BackingField;
    protected bool IsTemporaryDismiss { get; }
    protected bool IsLiveDebugging { get; }
    protected IVsInfoBar InfoBarModel { get; }
    protected bool InfoBarEnabled { get; }
    protected InfoBarManager(IVsUIShell4 uiShell, IVsInfoBarUIFactory infoBarUIFactory, IServiceProvider serviceProvider, bool isTemporaryDismiss);
    private static InfoBarManager();
    [CompilerGeneratedAttribute]
protected bool get_IsTemporaryDismiss();
    protected bool get_IsLiveDebugging();
    protected abstract virtual IVsInfoBar get_InfoBarModel();
    protected abstract virtual bool get_InfoBarEnabled();
    public void ShowInfoBar(bool isShow, bool isLiveDebugging);
    protected void AddEventHandler(object moniker, Action handler);
    public sealed virtual void OnActiveFrameChanged(IVsWindowFrame oldFrame, IVsWindowFrame newFrame);
    public sealed virtual void OnFrameCreated(IVsWindowFrame frame);
    public sealed virtual void OnFrameDestroyed(IVsWindowFrame frame);
    public sealed virtual void OnFrameIsOnScreenChanged(IVsWindowFrame frame, bool newIsOnScreen);
    public sealed virtual void OnFrameIsVisibleChanged(IVsWindowFrame frame, bool newIsVisible);
    protected void RefreshInfoBar();
    private void ShowInfoBarImpl(bool isShow, bool isRefreshing);
    private static bool IsFrameOnScreen(IVsWindowFrame frame);
    private static bool IsWindowFrameSupported(IVsWindowFrame frame);
    private static bool IsToolWindowAllowed(IVsWindowFrame frame, Guid[] allowedWindowGuids);
    private static bool IsDocumentWindowAllowed(IVsWindowFrame frame, Guid[] allowedWindowGuids);
    private void AdviseWindowFrameEvents();
    private void UnadviseWindowFrameEvents();
    private void AddInfoBarToExistingFrames();
    private bool AddInfoBar(IVsWindowFrame frame);
    private bool CloseInfoBar(IVsWindowFrame frame);
    protected virtual void InfoBarShown();
    protected virtual void InfoBarHidden(bool isRefreshing);
    protected virtual void InfoBarClosedByUser();
    private void CloseAllInfoBars();
    private void InfoBarActionItemCallBack(IVsInfoBarActionItem actionItem);
    private void InfoBarCloseCallBack();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TraceLogPackage.InfoBar.InfoBarResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InfoBarHyperLinkMessage { get; }
    internal static string InfoBarMessage { get; }
    internal static string SnapshotAcknowledge { get; }
    internal static string SnapshotAutoDisabledPrompt { get; }
    internal static string SnapshotPrompt { get; }
    internal static string SnapshotPromptEnable { get; }
    internal static string SnapshotPromptMoreInfoLinkMessage { get; }
    internal static string SnapshotPromptReenable { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InfoBarHyperLinkMessage();
    internal static string get_InfoBarMessage();
    internal static string get_SnapshotAcknowledge();
    internal static string get_SnapshotAutoDisabledPrompt();
    internal static string get_SnapshotPrompt();
    internal static string get_SnapshotPromptEnable();
    internal static string get_SnapshotPromptMoreInfoLinkMessage();
    internal static string get_SnapshotPromptReenable();
}
internal class Microsoft.VisualStudio.TraceLogPackage.InfoBar.InfoBarWrapper : object {
    private IVsInfoBarHost _host;
    private IVsInfoBarUIElement _uiElement;
    private Action`1<IVsInfoBarActionItem> _actionCallback;
    private Action _closeCallback;
    private UInt32 _eventCookie;
    [CompilerGeneratedAttribute]
private bool <IsInfoBarVisible>k__BackingField;
    public bool IsInfoBarVisible { get; private set; }
    public InfoBarWrapper(IVsInfoBarUIElement uiElement, IVsInfoBarHost host, Action`1<IVsInfoBarActionItem> actionCallback, Action closeCallBack);
    [CompilerGeneratedAttribute]
public bool get_IsInfoBarVisible();
    [CompilerGeneratedAttribute]
private void set_IsInfoBarVisible(bool value);
    public void Show();
    public void Close();
    public sealed virtual void OnClosed(IVsInfoBarUIElement infoBarUIElement);
    public sealed virtual void OnActionItemClicked(IVsInfoBarUIElement infoBarUIElement, IVsInfoBarActionItem actionItem);
}
internal class Microsoft.VisualStudio.TraceLogPackage.InfoBar.NativeSnapshotInfoBarManager : SnapshotInfoBarManager {
    protected bool InfoBarEnabledForToolsOption { get; }
    public NativeSnapshotInfoBarManager(IVsUIShell4 uiShell, IVsInfoBarUIFactory infoBarUIFactory, IServiceProvider serviceProvider, ToolsOptionManager toolsOptionManager, bool isTemporaryDismiss);
    protected virtual bool get_InfoBarEnabledForToolsOption();
    protected virtual IVsInfoBarTextSpan[] GetTextSpansForBar();
    protected virtual IVsInfoBarActionItem[] GetActionsForBar();
    private bool ShouldShowSpecialPromotionInfoBar();
    protected virtual void InfoBarHidden(bool isRefreshing);
    protected virtual void InfoBarClosedByUser();
}
internal class Microsoft.VisualStudio.TraceLogPackage.InfoBar.SnapshotInfoBarManager : InfoBarManager {
    private Version _windowsVersion;
    private Version Windows10RS1BuildVersion;
    private static string SnapshotPromptMoreInfoLink;
    [CompilerGeneratedAttribute]
private bool <AcknowledgeSnapshotEnable>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolsOptionManager <ToolsOptionManager>k__BackingField;
    private Version WindowsVersion { get; }
    private bool OSSupportsSnapshots { get; }
    protected bool AcknowledgeSnapshotEnable { get; protected set; }
    protected IVsInfoBar InfoBarModel { get; }
    protected bool InfoBarEnabled { get; }
    protected bool InfoBarEnabledForToolsOption { get; }
    protected ToolsOptionManager ToolsOptionManager { get; }
    public SnapshotInfoBarManager(IVsUIShell4 uiShell, IVsInfoBarUIFactory infoBarUIFactory, IServiceProvider serviceProvider, ToolsOptionManager toolsOptionManager, bool isTemporaryDismiss);
    private Version get_WindowsVersion();
    private bool get_OSSupportsSnapshots();
    [CompilerGeneratedAttribute]
protected bool get_AcknowledgeSnapshotEnable();
    [CompilerGeneratedAttribute]
protected void set_AcknowledgeSnapshotEnable(bool value);
    protected virtual IVsInfoBar get_InfoBarModel();
    protected virtual bool get_InfoBarEnabled();
    protected virtual bool get_InfoBarEnabledForToolsOption();
    [CompilerGeneratedAttribute]
protected ToolsOptionManager get_ToolsOptionManager();
    protected virtual IVsInfoBarTextSpan[] GetTextSpansForBar();
    protected virtual IVsInfoBarActionItem[] GetActionsForBar();
    protected virtual void InfoBarShown();
    protected virtual void InfoBarClosedByUser();
    private void GetSnapshotInfo();
    private void EnableSnapshotMode();
    private void ReenableSnapshotMode();
    private void DismissSnapshotMode();
    private void EnableSnapshot();
}
internal class Microsoft.VisualStudio.TraceLogPackage.IntelliTraceActionEvent : VersioningActionDiagnosticEvent {
    private DiagnosticData _diagnosticEventData;
    private IOrdinalPropertyProvider _ordinalPropertyProvider;
    private string _methodName;
    private IEnumerable`1<IDataElement> _collectedValues;
    private IEnumerable`1<IDataElement> _parameterValues;
    private IDataElement _thisValue;
    private bool _isCallInformationLoaded;
    public string MethodName { get; }
    public string Category { get; }
    public string LongDescription { get; }
    public string ShortDescription { get; }
    public IEnumerable`1<IDataElement> CollectedValues { get; }
    public IEnumerable`1<IDataElement> ParameterValues { get; }
    public IDataElement ThisValue { get; }
    private bool IsAvicodeEvent { get; }
    private bool IsIntelliTraceEvent { get; }
    public IntelliTraceActionEvent(DiagnosticData diagnosticEventData, DataProvider dataProvider, IOrdinalPropertyProvider ordinalPropertyProvider);
    public virtual string get_MethodName();
    public virtual string get_Category();
    public virtual string get_LongDescription();
    public virtual string get_ShortDescription();
    public virtual IEnumerable`1<IDataElement> get_CollectedValues();
    public virtual IEnumerable`1<IDataElement> get_ParameterValues();
    public virtual IDataElement get_ThisValue();
    private void EnsureCallInformationLoaded();
    private bool get_IsAvicodeEvent();
    private bool get_IsIntelliTraceEvent();
}
internal class Microsoft.VisualStudio.TraceLogPackage.IntelliTraceEditorFactoryChooserService : object {
    public sealed virtual int ChooseEditorFactory(string pszMkDocument, IVsHierarchy pHier, UInt32 itemid, IntPtr punkDocDataExisting, Guid& rguidLogicalView, Guid& pguidEditorTypeActual, Guid& pguidLogicalViewActual);
    private static void RecordTelemetryDataOnNotSupported(FileVersionInfo fileVersion);
}
internal class Microsoft.VisualStudio.TraceLogPackage.InternetSecurityManager : object {
    private IInternetSecurityManager securityManager;
    private static UInt32 PUAF_NOUI;
    private static UInt32 URLPOLICY_MASK_PERMISSIONS;
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    public bool IsTrustedForAutomaticDownload(Uri url);
    public bool IsTrustedForAutomaticDownload(string path);
    public UrlPermission GetUrlPermission(Uri url, UrlAction action);
    private UInt32 GetUrlPolicy(Uri url, UrlAction action);
    private Uri GetAbsoluteUrl(string path);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IOrdinalPropertyProvider {
    public abstract virtual IDebugProperty3 GetTreeNodeDebugPropertyAtOrdinal(int thread, ulong ordinal);
    public abstract virtual int FindClosestFunctionCallPropertyToOrdinal(ulong ordinal, int threadId, IDebugProperty3& debugProperty, String& languageName);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.ISDMDebugEventProvider {
    [CompilerGeneratedAttribute]
public abstract virtual void add_DebugEvent(DebugEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DebugEvent(DebugEventHandler value);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IStepBackwardService {
    public abstract virtual void OnBreakEvent();
    public abstract virtual void OnIntelliTraceEvent();
    public abstract virtual void OnUserCodeEvent();
    public abstract virtual void StepBackward();
    public abstract virtual void StepBackwardStatus(Boolean& isVisible, Boolean& isEnabled);
    public abstract virtual void StepForward();
    public abstract virtual void StepForwardStatus(Boolean& isVisible, Boolean& isEnabled);
    public abstract virtual void GoToLiveMode();
    public abstract virtual void GoToLiveModeStatus(Boolean& isVisible, Boolean& isEnabled);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.IToolsOptionTelemetryService {
    public abstract virtual void OnDisableIntelliTrace();
    public abstract virtual void OnEnableIntelliTraceWithEvents();
    public abstract virtual void OnEnableIntelliTraceWithSnapshots();
    public abstract virtual void OnEnableIntelliTraceWithCalls();
    public abstract virtual void OnIntelliTraceSnapshotOnException(Nullable`1<bool> isEnabled, Nullable`1<int> maxNumber);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.ITraceLogDocumentProvider {
    public bool IsClosed { get; }
    public TraceLog TraceLog { get; }
    public IntelliTraceFile TraceLogFile { get; }
    public RefCountingDisposer RefCountingDisposer { get; }
    public abstract virtual bool get_IsClosed();
    public abstract virtual void CloseDocumentsOnFailure();
    public abstract virtual void SignalDocumentLoaded();
    public abstract virtual TraceLog get_TraceLog();
    public abstract virtual IntelliTraceFile get_TraceLogFile();
    public abstract virtual RefCountingDisposer get_RefCountingDisposer();
    public abstract virtual IDisposable AcquireResourceDelayDisposer();
}
internal class Microsoft.VisualStudio.TraceLogPackage.LiveRegionListView : ListView {
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void RaiseLiveRegionChangedEvent();
}
internal class Microsoft.VisualStudio.TraceLogPackage.LiveRegionListViewAutomationPeer : ListViewAutomationPeer {
    public LiveRegionListViewAutomationPeer(ListView owner);
    public sealed virtual IRawElementProviderSimple GetProvider();
    protected virtual string GetClassNameCore();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.LocalAddressResolver : object {
    public static bool IsLocal(string hostNameOrAddress);
}
internal class Microsoft.VisualStudio.TraceLogPackage.LogOpeningInfo : object {
    [CompilerGeneratedAttribute]
private FileVersionInfo <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LaunchType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLogTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCallsInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExceptionData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPerformanceData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBuildInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAzureData>k__BackingField;
    public FileVersionInfo FileVersion { get; public set; }
    public long FileSize { get; public set; }
    public string LaunchType { get; public set; }
    public string Target { get; public set; }
    public bool IsLogTruncated { get; public set; }
    public bool HasCallsInfo { get; public set; }
    public bool HasExceptionData { get; public set; }
    public bool HasPerformanceData { get; public set; }
    public bool HasBuildInfo { get; public set; }
    public bool HasAzureData { get; public set; }
    [CompilerGeneratedAttribute]
public FileVersionInfo get_FileVersion();
    [CompilerGeneratedAttribute]
public void set_FileVersion(FileVersionInfo value);
    [CompilerGeneratedAttribute]
public long get_FileSize();
    [CompilerGeneratedAttribute]
public void set_FileSize(long value);
    [CompilerGeneratedAttribute]
public string get_LaunchType();
    [CompilerGeneratedAttribute]
public void set_LaunchType(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLogTruncated();
    [CompilerGeneratedAttribute]
public void set_IsLogTruncated(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasCallsInfo();
    [CompilerGeneratedAttribute]
public void set_HasCallsInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasExceptionData();
    [CompilerGeneratedAttribute]
public void set_HasExceptionData(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasPerformanceData();
    [CompilerGeneratedAttribute]
public void set_HasPerformanceData(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasBuildInfo();
    [CompilerGeneratedAttribute]
public void set_HasBuildInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasAzureData();
    [CompilerGeneratedAttribute]
public void set_HasAzureData(bool value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.MVVM.DelegateCommand : object {
    private Action`1<object> _execute;
    private Predicate`1<object> _canExecute;
    private Action _beforeExecuteCommand;
    internal DelegateCommand(Action`1<object> execute);
    internal DelegateCommand(Action`1<object> execute, Predicate`1<object> canExecute);
    internal DelegateCommand(Action`1<object> execute, Predicate`1<object> canExecute, Action beforeExecuteCommand);
    public sealed virtual bool CanExecute(object parameter);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public sealed virtual void Execute(object parameter);
}
internal class Microsoft.VisualStudio.TraceLogPackage.MVVM.MenuCommandViewModel : TraceLogViewModelBase {
    private bool _checked;
    private bool _enabled;
    private bool _supported;
    private bool _visible;
    private string _text;
    private MenuCommand _command;
    public bool Checked { get; public set; }
    public bool Enabled { get; public set; }
    public bool Supported { get; public set; }
    public bool Visible { get; public set; }
    public string Text { get; public set; }
    public bool get_Checked();
    public void set_Checked(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_Supported();
    public void set_Supported(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public string get_Text();
    public void set_Text(string value);
    public void Connect(MenuCommand command);
    public void Disconnect();
    private void CommandChanged(object sender, EventArgs e);
    private void UpdateCommand();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.NativeMethods : object {
    public static UInt32 RPC_E_CANTCALLOUT_INEXTERNALCALL;
    public static int WM_GETDLGCODE;
    public static int WM_SETFOCUS;
    public static int WM_SYSCOLORCHANGE;
    public static int WM_SETFONT;
    public static int WM_THEMECHANGED;
    public static int WM_KEYDOWN;
    public static int DLGC_WANTARROWS;
    public static int DLGC_WANTTAB;
    public static int DLGC_WANTCHARS;
    public static int DLGC_WANTALLKEYS;
    public static int GA_ROOT;
    public static int HCF_HIGHCONTRASTON;
    public static int SPI_GETHIGHCONTRAST;
    public static int MAX_PATH;
    public static int MONITOR_DEFAULTTONEAREST;
    public static int CoRegisterMessageFilter(HandleRef newFilter, IntPtr& oldMsgFilter);
    public static IntPtr GetAncestor(IntPtr hWnd, int flags);
    public static IntPtr SetFocus(IntPtr hWnd);
    public static IntPtr GetNextDlgTabItem(IntPtr hDlg, IntPtr hCtl, bool bPrevious);
    public static int PackageFamilyNameFromFullName(string packageFullName, UInt32& packageFamilyNameLength, StringBuilder packageFamilyName);
    public static int DeriveAppContainerSidFromAppContainerName(string pszAppContainerName, IntPtr& psidAppContainerSid);
    public static IntPtr FreeSid(IntPtr pSid);
    public static IntPtr CreateRectRgn(int x1, int y1, int x2, int y2);
    public static bool DeleteObject(IntPtr hObject);
    public static int SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool bRedraw);
    public static bool SystemParametersInfo(int nAction, int nParam, HIGHCONTRAST& pParam, int ignore);
    internal static IntPtr MonitorFromPoint(POINT pt, int flags);
    internal static bool GetMonitorInfo(IntPtr hMonitor, MONITORINFO& monitorInfo);
    public static bool GetPerformanceInfo(PERFORMANCE_INFORMATION& pPerformanceInformation, int cb);
}
internal class Microsoft.VisualStudio.TraceLogPackage.NullChildFrameRetriever : ChildFrameRetriever {
    internal static NullChildFrameRetriever _instance;
    internal int RowCount { get; }
    internal IHistoricalDebuggingFrame Parent { get; }
    internal bool LowestIndexReached { get; }
    internal bool HighestIndexReached { get; }
    private static NullChildFrameRetriever();
    internal virtual int get_RowCount();
    internal virtual IHistoricalDebuggingFrame get_Parent();
    internal virtual bool get_LowestIndexReached();
    internal virtual bool get_HighestIndexReached();
    internal virtual int Prefetch(ChildFrameRetrieverOrigin origin);
    internal virtual IHistoricalDebuggingFrame RetrieveFrame(int contentDataGridIndex);
    internal virtual int IndexOfFrame(IHistoricalDebuggingFrame frame);
    public virtual void Dispose(bool disposing);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.PackageHelper : object {
    internal static string DebugBreakAllCommand;
    internal static string DebugLocalsCommand;
    internal static string DiagnosticToolsShowCommand;
    private static char BackSlash;
    internal static DBGMODE ConvertDbgMode(dbgDebugMode mode);
    internal static void InvokeDteCommand(DTE dte, string command, string args);
    internal static bool IsNotifyPointBreakPoint(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsNotifyPointExceptionCaught(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsNotifyPointExceptionThrown(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsNotifyPointStep(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsNotifyPointFromCP(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsFunctionCall(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsFunctionEnter(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsFunctionExit(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsNotifyPoint(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsNotifyPointException(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsTransitionNode(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsHighBandwidthEvent(PROTEUS_EVENT_TYPE eventType);
    internal static bool IsRoot(PROTEUS_EVENT_TYPE eventType);
    internal static PROTEUS_EVENT_TYPE GetEventType(PROTEUS_EVENT_TYPE eventType);
    internal static IDebugThread2 GetThread(IDebugProcess2 pProcess, UInt32 osThreadId);
    internal static string FindFileWithOpenFileDialog(string fileName);
    internal static void OpenFile(string filepath);
    public static string GetSaveFile(string strInitPath, string title, string filter, bool fOverwritePrompt);
    public static IntPtr GetOwnerWindowHandle();
    private static string StringFromArray(Char[] rgch);
    public static string GetDescriptionWithUTCOffset(string descriptionWithUtcOffset, string descriptionWithNegativeUtcOffset, TimeSpan timeZoneOffset, Nullable`1<DateTime> dateTime);
    public static IList`1<IDataElement> ConvertPropertyChildrenToDataElementList(IDebugProperty2 debugProperty, Guid propertyGuid, string languageName);
    public static int AddEnumChildrenToDataElement(IEnumDebugPropertyInfo2 enumPropInfo, UInt32 enumPropCount, Guid propertyGuid, string languageName, IList`1<IDataElement> valueList);
    private static int GetPropertyEnumChildrenInfo(IDebugProperty2 debugProperty, Guid propertyGuid, IEnumDebugPropertyInfo2& enumPropInfo, UInt32& enumPropCount);
    public static CLR_VERSION GetClrVersion(ClrVersionAttachOptions msgClrVersion);
}
internal class Microsoft.VisualStudio.TraceLogPackage.PerformanceDataSummary : object {
    [CompilerGeneratedAttribute]
private TraceLogSummary <LogSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <TraceLog>k__BackingField;
    [CompilerGeneratedAttribute]
private IntelliTraceFile <LogFile>k__BackingField;
    private TraceLogSummary LogSummary { get; private set; }
    private TraceLog TraceLog { get; private set; }
    private IntelliTraceFile LogFile { get; private set; }
    [CompilerGeneratedAttribute]
private TraceLogSummary get_LogSummary();
    [CompilerGeneratedAttribute]
private void set_LogSummary(TraceLogSummary value);
    [CompilerGeneratedAttribute]
private TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
private void set_TraceLog(TraceLog value);
    [CompilerGeneratedAttribute]
private IntelliTraceFile get_LogFile();
    [CompilerGeneratedAttribute]
private void set_LogFile(IntelliTraceFile value);
    public void Initialize(TraceLogSummary logSummary, TraceLog traceLog, IntelliTraceFile logFile);
    internal void OpenDetailsDocument(PerformanceDataSummaryViewModelBase summaryViewModel);
    private void SetCallTrees(PerformanceDataViewModel perfViewModel);
    internal IAccessList`1<T> GetAccessList(Predicate`1<T> perfDataFilter, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    private IAccessList`1<PerformanceDataEvent> GetUngroupedAccessList(Predicate`1<PerformanceDataEvent> perfDataFilter, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    private IAccessList`1<PerformanceEventDescriptionGroup> GetGroupedAccessList(Predicate`1<PerformanceEventDescriptionGroup> perfDataFilter, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal void UpdateFilter(IAccessList`1<T> perfDataList, bool preserveSelection);
    private static void CheckPerformanceDataType();
    internal void ClearFilter(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal void UpdateColumnSort(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
}
internal class Microsoft.VisualStudio.TraceLogPackage.PerProcessCache`1 : object {
    private static int ProcessStartupTime;
    private static int CacheSizeLimit;
    private bool _isDebugging;
    private ConcurrentDictionary`2<Guid, ProcessCache<T>> _cache;
    private IDictionary`2<Guid, Timer> _processStartupTimers;
    private void TraceLogPackage_ShellModeChanged(object sender, DBGMODE newMode);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.PerProcessCache`1/<GetNextItem>d__8")]
public Task`1<T> GetNextItem(CancellationToken cancellationToken, Guid uniqueProcessId);
    public void AddItem(Guid uniqueProcessId, T item);
    public void CleanCacheForProcess(Guid uniqueProcessId);
    private ProcessCache<T> EnsureProcessCacheExistsForConsumer(Guid uniqueProcessId);
    private ProcessCache<T> EnsureProcessCacheExistsForProducer(Guid uniqueProcessId);
    private void EnsureProcessTimerStopped(Guid uniqueProcessId);
    private void EnsureProcessTimerInitialized(Guid uniqueProcessId);
    private void OnProcessTimer(Guid uniqueProcessId);
    private ProcessCache<T> EnsureProcessCacheExists(Guid uniqueProcessId);
    private void CleanUpCacheForUniqueProcessId(Guid uniqueProcessId);
    public int GetDropCountForUniqueProcessId(Guid uniqueProcessId);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TraceLogPackage.ProcessCentricHistoricalDataManager : HistoricalDataManager {
    private ComObjectWrapper`1<IDebugProcess2> _lastProcess;
    internal bool SetHistoricalProcess(UInt32 pid, string packageFullName);
    private void SetHistoricalProcess(IDebugProcess2 pProcess, string packageFullName);
    internal virtual bool UpdateDebugContext(IDebugProcess2 pProcess, IDebugThread2 pThread);
    internal virtual void UpdateLiveContext(IDebugProcess2 pProcess, IDebugThread2 pThread);
    internal virtual void UpdateTimeContext(IDebugProcess2 pProcess, IDebugThread2 pThread, IHistoricalDebuggingFrame frame);
    private int GetCurrentThreadForProcess(IDebugProcess2 pProcess, IDebugThread2& pThread, UInt32& threadId);
    private void SetCollectionPlan(IDebugProcess2 pProcess, string packageFullName);
    private static string GetUniqueDebugTargetIdentifier(UInt32 pid);
}
internal class Microsoft.VisualStudio.TraceLogPackage.ProcessLoadCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDebugProcess2 <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugProgram2 <Program>k__BackingField;
    public IDebugProcess2 Process { get; private set; }
    public IDebugProgram2 Program { get; private set; }
    public ProcessLoadCompleteEventArgs(IDebugProcess2 process, IDebugProgram2 program);
    [CompilerGeneratedAttribute]
public IDebugProcess2 get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(IDebugProcess2 value);
    [CompilerGeneratedAttribute]
public IDebugProgram2 get_Program();
    [CompilerGeneratedAttribute]
private void set_Program(IDebugProgram2 value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.ProcessProperties : object {
    private Dictionary`2<string, object> _props;
    private ComObjectWrapper`1<IDebugProcess2> _currentProcess;
    private ComObjectWrapper`1<IDebugTraceSettings100> _traceSettings;
    private IDebugProcess2 CurrentProcess { get; }
    public IDebugTraceSettings100 TraceSettings { get; }
    public ProcessProperties(IDebugProcess2 pProcess);
    private IDebugProcess2 get_CurrentProcess();
    public IDebugTraceSettings100 get_TraceSettings();
    private static bool HasSearchQueryTransport(IDebugProcess2 process);
    internal static bool IsAtleastOneProcessInstrumented();
    internal static bool IsIntelliTraceEnabled(IDebugTraceSettings100 traceSettings);
    private static bool IsIntelliTraceAttached(IDebugProcess2 process);
    private static string GetTraceLoggerName(IDebugTraceSettings100 traceSettings);
    private static bool IsInstrumentationEnabled(IDebugProcess2 process, IDebugTraceSettings100 traceSettings);
    private static bool IsTraceDebuggerInErrorState(IDebugTraceSettings100 traceSettings);
    private static bool IsProcessX86(IDebugProcess2 process);
    private static bool IsProcessRunningNativeEngine(IDebugProcess2 process);
    private static bool IsProcessRunningScriptEngine(IDebugProcess2 process);
    private static bool IsProcessRunningSpecifiedEngine(IDebugProcess2 process, Guid engineGuidToCheck);
    public static IList`1<Guid> ProcessDebugEngineFilter(IDebugProcess2 process);
    public bool IsCurrentProcessRunningNativeEngine();
    public bool IsCurrentProcessRunningScriptEngine();
    public bool IsCurrentProcessX86();
    public bool IsCurrentProcessTraceSettingsInErrorState();
    public sealed virtual bool IsInstrumentationEnabledForCurrentProcess();
    public sealed virtual bool IsIntelliTraceEnabledForCurrentProcess();
    public bool IsIntelliTraceAttachedToCurrentProcess();
    public string GetTraceLoggerNameForCurrentProcess();
    public bool CurrentProcessHasSearchQueryTransport();
    public IList`1<Guid> CurrentProcessDebugEngineFilter();
    private static IDebugTraceSettings100 GetTraceSettings(IDebugProcess2 process);
    public sealed virtual void Dispose();
    private void Clear();
    private T CacheProperty(string key, Func`1<T> initializer);
    private static TValue SetDefault(Dictionary`2<TKey, TValue> dict, TKey key, Func`1<TValue> initializer);
    [CompilerGeneratedAttribute]
private bool <IsCurrentProcessRunningNativeEngine>b__20_0();
    [CompilerGeneratedAttribute]
private bool <IsCurrentProcessRunningScriptEngine>b__21_0();
    [CompilerGeneratedAttribute]
private bool <IsCurrentProcessX86>b__22_0();
    [CompilerGeneratedAttribute]
private bool <IsCurrentProcessTraceSettingsInErrorState>b__23_0();
    [CompilerGeneratedAttribute]
private bool <IsInstrumentationEnabledForCurrentProcess>b__24_0();
    [CompilerGeneratedAttribute]
private bool <IsIntelliTraceEnabledForCurrentProcess>b__25_0();
    [CompilerGeneratedAttribute]
private bool <IsIntelliTraceAttachedToCurrentProcess>b__26_0();
    [CompilerGeneratedAttribute]
private string <GetTraceLoggerNameForCurrentProcess>b__27_0();
    [CompilerGeneratedAttribute]
private bool <CurrentProcessHasSearchQueryTransport>b__28_0();
    [CompilerGeneratedAttribute]
private IList`1<Guid> <CurrentProcessDebugEngineFilter>b__29_0();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.Progression.GraphNodeExtensions : object {
    [ExtensionAttribute]
public static string GetAssemblyName(GraphNodeId id);
    [ExtensionAttribute]
public static string GetClassName(GraphNodeId id);
    [ExtensionAttribute]
public static string GetNamespaceName(GraphNodeId id);
    [ExtensionAttribute]
public static T GetNestedValueByName(GraphNodeId node, GraphNodeIdName idName, T defaultValue);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.ProgressionGraphs.GraphNodeHelper : object {
    private static Action GetNestedTypes;
    private static HashSet`1<GraphCategory> _methodCategories;
    private static HashSet`1<GraphCategory> _typeCategories;
    private static string _interopServicesNamespaceName;
    private static string _dllImportAttributeTypeName;
    internal static HashSet`1<GraphCategory> MethodCategories { get; }
    private static GraphNodeHelper();
    internal static HashSet`1<GraphCategory> get_MethodCategories();
    internal static GraphNode GetMethodNodeFromFileLocation(IActionManager actionManager, Uri fileName, int line, int column);
    [ExtensionAttribute]
private static void BeginSyncExecuteAction(IActionManager actionManager, ActionContext actionContext);
    internal static TypeNode GetContainingTypeNodeFromMethodNode(GraphNode methodNode);
    private static TypeNode GetContainingTypeHelper(GraphNode node);
    internal static GraphNode GetReturnTypeNode(IActionManager actionManager, GraphNode methodNode);
    internal static IEnumerable`1<TypeNode> GetTypeNodesFromFile(IActionManager actionManager, Uri projectFileName, Uri fileName);
    internal static IEnumerable`1<GraphNode> GetMethodNodesFromTypeNode(IActionManager actionManager, GraphNode typeNode);
    internal static SourceLocation GetMethodNodeSourceLocation(GraphNode methodNode);
    internal static bool TryGetSourceLocation(GraphNode node, SourceLocation& sourceLocation);
    internal static void HydrateNodeProperties(IActionManager actionManager, GraphNode node);
    internal static ITokenizedConstruct GetNodeToolTip(IActionManager actionManager, GraphNode graphNode);
    internal static IEnumerable`1<ClassNode> GetAttributesFromMethodNode(IActionManager actionManager, GraphNode methodNode);
    internal static bool CanMethodContainCode(IActionManager actionManager, GraphNode methodNode);
    private static void HandleGetNestedTypes(ActionContext context);
    private static ActionContext CreateActionContext(Graph graph, IActionManager actionManager, GraphNode inputNode, Action action);
    private static ActionContext CreateActionContext(Graph graph, IActionManager actionManager, IEnumerable`1<GraphNode> inputNodes, Action action);
    private static ActionContext CreateActionContext(Graph graph, IActionManager actionManager, Action action);
    private static ActionContext CreateChildActionContext(ActionContext source, GraphNode inputNode, Action action);
    private static void PropagateActionHandlerErrors(ActionContext sourceContext, ActionContext destinationContext);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.ProgressionGraphs.MethodIdFactory : object {
    private static char _nameSeparator;
    private static char _argumentSeparator;
    private static char _parameterListStart;
    private static char _parameterListEnd;
    private static char _arrayStart;
    private static char _arrayEnd;
    private static char _arrayRankSeparator;
    private static string _arrayLowerBound;
    private static char _byReferenceSpecifier;
    private static char _indirectionSpecifier;
    private static char _returnTypeSeparator;
    private static char _nestedTypeSeparator;
    private static char _aritySpecifier;
    private static char _genericArgumentListStart;
    private static char _genericArgumentListEnd;
    private static char _genericParameterReferenceSpecifier;
    private static string _genericFunctionParameterReferenceSpecifier;
    private static string _voidTypeName;
    internal static string GetTypeName(GraphNode methodNode);
    internal static string GetMethodName(GraphNode methodNode, bool includeParameterTypes);
    internal static string GetMethodId(GraphNode methodNode, GraphNode returnTypeNode);
    private static string GetParameterListFromBuilder(CodeQualifiedIdentifierBuilder builder);
    private static string GetTypeNameFromBuilder(CodeQualifiedIdentifierBuilder codeBuilder);
    private static string GetMethodNameFromBuilder(CodeQualifiedIdentifierMemberBuilder memberBuilder);
    private static string GetTypeNameFromTypeBuilder(CodeQualifiedIdentifierTypeBuilder typeBuilder, string containingNamespaceName);
    private static string GetArraySpecificationFromBuilder(CodeQualifiedIdentifierTypeBuilder typeBuilder);
    private static string GetGenericArgumentsFromBuilder(CodeQualifiedIdentifierTypeBuilder typeBuilder);
    private static string GetGenericParameterIndexFromBuilder(CodeQualifiedIdentifierTypeBuilder typeBuilder, string relativeGenericParameterIndex);
}
internal class Microsoft.VisualStudio.TraceLogPackage.ProteusSourceIntegration : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<ProteusMarginItem, ProteusMarginItem> <MarginItemsDictionary>k__BackingField;
    private IList`1<ProteusMarginInstance> _proteusMargins;
    private bool _updatingUI;
    private bool _needUpdateUI;
    private DispatcherTimer _dispatcherTimer;
    private Dispatcher _dispatcher;
    private bool _updateRequested;
    private static int TimeContextChangeMillisecondDelay;
    private static int UpdateRetryMax;
    private int _updateRetryCount;
    private static int MaxStackSize;
    private UInt32 _rdtEventCookie;
    private IVsWindowFrame _codeWindow;
    public Dictionary`2<ProteusMarginItem, ProteusMarginItem> MarginItemsDictionary { get; private set; }
    internal bool UpdatingUI { get; }
    private Dictionary`2<ProteusMarginItem, ProteusMarginItem> Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.MarginItemsDictionary { get; }
    private bool Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.UpdatingUI { get; }
    public bool RegisterProteusMargin(ProteusMarginInstance newMargin);
    public void UpdateProteusMarginChecksum(ProteusDocumentChecksum newChecksum, ProteusMarginInstance updateInstance);
    public void UnregisterProteusMargin(ProteusMarginInstance removeMargin);
    public void DisableMargins();
    private void OnTimeContextChanged(object sender, EventArgs e);
    private void OnModeChanged(object sender, DebugModeChangedEventArgs e);
    [CompilerGeneratedAttribute]
public Dictionary`2<ProteusMarginItem, ProteusMarginItem> get_MarginItemsDictionary();
    [CompilerGeneratedAttribute]
private void set_MarginItemsDictionary(Dictionary`2<ProteusMarginItem, ProteusMarginItem> value);
    internal bool get_UpdatingUI();
    internal void UpdateSourceControlUI();
    private void UpdateMarginItems();
    private void ReorderItemsForLineOneOrTwo(ProteusMarginItem currentLocation);
    private ProteusMarginItem GetItemTypeFromList(ProteusMarginItemType itemType);
    private void ClearItemsFromMargins();
    private void AddItemsToMargins();
    private void AddItemsToMargin(ProteusMarginInstance margin);
    private static void ResolveProteusItemConflicts(ProteusMarginInstance margin, ProteusMarginItem item);
    private void InitializeSourceIntegration();
    private void DispatcherTick();
    private ProteusMarginItem GetCurrentLocationMarkerHistorical();
    private ProteusMarginItem GetCurrentLocationMarkerLive();
    private bool AddMarginItemToList(ProteusMarginItem marginItem);
    private ProteusMarginItem SetCurrentLocationMarker();
    private void SetSeekMarkers(ProteusMarginItem currentLocation);
    private void SetJumpOutMarker(ProteusMarginItem currentLocation);
    private void SetLiveModeMarker(ProteusMarginItem currentLocation);
    private void SetStackMarkers(ProteusMarginItem currentLocation);
    private void SetStackMarkersHistorical(ProteusMarginItem currentLocation);
    private bool EnsureMarginsCreated();
    private void AdviseRunningDocTableEvents();
    private void UnadviseRunningDocTableEvents();
    public sealed virtual int OnAfterAttributeChange(UInt32 docCookie, UInt32 grfAttribs);
    public sealed virtual int OnAfterDocumentWindowHide(UInt32 docCookie, IVsWindowFrame pFrame);
    public sealed virtual int OnAfterFirstDocumentLock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    public sealed virtual int OnAfterSave(UInt32 docCookie);
    public sealed virtual int OnBeforeDocumentWindowShow(UInt32 docCookie, int fFirstShow, IVsWindowFrame pFrame);
    public sealed virtual int OnBeforeLastDocumentUnlock(UInt32 docCookie, UInt32 dwRDTLockType, UInt32 dwReadLocksRemaining, UInt32 dwEditLocksRemaining);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.DisableMargins();
    private sealed virtual override Dictionary`2<ProteusMarginItem, ProteusMarginItem> Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.get_MarginItemsDictionary();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.RegisterProteusMargin(ProteusMarginInstance newMargin);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.UnregisterProteusMargin(ProteusMarginInstance removeMargin);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.UpdateProteusMarginChecksum(ProteusDocumentChecksum newChecksum, ProteusMarginInstance updateInstance);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.UpdateSourceControlUI();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.IProteusSourceIntegration.get_UpdatingUI();
    [CompilerGeneratedAttribute]
private void <InitializeSourceIntegration>b__21_0(object <p0>, EventArgs <p1>);
}
internal class Microsoft.VisualStudio.TraceLogPackage.RectPlacementCalloutBorder : CodeLensCalloutBorder {
    public static DependencyProperty CalloutTargetRectangleProperty;
    public Nullable`1<Rect> CalloutTargetRectangle { get; public set; }
    protected Point CalloutTargetLocation { get; }
    private static RectPlacementCalloutBorder();
    public Nullable`1<Rect> get_CalloutTargetRectangle();
    public void set_CalloutTargetRectangle(Nullable`1<Rect> value);
    protected virtual Point get_CalloutTargetLocation();
}
internal class Microsoft.VisualStudio.TraceLogPackage.RefCountingDisposer : Disposer {
    private int _refCount;
    public int IncreaseRefCount();
    public int DecreaseRefCount();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TraceLogPackage.RequestSummary : object {
    private object _webRequestDataLock;
    private Queue`1<RequestViewModel> _requestDetailsQueue;
    [CompilerGeneratedAttribute]
private BackgroundWorker <RequestDetailsWorker>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLogSummary <LogSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <TraceLog>k__BackingField;
    [CompilerGeneratedAttribute]
private IntelliTraceFile <LogFile>k__BackingField;
    private BackgroundWorker RequestDetailsWorker { get; private set; }
    private TraceLogSummary LogSummary { get; private set; }
    private TraceLog TraceLog { get; private set; }
    private IntelliTraceFile LogFile { get; private set; }
    [CompilerGeneratedAttribute]
private BackgroundWorker get_RequestDetailsWorker();
    [CompilerGeneratedAttribute]
private void set_RequestDetailsWorker(BackgroundWorker value);
    [CompilerGeneratedAttribute]
private TraceLogSummary get_LogSummary();
    [CompilerGeneratedAttribute]
private void set_LogSummary(TraceLogSummary value);
    [CompilerGeneratedAttribute]
private TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
private void set_TraceLog(TraceLog value);
    [CompilerGeneratedAttribute]
private IntelliTraceFile get_LogFile();
    [CompilerGeneratedAttribute]
private void set_LogFile(IntelliTraceFile value);
    public void Initialize(TraceLogSummary logSummary, TraceLog traceLog, IntelliTraceFile logFile);
    public void Close();
    internal void OpenDetailsDocument(RequestViewModel requestVM);
    private void SetEventData(RequestViewModel request);
    private void GetEventData_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e);
    private void GetEventData_DoWork(object sender, DoWorkEventArgs e);
    private IList`1<IEventData> GetEventData(IntelliTraceProcess process, IBidiEnum`1<NPEventData> items);
    internal void UpdateColumnSort(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal IAccessList`1<WebRequestEvent> GetAccessList(Predicate`1<WebRequestEvent> requestFilter, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal void UpdateFilter(IAccessList`1<WebRequestEvent> requestList);
    internal void ClearFilter(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
}
internal class Microsoft.VisualStudio.TraceLogPackage.RowCountChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RowCountChangedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Location <LocationChange>k__BackingField;
    internal int RowCountChangedBy { get; private set; }
    internal Location LocationChange { get; private set; }
    internal RowCountChangedEventArgs(int rowCountChangedBy, Location loc);
    [CompilerGeneratedAttribute]
internal int get_RowCountChangedBy();
    [CompilerGeneratedAttribute]
private void set_RowCountChangedBy(int value);
    [CompilerGeneratedAttribute]
internal Location get_LocationChange();
    [CompilerGeneratedAttribute]
private void set_LocationChange(Location value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.ScopedRefCountingDisposer : object {
    private RefCountingDisposer _refCountingDisposer;
    public ScopedRefCountingDisposer(RefCountingDisposer refCountingDisposer);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[GuidAttribute("7317943f-89f0-45c0-a2f6-3eabab1571af")]
[ComVisibleAttribute("True")]
internal interface Microsoft.VisualStudio.TraceLogPackage.SCustomDebuggerEventHandlerService {
}
public class Microsoft.VisualStudio.TraceLogPackage.SearchDataContext : object {
    [CompilerGeneratedAttribute]
private string <SearchString>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <NextCount>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PreviousCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OnResult>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private SearchDispatcher _searchDispatcher;
    private SearchCommand _searchCommand;
    private SearchResults _searchResults;
    private long _currentLocationTimestamp;
    private TextSpan _currentResultSpan;
    private LocationQuery _locationQuery;
    private bool _cancelled;
    private string _functionName;
    private IList`1<IHistoricalSearchMargin> _activeSearchMargins;
    private object _usingResultsLock;
    public string SearchString { get; private set; }
    public bool NextEnabled { get; }
    public bool PreviousEnabled { get; }
    public string AutomationName { get; }
    public string CurrentLocation { get; }
    public string TotalCount { get; }
    public UInt32 NextCount { get; private set; }
    public UInt32 PreviousCount { get; private set; }
    public bool OnResult { get; private set; }
    public bool HasActiveMargins { get; }
    internal void SetDispatcher(SearchDispatcher dispatcher);
    internal void ExecuteSearch(SearchCommand sc, long currentLocationTimestamp, LocationQuery query, string functionName);
    internal void CancelSearch();
    internal void SearchHistoryMethod();
    internal void SearchHistoryLine();
    [CompilerGeneratedAttribute]
public string get_SearchString();
    [CompilerGeneratedAttribute]
private void set_SearchString(string value);
    public bool get_NextEnabled();
    public bool get_PreviousEnabled();
    public string get_AutomationName();
    public string get_CurrentLocation();
    public string get_TotalCount();
    [CompilerGeneratedAttribute]
public UInt32 get_NextCount();
    [CompilerGeneratedAttribute]
private void set_NextCount(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PreviousCount();
    [CompilerGeneratedAttribute]
private void set_PreviousCount(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_OnResult();
    [CompilerGeneratedAttribute]
private void set_OnResult(bool value);
    public bool get_HasActiveMargins();
    private string CreateSearchString(LocationQuery location, string functionName, bool searchComplete);
    internal void HandleNewResults(SearchResults sr);
    private void UpdateUIElements();
    private void MovePrevious();
    private void MoveNext();
    private void MoveFirst();
    private void MoveLast();
    private bool GetCurrentMethodLocationContext(String& filename, String& name, Int32& line, Int32& col, Int32& lineend, Int32& colend);
    private bool GetSourceLocationContext(String& filename, Int32& line, Int32& col);
    internal void NavigateToSearchMargin();
    private IList`1<IHistoricalSearchMargin> GetAllSearchMargins();
    private void PerformHistorySearch(LocationQuery location, string functionName);
    private void RegisterMargin(IHistoricalSearchMargin searchMargin);
    private void DeregisterMargin(IHistoricalSearchMargin searchMargin);
    internal void SearchContextChanged(object sender, SearchContextChangedEventArgs e);
    private void SearchCancelled(object sender, EventArgs e);
    private void MarginClosed(object sender, EventArgs e);
    private void SearchMarginCreated(object sender, EventArgs e);
    private void TimeContextChanged(object sender, TimeContextChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void OnPropertyChanged(string name);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SearchDispatcher : ComMarshal {
    private IDebugSearchQueryTransport100 _searchQueryTransport;
    private SearchCommand _searchCommand;
    private int _hResult;
    private int _continue;
    private bool _searchComplete;
    private object _usingResultsLock;
    private SearchResults _results;
    private ProvideResultsDelegate _provideResults;
    public bool SearchComplete { get; }
    internal SearchDispatcher(IDebugSessionProcess100 histProc);
    public bool get_SearchComplete();
    private static void Start(object o);
    private void ContinueSearch();
    internal void StartSearch(SearchCommand searchCommand, ProvideResultsDelegate p);
    internal void CancelSearch();
    internal void GetFirstSearchResult(TextSpan span, long timestamp, UInt32& searchId, UInt32& resultId);
    internal void GetLastSearchResult(TextSpan span, long timestamp, UInt32& searchId, UInt32& resultId);
    internal void GetNextSearchResult(TextSpan span, long timestamp, UInt32& searchId, UInt32& resultId);
    internal void GetPrevSearchResult(TextSpan span, long timestamp, UInt32& searchId, UInt32& resultId);
    public sealed virtual int ProvideResults(UInt32 ctResultBytes, Byte[] pResults, Int32& pContinue);
    public void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static U GetService(IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static T GetService(IServiceProvider serviceProvider);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.SideLoadEeExpressions : object {
    private static string TelemetryObserverAssemblyBaseName;
    private static string TelemetryObserverCommonAssemblyName;
    private static string CoreSuffix;
    private static string InstallDirRegKeyValueName;
    private static string TelemetryObserverRegistrationTypeName;
    private static string TelemetryObserverRegistrationMethodName;
    private static string AssemblyFullNameFormat;
    private static UInt32 FuncEvalTimeoutMs;
    public static void ExecuteSideLoad(Guid processId, int threadId, IDiagnosticTelemetryService telemetryService);
    private static string GetAssemblyInstallPath();
    private static void AssemblyLoadComplete(IDiagnosticTelemetryService telemetryService, DkmLoadManagedAssemblyAsyncResult result);
}
internal static class Microsoft.VisualStudio.TraceLogPackage.SnapshotUtilities : object {
    private static Version Windows10RS1BuildVersion;
    private static Nullable`1<bool> _isSnapshotSupported;
    public static bool IsSnapshotSupported { get; }
    private static SnapshotUtilities();
    public static bool get_IsSnapshotSupported();
}
internal enum Microsoft.VisualStudio.TraceLogPackage.StatusCodes : Enum {
    public int value__;
    public static StatusCodes NotRequired;
    public static StatusCodes InProgress;
    public static StatusCodes Success;
    public static StatusCodes Warning;
    public static StatusCodes Error;
}
internal class Microsoft.VisualStudio.TraceLogPackage.StatusMessage : object {
    [CompilerGeneratedAttribute]
private StatusCodes <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageLinkText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageF1Keyword>k__BackingField;
    public StatusCodes Code { get; public set; }
    public string Message { get; public set; }
    public string MessageLinkText { get; public set; }
    public string MessageF1Keyword { get; public set; }
    public bool IsHyperLinkTextVisible { get; }
    [CompilerGeneratedAttribute]
public StatusCodes get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(StatusCodes value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_MessageLinkText();
    [CompilerGeneratedAttribute]
public void set_MessageLinkText(string value);
    [CompilerGeneratedAttribute]
public string get_MessageF1Keyword();
    [CompilerGeneratedAttribute]
public void set_MessageF1Keyword(string value);
    public bool get_IsHyperLinkTextVisible();
}
internal class Microsoft.VisualStudio.TraceLogPackage.StepBackwardService : object {
    private int _breakEventCount;
    private bool _hasIntelliTraceEvents;
    private bool _hasUserCodeEvents;
    private ToolsOptionManager _toolsOptionManager;
    private Lazy`1<DiagnosticTelemetryService> _debuggingTelemetryService;
    private HistoricalDataManager _historicalDataManager;
    private IIntelliTraceDebuggingStateProvider _intelliTraceDebuggingStateProvider;
    private bool _isSnapshotOptionEnabled;
    private bool _isInDebugMode;
    private bool _isInBreakMode;
    private bool _isDisposed;
    private IDebuggerInternal _debuggerInternal;
    private IVsUIShell4 _vsUIShell;
    private IServiceProvider _serviceProvider;
    private IVsInfoBarUIFactory _infoBarUIFactory;
    private IIntelliTraceSnapshotService _intelliTraceSnapshotService;
    private UInt32 _intelliTraceSnapshotServiceCookies;
    private ComObjectWrapper`1<IDebugProcess2> _currentProcess;
    private ProcessProperties _currentProcessProperties;
    private InfoBarManager _snapshotInfoBarManager;
    internal IDebugProcess2 CurrentProcess { get; internal set; }
    private ProcessProperties CurrentProcessProperties { get; }
    internal InfoBarManager SnapshotInfoBarManager { get; }
    public StepBackwardService(ToolsOptionManager toolsOptionManager, Lazy`1<DiagnosticTelemetryService> debuggingTelemetryService, HistoricalDataManager historicalDataManager, IIntelliTraceDebuggingStateProvider intelliTraceDebuggingStateProvider, IDebuggerInternal vsDebugger, IVsUIShell4 vsUIShell, IServiceProvider serviceProvider, IVsInfoBarUIFactory infoBarUIFactory, IIntelliTraceSnapshotService intelliTraceSnapshotService);
    internal IDebugProcess2 get_CurrentProcess();
    internal void set_CurrentProcess(IDebugProcess2 value);
    private ProcessProperties get_CurrentProcessProperties();
    internal InfoBarManager get_SnapshotInfoBarManager();
    public sealed virtual void Dispose();
    private void InvalidateStepBack();
    public sealed virtual void OnBreakEvent();
    public sealed virtual void OnIntelliTraceEvent();
    public sealed virtual void OnUserCodeEvent();
    public sealed virtual void StepBackward();
    public sealed virtual void StepBackwardStatus(Boolean& isVisible, Boolean& isEnabled);
    public sealed virtual void StepForward();
    public sealed virtual void StepForwardStatus(Boolean& isVisible, Boolean& isEnabled);
    public sealed virtual void GoToLiveMode();
    public sealed virtual void GoToLiveModeStatus(Boolean& isVisible, Boolean& isEnabled);
    private void StepBackwardOnIntelliTraceEvent();
    private void GetStepBackwardStatusOnIntelliTraceEvent(Boolean& isVisible, Boolean& isEnabled);
    private void StepForwardOnIntelliTraceEvent();
    private void GetStepForwardStatusOnIntelliTraceEvent(Boolean& isVisible, Boolean& isEnabled);
    private void GoToLiveModeOnIntelliTraceEvent();
    private void GetGoToLiveModeStatusOnIntelliTraceEvent(Boolean& isVisible, Boolean& isEnabled);
    private bool IsIntelliTraceAttachCurrentProcess();
    private bool CanStepOnIntelliTraceEvent();
    private bool CanShowInfoBar();
    private void OnDebugSessionCreate(object sender, EventArgs eventArgs);
    private void OnDebugSessionDestroy(object sender, EventArgs eventArgs);
    private void ThrowIfDisposed();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentFrameChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentProcessChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentProgramChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentStatementChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnCurrentThreadChange();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnEnterRunMode();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnModeChange(UInt32 NewDebugMode);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessCreate(IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessDeregister(IDebugCoreServer2 pServer, IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessDestroy(IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnProcessRegister(IDebugCoreServer2 pServer, IDebugProcess2 pProcess);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnSessionCreate(IDebugSession2 pSession);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnSessionDestroy(IDebugSession2 pSession);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnSetNextStatement();
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnShellModeChange(UInt32 newShellMode);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnThreadCreate(IDebugThread2 pThread);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnThreadDestroy(IDebugThread2 pThread);
    private sealed virtual override int Microsoft.VisualStudio.Debugger.Interop.Internal.IDebuggerInternalEvents.OnTimeContextChange();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.AccessListDataProvider`2 : object {
    private IAccessList`1<Y> _accessList;
    private Transform<T, Y> _transform;
    public int Count { get; }
    public AccessListDataProvider`2(IAccessList`1<Y> accessList, Transform<T, Y> transform);
    public sealed virtual int get_Count();
    public sealed virtual IList`1<T> GetRange(int startIndex, int count);
}
public class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.CallDurationViewControl : UserControl {
    private static string s_manifestPath;
    private static string s_basePath;
    private ScriptedControl _scriptedControl;
    private ScrollViewer _outerScrollViewer;
    private bool _isSearchForScrollViewerFinished;
    private bool _isWebViewSetup;
    private bool _isScriptedControlError;
    private ScrollableWindowsFormsHost _windowsFormsHost;
    private FrameworkElement _scriptedControlElement;
    internal Label slowestCallsNameLabel;
    internal ItemsControl slowestNodeList;
    internal Grid callDurationTreeGrid;
    private bool _contentLoaded;
    public void SlowestNodeContainerSizeChanged(object sender, SizeChangedEventArgs args);
    private void AdjustLastColumnSizeForItem(ItemContainerGenerator itemContainerGenerator, DataTemplate itemTemplate, object item);
    internal void ShowWebView(OleMenuCommandService focusCommandService, ScrollViewer outerScrollViewer);
    private void CallDurationTreeGrid_Loaded(object sender, RoutedEventArgs e);
    private void CallDurationTreeGrid_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e);
    private void TryFindAncestorScrollViewer();
    private void ScriptedControl_ControlReady(object sender, EventArgs e);
    private void ScriptedControl_Error(object sender, ScriptedBrowserErrorEventArgs e);
    private void ScriptedControlSetup();
    private void TrySetupWebView();
    private void WindowsFormsHost_SizeChanged(object sender, SizeChangedEventArgs e);
    internal void OnVsBroadcastMessage(object sender, VsBroadcastMsgEventArgs args);
    private void DownloadIEHyperlinkClicked(object sender, RoutedEventArgs e);
    public sealed virtual void Dispose();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.CallDurationViewModel : TraceLogViewModelBase {
    private GridDataAndExpandState`1<TimingDataGridRow> _stackFrameViewModel;
    private Dictionary`2<int, GridDataAndExpandState`1<ParameterGridRow>> _parameterViewModels;
    private IList`1<CallTreeFrame> _callFrameList;
    private IList`1<SlowestNodeRow> _slowestNodes;
    private bool _executionTreeSectionExpanded;
    private bool _isInitialized;
    private CallInfo _callInfo;
    private bool _isScriptedControlSetup;
    private bool _isWebViewVisible;
    private IWebViewInformationProvider _webViewInfoProvider;
    [CompilerGeneratedAttribute]
private Action`2<long, int> <LaunchDebuggingAction>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExpandItemEventArgs> ExpandItemInExecutionTreeInvoked;
    private SlowestNodeRow _selectedSlowestNode;
    internal Action`2<long, int> LaunchDebuggingAction { get; private set; }
    public bool HasSlowestNodes { get; }
    public IList`1<SlowestNodeRow> SlowestNodes { get; private set; }
    public SlowestNodeRow SelectedSlowestNode { get; private set; }
    public bool ExecutionTreeSectionExpanded { get; public set; }
    public bool IsScriptedControlSetup { get; public set; }
    public string UnsupportedIEHyperlinkTooltip { get; }
    public bool IsWebViewVisible { get; private set; }
    public CallDurationViewModel(IWebViewInformationProvider webViewInfoProvider);
    public CallDurationViewModel(CallInfo callInfo, Action`2<long, int> launchDebuggingAction, IWebViewInformationProvider webViewInfoProvider);
    [CompilerGeneratedAttribute]
internal Action`2<long, int> get_LaunchDebuggingAction();
    [CompilerGeneratedAttribute]
private void set_LaunchDebuggingAction(Action`2<long, int> value);
    [CompilerGeneratedAttribute]
internal void add_ExpandItemInExecutionTreeInvoked(EventHandler`1<ExpandItemEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ExpandItemInExecutionTreeInvoked(EventHandler`1<ExpandItemEventArgs> value);
    public void Init(CallInfo callInfo, Action`2<long, int> launchDebuggingAction);
    private void BuildStackFrames();
    public bool get_HasSlowestNodes();
    public IList`1<SlowestNodeRow> get_SlowestNodes();
    private void set_SlowestNodes(IList`1<SlowestNodeRow> value);
    public SlowestNodeRow get_SelectedSlowestNode();
    private void set_SelectedSlowestNode(SlowestNodeRow value);
    public bool get_ExecutionTreeSectionExpanded();
    public void set_ExecutionTreeSectionExpanded(bool value);
    public bool get_IsScriptedControlSetup();
    public void set_IsScriptedControlSetup(bool value);
    public string get_UnsupportedIEHyperlinkTooltip();
    public bool get_IsWebViewVisible();
    private void set_IsWebViewVisible(bool value);
    private bool GetIsWebViewVisible();
    public GridDataAndExpandState`1<TimingDataGridRow> GetStackFrames();
    public void StartDebugging(int dataIndex);
    public void ExecuteAction(int dataIndex, object actionContext);
    public void UpdateWebViewVisibility();
    public GridDataAndExpandState`1<ParameterGridRow> GetParameters(int dataIndex);
    public IDataElement GetParameterData(int dataIndex, string parameterName);
    private TimingDataGridRow GetRow(int dataIndex);
    private int SetParameterRowAndExpandState(IDataElement parameterData, GridDataAndExpandState`1<ParameterGridRow> result, int index);
    private void GetParameterActionableAndUIData(int dataIndex, IDataElement parameterData, Boolean& isActionable, String& tooltip);
    private void ExpandItemAction(SlowestNodeRow newSelectedNode, int dataIndex);
    private static bool IsHighContrastOn();
    internal static string FormatDateTime(Nullable`1<DateTime> dateTime);
    internal static string FormatTimeDuration(Nullable`1<double> time);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.CallDurationViewModelMarshaler : JsonPortMarshaler`1<CallDurationViewModel> {
    private EventHandler`1<ExpandItemEventArgs> _expandItemInExecutionTreeEventHandler;
    private EventHandler`1<EventArgs> _startDebugCurrentSelectionEventHandler;
    private UIElement _hostRootElement;
    public CallDurationViewModelMarshaler(CallDurationViewModel viewModel, UIElement hostRootElement);
    protected virtual void InitializeMarshaler();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private GridDataAndExpandState`1<TimingDataGridRow> <InitializeMarshaler>b__4_0();
    [CompilerGeneratedAttribute]
private void <InitializeMarshaler>b__4_1(int dataIndex);
    [CompilerGeneratedAttribute]
private GridDataAndExpandState`1<ParameterGridRow> <InitializeMarshaler>b__4_2(int rowIndex);
    [CompilerGeneratedAttribute]
private void <InitializeMarshaler>b__4_3(int dataIndex, string parameterName, double x, double y, double width, double height);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.CallInfo : object {
    private bool _isInitialized;
    private bool _isLightEvent;
    [CompilerGeneratedAttribute]
private List`1<CallTreeInfo> <CallTrees>k__BackingField;
    public List`1<CallTreeInfo> CallTrees { get; private set; }
    public CallInfo(bool isLightEvent);
    [CompilerGeneratedAttribute]
public List`1<CallTreeInfo> get_CallTrees();
    [CompilerGeneratedAttribute]
private void set_CallTrees(List`1<CallTreeInfo> value);
    public bool HasData();
    public void ResetCallTrees(IList`1<CallTreeNode> newTrees);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.CallTreeFrameActionEvent : VersioningActionDiagnosticEvent {
    private CallTreeFrame _frame;
    private IEnumerable`1<IDataElement> _collectedValues;
    private IEnumerable`1<IDataElement> _parameterValues;
    private bool _isThisValueInitialized;
    private IDataElement _thisValue;
    public string Category { get; }
    public string LongDescription { get; }
    public string ShortDescription { get; }
    public string MethodName { get; }
    public IEnumerable`1<IDataElement> CollectedValues { get; }
    public IEnumerable`1<IDataElement> ParameterValues { get; }
    public IDataElement ThisValue { get; }
    public CallTreeFrameActionEvent(CallTreeFrame frame, DataProvider dataProvider);
    public virtual string get_Category();
    public virtual string get_LongDescription();
    public virtual string get_ShortDescription();
    public virtual string get_MethodName();
    public virtual IEnumerable`1<IDataElement> get_CollectedValues();
    public virtual IEnumerable`1<IDataElement> get_ParameterValues();
    public virtual IDataElement get_ThisValue();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.CallTreeInfo : object {
    private bool _isLightEvent;
    [CompilerGeneratedAttribute]
private IList`1<CallTreeNode> <HighlightedNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private CallTreeNode <Root>k__BackingField;
    private IList`1<CallTreeNode> HighlightedNodes { get; private set; }
    public CallTreeNode Root { get; private set; }
    public CallTreeInfo(CallTreeNode root, bool isLightEvent);
    [CompilerGeneratedAttribute]
private IList`1<CallTreeNode> get_HighlightedNodes();
    [CompilerGeneratedAttribute]
private void set_HighlightedNodes(IList`1<CallTreeNode> value);
    [CompilerGeneratedAttribute]
public CallTreeNode get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(CallTreeNode value);
    public bool IsHighlighted(CallTreeNode node);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DataListViewModel`1 : TraceLogViewModelBase {
    private Action`1<T> _openDataDetailAction;
    private bool _hasData;
    private VirtualizedList`1<T> _dataList;
    private T _currentItem;
    private int _selectedIndex;
    private DelegateCommand _openDataDetailCommand;
    public bool HasData { get; private set; }
    public VirtualizedList`1<T> DataList { get; public set; }
    public T CurrentItem { get; public set; }
    public int SelectedIndex { get; public set; }
    public ICommand OpenDataDetailCommand { get; }
    public DataListViewModel`1(VirtualizedList`1<T> dataList, Action`1<T> openDataDetailAction);
    public DataListViewModel`1(VirtualizedList`1<T> dataList);
    public bool get_HasData();
    private void set_HasData(bool value);
    public VirtualizedList`1<T> get_DataList();
    public void set_DataList(VirtualizedList`1<T> value);
    public T get_CurrentItem();
    public void set_CurrentItem(T value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public ICommand get_OpenDataDetailCommand();
    internal void OpenDataDetail();
    internal bool CanOpenDataDetail();
    public void OpenSpecificDataDetail(T t);
    [CompilerGeneratedAttribute]
private void <get_OpenDataDetailCommand>b__21_0(object param);
    [CompilerGeneratedAttribute]
private bool <get_OpenDataDetailCommand>b__21_1(object param);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DetailsDocument : WindowPane {
    private PropertyChangedEventHandler _viewModelEventHandler;
    private IDisposable _delayDisposer;
    [CompilerGeneratedAttribute]
private INotifyPropertyChanged <ViewModel>k__BackingField;
    protected UserControl DetailsControl { get; }
    protected INotifyPropertyChanged ViewModel { get; protected set; }
    public object Content { get; }
    protected DetailsDocument(INotifyPropertyChanged viewModel, IDisposable delayDisposer);
    protected abstract virtual UserControl get_DetailsControl();
    [CompilerGeneratedAttribute]
protected INotifyPropertyChanged get_ViewModel();
    [CompilerGeneratedAttribute]
protected void set_ViewModel(INotifyPropertyChanged value);
    public virtual void InitializeDocument();
    private void HandleViewModelPropertyChanged(object sender, PropertyChangedEventArgs args);
    protected virtual void OnViewModelLoaded();
    public virtual object get_Content();
    protected virtual void Dispose(bool disposing);
    public sealed virtual int Close();
    public sealed virtual int GetGuidEditorType(Guid& pClassID);
    public sealed virtual int IsDocDataDirty(Int32& pfDirty);
    public sealed virtual int IsDocDataReloadable(Int32& pfReloadable);
    public sealed virtual int LoadDocData(string pszMkDocument);
    public sealed virtual int OnRegisterDocData(UInt32 docCookie, IVsHierarchy pHierNew, UInt32 itemidNew);
    public sealed virtual int ReloadDocData(UInt32 grfFlags);
    public sealed virtual int RenameDocData(UInt32 grfAttribs, IVsHierarchy pHierNew, UInt32 itemidNew, string pszMkDocumentNew);
    public sealed virtual int SaveDocData(VSSAVEFLAGS dwSave, String& pbstrMkDocumentNew, Int32& pfSaveCanceled);
    public sealed virtual int SetUntitledDocPath(string pszDocDataPath);
}
[GuidAttribute("50e58df5-adbf-4803-9893-3682ede3104f")]
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DetailsEditorFactory : object {
    private IServiceProvider _serviceProvider;
    private bool _isDisposed;
    public sealed virtual int Close();
    public sealed virtual int CreateEditorInstance(UInt32 grfCreateDoc, string pszMkDocument, string pszPhysicalView, IVsHierarchy pvHier, UInt32 itemid, IntPtr punkDocDataExisting, IntPtr& ppunkDocView, IntPtr& ppunkDocData, String& pbstrEditorCaption, Guid& pguidCmdUI, Int32& pgrfCDW);
    private DetailsDocument GetDetailsDocument(TraceLogDocument traceDocument);
    public sealed virtual int MapLogicalView(Guid& rguidLogicalView, String& pbstrPhysicalView);
    public sealed virtual int SetSite(IServiceProvider psp);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DisplayExceptionData : object {
    [CompilerGeneratedAttribute]
private int <OccurrenceCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMessageMultiLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormattedMessage>k__BackingField;
    private ObservableCollection`1<IntelliTraceStackFrame> _stackFrames;
    private String[] _stackFrameNames;
    [CompilerGeneratedAttribute]
private bool <IsStackLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStackTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgramSymbols <ProgramSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <TraceLog>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandle <EventHandle>k__BackingField;
    private Nullable`1<DateTime> _eventTime;
    public int OccurrenceCount { get; private set; }
    public string ExceptionType { get; private set; }
    public string Message { get; private set; }
    public bool IsMessageMultiLine { get; private set; }
    public string FormattedMessage { get; private set; }
    internal ObservableCollection`1<IntelliTraceStackFrame> StackFrames { get; }
    internal String[] StackFrameNames { get; private set; }
    internal bool IsStackLoaded { get; private set; }
    internal bool IsStackTruncated { get; private set; }
    internal ProgramSymbols ProgramSymbols { get; private set; }
    public int ThreadId { get; private set; }
    public long Ordinal { get; private set; }
    public Nullable`1<DateTime> EventTime { get; }
    internal TraceLog TraceLog { get; private set; }
    internal EventHandle EventHandle { get; private set; }
    internal DisplayExceptionData(TraceLog traceLog, DiagnosticEvent baseEvent, EventHandle eventHandle, int occurrenceCount, ProgramSymbols progSymbols);
    internal DisplayExceptionData(TraceLog traceLog, DiagnosticEvent baseEvent, EventHandle eventHandle, int occurrenceCount, ProgramSymbols progSymbols, DateTime baseTime, ulong initialPerformanceTime, ulong performanceFrequency);
    internal void SetStackFrames(DiagnosticEvent evt);
    [CompilerGeneratedAttribute]
public int get_OccurrenceCount();
    [CompilerGeneratedAttribute]
private void set_OccurrenceCount(int value);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMessageMultiLine();
    [CompilerGeneratedAttribute]
private void set_IsMessageMultiLine(bool value);
    [CompilerGeneratedAttribute]
public string get_FormattedMessage();
    [CompilerGeneratedAttribute]
private void set_FormattedMessage(string value);
    internal ObservableCollection`1<IntelliTraceStackFrame> get_StackFrames();
    internal String[] get_StackFrameNames();
    private void set_StackFrameNames(String[] value);
    [CompilerGeneratedAttribute]
internal bool get_IsStackLoaded();
    [CompilerGeneratedAttribute]
private void set_IsStackLoaded(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsStackTruncated();
    [CompilerGeneratedAttribute]
private void set_IsStackTruncated(bool value);
    [CompilerGeneratedAttribute]
internal ProgramSymbols get_ProgramSymbols();
    [CompilerGeneratedAttribute]
private void set_ProgramSymbols(ProgramSymbols value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
private void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public long get_Ordinal();
    [CompilerGeneratedAttribute]
private void set_Ordinal(long value);
    public Nullable`1<DateTime> get_EventTime();
    [CompilerGeneratedAttribute]
internal TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
private void set_TraceLog(TraceLog value);
    [CompilerGeneratedAttribute]
internal EventHandle get_EventHandle();
    [CompilerGeneratedAttribute]
private void set_EventHandle(EventHandle value);
    [CompilerGeneratedAttribute]
private string <get_StackFrameNames>b__28_0(IntelliTraceStackFrame t);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DisplayModuleData : object {
    private ModuleData _baseModule;
    public string Name { get; }
    public string Path { get; }
    public Guid ModuleId { get; }
    internal DisplayModuleData(ModuleData baseMod);
    public string get_Name();
    public string get_Path();
    public Guid get_ModuleId();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DisplayTestCase : object {
    [CompilerGeneratedAttribute]
private IList`1<DisplayTestStep> <TestSteps>k__BackingField;
    private string _testCaseName;
    private Guid _testCaseId;
    internal IList`1<DisplayTestStep> TestSteps { get; private set; }
    internal DisplayTestCase(string testCaseName, Guid testCaseId);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal IList`1<DisplayTestStep> get_TestSteps();
    [CompilerGeneratedAttribute]
private void set_TestSteps(IList`1<DisplayTestStep> value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DisplayTestSession : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, DisplayTestCase> <TestCases>k__BackingField;
    private Guid _sessionGuid;
    public int Id { get; internal set; }
    public Dictionary`2<Guid, DisplayTestCase> TestCases { get; private set; }
    internal DisplayTestSession(Guid sessionGuid);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Guid, DisplayTestCase> get_TestCases();
    [CompilerGeneratedAttribute]
private void set_TestCases(Dictionary`2<Guid, DisplayTestCase> value);
    public virtual string ToString();
    public sealed virtual int CompareTo(object obj);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DisplayTestStep : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndTime>k__BackingField;
    private TestStep _baseStep;
    private TestSession _testSession;
    private TestCase _testCase;
    public int Id { get; }
    public Nullable`1<DateTime> EndTime { get; private set; }
    public string StepDescription { get; }
    public Nullable`1<long> EndOrdinal { get; }
    public string TestCaseSessionName { get; }
    public string StepPassed { get; }
    internal DisplayTestStep(TestStep baseStep, TestCase tc, TestSession ts);
    internal DisplayTestStep(TestStep baseStep, DateTime baseTime, ulong initialPerformanceTime, ulong performanceFrequency, TestCase tc, TestSession ts);
    public int get_Id();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndTime();
    [CompilerGeneratedAttribute]
private void set_EndTime(Nullable`1<DateTime> value);
    public string get_StepDescription();
    public Nullable`1<long> get_EndOrdinal();
    public string get_TestCaseSessionName();
    public string get_StepPassed();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DisplayThreadData : object {
    private ThreadData _data;
    private Nullable`1<DateTime> _startTime;
    private Nullable`1<DateTime> _endTime;
    public int LoggerThreadId { get; }
    public int NativeThreadId { get; }
    public string Name { get; }
    public Nullable`1<DateTime> StartTime { get; }
    public Nullable`1<DateTime> EndTime { get; }
    internal DisplayThreadData(ThreadData data);
    public DisplayThreadData(ThreadData data, DateTime baseTime, ulong initialPerformanceTime, ulong performanceFrequency, DateTime fileLastModifiedTime);
    public int get_LoggerThreadId();
    public int get_NativeThreadId();
    public string get_Name();
    public Nullable`1<DateTime> get_StartTime();
    public Nullable`1<DateTime> get_EndTime();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ExpandItemEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <DataIndex>k__BackingField;
    public int DataIndex { get; private set; }
    public ExpandItemEventArgs(int dataIndex);
    [CompilerGeneratedAttribute]
public int get_DataIndex();
    [CompilerGeneratedAttribute]
private void set_DataIndex(int value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.FilterNameComparer : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.GridDataAndExpandState`1 : object {
    public static int UNSELECTED_DATA_INDEX;
    [CompilerGeneratedAttribute]
private IList`1<T> <RowViewModels>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<int> <ExpandStates>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedDataIndex>k__BackingField;
    public IList`1<T> RowViewModels { get; private set; }
    public IList`1<int> ExpandStates { get; private set; }
    public int SelectedDataIndex { get; public set; }
    public void Validate();
    [CompilerGeneratedAttribute]
public IList`1<T> get_RowViewModels();
    [CompilerGeneratedAttribute]
private void set_RowViewModels(IList`1<T> value);
    [CompilerGeneratedAttribute]
public IList`1<int> get_ExpandStates();
    [CompilerGeneratedAttribute]
private void set_ExpandStates(IList`1<int> value);
    [CompilerGeneratedAttribute]
public int get_SelectedDataIndex();
    [CompilerGeneratedAttribute]
public void set_SelectedDataIndex(int value);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ICallDurationViewHost {
    public CallDurationViewModel CallDurationViewModel { get; }
    public bool HasMalformedCallTree { get; }
    public abstract virtual CallDurationViewModel get_CallDurationViewModel();
    public abstract virtual bool get_HasMalformedCallTree();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.IEventData {
    public string Name { get; }
    public string CategoryName { get; }
    public string Category { get; }
    public string ThreadName { get; }
    public string Description { get; }
    public int ThreadId { get; }
    public long Ordinal { get; }
    public int LoggerThreadId { get; }
    public Nullable`1<DateTime> EventTime { get; }
    public TimeSpan TimeZoneOffset { get; }
    public Nullable`1<Guid> ActivityId { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_CategoryName();
    public abstract virtual string get_Category();
    public abstract virtual string get_ThreadName();
    public abstract virtual string get_Description();
    public abstract virtual int get_ThreadId();
    public abstract virtual long get_Ordinal();
    public abstract virtual int get_LoggerThreadId();
    public abstract virtual Nullable`1<DateTime> get_EventTime();
    public abstract virtual TimeSpan get_TimeZoneOffset();
    public abstract virtual Nullable`1<Guid> get_ActivityId();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.IGroupedPerformanceData {
    public string Description { get; }
    public Nullable`1<DateTime> LastHeavyEventTime { get; }
    public Nullable`1<DateTime> LastLightEventTime { get; }
    public UInt32 HeavyEventCount { get; }
    public UInt32 LightEventCount { get; }
    public TimeSpan TotalHeavyTime { get; }
    public TimeSpan LongestHeavyTime { get; }
    public TimeSpan TotalLightTime { get; }
    public TimeSpan LongestLightTime { get; }
    public abstract virtual IPerformanceData GetLastHeavyEventData();
    public abstract virtual IPerformanceData GetLastLightEventData();
    public abstract virtual IPerformanceData GetSlowestLightEventData();
    public abstract virtual IPerformanceData GetSlowestHeavyEventData();
    public abstract virtual string get_Description();
    public abstract virtual Nullable`1<DateTime> get_LastHeavyEventTime();
    public abstract virtual Nullable`1<DateTime> get_LastLightEventTime();
    public abstract virtual UInt32 get_HeavyEventCount();
    public abstract virtual UInt32 get_LightEventCount();
    public abstract virtual TimeSpan get_TotalHeavyTime();
    public abstract virtual TimeSpan get_LongestHeavyTime();
    public abstract virtual TimeSpan get_TotalLightTime();
    public abstract virtual TimeSpan get_LongestLightTime();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.IPerformanceData {
    public int PerformanceDataId { get; }
    public long ThreadStreamOffset { get; }
    public string Description { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public DateTime EventTime { get; }
    public TimeSpan TimeZoneOffset { get; }
    public IEnumerable`1<ScopedData> ScopedData { get; }
    public string Source { get; }
    public int AlertThreshold { get; }
    public string ApplicationPath { get; }
    public string Build { get; }
    public string Component { get; }
    public string ObjectUri { get; }
    public string UserHostAddress { get; }
    public bool IsLightEvent { get; }
    public abstract virtual int get_PerformanceDataId();
    public abstract virtual long get_ThreadStreamOffset();
    public abstract virtual string get_Description();
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    public abstract virtual DateTime get_EventTime();
    public abstract virtual TimeSpan get_TimeZoneOffset();
    public abstract virtual IEnumerable`1<ScopedData> get_ScopedData();
    public abstract virtual string get_Source();
    public abstract virtual int get_AlertThreshold();
    public abstract virtual string get_ApplicationPath();
    public abstract virtual string get_Build();
    public abstract virtual string get_Component();
    public abstract virtual string get_ObjectUri();
    public abstract virtual string get_UserHostAddress();
    public abstract virtual bool get_IsLightEvent();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.IPerformanceDataDetailsDocument {
    public int PerformanceDataId { get; }
    public abstract virtual int get_PerformanceDataId();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.IRequestData {
    public string TargetURL { get; }
    public string UserAgent { get; }
    public string RequestType { get; }
    public string ReturnCode { get; }
    public string ClientIP { get; }
    public IList`1<IEventData> Events { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public TimeSpan TimeZoneOffset { get; }
    public int RequestId { get; }
    public int SessionId { get; }
    public long ThreadStreamOffset { get; }
    public bool HasSharePointData { get; }
    public bool IsDurationDataSectionSupported { get; }
    public Nullable`1<Guid> ActivityId { get; }
    public abstract virtual string get_TargetURL();
    public abstract virtual string get_UserAgent();
    public abstract virtual string get_RequestType();
    public abstract virtual string get_ReturnCode();
    public abstract virtual string get_ClientIP();
    public abstract virtual IList`1<IEventData> get_Events();
    public abstract virtual DateTime get_StartTime();
    public abstract virtual DateTime get_EndTime();
    public abstract virtual TimeSpan get_TimeZoneOffset();
    public abstract virtual int get_RequestId();
    public abstract virtual int get_SessionId();
    public abstract virtual long get_ThreadStreamOffset();
    public abstract virtual bool get_HasSharePointData();
    public abstract virtual bool get_IsDurationDataSectionSupported();
    public abstract virtual Nullable`1<Guid> get_ActivityId();
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.IVirtualizedListDataProvider`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual IList`1<T> GetRange(int startIndex, int count);
}
internal interface Microsoft.VisualStudio.TraceLogPackage.SummaryPage.IWebViewInformationProvider {
    public FileVersionInfo IEProductVersion { get; }
    public abstract virtual FileVersionInfo get_IEProductVersion();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ParameterGridRow : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolTip>k__BackingField;
    public string Name { get; private set; }
    public string Type { get; private set; }
    public string Value { get; private set; }
    public bool HasAction { get; private set; }
    public string ToolTip { get; private set; }
    public ParameterGridRow(string name, string typeName, string value, bool supportsAction, string tooltip);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_HasAction();
    [CompilerGeneratedAttribute]
private void set_HasAction(bool value);
    [CompilerGeneratedAttribute]
public string get_ToolTip();
    [CompilerGeneratedAttribute]
private void set_ToolTip(string value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ParsedSearchString : object {
    private List`1<string> _plainText;
    private ListDictionary _structuredText;
    public List`1<string> PlainText { get; }
    public ParsedSearchString(String[] expectedKeys);
    public List`1<string> get_PlainText();
    public bool StructuredTextContains(string key);
    public void StructuredTextSet(string structuredTextKey, Tuple`2<string, string> structuredTextValue);
    public string StructuredTextGetValue(string key);
    public string StructuredTextGetRaw(string key);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.PerformanceDataDetailsControl : UserControl {
    private bool isSystemInfoSectionInitialized;
    private ScrollViewer _containingScrollViewer;
    internal PerformanceDataDetailsControl _performanceDataDetailsUserControl;
    internal Grid mainLayoutGrid;
    internal Grid detailsGrid;
    internal Grid wellKnownFieldsGrid;
    internal TextBlock durationTextBlock;
    internal TextBox durationTextBox;
    internal TextBlock eventTimeTextBlock;
    internal TextBox eventTimeTextBox;
    internal TextBlock eventSourceTextBlock;
    internal TextBox eventSourceTextBox;
    internal TextBlock buildTextBlock;
    internal TextBox buildTextBox;
    internal TextBlock alertThresholdTextBlock;
    internal TextBox alertThresholdTextBox;
    internal TextBlock objectUriTextBlock;
    internal TextBox objectUriTextBox;
    internal TextBlock applicationPathTextBlock;
    internal TextBox applicationPathTextBox;
    internal TextBlock userHostAddressTextBlock;
    internal TextBox userHostAddressTextBox;
    internal TextBlock componentTextBlock;
    internal TextBox componentTextBox;
    internal TextBlock SystemInfoSectionTextBlock;
    internal Grid systemInfoGrid;
    internal ItemsControl scopedDataItemsControl;
    internal StackPanel warningStackPanel;
    internal CallDurationViewControl callDurationView;
    private bool _contentLoaded;
    public PerformanceDataDetailsControl(ScrollViewer containingScrollViewer);
    private void SystemInfoGrid_Loaded(object sender, RoutedEventArgs e);
    public void SetSystemInfoGrid(PerformanceDataViewModel vm);
    public static void GenerateSystemInfoGrid(Grid grid, Dictionary`2<string, string> values, Style nameStyle, Style valueStyle);
    private void DetailsContainerSizeChanged(object sender, SizeChangedEventArgs args);
    internal void ShowWebView(OleMenuCommandService focusCommandService);
    public sealed virtual void Dispose();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.PerformanceDataDetailsDocument : DetailsDocument {
    private TraceLogMasterPage _masterPage;
    private TraceLogMasterPageController _masterPageController;
    private PerformanceDataDetailsControl _detailsControl;
    [CompilerGeneratedAttribute]
private IBuildInformationSource <BuildInformationSource>k__BackingField;
    public IBuildInformationSource BuildInformationSource { get; private set; }
    protected UserControl DetailsControl { get; }
    public int PerformanceDataId { get; }
    internal PerformanceDataDetailsDocument(IBuildInformationSource buildInformationSource, TraceLogMasterPageController masterPageController, PerformanceDataViewModel performanceDataViewModel, IDisposable delayDisposer);
    [CompilerGeneratedAttribute]
public IBuildInformationSource get_BuildInformationSource();
    [CompilerGeneratedAttribute]
private void set_BuildInformationSource(IBuildInformationSource value);
    protected virtual UserControl get_DetailsControl();
    public virtual void InitializeDocument();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnViewModelLoaded();
    public sealed virtual int get_PerformanceDataId();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.PerformanceDataSearchProvider : SearchProvider {
    private object _searchTaskLockObject;
    private PerformanceDataSearchTask _searchTask;
    [CompilerGeneratedAttribute]
private EventHandler SearchCancelled;
    public string SearchTooltip { get; }
    public string SearchStartTooltip { get; }
    public string SearchClearTooltip { get; }
    public string SearchWatermark { get; }
    public PerformanceDataSearchProvider(TraceLogSummaryPage parentPage);
    [CompilerGeneratedAttribute]
public void add_SearchCancelled(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SearchCancelled(EventHandler value);
    public void SearchByEventsOccurrence(bool hideLightEvents, bool groupByDescription, bool preserveSelection);
    private void SearchUngrouped(bool hideLightEvents, bool preserveSelection);
    private void SearchGrouped(bool hideLightEvents, bool preserveSelection);
    private bool IsFilterSame(bool hideLightEvents, bool groupByDescription);
    private string GetSearchTooltip();
    public virtual IVsSearchTask CreateSearch(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchCallback pSearchCallback);
    public virtual void ClearSearch();
    private void OnSearchStarted();
    private void OnSearchCompleted(object sender, EventArgs args);
    public virtual string get_SearchTooltip();
    public virtual string get_SearchStartTooltip();
    public virtual string get_SearchClearTooltip();
    public virtual string get_SearchWatermark();
    [CompilerGeneratedAttribute]
private void <OnSearchStarted>b__13_0();
    [CompilerGeneratedAttribute]
private void <OnSearchCompleted>b__14_0();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.PerformanceDataSearchTask : SearchTask {
    private bool _isManualSearch;
    private bool _isCancelled;
    private bool _hideLightEvents;
    private bool _preserveSelection;
    private bool _isGrouped;
    private ParsedSearchString _parsedSearchString;
    private static string DescriptionField;
    private static string EventSourceField;
    private static string OccurrenceField;
    protected ParsedSearchString SearchString { get; }
    private bool ContinueProcessing { get; }
    public PerformanceDataSearchTask(PerformanceDataSearchProvider provider, UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchCallback pSearchCallback, TraceLogSummaryPage parentPage, object searchLockObject);
    private static PerformanceDataSearchTask();
    protected virtual void RefreshList();
    private void DoRefresh(IAccessList`1<T> filteredList);
    private bool IsFilterSame();
    protected virtual ParsedSearchString get_SearchString();
    public void StartSearch(bool hideLightEvents, bool isGrouped, bool preserveSelection);
    private bool get_ContinueProcessing();
    private void OnCancelSearch(object sender, EventArgs args);
    private bool PerformanceEventTest(PerformanceDataEvent perfDataEvent);
    private bool GroupedPerformanceEventTest(PerformanceEventDescriptionGroup group);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.PerformanceDataViewModel : TraceLogViewModelBase {
    private IPerformanceData _perfData;
    private Action`2<long, int> _launchDebuggingAction;
    private LogSystemInfo _systemInfo;
    [CompilerGeneratedAttribute]
private string <FormattedDescription>k__BackingField;
    private string _eventTimeStringWithUTCOffset;
    private string _eventTimeString;
    private CallInfo _callInfo;
    private bool _eventDataLoaded;
    private Nullable`1<bool> _hasScopedData;
    private CallDurationViewModel _callDurationViewModel;
    private bool _hasMalformedCallTree;
    public string Description { get; }
    public string FormattedDescription { get; private set; }
    public string FormattedDuration { get; }
    public string EventTimeStringWithUTCOffset { get; }
    public string EventTimeString { get; }
    public string IsLightEventString { get; }
    public string IsLightEventStatusString { get; }
    public int PerformanceDataId { get; }
    public long ThreadStreamOffset { get; }
    public CallInfo CallInfo { get; }
    public bool EventDataLoaded { get; private set; }
    internal Action`2<long, int> LaunchDebuggingAction { get; }
    public IEnumerable`1<ScopedData> ScopedData { get; }
    public bool HasScopedData { get; }
    public LogSystemInfo SystemInfo { get; }
    public CallDurationViewModel CallDurationViewModel { get; }
    public bool HasMalformedCallTree { get; private set; }
    public string EventSource { get; }
    public int AlertThreshold { get; }
    public string ApplicationPath { get; }
    public string Build { get; }
    public string Component { get; }
    public bool IsLightEvent { get; }
    public string ObjectUri { get; }
    public string UserHostAddress { get; }
    public PerformanceDataViewModel(IPerformanceData perfData, LogSystemInfo systemInfo, Action`2<long, int> launchDebuggingAction);
    public string get_Description();
    [CompilerGeneratedAttribute]
public string get_FormattedDescription();
    [CompilerGeneratedAttribute]
private void set_FormattedDescription(string value);
    public string get_FormattedDuration();
    public string get_EventTimeStringWithUTCOffset();
    public string get_EventTimeString();
    public string get_IsLightEventString();
    internal static string GetIsLightEventString(bool isLightEvent);
    public string get_IsLightEventStatusString();
    public int get_PerformanceDataId();
    public long get_ThreadStreamOffset();
    public CallInfo get_CallInfo();
    internal void UpdateCallTree(IList`1<CallTreeNode> callTrees, bool isCallTreeMalformed);
    public bool get_EventDataLoaded();
    private void set_EventDataLoaded(bool value);
    internal Action`2<long, int> get_LaunchDebuggingAction();
    public IEnumerable`1<ScopedData> get_ScopedData();
    public bool get_HasScopedData();
    public LogSystemInfo get_SystemInfo();
    public sealed virtual CallDurationViewModel get_CallDurationViewModel();
    public sealed virtual bool get_HasMalformedCallTree();
    private void set_HasMalformedCallTree(bool value);
    public string get_EventSource();
    public int get_AlertThreshold();
    public string get_ApplicationPath();
    public string get_Build();
    public string get_Component();
    public bool get_IsLightEvent();
    public string get_ObjectUri();
    public string get_UserHostAddress();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.PerformanceEventDescriptionFormatter : object {
    [CompilerGeneratedAttribute]
private IntelliTraceProcess <Process>k__BackingField;
    private PerformanceDescriptionWeaver _weaver;
    private IntelliTraceProcess Process { get; private set; }
    private PerformanceDescriptionWeaver Weaver { get; }
    public PerformanceEventDescriptionFormatter(IntelliTraceProcess process);
    [CompilerGeneratedAttribute]
private IntelliTraceProcess get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(IntelliTraceProcess value);
    private PerformanceDescriptionWeaver get_Weaver();
    public string ReadDescription(PerformanceDataEvent perfEvent);
    public string GetDescription(PerformanceEventDescription descriptionEvents);
    private string GetDescriptionString(PerformanceEventDescriptionSegment events);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.Repositories.SummaryAnalysisRepository : object {
    public abstract virtual WebRequestData GetRequestForActivityId(Guid activityId);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.Repositories.TraceLogSummaryAnalysisRepository : SummaryAnalysisRepository {
    private LogSystemInfo _systemInfo;
    private bool _hasSharePointData;
    private bool _isDurationDataSectionSupported;
    private WebRequestEventAnalyzer _webRequestEventAnalyzer;
    private PerformanceEventAnalyzer _performanceEventAnalyzer;
    public TraceLogSummaryAnalysisRepository(bool hasSharePointData, bool isDurationDataSectionSupported, LogSystemInfo systemInfo, WebRequestEventAnalyzer webEventAnalyzer, PerformanceEventAnalyzer performanceEventAnalyzer);
    public virtual WebRequestData GetRequestForActivityId(Guid activityId);
    internal IAccessList`1<WebRequestEvent> GetWebRequestAccessList(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal IAccessList`1<WebRequestEvent> GetWebRequestAccessList(Predicate`1<WebRequestEvent> requestFilter, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal void ClearWebRequestFilter();
    internal IAccessList`1<PerformanceDataEvent> GetPerformanceDataEventAccessList(Predicate`1<PerformanceDataEvent> perfDataFilter, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal IAccessList`1<PerformanceDataEvent> GetPerformanceDataAccessList(ColumnSortOrder sortOrder, ListSortDirection sortDirection);
    internal IAccessList`1<PerformanceEventDescriptionGroup> GetGroupedPerformanceDataAccessList(Predicate`1<PerformanceEventDescriptionGroup> perfDataFilter, Func`1<bool> cancelFunction, ColumnSortOrder sortOrder, ListSortDirection sortDirection, bool hideLightEvents);
    internal IAccessList`1<PerformanceEventDescriptionGroup> GetGroupedPerformanceDataAccessList(ColumnSortOrder sortOrder, ListSortDirection sortDirection, bool hideLightEvents);
    internal void ClearPerformanceDataEventFilter();
    public PerformanceEventDescriptionGroup GetGroupForPerformanceEvent(PerformanceDataEvent ev);
    public string GetDescriptionForPerformanceEvent(PerformanceDataEvent ev);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestActionEvent : VersioningActionDiagnosticEvent {
    private ResolvedDiagnosticEvent _resolvedDiagnosticEvent;
    private bool _isFrameDataLoaded;
    private string _methodName;
    private IEnumerable`1<IDataElement> _collectedValues;
    public string Category { get; }
    public string LongDescription { get; }
    public string ShortDescription { get; }
    public string MethodName { get; }
    public IEnumerable`1<IDataElement> CollectedValues { get; }
    public IEnumerable`1<IDataElement> ParameterValues { get; }
    public IDataElement ThisValue { get; }
    public RequestActionEvent(ResolvedDiagnosticEvent diagnosticEvent, DataProvider dataProvider);
    public virtual string get_Category();
    public virtual string get_LongDescription();
    public virtual string get_ShortDescription();
    public virtual string get_MethodName();
    public virtual IEnumerable`1<IDataElement> get_CollectedValues();
    public virtual IEnumerable`1<IDataElement> get_ParameterValues();
    public virtual IDataElement get_ThisValue();
    private void LoadFrameInformation();
    private int GetMaxCollectedStringSize(int index);
    [CompilerGeneratedAttribute]
private PartialDataElementWrapper <get_CollectedValues>b__14_0(IDataElement data, int index);
}
public class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestDetailsControl : UserControl {
    internal RequestDetailsControl _requestDetailsUserControl;
    internal Grid mainLayoutGrid;
    internal Grid detailsGrid;
    internal TextBlock elapsedTimeTextBlock;
    internal TextBox elapsedTimeTextBox;
    internal TextBlock clientIpTextBlock;
    internal TextBox clientIpTextBox;
    internal TextBlock targetURLTextBlock;
    internal TextBox targetURLTextBox;
    internal TextBlock statusTextBlock;
    internal TextBox statusTextBox;
    internal TextBlock methodTextBlock;
    internal TextBox methodTextBox;
    internal TextBlock sessionIdTextBlock;
    internal TextBox sessionIdTextBox;
    internal TextBlock userAgentTextBlock;
    internal TextBox userAgentTextBox;
    internal TextBlock endTimeTextBlock;
    internal TextBox endTimeTextBox;
    internal TextBlock activityIdTextBlock;
    internal Grid requestEventsGrid;
    internal StackPanel truncatedEventsPanel;
    internal TextBlock truncatedEventsText;
    internal StackPanel malformedCallTreePanel;
    internal TextBlock malformedCallTreeText;
    internal StackPanel noEventsPanel;
    internal TextBlock noEventsText;
    internal CallDurationViewControl callDurationView;
    private bool _contentLoaded;
    internal void ShowWebView(OleMenuCommandService focusCommandService);
    public sealed virtual void Dispose();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestDetailsDocument : DetailsDocument {
    private RequestDetailsControl _detailsControl;
    protected UserControl DetailsControl { get; }
    internal RequestDetailsDocument(RequestViewModel rvm, IDisposable delayDisposer);
    protected virtual UserControl get_DetailsControl();
    protected virtual void OnViewModelLoaded();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestDetailsResults : object {
    [CompilerGeneratedAttribute]
private RequestViewModel <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEventData> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EventsTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CallTreeNode> <CallTrees>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMalformedCallTree>k__BackingField;
    public RequestViewModel Request { get; public set; }
    public IList`1<IEventData> Events { get; public set; }
    public bool EventsTruncated { get; public set; }
    public IList`1<CallTreeNode> CallTrees { get; public set; }
    public bool HasMalformedCallTree { get; public set; }
    [CompilerGeneratedAttribute]
public RequestViewModel get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(RequestViewModel value);
    [CompilerGeneratedAttribute]
public IList`1<IEventData> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IList`1<IEventData> value);
    [CompilerGeneratedAttribute]
public bool get_EventsTruncated();
    [CompilerGeneratedAttribute]
public void set_EventsTruncated(bool value);
    [CompilerGeneratedAttribute]
public IList`1<CallTreeNode> get_CallTrees();
    [CompilerGeneratedAttribute]
public void set_CallTrees(IList`1<CallTreeNode> value);
    [CompilerGeneratedAttribute]
public bool get_HasMalformedCallTree();
    [CompilerGeneratedAttribute]
public void set_HasMalformedCallTree(bool value);
}
public class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestEventsList : UserControl {
    private SimpleSearchTextManager _searchManager;
    private RequestViewModel _requestViewModel;
    private SimpleSearchProvider _searchProvider;
    internal MultiSelectComboBox _eventTypeComboBox;
    internal Border _searchElementHost;
    internal ListView _requestEventsList;
    private bool _contentLoaded;
    internal RequestViewModel RequestViewModel { get; }
    internal RequestViewModel get_RequestViewModel();
    private void RequestEventsList_DoubleClick(object sender, MouseButtonEventArgs e);
    private void EventListCopyCanExecute(object sender, CanExecuteRoutedEventArgs e);
    private void EventListCopyExecuted(object sender, ExecutedRoutedEventArgs e);
    internal void Combo_SelectionChangedHandler(object sender, EventArgs args);
    private void Combo_TargetUpdated(object sender, DataTransferEventArgs args);
    private void SearchTextChanged(object sender, SearchTextChangedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestEventViewModel : object {
    private IEventData _eventData;
    private string _eventTimeStringWithUTCOffset;
    [CompilerGeneratedAttribute]
private RequestActionEvent <RequestActionEvent>k__BackingField;
    private bool _isActionProviderInitialized;
    private ActionProvider _actionProvider;
    public string ToolTipText { get; }
    public string Name { get; }
    public string CategoryName { get; }
    public string ThreadName { get; }
    public string Description { get; }
    public int ThreadId { get; }
    public long Ordinal { get; }
    public int LoggerThreadId { get; }
    public string ToolTip { get; }
    public string Category { get; }
    public Nullable`1<DateTime> EventTime { get; }
    public string EventTimeStringWithUTCOffset { get; }
    public Nullable`1<Guid> ActivityId { get; }
    public bool IsDescriptionActionable { get; }
    public string AutomationName { get; }
    public string AutomationHelpText { get; }
    private RequestActionEvent RequestActionEvent { get; private set; }
    internal ActionProvider ActionProvider { get; }
    internal RequestEventViewModel(IEventData eventData);
    public string get_ToolTipText();
    public sealed virtual string get_Name();
    public sealed virtual string get_CategoryName();
    public sealed virtual string get_ThreadName();
    public sealed virtual string get_Description();
    public sealed virtual int get_ThreadId();
    public long get_Ordinal();
    public int get_LoggerThreadId();
    public string get_ToolTip();
    public sealed virtual string get_Category();
    public sealed virtual Nullable`1<DateTime> get_EventTime();
    public string get_EventTimeStringWithUTCOffset();
    public sealed virtual Nullable`1<Guid> get_ActivityId();
    public sealed virtual bool get_IsDescriptionActionable();
    public string get_AutomationName();
    public string get_AutomationHelpText();
    [CompilerGeneratedAttribute]
private RequestActionEvent get_RequestActionEvent();
    [CompilerGeneratedAttribute]
private void set_RequestActionEvent(RequestActionEvent value);
    internal ActionProvider get_ActionProvider();
    public sealed virtual bool ExecuteDescriptionAction();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestSearchProvider : SearchProvider {
    public string SearchTooltip { get; }
    public string SearchStartTooltip { get; }
    public string SearchClearTooltip { get; }
    public string SearchWatermark { get; }
    public RequestSearchProvider(TraceLogSummaryPage parentPage);
    public virtual IVsSearchTask CreateSearch(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchCallback pSearchCallback);
    public virtual void ClearSearch();
    private void OnSearchCompleted(object sender, EventArgs args);
    public virtual string get_SearchTooltip();
    public virtual string get_SearchStartTooltip();
    public virtual string get_SearchClearTooltip();
    public virtual string get_SearchWatermark();
    [CompilerGeneratedAttribute]
private void <OnSearchCompleted>b__3_0();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestSearchTask : SearchTask {
    private ParsedSearchString _parsedSearchString;
    private static string TargetURLField;
    private static string ClientIPField;
    private static string RequestTypeField;
    private static string StatusField;
    private static string UserAgentField;
    private static string SessionIdField;
    protected ParsedSearchString SearchString { get; }
    public RequestSearchTask(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchCallback pSearchCallback, TraceLogSummaryPage parentPage, object searchLockObject);
    private static RequestSearchTask();
    protected virtual void RefreshList();
    protected virtual ParsedSearchString get_SearchString();
    private bool WebRequestEventTest(WebRequestEvent requestEvent);
    [CompilerGeneratedAttribute]
private bool <RefreshList>b__8_0();
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.RequestViewModel : TraceLogViewModelBase {
    private IRequestData _requestData;
    private Action`3<long, int, WebRequestInfo> _launchDebuggingAction;
    private string _eventTextFilter;
    private IEnumerable`1<string> _categoryStringFilters;
    private string _startTimeString;
    private string _endTimeStringWithUTCOffset;
    private string _endTimeString;
    private ICollectionView _eventsListView;
    private bool _hasEvents;
    private bool _eventsTruncated;
    private bool _eventDataLoaded;
    private bool _isCallDurationViewVisible;
    private bool _hasMalformedCallTree;
    private CallDurationViewModel _callDurationViewModel;
    private IList`1<EventCategoryItem> _categories;
    private CallInfo _callInfo;
    private DelegateCommand _startDebuggingCommand;
    public string TitleString { get; }
    public string RequestHeaderText { get; }
    public int RequestId { get; }
    public int SessionId { get; }
    public string TargetURL { get; }
    public string UserAgent { get; }
    public string RequestType { get; }
    public string ReturnCode { get; }
    public string ClientIP { get; }
    public DateTime StartTime { get; }
    public string StartTimeString { get; }
    public DateTime EndTime { get; }
    public string EndTimeStringWithUTCOffset { get; }
    public string EndTimeString { get; }
    public TimeSpan ElapsedTime { get; }
    public string FormattedElapsedTime { get; }
    public ICollectionView Events { get; private set; }
    public bool HasEvents { get; private set; }
    public bool EventsTruncated { get; private set; }
    public bool EventDataLoaded { get; private set; }
    public bool HasSharePointData { get; }
    public bool IsCallDurationViewVisible { get; private set; }
    public bool HasMalformedCallTree { get; private set; }
    public CallDurationViewModel CallDurationViewModel { get; }
    public Nullable`1<Guid> ActivityId { get; }
    public IList`1<EventCategoryItem> Categories { get; private set; }
    public long ThreadStreamOffset { get; }
    public CallInfo CallInfo { get; }
    internal Action`3<long, int, WebRequestInfo> LaunchDebuggingAction { get; }
    public ICommand StartDebuggingCommand { get; }
    public RequestViewModel(IRequestData requestData);
    public RequestViewModel(IRequestData requestData, Action`3<long, int, WebRequestInfo> launchDebuggingAction);
    public string get_TitleString();
    public string get_RequestHeaderText();
    public int get_RequestId();
    public int get_SessionId();
    public string get_TargetURL();
    public string get_UserAgent();
    public string get_RequestType();
    public string get_ReturnCode();
    public string get_ClientIP();
    public DateTime get_StartTime();
    public string get_StartTimeString();
    public DateTime get_EndTime();
    public string get_EndTimeStringWithUTCOffset();
    public string get_EndTimeString();
    public TimeSpan get_ElapsedTime();
    public string get_FormattedElapsedTime();
    public ICollectionView get_Events();
    private void set_Events(ICollectionView value);
    public bool get_HasEvents();
    private void set_HasEvents(bool value);
    public bool get_EventsTruncated();
    private void set_EventsTruncated(bool value);
    public bool get_EventDataLoaded();
    private void set_EventDataLoaded(bool value);
    public bool get_HasSharePointData();
    public bool get_IsCallDurationViewVisible();
    private void set_IsCallDurationViewVisible(bool value);
    public sealed virtual bool get_HasMalformedCallTree();
    private void set_HasMalformedCallTree(bool value);
    public sealed virtual CallDurationViewModel get_CallDurationViewModel();
    public Nullable`1<Guid> get_ActivityId();
    public IList`1<EventCategoryItem> get_Categories();
    private void set_Categories(IList`1<EventCategoryItem> value);
    public long get_ThreadStreamOffset();
    public CallInfo get_CallInfo();
    internal Action`3<long, int, WebRequestInfo> get_LaunchDebuggingAction();
    public void AddEventTextFilter(string filterText);
    public void AddCategoryFilters(IEnumerable`1<string> categoryFilters);
    public void UpdateEventsView(IList`1<IEventData> events, bool eventsTruncated, IList`1<CallTreeNode> callTrees, bool isCallTreeMalformed);
    private void RefreshView();
    private bool FilterEvent(object requestEvent);
    private bool FilterStringTest(string eventString);
    public ICommand get_StartDebuggingCommand();
    internal void StartDebugging();
    internal bool CanStartDebugging();
    [CompilerGeneratedAttribute]
private void <UpdateEventsView>b__85_0(long ordinal, int loggerThreadId);
    [CompilerGeneratedAttribute]
private void <get_StartDebuggingCommand>b__91_0(object param);
    [CompilerGeneratedAttribute]
private bool <get_StartDebuggingCommand>b__91_1(object param);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ScrollableWindowsFormsHost : WindowsFormsHost {
    private int _lastTopLeftX;
    private int _lastTopLeftY;
    private int _lastBottomRightX;
    private int _lastBottomRightY;
    private ScrollViewer _scrollViewer;
    private ScrollChangedEventHandler _scrollHandler;
    private bool _isDisposed;
    private Rect _scrollViewportRect;
    private Rect _hwndContentRect;
    public ScrollableWindowsFormsHost(ScrollViewer scrollViewer);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual void Dispose(bool isDisposing);
    private void ScrollHandler(object sender, ScrollChangedEventArgs ea);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.SearchProvider : object {
    private static int _controlMinWidth;
    private static int _controlMaxWidth;
    [CompilerGeneratedAttribute]
private TraceLogSummaryPage <SummaryPage>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SearchLockObject>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActiveSearchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchSettingsDataSource <SearchSettings>k__BackingField;
    protected TraceLogSummaryPage SummaryPage { get; private set; }
    protected object SearchLockObject { get; private set; }
    protected int ActiveSearchCount { get; protected set; }
    protected SearchSettingsDataSource SearchSettings { get; private set; }
    private Guid Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch.Category { get; }
    public bool SearchEnabled { get; }
    public IVsEnumWindowSearchFilters SearchFiltersEnum { get; }
    public IVsEnumWindowSearchOptions SearchOptionsEnum { get; }
    public string SearchTooltip { get; }
    public string SearchStartTooltip { get; }
    public string SearchClearTooltip { get; }
    public string SearchWatermark { get; }
    public SearchProvider(TraceLogSummaryPage parentPage);
    [CompilerGeneratedAttribute]
protected TraceLogSummaryPage get_SummaryPage();
    [CompilerGeneratedAttribute]
private void set_SummaryPage(TraceLogSummaryPage value);
    [CompilerGeneratedAttribute]
protected object get_SearchLockObject();
    [CompilerGeneratedAttribute]
private void set_SearchLockObject(object value);
    [CompilerGeneratedAttribute]
protected int get_ActiveSearchCount();
    [CompilerGeneratedAttribute]
protected void set_ActiveSearchCount(int value);
    [CompilerGeneratedAttribute]
protected SearchSettingsDataSource get_SearchSettings();
    [CompilerGeneratedAttribute]
private void set_SearchSettings(SearchSettingsDataSource value);
    private sealed virtual override Guid Microsoft.VisualStudio.Shell.Interop.IVsWindowSearch.get_Category();
    public abstract virtual void ClearSearch();
    public abstract virtual IVsSearchTask CreateSearch(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchCallback pSearchCallback);
    public sealed virtual bool OnNavigationKeyDown(UInt32 dwNavigationKey, UInt32 dwModifiers);
    public sealed virtual void ProvideSearchSettings(IVsUIDataSource pSearchSettings);
    public sealed virtual bool get_SearchEnabled();
    public sealed virtual IVsEnumWindowSearchFilters get_SearchFiltersEnum();
    public sealed virtual IVsEnumWindowSearchOptions get_SearchOptionsEnum();
    public abstract virtual string get_SearchTooltip();
    public abstract virtual string get_SearchStartTooltip();
    public abstract virtual string get_SearchClearTooltip();
    public abstract virtual string get_SearchWatermark();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.SearchTask : VsSearchTask {
    protected static UInt32 MaxSearchTokens;
    [CompilerGeneratedAttribute]
private TraceLogSummaryPage <SummaryPage>k__BackingField;
    [CompilerGeneratedAttribute]
private object <SearchLockObject>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler SearchCompleted;
    protected TraceLogSummaryPage SummaryPage { get; protected set; }
    protected object SearchLockObject { get; protected set; }
    protected ParsedSearchString SearchString { get; }
    public SearchTask(UInt32 dwCookie, IVsSearchQuery pSearchQuery, IVsSearchCallback pSearchCallback, TraceLogSummaryPage parentPage, object searchLockObject);
    [CompilerGeneratedAttribute]
protected TraceLogSummaryPage get_SummaryPage();
    [CompilerGeneratedAttribute]
protected void set_SummaryPage(TraceLogSummaryPage value);
    [CompilerGeneratedAttribute]
protected object get_SearchLockObject();
    [CompilerGeneratedAttribute]
protected void set_SearchLockObject(object value);
    protected virtual void OnStartSearch();
    protected void InitializeParsedSearchString();
    protected abstract virtual ParsedSearchString get_SearchString();
    protected abstract virtual void RefreshList();
    protected static bool IsFilterValueMatch(string parseString, string eventString);
    protected static bool IsSubstringMatch(string searchText, string value);
    protected static bool IsBooleanMatch(string parsedString, bool value);
    protected void OnSearchCompleted();
    [CompilerGeneratedAttribute]
public void add_SearchCompleted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SearchCompleted(EventHandler value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.SlowestNodeRow : TraceLogViewModelBase {
    private bool _isSelected;
    [CompilerGeneratedAttribute]
private string <TotalTimeAutomationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalTimeString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfTimeString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DurationTooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommand <ExpandInExecutionTreeCommand>k__BackingField;
    public string TotalTimeAutomationName { get; }
    public string TotalTimeString { get; }
    public string SelfTimeString { get; }
    public string DurationTooltip { get; }
    public string Name { get; }
    public bool IsSelected { get; public set; }
    public ICommand ExpandInExecutionTreeCommand { get; private set; }
    public SlowestNodeRow(CallTreeFrame frame, Action`1<SlowestNodeRow> expandItemAction);
    [CompilerGeneratedAttribute]
public string get_TotalTimeAutomationName();
    [CompilerGeneratedAttribute]
public string get_TotalTimeString();
    [CompilerGeneratedAttribute]
public string get_SelfTimeString();
    [CompilerGeneratedAttribute]
public string get_DurationTooltip();
    [CompilerGeneratedAttribute]
public string get_Name();
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    [CompilerGeneratedAttribute]
public ICommand get_ExpandInExecutionTreeCommand();
    [CompilerGeneratedAttribute]
private void set_ExpandInExecutionTreeCommand(ICommand value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.TimingDataGridRow : object {
    [CompilerGeneratedAttribute]
private string <TotalTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Highlight>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasParameters>k__BackingField;
    private bool _isActionProviderInitialized;
    private ActionProvider _actionProvider;
    [CompilerGeneratedAttribute]
private CallTreeFrameActionEvent <ActionEvent>k__BackingField;
    public string TotalTime { get; public set; }
    public string Signature { get; public set; }
    public string StartTime { get; public set; }
    public string EndTime { get; public set; }
    public string SelfTime { get; public set; }
    public string Description { get; public set; }
    public bool Highlight { get; public set; }
    public bool HasParameters { get; private set; }
    public bool HasAction { get; }
    internal ActionProvider ActionProvider { get; }
    private CallTreeFrameActionEvent ActionEvent { get; private set; }
    public TimingDataGridRow(CallTreeFrame frame);
    [CompilerGeneratedAttribute]
public string get_TotalTime();
    [CompilerGeneratedAttribute]
public void set_TotalTime(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public string get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(string value);
    [CompilerGeneratedAttribute]
public string get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(string value);
    [CompilerGeneratedAttribute]
public string get_SelfTime();
    [CompilerGeneratedAttribute]
public void set_SelfTime(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Highlight();
    [CompilerGeneratedAttribute]
public void set_Highlight(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasParameters();
    [CompilerGeneratedAttribute]
private void set_HasParameters(bool value);
    public bool get_HasAction();
    public bool ExecuteAction(object actionContextObject);
    public void GetParameterActionableAndUIData(IDataElement parameterData, Boolean& isActionable, String& tooltip);
    internal ActionProvider get_ActionProvider();
    [CompilerGeneratedAttribute]
private CallTreeFrameActionEvent get_ActionEvent();
    [CompilerGeneratedAttribute]
private void set_ActionEvent(CallTreeFrameActionEvent value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.TraceLogBasePerformancePageComponent : TraceLogPageComponent {
    protected PerformanceDataDetailsControl _detailsControl;
    protected PerformanceDataViewModel _viewModel;
    protected ITraceLogDocumentProvider _traceLogDocumentProvider;
    protected IHistoricalDebugActions _debugActions;
    protected OleMenuCommandService _focusCommandService;
    protected PerformanceEventDescriptionGroup _performanceEventGroup;
    protected PerformanceDataEvent _performanceDataEvent;
    public string PerformanceEventDescription { get; }
    public TraceLogBasePerformancePageComponent(ITraceLogDocumentProvider traceLogDocumentProvider, IHistoricalDebugActions debugActions, OleMenuCommandService focusCommandService, ScrollViewer containingScrollViewer);
    public string get_PerformanceEventDescription();
    protected virtual void Dispose(bool isDisposing);
    protected virtual UserControl GetView();
    protected virtual void DoSetupViewModel(TraceLogPageComponentSource sourceData);
    private void HandleViewModelPropertyChanged(object sender, PropertyChangedEventArgs args);
    protected virtual TraceLogViewModelBase GetViewModel();
    protected virtual void SetPerformanceData(TraceLogPageComponentSource sourceData);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.TraceLogDetailPerformancePageComponent : TraceLogBasePerformancePageComponent {
    private int _performanceDataId;
    public TraceLogDetailPerformancePageComponent(ITraceLogDocumentProvider traceLogDocumentProvider, IHistoricalDebugActions debugActions, OleMenuCommandService focusCommandService, ScrollViewer containingScrollViewer, int performanceDataId);
    protected virtual void SetPerformanceData(TraceLogPageComponentSource sourceData);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.TraceLogPerformancePageComponent : TraceLogPageComponent {
    private PerformanceDataDetailsControl _detailsControl;
    private PerformanceDataViewModel _performanceDataViewModel;
    public TraceLogPerformancePageComponent(PerformanceDataViewModel viewModel, ScrollViewer containingScrollViewer);
    protected virtual UserControl GetView();
    protected virtual TraceLogViewModelBase GetViewModel();
    protected virtual void Dispose(bool isDisposing);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.TraceLogSinglePerformancePageComponent : TraceLogBasePerformancePageComponent {
    public TraceLogSinglePerformancePageComponent(ITraceLogDocumentProvider traceLogDocumentProvider, IHistoricalDebugActions debugActions, OleMenuCommandService focusCommandService, ScrollViewer containingScrollViewer);
    protected virtual void SetPerformanceData(TraceLogPageComponentSource sourceData);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.TraceLogSummary : TraceLogViewModelBase {
    private Action`1<RequestViewModel> _openRequestAction;
    private Action`1<PerformanceDataSummaryViewModelBase> _openPerformanceDataAction;
    private Action`3<long, int, WebRequestInfo> _launchDebuggingAction;
    private static int MaxPages;
    private static int ItemsPerPage;
    private static string F1KeywordCollectData;
    [CompilerGeneratedAttribute]
private TraceLogSummaryAnalysisRepository <AnalysisRepository>k__BackingField;
    private LaunchType _launchType;
    private LogSystemInfo _systemInfo;
    private bool _isExceptionDataLoading;
    [CompilerGeneratedAttribute]
private ObservableCollection`1<DisplayTestStep> <TestSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DisplayTestSession> <TestSessions>k__BackingField;
    private IList`1<DisplayTestCase> _testCases;
    [CompilerGeneratedAttribute]
private DateTime <FileLastModifiedTime>k__BackingField;
    private bool _hasTestData;
    private bool _hasExceptionData;
    private bool _areExceptionsGrouped;
    private DataListViewModel`1<RequestViewModel> _requestListViewModel;
    private DataListViewModel`1<PerformanceDataSummaryViewModelBase> _performanceDataListViewModel;
    private SummaryAnalysisViewModel _summaryAnalysisViewModel;
    private DisplayExceptionData _selectedException;
    private bool _loadingExceptionCallStack;
    private String[] _selectedExceptionCallStack;
    private bool _hasSharePointData;
    [CompilerGeneratedAttribute]
private bool <IsDurationDataSectionSupported>k__BackingField;
    private bool _hasPerformanceLightEvents;
    private bool _hideLightEvents;
    private DetailsDisplayItem _previouslySelectedDetailsItem;
    private List`1<DetailsDisplayItem> _groupedDetailDisplayItems;
    private List`1<DetailsDisplayItem> _ungroupedDetailDisplayItems;
    private bool _arePerformanceEventsGrouped;
    private DetailsDisplayType _detailsDisplayType;
    private DetailsDisplayItem _selectedDetailsItem;
    private IList`1<DetailsDisplayItem> _detailDisplayItems;
    [CompilerGeneratedAttribute]
private PerformanceDataSummaryViewModelBase <LastSelectedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestViewModel <OpeningRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceDataViewModel <OpeningPerformanceData>k__BackingField;
    private ObservableCollection`1<DisplayThreadData> _threadData;
    private ObservableCollection`1<DisplayModuleData> _moduleData;
    private ObservableCollection`1<DisplayExceptionData> _exceptionData;
    private ProgramSymbols _programSymbols;
    private TraceLog _traceLog;
    private IEnumerable`1<ExceptionInstance> _groupedExceptions;
    private IEnumerable`1<ExceptionInstance> _ungroupedExceptions;
    private ObservableCollection`1<DisplayExceptionData> _groupedExceptionDisplayData;
    private ObservableCollection`1<DisplayExceptionData> _ungroupedExceptionDisplayData;
    public TraceLogSummaryAnalysisRepository AnalysisRepository { get; public set; }
    internal LaunchType LaunchType { get; internal set; }
    public LogSystemInfo SystemInfo { get; public set; }
    public bool IsExceptionDataLoading { get; public set; }
    public ObservableCollection`1<DisplayThreadData> ThreadData { get; }
    public ObservableCollection`1<DisplayModuleData> ModuleData { get; }
    public ObservableCollection`1<DisplayExceptionData> ExceptionData { get; public set; }
    public ObservableCollection`1<DisplayTestStep> TestSteps { get; private set; }
    public IList`1<DisplayTestSession> TestSessions { get; private set; }
    public IList`1<DisplayTestCase> TestCases { get; private set; }
    internal ProgramSymbols ProgramSymbols { get; }
    public DateTime FileLastModifiedTime { get; public set; }
    public bool HasSystemInfo { get; }
    public bool HasTestData { get; private set; }
    public string TestHeader { get; }
    public bool HasExceptionData { get; private set; }
    public bool AreExceptionsGrouped { get; internal set; }
    public bool ExpandExceptions { get; }
    public DataListViewModel`1<RequestViewModel> WebRequests { get; private set; }
    public DataListViewModel`1<PerformanceDataSummaryViewModelBase> PerformanceDataList { get; private set; }
    public SummaryAnalysisViewModel SummaryAnalysisViewModel { get; public set; }
    public string ExceptionHeader { get; }
    public DisplayExceptionData SelectedException { get; public set; }
    public bool LoadingExceptionCallStack { get; public set; }
    public String[] SelectedExceptionCallStack { get; public set; }
    public bool HasSharePointData { get; internal set; }
    public bool IsDurationDataSectionSupported { get; internal set; }
    public bool HasPerformanceLightEvents { get; private set; }
    public bool HideLightEvents { get; public set; }
    public bool ArePerformanceEventsGrouped { get; public set; }
    public DetailsDisplayType DetailsDisplayType { get; public set; }
    public DetailsDisplayItem SelectedDetailsItem { get; public set; }
    public IList`1<DetailsDisplayItem> DetailDisplayOptions { get; public set; }
    private PerformanceDataSummaryViewModelBase LastSelectedEvent { get; private set; }
    internal RequestViewModel OpeningRequest { get; internal set; }
    internal PerformanceDataViewModel OpeningPerformanceData { get; internal set; }
    internal TraceLogSummary(Action`1<RequestViewModel> openRequestAction, Action`1<PerformanceDataSummaryViewModelBase> openPerformanceAction, Action`3<long, int, WebRequestInfo> launchDebuggingAction);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void SetWebRequestData(IAccessList`1<WebRequestEvent> webRequestEventList);
    private RequestViewModel TransformWebRequest(WebRequestEvent requestEvent);
    internal void SetPerformanceData(IAccessList`1<T> performanceDataEventList, bool checkForLightEvents, bool preserveSelection);
    private AccessListDataProvider`2<PerformanceDataSummaryViewModelBase, T> GetPerformanceSummaryDataModel(IAccessList`1<T> performanceDataEventList);
    private PerformanceDataSummaryViewModelBase TransformPerformanceData(PerformanceDataEvent perfEvent);
    private PerformanceDataSummaryViewModelBase TransformPerformanceData(PerformanceEventDescriptionGroup group);
    public void DebugRequest(long ordinal, int loggerThreadId, WebRequestInfo request);
    internal void SetThreadData(IEnum`1<ThreadData> newThreadData);
    internal void SetModuleData(IEnum`1<ModuleData> moduleData);
    internal void SetTestData(TestSession[] testData);
    internal void StoreExceptionEvents(IEnumerable`1<ExceptionInstance> ungroupedExceptions, IEnumerable`1<ExceptionInstance> groupedExceptions);
    internal void StoreExceptionAnalysisData(TraceLog traceLog, IDictionary`2<string, StackAggregator> analysisData);
    internal Task`1<bool> RetrieveExceptionData();
    internal void SetProgramSymbols(ProgramSymbols addProgramSymbols);
    internal void SetTestCases(DisplayTestSession newTestSession);
    internal void SetTestSteps(DisplayTestCase newTestCase);
    internal void SetTraceLogData(TraceLog traceLog);
    [CompilerGeneratedAttribute]
public TraceLogSummaryAnalysisRepository get_AnalysisRepository();
    [CompilerGeneratedAttribute]
public void set_AnalysisRepository(TraceLogSummaryAnalysisRepository value);
    internal LaunchType get_LaunchType();
    internal void set_LaunchType(LaunchType value);
    public LogSystemInfo get_SystemInfo();
    public void set_SystemInfo(LogSystemInfo value);
    public bool get_IsExceptionDataLoading();
    public void set_IsExceptionDataLoading(bool value);
    public ObservableCollection`1<DisplayThreadData> get_ThreadData();
    public ObservableCollection`1<DisplayModuleData> get_ModuleData();
    public ObservableCollection`1<DisplayExceptionData> get_ExceptionData();
    public void set_ExceptionData(ObservableCollection`1<DisplayExceptionData> value);
    [CompilerGeneratedAttribute]
public ObservableCollection`1<DisplayTestStep> get_TestSteps();
    [CompilerGeneratedAttribute]
private void set_TestSteps(ObservableCollection`1<DisplayTestStep> value);
    [CompilerGeneratedAttribute]
public IList`1<DisplayTestSession> get_TestSessions();
    [CompilerGeneratedAttribute]
private void set_TestSessions(IList`1<DisplayTestSession> value);
    public IList`1<DisplayTestCase> get_TestCases();
    private void set_TestCases(IList`1<DisplayTestCase> value);
    internal ProgramSymbols get_ProgramSymbols();
    [CompilerGeneratedAttribute]
public DateTime get_FileLastModifiedTime();
    [CompilerGeneratedAttribute]
public void set_FileLastModifiedTime(DateTime value);
    public bool get_HasSystemInfo();
    private void set_HasTestData(bool value);
    public bool get_HasTestData();
    public string get_TestHeader();
    private void set_HasExceptionData(bool value);
    public bool get_HasExceptionData();
    internal void set_AreExceptionsGrouped(bool value);
    public bool get_AreExceptionsGrouped();
    public bool get_ExpandExceptions();
    public DataListViewModel`1<RequestViewModel> get_WebRequests();
    private void set_WebRequests(DataListViewModel`1<RequestViewModel> value);
    public DataListViewModel`1<PerformanceDataSummaryViewModelBase> get_PerformanceDataList();
    private void set_PerformanceDataList(DataListViewModel`1<PerformanceDataSummaryViewModelBase> value);
    public SummaryAnalysisViewModel get_SummaryAnalysisViewModel();
    public void set_SummaryAnalysisViewModel(SummaryAnalysisViewModel value);
    public string get_ExceptionHeader();
    public DisplayExceptionData get_SelectedException();
    public void set_SelectedException(DisplayExceptionData value);
    public bool get_LoadingExceptionCallStack();
    public void set_LoadingExceptionCallStack(bool value);
    public String[] get_SelectedExceptionCallStack();
    public void set_SelectedExceptionCallStack(String[] value);
    public bool get_HasSharePointData();
    internal void set_HasSharePointData(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDurationDataSectionSupported();
    [CompilerGeneratedAttribute]
internal void set_IsDurationDataSectionSupported(bool value);
    public bool get_HasPerformanceLightEvents();
    private void set_HasPerformanceLightEvents(bool value);
    public bool get_HideLightEvents();
    public void set_HideLightEvents(bool value);
    public bool get_ArePerformanceEventsGrouped();
    public void set_ArePerformanceEventsGrouped(bool value);
    public DetailsDisplayType get_DetailsDisplayType();
    public void set_DetailsDisplayType(DetailsDisplayType value);
    public DetailsDisplayItem get_SelectedDetailsItem();
    public void set_SelectedDetailsItem(DetailsDisplayItem value);
    public IList`1<DetailsDisplayItem> get_DetailDisplayOptions();
    public void set_DetailDisplayOptions(IList`1<DetailsDisplayItem> value);
    [CompilerGeneratedAttribute]
private PerformanceDataSummaryViewModelBase get_LastSelectedEvent();
    [CompilerGeneratedAttribute]
private void set_LastSelectedEvent(PerformanceDataSummaryViewModelBase value);
    [CompilerGeneratedAttribute]
internal RequestViewModel get_OpeningRequest();
    [CompilerGeneratedAttribute]
internal void set_OpeningRequest(RequestViewModel value);
    [CompilerGeneratedAttribute]
internal PerformanceDataViewModel get_OpeningPerformanceData();
    [CompilerGeneratedAttribute]
internal void set_OpeningPerformanceData(PerformanceDataViewModel value);
    public static string GetFunctionName(TraceLog traceLog, IIntelliTraceStackFrame frame, ProgramSymbols progSymbols);
    public string GetPerformanceDescriptionString(PerformanceDataEvent perfEvent);
    [CompilerGeneratedAttribute]
private PerformanceDataSummaryViewModelBase <GetPerformanceSummaryDataModel>b__12_0(T p);
    [CompilerGeneratedAttribute]
private PerformanceDataSummaryViewModelBase <GetPerformanceSummaryDataModel>b__12_1(T p);
    [CompilerGeneratedAttribute]
private ObservableCollection`1<DisplayExceptionData> <RetrieveExceptionData>b__21_0();
    [CompilerGeneratedAttribute]
private bool <RetrieveExceptionData>b__21_1(Task`1<ObservableCollection`1<DisplayExceptionData>> t);
    [CompilerGeneratedAttribute]
private bool <set_DetailDisplayOptions>b__145_0(DetailsDisplayItem d);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.TraceLogSummaryPageComponent : TraceLogPageComponent {
    private static int UIRefreshTick;
    private TraceLogSummary _logSummary;
    private BackgroundWorker _stackDataWorker;
    private DispatcherTimer _stackFetchTimer;
    private bool _processingException;
    private IHistoricalDebugActions _debugActions;
    private ITraceLogDocumentProvider _traceLogDocumentProvider;
    private TraceLogGlobalState _traceLogGlobalState;
    private TraceLog _traceLog;
    private IntelliTraceFile _logFile;
    [CompilerGeneratedAttribute]
private TraceLogSummaryPage <SummaryPageUserControl>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestSummary <RequestSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceDataSummary <PerformanceSummary>k__BackingField;
    public TraceLogSummary LogSummary { get; }
    public TraceLogSummaryPage SummaryPageUserControl { get; private set; }
    public TraceLogSummaryAnalysisRepository AnalysisRepository { get; }
    public RequestSummary RequestSummary { get; private set; }
    public PerformanceDataSummary PerformanceSummary { get; private set; }
    public TraceLogSummaryPageComponent(ITraceLogDocumentProvider provider, IHistoricalDebugActions debugActions, TraceLogGlobalState traceLogGlobalState, RefCountingDisposer refCountingDisposer);
    public TraceLogSummary get_LogSummary();
    [CompilerGeneratedAttribute]
public TraceLogSummaryPage get_SummaryPageUserControl();
    [CompilerGeneratedAttribute]
private void set_SummaryPageUserControl(TraceLogSummaryPage value);
    public TraceLogSummaryAnalysisRepository get_AnalysisRepository();
    [CompilerGeneratedAttribute]
public RequestSummary get_RequestSummary();
    [CompilerGeneratedAttribute]
private void set_RequestSummary(RequestSummary value);
    [CompilerGeneratedAttribute]
public PerformanceDataSummary get_PerformanceSummary();
    [CompilerGeneratedAttribute]
private void set_PerformanceSummary(PerformanceDataSummary value);
    protected virtual void Dispose(bool isDisposing);
    protected virtual UserControl GetView();
    protected virtual void DoSetupViewModel(TraceLogPageComponentSource sourceData);
    protected virtual TraceLogViewModelBase GetViewModel();
    public void LoadExceptionStackTrace(DisplayExceptionData exceptionData);
    private void StackFetchTimerElapsed(object sender, EventArgs ea);
    private void StackDataWorker_DoWork(object sender, DoWorkEventArgs e);
    private void StackDataWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ViewModels.DetailsDisplayItem : object {
    [CompilerGeneratedAttribute]
private DetailsDisplayType <DisplayType>k__BackingField;
    public DetailsDisplayType DisplayType { get; private set; }
    public DetailsDisplayItem(DetailsDisplayType type);
    [CompilerGeneratedAttribute]
public DetailsDisplayType get_DisplayType();
    [CompilerGeneratedAttribute]
private void set_DisplayType(DetailsDisplayType value);
    public virtual string ToString();
}
internal enum Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ViewModels.DetailsDisplayType : Enum {
    public int value__;
    public static DetailsDisplayType Selected;
    public static DetailsDisplayType Newest;
    public static DetailsDisplayType Slowest;
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ViewModels.GroupedPerformanceDataSummaryViewModel : PerformanceDataSummaryViewModelBase {
    private IGroupedPerformanceData _groupData;
    private bool _hideLightEvents;
    public string GroupDescriptionAverageDuration { get; }
    public UInt32 GroupDescriptionCount { get; }
    public string GroupDescriptionMaxDuration { get; }
    private TimeSpan LongestTime { get; }
    private TimeSpan TotalTime { get; }
    public string EventTimeString { get; }
    public GroupedPerformanceDataSummaryViewModel(IGroupedPerformanceData groupData, bool hideLightEvents);
    public virtual string get_GroupDescriptionAverageDuration();
    public virtual UInt32 get_GroupDescriptionCount();
    public virtual string get_GroupDescriptionMaxDuration();
    private TimeSpan get_LongestTime();
    private TimeSpan get_TotalTime();
    public virtual string get_EventTimeString();
    public virtual IPerformanceData GetPerformanceData();
    public IPerformanceData GetSlowestPerformanceData();
    private T GetLastValue(T heavyValue, T lightValue);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ViewModels.PerformanceDataSummaryViewModel : PerformanceDataSummaryViewModelBase {
    private IPerformanceData _perfData;
    public string EventTimeString { get; }
    public string FormattedDuration { get; }
    public string IsLightEventString { get; }
    public string EventSource { get; }
    public PerformanceDataSummaryViewModel(IPerformanceData perfData);
    public virtual string get_EventTimeString();
    public virtual string get_FormattedDuration();
    public virtual string get_IsLightEventString();
    public virtual string get_EventSource();
    public virtual IPerformanceData GetPerformanceData();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ViewModels.PerformanceDataSummaryViewModelBase : TraceLogViewModelBase {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormattedDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDescriptionMultiLine>k__BackingField;
    public string Description { get; private set; }
    public string FormattedDescription { get; private set; }
    public bool IsDescriptionMultiLine { get; private set; }
    public string FormattedDuration { get; }
    public UInt32 GroupDescriptionCount { get; }
    public string GroupDescriptionAverageDuration { get; }
    public string GroupDescriptionMaxDuration { get; }
    public string EventTimeString { get; }
    public string EventSource { get; }
    public string IsLightEventString { get; }
    protected PerformanceDataSummaryViewModelBase(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_FormattedDescription();
    [CompilerGeneratedAttribute]
private void set_FormattedDescription(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDescriptionMultiLine();
    [CompilerGeneratedAttribute]
private void set_IsDescriptionMultiLine(bool value);
    public virtual string get_FormattedDuration();
    public virtual UInt32 get_GroupDescriptionCount();
    public virtual string get_GroupDescriptionAverageDuration();
    public virtual string get_GroupDescriptionMaxDuration();
    public virtual string get_EventTimeString();
    public virtual string get_EventSource();
    public virtual string get_IsLightEventString();
    public abstract virtual IPerformanceData GetPerformanceData();
    protected static string GetFormattedMilliSeconds(Nullable`1<TimeSpan> time);
    protected static string GetFormattedTime(Nullable`1<DateTime> time);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.ViewModels.SummaryAnalysisViewModel : TraceLogViewModelBase {
    private SummaryAnalysisRepository _repository;
    private Action`1<RequestViewModel> _openRequestAction;
    private Action`3<long, int, WebRequestInfo> _launchDebuggingAction;
    private string _activityIdSearchText;
    private string _activityIdErrorText;
    private ObservableCollection`1<DisplayAnalysisData> _exceptionAnalysisData;
    private DelegateCommand _openActivityId;
    public string ActivityIdSearchText { get; public set; }
    public bool ActivityIdHasError { get; }
    public string ActivityIdErrorText { get; public set; }
    public ObservableCollection`1<DisplayAnalysisData> ExceptionAnalysisData { get; public set; }
    public bool HasExceptionAnalysisData { get; }
    public ICommand OpenActivityId { get; }
    public SummaryAnalysisViewModel(SummaryAnalysisRepository repository, Action`1<RequestViewModel> openRequestAction, Action`3<long, int, WebRequestInfo> launchDebuggingAction);
    public string get_ActivityIdSearchText();
    public void set_ActivityIdSearchText(string value);
    public bool get_ActivityIdHasError();
    public string get_ActivityIdErrorText();
    public void set_ActivityIdErrorText(string value);
    public ObservableCollection`1<DisplayAnalysisData> get_ExceptionAnalysisData();
    public void set_ExceptionAnalysisData(ObservableCollection`1<DisplayAnalysisData> value);
    public bool get_HasExceptionAnalysisData();
    public ICommand get_OpenActivityId();
    internal void DoOpenActivityId();
    internal bool CanOpenActivityId();
    [CompilerGeneratedAttribute]
private void <get_OpenActivityId>b__22_0(object param);
    [CompilerGeneratedAttribute]
private bool <get_OpenActivityId>b__22_1(object param);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.VirtualizedList`1 : object {
    private IVirtualizedListDataProvider`1<T> _dataProvider;
    private int _pageSize;
    private int _maxPages;
    private Dictionary`2<int, PageItem<T>> _pages;
    private int _neighborDepth;
    public int Count { get; }
    public T Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object SyncRoot { get; }
    public bool IsSynchronized { get; }
    public VirtualizedList`1(IVirtualizedListDataProvider`1<T> dataProvider, int pageSize, int maxPages);
    private void RequestPage(int pageIndex, int loadNeighbors);
    private void TrimPages();
    public virtual int get_Count();
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TraceLogPackage.SummaryPage.VirtualizedList`1/<GetEnumerator>d__18")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual object get_SyncRoot();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual void Add(T item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    public sealed virtual void Clear();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public sealed virtual int IndexOf(T item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual bool Remove(T item);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
internal class Microsoft.VisualStudio.TraceLogPackage.SummaryPage.WebViewInformationProvider : object {
    public FileVersionInfo IEProductVersion { get; }
    public sealed virtual FileVersionInfo get_IEProductVersion();
}
internal static class Microsoft.VisualStudio.TraceLogPackage.SymbolPathHelper : object {
    public static bool CanDebugWithPerSessionSymbolPath(IInternetSecurityManager securityManager, string perSessionSymbolPath, String& useSessionSymbolPath);
    private static bool IsSymbolPathTrusted(IInternetSecurityManager mgr, string path);
    private static Nullable`1<bool> AllowUntrustedSymbolPath(IServiceProvider sp, string path);
    private static bool IsPathSetInEnvironmentSymbolsPath(IServiceProvider sp, string path);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Targets.ExeTarget : ProteusTarget {
    private static BoundedDictionary`2<VsDebugTargetProcessInfo, bool> s_knownProcesses;
    private VsDebugTargetInfo4 _modifiedTarget;
    private static ExeTarget();
    protected ExeTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options, CollectionPlanStore collectionPlanStore, string uniqueId);
    protected virtual void Dispose(bool disposing);
    public static bool RemoveKnownProcesses();
    internal static ExeTarget WrapTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options, CollectionPlanStore collectionPlanStore);
    internal static void OnToolsOptionPageChanged(object sender, EventArgs e);
    internal virtual bool OnBeforeLaunch();
    internal virtual VsDebugTargetInfo4 GetNewTargetInfo();
    internal virtual void OnAfterLaunch(int hr, VsDebugTargetProcessInfo& targetProcessInfo);
    private static bool IsVsHostOnHigh(ToolsOptionManager options, Boolean& isVsHostOnHigh);
    private static bool TargetRequiresNewCollectionPlan(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options);
    internal static bool IsProcessRecycleRequired(VsDebugTargetProcessInfo targetProcessInfo, ToolsOptionManager newOptions);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Targets.LaunchSettingsCallback : ComMarshal {
    private string _cpPath;
    private string _loggerName;
    private CLR_VERSION _clrVersion;
    internal LaunchSettingsCallback(string cpPath, string loggerName, CLR_VERSION clrVersion);
    public sealed virtual int GetTraceLaunchSettings(TRACE_LAUNCH_SETTINGS[] launchSettings);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Targets.NoopTarget : ProteusTarget {
    private NoopTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager launchOptions, CollectionPlanStore collectionPlanStore);
    internal static NoopTarget WrapTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options, CollectionPlanStore collectionPlanStore);
    internal virtual bool OnBeforeLaunch();
    internal virtual VsDebugTargetInfo4 GetNewTargetInfo();
    internal virtual void OnAfterLaunch(int hr, VsDebugTargetProcessInfo& targetProcessInfo);
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.Targets.ProteusTarget : object {
    private static string _guidCppProjectTypeString;
    private static Char[] _invalidPathChars;
    private static string _presentationHostExePath;
    protected ToolsOptionManager _launchOptions;
    protected VsDebugTargetInfo4 _originalTarget;
    protected CollectionPlanStore _cpStore;
    [CompilerGeneratedAttribute]
private string <UniqueDebugTargetId>k__BackingField;
    protected string UniqueDebugTargetId { get; private set; }
    protected ProteusTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager launchOptions, CollectionPlanStore collectionPlanStore, string uniqueId);
    private static ProteusTarget();
    [CompilerGeneratedAttribute]
protected string get_UniqueDebugTargetId();
    [CompilerGeneratedAttribute]
private void set_UniqueDebugTargetId(string value);
    internal static ProteusTarget WrapTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options, CollectionPlanStore collectionPlanStore);
    private static bool GetRegistryHookValue(string allowType);
    protected static bool IsEngineSupported(Guid engineGuid, ToolsOptionManager options);
    protected static bool IsDloSupportedCreateProcess(UInt32 dlo, ToolsOptionManager options);
    protected static bool IsDloCreateProcess(UInt32 dlo);
    protected static bool IsDloSupportedAttach(UInt32 dlo);
    protected static bool IsDloSupported(UInt32 dlo, ToolsOptionManager options);
    internal static bool TargetSupportsProteus(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options);
    private static bool IsLocalConnection(VsDebugTargetInfo4& targetInfo);
    protected static ClrVersionAttachOptions GetClrVersionToAttach(VsDebugTargetInfo4& targetInfo);
    protected static VsDebugTargetInfo4 TransformTarget(VsDebugTargetInfo4& targetInfo, string cpPath, string uniqueDebugTargetId, ToolsOptionManager options);
    protected static void CleanupTargetInfo(VsDebugTargetInfo4& targetInfo);
    public static UInt32 GetTargetPid(VsDebugTargetInfo4& targetInfo);
    private static IntPtr BuildEngineFilter(UInt32 engineCount, IntPtr originalEngineFilter);
    private static void MemCpy(IntPtr dstPtr, IntPtr srcPtr, int cb);
    private static bool IsTargetProjectOfSupportedType(VsDebugTargetInfo4 targetInfo);
    private static bool CheckSupportedProjectBasedOnExePath(VsDebugTargetInfo4 targetInfo);
    internal static string BinaryFromConfiguration(IVsHierarchy hier, IVsProjectCfg2 cfg);
    protected static string BuildAspNetTarget(IVsHierarchy hier);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal abstract virtual bool OnBeforeLaunch();
    internal abstract virtual VsDebugTargetInfo4 GetNewTargetInfo();
    internal abstract virtual void OnAfterLaunch(int hr, VsDebugTargetProcessInfo& targetProcessInfo);
}
internal class Microsoft.VisualStudio.TraceLogPackage.Targets.WebServerTarget : ProteusTarget {
    private VsDebugTargetInfo4 _modifiedTarget;
    private bool _fEnableProteus;
    private string _allowListName;
    private static object _sync;
    private static HashSet`1<string> _instrumentedAppPools;
    private static Dictionary`2<string, WebServerTargetCleaner> _appPoolCleaners;
    private IISEnvironmentInjector _webServerEnvInjector;
    private string _lastAppPoolName;
    private WebServerTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options, CollectionPlanStore collectionPlanStore);
    private static WebServerTarget();
    internal static WebServerTarget WrapTarget(VsDebugTargetInfo4& targetInfo, ToolsOptionManager options, CollectionPlanStore collectionPlanStore);
    internal virtual bool OnBeforeLaunch();
    private void SetLaunchSettings(string cpPath, string loggerName, CLR_VERSION clrVersion);
    internal virtual VsDebugTargetInfo4 GetNewTargetInfo();
    internal virtual void OnAfterLaunch(int hr, VsDebugTargetProcessInfo& targetProcessInfo);
    protected virtual void Dispose(bool disposing);
    private string InstantiateIISInjector(string siteUrl);
    private bool SetupIISEnvironment(string possibleAppPoolName);
    private void CheckIfProfilerEnabled(Boolean& fProfilingEnabled, Boolean& fTraceProfilerFound, Boolean& fOtherProfilerFound);
    private void LaunchEnvCleanupApplet(string appPoolName);
    public static void CleanupIfAppPool(UInt32 dwPid, string processName);
    public static void CleanupAllAppPools();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TimeContextChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DEBUG_TIME_CONTEXT_TYPE <TimeContextType>k__BackingField;
    private ulong _canonicalValue;
    [CompilerGeneratedAttribute]
private bool <IsLiveContext>k__BackingField;
    public DEBUG_TIME_CONTEXT_TYPE TimeContextType { get; }
    public ulong CanonicalValue { get; }
    public bool IsLiveContext { get; }
    public TimeContextChangedEventArgs(IDebugTimeContext100 debugTimeContext);
    [CompilerGeneratedAttribute]
public DEBUG_TIME_CONTEXT_TYPE get_TimeContextType();
    public ulong get_CanonicalValue();
    [CompilerGeneratedAttribute]
public bool get_IsLiveContext();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TimeContextCreatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDebugProcess2 <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugThread2 <Thread>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugTimeContext100 <DebugTimeContext>k__BackingField;
    public IDebugProcess2 Process { get; }
    public IDebugThread2 Thread { get; }
    public IDebugTimeContext100 DebugTimeContext { get; }
    public TimeContextCreatedEventArgs(IDebugProcess2 process, IDebugThread2 thread, IDebugTimeContext100 debugTimeContext);
    [CompilerGeneratedAttribute]
public IDebugProcess2 get_Process();
    [CompilerGeneratedAttribute]
public IDebugThread2 get_Thread();
    [CompilerGeneratedAttribute]
public IDebugTimeContext100 get_DebugTimeContext();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TimeContextRemovedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDebugProcess2 <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugThread2 <Thread>k__BackingField;
    [CompilerGeneratedAttribute]
private IDebugTimeContext100 <DebugTimeContext>k__BackingField;
    public IDebugProcess2 Process { get; }
    public IDebugThread2 Thread { get; }
    public IDebugTimeContext100 DebugTimeContext { get; }
    public TimeContextRemovedEventArgs(IDebugProcess2 process, IDebugThread2 thread, IDebugTimeContext100 debugTimeContext);
    [CompilerGeneratedAttribute]
public IDebugProcess2 get_Process();
    [CompilerGeneratedAttribute]
public IDebugThread2 get_Thread();
    [CompilerGeneratedAttribute]
public IDebugTimeContext100 get_DebugTimeContext();
}
[ComVisibleAttribute("True")]
[GuidAttribute("367bff42-f17a-4ddd-840e-0a3906e90951")]
public class Microsoft.VisualStudio.TraceLogPackage.ToolsOptionAdvanced : UIElementDialogPage {
    private TraceConfigAdvancedSettings m_settings;
    private Lazy`1<AdvancedSettingsControl> m_advancedSettingsControl;
    private bool m_isApply;
    private IToolsOptionTelemetryService m_telemetryService;
    public bool TfsSymbolSearchEnabled { get; public set; }
    public bool LimitEvents { get; public set; }
    public bool SaveRecordings { get; public set; }
    public string RecordingPath { get; public set; }
    public long MaxSizeOfRecordingInBlocks { get; public set; }
    internal bool InstrumentSmallFunctions { get; internal set; }
    public bool DisplayNavigationGutter { get; public set; }
    public bool ShowExternalEvents { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected UIElement Child { get; }
    public bool get_TfsSymbolSearchEnabled();
    public void set_TfsSymbolSearchEnabled(bool value);
    public bool get_LimitEvents();
    public void set_LimitEvents(bool value);
    public bool get_SaveRecordings();
    public void set_SaveRecordings(bool value);
    public string get_RecordingPath();
    public void set_RecordingPath(string value);
    public long get_MaxSizeOfRecordingInBlocks();
    public void set_MaxSizeOfRecordingInBlocks(long value);
    internal bool get_InstrumentSmallFunctions();
    internal void set_InstrumentSmallFunctions(bool value);
    public bool get_DisplayNavigationGutter();
    public void set_DisplayNavigationGutter(bool value);
    public bool get_ShowExternalEvents();
    public void set_ShowExternalEvents(bool value);
    public virtual void LoadSettingsFromStorage();
    protected virtual void OnDeactivate(CancelEventArgs e);
    protected virtual UIElement get_Child();
    protected virtual void OnApply(PageApplyEventArgs e);
    protected virtual void OnClosed(EventArgs e);
    internal void ApplyChanges();
    private void PushSettingsToControl();
    [CompilerGeneratedAttribute]
private AdvancedSettingsControl <.ctor>b__4_0();
}
[ComVisibleAttribute("True")]
[GuidAttribute("c4121f8f-eda8-4154-bbde-47d58c15fbf0")]
public class Microsoft.VisualStudio.TraceLogPackage.ToolsOptionDiagnosticEvents : UIElementDialogPage {
    private TraceConfigDiagnosticEventsSettings m_settings;
    private TraceConfigDiagnosticEventsSettings m_defaultSettings;
    private DiagnosticEventsControl m_diagnosticsEventControl;
    private bool m_hasDiagnosticEventChanged;
    private bool m_isApply;
    internal _HiddenTracePointProvider NotifyPoints { get; }
    internal Dictionary`2<int, bool> NotifyPointEnabledState { get; }
    internal bool HasDiagnosticEventChanged { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected UIElement Child { get; }
    internal _HiddenTracePointProvider get_NotifyPoints();
    internal Dictionary`2<int, bool> get_NotifyPointEnabledState();
    internal bool get_HasDiagnosticEventChanged();
    protected virtual UIElement get_Child();
    public virtual void SaveSettingsToStorage();
    public virtual void LoadSettingsFromStorage();
    protected virtual void OnApply(PageApplyEventArgs e);
    protected virtual void OnClosed(EventArgs e);
    internal void ApplyChanges();
    internal void ResetToDefaultSettings();
}
[ComVisibleAttribute("True")]
[GuidAttribute("b0ef32e4-b748-472b-be61-1095ac8f6f7d")]
public class Microsoft.VisualStudio.TraceLogPackage.ToolsOptionGeneral : UIElementDialogPage {
    private TraceConfigGeneralSettings m_settings;
    private GeneralSettingsControl m_generalSettingsControl;
    private IToolsOptionTelemetryService m_telemetryService;
    private bool m_isApply;
    [DesignerSerializationVisibilityAttribute("0")]
public bool IntelliTraceEnabled { get; public set; }
    public bool EnableSnapshot { get; public set; }
    public bool EnableSnapshotOnException { get; public set; }
    public UInt32 MaxSnapshotOnException { get; public set; }
    public UInt32 PromptSnapshot { get; public set; }
    public bool EnableInstrumentation { get; public set; }
    internal bool PromptSnapshotPromotion { get; }
    internal bool PromptSnapshotReenable { get; }
    internal bool PromptSnapshotAutoDisabled { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected UIElement Child { get; }
    private bool IsIntelliTraceEnabled();
    private bool IsIntelliTraceSnapshotEnabled();
    private bool IsIntelliTraceSnapshotOnExceptionEnabled();
    private UInt32 GetMaxIntelliTraceSnapshotOnException();
    private UInt32 GetIntelliTraceSnapshotPromptOption();
    private bool IsIntelliTraceInstrumentationEnabled();
    public bool get_IntelliTraceEnabled();
    public void set_IntelliTraceEnabled(bool value);
    public bool get_EnableSnapshot();
    public void set_EnableSnapshot(bool value);
    public bool get_EnableSnapshotOnException();
    public void set_EnableSnapshotOnException(bool value);
    public UInt32 get_MaxSnapshotOnException();
    public void set_MaxSnapshotOnException(UInt32 value);
    public UInt32 get_PromptSnapshot();
    public void set_PromptSnapshot(UInt32 value);
    public bool get_EnableInstrumentation();
    public void set_EnableInstrumentation(bool value);
    internal bool get_PromptSnapshotPromotion();
    internal bool get_PromptSnapshotReenable();
    internal bool get_PromptSnapshotAutoDisabled();
    protected sealed virtual void LoadSettingFromStorage(PropertyDescriptor prop);
    protected virtual UIElement get_Child();
    protected virtual void OnApply(PageApplyEventArgs e);
    protected virtual void OnClosed(EventArgs e);
    protected virtual void OnDeactivate(CancelEventArgs e);
    internal void ApplyChanges();
    private void SaveSettings(PageApplyEventArgs e, bool shouldSaveDebuggerOptions);
    private void RecordTelemetryData(TraceConfigGeneralSettings oldSettings, TraceConfigGeneralSettings newSettings);
}
internal class Microsoft.VisualStudio.TraceLogPackage.ToolsOptionManager : object {
    private Func`1<ToolsOptionGeneral> _generalSettingsGetter;
    private Func`1<ToolsOptionModule> _moduleSettingsGetter;
    private Func`1<ToolsOptionDiagnosticEvents> _diagnosticsEventSettingsGetter;
    private Func`1<ToolsOptionAdvanced> _advancedSettingsGetter;
    internal ToolsOptionGeneral GeneralSettings { get; }
    internal ToolsOptionModule ModuleSettings { get; }
    internal ToolsOptionDiagnosticEvents DiagnosticEventSettings { get; }
    internal ToolsOptionAdvanced AdvancedSettings { get; }
    internal ToolsOptionManager(Func`1<ToolsOptionGeneral> generalSettingsGetter, Func`1<ToolsOptionModule> moduleSettingsGetter, Func`1<ToolsOptionDiagnosticEvents> diagnosticEventSettingsGetter, Func`1<ToolsOptionAdvanced> advancedSettingsGetter);
    internal ToolsOptionGeneral get_GeneralSettings();
    internal ToolsOptionModule get_ModuleSettings();
    internal ToolsOptionDiagnosticEvents get_DiagnosticEventSettings();
    internal ToolsOptionAdvanced get_AdvancedSettings();
}
[ComVisibleAttribute("True")]
[GuidAttribute("d399fea5-f283-4b70-99e2-f3e236b402d3")]
public class Microsoft.VisualStudio.TraceLogPackage.ToolsOptionModule : UIElementDialogPage {
    private TraceConfigExclusionListSettings m_settings;
    private TraceConfigExclusionListSettings m_defaultSettings;
    private ExclusionListControl m_moduleListControl;
    private TraceConfigDialogStyle m_traceConfigDialogStyle;
    private bool m_isApply;
    public bool IsExclusionList { get; public set; }
    internal List`1<string> ModuleList { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected UIElement Child { get; }
    public bool get_IsExclusionList();
    public void set_IsExclusionList(bool value);
    internal List`1<string> get_ModuleList();
    protected virtual UIElement get_Child();
    protected virtual void OnApply(PageApplyEventArgs e);
    protected virtual void OnClosed(EventArgs e);
    public virtual void SaveSettingsToStorage();
    public virtual void LoadSettingsFromStorage();
    internal void ApplyChanges();
}
[GuidAttribute("0f3cf5e8-b28f-4f4c-90f5-9d06a253f263")]
public class Microsoft.VisualStudio.TraceLogPackage.TraceDebuggerService : object {
    public sealed virtual int ExecuteStepInto();
    public sealed virtual int ExecuteStepOut();
    public sealed virtual int ExecuteStepOver();
    public sealed virtual int IsStepIntoAvailable();
    public sealed virtual int IsStepOutAvailable();
    public sealed virtual int IsStepOverAvailable();
    public sealed virtual int IsTDLogDebugging();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceEventInfo : object {
    [CompilerGeneratedAttribute]
private ulong <DebuggerId>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NotifyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <QpcTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TRACE_EVENT_INFO_FLAGS <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ExtendedDebuggerProperties>k__BackingField;
    public ulong DebuggerId { get; private set; }
    public ulong EventId { get; private set; }
    public long NotifyId { get; private set; }
    public string Name { get; private set; }
    public UInt32 ThreadId { get; private set; }
    public string MethodName { get; private set; }
    public string Description { get; private set; }
    public string EventType { get; private set; }
    public string Category { get; private set; }
    public string DebugLocation { get; private set; }
    public ulong QpcTime { get; private set; }
    public TRACE_EVENT_INFO_FLAGS Flags { get; private set; }
    public IDictionary`2<string, string> ExtendedDebuggerProperties { get; private set; }
    public TraceEventInfo(TRACE_EVENT_INFO baseInfo);
    [CompilerGeneratedAttribute]
public ulong get_DebuggerId();
    [CompilerGeneratedAttribute]
private void set_DebuggerId(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_EventId();
    [CompilerGeneratedAttribute]
private void set_EventId(ulong value);
    [CompilerGeneratedAttribute]
public long get_NotifyId();
    [CompilerGeneratedAttribute]
private void set_NotifyId(long value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_ThreadId();
    [CompilerGeneratedAttribute]
private void set_ThreadId(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_EventType();
    [CompilerGeneratedAttribute]
private void set_EventType(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_DebugLocation();
    [CompilerGeneratedAttribute]
private void set_DebugLocation(string value);
    [CompilerGeneratedAttribute]
public ulong get_QpcTime();
    [CompilerGeneratedAttribute]
private void set_QpcTime(ulong value);
    [CompilerGeneratedAttribute]
public TRACE_EVENT_INFO_FLAGS get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(TRACE_EVENT_INFO_FLAGS value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ExtendedDebuggerProperties();
    [CompilerGeneratedAttribute]
private void set_ExtendedDebuggerProperties(IDictionary`2<string, string> value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.TraceEventInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsBreakEvent(TraceEventInfo traceEventInfo);
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceEventQueryManager : object {
    private HistoricalDataManager _historicalDataMgr;
    private IDebugTraceEventQuery100 _traceEventQuery;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isTraceEventQueryInUse;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _releaseTraceEventQuery;
    public static int PageSize;
    public static int EnumChildrenTimeout;
    public bool IsQueryAvailable { get; }
    internal TraceEventQueryManager(HistoricalDataManager historicalDataMgr, IDebugTraceEventQuery100 traceEventQuery);
    public bool get_IsQueryAvailable();
    internal void ReleaseComInterface();
    public List`1<TraceEventInfo> FetchForward(int celt);
    internal bool GetIsQueryRefreshRequired();
    internal TraceEventInfo GetLastVisibleEvent();
    public void ResetToBeginning();
    public void ResetToEnd();
    public void UpdateCountAndCache();
    public UInt32 GetCount();
    public bool TrySkipForward(UInt32 count, UInt32& countSkipped);
    private bool TrySkipForward(UInt32 count, bool fUseFilter, UInt32& countSkipped);
    public bool TrySkipBackward(UInt32 count, UInt32& countSkipped);
    private bool TrySkipBackward(UInt32 count, bool fUseFilter, UInt32& countSkipped);
    internal int GetTimeContextOfEvent(ulong eventId, IDebugTimeContext100& timeContext);
    private void ReleaseTraceEventQuery();
    private List`1<TraceEventInfo> GetExtendedEventInformation(IEnumerable`1<TRACE_EVENT_INFO> infoList);
    private TraceEventInfo GetExtendedEventInformation(TRACE_EVENT_INFO baseInfo);
    private static bool VerifyHResult(int hr);
    private static bool VerifyHResult(int hr, string message);
    private static bool IsExpectedFailure(int hr);
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogDocument : WindowPane {
    private ManualResetEventSlim _loadedSignal;
    private IOpenProjectsRequest _associatedRequest;
    private string _symbolPath;
    private bool _buildInfoLoaded;
    private bool _hasBuildInfoStream;
    internal static string VirtualDocumentSeparator;
    private TraceLogGlobalState _traceLogGlobalState;
    private TraceLogMasterPage _masterPage;
    private bool _shouldNextDebugSessionDefaultShowExternal;
    [CompilerGeneratedAttribute]
private RefCountingDisposer <RefCountingDisposer>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLogMasterPageController <TraceLogMasterPageController>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClosed>k__BackingField;
    [CompilerGeneratedAttribute]
private IntelliTraceFile <TraceLogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <TraceLog>k__BackingField;
    public string LogFile { get; }
    public bool HasProjectBuildInformation { get; }
    public bool HasSymbolPathBuildInformation { get; }
    public bool IsLoaded { get; }
    public bool HasInvalidBuildInfo { get; }
    private IVsTaskSchedulerService TaskScheduler { get; }
    public bool HasSystemInfo { get; }
    public LogSystemInfo SystemInfo { get; }
    public RefCountingDisposer RefCountingDisposer { get; private set; }
    public TraceLogMasterPageController TraceLogMasterPageController { get; private set; }
    public string FileName { get; private set; }
    public bool IsClosed { get; private set; }
    public IntelliTraceFile TraceLogFile { get; private set; }
    public TraceLog TraceLog { get; private set; }
    public object Content { get; }
    private StatusCodes TfsSymbolStatusCode { get; }
    public TraceLogDocument(string logFileName);
    public sealed virtual string get_LogFile();
    public sealed virtual bool get_HasProjectBuildInformation();
    public bool get_HasSymbolPathBuildInformation();
    public sealed virtual bool get_IsLoaded();
    public sealed virtual bool get_HasInvalidBuildInfo();
    public sealed virtual IOpenProjectsRequest GetRequestFromBuildInformation();
    public string GetSymbolPathBuildInformation();
    public sealed virtual void RemoveOpenProjectCommand();
    public sealed virtual IVsTask GetAsyncLoadTaskAwaiter();
    public sealed virtual void SignalDocumentLoaded();
    private IVsTaskSchedulerService get_TaskScheduler();
    internal void LoadBuildInfo();
    private XDocument SafeExtractBuildInformation(TraceLogReader logReader);
    public bool get_HasSystemInfo();
    public LogSystemInfo get_SystemInfo();
    [CompilerGeneratedAttribute]
public sealed virtual RefCountingDisposer get_RefCountingDisposer();
    [CompilerGeneratedAttribute]
private void set_RefCountingDisposer(RefCountingDisposer value);
    [CompilerGeneratedAttribute]
public TraceLogMasterPageController get_TraceLogMasterPageController();
    [CompilerGeneratedAttribute]
private void set_TraceLogMasterPageController(TraceLogMasterPageController value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
private void set_IsClosed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IntelliTraceFile get_TraceLogFile();
    [CompilerGeneratedAttribute]
private void set_TraceLogFile(IntelliTraceFile value);
    [CompilerGeneratedAttribute]
public sealed virtual TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
private void set_TraceLog(TraceLog value);
    public sealed virtual void CloseDocumentsOnFailure();
    private void InitializeUI(int performanceDataId);
    public virtual object get_Content();
    public sealed virtual int Close();
    public sealed virtual int GetGuidEditorType(Guid& pClassID);
    public sealed virtual int IsDocDataDirty(Int32& pfDirty);
    public sealed virtual int IsDocDataReloadable(Int32& pfReloadable);
    public sealed virtual int LoadDocData(string pszMkDocument);
    public sealed virtual int OnRegisterDocData(UInt32 docCookie, IVsHierarchy pHierNew, UInt32 itemidNew);
    public sealed virtual int ReloadDocData(UInt32 grfFlags);
    public sealed virtual int RenameDocData(UInt32 grfAttribs, IVsHierarchy pHierNew, UInt32 itemidNew, string pszMkDocumentNew);
    public sealed virtual int SaveDocData(VSSAVEFLAGS dwSave, String& pbstrMkDocumentNew, Int32& pfSaveCanceled);
    public sealed virtual int SetUntitledDocPath(string pszDocDataPath);
    public sealed virtual IDisposable AcquireResourceDelayDisposer();
    public sealed virtual void LaunchDebugging(long ordinal, int loggerThreadId, WebRequestInfo request);
    public sealed virtual void LaunchDebugging(long ordinal, int loggerThreadId, WebRequestFilterInfo webRequestFilterInfo);
    public sealed virtual void LaunchHistoricalDebugSession(DisplayThreadData jumpThread);
    public sealed virtual void LaunchHistoricalDebugSession(DisplayExceptionData exceptionData);
    public sealed virtual void LaunchHistoricalDebugSession(DisplayTestStep testStep);
    public sealed virtual void SetOverrideShowExternalEvents();
    private FilteringMode GetFilteringMode(WebRequestInfo request);
    private StatusCodes get_TfsSymbolStatusCode();
    private void PerformLaunch(long ordinal, int loggerThreadId, WebRequestFilterInfo webRequestFilterInfo, bool isExceptionDebugging);
    public static string ConstructDocumentFileName(string baseName, int id);
    public static void ParseFileName(string documentName, String& fileName, Int32& index);
    [CompilerGeneratedAttribute]
private void <GetAsyncLoadTaskAwaiter>b__18_0();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogDocumentOptions : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSharePointData>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeZoneOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <QpcStart>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <QpcFrequency>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    public string FileName { get; public set; }
    public bool HasSharePointData { get; public set; }
    public TimeSpan TimeZoneOffset { get; public set; }
    public ulong QpcStart { get; internal set; }
    public ulong QpcFrequency { get; internal set; }
    public DateTime StartTime { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public bool get_HasSharePointData();
    [CompilerGeneratedAttribute]
public void set_HasSharePointData(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeZoneOffset();
    [CompilerGeneratedAttribute]
public void set_TimeZoneOffset(TimeSpan value);
    [CompilerGeneratedAttribute]
public ulong get_QpcStart();
    [CompilerGeneratedAttribute]
internal void set_QpcStart(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_QpcFrequency();
    [CompilerGeneratedAttribute]
internal void set_QpcFrequency(ulong value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
internal void set_StartTime(DateTime value);
}
[GuidAttribute("4830b508-896d-456a-9132-3b9cbf61d65c")]
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogEditorFactory : object {
    private IServiceProvider _serviceProvider;
    public sealed virtual int Close();
    public sealed virtual int CreateEditorInstance(UInt32 grfCreateDoc, string pszMkDocument, string pszPhysicalView, IVsHierarchy pvHier, UInt32 itemid, IntPtr punkDocDataExisting, IntPtr& ppunkDocView, IntPtr& ppunkDocData, String& pbstrEditorCaption, Guid& pguidCmdUI, Int32& pgrfCDW);
    public sealed virtual int MapLogicalView(Guid& rguidLogicalView, String& pbstrPhysicalView);
    public sealed virtual int SetSite(IServiceProvider psp);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogMasterPage : UserControl {
    private FwlinkHelper _fwlinkHelper;
    [CompilerGeneratedAttribute]
private Action <LoadTfsSymbolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<bool> <CancelTfsSymbolPathLoading>k__BackingField;
    private TraceLogPageComponent _childComponent;
    internal ScrollViewer _scrollViewer;
    internal Grid LayoutRoot;
    internal ContentPresenter goldBar;
    internal Grid StatusMessages;
    internal Grid TfsSymbolPathBusySpinner;
    internal ContentControl ContentHost;
    private bool _contentLoaded;
    public Action LoadTfsSymbolPath { get; public set; }
    public Func`1<bool> CancelTfsSymbolPathLoading { get; public set; }
    public TraceLogPageComponent ChildComponent { get; public set; }
    private string EnterpriseSkuUrl { get; }
    [CompilerGeneratedAttribute]
public Action get_LoadTfsSymbolPath();
    [CompilerGeneratedAttribute]
public void set_LoadTfsSymbolPath(Action value);
    [CompilerGeneratedAttribute]
public Func`1<bool> get_CancelTfsSymbolPathLoading();
    [CompilerGeneratedAttribute]
public void set_CancelTfsSymbolPathLoading(Func`1<bool> value);
    public TraceLogPageComponent get_ChildComponent();
    public void set_ChildComponent(TraceLogPageComponent value);
    private string get_EnterpriseSkuUrl();
    public sealed virtual void Dispose();
    private void OnRetryButtonClicked(object sender, RoutedEventArgs e);
    private void StatusMessageHyperlink_Click(object sender, RoutedEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogMasterPageController : object {
    private bool _isDisposed;
    private IVsTask _loadLogDataTask;
    private IntelliTraceProcess _process;
    private Nullable`1<FileVersionInfo> _fileVersionInfo;
    private bool _isValidDocument;
    private ITraceLogDocumentProvider _documentProvider;
    private IBuildInformationSource _buildInformationSource;
    private IHistoricalDebugActions _debugActions;
    private TraceLogGlobalState _traceLogGlobalState;
    private RefCountingDisposer _refCountingDisposer;
    private GoldBarViewModel _goldBar;
    private GoldBarGroup _openProjectGroup;
    private OpenProjectGoldBarAction _openProjectAction;
    private GoldBarGroup _displayWarningGroup;
    private GoldBarAction _displayWarningAction;
    private ICommandUpdateService _commandUpdateService;
    private TestRunContextEvent _tfsContext;
    private bool _attemptedGetTfsContext;
    private static string DependentAssemblyName;
    private static string SymbolPathResolverType;
    private ITfsSymbolPathResolver _symbolPathResolver;
    private bool _attemptedCreateSymbolPathResolver;
    private IVsTask _tfsSymbolPathResolverTask;
    private IVsTask _loadTfsSymbolTask;
    [CompilerGeneratedAttribute]
private TraceLogSummaryAnalysisRepository <AnalysisRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionSymbolPath>k__BackingField;
    public GoldBarViewModel GoldBarViewModel { get; }
    private FileVersionInfo FileVersionInfo { get; }
    public TraceLogSummaryAnalysisRepository AnalysisRepository { get; private set; }
    public string SessionSymbolPath { get; private set; }
    private bool DocumentHasTfsContext { get; }
    private TestRunContextEvent GetTfsContext { get; }
    private bool TfsSymbolSearchEnabled { get; }
    private bool HasSymbolPathBuildInformation { get; }
    public TraceLogMasterPageController(ITraceLogDocumentProvider documentProvider, IBuildInformationSource buildInformationSource, IHistoricalDebugActions debugActions, TraceLogGlobalState traceLogGlobalState);
    public TraceLogMasterPageController(ITraceLogDocumentProvider documentProvider, IBuildInformationSource buildInformationSource, IHistoricalDebugActions debugActions, TraceLogGlobalState traceLogGlobalState, ICommandUpdateService commandUpdateService, ICommand openProjectCommand, ICommand displayWarningCommand);
    private TraceLogMasterPageController(ITraceLogDocumentProvider documentProvider, IBuildInformationSource buildInformationSource, IHistoricalDebugActions debugActions, TraceLogGlobalState traceLogGlobalState, ICommandUpdateService commandUpdateService);
    public GoldBarViewModel get_GoldBarViewModel();
    private FileVersionInfo get_FileVersionInfo();
    [CompilerGeneratedAttribute]
public TraceLogSummaryAnalysisRepository get_AnalysisRepository();
    [CompilerGeneratedAttribute]
private void set_AnalysisRepository(TraceLogSummaryAnalysisRepository value);
    public TraceLogMasterPage CreateMasterPage();
    public void InitializeMasterPageForTraceLogDocument(TraceLogMasterPage masterPage, OleMenuCommandService focusCommandService, IHelpService helpService, int performanceDataId);
    public void InitializeMasterPageForPerformanceDetailPage(TraceLogMasterPage masterPage, PerformanceDataViewModel performanceDataViewModel, OleMenuCommandService focusCommandService);
    public void SetDocumentValidity(bool isValidDocument);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private TraceLogPageComponentSource LoadLogData(TraceLog traceLog, TraceLogMasterPage masterPage);
    private void PostLoadingLogData(IVsTask task, TraceLogPageComponent pageComponent, TraceLogMasterPage masterPage, TraceLogMasterPageViewModel masterPageViewModel, IHelpService helpService);
    private void SetFileLogTimeString(LogSystemInfo systemInfo, TraceLogMasterPageViewModel masterPageViewModel);
    private void UpdateFileVersionStatus(TraceLogMasterPageViewModel masterPageViewModel);
    private void OnTraceLogDataChanged();
    private void InitializeGoldbar(ICommand openSolutionCommand, ICommand displayWarningCommand);
    private void CleanupOpenProjectCommand();
    internal void RemoveOpenProjectCommand();
    private void RecalculateVisibilityHelper(GoldBarAction action, GoldBarGroup group);
    private void RecalculateOpenProjectVisibility();
    private void RecalculateGoldbarVisibility();
    private void RecalculateDisplayWarningVisibility();
    private void OnOpenProjectActionCanExecuteChanged(object sender, EventArgs e);
    private static void OpenLearnMoreOnIE();
    [CompilerGeneratedAttribute]
public string get_SessionSymbolPath();
    [CompilerGeneratedAttribute]
private void set_SessionSymbolPath(string value);
    public void LoadTfsSymbolPath(TraceLogMasterPage masterPage, TraceLogMasterPageViewModel masterPageViewModel);
    public bool CancelTfsSymbolPathLoading(TraceLogMasterPage masterPage, TraceLogMasterPageViewModel masterPageViewModel);
    private void SetTfsSymbol(TraceLogMasterPage masterPage, TraceLogMasterPageViewModel masterPageViewModel);
    private void LoadTfsSymbol(TraceLogMasterPage masterPage, TraceLogMasterPageViewModel masterPageViewModel);
    private void CleanupTfsSupport();
    private bool get_DocumentHasTfsContext();
    private TestRunContextEvent get_GetTfsContext();
    private ITfsSymbolPathResolver CreateSymbolPathResolver();
    private static void ResolveTfsSymbolPath(TfsSymbolPathWorkerState state);
    private void PostResolvingTfsSymbolPath(IVsTask task, TraceLogMasterPage masterPage, TraceLogMasterPageViewModel masterPageViewModel);
    private bool get_TfsSymbolSearchEnabled();
    private bool get_HasSymbolPathBuildInformation();
    private string GetSymbolPathBuildInformation();
    private static T CreateDynamicType(string assemblyName, string typeName);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__33_1(object Param);
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogMasterPageViewModel : TraceLogViewModelBase {
    private bool _allDataLoaded;
    private string _titleString;
    private string _subTitleString;
    private GoldBarViewModel _goldBar;
    private ObservableCollection`1<StatusMessage> _statusMessageList;
    private StatusCodes _tfsSymbolStatus;
    private string _tfsSymbolPathStatusDescription;
    public bool AllDataLoaded { get; public set; }
    public string TitleString { get; public set; }
    public string SubTitleString { get; public set; }
    public GoldBarViewModel GoldBarModel { get; public set; }
    public ObservableCollection`1<StatusMessage> StatusMessageList { get; public set; }
    public StatusCodes TfsSymbolPathStatus { get; public set; }
    public string TfsSymbolPathStatusDescription { get; public set; }
    public bool get_AllDataLoaded();
    public void set_AllDataLoaded(bool value);
    public string get_TitleString();
    public void set_TitleString(string value);
    public string get_SubTitleString();
    public void set_SubTitleString(string value);
    public GoldBarViewModel get_GoldBarModel();
    public void set_GoldBarModel(GoldBarViewModel value);
    public ObservableCollection`1<StatusMessage> get_StatusMessageList();
    public void set_StatusMessageList(ObservableCollection`1<StatusMessage> value);
    public StatusCodes get_TfsSymbolPathStatus();
    public void set_TfsSymbolPathStatus(StatusCodes value);
    public string get_TfsSymbolPathStatusDescription();
    public void set_TfsSymbolPathStatusDescription(string value);
}
[ProvideMenuResourceAttribute("1000.ctmenu", "1")]
[ProvideOptionPageAttribute("Microsoft.VisualStudio.TraceLogPackage.ToolsOptionGeneral", "IntelliTrace", "General", "600", "601", "True", "605")]
[ProvideOptionPageAttribute("Microsoft.VisualStudio.TraceLogPackage.ToolsOptionModule", "IntelliTrace", "Modules", "600", "602", "True", "606")]
[ProvideOptionPageAttribute("Microsoft.VisualStudio.TraceLogPackage.ToolsOptionDiagnosticEvents", "IntelliTrace", "IntelliTrace Events", "600", "603", "True", "607")]
[ProvideOptionPageAttribute("Microsoft.VisualStudio.TraceLogPackage.ToolsOptionAdvanced", "IntelliTrace", "Advanced", "600", "604", "True", "608")]
[DefaultRegistryRootAttribute("Software\Microsoft\VisualStudio\15.0")]
[PackageRegistrationAttribute]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideEditorFactoryAttribute("Microsoft.VisualStudio.TraceLogPackage.TraceLogEditorFactory", "501")]
[ProvideEditorExtensionAttribute("Mono.Cecil.CustomAttributeArgument", ".iTrace", "10")]
[ProvideEditorFactoryAttribute("Microsoft.VisualStudio.TraceLogPackage.SummaryPage.DetailsEditorFactory", "502")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[ProvideServiceAttribute("Mono.Cecil.CustomAttributeArgument")]
[GuidAttribute("494b203e-3c94-40ab-b331-6cb32460b617")]
public class Microsoft.VisualStudio.TraceLogPackage.TraceLogPackage : Package {
    private DetailsViewSelector _detailsViewSelector;
    private bool m_inErrorState;
    private _CollectionPlan m_cpFile;
    private ToolsOptionManager m_toolsOptionManager;
    private OleMenuCommandService m_menuService;
    private IVsTextManager m_textManager;
    internal static string iTraceExtension;
    private UInt32 m_SolutionEventsCookie;
    private IVsDebugger m_debuggerService;
    private IVsDebugger2 m_debugger2Service;
    private DTE m_dte;
    private DebuggerEvents m_debuggerEvents;
    private DebuggerEventsHandler m_debugCallbackHandler;
    private bool m_isDebugCallbackRegistered;
    private bool m_IsDebuggerSessionInitialized;
    private bool m_IsDebuggerEditorMarginLoaded;
    public static string c_IntelliTraceEditorAssetLoaderName;
    private UInt32 m_cookieDebuggerEvents;
    private UInt32 _cookieVsBroadcastMessage;
    private Dictionary`2<DEBUGGER_OPTIONS, UInt32> m_debuggerOptions;
    private ProcessCentricHistoricalDataManager m_historicalDataMgr;
    private InfoBarManager m_historicalModeInfoBarManager;
    private InfoBarManager m_snapshotInfoBarManager;
    private string m_vsRegistryRoot;
    private IpcChannel myChannel;
    private static string s_collectionPlanXmlFilename;
    private static TraceLogPackage s_instance;
    private Dispatcher m_testHookDispatcher;
    private SearchDataContext _searchContext;
    private string _saveTraceDirectory;
    private ProjectOpener _projectOpener;
    private CodeMapCallTree _codeMapCallTree;
    private Lazy`1<DiagnosticTelemetryService> _debuggingTelemetryService;
    private Lazy`1<AppInsightsLogPlaybackTelemetryService> _logPlaybackTelemetryService;
    private IIntelliTraceSnapshotService _intelliTraceSnapshotService;
    private StepBackwardService _stepBackwardService;
    private bool _isInHistoricalMode;
    private Func`1<bool> _goToLiveMode;
    [CompilerGeneratedAttribute]
private bool <IntelliTraceSupportedDebugTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private DBGMODE <DebugMode>k__BackingField;
    [CompilerGeneratedAttribute]
private _CollectionPlan <CollectionPlan>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLogDocumentOptions <ActiveDocumentOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private WebRequestFilterInfo <WebRequestFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private IProteusSourceIntegration <SourceIntegration>k__BackingField;
    [CompilerGeneratedAttribute]
private CollectionPlanStore <CollectionPlanStore>k__BackingField;
    private Dictionary`2<string, string> _tfsSymbolPaths;
    [CompilerGeneratedAttribute]
private EventHandler DebugContextChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<TimeContextChangedEventArgs> IntelliTraceTimeContextChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DebugModeChangedEventArgs> DebugModeChanged;
    [CompilerGeneratedAttribute]
private EventHandler ToolsOptionChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<DebuggerOptionChangedEventArgs> DebuggerOptionChanged;
    [CompilerGeneratedAttribute]
private EventHandler MarginItemsContextChanged;
    [CompilerGeneratedAttribute]
private EventHandler ExitingBreakMode;
    [CompilerGeneratedAttribute]
private EventHandler CurrentProcessChanged;
    [CompilerGeneratedAttribute]
private EventHandler CurrentFrameChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<ProcessLoadCompleteEventArgs> ProcessLoadComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<VsBroadcastMsgEventArgs> VsBroadcastMsgReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<UIRefreshRequestedEventArgs> UIRefreshRequested;
    [CompilerGeneratedAttribute]
private EventHandler`1<Guid> ProcessDestroyed;
    [CompilerGeneratedAttribute]
private EventHandler`1<EnterBreakStateEventArgs> EnterBreakState;
    [CompilerGeneratedAttribute]
private EventHandler`1<DBGMODE> ShellModeChanged;
    private ActionExtensions _actionExtensions;
    [CompilerGeneratedAttribute]
private object <Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.ContextData>k__BackingField;
    internal static int InvalidPerformanceDataId;
    private DetailsViewSelector DetailsViewSelector { get; }
    private bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.IsPackageInNonErrorBreakOrRunMode { get; }
    private bool IsPackageInNonErrorBreakOrRunMode { get; }
    private bool IsPackageInBreakOrRunMode { get; }
    private bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.IsIntelliTraceAttach { get; }
    private bool IsIntelliTraceAttach { get; }
    private bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.IsInstrumentationEnabled { get; }
    private bool IsInstrumentationEnabled { get; }
    private bool CurrentProcessHasSearchQueryTransport { get; }
    internal ProjectOpener ProjectOpenerInstance { get; }
    private IIntelliTraceSnapshotService IntelliTraceSnapshotService { get; }
    private IStepBackwardService StepBackwardService { get; }
    private bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.IsInHistoricalMode { get; }
    internal static TraceLogPackage Instance { get; }
    internal DebuggerEventsHandler DebuggerEventsHandler { get; }
    internal CodeMapCallTree CodeMapCallTree { get; }
    internal OleMenuCommandService MenuService { get; }
    internal DTE DTE { get; }
    internal bool IntelliTraceSupportedDebugTargets { get; internal set; }
    internal IVsTextManager TextManager { get; }
    internal string RegistryRoot { get; }
    internal HistoricalDataManager HistoricalDataManager { get; }
    internal InfoBarManager HistoricalModeInfoBarManager { get; }
    internal InfoBarManager SnapshotInfoBarManager { get; }
    internal int CurrentLoggerThreadID { get; }
    internal DBGMODE DebugMode { get; private set; }
    private Dictionary`2<DEBUGGER_OPTIONS, UInt32> DebuggerOptions { get; }
    internal ToolsOptionGeneral GeneralSettings { get; }
    internal ToolsOptionModule ModuleSettings { get; }
    internal ToolsOptionDiagnosticEvents DiagnosticEventSettings { get; }
    internal ToolsOptionAdvanced AdvancedSettings { get; }
    internal ToolsOptionManager ToolsOptionManager { get; }
    internal _CollectionPlan CollectionPlanFile { get; }
    internal _CollectionPlan CollectionPlan { get; internal set; }
    internal IVsUIShell VsUIShell { get; }
    internal IVsUIShell2 VsUIShell2 { get; }
    internal IVsShell VsShell { get; }
    internal IVsRunningDocumentTable VsRunningDocumentTable { get; }
    private IVsMonitorSelection VsMonitorSelection { get; }
    private bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.IsPackageInBreakMode { get; }
    internal bool IsPackageInBreakMode { get; }
    internal bool IsPackageInRunMode { get; }
    private bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.IsLiveDebuggingWithIntelliTrace { get; }
    internal bool IsLiveDebuggingWithIntelliTrace { get; }
    private bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.IsTraceLogLoaded { get; }
    internal bool IsTraceLogLoaded { get; }
    internal string TraceLogFilename { get; }
    internal TraceLogDocumentOptions ActiveDocumentOptions { get; internal set; }
    internal WebRequestFilterInfo WebRequestFilter { get; internal set; }
    public IProteusSourceIntegration SourceIntegration { get; private set; }
    internal CollectionPlanStore CollectionPlanStore { get; private set; }
    internal Font EnvironmentFont { get; }
    internal IVsDebugger DebuggerService { get; }
    internal IDebuggerInternal DebuggerInternal { get; }
    internal Dispatcher TestHookDispatcher { get; }
    public SearchDataContext SearchContext { get; private set; }
    internal Dictionary`2<string, string> TfsSymbolPaths { get; }
    internal string IntelliTraceInstallDir { get; }
    internal bool EnableSnapshot { get; }
    internal RegistryKey IntelliTraceKey { get; }
    private bool IsSourceControlEnabled { get; }
    private bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.ProteusEnabled { get; }
    private bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.EnableInstrumentation { get; }
    private bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.DisplayNavigationGutter { get; private set; }
    private bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.TfsSymbolSearchEnabled { get; }
    private IServiceProvider Microsoft.IntelliTrace.Internal.IDefaultTracePackage.Provider { get; }
    private ITraceStepper Microsoft.IntelliTrace.Internal.ITracePackage.Stepper { get; }
    private DTE Microsoft.IntelliTrace.Internal.ITracePackage.DTE { get; }
    private bool Microsoft.IntelliTrace.Internal.ITracePackage.IsTraceLoaded { get; }
    private DBGMODE Microsoft.IntelliTrace.Internal.ITracePackage.DebugMode { get; }
    private bool Microsoft.IntelliTrace.Internal.ITracePackage.IsPackageInBreakMode { get; }
    private bool Microsoft.IntelliTrace.Internal.ITracePackage.IsPackageInRunMode { get; }
    private Dictionary`2<int, bool> Microsoft.IntelliTrace.Internal.ITracePackage.NotifyPointEnabledState { get; }
    private IVsUIShell Microsoft.IntelliTrace.Internal.ITracePackage.Shell { get; }
    internal ActionExtensions ActionExtensions { get; }
    private object Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.ContextData { get; private set; }
    private static TraceLogPackage();
    private DetailsViewSelector get_DetailsViewSelector();
    private void HandleUICommands();
    private void HandleCommand(int commandID, Func`2<IUICommandTarget, EventHandler> exec, Func`2<IUICommandTarget, EventHandler> queryStatus);
    private OleMenuCommand AddCommand(int commandID, Guid cmdSetGuid, Func`2<T, EventHandler> exec, Func`2<T, EventHandler> queryStatus, Func`1<T> targetRetriever);
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.get_IsPackageInNonErrorBreakOrRunMode();
    private bool get_IsPackageInNonErrorBreakOrRunMode();
    private bool get_IsPackageInBreakOrRunMode();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.get_IsIntelliTraceAttach();
    private bool get_IsIntelliTraceAttach();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.get_IsInstrumentationEnabled();
    private bool get_IsInstrumentationEnabled();
    private bool get_CurrentProcessHasSearchQueryTransport();
    internal ProjectOpener get_ProjectOpenerInstance();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.OpenSolution(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.OpenSolutionStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.ShowEventListStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.ShowEventList(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.ShowCallsViewStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.ShowCallsView(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.GoToLiveModeStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.GoToLiveMode(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.SaveTraceStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.SaveTrace(object sender, EventArgs arguments);
    private void ShowSaveTraceFailedDialog();
    private void ShowSaveTraceFailedDialog(Exception ex);
    private void ShowSaveTraceFailedDialog(string message);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepOver(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepOverStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepBack(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepBackStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepIntoStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepInto(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepOutStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepOut(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.OpenLogDocumentStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.OpenLogDocument(object sender, EventArgs arguments);
    private void OpenFileInIDE(string fileName, bool skipExistingCheck);
    private bool SolutionWithProjectExists();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.SearchHistoryByLineStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.SearchHistoryByLine(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.SearchHistoryByMethodStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.SearchHistoryByMethod(object sender, EventArgs arguments);
    private static bool GetIsDocumentWindowAvailable();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.OpenToolsOptionsStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.OpenToolsOptions(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepBackward(object sender, EventArgs args);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepBackwardStatus(object sender, EventArgs args);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepForward(object sender, EventArgs args);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.StepForwardStatus(object sender, EventArgs args);
    private void CategoryOpenOptionStatus(object sender, EventArgs arguments);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.NavigateToSearchMarginStatus(object sender, EventArgs args);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IUICommandTarget.NavigateToSearchMargin(object sender, EventArgs args);
    private void CategoryOpenOption(object sender, EventArgs arguments);
    private void GenericVSCTCommand(object sender, EventArgs args);
    private void GenericVSCTCommandStatus(object sender, EventArgs args);
    private TreeStackControl GetTreeStackControl();
    internal void SetFocusOnHubToolWindow();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IInternetSecurityManager.IsTrustedPath(string path);
    private IIntelliTraceSnapshotService get_IntelliTraceSnapshotService();
    private IStepBackwardService get_StepBackwardService();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.get_IsInHistoricalMode();
    internal static TraceLogPackage get_Instance();
    internal DebuggerEventsHandler get_DebuggerEventsHandler();
    internal CodeMapCallTree get_CodeMapCallTree();
    internal OleMenuCommandService get_MenuService();
    internal DTE get_DTE();
    [CompilerGeneratedAttribute]
internal bool get_IntelliTraceSupportedDebugTargets();
    [CompilerGeneratedAttribute]
internal void set_IntelliTraceSupportedDebugTargets(bool value);
    internal IVsTextManager get_TextManager();
    internal string get_RegistryRoot();
    internal HistoricalDataManager get_HistoricalDataManager();
    internal InfoBarManager get_HistoricalModeInfoBarManager();
    internal InfoBarManager get_SnapshotInfoBarManager();
    internal int get_CurrentLoggerThreadID();
    [CompilerGeneratedAttribute]
internal DBGMODE get_DebugMode();
    [CompilerGeneratedAttribute]
private void set_DebugMode(DBGMODE value);
    private Dictionary`2<DEBUGGER_OPTIONS, UInt32> get_DebuggerOptions();
    internal ToolsOptionGeneral get_GeneralSettings();
    internal ToolsOptionModule get_ModuleSettings();
    internal ToolsOptionDiagnosticEvents get_DiagnosticEventSettings();
    internal ToolsOptionAdvanced get_AdvancedSettings();
    internal ToolsOptionManager get_ToolsOptionManager();
    internal _CollectionPlan get_CollectionPlanFile();
    [CompilerGeneratedAttribute]
internal _CollectionPlan get_CollectionPlan();
    [CompilerGeneratedAttribute]
internal void set_CollectionPlan(_CollectionPlan value);
    internal IVsUIShell get_VsUIShell();
    internal IVsUIShell2 get_VsUIShell2();
    internal IVsShell get_VsShell();
    internal IVsRunningDocumentTable get_VsRunningDocumentTable();
    private IVsMonitorSelection get_VsMonitorSelection();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.get_IsPackageInBreakMode();
    internal bool get_IsPackageInBreakMode();
    internal bool get_IsPackageInRunMode();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.get_IsLiveDebuggingWithIntelliTrace();
    internal bool get_IsLiveDebuggingWithIntelliTrace();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.get_IsTraceLogLoaded();
    internal bool get_IsTraceLogLoaded();
    internal string get_TraceLogFilename();
    [CompilerGeneratedAttribute]
internal TraceLogDocumentOptions get_ActiveDocumentOptions();
    [CompilerGeneratedAttribute]
internal void set_ActiveDocumentOptions(TraceLogDocumentOptions value);
    [CompilerGeneratedAttribute]
internal WebRequestFilterInfo get_WebRequestFilter();
    [CompilerGeneratedAttribute]
internal void set_WebRequestFilter(WebRequestFilterInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual IProteusSourceIntegration get_SourceIntegration();
    [CompilerGeneratedAttribute]
private void set_SourceIntegration(IProteusSourceIntegration value);
    [CompilerGeneratedAttribute]
internal CollectionPlanStore get_CollectionPlanStore();
    [CompilerGeneratedAttribute]
private void set_CollectionPlanStore(CollectionPlanStore value);
    internal Font get_EnvironmentFont();
    internal IVsDebugger get_DebuggerService();
    internal IDebuggerInternal get_DebuggerInternal();
    internal Dispatcher get_TestHookDispatcher();
    public SearchDataContext get_SearchContext();
    private void set_SearchContext(SearchDataContext value);
    internal Dictionary`2<string, string> get_TfsSymbolPaths();
    internal static string GetTfsSymbolCacheIdentifier(Uri teamFoundationServerUri, string teamProject, int testRunId);
    internal string get_IntelliTraceInstallDir();
    internal bool get_EnableSnapshot();
    public static bool InitializePackage();
    protected virtual void Initialize();
    protected virtual void Dispose(bool disposing);
    protected virtual int QueryClose(Boolean& canClose);
    private void AdviseVsBroadcastMessage();
    private void UnadviseVsBroadcastMessage();
    internal RegistryKey get_IntelliTraceKey();
    private _CollectionPlan LoadCollectionPlanFromDisk();
    private static _CollectionPlan LoadCollectionPlanFromAssembly(Assembly assembly);
    private static _CollectionPlan LoadCollectionPlanFromFile(string path);
    private static Font FontFromUIDLGLOGFONT(UIDLGLOGFONT logFont);
    internal void InitializeDebuggerSession();
    internal void DisposeDebuggerSession();
    private void InitializeDebuggerService();
    private void DisposeDebuggerService();
    private void InitializeDebuggerOptions();
    private void DisposeDebuggerOptions();
    private sealed virtual override bool Microsoft.VisualStudio.TraceLogPackage.IIntelliTraceDebuggingStateProvider.TryGetDebuggerOption(DEBUGGER_OPTIONS option, UInt32& value);
    internal bool TryGetDebuggerOption(DEBUGGER_OPTIONS option, UInt32& value);
    internal void UpdateDebuggerOption(DEBUGGER_OPTIONS option, UInt32 newValue);
    private IntPtr MarshalDebugEngines(Guid[] debugEngines);
    private bool get_IsSourceControlEnabled();
    private void EnabledPrivateDTE();
    private void CreateProteusDTE11Channel(Guid PrivateDTEGuid);
    private static bool TryGetFullPath(string path, String& fullPath);
    private static bool RetrieveAndComparePaths(string path1, string path2);
    internal IVsCodeWindow GetCodeWindow(IVsWindowFrame frame);
    internal IVsTextView GetTextView(IVsWindowFrame frame);
    internal bool IsCodeWindow(IVsWindowFrame frame);
    internal void GetCurrentWindowFrameAndTextView(IVsWindowFrame& frame, IVsTextView& textView);
    private void CancelHistorySearch();
    internal ITextViewMargin GetNamedMargin(string marginName, IVsTextView textView);
    internal bool GetErrorState();
    internal void SetErrorState(bool isInError, bool dataRefreshRequired);
    internal object GetService(Type type);
    internal IDebugThread2 GetDebugThread(UInt32 tid);
    internal bool SetHistoricalProcess(UInt32 pid, string packageFullName);
    internal void UpdateLiveContext(IDebugProcess2 pProcess, IDebugThread2 pThread);
    internal void UpdateDebugContext(IDebugProcess2 pProcess, IDebugThread2 pThread);
    internal void UpdateTimeContext(IDebugProcess2 pProcess, IDebugThread2 pThread, IHistoricalDebuggingFrame frame);
    internal void SetLaunchContext(IDebugProcess2 process, IDebugThread2 pThread, IDebugTimeContext100 newContext);
    internal void RaiseDebugContextChangedEvent();
    internal void RaiseIntelliTraceTimeContextChangedEvent(TimeContextChangedEventArgs args);
    internal void RaiseCurrentProcessChangedEvent();
    internal void RaiseMarginItemsContextChangedEvent();
    internal void RaiseModeChangedEvent(DBGMODE mode);
    internal void RaiseShellModeChangedEvent(DBGMODE newMode);
    internal void RaiseDebuggerOptionChangedEvent(DEBUGGER_OPTIONS option);
    internal void RaiseExitingBreakModeEvent();
    internal void RaiseCurrentFrameChangedEvent();
    internal void RaiseProcessLoadCompleteEvent(IDebugProcess2 process, IDebugProgram2 program);
    internal void RaiseEnterBreakStateEvent(EnterBreakStateEventArgs eventArgs);
    internal void RefreshUIData(UIRefreshReason reason, bool forceSyncLog);
    internal void ProcessDestroy(IDebugProcess2 pProcess);
    internal void SessionDestroy();
    private void CleanUp();
    internal void NotifyDebuggerOfThreadSwitch();
    internal void LaunchHistoricalDebugSession(TraceLogDocument document, int loggerTid, long ordinal, string perSessionSymbolPath, _CollectionPlan collectionPlan, WebRequestFilterInfo webRequestFilterInfo, bool isExceptionDebugging, bool shouldDefaultShowExternal);
    internal void OnToolsOptionChanged();
    internal void SetDebuggerOption(DEBUGGER_OPTIONS option, UInt32 newValue);
    internal void InvokeVSCTIntelliTraceCommand(int cmdId);
    internal void InvokeVSCTCommand(Guid commandGuid, int cmdId);
    internal static void InvokeShowWebRequestDetailsForCorrelationIdCommand();
    public sealed virtual void SwitchToHistoricalMode(bool isInHistoricalMode, bool isLiveDebugging);
    internal void SetGoToLiveModeDelegate(Func`1<bool> goToLive);
    private void EnsureMarginLoaded();
    [CompilerGeneratedAttribute]
internal void add_DebugContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DebugContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_IntelliTraceTimeContextChanged(EventHandler`1<TimeContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_IntelliTraceTimeContextChanged(EventHandler`1<TimeContextChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_ToolsOptionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ToolsOptionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_DebuggerOptionChanged(EventHandler`1<DebuggerOptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_DebuggerOptionChanged(EventHandler`1<DebuggerOptionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_MarginItemsContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_MarginItemsContextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_ExitingBreakMode(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ExitingBreakMode(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_CurrentProcessChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CurrentProcessChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_CurrentFrameChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CurrentFrameChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_ProcessLoadComplete(EventHandler`1<ProcessLoadCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_ProcessLoadComplete(EventHandler`1<ProcessLoadCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_VsBroadcastMsgReceived(EventHandler`1<VsBroadcastMsgEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_VsBroadcastMsgReceived(EventHandler`1<VsBroadcastMsgEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_UIRefreshRequested(EventHandler`1<UIRefreshRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_UIRefreshRequested(EventHandler`1<UIRefreshRequestedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_ProcessDestroyed(EventHandler`1<Guid> value);
    [CompilerGeneratedAttribute]
internal void remove_ProcessDestroyed(EventHandler`1<Guid> value);
    [CompilerGeneratedAttribute]
internal void add_EnterBreakState(EventHandler`1<EnterBreakStateEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_EnterBreakState(EventHandler`1<EnterBreakStateEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_ShellModeChanged(EventHandler`1<DBGMODE> value);
    [CompilerGeneratedAttribute]
internal void remove_ShellModeChanged(EventHandler`1<DBGMODE> value);
    internal static bool GetAppidSetting(Guid setting);
    private static void SetAppidSetting(Guid setting, bool isActive);
    internal void UpdateCommandUI();
    private object CreateService(IServiceContainer container, Type serviceType);
    public sealed virtual int OnBeforeCloseSolution(object pUnkReserved);
    public sealed virtual int OnAfterCloseSolution(object pUnkReserved);
    public sealed virtual int OnAfterLoadProject(IVsHierarchy pStubHierarchy, IVsHierarchy pRealHierarchy);
    public sealed virtual int OnAfterOpenProject(IVsHierarchy pHierarchy, int fAdded);
    public sealed virtual int OnAfterOpenSolution(object pUnkReserved, int fNewSolution);
    public sealed virtual int OnBeforeCloseProject(IVsHierarchy pHierarchy, int fRemoved);
    public sealed virtual int OnBeforeUnloadProject(IVsHierarchy pRealHierarchy, IVsHierarchy pStubHierarchy);
    public sealed virtual int OnQueryCloseProject(IVsHierarchy pHierarchy, int fRemoving, Int32& pfCancel);
    public sealed virtual int OnQueryCloseSolution(object pUnkReserved, Int32& pfCancel);
    public sealed virtual int OnQueryUnloadProject(IVsHierarchy pRealHierarchy, Int32& pfCancel);
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.get_ProteusEnabled();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.get_EnableInstrumentation();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.get_DisplayNavigationGutter();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IDefaultTracePackage.set_DisplayNavigationGutter(bool value);
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.IDefaultTracePackage.get_TfsSymbolSearchEnabled();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.IDefaultTracePackage.ApplyToolsOptionsChanges();
    private sealed virtual override IServiceProvider Microsoft.IntelliTrace.Internal.IDefaultTracePackage.get_Provider();
    private sealed virtual override ITraceStepper Microsoft.IntelliTrace.Internal.ITracePackage.get_Stepper();
    private sealed virtual override DTE Microsoft.IntelliTrace.Internal.ITracePackage.get_DTE();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITracePackage.get_IsTraceLoaded();
    private sealed virtual override DBGMODE Microsoft.IntelliTrace.Internal.ITracePackage.get_DebugMode();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITracePackage.get_IsPackageInBreakMode();
    private sealed virtual override bool Microsoft.IntelliTrace.Internal.ITracePackage.get_IsPackageInRunMode();
    private sealed virtual override Dictionary`2<int, bool> Microsoft.IntelliTrace.Internal.ITracePackage.get_NotifyPointEnabledState();
    private sealed virtual override IVsUIShell Microsoft.IntelliTrace.Internal.ITracePackage.get_Shell();
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.add_DebugContextChanged(EventHandler value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.remove_DebugContextChanged(EventHandler value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.add_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.remove_DebugModeChanged(EventHandler`1<DebugModeChangedEventArgs> value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.add_ToolsOptionChanged(EventHandler value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.remove_ToolsOptionChanged(EventHandler value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.add_DebuggerOptionChanged(EventHandler`1<DebuggerOptionChangedEventArgs> value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.remove_DebuggerOptionChanged(EventHandler`1<DebuggerOptionChangedEventArgs> value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.add_MarginItemsContextChanged(EventHandler value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.remove_MarginItemsContextChanged(EventHandler value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.add_ExitingBreakMode(EventHandler value);
    private sealed virtual override void Microsoft.IntelliTrace.Internal.ITracePackage.remove_ExitingBreakMode(EventHandler value);
    private sealed virtual override object Microsoft.IntelliTrace.Internal.ITracePackage.GetService(Type type);
    public sealed virtual int OnBroadcastMessage(UInt32 msg, IntPtr wParam, IntPtr lParam);
    internal ActionExtensions get_ActionExtensions();
    private sealed virtual override IBuildInformationSource Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.GetCurrent();
    private sealed virtual override object Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.GetCurrentDocumentObject();
    private sealed virtual override void Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.BringToFront(IBuildInformationSource source);
    private sealed virtual override void Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.InvokeOpenProjectFromCurrentCommand();
    [CompilerGeneratedAttribute]
private sealed virtual override object Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.get_ContextData();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.VisualStudio.TraceLogPackage.GotoCode.IBuildInformationHost.set_ContextData(object value);
    private sealed virtual override void Microsoft.VisualStudio.TraceLogPackage.ICommandUpdateService.UpdateCommands();
    [CompilerGeneratedAttribute]
private bool <get_HistoricalModeInfoBarManager>b__133_0();
    [CompilerGeneratedAttribute]
private ToolsOptionGeneral <get_ToolsOptionManager>b__153_0();
    [CompilerGeneratedAttribute]
private ToolsOptionModule <get_ToolsOptionManager>b__153_1();
    [CompilerGeneratedAttribute]
private ToolsOptionDiagnosticEvents <get_ToolsOptionManager>b__153_2();
    [CompilerGeneratedAttribute]
private ToolsOptionAdvanced <get_ToolsOptionManager>b__153_3();
    [CompilerGeneratedAttribute]
private bool <SetHistoricalProcess>b__260_0();
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TraceLogPackage.TraceLogPackageResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string _201 { get; }
    public static string _501 { get; }
    public static string _502 { get; }
    public static string _600 { get; }
    public static string _601 { get; }
    public static string _602 { get; }
    public static string _603 { get; }
    public static string _604 { get; }
    public static string _605 { get; }
    public static string _606 { get; }
    public static string _607 { get; }
    public static string _608 { get; }
    public static string BaseSearchString { get; }
    public static string BooleanValueFalse { get; }
    public static string BooleanValueNo { get; }
    public static string BooleanValueTrue { get; }
    public static string BooleanValueYes { get; }
    public static string BuildHasNoSymbolServer { get; }
    public static string BuildNotFound { get; }
    public static string CallDurationTooltip { get; }
    public static string CallStackLabel { get; }
    public static string CallTree { get; }
    public static string CancelLinkText { get; }
    public static string ClientIPParserStrings { get; }
    public static string ContactingTfsStatusMessage { get; }
    public static string CurrentlyDebuggingTDLogOpen { get; }
    public static string CurrentlyDebuggingTDLogOpenCaption { get; }
    public static string DebugHistoryControlPanelLearnMore { get; }
    public static string DebugHistoryControlPanelMoreOptions { get; }
    public static string DebugHistoryControlPanelOpenSettings { get; }
    public static string DescriptionParserString { get; }
    public static string DownloadVisualStudio { get; }
    public static string ErrorLoadingFile { get; }
    public static string EventListCategory_AllEventTypes { get; }
    public static string EventListCategory_ItemType { get; }
    public static string EventListControlCaptionActiveId { get; }
    public static string EventListControlCaptionCallStack { get; }
    public static string EventListControlCaptionEventTime { get; }
    public static string EventListControlCaptionLocals { get; }
    public static string EventListControlCaptionSearchEntireHistory { get; }
    public static string EventListControlCaptionThread { get; }
    public static string EventListThread_AllThreads { get; }
    public static string EventListThread_ItemType { get; }
    public static string EventSourceParserString { get; }
    public static string ExceptionDataLoadedHeader { get; }
    public static string ExceptionDataLoadedNoData { get; }
    public static string ExceptionDataLoadingHeader { get; }
    public static string ExceptionSearchClearTooltip { get; }
    public static string ExceptionSearchStartTooltip { get; }
    public static string ExceptionSearchTooltip { get; }
    public static string ExceptionSearchWatermark { get; }
    public static string FlatListActivityIdNotCollected { get; }
    public static string HideExternalEvents { get; }
    public static string HistoricalDebuggingControlPanelBreakAll { get; }
    public static string HistoricalDebuggingTeaser { get; }
    public static string IISVersionLow { get; }
    public static string IntelliTraceEditorCaption { get; }
    public static string iTraceFilter { get; }
    public static string LaunchHookErrorAlreadyBeingRecorded { get; }
    public static string LaunchHookErrorCaption { get; }
    public static string LaunchHookErrorWrongProfiler { get; }
    public static string LightEventInformation { get; }
    public static string ModuleSearchClearTooltip { get; }
    public static string ModuleSearchStartTooltip { get; }
    public static string ModuleSearchTooltip { get; }
    public static string ModuleSearchWatermark { get; }
    public static string MvcAction { get; }
    public static string MvcActionToolTip { get; }
    public static string MvcController { get; }
    public static string MvcControllerToolTip { get; }
    public static string MvcSearchExceptionMessage { get; }
    public static string MvcSearchMessage { get; }
    public static string MvcSearchNoResults { get; }
    public static string MvcSearchSolutionNotBuilt { get; }
    public static string MvcSearchUnknownExceptionMessage { get; }
    public static string OccurrenceParserStrings { get; }
    public static string OldIntelliTraceForITraceFile { get; }
    public static string OpenIntelliTraceFile { get; }
    public static string OutputEventCategory { get; }
    public static string PackageHelperOpenFile { get; }
    public static string PerfInfoBar_Message { get; }
    public static string PerfInfoBar_Settings { get; }
    public static string PerfInfoBar_Title { get; }
    public static string PerformanceDataSearchClearTooltip { get; }
    public static string PerformanceDataSearchStartTooltip { get; }
    public static string PerformanceDataSearchWatermark { get; }
    public static string PerformanceDescriptionFull { get; }
    public static string PerformanceDescriptionLight { get; }
    public static string PerformanceDescriptionUnkown { get; }
    public static string PerformanceEventOccurrenceFrequent { get; }
    public static string PerformanceEventOccurrenceInfrequent { get; }
    public static string PerformanceEventSearchTooltip { get; }
    public static string PerformanceEventString { get; }
    public static string PerformanceGroupSearchTooltip { get; }
    public static string PopupCollapseAllText { get; }
    public static string PopupGotoSourceText { get; }
    public static string RequestEventNameFormat { get; }
    public static string RequestEventWithActivityIdHelpTextFormat { get; }
    public static string RequestEventWithoutActivityIdHelpTextFormat { get; }
    public static string RequestsListClientIPColumn { get; }
    public static string RequestsListElapsedTimeColumn { get; }
    public static string RequestsListEndTimeColumn { get; }
    public static string RequestsListRequestTypeColumn { get; }
    public static string RequestsListReturnCodeColumn { get; }
    public static string RequestsListStartTimeColumn { get; }
    public static string RequestsListTargetURLColumn { get; }
    public static string RequestTypeParserStrings { get; }
    public static string RetryLinkText { get; }
    public static string RowViewModelCountError { get; }
    public static string RowViewModelSelectionError { get; }
    public static string SaveTraceFailed { get; }
    public static string SaveTraceFailedDefaultMessage { get; }
    public static string SaveTraceProgressMessage { get; }
    public static string SearchControl_NextString { get; }
    public static string SearchControl_PreviousString { get; }
    public static string SearchControl_SearchComplete { get; }
    public static string SearchControl_Searching { get; }
    public static string SearchControl_SearchNotStarted { get; }
    public static string SearchNone { get; }
    public static string SearchNotOnResultMarker { get; }
    public static string SearchResultFormat { get; }
    public static string SearchStatusComplete { get; }
    public static string SessionIdParserStrings { get; }
    public static string ShowExternalEvents { get; }
    public static string SingleEventInTraceFile { get; }
    public static string SlowestNodeTotalTimeFormat { get; }
    public static string SolutionNotOpened { get; }
    public static string SqlCmdTextToolTip { get; }
    public static string SqlOpenError_BadSqlData { get; }
    public static string StatusImageError { get; }
    public static string StatusImageInProgress { get; }
    public static string StatusImageSuccess { get; }
    public static string StatusImageWarning { get; }
    public static string StatusParserStrings { get; }
    public static string SummaryEndTimeColumnHeader { get; }
    public static string SummaryEndTimeWithUtcOffset { get; }
    public static string SummaryEndTimeWithUtcOffsetNegative { get; }
    public static string SummaryEventTimeColumnHeader { get; }
    public static string SummaryEventTimeWithUtcOffset { get; }
    public static string SummaryEventTimeWithUtcOffsetNegative { get; }
    public static string SummaryExceptionGroupCheckBoxContent { get; }
    public static string SummaryExceptionMessageColumnHeader { get; }
    public static string SummaryExceptionThreadIdColumnHeader { get; }
    public static string SummaryExceptionTypeColumnHeader { get; }
    public static string SummaryGroupedEventTimeWithUtcOffset { get; }
    public static string SummaryGroupedEventTimeWithUtcOffsetNegative { get; }
    public static string SummaryGroupedExceptionEventTimeColumnHeader { get; }
    public static string SummaryGroupedExceptionMessageColumnHeader { get; }
    public static string SummaryGroupExceptionCountColumnHeader { get; }
    public static string SummaryIdColumnHeader { get; }
    public static string SummaryIncompleteStack { get; }
    public static string SummaryModuleIdColumnHeader { get; }
    public static string SummaryModuleNameColumnHeader { get; }
    public static string SummaryModulePathColumnHeader { get; }
    public static string SummaryNameColumnHeader { get; }
    public static string SummaryStartTimeColumnHeader { get; }
    public static string SummaryStartTimeWithUtcOffset { get; }
    public static string SummaryStartTimeWithUtcOffsetNegative { get; }
    public static string SummarySysInfoTypeColumnHeader { get; }
    public static string SummarySysInfoValueColumnHeader { get; }
    public static string SummaryTestCase { get; }
    public static string SummaryTestCaseId { get; }
    public static string SummaryTestCaseSessionColumnHeader { get; }
    public static string SummaryTestDescriptionColumnHeader { get; }
    public static string SummaryTestEndTimeColumnHeader { get; }
    public static string SummaryTestEndTimeWithUtcOffset { get; }
    public static string SummaryTestEndTimeWithUtcOffsetNegative { get; }
    public static string SummaryTestIdColumnHeader { get; }
    public static string SummaryTestNoSteps { get; }
    public static string SummaryTestSession { get; }
    public static string SymbolPathDiscoveryTakingPlace { get; }
    public static string SymbolsMayNotBeLoaded { get; }
    public static string SysInfoSearchClearTooltip { get; }
    public static string SysInfoSearchStartTooltip { get; }
    public static string SysInfoSearchTooltip { get; }
    public static string SysInfoSearchWatermark { get; }
    public static string SystemInfoSectionHeader { get; }
    public static string TargetURLParserStrings { get; }
    public static string TDLogLaunchFailedCaption { get; }
    public static string TDLogLaunchFailedText { get; }
    public static string TeamProjectNotFound { get; }
    public static string TestDataLoadedHeader { get; }
    public static string TestDataLoadedNoData { get; }
    public static string TestDataLoadingHeader { get; }
    public static string TestRunNotAssociatedWithABuild { get; }
    public static string TestRunNotFound { get; }
    public static string TestSearchClearTooltip { get; }
    public static string TestSearchStartTooltip { get; }
    public static string TestSearchTooltip { get; }
    public static string TestSearchWatermark { get; }
    public static string TfsSymbolPathOperationCancelled { get; }
    public static string TfsSymbolPathSuccess { get; }
    public static string TfsSymbolResolverException { get; }
    public static string ThreadSearchClearTooltip { get; }
    public static string ThreadSearchStartTooltip { get; }
    public static string ThreadSearchTooltip { get; }
    public static string ThreadSearchWatermark { get; }
    public static string TimeWithUtcOffset { get; }
    public static string TimeWithUtcOffsetNegative { get; }
    public static string TraceLogSummary { get; }
    public static string TraceLogSummaryActivityIdBadParse { get; }
    public static string TraceLogSummaryActivityIdNotFound { get; }
    public static string TraceLogSummaryAnalysisDataTitleString { get; }
    public static string TraceLogSummaryCaseComboLabel { get; }
    public static string TraceLogSummaryDebugThisEventButton { get; }
    public static string TraceLogSummaryDebugThisExceptionGroupButton { get; }
    public static string TraceLogSummaryDetailsTypeNewest { get; }
    public static string TraceLogSummaryDetailsTypeSelected { get; }
    public static string TraceLogSummaryDetailsTypeSlowest { get; }
    public static string TraceLogSummaryExceptionLaunchText { get; }
    public static string TraceLogSummaryFileCreateTime { get; }
    public static string TraceLogSummaryLoggingStartTimeWithUtcOffset { get; }
    public static string TraceLogSummaryLoggingStartTimeWithUtcOffsetNegative { get; }
    public static string TraceLogSummarySessionComboLabel { get; }
    public static string TraceLogSummarySessionName { get; }
    public static string TraceLogSummaryStartDebuggingButton { get; }
    public static string TraceLogSummaryTestEventLaunchText { get; }
    public static string TraceLogSummaryTestOutcomeColumnHeader { get; }
    public static string TraceLogSummaryTestOutcomeFail { get; }
    public static string TraceLogSummaryTestOutcomePass { get; }
    public static string TraceLogSummaryThreadLaunchText { get; }
    public static string UnsupportedIEVersionHyperlinkTooltipFormat { get; }
    public static string UnsupportedIEVersionTargetHyperlink { get; }
    public static string UnsupportedIEVersionText { get; }
    public static string UnsupportediTraceFileText { get; }
    public static string UnsupportedRemoteDebuggingChooseDifferentProcess { get; }
    public static string UntrustedSymbolPathMessage { get; }
    public static string UserAgentParserStrings { get; }
    public static string WantToContinue { get; }
    public static string WebRequestEventSearchClearTooltip { get; }
    public static string WebRequestEventSearchStartTooltip { get; }
    public static string WebRequestEventSearchTooltip { get; }
    public static string WebRequestEventSearchWatermark { get; }
    public static string WebRequestHeader { get; }
    public static string WebRequestSearchClearTooltip { get; }
    public static string WebRequestSearchStartTooltip { get; }
    public static string WebRequestSearchTooltip { get; }
    public static string WebRequestSearchWatermark { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get__201();
    public static string get__501();
    public static string get__502();
    public static string get__600();
    public static string get__601();
    public static string get__602();
    public static string get__603();
    public static string get__604();
    public static string get__605();
    public static string get__606();
    public static string get__607();
    public static string get__608();
    public static string get_BaseSearchString();
    public static string get_BooleanValueFalse();
    public static string get_BooleanValueNo();
    public static string get_BooleanValueTrue();
    public static string get_BooleanValueYes();
    public static string get_BuildHasNoSymbolServer();
    public static string get_BuildNotFound();
    public static string get_CallDurationTooltip();
    public static string get_CallStackLabel();
    public static string get_CallTree();
    public static string get_CancelLinkText();
    public static string get_ClientIPParserStrings();
    public static string get_ContactingTfsStatusMessage();
    public static string get_CurrentlyDebuggingTDLogOpen();
    public static string get_CurrentlyDebuggingTDLogOpenCaption();
    public static string get_DebugHistoryControlPanelLearnMore();
    public static string get_DebugHistoryControlPanelMoreOptions();
    public static string get_DebugHistoryControlPanelOpenSettings();
    public static string get_DescriptionParserString();
    public static string get_DownloadVisualStudio();
    public static string get_ErrorLoadingFile();
    public static string get_EventListCategory_AllEventTypes();
    public static string get_EventListCategory_ItemType();
    public static string get_EventListControlCaptionActiveId();
    public static string get_EventListControlCaptionCallStack();
    public static string get_EventListControlCaptionEventTime();
    public static string get_EventListControlCaptionLocals();
    public static string get_EventListControlCaptionSearchEntireHistory();
    public static string get_EventListControlCaptionThread();
    public static string get_EventListThread_AllThreads();
    public static string get_EventListThread_ItemType();
    public static string get_EventSourceParserString();
    public static string get_ExceptionDataLoadedHeader();
    public static string get_ExceptionDataLoadedNoData();
    public static string get_ExceptionDataLoadingHeader();
    public static string get_ExceptionSearchClearTooltip();
    public static string get_ExceptionSearchStartTooltip();
    public static string get_ExceptionSearchTooltip();
    public static string get_ExceptionSearchWatermark();
    public static string get_FlatListActivityIdNotCollected();
    public static string get_HideExternalEvents();
    public static string get_HistoricalDebuggingControlPanelBreakAll();
    public static string get_HistoricalDebuggingTeaser();
    public static string get_IISVersionLow();
    public static string get_IntelliTraceEditorCaption();
    public static string get_iTraceFilter();
    public static string get_LaunchHookErrorAlreadyBeingRecorded();
    public static string get_LaunchHookErrorCaption();
    public static string get_LaunchHookErrorWrongProfiler();
    public static string get_LightEventInformation();
    public static string get_ModuleSearchClearTooltip();
    public static string get_ModuleSearchStartTooltip();
    public static string get_ModuleSearchTooltip();
    public static string get_ModuleSearchWatermark();
    public static string get_MvcAction();
    public static string get_MvcActionToolTip();
    public static string get_MvcController();
    public static string get_MvcControllerToolTip();
    public static string get_MvcSearchExceptionMessage();
    public static string get_MvcSearchMessage();
    public static string get_MvcSearchNoResults();
    public static string get_MvcSearchSolutionNotBuilt();
    public static string get_MvcSearchUnknownExceptionMessage();
    public static string get_OccurrenceParserStrings();
    public static string get_OldIntelliTraceForITraceFile();
    public static string get_OpenIntelliTraceFile();
    public static string get_OutputEventCategory();
    public static string get_PackageHelperOpenFile();
    public static string get_PerfInfoBar_Message();
    public static string get_PerfInfoBar_Settings();
    public static string get_PerfInfoBar_Title();
    public static string get_PerformanceDataSearchClearTooltip();
    public static string get_PerformanceDataSearchStartTooltip();
    public static string get_PerformanceDataSearchWatermark();
    public static string get_PerformanceDescriptionFull();
    public static string get_PerformanceDescriptionLight();
    public static string get_PerformanceDescriptionUnkown();
    public static string get_PerformanceEventOccurrenceFrequent();
    public static string get_PerformanceEventOccurrenceInfrequent();
    public static string get_PerformanceEventSearchTooltip();
    public static string get_PerformanceEventString();
    public static string get_PerformanceGroupSearchTooltip();
    public static string get_PopupCollapseAllText();
    public static string get_PopupGotoSourceText();
    public static string get_RequestEventNameFormat();
    public static string get_RequestEventWithActivityIdHelpTextFormat();
    public static string get_RequestEventWithoutActivityIdHelpTextFormat();
    public static string get_RequestsListClientIPColumn();
    public static string get_RequestsListElapsedTimeColumn();
    public static string get_RequestsListEndTimeColumn();
    public static string get_RequestsListRequestTypeColumn();
    public static string get_RequestsListReturnCodeColumn();
    public static string get_RequestsListStartTimeColumn();
    public static string get_RequestsListTargetURLColumn();
    public static string get_RequestTypeParserStrings();
    public static string get_RetryLinkText();
    public static string get_RowViewModelCountError();
    public static string get_RowViewModelSelectionError();
    public static string get_SaveTraceFailed();
    public static string get_SaveTraceFailedDefaultMessage();
    public static string get_SaveTraceProgressMessage();
    public static string get_SearchControl_NextString();
    public static string get_SearchControl_PreviousString();
    public static string get_SearchControl_SearchComplete();
    public static string get_SearchControl_Searching();
    public static string get_SearchControl_SearchNotStarted();
    public static string get_SearchNone();
    public static string get_SearchNotOnResultMarker();
    public static string get_SearchResultFormat();
    public static string get_SearchStatusComplete();
    public static string get_SessionIdParserStrings();
    public static string get_ShowExternalEvents();
    public static string get_SingleEventInTraceFile();
    public static string get_SlowestNodeTotalTimeFormat();
    public static string get_SolutionNotOpened();
    public static string get_SqlCmdTextToolTip();
    public static string get_SqlOpenError_BadSqlData();
    public static string get_StatusImageError();
    public static string get_StatusImageInProgress();
    public static string get_StatusImageSuccess();
    public static string get_StatusImageWarning();
    public static string get_StatusParserStrings();
    public static string get_SummaryEndTimeColumnHeader();
    public static string get_SummaryEndTimeWithUtcOffset();
    public static string get_SummaryEndTimeWithUtcOffsetNegative();
    public static string get_SummaryEventTimeColumnHeader();
    public static string get_SummaryEventTimeWithUtcOffset();
    public static string get_SummaryEventTimeWithUtcOffsetNegative();
    public static string get_SummaryExceptionGroupCheckBoxContent();
    public static string get_SummaryExceptionMessageColumnHeader();
    public static string get_SummaryExceptionThreadIdColumnHeader();
    public static string get_SummaryExceptionTypeColumnHeader();
    public static string get_SummaryGroupedEventTimeWithUtcOffset();
    public static string get_SummaryGroupedEventTimeWithUtcOffsetNegative();
    public static string get_SummaryGroupedExceptionEventTimeColumnHeader();
    public static string get_SummaryGroupedExceptionMessageColumnHeader();
    public static string get_SummaryGroupExceptionCountColumnHeader();
    public static string get_SummaryIdColumnHeader();
    public static string get_SummaryIncompleteStack();
    public static string get_SummaryModuleIdColumnHeader();
    public static string get_SummaryModuleNameColumnHeader();
    public static string get_SummaryModulePathColumnHeader();
    public static string get_SummaryNameColumnHeader();
    public static string get_SummaryStartTimeColumnHeader();
    public static string get_SummaryStartTimeWithUtcOffset();
    public static string get_SummaryStartTimeWithUtcOffsetNegative();
    public static string get_SummarySysInfoTypeColumnHeader();
    public static string get_SummarySysInfoValueColumnHeader();
    public static string get_SummaryTestCase();
    public static string get_SummaryTestCaseId();
    public static string get_SummaryTestCaseSessionColumnHeader();
    public static string get_SummaryTestDescriptionColumnHeader();
    public static string get_SummaryTestEndTimeColumnHeader();
    public static string get_SummaryTestEndTimeWithUtcOffset();
    public static string get_SummaryTestEndTimeWithUtcOffsetNegative();
    public static string get_SummaryTestIdColumnHeader();
    public static string get_SummaryTestNoSteps();
    public static string get_SummaryTestSession();
    public static string get_SymbolPathDiscoveryTakingPlace();
    public static string get_SymbolsMayNotBeLoaded();
    public static string get_SysInfoSearchClearTooltip();
    public static string get_SysInfoSearchStartTooltip();
    public static string get_SysInfoSearchTooltip();
    public static string get_SysInfoSearchWatermark();
    public static string get_SystemInfoSectionHeader();
    public static string get_TargetURLParserStrings();
    public static string get_TDLogLaunchFailedCaption();
    public static string get_TDLogLaunchFailedText();
    public static string get_TeamProjectNotFound();
    public static string get_TestDataLoadedHeader();
    public static string get_TestDataLoadedNoData();
    public static string get_TestDataLoadingHeader();
    public static string get_TestRunNotAssociatedWithABuild();
    public static string get_TestRunNotFound();
    public static string get_TestSearchClearTooltip();
    public static string get_TestSearchStartTooltip();
    public static string get_TestSearchTooltip();
    public static string get_TestSearchWatermark();
    public static string get_TfsSymbolPathOperationCancelled();
    public static string get_TfsSymbolPathSuccess();
    public static string get_TfsSymbolResolverException();
    public static string get_ThreadSearchClearTooltip();
    public static string get_ThreadSearchStartTooltip();
    public static string get_ThreadSearchTooltip();
    public static string get_ThreadSearchWatermark();
    public static string get_TimeWithUtcOffset();
    public static string get_TimeWithUtcOffsetNegative();
    public static string get_TraceLogSummary();
    public static string get_TraceLogSummaryActivityIdBadParse();
    public static string get_TraceLogSummaryActivityIdNotFound();
    public static string get_TraceLogSummaryAnalysisDataTitleString();
    public static string get_TraceLogSummaryCaseComboLabel();
    public static string get_TraceLogSummaryDebugThisEventButton();
    public static string get_TraceLogSummaryDebugThisExceptionGroupButton();
    public static string get_TraceLogSummaryDetailsTypeNewest();
    public static string get_TraceLogSummaryDetailsTypeSelected();
    public static string get_TraceLogSummaryDetailsTypeSlowest();
    public static string get_TraceLogSummaryExceptionLaunchText();
    public static string get_TraceLogSummaryFileCreateTime();
    public static string get_TraceLogSummaryLoggingStartTimeWithUtcOffset();
    public static string get_TraceLogSummaryLoggingStartTimeWithUtcOffsetNegative();
    public static string get_TraceLogSummarySessionComboLabel();
    public static string get_TraceLogSummarySessionName();
    public static string get_TraceLogSummaryStartDebuggingButton();
    public static string get_TraceLogSummaryTestEventLaunchText();
    public static string get_TraceLogSummaryTestOutcomeColumnHeader();
    public static string get_TraceLogSummaryTestOutcomeFail();
    public static string get_TraceLogSummaryTestOutcomePass();
    public static string get_TraceLogSummaryThreadLaunchText();
    public static string get_UnsupportedIEVersionHyperlinkTooltipFormat();
    public static string get_UnsupportedIEVersionTargetHyperlink();
    public static string get_UnsupportedIEVersionText();
    public static string get_UnsupportediTraceFileText();
    public static string get_UnsupportedRemoteDebuggingChooseDifferentProcess();
    public static string get_UntrustedSymbolPathMessage();
    public static string get_UserAgentParserStrings();
    public static string get_WantToContinue();
    public static string get_WebRequestEventSearchClearTooltip();
    public static string get_WebRequestEventSearchStartTooltip();
    public static string get_WebRequestEventSearchTooltip();
    public static string get_WebRequestEventSearchWatermark();
    public static string get_WebRequestHeader();
    public static string get_WebRequestSearchClearTooltip();
    public static string get_WebRequestSearchStartTooltip();
    public static string get_WebRequestSearchTooltip();
    public static string get_WebRequestSearchWatermark();
}
internal abstract class Microsoft.VisualStudio.TraceLogPackage.TraceLogPageComponent : object {
    private bool _isSetupView;
    private bool _isSetupViewModel;
    private bool _isDisposed;
    public UserControl ContentControl { get; }
    public TraceLogViewModelBase ViewModel { get; }
    public UserControl get_ContentControl();
    public TraceLogViewModelBase get_ViewModel();
    public void SetupViewModel(TraceLogPageComponentSource sourceData);
    protected virtual void DoSetupViewModel(TraceLogPageComponentSource sourceData);
    protected abstract virtual TraceLogViewModelBase GetViewModel();
    public void SetupView();
    protected virtual void DoSetupView();
    protected abstract virtual UserControl GetView();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    protected void ThrowIfDisposed();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogPageComponentSource : object {
    [CompilerGeneratedAttribute]
private TestSession[] <TestData>k__BackingField;
    [CompilerGeneratedAttribute]
private AnalysisLoadData <AnalysisLoadData>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionLoadData <ExceptionData>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnum`1<ThreadData> <ThreadData>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnum`1<ModuleData> <ModuleData>k__BackingField;
    [CompilerGeneratedAttribute]
private LogSystemInfo <SystemInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private PerformanceEventAnalyzer <PerformanceEventAnalyzer>k__BackingField;
    [CompilerGeneratedAttribute]
private WebRequestEventAnalyzer <WebRequestEventAnalyzer>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccessList`1<WebRequestEvent> <WebRequestData>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccessList`1<PerformanceEventDescriptionGroup> <PerformanceData>k__BackingField;
    [CompilerGeneratedAttribute]
private IntelliTraceProcess <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLogSummaryAnalysisRepository <AnalysisRepository>k__BackingField;
    public TestSession[] TestData { get; public set; }
    public AnalysisLoadData AnalysisLoadData { get; public set; }
    public ExceptionLoadData ExceptionData { get; public set; }
    public IEnum`1<ThreadData> ThreadData { get; public set; }
    public IEnum`1<ModuleData> ModuleData { get; public set; }
    public LogSystemInfo SystemInfo { get; public set; }
    public PerformanceEventAnalyzer PerformanceEventAnalyzer { get; public set; }
    public WebRequestEventAnalyzer WebRequestEventAnalyzer { get; public set; }
    public IAccessList`1<WebRequestEvent> WebRequestData { get; public set; }
    public IAccessList`1<PerformanceEventDescriptionGroup> PerformanceData { get; public set; }
    public IntelliTraceProcess Process { get; public set; }
    public TraceLogSummaryAnalysisRepository AnalysisRepository { get; public set; }
    [CompilerGeneratedAttribute]
public TestSession[] get_TestData();
    [CompilerGeneratedAttribute]
public void set_TestData(TestSession[] value);
    [CompilerGeneratedAttribute]
public AnalysisLoadData get_AnalysisLoadData();
    [CompilerGeneratedAttribute]
public void set_AnalysisLoadData(AnalysisLoadData value);
    [CompilerGeneratedAttribute]
public ExceptionLoadData get_ExceptionData();
    [CompilerGeneratedAttribute]
public void set_ExceptionData(ExceptionLoadData value);
    [CompilerGeneratedAttribute]
public IEnum`1<ThreadData> get_ThreadData();
    [CompilerGeneratedAttribute]
public void set_ThreadData(IEnum`1<ThreadData> value);
    [CompilerGeneratedAttribute]
public IEnum`1<ModuleData> get_ModuleData();
    [CompilerGeneratedAttribute]
public void set_ModuleData(IEnum`1<ModuleData> value);
    [CompilerGeneratedAttribute]
public LogSystemInfo get_SystemInfo();
    [CompilerGeneratedAttribute]
public void set_SystemInfo(LogSystemInfo value);
    [CompilerGeneratedAttribute]
public PerformanceEventAnalyzer get_PerformanceEventAnalyzer();
    [CompilerGeneratedAttribute]
public void set_PerformanceEventAnalyzer(PerformanceEventAnalyzer value);
    [CompilerGeneratedAttribute]
public WebRequestEventAnalyzer get_WebRequestEventAnalyzer();
    [CompilerGeneratedAttribute]
public void set_WebRequestEventAnalyzer(WebRequestEventAnalyzer value);
    [CompilerGeneratedAttribute]
public IAccessList`1<WebRequestEvent> get_WebRequestData();
    [CompilerGeneratedAttribute]
public void set_WebRequestData(IAccessList`1<WebRequestEvent> value);
    [CompilerGeneratedAttribute]
public IAccessList`1<PerformanceEventDescriptionGroup> get_PerformanceData();
    [CompilerGeneratedAttribute]
public void set_PerformanceData(IAccessList`1<PerformanceEventDescriptionGroup> value);
    [CompilerGeneratedAttribute]
public IntelliTraceProcess get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(IntelliTraceProcess value);
    [CompilerGeneratedAttribute]
public TraceLogSummaryAnalysisRepository get_AnalysisRepository();
    [CompilerGeneratedAttribute]
public void set_AnalysisRepository(TraceLogSummaryAnalysisRepository value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.TraceLogSummaryPage : UserControl {
    private static string ExceptionTypeColumnPropertyName;
    private static string ExceptionMessageColumnPropertyName;
    private static string ExceptionThreadIdColumnPropertyName;
    private static string ExceptionCountColumnPropertyName;
    private static string ExceptionEventTimeColumnPropertyName;
    private bool disposed;
    private bool _webRequestSearchInProgress;
    private bool _performanceDataSearchInProgress;
    [CompilerGeneratedAttribute]
private TraceLogSummary <TraceLogSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLogSummaryPageComponent <SummaryPageComponent>k__BackingField;
    private RequestSearchProvider _requestSearchProvider;
    private ColumnSortInformation _webRequestGridSortInfo;
    private Dictionary`2<DataGridColumn, ColumnSortOrder> _webRequestColumnMapping;
    private ColumnSortInformation _performanceEventDataGridSortInfo;
    private ColumnSortInformation _performanceGroupDataGridSortInfo;
    private PerformanceDataSearchProvider _perfDataSearchProvider;
    private Dictionary`2<DataGridColumn, ColumnSortOrder> _performanceDataColumnMapping;
    private GridViewColumn _exceptionTypeColumn;
    private GridViewColumn _exceptionMessageColumn;
    private GridViewColumn _exceptionThreadIdColumn;
    private GridViewColumn _exceptionCountColumn;
    private GridViewColumn _exceptionEventTimeColumn;
    private GridViewColumn _threadStartTimeColumn;
    private GridViewColumn _threadEndTimeColumn;
    private GridViewColumn _testEndTimeColumn;
    private IHistoricalDebugActions _debugActions;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal TraceLogSummaryPage _traceLogSummaryPage;
    internal Grid LayoutRoot;
    internal DiagReportContentExpander performanceViolationsListExpander;
    internal Border perfDataSearchElementHost;
    internal CheckBox groupByDescription;
    internal CheckBox performanceHideLightEvents;
    internal DataGrid performanceDataGrid;
    private DataGridTextColumn _descriptionColumn;
    private DataGridTextColumn _perfDurationColumn;
    private DataGridTextColumn _perfGroupDescriptionCountColumn;
    private DataGridTextColumn _perfGroupDescriptionAverageDurationColumn;
    private DataGridTextColumn _perfGroupDescriptionMaxDurationColumn;
    private DataGridTextColumn _perfGroupDescriptionNewestEventTimeColumn;
    private DataGridTextColumn _sourceColumn;
    private DataGridTextColumn _eventTimeColumn;
    private DataGridTextColumn _isLightEventColumn;
    internal DiagReportContentExpander exceptionsListExpander;
    internal SummaryPageSearchControl exceptionsListView;
    internal TextBlock StackFrameLabel;
    internal LiveRegionListView stackFramesListView;
    internal Button exceptionLaunchButton;
    internal DiagReportContentExpander webRequestsListExpander;
    internal Border webRequestSearchElementHost;
    internal DataGrid requestDataGrid;
    private DataGridTextColumn _requestColumn;
    private DataGridTextColumn _urlColumn;
    private DataGridTextColumn _durationColumn;
    private DataGridTextColumn _returnCodeColumn;
    private DataGridTextColumn _sessionColumn;
    private DataGridTextColumn _ipColumn;
    private DataGridTextColumn _userAgentColumn;
    private DataGridTextColumn _startTimeColumn;
    private DataGridTextColumn _endTimeColumn;
    internal DiagReportContentExpander systemInfoExpander;
    internal SummaryPageSearchControl sysInfoListView;
    internal DiagReportContentExpander threadListExpander;
    internal SummaryPageSearchControl threadDataListView;
    internal Button threadLaunchButton;
    internal DiagReportContentExpander testDataExpander;
    internal TextBlock sessionComboLabel;
    internal ComboBox comboBoxSessions;
    internal TextBlock caseComboLabel;
    internal ComboBox comboBoxCases;
    internal SummaryPageSearchControl testListView;
    internal Button testLaunchButton;
    internal DiagReportContentExpander modulesListExpander;
    internal SummaryPageSearchControl moduleListView;
    private bool _contentLoaded;
    public bool WebRequestSearchInProgress { get; internal set; }
    public bool PerformanceDataSearchInProgress { get; internal set; }
    internal TraceLogSummary TraceLogSummary { get; private set; }
    private TraceLogSummaryPageComponent SummaryPageComponent { get; private set; }
    private ColumnSortInformation PerformanceDataGridSortInfo { get; private set; }
    internal void InitializeData(TraceLogSummaryPageComponent summaryPageComponent, IHistoricalDebugActions debugActions);
    internal ColumnSortOrder GetColumnSortOrder(DataGridColumn column);
    private double GetItemsControlUsableWidth(ItemsControl itemsControl);
    private void UpdateExceptionListView(bool isGrouped);
    private GridViewColumn MakeColumnFromResource(string resourceName, string header, string boundColumnName);
    private GridViewColumn MakeColumn(string header);
    private void TestCasesItemsChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void TestSessionItemsChanged(object sender, EventArgs ea);
    private void CurrentSessionChanged(object sender, SelectionChangedEventArgs ea);
    private void CurrentCaseChanged(object sender, SelectionChangedEventArgs ea);
    private bool FilterExceptionsDelegate(object o, string filterText, HashSet`1<string> excludedColumnNames);
    private bool FilterModulesDelegate(object o, string filterText, HashSet`1<string> excludedColumnNames);
    private bool FilterThreadsDelegate(object o, string filterText, HashSet`1<string> excludedColumnNames);
    private bool FilterTestDelegate(object o, string filterText, HashSet`1<string> excludedColumnNames);
    private bool FilterSysInfoDelegate(object o, string filterText, HashSet`1<string> excludedColumnNames);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public IAccessList`1<WebRequestEvent> GetWebRequestAccessList(Predicate`1<WebRequestEvent> filterFunction, Func`1<bool> cancelFunction);
    public void UpdateWebRequestFilter(IAccessList`1<WebRequestEvent> requestList);
    public void ClearWebRequestFilter();
    public IAccessList`1<T> GetPerformanceDataAccessList(Predicate`1<T> filterFunction, Func`1<bool> cancelFunction);
    public void UpdatePerformanceDataFilter(IAccessList`1<T> perfDataList, bool preserveSelection);
    public void ClearPerformanceDataFilter();
    public bool get_WebRequestSearchInProgress();
    internal void set_WebRequestSearchInProgress(bool value);
    public bool get_PerformanceDataSearchInProgress();
    internal void set_PerformanceDataSearchInProgress(bool value);
    private void ThreadLaunchButton_Click(object sender, EventArgs ea);
    private void ExceptionsLaunchButton_Click(object sender, EventArgs ea);
    private void TestLaunchButton_Click(object sender, EventArgs ea);
    private void RequestDataGrid_DoubleClick(object sender, MouseButtonEventArgs e);
    private void PerformanceDataGrid_DoubleClick(object sender, MouseButtonEventArgs e);
    private void DataGrid_DoubleClick(MouseButtonEventArgs e, Action openDataDetailAction);
    private void PerformanceDataGrid_KeyUp(object sender, KeyEventArgs e);
    private void GroupByDescription_Checked(object sender, RoutedEventArgs e);
    private void GroupByDescription_Unchecked(object sender, RoutedEventArgs e);
    private void PerformanceHideLightEvents_Checked(object sender, RoutedEventArgs e);
    private void PerformanceHideLightEvents_Unchecked(object sender, RoutedEventArgs e);
    private void SetPerformanceDataGridVisibility();
    private void RefreshPerformanceDataGrid(bool preserveSelection);
    private void PerformanceDataList_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private void OpenSelectedPerfEvent();
    private void RequestDataGrid_KeyUp(object sender, KeyEventArgs e);
    private void OpenSelectedWebRequestEvent();
    private void DataGrid_PreviewKeyDown(object sender, KeyEventArgs e);
    private void Exceptions_ListViewSelectionChanged(object sender, EventArgs e);
    private void Test_ListViewSelectionChanged(object sender, EventArgs e);
    private void Threads_ListViewItemContainerCreated(object sender, ListViewItemContainerCreatedEventArgs e);
    private void Exceptions_ListViewItemContainerCreated(object sender, ListViewItemContainerCreatedEventArgs e);
    private void Exceptions_ListExpanderExpanded(object sender, RoutedEventArgs e);
    private void ExceptionsListView_CheckBoxToggled(object sender, RoutedEventArgs e);
    private void RefreshExceptionUI();
    private void Test_ListViewItemContainerCreated(object sender, ListViewItemContainerCreatedEventArgs e);
    internal void threadsListKeyUp(object sender, KeyEventArgs e);
    internal void threadsListDoubleClick(object sender, MouseButtonEventArgs e);
    private void LaunchWithSelectedThread();
    private void LaunchWithThread(DisplayThreadData threadData);
    internal void exceptionsListKeyUp(object sender, KeyEventArgs e);
    internal void exceptionsListDoubleClick(object sender, MouseButtonEventArgs e);
    private void DataGridSort(DataGridColumn column, ColumnSortOrder sortOrder, ColumnSortInformation sortInformation, Action`2<ColumnSortOrder, ListSortDirection> updateDataSource);
    private void RequestDataGridSort(object sender, DataGridSortingEventArgs e);
    private void PerformanceDataGridSort(object sender, DataGridSortingEventArgs e);
    private void DataGrid_TargetUpdated(object sender, DataTransferEventArgs e);
    private void ClearDataFilter(ColumnSortInformation columnSortInfo, Action`2<ColumnSortOrder, ListSortDirection> clearDataFilterAction, ColumnSortOrder defaultSort, ListSortDirection sortDirection);
    private void LaunchWithSelectedException();
    internal void testListKeyUp(object sender, KeyEventArgs e);
    internal void testListDoubleClick(object sender, MouseButtonEventArgs e);
    private void LaunchWithSelectedTestStep();
    private void OnSummaryPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void UpdateSystemInfo();
    private void UpdateColumnsWithUTCOffset();
    private void UpdateExceptionListViewColumns();
    [CompilerGeneratedAttribute]
internal TraceLogSummary get_TraceLogSummary();
    [CompilerGeneratedAttribute]
private void set_TraceLogSummary(TraceLogSummary value);
    [CompilerGeneratedAttribute]
private TraceLogSummaryPageComponent get_SummaryPageComponent();
    [CompilerGeneratedAttribute]
private void set_SummaryPageComponent(TraceLogSummaryPageComponent value);
    private ColumnSortInformation get_PerformanceDataGridSortInfo();
    private void set_PerformanceDataGridSortInfo(ColumnSortInformation value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void OnPropertyChanged(string name);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0(object s, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(object s, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
private void <OnSummaryPropertyChanged>b__79_1();
}
internal class Microsoft.VisualStudio.TraceLogPackage.TreeDataManager : object {
    private static Guid TraceDebuggerGuidEnableFilter;
    private HistoricalDataManager m_historicalDataMgr;
    private IDebugSessionProcess100 m_sessionProc;
    private int m_loggerTid;
    private IDebugCallTree100 m_callTree;
    private IHistoricalDebuggingFrame m_rootFrame;
    private IHistoricalDebuggingFrame m_lastFrame;
    internal IHistoricalDebuggingFrame Root { get; }
    internal IHistoricalDebuggingFrame LastFrame { get; }
    internal int LoggerTid { get; }
    internal bool IsTreeAvailable { get; }
    internal TreeDataManager(HistoricalDataManager historicalDataMgr, IDebugSessionProcess100 sessionProcess, int loggerTid);
    private static TreeDataManager();
    internal IHistoricalDebuggingFrame get_Root();
    internal IHistoricalDebuggingFrame get_LastFrame();
    internal int get_LoggerTid();
    internal bool get_IsTreeAvailable();
    internal void InvalidateData();
    private void EnsureValidity();
    internal void UpdateTree(IDebugTimeContext100 timeContext);
    internal IDebugTimeContext100 GetTimeContextOfSearchResult(UInt32 searchId, UInt32 resultId);
    internal IDebugTimeContext100 GetTimeContext(IHistoricalDebuggingFrame frame);
    internal IDebugTimeContext100 GetTimeContextOfOrdinal(ulong ordinal);
    private static void AssertHResult(int hr, string message);
    private static void AssertHResult(int hr);
    internal bool SetToLive();
    internal List`1<IHistoricalDebuggingFrame> FetchStack(IHistoricalDebuggingFrame leaf);
    private UInt32 GetDisplayRadix();
    private NODEINFO_FLAGS GetNodeInfoFlags(bool fContentPane);
    private List`1<IHistoricalDebuggingFrame> FetchStackAtTimeContext(IDebugTimeContext100 pLeafContext, Int32& fetchHr);
    private List`1<IHistoricalDebuggingFrame> FetchStackAtTimeContext(IDebugTimeContext100 pLeafContext, bool getLanguageInfo, Int32& fetchHr);
    internal ChildFrameRetriever GetChildFrameRetriever(IHistoricalDebuggingFrame parent);
    internal IDebugCodeContext3 GetCodeContextOfNode(ulong nodeId);
    internal IDebugProperty3 GetTreeNodeDebugProperty(ulong nodeId);
    internal IDebugProperty3 GetTreeNodeDebugPropertyAtTimeContext(IDebugTimeContext100 pLeafContext);
    internal IHistoricalDebuggingFrame GetClosestFrame(IDebugTimeContext100 pLeafContext, bool getLanguageInfo);
    internal int GetClosestFunctionCallFrameProperty(IDebugTimeContext100 pLeafContext, IDebugProperty3& debugProperty, String& language);
    internal bool GetNotifyDataForNode(ulong nodeId, NP_INSTALL_REQUEST[] bindInfo, String& methodId);
    internal IDebugCallTreeStepper100 CreateStatementStepper(IHistoricalDebuggingFrame currentFrame);
    internal IDebugCallTreeStepper100 CreateILStepper(IHistoricalDebuggingFrame currentFrame);
    internal IDebugCallTreeStepper100 CreateEventStepper();
    internal IDebugCallTreeStepper100 CreateStatementStepper();
    private IDebugCallTreeStepper100 CreateStepper(IHistoricalDebuggingFrame currentFrame, TREE_STEP_FLAGS stepperFlags);
    private bool IsJMCEnabled();
    internal void ReleaseComInterface();
}
internal enum Microsoft.VisualStudio.TraceLogPackage.UIRefreshReason : Enum {
    public int value__;
    public static UIRefreshReason Unknown;
    public static UIRefreshReason Attach;
    public static UIRefreshReason DebuggerOptionsChange;
    public static UIRefreshReason JustMyCodeOptionChange;
    public static UIRefreshReason ShowExternalEventsOptionChange;
    public static UIRefreshReason ModuleReload;
    public static UIRefreshReason ErrorState;
    public static UIRefreshReason FilterChange;
}
internal class Microsoft.VisualStudio.TraceLogPackage.UIRefreshRequestedEventArgs : object {
    [CompilerGeneratedAttribute]
private UIRefreshReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLogSyncRequired>k__BackingField;
    public UIRefreshReason Reason { get; private set; }
    public bool IsLogSyncRequired { get; private set; }
    public UIRefreshRequestedEventArgs(UIRefreshReason reason, bool isLogSyncRequired);
    [CompilerGeneratedAttribute]
public UIRefreshReason get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(UIRefreshReason value);
    [CompilerGeneratedAttribute]
public bool get_IsLogSyncRequired();
    [CompilerGeneratedAttribute]
private void set_IsLogSyncRequired(bool value);
}
internal enum Microsoft.VisualStudio.TraceLogPackage.UrlAction : Enum {
    public int value__;
    public static UrlAction URLACTION_DOWNLOAD_SIGNED_ACTIVEX;
    public static UrlAction URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX;
    public static UrlAction URLACTION_ACTIVEX_RUN;
    public static UrlAction URLACTION_ACTIVEX_SCRIPTLET_RUN;
    public static UrlAction URLACTION_SCRIPT_RUN;
    public static UrlAction URLACTION_SCRIPT_OVERRIDE_SAFETY;
    public static UrlAction URLACTION_SCRIPT_JAVA_USE;
    public static UrlAction URLACTION_SCRIPT_SAFE_ACTIVEX;
    public static UrlAction URLACTION_MANAGED_SIGNED;
    public static UrlAction URLACTION_MANAGED_UNSIGNED;
    public static UrlAction URLACTION_AUTOMATIC_DOWNLOAD_UI;
    public static UrlAction URLACTION_SHELL_FILE_DOWNLOAD;
    public static UrlAction URLACTION_SHELL_EXECUTE_HIGHRISK;
    public static UrlAction URLACTION_SHELL_EXECUTE_MODRISK;
    public static UrlAction URLACTION_SHELL_EXECUTE_LOWRISK;
    public static UrlAction URLACTION_SHELL_VERB;
    public static UrlAction URLACTION_SHELL_WEBVIEW_VERB;
}
internal enum Microsoft.VisualStudio.TraceLogPackage.UrlPermission : Enum {
    public int value__;
    public static UrlPermission Allow;
    public static UrlPermission Query;
    public static UrlPermission Disallow;
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TraceLogPackage.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TraceLogPackage.VsBroadcastMsgEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UInt32 <Msg>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <WParam>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <LParam>k__BackingField;
    public UInt32 Msg { get; private set; }
    public IntPtr WParam { get; private set; }
    public IntPtr LParam { get; private set; }
    public VsBroadcastMsgEventArgs(UInt32 msg, IntPtr wParam, IntPtr lParam);
    [CompilerGeneratedAttribute]
public UInt32 get_Msg();
    [CompilerGeneratedAttribute]
private void set_Msg(UInt32 value);
    [CompilerGeneratedAttribute]
public IntPtr get_WParam();
    [CompilerGeneratedAttribute]
private void set_WParam(IntPtr value);
    [CompilerGeneratedAttribute]
public IntPtr get_LParam();
    [CompilerGeneratedAttribute]
private void set_LParam(IntPtr value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.WebRequestFilterInfo : object {
    private WebRequestInfo _requestInfo;
    private WebRequestInfo _originalInfo;
    private bool _initialized;
    [CompilerGeneratedAttribute]
private ITraceLogDocumentProvider <TraceLogDocumentProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLog <TraceLog>k__BackingField;
    [CompilerGeneratedAttribute]
private FilteringMode <FilteringMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLogSummaryAnalysisRepository <AnalysisRepository>k__BackingField;
    public ITraceLogDocumentProvider TraceLogDocumentProvider { get; internal set; }
    public TraceLog TraceLog { get; internal set; }
    public FilteringMode FilteringMode { get; private set; }
    public TraceLogSummaryAnalysisRepository AnalysisRepository { get; internal set; }
    public WebRequestInfo RequestInfo { get; public set; }
    public WebRequestInfo OriginalInfo { get; private set; }
    public WebRequestFilterInfo(FilteringMode filteringMode);
    [CompilerGeneratedAttribute]
public ITraceLogDocumentProvider get_TraceLogDocumentProvider();
    [CompilerGeneratedAttribute]
internal void set_TraceLogDocumentProvider(ITraceLogDocumentProvider value);
    [CompilerGeneratedAttribute]
public TraceLog get_TraceLog();
    [CompilerGeneratedAttribute]
internal void set_TraceLog(TraceLog value);
    [CompilerGeneratedAttribute]
public FilteringMode get_FilteringMode();
    [CompilerGeneratedAttribute]
private void set_FilteringMode(FilteringMode value);
    [CompilerGeneratedAttribute]
public TraceLogSummaryAnalysisRepository get_AnalysisRepository();
    [CompilerGeneratedAttribute]
internal void set_AnalysisRepository(TraceLogSummaryAnalysisRepository value);
    public WebRequestInfo get_RequestInfo();
    public void set_RequestInfo(WebRequestInfo value);
    public WebRequestInfo get_OriginalInfo();
    private void set_OriginalInfo(WebRequestInfo value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualStudio.TraceLogPackage.WebRequestInfo : object {
    [CompilerGeneratedAttribute]
private long <ThreadStreamOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ActivityId>k__BackingField;
    public long ThreadStreamOffset { get; private set; }
    public int RequestId { get; private set; }
    public Nullable`1<Guid> ActivityId { get; private set; }
    public WebRequestInfo(int requestId, long threadStreamOffset);
    public WebRequestInfo(int requestId, long threadStreamOfffset, Nullable`1<Guid> activityId);
    public WebRequestInfo(WebRequestInfo other);
    public WebRequestInfo(RequestViewModel vm);
    [CompilerGeneratedAttribute]
public long get_ThreadStreamOffset();
    [CompilerGeneratedAttribute]
private void set_ThreadStreamOffset(long value);
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ActivityId();
    [CompilerGeneratedAttribute]
private void set_ActivityId(Nullable`1<Guid> value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.WebRequestSearchQuery : object {
    [CompilerGeneratedAttribute]
private string <SearchString>k__BackingField;
    public UInt32 ParseError { get; }
    public string SearchString { get; internal set; }
    public sealed virtual UInt32 GetTokens(UInt32 dwMaxTokens, IVsSearchToken[] rgpSearchTokens);
    public sealed virtual UInt32 get_ParseError();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SearchString();
    [CompilerGeneratedAttribute]
internal void set_SearchString(string value);
}
internal class Microsoft.VisualStudio.TraceLogPackage.WebRequestSearchToken : object {
    public string OriginalTokenText { get; }
    public UInt32 ParseError { get; }
    public string ParsedTokenText { get; }
    public UInt32 TokenStartPosition { get; }
    public sealed virtual string get_OriginalTokenText();
    public sealed virtual UInt32 get_ParseError();
    public sealed virtual string get_ParsedTokenText();
    public sealed virtual UInt32 get_TokenStartPosition();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
