internal class Microsoft.IntelliTrace.TelemetryObserver.AllListenersObserver`1 : object {
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(T value);
    public static IObserver`1<T> Create();
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.DuckTyping : object {
    public static object Cast(Type targetType, object sourceObject);
    private static object CreateNewInstance(Type targetType);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.EventErrorLogger : object {
    private EventLog _eventLog;
    private string _targetName;
    private bool disposedValue;
    public string TargetName { get; }
    public EventErrorLogger(string targetName);
    public sealed virtual string get_TargetName();
    public sealed virtual void Log(string message);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private static void EventLogExecutor(Action action);
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0();
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.HttpClientRequestHook : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    public static void HandleHttpClientWriteRequest(object value);
    private static void ITraceHookHttpClientRequest(string uri, string method, string requestId);
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.HttpClientResponseHook : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    public static void HandleHttpClientWriteResponse(object value);
    private static void ITraceHookHttpClientResponse(int statusCode, string uri, string method, string requestId);
}
internal interface Microsoft.IntelliTrace.TelemetryObserver.IErrorLogger {
    public string TargetName { get; }
    public abstract virtual void Log(string message);
    public abstract virtual string get_TargetName();
}
internal class Microsoft.IntelliTrace.TelemetryObserver.IntelliTraceObserver : object {
    private static string MvcBeforeActionMethodName;
    private static string SqlWriteCommandBefore;
    private static string SqlWriteConnectionOpenAfter;
    private static string SqlWriteConnectionOpenError;
    private static string SqlWriteConnectionCloseBefore;
    private static string HttpClientRequest;
    private static string HttpClientResponse;
    private static Dictionary`2<string, Action`1<object>> _writeHandlers;
    private static IntelliTraceObserver();
    public sealed virtual bool IsEnabled(string telemetryName);
    public sealed virtual void OnCompleted();
    public sealed virtual void OnError(Exception error);
    public sealed virtual void OnNext(KeyValuePair`2<string, object> value);
    public static ITelemetryObserver Create();
}
internal interface Microsoft.IntelliTrace.TelemetryObserver.ITelemetryObserver {
    public abstract virtual bool IsEnabled(string telemetryName);
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.MvcActionEventArgumentSerializer : object {
    private static string ArgumentFieldSeparator;
    private static string ArgumentObjectSeparator;
    private static string ArgumentObjectFormat;
    private static string ArgumentHasValueToken;
    private static string ArgumentNoValueToken;
    private static string NullString;
    private static MvcActionEventArgumentSerializer();
    public static string SerializeArguments(IEnumerable`1<KeyValuePair`2<string, object>> arguments);
    private static string SerializeArgumentValue(object value);
    [IteratorStateMachineAttribute("Microsoft.IntelliTrace.TelemetryObserver.MvcActionEventArgumentSerializer/<DeserializeArguments>d__8")]
public static IEnumerable`1<ArgumentsTuple> DeserializeArguments(bool isTruncated, string argumentsString);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.MvcBeforeActionHook : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    public static void HandleMvcBeforeAction(object value);
    private static void ITraceHookMvcBeforeAction(string method, string path, string pathBase, string requestId, string actionName, string mvid, int metadataToken, string arguments);
    private static void ITraceHookMvcBeforeActionNoRequestId(string method, string path, string pathBase, string actionName, string mvid, int metadataToken, string arguments);
    public sealed virtual IEnumerable`1<ArgumentsTuple> DeserializeArguments(bool isTruncated, string argumentsString);
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.Registration : object {
    private static string DiagnosticSourceAssemblyName;
    private static string DiagnosticListenerTypeName;
    private static string DiagnosticListenerAllListenersPropertyName;
    private static string DiagnosticListenerSubscribeMethodName;
    private static string IObserverSubscribeMethodName;
    private static string DebuggerString;
    private static string AllListenersObserverCreateMethodName;
    private static object s_syncroot;
    private static bool s_registrationAlreadyCalled;
    private static Registration();
    public static void RegisterFromProfiler();
    public static void RegisterFromDebugger();
    public static void RegisterAllListenersObserver(IErrorLogger logger, bool failSilently);
    public static void RegisterIntelliTraceObserver(object diagnosticListener);
    private static bool RegisterAllListenersObserver();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.IntelliTrace.TelemetryObserver.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Debugger { get; }
    internal static string EventLogSourceName { get; }
    internal static string IncompatibleListener { get; }
    internal static string Profiler { get; }
    internal static string RegistrationError { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Debugger();
    internal static string get_EventLogSourceName();
    internal static string get_IncompatibleListener();
    internal static string get_Profiler();
    internal static string get_RegistrationError();
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.SqlWriteCommandBeforeHook : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private static string ExecuteReaderMethodName;
    private static string ExecuteReaderAsyncMethodName;
    private static string ExecuteNonQueryMethodName;
    private static string ExecuteNonQueryAsyncMethodName;
    private static string ExecuteScalarMethodName;
    private static string ExecuteScalarAsyncMethodName;
    private static string ExecuteXmlReaderMethodName;
    private static string ExecuteXmlReaderAsyncMethodName;
    public static void HandleSqlWriteCommandBefore(object value);
    private static void ITraceHookSqlCommandExecuteReader(string commandText, string connectionString);
    private static void ITraceHookSqlCommandExecuteReaderAsync(string commandText, string connectionString);
    private static void ITraceHookSqlCommandExecuteNonQuery(string commandText, string connectionString);
    private static void ITraceHookSqlCommandExecuteNonQueryAsync(string commandText, string connectionString);
    private static void ITraceHookSqlCommandExecuteScalar(string commandText, string connectionString);
    private static void ITraceHookSqlCommandExecuteScalarAsync(string commandText, string connectionString);
    private static void ITraceHookSqlCommandExecuteXmlReader(string commandText, string connectionString);
    private static void ITraceHookSqlCommandExecuteXmlReaderAsync(string commandText, string connectionString);
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.SqlWriteConnectionCloseBeforeHook : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private static string CloseMethodName;
    private static SqlWriteConnectionCloseBeforeHook();
    public static void HandleSqlWriteConnectionCloseBefore(object value);
    private static void ITraceHookSqlConnectionCloseBefore(string databaseName);
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.SqlWriteConnectionOpenAfterHook : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private static string OpenMethodName;
    private static string OpenAsyncMethodName;
    private static SqlWriteConnectionOpenAfterHook();
    public static void HandleSqlWriteConnectionOpenAfter(object value);
    private static void ITraceHookSqlConnectionOpenAfter(string connectionString, string databaseName);
    private static void ITraceHookSqlConnectionOpenAsyncAfter(string connectionString, string databaseName);
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.SqlWriteConnectionOpenErrorHook : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private static string OpenMethodName;
    private static string OpenAsyncMethodName;
    private static SqlWriteConnectionOpenErrorHook();
    public static void HandleSqlWriteConnectionOpenError(object value);
    private static void ITraceHookSqlConnectionOpenError(string connectionString, string exceptionMessage);
    private static void ITraceHookSqlConnectionOpenAsyncError(string connectionString, string exceptionMessage);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.TelemetryErrorLogger : object {
    private string _targetName;
    public string TargetName { get; }
    public TelemetryErrorLogger(string targetName);
    public sealed virtual string get_TargetName();
    public sealed virtual void Log(string message);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal static class Microsoft.IntelliTrace.TelemetryObserver.Util : object {
    private static string ModulePropertyName;
    private static string MscorlibAssemblyName;
    private static string MemberInfoTypeName;
    private static string ModuleTypeName;
    public static Type GetTypeFromAssembly(string typeName, string assemblyName);
    public static bool TryGetMethodInfo(MethodInfo methodInfo, Guid& mvid, Int32& metadataToken, String& methodName);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.ActionContext : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private ControllerActionDescriptor <ActionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    public ControllerActionDescriptor ActionDescriptor { get; public set; }
    public HttpContext HttpContext { get; public set; }
    [CompilerGeneratedAttribute]
public ControllerActionDescriptor get_ActionDescriptor();
    [CompilerGeneratedAttribute]
public void set_ActionDescriptor(ControllerActionDescriptor value);
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public void set_HttpContext(HttpContext value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.ControllerActionDescriptor : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public MethodInfo MethodInfo { get; public set; }
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public void set_MethodInfo(MethodInfo value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.Exception : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.HttpClientRequestData : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LoggingRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    public HttpRequestMessage Request { get; public set; }
    public Guid LoggingRequestId { get; public set; }
    public long Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public Guid get_LoggingRequestId();
    [CompilerGeneratedAttribute]
public void set_LoggingRequestId(Guid value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.HttpClientResponseData : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <LoggingRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    public HttpResponseMessage Response { get; public set; }
    public Guid LoggingRequestId { get; public set; }
    public long Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpResponseMessage value);
    [CompilerGeneratedAttribute]
public Guid get_LoggingRequestId();
    [CompilerGeneratedAttribute]
public void set_LoggingRequestId(Guid value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.HttpContext : WriteEventDataContractBase {
    private static string AbstractionsAssemblyName;
    private static string IHttpRequestIdentifierFeatureTypeName;
    private static string IFeatureCollectionTypeName;
    private static string IHttpRequestIdentifierFeatureFieldNameTraceIdentifier;
    private static string HttpContextFieldNameFeatures;
    private static string IFeatureCollectionPropertyNameItem;
    [CompilerGeneratedAttribute]
private HttpRequest <Request>k__BackingField;
    public HttpRequest Request { get; public set; }
    [CompilerGeneratedAttribute]
public HttpRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequest value);
    public string GetRequestId();
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.HttpMethod : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    public string Method { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.HttpRequest : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private PathString <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private PathString <PathBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    public PathString Path { get; public set; }
    public PathString PathBase { get; public set; }
    public string Method { get; public set; }
    [CompilerGeneratedAttribute]
public PathString get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(PathString value);
    [CompilerGeneratedAttribute]
public PathString get_PathBase();
    [CompilerGeneratedAttribute]
public void set_PathBase(PathString value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.HttpRequestMessage : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    public HttpMethod Method { get; public set; }
    public Uri RequestUri { get; public set; }
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(HttpMethod value);
    [CompilerGeneratedAttribute]
public Uri get_RequestUri();
    [CompilerGeneratedAttribute]
public void set_RequestUri(Uri value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.HttpResponseMessage : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private HttpRequestMessage <RequestMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public HttpRequestMessage RequestMessage { get; public set; }
    public int StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_RequestMessage();
    [CompilerGeneratedAttribute]
public void set_RequestMessage(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.MvcBeforeActionData : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private ActionContext <actionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <arguments>k__BackingField;
    public ActionContext actionContext { get; public set; }
    public Dictionary`2<string, object> arguments { get; public set; }
    [CompilerGeneratedAttribute]
public ActionContext get_actionContext();
    [CompilerGeneratedAttribute]
public void set_actionContext(ActionContext value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_arguments();
    [CompilerGeneratedAttribute]
public void set_arguments(Dictionary`2<string, object> value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.PathString : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.SqlCommand : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private string <CommandText>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlConnection <Connection>k__BackingField;
    public string CommandText { get; public set; }
    public SqlConnection Connection { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommandText();
    [CompilerGeneratedAttribute]
public void set_CommandText(string value);
    [CompilerGeneratedAttribute]
public SqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(SqlConnection value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.SqlConnection : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    public string ConnectionString { get; public set; }
    public string Database { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.SqlWriteCommandBeforeData : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private SqlCommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    public SqlCommand Command { get; public set; }
    public string Operation { get; public set; }
    [CompilerGeneratedAttribute]
public SqlCommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(SqlCommand value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.SqlWriteConnectionCloseBeforeData : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private SqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    public SqlConnection Connection { get; public set; }
    public string Operation { get; public set; }
    [CompilerGeneratedAttribute]
public SqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(SqlConnection value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.SqlWriteConnectionOpenAfterData : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private SqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    public SqlConnection Connection { get; public set; }
    public string Operation { get; public set; }
    [CompilerGeneratedAttribute]
public SqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(SqlConnection value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.SqlWriteConnectionOpenErrorData : WriteEventDataContractBase {
    [CompilerGeneratedAttribute]
private SqlConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public SqlConnection Connection { get; public set; }
    public string Operation { get; public set; }
    public Exception Exception { get; public set; }
    [CompilerGeneratedAttribute]
public SqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(SqlConnection value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
internal class Microsoft.IntelliTrace.TelemetryObserver.WriteEventDataContracts.WriteEventDataContractBase : object {
    [CompilerGeneratedAttribute]
private object <SourceObject>k__BackingField;
    public object SourceObject { get; public set; }
    [CompilerGeneratedAttribute]
public object get_SourceObject();
    [CompilerGeneratedAttribute]
public void set_SourceObject(object value);
}
