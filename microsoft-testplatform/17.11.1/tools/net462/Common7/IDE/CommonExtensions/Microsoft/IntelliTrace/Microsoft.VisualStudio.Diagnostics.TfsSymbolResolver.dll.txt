internal interface Microsoft.VisualStudio.Diagnostics.ITfsTeamProjectCollectionFactory {
    public abstract virtual TfsTeamProjectCollection GetTeamProject(Uri uri);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "15.1.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.Diagnostics.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string TeamFoundationServerException { get; }
    public static string TeamFoundationServerUnavailable { get; }
    public static string TestBuildNotSupported { get; }
    public static string TestManagementNotSupported { get; }
    public static string TestRunFound { get; }
    public static string TfsConnectionInstantiated { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_TeamFoundationServerException();
    public static string get_TeamFoundationServerUnavailable();
    public static string get_TestBuildNotSupported();
    public static string get_TestManagementNotSupported();
    public static string get_TestRunFound();
    public static string get_TfsConnectionInstantiated();
}
internal class Microsoft.VisualStudio.Diagnostics.TfsSymbolPathResolver : object {
    [CompilerGeneratedAttribute]
private Control <BusySpinnerControl>k__BackingField;
    public Control BusySpinnerControl { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual Control get_BusySpinnerControl();
    [CompilerGeneratedAttribute]
private void set_BusySpinnerControl(Control value);
    public sealed virtual SymbolPathResolverResult ResolveSymbolPath(Uri teamFoundationServerUri, string teamProjectName, int testRunId, Action`1<string> statusMessageCallback, Func`1<bool> continueCallback, String& symbolPath);
    public SymbolPathResolverResult ResolveSymbolPath(ITfsTeamProjectCollectionFactory factory, Uri teamFoundationServerUri, string teamProjectName, int testRunId, Action`1<string> statusMessageCallback, Func`1<bool> continueCallback, String& symbolPath);
    private static TfsTeamProjectCollection GetTeamProjectCollection(ITfsTeamProjectCollectionFactory factory, Uri uri);
    private static string ExtractSymbolPathFromProcessParameters(string processParameters);
}
