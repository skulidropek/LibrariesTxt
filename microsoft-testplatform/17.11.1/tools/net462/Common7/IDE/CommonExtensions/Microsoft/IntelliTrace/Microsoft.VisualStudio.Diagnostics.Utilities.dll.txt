internal static class Microsoft.VisualStudio.Diagnostics.Common.Argument : object {
    public static void AssertNotNull(Byte* value, string name);
    public static void AssertNotNull(T value, string name);
    public static void AssertRange(T value, string name, T min, T max);
    public static void AssertRange(bool expression, string name);
    public static void AssertRange(bool expression, string name, string message);
    public static void AssertValid(bool expression, string name);
    public static void AssertValid(bool expression, string name, string message);
}
internal static class Microsoft.VisualStudio.Diagnostics.Common.Check : object {
    private static bool _suppressAllAsserts;
    public static bool SuppressAllAsserts { get; public set; }
    public static bool get_SuppressAllAsserts();
    public static void set_SuppressAllAsserts(bool value);
    [DebuggerHiddenAttribute]
public static void HRThrow(int hr);
    [DebuggerHiddenAttribute]
public static bool Verify(bool condition);
    [DebuggerHiddenAttribute]
public static bool Verify(bool condition, string message);
    [DebuggerHiddenAttribute]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool condition);
    [DebuggerHiddenAttribute]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    [DebuggerHiddenAttribute]
[ConditionalAttribute("DEBUG")]
public static void Assert(string message);
    [DebuggerHiddenAttribute]
public static void Throw(bool condition);
    [DebuggerHiddenAttribute]
public static void Throw(bool condition);
    [DebuggerHiddenAttribute]
public static void ThrowIfNull(object param, string paramName);
    [DebuggerHiddenAttribute]
public static void Throw(bool condition, string message);
    [DebuggerHiddenAttribute]
public static void Throw(string message);
    [DebuggerHiddenAttribute]
public static void Throw(bool condition, string message, Func`1<Exception> innerEx);
    [DebuggerHiddenAttribute]
public static void Throw(bool condition, string message, Exception innerEx);
    [DebuggerHiddenAttribute]
public static void Throw(string message, Func`1<Exception> innerEx);
    [DebuggerHiddenAttribute]
public static void Throw(string message, Exception innerEx);
    public static bool IsCriticalException(Exception e);
    public static bool SwallowNonCriticalExceptionWrapper(Action action, Action finalAction);
    public static Exception GetException(Object[] xtParams);
    public static Exception GetException(string message, Exception innerException);
    [DebuggerHiddenAttribute]
private static void AssertInternal(string message, Exception ex);
}
internal class Microsoft.VisualStudio.Diagnostics.Common.ComDisposer : ComDisposerBase {
    private bool _isDisposed;
    public void AddReference(IntPtr ptr);
    public void AddComObject(object o);
    public static ComDisposer GetComDisposer(Object[] comObjects);
    public static void DisposeComObjects(Object[] comObjects);
    protected sealed virtual void Dispose(bool disposing);
    protected virtual void DisposeObject(object o);
}
internal abstract class Microsoft.VisualStudio.Diagnostics.Common.ComDisposerBase : object {
    [CompilerGeneratedAttribute]
private List`1<object> <ObjectList>k__BackingField;
    protected List`1<object> ObjectList { get; protected set; }
    [CompilerGeneratedAttribute]
protected List`1<object> get_ObjectList();
    [CompilerGeneratedAttribute]
protected void set_ObjectList(List`1<object> value);
    public void Add(object o);
    public void AddRange(IEnumerable`1<object> collection);
    public void Remove(object o);
    private sealed virtual override void System.IDisposable.Dispose();
    protected abstract virtual void Dispose(bool disposing);
    protected abstract virtual void DisposeObject(object o);
    public static void ReleaseComObject(object o);
    public static void ReleaseComReference(IntPtr ptr);
}
internal static class Microsoft.VisualStudio.Diagnostics.Common.HashCodeGenerator : object {
    public static int GenerateHashCode(Object[] fields);
}
internal static class Microsoft.VisualStudio.Diagnostics.Common.HResult : object {
    public static int S_OK;
    public static int S_FALSE;
    public static int E_NOTIMPL;
    public static int E_ABORT;
    public static int E_FAIL;
    public static int E_UNEXPECTED;
    public static int E_INVALIDARG;
    public static int E_OUTOFMEMORY;
    public static int RPC_E_DISCONNECTED;
    public static int RPC_E_CANTCALLOUT_INEXTERNALCALL;
    public static int CO_E_OBJNOTCONNECTED;
    public static int E_PROGRAM_DESTROY_PENDING;
    public static int E_DESTROYED;
    public static int E_TRACE_DETACH_UNSUPPORTED;
    public static int E_THREAD_NOT_FOUND;
    public static int E_OBJECT_OUT_OF_SYNC;
    public static int CORDBG_E_BAD_THREAD_STATE;
    public static int CORDBG_E_IL_VAR_NOT_AVAILABLE;
    public static int CORDBG_E_BAD_REFERENCE_VALUE;
    public static int E_PDB_NOT_FOUND;
    internal static int FACILITY_WIN32;
    public static bool Failed(int hr);
    public static bool Succeeded(int hr);
    public static int HResultFromWin32(int errorcode);
}
internal class Microsoft.VisualStudio.Diagnostics.Common.HybridDisposer : ComDisposer {
    protected virtual void DisposeObject(object o);
}
internal class Microsoft.VisualStudio.Diagnostics.Common.InvariantException : Exception {
    public InvariantException(string message);
    public InvariantException(string message, Exception innerException);
    protected InvariantException(SerializationInfo info, StreamingContext context);
}
[UnmanagedFunctionPointerAttribute("1")]
internal class Microsoft.VisualStudio.Diagnostics.Common.NativeIsWow64Process : MulticastDelegate {
    public NativeIsWow64Process(object object, IntPtr method);
    public virtual bool Invoke(IntPtr hProcess, Boolean& Wow64Process);
    public virtual IAsyncResult BeginInvoke(IntPtr hProcess, Boolean& Wow64Process, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Boolean& Wow64Process, IAsyncResult result);
}
internal static class Microsoft.VisualStudio.Diagnostics.Common.ProcessNativeMethods : object {
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _IsWow64CurrentProcess;
    private static ProcessNativeMethods();
    public static IntPtr GetProcAddress(IntPtr hModule, string procName);
    public static IntPtr GetModuleHandle(string moduleName);
    public static IntPtr GetCurrentProcess();
    public static bool IsWow64CurrentProcess();
    public static bool IsWow64Process(IntPtr processHandle);
}
internal static class Microsoft.VisualStudio.Diagnostics.Common.StringFormat : object {
    public static string FormatUI(string format, Object[] parameters);
}
internal static class Microsoft.VisualStudio.Diagnostics.Common.Win32Error : object {
    public static int ERROR_FILE_EXISTS;
    public static int ERROR_ALREADY_EXISTS;
}
internal class Microsoft.VisualStudio.Diagnostics.Utilities.BatchResult : ValueType {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLast>k__BackingField;
    public int Size { get; public set; }
    public bool IsLast { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
    [CompilerGeneratedAttribute]
public bool get_IsLast();
    [CompilerGeneratedAttribute]
public void set_IsLast(bool value);
}
internal static class Microsoft.VisualStudio.Diagnostics.Utilities.BatchUtilities : object {
    public static IEnumerable`1<BatchResult> Batch(int totalSize, int batchSize);
}
internal class Microsoft.VisualStudio.Diagnostics.Utilities.DumpLog : object {
    private static DumpLog instance;
    private static object syncRoot;
    private static int MaxMessageCount;
    private long _totalMessages;
    private Queue`1<DumpMessage> _log;
    public static DumpLog Instance { get; }
    private static DumpLog();
    public static DumpLog get_Instance();
    public void Log(MessageKind kind, string message, Exception exception);
    public static void LogException(Exception e);
}
internal class Microsoft.VisualStudio.Diagnostics.Utilities.DumpMessage : object {
    [CompilerGeneratedAttribute]
private MessageKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public MessageKind Kind { get; private set; }
    public string Message { get; private set; }
    public DateTime Timestamp { get; private set; }
    public Exception Exception { get; private set; }
    public DumpMessage(DateTime timestamp, MessageKind kind, string message, Exception exception);
    [CompilerGeneratedAttribute]
public MessageKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(MessageKind value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
internal static class Microsoft.VisualStudio.Diagnostics.Utilities.EnumerableUtilities : object {
    public static bool AreEnumerableEqual(IEnumerable`1<T> left, IEnumerable`1<T> right);
}
internal enum Microsoft.VisualStudio.Diagnostics.Utilities.MessageKind : Enum {
    public int value__;
    public static MessageKind Exception;
    public static MessageKind Error;
    public static MessageKind Information;
}
internal class Microsoft.VisualStudio.Diagnostics.Utilities.NonThrowingEventLog : object {
    private EventLog _underlyingEventLog;
    private bool _isDisposed;
    public NonThrowingEventLog(string source);
    public void WriteEntry(string message, EventLogEntryType type);
    public sealed virtual void Dispose();
    private static void EventLogExecutor(Action action);
}
internal static class Microsoft.VisualStudio.Diagnostics.Utilities.PathUtilities : object {
    public static string NormalizePath(string path);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.Diagnostics.Utilities.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
