internal static class HostObjectSlot.HostAdapter : object {
    private static BindingFlags AllBindingFlags;
    internal static Type GetLmrTypeFromHostType(ITypeUniverse universe, Type hostType);
    internal static Type GetLmrTypeFromHostTypeHelper(ITypeUniverse universe, Type hostType);
    private static bool IsHostTypeVectorType(Type type);
    internal static Assembly GetLmrAssemblyFromHostAssembly(ITypeUniverse universe, Assembly hostAssembly);
    internal static Assembly GetHostAssemblyFromLmrAssembly(Assembly assembly);
    internal static Type GetHostTypeFromLmrType(Type type);
    internal static Module GetLmrModuleFromHostModule(ITypeUniverse universe, Module module);
    internal static ParameterInfo GetLmrParameterFromHostParameter(ITypeUniverse universe, ParameterInfo param);
    internal static FieldInfo GetHostFieldFromLmrField(FieldInfo fi);
    internal static PropertyInfo GetLmrPropertyInfoFromHostPropertyInfo(ITypeUniverse universe, PropertyInfo pi);
    internal static FieldInfo GetLmrFieldInfoFromHostFieldInfo(ITypeUniverse universe, FieldInfo fi);
    internal static MethodBase GetLmrMethodBaseFromHostMethodBase(ITypeUniverse universe, MethodBase mb);
}
internal class HostObjectSlot.HostObjectConversionException : InterpreterExecutionException {
    internal HostObjectConversionException(string message);
}
internal class HostObjectSlot.HostObjectSlot : DefaultSlot {
    private object m_hostObject;
    private Type m_type;
    private Dictionary`2<FieldInfo, Slot> m_fields;
    private Slot[] m_arrayElements;
    private HostObjectSlotFactory m_factory;
    private ExceptionStackTrace m_savedStackTrace;
    private object m_fieldsLock;
    internal ExceptionStackTrace CapturedStackTrace { get; internal set; }
    internal object HostObject { get; }
    internal HostObjectSlot(HostObjectSlotFactory factory, object hostObject);
    public virtual string ToString();
    public virtual Slot GetField(FieldInfo field);
    public virtual Int32[] GetLowerBounds();
    public virtual Int32[] GetDimensions();
    public virtual void SetField(Slot value, FieldInfo field);
    public virtual int GetArrayLength();
    public virtual Slot GetElementAtPosition(int index);
    public virtual void StoreElementAtPosition(int index, Slot value);
    public virtual Type GetTypeWorker();
    public virtual Assembly GetAssemblyWorker();
    public virtual MethodBase GetMethodOfDelegate();
    public virtual MethodBase GetMethodWorker();
    private MethodBase GetMethodBase(object possibleMethodBase);
    public virtual FieldInfo GetFieldWorker();
    public virtual PropertyInfo GetPropertyWorker();
    public virtual Module GetModuleWorker();
    public virtual ParameterInfo GetParameterWorker();
    public virtual Slot GetTargetObjectOfDelegate();
    public virtual Type GetTypeX();
    public virtual void GetBytes(Byte[] buffer, int bufferOffset, int slotOffset, int length);
    internal virtual ExceptionStackTrace get_CapturedStackTrace();
    internal virtual void set_CapturedStackTrace(ExceptionStackTrace value);
    internal object get_HostObject();
}
internal class HostObjectSlot.HostObjectSlotFactory : object {
    private Dictionary`2<object, Slot> m_identityDictionary;
    private IHost m_host;
    internal ITypeUniverse Universe { get; }
    internal IHost Host { get; }
    private object IdentityDictionaryLock { get; }
    public HostObjectSlotFactory(IHost host);
    internal ITypeUniverse get_Universe();
    internal IHost get_Host();
    private object get_IdentityDictionaryLock();
    private Slot RegisterObject(object hostObject, Slot slot);
    public void ResetHostObjects();
    public Slot GetSlotForObject(object hostObject, Type type);
    [ConditionalAttribute("DEBUG")]
private static void AssertIsBoxedHostPointerOfType(object hostObject, Type type);
    internal Slot GetSlotForInteger(int getSlotFor);
}
internal class HostObjectSlot.HostPointerSlot : BaseAddressSlot {
    private IntPtr m_addr;
    private Type m_type;
    private HostObjectSlotFactory m_fac;
    internal HostPointerSlot(IntPtr addr, Type type, HostObjectSlotFactory fac);
    public virtual Type GetTypeX();
    public virtual void GetBytes(Byte[] buffer, int bufferOffset, int slotOffset, int length);
    public virtual Slot ConvertToPointer(Type pointerType);
    public virtual long GetAsPointerWorker();
    public virtual Slot PointerAdd(int offset);
    public virtual Slot LoadIndirect();
    public virtual void StoreIndirect(Slot value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.ASM_CACHE_FLAGS : Enum {
    public int value__;
    public static ASM_CACHE_FLAGS ASM_CACHE_ZAP;
    public static ASM_CACHE_FLAGS ASM_CACHE_GAC;
    public static ASM_CACHE_FLAGS ASM_CACHE_DOWNLOAD;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.ASM_CMP_FLAGS : Enum {
    public int value__;
    public static ASM_CMP_FLAGS NAME;
    public static ASM_CMP_FLAGS MAJOR_VERSION;
    public static ASM_CMP_FLAGS MINOR_VERSION;
    public static ASM_CMP_FLAGS BUILD_NUMBER;
    public static ASM_CMP_FLAGS REVISION_NUMBER;
    public static ASM_CMP_FLAGS PUBLIC_KEY_TOKEN;
    public static ASM_CMP_FLAGS CULTURE;
    public static ASM_CMP_FLAGS CUSTOM;
    public static ASM_CMP_FLAGS ALL;
    public static ASM_CMP_FLAGS DEFAULT;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.ASM_DISPLAY_FLAGS : Enum {
    public int value__;
    public static ASM_DISPLAY_FLAGS VERSION;
    public static ASM_DISPLAY_FLAGS CULTURE;
    public static ASM_DISPLAY_FLAGS PUBLIC_KEY_TOKEN;
    public static ASM_DISPLAY_FLAGS PUBLIC_KEY;
    public static ASM_DISPLAY_FLAGS CUSTOM;
    public static ASM_DISPLAY_FLAGS PROCESSORARCHITECTURE;
    public static ASM_DISPLAY_FLAGS LANGUAGEID;
}
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.ASM_NAME : Enum {
    public int value__;
    public static ASM_NAME ASM_NAME_PUBLIC_KEY;
    public static ASM_NAME ASM_NAME_PUBLIC_KEY_TOKEN;
    public static ASM_NAME ASM_NAME_HASH_VALUE;
    public static ASM_NAME ASM_NAME_NAME;
    public static ASM_NAME ASM_NAME_MAJOR_VERSION;
    public static ASM_NAME ASM_NAME_MINOR_VERSION;
    public static ASM_NAME ASM_NAME_BUILD_NUMBER;
    public static ASM_NAME ASM_NAME_REVISION_NUMBER;
    public static ASM_NAME ASM_NAME_CULTURE;
    public static ASM_NAME ASM_NAME_PROCESSOR_ID_ARRAY;
    public static ASM_NAME ASM_NAME_OSINFO_ARRAY;
    public static ASM_NAME ASM_NAME_HASH_ALGID;
    public static ASM_NAME ASM_NAME_ALIAS;
    public static ASM_NAME ASM_NAME_CODEBASE_URL;
    public static ASM_NAME ASM_NAME_CODEBASE_LASTMOD;
    public static ASM_NAME ASM_NAME_NULL_PUBLIC_KEY;
    public static ASM_NAME ASM_NAME_NULL_PUBLIC_KEY_TOKEN;
    public static ASM_NAME ASM_NAME_CUSTOM;
    public static ASM_NAME ASM_NAME_NULL_CUSTOM;
    public static ASM_NAME ASM_NAME_MVID;
    public static ASM_NAME ASM_NAME_MAX_PARAMS;
}
internal class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.ASSEMBLY_INFO : ValueType {
    internal UInt32 cbAssemblyInfo;
    internal UInt32 dwAssemblyFlags;
    internal ulong uliAssemblySizeInKB;
    internal string pszCurrentAssemblyPathBuf;
    internal UInt32 cchBuf;
}
internal static class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.AssemblyCache : object {
    private static void CreateAssemblyCache(IAssemblyCache& ppAsmCache, UInt32 dwReserved);
    internal static IAssemblyCache CreateAssemblyCache();
}
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.CREATE_ASM_NAME_OBJ_FLAGS : Enum {
    public int value__;
    public static CREATE_ASM_NAME_OBJ_FLAGS CANOF_PARSE_DISPLAY_NAME;
    public static CREATE_ASM_NAME_OBJ_FLAGS CANOF_SET_DEFAULT_VALUES;
}
internal class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.FUSION_INSTALL_REFERENCE : ValueType {
    internal UInt32 cbSize;
    internal UInt32 dwFlags;
    internal Guid guidScheme;
    internal string szIdentifier;
    internal string szNonCannonicalData;
}
[GuidAttribute("e707dcde-d1cd-11d2-bab9-00c04f8eceae")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IAssemblyCache {
    public abstract virtual int UninstallAssembly(UInt32 dwFlags, string pszAssemblyName, FUSION_INSTALL_REFERENCE[] pRefData, UInt32& pulDisposition);
    public abstract virtual int QueryAssemblyInfo(UInt32 dwFlags, string pszAssemblyName, ASSEMBLY_INFO& pAsmInfo);
    public abstract virtual int CreateAssemblyCacheItem(UInt32 dwFlags, IntPtr pvReserved, IAssemblyCacheItem& ppAsmItem, string pszAssemblyName);
    public abstract virtual int CreateAssemblyScavenger(Object& ppAsmScavenger);
    public abstract virtual int InstallAssembly(UInt32 dwFlags, string pszManifestFilePath, FUSION_INSTALL_REFERENCE[] pRefData);
}
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IASSEMBLYCACHE_INSTALL_FLAG : Enum {
    public int value__;
    public static IASSEMBLYCACHE_INSTALL_FLAG IASSEMBLYCACHE_INSTALL_FLAG_REFRESH;
    public static IASSEMBLYCACHE_INSTALL_FLAG IASSEMBLYCACHE_INSTALL_FLAG_FORCE_REFRESH;
}
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IASSEMBLYCACHE_UNINSTALL_DISPOSITION : Enum {
    public int value__;
    public static IASSEMBLYCACHE_UNINSTALL_DISPOSITION IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED;
    public static IASSEMBLYCACHE_UNINSTALL_DISPOSITION IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE;
    public static IASSEMBLYCACHE_UNINSTALL_DISPOSITION IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED;
    public static IASSEMBLYCACHE_UNINSTALL_DISPOSITION IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING;
    public static IASSEMBLYCACHE_UNINSTALL_DISPOSITION IASSEMBLYCACHE_UNINSTALL_DISPOSITION_HAS_INSTALL_REFERENCES;
    public static IASSEMBLYCACHE_UNINSTALL_DISPOSITION IASSEMBLYCACHE_UNINSTALL_DISPOSITION_REFERENCE_NOT_FOUND;
}
[GuidAttribute("9E3AAEB4-D1CD-11D2-BAB9-00C04F8ECEAE")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IAssemblyCacheItem {
    public abstract virtual void CreateStream(UInt32 dwFlags, string pszStreamName, UInt32 dwFormat, UInt32 dwFormatFlags, IStream& ppIStream, Int64& puliMaxSize);
    public abstract virtual void Commit(UInt32 dwFlags, Int64& pulDisposition);
    public abstract virtual void AbortItem();
}
[GuidAttribute("21b8916c-f28e-11d2-a473-00c04f8ef448")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IAssemblyEnum {
    public abstract virtual int GetNextAssembly(IntPtr pvReserved, IAssemblyName& ppName, UInt32 dwFlags);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IAssemblyEnum& ppEnum);
}
[GuidAttribute("CD193BC0-B4BC-11d2-9833-00C04FC31D2E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IAssemblyName {
    public abstract virtual int SetProperty(ASM_NAME PropertyId, IntPtr pvProperty, UInt32 cbProperty);
    public abstract virtual int GetProperty(ASM_NAME PropertyId, IntPtr pvProperty, UInt32& pcbProperty);
    public abstract virtual int Finalize();
    public abstract virtual int GetDisplayName(StringBuilder szDisplayName, UInt32& pccDisplayName, ASM_DISPLAY_FLAGS dwDisplayFlags);
    public abstract virtual int BindToObject(Guid& refIID, object pUnkSink, object pUnkContext, string szCodeBase, long llFlags, IntPtr pvReserved, UInt32 cbReserved, IntPtr& ppv);
    public abstract virtual int GetName(UInt32& lpcwBuffer, StringBuilder pwzName);
    public abstract virtual int GetVersion(UInt32& pdwVersionHi, UInt32& pdwVersionLow);
    public abstract virtual int IsEqual(IAssemblyName pName, ASM_CMP_FLAGS dwCmpFlags);
    public abstract virtual int Clone(IAssemblyName& pName);
}
[GuidAttribute("56b1a988-7c0c-4aa2-8639-c3eb5a90226f")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IInstallReferenceEnum {
    public abstract virtual int GetNextInstallReferenceItem(IInstallReferenceItem& ppRefItem, UInt32 dwFlags, IntPtr pvReserved);
}
[GuidAttribute("582dac66-e678-449f-aba6-6faaec8a9394")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.IInstallReferenceItem {
    public abstract virtual int GetReference(FUSION_INSTALL_REFERENCE[]& ppRefData, UInt32 dwFlags, IntPtr pvReserved);
}
internal enum Microsoft.VisualStudio.Vil.NotifyPointInProcHost.GAC.Fusion.QUERYASMINFO_FLAG : Enum {
    public UInt32 value__;
    public static QUERYASMINFO_FLAG QUERYASMINFO_FLAG_VALIDATE;
    public static QUERYASMINFO_FLAG QUERYASMINFO_FLAG_GETSIZE;
}
internal class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.InProcHost : DefaultHost {
    private Dictionary`2<int, InProcStaticFieldRepository> m_staticFieldRepos;
    private object m_lock;
    private ITypeUniverse m_universe;
    private HostObjectSlotFactory m_factory;
    private Dictionary`2<ulong, MethodDef> _MethodPtrMap;
    protected StaticFieldRepository StaticFieldRepository { get; }
    public InProcStaticFieldRepository InProcStaticFieldRepository { get; }
    internal HostObjectSlotFactory Factory { get; internal set; }
    public InProcHost(InProcUniverse typeUniverse);
    public virtual ExceptionAction GetInterpreterExecutionExceptionHandler(VirtualMachine vm, InterpreterExecutionException exception);
    protected virtual StaticFieldRepository get_StaticFieldRepository();
    public InProcStaticFieldRepository get_InProcStaticFieldRepository();
    public void RemoveStaticFieldRepository();
    internal HostObjectSlotFactory get_Factory();
    internal void set_Factory(HostObjectSlotFactory value);
    public virtual void GetMethodHooks(MethodBase method, List`1<MethodHookDelegate> hooks, MethodBase& ilHookMethod);
    private MethodHookDelegate TryHookMethodImpl(MethodBase method);
    private bool IsStaticRuntimeMethod(MethodBase method);
    internal virtual Assembly ResolveAssemblyNoThrowOnError(AssemblyName name);
}
internal class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.InProcStaticFieldRepository : StaticFieldRepository {
    [CompilerGeneratedAttribute]
private InProcHost <InProcHost>k__BackingField;
    internal InProcHost InProcHost { get; internal set; }
    public virtual void EnsureStaticCtorRun(Type type, bool fAccessingStaticField, VirtualMachine vm);
    protected virtual Slot ReadStaticFieldHelper(FieldInfo field, VirtualMachine virtualMachine);
    [CompilerGeneratedAttribute]
internal InProcHost get_InProcHost();
    [CompilerGeneratedAttribute]
internal void set_InProcHost(InProcHost value);
}
internal class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.InProcUniverse : CachedTypeUniverse {
    private static string FusionRegistryCheckLocation;
    private static string FusionDQCheckKeyName;
    private Dictionary`2<string, Type> _pdqTypes;
    private MetadataDispenser _dispenser;
    private Module _mscorlib;
    private List`1<Assembly> _assemblies;
    private CachedReflectionFactory _factory;
    private static IAssemblyCache _fusionAssemblyCache;
    private object m_lock;
    private static InProcUniverse();
    public InProcUniverse(string fileMscorlib);
    protected virtual void Dispose(bool disposing);
    internal Type TryGetPDQType(string containingType, string assemblyLoc, string hintPath);
    private Assembly TryResolveAssembly(AssemblyName name);
    private Assembly[] GetAssembliesCopy();
    public virtual Assembly ResolveAssembly(AssemblyName name, bool fThrowOnError);
    public virtual Assembly ResolveWinMDAssembly(string typeName);
    public Assembly ResolveAssembly(AssemblyName name, string hintPath);
    internal Assembly ResolveAssembly(AssemblyName name, string hintPath, bool throwOnError);
    private Assembly DoResolveAssembly(AssemblyName name, string hintPath, bool throwOnError);
    private static string GuessAssemblyCodeBase(string assemblyLoc, string hintPath);
    private static string GuessAssemblyPath(string assemblyName, string hintPath);
    private static string GetAssemblyFile(string codeBase);
    private Assembly OpenFileWorker(string filename);
    private Assembly OpenFileWorker(string manifestFile, String[] netModuleFiles);
    public Assembly OpenFile(string filename);
    public Assembly OpenFile(string manifestFile, String[] netModuleFiles);
    internal MetadataFile OpenMetadataFile(string filename);
    public virtual Module ResolveModule(Assembly containingAssembly, string moduleName);
    public MetadataOnlyModule OpenModuleFile(string moduleFileName);
    public virtual Assembly GetSystemAssembly();
    public virtual Assembly TryGetSystemAssembly();
    public virtual Assembly TryGetEntryPointAssembly();
    private static string GuessPathFromAssemblyName(string assemblyName, string hintPath);
    private static string CheckPath(Assembly a, string dllName);
    private static string CheckPath(string folderPath, string dllName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.NotifyPointInProcHost.NotifyPointInProcHostResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ProfilerPDQException { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ProfilerPDQException();
}
public class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.NPRunner : object {
    private static InProcHost s_host;
    private static InProcUniverse s_universe;
    private static bool s_isExecutionDisabled;
    private static Int32[] ZeroArrayLowerBounds;
    private static object s_lock;
    private static string TraceLogEventSource;
    private static string EntryQueryName;
    private static string ExitQueryName;
    private static string ExitQuery2Name;
    private int MaxInstrCount;
    private string _assemblyLoc;
    private string _hintPath;
    private bool _isEntryQuery;
    private string _containingType;
    private MethodBase _pdqMethod;
    private Type _pdqType;
    [CompilerGeneratedAttribute]
private HostObjectSlotFactory <SlotFactory>k__BackingField;
    internal HostObjectSlotFactory SlotFactory { get; internal set; }
    private Type PDQType { get; }
    private MethodBase NPMethod { get; }
    private bool IsExitQuery2 { get; }
    private NPRunner(string hintPath, string assemblyLocation, string containingType, bool isEntryQuery);
    private static NPRunner();
    public static void StaticDispose();
    public static Object[] RunPDQ(int assemblyIndex, string containingType, bool isEntryQuery, object thisArg, Object[] args, object retVal);
    private static void DisablePDQExecution(Exception ex);
    internal static Object[] RunPDQInternal(string containingType, bool isEntryQuery, object thisArg, Object[] args, object retVal, string hintPath, string assemblyLocation);
    [CompilerGeneratedAttribute]
internal HostObjectSlotFactory get_SlotFactory();
    [CompilerGeneratedAttribute]
internal void set_SlotFactory(HostObjectSlotFactory value);
    [ConditionalAttribute("DEBUG")]
private static void MaybeAssertOnStart();
    private Object[] Run(bool isEntryQuery, object thisArg, Object[] args, object retVal);
    private Slot InstantiateMethod(VirtualMachine vm);
    private CallArgs AcquireSlotsForEntryQuery(VirtualMachine vm, Slot pdqThis, object thisArg, Object[] args);
    private Slot[] AcquireSlotsForMethodCall(VirtualMachine vm, object thisArg, Object[] args);
    private CallArgs AcquireSlotsForExitQuery(VirtualMachine vm, Slot pdqThis, object thisArg, Object[] args, object retVal);
    private Type get_PDQType();
    private MethodBase get_NPMethod();
    private bool get_IsExitQuery2();
}
public class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.PDQInterpreterException : BaseInterpreterException {
    public PDQInterpreterException(string message);
    public PDQInterpreterException(string message, Exception inner);
}
internal static class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.ProfilerNativeMethods : object {
    private static string ProfilerModuleName;
    private static string ProfilerModuleNameSC;
    private static string GetPdqAssemblyName;
    private static string TranslateOldILToNewILName;
    private static int _loaderResult;
    private static NativeGetPDQAssembly _NativeGetPDQAssembly;
    private static NativeTranslateOldILToNewIL _TranslateOldILToNewIL;
    private static ProfilerNativeMethods();
    public static int TranslateOldILToNewIL(Guid& mvid, UInt32 methodToken, UInt32 oldILOffset, UInt32& newILOffset);
    public static int GetPDQAssembly(int assemblyIndex, String& assemblyLocation, String& hintPath);
    private static TDelegate GetDelegateForFunction(IntPtr handle, string name);
}
internal class Microsoft.VisualStudio.Vil.NotifyPointInProcHost.UnresolvedAssemblyException : BaseInterpreterException {
    public UnresolvedAssemblyException(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
