[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.ActionFactory : object {
    private static Type m_actionType;
    public static Type ActionType { get; public set; }
    private static ActionFactory();
    public static SeleniumAction GetActionInstance(ISeleniumWebDriver webDriver);
    public static Type get_ActionType();
    public static void set_ActionType(Type value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.BrowserConstants : object {
    internal static string TagNameApplet;
    internal static string TagNameArea;
    internal static string TagNameMap;
    internal static string TagNameBase;
    internal static string TagNameBasefont;
    internal static string TagNameBr;
    internal static string TagNameColgroup;
    internal static string TagNameCol;
    internal static string TagNameDiv;
    internal static string TagNameEmbed;
    internal static string TagNameIFrame;
    internal static string TagNameFrame;
    internal static string TagNameFrameSet;
    internal static string TagNameMeta;
    internal static string TagNameNoscript;
    internal static string TagNameScript;
    internal static string TagNameObject;
    internal static string TagNameParam;
    internal static string TagNameHead;
    internal static string TagNameHR;
    internal static string TagNameTitle;
    internal static string TagNameStyle;
    internal static string TagNameSection;
    internal static string TagNameNav;
    internal static string TagNameArticle;
    internal static string TagNameAside;
    internal static string TagNameHGroup;
    internal static string TagNameHeader;
    internal static string TagNameFooter;
    internal static string TagNameFigure;
    internal static string TagNameFigCaption;
    internal static string TagNameMark;
    internal static string TagNameText;
    internal static string TagNameBody;
    internal static string TagNameImg;
    internal static string TagNameLabel;
    internal static string TagNameInput;
    internal static string TagNameAnchor;
    internal static string TagNameButton;
    internal static string TagNameTable;
    internal static string TagNameTableBody;
    internal static string TagNameTableFoot;
    internal static string TagNameTableRow;
    internal static string TagNameTableHeader;
    internal static string TagNameTableData;
    internal static string TagNameTableHead;
    internal static string TagNameTextArea;
    internal static string TagNameSelect;
    internal static string TagNameOption;
    internal static string TagNameOptGroup;
    internal static string TagNameEmptyText;
    internal static string TagNameComment;
    internal static string TagNameTopHtml;
    internal static string TagNameVideo;
    internal static string TagNameAudio;
    internal static string TagNameProgress;
    internal static string TagNameAbbr;
    internal static string TagNameAcronym;
    internal static string TagNameAddress;
    internal static string TagNameSubscript;
    internal static string TagNameSuperscript;
    internal static string TagNameB;
    internal static string TagNameBdo;
    internal static string TagNameBig;
    internal static string TagNameBlockQuote;
    internal static string TagNameCaption;
    internal static string TagNameCenter;
    internal static string TagNameCite;
    internal static string TagNameCode;
    internal static string TagNameDd;
    internal static string TagNameDel;
    internal static string TagNameEm;
    internal static string TagNameStrong;
    internal static string TagNameSamp;
    internal static string TagNameKbd;
    internal static string TagNameVar;
    internal static string TagNameDl;
    internal static string TagNameDt;
    internal static string TagNameFont;
    internal static string TagNameH1;
    internal static string TagNameH2;
    internal static string TagNameH3;
    internal static string TagNameH4;
    internal static string TagNameH5;
    internal static string TagNameH6;
    internal static string TagNameI;
    internal static string TagNameIns;
    internal static string TagNameIsIndex;
    internal static string TagNameLegend;
    internal static string TagNameLi;
    internal static string TagNameOl;
    internal static string TagNameP;
    internal static string TagNamePre;
    internal static string TagNameQ;
    internal static string TagNameS;
    internal static string TagNameSmall;
    internal static string TagNameSpan;
    internal static string TagNameStrike;
    internal static string TagNameU;
    internal static string TagNameUL;
    internal static string TagNameDir;
    internal static string TagNameDfn;
    internal static string TagNameMenu;
    internal static string TagNameXmp;
    internal static string TagNameNoBr;
    internal static string TypeValueInputButton;
    internal static string TypeValueResetButton;
    internal static string TypeValueSubmitButton;
    internal static string TypeValueImageButton;
    internal static string TypeValueTextBox;
    internal static string TypeValueEmail;
    internal static string TypeValuePasswordBox;
    internal static string TypeValueCheckBox;
    internal static string TypeValueRadioButton;
    internal static string TypeFileInput;
    internal static string TypeSliderInput;
    internal static string TypeMultiline;
    internal static string TypeSingleline;
    internal static string TypeValueNumber;
    internal static string TypeValueTelephone;
    internal static string TypeValueURL;
    internal static string TypeSearch;
    internal static string TypeVideo;
    internal static string AltKey;
    internal static string NoScrolling;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.BrowserServices.ChromeBrowserService : CrossBrowserService {
    private static string UserDataDirectoryCommandLine;
    private static string NewWindowCommandLine;
    private static string ChromeSwitches;
    private ProxyChromeDriverService m_chromeDriverService;
    protected string BrowserProcessName { get; }
    internal ProxyChromeDriverService ChromeDriverService { get; }
    public ChromeBrowserService(String[] args);
    public ChromeBrowserService(ISeleniumWebDriver webDriver, string windowHandle, ProxyChromeDriverService chromeDriverService);
    private static ChromeBrowserService();
    protected virtual ISeleniumWebDriver InitializeWebDriver(String[] args);
    public virtual void DisposeOnCleanup();
    protected virtual string get_BrowserProcessName();
    internal ProxyChromeDriverService get_ChromeDriverService();
    private static void UpdateArgumentsIfRequired(List`1<string> argsList);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.BrowserServices.EdgeBrowserService : CrossBrowserService {
    protected string BrowserProcessName { get; }
    public EdgeBrowserService(String[] args);
    public EdgeBrowserService(ISeleniumWebDriver webDriver, string windowHandle);
    protected virtual string get_BrowserProcessName();
    protected virtual ISeleniumWebDriver InitializeWebDriver(String[] args);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.BrowserServices.FirefoxBrowserService : CrossBrowserService {
    private static string DefaultFirefoxProfileName;
    protected string BrowserProcessName { get; }
    public FirefoxBrowserService(String[] args);
    public FirefoxBrowserService(ISeleniumWebDriver webDriver, string windowHandle);
    protected virtual ISeleniumWebDriver InitializeWebDriver(String[] args);
    protected virtual string get_BrowserProcessName();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.BrowserServices.SafariBrowserService : CrossBrowserService {
    protected string BrowserProcessName { get; }
    public SafariBrowserService(String[] args);
    public SafariBrowserService(ISeleniumWebDriver webDriver, string windowHandle);
    protected virtual ISeleniumWebDriver InitializeWebDriver(String[] args);
    internal virtual UITestControl LocateDocumentWindow();
    protected virtual string get_BrowserProcessName();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.ChildrenEnumerator : object {
    private IEnumerator`1<SeleniumWebElement> m_enumerator;
    private CrossBrowserElement m_parent;
    private bool m_disposed;
    public object Current { get; }
    public ChildrenEnumerator(IUITechnologyElement element);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CommaListBuilder : object {
    private StringBuilder commaList;
    private static string Comma;
    private static string EscapedComma;
    public static string EscapeForComma(string s);
    public static List`1<string> GetCommaSeparatedValues(string value);
    public void AddValue(string value);
    public void AddValue(object value);
    public void AddRange(IEnumerable`1<string> stringCollection);
    public void AddRange(IEnumerable collection);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserActionExecutor : UITestActionExecutor {
    private bool ClickCoordinateBased { get; }
    public virtual int GetControlSupportLevel(UITechnologyElement control);
    public virtual void Hover(UITechnologyElement control, Point relativeCoordinate, int millisecondsDuration);
    public virtual void Click(UITechnologyElement control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public virtual void DoubleClick(UITechnologyElement control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public virtual void SendKeys(UITechnologyElement control, string text, ModifierKeys modifierKeys, bool isUnicode);
    public virtual void MouseMove(UITechnologyElement control, Point relativeCoordinate);
    public virtual void MoveScrollWheel(UITechnologyElement control, int wheelMoveCount, ModifierKeys modifierKeys);
    public virtual void StartDragging(UITechnologyElement control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public virtual void StopDragging(UITechnologyElement control, Point coordinate, bool isDisplacement);
    public virtual void ReleaseMouse();
    public virtual void PressModifierKeys(UITechnologyElement control, ModifierKeys keys);
    public virtual void ReleaseModifierKeys(UITechnologyElement control, ModifierKeys keys);
    public virtual void ReleaseKeyboard();
    private bool get_ClickCoordinateBased();
    protected virtual CrossBrowserElement GetCrossBrowserElement(UITechnologyElement control);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserAudio : CrossBrowserMedia {
    internal CrossBrowserAudio(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    internal virtual ControlType GetControlType();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserBody : CrossBrowserElement {
    private static string HttpEquivAttribute;
    private static string HttpEquivRefresh;
    internal CrossBrowserBody(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private bool IsRedirectingDocument();
    private string GetDocumentUrl();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserButton : CrossBrowserElement {
    internal CrossBrowserButton(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private string GetDisplayText();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserCheckBox : CrossBrowserElement {
    internal CrossBrowserCheckBox(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserEdit : CrossBrowserElement {
    private bool m_isPassword;
    public bool IsPassword { get; }
    internal CrossBrowserEdit(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    public virtual bool get_IsPassword();
    internal virtual ControlType GetControlType();
    private string GetTextType();
}
[ComVisibleAttribute("True")]
[GuidAttribute("F4D8B6F8-79E1-44E5-AC95-4AB1E94C9F24")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserElement : UITechnologyElement {
    [CompilerGeneratedAttribute]
private IUITechnologyElement <SwitchingElement>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SearchPropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <FilterPropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private CrossBrowserElement <HtmlAncestor>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryElement <QueryIdData>k__BackingField;
    private UITestControl m_documentElement;
    private ProxyWebElement m_webElement;
    private string m_controlTypeName;
    private string m_tagName;
    private string m_friendlyName;
    private string m_name;
    private string m_id;
    private IntPtr m_windowHandle;
    private ISeleniumWebDriver m_webDriver;
    private SeleniumWebDriverBackedSelenium m_WebDriverBackedSelenium;
    private SeleniumSelectElement m_SelectElement;
    private bool isFriendlyNameInitialized;
    private Nullable`1<bool> m_isMultiSelectList;
    private UITechnologyElement m_topLevelElement;
    private static string UnitializedValue;
    private string m_searchXpath;
    private static string c_SetAttributeScript;
    public AutomationElement AutomationElement { get; }
    public int ChildIndex { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string FriendlyName { get; }
    public string TagName { get; }
    public bool IsLeafNode { get; }
    public bool IsPassword { get; }
    public bool IsTreeSwitchingRequired { get; }
    public string Name { get; }
    public string Id { get; }
    public object NativeElement { get; }
    public IQueryElement QueryId { get; }
    public IUITechnologyElement SwitchingElement { get; public set; }
    public UITechnologyManager TechnologyManager { get; }
    public string TechnologyName { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string Value { get; public set; }
    public IntPtr WindowHandle { get; }
    protected Rectangle DocumentWindowLocation { get; }
    internal UITestControl DocumentControl { get; internal set; }
    internal List`1<string> SearchPropertyNames { get; internal set; }
    internal List`1<string> FilterPropertyNames { get; internal set; }
    internal CrossBrowserElement HtmlAncestor { get; internal set; }
    internal ISeleniumWebDriver Driver { get; }
    internal ProxyWebElement WebElement { get; }
    internal string SearchXpath { get; internal set; }
    internal bool IsWebElementValid { get; }
    internal bool IsTopLevelElement { get; }
    internal QueryElement QueryIdData { get; internal set; }
    internal bool IsMultiSelectList { get; }
    internal IList`1<ProxyWebElement> GetSelectElementOptions { get; }
    internal SeleniumWebDriverBackedSelenium WebDriverSelenium { get; }
    internal SeleniumSelectElement SelectElement { get; }
    internal CrossBrowserService CurrentBrowserService { get; }
    internal CrossBrowserElement(ProxyWebElement webElement, ISeleniumWebDriver driver, IntPtr windowHandle);
    public virtual void CacheProperties();
    public void InitializePendingProperties();
    public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outpointX, Int32& outpointY);
    public virtual bool Equals(IUITechnologyElement element);
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    public virtual object GetPropertyValue(string propertyName);
    internal virtual object GetPropertyValue(string propertyName, CrossBrowserElement containerElement);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    internal virtual ControlType GetControlType();
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual bool InitializeProgrammaticScroll();
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    public virtual void ScrollProgrammatically(ScrollDirection scrollDirection, ScrollAmount scrollAmount);
    public virtual void SetFocus();
    public virtual void WaitForReady();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual AutomationElement get_AutomationElement();
    public virtual int get_ChildIndex();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual string get_FriendlyName();
    public string get_TagName();
    public virtual bool get_IsLeafNode();
    public virtual bool get_IsPassword();
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual string get_Name();
    public string get_Id();
    public virtual object get_NativeElement();
    public virtual IQueryElement get_QueryId();
    [CompilerGeneratedAttribute]
public virtual IUITechnologyElement get_SwitchingElement();
    [CompilerGeneratedAttribute]
public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual UITechnologyManager get_TechnologyManager();
    public virtual string get_TechnologyName();
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IntPtr get_WindowHandle();
    protected virtual Rectangle get_DocumentWindowLocation();
    internal virtual void CreateQueryId(CrossBrowserElement ancestorElement);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    protected string GetTextContainerFriendlyName();
    protected string GetDefaultFriendlyName();
    protected void SetAttribute(string attributeName, object value);
    internal UITestControl get_DocumentControl();
    internal void set_DocumentControl(UITestControl value);
    internal virtual CrossBrowserElement GetHtmlAncestor();
    internal virtual void InitializeQueryIDProperties();
    [CompilerGeneratedAttribute]
internal List`1<string> get_SearchPropertyNames();
    [CompilerGeneratedAttribute]
internal void set_SearchPropertyNames(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<string> get_FilterPropertyNames();
    [CompilerGeneratedAttribute]
internal void set_FilterPropertyNames(List`1<string> value);
    [CompilerGeneratedAttribute]
internal CrossBrowserElement get_HtmlAncestor();
    [CompilerGeneratedAttribute]
internal void set_HtmlAncestor(CrossBrowserElement value);
    internal ISeleniumWebDriver get_Driver();
    internal ProxyWebElement get_WebElement();
    internal string get_SearchXpath();
    internal void set_SearchXpath(string value);
    internal virtual bool get_IsWebElementValid();
    internal bool get_IsTopLevelElement();
    [CompilerGeneratedAttribute]
internal QueryElement get_QueryIdData();
    [CompilerGeneratedAttribute]
internal void set_QueryIdData(QueryElement value);
    internal bool get_IsMultiSelectList();
    internal IList`1<ProxyWebElement> get_GetSelectElementOptions();
    internal SeleniumWebDriverBackedSelenium get_WebDriverSelenium();
    internal SeleniumSelectElement get_SelectElement();
    internal CrossBrowserService get_CurrentBrowserService();
    internal void AddElementsToList(IReadOnlyCollection`1<SeleniumWebElement> elements, List`1<UITechnologyElement> uiTechnologyElements);
    private CrossBrowserElement Navigate(NavigateDirection direction);
    private void SingleLineDeleteContent();
    private void MultiLineDeleteContent();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserElementFactory : object {
    public static CrossBrowserElement CreateCrossBrowserElementInstanceWithInitialize(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle, UITestControl documentElement);
    public static CrossBrowserElement CreateCrossBrowserElementInstanceWithoutInitialize(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    private static CrossBrowserElement CreateInputNode(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserExtensionPackage : UITestExtensionPackage {
    private CrossBrowserTestPlugin m_crossBrowserPluginManager;
    private CrossBrowserFactory m_factory;
    private Version m_packageVersion;
    private Version m_vsVersion;
    private CrossBrowserActionExecutor m_actionExecutor;
    public string PackageDescription { get; }
    public string PackageName { get; }
    public string PackageVendor { get; }
    public Version PackageVersion { get; }
    public Version VSVersion { get; }
    public virtual void Dispose();
    public virtual object GetService(Type serviceType);
    public virtual string get_PackageDescription();
    public virtual string get_PackageName();
    public virtual string get_PackageVendor();
    public virtual Version get_PackageVersion();
    public virtual Version get_VSVersion();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserFactory : BrowserFactory {
    public string Name { get; }
    public IList`1<string> SupportedVersions { get; }
    public string TechnologyManagerTypeName { get; }
    public virtual int GetBrowserSupportLevel(string browserName);
    public virtual BrowserService Launch(String[] arguments);
    public virtual BrowserService Launch(Uri uri);
    public virtual BrowserService Launch();
    public virtual BrowserHelper GetBrowserHelper();
    public virtual BrowserService Locate(IntPtr handle);
    public virtual BrowserService Locate(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    public virtual BrowserService[] LocateAll(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    public virtual string get_Name();
    public virtual IList`1<string> get_SupportedVersions();
    public virtual string get_TechnologyManagerTypeName();
    internal CrossBrowserService CreateCrossBrowserService(CrossBrowserService service, ISeleniumWebDriver webDriver, string crossBrowserWindowHandle);
    private static int CheckSeleniumComponents(string browserName);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserFileInput : CrossBrowserElement {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string Value { get; public set; }
    private string FileName { get; private set; }
    internal CrossBrowserFileInput(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual object GetPropertyValueInternal(string propertyName);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    [CompilerGeneratedAttribute]
private string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserFrame : CrossBrowserElement {
    internal CrossBrowserFrame(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual string InitializeFriendlyName();
    protected virtual object GetPropertyValueInternal(string propertyName);
    internal virtual ControlType GetControlType();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserHyperlink : CrossBrowserElement {
    internal CrossBrowserHyperlink(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserImage : CrossBrowserElement {
    internal CrossBrowserImage(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private CrossBrowserElement FindParentHyperlinkNode();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserInputButton : CrossBrowserElement {
    internal CrossBrowserInputButton(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private string GetDisplayText();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserLabel : CrossBrowserElement {
    internal CrossBrowserLabel(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserMedia : CrossBrowserElement {
    private static string c_PauseScript;
    private static string c_PlayScript;
    private static int NETWORK_NO_SOURCE;
    internal CrossBrowserMedia(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual string InitializeFriendlyName();
    public virtual object GetPropertyValue(string propertyName);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    internal virtual ControlType GetControlType();
    private void Play();
    private void Pause();
    private void SetCurrentTime(float timeToSet);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserOptionElement : CrossBrowserElement {
    internal CrossBrowserOptionElement(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserPane : CrossBrowserElement {
    internal CrossBrowserPane(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual string InitializeFriendlyName();
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual object GetPropertyValueInternal(string propertyName);
    internal virtual ControlType GetControlType();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserPluginSearch : object {
    private CrossBrowserPluginSearchData m_searchData;
    private Stopwatch m_searchTimer;
    private long m_currentSearchTimeOut;
    private ISeleniumWebDriver m_webDriver;
    private List`1<CrossBrowserElement> m_matchedElements;
    private String[] m_ignorablePrimarySearchProperties;
    internal List`1<CrossBrowserElement> MatchedElements { get; private set; }
    internal CrossBrowserPluginSearch(CrossBrowserPluginSearchData searchInfo);
    internal List`1<CrossBrowserElement> Search(CrossBrowserElement containerElement, long localTimeOut);
    public void FilterElementsBasedOnControlType();
    public void AddXPathToElements(ReadOnlyCollection`1<SeleniumWebElement> webElements);
    public void AddToMatchedElements(CrossBrowserElement element);
    private ReadOnlyCollection`1<SeleniumWebElement> FindElementsUsingPrimaryProperties(CrossBrowserElement containerElement, bool isContainerFrameElement, bool useSmartMatch, String& aggregatedSearchXpath);
    public ReadOnlyCollection`1<SeleniumWebElement> FilterUsingSmartMatch(ReadOnlyCollection`1<SeleniumWebElement> webElements);
    private List`1<SeleniumWebElement> FilterElementsIgnoringProperty(ReadOnlyCollection`1<SeleniumWebElement> webElements, string propertyToIgnore, KeyValuePair`2& mismatchedProperty);
    private static void AddXPathToElement(ReadOnlyCollection`1<SeleniumWebElement> webElements, CrossBrowserElement element, int tentativeIndex);
    private void InitializeMatchedElements();
    private bool OptimizeSearchWithTagInstance(List`1<CrossBrowserElement> primaryfilteredCrossBrowserElements, CrossBrowserElement containerElement);
    private void AddTagNameConditionToUnsupportedList();
    private List`1<CrossBrowserElement> GetCrossBrowserElementCollection(ReadOnlyCollection`1<SeleniumWebElement> webElements, CrossBrowserElement containerElement, string searchXpath);
    private void CacheQueryID(CrossBrowserElement containerElement);
    internal List`1<CrossBrowserElement> get_MatchedElements();
    private void set_MatchedElements(List`1<CrossBrowserElement> value);
    private void AddToMatchedElements(List`1<CrossBrowserElement> crossBrowserElements);
    private CrossBrowserElement CreateCrossBrowserElement(ProxyWebElement webElement, CrossBrowserElement containerElement, string searchXpath);
    private ReadOnlyCollection`1<SeleniumWebElement> FindElementsBy(string propertyName, string propertyValue, ISeleniumSearchContext searchContext);
    public List`1<CrossBrowserElement> MatchPrimaryProperties(List`1<CrossBrowserElement> primaryMatchedCrossBrowserElements, CrossBrowserElement containerElement);
    public bool MatchNonXpathSearchProperties(CrossBrowserElement crossBrowserElement, CrossBrowserElement containerElement);
    private bool IsTagInstanceFirstFilterProperty();
    public void MatchSecondaryProperties(CrossBrowserElement containerElement, List`1<CrossBrowserElement> primaryFilteredElements);
    private bool Match(IUITechnologyElement element, PropertyCondition condition);
    private int GetPropertyCount();
    private void InitializeTimer(long timeOut);
    private void ThrowIfTimedOut(string details);
    private void LogWarningsForIgnoredProperties(bool areSecondaryConditionsUsed, bool isTagInstanceUsed);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserPluginSearchData : object {
    [CompilerGeneratedAttribute]
private IUITechnologyElement <SearchContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private AndCondition <SearchCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterCondition <FilterCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SmartMatchEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FindAll>k__BackingField;
    private Dictionary`2<string, object> m_fastFilterProperties;
    private List`1<PropertyCondition> m_xpathUnsupportedPrimaryConditions;
    private List`1<PropertyCondition> m_supportedSecondaryConditions;
    private List`1<PropertyCondition> m_ignoredPropertyConditions;
    private static List`1<string> s_supportedFilterProperties;
    private string m_tagName;
    private string m_controlType;
    private static Dictionary`2<string, object> s_AllowedPrimaryFastFilteredProperties;
    public IUITechnologyElement SearchContainer { get; public set; }
    public AndCondition SearchCondition { get; public set; }
    public FilterCondition FilterCondition { get; public set; }
    public bool SmartMatchEnabled { get; public set; }
    public Dictionary`2<string, object> FastFilterPrimaryProperty { get; }
    public string TagName { get; }
    public string ControlType { get; }
    public List`1<PropertyCondition> XpathUnsupportedPrimaryConditions { get; }
    public List`1<PropertyCondition> SupportedSecondaryConditions { get; }
    public List`1<PropertyCondition> IgnoredPropertyConditions { get; }
    public bool FindAll { get; public set; }
    private static List`1<string> SupportedFilterProperties { get; }
    public CrossBrowserPluginSearchData(AndCondition primaryCondition, FilterCondition filterCondition, IUITechnologyElement container, bool smartMatchEnabled);
    public CrossBrowserPluginSearchData(IQueryElement queryElementData);
    public CrossBrowserPluginSearchData(AndCondition primaryCondition, IUITechnologyElement container);
    private static CrossBrowserPluginSearchData();
    [CompilerGeneratedAttribute]
public IUITechnologyElement get_SearchContainer();
    [CompilerGeneratedAttribute]
public void set_SearchContainer(IUITechnologyElement value);
    [CompilerGeneratedAttribute]
public AndCondition get_SearchCondition();
    [CompilerGeneratedAttribute]
public void set_SearchCondition(AndCondition value);
    [CompilerGeneratedAttribute]
public FilterCondition get_FilterCondition();
    [CompilerGeneratedAttribute]
public void set_FilterCondition(FilterCondition value);
    [CompilerGeneratedAttribute]
public bool get_SmartMatchEnabled();
    [CompilerGeneratedAttribute]
public void set_SmartMatchEnabled(bool value);
    public Dictionary`2<string, object> get_FastFilterPrimaryProperty();
    public string get_TagName();
    public string get_ControlType();
    public List`1<PropertyCondition> get_XpathUnsupportedPrimaryConditions();
    public List`1<PropertyCondition> get_SupportedSecondaryConditions();
    public List`1<PropertyCondition> get_IgnoredPropertyConditions();
    [CompilerGeneratedAttribute]
public bool get_FindAll();
    [CompilerGeneratedAttribute]
public void set_FindAll(bool value);
    private bool IsConditionValidForXPath(PropertyCondition condition);
    private static List`1<string> get_SupportedFilterProperties();
    private static Dictionary`2<string, object> InitializePrimaryFastFilterProperties();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserProgressBar : CrossBrowserElement {
    internal CrossBrowserProgressBar(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private float GetFloatValue(string propertyName, float defaultValue);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserRadioButton : CrossBrowserElement {
    internal CrossBrowserRadioButton(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private List`1<UITechnologyElement> GetGroup();
    private string XpathForGroup(string groupName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionNotSupportedOnDisabledControlException { get; }
    internal static string ActionWithValue { get; }
    internal static string BrowserLaunchNotSupportedException { get; }
    internal static string BrowserWindowNotFound { get; }
    internal static string ControlDetailsNotSpecified { get; }
    internal static string Ellipsis { get; }
    internal static string InvalidMultipleSelectionException { get; }
    internal static string InvalidParameterValue { get; }
    internal static string LaunchNotSupportedException { get; }
    internal static string MediaSourceFailToLoad { get; }
    internal static string Microsoft { get; }
    internal static string PackageDesc { get; }
    internal static string SeleniumBinariesBlocked { get; }
    internal static string SeleniumNotPresent { get; }
    internal static string SetPropertyActionName { get; }
    internal static string SetPropertyNotSupportedMessage { get; }
    internal static string SetStateNotSupportedMessage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionNotSupportedOnDisabledControlException();
    internal static string get_ActionWithValue();
    internal static string get_BrowserLaunchNotSupportedException();
    internal static string get_BrowserWindowNotFound();
    internal static string get_ControlDetailsNotSpecified();
    internal static string get_Ellipsis();
    internal static string get_InvalidMultipleSelectionException();
    internal static string get_InvalidParameterValue();
    internal static string get_LaunchNotSupportedException();
    internal static string get_MediaSourceFailToLoad();
    internal static string get_Microsoft();
    internal static string get_PackageDesc();
    internal static string get_SeleniumBinariesBlocked();
    internal static string get_SeleniumNotPresent();
    internal static string get_SetPropertyActionName();
    internal static string get_SetPropertyNotSupportedMessage();
    internal static string get_SetStateNotSupportedMessage();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserSelect : CrossBrowserElement {
    private bool isList;
    private int m_size;
    internal CrossBrowserSelect(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private String[] GetSelectedItems();
    private string GetListSelection();
    private void PerformListSelectionByIndices(Int32[] itemIndices);
    private void PerfromListSelectionByItems(String[] itemValues);
    private void PerformListSelection(string propertyValue);
    private void AddElementsToList(IList`1<ProxyWebElement> elements, List`1<UITechnologyElement> uiTechnologyElements);
}
internal abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserService : BrowserService {
    protected ISeleniumWebDriver m_webDriver;
    private ProxyWebElement m_DocumentWebElement;
    private IntPtr m_topLevelWindowHandle;
    private CrossBrowserElement m_topLevelElement;
    private SeleniumWebDriverBackedSelenium m_WebDriverBackedSelenium;
    private CrossBrowserElement m_document;
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, Func`2<String[], CrossBrowserService>> <SupportedBrowsers>k__BackingField;
    private UITestControl m_topLevelUITestControl;
    private string m_crossBrowserWindowhandle;
    protected string BrowserProcessName { get; }
    public UITechnologyElement TopLevelWindow { get; }
    public Uri Uri { get; }
    public UITechnologyElement DocumentWindow { get; }
    public Version Version { get; }
    public object NativeSeleniumElement { get; }
    unknown CrossBrowserElement SetDocumentWindow {internal set; }
    unknown SeleniumWebDriverBackedSelenium SetWebDriverbackedSelenium {internal set; }
    internal UITestControl TopLevelUITestControl { get; private set; }
    private SeleniumWebDriverBackedSelenium WebDriverSelenium { get; }
    internal ISeleniumWebDriver WebDriver { get; internal set; }
    internal ProxyWebElement DocumentWebElement { get; private set; }
    internal string WindowId { get; internal set; }
    internal IntPtr TopLevelWindowHandle { get; internal set; }
    private static Dictionary`2<string, Func`2<String[], CrossBrowserService>> SupportedBrowsers { get; private set; }
    private string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.CurrentWindowHandle { get; }
    private string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.PageSource { get; }
    private string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.Title { get; }
    private string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.Url { get; private set; }
    private ReadOnlyCollection`1<string> Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.WindowHandles { get; }
    protected CrossBrowserService(String[] args);
    protected CrossBrowserService(ISeleniumWebDriver webDriver, string windowHandle);
    private static CrossBrowserService();
    protected virtual ISeleniumWebDriver InitializeWebDriver(String[] args);
    protected abstract virtual string get_BrowserProcessName();
    public static CrossBrowserService Launch(Uri uri);
    public static CrossBrowserService Launch(String[] args);
    public bool TryLocate(PropertyExpressionCollection searchProperties, String& crossBrowserWindowHandle, ISeleniumWebDriver& webDriver);
    public bool TrySmartLocate(string windowTitle, String& crossBrowserWindowHandle, ISeleniumWebDriver& webDriver);
    public bool TryLocate(IntPtr Handle);
    public static bool IsBrowserRegistered(string browserName);
    public virtual UITechnologyElement get_TopLevelWindow();
    public virtual Uri get_Uri();
    public virtual void NavigateToUrl(Uri uri);
    private void NavigateToUrl(string url);
    public virtual object ExecuteScript(string script, Object[] args);
    public virtual void Dispose();
    public virtual void DisposeOnCleanup();
    public virtual void Back();
    public virtual void Close();
    public virtual void Forward();
    public virtual void Refresh();
    public virtual void PerformDialogAction(BrowserDialogAction browserDialogAction, object actionParameter);
    public virtual UITechnologyElement get_DocumentWindow();
    public virtual void NavigateToHomepage();
    public virtual void StopPageLoad();
    public virtual Version get_Version();
    public virtual object get_NativeSeleniumElement();
    protected virtual void InitializeTopLevelWindow();
    private static void FindApplicationHostWindowForEdge(List`1<Process> childProcesses);
    internal virtual UITestControl LocateDocumentWindow();
    internal void set_SetDocumentWindow(CrossBrowserElement value);
    internal void set_SetWebDriverbackedSelenium(SeleniumWebDriverBackedSelenium value);
    internal UITestControl get_TopLevelUITestControl();
    private void set_TopLevelUITestControl(UITestControl value);
    private SeleniumWebDriverBackedSelenium get_WebDriverSelenium();
    private void WaitForPageToLoad();
    private Object[] ParseScriptArguments(IEnumerable args);
    private object ValidateScriptReturnValue(object retValue);
    private void InitializeCrossBrowserService(String[] args);
    internal ISeleniumWebDriver get_WebDriver();
    internal void set_WebDriver(ISeleniumWebDriver value);
    internal ProxyWebElement get_DocumentWebElement();
    private void set_DocumentWebElement(ProxyWebElement value);
    internal string get_WindowId();
    internal void set_WindowId(string value);
    internal IntPtr get_TopLevelWindowHandle();
    internal void set_TopLevelWindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, Func`2<String[], CrossBrowserService>> get_SupportedBrowsers();
    [CompilerGeneratedAttribute]
private static void set_SupportedBrowsers(Dictionary`2<string, Func`2<String[], CrossBrowserService>> value);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.Close();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.get_CurrentWindowHandle();
    private sealed virtual override SeleniumOptions Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.Manage();
    private sealed virtual override SeleniumNavigation Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.Navigate();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.get_PageSource();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.Quit();
    private sealed virtual override SeleniumTargetLocator Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.SwitchTo();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.get_Title();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.get_Url();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.set_Url(string value);
    private sealed virtual override ReadOnlyCollection`1<string> Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumWebDriver.get_WindowHandles();
    private sealed virtual override SeleniumWebElement Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumSearchContext.FindElement(By by);
    private sealed virtual override ReadOnlyCollection`1<SeleniumWebElement> Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowserProxy.ISeleniumSearchContext.FindElements(By by);
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private void <Dispose>b__20_0();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserServiceManager : object {
    private static CrossBrowserServiceManager instance;
    private List`1<CrossBrowserService> browserServiceList;
    public static CrossBrowserServiceManager Instance { get; }
    public int Count { get; }
    public CrossBrowserService Item { get; public set; }
    public static CrossBrowserServiceManager get_Instance();
    public void Add(CrossBrowserService item);
    public void Clear();
    public IEnumerator`1<CrossBrowserService> GetEnumerator();
    public CrossBrowserService FindFirstOrDefault(Func`2<CrossBrowserService, bool> predicate);
    public bool Remove(CrossBrowserService item);
    public int get_Count();
    public CrossBrowserService get_Item(int index);
    public void set_Item(int index, CrossBrowserService value);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserSliderInput : CrossBrowserElement {
    private static string m_defaultStep;
    private static string m_any;
    private static float m_defaultMin;
    private static float m_defaultMax;
    private int m_defaultPrecision;
    private static string m_FireEventScript;
    internal CrossBrowserSliderInput(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
    private double GetValueAsNumberAttribute();
    private void SetValueAttribute(string value, string propertyName);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserTable : CrossBrowserElement {
    internal CrossBrowserTable(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    internal virtual ControlType GetControlType();
    protected virtual object GetPropertyValueInternal(string propertyName);
    private int GetColumnCount();
    private int GetCellCount();
    private int GetRowCount();
    private List`1<UITechnologyElement> GetCells();
    private List`1<UITechnologyElement> GetRows();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserTableCell : CrossBrowserElement {
    internal CrossBrowserTableCell(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual string InitializeFriendlyName();
    protected virtual object GetPropertyValueInternal(string propertyName);
    internal virtual ControlType GetControlType();
    internal static int GetColumnIndex(ProxyWebElement element);
    internal static int GetRowIndex(ProxyWebElement element);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserTableRow : CrossBrowserElement {
    internal CrossBrowserTableRow(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    protected virtual object GetPropertyValueInternal(string propertyName);
    internal virtual ControlType GetControlType();
    private List`1<UITechnologyElement> GetCellsOfThisRow();
}
[ComVisibleAttribute("True")]
[GuidAttribute("F95A288A-1D63-40DE-A3E8-0340C75390F3")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserTestPlugin : UITechnologyManager {
    private bool m_smartMatchEnabled;
    private static string DllExtensionString;
    public string TechnologyName { get; }
    private int SearchTimeOut { get; }
    private int MaxSearchRetries { get; }
    public virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void CancelStep();
    public virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    public virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public virtual int GetControlSupportLevel(IntPtr windowHandle);
    public virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    public virtual ILastInvocationInfo GetLastInvocationInfo();
    public virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    public virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    public virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    public virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    public virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    public virtual void ProcessMouseEnter(IntPtr handle);
    public virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
private Assembly AssemblyResolve(object sender, ResolveEventArgs args);
    public virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    public virtual void SetTechnologyManagerProperty(UITechnologyManagerProperty propertyName, object propertyValue);
    public virtual void StartSession(bool recordingSession);
    public virtual void StopSession();
    public virtual string get_TechnologyName();
    private void InitializeTechnologyManagerProperties();
    private int get_SearchTimeOut();
    private int get_MaxSearchRetries();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserTextArea : CrossBrowserElement {
    private string m_type;
    internal CrossBrowserTextArea(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    protected virtual object GetPropertyValueInternal(string propertyName);
    protected virtual string InitializeFriendlyName();
    internal virtual ControlType GetControlType();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.CrossBrowserVideo : CrossBrowserMedia {
    internal CrossBrowserVideo(ProxyWebElement webElement, ISeleniumWebDriver webDriver, IntPtr windowHandle);
    internal virtual ControlType GetControlType();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.Extensions : object {
    [ExtensionAttribute]
public static ReadOnlyCollection`1<SeleniumWebElement> FindElementsByTagName(ISeleniumSearchContext searchContext, string tagName);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.FriendlyNameUtility : object {
    internal static string PostProcessFriendlyName(string friendlyName);
    public static string SanitizeFriendlyName(string friendlyName);
    internal static string GetNonNullString(string rawString);
    internal static bool IsTextListItem(string tagName);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.NativeMethods : object {
    internal static bool IsWindow(IntPtr hWnd);
    public static int GetClassName(IntPtr hwnd, StringBuilder lpClassName, int nMaxCount);
    public static bool EnumChildWindows(IntPtr window, EnumWindowsProc callback, IntPtr lParam);
    public static bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);
    public static UInt32 GetWindowThreadProcessId(IntPtr hWnd, UInt32& processId);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.PluginConstant : object {
    public static string TechnologyManagerName;
    public static int SearchWaitInterval;
    public static string CrossBrowserNameProperty;
    public static string CrossBrowserAltProperty;
    public static string CrossBrowserHrefProperty;
    public static string CrossBrowserHtmlForProperty;
    public static string CrossBrowserIdProperty;
    public static string CrossBrowserInnerTextProperty;
    public static string CrossBrowserTextContentProperty;
    public static string CrossBrowserMaxProperty;
    public static string CrossBrowserMinProperty;
    public static string CrossBrowserStepProperty;
    public static string CrossBrowserDisabledProperty;
    public static string CrossBrowserRequiredProperty;
    public static string CrossBrowserSrcProperty;
    public static string CrossBrowserTargetProperty;
    public static string CrossBrowserTitleProperty;
    public static string CrossBrowserTypeProperty;
    public static string CrossBrowserValueProperty;
    public static string CrossBrowserClassProperty;
    public static string CrossBrowserSizeProperty;
    public static string CrossBrowserAccessKeyProperty;
    public static string CrossBrowserInnerHtmlProperty;
    public static string CrossBrowserOuterHtmlProperty;
    internal static string CrossBrowserRoleProperty;
    internal static string CrossBrowserRoleTypeApplication;
    internal static string CrossBrowserDefaultValueProperty;
    public static string CrossBrowserCellIndexProperty;
    public static string CrossBrowserContentEditableProperty;
    public static string CrossBrowserMaxLengthProperty;
    public static string CrossBrowserReadOnlyProperty;
    public static string CrossBrowserRowIndexProperty;
    public static string CrossBrowserScrollingProperty;
    public static string CrossBrowserCurrentTimeProperty;
    public static string CrossBrowserMutedProperty;
    public static string CrossBrowserDurationProperty;
    public static string CrossBrowserReadyStateProperty;
    public static string CrossBrowserPlaybackRateProperty;
    public static string CrossBrowserNetworkStateProperty;
    public static string CrossBrowserPausedProperty;
    public static string CrossBrowserVolumeProperty;
    public static string CrossBrowserAutoPlayProperty;
    public static string CrossBrowserCurrentSrcProperty;
    public static string CrossBrowserMediaEndedProperty;
    public static string CrossBrowserSeekingProperty;
    public static string CrossBrowserLoopProperty;
    public static string CrossBrowserControlsProperty;
    public static string CrossBrowserPosterProperty;
    public static string CrossBrowserVideoHeightProperty;
    public static string CrossBrowserVideoWidthProperty;
    public static int MaxPropertyValueLength;
    internal static string FwLink;
    internal static string TypeFormatterString;
    internal static string TypeRadio;
    public static string FireFoxBrowserString;
    public static string ChromeBrowserString;
    public static string SafariBrowserString;
    public static string EdgeBrowserString;
    public static string ChromeBrowserWindowTitle;
    public static string ChromeBrowserClassName;
    public static string FirefoxBrowserWindowTitle;
    public static string FirefoxBrowserClassName;
    public static string XPATH_ROW_HEAD;
    public static string XPATH_ROW_BODY;
    public static string XPATH_ROW_FOOT;
    public static string XPATH_ROW;
    public static string XPATH_ROW_COMBINED;
    public static string XPATH_CELL_HEAD_HEADERCELL;
    public static string XPATH_CELL_HEAD_CELL;
    public static string XPATH_CELL_BODY;
    public static string XPATH_CELL_FOOT;
    public static string XPATH_CELL;
    public static string XPATH_CELL_COMBINED;
    public static string FireFoxProfileDirectoryKey;
    public static string ChromeProfileUserDataDirectoryKey;
    public static string ClickCoordinateBased;
    public static string NavigationTimeout;
    internal static string SeleniumProxyDllName;
    private static PluginConstant();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.ProcessInfo : ValueType {
    internal IntPtr Reserved1;
    internal IntPtr PebBaseAddress;
    internal IntPtr Reserved2_0;
    internal IntPtr Reserved2_1;
    internal IntPtr UniqueProcessId;
    internal IntPtr InheritedFromUniqueProcessId;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.PropertyFetcher : object {
    private static Dictionary`2<string, string> m_attributesMap;
    internal static Dictionary`2<string, string> AttributesMap { get; }
    internal static Dictionary`2<string, string> get_AttributesMap();
    internal static object GetPropertyValue(ProxyWebElement webElement, ISeleniumWebDriver webDriver, string propertyName);
    internal static object GetPropertyValue(ProxyWebElement webElement, ProxyWebElement containerElement, ISeleniumWebDriver webDriver, string propertyName);
    internal static int GetTagInstance(ProxyWebElement element, ProxyWebElement ancestorElement, ISeleniumWebDriver webDriver);
    private static string GetLabeledByControlText(SeleniumWebElement webElement, ISeleniumWebDriver webDriver);
    internal static string GetAccessKey(SeleniumWebElement webElement);
    private static Dictionary`2<string, string> InitializeAttributesMap();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.PropertyName : object {
    internal static string AbsolutePath;
    internal static string AccessKey;
    internal static string AutoPlay;
    internal static string CurrentSrc;
    internal static string Alt;
    internal static string CellCount;
    internal static string Checked;
    internal static string Class;
    internal static string ClassName;
    internal static string ColumnIndex;
    internal static string Columns;
    internal static string ColumnCount;
    internal static string CopyPastedText;
    internal static string Cells;
    internal static string ControlDefinition;
    internal static string Controls;
    internal static string ControlType;
    internal static string CurrentTime;
    internal static string CurrentTimeAsString;
    internal static string DefaultChecked;
    internal static string DefaultText;
    internal static string Disabled;
    internal static string DisplayText;
    internal static string Duration;
    internal static string DurationAsString;
    internal static string Enabled;
    internal static string Ended;
    internal static string FileName;
    internal static string Group;
    internal static string FrameDocument;
    internal static string FriendlyName;
    internal static string HelpText;
    internal static string Href;
    internal static string Id;
    internal static string ImageHyperLink;
    internal static string Index;
    internal static string InnerHtml;
    internal static string InnerText;
    internal static string IsPassword;
    internal static string ItemCount;
    internal static string Items;
    internal static string LabeledBy;
    internal static string LabelFor;
    internal static string LinkAbsolutePath;
    internal static string Loop;
    internal static string IsMultipleSelection;
    internal static string Multiple;
    internal static string Max;
    internal static string MaxDepth;
    internal static string MaxLength;
    internal static string Min;
    internal static string Muted;
    internal static string Name;
    internal static string NativeControlType;
    internal static string NetworkState;
    internal static string OuterHtml;
    internal static string OuterText;
    internal static string PageUrl;
    internal static string Paused;
    internal static string Play;
    internal static string Pause;
    internal static string CurrentTimeAsFloat;
    internal static string PlaybackRate;
    internal static string Poster;
    internal static string ReadOnly;
    internal static string ReadyState;
    internal static string RedirectingPage;
    internal static string Required;
    internal static string RowIndex;
    internal static string RowCount;
    internal static string Rows;
    internal static string ScrollOrientation;
    internal static string Scrollable;
    internal static string Seeking;
    internal static string Selected;
    internal static string SelectedItem;
    internal static string SelectedItems;
    internal static string SelectedIndex;
    internal static string SelectedIndices;
    internal static string Size;
    internal static string Src;
    internal static string Step;
    internal static string TabIndex;
    internal static string Table;
    internal static string TagInstance;
    internal static string TagName;
    internal static string Target;
    internal static string Text;
    internal static string Title;
    internal static string Type;
    internal static string Value;
    internal static string ValueAsNumber;
    internal static string Volume;
    internal static string ValueAttribute;
    internal static string VideoHeight;
    internal static string VideoWidth;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.SearchHelper : object {
    private static string domPrimaryFormatString;
    private static Regex domFormat;
    private static Regex domPrimaryFormat;
    private static string SingleQuote;
    private static string FindAll;
    private static SearchHelper();
    internal static CrossBrowserPluginSearchData GetSearchData(string queryElement, IUITechnologyElement parentElement, bool smartMatchEnabled);
    internal static CrossBrowserElement GetValidParentElement(CrossBrowserPluginSearchData searchInfo);
    private static void MoveToFilterProperties(AndCondition primary, FilterCondition secondary, String[] properties);
    private static Match ValidateQueryID(string queryElement);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.SeleniumSelectElementFactory : object {
    private static Type m_selectElementType;
    public static Type SelectElementType { get; public set; }
    private static SeleniumSelectElementFactory();
    public static SeleniumSelectElement GetSelectElementInstance(ProxyWebElement webElement);
    public static Type get_SelectElementType();
    public static void set_SelectElementType(Type value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.SimpleTimer : object {
    private string name;
    private MeasurementBlock measurementBlock;
    private long threshold;
    private bool disposed;
    private static ConcurrentDictionary`2<string, MeasurementBlock> measurementBlocks;
    public SimpleTimer(string timerName);
    public SimpleTimer(string timerName, long thresholdInMilliseconds);
    private static SimpleTimer();
    public void Step();
    public sealed virtual void Dispose();
    public void StopAndLog();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.Tracer : object {
    private static int s_processId;
    private static string s_processName;
    private static TraceSwitch s_traceLevelSwitch;
    private static TraceSwitch s_traceLevelSwitchForUITest;
    private static Tracer();
    public static void Error(string s);
    public static void Error(string format, Object[] args);
    public static void Error(Exception exceptionToTrace);
    public static void Warning(string s);
    public static void Warning(string format, Object[] args);
    public static void WarningIf(bool condition, string message);
    public static void WarningIf(bool condition, string format, Object[] args);
    public static void Info(string s);
    public static void Info(string format, Object[] args);
    public static void Verbose(string s);
    public static void Verbose(string format, Object[] args);
    public static void VerboseIf(bool condition, string format, Object[] args);
    public static void VerboseIf(bool condition, string message);
    public static bool ShouldTrace(TraceLevel traceLevel);
    private static string FormatException(Exception exceptionToTrace);
    private static void WriteLine(TraceLevel level, string message);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.Utility : object {
    private static string s_seleniumInstallDirectory;
    private static string SeleniumComponentsTargetDirectory;
    private static string NoResponseFromServerString;
    internal static string SeleniumInstallDirectory { get; }
    private static string CommonDirectory { get; }
    private static int NavigationTimeout { get; }
    private static Utility();
    public static void MapAndReThrow(Exception exception);
    public static bool IsDocumentReady(ProxyWebDriverBackedSelenium m_webDriverBackedSelenium);
    public static bool IsChildOfCurrentProcess(Process process);
    public static string FindAbsolutePath(string url);
    public static Process GetParentProcess(IntPtr handle);
    public static List`1<int> GetCurrentRunningProcessIds();
    public static List`1<Process> GetNewChildProcess(List`1<int> beforePid);
    public static string GetWindowTitleSuffix();
    public static string GetCurrentBrowserClassName();
    public static UITestControl CreateUITestControlForBrowserWindow(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties, string browserWindowTitle, string browserWindowClassName);
    public static Process GetLatestProcess(List`1<Process> processList);
    private static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, ProcessInfo& processInformation, int processInformationLength, Int32& returnLength);
    public static string FindRelativePath(string url);
    public static string GetProfileDirectory(string profileDirectoryKey);
    public static bool NoResponseFromServerWait(Exception exception, ISeleniumWebDriver webDriver);
    public static T ConvertToType(object value);
    public static bool TryParseToType(object value, T& retValue);
    internal static ProxyWebElement GetContainingFrameElement(ProxyWebElement element);
    internal static string get_SeleniumInstallDirectory();
    private static string get_CommonDirectory();
    internal static Exception GetSeleniumException(Exception exception);
    internal static bool SwitchToThisElement(ProxyWebElement proxyWebElement);
    private static ProxyWebElement FindMatchingFrameElement(CrossBrowserPluginSearchData searchData, List`1<FrameInfo> presentContext, ISeleniumWebDriver driver);
    private static int get_NavigationTimeout();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.WebDriverbackedSeleniumFactory : object {
    private static Type m_webDriverSeleniumType;
    public static Type WebDriverbackedSeleniumType { get; public set; }
    private static WebDriverbackedSeleniumFactory();
    public static SeleniumWebDriverBackedSelenium GetActionInstance(ISeleniumWebDriver webDriver);
    public static Type get_WebDriverbackedSeleniumType();
    public static void set_WebDriverbackedSeleniumType(Type value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.CrossBrowser.XpathUtility : object {
    private static Dictionary`2<string, string> m_primarySearchPropertiesToXpathMap;
    private static Dictionary`2<string, string> m_primarySearchPropertiesToXpathMapContains;
    private static List`1<string> m_xpathSupportedSearchProperties;
    private static List`1<string> m_xpathConsumedSearchProperties;
    internal static string XPATH_AND_OPERATOR;
    internal static string XPATH_SINGLE_QUOTE;
    internal static string XPATH_DOUBLE_QUOTE;
    internal static string XPATH_PREFIX;
    internal static string XPATH_IMMEDIATECHILD;
    internal static string XPATH_DESCENDANT_STRING;
    internal static string XPATH_PARENT_STRING;
    internal static string XPATH_CONDITION_START;
    internal static string XPATH_CONDITION_END;
    internal static string XPATH_ATTRIBUTE_STRING;
    internal static string XPATH_ALL_TAGNAME;
    internal static string XPATH_ALL_CHILDREN;
    public static List`1<string> XpathSupportedSearchProperties { get; }
    public static List`1<string> XpathConsumedSearchProperties { get; }
    private static XpathUtility();
    public static string CreateXPath(CrossBrowserPluginSearchData searchData, String& primaryXpathProperty, String& primaryXpathPropertyValue);
    public static string Combine(string xpath1, string xpath2);
    public static bool IsValidPropertyValue(string propertyValue, string propertyName);
    public static string GetXPathCondition(string conditionValue, string propertyName, PropertyConditionOperator propertyOperator);
    public static string AddInstanceProperty(string xPath, int instance);
    public static string GetAggregatedXPath(string xPath, string containerXPath, bool isFrameElement);
    public static string FormatXpath(string xPath);
    public static List`1<string> get_XpathSupportedSearchProperties();
    public static List`1<string> get_XpathConsumedSearchProperties();
    public static string GetTagNameXPath(string tagName);
    public static string GetImmediateChildTagNameXPath(string tagName);
    public static string GetAllControlsXPath();
    public static string GetAllChildenXPath();
    private static Dictionary`2<string, string> InitializeSearchPropertiesXpathMap();
    private static Dictionary`2<string, string> InitializeSearchPropertiesXpathMapContains();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.CrossBrowserHelper : BrowserHelper {
    private static CrossBrowserHelper instance;
    public static CrossBrowserHelper Instance { get; }
    public Uri Homepage { get; }
    public bool AllowPopups { get; public set; }
    private static CrossBrowserHelper();
    public static CrossBrowserHelper get_Instance();
    public virtual bool IsBrowserProcess(Process process);
    public virtual bool IsBrowserWindow(UITechnologyElement element);
    public virtual bool IsBrowserWindow(string className);
    public virtual bool IsBrowserDocumentWindow(UITechnologyElement element);
    public virtual bool IsBrowserDocumentWindow(IntPtr windowHandle);
    public virtual Uri GetUrlFromBrowserDocumentWindow(UITechnologyElement element);
    public virtual BrowserButtonType GetBrowserButtonType(UITechnologyElement element);
    public virtual Uri get_Homepage();
    public virtual void ClearCache();
    public virtual void ClearCookies();
    public virtual bool get_AllowPopups();
    public virtual void set_AllowPopups(bool value);
    public virtual string GetPageTitle(string windowTitle);
    private static void ClearCookies(CrossBrowserService service);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
