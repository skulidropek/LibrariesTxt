public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.AddEventListenerCallback : MulticastDelegate {
    public AddEventListenerCallback(object object, IntPtr method);
    public virtual void Invoke(object eventTarget, IDOMEvent eventObj);
    public virtual IAsyncResult BeginInvoke(object eventTarget, IDOMEvent eventObj, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserAudioNode : BrowserMediaNode {
    internal BrowserAudioNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    protected virtual object GetHtmlPropertyValue(string propertyName);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserBodyNode : BrowserHtmlScrollContainer {
    private DomNodeWrapper topHtmlWrapperNode;
    internal DomNodeWrapper ContainerDomNode { get; }
    private DomNodeWrapper TopHtmlWrapperNode { get; }
    internal BrowserBodyNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual DomNodeWrapper get_ContainerDomNode();
    internal virtual void CacheQueryIdProperties();
    internal virtual BrowserHtmlNode GetAncestorNode();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual IUITechnologyElement Navigate(NavigateDirection direction);
    internal virtual Rectangle GetBoundingRectangle();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outPointX, Int32& outPointY);
    internal virtual Rectangle GetVisibleRectangle();
    protected virtual string InitializeFriendlyName();
    private bool IsRedirectingPage();
    private DomNodeWrapper get_TopHtmlWrapperNode();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserButtonNode : BrowserHtmlNode {
    private IHTMLButtonElement buttonNode;
    public string Value { get; public set; }
    private bool IsImageButton { get; }
    internal BrowserButtonNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void CacheQueryIdProperties();
    internal virtual bool IsValidProperty(string propertyName);
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    private bool get_IsImageButton();
    private string GetImageSource();
    private string GetDisplayText();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserCheckBoxNode : BrowserHtmlNode {
    private IHTMLInputElement checkBoxNode;
    public string Value { get; public set; }
    internal BrowserCheckBoxNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual AccessibleStates GetControlState();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual void InitializeEventSink();
    protected virtual String[] GetEventNames(UITestEventType eventType);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserConstants : object {
    internal static string TagNameApplet;
    internal static string TagNameArea;
    internal static string TagNameMap;
    internal static string TagNameBase;
    internal static string TagNameBasefont;
    internal static string TagNameBr;
    internal static string TagNameColgroup;
    internal static string TagNameCol;
    internal static string TagNameDiv;
    internal static string TagNameEmbed;
    internal static string TagNameIFrame;
    internal static string TagNameFrame;
    internal static string TagNameFrameSet;
    internal static string TagNameMeta;
    internal static string TagNameNoscript;
    internal static string TagNameScript;
    internal static string TagNameObject;
    internal static string TagNameParam;
    internal static string TagNameHead;
    internal static string TagNameHR;
    internal static string TagNameTitle;
    internal static string TagNameStyle;
    internal static string TagNameSection;
    internal static string TagNameNav;
    internal static string TagNameArticle;
    internal static string TagNameAside;
    internal static string TagNameHGroup;
    internal static string TagNameHeader;
    internal static string TagNameFooter;
    internal static string TagNameFigure;
    internal static string TagNameFigCaption;
    internal static string TagNameMark;
    internal static string TagNameText;
    internal static string TagNameBody;
    internal static string TagNameImg;
    internal static string TagNameLabel;
    internal static string TagNameInput;
    internal static string TagNameAnchor;
    internal static string TagNameButton;
    internal static string TagNameTable;
    internal static string TagNameTableBody;
    internal static string TagNameTableFoot;
    internal static string TagNameTableRow;
    internal static string TagNameTableHeader;
    internal static string TagNameTableData;
    internal static string TagNameTableHead;
    internal static string TagNameTextArea;
    internal static string TagNameSelect;
    internal static string TagNameOption;
    internal static string TagNameOptGroup;
    internal static string TagNameEmptyText;
    internal static string TagNameComment;
    internal static string TagNameTopHtml;
    internal static string TagNameVideo;
    internal static string TagNameAudio;
    internal static string TagNameProgress;
    internal static string TagNameAbbr;
    internal static string TagNameAcronym;
    internal static string TagNameAddress;
    internal static string TagNameSubscript;
    internal static string TagNameSuperscript;
    internal static string TagNameB;
    internal static string TagNameBdo;
    internal static string TagNameBig;
    internal static string TagNameBlockQuote;
    internal static string TagNameCaption;
    internal static string TagNameCenter;
    internal static string TagNameCite;
    internal static string TagNameCode;
    internal static string TagNameDd;
    internal static string TagNameDel;
    internal static string TagNameEm;
    internal static string TagNameStrong;
    internal static string TagNameSamp;
    internal static string TagNameKbd;
    internal static string TagNameVar;
    internal static string TagNameDl;
    internal static string TagNameDt;
    internal static string TagNameFont;
    internal static string TagNameH1;
    internal static string TagNameH2;
    internal static string TagNameH3;
    internal static string TagNameH4;
    internal static string TagNameH5;
    internal static string TagNameH6;
    internal static string TagNameI;
    internal static string TagNameIns;
    internal static string TagNameIsIndex;
    internal static string TagNameLegend;
    internal static string TagNameLi;
    internal static string TagNameOl;
    internal static string TagNameP;
    internal static string TagNamePre;
    internal static string TagNameQ;
    internal static string TagNameS;
    internal static string TagNameSmall;
    internal static string TagNameSpan;
    internal static string TagNameStrike;
    internal static string TagNameU;
    internal static string TagNameUL;
    internal static string TagNameDir;
    internal static string TagNameDfn;
    internal static string TagNameMenu;
    internal static string TagNameXmp;
    internal static string TagNameNoBr;
    internal static string TagAttributeAlt;
    internal static string AttributeUseMap;
    internal static string ContentEditable;
    internal static string NoScrolling;
    internal static string TypeValueInputButton;
    internal static string TypeValueResetButton;
    internal static string TypeValueSubmitButton;
    internal static string TypeValueImageButton;
    internal static string TypeValueTextBox;
    internal static string TypeValueSearch;
    internal static string TypeValueEmail;
    internal static string TypeValueTelephone;
    internal static string TypeValueNumber;
    internal static string TypeValueURL;
    internal static string TypeValuePasswordBox;
    internal static string TypeValueCheckBox;
    internal static string TypeValueRadioButton;
    internal static string TypeFileInput;
    internal static string TypeSliderInput;
    internal static string TypeMultiline;
    internal static string TypeSingleline;
    internal static string ClassGenericHtml;
    internal static string ClassText;
    internal static string ClassBody;
    internal static string ClassLabel;
    internal static string ClassCheckbox;
    internal static string ClassHyperlink;
    internal static string ClassImage;
    internal static string ClassInputButton;
    internal static string ClassRadioButton;
    internal static string ClassTextbox;
    internal static string ClassSelect;
    internal static string ClassOption;
    internal static string ClassTable;
    internal static string ClassTableRow;
    internal static string ClassTableCell;
    internal static string ClassFrame;
    internal static string ClassFileInput;
    internal static string ClassSliderInput;
    internal static string ClassPane;
    internal static string ClassFrameSet;
    internal static string ClassVideo;
    internal static string ClassAudio;
    internal static string ClassProgressBar;
    internal static string SearchCondition;
    internal static string SecondaryPlaceHolder;
    internal static string PrimaryPlaceHolder;
    internal static string DocumentComplete;
    internal static string DocumentLoading;
    internal static string DocumentInteractive;
    internal static string NavigationInProgress;
    internal static string NavigationComplete;
    internal static int NoDocument;
    internal static int RootDocument;
    internal static int MaxDescendantsCount;
    internal static string ScrollBar;
    internal static string AltKey;
    internal static string DocumentFragment;
    internal static string OverFlowVisible;
    internal static string OverFlowScroll;
    internal static string OverFlowAuto;
    internal static string PositionAbsolute;
    internal static string PositionRelative;
    internal static string rightToLeft;
    internal static string SupportedClassName;
    internal static int ERROR_EVENT_REGISTRATION;
    internal static UInt32 E_INVALIDARG;
    internal static string ControlsFound;
    internal static string HResult;
    internal static string FindAll;
    internal static int BreakIntervalForWaitForReady;
    internal static int BreakIntervalForSearch;
    internal static int singlePassTimeout;
    internal static int NavigationPollInterval;
    internal static int NavigationPollRetryCount;
    internal static string Visible;
    internal static string Hidden;
    internal static string Inherit;
    internal static string Collapse;
    internal static string Auto;
    internal static string None;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserDocumentEventHandler : object {
    private bool sinkInIEProcess;
    private IECommunicator eventNotifyElement;
    private IHTMLDocument htmlDocument;
    private int htmlDocumentId;
    private IConnectionPointContainer connectionPointContainer;
    private IConnectionPoint connectionPoint;
    private int eventHandle;
    private bool disposed;
    private static int DISPID_READYSTATE;
    private static Mutex lockAccess;
    private static string currentState;
    private static AutoResetEvent accessComplete;
    private static Dictionary`2<string, tagREADYSTATE> DocumentStateMapping;
    internal BrowserDocumentEventHandler(IHTMLDocument document, int documentId, IECommunicator notifyElement, bool inIEProcess);
    private static BrowserDocumentEventHandler();
    public sealed virtual void Dispose();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private void RegisterEventSink();
    private void UpdateDocumentState();
    internal void RemoveEventSink();
    private sealed virtual override void Microsoft.VisualStudio.OLE.Interop.IPropertyNotifySink.OnChanged(int DISPID);
    private sealed virtual override void Microsoft.VisualStudio.OLE.Interop.IPropertyNotifySink.OnRequestEdit(int DISPID);
    private static tagREADYSTATE GetDomDocumentState(IHTMLDocument domDocument);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static tagREADYSTATE GetReadyState(IHTMLDocument mshtmlDocument);
    private static Dictionary`2<string, tagREADYSTATE> InitializeDocumentStateMapping();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserEvents : object {
    protected object lockNode;
    private IECommunicator eventProxyNode;
    private BrowserHtmlNode targetElement;
    private BrowserHtmlNode htmlNode;
    private bool disposed;
    private BrowserHtmlNode sourceElement;
    private Dictionary`2<UITestEventType, List`1<IUITestEventNotify>> eventHandlerDictionary;
    private Dictionary`2<UITestEventType, IDisposable> eventSinkDictionary;
    protected Dictionary`2<UITestEventType, IDisposable> EventSinkDictionary { get; }
    protected Dictionary`2<UITestEventType, List`1<IUITestEventNotify>> EventHandlerDictionary { get; }
    internal BrowserHtmlNode SourceElement { get; internal set; }
    internal BrowserHtmlNode TargetElement { get; internal set; }
    internal BrowserHtmlNode HtmlNode { get; internal set; }
    private IECommunicator EventProxyNode { get; }
    internal BrowserEvents(BrowserHtmlNode hnode);
    protected virtual void onkeydown(IDomEventParameter eventParameter);
    protected virtual void onkeyup(IDomEventParameter eventParameter);
    protected virtual void onmousedown(IDomEventParameter eventParameter);
    protected virtual void onmouseup(IDomEventParameter eventParameter);
    protected virtual void onmousemove(IDomEventParameter eventParameter);
    protected virtual void onmouseover(IDomEventParameter eventParameter);
    public virtual void EventNotify(Object[] eventParameterValues);
    protected virtual void onchange(IDomEventParameter eventParameter);
    protected virtual void onclick(IDomEventParameter eventParameter);
    protected virtual void onkeypress(IDomEventParameter eventParameter);
    protected virtual void onmove(IDomEventParameter eventParameter);
    protected virtual void onpropertychange(IDomEventParameter eventParameter);
    protected virtual void oninput(IDomEventParameter eventParameter);
    protected virtual void onstop(IDomEventParameter eventParameter);
    protected virtual void onfocusin(IDomEventParameter eventParameter);
    protected virtual void onfocusout(IDomEventParameter eventParameter);
    protected virtual void onplay(IDomEventParameter eventParameter);
    protected virtual void onpause(IDomEventParameter eventParameter);
    protected virtual void onseek(IDomEventParameter eventParameter);
    protected virtual void onvolumechange(IDomEventParameter eventParameter);
    public sealed virtual void Dispose();
    protected bool EventTypeExists(UITestEventType notifyEventType);
    protected void Notify(UITestEventType eventType, object eventArgs);
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    internal virtual bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private void ClearEventSinks();
    protected Dictionary`2<UITestEventType, IDisposable> get_EventSinkDictionary();
    protected Dictionary`2<UITestEventType, List`1<IUITestEventNotify>> get_EventHandlerDictionary();
    internal BrowserHtmlNode get_SourceElement();
    internal void set_SourceElement(BrowserHtmlNode value);
    internal BrowserHtmlNode get_TargetElement();
    internal void set_TargetElement(BrowserHtmlNode value);
    internal BrowserHtmlNode get_HtmlNode();
    internal void set_HtmlNode(BrowserHtmlNode value);
    private IECommunicator get_EventProxyNode();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserFileInputEvents : BrowserEvents {
    private BrowserFileInputNode fileInputNode;
    internal BrowserFileInputEvents(BrowserFileInputNode hnode);
    protected virtual void onpropertychange(IDomEventParameter eventParameter);
    protected virtual void oninput(IDomEventParameter eventParameter);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserFileInputNode : BrowserHtmlNode {
    private IHTMLInputElement fileInputNode;
    private string fileInputValue;
    public string Value { get; public set; }
    internal string FileInputValue { get; internal set; }
    internal BrowserFileInputNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    public virtual void SetFocus();
    internal virtual void InitializeEventSink();
    protected virtual String[] GetEventNames(UITestEventType eventType);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal string get_FileInputValue();
    internal void set_FileInputValue(string value);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserFrameNode : BrowserHtmlNode {
    private IHTMLDocument frameDocument;
    private IHTMLFrameBase frameNode;
    public bool IsLeafNode { get; }
    private IHTMLDocument FrameDocument { get; }
    internal BrowserFrameNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual IUITechnologyElement Navigate(NavigateDirection direction);
    public virtual bool get_IsLeafNode();
    private IHTMLDocument get_FrameDocument();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserFramesetNode : BrowserHtmlNode {
    private IHTMLFrameSetElement frameSetNode;
    internal BrowserFramesetNode(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    internal virtual BrowserHtmlNode GetAncestorNode();
    internal virtual IQueryElement GetQueryId();
    internal virtual void CacheQueryIdProperties();
    protected virtual object GetHtmlPropertyValue(string propertyName);
}
[ComVisibleAttribute("True")]
[GuidAttribute("9D9C65A6-9E5B-4628-9F60-C53CE57F44EA")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserHtmlNode : UITechnologyElement {
    [CompilerGeneratedAttribute]
private bool <IsSinkRemovalDelayed>k__BackingField;
    [CompilerGeneratedAttribute]
private IHTMLElement <CeilingElement>k__BackingField;
    private IETestPluginSearchData searchData;
    private string controlInformation;
    private bool controlInfoInitialized;
    private bool ieInProcessEvents;
    private string className;
    private string labelName;
    private string runtimeIdString;
    private IEWebControlElement ieControlNode;
    private DomNodeWrapper wrappedDomNode;
    private bool isPassword;
    private int documentId;
    private bool disposed;
    private IAccessible htmlAccNode;
    private bool htmlAccNodeInitialized;
    private bool isCached;
    private string accessKey;
    private string friendlyName;
    private bool isFriendlyNameInitialized;
    private string id;
    private string controlTypeName;
    private string name;
    private UITechnologyElement topLevelElement;
    private BrowserHtmlNode currentChildNode;
    private IUITechnologyElement parent;
    private bool validNode;
    private IQueryElement queryIdentifier;
    private bool isQueryIdFixed;
    private BrowserEvents htmlEventSink;
    private string cssStyleClass;
    private IUITechnologyElement containerElement;
    private object lockNode;
    private static string Disabled;
    private BrowserPropertyManager propertyManager;
    public bool IsTreeSwitchingRequired { get; }
    public string FriendlyName { get; }
    public int ChildIndex { get; }
    public bool IsLeafNode { get; }
    public object NativeElement { get; }
    internal string Id { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string TechnologyName { get; }
    public UITechnologyManager TechnologyManager { get; }
    public bool IsPassword { get; }
    public string Name { get; }
    public IntPtr WindowHandle { get; }
    public IQueryElement QueryId { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string Value { get; public set; }
    public AutomationElement AutomationElement { get; }
    public IUITechnologyElement SwitchingElement { get; public set; }
    internal bool HasValidIdAndName { get; }
    internal IETestPluginSearchData SearchData { get; internal set; }
    internal string RuntimeId { get; }
    internal string AccessKey { get; }
    internal bool IsQueryIdFixed { get; internal set; }
    internal BrowserHtmlNode CurrentChildNode { get; internal set; }
    internal int HtmlDocumentId { get; internal set; }
    internal IHTMLDOMNode DomNode { get; }
    internal IEWebControlElement IEControl { get; }
    internal IHTMLElement HtmlElementNode { get; }
    internal IUITechnologyElement Parent { get; internal set; }
    internal BrowserEvents HtmlEventSink { get; internal set; }
    internal int UniqueIdentifier { get; }
    internal int SourceIndex { get; }
    protected bool IsSinkRemovalDelayed { get; protected set; }
    internal IAccessible HtmlAccNode { get; }
    internal AccessibleStates HtmlAccState { get; }
    internal IHTMLElement CeilingElement { get; internal set; }
    protected string LabelName { get; }
    internal string TagName { get; }
    internal DomNodeWrapper WrappedDomNode { get; private set; }
    internal bool IsValid { get; }
    internal bool IEInProcessEvents { get; internal set; }
    internal BrowserPropertyManager PropertyManager { get; }
    internal BrowserHtmlNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal BrowserHtmlNode(IEWebControlElement rootNode, DomNodeWrapper domNode, string className);
    internal BrowserHtmlNode(IEWebControlElement rootNode, DomNodeWrapper domNode, string className, ControlType controlType);
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual string get_FriendlyName();
    public virtual int get_ChildIndex();
    public virtual bool get_IsLeafNode();
    public virtual object get_NativeElement();
    internal string get_Id();
    public virtual void CacheProperties();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual string get_TechnologyName();
    public virtual UITechnologyManager get_TechnologyManager();
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    public virtual bool get_IsPassword();
    public virtual string get_Name();
    public virtual IntPtr get_WindowHandle();
    public virtual IQueryElement get_QueryId();
    internal void CacheQueryIdIfNotStarted();
    public virtual bool Equals(IUITechnologyElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual AutomationElement get_AutomationElement();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outPointX, Int32& outPointY);
    public virtual object GetPropertyValue(string propertyName);
    internal virtual object GetSearchPropertyValue(string propertyName);
    public virtual void SetFocus();
    public virtual void WaitForReady();
    protected virtual string GetQueryIdOfChild(string childName);
    public virtual IUITechnologyElement get_SwitchingElement();
    public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual bool InitializeProgrammaticScroll();
    public virtual void ScrollProgrammatically(ScrollDirection srollDirection, ScrollAmount scrollAmount);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    public sealed virtual void Dispose();
    protected virtual String[] GetEventNames(UITestEventType eventType);
    internal IDisposable CreateEventCallBack(UITestEventType eventType, IECommunicator domEventNotify, bool cancelBubble);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
protected virtual object GetHtmlPropertyValue(string propertyName);
    internal bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    internal virtual bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    internal virtual void InitializeEventSink();
    internal virtual BrowserHtmlNode GetAncestorNode();
    internal virtual void CacheQueryIdProperties();
    internal virtual IQueryElement GetQueryId();
    internal virtual IUITechnologyElement Navigate(NavigateDirection direction);
    internal virtual Rectangle GetBoundingRectangle();
    internal virtual Rectangle GetVisibleRectangle();
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
internal virtual IHTMLElement GetClientRectNodeInfo(Rectangle& clientRect);
    protected void SetAsPassword();
    internal virtual bool IsValidProperty(string propertyName);
    protected virtual string InitializeFriendlyName();
    protected string GetDefaultFriendlyName();
    protected string GetTextContainerFriendlyName();
    private int GetNodeInstance(int startIndex, int endIndex, IHTMLElementCollection elementCollection);
    internal int GetNodeInstance(BrowserHtmlNode ancestorNode);
    internal virtual void EnsureValid();
    internal void ClearEventCallBack();
    internal BrowserHtmlNode GetHtmlAncestorNodeWithIdOrName();
    internal virtual BrowserHtmlNode CreateBrowserNode(IHTMLElement parentElement);
    internal virtual AccessibleStates GetControlState();
    internal bool GetAttributeValue(string attributeName, Object& definedValue);
    private void InitializeTechnologyElementOptions();
    internal static Rectangle GetRect(IHTMLElement currnode, IEWebControlElement rootNode, Rectangle currentNodeRect, int documentId, Boolean& offscreenNode);
    internal static bool GetOffScreenNodeInfo(IHTMLElement currnode, IEWebControlElement rootNode, Rectangle currentNodeRect, int documentId, Rectangle& intersectRect);
    internal static bool GetOffScreenNodeInfo(IHTMLElement currnode, IEWebControlElement rootNode, int documentId, Rectangle& intersectRect);
    internal static IHTMLElement FindNodeRect(IHTMLElement htmlElement, Rectangle& currentNodeRect);
    internal static Rectangle GetClientBoundingRect(IHTMLElement currentElement);
    internal static IHTMLElement GetImageNodeForMap(IHTMLElement currentElement);
    internal static Rectangle GetVisibleRectInfo(IHTMLElement htmlnode, IEWebControlElement rootNode, int documentId);
    internal static BrowserHtmlNode CreateBrowserHtmlNode(IEWebControlElement iecontrol, IHTMLElement domElement, int documentId);
    internal static BrowserHtmlNode CreateBrowserHtmlNode(IEWebControlElement iecontrol, IHTMLDOMNode domNode, int documentId);
    internal static BrowserHtmlNode CreateBrowserHtmlNode(IEWebControlElement iecontrol, DomNodeWrapper domNode, int documentId);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal static BrowserHtmlNode CreateBrowserHtmlNode(IEWebControlElement iecontrol, DomNodeWrapper domNode, int documentId, bool addToCache);
    private static BrowserHtmlNode GetValidSibling(IHTMLDOMNode domNode, bool nextSibling, IEWebControlElement root, int documentId);
    private static DomNodeWrapper SkipInvalidNodes(IHTMLDOMNode domNode, bool nextSibling);
    private static BrowserHtmlNode CreateInputNode(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    private static BrowserHtmlNode CreateAnchorNode(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    internal bool IsDocumentRootScrollable();
    private static bool IsFrameElement(IHTMLElement htmlElement);
    internal bool get_HasValidIdAndName();
    internal IETestPluginSearchData get_SearchData();
    internal void set_SearchData(IETestPluginSearchData value);
    internal virtual string get_RuntimeId();
    internal string get_AccessKey();
    internal bool get_IsQueryIdFixed();
    internal void set_IsQueryIdFixed(bool value);
    internal BrowserHtmlNode get_CurrentChildNode();
    internal void set_CurrentChildNode(BrowserHtmlNode value);
    internal int get_HtmlDocumentId();
    internal void set_HtmlDocumentId(int value);
    internal IHTMLDOMNode get_DomNode();
    internal IEWebControlElement get_IEControl();
    internal IHTMLElement get_HtmlElementNode();
    internal IUITechnologyElement get_Parent();
    internal void set_Parent(IUITechnologyElement value);
    internal BrowserEvents get_HtmlEventSink();
    internal void set_HtmlEventSink(BrowserEvents value);
    internal int get_UniqueIdentifier();
    internal int get_SourceIndex();
    [CompilerGeneratedAttribute]
protected bool get_IsSinkRemovalDelayed();
    [CompilerGeneratedAttribute]
protected void set_IsSinkRemovalDelayed(bool value);
    internal IAccessible get_HtmlAccNode();
    internal AccessibleStates get_HtmlAccState();
    [CompilerGeneratedAttribute]
internal IHTMLElement get_CeilingElement();
    [CompilerGeneratedAttribute]
internal void set_CeilingElement(IHTMLElement value);
    protected string get_LabelName();
    internal string get_TagName();
    internal DomNodeWrapper get_WrappedDomNode();
    private void set_WrappedDomNode(DomNodeWrapper value);
    internal bool get_IsValid();
    internal bool get_IEInProcessEvents();
    internal void set_IEInProcessEvents(bool value);
    internal BrowserPropertyManager get_PropertyManager();
    protected virtual UISynchronizationOptions GetUISynchronizationOptions();
    protected void AddSearchProperty(string propertyName);
    protected void AddFilterProperty(string propertyName);
    private bool ShouldAddControlDefinition();
    private bool ShouldAddTagInstance();
    private bool IsBodyNameAttributeExists();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserHtmlObject : BrowserHtmlNode {
    public bool IsTreeSwitchingRequired { get; }
    public bool IsLeafNode { get; }
    private bool IsObjectReady { get; }
    internal BrowserHtmlObject(IEWebControlElement rootNode, DomNodeWrapper domNode);
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual bool get_IsLeafNode();
    public virtual void WaitForReady();
    private bool get_IsObjectReady();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserHtmlScrollContainer : BrowserHtmlNode {
    private BrowserScrollBarControl verticalScrollBar;
    private BrowserScrollBarControl horizontalScrollBar;
    internal bool IsScrollEnabled { get; }
    internal DomNodeWrapper ContainerDomNode { get; }
    internal BrowserScrollBarControl VerticalScrollBar { get; }
    internal BrowserScrollBarControl HorizontalScrollBar { get; }
    internal BrowserHtmlScrollContainer(IEWebControlElement iecontrol, DomNodeWrapper domNode, string className);
    internal BrowserHtmlScrollContainer(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    internal BrowserHtmlScrollContainer(IEWebControlElement iecontrol, DomNodeWrapper domNode, string className, ControlType controlType);
    internal virtual bool get_IsScrollEnabled();
    internal BrowserScrollBarControl GetScrollControlFromPoint(Point location);
    internal BrowserScrollBarControl GetScrollControl(ScrollBarOrientation scrollOrientation);
    internal virtual DomNodeWrapper get_ContainerDomNode();
    internal BrowserScrollBarControl get_VerticalScrollBar();
    internal BrowserScrollBarControl get_HorizontalScrollBar();
    internal static IUITechnologyElement GetScrollBar(string scrollOrientation, IUITechnologyElement domElement);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserHyperlinkNode : BrowserHtmlNode {
    private IHTMLAnchorElement linkNode;
    private IHTMLAreaElement areaNode;
    private bool IsLinkNode { get; }
    private string Href { get; }
    internal BrowserHyperlinkNode(IEWebControlElement rootNode, DomNodeWrapper domNode, bool isAreaNode);
    internal virtual void CacheQueryIdProperties();
    internal virtual bool IsValidProperty(string propertyName);
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    private bool get_IsLinkNode();
    private string get_Href();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserImageNode : BrowserHtmlNode {
    [CompilerGeneratedAttribute]
private bool <IsImageHyperlink>k__BackingField;
    private IHTMLImgElement imageNode;
    private IHTMLAnchorElement parentHyperlinkNode;
    private bool IsImageHyperlink { get; private set; }
    internal BrowserImageNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    internal virtual bool IsValidProperty(string propertyName);
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    [CompilerGeneratedAttribute]
private bool get_IsImageHyperlink();
    [CompilerGeneratedAttribute]
private void set_IsImageHyperlink(bool value);
    private void CheckForImageHyperlink();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserInputButtonNode : BrowserHtmlNode {
    private IHTMLInputElement buttonNode;
    public string Value { get; public set; }
    private bool IsImageButton { get; }
    internal BrowserInputButtonNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void CacheQueryIdProperties();
    internal virtual bool IsValidProperty(string propertyName);
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    private bool get_IsImageButton();
    private string GetImageSource();
    private string GetDisplayText();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserLabelNode : BrowserHtmlNode {
    private IHTMLLabelElement labelNode;
    private BrowserHtmlNode labelElement;
    internal BrowserLabelNode(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual void InitializeEventSink();
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    internal virtual bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    private IHTMLElement GetBoundControl(string labelFor);
    private bool ShouldSubstituteLabelElement();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserMediaEvents : BrowserEvents {
    private BrowserMediaNode mediaNode;
    internal BrowserMediaEvents(BrowserMediaNode hnode);
    protected virtual void onplay(IDomEventParameter eventParameter);
    protected virtual void onpause(IDomEventParameter eventParameter);
    protected virtual void onseek(IDomEventParameter eventParameter);
    protected virtual void onvolumechange(IDomEventParameter eventParameter);
}
[ComVisibleAttribute("True")]
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserMediaNode : BrowserHtmlNode {
    [CompilerGeneratedAttribute]
private bool <LastMuteValue>k__BackingField;
    private IHTMLMediaElement mediaNode;
    internal bool LastMuteValue { get; internal set; }
    internal BrowserMediaNode(IEWebControlElement rootNode, DomNodeWrapper domNode, string className, ControlType controlType);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    protected virtual String[] GetEventNames(UITestEventType eventType);
    internal virtual void InitializeEventSink();
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    [CompilerGeneratedAttribute]
internal bool get_LastMuteValue();
    [CompilerGeneratedAttribute]
internal void set_LastMuteValue(bool value);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserOptionElementNode : BrowserHtmlNode {
    private IHTMLOptionElement optionNode;
    private IHTMLSelectElement selectNode;
    private BrowserSelectListNode parentSelectElement;
    private static string LabelAttributeName;
    public string Value { get; public set; }
    private BrowserSelectListNode ParentSelectElement { get; }
    internal BrowserOptionElementNode(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    internal virtual void CacheQueryIdProperties();
    internal virtual IHTMLElement GetClientRectNodeInfo(Rectangle& clientRect);
    internal virtual Rectangle GetBoundingRectangle();
    internal virtual Rectangle GetVisibleRectangle();
    internal virtual void InitializeEventSink();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual AccessibleStates GetControlState();
    private static IHTMLSelectElement GetSelectElement(IHTMLOptionElement optionElement);
    internal static string GetDisplayText(IHTMLOptionElement optionNode);
    private Rectangle GetOptionClientRect();
    private int DisplayIndex();
    private BrowserSelectListNode get_ParentSelectElement();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserPaneNode : BrowserHtmlScrollContainer {
    public string Value { get; public set; }
    internal BrowserPaneNode(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    internal virtual void InitializeEventSink();
    internal virtual object GetSearchPropertyValue(string propertyName);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual String[] GetEventNames(UITestEventType eventType);
    protected virtual object GetHtmlPropertyValue(string propertyName);
    private static ControlType GetControlType(DomNodeWrapper domNode);
    private string GetInnerText();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserProgressBarNode : BrowserHtmlNode {
    private object progressBarNode;
    internal BrowserProgressBarNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    private object InvokeGetPropertyOnObject(string propertyName);
    private float GetFloatValue(object obj, float defaultValue);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserRadioButtonNode : BrowserHtmlNode {
    private IHTMLInputElement radioButtonNode;
    private RadioButtonGroup radioButtonGroup;
    private static RadioButtonGroup delayRemoveRadioButtonGroup;
    public string Value { get; public set; }
    internal IHTMLInputElement RadioButtonNode { get; }
    internal RadioButtonGroup RadioButtonGroup { get; internal set; }
    internal BrowserRadioButtonNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual AccessibleStates GetControlState();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual void InitializeEventSink();
    protected virtual String[] GetEventNames(UITestEventType eventType);
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    internal virtual bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    internal IHTMLInputElement get_RadioButtonNode();
    internal RadioButtonGroup get_RadioButtonGroup();
    internal void set_RadioButtonGroup(RadioButtonGroup value);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserScrollBarControl : UITechnologyElement {
    private string runtimeIdString;
    private UITechnologyElement topLevelElement;
    private BrowserHtmlNode scrollContainer;
    private ScrollBarOrientation scrollOrientation;
    private string uniqueIdentifier;
    private IQueryElement queryCondition;
    private IUITechnologyElement containerElement;
    private bool isQueryIdFixed;
    private static int scrollThickness;
    public bool IsTreeSwitchingRequired { get; }
    public IUITechnologyElement SwitchingElement { get; public set; }
    public int ChildIndex { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string TechnologyName { get; }
    public UITechnologyManager TechnologyManager { get; }
    public string FriendlyName { get; }
    public bool IsLeafNode { get; }
    public bool IsPassword { get; }
    public string Name { get; }
    public object NativeElement { get; }
    public IQueryElement QueryId { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string Value { get; public set; }
    public IntPtr WindowHandle { get; }
    private string RuntimeId { get; }
    internal bool IsQueryIdFixed { get; internal set; }
    internal IEWebControlElement IEControl { get; }
    private string UniqueIdentifier { get; }
    internal BrowserHtmlNode ScrollContainer { get; private set; }
    internal ScrollBarOrientation ScrollOrientation { get; internal set; }
    internal BrowserScrollBarControl(BrowserHtmlNode parentHtmlNode, ScrollBarOrientation orientation);
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual IUITechnologyElement get_SwitchingElement();
    public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual void CacheProperties();
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual int get_ChildIndex();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outPointX, Int32& outPointY);
    public virtual bool Equals(IUITechnologyElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual string get_TechnologyName();
    public virtual UITechnologyManager get_TechnologyManager();
    public virtual string get_FriendlyName();
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual object GetPropertyValue(string propertyName);
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    public virtual bool get_IsLeafNode();
    public virtual bool get_IsPassword();
    public virtual string get_Name();
    public virtual object get_NativeElement();
    public virtual IQueryElement get_QueryId();
    public virtual void SetFocus();
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void WaitForReady();
    public virtual IntPtr get_WindowHandle();
    public virtual bool InitializeProgrammaticScroll();
    public virtual void ScrollProgrammatically(ScrollDirection srollDirection, ScrollAmount scrollAmount);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    internal Rectangle GetBoundingRectangle();
    private string get_RuntimeId();
    internal bool get_IsQueryIdFixed();
    internal void set_IsQueryIdFixed(bool value);
    internal IEWebControlElement get_IEControl();
    private string get_UniqueIdentifier();
    internal BrowserHtmlNode get_ScrollContainer();
    private void set_ScrollContainer(BrowserHtmlNode value);
    internal ScrollBarOrientation get_ScrollOrientation();
    internal void set_ScrollOrientation(ScrollBarOrientation value);
    internal static bool IsScrollEnabled(BrowserHtmlNode scrollContainer);
    internal static BrowserScrollBarControl GetScrollControlAtPoint(Point location, IHTMLElement currentElement, BrowserHtmlScrollContainer scrollContainer);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserScrollHelper : object {
    private BrowserHtmlNode htmlElementNode;
    private static string ScrollbarUp;
    private static string ScrollbarDown;
    private static string ScrollbarLeft;
    private static string ScrollbarRight;
    private static List`1<CssProperty> OverFlowPropertyList;
    internal BrowserScrollHelper(BrowserHtmlNode htmlNode);
    private static BrowserScrollHelper();
    internal void ScrollIntoView(int relativeX, int relativeY);
    private void ScrollNodeIntoView(int relativeX, int relativeY);
    internal static bool IsScrollable(IHTMLElement2 tempDomNode2, BrowserHtmlNode offsetParentNode);
    private static bool IsDocumentScrollable(IHTMLElement2 tempDomNode2, BrowserHtmlNode offsetParentNode);
    internal static bool IsScrollCSSProperty(T domElement);
    internal static bool IsScrollNeeded(IUITechnologyElement domNode, Point relativeLocation, Point& validLocation);
    private static BrowserHtmlNode GetOffsetParent(BrowserHtmlNode currentNode);
    internal static void ScrollIntoView(BrowserHtmlNode nodeToScroll, Point locationToScroll, BrowserHtmlNode scrollContainer);
    internal static void DoVerticalScroll(IHTMLElement2 scrollDomNode2, Point locationToScroll, Rectangle containerVisibleRect, Rectangle nodeBoundingRect, string scrollDirection);
    internal static IHTMLElement2 GetScrollDomNode(BrowserHtmlNode scrollContainer);
    private static void DoHorizontalScroll(IHTMLElement2 scrollDomNode2, Point locationToScroll, Rectangle containerVisibleRect, Rectangle nodeBoundingRect, string scrollDirection);
    private static string GetVerticalScrollDirection(Rectangle containerVisibleRect, Point locationToScroll, Rectangle nodeBoundingRect);
    internal static string GetHorizontalScrollDirection(Rectangle containerVisibleRect, Point locationToScroll, Rectangle nodeBoundingRect);
    private static Rectangle GetVisibleScrollRect(BrowserHtmlNode elementNode, IHTMLElement2 currentNode2);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserSelectListNode : BrowserHtmlScrollContainer {
    private IHTMLSelectElement selectNode;
    private bool isList;
    private bool isListWithinComboBox;
    private BrowserSelectListNode comboboxParent;
    private static BrowserSelectListNode lastAccessedComboBox;
    private BrowserEvents optionEventSink;
    public string Value { get; public set; }
    internal bool IsScrollEnabled { get; }
    internal IHTMLSelectElement SelectNode { get; }
    internal bool IsList { get; }
    internal bool IsListWithinComboBox { get; }
    internal BrowserEvents OptionEventSink { get; }
    internal static BrowserSelectListNode LastAccessedComboBox { get; internal set; }
    internal BrowserSelectListNode(IEWebControlElement iecontrol, DomNodeWrapper domNode);
    protected virtual string InitializeFriendlyName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual IUITechnologyElement Navigate(NavigateDirection direction);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    protected virtual string GetQueryIdOfChild(string childName);
    internal virtual bool get_IsScrollEnabled();
    internal virtual void CacheQueryIdProperties();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual void InitializeEventSink();
    internal virtual bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    protected virtual String[] GetEventNames(UITestEventType eventType);
    internal bool IsExpanded();
    internal IHTMLSelectElement get_SelectNode();
    internal bool get_IsList();
    internal bool get_IsListWithinComboBox();
    internal BrowserEvents get_OptionEventSink();
    internal static BrowserSelectListNode get_LastAccessedComboBox();
    internal static void set_LastAccessedComboBox(BrowserSelectListNode value);
    private static ControlType GetControlType(IEWebControlElement iecontrol, DomNodeWrapper domNode);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserSelectNodeEvents : BrowserEvents {
    private List`1<IHTMLOptionElement> cachedOptionElementsList;
    private BrowserSelectListNode selectElement;
    private bool onchangeFired;
    private object lastOptionValue;
    private Dictionary`2<UITestEventType, IUITestEventNotify> browserEventInfoDictionaryForDelayedRemoval;
    private object dictionaryAccessLock;
    private int mouseButton;
    private static int MIDDLE_MOUSE_BUTTON;
    internal BrowserSelectNodeEvents(BrowserSelectListNode hnode);
    protected virtual void onchange(IDomEventParameter eventParameter);
    protected virtual void onclick(IDomEventParameter eventParameter);
    protected virtual void onmousedown(IDomEventParameter eventParameter);
    protected virtual void onkeydown(IDomEventParameter eventParameter);
    protected virtual void onkeyup(IDomEventParameter eventParameter);
    protected virtual void onfocusout(IDomEventParameter eventParameter);
    internal virtual bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    private void Notify();
    private object GetSelectedOptionValue(IHTMLSelectElement selectNode);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserSliderInputEvents : BrowserEvents {
    private BrowserSliderInputNode sliderInputNode;
    internal BrowserSliderInputEvents(BrowserSliderInputNode hnode);
    protected virtual void onchange(IDomEventParameter eventParameter);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserSliderInputNode : BrowserHtmlNode {
    [DynamicAttribute]
private object sliderInputNode;
    private int defaultPrecision;
    private static string any;
    private int defaultMin;
    private int defaultMax;
    private static string defaultStep;
    public string Value { get; public set; }
    internal BrowserSliderInputNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void InitializeEventSink();
    protected virtual String[] GetEventNames(UITestEventType eventType);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    internal virtual void CacheQueryIdProperties();
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTableCellNode : BrowserHtmlNode {
    private IHTMLTableCell tableCellNode;
    private IHTMLElement htmlTableNode;
    private IHTMLTableRow htmlTableRowNode;
    public string Value { get; }
    private IHTMLElement HtmlTable { get; }
    private IHTMLTableRow HtmlTableRow { get; }
    internal BrowserTableCellNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    internal virtual bool IsValidProperty(string propertyName);
    internal virtual object GetSearchPropertyValue(string propertyName);
    protected virtual string InitializeFriendlyName();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    public virtual string get_Value();
    internal virtual BrowserHtmlNode GetAncestorNode();
    private static ControlType GetControlType(DomNodeWrapper domNode);
    private string GetInnerText();
    private int GetColumnIndex();
    private IHTMLElement get_HtmlTable();
    private IHTMLTableRow get_HtmlTableRow();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTableNode : BrowserHtmlNode {
    private IHTMLTable tableNode;
    internal BrowserTableNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    internal virtual object GetSearchPropertyValue(string propertyName);
    protected virtual object GetHtmlPropertyValue(string propertyName);
    private string GetInnerText();
    private int GetColumnCount();
    private int GetCellCount();
    private List`1<UITechnologyElement> GetCells();
    private List`1<UITechnologyElement> GetRows();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTableRowNode : BrowserHtmlNode {
    private IHTMLTableRow tableRow;
    private IHTMLElement htmlTableNode;
    internal IHTMLElement HtmlTable { get; }
    internal BrowserTableRowNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    internal virtual bool IsValidProperty(string propertyName);
    internal virtual object GetSearchPropertyValue(string propertyName);
    protected virtual object GetHtmlPropertyValue(string propertyName);
    internal virtual BrowserHtmlNode GetAncestorNode();
    internal IHTMLElement get_HtmlTable();
    private static ControlType GetControlType(DomNodeWrapper domNode);
    private string GetInnerText();
    internal static List`1<UITechnologyElement> GetRowCells(IHTMLTableRow tableRow, IEWebControlElement ieControl, int documentId);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTextAreaNode : BrowserTextBaseNode {
    private IHTMLTextAreaElement textAreaNode;
    public string Value { get; public set; }
    public bool IsControlReadOnly { get; }
    internal BrowserTextAreaNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_IsControlReadOnly();
}
[ComVisibleAttribute("True")]
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTextBaseNode : BrowserHtmlScrollContainer {
    private bool isScrollSupported;
    internal bool IsScrollEnabled { get; }
    public bool IsControlReadOnly { get; }
    internal BrowserTextBaseNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual bool get_IsScrollEnabled();
    protected virtual string InitializeFriendlyName();
    internal virtual void InitializeEventSink();
    protected virtual String[] GetEventNames(UITestEventType eventType);
    protected virtual UISynchronizationOptions GetUISynchronizationOptions();
    public abstract virtual bool get_IsControlReadOnly();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTextContainerEvents : BrowserEvents {
    private string cachedValue;
    internal BrowserTextContainerEvents(BrowserHtmlNode hnode);
    protected virtual void onkeypress(IDomEventParameter eventParameter);
    protected virtual void onkeyup(IDomEventParameter eventParameter);
    private void HandleTextChange();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTextInputEvents : BrowserEvents {
    private static List`1<int> specialKeys;
    private BrowserTextBaseNode textBaseNode;
    private bool hasFocus;
    private bool isCurrentKeyTabOnAutoSuggest;
    private bool isCurrentKeyEnterOnAutoSuggest;
    private static string AutoSuggestDropDownClass;
    private object delayRemovalObjectLock;
    private IUITestEventNotify delayedRemovalEventNotify;
    private UITestEventType delayedRemovalEventType;
    internal static List`1<int> SpecialKeys { get; }
    internal BrowserTextInputEvents(BrowserTextBaseNode hnode);
    internal virtual bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void onfocusin(IDomEventParameter eventParameter);
    protected virtual void onfocusout(IDomEventParameter eventParameter);
    protected virtual void onpropertychange(IDomEventParameter eventParameter);
    protected virtual void oninput(IDomEventParameter eventParameter);
    protected virtual void onkeypress(IDomEventParameter eventParameter);
    protected virtual void onkeydown(IDomEventParameter eventParameter);
    protected virtual void onkeyup(IDomEventParameter eventParameter);
    internal static List`1<int> get_SpecialKeys();
    private void HandleTextChange();
    private static bool IsFocusOnAutoSuggestWindow();
    private static bool IsWindowAutoSuggest(IntPtr handle, IntPtr& pointer);
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserTextInputNode : BrowserTextBaseNode {
    private IHTMLInputElement textInputNode;
    public string Value { get; public set; }
    public bool IsControlReadOnly { get; }
    internal BrowserTextInputNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    protected virtual object GetHtmlPropertyValue(string propertyName);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_IsControlReadOnly();
    private string GetTextType();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserToggleEvents : BrowserEvents {
    private IHTMLInputElement optionElement;
    internal BrowserToggleEvents(BrowserHtmlNode hnode, IHTMLInputElement optionButton);
    protected virtual void onpropertychange(IDomEventParameter eventObject);
    protected virtual void onclick(IDomEventParameter eventParameter);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserUtility : object {
    private static Dictionary`2<string, string> ignoredHtmlTags;
    private static Dictionary`2<string, string> ignoredHtmlTextContainers;
    private static Dictionary`2<string, string> htmlControlMapping;
    private static Dictionary`2<int, bool> NotSupportedKeysMap;
    private static string NodeTrackAttribute;
    private static string HttpEquivRefresh;
    private static string Generator;
    private static string SharepointAttribute;
    private static string bold;
    private static string bolder;
    private static string oblique;
    private static string italic;
    private static int BoldWeight;
    internal static string IEFrameworkID;
    private static Regex controlRegex;
    private static Regex lackClosingTagRegex;
    private static Regex guidRegex;
    private static BrowserUtility();
    internal static string StripGuid(string value);
    internal static string PostProcessFriendlyName(string friendlyName);
    internal static bool IsRedirectingDocument(IHTMLDocument documentElement);
    internal static bool IsSharePointDocument(IHTMLDocument documentElement);
    internal static IHTMLElement GetOffsetParent(IHTMLElement elementNode);
    internal static Point GetClickablePoint(Rectangle visibleRect, IUITechnologyElement pluginNode, IEWebControlElement ieControl, IHTMLElement domElement);
    internal static double GetOptionNodeHeight(IHTMLSelectElement selectNode, bool isScrollableComboBox);
    internal static IHTMLElement ConvertToIHTMLElement(AutomationElement element);
    private static int GetIAccOptionHeight(IHTMLSelectElement selectNode);
    internal static Rectangle GetOptionClientRect(int displayIndex, IHTMLSelectElement selectNode, Rectangle selectClientRect, double optionNodeHeight);
    internal static string GetControlDefinition(IHTMLElement htmlNode);
    internal static bool IsContentEditable(IHTMLElement htmlElement);
    internal static string GetNonNullString(string elementNode);
    internal static bool WaitForReady(IUITechnologyElement technologyElement, int documentId, IsPlaybackCanceled isPlaybackCanceled);
    internal static bool WaitForReady(IUITechnologyElement technologyElement, int documentId, IsPlaybackCanceled isPlaybackCanceled, bool ignoreRedirection);
    private static IEWebControlElement GetWebControlElement(IUITechnologyElement technologyElement, Boolean& topLevelElementWfr);
    internal static string FindAbsolutePath(string url);
    internal static object GetCssPropertyValue(IHTMLElement htmlElement, CssProperty property);
    internal static bool IsOverflowVisible(IHTMLElement htmlElement);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength")]
internal static bool IsVisible(IHTMLElement htmlElement);
    private static bool CheckCSSPropertyWithValue(IHTMLElement htmlElement, CssProperty cssProperty, string givenValue, String& actualValue);
    internal static List`1<T> CloneList(List`1<T> elementList);
    internal static void MapAndThrowException(SystemException ex, IUITechnologyElement element);
    internal static void MapAndThrowException(SystemException ex, IUITechnologyElement element, string message);
    internal static IAccessible GetAccNode(IHTMLElement htmlNode);
    internal static IUITechnologyElement GetParentContainer(BrowserHtmlNode browserNode);
    private static Dictionary`2<int, bool> InitNotSupportedKeyFilter();
    internal static bool IsSupportedKey(object data);
    internal static bool IsAltSpace(object data);
    internal static bool IsIgnoredTag(string tagname);
    internal static string HtmlControlTypeName(string tagName);
    internal static Rectangle HtmlRectToWindowsRect(IHTMLRect htmlRect);
    internal static bool IsHyperlink(IHTMLElement htmlNode);
    internal static bool IsInValidforElementFromPoint(string tagname);
    public static void CopyCeilingElement(BrowserHtmlNode domNode, IUITechnologyElement targetNode);
    private static bool IsEmptyTag(string tagName);
    internal static IHTMLElement FindBoundLabelNode(BrowserHtmlNode htmlNode);
    internal static bool IsTextListItem(string tagName);
    internal static IHTMLAnchorElement GetParentHyperlink(IHTMLElement elementNode);
    internal static float GetDocumentMode(IHTMLElement element);
    internal static bool IsIE8ScrollBar(IHTMLElement element);
    internal static void SafeReleaseComObject(object obj);
    private static Dictionary`2<string, string> InitializeHtmlControlMappings();
    private static Dictionary`2<string, string> InitializeIgnoredTagsList();
    private static Dictionary`2<string, string> InitializeIgnoredTextContainers();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserVideoNode : BrowserMediaNode {
    private IHTMLVideoElement videoNode;
    internal BrowserVideoNode(IEWebControlElement rootNode, DomNodeWrapper domNode);
    internal virtual void CacheQueryIdProperties();
    protected virtual object GetHtmlPropertyValue(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.BrowserWebControlEventHandler : object {
    private bool sinkInIEProcess;
    private IWebBrowser2 iewebCtrl;
    private IECommunicator notifyElement;
    private IConnectionPointContainer connectionPointContainer;
    private IConnectionPoint connectionPoint;
    private int eventHandle;
    private bool disposed;
    private double progressPercentage;
    private static Dictionary`2<string, string> IgnoredUrlSchemes;
    internal BrowserWebControlEventHandler(IWebBrowser2 iwebCtrl, IECommunicator eventTarget, bool inIEProcess);
    private static BrowserWebControlEventHandler();
    public sealed virtual void Dispose();
    public sealed virtual void NavigateComplete2(object pDisp, Object& URL);
    public sealed virtual void BeforeNavigate2(object pDisp, Object& URL, Object& Flags, Object& TargetFrameName, Object& PostData, Object& Headers, Boolean& Cancel);
    public sealed virtual void DownloadBegin();
    public sealed virtual void DownloadComplete();
    public sealed virtual void DocumentComplete(object pDisp, Object& URL);
    public sealed virtual void ProgressChange(int Progress, int ProgressMax);
    public sealed virtual void ClientToHostWindow(Int32& CX, Int32& CY);
    public sealed virtual void CommandStateChange(int Command, bool Enable);
    public sealed virtual void FileDownload(Boolean& Cancel);
    public sealed virtual void NavigateError(object pDisp, Object& URL, Object& Frame, Object& StatusCode, Boolean& Cancel);
    public sealed virtual void NewWindow2(Object& ppDisp, Boolean& Cancel);
    public sealed virtual void NewWindow3(Object& ppDisp, Boolean& Cancel, UInt32 dwFlags, string bstrUrlContext, string bstrUrl);
    public sealed virtual void OnFullScreen(bool FullScreen);
    public sealed virtual void OnMenuBar(bool MenuBar);
    public sealed virtual void OnQuit();
    public sealed virtual void OnStatusBar(bool StatusBar);
    public sealed virtual void OnTheaterMode(bool TheaterMode);
    public sealed virtual void OnToolBar(bool ToolBar);
    public sealed virtual void OnVisible(bool Visible);
    public sealed virtual void PrintTemplateInstantiation(object pDisp);
    public sealed virtual void PrintTemplateTeardown(object pDisp);
    public sealed virtual void PrivacyImpactedStateChange(bool bImpacted);
    public sealed virtual void PropertyChange(string szProperty);
    public sealed virtual void SetSecureLockIcon(int SecureLockIcon);
    public sealed virtual void StatusTextChange(string Text);
    public sealed virtual void TitleChange(string Text);
    public sealed virtual void UpdatePageStatus(object pDisp, Object& nPage, Object& fDone);
    public sealed virtual void WindowClosing(bool IsChildWindow, Boolean& Cancel);
    public sealed virtual void WindowSetHeight(int Height);
    public sealed virtual void WindowSetLeft(int Left);
    public sealed virtual void WindowSetResizable(bool Resizable);
    public sealed virtual void WindowSetTop(int Top);
    public sealed virtual void WindowSetWidth(int Width);
    private void NotifyEvent(WebControlEventType eventType, object eventParameterValues);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal void RegisterSink();
    internal void RemoveEventSink();
    private int GetDocumentIdentifier(object frameElement);
    internal static bool IsValidNavigateUrl(string navigateUrl);
    private static Dictionary`2<string, string> InitializeUrlSchemes();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.ChildrenEnumerator : object {
    private IUITechnologyElement current;
    private IUITechnologyElement parent;
    private bool disposed;
    public object Current { get; }
    public ChildrenEnumerator(IUITechnologyElement element);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.ComCastHelper : object {
    public static ToInterface SafeCast(FromInterface baseObject);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static ToInterface TryCast(FromInterface baseObject);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static ToInterface CastAs(FromInterface baseObject);
    public static T SafeCastToHTMLDocument(object baseObject);
    public static int GetUniqueNumberAfterCast(FromInterface baseObject);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.CommonBrowserUtility : object {
    private static string DialogClassName;
    private static string IEBrowserExeName;
    private static Guid sidsTopLevelBrowser;
    private static Guid sidsWebBrowserApp;
    private static CommonBrowserUtility();
    public static bool IsAuthenticationDialogInForeground();
    public static IWebBrowser2 WebBrowserFromWindowHandle(IntPtr handle, STAHelperThread staHelperObject, IsPlaybackCanceled playbackCanceled, IntPtr& documentWindowHandle);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static IWebBrowser2 GetWebControlFromDocument(IHTMLDocument htmlDocument, STAHelperThread staHelperObject);
    private static IWebBrowser2 GetIWebBrowser(IServiceProvider serviceProvider);
    public static IntPtr GetDocumentWindowHandle(IntPtr topLevelWindowHandle, IsPlaybackCanceled playbackCanceled);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.DispatchObject : object {
    private Type currentTypeObject;
    private AddEventListenerCallback callback;
    private static string DispIdZero;
    public Type UnderlyingSystemType { get; }
    public DispatchObject(AddEventListenerCallback callback);
    public sealed virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public sealed virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public sealed virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr);
    public sealed virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public sealed virtual MethodInfo GetMethod(string name, BindingFlags bindingAttr);
    public sealed virtual MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    public sealed virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public sealed virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    public sealed virtual PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    public sealed virtual PropertyInfo GetProperty(string name, BindingFlags bindingAttr);
    public sealed virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    public sealed virtual Type get_UnderlyingSystemType();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.DocumentEventNotify : object {
    private bool disposed;
    private Point hoverPoint;
    private BrowserHtmlNode lastTrackedElement;
    private BrowserHtmlNode trackHoverElement;
    private IEWebControlElement ieWebControl;
    private int documentIdentifier;
    private static string MouseMoveEventAttribute;
    private static string TrackedNodeAttribute;
    internal DocumentEventNotify(IEWebControlElement iecontrol, int htmldocumentId);
    public sealed virtual void Dispose();
    public sealed virtual void Notify(IUITechnologyElement source, IUITechnologyElement target, UITestEventType eventType, object eventArgs);
    public sealed virtual void NotifyMultiSource(IUITechnologyElement[] sources, IUITechnologyElement target, UITestEventType eventType, object eventArgs, ElementForThumbnailCapture elementForThumbnailCapture);
    internal void InitializeEventCallBack(IHTMLElement domNode);
    private void ElementMove(IHTMLElement currentNode);
    private void NotifyHover(object dummy);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.DocumentManager : object {
    [CompilerGeneratedAttribute]
private DateTime <NavigationBeginTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DelayedClearCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IECommunicator <CommunicationElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InProcessWebBrowserEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RetryScriptInitialization>k__BackingField;
    private bool useWebBrowserState;
    private DocumentEventNotify eventNotifyObject;
    private bool inProcessDocumentEvents;
    private tagREADYSTATE mshtmlDocumentState;
    private bool navigationBegin;
    private string documentStateInfo;
    private bool navigationInProgress;
    private int htmlDocumentId;
    private IHTMLDocument htmlDocument;
    private List`1<int> htmlParentDocumentIdList;
    private IWebBrowser2 webBrowserControl;
    private IDisposable webControlEventHandler;
    private IDisposable documentEventHandler;
    private object documentContainer;
    private bool disposed;
    private Dictionary`2<int, BrowserHtmlNode> htmlNodeDictionary;
    private object cacheAccessLock;
    private object lockNode;
    private IEWebControlElement iecontrolObject;
    private IECommunicator helperClass;
    private bool eventSinkCreated;
    private DateTime readyStateTrackingStartTime;
    private TimeSpan readyStateTimeOut;
    private static string ImplicitHoverLevelConfig;
    private static string WebWaitForReadyLevelConfig;
    private static string SkipInProcessEventCreation;
    private static string WfrElementIdentifier;
    internal static string vsttFireDummyEventAttribute;
    private static string MouseOverTrackElementIdentifier;
    private static string CommunicationElementIdentifier;
    private static string PendingRequestAttribute;
    private static string PendingTimerAttribute;
    private static string LastTimerTicks;
    private static string JavascriptType;
    private static string AjaxScript;
    private static string TrackMouseScript;
    private static string ActiveXScript;
    private static string TimerTrackingScript;
    private static string TimerScriptId;
    private static string AjaxScriptId;
    private TimeSpan BaseTimeSpan;
    private DocumentEventNotify EventNotifyObject { get; }
    private tagREADYSTATE WebControlState { get; }
    private tagREADYSTATE DocumentState { get; }
    internal bool NavigationInProgress { get; internal set; }
    internal bool NavigationBegin { get; internal set; }
    internal DateTime NavigationBeginTime { get; private set; }
    internal tagREADYSTATE MshtmlDocumentState { get; internal set; }
    internal bool DelayedClearCache { get; internal set; }
    internal IECommunicator CommunicationElement { get; private set; }
    internal IECommunicator HelperClass { get; }
    internal bool InProcessWebBrowserEvents { get; private set; }
    private bool IsSharePointDocument { get; }
    internal int ZoomPercentage { get; }
    private bool RetryScriptInitialization { get; private set; }
    internal DocumentManager(IHTMLDocument document, List`1<int> parentDocumentIdList, int documentId, object docContainer, IEWebControlElement rootNode);
    private static DocumentManager();
    [SuppressMessageAttribute("Microsoft.Usage", "CA2213:DisposableFieldsShouldBeDisposed")]
[SuppressMessageAttribute("Microsoft.Usage", "CA2213:DisposableFieldsShouldBeDisposed")]
public sealed virtual void Dispose();
    private void InitializeDocumentManager();
    internal void AddActivexToPage();
    internal void StartMouseTracking();
    private void AddAjaxAndTimerWfrScriptCode();
    private static bool GetConfigValue(string configName, T& configValue);
    private void CreateEventSinks();
    internal int GetParentDocumentId();
    internal T GetDocument();
    internal List`1<int> GetParentDocumentIdList();
    internal object GetDocumentContainer();
    internal void ClearCache();
    internal BrowserHtmlNode FindDOMUIObject(int uniqueNumber);
    internal void AddDOMUIObject(int uniqueNumber, BrowserHtmlNode htmlNode);
    internal bool IsParentDocument(int parentDocumentId);
    internal bool IsDocumentReady();
    internal DateTime GetLastTimerCreationTime();
    internal bool IsDocumentReadyForSearch(long wfrTimeLeft, bool ignoreRedirection);
    private long GetWfrCounterValue(string wfrCounterName);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal void RemoveEventRegistration();
    internal void UpdateNavigationBegin(bool navigationState);
    private void CreateWebControlEventHandler(IECommunicator activexObject);
    private void CreateDocumentEventHandler(IECommunicator activexObject);
    private void InitializeScriptElements();
    private void ClearDocumentWfrStateInfo();
    private static IHTMLElement CreateScriptElement(string scriptFileName, IHTMLDocument documentNode, string scriptId);
    internal static bool InjectJavaScript(string scriptFileName, IHTMLDocument documentNode);
    internal static bool InjectJavaScript(string scriptFileName, IHTMLDocument documentNode, string scriptId);
    private static IWebBrowser2 GetFrameWebBrowserControl(IHTMLFrameBase frameElement);
    private DocumentEventNotify get_EventNotifyObject();
    private tagREADYSTATE get_WebControlState();
    private tagREADYSTATE get_DocumentState();
    internal bool get_NavigationInProgress();
    internal void set_NavigationInProgress(bool value);
    internal bool get_NavigationBegin();
    internal void set_NavigationBegin(bool value);
    [CompilerGeneratedAttribute]
internal DateTime get_NavigationBeginTime();
    [CompilerGeneratedAttribute]
private void set_NavigationBeginTime(DateTime value);
    internal tagREADYSTATE get_MshtmlDocumentState();
    internal void set_MshtmlDocumentState(tagREADYSTATE value);
    [CompilerGeneratedAttribute]
internal bool get_DelayedClearCache();
    [CompilerGeneratedAttribute]
internal void set_DelayedClearCache(bool value);
    [CompilerGeneratedAttribute]
internal IECommunicator get_CommunicationElement();
    [CompilerGeneratedAttribute]
private void set_CommunicationElement(IECommunicator value);
    internal IECommunicator get_HelperClass();
    [CompilerGeneratedAttribute]
internal bool get_InProcessWebBrowserEvents();
    [CompilerGeneratedAttribute]
private void set_InProcessWebBrowserEvents(bool value);
    private bool get_IsSharePointDocument();
    private static void SafeDisposeOfComInterface(IDisposable& disposable, bool dispose);
    private void ThrowIfZoomNotSupported();
    internal int get_ZoomPercentage();
    [CompilerGeneratedAttribute]
private bool get_RetryScriptInitialization();
    [CompilerGeneratedAttribute]
private void set_RetryScriptInitialization(bool value);
    internal string GetDocumentState();
}
[ComVisibleAttribute("True")]
[GuidAttribute("1C7F57B0-124D-4A99-8E1C-110886B437B6")]
[ClassInterfaceAttribute("0")]
[ComDefaultInterfaceAttribute("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IDomAttachEventCallback")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.DomAttachEventCallback : object {
    private DispatchObject addEventListenerHandler;
    private static Dictionary`2<string, string> addEventListenerEvents;
    private IECommunicator notifyElement;
    private IHTMLElement domElement;
    private List`1<string> domEventNames;
    private bool disposed;
    private bool callBackInIEProcess;
    private bool cancelBubbleUp;
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal DomAttachEventCallback(IHTMLElement domNode, String[] eventNames, IECommunicator notifyNode);
    internal DomAttachEventCallback(IHTMLElement domNode, String[] eventNames, IECommunicator notifyNode, bool inIEProcess, bool cancelBubble);
    private static DomAttachEventCallback();
    [DispIdAttribute("0")]
public sealed virtual void DomEvent(IHTMLEventObj eventParameter);
    public void AddEventListenerHandler(object eventTarget, IDOMEvent eventParameter);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public sealed virtual void Dispose();
    private void Notify(DomEventParameter eventObject);
    private void Initialize(IHTMLElement domNode, String[] eventNames, IECommunicator notifyNode, bool inProcess, bool cancelBubble);
    private void AddEventListener(IHTMLElement domElement, string eventName);
    private void RemoveEventListener(IHTMLElement domElement, string eventName);
    private static DomEventParameter CreateEventObject(IHTMLEventObj mshtmlEventObject);
    private static DomEventParameter CreateEventObject(IDOMEvent mshtmlEventObject);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.DomEventName : object {
    internal static string Change;
    internal static string Click;
    internal static string FocusIn;
    internal static string FocusOut;
    internal static string KeyDown;
    internal static string KeyPress;
    internal static string KeyUp;
    internal static string PropertyChange;
    internal static string Input;
    internal static string MouseMove;
    internal static string MouseOver;
    internal static string MouseDown;
    internal static string Play;
    internal static string Pause;
    internal static string Seeked;
    internal static string VolumeChange;
    internal static string OnChange;
    internal static string OnClick;
    internal static string OnFocusIn;
    internal static string OnFocusOut;
    internal static string OnKeyDown;
    internal static string OnKeyPress;
    internal static string OnKeyUp;
    internal static string OnPropertyChange;
    internal static string OnMouseMove;
    internal static string OnMouseOver;
    internal static string OnMouseDown;
    internal static string OnMouseUp;
    private static Dictionary`2<string, string> domEventDictionary;
    private static DomEventName();
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static string GetEventNameInCorrectCase(string eventName);
    private static Dictionary`2<string, string> InitializeDomEvents();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.DomEventParameter : object {
    private List`1<object> eventParameters;
    public string EventName { get; internal set; }
    public int KeyCode { get; internal set; }
    public int MouseButton { get; internal set; }
    public string PropertyName { get; internal set; }
    internal Object[] EventParameters { get; }
    internal DomEventParameter(Object[] eventParameterValues);
    public sealed virtual string get_EventName();
    internal void set_EventName(string value);
    public sealed virtual int get_KeyCode();
    internal void set_KeyCode(int value);
    public sealed virtual int get_MouseButton();
    internal void set_MouseButton(int value);
    public sealed virtual string get_PropertyName();
    internal void set_PropertyName(string value);
    private void Initialize();
    private void UpdateParameterValue(int paramIndex, object paramValue);
    private T GetParamValue(int paramIndex);
    internal Object[] get_EventParameters();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.DomNodeWrapper : object {
    private IHTMLDOMNode htmlNode;
    private IHTMLElement htmlElement;
    private int uniqueNumber;
    private string tagName;
    private static int UninitializedUniqueNumber;
    private Nullable`1<bool> isIE8Scrollbar;
    public IHTMLDOMNode HtmlDomNode { get; }
    public IHTMLElement HtmlElement { get; }
    public string TagName { get; }
    public int UniqueNumber { get; }
    public int SourceIndex { get; }
    public bool IsValid { get; }
    internal bool IsIE8Scrollbar { get; }
    public DomNodeWrapper(IHTMLDOMNode node);
    public DomNodeWrapper(IHTMLElement element);
    public IHTMLDOMNode get_HtmlDomNode();
    public IHTMLElement get_HtmlElement();
    public string get_TagName();
    public int get_UniqueNumber();
    public int get_SourceIndex();
    public bool get_IsValid();
    public void EnsureValid();
    public void EnsureHtmlElement();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
[SuppressMessageAttribute("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
public ToInterface SafeCast();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
[SuppressMessageAttribute("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
public ToInterface TryCast();
    internal bool get_IsIE8Scrollbar();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.EventNotifyManager : object {
    private static object queueLockNode;
    private static bool notificationThreadActive;
    private static Queue`1<IEventNotificationHelper> notifyQueue;
    private static EventNotifyManager();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static void NotificationEngine(object dummy);
    internal static void EnqueueNotification(IECommunicator notifyTarget, Object[] eventParameterValues);
    private static void Enqueue(IEventNotificationHelper notifyData);
}
[ComVisibleAttribute("True")]
[GuidAttribute("E852BA4B-2E20-4a24-8913-8D0019E581FB")]
[InterfaceTypeAttribute("2")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IDomAttachEventCallback {
    [DispIdAttribute("0")]
public abstract virtual void DomEvent(IHTMLEventObj eventParameter);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IEDOMPluginResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ClickablePointException { get; }
    internal static string ConditionSearchFailed { get; }
    internal static string DisambiguationFailure { get; }
    internal static string DocumentNotAccessible { get; }
    internal static string EPMModeNotSupported { get; }
    internal static string IE64BitProcessNotSupported { get; }
    internal static string IEExtensionPackageDescriptionText { get; }
    internal static string InvalidAttributeValue { get; }
    internal static string InvalidIEQueryElement { get; }
    internal static string InvalidIEWindowHandle { get; }
    internal static string InvalidPropertyName { get; }
    internal static string InvalidTopLevelElement { get; }
    internal static string MethodNotSupported { get; }
    internal static string PrimaryPropertySearchFailed { get; }
    internal static string WaitForReadyTimedOut { get; }
    internal static string ZoomNotAtHundred { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ClickablePointException();
    internal static string get_ConditionSearchFailed();
    internal static string get_DisambiguationFailure();
    internal static string get_DocumentNotAccessible();
    internal static string get_EPMModeNotSupported();
    internal static string get_IE64BitProcessNotSupported();
    internal static string get_IEExtensionPackageDescriptionText();
    internal static string get_InvalidAttributeValue();
    internal static string get_InvalidIEQueryElement();
    internal static string get_InvalidIEWindowHandle();
    internal static string get_InvalidPropertyName();
    internal static string get_InvalidTopLevelElement();
    internal static string get_MethodNotSupported();
    internal static string get_PrimaryPropertySearchFailed();
    internal static string get_WaitForReadyTimedOut();
    internal static string get_ZoomNotAtHundred();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("0")]
[ComDefaultInterfaceAttribute("Microsoft.VisualStudio.TestTools.UITest.Extension.IE.Communication.Interop.IEventHelper")]
[GuidAttribute("4422752E-BF61-4FE9-89A6-95508A88870F")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IEEventHelper : object {
    [CompilerGeneratedAttribute]
private static IECommunicator <WebEventProxyNode>k__BackingField;
    private IHTMLWindow3 windowElement3;
    private static object scriptLanguage;
    private static IECommunicator WebEventProxyNode { get; private set; }
    private static IEEventHelper();
    public sealed virtual object CreateWebControlEventSink(IECommunicator notifyElement, object webControl);
    public sealed virtual object CreateDocumentEventSink(IECommunicator notifyElement, object documentNode, int documentId);
    public sealed virtual object CreateEventCallback(IECommunicator notifyElement, object domNode, String[] eventNames, int cancelBubble);
    public sealed virtual void InitializeTimerTracking(object domDocument);
    public sealed virtual void LogMessage(string message);
    public sealed virtual int SetTimer(int functionCode, Object& codeExpression, object delay);
    public sealed virtual int TimerTrackingStatus();
    internal static void ValidateEventParamLength(int length, int minimumLength);
    public static IWebBrowser2 FindBrowserControl(IHTMLDocument2 parentDocument, Predicate`1<IWebBrowser2> predicate);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
public static ToInterface CastAs(FromInterface baseObject);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static void RemoveEventSink(int eventHandle, IConnectionPoint connectionPoint);
    [CompilerGeneratedAttribute]
private static IECommunicator get_WebEventProxyNode();
    [CompilerGeneratedAttribute]
private static void set_WebEventProxyNode(IECommunicator value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IEExtensionPackage : UITestExtensionPackageBase {
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IESearchInfo : object {
    [CompilerGeneratedAttribute]
private string <MessageInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ControlsFound>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HResult>k__BackingField;
    private static List`1<string> supportedProperties;
    public string Message { get; }
    public string Source { get; }
    public ILastInvocationInfo InnerInfo { get; }
    public string MessageInfo { get; public set; }
    public int ControlsFound { get; public set; }
    public int HResult { get; public set; }
    internal IESearchInfo(string infoMessage, int count, UInt32 hresultCode);
    internal IESearchInfo(string infoMessage, int count, int hresultCode);
    private static IESearchInfo();
    public sealed virtual string get_Message();
    public sealed virtual string get_Source();
    public sealed virtual ILastInvocationInfo get_InnerInfo();
    public sealed virtual String[] GetInfoProperties();
    public sealed virtual object GetInfoPropertyValue(string propertyName);
    [CompilerGeneratedAttribute]
public string get_MessageInfo();
    [CompilerGeneratedAttribute]
public void set_MessageInfo(string value);
    [CompilerGeneratedAttribute]
public int get_ControlsFound();
    [CompilerGeneratedAttribute]
public void set_ControlsFound(int value);
    [CompilerGeneratedAttribute]
public int get_HResult();
    [CompilerGeneratedAttribute]
public void set_HResult(int value);
    private static List`1<string> InitSupportedProperties();
}
[ComVisibleAttribute("True")]
[GuidAttribute("DAB015BF-6E2E-4edb-A8E5-27F50E6C2CE7")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IETestPlugin : UITechnologyManager {
    [CompilerGeneratedAttribute]
private bool <RecordingSession>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InSearchContext>k__BackingField;
    private STAHelperThread staHelperObject;
    private IntPtr comboboxListHwnd;
    private IUITestEventNotify actionNotify;
    private bool disposed;
    private Dictionary`2<IntPtr, IEWebControlElement> ieobjectDictionary;
    private bool sessionStarted;
    private ILastInvocationInfo lastInfo;
    private bool smartMatchEnabled;
    private bool singlePass;
    private bool isSearchCanceled;
    private object lockObject;
    private object initLockObject;
    private static Nullable`1<bool> isIE9;
    internal static string WebViewAutomationElementClassName;
    public string TechnologyName { get; }
    internal bool RecordingSession { get; private set; }
    internal IUITestEventNotify ActionNotify { get; private set; }
    internal STAHelperThread STAHelperObject { get; private set; }
    internal int WfrTimeOutInterval { get; }
    internal bool SinglePass { get; private set; }
    internal int TimeOutInterval { get; }
    internal int MaxRetries { get; }
    internal WaitForReadyLevel WaitForReadyLevel { get; }
    internal bool InSearchContext { get; internal set; }
    internal static bool IsIE9 { get; }
    public virtual string get_TechnologyName();
    public virtual void StartSession(bool recordingSession);
    public virtual void StopSession();
    public virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    public virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public virtual IUITechnologyElement GetElementFromAutomationElement(AutomationElement element, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    public virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    public virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual ILastInvocationInfo GetLastInvocationInfo();
    public virtual void CancelStep();
    public virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    public virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    public virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    public virtual void SetTechnologyManagerProperty(UITechnologyManagerProperty propertyName, object propertyValue);
    public virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    public virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    public virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void ProcessMouseEnter(IntPtr handle);
    public virtual int GetControlSupportLevel(IntPtr windowHandle);
    public virtual int GetControlSupportLevel(AutomationElement element);
    public sealed virtual void Dispose();
    internal IUITechnologyElement GetHtmlElementInWebView(IntPtr webViewHandle, Point point);
    internal void RemoveIEWebControl(IntPtr wndHandle);
    public virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    internal IEnumerator GetChildren(IUITechnologyElement element);
    private IUITechnologyElement GetValidParentElement(IETestPluginSearchData searchInfo, long localTimeOut);
    internal IUITechnologyElement GetParentSelectNode(IUITechnologyElement topElement);
    private IUITechnologyElement GetIEWebElementFromPoint(IntPtr windowHandle, int pointX, int pointY);
    private bool EnumCallBack(IntPtr hwnd, IntPtr& param);
    internal bool IsSearchCanceled();
    private IEWebControlElement GetWebControlFromWindowHandle(IntPtr wndhandle);
    private void InitializeTechnologyManagerProperties();
    private static BrowserHtmlNode GetNodeInDocument(IEWebControlElement ieControl, DomNodeWrapper domNode);
    private static bool MatchNativeElement(DomNodeWrapper domNode, int sourceIndex, IHTMLDocument mshtmlDocument);
    internal IHTMLDocument GetFrameDocument(IHTMLFrameBase frameElement);
    internal IEWebControlElement GetIEWebControl(IntPtr wndhandle);
    internal void NotifyHoverAction(BrowserHtmlNode sourceElement, BrowserHtmlNode targetElement, Point hoverPoint);
    private int SleepWithSearchCancelPoll(int sleepTime, IETestPluginSearch searchHelper);
    private int GetSupportLevelFromParentHierarchy(AutomationElement element);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static IHTMLDocument2 GetFrameDocFromWindow(IHTMLFrameBase frameElement);
    private static bool IsHtmlElementInWebView(AutomationElement automationElement, AutomationElement& webViewAutomationElement);
    [CompilerGeneratedAttribute]
internal bool get_RecordingSession();
    [CompilerGeneratedAttribute]
private void set_RecordingSession(bool value);
    internal IUITestEventNotify get_ActionNotify();
    private void set_ActionNotify(IUITestEventNotify value);
    internal STAHelperThread get_STAHelperObject();
    private void set_STAHelperObject(STAHelperThread value);
    internal int get_WfrTimeOutInterval();
    internal bool get_SinglePass();
    private void set_SinglePass(bool value);
    internal int get_TimeOutInterval();
    internal int get_MaxRetries();
    internal WaitForReadyLevel get_WaitForReadyLevel();
    [CompilerGeneratedAttribute]
internal bool get_InSearchContext();
    [CompilerGeneratedAttribute]
internal void set_InSearchContext(bool value);
    internal static bool get_IsIE9();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IETestPluginSearch : object {
    private IETestPluginSearchData searchData;
    private bool findFirstMatch;
    private IESearchInfo searchInformation;
    private List`1<BrowserHtmlNode> matchedElements;
    private BrowserHtmlNode ancestorDomNode;
    private IEWebControlElement ieWebBrowserControl;
    private bool smartMatchEnabled;
    private SkipSearch isCancelled;
    private int MaxPropertyValueLength;
    private Stopwatch m_searchTimer;
    private long m_currentSearchTimeOut;
    private string SearchTagName { get; }
    private AndCondition PrimaryCondition { get; }
    private FilterCondition SecondaryCondition { get; }
    private Dictionary`2<string, object> FastFilterProperties { get; }
    internal bool FindFirstMatch { get; internal set; }
    internal IESearchInfo SearchInformation { get; private set; }
    internal IETestPluginSearch(IETestPluginSearchData searchInfo, bool smartMatchEnabled, SkipSearch isSearchCancelled);
    internal IUITechnologyElement[] MatchElement(IUITechnologyElement parentElement, long timeOut);
    private IUITechnologyElement[] GetScrollbars();
    private bool ThrowIfCancelledOrTimedOut();
    private void InitializeTimer(long timeOut);
    private void ResetTimer();
    private void MatchPrimaryCondition(IUITechnologyElement topLevelElement);
    private void WaitForRedirectionComplete(int documentId, IUITechnologyElement parentElement, IHTMLDocument document);
    private void FilterAllDocuments(bool useSmartSearch);
    private bool IsUnderMaxDepth(IHTMLElement elementNode);
    private void UpdateMatchedElements(List`1<IHTMLElement> domNodeList, int documentId);
    private List`1<IHTMLElement> FindElementList(IHTMLDocument htmlDocument, IHTMLElement htmlElement, bool useSmartSearch);
    private List`1<IHTMLElement> FilterList(IHTMLElementCollection elementCollection, bool useSmartSearch);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private List`1<IHTMLElement> FilterList(IHTMLElementCollection elementCollection, string propertyToIgnore, KeyValuePair`2& mismatchedProperty, bool ignoreGuids);
    private List`1<IHTMLElement> FindElementList(IHTMLDocument htmlDocument, bool useSmartSearch);
    private IHTMLElementCollection FilterElementsByIdAndName(IHTMLDocument htmlDocument, bool useSmartSearch);
    private BrowserHtmlNode MatchSecondaryCondition();
    private bool MatchQueryCondition(IQueryCondition conditionNode, BrowserHtmlNode htmlElement);
    private int GetPropertyCount();
    private bool MatchPropertyIgnoreWhiteSpace(PropertyCondition condition, BrowserHtmlNode htmlElement);
    private string Normalize(string input);
    private string get_SearchTagName();
    private AndCondition get_PrimaryCondition();
    private FilterCondition get_SecondaryCondition();
    private Dictionary`2<string, object> get_FastFilterProperties();
    internal bool get_FindFirstMatch();
    internal void set_FindFirstMatch(bool value);
    internal IESearchInfo get_SearchInformation();
    private void set_SearchInformation(IESearchInfo value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IETestPluginSearchData : object {
    private static string TechNameRegex;
    private bool findAll;
    private IESearchInfo searchDataError;
    private string queryElement;
    private IUITechnologyElement searchContainer;
    private int maxSearchDepth;
    private string searchHtmlTagName;
    private AndCondition primaryCondition;
    private FilterCondition secondaryCondition;
    private Dictionary`2<string, object> filterProperties;
    internal Dictionary`2<string, object> primaryFilterProperties;
    private static string iedomPrimaryFormatString;
    private static Regex iedomFormat;
    private static Regex iedomPrimaryFormat;
    internal Dictionary`2<string, object> FastFilterProperties { get; }
    internal string SearchTagName { get; }
    internal AndCondition PrimaryCondition { get; }
    internal FilterCondition SecondaryCondition { get; }
    internal string QueryElement { get; }
    internal int MaxSearchDepth { get; internal set; }
    internal IUITechnologyElement SearchContainer { get; internal set; }
    internal bool FindAll { get; }
    internal IETestPluginSearchData(string queryId, IUITechnologyElement parentElement, int maxDepth);
    internal IETestPluginSearchData(IQueryElement queryElementData);
    private static IETestPluginSearchData();
    internal void ProcessSearchData();
    internal Dictionary`2<string, object> get_FastFilterProperties();
    internal string get_SearchTagName();
    internal AndCondition get_PrimaryCondition();
    internal FilterCondition get_SecondaryCondition();
    internal string get_QueryElement();
    internal int get_MaxSearchDepth();
    internal void set_MaxSearchDepth(int value);
    internal IUITechnologyElement get_SearchContainer();
    internal void set_SearchContainer(IUITechnologyElement value);
    internal bool get_FindAll();
    private void GetFilterProperties(IQueryCondition andCondition);
    private void ParsePrimaryCondition(string primaryQueryID);
    private bool ProcessQueryCondition(IQueryCondition parsedCondition);
    private static Dictionary`2<string, object> InitializeFilterProperties();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IEWaiter : object {
    private ManualResetEvent waitEvent;
    private bool removeWaiterNeeded;
    private IUITechnologyManager plugin;
    private IUITechnologyElement element;
    private UITestEventType eventType;
    private bool disposed;
    internal bool RemoveWaiterNeeded { get; internal set; }
    private ManualResetEvent WaitEvent { get; }
    public IEWaiter(IUITechnologyManager plugin, IUITechnologyElement element, UITestEventType eventType);
    public sealed virtual bool Reset();
    public sealed virtual void Remove();
    public sealed virtual bool Wait(int timeout, object data);
    public sealed virtual void Notify(IUITechnologyElement source, IUITechnologyElement target, UITestEventType eventType, object eventArgs);
    public sealed virtual void NotifyMultiSource(IUITechnologyElement[] source, IUITechnologyElement target, UITestEventType eventType, object eventArgs, ElementForThumbnailCapture elementForThumbnailCapture);
    public sealed virtual void Dispose();
    internal bool get_RemoveWaiterNeeded();
    internal void set_RemoveWaiterNeeded(bool value);
    private ManualResetEvent get_WaitEvent();
}
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.IEWebControlElement : UITechnologyElement {
    [CompilerGeneratedAttribute]
private bool <HostedInIE>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirectlyUnderDesktop>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <TopLevelWindowHandle>k__BackingField;
    private double progressPercentage;
    private IECommunicator webEventProxyNode;
    private bool isComboBoxListContainer;
    private int downloadCount;
    private object lockNode;
    private IHTMLDocument mshtmlDoc;
    private IntPtr iehandle;
    internal bool eventFired;
    private UInt32 ieprocessId;
    private SafeThreadKeyValueList`2<int, DocumentManager> htmlDocManagerList;
    private ConcurrentBag`1<DocumentManager> delayedRemovalList;
    private bool disposed;
    private IETestPlugin iemanagerNode;
    private string runtimeId;
    private BrowserHtmlNode currentChildNode;
    private IAccessible ieAccNode;
    private int currentNavigateDocument;
    internal static TimeSpan NavigateInterval;
    private IUITechnologyElement containerElement;
    private IQueryElement queryIdentifier;
    public bool IsTreeSwitchingRequired { get; }
    public IUITechnologyElement SwitchingElement { get; public set; }
    public int ChildIndex { get; }
    public object NativeElement { get; }
    public string FriendlyName { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string TechnologyName { get; }
    public UITechnologyManager TechnologyManager { get; }
    public bool IsPassword { get; }
    public bool IsLeafNode { get; }
    public string Name { get; }
    public IntPtr WindowHandle { get; }
    public IQueryElement QueryId { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string Value { get; public set; }
    internal bool HostedInIE { get; private set; }
    internal bool IsComboBoxListContainer { get; private set; }
    internal bool IsDirectlyUnderDesktop { get; internal set; }
    internal int DownloadCount { get; private set; }
    internal double ProgressPercentage { get; private set; }
    private IAccessible IeAccNode { get; }
    internal BrowserHtmlNode CurrentChildNode { get; internal set; }
    internal IETestPlugin IEPluginInstance { get; internal set; }
    internal bool IsValid { get; }
    internal int ProcessId { get; }
    internal bool IsOffScreen { get; }
    internal IntPtr WebControlHandle { get; }
    internal IHTMLDocument HtmlDocument { get; }
    internal IECommunicator WebEventProxyNode { get; }
    internal IntPtr TopLevelWindowHandle { get; private set; }
    internal IEWebControlElement(IHTMLDocument parentDoc, IntPtr controlHandle, IETestPlugin pluginService);
    private static IEWebControlElement();
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual IUITechnologyElement get_SwitchingElement();
    public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual int get_ChildIndex();
    public virtual object get_NativeElement();
    public virtual void CacheProperties();
    public virtual string get_FriendlyName();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual string get_TechnologyName();
    public virtual UITechnologyManager get_TechnologyManager();
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    public virtual bool get_IsPassword();
    public virtual bool get_IsLeafNode();
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual string get_Name();
    public virtual IntPtr get_WindowHandle();
    public virtual IQueryElement get_QueryId();
    public virtual bool Equals(IUITechnologyElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outPointX, Int32& outPointY);
    public virtual object GetPropertyValue(string propertyName);
    public virtual void SetFocus();
    public virtual void WaitForReady();
    public virtual bool InitializeProgrammaticScroll();
    public virtual void ScrollProgrammatically(ScrollDirection srollDirection, ScrollAmount scrollAmount);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    public sealed virtual void Dispose();
    public sealed virtual void EventNotify(Object[] eventParameterValues);
    internal IECommunicator GetCommunicationObject(int documentId);
    internal void AddDocumentManager(IHTMLDocument htmlDoc, List`1<int> parentDocumentIdList, int documentId, object docContainer);
    private void ThrowIfNoEventHasFired(DocumentManager docManager);
    private void ResetTimer(DocumentManager docManager);
    internal void AddFrameDocumentManagers(int documentId);
    private void AddFrameDocumentManagers(IHTMLDocument mshtmlDocument, List`1<int> parentDocumentIdList);
    private void ClearDocumentManager(int documentId);
    internal int GetParentDocumentId(int documentId);
    internal List`1<int> GetParentDocumentIdList(int documentId);
    internal object GetContainingParent(int documentId);
    internal T GetDocument(int documentId);
    internal List`1<int> GetDocumentManagerList();
    internal void ValidateInteractionState(int documentId);
    internal bool IsDocumentUnderNavigation(int documentId);
    internal bool IsDocumentReadyForSearch(int documentId, long readyTimeOut, bool ignoreRedirection);
    internal void UpdateNavigationBegin(int documentId, bool navigationState);
    private void UpdateDownloadCount(bool incrementValue);
    private void UpdateMshtmlDocumentState(int documentId, tagREADYSTATE stateValue);
    internal DateTime GetLastNavigateBeginTime(int documentId);
    internal DateTime GetLastTimerCreationTime(int documentId);
    internal bool IsValidDocumentId(int documentId);
    private DocumentManager GetDocumentManager(int documentId);
    internal BrowserHtmlNode GetDOMUIObject(DomNodeWrapper domNode, int documentId);
    internal void AddDOMUIObject(BrowserHtmlNode domUIObject, int documentId);
    internal void CleanUp();
    private bool CheckHostingInIE(IntPtr controlHandle);
    private void CheckForWebControlUnderDesktop(IntPtr controlHandle);
    private bool CheckForComboBoxList();
    private void InitializeAccessibleNode();
    internal IUITechnologyElement Navigate(NavigateDirection direction);
    internal Rectangle GetBoundingRectangle();
    internal void EnsureValidTopWindow();
    internal IUITechnologyElement ElementFromPoint(Point location);
    private Point GetOffsetLocation(Point screenLocation, Rectangle internetExplorerServerRect, float zoom);
    internal float GetZoomOffset();
    internal IUITechnologyElement GetElement(int documentId, IHTMLElement currentNode);
    private IUITechnologyElement GetOptionWithinSelect(BrowserSelectListNode selectElement, Point screenLocation);
    private static bool BelongsToDocumentBorder(int offsetX, int offsetY, Rectangle docArea);
    private bool ElementContainsPoint(IHTMLElement elementNode, Point location, int documentId);
    private IHTMLElement GetElementFromPointFallBack(Point location, int offsetX, int offsetY, int documentId);
    internal IHTMLDocument GetFrameDocument(int uniqueNumber, IHTMLFrameBase frameNode);
    internal IUITechnologyElement GetFocusedElement();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static bool IsValidDocument(IHTMLDocument documentElement);
    private static IUITechnologyElement GetScrollBar(IUITechnologyElement targetNode, Point location);
    internal static IEWebControlElement Create(IntPtr rootNodeHandle, IETestPlugin pluginService);
    [CompilerGeneratedAttribute]
internal bool get_HostedInIE();
    [CompilerGeneratedAttribute]
private void set_HostedInIE(bool value);
    internal bool get_IsComboBoxListContainer();
    private void set_IsComboBoxListContainer(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsDirectlyUnderDesktop();
    [CompilerGeneratedAttribute]
internal void set_IsDirectlyUnderDesktop(bool value);
    internal int get_DownloadCount();
    private void set_DownloadCount(int value);
    internal double get_ProgressPercentage();
    private void set_ProgressPercentage(double value);
    private IAccessible get_IeAccNode();
    internal BrowserHtmlNode get_CurrentChildNode();
    internal void set_CurrentChildNode(BrowserHtmlNode value);
    internal IETestPlugin get_IEPluginInstance();
    internal void set_IEPluginInstance(IETestPlugin value);
    internal bool get_IsValid();
    internal int get_ProcessId();
    internal bool get_IsOffScreen();
    internal IntPtr get_WebControlHandle();
    internal IHTMLDocument get_HtmlDocument();
    internal IECommunicator get_WebEventProxyNode();
    [CompilerGeneratedAttribute]
internal IntPtr get_TopLevelWindowHandle();
    [CompilerGeneratedAttribute]
private void set_TopLevelWindowHandle(IntPtr value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17925")]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.BrowserControlType : Enum {
    public int value__;
    public static BrowserControlType Audio;
    public static BrowserControlType Body;
    public static BrowserControlType Button;
    public static BrowserControlType CheckBox;
    public static BrowserControlType ComboBox;
    public static BrowserControlType FileInput;
    public static BrowserControlType Frame;
    public static BrowserControlType FrameSet;
    public static BrowserControlType Hyperlink;
    public static BrowserControlType Image;
    public static BrowserControlType InputButton;
    public static BrowserControlType Label;
    public static BrowserControlType OptionElement;
    public static BrowserControlType Pane;
    public static BrowserControlType ProgressBar;
    public static BrowserControlType Slider;
    public static BrowserControlType RadioButton;
    public static BrowserControlType Table;
    public static BrowserControlType TableCell;
    public static BrowserControlType TableRow;
    public static BrowserControlType TextArea;
    public static BrowserControlType TextInput;
    public static BrowserControlType Video;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.BrowserPropertyManager : object {
    private BrowserHtmlNode m_element;
    private IDictionary`2<string, object> m_searchPropertyDictionary;
    private IDictionary`2<string, object> m_filterPropertyDictionary;
    private static HashSet`1<string> s_restrictedSearchProperties;
    private bool m_hasDynamicConfiguration;
    private static bool s_isDynamicConfigurationEnabled;
    private bool m_isTagInstanceCached;
    private int m_tagInstanceNumber;
    internal int TagInstance { get; }
    private bool IsSmartConfigurationDisabled { get; }
    internal BrowserPropertyManager(BrowserHtmlNode element);
    internal static void InitialiseDynamicPropertyConfiguration();
    internal void CacheQueryIdProperties();
    internal void AddProperty(string propertyName, PropertyType propertyType, bool checkValid);
    internal void DoPostProcessingIfNecessary();
    internal IQueryCondition[] CreateSearchConditions();
    internal IQueryCondition[] CreateFilterConditions();
    internal void ClearAllProperties();
    internal bool IsPropertyAlreadyAdded(string propertyName);
    internal static bool IsPropertyRemovedDynamically(Type controlType, string propertyName);
    private bool CacheDynamicQueryIdProperties();
    private bool IsValidPropertyConfiguration(PropertySet propertySet);
    private void AddAdditionalProperties();
    private void RearrangeProperties();
    private IQueryCondition[] CreatePropertyConditions(IDictionary`2<string, object> propertyDictionary);
    private static void InitializeRestrictedSearchPropertyList();
    internal int get_TagInstance();
    private bool get_IsSmartConfigurationDisabled();
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17925")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.ControlTypeDetails : object {
    private PropertyDetails[] searchPropertiesField;
    private PropertyDetails[] filterPropertiesField;
    private BrowserControlType nameField;
    [XmlArrayItemAttribute("Property")]
public PropertyDetails[] SearchProperties { get; public set; }
    [XmlArrayItemAttribute("Property")]
public PropertyDetails[] FilterProperties { get; public set; }
    [XmlAttributeAttribute]
public BrowserControlType Name { get; public set; }
    public PropertyDetails[] get_SearchProperties();
    public void set_SearchProperties(PropertyDetails[] value);
    public PropertyDetails[] get_FilterProperties();
    public void set_FilterProperties(PropertyDetails[] value);
    public BrowserControlType get_Name();
    public void set_Name(BrowserControlType value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17925")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.ControlTypes : object {
    private ControlTypeDetails[] controlTypeField;
    private bool applySmartConfigurationField;
    private bool applySmartConfigurationFieldSpecified;
    [XmlElementAttribute("ControlType")]
public ControlTypeDetails[] ControlType { get; public set; }
    [XmlAttributeAttribute]
public bool ApplySmartConfiguration { get; public set; }
    [XmlIgnoreAttribute]
public bool ApplySmartConfigurationSpecified { get; public set; }
    public ControlTypeDetails[] get_ControlType();
    public void set_ControlType(ControlTypeDetails[] value);
    public bool get_ApplySmartConfiguration();
    public void set_ApplySmartConfiguration(bool value);
    public bool get_ApplySmartConfigurationSpecified();
    public void set_ApplySmartConfigurationSpecified(bool value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.DynamicPropertyManager : object {
    private static IDictionary`2<Type, PropertySet> s_dynamicPropertyConfigurations;
    private static IDictionary`2<BrowserControlType, Type> s_controlTypeMapping;
    private static string DynamicConfigurationFileName;
    private static string s_configurationFilePath;
    private static bool s_isApplySmartConfiguration;
    private static XmlSerializer s_configurationSerializer;
    public static bool IsApplySmartConfiguration { get; }
    private static string ConfigurationFilePath { get; }
    private static DynamicPropertyManager();
    public static bool get_IsApplySmartConfiguration();
    private static string get_ConfigurationFilePath();
    internal static bool TryLoadDynamicPropertyConfiguration();
    internal static bool TryLoadDynamicPropertyConfiguration(string configurationFilePath);
    internal static PropertySet GetDynamicPropertySet(Type controlType);
    internal static bool IsSupportedControlType(Type controlType);
    private static UITestSearchPropertyConfiguration DeserializePropertyConfiguration(string configurationFilePath);
    private static void InitialiseControlTypeMappings();
    private static PropertySet ConvertToPropertySet(ControlTypeDetails typeDetails);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17925")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlRootAttribute("FilterProperties")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.FilterPropertySet : object {
    private PropertyDetails[] propertyField;
    [XmlElementAttribute("Property")]
public PropertyDetails[] Property { get; public set; }
    public PropertyDetails[] get_Property();
    public void set_Property(PropertyDetails[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17925")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.PropertyDetails : object {
    private string nameField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.PropertySet : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SearchProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <FilterProperties>k__BackingField;
    internal HashSet`1<string> SearchProperties { get; internal set; }
    internal HashSet`1<string> FilterProperties { get; internal set; }
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_SearchProperties();
    [CompilerGeneratedAttribute]
internal void set_SearchProperties(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<string> get_FilterProperties();
    [CompilerGeneratedAttribute]
internal void set_FilterProperties(HashSet`1<string> value);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.PropertyType : Enum {
    public int value__;
    public static PropertyType Search;
    public static PropertyType Filter;
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17925")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlRootAttribute("SearchProperties")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.SearchPropertySet : object {
    private PropertyDetails[] propertyField;
    [XmlElementAttribute("Property")]
public PropertyDetails[] Property { get; public set; }
    public PropertyDetails[] get_Property();
    public void set_Property(PropertyDetails[] value);
}
[GeneratedCodeAttribute("xsd", "4.0.30319.17925")]
[DebuggerStepThroughAttribute]
[DesignerCategoryAttribute("code")]
[XmlTypeAttribute]
[XmlRootAttribute]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyConfiguration.UITestSearchPropertyConfiguration : object {
    private ControlTypes controlTypesField;
    public ControlTypes ControlTypes { get; public set; }
    public ControlTypes get_ControlTypes();
    public void set_ControlTypes(ControlTypes value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.PropertyName : object {
    internal static string AbsolutePath;
    internal static string AccessKey;
    internal static string AutoPlay;
    internal static string CurrentSrc;
    internal static string Alt;
    internal static string CellCount;
    internal static string Checked;
    internal static string Class;
    internal static string ClassName;
    internal static string ColumnIndex;
    internal static string Columns;
    internal static string ColumnCount;
    internal static string CopyPastedText;
    internal static string Cells;
    internal static string ControlDefinition;
    internal static string Controls;
    internal static string ControlType;
    internal static string CurrentTime;
    internal static string CurrentTimeAsString;
    internal static string DefaultChecked;
    internal static string DefaultText;
    internal static string Disabled;
    internal static string DisplayText;
    internal static string Duration;
    internal static string DurationAsString;
    internal static string Enabled;
    internal static string Ended;
    internal static string FileName;
    internal static string Group;
    internal static string FrameDocument;
    internal static string FriendlyName;
    internal static string HelpText;
    internal static string Href;
    internal static string Id;
    internal static string ImageHyperLink;
    internal static string Index;
    internal static string InnerHtml;
    internal static string InnerText;
    internal static string IsPassword;
    internal static string ItemCount;
    internal static string Items;
    internal static string LabeledBy;
    internal static string LabelFor;
    internal static string LinkAbsolutePath;
    internal static string Loop;
    internal static string IsMultipleSelection;
    internal static string Max;
    internal static string MaxDepth;
    internal static string MaxLength;
    internal static string Min;
    internal static string Muted;
    internal static string Name;
    internal static string NativeControlType;
    internal static string OuterHtml;
    internal static string OuterText;
    internal static string PageUrl;
    internal static string Paused;
    internal static string PlaybackRate;
    internal static string Poster;
    internal static string ReadOnly;
    internal static string ReadyState;
    internal static string RedirectingPage;
    internal static string Required;
    internal static string RowIndex;
    internal static string RowCount;
    internal static string Rows;
    internal static string ScrollOrientation;
    internal static string Scrollable;
    internal static string Seeking;
    internal static string Selected;
    internal static string SelectedItem;
    internal static string SelectedItems;
    internal static string SelectedIndex;
    internal static string SelectedIndices;
    internal static string Size;
    internal static string Src;
    internal static string Step;
    internal static string TabIndex;
    internal static string Table;
    internal static string TagInstance;
    internal static string TagName;
    internal static string Target;
    internal static string Text;
    internal static string Title;
    internal static string Type;
    internal static string Value;
    internal static string ValueAsNumber;
    internal static string Volume;
    internal static string ValueAttribute;
    internal static string VideoHeight;
    internal static string VideoWidth;
    private static Dictionary`2<string, string> htmlProperties;
    private static PropertyName();
    internal static string GetPropertyNameInCorrectCase(string propertyName);
    internal static bool NameEquals(string propertyName1, string propertyName2);
    private static Dictionary`2<string, string> InitializeHtmlProperties();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.RadioButtonGroup : object {
    private BrowserRadioButtonNode selectedRadioButton;
    private List`1<BrowserRadioButtonNode> allRadioButtons;
    public int Count { get; }
    internal List`1<BrowserRadioButtonNode> RadioButtons { get; }
    public BrowserRadioButtonNode Selected { get; public set; }
    public RadioButtonGroup(BrowserRadioButtonNode radioNode);
    public int get_Count();
    internal List`1<BrowserRadioButtonNode> get_RadioButtons();
    public BrowserRadioButtonNode get_Selected();
    public void set_Selected(BrowserRadioButtonNode value);
    public bool AddEventNotify(UITestEventType eventType, IUITestEventNotify eventSink, bool cancelBubble);
    public bool RemoveEventNotify(UITestEventType eventType, IUITestEventNotify eventSink);
    private void InitializeGroup();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.SafeThreadKeyValueList`2 : object {
    private List`1<TKey> keys;
    private List`1<TValue> values;
    private object synclock;
    internal List`1<TKey> Keys { get; }
    internal List`1<KeyValuePair`2<TKey, TValue>> KeyValuePairs { get; }
    internal bool TryAdd(TKey key, TValue value);
    internal void Remove(TKey key);
    internal bool ContainsKey(TKey key);
    internal bool TryGetValue(TKey key, TValue& val);
    internal void Clear();
    internal List`1<TKey> get_Keys();
    internal List`1<KeyValuePair`2<TKey, TValue>> get_KeyValuePairs();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.STAHelperThread : object {
    private bool disposed;
    private STAFunction functionToInvoke;
    private Thread threadInstance;
    private Mutex lockSTAHelperAccess;
    private AutoResetEvent eventHelperAccess;
    private AutoResetEvent eventHelperAccessComplete;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) keepSTAHelperAlive;
    public sealed virtual void Dispose();
    internal void InvokeFunction(STAFunction functionCode);
    private void FunctionInvoker();
    private void StartSTAHelperThread();
    private void StopSTAHelperThread();
}
[CompilerGeneratedAttribute]
[InterfaceTypeAttribute("2")]
[GuidAttribute("3050F55F-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.DispHTMLDocument {
}
[CompilerGeneratedAttribute]
[InterfaceTypeAttribute("2")]
[GuidAttribute("3050F57D-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.DispHTMLInputElement {
}
[CompilerGeneratedAttribute]
[CoClassAttribute("System.Object")]
[GuidAttribute("3050F55F-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.HTMLDocument {
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F260-98B5-11CF-BB82-00AA00BDCE0B")]
[InterfaceTypeAttribute("2")]
[TypeIdentifierAttribute]
public interface mshtml.HTMLDocumentEvents {
}
[CompilerGeneratedAttribute]
[ComEventInterfaceAttribute("mshtml.HTMLDocumentEvents", "mshtml.HTMLDocumentEvents")]
[TypeIdentifierAttribute("3050F1C5-98B5-11CF-BB82-00AA00BDCE0B", "mshtml.HTMLDocumentEvents_Event")]
public interface mshtml.HTMLDocumentEvents_Event {
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F57D-98B5-11CF-BB82-00AA00BDCE0B")]
[CoClassAttribute("System.Object")]
[TypeIdentifierAttribute]
public interface mshtml.HTMLInputElement {
}
[CompilerGeneratedAttribute]
[InterfaceTypeAttribute("2")]
[GuidAttribute("3050F2A7-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.HTMLInputTextElementEvents {
}
[CompilerGeneratedAttribute]
[ComEventInterfaceAttribute("mshtml.HTMLInputTextElementEvents", "mshtml.HTMLInputTextElementEvents")]
[TypeIdentifierAttribute("3050F1C5-98B5-11CF-BB82-00AA00BDCE0B", "mshtml.HTMLInputTextElementEvents_Event")]
public interface mshtml.HTMLInputTextElementEvents_Event {
}
[CompilerGeneratedAttribute]
[GuidAttribute("305104BA-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IDOMEvent {
    [DispIdAttribute("1008")]
public string type { get; }
    [DispIdAttribute("1014")]
public bool cancelBubble { get; public set; }
    public void _VtblGap1_7();
    [DispIdAttribute("1008")]
public abstract virtual string get_type();
    public void _VtblGap2_5();
    [DispIdAttribute("1014")]
public abstract virtual void set_cancelBubble(bool p);
    [DispIdAttribute("1014")]
public abstract virtual bool get_cancelBubble();
}
[CompilerGeneratedAttribute]
[GuidAttribute("305106D6-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IDOMKeyboardEvent {
    [DispIdAttribute("1160")]
public int keyCode { get; }
    public void _VtblGap1_9();
    [DispIdAttribute("1160")]
public abstract virtual int get_keyCode();
}
[CompilerGeneratedAttribute]
[GuidAttribute("305106CE-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IDOMMouseEvent {
    [DispIdAttribute("1059")]
public ushort button { get; }
    public void _VtblGap1_8();
    [DispIdAttribute("1059")]
public abstract virtual ushort get_button();
}
[CompilerGeneratedAttribute]
[GuidAttribute("305104B9-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IEventTarget {
    [DispIdAttribute("-2147417602")]
public abstract virtual void addEventListener(string type, object listener, bool useCapture);
    [DispIdAttribute("-2147417601")]
public abstract virtual void removeEventListener(string type, object listener, bool useCapture);
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F1DA-98B5-11CF-BB82-00AA00BDCE0B")]
[DefaultMemberAttribute("href")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLAnchorElement {
    [DispIdAttribute("0")]
public string href { get; public set; }
    [DispIdAttribute("1003")]
public string target { get; public set; }
    [DispIdAttribute("0")]
public abstract virtual void set_href(string p);
    [DispIdAttribute("0")]
public abstract virtual string get_href();
    [DispIdAttribute("1003")]
public abstract virtual void set_target(string p);
    [DispIdAttribute("1003")]
public abstract virtual string get_target();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F265-98B5-11CF-BB82-00AA00BDCE0B")]
[DefaultMemberAttribute("href")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLAreaElement {
    [DispIdAttribute("0")]
public string href { get; public set; }
    [DispIdAttribute("1004")]
public string target { get; public set; }
    public void _VtblGap1_4();
    [DispIdAttribute("0")]
public abstract virtual void set_href(string p);
    [DispIdAttribute("0")]
public abstract virtual string get_href();
    [DispIdAttribute("1004")]
public abstract virtual void set_target(string p);
    [DispIdAttribute("1004")]
public abstract virtual string get_target();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F1D8-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLBodyElement {
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F2BB-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLButtonElement {
    [DispIdAttribute("2000")]
public string type { get; }
    [DispIdAttribute("-2147413011")]
public string value { get; public set; }
    [DispIdAttribute("2000")]
public abstract virtual string get_type();
    [DispIdAttribute("-2147413011")]
public abstract virtual void set_value(string p);
    [DispIdAttribute("-2147413011")]
public abstract virtual string get_value();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F3DB-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLCurrentStyle {
    [DispIdAttribute("-2147413022")]
public string position { get; }
    [DispIdAttribute("-2147418106")]
public object height { get; }
    [DispIdAttribute("-2147413041")]
public string display { get; }
    [DispIdAttribute("-2147413032")]
public string visibility { get; }
    [DispIdAttribute("-2147413102")]
public string overflow { get; }
    [DispIdAttribute("-2147412993")]
public string direction { get; }
    [DispIdAttribute("-2147412973")]
public string overflowX { get; }
    [DispIdAttribute("-2147412972")]
public string overflowY { get; }
    [DispIdAttribute("-2147413022")]
public abstract virtual string get_position();
    public void _VtblGap1_27();
    [DispIdAttribute("-2147418106")]
public abstract virtual object get_height();
    public void _VtblGap2_6();
    [DispIdAttribute("-2147413041")]
public abstract virtual string get_display();
    [DispIdAttribute("-2147413032")]
public abstract virtual string get_visibility();
    public void _VtblGap3_18();
    [DispIdAttribute("-2147413102")]
public abstract virtual string get_overflow();
    public void _VtblGap4_5();
    [DispIdAttribute("-2147412993")]
public abstract virtual string get_direction();
    public void _VtblGap5_26();
    [DispIdAttribute("-2147412973")]
public abstract virtual string get_overflowX();
    [DispIdAttribute("-2147412972")]
public abstract virtual string get_overflowY();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F658-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLCurrentStyle2 {
    [DispIdAttribute("-2147412920")]
public string writingMode { get; }
    public void _VtblGap1_12();
    [DispIdAttribute("-2147412920")]
public abstract virtual string get_writingMode();
}
[CompilerGeneratedAttribute]
[GuidAttribute("626FC520-A41E-11CF-A731-00A0C9082637")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDocument {
}
[CompilerGeneratedAttribute]
[GuidAttribute("332C4425-26CB-11D0-B483-00C04FD90119")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDocument2 {
    [DispIdAttribute("1003")]
public IHTMLElementCollection all { get; }
    [DispIdAttribute("1004")]
public IHTMLElement body { get; }
    [DispIdAttribute("1005")]
public IHTMLElement activeElement { get; }
    [DispIdAttribute("1012")]
public string title { get; public set; }
    [DispIdAttribute("1018")]
public string readyState { get; }
    [DispIdAttribute("1025")]
public string url { get; public set; }
    [DispIdAttribute("1034")]
public IHTMLWindow2 parentWindow { get; }
    public void _VtblGap1_1();
    [DispIdAttribute("1003")]
public abstract virtual IHTMLElementCollection get_all();
    [DispIdAttribute("1004")]
public abstract virtual IHTMLElement get_body();
    [DispIdAttribute("1005")]
public abstract virtual IHTMLElement get_activeElement();
    public void _VtblGap2_5();
    [DispIdAttribute("1012")]
public abstract virtual void set_title(string p);
    [DispIdAttribute("1012")]
public abstract virtual string get_title();
    public void _VtblGap3_4();
    [DispIdAttribute("1018")]
public abstract virtual string get_readyState();
    public void _VtblGap4_16();
    [DispIdAttribute("1025")]
public abstract virtual void set_url(string p);
    [DispIdAttribute("1025")]
public abstract virtual string get_url();
    public void _VtblGap5_31();
    [DispIdAttribute("1067")]
public abstract virtual IHTMLElement createElement(string eTag);
    public void _VtblGap6_34();
    [DispIdAttribute("1068")]
public abstract virtual IHTMLElement elementFromPoint(int x, int y);
    [DispIdAttribute("1034")]
public abstract virtual IHTMLWindow2 get_parentWindow();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F485-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDocument3 {
    [DispIdAttribute("1075")]
public IHTMLElement documentElement { get; }
    [DispIdAttribute("1077")]
public string uniqueID { get; }
    public void _VtblGap1_3();
    [DispIdAttribute("1075")]
public abstract virtual IHTMLElement get_documentElement();
    [DispIdAttribute("1077")]
public abstract virtual string get_uniqueID();
    public void _VtblGap2_33();
    [DispIdAttribute("1086")]
public abstract virtual IHTMLElementCollection getElementsByName(string v);
    [DispIdAttribute("1088")]
public abstract virtual IHTMLElement getElementById(string v);
    [DispIdAttribute("1087")]
public abstract virtual IHTMLElementCollection getElementsByTagName(string v);
}
[CompilerGeneratedAttribute]
[GuidAttribute("30510417-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDocument6 {
    [DispIdAttribute("1104")]
public object documentMode { get; }
    public void _VtblGap1_1();
    [DispIdAttribute("1104")]
public abstract virtual object get_documentMode();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F4B0-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDOMAttribute {
    [DispIdAttribute("1002")]
public object nodeValue { get; public set; }
    [DispIdAttribute("1001")]
public bool specified { get; }
    public void _VtblGap1_1();
    [DispIdAttribute("1002")]
public abstract virtual void set_nodeValue(object p);
    [DispIdAttribute("1002")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("1001")]
public abstract virtual bool get_specified();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F5DA-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDOMNode {
    [DispIdAttribute("-2147417065")]
public IHTMLDOMNode parentNode { get; }
    [DispIdAttribute("-2147417038")]
public string nodeName { get; }
    [DispIdAttribute("-2147417037")]
public object nodeValue { get; public set; }
    [DispIdAttribute("-2147417036")]
public IHTMLDOMNode firstChild { get; }
    [DispIdAttribute("-2147417035")]
public IHTMLDOMNode lastChild { get; }
    [DispIdAttribute("-2147417034")]
public IHTMLDOMNode previousSibling { get; }
    [DispIdAttribute("-2147417033")]
public IHTMLDOMNode nextSibling { get; }
    public void _VtblGap1_1();
    [DispIdAttribute("-2147417065")]
public abstract virtual IHTMLDOMNode get_parentNode();
    public void _VtblGap2_3();
    [DispIdAttribute("-2147417061")]
public abstract virtual IHTMLDOMNode insertBefore(IHTMLDOMNode newChild, object refChild);
    public void _VtblGap3_6();
    [DispIdAttribute("-2147417039")]
public abstract virtual IHTMLDOMNode appendChild(IHTMLDOMNode newChild);
    [DispIdAttribute("-2147417038")]
public abstract virtual string get_nodeName();
    [DispIdAttribute("-2147417037")]
public abstract virtual void set_nodeValue(object p);
    [DispIdAttribute("-2147417037")]
public abstract virtual object get_nodeValue();
    [DispIdAttribute("-2147417036")]
public abstract virtual IHTMLDOMNode get_firstChild();
    [DispIdAttribute("-2147417035")]
public abstract virtual IHTMLDOMNode get_lastChild();
    [DispIdAttribute("-2147417034")]
public abstract virtual IHTMLDOMNode get_previousSibling();
    [DispIdAttribute("-2147417033")]
public abstract virtual IHTMLDOMNode get_nextSibling();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F1FF-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElement {
    [DispIdAttribute("-2147417110")]
public string id { get; public set; }
    [DispIdAttribute("-2147417108")]
public string tagName { get; }
    [DispIdAttribute("-2147418104")]
public IHTMLElement parentElement { get; }
    [DispIdAttribute("-2147417094")]
public object document { get; }
    [DispIdAttribute("-2147418043")]
public string title { get; public set; }
    [DispIdAttribute("-2147417088")]
public int sourceIndex { get; }
    [DispIdAttribute("-2147417104")]
public int offsetLeft { get; }
    [DispIdAttribute("-2147417103")]
public int offsetTop { get; }
    [DispIdAttribute("-2147417102")]
public int offsetWidth { get; }
    [DispIdAttribute("-2147417101")]
public int offsetHeight { get; }
    [DispIdAttribute("-2147417100")]
public IHTMLElement offsetParent { get; }
    [DispIdAttribute("-2147417086")]
public string innerHTML { get; public set; }
    [DispIdAttribute("-2147417085")]
public string innerText { get; public set; }
    [DispIdAttribute("-2147417084")]
public string outerHTML { get; public set; }
    [DispIdAttribute("-2147417083")]
public string outerText { get; public set; }
    [DispIdAttribute("-2147417075")]
public object children { get; }
    [DispIdAttribute("-2147417074")]
public object all { get; }
    [DispIdAttribute("-2147417611")]
public abstract virtual void setAttribute(string strAttributeName, object AttributeValue, int lFlags);
    [DispIdAttribute("-2147417610")]
public abstract virtual object getAttribute(string strAttributeName, int lFlags);
    public void _VtblGap1_3();
    [DispIdAttribute("-2147417110")]
public abstract virtual void set_id(string p);
    [DispIdAttribute("-2147417110")]
public abstract virtual string get_id();
    [DispIdAttribute("-2147417108")]
public abstract virtual string get_tagName();
    [DispIdAttribute("-2147418104")]
public abstract virtual IHTMLElement get_parentElement();
    public void _VtblGap2_23();
    [DispIdAttribute("-2147417094")]
public abstract virtual object get_document();
    [DispIdAttribute("-2147418043")]
public abstract virtual void set_title(string p);
    [DispIdAttribute("-2147418043")]
public abstract virtual string get_title();
    public void _VtblGap3_4();
    [DispIdAttribute("-2147417093")]
public abstract virtual void scrollIntoView(object varargStart);
    public void _VtblGap4_1();
    [DispIdAttribute("-2147417088")]
public abstract virtual int get_sourceIndex();
    public void _VtblGap5_3();
    [DispIdAttribute("-2147417104")]
public abstract virtual int get_offsetLeft();
    [DispIdAttribute("-2147417103")]
public abstract virtual int get_offsetTop();
    [DispIdAttribute("-2147417102")]
public abstract virtual int get_offsetWidth();
    [DispIdAttribute("-2147417101")]
public abstract virtual int get_offsetHeight();
    [DispIdAttribute("-2147417100")]
public abstract virtual IHTMLElement get_offsetParent();
    [DispIdAttribute("-2147417086")]
public abstract virtual void set_innerHTML(string p);
    [DispIdAttribute("-2147417086")]
public abstract virtual string get_innerHTML();
    [DispIdAttribute("-2147417085")]
public abstract virtual void set_innerText(string p);
    [DispIdAttribute("-2147417085")]
public abstract virtual string get_innerText();
    [DispIdAttribute("-2147417084")]
public abstract virtual void set_outerHTML(string p);
    [DispIdAttribute("-2147417084")]
public abstract virtual string get_outerHTML();
    [DispIdAttribute("-2147417083")]
public abstract virtual void set_outerText(string p);
    [DispIdAttribute("-2147417083")]
public abstract virtual string get_outerText();
    public void _VtblGap6_27();
    [DispIdAttribute("-2147417075")]
public abstract virtual object get_children();
    [DispIdAttribute("-2147417074")]
public abstract virtual object get_all();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F434-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElement2 {
    [DispIdAttribute("-2147417105")]
public IHTMLCurrentStyle currentStyle { get; }
    [DispIdAttribute("-2147418097")]
public short tabIndex { get; public set; }
    [DispIdAttribute("-2147416107")]
public string accessKey { get; public set; }
    [DispIdAttribute("-2147416093")]
public int clientHeight { get; }
    [DispIdAttribute("-2147416092")]
public int clientWidth { get; }
    [DispIdAttribute("-2147416091")]
public int clientTop { get; }
    [DispIdAttribute("-2147416090")]
public int clientLeft { get; }
    [DispIdAttribute("-2147412996")]
public object readyState { get; }
    [DispIdAttribute("-2147417055")]
public int scrollHeight { get; }
    [DispIdAttribute("-2147417054")]
public int scrollWidth { get; }
    [DispIdAttribute("-2147417053")]
public int scrollTop { get; public set; }
    [DispIdAttribute("-2147417052")]
public int scrollLeft { get; public set; }
    [DispIdAttribute("-2147417028")]
public int readyStateValue { get; }
    public void _VtblGap1_6();
    [DispIdAttribute("-2147417069")]
public abstract virtual void doScroll(object component);
    public void _VtblGap2_26();
    [DispIdAttribute("-2147417105")]
public abstract virtual IHTMLCurrentStyle get_currentStyle();
    public void _VtblGap3_3();
    [DispIdAttribute("-2147417067")]
public abstract virtual IHTMLRect getBoundingClientRect();
    public void _VtblGap4_3();
    [DispIdAttribute("-2147418097")]
public abstract virtual void set_tabIndex(short p);
    [DispIdAttribute("-2147418097")]
public abstract virtual short get_tabIndex();
    [DispIdAttribute("-2147416112")]
public abstract virtual void focus();
    [DispIdAttribute("-2147416107")]
public abstract virtual void set_accessKey(string p);
    [DispIdAttribute("-2147416107")]
public abstract virtual string get_accessKey();
    public void _VtblGap5_9();
    [DispIdAttribute("-2147416093")]
public abstract virtual int get_clientHeight();
    [DispIdAttribute("-2147416092")]
public abstract virtual int get_clientWidth();
    [DispIdAttribute("-2147416091")]
public abstract virtual int get_clientTop();
    [DispIdAttribute("-2147416090")]
public abstract virtual int get_clientLeft();
    [DispIdAttribute("-2147417605")]
public abstract virtual bool attachEvent(string event, object pdisp);
    [DispIdAttribute("-2147417604")]
public abstract virtual void detachEvent(string event, object pdisp);
    [DispIdAttribute("-2147412996")]
public abstract virtual object get_readyState();
    public void _VtblGap6_11();
    [DispIdAttribute("-2147417055")]
public abstract virtual int get_scrollHeight();
    [DispIdAttribute("-2147417054")]
public abstract virtual int get_scrollWidth();
    [DispIdAttribute("-2147417053")]
public abstract virtual void set_scrollTop(int p);
    [DispIdAttribute("-2147417053")]
public abstract virtual int get_scrollTop();
    [DispIdAttribute("-2147417052")]
public abstract virtual void set_scrollLeft(int p);
    [DispIdAttribute("-2147417052")]
public abstract virtual int get_scrollLeft();
    public void _VtblGap7_17();
    [DispIdAttribute("-2147417028")]
public abstract virtual int get_readyStateValue();
    [DispIdAttribute("-2147417027")]
public abstract virtual IHTMLElementCollection getElementsByTagName(string v);
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F673-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElement3 {
    [DispIdAttribute("-2147417015")]
public bool isMultiLine { get; }
    public void _VtblGap1_1();
    [DispIdAttribute("-2147417015")]
public abstract virtual bool get_isMultiLine();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F80F-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElement4 {
    public void _VtblGap1_3();
    [DispIdAttribute("-2147417003")]
public abstract virtual IHTMLDOMAttribute getAttributeNode(string bstrName);
}
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("item")]
[GuidAttribute("3050F21F-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElementCollection {
    [DispIdAttribute("1500")]
public int length { get; public set; }
    public void _VtblGap1_1();
    [DispIdAttribute("1500")]
public abstract virtual void set_length(int p);
    [DispIdAttribute("1500")]
public abstract virtual int get_length();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual object item(object name, object index);
    [DispIdAttribute("1502")]
public abstract virtual object tags(object tagName);
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F32D-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLEventObj {
    [DispIdAttribute("1008")]
public bool cancelBubble { get; public set; }
    [DispIdAttribute("1011")]
public int keyCode { get; public set; }
    [DispIdAttribute("1012")]
public int button { get; }
    [DispIdAttribute("1013")]
public string type { get; }
    [DispIdAttribute("1024")]
public int screenX { get; }
    [DispIdAttribute("1025")]
public int screenY { get; }
    public void _VtblGap1_6();
    [DispIdAttribute("1008")]
public abstract virtual void set_cancelBubble(bool p);
    [DispIdAttribute("1008")]
public abstract virtual bool get_cancelBubble();
    public void _VtblGap2_2();
    [DispIdAttribute("1011")]
public abstract virtual void set_keyCode(int p);
    [DispIdAttribute("1011")]
public abstract virtual int get_keyCode();
    [DispIdAttribute("1012")]
public abstract virtual int get_button();
    [DispIdAttribute("1013")]
public abstract virtual string get_type();
    public void _VtblGap3_8();
    [DispIdAttribute("1024")]
public abstract virtual int get_screenX();
    [DispIdAttribute("1025")]
public abstract virtual int get_screenY();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F48B-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLEventObj2 {
    [DispIdAttribute("1027")]
public string propertyName { get; public set; }
    public void _VtblGap1_3();
    [DispIdAttribute("1027")]
public abstract virtual void set_propertyName(string p);
    [DispIdAttribute("1027")]
public abstract virtual string get_propertyName();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F311-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLFrameBase {
    [DispIdAttribute("-2147415112")]
public string src { get; public set; }
    [DispIdAttribute("-2147415104")]
public string scrolling { get; public set; }
    [DispIdAttribute("-2147415112")]
public abstract virtual void set_src(string p);
    [DispIdAttribute("-2147415112")]
public abstract virtual string get_src();
    public void _VtblGap1_14();
    [DispIdAttribute("-2147415104")]
public abstract virtual void set_scrolling(string p);
    [DispIdAttribute("-2147415104")]
public abstract virtual string get_scrolling();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F6DB-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLFrameBase2 {
    [DispIdAttribute("-2147415103")]
public IHTMLWindow2 contentWindow { get; }
    [DispIdAttribute("-2147415103")]
public abstract virtual IHTMLWindow2 get_contentWindow();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F313-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLFrameElement {
}
[CompilerGeneratedAttribute]
[GuidAttribute("332C4426-26CB-11D0-B483-00C04FD90119")]
[DefaultMemberAttribute("item")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLFramesCollection2 {
    [DispIdAttribute("0")]
public abstract virtual object item(Object& pvarIndex);
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F319-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLFrameSetElement {
    [DispIdAttribute("1001")]
public string cols { get; public set; }
    public void _VtblGap1_2();
    [DispIdAttribute("1001")]
public abstract virtual void set_cols(string p);
    [DispIdAttribute("1001")]
public abstract virtual string get_cols();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F81C-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLHtmlElement {
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F240-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLImgElement {
    [DispIdAttribute("1002")]
public string alt { get; public set; }
    [DispIdAttribute("1003")]
public string src { get; public set; }
    public void _VtblGap1_18();
    [DispIdAttribute("1002")]
public abstract virtual void set_alt(string p);
    [DispIdAttribute("1002")]
public abstract virtual string get_alt();
    [DispIdAttribute("1003")]
public abstract virtual void set_src(string p);
    [DispIdAttribute("1003")]
public abstract virtual string get_src();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F5D2-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLInputElement {
    [DispIdAttribute("2000")]
public string type { get; public set; }
    [DispIdAttribute("-2147413011")]
public string value { get; public set; }
    [DispIdAttribute("-2147418112")]
public string name { get; public set; }
    [DispIdAttribute("-2147418036")]
public bool disabled { get; public set; }
    [DispIdAttribute("2003")]
public int maxLength { get; public set; }
    [DispIdAttribute("-2147413029")]
public string defaultValue { get; public set; }
    [DispIdAttribute("2005")]
public bool readOnly { get; public set; }
    [DispIdAttribute("2008")]
public bool defaultChecked { get; public set; }
    [DispIdAttribute("2009")]
public bool checked { get; public set; }
    [DispIdAttribute("2000")]
public abstract virtual void set_type(string p);
    [DispIdAttribute("2000")]
public abstract virtual string get_type();
    [DispIdAttribute("-2147413011")]
public abstract virtual void set_value(string p);
    [DispIdAttribute("-2147413011")]
public abstract virtual string get_value();
    [DispIdAttribute("-2147418112")]
public abstract virtual void set_name(string p);
    [DispIdAttribute("-2147418112")]
public abstract virtual string get_name();
    public void _VtblGap1_2();
    [DispIdAttribute("-2147418036")]
public abstract virtual void set_disabled(bool p);
    [DispIdAttribute("-2147418036")]
public abstract virtual bool get_disabled();
    public void _VtblGap2_3();
    [DispIdAttribute("2003")]
public abstract virtual void set_maxLength(int p);
    [DispIdAttribute("2003")]
public abstract virtual int get_maxLength();
    public void _VtblGap3_5();
    [DispIdAttribute("-2147413029")]
public abstract virtual void set_defaultValue(string p);
    [DispIdAttribute("-2147413029")]
public abstract virtual string get_defaultValue();
    [DispIdAttribute("2005")]
public abstract virtual void set_readOnly(bool p);
    [DispIdAttribute("2005")]
public abstract virtual bool get_readOnly();
    public void _VtblGap4_3();
    [DispIdAttribute("2008")]
public abstract virtual void set_defaultChecked(bool p);
    [DispIdAttribute("2008")]
public abstract virtual bool get_defaultChecked();
    [DispIdAttribute("2009")]
public abstract virtual void set_checked(bool p);
    [DispIdAttribute("2009")]
public abstract virtual bool get_checked();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F32A-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLLabelElement {
    [DispIdAttribute("1000")]
public string htmlFor { get; public set; }
    [DispIdAttribute("1000")]
public abstract virtual void set_htmlFor(string p);
    [DispIdAttribute("1000")]
public abstract virtual string get_htmlFor();
}
[CompilerGeneratedAttribute]
[GuidAttribute("30510706-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLMediaElement {
    [DispIdAttribute("1001")]
public string src { get; public set; }
    [DispIdAttribute("1002")]
public string currentSrc { get; }
    [DispIdAttribute("1009")]
public bool seeking { get; }
    [DispIdAttribute("1010")]
public float currentTime { get; public set; }
    [DispIdAttribute("1012")]
public float duration { get; }
    [DispIdAttribute("1013")]
public bool paused { get; }
    [DispIdAttribute("1015")]
public float playbackRate { get; public set; }
    [DispIdAttribute("1018")]
public bool ended { get; }
    [DispIdAttribute("1019")]
public bool autoplay { get; public set; }
    [DispIdAttribute("1020")]
public bool loop { get; public set; }
    [DispIdAttribute("1023")]
public bool controls { get; public set; }
    [DispIdAttribute("1024")]
public float volume { get; public set; }
    [DispIdAttribute("1025")]
public bool muted { get; public set; }
    public void _VtblGap1_1();
    [DispIdAttribute("1001")]
public abstract virtual void set_src(string p);
    [DispIdAttribute("1001")]
public abstract virtual string get_src();
    [DispIdAttribute("1002")]
public abstract virtual string get_currentSrc();
    public void _VtblGap2_6();
    [DispIdAttribute("1009")]
public abstract virtual bool get_seeking();
    [DispIdAttribute("1010")]
public abstract virtual void set_currentTime(float p);
    [DispIdAttribute("1010")]
public abstract virtual float get_currentTime();
    public void _VtblGap3_1();
    [DispIdAttribute("1012")]
public abstract virtual float get_duration();
    [DispIdAttribute("1013")]
public abstract virtual bool get_paused();
    public void _VtblGap4_2();
    [DispIdAttribute("1015")]
public abstract virtual void set_playbackRate(float p);
    [DispIdAttribute("1015")]
public abstract virtual float get_playbackRate();
    public void _VtblGap5_2();
    [DispIdAttribute("1018")]
public abstract virtual bool get_ended();
    [DispIdAttribute("1019")]
public abstract virtual void set_autoplay(bool p);
    [DispIdAttribute("1019")]
public abstract virtual bool get_autoplay();
    [DispIdAttribute("1020")]
public abstract virtual void set_loop(bool p);
    [DispIdAttribute("1020")]
public abstract virtual bool get_loop();
    public void _VtblGap6_2();
    [DispIdAttribute("1023")]
public abstract virtual void set_controls(bool p);
    [DispIdAttribute("1023")]
public abstract virtual bool get_controls();
    [DispIdAttribute("1024")]
public abstract virtual void set_volume(float p);
    [DispIdAttribute("1024")]
public abstract virtual float get_volume();
    [DispIdAttribute("1025")]
public abstract virtual void set_muted(bool p);
    [DispIdAttribute("1025")]
public abstract virtual bool get_muted();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F203-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLMetaElement {
    [DispIdAttribute("1001")]
public string httpEquiv { get; public set; }
    [DispIdAttribute("1002")]
public string content { get; public set; }
    [DispIdAttribute("1001")]
public abstract virtual void set_httpEquiv(string p);
    [DispIdAttribute("1001")]
public abstract virtual string get_httpEquiv();
    [DispIdAttribute("1002")]
public abstract virtual void set_content(string p);
    [DispIdAttribute("1002")]
public abstract virtual string get_content();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F211-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLOptionElement {
    [DispIdAttribute("1001")]
public bool selected { get; public set; }
    [DispIdAttribute("1002")]
public string value { get; public set; }
    [DispIdAttribute("1005")]
public int index { get; public set; }
    [DispIdAttribute("1004")]
public string text { get; public set; }
    [DispIdAttribute("1001")]
public abstract virtual void set_selected(bool p);
    [DispIdAttribute("1001")]
public abstract virtual bool get_selected();
    [DispIdAttribute("1002")]
public abstract virtual void set_value(string p);
    [DispIdAttribute("1002")]
public abstract virtual string get_value();
    public void _VtblGap1_2();
    [DispIdAttribute("1005")]
public abstract virtual void set_index(int p);
    [DispIdAttribute("1005")]
public abstract virtual int get_index();
    [DispIdAttribute("1004")]
public abstract virtual void set_text(string p);
    [DispIdAttribute("1004")]
public abstract virtual string get_text();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F4A3-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLRect {
    [DispIdAttribute("1001")]
public int left { get; public set; }
    [DispIdAttribute("1002")]
public int top { get; public set; }
    [DispIdAttribute("1003")]
public int right { get; public set; }
    [DispIdAttribute("1004")]
public int bottom { get; public set; }
    [DispIdAttribute("1001")]
public abstract virtual void set_left(int p);
    [DispIdAttribute("1001")]
public abstract virtual int get_left();
    [DispIdAttribute("1002")]
public abstract virtual void set_top(int p);
    [DispIdAttribute("1002")]
public abstract virtual int get_top();
    [DispIdAttribute("1003")]
public abstract virtual void set_right(int p);
    [DispIdAttribute("1003")]
public abstract virtual int get_right();
    [DispIdAttribute("1004")]
public abstract virtual void set_bottom(int p);
    [DispIdAttribute("1004")]
public abstract virtual int get_bottom();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F28B-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLScriptElement {
    [DispIdAttribute("1006")]
public string text { get; public set; }
    [DispIdAttribute("1007")]
public bool defer { get; public set; }
    [DispIdAttribute("1009")]
public string type { get; public set; }
    public void _VtblGap1_6();
    [DispIdAttribute("1006")]
public abstract virtual void set_text(string p);
    [DispIdAttribute("1006")]
public abstract virtual string get_text();
    [DispIdAttribute("1007")]
public abstract virtual void set_defer(bool p);
    [DispIdAttribute("1007")]
public abstract virtual bool get_defer();
    public void _VtblGap2_3();
    [DispIdAttribute("1009")]
public abstract virtual void set_type(string p);
    [DispIdAttribute("1009")]
public abstract virtual string get_type();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F244-98B5-11CF-BB82-00AA00BDCE0B")]
[DefaultMemberAttribute("item")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLSelectElement {
    [DispIdAttribute("1002")]
public int size { get; public set; }
    [DispIdAttribute("1003")]
public bool multiple { get; public set; }
    [DispIdAttribute("1010")]
public int selectedIndex { get; public set; }
    [DispIdAttribute("1500")]
public int length { get; public set; }
    [DispIdAttribute("1002")]
public abstract virtual void set_size(int p);
    [DispIdAttribute("1002")]
public abstract virtual int get_size();
    [DispIdAttribute("1003")]
public abstract virtual void set_multiple(bool p);
    [DispIdAttribute("1003")]
public abstract virtual bool get_multiple();
    public void _VtblGap1_5();
    [DispIdAttribute("1010")]
public abstract virtual void set_selectedIndex(int p);
    [DispIdAttribute("1010")]
public abstract virtual int get_selectedIndex();
    public void _VtblGap2_8();
    [DispIdAttribute("1500")]
public abstract virtual void set_length(int p);
    [DispIdAttribute("1500")]
public abstract virtual int get_length();
    public void _VtblGap3_1();
    [DispIdAttribute("0")]
public abstract virtual object item(object name, object index);
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F21E-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLTable {
    [DispIdAttribute("1016")]
public IHTMLElementCollection rows { get; }
    public void _VtblGap1_25();
    [DispIdAttribute("1016")]
public abstract virtual IHTMLElementCollection get_rows();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F23D-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLTableCell {
    [DispIdAttribute("2003")]
public int cellIndex { get; }
    public void _VtblGap1_24();
    [DispIdAttribute("2003")]
public abstract virtual int get_cellIndex();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F23C-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLTableRow {
    [DispIdAttribute("1000")]
public int rowIndex { get; }
    [DispIdAttribute("1002")]
public IHTMLElementCollection cells { get; }
    public void _VtblGap1_12();
    [DispIdAttribute("1000")]
public abstract virtual int get_rowIndex();
    public void _VtblGap2_1();
    [DispIdAttribute("1002")]
public abstract virtual IHTMLElementCollection get_cells();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F2AA-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLTextAreaElement {
    [DispIdAttribute("-2147413011")]
public string value { get; public set; }
    [DispIdAttribute("-2147418036")]
public bool disabled { get; public set; }
    [DispIdAttribute("-2147413029")]
public string defaultValue { get; public set; }
    [DispIdAttribute("7004")]
public bool readOnly { get; public set; }
    public void _VtblGap1_1();
    [DispIdAttribute("-2147413011")]
public abstract virtual void set_value(string p);
    [DispIdAttribute("-2147413011")]
public abstract virtual string get_value();
    public void _VtblGap2_4();
    [DispIdAttribute("-2147418036")]
public abstract virtual void set_disabled(bool p);
    [DispIdAttribute("-2147418036")]
public abstract virtual bool get_disabled();
    public void _VtblGap3_1();
    [DispIdAttribute("-2147413029")]
public abstract virtual void set_defaultValue(string p);
    [DispIdAttribute("-2147413029")]
public abstract virtual string get_defaultValue();
    public void _VtblGap4_5();
    [DispIdAttribute("7004")]
public abstract virtual void set_readOnly(bool p);
    [DispIdAttribute("7004")]
public abstract virtual bool get_readOnly();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F4D0-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLUniqueName {
    [DispIdAttribute("-2147417058")]
public int uniqueNumber { get; }
    [DispIdAttribute("-2147417058")]
public abstract virtual int get_uniqueNumber();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F209-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLUnknownElement {
}
[CompilerGeneratedAttribute]
[GuidAttribute("30510709-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLVideoElement {
    [DispIdAttribute("-2147418107")]
public int width { get; public set; }
    [DispIdAttribute("-2147418106")]
public int height { get; public set; }
    [DispIdAttribute("1052")]
public string poster { get; public set; }
    [DispIdAttribute("-2147418107")]
public abstract virtual void set_width(int p);
    [DispIdAttribute("-2147418107")]
public abstract virtual int get_width();
    [DispIdAttribute("-2147418106")]
public abstract virtual void set_height(int p);
    [DispIdAttribute("-2147418106")]
public abstract virtual int get_height();
    public void _VtblGap1_2();
    [DispIdAttribute("1052")]
public abstract virtual void set_poster(string p);
    [DispIdAttribute("1052")]
public abstract virtual string get_poster();
}
[CompilerGeneratedAttribute]
[GuidAttribute("332C4427-26CB-11D0-B483-00C04FD90119")]
[DefaultMemberAttribute("item")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLWindow2 {
    [DispIdAttribute("1151")]
public IHTMLDocument2 document { get; }
    [DispIdAttribute("0")]
public abstract virtual object item(Object& pvarIndex);
    public void _VtblGap1_44();
    [DispIdAttribute("1151")]
public abstract virtual IHTMLDocument2 get_document();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F4AE-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLWindow3 {
    public void _VtblGap1_4();
    [DispIdAttribute("1103")]
public abstract virtual int setTimeout(Object& expression, int msec, Object& language);
    [DispIdAttribute("1162")]
public abstract virtual int setInterval(Object& expression, int msec, Object& language);
}
