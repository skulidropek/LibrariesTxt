internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Common.PluginUtilities : object {
    private static Dictionary`2<string, string> controlTypesForCheckingNamesAndValue;
    private static Dictionary`2<string, string> ControlTypesForCheckingNamesAndValue { get; }
    public static bool CheckForValueAndNameEquals(string controlType);
    private static Dictionary`2<string, string> get_ControlTypesForCheckingNamesAndValue();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.ChildrenEnumerator : object {
    private UiaElement current;
    private AutomationElement currentChild;
    private UiaElement parent;
    private bool disposed;
    public object Current { get; }
    public ChildrenEnumerator(UiaElement element);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.ConditionTreeWalker : object {
    private IQueryCondition condition;
    private bool walkVisibleOnly;
    private VirtualChildrenEnumerator virtualChildEnumerator;
    private VirtualizationContext context;
    public ConditionTreeWalker(AutomationElement element, IQueryCondition condition, bool visibleOnly);
    public AutomationElement GetFirstChild(AutomationElement element, int timeOut);
    public AutomationElement GetNextSibling(AutomationElement element, int timeOut);
    private AutomationElement GetNextChildWithProperty(AutomationElement element, int timeOut);
    private bool ElementPropertyMatch(AutomationElement element);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.DataBoundControlIssue : object {
    private static string NewRowName;
    private static int MaxChildrenToCheck;
    public static bool HasNameIssue(AutomationElement element);
    private static bool HasNeighbourOfSameTypeAndName(AutomationElement element, string elementName, bool headerItemsControl);
    private static bool IsDataItemAndDifferentName(AutomationElement element, string name);
    private static bool IsOfSameTypeAndName(AutomationElement element, ControlType controlType, string controlName);
    private static AutomationElement GetNamedChild(AutomationElement element, bool headerItemsControl);
    private static bool IsHeaderItemsControl(AutomationElement element);
}
internal abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrapper : object {
    [CompilerGeneratedAttribute]
private UiaElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private UiaElement <LatestSourceElement>k__BackingField;
    [CompilerGeneratedAttribute]
private UITestEventType <UITestEventType>k__BackingField;
    [CompilerGeneratedAttribute]
private IUITestEventNotify <EventSink>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CurrentValueOrState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotifyEventDuringRemoval>k__BackingField;
    private bool disposed;
    internal UiaElement Element { get; internal set; }
    protected UiaElement LatestSourceElement { get; protected set; }
    protected UITestEventType UITestEventType { get; protected set; }
    protected IUITestEventNotify EventSink { get; protected set; }
    protected object CurrentValueOrState { get; protected set; }
    internal bool NotifyEventDuringRemoval { get; internal set; }
    protected EventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public static EventWrapper GetEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public static EventWrapper GetEventWrapper(UiaElement element, ControlType elementType, UITestEventType eventType, IUITestEventNotify eventSink);
    public sealed virtual void Dispose();
    public virtual void Notify();
    public virtual void UpdateSourceElement(UiaElement element);
    protected abstract virtual void DisposeInternal();
    public virtual bool ShouldFireFakeEvent();
    [CompilerGeneratedAttribute]
internal UiaElement get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(UiaElement value);
    [CompilerGeneratedAttribute]
protected UiaElement get_LatestSourceElement();
    [CompilerGeneratedAttribute]
protected void set_LatestSourceElement(UiaElement value);
    [CompilerGeneratedAttribute]
protected UITestEventType get_UITestEventType();
    [CompilerGeneratedAttribute]
protected void set_UITestEventType(UITestEventType value);
    [CompilerGeneratedAttribute]
protected IUITestEventNotify get_EventSink();
    [CompilerGeneratedAttribute]
protected void set_EventSink(IUITestEventNotify value);
    [CompilerGeneratedAttribute]
protected virtual object get_CurrentValueOrState();
    [CompilerGeneratedAttribute]
protected virtual void set_CurrentValueOrState(object value);
    [CompilerGeneratedAttribute]
internal bool get_NotifyEventDuringRemoval();
    [CompilerGeneratedAttribute]
internal void set_NotifyEventDuringRemoval(bool value);
}
internal abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.AutomationEventWrapper : EventWrapper {
    [CompilerGeneratedAttribute]
private AutomationEventHandler <EventHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AutomationEvent> <EventId>k__BackingField;
    protected AutomationEventHandler EventHandler { get; protected set; }
    protected List`1<AutomationEvent> EventId { get; protected set; }
    protected AutomationEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void DisposeInternal();
    [CompilerGeneratedAttribute]
protected AutomationEventHandler get_EventHandler();
    [CompilerGeneratedAttribute]
protected void set_EventHandler(AutomationEventHandler value);
    [CompilerGeneratedAttribute]
protected List`1<AutomationEvent> get_EventId();
    [CompilerGeneratedAttribute]
protected void set_EventId(List`1<AutomationEvent> value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.CalendarEventWrapper : AutomationEventWrapper {
    private object currentValue;
    protected object CurrentValueOrState { get; protected set; }
    public CalendarEventWrapper(UiaElement element, UiaElement sourceElement, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool ShouldFireFakeEvent();
    private void OnSelected(object sender, AutomationEventArgs e);
    protected virtual object get_CurrentValueOrState();
    protected virtual void set_CurrentValueOrState(object value);
    public virtual void Notify();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.CheckBoxEventWrapper : PropertyChangeEventWrapper {
    private UiaElement NotifyElement;
    private bool isCheckBoxPartofDGCell;
    public CheckBoxEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
    public virtual void Notify();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.ComboBoxEventWrapper : AutomationEventWrapper {
    private UiaElement NotifyElement;
    private TextPattern textPattern;
    private object sender;
    private bool isDataGridComboBox;
    protected object CurrentValueOrState { get; }
    private UiaElement SelectedListItem { get; }
    public ComboBoxEventWrapper(UiaElement element, UiaElement sourceElement, UITestEventType eventType, IUITestEventNotify eventSink);
    public ComboBoxEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void Notify();
    private void OnValueChange(object senderObject, AutomationEventArgs e);
    public virtual bool ShouldFireFakeEvent();
    protected virtual object get_CurrentValueOrState();
    private UiaElement get_SelectedListItem();
    private bool CanFireEvent();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.DatePickerEventWrapper : AutomationEventWrapper {
    private object currentValue;
    private UiaElement datepickerElement;
    private TextPattern textPattern;
    protected object CurrentValueOrState { get; protected set; }
    public DatePickerEventWrapper(UiaElement datePickerElement, UiaElement element, UiaElement sourceElement, UITestEventType eventType, IUITestEventNotify eventSink);
    private void OnTextChanged(object sender, AutomationEventArgs e);
    public virtual void Notify();
    public virtual bool ShouldFireFakeEvent();
    protected virtual object get_CurrentValueOrState();
    protected virtual void set_CurrentValueOrState(object value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.ExpanderEventWrapper : PropertyChangeEventWrapper {
    private UiaElement NotifyElement;
    public ExpanderEventWrapper(UiaElement element, UiaElement targetElement, UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
    public virtual void Notify();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.ListEventWrapper : AutomationEventWrapper {
    public ListEventWrapper(UiaElement element, UiaElement sourceElement, UITestEventType eventType, IUITestEventNotify eventSink);
    private void OnSelected(object sender, AutomationEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.MenuCheckBoxEventWrapper : AutomationEventWrapper {
    public MenuCheckBoxEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    private void OnInvoke(object sender, AutomationEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.MenuEventWrapper : PropertyChangeEventWrapper {
    public MenuEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
}
internal abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.PropertyChangeEventWrapper : EventWrapper {
    [CompilerGeneratedAttribute]
private AutomationPropertyChangedEventHandler <PropertyChangeHandler>k__BackingField;
    protected AutomationPropertyChangedEventHandler PropertyChangeHandler { get; protected set; }
    protected PropertyChangeEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink, AutomationProperty propertyId, TreeScope scope);
    protected virtual void DisposeInternal();
    protected abstract virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
protected AutomationPropertyChangedEventHandler get_PropertyChangeHandler();
    [CompilerGeneratedAttribute]
protected void set_PropertyChangeHandler(AutomationPropertyChangedEventHandler value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.RadioButtonEventWrapper : PropertyChangeEventWrapper {
    public RadioButtonEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.SliderEventWrapper : PropertyChangeEventWrapper {
    private UiaElement sourceElement;
    [SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
public SliderEventWrapper(UiaElement element, UiaElement sourceElement, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool ShouldFireFakeEvent();
    protected virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.TextBoxEventWrapper : AutomationEventWrapper {
    private UiaElement NotifyElement;
    private TextPattern textPattern;
    private bool isDataGridTextBox;
    public TextBoxEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void Notify();
    private void OnTextChanged(object sender, AutomationEventArgs e);
    private bool IsTextBoxOffScreenForDataGridCell();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.ToggleButtonEventWrapper : PropertyChangeEventWrapper {
    public ToggleButtonEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.EventWrappers.TreeViewEventWrapper : PropertyChangeEventWrapper {
    public TreeViewEventWrapper(UiaElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    protected virtual void OnPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.GridGroupTreeWalker : object {
    internal static bool IsGroupedGrid(UiaElement uiaElement);
    internal static bool IsGroupedGrid(AutomationElement elementForNavigation, TreeWalker walker, AutomationElement navigatedElement, ElementRequest request);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.GroupTreeWalkerHelper : object {
    internal static bool ValidGroupItem(ItemContainerPattern itemContainerPattern, AutomationElement listElement, AutomationElement groupElement);
    internal static bool TryGetFirstChildOfGroup(AutomationElement containerElement, TreeWalker walker, GroupType groupType, AutomationElement& firstChild);
    internal static bool TryGetLastChildOfGroup(AutomationElement containerElement, TreeWalker walker, GroupType groupType, AutomationElement& lastChild);
    internal static bool TryGetSiblingInGroup(AutomationElement elementForNavigation, TreeWalker walker, GroupType groupType, AutomationElement& nextSibling, ElementRequest request);
    private static bool IsGroupItem(AutomationElement element, TreeWalker walker, GroupType groupType, AutomationElement& group, ItemContainerPattern& itemContainerPattern);
}
[ComVisibleAttribute("True")]
[GuidAttribute("51806001-0BF1-4209-A386-CE0052C4726A")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.HtmlHostElement : UiaElement {
    public HtmlHostElement(AutomationElement automationElement);
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.ListGroupTreeWalker : object {
    internal static bool IsGroupedList(UiaElement uiaElement);
    internal static bool IsGroupedList(AutomationElement elementForNavigation, TreeWalker walker, AutomationElement navigatedElement, ElementRequest request);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.PatternHelper : object {
    public static BasePattern GetVirtualizedItemPattern(AutomationElement element);
    public static BasePattern GetItemContainerPattern(AutomationElement element);
    public static ScrollItemPattern GetScrollItemPattern(AutomationElement element, bool realize);
    public static ScrollPattern GetScrollPattern(AutomationElement element);
    public static ValuePattern GetValuePattern(AutomationElement element);
    public static SelectionPattern GetSelectionPattern(AutomationElement element);
    public static SelectionItemPattern GetSelectionItemPattern(AutomationElement element, bool realize);
    public static InvokePattern GetInvokePattern(AutomationElement element, bool realize);
    public static ExpandCollapsePattern GetExpandCollapsePattern(AutomationElement element, bool realize);
    public static TogglePattern GetTogglePattern(AutomationElement element);
    public static TextPattern GetTextPattern(AutomationElement element);
    public static TableItemPattern GetTableItemPattern(AutomationElement element);
    public static TablePattern GetTablePattern(AutomationElement element);
    public static RangeValuePattern GetRangeValuePattern(AutomationElement element);
    public static string GetText(TextPattern textPattern);
    public static AutomationElement[] GetSelection(SelectionPattern selectionPattern);
    internal static T GetPatternValue(BasePattern pattern, AutomationProperty property);
    private static T GetAutomationPattern(AutomationElement element, AutomationPattern pattern, AutomationProperty isPatternAvailableProperty);
    public static LegacyIAccessiblePattern GetLegacyIAccessiblePattern(AutomationElement element);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.PropertyNames : object {
    internal static string AutomationId;
    internal static string ClassName;
    internal static string ControlType;
    internal static string Enabled;
    internal static string Font;
    internal static string NativeControlType;
    internal static string Name;
    internal static string AccessKey;
    internal static string AcceleratorKey;
    internal static string HelpText;
    internal static string ItemStatus;
    internal static string LabeledBy;
    internal static string Instance;
    internal static string ColumnHeader;
    internal static string ColumnIndex;
    internal static string FrameworkId;
    internal static string IsGroupedTable;
    internal static string Value;
    internal static string DisplayText;
    internal static string Shortcut;
    internal static string Checked;
    internal static string Indeterminate;
    internal static string Selected;
    internal static string ReadOnly;
    internal static string SelectionText;
    internal static string CopyPastedText;
    internal static string SelectedItems;
    internal static string SelectedIndices;
    internal static string SelectedItem;
    internal static string SelectedIndex;
    internal static string Expanded;
    internal static string IsMultipleSelection;
    internal static string Position;
    internal static string IsHeaderInteractable;
    internal static string CanToggle;
    internal static string QueryPropertyOrderOfInvoke;
    internal static string SelectedDates;
    internal static string Date;
    internal static string RichEditBoxClassName;
    internal static String[] SingleQueryConditonProperties;
    internal static Dictionary`2<string, AutomationProperty> nameToAutomationProperty;
    private static Dictionary`2<string, string> propertyNames;
    private static Dictionary`2<string, ControlType> automationControlTypeMap;
    private static PropertyNames();
    internal static string GetPropertyNameInCorrectCase(string propertyName);
    internal static void ThrowIfInvalid(string propertyName);
    private static Dictionary`2<string, string> InitializeProperties();
    private static Dictionary`2<string, AutomationProperty> InitializeNameToAutomationProperty();
    internal static ControlType GetAutomationControlTypeFromName(string controlTypeName);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.QueryIdHelper : object {
    private static Nullable`1<int> maxLevelsForItemContainer;
    private static int DefaultLevelsForItemContainer;
    private static int MaxNamelessElementNavigation;
    private static int MaxParentNavigation;
    private static string FrameClassName;
    private static string ExpanderClassName;
    private static string GroupBoxClassName;
    private static string DocumentViewerClassName;
    private static string ContextMenuClassName;
    private static string HubSectionClassName;
    private static string HubClassName;
    private static int MaxLevelsForItemContainer { get; }
    public static IQueryElement GetQueryId(UiaElement element);
    private static bool IsSpecialIntermediate(UiaElement element);
    private static UiaElement GetSpecialIntermediate(UiaElement element);
    private static bool IsItemContainer(AutomationElement element);
    private static IQueryElement GetQueryId(UiaElement element, bool appendParent);
    private static IQueryCondition GetSingleQueryCondition(UiaElement ancestor, UiaElement element, bool ancestorIsParent, int nextToInstance);
    public static IQueryCondition GetPropertyConditionFromFirstValidPropertyValue(UiaElement element);
    private static int GetInstanceInAncestor(UiaElement ancestor, UiaElement element, IQueryCondition propertyCondition, bool ancestorIsParent);
    private static int GetInstanceInParent(UiaElement probableParent, UiaElement element, IQueryCondition propertyCondition, Boolean& matched);
    internal static bool ElementHasGoodQueryId(UiaElement element);
    internal static UiaElement TryGetNextToElementForPoorQueryIdElement(UiaElement element, UiaElement& nextToElement, Int32& elementInstance);
    private static void GetWpfWindowQueryCondition(UiaElement element, IQueryElement& queryId);
    private static void AddClassNameCondition(UiaElement element, AndConditionBuilder andConditionBuilder);
    private static bool ForceAppendParentQueryId(UiaElement element);
    private static int get_MaxLevelsForItemContainer();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.TreeWalkerHelper : object {
    internal static TreeWalker defaultWalker;
    private static string CurrentlyRecordingName;
    private static TreeWalkerHelper();
    internal static AutomationElement GetParent(AutomationElement element);
    internal static AutomationElement GetParent(AutomationElement element, TreeWalker walker);
    internal static AutomationElement GetFirstChild(AutomationElement element);
    internal static AutomationElement GetFirstChild(AutomationElement element, VirtualizationContext context);
    internal static AutomationElement GetFirstChild(AutomationElement element, TreeWalker walker);
    internal static AutomationElement GetFirstChild(AutomationElement element, TreeWalker walker, VirtualizationContext context);
    internal static AutomationElement GetLastChild(AutomationElement element);
    internal static AutomationElement GetLastChild(AutomationElement element, TreeWalker walker, VirtualizationContext context);
    internal static AutomationElement GetNextSibling(AutomationElement element);
    internal static AutomationElement GetNextSibling(AutomationElement element, VirtualizationContext& context);
    internal static AutomationElement GetNextSibling(AutomationElement element, TreeWalker walker, VirtualizationContext& context);
    internal static AutomationElement GetPreviousSibling(AutomationElement element);
    internal static AutomationElement GetPreviousSibling(AutomationElement element, VirtualizationContext& context);
    internal static AutomationElement GetPreviousSibling(AutomationElement element, TreeWalker walker, VirtualizationContext& context);
    internal static AutomationElement NavigateHelper(NavigateInvoker navigate, AutomationElement element);
    private static AutomationElement IgnoreCurrentlyRecordingByNavigation(NavigateInvoker navigate, AutomationElement element);
    private static bool IsFirstVisualChildTypeOfExpandableContainer(AutomationElement containerElement, AutomationElement child);
    private static AutomationElement GetVirtualFirstChild(AutomationElement element, TreeWalker walker, bool isVirtualizedElement);
    private static AutomationElement GetVirtualLastChild(AutomationElement element, TreeWalker walker, bool isVirtualizedElement);
    private static AutomationElement GetVirtualNextSibling(AutomationElement element, TreeWalker walker);
    private static AutomationElement GetVirtualPreviousSibling(AutomationElement element, TreeWalker walker);
    internal static AutomationElement FindPreviousItemSibling(AutomationElement element, ItemContainerPattern pattern);
    private static AutomationElement FindNearestSiblingWithSameControlTypeByExpandCollapse(AutomationElement container, AutomationElement startElement, NavigateInvoker navigate, ControlType itemControlType);
    private static AutomationElement FindNearestSiblingWithSameControlType(AutomationElement startElement, NavigateInvoker navigate, ControlType controlTypeToMatch);
    private static bool IsAutomationPeerTrailingSibling(AutomationElement startElement, AutomationElement siblingElementToMatch, ItemContainerPattern pattern);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaConstants : object {
    internal static string ClassNamePrefix;
    internal static int SliderPrecisionValue;
    internal static string HResult;
    internal static UInt32 E_INVALIDARG;
    internal static int S_FALSE;
    internal static int AccessDenied;
    internal static String[] PropertiesHandledByPlaybackEngine;
    internal static string UIXFrameworkId;
    internal static string StartHostName;
    internal static string PhoneChromeWindowAutomationId;
    internal static string SplashWindowClassName;
    internal static string DataGridClassName;
    internal static string DataGridCellClassName;
    internal static string DataGridRowClassName;
    internal static string DataGridRowHeaderClassName;
    internal static string DataGridColumnHeaderClassName;
    internal static string DatePickerClassName;
    internal static string PopupClassName;
    internal static string DatePickerShowCalendarAutomationId;
    internal static string WebViewAutomationElementClassName;
    internal static string HeaderButtonId;
    internal static string RichTextBoxClassName;
    internal static string ExpanderClassName;
    internal static string FlipViewClassName;
    internal static string FlipViewItemClassName;
    internal static string PivotClassName;
    internal static string PivotItemClassName;
    internal static string HubClassName;
    internal static string HubSectionClassName;
    internal static string CellClassName;
    internal static string RowClassName;
    private static UiaConstants();
}
[ComVisibleAttribute("True")]
[GuidAttribute("72FF0C88-2BAE-4868-B15C-F7D42975D2AB")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaElement : UITechnologyElement {
    [CompilerGeneratedAttribute]
private IUITechnologyElement <SwitchingElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVirtualElement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameworkId>k__BackingField;
    [CompilerGeneratedAttribute]
private AutomationElement <InnerElement>k__BackingField;
    [CompilerGeneratedAttribute]
private AutomationElement <CeilingElement>k__BackingField;
    private UITechnologyElement topLevelElement;
    private bool isCacheMode;
    private Nullable`1<IntPtr> nativeWindowHandle;
    private string controlTypeName;
    private Int32[] runtimeId;
    private string className;
    private IQueryElement queryID;
    private UiaElement parent;
    private UiaElement ancestorHavingWindowHandle;
    private string runtimeIdString;
    private UiaElement supportedTopLevelWindow;
    private Nullable`1<bool> isPassword;
    private string name;
    private string friendlyName;
    private string automationId;
    private ScrollPattern scrollPattern;
    private ScrollItemPattern scrollItemPattern;
    private bool distinctCheckDone;
    private static string UnInitializedValue;
    private static string QidFrameWorkName;
    private static string SingleQuote;
    private static string LineUpName;
    private static string LineDownName;
    private static string PageUpName;
    private static string PageDownName;
    private static string LineLeftName;
    private static string LineRightName;
    private static string PageLeftName;
    private static string PageRightName;
    private static string Thumb;
    private static string ScrollBarName;
    private Nullable`1<bool> isCeilingElement;
    public IUITechnologyElement SwitchingElement { get; public set; }
    public int ChildIndex { get; }
    public bool IsLeafNode { get; }
    public string TechnologyName { get; }
    public UITechnologyManager TechnologyManager { get; }
    public object NativeElement { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public bool IsPassword { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public string Name { get; }
    public IntPtr WindowHandle { get; }
    public IQueryElement QueryId { get; }
    public string Value { get; public set; }
    public bool IsTreeSwitchingRequired { get; }
    public AutomationElement AutomationElement { get; }
    private bool ShouldBringControlToView { get; }
    internal bool IsVirtualElement { get; private set; }
    internal string FrameworkId { get; private set; }
    internal IQueryElement QueryIdInternal { get; internal set; }
    internal string AutomationId { get; }
    internal bool IsBoundaryForHostedControl { get; }
    internal UiaElement Parent { get; internal set; }
    internal UiaElement AncestorHavingWindowHandle { get; }
    internal IntPtr NativeWindowHandle { get; internal set; }
    internal AutomationElement InnerElement { get; internal set; }
    internal bool IsCeilingElement { get; }
    internal AutomationElement CeilingElement { get; internal set; }
    protected bool LazyInitializeClassName { get; }
    internal UiaElement SupportedTopLevelWindow { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string FriendlyName { get; }
    internal UiaElement(AutomationElement automationElement);
    internal UiaElement(AutomationElement automationElement, string controlType);
    [CompilerGeneratedAttribute]
public virtual IUITechnologyElement get_SwitchingElement();
    [CompilerGeneratedAttribute]
public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual int get_ChildIndex();
    public virtual bool get_IsLeafNode();
    public virtual string get_TechnologyName();
    public virtual UITechnologyManager get_TechnologyManager();
    public virtual object get_NativeElement();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual bool get_IsPassword();
    public virtual string get_Name();
    public virtual IntPtr get_WindowHandle();
    public virtual IQueryElement get_QueryId();
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual AutomationElement get_AutomationElement();
    public virtual void CacheProperties();
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outPointX, Int32& outPointY);
    public virtual object GetPropertyValue(string propertyName);
    public sealed virtual void SetPropertyValue(string propertyName, object value);
    public virtual void SetPropertyValueInternal(string propertyName, object value);
    public virtual void SetFocus();
    public virtual void WaitForReady();
    public virtual object GetOption(UITechnologyElementOption technologyElementOption);
    public virtual bool InitializeProgrammaticScroll();
    public virtual void ScrollProgrammatically(ScrollDirection srollDirection, ScrollAmount scrollAmount);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    internal Rectangle GetBoundingRectangle();
    internal UiaElement MorphIntoScrollBar();
    internal bool HasValidAutomationId();
    internal void ThrowExceptionIfDisabled();
    internal void ThrowExceptionIfReadOnly();
    public virtual bool Equals(IUITechnologyElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal void BringControlToView();
    private bool get_ShouldBringControlToView();
    [CompilerGeneratedAttribute]
internal bool get_IsVirtualElement();
    [CompilerGeneratedAttribute]
private void set_IsVirtualElement(bool value);
    [CompilerGeneratedAttribute]
internal string get_FrameworkId();
    [CompilerGeneratedAttribute]
private void set_FrameworkId(string value);
    internal IQueryElement get_QueryIdInternal();
    internal void set_QueryIdInternal(IQueryElement value);
    internal string get_AutomationId();
    internal bool get_IsBoundaryForHostedControl();
    internal virtual UiaElement get_Parent();
    internal virtual void set_Parent(UiaElement value);
    internal UiaElement get_AncestorHavingWindowHandle();
    internal IntPtr get_NativeWindowHandle();
    internal void set_NativeWindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
internal virtual AutomationElement get_InnerElement();
    [CompilerGeneratedAttribute]
internal virtual void set_InnerElement(AutomationElement value);
    internal bool get_IsCeilingElement();
    [CompilerGeneratedAttribute]
internal AutomationElement get_CeilingElement();
    [CompilerGeneratedAttribute]
internal void set_CeilingElement(AutomationElement value);
    protected virtual string SanitizeUIAClassName(string uiaClassName);
    protected virtual bool get_LazyInitializeClassName();
    private bool EqualsInternal(IUITechnologyElement element);
    private string GetQueryIdOfChild(string childName);
    internal void InitializeTechnologyElementOptions();
    private void AddSearchConfigurations();
    private bool ShouldRefresh(string propertyValue);
    private bool ShouldRefresh(Nullable`1<T> propertyValue);
    private string InitializeClassName();
    protected virtual T GetAutomationPropertyValue(AutomationProperty automationProperty);
    protected virtual T GetPatternValue(BasePattern pattern, AutomationProperty automationProperty);
    protected bool IsReadOnly();
    private bool PreferLabeledByForFriendlyName();
    private AccessibleStates GetExpanderState();
    private AccessibleStates GetSelectionState();
    private AccessibleStates GetExpandCollapseState();
    private AccessibleStates GetToggleState(AccessibleStates state);
    private string GetScrollComponentQid(string name);
    internal UiaElement get_SupportedTopLevelWindow();
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual string get_FriendlyName();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaElementFactory : object {
    internal static UiaElement GetUiaElement(AutomationElement automationElement, bool throwOnError);
    internal static UiaElement GetUiaElement(AutomationElement automationElement, bool throwOnError, AutomationElement ceilingElement);
    private static XamlElement CreateXamlElement(AutomationElement element);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaExtensionPackage : UITestExtensionPackageBase {
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaPluginResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DataBoundNameIssueError { get; }
    internal static string DesktopNotSupported { get; }
    internal static string IntermediateVirtualizedControlSearchFailure { get; }
    internal static string InvalidNullValue { get; }
    internal static string InvalidParameterValue { get; }
    internal static string InvalidParameterValueOfDataType { get; }
    internal static string InvalidUiaElementAtPoint { get; }
    internal static string InvalidUiaQueryElement { get; }
    internal static string NotSupportedForPhone { get; }
    internal static string PackageDescription { get; }
    internal static string ResumeImmersiveWindowFailed { get; }
    internal static string WaitForReadyTimedOut { get; }
    internal static string WpfString { get; }
    internal static string WWANotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DataBoundNameIssueError();
    internal static string get_DesktopNotSupported();
    internal static string get_IntermediateVirtualizedControlSearchFailure();
    internal static string get_InvalidNullValue();
    internal static string get_InvalidParameterValue();
    internal static string get_InvalidParameterValueOfDataType();
    internal static string get_InvalidUiaElementAtPoint();
    internal static string get_InvalidUiaQueryElement();
    internal static string get_NotSupportedForPhone();
    internal static string get_PackageDescription();
    internal static string get_ResumeImmersiveWindowFailed();
    internal static string get_WaitForReadyTimedOut();
    internal static string get_WpfString();
    internal static string get_WWANotSupported();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaSearchInfo : object {
    private string message;
    private int hResult;
    private static List`1<string> supportedProperties;
    public string Message { get; }
    public string Source { get; }
    public ILastInvocationInfo InnerInfo { get; }
    internal UiaSearchInfo(string infoMessage, UInt32 hresultCode);
    private static UiaSearchInfo();
    public sealed virtual string get_Message();
    public sealed virtual string get_Source();
    public sealed virtual ILastInvocationInfo get_InnerInfo();
    public sealed virtual String[] GetInfoProperties();
    public sealed virtual object GetInfoPropertyValue(string propertyName);
    private static List`1<string> InitSupportedProperties();
}
[ComVisibleAttribute("True")]
[GuidAttribute("17D90066-B2C1-45AB-8A56-F80234D00513")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaTechnologyManager : UITechnologyManager {
    [CompilerGeneratedAttribute]
private bool <IsRecordingSession>k__BackingField;
    internal static int WindowsFormsHostSupportLevel;
    private bool disposed;
    private bool sessionStarted;
    private ILastInvocationInfo lastInfo;
    private IQueryCondition lastSearchCondition;
    private string lastSearchQueryId;
    private Dictionary`2<ElementEventSink, EventWrapper> elementEventSinkMap;
    private UiaElement lastUnstitchedListElement;
    private UiaElement lastStitchedListElement;
    private bool lastFocusWasOnComboBox;
    private AutomationElement lastFocussedComboBox;
    private object syncLock;
    private UiaElement lastAccessedComboBox;
    private UiaElement lastAccessedDatePicker;
    private EventWrapper lastEventForNotify;
    private IntPtr menuEventProcessHandle;
    private UiaElement lastAccessedMenu;
    private static UiaTechnologyManager instance;
    private Stack`1<UiaElement> propertyChangeMenuItemStack;
    private Dictionary`2<AutomationElement, AutomationElement> menuItemStitchMap;
    private Dictionary`2<IQueryCondition, IUITechnologyElement> rowElementCache;
    private UiaWorker uiaWorker;
    private ElementEventSink menuEventSink;
    private static IList`1<ControlType> exactMatchControlTypes;
    private static Regex searchConfigurationRegex;
    public string TechnologyName { get; }
    internal UiaElement LastAccessedDatePicker { get; internal set; }
    internal UiaElement LastAccessedComboBox { get; internal set; }
    internal bool LastFocusWasOnComboBox { get; internal set; }
    internal AutomationElement LastFocussedComboBox { get; internal set; }
    internal UiaElement LastAccessedMenu { get; internal set; }
    internal static UiaTechnologyManager Instance { get; private set; }
    internal bool IsRecordingSession { get; internal set; }
    internal Stack`1<UiaElement> PropertyChangeMenuItemStack { get; }
    internal Dictionary`2<AutomationElement, AutomationElement> MenuItemStitchMap { get; }
    private static UiaTechnologyManager();
    public virtual string get_TechnologyName();
    public virtual void StartSession(bool recordingSession);
    public virtual void StopSession();
    public virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    public virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public virtual IUITechnologyElement GetElementFromAutomationElement(AutomationElement automationElement, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    public virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    public virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    public virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public virtual void CancelStep();
    public virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    public virtual ILastInvocationInfo GetLastInvocationInfo();
    public virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    public virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    public virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    public virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    public virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void ProcessMouseEnter(IntPtr handle);
    public virtual int GetControlSupportLevel(IntPtr windowHandle);
    internal virtual UITechnologyElement GetRootElement();
    private int GetSupportIfElementHost(IntPtr windowHandle, UiaElement& element);
    public virtual int GetControlSupportLevel(AutomationElement element);
    private bool IsIEControl(AutomationElement element);
    public sealed virtual void Dispose();
    private bool IsWindowMatched(IntPtr wnd, PropertyCondition nameCondition, PropertyCondition classNameCondition);
    private bool IsWindowMatchedToApplicationFrameWindowChild(IntPtr wnd, PropertyCondition nameCondition, PropertyCondition classNameCondition, IntPtr& matchedChildWindow);
    private void InitializeTechnologyManagerProperties();
    private UiaElement MorphToScrollBarIfNeeded(UiaElement element, int pointX, int pointY);
    private void RemoveUiaEventHandlers(EventWrapper[] uiaEvents);
    private void FireFakeEvent();
    internal bool DoMenuItemStitch(UiaElement element, UiaElement& ancestor);
    private bool ShouldStitchMenuItem(UiaElement element, UiaElement parent);
    internal UiaElement get_LastAccessedDatePicker();
    internal void set_LastAccessedDatePicker(UiaElement value);
    internal UiaElement get_LastAccessedComboBox();
    internal void set_LastAccessedComboBox(UiaElement value);
    internal bool get_LastFocusWasOnComboBox();
    internal void set_LastFocusWasOnComboBox(bool value);
    internal AutomationElement get_LastFocussedComboBox();
    internal void set_LastFocussedComboBox(AutomationElement value);
    internal UiaElement get_LastAccessedMenu();
    internal void set_LastAccessedMenu(UiaElement value);
    internal static UiaTechnologyManager get_Instance();
    private static void set_Instance(UiaTechnologyManager value);
    [CompilerGeneratedAttribute]
internal bool get_IsRecordingSession();
    [CompilerGeneratedAttribute]
internal void set_IsRecordingSession(bool value);
    internal Stack`1<UiaElement> get_PropertyChangeMenuItemStack();
    internal Dictionary`2<AutomationElement, AutomationElement> get_MenuItemStitchMap();
    private string SetSearchCondition(string queryElement);
    private void UpdateMenuEventCache(UiaElement element, IUITestEventNotify eventSink);
    private void RemoveMenuEventHandler();
    private UiaElement GetStitchedElementFromPoint(UiaElement elementFromPoint, bool tryWithFocusElement);
    private UiaElement GetComboBoxElement(UiaElement comboBoxElement, UiaElement unstitchedListItem);
    private static void SetContainer(IUITechnologyElement target, IUITechnologyElement technologyElement);
    private static bool IsHandledByPlaybackEngineOrInvalid(IQueryCondition queryCondition);
    private static IList`1<ControlType> InitializeExactMatchControlTypes();
    private bool AnalyzeElementFromPoint(UiaElement element);
    private void ClearSessionRelatedCache();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaUtility : object {
    internal static string WpfFrameworkId;
    internal static string JupiterFrameworkId;
    internal static string DirectUIFrameworkId;
    internal static string InternetExplorerFrameworkId;
    internal static string IEProcessName;
    internal static string WWAProcessName;
    private static IntPtr s_desktopWindowHandle;
    private static Regex WpfClassNameRegex;
    internal static string WpfClassNameContainsString;
    private static string ScrollPaneClassName;
    private static string DatePickerEditBoxAutomationId;
    private static int timeOut;
    private static double ScrollBarWidth;
    private static int realizeTimeOut;
    private static int realizeSleepTime;
    private static int scrollAttempts;
    private static int scrollSleepTime;
    private static UiaElement paneElement;
    internal static string VerticalScrollBarName;
    internal static string HorizontalScrollBarName;
    private static string NativeHwndHost;
    private static string CharmsBar;
    private static string FilePickerClassName;
    private static string ImmersiveSwitchListClassName;
    internal static int WindowsFormsHostSupportLevel;
    private static Stopwatch timeOutWatch;
    private static UiaUtility();
    public static void MapAndThrowException(Exception e, IUITechnologyElement element, bool useRethrowException);
    public static AndCondition GetUIAPropertyConditionFromIQueryCondition(IQueryCondition queryCondition);
    public static UiaElement GetTopLevelElementForPhoneUsingCondition(AndCondition condition);
    public static UiaElement GetTopLevelElementForPhone(AutomationElement element);
    public static string GetControlTypeName(AutomationElement element, ControlType uiaControlType, string uiaClassName);
    public static UiaElement GetPaneFromExpandedComboBox(IUITechnologyElement topLevelElement);
    public static bool IsScrollableContainer(UiaElement element, Rectangle& clientArea);
    public static bool IsPointInsideElementRectangle(Rectangle rectangle, int pointX, int pointY);
    public static bool IsEditableComboBox(UiaElement element, AutomationElement& editElement);
    public static void SelectContainerItem(AutomationElement automationElementContainer, string controlTypeName, string itemText);
    public static void SelectContainerItem(AutomationElement automationElementContainer, string controlTypeName, int itemIndex);
    public static void SelectListItemsPrivate(AutomationElement automationElementContainer, List`1<int> sortedList);
    public static void SelectListBoxItems(AutomationElement containerElement, Int32[] indices);
    public static void SelectListBoxItems(AutomationElement containerElement, String[] listItemsToSelect);
    private static bool IsUnsupportedClassNameForNonLegacy(string className);
    private static bool SelectListBoxItemPrivate(AutomationElement itemToSelectInListBox, bool canSelectMultiple);
    private static void UnSelectListBoxItemPrivate(AutomationElement itemToSelectInListBox);
    private static void UnSelectAllItemsPrivate(AutomationElement containerElement);
    private static bool SelectItemPrivate(AutomationElement automationElementItem);
    private static AutomationElement FindItemUnderContainer(AutomationElement automationElementContainer, string itemText);
    internal static IntPtr GetWindowHandleFromAncestor(AutomationElement automationElement);
    public static AutomationElement GetParentOfIgnoredElement(AutomationElement element);
    public static string ArrayToString(Int32[] arr);
    public static ScrollAmount GetScrollAmount(ScrollAmount amount);
    public static bool IsWpfWindow(UiaElement element);
    public static bool IsWpfWindow(IntPtr windowHandle);
    internal static void CopyCeilingElement(IUITechnologyElement currentElement, IUITechnologyElement navigatedElement);
    internal static bool IsDesktop(UiaElement element);
    internal static bool IsElementOfItemType(AutomationElement element);
    internal static UiaElement GetPreviousSiblingFlattened(UiaElement element, UiaElement& parentPrevious, Boolean& parentSwitched);
    internal static T GetAutomationPropertyValue(AutomationElement element, AutomationProperty property);
    internal static bool CheckForMenuItem(UiaElement parent, UiaElement element);
    internal static bool IsAccessibleStateRequested(AccessibleStates requestedState, AccessibleStates matchState);
    internal static bool IsValidListItemForEvent(AutomationElement element);
    internal static bool IsParentOfWpfTechnology(UiaElement element);
    internal static bool IsWpfFrameWorkId(AutomationElement element);
    internal static bool IsJupiterFrameWorkId(AutomationElement element);
    internal static bool IsDirectUIFrameWorkId(AutomationElement element);
    internal static void RealizeElement(AutomationElement element);
    internal static List`1<string> GetSelectedItemsUsingSearch(BasePattern pattern, AutomationElement element, List`1& selectedAutomationElements);
    internal static bool IsList(AutomationElement elementToValidate);
    internal static bool MatchUiaControlType(ControlType controlType, ControlType controlTypeToMatch);
    internal static bool MatchUiaControlType(ControlType controlType, AutomationElement elementToMatch);
    internal static bool MatchAutomationElement(AutomationElement element, AutomationElement elementToMatch);
    internal static bool MatchAutomationElement(AutomationElement element, Int32[] runtimeId, string name, ControlType controlType, AutomationElement elementToMatch);
    internal static List`1<string> GetSelectedItemsUsingPattern(SelectionPattern selPattern, List`1& selectedAutomationElements);
    internal static List`1<string> GetSelectedItems(AutomationElement element);
    internal static List`1<string> GetSelectedItems(AutomationElement element, List`1& selectedAutomationElements);
    internal static List`1<int> GetSelectedListItemIndices(AutomationElement element);
    internal static string GetSelectionText(AutomationElement element);
    internal static void SetToggleState(AutomationElement element, ToggleState desiredState);
    internal static void SetSliderPostion(AutomationElement element, double value);
    internal static void SetSelectionItemState(AutomationElement element, bool selected);
    internal static ToggleState GetToggleState(AutomationElement element);
    internal static bool GetSelectionItemState(AutomationElement element);
    internal static bool IsVirtualElement(AutomationElement element);
    internal static bool IsUiaElement(IUITechnologyElement element);
    internal static bool isTitleBarButton(UiaElement parentElement);
    internal static UiaElement TransformUiaElement(IUITechnologyElement element);
    internal static string GetDateStringFromSelectionList(List`1<string> selectedItems);
    internal static AutomationElement GetDatePickerEditBox(AutomationElement datepicker);
    internal static bool TryConvertToType(object value, T& retValue);
    private static void ScrollVerticalHome(ScrollPattern pattern);
    private static void ScrollHorizontalHome(ScrollPattern pattern);
    internal static void BringControlToView(AutomationElement element, bool ensureFullyVisible);
    internal static bool IsElementOffScreen(AutomationElement element);
    private static void DoMinorHorizontalAdjustments(AutomationElement element, ScrollPattern pattern, AutomationElement containerElement);
    private static void DoMinorVerticalAdjustments(AutomationElement element, ScrollPattern pattern, AutomationElement containerElement);
    internal static ScrollPattern GetFirstScrollableParent(AutomationElement element, AutomationElement& parent);
    private static bool TryParseToType(object value, T& retValue);
    private static bool IsHtmlElementInWebView(AutomationElement automationElement, AutomationElement& webViewAutomationElement);
    internal static int GetNativeWindowHandle(AutomationElement element);
    internal static string GetAutomationId(AutomationElement element);
    private static UiaElement GetPaneUnderPopWindowOfComboBox(AutomationElement window);
    private static bool GetScrollBarsUsingSearch(UiaElement element, Double& verticalScrollBarWidth, Double& horizontalScrollBarHeight);
    private static bool GetScrollBarsUsingPattern(UiaElement element, Double& verticalScrollBarWidth, Double& horizontalScrollBarHeight);
    public static IUITechnologyElement CheckForLegacyHostElements(UiaTechnologyManager manager, IUITechnologyElement elementToConvert, Int32& supportLevel);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static IUITechnologyElement GetUiaElementForWindowsFormHost(UiaTechnologyManager manager, IUITechnologyElement element);
    private static bool IsWindowsFormsHost(UiaTechnologyManager manager, IntPtr windowHandle, UiaElement& element);
    public static int IsElementHost(UiaTechnologyManager manager, IntPtr windowHandle, UiaElement& element);
    public static bool IsConditionMatchesWpfElement(IUITechnologyElement element, PropertyCondition condition);
    public static bool IsWindowOfSupportedTechnology(UiaElement element);
    public static bool IsDesktopWindowAndNotLegacy(IntPtr windowHandle);
    public static bool IsDesktopWindowAndNotLegacy(AutomationElement element);
    internal static IUITechnologyElement GetHtmlElementFromPoint(AutomationElement automationElement, int pointX, int pointY);
    internal static void SwitchToWindow(IntPtr handle);
    internal static void WaitForReady(UiaElement element);
    public static bool IsWebView(UiaElement element);
    public static bool IsSilverlightWindow(UiaElement element);
    public static bool IsWindowOfSupportedTechnology(IntPtr windowHandle, bool throwException);
    internal static bool IsWindowOfSupportedTechnology(AutomationElement element, bool throwException);
    public static bool CheckIfCharmsBar(string className, IntPtr windowHandle);
    public static bool IsImmersiveApplicationWindow(UiaElement element);
    public static bool IsSilverlightWindow(IntPtr windowHandle);
    public static bool IsChildOfDesktop(UiaElement element);
    internal static bool IsPopUpWithTitleBar(IntPtr hwnd);
    public static bool IsBoundaryElement(UiaElement element);
    public static AutomationElement CheckForHtmlControls(AutomationElement element);
    private static bool EnumChildWindows(IntPtr hWnd, IntPtr& lParam);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaWorker : object {
    private Thread workerThread;
    private Dispatcher workerThreadDispatcher;
    private static DispatcherPriority AsyncDispatcherPriority;
    public void StartWorkerThread();
    public void StopWorkerThread();
    public void BeginInvoke(Delegate delegateMethod, object arg);
    [CompilerGeneratedAttribute]
private void <StartWorkerThread>b__1_0();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.Utilities.DataGridUtility : object {
    private static bool IsColumnHeaderUniqueUnderTable(UiaElement cellElement, AutomationElement headerElement);
    private static bool IsColumnHeaderUniqueAmongPreviousSiblings(AutomationElement headerElement);
    private static AutomationElement GetTableForCellOrRow(UiaElement element);
    internal static IQueryCondition GetSingleQueryIdForCell(UiaElement element);
    internal static IQueryCondition GetSingleQueryIdForRow(UiaElement element);
    internal static string GetColumnHeaderString(UiaElement cellElement, AutomationElement& headerItem);
    internal static int TryGetColumnNumber(UiaElement cellElement, Boolean& hasPattern);
    internal static string GetRowValue(UiaElement rowElement, Boolean& isPartialValue);
    internal static bool IsCheckBoxPartOfDataGridCell(AutomationElement element);
    internal static bool IsElementNotTemplateContentOfCell(AutomationElement element);
    internal static bool IsElementPartOfWpfDataGrid(UiaElement element);
    internal static bool IsDataGridTable(AutomationElement automationElement);
    internal static bool IsDataGridRow(AutomationElement element, string uiaClassName, ControlType uiaControlType);
    private static bool IsCustomDataGridRow(AutomationElement element, string className);
    internal static bool IsDataGridCell(AutomationElement element, string uiaClassName, ControlType uiaControlType);
    private static bool IsCustomDataGridCell(AutomationElement element);
    private static bool IsVirtualizedDataGridRow(AutomationElement dataGridRow);
    private static bool IsVirtualizedDataGridCell(AutomationElement dataGridCel);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.VirtualChildrenEnumerator : object {
    private IUITechnologyElement current;
    private AutomationElement currentChild;
    private UiaElement parent;
    private ItemContainerPattern itemContainerPattern;
    private IQueryCondition condition;
    private PropertyCondition highestPrioritySearchCondition;
    private List`1<PropertyCondition> searchConditions;
    private ControlType itemControlType;
    private List`1<AncestorExpandState> ancestorExpandStates;
    private static Dictionary`2<ControlType, List`1<AutomationProperty>> priorityMap;
    private static List`1<AutomationProperty> defaultPriorityList;
    private bool disposed;
    public object Current { get; }
    public VirtualChildrenEnumerator(UiaElement element, object parsedQueryIdCookie);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    internal static void InitializePriorityMap();
    private bool MatchEnumeratorSearchCondition(AutomationElement element, bool matchHighestPriorityCondition);
    private AutomationElement GetFirstChildInNavigationTree();
    private void Search();
    private void SetSearchPriority();
    public sealed virtual void Dispose();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.VirtualizationContext : Enum {
    public int value__;
    public static VirtualizationContext Unknown;
    public static VirtualizationContext Enable;
    public static VirtualizationContext Disable;
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.VirtualUiaElementUtility : object {
    public static bool ElementAreEqual(IUITechnologyElement firstElement, IUITechnologyElement secondElement);
    internal static bool NeedVirtualizedChildren(UiaElement uiaElement);
}
[ComVisibleAttribute("True")]
[GuidAttribute("0907D719-BB8F-442D-AA38-FED1072982EA")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.WPFControls.WpfElement : UiaElement {
    protected bool LazyInitializeClassName { get; }
    public string Value { get; public set; }
    public WpfElement(AutomationElement automationElement);
    protected virtual string SanitizeUIAClassName(string uiaClassName);
    protected virtual bool get_LazyInitializeClassName();
    public virtual object GetPropertyValue(string propertyName);
    public virtual void SetFocus();
    public virtual object GetOption(UITechnologyElementOption technologyElementOption);
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
[ComVisibleAttribute("True")]
[GuidAttribute("51806001-0BF1-4209-A386-CE0052C4726A")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.XAMLControls.XamlElement : UiaElement {
    public string Value { get; public set; }
    public XamlElement(AutomationElement automationElement);
    internal XamlElement(AutomationElement automationElement, string controlTypeName);
    public virtual object GetPropertyValue(string propertyName);
    public virtual void SetPropertyValueInternal(string propertyName, object value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
[ComVisibleAttribute("True")]
[GuidAttribute("51806001-0BF1-4209-A386-CE0052C4726A")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.XAMLControls.XamlToggleSwitch : XamlElement {
    public XamlToggleSwitch(AutomationElement automationElement);
    internal XamlToggleSwitch(AutomationElement automationElement, string controlTypeName);
    public virtual object GetPropertyValue(string propertyName);
    internal virtual string GetToggleSwitchDisplayName();
}
