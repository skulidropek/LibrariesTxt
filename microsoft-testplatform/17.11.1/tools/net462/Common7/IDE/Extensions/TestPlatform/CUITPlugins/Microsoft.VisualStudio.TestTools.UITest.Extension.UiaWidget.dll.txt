internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.AbsorbDuplicateOrientationActions : UITestActionFilter {
    public bool ApplyTimeout { get; }
    public UITestActionFilterCategory Category { get; }
    public bool Enabled { get; }
    public UITestActionFilterType FilterType { get; }
    public string Group { get; }
    public string Name { get; }
    public virtual bool get_ApplyTimeout();
    public virtual UITestActionFilterCategory get_Category();
    public virtual bool get_Enabled();
    public virtual UITestActionFilterType get_FilterType();
    public virtual string get_Group();
    public virtual string get_Name();
    public virtual bool ProcessRule(IUITestActionStack actions);
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ActionLogFormats : object {
    public static string DateTimePickerControlType;
    public static string FormatActionAndTargetControlType;
    public static string FormatForDefaultContext;
    public static string FormatForDialogContext;
    public static string FormatUsingTarget;
    public static string FormatWithinForContext;
    public static string FormatWithItem;
    public static string FormatWithNoValue;
    public static string FormatWithTargetAndNoValue;
    public static string FormatWithValue;
    public static string FormatWithValueAndNoControlType;
    public static string FormatWithNoValueAndNoControlType;
    public static string FormatWithValueAndSpecifiedControlType;
    public static string FormatForFlipperContext;
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ActionLogs : object {
    public static string ActionLogEditAction;
    public static string ActionLogFilter;
    public static string ActionLogForRangeValueRange;
    public static string ActionLogFriendlySuffix;
    public static string ActionLogInvokeAction;
    public static string ActionLogMixedState;
    public static string ActionLogCheckAction;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public static string ActionLogNormalState;
    public static string ActionLogOpenContextMenu;
    public static string ActionLogPressedState;
    public static string ActionLogRangeValueAction;
    public static string ActionLogToggleAction;
    public static string ActionLogToggleButtonAction;
    public static string ActionLogValueAction;
    public static string ActionLogClearAction;
    public static string ActionLogFlipAction;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ActivationEventType : Enum {
    public int value__;
    public static ActivationEventType AutomationEvent;
    public static ActivationEventType PropertyChangeEvent;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ActivationWidgetDefinition : WidgetDefinition {
    [CompilerGeneratedAttribute]
private string <ContextHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private StateMachineGenerator <ContextStateMachineGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private StateMachine <ContextStateMachine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigFilePath>k__BackingField;
    private List`1<WidgetActivation> activations;
    internal string ContextHandler { get; internal set; }
    internal StateMachineGenerator ContextStateMachineGenerator { get; internal set; }
    internal StateMachine ContextStateMachine { get; internal set; }
    internal List`1<WidgetActivation> Activations { get; internal set; }
    internal string ConfigFilePath { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ContextHandler();
    [CompilerGeneratedAttribute]
internal void set_ContextHandler(string value);
    [CompilerGeneratedAttribute]
internal StateMachineGenerator get_ContextStateMachineGenerator();
    [CompilerGeneratedAttribute]
internal void set_ContextStateMachineGenerator(StateMachineGenerator value);
    [CompilerGeneratedAttribute]
internal StateMachine get_ContextStateMachine();
    [CompilerGeneratedAttribute]
internal void set_ContextStateMachine(StateMachine value);
    internal List`1<WidgetActivation> get_Activations();
    internal void set_Activations(List`1<WidgetActivation> value);
    [CompilerGeneratedAttribute]
internal string get_ConfigFilePath();
    [CompilerGeneratedAttribute]
internal void set_ConfigFilePath(string value);
    internal void Initialize();
    internal virtual void AddEventHandlers(ElementMap elementMap, AutomationElement targetElement, Widget widget);
    internal virtual UiaWidgetElement GetTargetElement(ElementMap elementMap, ElementForThumbnailCapture& elementForThumbnailCapture);
    private UiaWidgetElement GetTargetElement(Widget widget, WidgetActivation activation);
    internal virtual bool PrepareForFakeEvent(Widget widget);
    internal Nullable`1<bool> IsAutomationElementAvailable(UiaWidgetElement uiaWidgetElement);
    internal bool FireEventOnNavigation(Widget widget, WidgetActivation activation, UiaWidgetElement uiaWidgetElement);
    internal bool FirePropertyChangeNotification(Widget widget, WidgetActivation activation, UiaWidgetElement uiaWidgetElement, string property, object cachedValue, object value);
    internal bool FireEventIfWatchListChanged(Widget widget, WidgetActivation activation, UiaWidgetElement uiaWidgetElement);
    internal virtual bool FireEventIfRequired(Widget widget);
    internal virtual void RemoveEventHandlers(ElementMap elementMap, Widget widget);
    private void AddEventHandlerInternal(ElementMap elementMap, AutomationElement targetElement, Widget widget);
    protected WidgetEventHandler GetDefaultEventHandler(AutomationEvent eventId);
    protected WidgetPropertyChangeEventHandler GetDefaultEventHandler(AutomationProperty property);
    internal static AutomationElement GetAutomationElement(object src);
    internal static bool GetContextHandler(List`1& entry, ActivationWidgetDefinition activationWidgetDefinition, ElementChain elementChain);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.AutomationEventWrapper : object {
    private AutomationEventHandler eventHandler;
    private AutomationPropertyChangedEventHandler propertyChangeHandler;
    private WidgetEventHandler widgetEventHandler;
    private WidgetPropertyChangeEventHandler widgetPropertyChangeEventHandler;
    private Widget widget;
    private AutomationElement element;
    private AutomationEvent eventId;
    private AutomationProperty[] properties;
    internal AutomationEvent EventId { get; internal set; }
    internal AutomationEventWrapper(AutomationElement element, AutomationEvent eventId, Widget widget);
    internal AutomationEventWrapper(AutomationElement element, Widget widget, AutomationProperty[] properties);
    internal void AddAutomationEventHandler(TreeScope scope, WidgetEventHandler eventHandler);
    internal void AddAutomationPropertyChangedEventHandler(TreeScope scope, WidgetPropertyChangeEventHandler eventHandler);
    internal void RemoveAll();
    internal AutomationEvent get_EventId();
    internal void set_EventId(AutomationEvent value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void OnAutomationEvent(object sender, AutomationEventArgs e);
    private void OnAutomationPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
private void <RemoveAll>b__4_0(object obj);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ContextFormatEntry : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertiesForFriendlyName>k__BackingField;
    public string FormatString { get; public set; }
    public string Target { get; public set; }
    public string PropertiesForFriendlyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_PropertiesForFriendlyName();
    [CompilerGeneratedAttribute]
public void set_PropertiesForFriendlyName(string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ContextWidgetDefinition : WidgetDefinition {
    [CompilerGeneratedAttribute]
private ContextFormatEntry[] <ContextFormat>k__BackingField;
    internal ContextFormatEntry[] ContextFormat { get; internal set; }
    [CompilerGeneratedAttribute]
internal ContextFormatEntry[] get_ContextFormat();
    [CompilerGeneratedAttribute]
internal void set_ContextFormat(ContextFormatEntry[] value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.DirectionInfo : object {
    [CompilerGeneratedAttribute]
private VicinityDirections <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<VicinitySubdirections> <Subdirection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Delta>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeltaRepeat>k__BackingField;
    public VicinityDirections Value { get; public set; }
    public List`1<VicinitySubdirections> Subdirection { get; private set; }
    public int Delta { get; public set; }
    public int DeltaRepeat { get; public set; }
    [CompilerGeneratedAttribute]
public VicinityDirections get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(VicinityDirections value);
    [CompilerGeneratedAttribute]
public List`1<VicinitySubdirections> get_Subdirection();
    [CompilerGeneratedAttribute]
private void set_Subdirection(List`1<VicinitySubdirections> value);
    [CompilerGeneratedAttribute]
public int get_Delta();
    [CompilerGeneratedAttribute]
public void set_Delta(int value);
    [CompilerGeneratedAttribute]
public int get_DeltaRepeat();
    [CompilerGeneratedAttribute]
public void set_DeltaRepeat(int value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ElementChain : List`1<IChainElement> {
    internal void TraceChainContents();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ElementMap : Dictionary`2<string, UiaWidgetElement> {
    internal bool Equals(ElementMap elementMap);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ElementMapEntry : object {
    [CompilerGeneratedAttribute]
private string <IdentificationRule>k__BackingField;
    private List`1<ContextFormatEntry> context;
    public string IdentificationRule { get; public set; }
    [XmlArrayAttribute("Contexts")]
[XmlArrayItemAttribute("Context")]
public List`1<ContextFormatEntry> Context { get; }
    [CompilerGeneratedAttribute]
public string get_IdentificationRule();
    [CompilerGeneratedAttribute]
public void set_IdentificationRule(string value);
    public List`1<ContextFormatEntry> get_Context();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.IChainElement {
    public abstract virtual string GetProperty(string propertyName);
    public abstract virtual bool Equals(object chainElement);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.PatternHelper : object {
    public static BasePattern GetVirtualizedItemPattern(AutomationElement element);
    public static BasePattern GetItemContainerPattern(AutomationElement element);
    public static ScrollItemPattern GetScrollItemPattern(AutomationElement element);
    public static ScrollPattern GetScrollPattern(AutomationElement element);
    public static ValuePattern GetValuePattern(AutomationElement element);
    public static SelectionPattern GetSelectionPattern(AutomationElement element);
    public static SelectionItemPattern GetSelectionItemPattern(AutomationElement element);
    public static InvokePattern GetInvokePattern(AutomationElement element);
    public static LegacyIAccessiblePattern GetLegacyIAccessiblePattern(AutomationElement element);
    public static ExpandCollapsePattern GetExpandCollapsePattern(AutomationElement element);
    public static TogglePattern GetTogglePattern(AutomationElement element);
    public static TextPattern GetTextPattern(AutomationElement element);
    public static TableItemPattern GetTableItemPattern(AutomationElement element);
    public static TablePattern GetTablePattern(AutomationElement element);
    public static RangeValuePattern GetRangeValuePattern(AutomationElement element);
    public static string GetText(TextPattern textPattern, AutomationElement element);
    public static AutomationElement[] GetSelection(SelectionPattern selectionPattern);
    internal static T GetPatternValue(BasePattern pattern, AutomationProperty property);
    private static T GetAutomationPattern(AutomationElement element, AutomationPattern pattern, AutomationProperty isPatternAvailableProperty);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.PrimitiveWidgetDefinitions : ActivationWidgetDefinition {
    internal static string TargetName;
    private Dictionary`2<AutomationProperty, AutomationEvent[]> supportedPatternAvailableForEventProperties;
    private Dictionary`2<AutomationProperty, AutomationProperty[]> supportedPatternAvailableForPropertyChangeProperties;
    private Dictionary`2<AutomationProperty, AutomationEvent[]> SupportedPatternAvailableForEventProperties { get; }
    private Dictionary`2<AutomationProperty, AutomationProperty[]> SupportedPatternAvailableForPropertyChangeProperties { get; }
    internal virtual void AddEventHandlers(ElementMap elementMap, AutomationElement targetElement, Widget widget);
    internal virtual UiaWidgetElement GetTargetElement(ElementMap elementMap, ElementForThumbnailCapture& elementForThumbnailCapture);
    internal virtual bool PrepareForFakeEvent(Widget widget);
    internal bool FireEventOnNavigation(Widget widget, UiaWidgetElement uiaWidgetElement);
    internal virtual bool FireEventIfRequired(Widget widget);
    internal virtual void RemoveEventHandlers(ElementMap elementMap, Widget widget);
    internal bool Match(AutomationElement element);
    private static bool CheckPatternAvailability(AutomationElement element, AutomationProperty isPatternAvailableProperty);
    private void AddHandlerInternal(AutomationElement element, Widget widget);
    private Dictionary`2<AutomationProperty, AutomationEvent[]> InitEventMap();
    private Dictionary`2<AutomationProperty, AutomationProperty[]> InitPropertyMap();
    private Dictionary`2<AutomationProperty, AutomationEvent[]> get_SupportedPatternAvailableForEventProperties();
    private Dictionary`2<AutomationProperty, AutomationProperty[]> get_SupportedPatternAvailableForPropertyChangeProperties();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.PropertyNames : object {
    internal static string HelpText;
    internal static string LabeledBy;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RemoveLightDismiss : UITestActionFilter {
    private static string LightDismissOverlayClassName;
    public bool ApplyTimeout { get; }
    public UITestActionFilterCategory Category { get; }
    public bool Enabled { get; }
    public UITestActionFilterType FilterType { get; }
    public string Group { get; }
    public string Name { get; }
    public virtual bool get_ApplyTimeout();
    public virtual UITestActionFilterCategory get_Category();
    public virtual bool get_Enabled();
    public virtual UITestActionFilterType get_FilterType();
    public virtual string get_Group();
    public virtual string get_Name();
    public virtual bool ProcessRule(IUITestActionStack actions);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.ReparentHacks : object {
    internal static void TrackBrokenParentControl(ElementChain chain);
    internal static AutomationElement FixBrokenParentControl(AutomationElement element, AutomationElement parent);
    internal static AutomationElement FixBrokenParentControlOld(AutomationElement element, AutomationElement parent);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.EventHandlers : object {
    internal static object GetTrimmedValueUsingRangePattern(AutomationElement sourceElement);
    internal static object GetTrimmedRangeValue(AutomationElement sourceElement);
    internal static void OnAutomationPropertyChanged(object src, AutomationPropertyChangedEventArgs args, Widget widget);
    internal static void DefaultPropertyChanged(object src, AutomationPropertyChangedEventArgs args, Widget widget);
    internal static void OnToggleChange(object src, AutomationPropertyChangedEventArgs e, Widget widget);
    internal static void OnTextChange(object src, AutomationEventArgs e, Widget widget);
    internal static void OnInvocation(object src, AutomationEventArgs e, Widget widget);
    internal static void OnValueChange(object src, AutomationPropertyChangedEventArgs e, Widget widget);
    internal static void OnSelectionChange(object src, AutomationPropertyChangedEventArgs e, Widget widget);
    internal static void OnSelection(object src, AutomationEventArgs e, Widget widget);
    internal static void OnIsSelection(object src, AutomationPropertyChangedEventArgs e, Widget widget);
    internal static void OnRangeValueChange(object src, AutomationPropertyChangedEventArgs e, Widget widget);
    internal static void DefaultEventHandlers(object src, AutomationEventArgs e, Widget widget);
    internal static void OnAutomationEventFired(object src, AutomationEventArgs e, Widget widget);
    private static void FireSelectionChangeUsingActivation(Widget widget, AutomationElement sourceElement, AutomationEvent automationEvent);
    private static void FireElementSelectedOnItem(AutomationElement sourceElement, AutomationEvent automationEvent, Widget widget);
    private static void FireTextChangeUsingActivation(Widget widget, AutomationElement sourceElement, AutomationEvent automationEvent);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.CalendarHandler : object {
    internal void OnSelection(object src, AutomationEventArgs e, Widget widget);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.DatePickerWidgetHandler : object {
    internal void OnDatePickerValueChange(object src, AutomationPropertyChangedEventArgs e, Widget widget);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.DesktopEventHandler : object {
    private static string contextMenuClassName;
    internal void OnContextMenuInvoke(object src, AutomationEventArgs e, Widget widget);
    internal void OnMenuOpen(object src, AutomationEventArgs e, Widget widget);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.FlipperWidgetHandler : object {
    internal void OnFlip(object src, AutomationEventArgs e, Widget widget);
    internal void OnFlipXamlApp(object src, AutomationEventArgs e, Widget widget);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.ListItemInvokeHandler : object {
    internal void OnListItemInvoked(object src, AutomationEventArgs e, Widget widget);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.OrientationChangeHandler : object {
    private IUITestEventNotify eventSink;
    private Orientations lastOrientation;
    internal OrientationChangeHandler(IUITestEventNotify eventSink);
    internal void AddOrientationEventHandler();
    internal void RemoveOrientationEventHandler();
    internal void OnDisplaySettingsChanged(object sender, EventArgs e);
    private UITestActionLogEntry GetActionLogEntry();
    private string GetOrientationString();
    private Orientations GetCurrentOrientation();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.RatingWidgetHandler : object {
    internal void OnRate(object src, AutomationEventArgs e, Widget widget);
    private static bool IsTentativeRatingControl(UiaWidgetElement element);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.GenericWidgetHandlers.SliderWidgetHandler : object {
    private Dictionary`2<string, object> cachedProperties;
    internal static string VALUEMIN;
    internal static string VALUEMAX;
    internal static string VALUENOW;
    internal Dictionary`2<string, object> CachedProperties { get; }
    internal void OnSliderAriaPropertiesChange(object src, AutomationPropertyChangedEventArgs e, Widget widget);
    internal Dictionary`2<string, object> get_CachedProperties();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.XmlCharType : ValueType {
    internal static int SurHighStart;
    internal static int SurHighEnd;
    internal static int SurLowStart;
    internal static int SurLowEnd;
    internal static int SurMask;
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    private static string s_PublicIdBitmap;
    private static UInt32 CharPropertiesSize;
    internal static string s_Whitespace;
    private static string s_NCStartName;
    private static string s_NCName;
    private static string s_CharData;
    private static string s_PublicID;
    private static string s_Text;
    private static string s_AttrValue;
    private static string s_LetterXml4e;
    private static string s_NCNameXml4e;
    private static object s_Lock;
    private static Byte[] s_CharProperties;
    internal Byte[] charProperties;
    private static object StaticLock { get; }
    public static XmlCharType Instance { get; }
    private XmlCharType(Byte[] charProperties);
    private static object get_StaticLock();
    private static void InitInstance();
    private static void SetProperties(string ranges, byte value);
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsExtender(char ch);
    public bool IsNCNameSingleChar(char ch);
    public bool IsStartNCNameSingleChar(char ch);
    public bool IsNameSingleChar(char ch);
    public bool IsStartNameSingleChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsLetter(char ch);
    public bool IsNCNameCharXml4e(char ch);
    public bool IsStartNCNameCharXml4e(char ch);
    public bool IsNameCharXml4e(char ch);
    public bool IsStartNameCharXml4e(char ch);
    public static bool IsDigit(char ch);
    public static bool IsHexDigit(char ch);
    internal static bool IsHighSurrogate(int ch);
    internal static bool IsLowSurrogate(int ch);
    internal static bool IsSurrogate(int ch);
    internal static int CombineSurrogateChar(int lowChar, int highChar);
    internal static void SplitSurrogateChar(int combinedChar, Char& lowChar, Char& highChar);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal int IsOnlyCharData(string str);
    internal static bool IsOnlyDigits(string str, int startPos, int len);
    internal static bool IsOnlyDigits(Char[] chars, int startPos, int len);
    internal int IsPublicId(string str);
    private static bool InRange(int value, int start, int end);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Rulebook.XPathScanner : object {
    private string xpathExpr;
    private int xpathExprIndex;
    private LexKind kind;
    private char currentChar;
    private string name;
    private string prefix;
    private string stringValue;
    private double numberValue;
    private bool canBeFunction;
    private XmlCharType xmlCharType;
    internal static Char[] WhitespaceChars;
    public string SourceText { get; }
    private char CurrentChar { get; }
    public LexKind Kind { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string StringValue { get; }
    public double NumberValue { get; }
    public bool CanBeFunction { get; }
    public XPathScanner(string xpathExpr);
    private static XPathScanner();
    public string get_SourceText();
    private char get_CurrentChar();
    private bool NextChar();
    public LexKind get_Kind();
    public string get_Name();
    public string get_Prefix();
    public string get_StringValue();
    public double get_NumberValue();
    public bool get_CanBeFunction();
    private void SkipSpace();
    public bool NextLex();
    internal static string TrimString(string value);
    internal static double ToXPathDouble(object o);
    private double ScanNumber();
    private double ScanFraction();
    private string ScanString();
    private string ScanName();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.ChildType : Enum {
    public int value__;
    public static ChildType Child;
    public static ChildType Descendent;
    public static ChildType None;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.ParsedNode : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceTo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PropertyCondition> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ParsedNode <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private ChildType <ChildType>k__BackingField;
    public string Name { get; public set; }
    public string ReferenceTo { get; public set; }
    public List`1<PropertyCondition> Properties { get; private set; }
    public ParsedNode Next { get; public set; }
    public ChildType ChildType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceTo();
    [CompilerGeneratedAttribute]
public void set_ReferenceTo(string value);
    [CompilerGeneratedAttribute]
public List`1<PropertyCondition> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(List`1<PropertyCondition> value);
    [CompilerGeneratedAttribute]
public ParsedNode get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(ParsedNode value);
    [CompilerGeneratedAttribute]
public ChildType get_ChildType();
    [CompilerGeneratedAttribute]
public void set_ChildType(ChildType value);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.ParseException : UITestException {
    public ParseException(string message);
    public ParseException(string message, Exception innerException);
    protected ParseException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.Rule : object {
    private string ruleString;
    private ParsedNode startParsedNode;
    internal ParsedNode StartNode { get; }
    internal Rule(string rule);
    internal ParsedNode get_StartNode();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.RuleParser : object {
    private XPathScanner scanner;
    private static string ContainsName;
    private static string AndOperator;
    private RuleParser(XPathScanner scanner);
    internal static ParsedNode ParseRule(string ruleString);
    private ParsedNode ParsePath();
    private ParsedNode ParseSinglePath();
    private List`1<PropertyCondition> ParseAttributes();
    private List`1<PropertyCondition> ParsePredicate();
    private PropertyCondition ParseSingleAttribute();
    private string ParseAttributeName();
    private string ParseAttributeValue();
    private void NextLex();
    private void CheckToken(LexKind t);
    private void PassToken(LexKind t);
    private bool TestOp(string op);
    private ParseException CreateException();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.State : object {
    [CompilerGeneratedAttribute]
private int <StateNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAccepting>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<Symbol, State>> <Transitions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WidgetDefinition> <AcceptingWidgetDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<WidgetDefinition, string> <MatchedNames>k__BackingField;
    internal int StateNumber { get; internal set; }
    internal bool IsAccepting { get; internal set; }
    internal List`1<KeyValuePair`2<Symbol, State>> Transitions { get; private set; }
    internal List`1<WidgetDefinition> AcceptingWidgetDefinitions { get; private set; }
    internal Dictionary`2<WidgetDefinition, string> MatchedNames { get; private set; }
    internal State(int stateNumber, bool isAccepting);
    [CompilerGeneratedAttribute]
internal int get_StateNumber();
    [CompilerGeneratedAttribute]
internal void set_StateNumber(int value);
    [CompilerGeneratedAttribute]
internal bool get_IsAccepting();
    [CompilerGeneratedAttribute]
internal void set_IsAccepting(bool value);
    [CompilerGeneratedAttribute]
internal List`1<KeyValuePair`2<Symbol, State>> get_Transitions();
    [CompilerGeneratedAttribute]
private void set_Transitions(List`1<KeyValuePair`2<Symbol, State>> value);
    [CompilerGeneratedAttribute]
internal List`1<WidgetDefinition> get_AcceptingWidgetDefinitions();
    [CompilerGeneratedAttribute]
private void set_AcceptingWidgetDefinitions(List`1<WidgetDefinition> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<WidgetDefinition, string> get_MatchedNames();
    [CompilerGeneratedAttribute]
private void set_MatchedNames(Dictionary`2<WidgetDefinition, string> value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.StateMachine : object {
    private State startState;
    internal StateMachine(State startState);
    internal bool MatchSingleRule(ElementChain elementChain, Dictionary`2<string, IChainElement> previousElementMap, IChainElement& firstMatch, IChainElement& lastMatch);
    internal WidgetDefinition GetMatchingWidget(ElementChain elementChain, Dictionary`2& matchedElements);
    private WidgetDefinition GetMatchingWidget(ElementChain elementChain, Dictionary`2<string, IChainElement> previousElementMap, Dictionary`2& elementMap);
    internal string GetMachineStates();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.StateMachineGenerator : object {
    private Dictionary`2<int, State> allNfaStates;
    private Dictionary`2<StateSet, State> allDfaStates;
    private Dictionary`2<Symbol, Symbol> allSymbols;
    private State startNfaState;
    private int nextStateNumber;
    internal static StateMachine GetStateMachineForSingleDefinition(WidgetDefinition widgetDefinition, List`1& limits);
    internal void AddRule(WidgetDefinition widgetDef);
    internal StateMachine GetStateMachine();
    private void AddRule(WidgetDefinition widgetDef, Rule limitRule);
    private State AddRuleInternal(WidgetDefinition widgetDef);
    private State AddRuleInternal(WidgetDefinition widgetDef, Rule limitRule);
    private StateSet GetEpsilonClosure(int state);
    private StateSet GetMove(int state, Symbol symbol);
    private int GenerateStateNumber();
    private State GetDfaState(StateSet set);
    private State GetNfaState(int stateNumber);
    private Symbol GetSymbol(ParsedNode node);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.StateSet : SortedSet`1<int> {
    internal int RemoveOne();
    internal void AddRange(ICollection`1<int> collection);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.RuleMatching.Symbol : object {
    [CompilerGeneratedAttribute]
private string <ReferenceTo>k__BackingField;
    public static Symbol Epsilon;
    public static Symbol Star;
    private List`1<PropertyCondition> properties;
    private SymbolTypes symbolType;
    internal List`1<PropertyCondition> Properties { get; }
    internal string ReferenceTo { get; internal set; }
    internal SymbolTypes SymbolType { get; }
    internal Symbol(ParsedNode node);
    private Symbol(SymbolTypes type);
    private static Symbol();
    internal List`1<PropertyCondition> get_Properties();
    [CompilerGeneratedAttribute]
internal string get_ReferenceTo();
    [CompilerGeneratedAttribute]
internal void set_ReferenceTo(string value);
    internal SymbolTypes get_SymbolType();
    internal bool Match(IChainElement element, Dictionary`2<string, IChainElement> previousMap);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private bool CompareProperty(PropertyCondition condition, IChainElement element);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.TouchAggregator : UITestActionFilter {
    private bool aggregateFirstTap;
    public bool ApplyTimeout { get; }
    public UITestActionFilterCategory Category { get; }
    public bool Enabled { get; }
    public UITestActionFilterType FilterType { get; }
    public string Group { get; }
    public string Name { get; }
    public virtual bool get_ApplyTimeout();
    public virtual UITestActionFilterCategory get_Category();
    public virtual bool get_Enabled();
    public virtual UITestActionFilterType get_FilterType();
    public virtual string get_Group();
    public virtual string get_Name();
    public virtual bool ProcessRule(IUITestActionStack actions);
    private static bool IsIncompleteAction(UITestAction action);
    private bool IsDoubleTapButtonDown(UITestAction lastAction, UITestAction secondLastAction);
    private void ModifyClickWithTap(InvokeAction action, UITestAction originalAction);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.TreeWalkerHelper : object {
    private static TreeWalker defaultWalker;
    private static TreeWalkerHelper();
    internal static AutomationElement GetParent(AutomationElement element);
    internal static AutomationElement GetFixedParent(AutomationElement element);
    internal static AutomationElement GetParent(AutomationElement element, TreeWalker walker);
    internal static AutomationElement GetFirstChild(AutomationElement element);
    internal static AutomationElement GetFirstChild(AutomationElement element, TreeWalker walker);
    internal static AutomationElement GetLastChild(AutomationElement element);
    internal static AutomationElement GetLastChild(AutomationElement element, TreeWalker walker);
    internal static AutomationElement GetNextSibling(AutomationElement element);
    internal static AutomationElement GetNextSibling(AutomationElement element, TreeWalker walker);
    internal static AutomationElement GetPreviousSibling(AutomationElement element);
    internal static AutomationElement GetPreviousSibling(AutomationElement element, TreeWalker walker);
    private static AutomationElement NavigateHelper(NavigateInvoker navigate, AutomationElement element);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaUtility : object {
    private static Regex imeControlClassName;
    private static string NewLineRegexString;
    private static string ReplacementForNewLine;
    private static string AutocompleteAriaPropertyName;
    private static string AutocompleteListPropertyValue;
    private static string HasPopUpAriaPropertyName;
    private static UiaUtility();
    public static void MapAndThrowException(SystemException e, IUITechnologyElement element);
    internal static Exception MapException(Exception e, IUITechnologyElement element);
    internal static AutomationElement IgnoreRatingControlGroup(AutomationElement automationElement);
    internal static List`1<string> GetSelectedItemsFromContainer(AutomationElement sourceElement, AutomationElement& container);
    internal static List`1<string> GetSelectedItemsFromContainer(AutomationElement container);
    public static string GetControlTypeName(AutomationElement element);
    public static string GetControlTypeName(AutomationElement element, ControlType uiaControlType);
    public static string GetFriendlyName(AutomationElement element, string commaSeparatedProperties);
    public static string GetFriendlyName(AutomationElement element, bool useVicinityAndLabelBy, string commaSeparatedProperties);
    internal static AutomationElement GetElementFromPoint(Point point);
    public static bool TryGetFriendlyNameFromLabeledByControl(AutomationElement element, string propertyName, String& friendlyName);
    public static bool TryGetFriendlyNameFromPropertyValue(AutomationElement element, string propertyName, String& friendlyName);
    public static WidgetActivation GetWidgetActivation(ActivationWidgetDefinition widgetDefinition, object e);
    public static FormatEntry GetFormatEntry(WidgetActivation activation, AutomationProperty property, object value);
    public static ElementForThumbnailCapture GetElementForThumbnailCaptureFromWidget(Widget widget, object e);
    public static string GetElementLogEntry(AutomationElement element);
    public static bool MatchControlType(AutomationElement element, ControlType controlType);
    [ExtensionAttribute]
public static bool IsValid(Rectangle rect);
    public static AutomationElement GetParentOfIgnoredElement(AutomationElement element);
    public static string ArrayToString(Int32[] arr);
    internal static bool IsComboBox(AutomationElement element);
    internal static bool IsList(AutomationElement element);
    internal static bool IsComboBox(UiaWidgetElement chainElement);
    internal static bool IsDatePicker(AutomationElement element, ControlType controlType);
    internal static bool IsDatePicker(UiaWidgetElement chainElement);
    internal static T GetCachedAutomationPropertyValue(AutomationElement element, AutomationProperty property);
    internal static T GetCurrentAutomationPropertyValue(AutomationElement element, AutomationProperty property);
    internal static bool IsUiaWidgetElement(IUITechnologyElement element);
    internal static UiaWidgetElement TransformUiaWidgetElement(IUITechnologyElement element);
    internal static string GetAutomationId(AutomationElement element);
    internal static string GetAriaRole(AutomationElement element);
    internal static string GetAriaProperties(AutomationElement element);
    internal static List`1<string> GetSelectedItems(AutomationElement element, List`1& selectedAutomationElements);
    internal static List`1<string> GetSelectedItemsUsingPattern(SelectionPattern selPattern, List`1& selectedAutomationElements);
    internal static List`1<string> GetSelectedItemsUsingSearch(BasePattern pattern, AutomationElement element, List`1& selectedAutomationElements);
    internal static bool IsVirtualElement(AutomationElement element);
    internal static AutomationElement GetAutomationElement(object src);
    internal static bool IsWWALabel(UiaWidgetElement uiaWidgetElement);
    internal static ControlType GetControlType(AutomationElement element);
    internal static bool CompareAutomationElements(AutomationElement element1, AutomationElement element2);
    internal static string SanitizeValue(string value);
    internal static bool AreImeControls(IUITechnologyElement element);
    internal static bool ControlIsDisabled(AutomationElement element);
    internal static string GetValueForAriaProperty(string value, string ariaProperty);
    internal static void SafeTraceElement(string context, AutomationElement element);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetConstants : object {
    internal static string UiaWidgetAggregatorsGroup;
    internal static string ClassNamePrefix;
    internal static string UiaWidgetTechName;
    internal static string WWAImmersiveModeClassName;
    internal static string WWAImmersiveModeOldClassName;
    internal static string WWANonImmersiveModeClassName;
    internal static string WWAFileSearchClassName;
    internal static string SearchPane;
    internal static string IHtmlElementClassName;
    internal static string PopupClassName;
    internal static string DatepickerControlType;
    internal static string UserRatingName;
    internal static string TentativeRatingName;
    internal static string AverageRatingName;
    internal static string RatingHtmlClassName;
}
[ComVisibleAttribute("True")]
[GuidAttribute("AD3E83F5-BFAC-4EBB-BB54-3A0626AB0DE4")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetElement : UITechnologyElement {
    [CompilerGeneratedAttribute]
private IUITechnologyElement <SwitchingElement>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModificationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ControlType <UiaControlType>k__BackingField;
    [CompilerGeneratedAttribute]
private AutomationElement <InnerElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLegacyPatternImplemented>k__BackingField;
    internal UITechnologyElement topLevelElement;
    private bool isCacheMode;
    private Nullable`1<IntPtr> nativeWindowHandle;
    private string controlTypeName;
    private Int32[] runtimeId;
    private int hashCode;
    private UiaWidgetProperty`1<UiaWidgetElement> parentProperty;
    private UiaWidgetProperty`1<string> nameProperty;
    private UiaWidgetProperty`1<string> automationIdProperty;
    private UiaWidgetProperty`1<string> classNameProperty;
    private UiaWidgetProperty`1<bool> isPasswordProperty;
    private UiaWidgetProperty`1<IntPtr> windowHandleProperty;
    private string ariaRole;
    private string ariaProperties;
    private string helpText;
    private string htmlClassName;
    private string localizedControlTypeName;
    private Nullable`1<bool> isRightToLeft;
    private AutomationElement[] controllerFor;
    private AutomationElement labeledBy;
    private bool isLabeledByCached;
    private static string UnInitializedValue;
    private static int runningRuntimeId;
    private static int globalInstanceId;
    public IUITechnologyElement SwitchingElement { get; public set; }
    public int ChildIndex { get; }
    public bool IsLeafNode { get; }
    public string TechnologyName { get; }
    public UITechnologyManager TechnologyManager { get; }
    public object NativeElement { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public bool IsPassword { get; }
    public bool IsPasswordInternal { get; }
    public string Name { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private string NameInternal { get; }
    public string FriendlyName { get; }
    public IntPtr WindowHandle { get; }
    private IntPtr WindowHandleInternal { get; }
    public IQueryElement QueryId { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string Value { get; public set; }
    public bool IsTreeSwitchingRequired { get; }
    internal string HtmlClassName { get; }
    internal string HelpText { get; }
    internal string LocalizedControlTypeName { get; }
    internal string AutomationId { get; }
    internal string AutomationIdInternal { get; }
    internal AutomationElement LabeledBy { get; }
    internal string AriaRole { get; }
    internal string AriaProperties { get; }
    internal AutomationElement[] ControllerFor { get; }
    internal bool IsCacheMode { get; internal set; }
    internal DateTime ModificationTime { get; internal set; }
    internal DateTime CreationTime { get; internal set; }
    internal bool IsBoundaryForHostedControl { get; }
    internal UiaWidgetElement Parent { get; }
    private UiaWidgetElement ParentInternal { get; }
    internal IntPtr NativeWindowHandle { get; }
    internal ControlType UiaControlType { get; internal set; }
    internal AutomationElement InnerElement { get; internal set; }
    internal bool IsLegacyPatternImplemented { get; private set; }
    internal UiaWidgetElement(AutomationElement automationElement, bool cacheMode);
    internal void RefreshVolatileProperties();
    [CompilerGeneratedAttribute]
public virtual IUITechnologyElement get_SwitchingElement();
    [CompilerGeneratedAttribute]
public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual int get_ChildIndex();
    public virtual bool get_IsLeafNode();
    public virtual string get_TechnologyName();
    public virtual UITechnologyManager get_TechnologyManager();
    public virtual object get_NativeElement();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual bool get_IsPassword();
    public bool get_IsPasswordInternal();
    public virtual string get_Name();
    private string get_NameInternal();
    public virtual string get_FriendlyName();
    public virtual IntPtr get_WindowHandle();
    private IntPtr get_WindowHandleInternal();
    public virtual IQueryElement get_QueryId();
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual void CacheProperties();
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outPointX, Int32& outPointY);
    public virtual object GetPropertyValue(string propertyName);
    public virtual void SetFocus();
    public virtual void WaitForReady();
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual bool InitializeProgrammaticScroll();
    public virtual void ScrollProgrammatically(ScrollDirection srollDirection, ScrollAmount scrollAmount);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    internal bool HasValidAutomationId();
    public virtual Nullable`1<bool> IsInteractable();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.IChainElement.GetProperty(string propertyName);
    internal T GetProperty(AutomationProperty property);
    public virtual bool Equals(IUITechnologyElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal string get_HtmlClassName();
    internal string get_HelpText();
    internal string get_LocalizedControlTypeName();
    internal string get_AutomationId();
    internal string get_AutomationIdInternal();
    internal AutomationElement get_LabeledBy();
    internal string get_AriaRole();
    internal string get_AriaProperties();
    internal AutomationElement[] get_ControllerFor();
    internal bool get_IsCacheMode();
    internal void set_IsCacheMode(bool value);
    [CompilerGeneratedAttribute]
internal DateTime get_ModificationTime();
    [CompilerGeneratedAttribute]
internal void set_ModificationTime(DateTime value);
    [CompilerGeneratedAttribute]
internal DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
internal void set_CreationTime(DateTime value);
    internal bool get_IsBoundaryForHostedControl();
    internal UiaWidgetElement get_Parent();
    private UiaWidgetElement get_ParentInternal();
    internal IntPtr get_NativeWindowHandle();
    [CompilerGeneratedAttribute]
internal ControlType get_UiaControlType();
    [CompilerGeneratedAttribute]
internal void set_UiaControlType(ControlType value);
    [CompilerGeneratedAttribute]
internal AutomationElement get_InnerElement();
    [CompilerGeneratedAttribute]
internal void set_InnerElement(AutomationElement value);
    [CompilerGeneratedAttribute]
internal bool get_IsLegacyPatternImplemented();
    [CompilerGeneratedAttribute]
private void set_IsLegacyPatternImplemented(bool value);
    private void SetSubstituteRuntimeId();
    private void InitHashCode();
    private void EnablePropertyCaching();
    private bool ShouldRefresh(string propertyValue);
    private bool ShouldRefresh(Nullable`1<T> propertyValue);
    private bool ShouldRefresh(UiaWidgetProperty`1<T> property);
    private string InitializeClassName();
    internal T GetAutomationPropertyValue(AutomationProperty automationProperty);
    internal T GetPatternValue(BasePattern pattern, AutomationProperty automationProperty);
    private bool PreferLabeledByForFriendlyName();
    private string StringifyRuntimeId(Int32[] rtid);
    private static IntPtr GetHtmlClassNameAsString(IAccessible pElement);
    [CompilerGeneratedAttribute]
private void <get_HtmlClassName>b__68_0();
    [CompilerGeneratedAttribute]
private int <InitHashCode>b__117_0();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetElementFactory : object {
    private static CacheRequest defaultCacheRequest;
    private static ConcurrentDictionary`2<WrappedAutomationElement, UiaWidgetElement> uiaWidgetElementDictionary;
    private static UiaWidgetElementFactory();
    internal static CacheRequest GetDefaultCacheRequest();
    internal static IDisposable ActivateCacheRequest();
    internal static UiaWidgetElement GetUiaElementQuick(AutomationElement automationElement);
    internal static void InitializeCacheRequest();
    internal static UiaWidgetElement GetUiaElementFromWindow(IntPtr handle);
    internal static UiaWidgetElement GetUiaFocusedElement();
    internal static UiaWidgetElement GetUiaElementFromPoint(int pointX, int pointY);
    internal static UiaWidgetElement GetUiaParentElement(UiaWidgetElement element);
    private static UiaWidgetElement GetUiaElement(AutomationElement automationElement, bool cacheMode, bool throwOnError);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetEventManager : object {
    private bool isActive;
    private HashSet`1<int> m_eventsListened;
    private static UiaWidgetEventManager s_self;
    internal static UiaWidgetEventManager Instance { get; }
    internal void AddAutomationEvent(AutomationEvent automationEvent);
    internal void RemoveAutomationEvent(AutomationEvent automationEvent);
    internal void Start();
    internal void Pause();
    internal static UiaWidgetEventManager get_Instance();
    private void OnAutomationEvent(object sender, AutomationEventArgs e);
    private void OnAutomationPropertyChange(object sender, AutomationPropertyChangedEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetExtensionPackage : UITestExtensionPackageBase {
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetPluginResources : object {
    private static ResourceManager s_resMgr;
    public static ResourceManager Manager { get; }
    private static UiaWidgetPluginResources();
    public static ResourceManager get_Manager();
    private static string Get(string resourceName);
    public static int GetInt(string resourceName);
    public static bool GetBool(string resourceName);
    private static string Format(string resourceName, Object[] args);
    public static string GenericParseError(object arg0);
    public static string PackageDescription();
    public static string WidgetStoreInvalidHandlerFormat(object arg0);
    public static string WidgetStoreInvalidHandlerType(object arg0, object arg1, object arg2);
    public static string WidgetStoreInvalidTreeScope(object arg0);
    public static string AssemblyNotFound(object arg0);
    public static string FailedToLoadAssembly(object arg0);
    public static string Landscape();
    public static string OrientationChanged(object arg0);
    public static string Portrait();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetProperty`1 : object {
    private UiaWidgetElement m_uiaWidgetElement;
    private string m_propertyName;
    private Func`3<UiaWidgetElement, string, T> m_getPropertyValueFunc;
    private UiaWidgetPropertyState m_propertyState;
    private T m_propertyValue;
    private Task`1<T> m_updateTask;
    private object m_lockObject;
    private string m_beginFetchStack;
    private static bool traceInnerWorkings;
    public string Name { get; }
    public UiaWidgetElement Element { get; }
    public UiaWidgetPropertyState State { get; }
    public T Value { get; }
    public T LastValue { get; }
    public UiaWidgetProperty`1(UiaWidgetElement uiaWidgetElement, string propertyName, Func`3<UiaWidgetElement, string, T> getPropertyValueFunc);
    public string get_Name();
    public UiaWidgetElement get_Element();
    public UiaWidgetPropertyState get_State();
    public T get_Value();
    public T get_LastValue();
    public void BeginFetch();
    public void EndFetch();
    public T Fetch();
    public void SetValue(T value);
    [CompilerGeneratedAttribute]
private T <BeginFetch>b__11_0();
    [CompilerGeneratedAttribute]
private bool <EndFetch>b__12_0(Exception ex);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetPropertyState : Enum {
    public int value__;
    public static UiaWidgetPropertyState Uninitialized;
    public static UiaWidgetPropertyState Updating;
    public static UiaWidgetPropertyState HasBeenSet;
}
[ComVisibleAttribute("True")]
[GuidAttribute("E703F310-603A-43E9-8EB1-87DF77AE85D3")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.UiaWidgetTechnologyManager : UITechnologyManager {
    private bool isFocusChangeHandlerAdded;
    internal UiaWidgetElement label;
    private bool disposed;
    private bool sessionStarted;
    private OrientationChangeHandler orientationChangeHandler;
    private object syncLock;
    private static UiaWidgetTechnologyManager instance;
    private WidgetRulebook widgetRuleBook;
    internal AutomationElement lastAccessedBrokenParent;
    private object globalEventHandlerSyncLock;
    private bool globalHandlerCalled;
    private bool recordingSession;
    public string TechnologyName { get; }
    internal static UiaWidgetTechnologyManager Instance { get; }
    internal WidgetRulebook WidgetRulebook { get; private set; }
    public virtual string get_TechnologyName();
    public virtual void StartSession(bool recordingSession);
    public virtual void StopSession();
    public virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    public virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    public virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    public virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    public virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    private void AddFocusChangeEventHandler(UiaWidgetElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    private void AutomationFocusChangedEventHandler(object sender, AutomationFocusChangedEventArgs e);
    public virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public virtual void CancelStep();
    public virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    public virtual ILastInvocationInfo GetLastInvocationInfo();
    public virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    public virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    public virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    public virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    public virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void ProcessMouseEnter(IntPtr handle);
    public virtual int GetControlSupportLevel(IntPtr windowHandle);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2213:DisposableFieldsShouldBeDisposed")]
public sealed virtual void Dispose();
    private Assembly AssemblyResolve(object sender, ResolveEventArgs args);
    private void InitializeTechnologyManagerProperties();
    private void ResetCacheIfNeeded(UiaWidgetElement element);
    private void InitializeInternal();
    private void InitializeWidgetRulebook();
    internal static UiaWidgetTechnologyManager get_Instance();
    internal WidgetRulebook get_WidgetRulebook();
    private void set_WidgetRulebook(WidgetRulebook value);
    private static void SetContainer(IUITechnologyElement target, IUITechnologyElement technologyElement);
    private void AddGlobalEventHandlerInternal(object state);
    private void RemoveGlobalEventHandlerInternal(object dummy);
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0();
    [CompilerGeneratedAttribute]
private void <InitializeWidgetRulebook>b__33_0();
    [CompilerGeneratedAttribute]
private void <InitializeWidgetRulebook>b__33_1();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.VicinityDirections : Enum {
    public int value__;
    public static VicinityDirections Top;
    public static VicinityDirections Bottom;
    public static VicinityDirections Left;
    public static VicinityDirections Right;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.VicinityHelper : object {
    private static VicinityHelper instance;
    private static int InsideEdge;
    private Dictionary`2<ControlType, VicinityInfo> vicinityInfos;
    public static VicinityHelper Instance { get; }
    public static VicinityHelper get_Instance();
    public string GetVicinityFriendlyName(AutomationElement element);
    private string GetVicinityFriendlyName(AutomationElement element, VicinityInfo vicinityInfo);
    private AutomationElement GetVicinityControl(Rectangle controlRect, int delta, Dictionary`2<ControlType, ControlType> expectedControlTypes, VicinityDirections direction, VicinitySubdirections subDirection);
    private Point GetPoint(Rectangle rectangle, int delta, VicinityDirections direction, VicinitySubdirections subDirection);
    private int GetSubdirectionDelta(int dimension, VicinitySubdirections subdir);
    private void InitializeVicinityInfo();
    private VicinityInfo GetVicinityInfo(bool bigHeight);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.VicinityInfo : object {
    [CompilerGeneratedAttribute]
private int <SplitThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DirectionInfo> <Directions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ControlType, ControlType> <ExpectedControls>k__BackingField;
    public int SplitThreshold { get; public set; }
    public List`1<DirectionInfo> Directions { get; private set; }
    public Dictionary`2<ControlType, ControlType> ExpectedControls { get; private set; }
    [CompilerGeneratedAttribute]
public int get_SplitThreshold();
    [CompilerGeneratedAttribute]
public void set_SplitThreshold(int value);
    [CompilerGeneratedAttribute]
public List`1<DirectionInfo> get_Directions();
    [CompilerGeneratedAttribute]
private void set_Directions(List`1<DirectionInfo> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ControlType, ControlType> get_ExpectedControls();
    [CompilerGeneratedAttribute]
private void set_ExpectedControls(Dictionary`2<ControlType, ControlType> value);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.VicinitySubdirections : Enum {
    public int value__;
    public static VicinitySubdirections Start;
    public static VicinitySubdirections Middle;
    public static VicinitySubdirections End;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.VicinityUtility : object {
    private Dictionary`2<double, List`1<AutomationElement>> bottomEdgeDictionary;
    private Dictionary`2<double, List`1<AutomationElement>> sideEdgeDictionary;
    private Dictionary`2<double, List`1<AutomationElement>> topEdgeDictionary;
    private AutomationElement topElement;
    [CompilerGeneratedAttribute]
private bool <IsRTLScenario>k__BackingField;
    private static VicinityUtility instance;
    internal bool IsRTLScenario { get; internal set; }
    internal static VicinityUtility Instance { get; }
    internal void Refresh(AutomationElement element);
    internal bool IsVicinityApplicable(AutomationElement element);
    internal AutomationElement GetBottomAlignedElement(double X, double Y);
    internal AutomationElement GetTopAlignedElement(double X, double Y);
    internal AutomationElement GetAutomationElementAligned(double X, double Y, Dictionary`2<double, List`1<AutomationElement>> elementDictionary);
    internal AutomationElement GetVicinityElementFromTop(double X, double Y);
    [CompilerGeneratedAttribute]
internal bool get_IsRTLScenario();
    [CompilerGeneratedAttribute]
internal void set_IsRTLScenario(bool value);
    internal static VicinityUtility get_Instance();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.Widget : object {
    internal InternalNotifyHandler NotifyInternal;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, AutomationElement> <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private Widget <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private Widget <Child>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    [CompilerGeneratedAttribute]
private WidgetDefinition <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContextEntry> <ContextEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFurtherContextNeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<AutomationElement, string> <FriendlyNameCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ElementMap <ElementMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasFiredEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MayFireFakeEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasBeenScrolled>k__BackingField;
    private List`1<UiaWidgetElement> sourceElements;
    private List`1<AutomationEventWrapper> automationWrapperList;
    private object lockObject;
    private bool isDisposed;
    private Dictionary`2<string, object> cachedProperties;
    private static int MAXCONTEXTLEVEL;
    internal List`1<UiaWidgetElement> SourceElements { get; }
    internal Dictionary`2<string, object> CachedProperties { get; }
    internal Dictionary`2<object, AutomationElement> Target { get; internal set; }
    internal Widget Parent { get; private set; }
    internal Widget Child { get; private set; }
    internal bool IsActive { get; internal set; }
    internal bool IsSuspended { get; internal set; }
    internal WidgetDefinition Definition { get; private set; }
    internal List`1<ContextEntry> ContextEntries { get; internal set; }
    internal bool IsFurtherContextNeeded { get; internal set; }
    internal Dictionary`2<AutomationElement, string> FriendlyNameCache { get; private set; }
    internal ElementMap ElementMap { get; private set; }
    internal bool HasFiredEvent { get; internal set; }
    internal bool MayFireFakeEvent { get; internal set; }
    internal bool HasBeenScrolled { get; internal set; }
    internal Widget(WidgetDefinition widgetDefinition, ElementMap elementMap);
    private sealed virtual override void System.IDisposable.Dispose();
    public string GetFriendlyName(AutomationElement element, string commaSeparatedProperties, bool useVicinity);
    public string GetFriendlyName(AutomationElement element);
    public void LogError(string message);
    public void LogError(string messageFormat, Object[] data);
    public void LogWarning(string message);
    public void LogWarning(string messageFormat, Object[] data);
    public void LogInfo(string message);
    public void LogInfo(string messageFormat, Object[] data);
    public void LogVerbose(string message);
    public void LogVerbose(string messageFormat, Object[] data);
    public virtual string ToString();
    public void Notify(UITestActionLogEntry actionLogEntry, AutomationElement targetElement, ElementForThumbnailCapture thumbElement);
    private void NotifyInternalHandler(UITestActionLogEntry actionLogEntry, AutomationElement targetElement, UITestEventType eventType, bool isInvoke, ElementForThumbnailCapture elementForThumbnailCapture);
    internal void AddAutomationEventHandler(AutomationEvent eventId, AutomationElement element, TreeScope scope, WidgetEventHandler eventHandler);
    internal void AddAutomationPropertyChangedEventHandler(AutomationElement element, TreeScope scope, WidgetPropertyChangeEventHandler eventHandler, AutomationProperty[] properties);
    internal void RemoveEventHandlers();
    internal ElementChain ChopChain(ElementChain chain);
    internal void ChainChildWidget(Widget child);
    internal void ChainParentWidget(Widget parent);
    internal void Activate(UiaWidgetElement element, ElementChain chain);
    internal void Deactivate();
    internal void Suspend();
    internal bool FireEventIfRequired();
    internal bool IsApplicable(ElementChain elementChain);
    internal void ResetEventsFlag();
    internal bool IsElementOwned(AutomationElement element);
    internal bool DispatchEvent(AutomationElement element, AutomationEventArgs e);
    internal string GetFriendlyName(AutomationElement element, bool shouldApplyVicinity, string commaSeparatedProperties);
    internal List`1<UiaWidgetElement> get_SourceElements();
    internal Dictionary`2<string, object> get_CachedProperties();
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, AutomationElement> get_Target();
    [CompilerGeneratedAttribute]
internal void set_Target(Dictionary`2<object, AutomationElement> value);
    [CompilerGeneratedAttribute]
internal Widget get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Widget value);
    [CompilerGeneratedAttribute]
internal Widget get_Child();
    [CompilerGeneratedAttribute]
private void set_Child(Widget value);
    [CompilerGeneratedAttribute]
internal bool get_IsActive();
    [CompilerGeneratedAttribute]
internal void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsSuspended();
    [CompilerGeneratedAttribute]
internal void set_IsSuspended(bool value);
    [CompilerGeneratedAttribute]
internal WidgetDefinition get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(WidgetDefinition value);
    [CompilerGeneratedAttribute]
internal List`1<ContextEntry> get_ContextEntries();
    [CompilerGeneratedAttribute]
internal void set_ContextEntries(List`1<ContextEntry> value);
    [CompilerGeneratedAttribute]
internal bool get_IsFurtherContextNeeded();
    [CompilerGeneratedAttribute]
internal void set_IsFurtherContextNeeded(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<AutomationElement, string> get_FriendlyNameCache();
    [CompilerGeneratedAttribute]
private void set_FriendlyNameCache(Dictionary`2<AutomationElement, string> value);
    private UiaWidgetElement GetUiaWidgetElementFromCache(AutomationElement targetElement);
    private UiaWidgetElement GetUiaWidgetElementFromCacheOrCreate(AutomationElement targetElement);
    internal void AddContextAndPass(UITestActionLogEntry actionLogEntry, List`1<UiaWidgetElement> sourceElements, AutomationElement targetElement, UITestEventType eventType, bool isInvoke, ElementForThumbnailCapture elementForThumbnailCapture);
    [CompilerGeneratedAttribute]
internal ElementMap get_ElementMap();
    [CompilerGeneratedAttribute]
private void set_ElementMap(ElementMap value);
    [CompilerGeneratedAttribute]
internal bool get_HasFiredEvent();
    [CompilerGeneratedAttribute]
internal void set_HasFiredEvent(bool value);
    [CompilerGeneratedAttribute]
internal bool get_MayFireFakeEvent();
    [CompilerGeneratedAttribute]
internal void set_MayFireFakeEvent(bool value);
    [CompilerGeneratedAttribute]
internal bool get_HasBeenScrolled();
    [CompilerGeneratedAttribute]
internal void set_HasBeenScrolled(bool value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetDefinition : object {
    [CompilerGeneratedAttribute]
private string <WidgetName>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <Identification>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerFor>k__BackingField;
    private List`1<Rule> limits;
    internal List`1<StateMachine> limitStateMachines;
    internal StateMachine machine;
    internal string WidgetName { get; internal set; }
    internal Rule Identification { get; internal set; }
    internal string ControllerFor { get; internal set; }
    internal List`1<Rule> Limits { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_WidgetName();
    [CompilerGeneratedAttribute]
internal void set_WidgetName(string value);
    [CompilerGeneratedAttribute]
internal Rule get_Identification();
    [CompilerGeneratedAttribute]
internal void set_Identification(Rule value);
    [CompilerGeneratedAttribute]
internal string get_ControllerFor();
    [CompilerGeneratedAttribute]
internal void set_ControllerFor(string value);
    internal List`1<Rule> get_Limits();
    internal void set_Limits(List`1<Rule> value);
    internal bool TryGetChoppedChain(ElementChain chain, ElementMap map, ElementChain& choppedChain);
    internal bool IsChainValid(ElementChain chain);
    internal Widget Instantiate(ElementMap elementMap);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetEventHandler : MulticastDelegate {
    public WidgetEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationEventArgs e, Widget widget);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationEventArgs e, Widget widget, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetPropertyChangeEventHandler : MulticastDelegate {
    public WidgetPropertyChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationPropertyChangedEventArgs e, Widget widget);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationPropertyChangedEventArgs e, Widget widget, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetRulebook : object {
    internal UiaWidgetElement LastInvokeElement;
    internal Dictionary`2<AutomationElement, UiaWidgetElement> AutomationElementToAutomationChainElementMap;
    private WidgetSet customWidgetSet;
    private WidgetSet genericWidgetSet;
    private IUITestEventNotify eventSink;
    private Widget lastActiveWidget;
    internal AutomationElement LastTargetElement;
    private PrimitiveWidgetDefinitions primitiveWidgetDefinitions;
    internal Widget LastActiveWidget { get; internal set; }
    unknown IUITestEventNotify EventSink {internal set; }
    public sealed virtual void Dispose();
    internal Widget get_LastActiveWidget();
    internal void set_LastActiveWidget(Widget value);
    internal bool Initialize();
    internal void CleanUpSession(object lastActiveWidget);
    internal void TraceWidgetChainContents(Widget top);
    internal bool Charge(UiaWidgetElement targetElement, UITestEventType eventType, IUITestEventNotify eventSink);
    internal bool Discharge(UiaWidgetElement targetElement, UITestEventType eventType, IUITestEventNotify eventSink);
    internal void Notify(List`1<UiaWidgetElement> sourceElements, UiaWidgetElement targetElement, UITestEventType eventType, UITestActionLogEntry actionLogEntry, bool isInvoke, ElementForThumbnailCapture elementForThumbnailCapture);
    private List`1<Widget> GetWidgetsList(Widget widget);
    private void LinkWidgetsList(List`1<Widget> widgetsList);
    private List`1<Widget> CreateWidgetsList(ElementChain chain);
    private bool IsWidgetControllerForPrevious(Widget newLeafWidget, Widget previousWidget);
    private void DeactivateOlderWidget();
    private bool IsCeilingElement(UiaWidgetElement chainElement);
    internal ElementChain GetElementChain(UiaWidgetElement element);
    internal Widget FindMatchingWidget(ElementChain chain);
    private Widget MapElementToOwnerWidget(AutomationElement element);
    private AutomationElement GetEscortElement(AutomationElement element, AutomationEventArgs e);
    internal void DispatchEvent(AutomationElement element, AutomationEventArgs e);
    internal void set_EventSink(IUITestEventNotify value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetSet : object {
    internal StateMachine stateMachine;
    private StateMachineGenerator stateMachineGenerator;
    internal void Add(WidgetDefinition widgetDefinition);
    internal void CommitDefinitions();
    internal Widget Match(ElementChain chain);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetStore.FormatEntry : object {
    [CompilerGeneratedAttribute]
private string <FormatString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    private string name;
    public string FormatString { get; public set; }
    public string Value { get; public set; }
    public string Action { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
public void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    public string get_Name();
    public void set_Name(string value);
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetStore.FormatNames : object {
    public static string DefaultFormat;
    public static string UnselectItemsFormat;
    public static string CheckFormat;
    public static string UncheckFormat;
    public static string MixedFormat;
    public static string ClearFormat;
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetStore.WidgetActivation : object {
    [CompilerGeneratedAttribute]
private bool <RecordActionOnTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MayNavigate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertiesForFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HandlerType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ElementForThumbnailCapture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Handler>k__BackingField;
    private TreeScope treeScope;
    private Nullable`1<ElementForThumbnailCapture> elementForThumbnailCapture;
    private List`1<string> events;
    private List`1<string> watchlist;
    private List`1<FormatEntry> formats;
    private List`1<AutomationEvent> automationEvents;
    private List`1<AutomationProperty> automationProperties;
    private WidgetPropertyChangeEventHandler propertyChangeEventHandler;
    private WidgetEventHandler eventHandler;
    private Dictionary`2<string, FormatEntry> formatEntriesDictionary;
    private static string AutomationEventString;
    private static string PropertyChangeEventString;
    [XmlArrayAttribute("Events")]
[XmlArrayItemAttribute("Event")]
public List`1<string> Events { get; }
    [XmlArrayAttribute("WatchList")]
[XmlArrayItemAttribute("Property")]
public List`1<string> WatchList { get; }
    [XmlAttributeAttribute]
public bool RecordActionOnTarget { get; public set; }
    [XmlAttributeAttribute]
public bool MayNavigate { get; public set; }
    [XmlArrayAttribute("Formats")]
[XmlArrayItemAttribute("Format")]
public List`1<FormatEntry> Formats { get; }
    public string PropertiesForFriendlyName { get; public set; }
    [XmlElementAttribute("Target")]
public string Target { get; public set; }
    [XmlElementAttribute("HandlerType")]
public string HandlerType { get; public set; }
    [XmlElementAttribute("Scope")]
public string Scope { get; public set; }
    [XmlElementAttribute("ElementForThumbnailCapture")]
public string ElementForThumbnailCapture { get; public set; }
    [XmlIgnoreAttribute]
public TreeScope TreeScope { get; }
    [XmlIgnoreAttribute]
public ElementForThumbnailCapture ElementForThumbnail { get; }
    [XmlElementAttribute("Handler")]
public string Handler { get; public set; }
    [XmlIgnoreAttribute]
public Dictionary`2<string, FormatEntry> FormatEntriesDictionary { get; }
    [XmlIgnoreAttribute]
internal List`1<AutomationEvent> AutomationEvents { get; }
    [XmlIgnoreAttribute]
internal List`1<AutomationProperty> AutomationProperties { get; }
    [XmlIgnoreAttribute]
internal ActivationEventType EventType { get; }
    [XmlIgnoreAttribute]
internal WidgetEventHandler EventHandler { get; internal set; }
    [XmlIgnoreAttribute]
internal WidgetPropertyChangeEventHandler PropertyChangeEventHandler { get; internal set; }
    public List`1<string> get_Events();
    public List`1<string> get_WatchList();
    [CompilerGeneratedAttribute]
public bool get_RecordActionOnTarget();
    [CompilerGeneratedAttribute]
public void set_RecordActionOnTarget(bool value);
    [CompilerGeneratedAttribute]
public bool get_MayNavigate();
    [CompilerGeneratedAttribute]
public void set_MayNavigate(bool value);
    public List`1<FormatEntry> get_Formats();
    [CompilerGeneratedAttribute]
public string get_PropertiesForFriendlyName();
    [CompilerGeneratedAttribute]
public void set_PropertiesForFriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_HandlerType();
    [CompilerGeneratedAttribute]
public void set_HandlerType(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_ElementForThumbnailCapture();
    [CompilerGeneratedAttribute]
public void set_ElementForThumbnailCapture(string value);
    public TreeScope get_TreeScope();
    public ElementForThumbnailCapture get_ElementForThumbnail();
    [CompilerGeneratedAttribute]
public string get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(string value);
    public Dictionary`2<string, FormatEntry> get_FormatEntriesDictionary();
    internal List`1<AutomationEvent> get_AutomationEvents();
    internal List`1<AutomationProperty> get_AutomationProperties();
    internal ActivationEventType get_EventType();
    internal WidgetEventHandler get_EventHandler();
    internal void set_EventHandler(WidgetEventHandler value);
    internal WidgetPropertyChangeEventHandler get_PropertyChangeEventHandler();
    internal void set_PropertyChangeEventHandler(WidgetPropertyChangeEventHandler value);
}
[XmlRootAttribute("WidgetStore")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetStore.WidgetEntries : object {
    private List`1<WidgetEntry> widgetEntries;
    private List`1<ActivationWidgetDefinition> widgetDefinitions;
    private static XmlSerializer serializer;
    [XmlArrayAttribute("Widgets")]
[XmlArrayItemAttribute("Widget")]
public List`1<WidgetEntry> Widgets { get; }
    [XmlIgnoreAttribute]
internal List`1<ActivationWidgetDefinition> WidgetDefinitions { get; }
    private static WidgetEntries();
    public List`1<WidgetEntry> get_Widgets();
    internal List`1<ActivationWidgetDefinition> get_WidgetDefinitions();
    private ActivationWidgetDefinition CreateWidgetDefinition(WidgetEntry widgetEntry);
    public static WidgetEntries Create(string serializedXml);
    public virtual string ToString();
    public void Clear();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetStore.WidgetEntry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerFor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentificationRule>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextHandler>k__BackingField;
    private List`1<string> limitRules;
    private List`1<WidgetActivation> activations;
    private List`1<ElementMapEntry> elementMapsForContext;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string ControllerFor { get; public set; }
    [XmlElementAttribute("IdentificationRule")]
public string IdentificationRule { get; public set; }
    [XmlArrayAttribute("Limits")]
[XmlArrayItemAttribute("Rule")]
public List`1<string> LimitRules { get; }
    [XmlArrayAttribute("ElementMapsForContext")]
[XmlArrayItemAttribute("ElementMap")]
public List`1<ElementMapEntry> ElementMapsForContext { get; }
    [XmlElementAttribute("ContextHandler")]
public string ContextHandler { get; public set; }
    [XmlArrayAttribute("Activations")]
[XmlArrayItemAttribute("Activation")]
public List`1<WidgetActivation> Activations { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ControllerFor();
    [CompilerGeneratedAttribute]
public void set_ControllerFor(string value);
    [CompilerGeneratedAttribute]
public string get_IdentificationRule();
    [CompilerGeneratedAttribute]
public void set_IdentificationRule(string value);
    public List`1<string> get_LimitRules();
    public List`1<ElementMapEntry> get_ElementMapsForContext();
    [CompilerGeneratedAttribute]
public string get_ContextHandler();
    [CompilerGeneratedAttribute]
public void set_ContextHandler(string value);
    public List`1<WidgetActivation> get_Activations();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetStore.WidgetStore : object {
    internal static Dictionary`2<string, TreeScope> TreeScopeMap;
    private static Dictionary`2<string, AutomationEvent> automationEventIdMap;
    private static Dictionary`2<string, AutomationProperty> automationPropertyMap;
    private static XmlSerializer serializerV1;
    private static string V1NameSpace;
    private static string WidgetConfigFile;
    private static string ExtensionsDirectory;
    private static List`1<string> customWidgetFiles;
    private static string XMLExtension;
    private static Dictionary`2<string, string> NamespaceToSchemaMap;
    private static string RootNodeName;
    private static string Xmlns;
    internal static Dictionary`2<string, AutomationEvent> AutomationEventIdMap { get; }
    internal static Dictionary`2<string, AutomationProperty> AutomationPropertyMap { get; }
    private static WidgetStore();
    internal static List`1<ActivationWidgetDefinition> GetAllEntries(WidgetType widgetType);
    internal static MethodInfo GetMethodInfo(string handler, Object& instance);
    internal static object GetActivationEventHandler(string handler, ActivationEventType activationType);
    internal static Dictionary`2<string, AutomationEvent> get_AutomationEventIdMap();
    internal static Dictionary`2<string, AutomationProperty> get_AutomationPropertyMap();
    private static XmlSerializer GetSerializer(string nameSpace);
    private static void ValidateCustomWidgetConfig();
    private static string GetSchema(StreamReader reader);
    private static bool Validate(Stream stream, string fileName, string schemaFile);
    private static List`1<string> GetCustomWidgetConfigFiles();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
private static Assembly LoadFrom(string assemblyPath);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
private static string GetWidgetConfigXmlData();
    private static Dictionary`2<string, TreeScope> InitializeTreeScopeMap();
    private static Dictionary`2<string, AutomationEvent> InitializeAutomationEventIdMap();
    private static Dictionary`2<string, AutomationProperty> InitializeAutomationPropertyMap();
    internal static Dictionary`2<string, string> InitializeNameSpaceToSchemaMap();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WidgetStore.WidgetType : Enum {
    public int value__;
    public static WidgetType Custom;
    public static WidgetType Generic;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UiaWidget.WrappedAutomationElement : object {
    private AutomationElement m_InnerElement;
    private Nullable`1<bool> m_NameQueryResult;
    private string m_Name;
    public AutomationElement InnerElement { get; }
    private string Name { get; }
    public WrappedAutomationElement(AutomationElement element);
    public AutomationElement get_InnerElement();
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    private bool ExtendedEquals(WrappedAutomationElement other);
    private string get_Name();
    private bool TryToCacheName();
}
