[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.BinaryReaderHelper : object {
    [ExtensionAttribute]
public static string GetUTF16String(Byte[] bytes, int index);
    [ExtensionAttribute]
public static string GetUTF8String(Byte[] bytes, int index);
    [ExtensionAttribute]
public static UInt32 GetUInt32(Byte[] bytes, int index);
    [ExtensionAttribute]
public static int GetInt32(Byte[] bytes, int index);
    [ExtensionAttribute]
public static ulong GetUInt64(Byte[] bytes, int index);
    [ExtensionAttribute]
public static ulong GetVA(Byte[] bytes, int index, int pointerSize);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.Constants : object {
    public static int InvalidTestMethodLineNumber;
}
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppTestCase : object {
    private TestModule testModule;
    private TestClass testClass;
    private TestMethod testMethod;
    private Dictionary`2<string, TestAttribute> attributes;
    public static string ModuleInitialize;
    public static string ModuleCleanup;
    public static string ClassInitialize;
    public static string ClassCleanup;
    public static string ClassHelper;
    public static string MethodInitialize;
    public static string MethodCleanup;
    public static string MethodHelper;
    public static string Delimiter;
    internal TestModule TestModule { get; }
    internal TestClass TestClass { get; }
    internal TestMethod TestMethod { get; }
    public string TestCaseName { get; }
    public string Source { get; }
    public int LineNumber { get; }
    public string FilePath { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public ExecutionPlatform Platform { get; }
    public bool IsAppContainer { get; }
    public Dictionary`2<string, string> HelperMethodDecoratedNames { get; }
    internal CppTestCase(TestModule cppTestModule, TestClass cppTestClass, TestMethod cppTestMethod);
    internal TestModule get_TestModule();
    internal TestClass get_TestClass();
    internal TestMethod get_TestMethod();
    public string get_TestCaseName();
    public string get_Source();
    public int get_LineNumber();
    public string get_FilePath();
    public string get_ClassName();
    public string get_MethodName();
    public ExecutionPlatform get_Platform();
    public bool get_IsAppContainer();
    public Dictionary`2<string, string> get_HelperMethodDecoratedNames();
    internal Dictionary`2<string, TestAttribute> GetAttributes();
}
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.Discoverer : object {
    private List`1<string> searchPaths;
    private static string Kernel32DllName;
    public Discoverer(IDiscovererLog discovererLog);
    public void AddSearchPath(string filePath);
    public void RemoveSearchPath(string filePath);
    public IEnumerable`1<CppTestCase> GetTestCases();
    public IEnumerable`1<CppTestCase> GetTestCases(TestAttribute testAttribute);
    public bool CanDiscoverTests(string filePath, bool isDesktopPlatform);
    private IEnumerable`1<CppTestCase> GetTestCases(string filePath);
    private static string GetCanonicalPath(string filePath);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.DiscovererLogHelper : object {
    private static object logLocker;
    private static IDiscovererLog discovererLog;
    unknown static IDiscovererLog DiscovererLog {public set; }
    private static DiscovererLogHelper();
    public static void set_DiscovererLog(IDiscovererLog value);
    public static void WriteMessage(DiscovererMessageLevel messageLevel, string message);
}
public enum Microsoft.VisualStudio.TestTools.CppUnitTestFramework.DiscovererMessageLevel : Enum {
    public int value__;
    public static DiscovererMessageLevel Informational;
    public static DiscovererMessageLevel Warning;
    public static DiscovererMessageLevel Error;
}
public enum Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ExecutionPlatform : Enum {
    public int value__;
    public static ExecutionPlatform X86;
    public static ExecutionPlatform X64;
    public static ExecutionPlatform ARM;
    public static ExecutionPlatform ARM64;
}
public static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ExecutionPlatformHelper : object {
    private static Dictionary`2<ExecutionPlatform, string> dictionary;
    private static ExecutionPlatformHelper();
    public static string GetPlatformString(ExecutionPlatform platform);
    public static ExecutionPlatform ConvertFromString(string platform);
}
public interface Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IDiscovererLog {
    public abstract virtual void WriteMessage(DiscovererMessageLevel messageLevel, string message);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_DATA_DIRECTORY : object {
    internal UInt32 VirtualAddress;
    [CompilerGeneratedAttribute]
private UInt32 <Size>k__BackingField;
    public UInt32 Size { get; private set; }
    public IMAGE_DATA_DIRECTORY(BinaryReader br);
    [CompilerGeneratedAttribute]
public UInt32 get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(UInt32 value);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_DOS_HEADER : object {
    public static ushort IMAGE_DOS_SIGNATURE;
    public ushort e_magic;
    public ushort e_cblp;
    public ushort e_cp;
    public ushort e_crlc;
    public ushort e_cparhdr;
    public ushort e_minalloc;
    public ushort e_maxalloc;
    public ushort e_ss;
    public ushort e_sp;
    public ushort e_csum;
    public ushort e_ip;
    public ushort e_cs;
    public ushort e_lfarlc;
    public ushort e_ovno;
    public UInt16[] e_res;
    public ushort e_oemid;
    public ushort e_oeminfo;
    public UInt16[] e_res2;
    public ushort e_lfanew;
    public IMAGE_DOS_HEADER(BinaryReader br);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_FILE_HEADER : object {
    public static UInt32 IMAGE_NT_SIGNATURE;
    public static UInt32 Size;
    public ushort Machine;
    [CompilerGeneratedAttribute]
private ushort <NumberOfSections>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <SizeOfOptionalHeader>k__BackingField;
    private ushort Characteristics;
    private UInt32 timeDateStamp;
    private UInt32 pointerToSymbolTable;
    private UInt32 numberOfSymbols;
    public ushort NumberOfSections { get; private set; }
    public ushort SizeOfOptionalHeader { get; private set; }
    public IMAGE_FILE_HEADER(BinaryReader br);
    [CompilerGeneratedAttribute]
public ushort get_NumberOfSections();
    [CompilerGeneratedAttribute]
private void set_NumberOfSections(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_SizeOfOptionalHeader();
    [CompilerGeneratedAttribute]
private void set_SizeOfOptionalHeader(ushort value);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_IMPORT_DESCRIPTOR : object {
    public static UInt32 Size;
    [CompilerGeneratedAttribute]
private UInt32 <Characteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginalFirstThunk>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TimeDateStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ForwarderChain>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FirstThunk>k__BackingField;
    public UInt32 Characteristics { get; private set; }
    public UInt32 OriginalFirstThunk { get; private set; }
    public UInt32 TimeDateStamp { get; private set; }
    public UInt32 ForwarderChain { get; private set; }
    public UInt32 Name { get; private set; }
    public UInt32 FirstThunk { get; private set; }
    public IMAGE_IMPORT_DESCRIPTOR(BinaryReader br);
    [CompilerGeneratedAttribute]
public UInt32 get_Characteristics();
    [CompilerGeneratedAttribute]
private void set_Characteristics(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginalFirstThunk();
    [CompilerGeneratedAttribute]
private void set_OriginalFirstThunk(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TimeDateStamp();
    [CompilerGeneratedAttribute]
private void set_TimeDateStamp(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ForwarderChain();
    [CompilerGeneratedAttribute]
private void set_ForwarderChain(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_FirstThunk();
    [CompilerGeneratedAttribute]
private void set_FirstThunk(UInt32 value);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_OPTIONAL_HEADER32 : object {
    public static ushort IMAGE_NT_OPTIONAL_HDR32_MAGIC;
    public static UInt32 IMAGE_NUMBEROF_DIRECTORY_ENTRIES;
    public static UInt32 Size;
    [CompilerGeneratedAttribute]
private UInt32 <ImageBase>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MajorLinkerVersion>k__BackingField;
    private byte MinorLinkerVersion;
    private UInt32 SizeOfCode;
    private UInt32 SizeOfInitializedData;
    private UInt32 SizeOfUninitializedData;
    private UInt32 AddressOfEntryPoint;
    private UInt32 BaseOfCode;
    private UInt32 BaseOfData;
    private UInt32 SectionAlignment;
    private UInt32 FileAlignment;
    private ushort MajorOperatingSystemVersion;
    private ushort MinorOperatingSystemVersion;
    private ushort MajorImageVersion;
    private ushort MinorImageVersion;
    private ushort MajorSubsystemVersion;
    private ushort MinorSubsystemVersion;
    private UInt32 Win32VersionValue;
    private UInt32 SizeOfImage;
    private UInt32 SizeOfHeaders;
    private UInt32 CheckSum;
    private ushort Subsystem;
    private ushort DllCharacteristics;
    private UInt32 SizeOfStackReserve;
    private UInt32 SizeOfStackCommit;
    private UInt32 SizeOfHeapReserve;
    private UInt32 SizeOfHeapCommit;
    private UInt32 LoaderFlags;
    private UInt32 NumberOfRvaAndSizes;
    private IMAGE_DATA_DIRECTORY[] DataDirectory;
    public UInt32 ImageBase { get; public set; }
    public bool HasClrHeader { get; }
    public byte MajorLinkerVersion { get; private set; }
    public bool IsAppContainer { get; }
    public IMAGE_OPTIONAL_HEADER32(BinaryReader br);
    [CompilerGeneratedAttribute]
public UInt32 get_ImageBase();
    [CompilerGeneratedAttribute]
public void set_ImageBase(UInt32 value);
    public bool get_HasClrHeader();
    [CompilerGeneratedAttribute]
public byte get_MajorLinkerVersion();
    [CompilerGeneratedAttribute]
private void set_MajorLinkerVersion(byte value);
    public bool get_IsAppContainer();
    public IMAGE_DATA_DIRECTORY GetDataDirectory(UInt32 index);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_OPTIONAL_HEADER64 : object {
    public static ushort IMAGE_NT_OPTIONAL_HDR64_MAGIC;
    public static UInt32 IMAGE_NUMBEROF_DIRECTORY_ENTRIES;
    public static UInt32 Size;
    [CompilerGeneratedAttribute]
private ulong <ImageBase>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MajorLinkerVersion>k__BackingField;
    private byte MinorLinkerVersion;
    private UInt32 SizeOfCode;
    private UInt32 SizeOfInitializedData;
    private UInt32 SizeOfUninitializedData;
    private UInt32 AddressOfEntryPoint;
    private UInt32 BaseOfCode;
    private UInt32 SectionAlignment;
    private UInt32 FileAlignment;
    private ushort MajorOperatingSystemVersion;
    private ushort MinorOperatingSystemVersion;
    private ushort MajorImageVersion;
    private ushort MinorImageVersion;
    private ushort MajorSubsystemVersion;
    private ushort MinorSubsystemVersion;
    private UInt32 Win32VersionValue;
    private UInt32 SizeOfImage;
    private UInt32 SizeOfHeaders;
    private UInt32 CheckSum;
    private ushort Subsystem;
    private ushort DllCharacteristics;
    private ulong SizeOfStackReserve;
    private ulong SizeOfStackCommit;
    private ulong SizeOfHeapReserve;
    private ulong SizeOfHeapCommit;
    private UInt32 LoaderFlags;
    private UInt32 NumberOfRvaAndSizes;
    private IMAGE_DATA_DIRECTORY[] DataDirectory;
    public ulong ImageBase { get; private set; }
    public bool HasClrHeader { get; }
    public byte MajorLinkerVersion { get; private set; }
    public bool IsAppContainer { get; }
    public IMAGE_OPTIONAL_HEADER64(BinaryReader br);
    [CompilerGeneratedAttribute]
public ulong get_ImageBase();
    [CompilerGeneratedAttribute]
private void set_ImageBase(ulong value);
    public bool get_HasClrHeader();
    [CompilerGeneratedAttribute]
public byte get_MajorLinkerVersion();
    [CompilerGeneratedAttribute]
private void set_MajorLinkerVersion(byte value);
    public bool get_IsAppContainer();
    public IMAGE_DATA_DIRECTORY GetDataDirectory(UInt32 index);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_SECTION_HEADER : object {
    public static int IMAGE_SIZEOF_SHORT_NAME;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PhysicalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <VirtualAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SizeOfRawData>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PointerToRawData>k__BackingField;
    private UInt32 VirtualSize;
    private UInt32 PointerToRelocations;
    private UInt32 PointerToLinenumbers;
    private ushort NumberOfRelocations;
    private ushort NumberOfLinenumbers;
    private UInt32 Characteristics;
    public string Name { get; private set; }
    public UInt32 PhysicalAddress { get; private set; }
    public UInt32 VirtualAddress { get; private set; }
    public UInt32 SizeOfRawData { get; private set; }
    public UInt32 PointerToRawData { get; private set; }
    public IMAGE_SECTION_HEADER(BinaryReader br);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_PhysicalAddress();
    [CompilerGeneratedAttribute]
private void set_PhysicalAddress(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_VirtualAddress();
    [CompilerGeneratedAttribute]
private void set_VirtualAddress(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SizeOfRawData();
    [CompilerGeneratedAttribute]
private void set_SizeOfRawData(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PointerToRawData();
    [CompilerGeneratedAttribute]
private void set_PointerToRawData(UInt32 value);
}
internal interface Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ITestMetaDataReader {
    public abstract virtual TestMetaData ReadMetaData(PEReader reader);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.PEConstants : object {
    public static UInt32 IMAGE_DIRECTORY_ENTRY_EXPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_IMPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_RESOURCE;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_EXCEPTION;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_SECURITY;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_BASERELOC;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_DEBUG;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_ARCHITECTURE;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_GLOBALPTR;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_TLS;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_IAT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR;
    public static ulong IMAGE_ORDINAL_FLAG64;
    public static UInt32 IMAGE_ORDINAL_FLAG32;
    public static UInt32 IMAGE_REL_BASED_ABSOLUTE;
    public static UInt32 IMAGE_REL_BASED_HIGHLOW;
    public static UInt32 IMAGE_REL_BASED_DIR64;
    public static ushort IMAGE_FILE_MACHINE_I386;
    public static ushort IMAGE_FILE_MACHINE_IA64;
    public static ushort IMAGE_FILE_MACHINE_AMD64;
    public static ushort IMAGE_FILE_MACHINE_ARMNT;
    public static ushort IMAGE_FILE_MACHINE_ARM64;
    public static ushort IMAGE_DLLCHARACTERISTICS_APPCONTAINER;
    public static UInt32 InvalidRVA;
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.PEReader : object {
    private string _filePath;
    private bool _is32Bits;
    private bool _isClr;
    private bool _isAppContainer;
    private IMAGE_FILE_HEADER _fileHeader;
    private IMAGE_OPTIONAL_HEADER32 _optionalHeader32;
    private IMAGE_OPTIONAL_HEADER64 _optionalHeader64;
    private IMAGE_SECTION[] _sections;
    private static byte ValidLinkerVersion;
    public string FilePath { get; }
    public bool Is32Bits { get; }
    public bool IsClr { get; }
    public bool IsAppContainer { get; }
    public ulong ImageBase { get; }
    public PEReader(string filePath);
    public string get_FilePath();
    public bool get_Is32Bits();
    public bool get_IsClr();
    public bool get_IsAppContainer();
    public ulong get_ImageBase();
    public IMAGE_SECTION GetSection(string name);
    public IMAGE_FILE_HEADER GetFileHeader();
    public bool GetRawDataVA(ulong va, UInt32 len, Byte[]& rawData, Int32& index);
    private bool GetRawData(UInt32 rva, UInt32 len, Byte[]& rawData, Int32& index);
    internal bool IsValidLinker();
    internal List`1<string> ProcessImports();
    private string GetDllName(Byte[] rawData, int index);
    private IMAGE_DATA_DIRECTORY GetDataDirectory(UInt32 index);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AttributeValueNotNumber { get; }
    internal static string BadFilePathUri { get; }
    internal static string BadMetaData { get; }
    internal static string BadTestAttributeCategory { get; }
    internal static string BadTestAttributeName { get; }
    internal static string BadTestAttributeValue { get; }
    internal static string EndOfStream { get; }
    internal static string InvalidPEHeader { get; }
    internal static string InvalidTextFile { get; }
    internal static string ManagedCPPNotSupported { get; }
    internal static string MissingClassName { get; }
    internal static string MissingHelperMethod { get; }
    internal static string MissingLineNoInfo { get; }
    internal static string MissingSourceFileInfo { get; }
    internal static string NonNullTerminatedString { get; }
    internal static string NoSupportFor64BitBinaryIn32BitProcess { get; }
    internal static string NoTestMetaData { get; }
    internal static string NoTestVersionInfo { get; }
    internal static string NotFullPath { get; }
    internal static string NotSupportedMachineType { get; }
    internal static string NotSupportedVersion { get; }
    internal static string NullTestMetaData { get; }
    internal static string NullVersionArg { get; }
    internal static string WrongIndex { get; }
    internal static string WrongPlatformString { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AttributeValueNotNumber();
    internal static string get_BadFilePathUri();
    internal static string get_BadMetaData();
    internal static string get_BadTestAttributeCategory();
    internal static string get_BadTestAttributeName();
    internal static string get_BadTestAttributeValue();
    internal static string get_EndOfStream();
    internal static string get_InvalidPEHeader();
    internal static string get_InvalidTextFile();
    internal static string get_ManagedCPPNotSupported();
    internal static string get_MissingClassName();
    internal static string get_MissingHelperMethod();
    internal static string get_MissingLineNoInfo();
    internal static string get_MissingSourceFileInfo();
    internal static string get_NonNullTerminatedString();
    internal static string get_NoSupportFor64BitBinaryIn32BitProcess();
    internal static string get_NoTestMetaData();
    internal static string get_NoTestVersionInfo();
    internal static string get_NotFullPath();
    internal static string get_NotSupportedMachineType();
    internal static string get_NotSupportedVersion();
    internal static string get_NullTestMetaData();
    internal static string get_NullVersionArg();
    internal static string get_WrongIndex();
    internal static string get_WrongPlatformString();
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.SpecialMethod : TestMethod {
    public SpecialMethod(TestMetaData metaData, string className, string methodName);
    protected virtual string GetHelperMethodDecoratedName();
    protected virtual TestClass GetTestClassImpl();
    protected virtual SpecialMethod GetInitializeMethodImpl();
    protected virtual SpecialMethod GetCleanupMethodImpl();
    protected virtual string GetNameImpl();
    protected virtual Dictionary`2<string, TestAttribute> GetAttributesImpl();
}
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; private set; }
    public TestAttribute(string attributeName, string attributeValue);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public static IEnumerable`1<TestAttribute> GetAttributes(CppTestCase testCase);
    public static TestAttribute GetAttribute(CppTestCase testCase, string attributeName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestClass : TestMemberBase {
    internal string HelperMethodDecoratedName { get; }
    public TestClass(TestMetaData metaData);
    internal string get_HelperMethodDecoratedName();
    public static TestClass GetTestClass(TestMetaData metaData, string className);
    public IEnumerable`1<TestMethod> GetTestMethods();
    protected abstract virtual Dictionary`2<string, TestMethod> GetTestMethodsImpl();
    protected abstract virtual string GetHelperMethodDecoratedName();
}
internal abstract class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestMemberBase : object {
    private TestMetaData testMetaData;
    public string Name { get; }
    public IEnumerable`1<TestAttribute> Attributes { get; }
    public SpecialMethod InitializeMethod { get; }
    public SpecialMethod CleanupMethod { get; }
    protected TestMetaData TestMetaData { get; }
    public TestMemberBase(TestMetaData metaData);
    public string get_Name();
    public IEnumerable`1<TestAttribute> get_Attributes();
    public SpecialMethod get_InitializeMethod();
    public SpecialMethod get_CleanupMethod();
    protected TestMetaData get_TestMetaData();
    protected abstract virtual string GetNameImpl();
    protected abstract virtual Dictionary`2<string, TestAttribute> GetAttributesImpl();
    protected abstract virtual SpecialMethod GetInitializeMethodImpl();
    protected abstract virtual SpecialMethod GetCleanupMethodImpl();
}
internal abstract class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestMetaData : object {
    private string filePath;
    private static string TestVersionSectionName;
    public string FilePath { get; }
    public ExecutionPlatform Platform { get; }
    public bool IsAppContainer { get; }
    protected TestMetaData(string path);
    public static TestMetaData GetTestMetaData(string uri);
    public string get_FilePath();
    public ExecutionPlatform get_Platform();
    public bool get_IsAppContainer();
    public SpecialMethod GetInitializeMethod();
    public SpecialMethod GetCleanupMethod();
    public SpecialMethod GetInitializeMethod(string className, bool isMethod);
    public SpecialMethod GetCleanupMethod(string className, bool isMethod);
    public Dictionary`2<string, TestClass> GetClasses();
    public Dictionary`2<string, TestMethod> GetMethods(string className);
    public Dictionary`2<string, TestAttribute> GetAttributes();
    public Dictionary`2<string, TestAttribute> GetAttributes(string className);
    public Dictionary`2<string, TestAttribute> GetAttributes(string className, string methodName);
    public string GetSourceFile(string className, string methodName);
    public int GetLineNumber(string className, string methodName);
    public string GetClassHelperDecoratedName(string className);
    public string GetMethodHelperDecoratedName(string className, string methodName);
    protected abstract virtual SpecialMethod GetInitializeMethodImpl();
    protected abstract virtual SpecialMethod GetCleanupMethodImpl();
    protected abstract virtual SpecialMethod GetInitializeMethodImpl(string className, bool isMethod);
    protected abstract virtual SpecialMethod GetCleanupMethodImpl(string className, bool isMethod);
    protected abstract virtual Dictionary`2<string, TestClass> GetClassesImpl();
    protected abstract virtual Dictionary`2<string, TestMethod> GetMethodsImpl(string className);
    protected abstract virtual Dictionary`2<string, TestAttribute> GetAttributesImpl();
    protected abstract virtual Dictionary`2<string, TestAttribute> GetAttributesImpl(string className);
    protected abstract virtual Dictionary`2<string, TestAttribute> GetAttributesImpl(string className, string methodName);
    protected abstract virtual string GetSourceFileImpl(string className, string methodName);
    protected abstract virtual int GetLineNumberImpl(string className, string methodName);
    protected abstract virtual string GetClassHelperDecoratedNameImpl(string className);
    protected abstract virtual string GetMethodHelperDecoratedNameImpl(string className, string methodName);
    protected abstract virtual ExecutionPlatform GetPlatformImpl();
    protected abstract virtual bool IsAppContainerImpl();
    private static Version ConvertToVersion(UInt32 versionInfo);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestMetaDataReaderFactory : object {
    private static Version SupportedVersion;
    private static TestMetaDataReaderFactory();
    public static ITestMetaDataReader GetTestMetaDataReader(Version versionInfo);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestMetaDataReaderForLatestVersion : object {
    private Version versionInfo;
    public TestMetaDataReaderForLatestVersion(Version version);
    public sealed virtual TestMetaData ReadMetaData(PEReader reader);
}
internal abstract class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestMethod : TestMemberBase {
    private string testClassName;
    private string testMethodName;
    private string sourceFile;
    private int lineNumber;
    internal string HelperMethodDecoratedName { get; }
    protected string ClassName { get; }
    protected string MethodName { get; }
    public string Source { get; }
    public int LineNumber { get; }
    public TestMethod(TestMetaData metaData);
    protected TestMethod(TestMetaData metaData, string className, string methodName);
    internal string get_HelperMethodDecoratedName();
    protected string get_ClassName();
    protected string get_MethodName();
    public string get_Source();
    public int get_LineNumber();
    public static TestMethod GetTestMethod(TestMetaData metaData, string className, string methodName);
    protected abstract virtual TestClass GetTestClassImpl();
    protected abstract virtual string GetHelperMethodDecoratedName();
}
internal abstract class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestModule : TestMemberBase {
    public ExecutionPlatform Platform { get; }
    public bool IsAppContainer { get; }
    public TestModule(TestMetaData metaData);
    public ExecutionPlatform get_Platform();
    public bool get_IsAppContainer();
    public static TestModule LoadFrom(string filePath);
    protected abstract virtual Dictionary`2<string, TestClass> GetTestClassesImpl();
    public IEnumerable`1<TestClass> GetTestClasses();
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.VcRuntimeReferencesHelper : object {
    private static string VcRuntimeRef;
    private static string UapAppApiRef;
    private static string UapDebugAppApiRef;
    internal static IEnumerable`1<string> GetVcRuntimeReferences(IEnumerable`1<string> references);
    internal static bool ContainsUapAppApiRef(IEnumerable`1<string> references);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
