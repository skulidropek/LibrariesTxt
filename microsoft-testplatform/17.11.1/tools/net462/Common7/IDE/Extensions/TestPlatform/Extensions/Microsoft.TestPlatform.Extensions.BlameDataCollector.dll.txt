[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataCollectorFriendlyNameAttribute("Blame")]
[DataCollectorTypeUriAttribute("datacollector://Microsoft/TestPlatform/Extensions/Blame/v1")]
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameCollector : DataCollector {
    private static int DefaultInactivityTimeInMinutes;
    [NullableAttribute("2")]
private DataCollectionSink _dataCollectionSink;
    [NullableAttribute("2")]
private DataCollectionEnvironmentContext _context;
    [NullableAttribute("2")]
private DataCollectionEvents _events;
    [NullableAttribute("2")]
private DataCollectionLogger _logger;
    private IProcessDumpUtility _processDumpUtility;
    [NullableAttribute("2")]
private List`1<Guid> _testSequence;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Guid, BlameTestObject> _testObjectDictionary;
    private IBlameReaderWriter _blameReaderWriter;
    private IFileHelper _fileHelper;
    private IProcessHelper _processHelper;
    [NullableAttribute("2")]
private XmlElement _configurationElement;
    private int _testStartCount;
    private int _testEndCount;
    private bool _collectProcessDumpOnCrash;
    private bool _collectProcessDumpOnHang;
    private bool _monitorPostmortemDumpFolder;
    private bool _collectDumpAlways;
    [NullableAttribute("2")]
private string _attachmentGuid;
    private CrashDumpType _crashDumpType;
    private Nullable`1<HangDumpType> _hangDumpType;
    private bool _inactivityTimerAlreadyFired;
    [NullableAttribute("2")]
private IInactivityTimer _inactivityTimer;
    private TimeSpan _inactivityTimespan;
    private int _testHostProcessId;
    [NullableAttribute("2")]
private string _testHostProcessName;
    [NullableAttribute("2")]
private string _targetFramework;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, string>> _environmentVariables;
    private bool _uploadDumpFiles;
    [NullableAttribute("2")]
private string _tempDirectory;
    [NullableAttribute("2")]
private string _monitorPostmortemDumpFolderPath;
    internal BlameCollector(IBlameReaderWriter blameReaderWriter, IProcessDumpUtility processDumpUtility, IInactivityTimer inactivityTimer, IFileHelper fileHelper, IProcessHelper processHelper);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> GetTestExecutionEnvironmentVariables();
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    private void CollectDumpAndAbortTesthost();
    private bool ValidateMonitorPostmortemDebuggerParameters(XmlElement collectDumpNode);
    private void ValidateAndAddCrashProcessDumpParameters(XmlElement collectDumpNode);
    internal static string FormatBlameParameterValueIncorrectMessage(XmlAttribute attribute, String[] validValues);
    private void ValidateAndAddHangProcessDumpParameters(XmlElement collectDumpNode);
    private void EventsTestCaseStart(object sender, TestCaseStartEventArgs e);
    private void EventsTestCaseEnd(object sender, TestCaseEndEventArgs e);
    private void SessionEndedHandler(object sender, SessionEndEventArgs args);
    private void TestHostLaunchedHandler(object sender, TestHostLaunchedEventArgs args);
    private void ResetInactivityTimer();
    private void DeregisterEvents();
    private string GetTempDirectory();
    private string GetDumpDirectory();
    [CompilerGeneratedAttribute]
private void <CollectDumpAndAbortTesthost>b__35_0(string m);
    [CompilerGeneratedAttribute]
private void <TestHostLaunchedHandler>b__43_0(string m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[FriendlyNameAttribute("Blame")]
[ExtensionUriAttribute("logger://Microsoft/TestPlatform/Extensions/Blame/v1")]
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger : object {
    public static string ExtensionUri;
    public static string FriendlyName;
    private IBlameReaderWriter _blameReaderWriter;
    private IOutput _output;
    protected BlameLogger(IOutput output, IBlameReaderWriter blameReaderWriter);
    public sealed virtual void Initialize(TestLoggerEvents events, string testRunDictionary);
    private void TestRunCompleteHandler(object sender, TestRunCompleteEventArgs e);
    private IEnumerable`1<string> GetFaultyTestCaseNames(TestRunCompleteEventArgs e);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ExecutorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    public Guid Id { get; public set; }
    public string FullyQualifiedName { get; public set; }
    public Uri ExecutorUri { get; public set; }
    public string Source { get; public set; }
    public bool IsCompleted { get; public set; }
    public string DisplayName { get; public set; }
    [NullableContextAttribute("1")]
public BlameTestObject(string fullyQualifiedName, Uri executorUri, string source);
    [NullableContextAttribute("1")]
public BlameTestObject(TestCase testCase);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ExecutorUri();
    [CompilerGeneratedAttribute]
public void set_ExecutorUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
public void set_IsCompleted(bool value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.TestPlatform.Extensions.BlameDataCollector.Constants : object {
    public static string BlameRootNode;
    public static string BlameTestNode;
    public static string AttachmentFileName;
    public static string TestNameAttribute;
    public static string TestSourceAttribute;
    public static string TestCompletedAttribute;
    public static string TestDisplayNameAttribute;
    public static string BlameDataCollectorName;
    public static string DumpModeKey;
    public static string HangDumpModeKey;
    public static string ProcdumpProcess;
    public static string Procdump64Process;
    public static string ProcdumpUnixProcess;
    public static string CollectDumpAlwaysKey;
    public static string CollectDumpOnTestSessionHang;
    public static string MonitorPostmortemDebugger;
    public static string TestTimeout;
    public static string DumpTypeKey;
    public static string HangDumpTypeKey;
    public static string TrueConfigurationValue;
    public static string FalseConfigurationValue;
    public static string TargetFramework;
}
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.CrashDumperFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual ICrashDumper Create(string targetFramework);
}
internal enum Microsoft.TestPlatform.Extensions.BlameDataCollector.CrashDumpType : Enum {
    public int value__;
    public static CrashDumpType Mini;
    public static CrashDumpType Full;
}
public enum Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption : Enum {
    public int value__;
    public static DumpTypeOption Full;
    public static DumpTypeOption WithHeap;
    public static DumpTypeOption Mini;
}
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.HangDumperFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<string> <LogWarning>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<string> LogWarning { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<string> get_LogWarning();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogWarning(Action`1<string> value);
    [NullableContextAttribute("1")]
public sealed virtual IHangDumper Create(string targetFramework);
}
internal enum Microsoft.TestPlatform.Extensions.BlameDataCollector.HangDumpType : Enum {
    public int value__;
    public static HangDumpType None;
    public static HangDumpType Mini;
    public static HangDumpType Full;
}
[NullableContextAttribute("1")]
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.IBlameReaderWriter {
    public abstract virtual string WriteTestSequence(List`1<Guid> testSequence, Dictionary`2<Guid, BlameTestObject> testObjectDictionary, string filePath);
    public abstract virtual List`1<BlameTestObject> ReadTestSequence(string filePath);
}
[NullableContextAttribute("1")]
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumper {
    public abstract virtual void AttachToTargetProcess(int processId, string outputDirectory, DumpTypeOption dumpType, bool collectAlways, Action`1<string> logWarning);
    public abstract virtual void WaitForDumpToFinish();
    public abstract virtual void DetachFromTargetProcess(int processId);
    public abstract virtual IEnumerable`1<string> GetDumpFiles(bool processCrashed);
}
[NullableContextAttribute("1")]
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumperFactory {
    public abstract virtual ICrashDumper Create(string targetFramework);
}
[NullableContextAttribute("1")]
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumper {
    public abstract virtual void Dump(int processId, string outputDirectory, DumpTypeOption dumpType);
}
[NullableContextAttribute("1")]
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumperFactory {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<string> LogWarning { get; public set; }
    public abstract virtual Action`1<string> get_LogWarning();
    public abstract virtual void set_LogWarning(Action`1<string> value);
    public abstract virtual IHangDumper Create(string targetFramework);
}
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.IInactivityTimer {
    public abstract virtual void ResetTimer(TimeSpan inactivityTimespan);
}
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer : object {
    [NullableAttribute("1")]
private Timer _timer;
    [NullableContextAttribute("1")]
public InactivityTimer(Action timerCallback);
    public sealed virtual void ResetTimer(TimeSpan inactivityTimespan);
    public sealed virtual void Dispose();
}
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.INativeMethodsHelper {
    public abstract virtual bool Is64Bit(IntPtr processHandle);
}
[NullableContextAttribute("1")]
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcDumpArgsBuilder {
    public abstract virtual string BuildTriggerBasedProcDumpArgs(int processId, string filename, IEnumerable`1<string> procDumpExceptionsList, bool isFullDump);
    public abstract virtual string BuildHangBasedProcDumpArgs(int processId, string filename, bool isFullDump);
}
[NullableContextAttribute("1")]
public interface Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcessDumpUtility {
    public abstract virtual IEnumerable`1<string> GetDumpFiles(bool warnOnNoDumpFiles, bool processCrashed);
    public abstract virtual void StartTriggerBasedProcessDump(int processId, string testResultsDirectory, bool isFullDump, string targetFramework, bool collectAlways, Action`1<string> logWarning);
    public abstract virtual void StartHangBasedProcessDump(int processId, string testResultsDirectory, bool isFullDump, string targetFramework, Action`1<string> logWarning);
    public abstract virtual void DetachFromTargetProcess(int targetProcessId);
}
internal enum Microsoft.TestPlatform.Extensions.BlameDataCollector.MiniDumpTypeOption : Enum {
    public int value__;
    public static MiniDumpTypeOption Full;
    public static MiniDumpTypeOption WithHeap;
    public static MiniDumpTypeOption Mini;
}
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.MiniDumpWriteDump : object {
    [NullableContextAttribute("1")]
public static void CollectDumpUsingMiniDumpWriteDump(Process process, string outputFile, MiniDumpTypeOption type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.NetClientCrashDumper : object {
    [NullableAttribute("2")]
private string _outputDirectory;
    private IFileHelper _fileHelper;
    public NetClientCrashDumper(IFileHelper fileHelper);
    public sealed virtual void AttachToTargetProcess(int processId, string outputDirectory, DumpTypeOption dumpType, bool collectAlways, Action`1<string> logWarning);
    public sealed virtual void DetachFromTargetProcess(int processId);
    public sealed virtual IEnumerable`1<string> GetDumpFiles(bool _);
    public sealed virtual void WaitForDumpToFinish();
}
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.NetClientHangDumper : object {
    [NullableContextAttribute("1")]
public sealed virtual void Dump(int processId, string outputDirectory, DumpTypeOption type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpArgsBuilder : object {
    private IEnvironmentVariableHelper _environmentVariableHelper;
    internal ProcDumpArgsBuilder(IEnvironmentVariableHelper environmentVariableHelper);
    public sealed virtual string BuildTriggerBasedProcDumpArgs(int processId, string filename, IEnumerable`1<string> procDumpExceptionsList, bool isFullDump);
    public sealed virtual string BuildHangBasedProcDumpArgs(int processId, string filename, bool isFullDump);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper : object {
    private static IEnumerable`1<string> ProcDumpExceptionsList;
    private IProcessHelper _processHelper;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    [NullableAttribute("2")]
private string _procDumpPath;
    [NullableAttribute("2")]
private Process _procDumpProcess;
    [NullableAttribute("2")]
private string _tempDirectory;
    [NullableAttribute("2")]
private string _dumpFileName;
    private bool _collectAlways;
    [NullableAttribute("2")]
private string _outputDirectory;
    [NullableAttribute("2")]
private Process _process;
    [NullableAttribute("2")]
private string _outputFilePrefix;
    private bool _isCrashDumpInProgress;
    private int _timeout;
    private ProcDumpExecutableHelper _procDumpExecutableHelper;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`2<object, string> OutputReceivedCallback { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Action`2<object, string> ErrorReceivedCallback { get; }
    public ProcDumpDumper(IProcessHelper processHelper, IFileHelper fileHelper, IEnvironment environment);
    internal ProcDumpDumper(IProcessHelper processHelper, IFileHelper fileHelper, IEnvironment environment, IEnvironmentVariableHelper environmentVariableHelper);
    private static ProcDumpDumper();
    protected Action`2<object, string> get_OutputReceivedCallback();
    internal static Action`2<object, string> get_ErrorReceivedCallback();
    public sealed virtual void WaitForDumpToFinish();
    public sealed virtual void AttachToTargetProcess(int processId, string outputDirectory, DumpTypeOption dumpType, bool collectAlways, Action`1<string> logWarning);
    public sealed virtual void DetachFromTargetProcess(int targetProcessId);
    public sealed virtual IEnumerable`1<string> GetDumpFiles(bool processCrashed);
    public sealed virtual void Dump(int processId, string outputDirectory, DumpTypeOption dumpType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <get_OutputReceivedCallback>b__20_0(object process, string data);
    [CompilerGeneratedAttribute]
private bool <DetachFromTargetProcess>b__25_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetDumpFiles>b__26_0(string dump);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcessCodeMethods : object {
    private static int InvalidProcessId;
    [ExtensionAttribute]
public static void Suspend(Process process);
    [ExtensionAttribute]
public static List`1<ProcessTreeNode> GetProcessTree(Process process);
    internal static int GetParentPid(Process process);
    internal static int GetParentPidWindows(Process process);
    internal static int GetParentPidLinux(Process process);
    internal static int GetParentPidMacOs(Process process);
    private static void ResolveChildren(Process parent, List`1<ProcessTreeNode> acc, int level, int limit);
    private static bool IsChildCandidate(Process child, Process parent);
    private static int NtQueryInformationProcess(IntPtr processHandle, int processInformationClass, ProcessBasicInformation& processInformation, int processInformationLength, Int32& returnLength);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcessDumpUtility : object {
    private IProcessHelper _processHelper;
    private IFileHelper _fileHelper;
    private IHangDumperFactory _hangDumperFactory;
    private ICrashDumperFactory _crashDumperFactory;
    [NullableAttribute("2")]
private ICrashDumper _crashDumper;
    [NullableAttribute("2")]
private string _hangDumpDirectory;
    private bool _wasHangDumped;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Action`2<object, string> OutputReceivedCallback { get; }
    public ProcessDumpUtility(IProcessHelper processHelper, IFileHelper fileHelper, IHangDumperFactory hangDumperFactory, ICrashDumperFactory crashDumperFactory);
    protected Action`2<object, string> get_OutputReceivedCallback();
    public sealed virtual IEnumerable`1<string> GetDumpFiles(bool warnOnNoDumpFiles, bool processCrashed);
    public sealed virtual void StartHangBasedProcessDump(int processId, string tempDirectory, bool isFullDump, string targetFramework, Action`1<string> logWarning);
    [MemberNotNullAttribute("_crashDumper")]
public sealed virtual void StartTriggerBasedProcessDump(int processId, string testResultsDirectory, bool isFullDump, string targetFramework, bool collectAlways, Action`1<string> logWarning);
    public sealed virtual void DetachFromTargetProcess(int targetProcessId);
    private void HangDump(int processId, string tempDirectory, DumpTypeOption dumpType, string targetFramework, Action`1<string> logWarning);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcessTreeNode : object {
    [CompilerGeneratedAttribute]
private Process <Process>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Process <ParentProcess>k__BackingField;
    public Process Process { get; public set; }
    public int Level { get; public set; }
    public int ParentId { get; public set; }
    public Process ParentProcess { get; public set; }
    [CompilerGeneratedAttribute]
public Process get_Process();
    [CompilerGeneratedAttribute]
public void set_Process(Process value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(int value);
    [CompilerGeneratedAttribute]
public Process get_ParentProcess();
    [CompilerGeneratedAttribute]
public void set_ParentProcess(Process value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbortedTestRun { get; }
    internal static string BlameParameterKeyIncorrect { get; }
    internal static string BlameParameterValueIncorrect { get; }
    internal static string DumpFileNotGeneratedErrorMessage { get; }
    internal static string Dumping { get; }
    internal static string DumpingTree { get; }
    internal static string InactivityTimeout { get; }
    internal static string Minutes { get; }
    internal static string MonitorPostmortemDebuggerInvalidDumpDirectoryPathParameter { get; }
    internal static string NotGeneratingSequenceFile { get; }
    internal static string ProcDumpCouldNotStart { get; }
    internal static string ProcDumpEnvVarEmpty { get; }
    internal static string ProcDumpNotFound { get; }
    internal static string ProcDumpNotGenerated { get; }
    internal static string Seconds { get; }
    internal static string UnexpectedValueForInactivityTimespanValue { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbortedTestRun();
    internal static string get_BlameParameterKeyIncorrect();
    internal static string get_BlameParameterValueIncorrect();
    internal static string get_DumpFileNotGeneratedErrorMessage();
    internal static string get_Dumping();
    internal static string get_DumpingTree();
    internal static string get_InactivityTimeout();
    internal static string get_Minutes();
    internal static string get_MonitorPostmortemDebuggerInvalidDumpDirectoryPathParameter();
    internal static string get_NotGeneratingSequenceFile();
    internal static string get_ProcDumpCouldNotStart();
    internal static string get_ProcDumpEnvVarEmpty();
    internal static string get_ProcDumpNotFound();
    internal static string get_ProcDumpNotGenerated();
    internal static string get_Seconds();
    internal static string get_UnexpectedValueForInactivityTimespanValue();
}
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.SigtrapDumper : object {
    [NullableContextAttribute("1")]
public sealed virtual void Dump(int processId, string outputDirectory, DumpTypeOption type);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.TestPlatform.Extensions.BlameDataCollector.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
internal static class Microsoft.TestPlatform.Extensions.BlameDataCollector.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.Win32NamedEvent : object {
    private static UInt32 EventModifyState;
    private string _eventName;
    public Win32NamedEvent(string eventName);
    public void Set();
    private static bool CloseHandle(IntPtr hObject);
    private static bool SetEvent(IntPtr hEvent);
    private static IntPtr OpenEvent(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.TestPlatform.Extensions.BlameDataCollector.WindowsHangDumper : object {
    private Action`1<string> _logWarning;
    private IProcessHelper _processHelper;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Action`2<object, string> OutputReceivedCallback { get; }
    public WindowsHangDumper(IProcessHelper processHelper, Action`1<string> logWarning);
    private static Action`2<object, string> get_OutputReceivedCallback();
    public sealed virtual void Dump(int processId, string outputDirectory, DumpTypeOption type);
    internal static void CollectDump(IProcessHelper processHelper, Process process, string outputFile, DumpTypeOption type);
    private static MiniDumpTypeOption FromDumpType(DumpTypeOption type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.TestPlatform.Extensions.BlameDataCollector.XmlReaderWriter : object {
    private IFileHelper _fileHelper;
    protected XmlReaderWriter(IFileHelper fileHelper);
    public sealed virtual string WriteTestSequence(List`1<Guid> testSequence, Dictionary`2<Guid, BlameTestObject> testObjectDictionary, string filePath);
    public sealed virtual List`1<BlameTestObject> ReadTestSequence(string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.Execution.DebuggerBreakpoint : object {
    internal static void AttachVisualStudioDebugger(string environmentVariable);
    private static bool AttachVs(Process process, Nullable`1<int> vsPid);
    [NullableContextAttribute("2")]
private static string FindAttachVs();
    private static string FindOnPath(string exeName);
    internal static void WaitForDebugger(string environmentVariable);
    internal static void WaitForNativeDebugger(string environmentVariable);
    private static void Break();
    private static bool ShouldNotBreak();
    private static void BreakNative();
    internal static bool IsDebuggerPresent();
    internal static void DebugBreak();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Execution.ProcDumpExecutableHelper : object {
    private static string ProcdumpUnixProcess;
    private IProcessHelper _processHelper;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    public ProcDumpExecutableHelper(IProcessHelper processHelper, IFileHelper fileHelper, IEnvironment environment, IEnvironmentVariableHelper environmentVariableHelper);
    public static string ProcDumpFileName(PlatformArchitecture architecture);
    public bool TryGetProcDumpExecutable(String& path);
    public bool TryGetProcDumpExecutable(int processId, String& path);
    public bool TryGetProcDumpExecutable(PlatformArchitecture architecture, String& path);
    private bool TryGetExecutablePath(string executable, String& executablePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Execution.UiLanguageOverride : object {
    private static string DOTNET_CLI_UI_LANGUAGE;
    private static string VSLANG;
    private static string PreferredUILang;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    private Action`1<CultureInfo> _setDefaultThreadCurrentUICulture;
    public UiLanguageOverride(IEnvironmentVariableHelper environmentVariableHelper, Action`1<CultureInfo> setDefaultThreadCurrentUICulture);
    internal void SetCultureSpecifiedByUser();
    private static void ApplyOverrideToCurrentProcess(CultureInfo language, Action`1<CultureInfo> setDefaultThreadCurrentUICulture);
    private static CultureInfo GetOverriddenUiLanguage(IEnvironmentVariableHelper environmentVariableHelper);
    private static void FlowOverrideToChildProcesses(CultureInfo language, IEnvironmentVariableHelper environmentVariableHelper);
    private static void SetIfNotAlreadySet(string environmentVariableName, string value, IEnvironmentVariableHelper environmentVariableHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.Execution.WellKnownDebugEnvironmentVariables : object {
    public static string VSTEST_BLAMEDATACOLLECTOR_DEBUG;
    public static string VSTEST_DATACOLLECTOR_DEBUG;
    public static string VSTEST_HOST_DEBUG;
    public static string VSTEST_RUNNER_DEBUG;
    public static string VSTEST_DATACOLLECTOR_DEBUG_ATTACHVS;
    public static string VSTEST_HOST_DEBUG_ATTACHVS;
    public static string VSTEST_RUNNER_DEBUG_ATTACHVS;
    public static string VSTEST_HOST_NATIVE_DEBUG;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
internal class Microsoft.VisualStudio.TestPlatform.TestExtensionTypesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <Types>k__BackingField;
    public Type[] Types { get; }
    public TestExtensionTypesAttribute(Type[] types);
    [CompilerGeneratedAttribute]
public Type[] get_Types();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NativeIntegerAttribute : Attribute {
    public Boolean[] TransformFlags;
    public NativeIntegerAttribute(Boolean[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
