public class Microsoft.Cci.Action`2 : MulticastDelegate {
    public Action`2(object object, IntPtr method);
    public virtual void Invoke(P p, R r);
    public virtual IAsyncResult BeginInvoke(P p, R r, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Cci.AssemblyIdentity : ModuleIdentity {
    private string culture;
    private IEnumerable`1<byte> publicKeyToken;
    private Version version;
    public AssemblyIdentity ContainingAssembly { get; }
    public string Culture { get; }
    public IEnumerable`1<byte> PublicKeyToken { get; }
    public Version Version { get; }
    public AssemblyIdentity(IName name, string culture, Version version, IEnumerable`1<byte> publicKeyToken, string location);
    public AssemblyIdentity(AssemblyIdentity template, string location);
    private void ObjectInvariant();
    public virtual AssemblyIdentity get_ContainingAssembly();
    public string get_Culture();
    public sealed virtual bool Equals(object obj);
    internal sealed virtual int ComputeHashCode();
    public sealed virtual int GetHashCode();
    public IEnumerable`1<byte> get_PublicKeyToken();
    public sealed virtual string ToString();
    public Version get_Version();
}
public class Microsoft.Cci.AssemblyName : object {
    private IAssemblyName assemblyName;
    internal string Name { get; }
    internal Version Version { get; }
    internal string Culture { get; }
    internal Byte[] PublicKeyToken { get; }
    internal string StrongName { get; }
    internal string CodeBase { get; }
    internal AssemblyName(IAssemblyName assemblyName);
    internal string get_Name();
    internal Version get_Version();
    internal string get_Culture();
    internal Byte[] get_PublicKeyToken();
    internal string get_StrongName();
    internal string get_CodeBase();
    public virtual string ToString();
    internal string GetLocation();
    private string ReadString(UInt32 assemblyNameProperty);
    private ushort ReadUInt16(UInt32 assemblyNameProperty);
    private Byte[] ReadBytes(UInt32 assemblyNameProperty);
    private static int CreateAssemblyCache(IAssemblyCache& ppAsmCache, UInt32 dwReserved);
}
public static class Microsoft.Cci.AttributeHelper : object {
    public static bool IsAttributeType(ITypeDefinition typeDefinition);
    public static bool Contains(IEnumerable`1<ICustomAttribute> attributes, ITypeReference attributeType);
    public static bool AllowMultiple(ITypeDefinition attributeType, INameTable nameTable);
    public static bool Inherited(ITypeDefinition attributeType, INameTable nameTable);
    public static AttributeTargets ValidOn(ITypeDefinition attributeType);
}
[ObsoleteAttribute("Please use MetadataTraverser")]
public class Microsoft.Cci.BaseMetadataTraverser : object {
    protected Stack path;
    protected bool stopTraversal;
    public virtual void Visit(IEnumerable`1<IAliasForType> aliasesForTypes);
    public virtual void Visit(IAliasForType aliasForType);
    public virtual void VisitReference(IAliasForType aliasForType);
    public virtual void Visit(IArrayTypeReference arrayTypeReference);
    public virtual void Visit(IAssembly assembly);
    public virtual void Visit(IEnumerable`1<IAssemblyReference> assemblyReferences);
    public virtual void Visit(IAssemblyReference assemblyReference);
    public virtual void Visit(IEnumerable`1<ICustomAttribute> customAttributes);
    public virtual void Visit(ICustomAttribute customAttribute);
    public virtual void Visit(IEnumerable`1<ICustomModifier> customModifiers);
    public virtual void Visit(ICustomModifier customModifier);
    public virtual void Visit(IEnumerable`1<IEventDefinition> events);
    public virtual void Visit(IEventDefinition eventDefinition);
    public virtual void Visit(IEnumerable`1<IFieldDefinition> fields);
    public virtual void Visit(IFieldDefinition fieldDefinition);
    public virtual void Visit(IFieldReference fieldReference);
    public virtual void Visit(IEnumerable`1<IFileReference> fileReferences);
    public virtual void Visit(IFileReference fileReference);
    public virtual void Visit(IFunctionPointerTypeReference functionPointerTypeReference);
    public virtual void Visit(IGenericMethodInstanceReference genericMethodInstanceReference);
    public virtual void Visit(IEnumerable`1<IGenericMethodParameter> genericParameters);
    public virtual void Visit(IGenericMethodParameter genericMethodParameter);
    public virtual void Visit(IGenericMethodParameterReference genericMethodParameterReference);
    public virtual void Visit(IGenericParameter genericParameter);
    public virtual void Visit(IGenericTypeInstanceReference genericTypeInstanceReference);
    public virtual void Visit(IEnumerable`1<IGenericTypeParameter> genericParameters);
    public virtual void Visit(IGenericTypeParameter genericTypeParameter);
    public virtual void Visit(IGenericTypeParameterReference genericTypeParameterReference);
    public virtual void Visit(IGlobalFieldDefinition globalFieldDefinition);
    public virtual void Visit(IGlobalMethodDefinition globalMethodDefinition);
    public virtual void Visit(IEnumerable`1<ILocalDefinition> localDefinitions);
    public virtual void Visit(ILocalDefinition localDefinition);
    public virtual void VisitReference(ILocalDefinition localDefinition);
    public virtual void Visit(IManagedPointerTypeReference managedPointerTypeReference);
    public virtual void Visit(IMarshallingInformation marshallingInformation);
    public virtual void Visit(IMetadataConstant constant);
    public virtual void Visit(IMetadataCreateArray createArray);
    public virtual void Visit(IEnumerable`1<IMetadataExpression> expressions);
    public virtual void Visit(IMetadataExpression expression);
    public virtual void Visit(IEnumerable`1<IMetadataNamedArgument> namedArguments);
    public virtual void Visit(IMetadataNamedArgument namedArgument);
    public virtual void Visit(IMetadataTypeOf typeOf);
    public virtual void Visit(IMethodBody methodBody);
    public virtual void Visit(IEnumerable`1<IMethodDefinition> methods);
    public virtual void Visit(IMethodDefinition method);
    public virtual void Visit(IEnumerable`1<IMethodImplementation> methodImplementations);
    public virtual void Visit(IMethodImplementation methodImplementation);
    public virtual void Visit(IEnumerable`1<IMethodReference> methodReferences);
    public virtual void Visit(IMethodReference methodReference);
    public virtual void Visit(IModifiedTypeReference modifiedTypeReference);
    public virtual void Visit(IModule module);
    public virtual void Visit(IEnumerable`1<IModule> modules);
    public virtual void Visit(IEnumerable`1<IModuleReference> moduleReferences);
    public virtual void Visit(IModuleReference moduleReference);
    public virtual void Visit(IEnumerable`1<INamedTypeDefinition> types);
    public virtual void Visit(IEnumerable`1<INamespaceMember> namespaceMembers);
    public virtual void Visit(INamespaceAliasForType namespaceAliasForType);
    public virtual void VisitReference(INamespaceAliasForType namespaceAliasForType);
    public virtual void Visit(INamespaceMember namespaceMember);
    public virtual void Visit(INamespaceTypeDefinition namespaceTypeDefinition);
    public virtual void Visit(INamespaceTypeReference namespaceTypeReference);
    public virtual void Visit(INestedAliasForType nestedAliasForType);
    public virtual void VisitReference(INestedAliasForType nestedAliasForType);
    public virtual void Visit(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    public virtual void Visit(IEnumerable`1<INestedTypeDefinition> nestedTypes);
    public virtual void Visit(INestedTypeDefinition nestedTypeDefinition);
    public virtual void Visit(INestedTypeReference nestedTypeReference);
    public virtual void Visit(INestedUnitNamespace nestedUnitNamespace);
    public virtual void Visit(INestedUnitSetNamespace nestedUnitSetNamespace);
    public virtual void Visit(IEnumerable`1<IOperation> operations);
    public virtual void Visit(IOperation operation);
    public virtual void Visit(IEnumerable`1<IOperationExceptionInformation> operationExceptionInformations);
    public virtual void Visit(IOperationExceptionInformation operationExceptionInformation);
    public virtual void Visit(IEnumerable`1<IParameterDefinition> parameters);
    public virtual void Visit(IParameterDefinition parameterDefinition);
    public virtual void VisitReference(IParameterDefinition parameterDefinition);
    public virtual void Visit(IEnumerable`1<IParameterTypeInformation> parameterTypeInformations);
    public virtual void Visit(IParameterTypeInformation parameterTypeInformation);
    public virtual void Visit(IEnumerable`1<IPESection> peSections);
    public virtual void Visit(IPESection peSection);
    public virtual void Visit(IPlatformInvokeInformation platformInvokeInformation);
    public virtual void Visit(IPointerTypeReference pointerTypeReference);
    public virtual void Visit(IEnumerable`1<IPropertyDefinition> properties);
    public virtual void Visit(IPropertyDefinition propertyDefinition);
    public virtual void Visit(IEnumerable`1<IResourceReference> resourceReferences);
    public virtual void Visit(IResourceReference resourceReference);
    public virtual void Visit(IRootUnitNamespace rootUnitNamespace);
    public virtual void Visit(IRootUnitSetNamespace rootUnitSetNamespace);
    public virtual void Visit(ISecurityAttribute securityAttribute);
    public virtual void Visit(IEnumerable`1<ISecurityAttribute> securityAttributes);
    public virtual void Visit(ISpecializedEventDefinition specializedEventDefinition);
    public virtual void Visit(ISpecializedFieldDefinition specializedFieldDefinition);
    public virtual void Visit(ISpecializedFieldReference specializedFieldReference);
    public virtual void Visit(ISpecializedMethodDefinition specializedMethodDefinition);
    public virtual void Visit(ISpecializedMethodReference specializedMethodReference);
    public virtual void Visit(ISpecializedPropertyDefinition specializedPropertyDefinition);
    public virtual void Visit(ISpecializedNestedTypeDefinition specializedNestedTypeDefinition);
    public virtual void Visit(ISpecializedNestedTypeReference specializedNestedTypeReference);
    public virtual void Visit(IEnumerable`1<ITypeDefinitionMember> typeMembers);
    public virtual void Visit(IEnumerable`1<ITypeDefinition> types);
    public virtual void Visit(ITypeDefinition typeDefinition);
    public virtual void Visit(ITypeDefinitionMember typeMember);
    public virtual void Visit(ITypeMemberReference typeMemberReference);
    public virtual void Visit(IEnumerable`1<ITypeReference> typeReferences);
    public virtual void Visit(ITypeReference typeReference);
    protected void DispatchAsReference(ITypeReference typeReference);
    public virtual void Visit(IUnit unit);
    public virtual void Visit(IEnumerable`1<IUnitReference> unitReferences);
    public virtual void Visit(IUnitReference unitReference);
    private void DispatchAsReference(IUnitReference unitReference);
    public virtual void Visit(INamespaceDefinition namespaceDefinition);
    public virtual void Visit(IRootUnitNamespaceReference rootUnitNamespaceReference);
    public virtual void Visit(IUnitNamespaceReference unitNamespaceReference);
    public virtual void Visit(IUnitSet unitSet);
    public virtual void Visit(IUnitSetNamespace unitSetNamespace);
    public virtual void Visit(IWin32Resource win32Resource);
    public virtual void VisitMethodReturnAttributes(IEnumerable`1<ICustomAttribute> customAttributes);
}
[ObsoleteAttribute("Please use MetadataVisitor")]
public class Microsoft.Cci.BaseMetadataVisitor : object {
    public virtual void Visit(IAliasForType aliasForType);
    public virtual void VisitReference(IAliasForType aliasForType);
    public virtual void Visit(IArrayTypeReference arrayTypeReference);
    public virtual void Visit(IAssembly assembly);
    public virtual void Visit(IAssemblyReference assemblyReference);
    public virtual void Visit(ICustomAttribute customAttribute);
    public virtual void Visit(ICustomModifier customModifier);
    public virtual void Visit(IEventDefinition eventDefinition);
    public virtual void Visit(IFieldDefinition fieldDefinition);
    public virtual void Visit(IFieldReference fieldReference);
    public virtual void Visit(IFileReference fileReference);
    public virtual void Visit(IFunctionPointerTypeReference functionPointerTypeReference);
    public virtual void Visit(IGenericMethodInstanceReference genericMethodInstanceReference);
    public virtual void Visit(IGenericMethodParameter genericMethodParameter);
    public virtual void Visit(IGenericMethodParameterReference genericMethodParameterReference);
    public virtual void Visit(IGenericTypeInstanceReference genericTypeInstanceReference);
    public virtual void Visit(IGenericTypeParameter genericTypeParameter);
    public virtual void Visit(IGenericTypeParameterReference genericTypeParameterReference);
    public virtual void Visit(IGlobalFieldDefinition globalFieldDefinition);
    public virtual void Visit(IGlobalMethodDefinition globalMethodDefinition);
    public virtual void Visit(ILocalDefinition localDefinition);
    public virtual void VisitReference(ILocalDefinition localDefinition);
    public virtual void Visit(IManagedPointerTypeReference managedPointerTypeReference);
    public virtual void Visit(IMarshallingInformation marshallingInformation);
    public virtual void Visit(IMetadataConstant constant);
    public virtual void Visit(IMetadataCreateArray createArray);
    public virtual void Visit(IMetadataExpression expression);
    public virtual void Visit(IMetadataNamedArgument namedArgument);
    public virtual void Visit(IMetadataTypeOf typeOf);
    public virtual void Visit(IMethodBody methodBody);
    public virtual void Visit(IMethodDefinition method);
    public virtual void Visit(IMethodImplementation methodImplementation);
    public virtual void Visit(IMethodReference methodReference);
    public virtual void Visit(IModifiedTypeReference modifiedTypeReference);
    public virtual void Visit(IModule module);
    public virtual void Visit(IModuleReference moduleReference);
    public virtual void Visit(INamespaceAliasForType namespaceAliasForType);
    public virtual void Visit(INamespaceDefinition namespaceDefinition);
    public virtual void Visit(INamespaceMember namespaceMember);
    public virtual void Visit(INamespaceTypeDefinition namespaceTypeDefinition);
    public virtual void Visit(INamespaceTypeReference namespaceTypeReference);
    public virtual void Visit(INestedAliasForType nestedAliasForType);
    public virtual void VisitReference(INestedAliasForType nestedAliasForType);
    public virtual void Visit(INestedTypeDefinition nestedTypeDefinition);
    public virtual void Visit(INestedTypeReference nestedTypeReference);
    public virtual void Visit(INestedUnitNamespace nestedUnitNamespace);
    public virtual void Visit(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    public virtual void Visit(INestedUnitSetNamespace nestedUnitSetNamespace);
    public virtual void Visit(IOperation operation);
    public virtual void Visit(IOperationExceptionInformation operationExceptionInformation);
    public virtual void Visit(IParameterDefinition parameterDefinition);
    public virtual void VisitReference(IParameterDefinition parameterDefinition);
    public virtual void Visit(IPropertyDefinition propertyDefinition);
    public virtual void Visit(IParameterTypeInformation parameterTypeInformation);
    public virtual void Visit(IPESection peSection);
    public virtual void Visit(IPlatformInvokeInformation platformInvokeInformation);
    public virtual void Visit(IPointerTypeReference pointerTypeReference);
    public virtual void Visit(IResourceReference resourceReference);
    public virtual void Visit(IRootUnitNamespace rootUnitNamespace);
    public virtual void Visit(IRootUnitNamespaceReference rootUnitNamespaceReference);
    public virtual void Visit(IRootUnitSetNamespace rootUnitSetNamespace);
    public virtual void Visit(ISecurityAttribute securityAttribute);
    public virtual void Visit(ISpecializedEventDefinition specializedEventDefinition);
    public virtual void Visit(ISpecializedFieldDefinition specializedFieldDefinition);
    public virtual void Visit(ISpecializedFieldReference specializedFieldReference);
    public virtual void Visit(ISpecializedMethodDefinition specializedMethodDefinition);
    public virtual void Visit(ISpecializedMethodReference specializedMethodReference);
    public virtual void Visit(ISpecializedPropertyDefinition specializedPropertyDefinition);
    public virtual void Visit(ISpecializedNestedTypeDefinition specializedNestedTypeDefinition);
    public virtual void Visit(ISpecializedNestedTypeReference specializedNestedTypeReference);
    public virtual void Visit(ITypeDefinitionMember typeMember);
    public virtual void Visit(ITypeReference typeReference);
    public virtual void Visit(IUnit unit);
    public virtual void Visit(IUnitReference unitReference);
    public virtual void Visit(IUnitNamespaceReference unitNamespaceReference);
    public virtual void Visit(IUnitSet unitSet);
    public virtual void Visit(IUnitSetNamespace unitSetNamespace);
    public virtual void Visit(IWin32Resource win32Resource);
}
public class Microsoft.Cci.BinaryDocument : object {
    private UInt32 length;
    private string location;
    private IName name;
    private UInt32 Microsoft.Cci.IBinaryDocument.Length { get; }
    private string Microsoft.Cci.IDocument.Location { get; }
    private IName Microsoft.Cci.IDocument.Name { get; }
    public BinaryDocument(string location, IName name, UInt32 length);
    private sealed virtual override UInt32 Microsoft.Cci.IBinaryDocument.get_Length();
    private sealed virtual override string Microsoft.Cci.IDocument.get_Location();
    private sealed virtual override IName Microsoft.Cci.IDocument.get_Name();
    public static BinaryDocument GetBinaryDocumentForFile(string fullFilePath, IMetadataHost compilationHost);
}
public class Microsoft.Cci.BinaryLocation : object {
    private IBinaryDocument binaryDocument;
    private UInt32 offset;
    private IBinaryDocument Microsoft.Cci.IBinaryLocation.BinaryDocument { get; }
    private UInt32 Microsoft.Cci.IBinaryLocation.Offset { get; }
    private IDocument Microsoft.Cci.ILocation.Document { get; }
    public BinaryLocation(IBinaryDocument binaryDocument, UInt32 offset);
    private sealed virtual override IBinaryDocument Microsoft.Cci.IBinaryLocation.get_BinaryDocument();
    private sealed virtual override UInt32 Microsoft.Cci.IBinaryLocation.get_Offset();
    private sealed virtual override IDocument Microsoft.Cci.ILocation.get_Document();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[FlagsAttribute]
public enum Microsoft.Cci.CallingConvention : Enum {
    public int value__;
    public static CallingConvention C;
    public static CallingConvention Default;
    public static CallingConvention ExtraArguments;
    public static CallingConvention FastCall;
    public static CallingConvention Standard;
    public static CallingConvention ThisCall;
    public static CallingConvention Generic;
    public static CallingConvention HasThis;
    public static CallingConvention ExplicitThis;
}
public static class Microsoft.Cci.ClrHelper : object {
    public static ClrOperandStackType[0...,0...] AddResult;
    public static ClrOperandStackType[0...,0...] DivMulRemResult;
    public static ClrOperandStackType[0...,0...] SubResult;
    public static ClrOperandStackType[] UnaryResult;
    public static ClrOperandStackType[0...,0...] CompResult;
    public static ClrOperandStackType[0...,0...] EqCompResult;
    public static ClrOperandStackType[0...,0...] IntOperationResult;
    public static ClrOperandStackType[0...,0...] ShiftOperationResult;
    public static Boolean[0...,0...] ImplicitConversionPossibleArr;
    private static ClrHelper();
    public static ClrOperandStackType ClrOperandStackTypeFor(ITypeReference typeReference);
    public static ClrOperandStackType ClrOperandStackTypeFor(PrimitiveTypeCode typeCode);
    public static PrimitiveTypeCode PrimitiveTypeCodeFor(ClrOperandStackType numericType);
    public static bool ConversionPossible(ClrOperandStackType fromType, PrimitiveTypeCode toType);
}
public enum Microsoft.Cci.ClrOperandStackType : Enum {
    public int value__;
    public static ClrOperandStackType Int32;
    public static ClrOperandStackType Int64;
    public static ClrOperandStackType NativeInt;
    public static ClrOperandStackType Float;
    public static ClrOperandStackType Reference;
    public static ClrOperandStackType Object;
    public static ClrOperandStackType Pointer;
    public static ClrOperandStackType Invalid;
}
public abstract class Microsoft.Cci.Dummy : object {
    private static IAliasForType aliasForType;
    private static IAssembly assembly;
    private static AssemblyIdentity assemblyIdentity;
    private static IMetadataHost compilationHostEnvironment;
    private static IMetadataConstant constant;
    private static ICustomModifier customModifier;
    private static IEventDefinition eventDefinition;
    private static IFieldDefinition field;
    private static IMetadataExpression expression;
    private static IFunctionPointer functionPointer;
    private static DummyGenericMethodParameter genericMethodParameter;
    private static DummyGenericTypeInstance genericTypeInstance;
    private static IGenericTypeInstanceReference genericTypeInstanceReference;
    private static IGenericTypeParameter genericTypeParameter;
    private static IMethodDefinition methodDefinition;
    private static IMethodBody methodBody;
    private static IName name;
    private static IMetadataNamedArgument namedArgument;
    private static INamedTypeReference namedTypeReference;
    private static INameTable nameTable;
    private static INestedTypeDefinition nestedTypeDefinition;
    private static INestedTypeDefinition nestedTypeReference;
    private static INestedUnitNamespace nestedUnitNamespace;
    private static IPlatformType platformType;
    private static IPropertyDefinition propertyDefinition;
    private static IRootUnitNamespace rootUnitNamespace;
    private static ITypeDefinition type;
    private static ITypeReference typeReference;
    private static IUnit unit;
    private static UnitIdentity unitIdentity;
    private static IUnitNamespace unitNamespace;
    private static IUnitNamespaceReference unitNamespaceReference;
    private static IUnitReference unitReference;
    private static IUnitSet unitSet;
    private static IUnitSetNamespace unitSetNamespace;
    private static IRootUnitSetNamespace rootUnitSetNamespace;
    private static IModule module;
    private static ModuleIdentity moduleIdentity;
    private static IMethodReference methodReference;
    private static Version version;
    private static ICustomAttribute customAttribute;
    private static IFileReference fileReference;
    private static IResource resource;
    private static IModuleReference moduleReference;
    private static IAssemblyReference assemblyReference;
    private static IMarshallingInformation marshallingInformation;
    private static IParameterTypeInformation parameterTypeInformation;
    private static INamedTypeDefinition namedTypeDefinition;
    private static INamespaceDefinition namespaceDefinition;
    private static INamespaceRootOwner namespaceRootOwner;
    private static INamespaceTypeDefinition namespaceTypeDefinition;
    private static INamespaceTypeReference namespaceTypeReference;
    private static ISectionBlock sectionBlock;
    private static ISecurityAttribute securityAttribute;
    private static ISignature signature;
    private static ISpecializedNestedTypeDefinition specializedNestedTypeDefinition;
    private static ISpecializedFieldDefinition specializedFieldDefinition;
    private static ISpecializedMethodDefinition specializedMethodDefinition;
    private static ISpecializedPropertyDefinition specializedPropertyDefinition;
    private static ILocalDefinition localVariable;
    private static IFieldReference fieldReference;
    private static IParameterDefinition parameterDefinition;
    private static IPlatformInvokeInformation platformInvokeInformation;
    private static IGlobalMethodDefinition globalMethodDefinition;
    private static IGlobalFieldDefinition globalFieldDefinition;
    private static IOperation operation;
    private static ILocation location;
    private static IDocument document;
    private static IOperationExceptionInformation operationExceptionInformation;
    private static IInternFactory internFactory;
    private static IArrayType arrayType;
    private static ITypeDefinitionMember typeDefinitionMember;
    public static IAliasForType AliasForType { get; }
    public static IAssembly Assembly { get; }
    public static AssemblyIdentity AssemblyIdentity { get; }
    public static IMetadataHost CompilationHostEnvironment { get; }
    public static IMetadataConstant Constant { get; }
    public static ICustomModifier CustomModifier { get; }
    public static IEventDefinition Event { get; }
    public static IEventDefinition EventDefinition { get; }
    public static IFieldDefinition Field { get; }
    public static IFieldDefinition FieldDefinition { get; }
    public static IMetadataExpression Expression { get; }
    public static IFunctionPointer FunctionPointer { get; }
    public static IGenericMethodParameter GenericMethodParameter { get; }
    public static IGenericTypeInstance GenericTypeInstance { get; }
    public static IGenericTypeInstanceReference GenericTypeInstanceReference { get; }
    public static IGenericTypeParameter GenericTypeParameter { get; }
    public static IMethodDefinition Method { get; }
    public static IMethodDefinition MethodDefinition { get; }
    public static IMethodBody MethodBody { get; }
    public static IName Name { get; }
    public static IMetadataNamedArgument NamedArgument { get; }
    public static INamedTypeReference NamedTypeReference { get; }
    public static INameTable NameTable { get; }
    public static INestedTypeDefinition NestedType { get; }
    public static INestedTypeDefinition NestedTypeDefinition { get; }
    public static INestedTypeReference NestedTypeReference { get; }
    public static INestedUnitNamespace NestedUnitNamespace { get; }
    public static IPlatformType PlatformType { get; }
    public static IPropertyDefinition Property { get; }
    public static IPropertyDefinition PropertyDefinition { get; }
    public static IRootUnitNamespace RootUnitNamespace { get; }
    public static ITypeDefinition Type { get; }
    public static ITypeDefinition TypeDefinition { get; }
    public static ITypeReference TypeReference { get; }
    public static IUnit Unit { get; }
    public static UnitIdentity UnitIdentity { get; }
    public static IUnitNamespace UnitNamespace { get; }
    public static IUnitNamespaceReference UnitNamespaceReference { get; }
    public static IUnitReference UnitReference { get; }
    public static IUnitSet UnitSet { get; }
    public static IUnitSetNamespace UnitSetNamespace { get; }
    public static IRootUnitSetNamespace RootUnitSetNamespace { get; }
    public static IModule Module { get; }
    public static ModuleIdentity ModuleIdentity { get; }
    public static IMethodReference MethodReference { get; }
    public static Version Version { get; }
    public static ICustomAttribute CustomAttribute { get; }
    public static IFileReference FileReference { get; }
    public static IResource Resource { get; }
    public static IModuleReference ModuleReference { get; }
    public static IAssemblyReference AssemblyReference { get; }
    public static IMarshallingInformation MarshallingInformation { get; }
    public static IParameterTypeInformation ParameterTypeInformation { get; }
    public static INamedTypeDefinition NamedTypeDefinition { get; }
    public static INamespaceDefinition NamespaceDefinition { get; }
    public static INamespaceRootOwner NamespaceRootOwner { get; }
    public static INamespaceTypeDefinition NamespaceTypeDefinition { get; }
    public static INamespaceTypeReference NamespaceTypeReference { get; }
    public static ISectionBlock SectionBlock { get; }
    public static ISecurityAttribute SecurityAttribute { get; }
    public static ISignature Signature { get; }
    public static ISpecializedNestedTypeDefinition SpecializedNestedTypeDefinition { get; }
    public static ISpecializedFieldDefinition SpecializedFieldDefinition { get; }
    public static ISpecializedMethodDefinition SpecializedMethodDefinition { get; }
    public static ISpecializedPropertyDefinition SpecializedPropertyDefinition { get; }
    public static ILocalDefinition LocalVariable { get; }
    public static IFieldReference FieldReference { get; }
    public static IParameterDefinition ParameterDefinition { get; }
    public static IPlatformInvokeInformation PlatformInvokeInformation { get; }
    public static IGlobalMethodDefinition GlobalMethod { get; }
    public static IGlobalFieldDefinition GlobalField { get; }
    public static IOperation Operation { get; }
    public static ILocation Location { get; }
    public static IDocument Document { get; }
    public static IOperationExceptionInformation OperationExceptionInformation { get; }
    public static IInternFactory InternFactory { get; }
    public static IArrayType ArrayType { get; }
    public static ITypeDefinitionMember TypeDefinitionMember { get; }
    public static IAliasForType get_AliasForType();
    public static IAssembly get_Assembly();
    public static AssemblyIdentity get_AssemblyIdentity();
    public static IMetadataHost get_CompilationHostEnvironment();
    public static IMetadataConstant get_Constant();
    public static ICustomModifier get_CustomModifier();
    public static IEventDefinition get_Event();
    public static IEventDefinition get_EventDefinition();
    public static IFieldDefinition get_Field();
    public static IFieldDefinition get_FieldDefinition();
    public static IMetadataExpression get_Expression();
    public static IFunctionPointer get_FunctionPointer();
    public static IGenericMethodParameter get_GenericMethodParameter();
    public static IGenericTypeInstance get_GenericTypeInstance();
    public static IGenericTypeInstanceReference get_GenericTypeInstanceReference();
    public static IGenericTypeParameter get_GenericTypeParameter();
    public static IMethodDefinition get_Method();
    public static IMethodDefinition get_MethodDefinition();
    public static IMethodBody get_MethodBody();
    public static IName get_Name();
    public static IMetadataNamedArgument get_NamedArgument();
    public static INamedTypeReference get_NamedTypeReference();
    public static INameTable get_NameTable();
    public static INestedTypeDefinition get_NestedType();
    public static INestedTypeDefinition get_NestedTypeDefinition();
    public static INestedTypeReference get_NestedTypeReference();
    public static INestedUnitNamespace get_NestedUnitNamespace();
    public static IPlatformType get_PlatformType();
    public static IPropertyDefinition get_Property();
    public static IPropertyDefinition get_PropertyDefinition();
    public static IRootUnitNamespace get_RootUnitNamespace();
    public static ITypeDefinition get_Type();
    public static ITypeDefinition get_TypeDefinition();
    public static ITypeReference get_TypeReference();
    public static IUnit get_Unit();
    public static UnitIdentity get_UnitIdentity();
    public static IUnitNamespace get_UnitNamespace();
    public static IUnitNamespaceReference get_UnitNamespaceReference();
    public static IUnitReference get_UnitReference();
    public static IUnitSet get_UnitSet();
    public static IUnitSetNamespace get_UnitSetNamespace();
    public static IRootUnitSetNamespace get_RootUnitSetNamespace();
    public static IModule get_Module();
    public static ModuleIdentity get_ModuleIdentity();
    public static IMethodReference get_MethodReference();
    public static Version get_Version();
    public static ICustomAttribute get_CustomAttribute();
    public static IFileReference get_FileReference();
    public static IResource get_Resource();
    public static IModuleReference get_ModuleReference();
    public static IAssemblyReference get_AssemblyReference();
    public static IMarshallingInformation get_MarshallingInformation();
    public static IParameterTypeInformation get_ParameterTypeInformation();
    public static INamedTypeDefinition get_NamedTypeDefinition();
    public static INamespaceDefinition get_NamespaceDefinition();
    public static INamespaceRootOwner get_NamespaceRootOwner();
    public static INamespaceTypeDefinition get_NamespaceTypeDefinition();
    public static INamespaceTypeReference get_NamespaceTypeReference();
    public static ISectionBlock get_SectionBlock();
    public static ISecurityAttribute get_SecurityAttribute();
    public static ISignature get_Signature();
    public static ISpecializedNestedTypeDefinition get_SpecializedNestedTypeDefinition();
    public static ISpecializedFieldDefinition get_SpecializedFieldDefinition();
    public static ISpecializedMethodDefinition get_SpecializedMethodDefinition();
    public static ISpecializedPropertyDefinition get_SpecializedPropertyDefinition();
    public static ILocalDefinition get_LocalVariable();
    public static IFieldReference get_FieldReference();
    public static IParameterDefinition get_ParameterDefinition();
    public static IPlatformInvokeInformation get_PlatformInvokeInformation();
    public static IGlobalMethodDefinition get_GlobalMethod();
    public static IGlobalFieldDefinition get_GlobalField();
    public static IOperation get_Operation();
    public static ILocation get_Location();
    public static IDocument get_Document();
    public static IOperationExceptionInformation get_OperationExceptionInformation();
    public static IInternFactory get_InternFactory();
    public static IArrayType get_ArrayType();
    public static ITypeDefinitionMember get_TypeDefinitionMember();
}
internal class Microsoft.Cci.DummyArrayType : Dummy {
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public ITypeDefinition ResolvedType { get; }
    public UInt32 InternedKey { get; }
    public ITypeReference ElementType { get; }
    public bool IsVector { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual ITypeReference get_ElementType();
    public sealed virtual bool get_IsVector();
    public sealed virtual IEnumerable`1<int> get_LowerBounds();
    public sealed virtual UInt32 get_Rank();
    public sealed virtual IEnumerable`1<ulong> get_Sizes();
}
internal class Microsoft.Cci.DummyAssembly : Dummy {
    public IEnumerable`1<ICustomAttribute> AssemblyAttributes { get; }
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public string Culture { get; }
    public IEnumerable`1<IAliasForType> ExportedTypes { get; }
    public IEnumerable`1<IResourceReference> Resources { get; }
    public IEnumerable`1<IFileReference> Files { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public IEnumerable`1<IModule> MemberModules { get; }
    public UInt32 Flags { get; }
    public bool ContainsForeignTypes { get; }
    public IEnumerable`1<byte> PublicKey { get; }
    public Version Version { get; }
    public AssemblyIdentity AssemblyIdentity { get; }
    public IName ModuleName { get; }
    public IAssembly ContainingAssembly { get; }
    public IEnumerable`1<IAssemblyReference> AssemblyReferences { get; }
    public ulong BaseAddress { get; }
    public string DebugInformationLocation { get; }
    public string DebugInformationVersion { get; }
    public ushort DllCharacteristics { get; }
    public IMethodReference EntryPoint { get; }
    public UInt32 FileAlignment { get; }
    public bool ILOnly { get; }
    public bool StrongNameSigned { get; }
    public bool Prefers32bits { get; }
    public ModuleKind Kind { get; }
    public byte LinkerMajorVersion { get; }
    public byte LinkerMinorVersion { get; }
    public byte MetadataFormatMajorVersion { get; }
    public byte MetadataFormatMinorVersion { get; }
    public IEnumerable`1<ICustomAttribute> ModuleAttributes { get; }
    public IEnumerable`1<IModuleReference> ModuleReferences { get; }
    public Guid PersistentIdentifier { get; }
    public Machine Machine { get; }
    public bool RequiresAmdInstructionSet { get; }
    public bool RequiresStartupStub { get; }
    public bool Requires32bits { get; }
    public bool Requires64bits { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfHeapCommit { get; }
    public ulong SizeOfStackReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ushort SubsystemMajorVersion { get; }
    public ushort SubsystemMinorVersion { get; }
    public string TargetRuntimeVersion { get; }
    public bool TrackDebugData { get; }
    public bool UsePublicKeyTokensForAssemblyReferences { get; }
    public IEnumerable`1<IWin32Resource> Win32Resources { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IPlatformType PlatformType { get; }
    public string Location { get; }
    public IEnumerable`1<IPESection> UninterpretedSections { get; }
    public IName Name { get; }
    public IRootUnitNamespace UnitNamespaceRoot { get; }
    public IEnumerable`1<IUnitReference> UnitReferences { get; }
    public UnitIdentity UnitIdentity { get; }
    public INamespaceDefinition NamespaceRoot { get; }
    public IUnit ResolvedUnit { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public IEnumerable`1<IName> Aliases { get; }
    public bool IsRetargetable { get; }
    public IAssembly ResolvedAssembly { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public IEnumerable`1<byte> PublicKeyToken { get; }
    public AssemblyIdentity UnifiedAssemblyIdentity { get; }
    public sealed virtual IEnumerable`1<ICustomAttribute> get_AssemblyAttributes();
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual string get_Culture();
    public sealed virtual IEnumerable`1<IAliasForType> get_ExportedTypes();
    public sealed virtual IEnumerable`1<IResourceReference> get_Resources();
    public sealed virtual IEnumerable`1<IFileReference> get_Files();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual IEnumerable`1<IModule> get_MemberModules();
    public sealed virtual UInt32 get_Flags();
    public sealed virtual bool get_ContainsForeignTypes();
    public sealed virtual IEnumerable`1<byte> get_PublicKey();
    public sealed virtual Version get_Version();
    public sealed virtual AssemblyIdentity get_AssemblyIdentity();
    public sealed virtual IName get_ModuleName();
    public sealed virtual IAssembly get_ContainingAssembly();
    public sealed virtual IEnumerable`1<IAssemblyReference> get_AssemblyReferences();
    public sealed virtual ulong get_BaseAddress();
    public sealed virtual string get_DebugInformationLocation();
    public sealed virtual string get_DebugInformationVersion();
    public sealed virtual ushort get_DllCharacteristics();
    public sealed virtual IMethodReference get_EntryPoint();
    public sealed virtual UInt32 get_FileAlignment();
    public sealed virtual bool get_ILOnly();
    public sealed virtual bool get_StrongNameSigned();
    public sealed virtual bool get_Prefers32bits();
    public sealed virtual ModuleKind get_Kind();
    public sealed virtual byte get_LinkerMajorVersion();
    public sealed virtual byte get_LinkerMinorVersion();
    public sealed virtual byte get_MetadataFormatMajorVersion();
    public sealed virtual byte get_MetadataFormatMinorVersion();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ModuleAttributes();
    public sealed virtual IEnumerable`1<IModuleReference> get_ModuleReferences();
    public sealed virtual Guid get_PersistentIdentifier();
    public sealed virtual Machine get_Machine();
    public sealed virtual bool get_RequiresAmdInstructionSet();
    public sealed virtual bool get_RequiresStartupStub();
    public sealed virtual bool get_Requires32bits();
    public sealed virtual bool get_Requires64bits();
    public sealed virtual ulong get_SizeOfHeapReserve();
    public sealed virtual ulong get_SizeOfHeapCommit();
    public sealed virtual ulong get_SizeOfStackReserve();
    public sealed virtual ulong get_SizeOfStackCommit();
    public sealed virtual ushort get_SubsystemMajorVersion();
    public sealed virtual ushort get_SubsystemMinorVersion();
    public sealed virtual string get_TargetRuntimeVersion();
    public sealed virtual bool get_TrackDebugData();
    public sealed virtual bool get_UsePublicKeyTokensForAssemblyReferences();
    public sealed virtual IEnumerable`1<IWin32Resource> get_Win32Resources();
    public sealed virtual IEnumerable`1<string> GetStrings();
    public sealed virtual IEnumerable`1<INamedTypeDefinition> GetAllTypes();
    public sealed virtual IEnumerable`1<IGenericMethodInstanceReference> GetGenericMethodInstances();
    public sealed virtual IEnumerable`1<ITypeReference> GetStructuralTypeInstances();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetStructuralTypeInstanceMembers();
    public sealed virtual IEnumerable`1<ITypeReference> GetTypeReferences();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetTypeMemberReferences();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual string get_Location();
    public sealed virtual IEnumerable`1<IPESection> get_UninterpretedSections();
    public sealed virtual IName get_Name();
    public sealed virtual IRootUnitNamespace get_UnitNamespaceRoot();
    public sealed virtual IEnumerable`1<IUnitReference> get_UnitReferences();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_NamespaceRoot();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual IEnumerable`1<IName> get_Aliases();
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual IAssembly get_ResolvedAssembly();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
    public sealed virtual IEnumerable`1<byte> get_PublicKeyToken();
    public sealed virtual AssemblyIdentity get_UnifiedAssemblyIdentity();
}
internal class Microsoft.Cci.DummyAssemblyReference : Dummy {
    public IEnumerable`1<IName> Aliases { get; }
    public string Culture { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public IEnumerable`1<byte> PublicKey { get; }
    public IEnumerable`1<byte> PublicKeyToken { get; }
    public Version Version { get; }
    public IName Name { get; }
    public IAssembly ResolvedAssembly { get; }
    public AssemblyIdentity AssemblyIdentity { get; }
    public bool IsRetargetable { get; }
    public bool ContainsForeignTypes { get; }
    public AssemblyIdentity UnifiedAssemblyIdentity { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IAssemblyReference ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public UnitIdentity UnitIdentity { get; }
    public IUnit ResolvedUnit { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IEnumerable`1<IName> get_Aliases();
    public sealed virtual string get_Culture();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
    public sealed virtual IEnumerable`1<byte> get_PublicKey();
    public sealed virtual IEnumerable`1<byte> get_PublicKeyToken();
    public sealed virtual Version get_Version();
    public sealed virtual IName get_Name();
    public sealed virtual IAssembly get_ResolvedAssembly();
    public sealed virtual AssemblyIdentity get_AssemblyIdentity();
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual bool get_ContainsForeignTypes();
    public sealed virtual AssemblyIdentity get_UnifiedAssemblyIdentity();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IAssemblyReference get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
internal class Microsoft.Cci.DummyCustomAttribute : Dummy {
    public IEnumerable`1<IMetadataExpression> Arguments { get; }
    public IMethodReference Constructor { get; }
    public IEnumerable`1<IMetadataNamedArgument> NamedArguments { get; }
    public ushort NumberOfNamedArguments { get; }
    public ITypeReference Type { get; }
    public sealed virtual IEnumerable`1<IMetadataExpression> get_Arguments();
    public sealed virtual IMethodReference get_Constructor();
    public sealed virtual IEnumerable`1<IMetadataNamedArgument> get_NamedArguments();
    public sealed virtual ushort get_NumberOfNamedArguments();
    public sealed virtual ITypeReference get_Type();
}
internal class Microsoft.Cci.DummyCustomModifier : Dummy {
    public bool IsOptional { get; }
    public ITypeReference Modifier { get; }
    public sealed virtual bool get_IsOptional();
    public sealed virtual ITypeReference get_Modifier();
}
internal class Microsoft.Cci.DummyDocument : Dummy {
    public string Location { get; }
    public IName Name { get; }
    public sealed virtual string get_Location();
    public sealed virtual IName get_Name();
}
internal class Microsoft.Cci.DummyEventDefinition : Dummy {
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMethodReference Adder { get; }
    public IMethodReference Caller { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IMethodReference Remover { get; }
    public ITypeReference Type { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public sealed virtual IMethodReference get_Adder();
    public sealed virtual IMethodReference get_Caller();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual IMethodReference get_Remover();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
}
internal class Microsoft.Cci.DummyFieldDefinition : Dummy {
    public UInt32 BitLength { get; }
    public bool IsBitField { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsCompileTimeConstant { get; }
    public bool IsMapped { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsModified { get; }
    public bool IsNotSerialized { get; }
    public bool IsReadOnly { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public ISectionBlock FieldMapping { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public UInt32 Offset { get; }
    public int SequenceNumber { get; }
    public IMetadataConstant CompileTimeValue { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference Type { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public UInt32 InternedKey { get; }
    public bool IsStatic { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual UInt32 get_BitLength();
    public sealed virtual bool get_IsBitField();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsCompileTimeConstant();
    public sealed virtual bool get_IsMapped();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsNotSerialized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual ISectionBlock get_FieldMapping();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual int get_SequenceNumber();
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IMetadataConstant get_Constant();
}
internal class Microsoft.Cci.DummyFieldReference : Dummy {
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public UInt32 InternedKey { get; }
    public bool IsModified { get; }
    public bool IsStatic { get; }
    public ITypeReference Type { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
internal class Microsoft.Cci.DummyFileReference : Dummy {
    public IAssembly ContainingAssembly { get; }
    public bool HasMetadata { get; }
    public IName FileName { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public sealed virtual IAssembly get_ContainingAssembly();
    public sealed virtual bool get_HasMetadata();
    public sealed virtual IName get_FileName();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
}
internal class Microsoft.Cci.DummyFunctionPointerType : Dummy {
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraArgumentTypes { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraArgumentTypes();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
}
internal class Microsoft.Cci.DummyGenericMethodParameter : Dummy {
    public IMethodDefinition DefiningMethod { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public ushort Index { get; }
    public IName Name { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    private IMethodReference Microsoft.Cci.IGenericMethodParameterReference.DefiningMethod { get; }
    private IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.ResolvedType { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public sealed virtual IMethodDefinition get_DefiningMethod();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IEnumerable`1<ITypeReference> get_Constraints();
    public sealed virtual bool get_MustBeReferenceType();
    public sealed virtual bool get_MustBeValueType();
    public sealed virtual bool get_MustHaveDefaultConstructor();
    public sealed virtual TypeParameterVariance get_Variance();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual ushort get_Index();
    public sealed virtual IName get_Name();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override IMethodReference Microsoft.Cci.IGenericMethodParameterReference.get_DefiningMethod();
    private sealed virtual override IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.get_ResolvedType();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
internal class Microsoft.Cci.DummyGenericTypeInstance : Dummy {
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public INamedTypeReference GenericType { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsSealed { get; }
    public bool IsReferenceType { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    public sealed virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public sealed virtual INamedTypeReference get_GenericType();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
}
internal class Microsoft.Cci.DummyGenericTypeParameter : Dummy {
    public ITypeDefinition DefiningType { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public ushort Index { get; }
    public IName Name { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    private ITypeReference Microsoft.Cci.IGenericTypeParameterReference.DefiningType { get; }
    private IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.ResolvedType { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public sealed virtual ITypeDefinition get_DefiningType();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IEnumerable`1<ITypeReference> get_Constraints();
    public sealed virtual bool get_MustBeReferenceType();
    public sealed virtual bool get_MustBeValueType();
    public sealed virtual bool get_MustHaveDefaultConstructor();
    public sealed virtual TypeParameterVariance get_Variance();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual ushort get_Index();
    public sealed virtual IName get_Name();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override ITypeReference Microsoft.Cci.IGenericTypeParameterReference.get_DefiningType();
    private sealed virtual override IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.get_ResolvedType();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
internal class Microsoft.Cci.DummyGlobalFieldDefinition : Dummy {
    public IName Name { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public UInt32 BitLength { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsBitField { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public bool IsCompileTimeConstant { get; }
    public bool IsMapped { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsModified { get; }
    public bool IsNotSerialized { get; }
    public bool IsReadOnly { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public ISectionBlock FieldMapping { get; }
    public UInt32 Offset { get; }
    public int SequenceNumber { get; }
    public IMetadataConstant CompileTimeValue { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference Type { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    private ITypeDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.Container { get; }
    private IScope`1<ITypeDefinitionMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>>.ContainingScope { get; }
    public UInt32 InternedKey { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual IName get_Name();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    public sealed virtual UInt32 get_BitLength();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsBitField();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool get_IsCompileTimeConstant();
    public sealed virtual bool get_IsMapped();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsNotSerialized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ISectionBlock get_FieldMapping();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual int get_SequenceNumber();
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    private sealed virtual override ITypeDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.get_Container();
    private sealed virtual override IScope`1<ITypeDefinitionMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>>.get_ContainingScope();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IMetadataConstant get_Constant();
}
internal class Microsoft.Cci.DummyGlobalMethodDefinition : Dummy {
    public bool ReturnValueIsByRef { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public ITypeReference Type { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsModified { get; }
    public IName Name { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public bool AcceptsExtraArguments { get; }
    public IMethodBody Body { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsCil { get; }
    public bool IsConstructor { get; }
    public bool IsStaticConstructor { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsGeneric { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public bool IsSynchronized { get; }
    public bool IsVirtual { get; }
    public bool IsUnmanaged { get; }
    public CallingConvention CallingConvention { get; }
    public bool PreserveSignature { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public bool RequiresSecurityObject { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public IName ReturnValueName { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    private ITypeDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.Container { get; }
    private IScope`1<ITypeDefinitionMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>>.ContainingScope { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public UInt32 InternedKey { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual IName get_Name();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual IMethodBody get_Body();
    public sealed virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsStaticConstructor();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual bool get_RequiresSecurityObject();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public sealed virtual IName get_ReturnValueName();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    private sealed virtual override ITypeDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.get_Container();
    private sealed virtual override IScope`1<ITypeDefinitionMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>>.get_ContainingScope();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
}
internal class Microsoft.Cci.DummyInternFactory : Dummy {
    public sealed virtual UInt32 GetAssemblyInternedKey(AssemblyIdentity assemblyIdentity);
    public sealed virtual UInt32 GetModuleInternedKey(ModuleIdentity moduleIdentity);
    public sealed virtual UInt32 GetFieldInternedKey(IFieldReference fieldReference);
    public sealed virtual UInt32 GetMethodInternedKey(IMethodReference methodReference);
    public sealed virtual UInt32 GetVectorTypeReferenceInternedKey(ITypeReference elementTypeReference);
    public sealed virtual UInt32 GetMatrixTypeReferenceInternedKey(ITypeReference elementTypeReference, int rank, IEnumerable`1<ulong> sizes, IEnumerable`1<int> lowerBounds);
    public sealed virtual UInt32 GetGenericTypeInstanceReferenceInternedKey(ITypeReference genericTypeReference, IEnumerable`1<ITypeReference> genericArguments);
    public sealed virtual UInt32 GetPointerTypeReferenceInternedKey(ITypeReference targetTypeReference);
    public sealed virtual UInt32 GetManagedPointerTypeReferenceInternedKey(ITypeReference targetTypeReference);
    public sealed virtual UInt32 GetFunctionPointerTypeReferenceInternedKey(CallingConvention callingConvention, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, bool returnValueIsByRef, ITypeReference returnType);
    public sealed virtual UInt32 GetTypeReferenceInternedKey(ITypeReference typeReference);
    public sealed virtual UInt32 GetNamespaceTypeReferenceInternedKey(IUnitNamespaceReference containingUnitNamespace, IName typeName, UInt32 genericParameterCount);
    public sealed virtual UInt32 GetNestedTypeReferenceInternedKey(ITypeReference containingTypeReference, IName typeName, UInt32 genericParameterCount);
    public sealed virtual UInt32 GetGenericTypeParameterReferenceInternedKey(ITypeReference definingTypeReference, int index);
    public sealed virtual UInt32 GetModifiedTypeReferenceInternedKey(ITypeReference typeReference, IEnumerable`1<ICustomModifier> customModifiers);
    public sealed virtual UInt32 GetGenericMethodParameterReferenceInternedKey(IMethodReference definingMethodReference, int index);
}
internal class Microsoft.Cci.DummyLocalVariable : Dummy {
    public IMetadataConstant CompileTimeValue { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsConstant { get; }
    public bool IsModified { get; }
    public bool IsPinned { get; }
    public bool IsReference { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IMethodDefinition MethodDefinition { get; }
    public ITypeReference Type { get; }
    public IName Name { get; }
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsConstant();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsPinned();
    public sealed virtual bool get_IsReference();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IName get_Name();
}
internal class Microsoft.Cci.DummyLocation : Dummy {
    public IDocument Document { get; }
    public sealed virtual IDocument get_Document();
}
internal class Microsoft.Cci.DummyMarshallingInformation : Dummy {
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    public UInt32 IidParameterIndex { get; }
    public UnmanagedType UnmanagedType { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UnmanagedType get_UnmanagedType();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal class Microsoft.Cci.DummyMetadataConstant : Dummy {
    public object Value { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public ITypeReference Type { get; }
    public sealed virtual object get_Value();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual ITypeReference get_Type();
}
internal class Microsoft.Cci.DummyMetadataExpression : Dummy {
    public IEnumerable`1<ILocation> Locations { get; }
    public ITypeReference Type { get; }
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public void DispatchAsReference(IMetadataVisitor visitor);
}
internal class Microsoft.Cci.DummyMetadataHost : Dummy {
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Errors;
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public AssemblyIdentity SystemCoreAssemblySymbolicIdentity { get; }
    public INameTable NameTable { get; }
    public IPlatformType PlatformType { get; }
    public byte PointerSize { get; }
    public IEnumerable`1<IUnit> LoadedUnits { get; }
    public IInternFactory InternFactory { get; }
    public bool PreserveILLocations { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_Errors(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Errors(EventHandler`1<ErrorEventArgs> value);
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_SystemCoreAssemblySymbolicIdentity();
    public sealed virtual IAssembly FindAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual IModule FindModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit FindUnit(UnitIdentity unitIdentity);
    public sealed virtual IAssembly LoadAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual IModule LoadModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit LoadUnit(UnitIdentity unitIdentity);
    public sealed virtual IUnit LoadUnitFrom(string location);
    public sealed virtual INameTable get_NameTable();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual byte get_PointerSize();
    public sealed virtual void ReportErrors(ErrorEventArgs errorEventArguments);
    public sealed virtual void ReportError(IErrorMessage error);
    public sealed virtual AssemblyIdentity ProbeAssemblyReference(IUnit unit, AssemblyIdentity referedAssemblyIdentity);
    public sealed virtual ModuleIdentity ProbeModuleReference(IUnit unit, ModuleIdentity referedModuleIdentity);
    public sealed virtual AssemblyIdentity UnifyAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual AssemblyIdentity UnifyAssembly(IAssemblyReference assemblyReference);
    public sealed virtual IEnumerable`1<IUnit> get_LoadedUnits();
    public sealed virtual IInternFactory get_InternFactory();
    public sealed virtual bool get_PreserveILLocations();
}
internal class Microsoft.Cci.DummyMethodBody : Dummy {
    public IMethodDefinition MethodDefinition { get; }
    public IEnumerable`1<ILocalDefinition> LocalVariables { get; }
    public bool LocalsAreZeroed { get; }
    public IEnumerable`1<IOperation> Operations { get; }
    public IEnumerable`1<ITypeDefinition> PrivateHelperTypes { get; }
    public ushort MaxStack { get; }
    public IEnumerable`1<IOperationExceptionInformation> OperationExceptionInformation { get; }
    public UInt32 Size { get; }
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual IEnumerable`1<ILocalDefinition> get_LocalVariables();
    public sealed virtual bool get_LocalsAreZeroed();
    public sealed virtual IEnumerable`1<IOperation> get_Operations();
    public sealed virtual IEnumerable`1<ITypeDefinition> get_PrivateHelperTypes();
    public sealed virtual ushort get_MaxStack();
    public sealed virtual IEnumerable`1<IOperationExceptionInformation> get_OperationExceptionInformation();
    public sealed virtual UInt32 get_Size();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public void DispatchAsReference(IMetadataVisitor visitor);
}
internal class Microsoft.Cci.DummyMethodDefinition : Dummy {
    public IMethodBody Body { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsCil { get; }
    public bool IsConstructor { get; }
    public bool IsStaticConstructor { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsGeneric { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public bool IsSynchronized { get; }
    public bool IsVirtual { get; }
    public bool IsUnmanaged { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public CallingConvention CallingConvention { get; }
    public bool PreserveSignature { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public bool RequiresSecurityObject { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsModified { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public IName ReturnValueName { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public bool ReturnValueIsByRef { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public ITypeReference Type { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public bool AcceptsExtraArguments { get; }
    public UInt32 InternedKey { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public sealed virtual IMethodBody get_Body();
    public sealed virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsStaticConstructor();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual bool get_RequiresSecurityObject();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public sealed virtual IName get_ReturnValueName();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
}
internal class Microsoft.Cci.DummyMethodReference : Dummy {
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IName get_Name();
}
internal class Microsoft.Cci.DummyModule : Dummy {
    public IName ModuleName { get; }
    public IAssembly ContainingAssembly { get; }
    public IEnumerable`1<IAssemblyReference> AssemblyReferences { get; }
    public ulong BaseAddress { get; }
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public string DebugInformationLocation { get; }
    public string DebugInformationVersion { get; }
    public ushort DllCharacteristics { get; }
    public IMethodReference EntryPoint { get; }
    public UInt32 FileAlignment { get; }
    public bool ILOnly { get; }
    public bool StrongNameSigned { get; }
    public bool Prefers32bits { get; }
    public ModuleKind Kind { get; }
    public byte LinkerMajorVersion { get; }
    public byte LinkerMinorVersion { get; }
    public byte MetadataFormatMajorVersion { get; }
    public byte MetadataFormatMinorVersion { get; }
    public IEnumerable`1<ICustomAttribute> ModuleAttributes { get; }
    public IEnumerable`1<IModuleReference> ModuleReferences { get; }
    public Guid PersistentIdentifier { get; }
    public Machine Machine { get; }
    public bool RequiresAmdInstructionSet { get; }
    public bool RequiresStartupStub { get; }
    public bool Requires32bits { get; }
    public bool Requires64bits { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfHeapCommit { get; }
    public ulong SizeOfStackReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ushort SubsystemMajorVersion { get; }
    public ushort SubsystemMinorVersion { get; }
    public string TargetRuntimeVersion { get; }
    public bool TrackDebugData { get; }
    public bool UsePublicKeyTokensForAssemblyReferences { get; }
    public IEnumerable`1<IWin32Resource> Win32Resources { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IPlatformType PlatformType { get; }
    public string Location { get; }
    public IEnumerable`1<IPESection> UninterpretedSections { get; }
    public IName Name { get; }
    public IRootUnitNamespace UnitNamespaceRoot { get; }
    public IEnumerable`1<IUnitReference> UnitReferences { get; }
    public UnitIdentity UnitIdentity { get; }
    public INamespaceDefinition NamespaceRoot { get; }
    public IUnit ResolvedUnit { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public sealed virtual IName get_ModuleName();
    public sealed virtual IAssembly get_ContainingAssembly();
    public sealed virtual IEnumerable`1<IAssemblyReference> get_AssemblyReferences();
    public sealed virtual ulong get_BaseAddress();
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual string get_DebugInformationLocation();
    public sealed virtual string get_DebugInformationVersion();
    public sealed virtual ushort get_DllCharacteristics();
    public sealed virtual IMethodReference get_EntryPoint();
    public sealed virtual UInt32 get_FileAlignment();
    public sealed virtual bool get_ILOnly();
    public sealed virtual bool get_StrongNameSigned();
    public sealed virtual bool get_Prefers32bits();
    public sealed virtual ModuleKind get_Kind();
    public sealed virtual byte get_LinkerMajorVersion();
    public sealed virtual byte get_LinkerMinorVersion();
    public sealed virtual byte get_MetadataFormatMajorVersion();
    public sealed virtual byte get_MetadataFormatMinorVersion();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ModuleAttributes();
    public sealed virtual IEnumerable`1<IModuleReference> get_ModuleReferences();
    public sealed virtual Guid get_PersistentIdentifier();
    public sealed virtual Machine get_Machine();
    public sealed virtual bool get_RequiresAmdInstructionSet();
    public sealed virtual bool get_RequiresStartupStub();
    public sealed virtual bool get_Requires32bits();
    public sealed virtual bool get_Requires64bits();
    public sealed virtual ulong get_SizeOfHeapReserve();
    public sealed virtual ulong get_SizeOfHeapCommit();
    public sealed virtual ulong get_SizeOfStackReserve();
    public sealed virtual ulong get_SizeOfStackCommit();
    public sealed virtual ushort get_SubsystemMajorVersion();
    public sealed virtual ushort get_SubsystemMinorVersion();
    public sealed virtual string get_TargetRuntimeVersion();
    public sealed virtual bool get_TrackDebugData();
    public sealed virtual bool get_UsePublicKeyTokensForAssemblyReferences();
    public sealed virtual IEnumerable`1<IWin32Resource> get_Win32Resources();
    public sealed virtual IEnumerable`1<string> GetStrings();
    public sealed virtual IEnumerable`1<INamedTypeDefinition> GetAllTypes();
    public sealed virtual IEnumerable`1<IGenericMethodInstanceReference> GetGenericMethodInstances();
    public sealed virtual IEnumerable`1<ITypeReference> GetStructuralTypeInstances();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetStructuralTypeInstanceMembers();
    public sealed virtual IEnumerable`1<ITypeReference> GetTypeReferences();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetTypeMemberReferences();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual string get_Location();
    public sealed virtual IEnumerable`1<IPESection> get_UninterpretedSections();
    public sealed virtual IName get_Name();
    public sealed virtual IRootUnitNamespace get_UnitNamespaceRoot();
    public sealed virtual IEnumerable`1<IUnitReference> get_UnitReferences();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_NamespaceRoot();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
}
internal class Microsoft.Cci.DummyModuleReference : Dummy {
    public IName Name { get; }
    public IAssemblyReference ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public IUnit ResolvedUnit { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public UnitIdentity UnitIdentity { get; }
    public sealed virtual IName get_Name();
    public sealed virtual IAssemblyReference get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual UnitIdentity get_UnitIdentity();
}
internal class Microsoft.Cci.DummyName : Dummy {
    public int UniqueKey { get; }
    public int UniqueKeyIgnoringCase { get; }
    public string Value { get; }
    public sealed virtual int get_UniqueKey();
    public sealed virtual int get_UniqueKeyIgnoringCase();
    public sealed virtual string get_Value();
}
internal class Microsoft.Cci.DummyNamedArgument : Dummy {
    public IName ArgumentName { get; }
    public IMetadataExpression ArgumentValue { get; }
    public bool IsField { get; }
    public object ResolvedDefinition { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public ITypeReference Type { get; }
    public sealed virtual IName get_ArgumentName();
    public sealed virtual IMetadataExpression get_ArgumentValue();
    public sealed virtual bool get_IsField();
    public sealed virtual object get_ResolvedDefinition();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual ITypeReference get_Type();
}
internal class Microsoft.Cci.DummyNamespaceAliasForType : Dummy {
    public INamedTypeReference AliasedType { get; }
    public IEnumerable`1<IAliasMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public bool IsPublic { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IName Name { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public sealed virtual INamedTypeReference get_AliasedType();
    public sealed virtual IEnumerable`1<IAliasMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(IAliasMember member);
    public sealed virtual IEnumerable`1<IAliasMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<IAliasMember, bool> predicate);
    public sealed virtual IEnumerable`1<IAliasMember> GetMatchingMembers(Function`2<IAliasMember, bool> predicate);
    public sealed virtual IEnumerable`1<IAliasMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual bool get_IsPublic();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
}
internal class Microsoft.Cci.DummyNamespaceTypeDefinition : Dummy {
    public IUnitNamespace ContainingUnitNamespace { get; }
    public bool IsPublic { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IName Name { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    private IUnitNamespaceReference Microsoft.Cci.INamespaceTypeReference.ContainingUnitNamespace { get; }
    private INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public bool IsForeignObject { get; }
    public sealed virtual IUnitNamespace get_ContainingUnitNamespace();
    public sealed virtual bool get_IsPublic();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override IUnitNamespaceReference Microsoft.Cci.INamespaceTypeReference.get_ContainingUnitNamespace();
    private sealed virtual override INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
    public sealed virtual IEnumerable`1<ICustomAttribute> AttributesFor(ITypeReference implementedInterface);
    public sealed virtual bool get_IsForeignObject();
}
internal class Microsoft.Cci.DummyNamespaceTypeReference : Dummy {
    public ushort GenericParameterCount { get; }
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    private INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    private sealed virtual override INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
internal class Microsoft.Cci.DummyNameTable : Dummy {
    public IName Address { get; }
    public IName AllowMultiple { get; }
    public IName BeginInvoke { get; }
    public IName BoolOpBool { get; }
    public IName DecimalOpDecimal { get; }
    public IName DelegateOpDelegate { get; }
    public IName Cctor { get; }
    public IName Ctor { get; }
    public IName EmptyName { get; }
    public IName EndInvoke { get; }
    public IName EnumOpEnum { get; }
    public IName EnumOpNum { get; }
    public IName Equals { get; }
    public IName Float32OpFloat32 { get; }
    public IName Float64OpFloat64 { get; }
    public IName Get { get; }
    public IName global { get; }
    public IName HasValue { get; }
    public IName Inherited { get; }
    public IName Invoke { get; }
    public IName Int16OpInt16 { get; }
    public IName Int32OpInt32 { get; }
    public IName Int32OpUInt32 { get; }
    public IName Int64OpInt32 { get; }
    public IName Int64OpUInt32 { get; }
    public IName Int64OpUInt64 { get; }
    public IName Int64OpInt64 { get; }
    public IName Int8OpInt8 { get; }
    public IName NullCoalescing { get; }
    public IName NumOpEnum { get; }
    public IName ObjectOpObject { get; }
    public IName ObjectOpString { get; }
    public IName OpAddition { get; }
    public IName OpBoolean { get; }
    public IName OpChar { get; }
    public IName OpDecimal { get; }
    public IName OpEnum { get; }
    public IName OpEquality { get; }
    public IName OpInequality { get; }
    public IName OpInt8 { get; }
    public IName OpInt16 { get; }
    public IName OpInt32 { get; }
    public IName OpInt64 { get; }
    public IName OpBitwiseAnd { get; }
    public IName OpBitwiseOr { get; }
    public IName OpComma { get; }
    public IName OpConcatentation { get; }
    public IName OpDivision { get; }
    public IName OpExclusiveOr { get; }
    public IName OpExplicit { get; }
    public IName OpExponentiation { get; }
    public IName OpFalse { get; }
    public IName OpFloat32 { get; }
    public IName OpFloat64 { get; }
    public IName OpGreaterThan { get; }
    public IName OpGreaterThanOrEqual { get; }
    public IName OpImplicit { get; }
    public IName OpIntegerDivision { get; }
    public IName OpLeftShift { get; }
    public IName OpLessThan { get; }
    public IName OpLessThanOrEqual { get; }
    public IName OpLike { get; }
    public IName OpLogicalNot { get; }
    public IName OpLogicalOr { get; }
    public IName OpModulus { get; }
    public IName OpMultiply { get; }
    public IName OpOnesComplement { get; }
    public IName OpDecrement { get; }
    public IName OpIncrement { get; }
    public IName OpRightShift { get; }
    public IName OpSubtraction { get; }
    public IName OpTrue { get; }
    public IName OpUInt8 { get; }
    public IName OpUInt16 { get; }
    public IName OpUInt32 { get; }
    public IName OpUInt64 { get; }
    public IName OpUnaryNegation { get; }
    public IName OpUnaryPlus { get; }
    public IName StringOpObject { get; }
    public IName StringOpString { get; }
    public IName value { get; }
    public IName UIntPtrOpUIntPtr { get; }
    public IName UInt32OpInt32 { get; }
    public IName UInt32OpUInt32 { get; }
    public IName UInt64OpInt32 { get; }
    public IName UInt64OpUInt32 { get; }
    public IName UInt64OpUInt64 { get; }
    public IName System { get; }
    public IName Void { get; }
    public IName VoidPtrOpVoidPtr { get; }
    public IName Boolean { get; }
    public IName Char { get; }
    public IName Byte { get; }
    public IName SByte { get; }
    public IName Int16 { get; }
    public IName UInt16 { get; }
    public IName Int32 { get; }
    public IName UInt32 { get; }
    public IName Int64 { get; }
    public IName UInt64 { get; }
    public IName String { get; }
    public IName IntPtr { get; }
    public IName UIntPtr { get; }
    public IName Object { get; }
    public IName Set { get; }
    public IName Single { get; }
    public IName Double { get; }
    public IName TypedReference { get; }
    public IName Enum { get; }
    public IName MulticastDelegate { get; }
    public IName ValueType { get; }
    public IName Type { get; }
    public IName Array { get; }
    public IName AttributeUsageAttribute { get; }
    public IName Attribute { get; }
    public IName Combine { get; }
    public IName Concat { get; }
    public IName DateTime { get; }
    public IName DebuggerHiddenAttribute { get; }
    public IName Decimal { get; }
    public IName Delegate { get; }
    public IName Diagnostics { get; }
    public IName DBNull { get; }
    public IName Length { get; }
    public IName LongLength { get; }
    public IName Nullable { get; }
    public IName Remove { get; }
    public IName Result { get; }
    public sealed virtual IName get_Address();
    public sealed virtual IName get_AllowMultiple();
    public sealed virtual IName get_BeginInvoke();
    public sealed virtual IName get_BoolOpBool();
    public sealed virtual IName get_DecimalOpDecimal();
    public sealed virtual IName get_DelegateOpDelegate();
    public sealed virtual IName get_Cctor();
    public sealed virtual IName get_Ctor();
    public sealed virtual IName get_EmptyName();
    public sealed virtual IName get_EndInvoke();
    public sealed virtual IName get_EnumOpEnum();
    public sealed virtual IName get_EnumOpNum();
    public sealed virtual IName get_Equals();
    public sealed virtual IName get_Float32OpFloat32();
    public sealed virtual IName get_Float64OpFloat64();
    public sealed virtual IName get_Get();
    public sealed virtual IName GetNameFor(string name);
    public sealed virtual IName get_global();
    public sealed virtual IName get_HasValue();
    public sealed virtual IName get_Inherited();
    public sealed virtual IName get_Invoke();
    public sealed virtual IName get_Int16OpInt16();
    public sealed virtual IName get_Int32OpInt32();
    public sealed virtual IName get_Int32OpUInt32();
    public sealed virtual IName get_Int64OpInt32();
    public sealed virtual IName get_Int64OpUInt32();
    public sealed virtual IName get_Int64OpUInt64();
    public sealed virtual IName get_Int64OpInt64();
    public sealed virtual IName get_Int8OpInt8();
    public sealed virtual IName get_NullCoalescing();
    public sealed virtual IName get_NumOpEnum();
    public sealed virtual IName get_ObjectOpObject();
    public sealed virtual IName get_ObjectOpString();
    public sealed virtual IName get_OpAddition();
    public sealed virtual IName get_OpBoolean();
    public sealed virtual IName get_OpChar();
    public sealed virtual IName get_OpDecimal();
    public sealed virtual IName get_OpEnum();
    public sealed virtual IName get_OpEquality();
    public sealed virtual IName get_OpInequality();
    public sealed virtual IName get_OpInt8();
    public sealed virtual IName get_OpInt16();
    public sealed virtual IName get_OpInt32();
    public sealed virtual IName get_OpInt64();
    public sealed virtual IName get_OpBitwiseAnd();
    public sealed virtual IName get_OpBitwiseOr();
    public sealed virtual IName get_OpComma();
    public sealed virtual IName get_OpConcatentation();
    public sealed virtual IName get_OpDivision();
    public sealed virtual IName get_OpExclusiveOr();
    public sealed virtual IName get_OpExplicit();
    public sealed virtual IName get_OpExponentiation();
    public sealed virtual IName get_OpFalse();
    public sealed virtual IName get_OpFloat32();
    public sealed virtual IName get_OpFloat64();
    public sealed virtual IName get_OpGreaterThan();
    public sealed virtual IName get_OpGreaterThanOrEqual();
    public sealed virtual IName get_OpImplicit();
    public sealed virtual IName get_OpIntegerDivision();
    public sealed virtual IName get_OpLeftShift();
    public sealed virtual IName get_OpLessThan();
    public sealed virtual IName get_OpLessThanOrEqual();
    public sealed virtual IName get_OpLike();
    public sealed virtual IName get_OpLogicalNot();
    public sealed virtual IName get_OpLogicalOr();
    public sealed virtual IName get_OpModulus();
    public sealed virtual IName get_OpMultiply();
    public sealed virtual IName get_OpOnesComplement();
    public sealed virtual IName get_OpDecrement();
    public sealed virtual IName get_OpIncrement();
    public sealed virtual IName get_OpRightShift();
    public sealed virtual IName get_OpSubtraction();
    public sealed virtual IName get_OpTrue();
    public sealed virtual IName get_OpUInt8();
    public sealed virtual IName get_OpUInt16();
    public sealed virtual IName get_OpUInt32();
    public sealed virtual IName get_OpUInt64();
    public sealed virtual IName get_OpUnaryNegation();
    public sealed virtual IName get_OpUnaryPlus();
    public sealed virtual IName get_StringOpObject();
    public sealed virtual IName get_StringOpString();
    public sealed virtual IName get_value();
    public sealed virtual IName get_UIntPtrOpUIntPtr();
    public sealed virtual IName get_UInt32OpInt32();
    public sealed virtual IName get_UInt32OpUInt32();
    public sealed virtual IName get_UInt64OpInt32();
    public sealed virtual IName get_UInt64OpUInt32();
    public sealed virtual IName get_UInt64OpUInt64();
    public sealed virtual IName get_System();
    public sealed virtual IName get_Void();
    public sealed virtual IName get_VoidPtrOpVoidPtr();
    public sealed virtual IName get_Boolean();
    public sealed virtual IName get_Char();
    public sealed virtual IName get_Byte();
    public sealed virtual IName get_SByte();
    public sealed virtual IName get_Int16();
    public sealed virtual IName get_UInt16();
    public sealed virtual IName get_Int32();
    public sealed virtual IName get_UInt32();
    public sealed virtual IName get_Int64();
    public sealed virtual IName get_UInt64();
    public sealed virtual IName get_String();
    public sealed virtual IName get_IntPtr();
    public sealed virtual IName get_UIntPtr();
    public sealed virtual IName get_Object();
    public sealed virtual IName get_Set();
    public sealed virtual IName get_Single();
    public sealed virtual IName get_Double();
    public sealed virtual IName get_TypedReference();
    public sealed virtual IName get_Enum();
    public sealed virtual IName get_MulticastDelegate();
    public sealed virtual IName get_ValueType();
    public sealed virtual IName get_Type();
    public sealed virtual IName get_Array();
    public sealed virtual IName get_AttributeUsageAttribute();
    public sealed virtual IName get_Attribute();
    public sealed virtual IName get_Combine();
    public sealed virtual IName get_Concat();
    public sealed virtual IName get_DateTime();
    public sealed virtual IName get_DebuggerHiddenAttribute();
    public sealed virtual IName get_Decimal();
    public sealed virtual IName get_Delegate();
    public sealed virtual IName get_Diagnostics();
    public sealed virtual IName get_DBNull();
    public sealed virtual IName get_Length();
    public sealed virtual IName get_LongLength();
    public sealed virtual IName get_Nullable();
    public sealed virtual IName get_Remove();
    public sealed virtual IName get_Result();
}
internal class Microsoft.Cci.DummyNestedType : Dummy {
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public bool DoesNotInheritGenericParameters { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    private ITypeReference Microsoft.Cci.ITypeMemberReference.ContainingType { get; }
    private INestedTypeDefinition Microsoft.Cci.INestedTypeReference.ResolvedType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual bool get_DoesNotInheritGenericParameters();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override ITypeReference Microsoft.Cci.ITypeMemberReference.get_ContainingType();
    private sealed virtual override INestedTypeDefinition Microsoft.Cci.INestedTypeReference.get_ResolvedType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
internal class Microsoft.Cci.DummyNestedTypeReference : Dummy {
    public ushort GenericParameterCount { get; }
    public INestedTypeDefinition ResolvedType { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual INestedTypeDefinition get_ResolvedType();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
}
internal class Microsoft.Cci.DummyNestedUnitNamespace : Dummy {
    public IEnumerable`1<ILocation> Locations { get; }
    public IUnit Unit { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IName Name { get; }
    private IUnitReference Microsoft.Cci.IUnitNamespaceReference.Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IUnitNamespace ContainingUnitNamespace { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    private IUnitNamespaceReference Microsoft.Cci.INestedUnitNamespaceReference.ContainingUnitNamespace { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IUnit get_Unit();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
    private sealed virtual override IUnitReference Microsoft.Cci.IUnitNamespaceReference.get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual IUnitNamespace get_ContainingUnitNamespace();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    private sealed virtual override IUnitNamespaceReference Microsoft.Cci.INestedUnitNamespaceReference.get_ContainingUnitNamespace();
    public sealed virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
}
internal class Microsoft.Cci.DummyNestedUnitNamespaceReference : Dummy {
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    public IUnitReference Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public sealed virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
    public sealed virtual IUnitReference get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
internal class Microsoft.Cci.DummyOperation : Dummy {
    public OperationCode OperationCode { get; }
    public UInt32 Offset { get; }
    public ILocation Location { get; }
    public object Value { get; }
    public sealed virtual OperationCode get_OperationCode();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual ILocation get_Location();
    public sealed virtual object get_Value();
}
internal class Microsoft.Cci.DummyOperationExceptionInformation : Dummy {
    public HandlerKind HandlerKind { get; }
    public ITypeReference ExceptionType { get; }
    public UInt32 TryStartOffset { get; }
    public UInt32 TryEndOffset { get; }
    public UInt32 FilterDecisionStartOffset { get; }
    public UInt32 HandlerStartOffset { get; }
    public UInt32 HandlerEndOffset { get; }
    public sealed virtual HandlerKind get_HandlerKind();
    public sealed virtual ITypeReference get_ExceptionType();
    public sealed virtual UInt32 get_TryStartOffset();
    public sealed virtual UInt32 get_TryEndOffset();
    public sealed virtual UInt32 get_FilterDecisionStartOffset();
    public sealed virtual UInt32 get_HandlerStartOffset();
    public sealed virtual UInt32 get_HandlerEndOffset();
}
internal class Microsoft.Cci.DummyParameterDefinition : Dummy {
    public ISignature ContainingSignature { get; }
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsIn { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsParameterArray { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference ParamArrayElementType { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IName Name { get; }
    public ushort Index { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    public ITypeReference Type { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IMetadataConstant get_DefaultValue();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual bool get_IsIn();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsOptional();
    public sealed virtual bool get_IsOut();
    public sealed virtual bool get_IsParameterArray();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual ITypeReference get_ParamArrayElementType();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IMetadataConstant get_Constant();
}
internal class Microsoft.Cci.DummyParameterTypeInformation : Dummy {
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    public ITypeReference Type { get; }
    public ushort Index { get; }
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ushort get_Index();
}
internal class Microsoft.Cci.DummyPlatformInvokeInformation : Dummy {
    public IName ImportName { get; }
    public IModuleReference ImportModule { get; }
    public StringFormatKind StringFormat { get; }
    public bool NoMangle { get; }
    public bool SupportsLastError { get; }
    public PInvokeCallingConvention PInvokeCallingConvention { get; }
    public Nullable`1<bool> UseBestFit { get; }
    public Nullable`1<bool> ThrowExceptionForUnmappableChar { get; }
    public sealed virtual IName get_ImportName();
    public sealed virtual IModuleReference get_ImportModule();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_NoMangle();
    public sealed virtual bool get_SupportsLastError();
    public sealed virtual PInvokeCallingConvention get_PInvokeCallingConvention();
    public sealed virtual Nullable`1<bool> get_UseBestFit();
    public sealed virtual Nullable`1<bool> get_ThrowExceptionForUnmappableChar();
}
internal class Microsoft.Cci.DummyPlatformType : Dummy {
    public INamespaceTypeReference SystemDiagnosticsContractsContract { get; }
    public byte PointerSize { get; }
    public INamespaceTypeReference SystemArgIterator { get; }
    public INamespaceTypeReference SystemArray { get; }
    public INamespaceTypeReference SystemAttribute { get; }
    public INamespaceTypeReference SystemAttributeUsageAttribute { get; }
    public INamespaceTypeReference SystemAsyncCallback { get; }
    public INamespaceTypeReference SystemBoolean { get; }
    public INamespaceTypeReference SystemChar { get; }
    public INamespaceTypeReference SystemCollectionsGenericDictionary { get; }
    public INamespaceTypeReference SystemCollectionsGenericICollection { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsGenericIList { get; }
    public INamespaceTypeReference SystemCollectionsICollection { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsIList { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralComparable { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralEquatable { get; }
    public INamespaceTypeReference SystemContextStaticAttribute { get; }
    public INamespaceTypeReference SystemIAsyncResult { get; }
    public INamespaceTypeReference SystemICloneable { get; }
    public INamespaceTypeReference SystemDateTime { get; }
    public INamespaceTypeReference SystemDateTimeOffset { get; }
    public INamespaceTypeReference SystemDecimal { get; }
    public INamespaceTypeReference SystemDelegate { get; }
    public INamespaceTypeReference SystemDBNull { get; }
    public INamespaceTypeReference SystemEnum { get; }
    public INamespaceTypeReference SystemException { get; }
    public INamespaceTypeReference SystemFloat32 { get; }
    public INamespaceTypeReference SystemFloat64 { get; }
    public INamespaceTypeReference SystemGlobalizationCultureInfo { get; }
    public INamespaceTypeReference SystemInt16 { get; }
    public INamespaceTypeReference SystemInt32 { get; }
    public INamespaceTypeReference SystemInt64 { get; }
    public INamespaceTypeReference SystemInt8 { get; }
    public INamespaceTypeReference SystemIntPtr { get; }
    public INamespaceTypeReference SystemMulticastDelegate { get; }
    public INamespaceTypeReference SystemNullable { get; }
    public INamespaceTypeReference SystemObject { get; }
    public INamespaceTypeReference SystemReflectionAssemblySignatureKeyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeArgumentHandle { get; }
    public INamespaceTypeReference SystemRuntimeFieldHandle { get; }
    public INamespaceTypeReference SystemRuntimeMethodHandle { get; }
    public INamespaceTypeReference SystemRuntimeTypeHandle { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCallConvCdecl { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCompilerGeneratedAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesExtensionAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesInternalsVisibleToAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsConst { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsVolatile { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesReferenceAssemblyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeInteropServicesDllImportAttribute { get; }
    public INamespaceTypeReference SystemSecurityPermissionsSecurityAction { get; }
    public INamespaceTypeReference SystemSecuritySecurityCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySecuritySafeCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySuppressUnmanagedCodeSecurityAttribute { get; }
    public INamespaceTypeReference SystemString { get; }
    public INamespaceTypeReference SystemThreadStaticAttribute { get; }
    public INamespaceTypeReference SystemType { get; }
    public INamespaceTypeReference SystemTypedReference { get; }
    public INamespaceTypeReference SystemUInt16 { get; }
    public INamespaceTypeReference SystemUInt32 { get; }
    public INamespaceTypeReference SystemUInt64 { get; }
    public INamespaceTypeReference SystemUInt8 { get; }
    public INamespaceTypeReference SystemUIntPtr { get; }
    public INamespaceTypeReference SystemValueType { get; }
    public INamespaceTypeReference SystemVoid { get; }
    public sealed virtual INamespaceTypeReference get_SystemDiagnosticsContractsContract();
    public sealed virtual byte get_PointerSize();
    public sealed virtual INamespaceTypeReference get_SystemArgIterator();
    public sealed virtual INamespaceTypeReference get_SystemArray();
    public sealed virtual INamespaceTypeReference get_SystemAttribute();
    public sealed virtual INamespaceTypeReference get_SystemAttributeUsageAttribute();
    public sealed virtual INamespaceTypeReference get_SystemAsyncCallback();
    public sealed virtual INamespaceTypeReference get_SystemBoolean();
    public sealed virtual INamespaceTypeReference get_SystemChar();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericDictionary();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericICollection();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerator();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIList();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsICollection();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIEnumerable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIEnumerator();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIList();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIStructuralComparable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIStructuralEquatable();
    public sealed virtual INamespaceTypeReference get_SystemContextStaticAttribute();
    public sealed virtual INamespaceTypeReference get_SystemIAsyncResult();
    public sealed virtual INamespaceTypeReference get_SystemICloneable();
    public sealed virtual INamespaceTypeReference get_SystemDateTime();
    public sealed virtual INamespaceTypeReference get_SystemDateTimeOffset();
    public sealed virtual INamespaceTypeReference get_SystemDecimal();
    public sealed virtual INamespaceTypeReference get_SystemDelegate();
    public sealed virtual INamespaceTypeReference get_SystemDBNull();
    public sealed virtual INamespaceTypeReference get_SystemEnum();
    public sealed virtual INamespaceTypeReference get_SystemException();
    public sealed virtual INamespaceTypeReference get_SystemFloat32();
    public sealed virtual INamespaceTypeReference get_SystemFloat64();
    public sealed virtual INamespaceTypeReference get_SystemGlobalizationCultureInfo();
    public sealed virtual INamespaceTypeReference get_SystemInt16();
    public sealed virtual INamespaceTypeReference get_SystemInt32();
    public sealed virtual INamespaceTypeReference get_SystemInt64();
    public sealed virtual INamespaceTypeReference get_SystemInt8();
    public sealed virtual INamespaceTypeReference get_SystemIntPtr();
    public sealed virtual INamespaceTypeReference get_SystemMulticastDelegate();
    public sealed virtual INamespaceTypeReference get_SystemNullable();
    public sealed virtual INamespaceTypeReference get_SystemObject();
    public sealed virtual INamespaceTypeReference get_SystemReflectionAssemblySignatureKeyAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeArgumentHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeFieldHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeMethodHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeTypeHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCallConvCdecl();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCompilerGeneratedAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesExtensionAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesInternalsVisibleToAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsConst();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsVolatile();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesReferenceAssemblyAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeInteropServicesDllImportAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecurityPermissionsSecurityAction();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySecurityCriticalAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySecuritySafeCriticalAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySuppressUnmanagedCodeSecurityAttribute();
    public sealed virtual INamespaceTypeReference get_SystemString();
    public sealed virtual INamespaceTypeReference get_SystemThreadStaticAttribute();
    public sealed virtual INamespaceTypeReference get_SystemType();
    public sealed virtual INamespaceTypeReference get_SystemTypedReference();
    public sealed virtual INamespaceTypeReference get_SystemUInt16();
    public sealed virtual INamespaceTypeReference get_SystemUInt32();
    public sealed virtual INamespaceTypeReference get_SystemUInt64();
    public sealed virtual INamespaceTypeReference get_SystemUInt8();
    public sealed virtual INamespaceTypeReference get_SystemUIntPtr();
    public sealed virtual INamespaceTypeReference get_SystemValueType();
    public sealed virtual INamespaceTypeReference get_SystemVoid();
    public sealed virtual INamespaceTypeReference GetTypeFor(PrimitiveTypeCode typeCode);
}
internal class Microsoft.Cci.DummyPropertyDefinition : Dummy {
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMetadataConstant DefaultValue { get; }
    public IMethodReference Getter { get; }
    public bool HasDefaultValue { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IMethodReference Setter { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public CallingConvention CallingConvention { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public sealed virtual IMetadataConstant get_DefaultValue();
    public sealed virtual IMethodReference get_Getter();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IMethodReference get_Setter();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IMetadataConstant get_Constant();
}
internal class Microsoft.Cci.DummyResource : Dummy {
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<byte> Data { get; }
    public IAssemblyReference DefiningAssembly { get; }
    public bool IsInExternalFile { get; }
    public IFileReference ExternalFile { get; }
    public bool IsPublic { get; }
    public IName Name { get; }
    public IResource Resource { get; }
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<byte> get_Data();
    public sealed virtual IAssemblyReference get_DefiningAssembly();
    public sealed virtual bool get_IsInExternalFile();
    public sealed virtual IFileReference get_ExternalFile();
    public sealed virtual bool get_IsPublic();
    public sealed virtual IName get_Name();
    public sealed virtual IResource get_Resource();
}
internal class Microsoft.Cci.DummyRootUnitNamespace : Dummy {
    public IEnumerable`1<ILocation> Locations { get; }
    public IUnit Unit { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IName Name { get; }
    private IUnitReference Microsoft.Cci.IUnitNamespaceReference.Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IUnit get_Unit();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
    private sealed virtual override IUnitReference Microsoft.Cci.IUnitNamespaceReference.get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
}
internal class Microsoft.Cci.DummyRootUnitSetNamespace : Dummy {
    public IUnitSet UnitSet { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IUnitSet get_UnitSet();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
}
internal class Microsoft.Cci.DummySectionBlock : Dummy {
    public PESectionKind PESectionKind { get; }
    public UInt32 Offset { get; }
    public UInt32 Size { get; }
    public IEnumerable`1<byte> Data { get; }
    public sealed virtual PESectionKind get_PESectionKind();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual UInt32 get_Size();
    public sealed virtual IEnumerable`1<byte> get_Data();
}
internal class Microsoft.Cci.DummySecurityAttribute : Dummy {
    public SecurityAction Action { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public sealed virtual SecurityAction get_Action();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
}
internal class Microsoft.Cci.DummySpecializedFieldDefinition : Dummy {
    public UInt32 BitLength { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsBitField { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public bool IsCompileTimeConstant { get; }
    public bool IsMapped { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsModified { get; }
    public bool IsNotSerialized { get; }
    public bool IsReadOnly { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public ISectionBlock FieldMapping { get; }
    public UInt32 Offset { get; }
    public int SequenceNumber { get; }
    public IMetadataConstant CompileTimeValue { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference Type { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public IFieldDefinition UnspecializedVersion { get; }
    private IFieldReference Microsoft.Cci.ISpecializedFieldReference.UnspecializedVersion { get; }
    public UInt32 InternedKey { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual UInt32 get_BitLength();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsBitField();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool get_IsCompileTimeConstant();
    public sealed virtual bool get_IsMapped();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsNotSerialized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ISectionBlock get_FieldMapping();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual int get_SequenceNumber();
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual IFieldDefinition get_UnspecializedVersion();
    private sealed virtual override IFieldReference Microsoft.Cci.ISpecializedFieldReference.get_UnspecializedVersion();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IMetadataConstant get_Constant();
}
internal class Microsoft.Cci.DummySpecializedMethodDefinition : Dummy {
    public IMethodDefinition UnspecializedVersion { get; }
    private IMethodReference Microsoft.Cci.ISpecializedMethodReference.UnspecializedVersion { get; }
    public bool AcceptsExtraArguments { get; }
    public IMethodBody Body { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsCil { get; }
    public bool IsConstructor { get; }
    public bool IsStaticConstructor { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsGeneric { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public bool IsSynchronized { get; }
    public bool IsVirtual { get; }
    public bool IsUnmanaged { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public CallingConvention CallingConvention { get; }
    public bool PreserveSignature { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public bool RequiresSecurityObject { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsModified { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public IName ReturnValueName { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public bool ReturnValueIsByRef { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public ITypeReference Type { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public UInt32 InternedKey { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public sealed virtual IMethodDefinition get_UnspecializedVersion();
    private sealed virtual override IMethodReference Microsoft.Cci.ISpecializedMethodReference.get_UnspecializedVersion();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual IMethodBody get_Body();
    public sealed virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsStaticConstructor();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual bool get_RequiresSecurityObject();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public sealed virtual IName get_ReturnValueName();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
}
internal class Microsoft.Cci.DummySpecializedNestedTypeDefinition : Dummy {
    public INestedTypeDefinition UnspecializedVersion { get; }
    private INestedTypeReference Microsoft.Cci.ISpecializedNestedTypeReference.UnspecializedVersion { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public bool DoesNotInheritGenericParameters { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    private ITypeReference Microsoft.Cci.ITypeMemberReference.ContainingType { get; }
    private INestedTypeDefinition Microsoft.Cci.INestedTypeReference.ResolvedType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public sealed virtual INestedTypeDefinition get_UnspecializedVersion();
    private sealed virtual override INestedTypeReference Microsoft.Cci.ISpecializedNestedTypeReference.get_UnspecializedVersion();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual bool get_DoesNotInheritGenericParameters();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override ITypeReference Microsoft.Cci.ITypeMemberReference.get_ContainingType();
    private sealed virtual override INestedTypeDefinition Microsoft.Cci.INestedTypeReference.get_ResolvedType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
internal class Microsoft.Cci.DummySpecializedPropertyDefinition : Dummy {
    public IPropertyDefinition UnspecializedVersion { get; }
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMetadataConstant DefaultValue { get; }
    public IMethodReference Getter { get; }
    public bool HasDefaultValue { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IMethodReference Setter { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public CallingConvention CallingConvention { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual IPropertyDefinition get_UnspecializedVersion();
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public sealed virtual IMetadataConstant get_DefaultValue();
    public sealed virtual IMethodReference get_Getter();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IMethodReference get_Setter();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IMetadataConstant get_Constant();
}
internal class Microsoft.Cci.DummyUnitSet : Dummy {
    public IEnumerable`1<IUnit> Units { get; }
    public IUnitSetNamespace UnitSetNamespaceRoot { get; }
    public INamespaceDefinition NamespaceRoot { get; }
    public sealed virtual bool Contains(IUnit unit);
    public sealed virtual IEnumerable`1<IUnit> get_Units();
    public sealed virtual IUnitSetNamespace get_UnitSetNamespaceRoot();
    public sealed virtual INamespaceDefinition get_NamespaceRoot();
}
public static class Microsoft.Cci.Enumerable`1 : object {
    private static IEnumerable`1<T> empty;
    public static IEnumerable`1<T> Empty { get; }
    private static Enumerable`1();
    public static IEnumerable`1<T> get_Empty();
}
public class Microsoft.Cci.ErrorEventArgs : EventArgs {
    private object errorReporter;
    private ILocation location;
    private IEnumerable`1<IErrorMessage> errors;
    public object ErrorReporter { get; }
    public ILocation Location { get; }
    public IEnumerable`1<IErrorMessage> Errors { get; }
    public ErrorEventArgs(object errorReporter, ILocation location, IEnumerable`1<IErrorMessage> errors);
    private void ObjectInvariant();
    public object get_ErrorReporter();
    public ILocation get_Location();
    public IEnumerable`1<IErrorMessage> get_Errors();
}
public class Microsoft.Cci.Function`2 : MulticastDelegate {
    public Function`2(object object, IntPtr method);
    public virtual R Invoke(P p);
    public virtual IAsyncResult BeginInvoke(P p, AsyncCallback callback, object object);
    public virtual R EndInvoke(IAsyncResult result);
}
public class Microsoft.Cci.Function`3 : MulticastDelegate {
    public Function`3(object object, IntPtr method);
    public virtual R Invoke(P p, Q q);
    public virtual IAsyncResult BeginInvoke(P p, Q q, AsyncCallback callback, object object);
    public virtual R EndInvoke(IAsyncResult result);
}
public class Microsoft.Cci.GenericMethodParameterInformationComparer : object {
    private bool resolveTypes;
    public GenericMethodParameterInformationComparer(bool resolveTypes);
    public sealed virtual bool Equals(IParameterTypeInformation x, IParameterTypeInformation y);
    public sealed virtual int GetHashCode(IParameterTypeInformation parameterTypeInformation);
}
public static class Microsoft.Cci.GlobalAssemblyCache : object {
    private static bool FusionLoaded;
    public static bool Contains(Uri codeBaseUri);
    public static string GetLocation(AssemblyIdentity assemblyIdentity, IMetadataHost metadataHost);
    private static IntPtr LoadLibrary(string lpFileName);
    private static int CreateAssemblyEnum(IAssemblyEnum& ppEnum, IApplicationContext pAppCtx, IAssemblyName pName, UInt32 dwFlags, int pvReserved);
}
public static class Microsoft.Cci.GlobalLock : object {
    public static object LockingObject;
    private static GlobalLock();
}
public enum Microsoft.Cci.HandlerKind : Enum {
    public int value__;
    public static HandlerKind Illegal;
    public static HandlerKind Catch;
    public static HandlerKind Filter;
    public static HandlerKind Finally;
    public static HandlerKind Fault;
}
public interface Microsoft.Cci.IAliasForType {
    public INamedTypeReference AliasedType { get; }
    public IEnumerable`1<IAliasMember> Members { get; }
    public abstract virtual INamedTypeReference get_AliasedType();
    public abstract virtual IEnumerable`1<IAliasMember> get_Members();
}
internal abstract class Microsoft.Cci.IAliasForTypeContract : object {
    public INamedTypeReference AliasedType { get; }
    private IEnumerable`1<IAliasMember> Microsoft.Cci.IAliasForType.Members { get; }
    public IEnumerable`1<IAliasMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual INamedTypeReference get_AliasedType();
    private sealed virtual override IEnumerable`1<IAliasMember> Microsoft.Cci.IAliasForType.get_Members();
    public sealed virtual IEnumerable`1<IAliasMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(IAliasMember member);
    public sealed virtual IEnumerable`1<IAliasMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<IAliasMember, bool> predicate);
    public sealed virtual IEnumerable`1<IAliasMember> GetMatchingMembers(Function`2<IAliasMember, bool> predicate);
    public sealed virtual IEnumerable`1<IAliasMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IAliasMember {
    public IAliasForType ContainingAlias { get; }
    public TypeMemberVisibility Visibility { get; }
    public abstract virtual IAliasForType get_ContainingAlias();
    public abstract virtual TypeMemberVisibility get_Visibility();
}
[GuidAttribute("7C23FF90-33AF-11D3-95DA-00A024A85B51")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Cci.IApplicationContext {
    public abstract virtual void SetContextNameObject(IAssemblyName pName);
    public abstract virtual void GetContextNameObject(IAssemblyName& ppName);
    public abstract virtual void Set(string szName, int pvValue, UInt32 cbValue, UInt32 dwFlags);
    public abstract virtual void Get(string szName, Int32& pvValue, UInt32& pcbValue, UInt32 dwFlags);
    public abstract virtual void GetDynamicDirectory(Int32& wzDynamicDir, UInt32& pdwSize);
}
public interface Microsoft.Cci.IArrayType {
}
public interface Microsoft.Cci.IArrayTypeReference {
    public ITypeReference ElementType { get; }
    public bool IsVector { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    public abstract virtual ITypeReference get_ElementType();
    public abstract virtual bool get_IsVector();
    public abstract virtual IEnumerable`1<int> get_LowerBounds();
    public abstract virtual UInt32 get_Rank();
    public abstract virtual IEnumerable`1<ulong> get_Sizes();
}
internal abstract class Microsoft.Cci.IArrayTypeReferenceContract : object {
    public ITypeReference ElementType { get; }
    public bool IsVector { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual ITypeReference get_ElementType();
    public sealed virtual bool get_IsVector();
    public sealed virtual IEnumerable`1<int> get_LowerBounds();
    public sealed virtual UInt32 get_Rank();
    public sealed virtual IEnumerable`1<ulong> get_Sizes();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IAssembly {
    public IEnumerable`1<ICustomAttribute> AssemblyAttributes { get; }
    public IEnumerable`1<IAliasForType> ExportedTypes { get; }
    public IEnumerable`1<IFileReference> Files { get; }
    public UInt32 Flags { get; }
    public IEnumerable`1<IModule> MemberModules { get; }
    public IEnumerable`1<IResourceReference> Resources { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public abstract virtual IEnumerable`1<ICustomAttribute> get_AssemblyAttributes();
    public abstract virtual IEnumerable`1<IAliasForType> get_ExportedTypes();
    public abstract virtual IEnumerable`1<IFileReference> get_Files();
    public abstract virtual UInt32 get_Flags();
    public abstract virtual IEnumerable`1<IModule> get_MemberModules();
    public abstract virtual IEnumerable`1<IResourceReference> get_Resources();
    public abstract virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
}
internal abstract class Microsoft.Cci.IAssemblyContract : object {
    public IEnumerable`1<ICustomAttribute> AssemblyAttributes { get; }
    public IEnumerable`1<IAliasForType> ExportedTypes { get; }
    public IEnumerable`1<IFileReference> Files { get; }
    public UInt32 Flags { get; }
    public IEnumerable`1<IModule> MemberModules { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public IEnumerable`1<byte> PublicKey { get; }
    public IEnumerable`1<IResourceReference> Resources { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public IEnumerable`1<IAssemblyReference> AssemblyReferences { get; }
    public ulong BaseAddress { get; }
    public IAssembly ContainingAssembly { get; }
    public string DebugInformationLocation { get; }
    public string DebugInformationVersion { get; }
    public ushort DllCharacteristics { get; }
    public IMethodReference EntryPoint { get; }
    public UInt32 FileAlignment { get; }
    public bool ILOnly { get; }
    public bool StrongNameSigned { get; }
    public bool Prefers32bits { get; }
    public ModuleKind Kind { get; }
    public byte LinkerMajorVersion { get; }
    public byte LinkerMinorVersion { get; }
    public byte MetadataFormatMajorVersion { get; }
    public byte MetadataFormatMinorVersion { get; }
    public IEnumerable`1<ICustomAttribute> ModuleAttributes { get; }
    public IName ModuleName { get; }
    public IEnumerable`1<IModuleReference> ModuleReferences { get; }
    public Guid PersistentIdentifier { get; }
    public Machine Machine { get; }
    public bool RequiresAmdInstructionSet { get; }
    public bool RequiresStartupStub { get; }
    public bool Requires32bits { get; }
    public bool Requires64bits { get; }
    public ulong SizeOfHeapCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfStackReserve { get; }
    public ushort SubsystemMajorVersion { get; }
    public ushort SubsystemMinorVersion { get; }
    public string TargetRuntimeVersion { get; }
    public bool TrackDebugData { get; }
    public bool UsePublicKeyTokensForAssemblyReferences { get; }
    public IEnumerable`1<IWin32Resource> Win32Resources { get; }
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public IPlatformType PlatformType { get; }
    public string Location { get; }
    public IEnumerable`1<IPESection> UninterpretedSections { get; }
    public IRootUnitNamespace UnitNamespaceRoot { get; }
    public IEnumerable`1<IUnitReference> UnitReferences { get; }
    public INamespaceDefinition NamespaceRoot { get; }
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IEnumerable`1<IName> Aliases { get; }
    public IAssembly ResolvedAssembly { get; }
    public string Culture { get; }
    public bool IsRetargetable { get; }
    public IEnumerable`1<byte> PublicKeyToken { get; }
    public Version Version { get; }
    public AssemblyIdentity AssemblyIdentity { get; }
    public AssemblyIdentity UnifiedAssemblyIdentity { get; }
    public bool ContainsForeignTypes { get; }
    public sealed virtual IEnumerable`1<ICustomAttribute> get_AssemblyAttributes();
    public sealed virtual IEnumerable`1<IAliasForType> get_ExportedTypes();
    public sealed virtual IEnumerable`1<IFileReference> get_Files();
    public sealed virtual UInt32 get_Flags();
    public sealed virtual IEnumerable`1<IModule> get_MemberModules();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
    public sealed virtual IEnumerable`1<byte> get_PublicKey();
    public sealed virtual IEnumerable`1<IResourceReference> get_Resources();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual IEnumerable`1<IAssemblyReference> get_AssemblyReferences();
    public sealed virtual ulong get_BaseAddress();
    public sealed virtual IAssembly get_ContainingAssembly();
    public sealed virtual string get_DebugInformationLocation();
    public sealed virtual string get_DebugInformationVersion();
    public sealed virtual ushort get_DllCharacteristics();
    public sealed virtual IMethodReference get_EntryPoint();
    public sealed virtual UInt32 get_FileAlignment();
    public sealed virtual IEnumerable`1<string> GetStrings();
    public sealed virtual IEnumerable`1<INamedTypeDefinition> GetAllTypes();
    public sealed virtual IEnumerable`1<IGenericMethodInstanceReference> GetGenericMethodInstances();
    public sealed virtual IEnumerable`1<ITypeReference> GetStructuralTypeInstances();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetStructuralTypeInstanceMembers();
    public sealed virtual IEnumerable`1<ITypeReference> GetTypeReferences();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetTypeMemberReferences();
    public sealed virtual bool get_ILOnly();
    public sealed virtual bool get_StrongNameSigned();
    public sealed virtual bool get_Prefers32bits();
    public sealed virtual ModuleKind get_Kind();
    public sealed virtual byte get_LinkerMajorVersion();
    public sealed virtual byte get_LinkerMinorVersion();
    public sealed virtual byte get_MetadataFormatMajorVersion();
    public sealed virtual byte get_MetadataFormatMinorVersion();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ModuleAttributes();
    public sealed virtual IName get_ModuleName();
    public sealed virtual IEnumerable`1<IModuleReference> get_ModuleReferences();
    public sealed virtual Guid get_PersistentIdentifier();
    public sealed virtual Machine get_Machine();
    public sealed virtual bool get_RequiresAmdInstructionSet();
    public sealed virtual bool get_RequiresStartupStub();
    public sealed virtual bool get_Requires32bits();
    public sealed virtual bool get_Requires64bits();
    public sealed virtual ulong get_SizeOfHeapCommit();
    public sealed virtual ulong get_SizeOfHeapReserve();
    public sealed virtual ulong get_SizeOfStackCommit();
    public sealed virtual ulong get_SizeOfStackReserve();
    public sealed virtual ushort get_SubsystemMajorVersion();
    public sealed virtual ushort get_SubsystemMinorVersion();
    public sealed virtual string get_TargetRuntimeVersion();
    public sealed virtual bool get_TrackDebugData();
    public sealed virtual bool get_UsePublicKeyTokensForAssemblyReferences();
    public sealed virtual IEnumerable`1<IWin32Resource> get_Win32Resources();
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual string get_Location();
    public sealed virtual IEnumerable`1<IPESection> get_UninterpretedSections();
    public sealed virtual IRootUnitNamespace get_UnitNamespaceRoot();
    public sealed virtual IEnumerable`1<IUnitReference> get_UnitReferences();
    public sealed virtual INamespaceDefinition get_NamespaceRoot();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IEnumerable`1<IName> get_Aliases();
    public sealed virtual IAssembly get_ResolvedAssembly();
    public sealed virtual string get_Culture();
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual IEnumerable`1<byte> get_PublicKeyToken();
    public sealed virtual Version get_Version();
    public sealed virtual AssemblyIdentity get_AssemblyIdentity();
    public sealed virtual AssemblyIdentity get_UnifiedAssemblyIdentity();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool get_ContainsForeignTypes();
}
[GuidAttribute("21B8916C-F28E-11D2-A473-00C04F8EF448")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Cci.IAssemblyEnum {
    public abstract virtual int GetNextAssembly(IApplicationContext& ppAppCtx, IAssemblyName& ppName, UInt32 dwFlags);
    public abstract virtual int Reset();
    public abstract virtual int Clone(IAssemblyEnum& ppEnum);
}
[GuidAttribute("CD193BC0-B4BC-11D2-9833-00C04FC31D2E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Cci.IAssemblyName {
    public abstract virtual int SetProperty(UInt32 PropertyId, IntPtr pvProperty, UInt32 cbProperty);
    public abstract virtual int GetProperty(UInt32 PropertyId, IntPtr pvProperty, UInt32& pcbProperty);
    public abstract virtual int Finalize();
    public abstract virtual int GetDisplayName(StringBuilder szDisplayName, UInt32& pccDisplayName, UInt32 dwDisplayFlags);
    public abstract virtual int BindToObject(object refIID, object pAsmBindSink, IApplicationContext pApplicationContext, string szCodeBase, long llFlags, int pvReserved, UInt32 cbReserved, Int32& ppv);
    public abstract virtual int GetName(UInt32& lpcwBuffer, Int32& pwzName);
    public abstract virtual int GetVersion(UInt32& pdwVersionHi, UInt32& pdwVersionLow);
    public abstract virtual int IsEqual(IAssemblyName pName, UInt32 dwCmpFlags);
    public abstract virtual int Clone(IAssemblyName& pName);
}
public interface Microsoft.Cci.IAssemblyReference {
    public IEnumerable`1<IName> Aliases { get; }
    public IAssembly ResolvedAssembly { get; }
    public string Culture { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public bool IsRetargetable { get; }
    public bool ContainsForeignTypes { get; }
    public IEnumerable`1<byte> PublicKey { get; }
    public IEnumerable`1<byte> PublicKeyToken { get; }
    public Version Version { get; }
    public AssemblyIdentity AssemblyIdentity { get; }
    public AssemblyIdentity UnifiedAssemblyIdentity { get; }
    public abstract virtual IEnumerable`1<IName> get_Aliases();
    public abstract virtual IAssembly get_ResolvedAssembly();
    public abstract virtual string get_Culture();
    public abstract virtual IEnumerable`1<byte> get_HashValue();
    public abstract virtual bool get_IsRetargetable();
    public abstract virtual bool get_ContainsForeignTypes();
    public abstract virtual IEnumerable`1<byte> get_PublicKey();
    public abstract virtual IEnumerable`1<byte> get_PublicKeyToken();
    public abstract virtual Version get_Version();
    public abstract virtual AssemblyIdentity get_AssemblyIdentity();
    public abstract virtual AssemblyIdentity get_UnifiedAssemblyIdentity();
}
internal abstract class Microsoft.Cci.IAssemblyReferenceContract : object {
    public IEnumerable`1<IName> Aliases { get; }
    public IAssembly ResolvedAssembly { get; }
    public string Culture { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public bool IsRetargetable { get; }
    public bool ContainsForeignTypes { get; }
    public IEnumerable`1<byte> PublicKey { get; }
    public IEnumerable`1<byte> PublicKeyToken { get; }
    public Version Version { get; }
    public AssemblyIdentity AssemblyIdentity { get; }
    public AssemblyIdentity UnifiedAssemblyIdentity { get; }
    public IAssemblyReference ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IEnumerable`1<IName> get_Aliases();
    public sealed virtual IAssembly get_ResolvedAssembly();
    public sealed virtual string get_Culture();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual bool get_ContainsForeignTypes();
    public sealed virtual IEnumerable`1<byte> get_PublicKey();
    public sealed virtual IEnumerable`1<byte> get_PublicKeyToken();
    public sealed virtual Version get_Version();
    public sealed virtual AssemblyIdentity get_AssemblyIdentity();
    public sealed virtual AssemblyIdentity get_UnifiedAssemblyIdentity();
    public sealed virtual IAssemblyReference get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IBinaryDocument {
    public UInt32 Length { get; }
    public abstract virtual UInt32 get_Length();
}
public interface Microsoft.Cci.IBinaryDocumentMemoryBlock {
    public IBinaryDocument BinaryDocument { get; }
    public Byte* Pointer { get; }
    public UInt32 Length { get; }
    public abstract virtual IBinaryDocument get_BinaryDocument();
    public abstract virtual Byte* get_Pointer();
    public abstract virtual UInt32 get_Length();
}
internal abstract class Microsoft.Cci.IBinaryDocumentMemoryBlockContract : object {
    public IBinaryDocument BinaryDocument { get; }
    public Byte* Pointer { get; }
    public UInt32 Length { get; }
    public sealed virtual IBinaryDocument get_BinaryDocument();
    public sealed virtual Byte* get_Pointer();
    public sealed virtual UInt32 get_Length();
}
public interface Microsoft.Cci.IBinaryLocation {
    public IBinaryDocument BinaryDocument { get; }
    public UInt32 Offset { get; }
    public abstract virtual IBinaryDocument get_BinaryDocument();
    public abstract virtual UInt32 get_Offset();
}
internal abstract class Microsoft.Cci.IBinaryLocationContract : object {
    public IBinaryDocument BinaryDocument { get; }
    public UInt32 Offset { get; }
    public IDocument Document { get; }
    public sealed virtual IBinaryDocument get_BinaryDocument();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual IDocument get_Document();
}
public interface Microsoft.Cci.IContainer`1 {
    public IEnumerable`1<MemberType> Members { get; }
    public abstract virtual IEnumerable`1<MemberType> get_Members();
}
internal abstract class Microsoft.Cci.IContainerContract`1 : object {
    public IEnumerable`1<MemberType> Members { get; }
    public sealed virtual IEnumerable`1<MemberType> get_Members();
}
public interface Microsoft.Cci.IContainerMember`1 {
    public ContainerType Container { get; }
    public IName Name { get; }
    public abstract virtual ContainerType get_Container();
    public abstract virtual IName get_Name();
}
internal abstract class Microsoft.Cci.IContainerMemberContract`1 : object {
    public ContainerType Container { get; }
    private IName Microsoft.Cci.IContainerMember<ContainerType>.Name { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    public sealed virtual ContainerType get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<ContainerType>.get_Name();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
}
public interface Microsoft.Cci.ICustomAttribute {
    public IEnumerable`1<IMetadataExpression> Arguments { get; }
    public IMethodReference Constructor { get; }
    public IEnumerable`1<IMetadataNamedArgument> NamedArguments { get; }
    public ushort NumberOfNamedArguments { get; }
    public ITypeReference Type { get; }
    public abstract virtual IEnumerable`1<IMetadataExpression> get_Arguments();
    public abstract virtual IMethodReference get_Constructor();
    public abstract virtual IEnumerable`1<IMetadataNamedArgument> get_NamedArguments();
    public abstract virtual ushort get_NumberOfNamedArguments();
    public abstract virtual ITypeReference get_Type();
}
internal abstract class Microsoft.Cci.ICustomAttributeContract : object {
    public IEnumerable`1<IMetadataExpression> Arguments { get; }
    public IMethodReference Constructor { get; }
    public IEnumerable`1<IMetadataNamedArgument> NamedArguments { get; }
    public ushort NumberOfNamedArguments { get; }
    public ITypeReference Type { get; }
    public sealed virtual IEnumerable`1<IMetadataExpression> get_Arguments();
    public sealed virtual IMethodReference get_Constructor();
    public sealed virtual IEnumerable`1<IMetadataNamedArgument> get_NamedArguments();
    public sealed virtual ushort get_NumberOfNamedArguments();
    public sealed virtual ITypeReference get_Type();
}
public interface Microsoft.Cci.ICustomModifier {
    public bool IsOptional { get; }
    public ITypeReference Modifier { get; }
    public abstract virtual bool get_IsOptional();
    public abstract virtual ITypeReference get_Modifier();
}
internal abstract class Microsoft.Cci.ICustomModifierContract : object {
    public bool IsOptional { get; }
    public ITypeReference Modifier { get; }
    public sealed virtual bool get_IsOptional();
    public sealed virtual ITypeReference get_Modifier();
}
public interface Microsoft.Cci.IDefinition {
}
public interface Microsoft.Cci.IDocument {
    public string Location { get; }
    public IName Name { get; }
    public abstract virtual string get_Location();
    public abstract virtual IName get_Name();
}
internal abstract class Microsoft.Cci.IDocumentContract : object {
    public string Location { get; }
    public IName Name { get; }
    public sealed virtual string get_Location();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.IErrorMessage {
    public object ErrorReporter { get; }
    public string ErrorReporterIdentifier { get; }
    public long Code { get; }
    public bool IsWarning { get; }
    public string Message { get; }
    public ILocation Location { get; }
    public IEnumerable`1<ILocation> RelatedLocations { get; }
    public abstract virtual object get_ErrorReporter();
    public abstract virtual string get_ErrorReporterIdentifier();
    public abstract virtual long get_Code();
    public abstract virtual bool get_IsWarning();
    public abstract virtual string get_Message();
    public abstract virtual ILocation get_Location();
    public abstract virtual IEnumerable`1<ILocation> get_RelatedLocations();
}
internal abstract class Microsoft.Cci.IErrorMessageContract : object {
    public object ErrorReporter { get; }
    public string ErrorReporterIdentifier { get; }
    public long Code { get; }
    public bool IsWarning { get; }
    public string Message { get; }
    public ILocation Location { get; }
    public IEnumerable`1<ILocation> RelatedLocations { get; }
    public sealed virtual object get_ErrorReporter();
    public sealed virtual string get_ErrorReporterIdentifier();
    public sealed virtual long get_Code();
    public sealed virtual bool get_IsWarning();
    public sealed virtual string get_Message();
    public sealed virtual ILocation get_Location();
    public sealed virtual IEnumerable`1<ILocation> get_RelatedLocations();
}
public interface Microsoft.Cci.IEventDefinition {
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMethodReference Adder { get; }
    public IMethodReference Caller { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IMethodReference Remover { get; }
    public ITypeReference Type { get; }
    public abstract virtual IEnumerable`1<IMethodReference> get_Accessors();
    public abstract virtual IMethodReference get_Adder();
    public abstract virtual IMethodReference get_Caller();
    public abstract virtual bool get_IsRuntimeSpecial();
    public abstract virtual bool get_IsSpecialName();
    public abstract virtual IMethodReference get_Remover();
    public abstract virtual ITypeReference get_Type();
}
public interface Microsoft.Cci.IFieldDefinition {
    public UInt32 BitLength { get; }
    public IMetadataConstant CompileTimeValue { get; }
    public ISectionBlock FieldMapping { get; }
    public bool IsBitField { get; }
    public bool IsCompileTimeConstant { get; }
    public bool IsMapped { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsNotSerialized { get; }
    public bool IsReadOnly { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public UInt32 Offset { get; }
    public int SequenceNumber { get; }
    public abstract virtual UInt32 get_BitLength();
    public abstract virtual IMetadataConstant get_CompileTimeValue();
    public abstract virtual ISectionBlock get_FieldMapping();
    public abstract virtual bool get_IsBitField();
    public abstract virtual bool get_IsCompileTimeConstant();
    public abstract virtual bool get_IsMapped();
    public abstract virtual bool get_IsMarshalledExplicitly();
    public abstract virtual bool get_IsNotSerialized();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsRuntimeSpecial();
    public abstract virtual bool get_IsSpecialName();
    public abstract virtual IMarshallingInformation get_MarshallingInformation();
    public abstract virtual UInt32 get_Offset();
    public abstract virtual int get_SequenceNumber();
}
internal abstract class Microsoft.Cci.IFieldDefinitionContract : object {
    public UInt32 BitLength { get; }
    public IMetadataConstant CompileTimeValue { get; }
    public ISectionBlock FieldMapping { get; }
    public bool IsBitField { get; }
    public bool IsCompileTimeConstant { get; }
    public bool IsMapped { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsNotSerialized { get; }
    public bool IsReadOnly { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public UInt32 Offset { get; }
    public int SequenceNumber { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeDefinition Container { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public UInt32 InternedKey { get; }
    public bool IsModified { get; }
    public bool IsStatic { get; }
    public ITypeReference Type { get; }
    public IFieldDefinition ResolvedField { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual UInt32 get_BitLength();
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual ISectionBlock get_FieldMapping();
    public sealed virtual bool get_IsBitField();
    public sealed virtual bool get_IsCompileTimeConstant();
    public sealed virtual bool get_IsMapped();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsNotSerialized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual int get_SequenceNumber();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public sealed virtual IMetadataConstant get_Constant();
}
public interface Microsoft.Cci.IFieldReference {
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public UInt32 InternedKey { get; }
    public bool IsModified { get; }
    public bool IsStatic { get; }
    public ITypeReference Type { get; }
    public IFieldDefinition ResolvedField { get; }
    public abstract virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public abstract virtual UInt32 get_InternedKey();
    public abstract virtual bool get_IsModified();
    public abstract virtual bool get_IsStatic();
    public abstract virtual ITypeReference get_Type();
    public abstract virtual IFieldDefinition get_ResolvedField();
}
internal abstract class Microsoft.Cci.IFieldReferenceContract : object {
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public UInt32 InternedKey { get; }
    public bool IsModified { get; }
    public bool IsStatic { get; }
    public ITypeReference Type { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IFileReference {
    public IAssembly ContainingAssembly { get; }
    public bool HasMetadata { get; }
    public IName FileName { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public abstract virtual IAssembly get_ContainingAssembly();
    public abstract virtual bool get_HasMetadata();
    public abstract virtual IName get_FileName();
    public abstract virtual IEnumerable`1<byte> get_HashValue();
}
public interface Microsoft.Cci.IFunctionPointer {
}
public interface Microsoft.Cci.IFunctionPointerTypeReference {
    public IEnumerable`1<IParameterTypeInformation> ExtraArgumentTypes { get; }
    public abstract virtual IEnumerable`1<IParameterTypeInformation> get_ExtraArgumentTypes();
}
internal abstract class Microsoft.Cci.IFunctionPointerTypeReferenceContract : object {
    public IEnumerable`1<IParameterTypeInformation> ExtraArgumentTypes { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public bool IsStatic { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraArgumentTypes();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IGenericMethodInstance {
}
public interface Microsoft.Cci.IGenericMethodInstanceReference {
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public IMethodReference GenericMethod { get; }
    public abstract virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public abstract virtual IMethodReference get_GenericMethod();
}
internal abstract class Microsoft.Cci.IGenericMethodInstanceReferenceContract : object {
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public IMethodReference GenericMethod { get; }
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public sealed virtual IMethodReference get_GenericMethod();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.IGenericMethodParameter {
    public IMethodDefinition DefiningMethod { get; }
    public abstract virtual IMethodDefinition get_DefiningMethod();
}
internal abstract class Microsoft.Cci.IGenericMethodParameterContract : object {
    public IMethodDefinition DefiningMethod { get; }
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public ushort GenericParameterCount { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    public ushort Index { get; }
    private IMethodReference Microsoft.Cci.IGenericMethodParameterReference.DefiningMethod { get; }
    private IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.ResolvedType { get; }
    public sealed virtual IMethodDefinition get_DefiningMethod();
    public sealed virtual IEnumerable`1<ITypeReference> get_Constraints();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_MustBeReferenceType();
    public sealed virtual bool get_MustBeValueType();
    public sealed virtual bool get_MustHaveDefaultConstructor();
    public sealed virtual TypeParameterVariance get_Variance();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
    private sealed virtual override IMethodReference Microsoft.Cci.IGenericMethodParameterReference.get_DefiningMethod();
    private sealed virtual override IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.get_ResolvedType();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IGenericMethodParameterReference {
    public IMethodReference DefiningMethod { get; }
    public IGenericMethodParameter ResolvedType { get; }
    public abstract virtual IMethodReference get_DefiningMethod();
    public abstract virtual IGenericMethodParameter get_ResolvedType();
}
internal abstract class Microsoft.Cci.IGenericMethodParameterReferenceContract : object {
    public IMethodReference DefiningMethod { get; }
    public IGenericMethodParameter ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ushort Index { get; }
    public sealed virtual IMethodReference get_DefiningMethod();
    public sealed virtual IGenericMethodParameter get_ResolvedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IGenericParameter {
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public ushort GenericParameterCount { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public abstract virtual IEnumerable`1<ITypeReference> get_Constraints();
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual bool get_MustBeReferenceType();
    public abstract virtual bool get_MustBeValueType();
    public abstract virtual bool get_MustHaveDefaultConstructor();
    public abstract virtual TypeParameterVariance get_Variance();
}
internal abstract class Microsoft.Cci.IGenericParameterContract : object {
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public ushort GenericParameterCount { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    public ushort Index { get; }
    public sealed virtual IEnumerable`1<ITypeReference> get_Constraints();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_MustBeReferenceType();
    public sealed virtual bool get_MustBeValueType();
    public sealed virtual bool get_MustHaveDefaultConstructor();
    public sealed virtual TypeParameterVariance get_Variance();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IGenericParameterReference {
}
public interface Microsoft.Cci.IGenericTypeInstance {
}
public interface Microsoft.Cci.IGenericTypeInstanceReference {
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public INamedTypeReference GenericType { get; }
    public abstract virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public abstract virtual INamedTypeReference get_GenericType();
}
internal abstract class Microsoft.Cci.IGenericTypeInstanceReferenceContract : object {
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public INamedTypeReference GenericType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public sealed virtual INamedTypeReference get_GenericType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IGenericTypeParameter {
    public ITypeDefinition DefiningType { get; }
    public abstract virtual ITypeDefinition get_DefiningType();
}
internal abstract class Microsoft.Cci.IGenericTypeParameterContract : object {
    public ITypeDefinition DefiningType { get; }
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public ushort GenericParameterCount { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    public ushort Index { get; }
    private ITypeReference Microsoft.Cci.IGenericTypeParameterReference.DefiningType { get; }
    private IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.ResolvedType { get; }
    public sealed virtual ITypeDefinition get_DefiningType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Constraints();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_MustBeReferenceType();
    public sealed virtual bool get_MustBeValueType();
    public sealed virtual bool get_MustHaveDefaultConstructor();
    public sealed virtual TypeParameterVariance get_Variance();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
    private sealed virtual override ITypeReference Microsoft.Cci.IGenericTypeParameterReference.get_DefiningType();
    private sealed virtual override IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.get_ResolvedType();
}
public interface Microsoft.Cci.IGenericTypeParameterReference {
    public ITypeReference DefiningType { get; }
    public IGenericTypeParameter ResolvedType { get; }
    public abstract virtual ITypeReference get_DefiningType();
    public abstract virtual IGenericTypeParameter get_ResolvedType();
}
internal abstract class Microsoft.Cci.IGenericTypeParameterReferenceContract : object {
    public ITypeReference DefiningType { get; }
    public IGenericTypeParameter ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ushort Index { get; }
    public sealed virtual ITypeReference get_DefiningType();
    public sealed virtual IGenericTypeParameter get_ResolvedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IGlobalFieldDefinition {
    public IName Name { get; }
    public abstract virtual IName get_Name();
}
public interface Microsoft.Cci.IGlobalMethodDefinition {
    public IName Name { get; }
    public abstract virtual IName get_Name();
}
public interface Microsoft.Cci.IILLocation {
    public IMethodDefinition MethodDefinition { get; }
    public UInt32 Offset { get; }
    public abstract virtual IMethodDefinition get_MethodDefinition();
    public abstract virtual UInt32 get_Offset();
}
internal abstract class Microsoft.Cci.IILLocationContract : object {
    public IMethodDefinition MethodDefinition { get; }
    public UInt32 Offset { get; }
    public IDocument Document { get; }
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual IDocument get_Document();
}
public interface Microsoft.Cci.IInternFactory {
    public abstract virtual UInt32 GetAssemblyInternedKey(AssemblyIdentity assemblyIdentity);
    public abstract virtual UInt32 GetFieldInternedKey(IFieldReference fieldReference);
    public abstract virtual UInt32 GetMethodInternedKey(IMethodReference methodReference);
    public abstract virtual UInt32 GetModuleInternedKey(ModuleIdentity moduleIdentity);
    public abstract virtual UInt32 GetNamespaceTypeReferenceInternedKey(IUnitNamespaceReference containingUnitNamespace, IName typeName, UInt32 genericParameterCount);
    public abstract virtual UInt32 GetNestedTypeReferenceInternedKey(ITypeReference containingTypeReference, IName typeName, UInt32 genericParameterCount);
    public abstract virtual UInt32 GetVectorTypeReferenceInternedKey(ITypeReference elementTypeReference);
    public abstract virtual UInt32 GetMatrixTypeReferenceInternedKey(ITypeReference elementTypeReference, int rank, IEnumerable`1<ulong> sizes, IEnumerable`1<int> lowerBounds);
    public abstract virtual UInt32 GetGenericTypeInstanceReferenceInternedKey(ITypeReference genericTypeReference, IEnumerable`1<ITypeReference> genericArguments);
    public abstract virtual UInt32 GetPointerTypeReferenceInternedKey(ITypeReference targetTypeReference);
    public abstract virtual UInt32 GetManagedPointerTypeReferenceInternedKey(ITypeReference targetTypeReferece);
    public abstract virtual UInt32 GetGenericTypeParameterReferenceInternedKey(ITypeReference definingTypeReference, int index);
    public abstract virtual UInt32 GetGenericMethodParameterReferenceInternedKey(IMethodReference defininingMethodReference, int index);
    public abstract virtual UInt32 GetFunctionPointerTypeReferenceInternedKey(CallingConvention callingConvention, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, bool returnValueIsByRef, ITypeReference returnType);
    public abstract virtual UInt32 GetModifiedTypeReferenceInternedKey(ITypeReference typeReference, IEnumerable`1<ICustomModifier> customModifiers);
    public abstract virtual UInt32 GetTypeReferenceInternedKey(ITypeReference typeReference);
}
internal abstract class Microsoft.Cci.IInternFactoryContract : object {
    public sealed virtual UInt32 GetAssemblyInternedKey(AssemblyIdentity assemblyIdentity);
    public sealed virtual UInt32 GetFieldInternedKey(IFieldReference fieldReference);
    public sealed virtual UInt32 GetMethodInternedKey(IMethodReference methodReference);
    public sealed virtual UInt32 GetModuleInternedKey(ModuleIdentity moduleIdentity);
    public sealed virtual UInt32 GetNamespaceTypeReferenceInternedKey(IUnitNamespaceReference containingUnitNamespace, IName typeName, UInt32 genericParameterCount);
    public sealed virtual UInt32 GetNestedTypeReferenceInternedKey(ITypeReference containingTypeReference, IName typeName, UInt32 genericParameterCount);
    public sealed virtual UInt32 GetVectorTypeReferenceInternedKey(ITypeReference elementTypeReference);
    public sealed virtual UInt32 GetMatrixTypeReferenceInternedKey(ITypeReference elementTypeReference, int rank, IEnumerable`1<ulong> sizes, IEnumerable`1<int> lowerBounds);
    public sealed virtual UInt32 GetGenericTypeInstanceReferenceInternedKey(ITypeReference genericTypeReference, IEnumerable`1<ITypeReference> genericArguments);
    public sealed virtual UInt32 GetPointerTypeReferenceInternedKey(ITypeReference targetTypeReference);
    public sealed virtual UInt32 GetManagedPointerTypeReferenceInternedKey(ITypeReference targetTypeReferece);
    public sealed virtual UInt32 GetGenericTypeParameterReferenceInternedKey(ITypeReference definingTypeReference, int index);
    public sealed virtual UInt32 GetGenericMethodParameterReferenceInternedKey(IMethodReference defininingMethodReference, int index);
    public sealed virtual UInt32 GetFunctionPointerTypeReferenceInternedKey(CallingConvention callingConvention, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, bool returnValueIsByRef, ITypeReference returnType);
    public sealed virtual UInt32 GetModifiedTypeReferenceInternedKey(ITypeReference typeReference, IEnumerable`1<ICustomModifier> customModifiers);
    public sealed virtual UInt32 GetTypeReferenceInternedKey(ITypeReference typeReference);
}
public class Microsoft.Cci.ILLocation : object {
    private IBinaryDocument binaryDocument;
    private IMethodDefinition methodDefinition;
    private UInt32 offset;
    private IMethodDefinition Microsoft.Cci.IILLocation.MethodDefinition { get; }
    private UInt32 Microsoft.Cci.IILLocation.Offset { get; }
    private IDocument Microsoft.Cci.ILocation.Document { get; }
    public ILLocation(IBinaryDocument binaryDocument, IMethodDefinition methodDefinition, UInt32 offset);
    private sealed virtual override IMethodDefinition Microsoft.Cci.IILLocation.get_MethodDefinition();
    private sealed virtual override UInt32 Microsoft.Cci.IILLocation.get_Offset();
    private sealed virtual override IDocument Microsoft.Cci.ILocation.get_Document();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface Microsoft.Cci.ILocalDefinition {
    public IMetadataConstant CompileTimeValue { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsConstant { get; }
    public bool IsModified { get; }
    public bool IsPinned { get; }
    public bool IsReference { get; }
    public IMethodDefinition MethodDefinition { get; }
    public ITypeReference Type { get; }
    public abstract virtual IMetadataConstant get_CompileTimeValue();
    public abstract virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public abstract virtual bool get_IsConstant();
    public abstract virtual bool get_IsModified();
    public abstract virtual bool get_IsPinned();
    public abstract virtual bool get_IsReference();
    public abstract virtual IMethodDefinition get_MethodDefinition();
    public abstract virtual ITypeReference get_Type();
}
internal abstract class Microsoft.Cci.ILocalDefinitionContract : object {
    public IMetadataConstant CompileTimeValue { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsConstant { get; }
    public bool IsModified { get; }
    public bool IsPinned { get; }
    public bool IsReference { get; }
    public IMethodDefinition MethodDefinition { get; }
    public ITypeReference Type { get; }
    public IName Name { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsConstant();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsPinned();
    public sealed virtual bool get_IsReference();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
public interface Microsoft.Cci.ILocation {
    public IDocument Document { get; }
    public abstract virtual IDocument get_Document();
}
internal abstract class Microsoft.Cci.ILocationContract : object {
    public IDocument Document { get; }
    public sealed virtual IDocument get_Document();
}
public interface Microsoft.Cci.IManagedPointerType {
}
public interface Microsoft.Cci.IManagedPointerTypeReference {
    public ITypeReference TargetType { get; }
    public abstract virtual ITypeReference get_TargetType();
}
internal abstract class Microsoft.Cci.IManagedPointerTypeReferenceContract : object {
    public ITypeReference TargetType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual ITypeReference get_TargetType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IMarshallingInformation {
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    public UInt32 IidParameterIndex { get; }
    public UnmanagedType UnmanagedType { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    public abstract virtual ITypeReference get_CustomMarshaller();
    public abstract virtual string get_CustomMarshallerRuntimeArgument();
    public abstract virtual UnmanagedType get_ElementType();
    public abstract virtual UInt32 get_IidParameterIndex();
    public abstract virtual UnmanagedType get_UnmanagedType();
    public abstract virtual UInt32 get_NumberOfElements();
    public abstract virtual Nullable`1<UInt32> get_ParamIndex();
    public abstract virtual VarEnum get_SafeArrayElementSubtype();
    public abstract virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
public interface Microsoft.Cci.IMetadataConstant {
    public object Value { get; }
    public abstract virtual object get_Value();
}
public interface Microsoft.Cci.IMetadataConstantContainer {
    public IMetadataConstant Constant { get; }
    public abstract virtual IMetadataConstant get_Constant();
}
public interface Microsoft.Cci.IMetadataCreateArray {
    public ITypeReference ElementType { get; }
    public IEnumerable`1<IMetadataExpression> Initializers { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    public abstract virtual ITypeReference get_ElementType();
    public abstract virtual IEnumerable`1<IMetadataExpression> get_Initializers();
    public abstract virtual IEnumerable`1<int> get_LowerBounds();
    public abstract virtual UInt32 get_Rank();
    public abstract virtual IEnumerable`1<ulong> get_Sizes();
}
internal abstract class Microsoft.Cci.IMetadataCreateArrayContract : object {
    public ITypeReference ElementType { get; }
    public IEnumerable`1<IMetadataExpression> Initializers { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    public ITypeReference Type { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual ITypeReference get_ElementType();
    public sealed virtual IEnumerable`1<IMetadataExpression> get_Initializers();
    public sealed virtual IEnumerable`1<int> get_LowerBounds();
    public sealed virtual UInt32 get_Rank();
    public sealed virtual IEnumerable`1<ulong> get_Sizes();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IMetadataExpression {
    public ITypeReference Type { get; }
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual ITypeReference get_Type();
}
internal abstract class Microsoft.Cci.IMetadataExpressionContract : object {
    public ITypeReference Type { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
public interface Microsoft.Cci.IMetadataHost {
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public AssemblyIdentity SystemCoreAssemblySymbolicIdentity { get; }
    public IInternFactory InternFactory { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<IUnit> LoadedUnits { get; }
    public INameTable NameTable { get; }
    public byte PointerSize { get; }
    public bool PreserveILLocations { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Errors(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Errors(EventHandler`1<ErrorEventArgs> value);
    public abstract virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public abstract virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public abstract virtual AssemblyIdentity get_SystemCoreAssemblySymbolicIdentity();
    public abstract virtual IAssembly FindAssembly(AssemblyIdentity assemblyIdentity);
    public abstract virtual IModule FindModule(ModuleIdentity moduleIdentity);
    public abstract virtual IUnit FindUnit(UnitIdentity unitIdentity);
    public abstract virtual IInternFactory get_InternFactory();
    public abstract virtual IPlatformType get_PlatformType();
    public abstract virtual IAssembly LoadAssembly(AssemblyIdentity assemblyIdentity);
    public abstract virtual IModule LoadModule(ModuleIdentity moduleIdentity);
    public abstract virtual IUnit LoadUnit(UnitIdentity unitIdentity);
    public abstract virtual IUnit LoadUnitFrom(string location);
    public abstract virtual IEnumerable`1<IUnit> get_LoadedUnits();
    public abstract virtual INameTable get_NameTable();
    public abstract virtual byte get_PointerSize();
    public abstract virtual void ReportErrors(ErrorEventArgs errorEventArguments);
    public abstract virtual void ReportError(IErrorMessage error);
    public abstract virtual AssemblyIdentity ProbeAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    public abstract virtual ModuleIdentity ProbeModuleReference(IUnit referringUnit, ModuleIdentity referencedModule);
    public abstract virtual AssemblyIdentity UnifyAssembly(AssemblyIdentity assemblyIdentity);
    public abstract virtual AssemblyIdentity UnifyAssembly(IAssemblyReference assemblyReference);
    public abstract virtual bool get_PreserveILLocations();
}
internal abstract class Microsoft.Cci.IMetadataHostContract : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Errors;
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public AssemblyIdentity SystemCoreAssemblySymbolicIdentity { get; }
    public IInternFactory InternFactory { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<IUnit> LoadedUnits { get; }
    public INameTable NameTable { get; }
    public byte PointerSize { get; }
    public bool PreserveILLocations { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_Errors(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Errors(EventHandler`1<ErrorEventArgs> value);
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_SystemCoreAssemblySymbolicIdentity();
    public sealed virtual IAssembly FindAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual IModule FindModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit FindUnit(UnitIdentity unitIdentity);
    public sealed virtual IInternFactory get_InternFactory();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IAssembly LoadAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual IModule LoadModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit LoadUnit(UnitIdentity unitIdentity);
    public sealed virtual IUnit LoadUnitFrom(string location);
    public sealed virtual IEnumerable`1<IUnit> get_LoadedUnits();
    public sealed virtual INameTable get_NameTable();
    public sealed virtual byte get_PointerSize();
    public sealed virtual void ReportErrors(ErrorEventArgs errorEventArguments);
    public sealed virtual void ReportError(IErrorMessage error);
    public sealed virtual AssemblyIdentity ProbeAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    public sealed virtual ModuleIdentity ProbeModuleReference(IUnit referringUnit, ModuleIdentity referencedModule);
    public sealed virtual AssemblyIdentity UnifyAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual AssemblyIdentity UnifyAssembly(IAssemblyReference assemblyReference);
    public sealed virtual bool get_PreserveILLocations();
}
public interface Microsoft.Cci.IMetadataLocation {
    public IMetadataObjectWithToken Definition { get; }
    public abstract virtual IMetadataObjectWithToken get_Definition();
}
internal abstract class Microsoft.Cci.IMetadataLocationContract : object {
    public IMetadataObjectWithToken Definition { get; }
    public IDocument Document { get; }
    public sealed virtual IMetadataObjectWithToken get_Definition();
    public sealed virtual IDocument get_Document();
}
public interface Microsoft.Cci.IMetadataNamedArgument {
    public IName ArgumentName { get; }
    public IMetadataExpression ArgumentValue { get; }
    public bool IsField { get; }
    public object ResolvedDefinition { get; }
    public abstract virtual IName get_ArgumentName();
    public abstract virtual IMetadataExpression get_ArgumentValue();
    public abstract virtual bool get_IsField();
    public abstract virtual object get_ResolvedDefinition();
}
internal abstract class Microsoft.Cci.IMetadataNamedArgumentContract : object {
    public IName ArgumentName { get; }
    public IMetadataExpression ArgumentValue { get; }
    public bool IsField { get; }
    public object ResolvedDefinition { get; }
    public ITypeReference Type { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IName get_ArgumentName();
    public sealed virtual IMetadataExpression get_ArgumentValue();
    public sealed virtual bool get_IsField();
    public sealed virtual object get_ResolvedDefinition();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
public interface Microsoft.Cci.IMetadataObjectWithToken {
    public UInt32 TokenValue { get; }
    public abstract virtual UInt32 get_TokenValue();
}
public interface Microsoft.Cci.IMetadataReaderErrorsReporter {
}
public interface Microsoft.Cci.IMetadataReaderHost {
    public abstract virtual IBinaryDocumentMemoryBlock OpenBinaryDocument(IBinaryDocument sourceDocument);
    public abstract virtual IBinaryDocumentMemoryBlock OpenBinaryDocument(IBinaryDocument parentSourceDocument, string childDocumentName);
    public abstract virtual IEnumerable`1<IAssemblyReference> Redirect(IUnit referringUnit, IEnumerable`1<IAssemblyReference> assemblyReferences);
    public abstract virtual INamedTypeReference Redirect(IUnit referringUnit, INamedTypeReference typeReference);
    public abstract virtual ICustomAttribute Rewrite(IUnit containingUnit, ICustomAttribute customAttribute);
    public abstract virtual IMethodDefinition Rewrite(IUnit containingUnit, IMethodDefinition methodDefinition);
    public abstract virtual void ResolvingAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    public abstract virtual void ResolvingModuleReference(IUnit referringUnit, ModuleIdentity referencedModule);
    public abstract virtual void StartGuessingGame();
    public abstract virtual bool TryNextPermutation();
    public abstract virtual void WinGuessingGame();
    public abstract virtual byte GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum(ITypeReference reference);
}
internal abstract class Microsoft.Cci.IMetadataReaderHostContract : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Errors;
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public AssemblyIdentity SystemCoreAssemblySymbolicIdentity { get; }
    public IInternFactory InternFactory { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<IUnit> LoadedUnits { get; }
    public INameTable NameTable { get; }
    public byte PointerSize { get; }
    public bool PreserveILLocations { get; }
    public sealed virtual IBinaryDocumentMemoryBlock OpenBinaryDocument(IBinaryDocument sourceDocument);
    public sealed virtual IBinaryDocumentMemoryBlock OpenBinaryDocument(IBinaryDocument parentSourceDocument, string childDocumentName);
    public sealed virtual IEnumerable`1<IAssemblyReference> Redirect(IUnit referringUnit, IEnumerable`1<IAssemblyReference> assemblyReferences);
    public sealed virtual INamedTypeReference Redirect(IUnit referringUnit, INamedTypeReference typeReference);
    public sealed virtual ICustomAttribute Rewrite(IUnit containingUnit, ICustomAttribute customAttribute);
    public sealed virtual IMethodDefinition Rewrite(IUnit containingUnit, IMethodDefinition methodDefinition);
    public sealed virtual void ResolvingAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    public sealed virtual void ResolvingModuleReference(IUnit referringUnit, ModuleIdentity referencedModule);
    public sealed virtual void StartGuessingGame();
    public sealed virtual bool TryNextPermutation();
    public sealed virtual void WinGuessingGame();
    public sealed virtual byte GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum(ITypeReference reference);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Errors(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Errors(EventHandler`1<ErrorEventArgs> value);
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_SystemCoreAssemblySymbolicIdentity();
    public sealed virtual IAssembly FindAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual IModule FindModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit FindUnit(UnitIdentity unitIdentity);
    public sealed virtual IInternFactory get_InternFactory();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IAssembly LoadAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual IModule LoadModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit LoadUnit(UnitIdentity unitIdentity);
    public sealed virtual IUnit LoadUnitFrom(string location);
    public sealed virtual IEnumerable`1<IUnit> get_LoadedUnits();
    public sealed virtual INameTable get_NameTable();
    public sealed virtual byte get_PointerSize();
    public sealed virtual void ReportErrors(ErrorEventArgs errorEventArguments);
    public sealed virtual void ReportError(IErrorMessage error);
    public sealed virtual AssemblyIdentity ProbeAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    public sealed virtual ModuleIdentity ProbeModuleReference(IUnit referringUnit, ModuleIdentity referencedModule);
    public sealed virtual AssemblyIdentity UnifyAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual AssemblyIdentity UnifyAssembly(IAssemblyReference assemblyReference);
    public sealed virtual bool get_PreserveILLocations();
}
public interface Microsoft.Cci.IMetadataTypeOf {
    public ITypeReference TypeToGet { get; }
    public abstract virtual ITypeReference get_TypeToGet();
}
public interface Microsoft.Cci.IMetadataVisitor {
    public abstract virtual void Visit(IArrayTypeReference arrayTypeReference);
    public abstract virtual void Visit(IAssembly assembly);
    public abstract virtual void Visit(IAssemblyReference assemblyReference);
    public abstract virtual void Visit(ICustomAttribute customAttribute);
    public abstract virtual void Visit(ICustomModifier customModifier);
    public abstract virtual void Visit(IEventDefinition eventDefinition);
    public abstract virtual void Visit(IFieldDefinition fieldDefinition);
    public abstract virtual void Visit(IFieldReference fieldReference);
    public abstract virtual void Visit(IFileReference fileReference);
    public abstract virtual void Visit(IFunctionPointerTypeReference functionPointerTypeReference);
    public abstract virtual void Visit(IGenericMethodInstanceReference genericMethodInstanceReference);
    public abstract virtual void Visit(IGenericMethodParameter genericMethodParameter);
    public abstract virtual void Visit(IGenericMethodParameterReference genericMethodParameterReference);
    public abstract virtual void Visit(IGlobalFieldDefinition globalFieldDefinition);
    public abstract virtual void Visit(IGlobalMethodDefinition globalMethodDefinition);
    public abstract virtual void Visit(IGenericTypeInstanceReference genericTypeInstanceReference);
    public abstract virtual void Visit(IGenericTypeParameter genericTypeParameter);
    public abstract virtual void Visit(IGenericTypeParameterReference genericTypeParameterReference);
    public abstract virtual void Visit(ILocalDefinition localDefinition);
    public abstract virtual void VisitReference(ILocalDefinition localDefinition);
    public abstract virtual void Visit(IManagedPointerTypeReference managedPointerTypeReference);
    public abstract virtual void Visit(IMarshallingInformation marshallingInformation);
    public abstract virtual void Visit(IMetadataConstant constant);
    public abstract virtual void Visit(IMetadataCreateArray createArray);
    public abstract virtual void Visit(IMetadataExpression expression);
    public abstract virtual void Visit(IMetadataNamedArgument namedArgument);
    public abstract virtual void Visit(IMetadataTypeOf typeOf);
    public abstract virtual void Visit(IMethodBody methodBody);
    public abstract virtual void Visit(IMethodDefinition method);
    public abstract virtual void Visit(IMethodImplementation methodImplementation);
    public abstract virtual void Visit(IMethodReference methodReference);
    public abstract virtual void Visit(IModifiedTypeReference modifiedTypeReference);
    public abstract virtual void Visit(IModule module);
    public abstract virtual void Visit(IModuleReference moduleReference);
    public abstract virtual void Visit(INamespaceAliasForType namespaceAliasForType);
    public abstract virtual void Visit(INamespaceTypeDefinition namespaceTypeDefinition);
    public abstract virtual void Visit(INamespaceTypeReference namespaceTypeReference);
    public abstract virtual void Visit(INestedAliasForType nestedAliasForType);
    public abstract virtual void Visit(INestedTypeDefinition nestedTypeDefinition);
    public abstract virtual void Visit(INestedTypeReference nestedTypeReference);
    public abstract virtual void Visit(INestedUnitNamespace nestedUnitNamespace);
    public abstract virtual void Visit(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    public abstract virtual void Visit(INestedUnitSetNamespace nestedUnitSetNamespace);
    public abstract virtual void Visit(IOperation operation);
    public abstract virtual void Visit(IOperationExceptionInformation operationExceptionInformation);
    public abstract virtual void Visit(IParameterDefinition parameterDefinition);
    public abstract virtual void VisitReference(IParameterDefinition parameterDefinition);
    public abstract virtual void Visit(IParameterTypeInformation parameterTypeInformation);
    public abstract virtual void Visit(IPESection peSection);
    public abstract virtual void Visit(IPlatformInvokeInformation platformInvokeInformation);
    public abstract virtual void Visit(IPointerTypeReference pointerTypeReference);
    public abstract virtual void Visit(IPropertyDefinition propertyDefinition);
    public abstract virtual void Visit(IResourceReference resourceReference);
    public abstract virtual void Visit(IRootUnitNamespace rootUnitNamespace);
    public abstract virtual void Visit(IRootUnitNamespaceReference rootUnitNamespaceReference);
    public abstract virtual void Visit(IRootUnitSetNamespace rootUnitSetNamespace);
    public abstract virtual void Visit(ISecurityAttribute securityAttribute);
    public abstract virtual void Visit(ISpecializedEventDefinition specializedEventDefinition);
    public abstract virtual void Visit(ISpecializedFieldDefinition specializedFieldDefinition);
    public abstract virtual void Visit(ISpecializedFieldReference specializedFieldReference);
    public abstract virtual void Visit(ISpecializedMethodDefinition specializedMethodDefinition);
    public abstract virtual void Visit(ISpecializedMethodReference specializedMethodReference);
    public abstract virtual void Visit(ISpecializedPropertyDefinition specializedPropertyDefinition);
    public abstract virtual void Visit(ISpecializedNestedTypeDefinition specializedNestedTypeDefinition);
    public abstract virtual void Visit(ISpecializedNestedTypeReference specializedNestedTypeReference);
    public abstract virtual void Visit(IUnitSet unitSet);
    public abstract virtual void Visit(IWin32Resource win32Resource);
}
internal abstract class Microsoft.Cci.IMetadataVisitorContract : object {
    public sealed virtual void Visit(IArrayTypeReference arrayTypeReference);
    public sealed virtual void Visit(IAssembly assembly);
    public sealed virtual void Visit(IAssemblyReference assemblyReference);
    public sealed virtual void Visit(ICustomAttribute customAttribute);
    public sealed virtual void Visit(ICustomModifier customModifier);
    public sealed virtual void Visit(IEventDefinition eventDefinition);
    public sealed virtual void Visit(IFieldDefinition fieldDefinition);
    public sealed virtual void Visit(IFieldReference fieldReference);
    public sealed virtual void Visit(IFileReference fileReference);
    public sealed virtual void Visit(IFunctionPointerTypeReference functionPointerTypeReference);
    public sealed virtual void Visit(IGenericMethodInstanceReference genericMethodInstanceReference);
    public sealed virtual void Visit(IGenericMethodParameter genericMethodParameter);
    public sealed virtual void Visit(IGenericMethodParameterReference genericMethodParameterReference);
    public sealed virtual void Visit(IGlobalFieldDefinition globalFieldDefinition);
    public sealed virtual void Visit(IGlobalMethodDefinition globalMethodDefinition);
    public sealed virtual void Visit(IGenericTypeInstanceReference genericTypeInstanceReference);
    public sealed virtual void Visit(IGenericTypeParameter genericTypeParameter);
    public sealed virtual void Visit(IGenericTypeParameterReference genericTypeParameterReference);
    public sealed virtual void Visit(ILocalDefinition localDefinition);
    public sealed virtual void VisitReference(ILocalDefinition localDefinition);
    public sealed virtual void Visit(IManagedPointerTypeReference managedPointerTypeReference);
    public sealed virtual void Visit(IMarshallingInformation marshallingInformation);
    public sealed virtual void Visit(IMetadataConstant constant);
    public sealed virtual void Visit(IMetadataCreateArray createArray);
    public sealed virtual void Visit(IMetadataExpression expression);
    public sealed virtual void Visit(IMetadataNamedArgument namedArgument);
    public sealed virtual void Visit(IMetadataTypeOf typeOf);
    public sealed virtual void Visit(IMethodBody methodBody);
    public sealed virtual void Visit(IMethodDefinition method);
    public sealed virtual void Visit(IMethodImplementation methodImplementation);
    public sealed virtual void Visit(IMethodReference methodReference);
    public sealed virtual void Visit(IModifiedTypeReference modifiedTypeReference);
    public sealed virtual void Visit(IModule module);
    public sealed virtual void Visit(IModuleReference moduleReference);
    public sealed virtual void Visit(INamespaceAliasForType namespaceAliasForType);
    public sealed virtual void Visit(INamespaceTypeDefinition namespaceTypeDefinition);
    public sealed virtual void Visit(INamespaceTypeReference namespaceTypeReference);
    public sealed virtual void Visit(INestedAliasForType nestedAliasForType);
    public sealed virtual void Visit(INestedTypeDefinition nestedTypeDefinition);
    public sealed virtual void Visit(INestedTypeReference nestedTypeReference);
    public sealed virtual void Visit(INestedUnitNamespace nestedUnitNamespace);
    public sealed virtual void Visit(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    public sealed virtual void Visit(INestedUnitSetNamespace nestedUnitSetNamespace);
    public sealed virtual void Visit(IOperation operation);
    public sealed virtual void Visit(IOperationExceptionInformation operationExceptionInformation);
    public sealed virtual void Visit(IParameterDefinition parameterDefinition);
    public sealed virtual void VisitReference(IParameterDefinition parameterDefinition);
    public sealed virtual void Visit(IParameterTypeInformation parameterTypeInformation);
    public sealed virtual void Visit(IPESection peSection);
    public sealed virtual void Visit(IPlatformInvokeInformation platformInvokeInformation);
    public sealed virtual void Visit(IPointerTypeReference pointerTypeReference);
    public sealed virtual void Visit(IPropertyDefinition propertyDefinition);
    public sealed virtual void Visit(IResourceReference resourceReference);
    public sealed virtual void Visit(IRootUnitNamespace rootUnitNamespace);
    public sealed virtual void Visit(IRootUnitNamespaceReference rootUnitNamespaceReference);
    public sealed virtual void Visit(IRootUnitSetNamespace rootUnitSetNamespace);
    public sealed virtual void Visit(ISecurityAttribute securityAttribute);
    public sealed virtual void Visit(ISpecializedEventDefinition specializedEventDefinition);
    public sealed virtual void Visit(ISpecializedFieldDefinition specializedFieldDefinition);
    public sealed virtual void Visit(ISpecializedFieldReference specializedFieldReference);
    public sealed virtual void Visit(ISpecializedMethodDefinition specializedMethodDefinition);
    public sealed virtual void Visit(ISpecializedMethodReference specializedMethodReference);
    public sealed virtual void Visit(ISpecializedPropertyDefinition specializedPropertyDefinition);
    public sealed virtual void Visit(ISpecializedNestedTypeDefinition specializedNestedTypeDefinition);
    public sealed virtual void Visit(ISpecializedNestedTypeReference specializedNestedTypeReference);
    public sealed virtual void Visit(IUnitSet unitSet);
    public sealed virtual void Visit(IWin32Resource win32Resource);
}
public interface Microsoft.Cci.IMethodBody {
    public IEnumerable`1<IOperationExceptionInformation> OperationExceptionInformation { get; }
    public bool LocalsAreZeroed { get; }
    public IEnumerable`1<ILocalDefinition> LocalVariables { get; }
    public IMethodDefinition MethodDefinition { get; }
    public IEnumerable`1<IOperation> Operations { get; }
    public ushort MaxStack { get; }
    public IEnumerable`1<ITypeDefinition> PrivateHelperTypes { get; }
    public UInt32 Size { get; }
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual IEnumerable`1<IOperationExceptionInformation> get_OperationExceptionInformation();
    public abstract virtual bool get_LocalsAreZeroed();
    public abstract virtual IEnumerable`1<ILocalDefinition> get_LocalVariables();
    public abstract virtual IMethodDefinition get_MethodDefinition();
    public abstract virtual IEnumerable`1<IOperation> get_Operations();
    public abstract virtual ushort get_MaxStack();
    public abstract virtual IEnumerable`1<ITypeDefinition> get_PrivateHelperTypes();
    public abstract virtual UInt32 get_Size();
}
internal abstract class Microsoft.Cci.IMethodBodyContract : object {
    public IEnumerable`1<IOperationExceptionInformation> OperationExceptionInformation { get; }
    public bool LocalsAreZeroed { get; }
    public IEnumerable`1<ILocalDefinition> LocalVariables { get; }
    public IMethodDefinition MethodDefinition { get; }
    public IEnumerable`1<IOperation> Operations { get; }
    public ushort MaxStack { get; }
    public IEnumerable`1<ITypeDefinition> PrivateHelperTypes { get; }
    public UInt32 Size { get; }
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IOperationExceptionInformation> get_OperationExceptionInformation();
    public sealed virtual bool get_LocalsAreZeroed();
    public sealed virtual IEnumerable`1<ILocalDefinition> get_LocalVariables();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual IEnumerable`1<IOperation> get_Operations();
    public sealed virtual ushort get_MaxStack();
    public sealed virtual IEnumerable`1<ITypeDefinition> get_PrivateHelperTypes();
    public sealed virtual UInt32 get_Size();
}
public interface Microsoft.Cci.IMethodDefinition {
    public IMethodBody Body { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsCil { get; }
    public bool IsConstructor { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStaticConstructor { get; }
    public bool IsSynchronized { get; }
    public bool IsVirtual { get; }
    public bool IsUnmanaged { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public bool PreserveSignature { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public bool RequiresSecurityObject { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public IName ReturnValueName { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public abstract virtual IMethodBody get_Body();
    public abstract virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public abstract virtual bool get_HasDeclarativeSecurity();
    public abstract virtual bool get_HasExplicitThisParameter();
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsAccessCheckedOnOverride();
    public abstract virtual bool get_IsAggressivelyInlined();
    public abstract virtual bool get_IsCil();
    public abstract virtual bool get_IsConstructor();
    public abstract virtual bool get_IsExternal();
    public abstract virtual bool get_IsForwardReference();
    public abstract virtual bool get_IsHiddenBySignature();
    public abstract virtual bool get_IsNativeCode();
    public abstract virtual bool get_IsNewSlot();
    public abstract virtual bool get_IsNeverInlined();
    public abstract virtual bool get_IsNeverOptimized();
    public abstract virtual bool get_IsPlatformInvoke();
    public abstract virtual bool get_IsRuntimeImplemented();
    public abstract virtual bool get_IsRuntimeInternal();
    public abstract virtual bool get_IsRuntimeSpecial();
    public abstract virtual bool get_IsSealed();
    public abstract virtual bool get_IsSpecialName();
    public abstract virtual bool get_IsStaticConstructor();
    public abstract virtual bool get_IsSynchronized();
    public abstract virtual bool get_IsVirtual();
    public abstract virtual bool get_IsUnmanaged();
    public abstract virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public abstract virtual bool get_PreserveSignature();
    public abstract virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public abstract virtual bool get_RequiresSecurityObject();
    public abstract virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public abstract virtual bool get_ReturnValueIsMarshalledExplicitly();
    public abstract virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public abstract virtual IName get_ReturnValueName();
    public abstract virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
}
internal abstract class Microsoft.Cci.IMethodDefinitionContract : object {
    public IMethodBody Body { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsCil { get; }
    public bool IsConstructor { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStaticConstructor { get; }
    public bool IsSynchronized { get; }
    public bool IsVirtual { get; }
    public bool IsUnmanaged { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public bool PreserveSignature { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public bool RequiresSecurityObject { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public IName ReturnValueName { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeDefinition Container { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public sealed virtual IMethodBody get_Body();
    public sealed virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStaticConstructor();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual bool get_RequiresSecurityObject();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public sealed virtual IName get_ReturnValueName();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IMethodImplementation {
    public ITypeDefinition ContainingType { get; }
    public IMethodReference ImplementedMethod { get; }
    public IMethodReference ImplementingMethod { get; }
    public abstract virtual ITypeDefinition get_ContainingType();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual IMethodReference get_ImplementedMethod();
    public abstract virtual IMethodReference get_ImplementingMethod();
}
internal abstract class Microsoft.Cci.IMethodImplementationContract : object {
    public ITypeDefinition ContainingType { get; }
    public IMethodReference ImplementedMethod { get; }
    public IMethodReference ImplementingMethod { get; }
    public sealed virtual ITypeDefinition get_ContainingType();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IMethodReference get_ImplementedMethod();
    public sealed virtual IMethodReference get_ImplementingMethod();
}
public interface Microsoft.Cci.IMethodReference {
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public abstract virtual bool get_AcceptsExtraArguments();
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual UInt32 get_InternedKey();
    public abstract virtual bool get_IsGeneric();
    public abstract virtual ushort get_ParameterCount();
    public abstract virtual IMethodDefinition get_ResolvedMethod();
    public abstract virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
}
internal abstract class Microsoft.Cci.IMethodReferenceContract : object {
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public abstract class Microsoft.Cci.Immutable.AggregatedNamespace`2 : AggregatedScope`3<INamespaceMember, ContainerType, ContainerMemberType> {
    private IName name;
    private IEnumerable`1<INamespaceMember> Microsoft.Cci.IContainer<Microsoft.Cci.INamespaceMember>.Members { get; }
    private IEnumerable`1<INamespaceMember> Microsoft.Cci.INamespaceDefinition.Members { get; }
    public IName Name { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    protected AggregatedNamespace`2(IName name);
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    private sealed virtual override IEnumerable`1<INamespaceMember> Microsoft.Cci.IContainer<Microsoft.Cci.INamespaceMember>.get_Members();
    private sealed virtual override IEnumerable`1<INamespaceMember> Microsoft.Cci.INamespaceDefinition.get_Members();
    public sealed virtual IName get_Name();
    public abstract virtual INamespaceRootOwner get_RootOwner();
    public abstract virtual IEnumerable`1<ILocation> get_Locations();
    public virtual IEnumerable`1<ICustomAttribute> get_Attributes();
}
public abstract class Microsoft.Cci.Immutable.AggregatedScope`3 : Scope`1<ScopeMemberType> {
    private void AddContainerMemberToCache(ContainerMemberType member);
    protected virtual void AddContainer(ContainerType container);
    protected abstract virtual ScopeMemberType GetAggregatedMember(ContainerMemberType member);
}
public abstract class Microsoft.Cci.Immutable.ArrayType : SystemDefinedStructuralType {
    private ITypeReference elementType;
    private IEnumerable`1<ITypeReference> interfaces;
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public ITypeReference ElementType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsReferenceType { get; }
    public bool IsVector { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IPlatformType PlatformType { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    private IEnumerable`1<ITypeReference> Microsoft.Cci.ITypeDefinition.BaseClasses { get; }
    private IEnumerable`1<IGenericTypeParameter> Microsoft.Cci.ITypeDefinition.GenericParameters { get; }
    private ushort Microsoft.Cci.ITypeDefinition.GenericParameterCount { get; }
    private IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IContainer<Microsoft.Cci.ITypeDefinitionMember>.Members { get; }
    private IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.Attributes { get; }
    private IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.Members { get; }
    internal ArrayType(ITypeReference elementType, IInternFactory internFactory);
    public virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public virtual bool Contains(ITypeDefinitionMember member);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual ITypeReference get_ElementType();
    protected virtual IEnumerable`1<ITypeReference> GetInterfaceList();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.ArrayType/<GetMatchingMembersNamed>d__10")]
public virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.ArrayType/<GetMatchingMembers>d__11")]
public virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.ArrayType/<GetMembersNamed>d__12")]
public virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public virtual bool get_IsReferenceType();
    public virtual bool get_IsVector();
    public virtual IEnumerable`1<int> get_LowerBounds();
    public virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public virtual IPlatformType get_PlatformType();
    public virtual UInt32 get_Rank();
    public virtual IEnumerable`1<ulong> get_Sizes();
    private sealed virtual override IEnumerable`1<ITypeReference> Microsoft.Cci.ITypeDefinition.get_BaseClasses();
    private sealed virtual override IEnumerable`1<IGenericTypeParameter> Microsoft.Cci.ITypeDefinition.get_GenericParameters();
    private sealed virtual override ushort Microsoft.Cci.ITypeDefinition.get_GenericParameterCount();
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IContainer<Microsoft.Cci.ITypeDefinitionMember>.get_Members();
    private sealed virtual override IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.get_Attributes();
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.GetMembersNamed(IName name, bool ignoreCase);
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.get_Members();
}
public class Microsoft.Cci.Immutable.AssemblyReference : object {
    private AssemblyIdentity assemblyIdentity;
    private IMetadataHost host;
    private bool isRetargetable;
    private bool containsForeignTypes;
    private IAssembly resolvedAssembly;
    private AssemblyIdentity unifiedAssemblyIdentity;
    public IEnumerable`1<IName> Aliases { get; }
    public AssemblyIdentity AssemblyIdentity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IAssemblyReference ContainingAssembly { get; }
    public string Culture { get; }
    public bool IsRetargetable { get; }
    public bool ContainsForeignTypes { get; }
    public IEnumerable`1<byte> HashValue { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IName Name { get; }
    public IEnumerable`1<byte> PublicKey { get; }
    public IEnumerable`1<byte> PublicKeyToken { get; }
    public IAssembly ResolvedAssembly { get; }
    public IModule ResolvedModule { get; }
    public IUnit ResolvedUnit { get; }
    public AssemblyIdentity UnifiedAssemblyIdentity { get; }
    public UnitIdentity UnitIdentity { get; }
    public Version Version { get; }
    public AssemblyReference(IMetadataHost host, AssemblyIdentity assemblyIdentity, bool isRetargetable, bool containsForeignTypes);
    public sealed virtual IEnumerable`1<IName> get_Aliases();
    public sealed virtual AssemblyIdentity get_AssemblyIdentity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IAssemblyReference get_ContainingAssembly();
    public sealed virtual string get_Culture();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual bool get_ContainsForeignTypes();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<byte> get_PublicKey();
    public sealed virtual IEnumerable`1<byte> get_PublicKeyToken();
    public sealed virtual IAssembly get_ResolvedAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual AssemblyIdentity get_UnifiedAssemblyIdentity();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual Version get_Version();
}
public abstract class Microsoft.Cci.Immutable.BaseTypeReference : object {
    protected IMetadataHost host;
    private bool isEnum;
    private bool isValueType;
    public IAliasForType AliasForType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    protected BaseTypeReference(IMetadataHost host, bool isEnum, bool isValueType);
    public abstract virtual IAliasForType get_AliasForType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public abstract virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    protected abstract virtual ITypeDefinition Resolve();
    public virtual PrimitiveTypeCode get_TypeCode();
}
public class Microsoft.Cci.Immutable.CustomModifier : object {
    private bool isOptional;
    private ITypeReference modifier;
    public bool IsOptional { get; }
    public ITypeReference Modifier { get; }
    public CustomModifier(bool isOptional, ITypeReference modifier);
    public sealed virtual bool get_IsOptional();
    public sealed virtual ITypeReference get_Modifier();
    internal static ICustomModifier CopyModifierToNewContainer(ICustomModifier customModifier, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ICustomModifier Specialize(ICustomModifier customModifier, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ICustomModifier Specialize(ICustomModifier customModifier, IMethodReference targetContainer, IInternFactory internFactory);
    public static ICustomModifier SpecializeIfConstructedFromApplicableTypeParameter(ICustomModifier customModifier, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    public static ICustomModifier SpecializeIfConstructedFromApplicableTypeParameter(ICustomModifier customModifier, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ICustomModifier SpecializeIfConstructedFromApplicableMethodTypeParameter(ICustomModifier customModifier, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
}
internal class Microsoft.Cci.Immutable.DummyArrayMethodParameter : object {
    private ISignature containingSignature;
    private ushort index;
    private ITypeReference type;
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ushort Index { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    public ITypeReference Type { get; }
    internal DummyArrayMethodParameter(ISignature containingSignature, ushort index, ITypeReference type);
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual ushort get_Index();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
    public sealed virtual ITypeReference get_Type();
}
public class Microsoft.Cci.Immutable.DummyArrayMethodReference : object {
    private IArrayTypeReference arrayType;
    private OperationCode arrayOperation;
    private IPlatformType platformType;
    private IName name;
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public ushort ParameterCount { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public UInt32 InternedKey { get; }
    public DummyArrayMethodReference(IArrayTypeReference arrayType, OperationCode arrayOperation, IMetadataHost host);
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.DummyArrayMethodReference/<get_Parameters>d__21")]
public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual UInt32 get_InternedKey();
}
public class Microsoft.Cci.Immutable.FunctionPointerType : SystemDefinedStructuralType {
    private CallingConvention callingConvention;
    private IEnumerable`1<IParameterTypeInformation> extraArgumentTypes;
    private IEnumerable`1<IParameterTypeInformation> parameters;
    private IEnumerable`1<ICustomModifier> returnValueCustomModifiers;
    private bool returnValueIsByRef;
    private ITypeReference type;
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraArgumentTypes { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public PrimitiveTypeCode TypeCode { get; }
    private bool Microsoft.Cci.ISignature.IsStatic { get; }
    private ITypeReference Microsoft.Cci.ISignature.Type { get; }
    public FunctionPointerType(ISignature signature, IInternFactory internFactory);
    public FunctionPointerType(CallingConvention callingConvention, bool returnValueIsByRef, ITypeReference type, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IInternFactory internFactory);
    public sealed virtual CallingConvention get_CallingConvention();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraArgumentTypes();
    public virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public ITypeReference get_Type();
    public virtual PrimitiveTypeCode get_TypeCode();
    private sealed virtual override bool Microsoft.Cci.ISignature.get_IsStatic();
    private sealed virtual override ITypeReference Microsoft.Cci.ISignature.get_Type();
}
public class Microsoft.Cci.Immutable.GenericMethodInstance : object {
    private WeakReference body;
    private IEnumerable`1<ITypeReference> genericArguments;
    private IMethodDefinition genericMethod;
    private ITypeReference type;
    private IInternFactory internFactory;
    private UInt32 internedKey;
    public IMethodBody Body { get; }
    public CallingConvention CallingConvention { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public IMethodDefinition GenericMethod { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public ushort ParameterCount { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public bool ReturnValueIsModified { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public ITypeReference Type { get; }
    public TypeMemberVisibility Visibility { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public bool AcceptsExtraArguments { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public IInternFactory InternFactory { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsCil { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsGeneric { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public bool IsSynchronized { get; }
    public bool IsUnmanaged { get; }
    public bool IsVirtual { get; }
    public bool PreserveSignature { get; }
    public bool RequiresSecurityObject { get; }
    public IName ReturnValueName { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public bool IsConstructor { get; }
    public bool IsStaticConstructor { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public UInt32 InternedKey { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    private IMethodReference Microsoft.Cci.IGenericMethodInstanceReference.GenericMethod { get; }
    public GenericMethodInstance(IMethodDefinition genericMethod, IEnumerable`1<ITypeReference> genericArguments, IInternFactory internFactory);
    public sealed virtual IMethodBody get_Body();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public IMethodDefinition get_GenericMethod();
    public sealed virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.GenericMethodInstance/<get_Parameters>d__21")]
public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public virtual string ToString();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public IInternFactory get_InternFactory();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual bool get_RequiresSecurityObject();
    public sealed virtual IName get_ReturnValueName();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsStaticConstructor();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    private sealed virtual override IMethodReference Microsoft.Cci.IGenericMethodInstanceReference.get_GenericMethod();
}
public class Microsoft.Cci.Immutable.GenericMethodInstanceReference : object {
    private IEnumerable`1<ITypeReference> genericArguments;
    private IMethodReference genericMethod;
    private ITypeReference type;
    private IInternFactory internFactory;
    private IMethodDefinition resolvedMethod;
    private UInt32 internedKey;
    public bool AcceptsExtraArguments { get; }
    public CallingConvention CallingConvention { get; }
    public ITypeReference ContainingType { get; }
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public IMethodReference GenericMethod { get; }
    public ushort GenericParameterCount { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public ushort ParameterCount { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public IInternFactory InternFactory { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public UInt32 InternedKey { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public GenericMethodInstanceReference(IMethodReference genericMethod, IEnumerable`1<ITypeReference> genericArguments, IInternFactory internFactory);
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public sealed virtual IMethodReference get_GenericMethod();
    public sealed virtual ushort get_GenericParameterCount();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.GenericMethodInstanceReference/<get_Parameters>d__18")]
public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public virtual string ToString();
    public sealed virtual ITypeReference get_Type();
    public IInternFactory get_InternFactory();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
}
public class Microsoft.Cci.Immutable.GenericMethodParameterReference : object {
    private IMetadataHost host;
    private IMethodReference definingMethod;
    private IGenericMethodParameter resolvedType;
    private IName name;
    private ushort index;
    public IMethodReference DefiningMethod { get; public set; }
    public IGenericMethodParameter ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ushort Index { get; }
    public GenericMethodParameterReference(IName name, ushort index, IMetadataHost host);
    public GenericMethodParameterReference(IName name, ushort index, IMethodReference definingMethod, IMetadataHost host);
    public sealed virtual IMethodReference get_DefiningMethod();
    public void set_DefiningMethod(IMethodReference value);
    public sealed virtual IGenericMethodParameter get_ResolvedType();
    private void Resolve();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
}
internal static class Microsoft.Cci.Immutable.GenericParameter : object {
    public static ITypeReference DeepCopyTypeReference(IGenericTypeParameterReference genericTypeParameter, SpecializedNestedTypeDefinition targetContainer);
    internal static ITypeReference SpecializeTypeReference(IGenericTypeParameterReference genericTypeParameter, ITypeReference targetContainer);
    internal static ITypeReference SpecializeTypeReference(IGenericTypeParameterReference genericTypeParameter, IMethodReference targetContainer);
    internal static ITypeReference SpecializeTypeReference(IGenericMethodParameterReference genericMethodParameter, IMethodReference targetContainer, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IGenericMethodParameterReference genericMethodParameter, IGenericMethodInstanceReference containingMethodInstance);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IGenericTypeParameterReference genericTypeParameter, IGenericTypeInstanceReference containingTypeInstance);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(IGenericMethodParameterReference genericMethodParameter, ISpecializedMethodReference specializedMethodReference);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(IGenericTypeParameterReference genericTypeParameter, ISpecializedMethodReference specializedMethodReference);
}
public class Microsoft.Cci.Immutable.GenericTypeInstance : Scope`1<ITypeDefinitionMember> {
    private IEnumerable`1<ITypeReference> genericArguments;
    private INamedTypeReference genericType;
    private bool initialized;
    private IInternFactory internFactory;
    private UInt32 internedKey;
    public ushort Alignment { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public INamedTypeReference GenericType { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public UInt32 SizeOf { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public ITypeReference UnderlyingType { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    private IEnumerable`1<IGenericTypeParameter> Microsoft.Cci.ITypeDefinition.GenericParameters { get; }
    private ushort Microsoft.Cci.ITypeDefinition.GenericParameterCount { get; }
    private IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.ITypeDefinition.Members { get; }
    private IEnumerable`1<ISecurityAttribute> Microsoft.Cci.ITypeDefinition.SecurityAttributes { get; }
    private IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IContainer<Microsoft.Cci.ITypeDefinitionMember>.Members { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public IInternFactory InternFactory { get; }
    public UInt32 InternedKey { get; }
    private GenericTypeInstance(INamedTypeDefinition genericType, IEnumerable`1<ITypeReference> genericArguments, IInternFactory internFactory);
    public static GenericTypeInstance GetGenericTypeInstance(INamedTypeDefinition genericType, IEnumerable`1<ITypeReference> genericArguments, IInternFactory internFactory);
    public sealed virtual ushort get_Alignment();
    public virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.GenericTypeInstance/<get_BaseClasses>d__7")]
public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.GenericTypeInstance/<get_ExplicitImplementationOverrides>d__17")]
public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public sealed virtual INamedTypeReference get_GenericType();
    protected virtual void InitializeIfNecessary();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.GenericTypeInstance/<get_Interfaces>d__29")]
public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    internal static ITypeReference DeepCopyTypeReference(IGenericTypeInstanceReference genericTypeInstance, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IGenericTypeInstanceReference genericTypeInstance, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IGenericTypeInstanceReference genericTypeInstance, IMethodReference targetContainer, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IGenericTypeInstanceReference genericTypeInstance, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IGenericTypeInstanceReference genericTypeInstance, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(IGenericTypeInstanceReference genericTypeInstance, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
    public ITypeDefinitionMember SpecializeMember(ITypeDefinitionMember unspecializedMember, IInternFactory internFactory);
    public sealed virtual UInt32 get_SizeOf();
    public virtual string ToString();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    private sealed virtual override IEnumerable`1<IGenericTypeParameter> Microsoft.Cci.ITypeDefinition.get_GenericParameters();
    private sealed virtual override ushort Microsoft.Cci.ITypeDefinition.get_GenericParameterCount();
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.ITypeDefinition.get_Members();
    private sealed virtual override IEnumerable`1<ISecurityAttribute> Microsoft.Cci.ITypeDefinition.get_SecurityAttributes();
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IContainer<Microsoft.Cci.ITypeDefinitionMember>.get_Members();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public IInternFactory get_InternFactory();
    public sealed virtual UInt32 get_InternedKey();
}
public class Microsoft.Cci.Immutable.GenericTypeInstanceReference : object {
    private IEnumerable`1<ITypeReference> genericArguments;
    private INamedTypeReference genericType;
    private IInternFactory internFactory;
    private UInt32 internedKey;
    private ITypeDefinition resolvedType;
    public IEnumerable`1<ITypeReference> GenericArguments { get; }
    public INamedTypeReference GenericType { get; }
    public IAliasForType AliasForType { get; }
    public IInternFactory InternFactory { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public GenericTypeInstanceReference(INamedTypeReference genericType, IEnumerable`1<ITypeReference> genericArguments, IInternFactory internFactory);
    public sealed virtual IEnumerable`1<ITypeReference> get_GenericArguments();
    public sealed virtual INamedTypeReference get_GenericType();
    public sealed virtual IAliasForType get_AliasForType();
    public IInternFactory get_InternFactory();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public virtual string ToString();
    public virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual IEnumerable`1<ILocation> get_Locations();
}
public class Microsoft.Cci.Immutable.ManagedPointerType : SystemDefinedStructuralType {
    private ITypeReference targetType;
    public IPlatformType PlatformType { get; }
    public ITypeReference TargetType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    protected ManagedPointerType(ITypeReference targetType, IInternFactory internFactory);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public static ManagedPointerType GetManagedPointerType(ITypeReference targetType, IInternFactory internFactory);
    public virtual IPlatformType get_PlatformType();
    internal static ITypeReference DeepCopyTypeReference(IManagedPointerTypeReference pointer, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IManagedPointerTypeReference pointer, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IManagedPointerTypeReference pointer, IMethodReference targetContainer, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IManagedPointerTypeReference pointer, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IManagedPointerTypeReference pointer, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(IManagedPointerTypeReference pointer, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
    public sealed virtual ITypeReference get_TargetType();
    public virtual PrimitiveTypeCode get_TypeCode();
}
public class Microsoft.Cci.Immutable.Matrix : ArrayType {
    private IEnumerable`1<int> lowerBounds;
    private UInt32 rank;
    private IEnumerable`1<ulong> sizes;
    public bool IsVector { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    protected Matrix(ITypeReference elementType, UInt32 rank, IEnumerable`1<int> lowerBounds, IEnumerable`1<ulong> sizes, IInternFactory internFactory);
    public static Matrix GetMatrix(ITypeReference elementType, UInt32 rank, IInternFactory internFactory);
    public static Matrix GetMatrix(ITypeReference elementType, UInt32 rank, IEnumerable`1<int> lowerBounds, IEnumerable`1<ulong> sizes, IInternFactory internFactory);
    public virtual bool get_IsVector();
    public virtual IEnumerable`1<int> get_LowerBounds();
    public virtual UInt32 get_Rank();
    public virtual IEnumerable`1<ulong> get_Sizes();
    internal static ITypeReference DeepCopyTypeReference(IArrayTypeReference array, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IArrayTypeReference array, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IArrayTypeReference array, IMethodReference targetContainer, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IArrayTypeReference array, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IArrayTypeReference array, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(IArrayTypeReference array, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
}
public class Microsoft.Cci.Immutable.ModifiedPointerType : PointerType {
    private IEnumerable`1<ICustomModifier> customModifiers;
    public bool IsModified { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ITypeReference UnmodifiedType { get; }
    private ModifiedPointerType(ITypeReference targetType, IEnumerable`1<ICustomModifier> customModifiers, IInternFactory internFactory);
    public virtual bool get_IsModified();
    internal static ITypeReference DeepCopyTypeReference(ModifiedPointerType modifiedPointer, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(ModifiedPointerType modifiedPointer, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(ModifiedPointerType modifiedPointer, IMethodReference targetContainer, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(ModifiedPointerType modifiedPointer, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(ModifiedPointerType modifiedPointer, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(ModifiedPointerType modifiedPointer, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
    public static ModifiedPointerType GetModifiedPointerType(ITypeReference targetType, IEnumerable`1<ICustomModifier> customModifiers, IInternFactory internFactory);
    public virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual ITypeReference get_UnmodifiedType();
}
public class Microsoft.Cci.Immutable.ModifiedTypeReference : object {
    private IInternFactory internFactory;
    private IEnumerable`1<ICustomModifier> customModifiers;
    private ITypeReference unmodifiedType;
    private UInt32 internedKey;
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ITypeReference UnmodifiedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    private ModifiedTypeReference(IInternFactory internFactory, ITypeReference unmodifiedType, IEnumerable`1<ICustomModifier> customModifiers);
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual ITypeReference get_UnmodifiedType();
    public static ModifiedTypeReference GetModifiedTypeReference(ITypeReference unmodifiedType, IEnumerable`1<ICustomModifier> customModifiers, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReference(IModifiedTypeReference modifiedTypeReference, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IModifiedTypeReference modifiedTypeReference, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IModifiedTypeReference modifiedTypeReference, IMethodReference targetContainer, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IModifiedTypeReference modifiedTypeReference, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IModifiedTypeReference modifiedTypeReference, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(IModifiedTypeReference modifiedTypeReference, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
public class Microsoft.Cci.Immutable.ModuleReference : object {
    private IMetadataHost host;
    private ModuleIdentity moduleIdentity;
    private IModule resolvedModule;
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IAssemblyReference ContainingAssembly { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IName Name { get; }
    public IModule ResolvedModule { get; }
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public ModuleReference(IMetadataHost host, ModuleIdentity moduleIdentity);
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IAssemblyReference get_ContainingAssembly();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IName get_Name();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual UnitIdentity get_UnitIdentity();
}
public class Microsoft.Cci.Immutable.NamespaceTypeReference : BaseTypeReference {
    private IAliasForType aliasForType;
    private IUnitNamespaceReference containingUnitNamespace;
    private ushort genericParameterCount;
    private UInt32 internedKey;
    private IName name;
    private INamespaceTypeDefinition resolvedType;
    private PrimitiveTypeCode typeCode;
    public IAliasForType AliasForType { get; }
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public IName Name { get; }
    public INamespaceTypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    public NamespaceTypeReference(IMetadataHost host, IUnitNamespaceReference containingUnitNamespace, IName name, ushort genericParameterCount, bool isEnum, bool isValueType, PrimitiveTypeCode typeCode);
    public virtual IAliasForType get_AliasForType();
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual ushort get_GenericParameterCount();
    public virtual UInt32 get_InternedKey();
    public sealed virtual IName get_Name();
    public sealed virtual INamespaceTypeDefinition get_ResolvedType();
    private INamespaceTypeDefinition GetResolvedType();
    protected virtual ITypeDefinition Resolve();
    public virtual string ToString();
    public virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
}
public class Microsoft.Cci.Immutable.NestedUnitNamespaceReference : object {
    private IUnitNamespaceReference containingUnitNamespace;
    private IName name;
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public IName Name { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    public IUnitReference Unit { get; }
    private IUnitNamespace Microsoft.Cci.IUnitNamespaceReference.ResolvedUnitNamespace { get; }
    private IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.Attributes { get; }
    private IEnumerable`1<ILocation> Microsoft.Cci.IObjectWithLocations.Locations { get; }
    public NestedUnitNamespaceReference(IUnitNamespaceReference containingUnitNamespace, IName name);
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IName get_Name();
    public sealed virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
    public sealed virtual IUnitReference get_Unit();
    private sealed virtual override IUnitNamespace Microsoft.Cci.IUnitNamespaceReference.get_ResolvedUnitNamespace();
    private sealed virtual override IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.get_Attributes();
    private sealed virtual override IEnumerable`1<ILocation> Microsoft.Cci.IObjectWithLocations.get_Locations();
}
public class Microsoft.Cci.Immutable.NestedUnitSetNamespace : UnitSetNamespace {
    private bool isInitialized;
    private UnitSetNamespace containingNamespace;
    public UnitSetNamespace ContainingNamespace { get; }
    private INamespaceDefinition Microsoft.Cci.INamespaceMember.ContainingNamespace { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public INamespaceDefinition Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Name { get; }
    public IUnitSetNamespace ContainingUnitSetNamespace { get; }
    internal NestedUnitSetNamespace(UnitSetNamespace containingNamespace, IName name, IUnitSet unitSet, List`1<IUnitNamespace> nestedUnitNamepaces);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    protected virtual void InitializeIfNecessary();
    public UnitSetNamespace get_ContainingNamespace();
    public virtual string ToString();
    private sealed virtual override INamespaceDefinition Microsoft.Cci.INamespaceMember.get_ContainingNamespace();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    public sealed virtual INamespaceDefinition get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Name();
    public sealed virtual IUnitSetNamespace get_ContainingUnitSetNamespace();
}
public class Microsoft.Cci.Immutable.PlatformType : object {
    protected IMetadataHost host;
    private IAssemblyReference contractAssemblyRef;
    private IAssemblyReference coreAssemblyRef;
    private IAssemblyReference systemCoreAssemblyRef;
    private INamespaceTypeReference systemDiagnosticsContractsContract;
    private INamespaceTypeReference systemArgIterator;
    private INamespaceTypeReference systemArray;
    private INamespaceTypeReference systemAsyncCallback;
    private INamespaceTypeReference systemAttribute;
    private INamespaceTypeReference systemAttributeUsageAttribute;
    private INamespaceTypeReference systemBoolean;
    private INamespaceTypeReference systemChar;
    private INamespaceTypeReference systemCollectionsGenericDictionary;
    private INamespaceTypeReference systemCollectionsGenericICollection;
    private INamespaceTypeReference systemCollectionsGenericIEnumerable;
    private INamespaceTypeReference systemCollectionsGenericIEnumerator;
    private INamespaceTypeReference systemCollectionsGenericIList;
    private INamespaceTypeReference systemCollectionsICollection;
    private INamespaceTypeReference systemCollectionsIEnumerable;
    private INamespaceTypeReference systemCollectionsIEnumerator;
    private INamespaceTypeReference systemCollectionsIList;
    private INamespaceTypeReference systemCollectionsIStructuralComparable;
    private INamespaceTypeReference systemCollectionsIStructuralEquatable;
    private INamespaceTypeReference systemContextStaticAttribute;
    private INamespaceTypeReference systemDateTime;
    private INamespaceTypeReference systemDateTimeOffset;
    private INamespaceTypeReference systemDecimal;
    private INamespaceTypeReference systemDelegate;
    private INamespaceTypeReference systemDBNull;
    private INamespaceTypeReference systemEnum;
    private INamespaceTypeReference systemException;
    private INamespaceTypeReference systemFloat32;
    private INamespaceTypeReference systemFloat64;
    private INamespaceTypeReference systemGlobalizationCultureInfo;
    private INamespaceTypeReference systemIAsyncResult;
    private INamespaceTypeReference systemICloneable;
    private INamespaceTypeReference systemInt16;
    private INamespaceTypeReference systemInt32;
    private INamespaceTypeReference systemInt64;
    private INamespaceTypeReference systemInt8;
    private INamespaceTypeReference systemIntPtr;
    private INamespaceTypeReference systemMulticastDelegate;
    private INamespaceTypeReference systemNullable;
    private INamespaceTypeReference systemObject;
    private INamespaceTypeReference systemReflectionAssemblySignatureKeyAttribute;
    private INamespaceTypeReference systemRuntimeArgumentHandle;
    private INamespaceTypeReference systemRuntimeFieldHandle;
    private INamespaceTypeReference systemRuntimeMethodHandle;
    private INamespaceTypeReference systemRuntimeTypeHandle;
    private INamespaceTypeReference systemRuntimeCompilerServicesCallConvCdecl;
    private INamespaceTypeReference systemRuntimeCompilerServicesCompilerGeneratedAttribute;
    private INamespaceTypeReference systemRuntimeCompilerServicesExtensionAttribute;
    private INamespaceTypeReference systemRuntimeCompilerServicesInternalsVisibleToAttribute;
    private INamespaceTypeReference systemRuntimeCompilerServicesIsConst;
    private INamespaceTypeReference systemRuntimeCompilerServicesIsVolatile;
    private INamespaceTypeReference systemRuntimeCompilerServicesReferenceAssemblyAttribute;
    private INamespaceTypeReference systemRuntimeInteropServicesDllImportAttribute;
    private INamespaceTypeReference systemSecurityPermissionsSecurityAction;
    private INamespaceTypeReference systemSecuritySecurityCriticalAttribute;
    private INamespaceTypeReference systemSecuritySecuritySafeCriticalAttribute;
    private INamespaceTypeReference systemSecuritySuppressUnmanagedCodeSecurityAttribute;
    private INamespaceTypeReference systemString;
    private INamespaceTypeReference systemThreadStaticAttribute;
    private INamespaceTypeReference systemType;
    private INamespaceTypeReference systemTypedReference;
    private INamespaceTypeReference systemUInt16;
    private INamespaceTypeReference systemUInt32;
    private INamespaceTypeReference systemUInt64;
    private INamespaceTypeReference systemUInt8;
    private INamespaceTypeReference systemUIntPtr;
    private INamespaceTypeReference systemValueType;
    private INamespaceTypeReference systemVoid;
    private IPointerTypeReference systemVoidPtr;
    public IAssemblyReference ContractAssemblyRef { get; }
    public IAssemblyReference CoreAssemblyRef { get; }
    public IAssemblyReference SystemCoreAssemblyRef { get; }
    public INamespaceTypeReference SystemDiagnosticsContractsContract { get; }
    public byte PointerSize { get; }
    public INamespaceTypeReference SystemArgIterator { get; }
    public INamespaceTypeReference SystemArray { get; }
    public INamespaceTypeReference SystemAsyncCallback { get; }
    public INamespaceTypeReference SystemAttribute { get; }
    public INamespaceTypeReference SystemAttributeUsageAttribute { get; }
    public INamespaceTypeReference SystemBoolean { get; }
    public INamespaceTypeReference SystemChar { get; }
    public INamespaceTypeReference SystemCollectionsGenericDictionary { get; }
    public INamespaceTypeReference SystemCollectionsGenericICollection { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsGenericIList { get; }
    public INamespaceTypeReference SystemCollectionsICollection { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsIList { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralComparable { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralEquatable { get; }
    public INamespaceTypeReference SystemContextStaticAttribute { get; }
    public INamespaceTypeReference SystemDateTime { get; }
    public INamespaceTypeReference SystemDateTimeOffset { get; }
    public INamespaceTypeReference SystemDecimal { get; }
    public INamespaceTypeReference SystemDelegate { get; }
    public INamespaceTypeReference SystemDBNull { get; }
    public INamespaceTypeReference SystemEnum { get; }
    public INamespaceTypeReference SystemException { get; }
    public INamespaceTypeReference SystemFloat32 { get; }
    public INamespaceTypeReference SystemFloat64 { get; }
    public INamespaceTypeReference SystemGlobalizationCultureInfo { get; }
    public INamespaceTypeReference SystemIAsyncResult { get; }
    public INamespaceTypeReference SystemICloneable { get; }
    public INamespaceTypeReference SystemInt16 { get; }
    public INamespaceTypeReference SystemInt32 { get; }
    public INamespaceTypeReference SystemInt64 { get; }
    public INamespaceTypeReference SystemInt8 { get; }
    public INamespaceTypeReference SystemIntPtr { get; }
    public INamespaceTypeReference SystemMulticastDelegate { get; }
    public INamespaceTypeReference SystemNullable { get; }
    public INamespaceTypeReference SystemObject { get; }
    public INamespaceTypeReference SystemReflectionAssemblySignatureKeyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeArgumentHandle { get; }
    public INamespaceTypeReference SystemRuntimeFieldHandle { get; }
    public INamespaceTypeReference SystemRuntimeMethodHandle { get; }
    public INamespaceTypeReference SystemRuntimeTypeHandle { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCallConvCdecl { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCompilerGeneratedAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesExtensionAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesInternalsVisibleToAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsConst { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsVolatile { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesReferenceAssemblyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeInteropServicesDllImportAttribute { get; }
    public INamespaceTypeReference SystemSecurityPermissionsSecurityAction { get; }
    public INamespaceTypeReference SystemSecuritySecurityCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySecuritySafeCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySuppressUnmanagedCodeSecurityAttribute { get; }
    public INamespaceTypeReference SystemString { get; }
    public INamespaceTypeReference SystemThreadStaticAttribute { get; }
    public INamespaceTypeReference SystemType { get; }
    public INamespaceTypeReference SystemTypedReference { get; }
    public INamespaceTypeReference SystemUInt16 { get; }
    public INamespaceTypeReference SystemUInt32 { get; }
    public INamespaceTypeReference SystemUInt64 { get; }
    public INamespaceTypeReference SystemUInt8 { get; }
    public INamespaceTypeReference SystemUIntPtr { get; }
    public INamespaceTypeReference SystemValueType { get; }
    public INamespaceTypeReference SystemVoid { get; }
    public IPointerTypeReference SystemVoidPtr { get; }
    public PlatformType(IMetadataHost host);
    public INamespaceTypeReference CreateReference(IAssemblyReference assemblyReference, String[] names);
    public INamespaceTypeReference CreateReference(IAssemblyReference assemblyReference, bool isValueType, String[] names);
    public INamespaceTypeReference CreateReference(IAssemblyReference assemblyReference, PrimitiveTypeCode typeCode, String[] names);
    public INamespaceTypeReference CreateReference(IAssemblyReference assemblyReference, ushort genericParameterCount, String[] names);
    public INamespaceTypeReference CreateReference(IAssemblyReference assemblyReference, bool isValueType, ushort genericParameterCount, PrimitiveTypeCode typeCode, String[] names);
    public IAssemblyReference get_ContractAssemblyRef();
    public IAssemblyReference get_CoreAssemblyRef();
    public IAssemblyReference get_SystemCoreAssemblyRef();
    public sealed virtual INamespaceTypeReference get_SystemDiagnosticsContractsContract();
    public sealed virtual byte get_PointerSize();
    public sealed virtual INamespaceTypeReference get_SystemArgIterator();
    public sealed virtual INamespaceTypeReference get_SystemArray();
    public sealed virtual INamespaceTypeReference get_SystemAsyncCallback();
    public sealed virtual INamespaceTypeReference get_SystemAttribute();
    public sealed virtual INamespaceTypeReference get_SystemAttributeUsageAttribute();
    public sealed virtual INamespaceTypeReference get_SystemBoolean();
    public sealed virtual INamespaceTypeReference get_SystemChar();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericDictionary();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericICollection();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerator();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIList();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsICollection();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIEnumerable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIEnumerator();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIList();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIStructuralComparable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIStructuralEquatable();
    public sealed virtual INamespaceTypeReference get_SystemContextStaticAttribute();
    public sealed virtual INamespaceTypeReference get_SystemDateTime();
    public sealed virtual INamespaceTypeReference get_SystemDateTimeOffset();
    public sealed virtual INamespaceTypeReference get_SystemDecimal();
    public sealed virtual INamespaceTypeReference get_SystemDelegate();
    public sealed virtual INamespaceTypeReference get_SystemDBNull();
    public sealed virtual INamespaceTypeReference get_SystemEnum();
    public sealed virtual INamespaceTypeReference get_SystemException();
    public sealed virtual INamespaceTypeReference get_SystemFloat32();
    public sealed virtual INamespaceTypeReference get_SystemFloat64();
    public sealed virtual INamespaceTypeReference get_SystemGlobalizationCultureInfo();
    public sealed virtual INamespaceTypeReference get_SystemIAsyncResult();
    public sealed virtual INamespaceTypeReference get_SystemICloneable();
    public sealed virtual INamespaceTypeReference get_SystemInt16();
    public sealed virtual INamespaceTypeReference get_SystemInt32();
    public sealed virtual INamespaceTypeReference get_SystemInt64();
    public sealed virtual INamespaceTypeReference get_SystemInt8();
    public sealed virtual INamespaceTypeReference get_SystemIntPtr();
    public sealed virtual INamespaceTypeReference get_SystemMulticastDelegate();
    public sealed virtual INamespaceTypeReference get_SystemNullable();
    public sealed virtual INamespaceTypeReference get_SystemObject();
    public sealed virtual INamespaceTypeReference get_SystemReflectionAssemblySignatureKeyAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeArgumentHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeFieldHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeMethodHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeTypeHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCallConvCdecl();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCompilerGeneratedAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesExtensionAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesInternalsVisibleToAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsConst();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsVolatile();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesReferenceAssemblyAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeInteropServicesDllImportAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecurityPermissionsSecurityAction();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySecurityCriticalAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySecuritySafeCriticalAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySuppressUnmanagedCodeSecurityAttribute();
    public sealed virtual INamespaceTypeReference get_SystemString();
    public sealed virtual INamespaceTypeReference get_SystemThreadStaticAttribute();
    public sealed virtual INamespaceTypeReference get_SystemType();
    public sealed virtual INamespaceTypeReference get_SystemTypedReference();
    public sealed virtual INamespaceTypeReference get_SystemUInt16();
    public sealed virtual INamespaceTypeReference get_SystemUInt32();
    public sealed virtual INamespaceTypeReference get_SystemUInt64();
    public sealed virtual INamespaceTypeReference get_SystemUInt8();
    public sealed virtual INamespaceTypeReference get_SystemUIntPtr();
    public sealed virtual INamespaceTypeReference get_SystemValueType();
    public sealed virtual INamespaceTypeReference get_SystemVoid();
    public IPointerTypeReference get_SystemVoidPtr();
    public sealed virtual INamespaceTypeReference GetTypeFor(PrimitiveTypeCode typeCode);
}
public class Microsoft.Cci.Immutable.PointerType : SystemDefinedStructuralType {
    private ITypeReference targetType;
    public IPlatformType PlatformType { get; }
    public ITypeReference TargetType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    protected PointerType(ITypeReference targetType, IInternFactory internFactory);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public static PointerType GetPointerType(ITypeReference targetType, IInternFactory internFactory);
    public virtual IPlatformType get_PlatformType();
    internal static ITypeReference DeepCopyTypeReference(IPointerTypeReference pointer, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IPointerTypeReference pointer, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IPointerTypeReference pointer, IMethodReference targetContainer, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IPointerTypeReference pointer, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IPointerTypeReference pointer, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceReplacingGenericMethodParameter(IPointerTypeReference pointer, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
    public sealed virtual ITypeReference get_TargetType();
    public virtual PrimitiveTypeCode get_TypeCode();
}
public class Microsoft.Cci.Immutable.RootUnitNamespaceReference : object {
    private IUnitReference unit;
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IUnitReference Unit { get; }
    private IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.Attributes { get; }
    private IEnumerable`1<ILocation> Microsoft.Cci.IObjectWithLocations.Locations { get; }
    public RootUnitNamespaceReference(IUnitReference unit);
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual IUnitReference get_Unit();
    private sealed virtual override IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.get_Attributes();
    private sealed virtual override IEnumerable`1<ILocation> Microsoft.Cci.IObjectWithLocations.get_Locations();
}
public class Microsoft.Cci.Immutable.RootUnitSetNamespace : UnitSetNamespace {
    public RootUnitSetNamespace(IName name, UnitSet unitSet);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual string ToString();
}
public abstract class Microsoft.Cci.Immutable.Scope`1 : object {
    private Dictionary`2<int, List`1<MemberType>> caseSensitiveMemberNameToMemberListMap;
    private Dictionary`2<int, List`1<MemberType>> caseInsensitiveMemberNameToMemberListMap;
    private static IEnumerable`1<MemberType> emptyList;
    public IEnumerable`1<MemberType> Members { get; }
    private static Scope`1();
    protected void AddMemberToCache(MemberType member);
    public sealed virtual bool Contains(MemberType member);
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.Scope`1/<GetMatchingMembersNamed>d__4")]
public sealed virtual IEnumerable`1<MemberType> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<MemberType, bool> predicate);
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.Scope`1/<GetMatchingMembers>d__5")]
public sealed virtual IEnumerable`1<MemberType> GetMatchingMembers(Function`2<MemberType, bool> predicate);
    public sealed virtual IEnumerable`1<MemberType> GetMembersNamed(IName name, bool ignoreCase);
    protected virtual void InitializeIfNecessary();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.Scope`1/<get_Members>d__10")]
public virtual IEnumerable`1<MemberType> get_Members();
}
public class Microsoft.Cci.Immutable.SpecializedEventDefinition : SpecializedTypeDefinitionMember`1<IEventDefinition> {
    private IEnumerable`1<IMethodReference> accessors;
    private IMethodReference adder;
    private IMethodReference caller;
    private IEventDefinition partiallySpecializedVersion;
    private IMethodReference remover;
    private ITypeReference type;
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMethodReference Adder { get; }
    public IMethodReference Caller { get; }
    public IMethodReference Remover { get; }
    public ITypeReference Type { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public SpecializedEventDefinition(IEventDefinition unspecializedVersion, IEventDefinition partiallySpecializedVersion, ITypeDefinition containingTypeDefinition, GenericTypeInstance containingGenericTypeInstance);
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public sealed virtual IMethodReference get_Adder();
    public sealed virtual IMethodReference get_Caller();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IMethodReference get_Remover();
    public sealed virtual ITypeReference get_Type();
    private ITypeReference SpecializeIfConstructed(ITypeReference partiallySpecializedTypeReference);
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
}
public class Microsoft.Cci.Immutable.SpecializedFieldDefinition : SpecializedTypeDefinitionMember`1<IFieldDefinition> {
    private IFieldDefinition partiallySpecializedVersion;
    private UInt32 internedKey;
    private ITypeReference type;
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsModified { get; }
    public UInt32 InternedKey { get; }
    public ITypeReference Type { get; }
    public UInt32 BitLength { get; }
    public bool IsBitField { get; }
    public bool IsCompileTimeConstant { get; }
    public bool IsMapped { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsNotSerialized { get; }
    public bool IsReadOnly { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public UInt32 Offset { get; }
    public int SequenceNumber { get; }
    public IMetadataConstant CompileTimeValue { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ISectionBlock FieldMapping { get; }
    private IMetadataConstant Microsoft.Cci.IFieldDefinition.CompileTimeValue { get; }
    public IFieldDefinition ResolvedField { get; }
    private IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.Constant { get; }
    private IFieldReference Microsoft.Cci.ISpecializedFieldReference.UnspecializedVersion { get; }
    public SpecializedFieldDefinition(IFieldDefinition unspecializedVersion, IFieldDefinition partiallySpecializedVersion, ITypeDefinition containingTypeDefinition, GenericTypeInstance containingGenericTypeInstance);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsModified();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual ITypeReference get_Type();
    private ITypeReference CopyAndSpecialize(ITypeReference partiallySpecializedTypeReference);
    public sealed virtual UInt32 get_BitLength();
    public sealed virtual bool get_IsBitField();
    public sealed virtual bool get_IsCompileTimeConstant();
    public sealed virtual bool get_IsMapped();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsNotSerialized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual int get_SequenceNumber();
    public IMetadataConstant get_CompileTimeValue();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual ISectionBlock get_FieldMapping();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IFieldDefinition.get_CompileTimeValue();
    public sealed virtual IFieldDefinition get_ResolvedField();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.get_Constant();
    private sealed virtual override IFieldReference Microsoft.Cci.ISpecializedFieldReference.get_UnspecializedVersion();
}
public class Microsoft.Cci.Immutable.SpecializedFieldReference : object {
    private IInternFactory internFactory;
    private IFieldReference unspecializedVersion;
    private UInt32 internedKey;
    private ITypeReference type;
    private IFieldDefinition resolvedField;
    private ITypeReference containingType;
    public IFieldReference UnspecializedVersion { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public UInt32 InternedKey { get; }
    public bool IsModified { get; }
    public bool IsStatic { get; }
    public ITypeReference Type { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public SpecializedFieldReference(ITypeReference containingType, IFieldReference unspecializedVersion, IInternFactory internFactory);
    public sealed virtual IFieldReference get_UnspecializedVersion();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public virtual string ToString();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
public class Microsoft.Cci.Immutable.SpecializedGenericMethodParameter : SpecializedGenericParameter`1<IGenericMethodParameter> {
    private IEnumerable`1<ITypeReference> constraints;
    private SpecializedMethodDefinition definingMethod;
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public SpecializedMethodDefinition DefiningMethod { get; }
    private IMethodDefinition Microsoft.Cci.IGenericMethodParameter.DefiningMethod { get; }
    private IMethodReference Microsoft.Cci.IGenericMethodParameterReference.DefiningMethod { get; }
    private IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.ResolvedType { get; }
    public SpecializedGenericMethodParameter(IGenericMethodParameter partiallySpecializedParameter, SpecializedMethodDefinition definingMethod);
    public virtual IEnumerable`1<ITypeReference> get_Constraints();
    private ITypeReference CopyAndSpecialize(ITypeReference partiallySpecializedTypeReference);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public SpecializedMethodDefinition get_DefiningMethod();
    private sealed virtual override IMethodDefinition Microsoft.Cci.IGenericMethodParameter.get_DefiningMethod();
    private sealed virtual override IMethodReference Microsoft.Cci.IGenericMethodParameterReference.get_DefiningMethod();
    private sealed virtual override IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.get_ResolvedType();
}
internal class Microsoft.Cci.Immutable.SpecializedGenericMethodParameterReference : object {
    private IGenericMethodParameterReference unspecializedVersion;
    private IInternFactory internFactory;
    private IMethodReference definingMethod;
    private IGenericMethodParameter resolvedType;
    private UInt32 internedKey;
    public IMethodReference DefiningMethod { get; }
    public IGenericMethodParameter ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ushort Index { get; }
    internal SpecializedGenericMethodParameterReference(IMethodReference definingMethod, IGenericMethodParameterReference unspecializedVersion, IInternFactory internFactory);
    public sealed virtual IMethodReference get_DefiningMethod();
    public sealed virtual IGenericMethodParameter get_ResolvedType();
    private void Resolve();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
}
public abstract class Microsoft.Cci.Immutable.SpecializedGenericParameter`1 : object {
    private ParameterType unspecializedParameter;
    private IInternFactory internFactory;
    private UInt32 internedKey;
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IPlatformType PlatformType { get; }
    public ParameterType PartiallySpecializedParameter { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public ushort GenericParameterCount { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public ushort Index { get; }
    public IName Name { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsModified { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public IInternFactory InternFactory { get; }
    public UInt32 InternedKey { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    protected SpecializedGenericParameter`1(ParameterType partiallySpecializedParameter, IInternFactory internFactory);
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public abstract virtual IEnumerable`1<ITypeReference> get_Constraints();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IPlatformType get_PlatformType();
    public ParameterType get_PartiallySpecializedParameter();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual bool get_MustBeReferenceType();
    public sealed virtual bool get_MustBeValueType();
    public sealed virtual bool get_MustHaveDefaultConstructor();
    public sealed virtual TypeParameterVariance get_Variance();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual ushort get_Index();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public bool get_IsModified();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public IInternFactory get_InternFactory();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
public class Microsoft.Cci.Immutable.SpecializedGenericTypeParameter : SpecializedGenericParameter`1<IGenericTypeParameter> {
    private IGenericTypeInstanceReference containingGenericTypeInstance;
    private IEnumerable`1<ITypeReference> constraints;
    private ISpecializedNestedTypeReference definingType;
    public IGenericTypeInstanceReference ContainingGenericTypeInstance { get; }
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public ISpecializedNestedTypeReference DefiningType { get; }
    private ITypeDefinition Microsoft.Cci.IGenericTypeParameter.DefiningType { get; }
    private ITypeReference Microsoft.Cci.IGenericTypeParameterReference.DefiningType { get; }
    private IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.ResolvedType { get; }
    public SpecializedGenericTypeParameter(IGenericTypeParameter partiallySpecializedParameter, ISpecializedNestedTypeReference definingTypeInstance, IInternFactory internFactory);
    public IGenericTypeInstanceReference get_ContainingGenericTypeInstance();
    public virtual IEnumerable`1<ITypeReference> get_Constraints();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public ISpecializedNestedTypeReference get_DefiningType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.IGenericTypeParameter.get_DefiningType();
    private sealed virtual override ITypeReference Microsoft.Cci.IGenericTypeParameterReference.get_DefiningType();
    private sealed virtual override IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.get_ResolvedType();
}
internal class Microsoft.Cci.Immutable.SpecializedLocalDefinition : object {
    private ILocalDefinition unspecializedLocal;
    private IMethodDefinition containingMethod;
    private ITypeReference type;
    public IMetadataConstant CompileTimeValue { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsConstant { get; }
    public bool IsModified { get; }
    public bool IsPinned { get; }
    public bool IsReference { get; }
    public IMethodDefinition MethodDefinition { get; }
    public ITypeReference Type { get; }
    public IName Name { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    internal SpecializedLocalDefinition(ILocalDefinition unspecializedLocal, IMethodDefinition containingMethod, ITypeReference type);
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsConstant();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsPinned();
    public sealed virtual bool get_IsReference();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
internal class Microsoft.Cci.Immutable.SpecializedMethodBody : object {
    private IMethodBody unspecializedBody;
    private IMethodDefinition containingMethod;
    private IInternFactory internFactory;
    private IEnumerable`1<IOperationExceptionInformation> operationExceptionInformation;
    private IEnumerable`1<ILocalDefinition> localVariables;
    private IEnumerable`1<IOperation> operations;
    private IEnumerable`1<ITypeDefinition> privateHelperTypes;
    public IEnumerable`1<IOperationExceptionInformation> OperationExceptionInformation { get; }
    public bool LocalsAreZeroed { get; }
    public IEnumerable`1<ILocalDefinition> LocalVariables { get; }
    public ushort MaxStack { get; }
    public IMethodDefinition MethodDefinition { get; }
    public IEnumerable`1<IOperation> Operations { get; }
    public IEnumerable`1<ITypeDefinition> PrivateHelperTypes { get; }
    public UInt32 Size { get; }
    internal SpecializedMethodBody(IMethodBody unspecializedBody, IMethodDefinition containingMethod, IInternFactory internFactory);
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IOperationExceptionInformation> get_OperationExceptionInformation();
    public sealed virtual bool get_LocalsAreZeroed();
    public sealed virtual IEnumerable`1<ILocalDefinition> get_LocalVariables();
    private void MapBody();
    private ITypeReference Specialize(ITypeReference unspecializedType, Dictionary`2<object, object> map);
    private object Specialize(object unspecialized, Dictionary`2<object, object> map);
    private object Specialize(IGenericMethodInstanceReference unspecialized, Dictionary`2<object, object> map);
    public sealed virtual ushort get_MaxStack();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual IEnumerable`1<IOperation> get_Operations();
    public sealed virtual IEnumerable`1<ITypeDefinition> get_PrivateHelperTypes();
    public sealed virtual UInt32 get_Size();
}
public class Microsoft.Cci.Immutable.SpecializedMethodDefinition : SpecializedTypeDefinitionMember`1<IMethodDefinition> {
    private WeakReference body;
    private IEnumerable`1<IGenericMethodParameter> genericParameters;
    private IEnumerable`1<IParameterDefinition> parameters;
    private IMethodDefinition partiallySpecializedVersion;
    private ITypeReference type;
    private UInt32 internedKey;
    public IMethodBody Body { get; }
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool IsConstructor { get; }
    public bool IsStaticConstructor { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition PartiallySpecializedVersion { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public IName ReturnValueName { get; }
    public ITypeReference Type { get; }
    private IMethodDefinition Microsoft.Cci.ISpecializedMethodDefinition.UnspecializedVersion { get; }
    public bool AcceptsExtraArguments { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsCil { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsGeneric { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public bool IsSynchronized { get; }
    public bool IsUnmanaged { get; }
    public bool IsVirtual { get; }
    public bool PreserveSignature { get; }
    public bool RequiresSecurityObject { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 InternedKey { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public bool ReturnValueIsModified { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    private IMethodReference Microsoft.Cci.ISpecializedMethodReference.UnspecializedVersion { get; }
    public SpecializedMethodDefinition(IMethodDefinition unspecializedVersion, IMethodDefinition partiallySpecializedVersion, ITypeDefinition containingTypeDefinition, GenericTypeInstance containingGenericTypeInstance);
    public sealed virtual IMethodBody get_Body();
    public sealed virtual CallingConvention get_CallingConvention();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsStaticConstructor();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual ushort get_ParameterCount();
    public IMethodDefinition get_PartiallySpecializedVersion();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual IName get_ReturnValueName();
    public virtual string ToString();
    public sealed virtual ITypeReference get_Type();
    private ITypeReference CopyAndSpecialize(ITypeReference partiallySpecializedTypeReference);
    private sealed virtual override IMethodDefinition Microsoft.Cci.ISpecializedMethodDefinition.get_UnspecializedVersion();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual bool get_RequiresSecurityObject();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    private sealed virtual override IMethodReference Microsoft.Cci.ISpecializedMethodReference.get_UnspecializedVersion();
}
public class Microsoft.Cci.Immutable.SpecializedMethodImplementation : object {
    private ITypeDefinition containingType;
    private IMethodReference implementedMethod;
    private IMethodReference implementingMethod;
    private IInternFactory internFactory;
    private IMethodImplementation unspecializedVersion;
    public ITypeDefinition ContainingType { get; }
    public IMethodReference ImplementedMethod { get; }
    public IMethodReference ImplementingMethod { get; }
    public IMethodImplementation UnspecializedVersion { get; }
    public SpecializedMethodImplementation(ITypeDefinition containingType, IMethodImplementation unspecializedVersion, IInternFactory internFactory);
    public sealed virtual ITypeDefinition get_ContainingType();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IMethodReference get_ImplementedMethod();
    public sealed virtual IMethodReference get_ImplementingMethod();
    public IMethodImplementation get_UnspecializedVersion();
}
internal class Microsoft.Cci.Immutable.SpecializedMethodParameterTypeInformation : object {
    private IParameterTypeInformation unspecializedVersion;
    private IInternFactory internFactory;
    private ISpecializedMethodReference containingMethod;
    private ITypeReference type;
    public ISignature ContainingSignature { get; }
    public ITypeReference Type { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ushort Index { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    internal SpecializedMethodParameterTypeInformation(ISpecializedMethodReference containingMethod, IParameterTypeInformation unspecializedVersion, IInternFactory internFactory);
    public sealed virtual ISignature get_ContainingSignature();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual ushort get_Index();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
}
public class Microsoft.Cci.Immutable.SpecializedMethodReference : object {
    private IInternFactory internFactory;
    private IMethodReference unspecializedVersion;
    private UInt32 internedKey;
    private IMethodDefinition resolvedMethod;
    private IEnumerable`1<IParameterTypeInformation> extraParameters;
    private IEnumerable`1<IParameterTypeInformation> parameters;
    private ITypeReference type;
    private ITypeReference containingType;
    public IMethodReference UnspecializedVersion { get; }
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public SpecializedMethodReference(ITypeReference containingType, IMethodReference unspecializedVersion, IInternFactory internFactory);
    public sealed virtual IMethodReference get_UnspecializedVersion();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public virtual string ToString();
}
public class Microsoft.Cci.Immutable.SpecializedNestedTypeDefinition : Scope`1<ITypeDefinitionMember> {
    private IEnumerable`1<ITypeReference> baseClasses;
    private IEnumerable`1<IGenericTypeParameter> genericParameters;
    private bool initialized;
    private GenericTypeInstance containingGenericTypeInstance;
    private IEnumerable`1<ITypeReference> interfaces;
    private IGenericTypeInstanceReference instanceType;
    internal INestedTypeDefinition partiallySpecializedVersion;
    private INestedTypeDefinition unspecializedVersion;
    private TypeMemberVisibility visibility;
    private ITypeDefinition containingTypeDefinition;
    private IInternFactory internFactory;
    private UInt32 internedKey;
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public bool DoesNotInheritGenericParameters { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public GenericTypeInstance ContainingGenericTypeInstance { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public ITypeReference UnderlyingType { get; }
    public INestedTypeDefinition UnspecializedVersion { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public ushort GenericParameterCount { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    private IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IContainer<Microsoft.Cci.ITypeDefinitionMember>.Members { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    private ITypeReference Microsoft.Cci.ITypeMemberReference.ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    private INestedTypeDefinition Microsoft.Cci.INestedTypeReference.ResolvedType { get; }
    public IInternFactory InternFactory { get; }
    public UInt32 InternedKey { get; }
    private INestedTypeReference Microsoft.Cci.ISpecializedNestedTypeReference.UnspecializedVersion { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public SpecializedNestedTypeDefinition(INestedTypeDefinition unspecializedVersion, INestedTypeDefinition partiallySpecializedVersion, ITypeDefinition containingTypeDefinition, GenericTypeInstance containingGenericTypeInstance, IInternFactory internFactory);
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual bool get_DoesNotInheritGenericParameters();
    internal static ITypeReference DeepCopyTypeReference(INestedTypeReference nestedType, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(INestedTypeReference nestedType, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(INestedTypeReference nestedType, IMethodReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(INestedTypeReference nestedType, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
    internal static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(INestedTypeReference nestedType, IGenericMethodInstanceReference genericMethodInstance, IInternFactory internFactory);
    internal static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(INestedTypeReference nestedType, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    protected virtual void InitializeIfNecessary();
    public GenericTypeInstance get_ContainingGenericTypeInstance();
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.SpecializedNestedTypeDefinition/<get_ExplicitImplementationOverrides>d__21")]
public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    private ITypeReference CopyAndSpecialize(ITypeReference partiallySpecializedTypeReference);
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual INestedTypeDefinition get_UnspecializedVersion();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public ITypeDefinitionMember SpecializeMember(ITypeDefinitionMember unspecializedMember, IInternFactory internFactory);
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public virtual string ToString();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IContainer<Microsoft.Cci.ITypeDefinitionMember>.get_Members();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    private sealed virtual override ITypeReference Microsoft.Cci.ITypeMemberReference.get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    private sealed virtual override INestedTypeDefinition Microsoft.Cci.INestedTypeReference.get_ResolvedType();
    public IInternFactory get_InternFactory();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override INestedTypeReference Microsoft.Cci.ISpecializedNestedTypeReference.get_UnspecializedVersion();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
public class Microsoft.Cci.Immutable.SpecializedNestedTypeReference : object {
    private IInternFactory internFactory;
    private INestedTypeReference unspecializedVersion;
    private INestedTypeDefinition resolvedType;
    private ITypeReference containingType;
    private UInt32 internedKey;
    public INestedTypeReference UnspecializedVersion { get; }
    public ushort GenericParameterCount { get; }
    public INestedTypeDefinition ResolvedType { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public SpecializedNestedTypeReference(INestedTypeReference unspecializedVersion, ITypeReference containingType, IInternFactory internFactory);
    public sealed virtual INestedTypeReference get_UnspecializedVersion();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual INestedTypeDefinition get_ResolvedType();
    public virtual string ToString();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
internal class Microsoft.Cci.Immutable.SpecializedOperation : object {
    private IOperation unspecializedOperation;
    private object specializedValue;
    public OperationCode OperationCode { get; }
    public UInt32 Offset { get; }
    public ILocation Location { get; }
    public object Value { get; }
    internal SpecializedOperation(IOperation unspecializedOperation, object specializedValue);
    public sealed virtual OperationCode get_OperationCode();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual ILocation get_Location();
    public sealed virtual object get_Value();
}
internal class Microsoft.Cci.Immutable.SpecializedOperationExceptionInformation : object {
    private IOperationExceptionInformation unspecializedVersion;
    private ITypeReference specialziedExceptionType;
    public HandlerKind HandlerKind { get; }
    public ITypeReference ExceptionType { get; }
    public UInt32 TryStartOffset { get; }
    public UInt32 TryEndOffset { get; }
    public UInt32 FilterDecisionStartOffset { get; }
    public UInt32 HandlerStartOffset { get; }
    public UInt32 HandlerEndOffset { get; }
    internal SpecializedOperationExceptionInformation(IOperationExceptionInformation unspecializedVersion, ITypeReference specialziedExceptionType);
    public sealed virtual HandlerKind get_HandlerKind();
    public sealed virtual ITypeReference get_ExceptionType();
    public sealed virtual UInt32 get_TryStartOffset();
    public sealed virtual UInt32 get_TryEndOffset();
    public sealed virtual UInt32 get_FilterDecisionStartOffset();
    public sealed virtual UInt32 get_HandlerStartOffset();
    public sealed virtual UInt32 get_HandlerEndOffset();
}
public class Microsoft.Cci.Immutable.SpecializedParameterDefinition : object {
    private ISignature containingSignature;
    private IParameterDefinition partiallySpecializedParameter;
    private ITypeReference paramArrayElementType;
    private ITypeReference type;
    private IInternFactory internFactory;
    public ISignature ContainingSignature { get; }
    public IParameterDefinition PartiallySpecializedParameter { get; }
    public ITypeReference ParamArrayElementType { get; }
    public ITypeReference Type { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public ushort Index { get; }
    public IInternFactory InternFactory { get; }
    public bool IsByReference { get; }
    public bool IsIn { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsModified { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public bool IsParameterArray { get; }
    private IMetadataConstant Microsoft.Cci.IParameterDefinition.DefaultValue { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    private IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.Constant { get; }
    protected internal SpecializedParameterDefinition(IParameterDefinition partiallySpecializedParameter, IGenericMethodInstanceReference containingSignature, IInternFactory internFactory);
    protected internal SpecializedParameterDefinition(IParameterDefinition partiallySpecializedParameter, SpecializedMethodDefinition containingSignature, IInternFactory internFactory);
    protected internal SpecializedParameterDefinition(IParameterDefinition partiallySpecializedParameter, SpecializedPropertyDefinition containingSignature, IInternFactory internFactory);
    public sealed virtual ISignature get_ContainingSignature();
    public IParameterDefinition get_PartiallySpecializedParameter();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual ITypeReference get_ParamArrayElementType();
    private ITypeReference CopyAndSpecialize(ITypeReference partiallySpecializedType);
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public IMetadataConstant get_DefaultValue();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual ushort get_Index();
    public IInternFactory get_InternFactory();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsIn();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsOptional();
    public sealed virtual bool get_IsOut();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual bool get_IsParameterArray();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IParameterDefinition.get_DefaultValue();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.get_Constant();
}
internal class Microsoft.Cci.Immutable.SpecializedParameterTypeInformation : object {
    private IGenericMethodInstanceReference containingSignature;
    private IParameterTypeInformation partiallySpecializedParameter;
    private ITypeReference type;
    private IInternFactory internFactory;
    public ISignature ContainingSignature { get; }
    public ITypeReference Type { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ushort Index { get; }
    public IInternFactory InternFactory { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    internal SpecializedParameterTypeInformation(IParameterTypeInformation partiallySpecializedParameter, IGenericMethodInstanceReference containingSignature, IInternFactory internFactory);
    public sealed virtual ISignature get_ContainingSignature();
    public virtual void Dispatch(IMetadataVisitor visitor);
    private ITypeReference SpecializeIfConstructed(ITypeReference partiallySpecializedType);
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual ushort get_Index();
    public IInternFactory get_InternFactory();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
}
public class Microsoft.Cci.Immutable.SpecializedPropertyDefinition : SpecializedTypeDefinitionMember`1<IPropertyDefinition> {
    private IEnumerable`1<IMethodReference> accessors;
    private IMethodReference getter;
    private IEnumerable`1<IParameterDefinition> parameters;
    private IPropertyDefinition partiallySpecializedVersion;
    private IMethodReference setter;
    private ITypeReference type;
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMethodReference Getter { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public IMethodReference Setter { get; }
    public ITypeReference Type { get; }
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    private IMetadataConstant Microsoft.Cci.IPropertyDefinition.DefaultValue { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public CallingConvention CallingConvention { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    private IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.Constant { get; }
    public SpecializedPropertyDefinition(IPropertyDefinition unspecializedVersion, IPropertyDefinition partiallySpecializedVersion, ITypeDefinition containingTypeDefinition, GenericTypeInstance containingGenericTypeInstance);
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IMethodReference get_Getter();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual IMethodReference get_Setter();
    public sealed virtual ITypeReference get_Type();
    private ITypeReference CopyAndSpecialize(ITypeReference partiallySpecializedTypeReference);
    public IMetadataConstant get_DefaultValue();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IPropertyDefinition.get_DefaultValue();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual CallingConvention get_CallingConvention();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.get_Constant();
}
public abstract class Microsoft.Cci.Immutable.SpecializedTypeDefinitionMember`1 : object {
    private GenericTypeInstance containingGenericTypeInstance;
    private MemberType unspecializedVersion;
    private ITypeDefinition containingTypeDefinition;
    public GenericTypeInstance ContainingGenericTypeInstance { get; }
    public TypeMemberVisibility Visibility { get; }
    public MemberType UnspecializedVersion { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public ITypeDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    protected SpecializedTypeDefinitionMember`1(MemberType unspecializedVersion, ITypeDefinition containingTypeDefinition, GenericTypeInstance containingGenericTypeInstance);
    public GenericTypeInstance get_ContainingGenericTypeInstance();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual MemberType get_UnspecializedVersion();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
}
public abstract class Microsoft.Cci.Immutable.SystemDefinedStructuralType : object {
    private IInternFactory internFactory;
    private UInt32 internedKey;
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsValueType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsModified { get; }
    public ITypeDefinition ResolvedType { get; }
    public IInternFactory InternFactory { get; }
    public UInt32 InternedKey { get; }
    protected SystemDefinedStructuralType(IInternFactory internFactory);
    public sealed virtual ushort get_Alignment();
    public virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public abstract virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public virtual string ToString();
    public virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public virtual bool Contains(ITypeDefinitionMember member);
    public virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    private sealed virtual override IEnumerable`1<ITypeDefinitionMember> Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>.GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public virtual bool get_IsModified();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public IInternFactory get_InternFactory();
    public sealed virtual UInt32 get_InternedKey();
}
internal static class Microsoft.Cci.Immutable.TypeDefinition : object {
    internal static ITypeReference DeepCopyTypeReference(ITypeReference partiallySpecializedTypeReference, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(ITypeReference partiallySpecializedTypeReference, IGenericMethodInstanceReference containingMethodInstance, IInternFactory internFactory);
    internal static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(ITypeReference partiallySpecializedTypeReference, IGenericTypeInstanceReference containingTypeInstance, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(ITypeReference partiallySpecializedTypeReference, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
}
public class Microsoft.Cci.Immutable.UnitSet : object {
    private IEnumerable`1<IUnit> units;
    private IRootUnitSetNamespace unitSetNamespaceRoot;
    public IEnumerable`1<IUnit> Units { get; }
    public IUnitSetNamespace UnitSetNamespaceRoot { get; }
    private INamespaceDefinition Microsoft.Cci.INamespaceRootOwner.NamespaceRoot { get; }
    public UnitSet(IEnumerable`1<IUnit> units);
    public sealed virtual bool Contains(IUnit unit);
    public sealed virtual IEnumerable`1<IUnit> get_Units();
    public sealed virtual IUnitSetNamespace get_UnitSetNamespaceRoot();
    private sealed virtual override INamespaceDefinition Microsoft.Cci.INamespaceRootOwner.get_NamespaceRoot();
}
public abstract class Microsoft.Cci.Immutable.UnitSetNamespace : AggregatedNamespace`2<INamespaceDefinition, INamespaceMember> {
    private Dictionary`2<int, NestedUnitSetNamespace> nestedUnitNamespaceToNestedUnitSetNamespaceMap;
    private List`1<IUnitNamespace> unitNamespaces;
    private IUnitSet unitSet;
    public IEnumerable`1<ILocation> Locations { get; }
    public INamespaceRootOwner RootOwner { get; }
    protected List`1<IUnitNamespace> UnitNamespaces { get; }
    public IUnitSet UnitSet { get; }
    protected UnitSetNamespace(IName name, UnitSet unitSet);
    protected UnitSetNamespace(IName name, IUnitSet unitSet, List`1<IUnitNamespace> nestedUnitNamespaces);
    [IteratorStateMachineAttribute("Microsoft.Cci.Immutable.UnitSetNamespace/<get_Locations>d__3")]
public virtual IEnumerable`1<ILocation> get_Locations();
    protected virtual INamespaceMember GetAggregatedMember(INamespaceMember member);
    public virtual INamespaceRootOwner get_RootOwner();
    protected List`1<IUnitNamespace> get_UnitNamespaces();
    public sealed virtual IUnitSet get_UnitSet();
}
public class Microsoft.Cci.Immutable.Vector : ArrayType {
    protected Vector(ITypeReference elementType, IInternFactory internFactory);
    protected virtual IEnumerable`1<ITypeReference> GetInterfaceList();
    public static ITypeReference DeepCopyTypeReference(IArrayTypeReference array, SpecializedNestedTypeDefinition targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IArrayTypeReference array, ITypeReference targetContainer, IInternFactory internFactory);
    internal static ITypeReference SpecializeTypeReference(IArrayTypeReference array, IMethodReference targetContainer, IInternFactory internFactory);
    public static Vector GetVector(ITypeReference elementType, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IArrayTypeReference array, IGenericMethodInstanceReference method, IInternFactory internFactory);
    public static ITypeReference SpecializeIfConstructedFromApplicableTypeParameter(IArrayTypeReference array, IGenericTypeInstanceReference type, IInternFactory internFactory);
    internal static ITypeReference DeepCopyTypeReferenceWRTSpecializedMethod(IArrayTypeReference array, ISpecializedMethodReference specializedMethodReference, IInternFactory internFactory);
}
public interface Microsoft.Cci.IModifiedTypeReference {
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ITypeReference UnmodifiedType { get; }
    public abstract virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public abstract virtual ITypeReference get_UnmodifiedType();
}
internal abstract class Microsoft.Cci.IModifiedTypeReferenceContract : object {
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ITypeReference UnmodifiedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual ITypeReference get_UnmodifiedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IModule {
    public IEnumerable`1<IAssemblyReference> AssemblyReferences { get; }
    public ulong BaseAddress { get; }
    public IAssembly ContainingAssembly { get; }
    public string DebugInformationLocation { get; }
    public string DebugInformationVersion { get; }
    public ushort DllCharacteristics { get; }
    public IMethodReference EntryPoint { get; }
    public UInt32 FileAlignment { get; }
    public bool ILOnly { get; }
    public bool StrongNameSigned { get; }
    public ModuleKind Kind { get; }
    public byte LinkerMajorVersion { get; }
    public byte LinkerMinorVersion { get; }
    public Machine Machine { get; }
    public byte MetadataFormatMajorVersion { get; }
    public byte MetadataFormatMinorVersion { get; }
    public IEnumerable`1<ICustomAttribute> ModuleAttributes { get; }
    public IName ModuleName { get; }
    public IEnumerable`1<IModuleReference> ModuleReferences { get; }
    public Guid PersistentIdentifier { get; }
    public bool Prefers32bits { get; }
    public bool RequiresAmdInstructionSet { get; }
    public bool RequiresStartupStub { get; }
    public bool Requires32bits { get; }
    public bool Requires64bits { get; }
    public ulong SizeOfHeapCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfStackReserve { get; }
    public ushort SubsystemMajorVersion { get; }
    public ushort SubsystemMinorVersion { get; }
    public string TargetRuntimeVersion { get; }
    public bool TrackDebugData { get; }
    public bool UsePublicKeyTokensForAssemblyReferences { get; }
    public IEnumerable`1<IWin32Resource> Win32Resources { get; }
    public abstract virtual IEnumerable`1<IAssemblyReference> get_AssemblyReferences();
    public abstract virtual ulong get_BaseAddress();
    public abstract virtual IAssembly get_ContainingAssembly();
    public abstract virtual string get_DebugInformationLocation();
    public abstract virtual string get_DebugInformationVersion();
    public abstract virtual ushort get_DllCharacteristics();
    public abstract virtual IMethodReference get_EntryPoint();
    public abstract virtual UInt32 get_FileAlignment();
    public abstract virtual IEnumerable`1<string> GetStrings();
    public abstract virtual IEnumerable`1<INamedTypeDefinition> GetAllTypes();
    public abstract virtual IEnumerable`1<IGenericMethodInstanceReference> GetGenericMethodInstances();
    public abstract virtual IEnumerable`1<ITypeReference> GetStructuralTypeInstances();
    public abstract virtual IEnumerable`1<ITypeMemberReference> GetStructuralTypeInstanceMembers();
    public abstract virtual IEnumerable`1<ITypeReference> GetTypeReferences();
    public abstract virtual IEnumerable`1<ITypeMemberReference> GetTypeMemberReferences();
    public abstract virtual bool get_ILOnly();
    public abstract virtual bool get_StrongNameSigned();
    public abstract virtual ModuleKind get_Kind();
    public abstract virtual byte get_LinkerMajorVersion();
    public abstract virtual byte get_LinkerMinorVersion();
    public abstract virtual Machine get_Machine();
    public abstract virtual byte get_MetadataFormatMajorVersion();
    public abstract virtual byte get_MetadataFormatMinorVersion();
    public abstract virtual IEnumerable`1<ICustomAttribute> get_ModuleAttributes();
    public abstract virtual IName get_ModuleName();
    public abstract virtual IEnumerable`1<IModuleReference> get_ModuleReferences();
    public abstract virtual Guid get_PersistentIdentifier();
    public abstract virtual bool get_Prefers32bits();
    public abstract virtual bool get_RequiresAmdInstructionSet();
    public abstract virtual bool get_RequiresStartupStub();
    public abstract virtual bool get_Requires32bits();
    public abstract virtual bool get_Requires64bits();
    public abstract virtual ulong get_SizeOfHeapCommit();
    public abstract virtual ulong get_SizeOfHeapReserve();
    public abstract virtual ulong get_SizeOfStackCommit();
    public abstract virtual ulong get_SizeOfStackReserve();
    public abstract virtual ushort get_SubsystemMajorVersion();
    public abstract virtual ushort get_SubsystemMinorVersion();
    public abstract virtual string get_TargetRuntimeVersion();
    public abstract virtual bool get_TrackDebugData();
    public abstract virtual bool get_UsePublicKeyTokensForAssemblyReferences();
    public abstract virtual IEnumerable`1<IWin32Resource> get_Win32Resources();
}
internal abstract class Microsoft.Cci.IModuleContract : object {
    public IEnumerable`1<IAssemblyReference> AssemblyReferences { get; }
    public ulong BaseAddress { get; }
    public IAssembly ContainingAssembly { get; }
    public string DebugInformationLocation { get; }
    public string DebugInformationVersion { get; }
    public ushort DllCharacteristics { get; }
    public IMethodReference EntryPoint { get; }
    public UInt32 FileAlignment { get; }
    public bool ILOnly { get; }
    public bool StrongNameSigned { get; }
    public bool Prefers32bits { get; }
    public ModuleKind Kind { get; }
    public byte LinkerMajorVersion { get; }
    public byte LinkerMinorVersion { get; }
    public byte MetadataFormatMajorVersion { get; }
    public byte MetadataFormatMinorVersion { get; }
    public IEnumerable`1<ICustomAttribute> ModuleAttributes { get; }
    public IName ModuleName { get; }
    public IEnumerable`1<IModuleReference> ModuleReferences { get; }
    public Guid PersistentIdentifier { get; }
    public Machine Machine { get; }
    public bool RequiresAmdInstructionSet { get; }
    public bool RequiresStartupStub { get; }
    public bool Requires32bits { get; }
    public bool Requires64bits { get; }
    public ulong SizeOfHeapCommit { get; }
    public ulong SizeOfHeapReserve { get; }
    public ulong SizeOfStackCommit { get; }
    public ulong SizeOfStackReserve { get; }
    public ushort SubsystemMajorVersion { get; }
    public ushort SubsystemMinorVersion { get; }
    public string TargetRuntimeVersion { get; }
    public bool TrackDebugData { get; }
    public bool UsePublicKeyTokensForAssemblyReferences { get; }
    public IEnumerable`1<IWin32Resource> Win32Resources { get; }
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public IPlatformType PlatformType { get; }
    public string Location { get; }
    public IEnumerable`1<IPESection> UninterpretedSections { get; }
    public IRootUnitNamespace UnitNamespaceRoot { get; }
    public IEnumerable`1<IUnitReference> UnitReferences { get; }
    public INamespaceDefinition NamespaceRoot { get; }
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public sealed virtual IEnumerable`1<IAssemblyReference> get_AssemblyReferences();
    public sealed virtual ulong get_BaseAddress();
    public sealed virtual IAssembly get_ContainingAssembly();
    public sealed virtual string get_DebugInformationLocation();
    public sealed virtual string get_DebugInformationVersion();
    public sealed virtual ushort get_DllCharacteristics();
    public sealed virtual IMethodReference get_EntryPoint();
    public sealed virtual UInt32 get_FileAlignment();
    public sealed virtual IEnumerable`1<string> GetStrings();
    public sealed virtual IEnumerable`1<INamedTypeDefinition> GetAllTypes();
    public sealed virtual IEnumerable`1<IGenericMethodInstanceReference> GetGenericMethodInstances();
    public sealed virtual IEnumerable`1<ITypeReference> GetStructuralTypeInstances();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetStructuralTypeInstanceMembers();
    public sealed virtual IEnumerable`1<ITypeReference> GetTypeReferences();
    public sealed virtual IEnumerable`1<ITypeMemberReference> GetTypeMemberReferences();
    public sealed virtual bool get_ILOnly();
    public sealed virtual bool get_StrongNameSigned();
    public sealed virtual bool get_Prefers32bits();
    public sealed virtual ModuleKind get_Kind();
    public sealed virtual byte get_LinkerMajorVersion();
    public sealed virtual byte get_LinkerMinorVersion();
    public sealed virtual byte get_MetadataFormatMajorVersion();
    public sealed virtual byte get_MetadataFormatMinorVersion();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ModuleAttributes();
    public sealed virtual IName get_ModuleName();
    public sealed virtual IEnumerable`1<IModuleReference> get_ModuleReferences();
    public sealed virtual Guid get_PersistentIdentifier();
    public sealed virtual Machine get_Machine();
    public sealed virtual bool get_RequiresAmdInstructionSet();
    public sealed virtual bool get_RequiresStartupStub();
    public sealed virtual bool get_Requires32bits();
    public sealed virtual bool get_Requires64bits();
    public sealed virtual ulong get_SizeOfHeapCommit();
    public sealed virtual ulong get_SizeOfHeapReserve();
    public sealed virtual ulong get_SizeOfStackCommit();
    public sealed virtual ulong get_SizeOfStackReserve();
    public sealed virtual ushort get_SubsystemMajorVersion();
    public sealed virtual ushort get_SubsystemMinorVersion();
    public sealed virtual string get_TargetRuntimeVersion();
    public sealed virtual bool get_TrackDebugData();
    public sealed virtual bool get_UsePublicKeyTokensForAssemblyReferences();
    public sealed virtual IEnumerable`1<IWin32Resource> get_Win32Resources();
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual string get_Location();
    public sealed virtual IEnumerable`1<IPESection> get_UninterpretedSections();
    public sealed virtual IRootUnitNamespace get_UnitNamespaceRoot();
    public sealed virtual IEnumerable`1<IUnitReference> get_UnitReferences();
    public sealed virtual INamespaceDefinition get_NamespaceRoot();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
}
public interface Microsoft.Cci.IModuleReference {
    public IAssemblyReference ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public abstract virtual IAssemblyReference get_ContainingAssembly();
    public abstract virtual IModule get_ResolvedModule();
    public abstract virtual ModuleIdentity get_ModuleIdentity();
}
internal abstract class Microsoft.Cci.IModuleReferenceContract : object {
    public IAssemblyReference ContainingAssembly { get; }
    public IModule ResolvedModule { get; }
    public ModuleIdentity ModuleIdentity { get; }
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IAssemblyReference get_ContainingAssembly();
    public sealed virtual IModule get_ResolvedModule();
    public sealed virtual ModuleIdentity get_ModuleIdentity();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.IName {
    public int UniqueKey { get; }
    public int UniqueKeyIgnoringCase { get; }
    public string Value { get; }
    public abstract virtual int get_UniqueKey();
    public abstract virtual int get_UniqueKeyIgnoringCase();
    public abstract virtual string get_Value();
}
internal abstract class Microsoft.Cci.INameContract : object {
    public int UniqueKey { get; }
    public int UniqueKeyIgnoringCase { get; }
    public string Value { get; }
    public sealed virtual int get_UniqueKey();
    public sealed virtual int get_UniqueKeyIgnoringCase();
    public sealed virtual string get_Value();
}
public interface Microsoft.Cci.INamedEntity {
    public IName Name { get; }
    public abstract virtual IName get_Name();
}
internal abstract class Microsoft.Cci.INamedEntityContract : object {
    public IName Name { get; }
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.INamedTypeDefinition {
    public ushort GenericParameterCount { get; }
    public abstract virtual ushort get_GenericParameterCount();
}
internal abstract class Microsoft.Cci.INamedTypeDefinitionContract : object {
    private ushort Microsoft.Cci.INamedTypeDefinition.GenericParameterCount { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    private ushort Microsoft.Cci.ITypeDefinition.GenericParameterCount { get; }
    private ushort Microsoft.Cci.INamedTypeReference.GenericParameterCount { get; }
    private sealed virtual override ushort Microsoft.Cci.INamedTypeDefinition.get_GenericParameterCount();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IName get_Name();
    private sealed virtual override ushort Microsoft.Cci.ITypeDefinition.get_GenericParameterCount();
    private sealed virtual override ushort Microsoft.Cci.INamedTypeReference.get_GenericParameterCount();
}
public interface Microsoft.Cci.INamedTypeReference {
    public ushort GenericParameterCount { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual bool get_MangleName();
    public abstract virtual INamedTypeDefinition get_ResolvedType();
}
internal abstract class Microsoft.Cci.INamedTypeReferenceContract : object {
    public ushort GenericParameterCount { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.INamespaceAliasForType {
    public bool IsPublic { get; }
    public abstract virtual bool get_IsPublic();
}
public interface Microsoft.Cci.INamespaceDefinition {
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public abstract virtual INamespaceRootOwner get_RootOwner();
    public abstract virtual IEnumerable`1<INamespaceMember> get_Members();
}
internal abstract class Microsoft.Cci.INamespaceDefinitionContract : object {
    public INamespaceRootOwner RootOwner { get; }
    private IEnumerable`1<INamespaceMember> Microsoft.Cci.INamespaceDefinition.Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public sealed virtual INamespaceRootOwner get_RootOwner();
    private sealed virtual override IEnumerable`1<INamespaceMember> Microsoft.Cci.INamespaceDefinition.get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
}
public interface Microsoft.Cci.INamespaceMember {
    public INamespaceDefinition ContainingNamespace { get; }
    public abstract virtual INamespaceDefinition get_ContainingNamespace();
}
internal abstract class Microsoft.Cci.INamespaceMemberContract : object {
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IName Name { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.INamespaceRootOwner {
    public INamespaceDefinition NamespaceRoot { get; }
    public abstract virtual INamespaceDefinition get_NamespaceRoot();
}
internal abstract class Microsoft.Cci.INamespaceRootOwnerContract : object {
    public INamespaceDefinition NamespaceRoot { get; }
    public sealed virtual INamespaceDefinition get_NamespaceRoot();
}
public interface Microsoft.Cci.INamespaceTypeDefinition {
    public ushort GenericParameterCount { get; }
    public IUnitNamespace ContainingUnitNamespace { get; }
    public bool IsPublic { get; }
    public bool IsForeignObject { get; }
    public abstract virtual IEnumerable`1<ICustomAttribute> AttributesFor(ITypeReference implementedInterface);
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual IUnitNamespace get_ContainingUnitNamespace();
    public abstract virtual bool get_IsPublic();
    public abstract virtual bool get_IsForeignObject();
}
internal abstract class Microsoft.Cci.INamespaceTypeDefinitionContract : object {
    public ushort GenericParameterCount { get; }
    public IUnitNamespace ContainingUnitNamespace { get; }
    public bool IsPublic { get; }
    public bool IsForeignObject { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    private IUnitNamespaceReference Microsoft.Cci.INamespaceTypeReference.ContainingUnitNamespace { get; }
    private INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.ResolvedType { get; }
    public sealed virtual IEnumerable`1<ICustomAttribute> AttributesFor(ITypeReference implementedInterface);
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IUnitNamespace get_ContainingUnitNamespace();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsForeignObject();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IName get_Name();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    private sealed virtual override IUnitNamespaceReference Microsoft.Cci.INamespaceTypeReference.get_ContainingUnitNamespace();
    private sealed virtual override INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.get_ResolvedType();
}
public interface Microsoft.Cci.INamespaceTypeReference {
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public ushort GenericParameterCount { get; }
    public INamespaceTypeDefinition ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    public abstract virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual INamespaceTypeDefinition get_ResolvedType();
    public abstract virtual bool get_KeepDistinctFromDefinition();
}
internal abstract class Microsoft.Cci.INamespaceTypeReferenceContract : object {
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public ushort GenericParameterCount { get; }
    public INamespaceTypeDefinition ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual INamespaceTypeDefinition get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.INameTable {
    public IName EmptyName { get; }
    public IName Address { get; }
    public IName AllowMultiple { get; }
    public IName BeginInvoke { get; }
    public IName BoolOpBool { get; }
    public IName Combine { get; }
    public IName Concat { get; }
    public IName DecimalOpDecimal { get; }
    public IName DelegateOpDelegate { get; }
    public IName EndInvoke { get; }
    public IName EnumOpEnum { get; }
    public IName EnumOpNum { get; }
    public IName Equals { get; }
    public IName Float32OpFloat32 { get; }
    public IName Float64OpFloat64 { get; }
    public IName Get { get; }
    public IName global { get; }
    public IName HasValue { get; }
    public IName Inherited { get; }
    public IName Invoke { get; }
    public IName Int16OpInt16 { get; }
    public IName Int32OpInt32 { get; }
    public IName Int32OpUInt32 { get; }
    public IName Int64OpInt32 { get; }
    public IName Int64OpUInt32 { get; }
    public IName Int64OpUInt64 { get; }
    public IName Int64OpInt64 { get; }
    public IName Int8OpInt8 { get; }
    public IName NullCoalescing { get; }
    public IName NumOpEnum { get; }
    public IName ObjectOpObject { get; }
    public IName ObjectOpString { get; }
    public IName OpAddition { get; }
    public IName OpBitwiseAnd { get; }
    public IName OpBitwiseOr { get; }
    public IName OpEnum { get; }
    public IName OpEquality { get; }
    public IName OpExplicit { get; }
    public IName OpImplicit { get; }
    public IName OpInequality { get; }
    public IName OpInt8 { get; }
    public IName OpInt16 { get; }
    public IName OpInt32 { get; }
    public IName OpInt64 { get; }
    public IName OpComma { get; }
    public IName OpConcatentation { get; }
    public IName OpDivision { get; }
    public IName OpExclusiveOr { get; }
    public IName OpExponentiation { get; }
    public IName OpFalse { get; }
    public IName OpFloat32 { get; }
    public IName OpFloat64 { get; }
    public IName OpGreaterThan { get; }
    public IName OpGreaterThanOrEqual { get; }
    public IName OpIntegerDivision { get; }
    public IName OpLeftShift { get; }
    public IName OpLessThan { get; }
    public IName OpLessThanOrEqual { get; }
    public IName OpLike { get; }
    public IName OpLogicalNot { get; }
    public IName OpLogicalOr { get; }
    public IName OpModulus { get; }
    public IName OpMultiply { get; }
    public IName OpOnesComplement { get; }
    public IName OpBoolean { get; }
    public IName OpChar { get; }
    public IName OpDecimal { get; }
    public IName OpDecrement { get; }
    public IName OpIncrement { get; }
    public IName OpRightShift { get; }
    public IName OpSubtraction { get; }
    public IName OpTrue { get; }
    public IName OpUInt8 { get; }
    public IName OpUInt16 { get; }
    public IName OpUInt32 { get; }
    public IName OpUInt64 { get; }
    public IName OpUnaryNegation { get; }
    public IName OpUnaryPlus { get; }
    public IName StringOpString { get; }
    public IName StringOpObject { get; }
    public IName UIntPtrOpUIntPtr { get; }
    public IName UInt32OpInt32 { get; }
    public IName UInt32OpUInt32 { get; }
    public IName UInt64OpInt32 { get; }
    public IName UInt64OpUInt32 { get; }
    public IName UInt64OpUInt64 { get; }
    public IName value { get; }
    public IName System { get; }
    public IName Void { get; }
    public IName VoidPtrOpVoidPtr { get; }
    public IName Boolean { get; }
    public IName Cctor { get; }
    public IName Char { get; }
    public IName Ctor { get; }
    public IName Byte { get; }
    public IName SByte { get; }
    public IName Int16 { get; }
    public IName UInt16 { get; }
    public IName Int32 { get; }
    public IName UInt32 { get; }
    public IName Int64 { get; }
    public IName UInt64 { get; }
    public IName String { get; }
    public IName IntPtr { get; }
    public IName UIntPtr { get; }
    public IName Object { get; }
    public IName Remove { get; }
    public IName Result { get; }
    public IName Set { get; }
    public IName Single { get; }
    public IName Double { get; }
    public IName TypedReference { get; }
    public IName Enum { get; }
    public IName Length { get; }
    public IName LongLength { get; }
    public IName MulticastDelegate { get; }
    public IName ValueType { get; }
    public IName Type { get; }
    public IName Array { get; }
    public IName Attribute { get; }
    public IName AttributeUsageAttribute { get; }
    public IName DateTime { get; }
    public IName DebuggerHiddenAttribute { get; }
    public IName Decimal { get; }
    public IName Delegate { get; }
    public IName Diagnostics { get; }
    public IName DBNull { get; }
    public IName Nullable { get; }
    public abstract virtual IName get_EmptyName();
    public abstract virtual IName GetNameFor(string name);
    public abstract virtual IName get_Address();
    public abstract virtual IName get_AllowMultiple();
    public abstract virtual IName get_BeginInvoke();
    public abstract virtual IName get_BoolOpBool();
    public abstract virtual IName get_Combine();
    public abstract virtual IName get_Concat();
    public abstract virtual IName get_DecimalOpDecimal();
    public abstract virtual IName get_DelegateOpDelegate();
    public abstract virtual IName get_EndInvoke();
    public abstract virtual IName get_EnumOpEnum();
    public abstract virtual IName get_EnumOpNum();
    public abstract virtual IName get_Equals();
    public abstract virtual IName get_Float32OpFloat32();
    public abstract virtual IName get_Float64OpFloat64();
    public abstract virtual IName get_Get();
    public abstract virtual IName get_global();
    public abstract virtual IName get_HasValue();
    public abstract virtual IName get_Inherited();
    public abstract virtual IName get_Invoke();
    public abstract virtual IName get_Int16OpInt16();
    public abstract virtual IName get_Int32OpInt32();
    public abstract virtual IName get_Int32OpUInt32();
    public abstract virtual IName get_Int64OpInt32();
    public abstract virtual IName get_Int64OpUInt32();
    public abstract virtual IName get_Int64OpUInt64();
    public abstract virtual IName get_Int64OpInt64();
    public abstract virtual IName get_Int8OpInt8();
    public abstract virtual IName get_NullCoalescing();
    public abstract virtual IName get_NumOpEnum();
    public abstract virtual IName get_ObjectOpObject();
    public abstract virtual IName get_ObjectOpString();
    public abstract virtual IName get_OpAddition();
    public abstract virtual IName get_OpBitwiseAnd();
    public abstract virtual IName get_OpBitwiseOr();
    public abstract virtual IName get_OpEnum();
    public abstract virtual IName get_OpEquality();
    public abstract virtual IName get_OpExplicit();
    public abstract virtual IName get_OpImplicit();
    public abstract virtual IName get_OpInequality();
    public abstract virtual IName get_OpInt8();
    public abstract virtual IName get_OpInt16();
    public abstract virtual IName get_OpInt32();
    public abstract virtual IName get_OpInt64();
    public abstract virtual IName get_OpComma();
    public abstract virtual IName get_OpConcatentation();
    public abstract virtual IName get_OpDivision();
    public abstract virtual IName get_OpExclusiveOr();
    public abstract virtual IName get_OpExponentiation();
    public abstract virtual IName get_OpFalse();
    public abstract virtual IName get_OpFloat32();
    public abstract virtual IName get_OpFloat64();
    public abstract virtual IName get_OpGreaterThan();
    public abstract virtual IName get_OpGreaterThanOrEqual();
    public abstract virtual IName get_OpIntegerDivision();
    public abstract virtual IName get_OpLeftShift();
    public abstract virtual IName get_OpLessThan();
    public abstract virtual IName get_OpLessThanOrEqual();
    public abstract virtual IName get_OpLike();
    public abstract virtual IName get_OpLogicalNot();
    public abstract virtual IName get_OpLogicalOr();
    public abstract virtual IName get_OpModulus();
    public abstract virtual IName get_OpMultiply();
    public abstract virtual IName get_OpOnesComplement();
    public abstract virtual IName get_OpBoolean();
    public abstract virtual IName get_OpChar();
    public abstract virtual IName get_OpDecimal();
    public abstract virtual IName get_OpDecrement();
    public abstract virtual IName get_OpIncrement();
    public abstract virtual IName get_OpRightShift();
    public abstract virtual IName get_OpSubtraction();
    public abstract virtual IName get_OpTrue();
    public abstract virtual IName get_OpUInt8();
    public abstract virtual IName get_OpUInt16();
    public abstract virtual IName get_OpUInt32();
    public abstract virtual IName get_OpUInt64();
    public abstract virtual IName get_OpUnaryNegation();
    public abstract virtual IName get_OpUnaryPlus();
    public abstract virtual IName get_StringOpString();
    public abstract virtual IName get_StringOpObject();
    public abstract virtual IName get_UIntPtrOpUIntPtr();
    public abstract virtual IName get_UInt32OpInt32();
    public abstract virtual IName get_UInt32OpUInt32();
    public abstract virtual IName get_UInt64OpInt32();
    public abstract virtual IName get_UInt64OpUInt32();
    public abstract virtual IName get_UInt64OpUInt64();
    public abstract virtual IName get_value();
    public abstract virtual IName get_System();
    public abstract virtual IName get_Void();
    public abstract virtual IName get_VoidPtrOpVoidPtr();
    public abstract virtual IName get_Boolean();
    public abstract virtual IName get_Cctor();
    public abstract virtual IName get_Char();
    public abstract virtual IName get_Ctor();
    public abstract virtual IName get_Byte();
    public abstract virtual IName get_SByte();
    public abstract virtual IName get_Int16();
    public abstract virtual IName get_UInt16();
    public abstract virtual IName get_Int32();
    public abstract virtual IName get_UInt32();
    public abstract virtual IName get_Int64();
    public abstract virtual IName get_UInt64();
    public abstract virtual IName get_String();
    public abstract virtual IName get_IntPtr();
    public abstract virtual IName get_UIntPtr();
    public abstract virtual IName get_Object();
    public abstract virtual IName get_Remove();
    public abstract virtual IName get_Result();
    public abstract virtual IName get_Set();
    public abstract virtual IName get_Single();
    public abstract virtual IName get_Double();
    public abstract virtual IName get_TypedReference();
    public abstract virtual IName get_Enum();
    public abstract virtual IName get_Length();
    public abstract virtual IName get_LongLength();
    public abstract virtual IName get_MulticastDelegate();
    public abstract virtual IName get_ValueType();
    public abstract virtual IName get_Type();
    public abstract virtual IName get_Array();
    public abstract virtual IName get_Attribute();
    public abstract virtual IName get_AttributeUsageAttribute();
    public abstract virtual IName get_DateTime();
    public abstract virtual IName get_DebuggerHiddenAttribute();
    public abstract virtual IName get_Decimal();
    public abstract virtual IName get_Delegate();
    public abstract virtual IName get_Diagnostics();
    public abstract virtual IName get_DBNull();
    public abstract virtual IName get_Nullable();
}
internal abstract class Microsoft.Cci.INameTableContract : object {
    public IName EmptyName { get; }
    public IName Address { get; }
    public IName AllowMultiple { get; }
    public IName BeginInvoke { get; }
    public IName BoolOpBool { get; }
    public IName Combine { get; }
    public IName Concat { get; }
    public IName DecimalOpDecimal { get; }
    public IName DelegateOpDelegate { get; }
    public IName EndInvoke { get; }
    public IName EnumOpEnum { get; }
    public IName EnumOpNum { get; }
    public IName Equals { get; }
    public IName Float32OpFloat32 { get; }
    public IName Float64OpFloat64 { get; }
    public IName Get { get; }
    public IName global { get; }
    public IName HasValue { get; }
    public IName Inherited { get; }
    public IName Invoke { get; }
    public IName Int16OpInt16 { get; }
    public IName Int32OpInt32 { get; }
    public IName Int32OpUInt32 { get; }
    public IName Int64OpInt32 { get; }
    public IName Int64OpUInt32 { get; }
    public IName Int64OpUInt64 { get; }
    public IName Int64OpInt64 { get; }
    public IName Int8OpInt8 { get; }
    public IName NullCoalescing { get; }
    public IName NumOpEnum { get; }
    public IName ObjectOpObject { get; }
    public IName ObjectOpString { get; }
    public IName OpAddition { get; }
    public IName OpBitwiseAnd { get; }
    public IName OpBitwiseOr { get; }
    public IName OpEnum { get; }
    public IName OpEquality { get; }
    public IName OpExplicit { get; }
    public IName OpImplicit { get; }
    public IName OpInequality { get; }
    public IName OpInt8 { get; }
    public IName OpInt16 { get; }
    public IName OpInt32 { get; }
    public IName OpInt64 { get; }
    public IName OpComma { get; }
    public IName OpConcatentation { get; }
    public IName OpDivision { get; }
    public IName OpExclusiveOr { get; }
    public IName OpExponentiation { get; }
    public IName OpFalse { get; }
    public IName OpFloat32 { get; }
    public IName OpFloat64 { get; }
    public IName OpGreaterThan { get; }
    public IName OpGreaterThanOrEqual { get; }
    public IName OpIntegerDivision { get; }
    public IName OpLeftShift { get; }
    public IName OpLessThan { get; }
    public IName OpLessThanOrEqual { get; }
    public IName OpLike { get; }
    public IName OpLogicalNot { get; }
    public IName OpLogicalOr { get; }
    public IName OpModulus { get; }
    public IName OpMultiply { get; }
    public IName OpOnesComplement { get; }
    public IName OpBoolean { get; }
    public IName OpChar { get; }
    public IName OpDecimal { get; }
    public IName OpDecrement { get; }
    public IName OpIncrement { get; }
    public IName OpRightShift { get; }
    public IName OpSubtraction { get; }
    public IName OpTrue { get; }
    public IName OpUInt8 { get; }
    public IName OpUInt16 { get; }
    public IName OpUInt32 { get; }
    public IName OpUInt64 { get; }
    public IName OpUnaryNegation { get; }
    public IName OpUnaryPlus { get; }
    public IName StringOpString { get; }
    public IName StringOpObject { get; }
    public IName UIntPtrOpUIntPtr { get; }
    public IName UInt32OpInt32 { get; }
    public IName UInt32OpUInt32 { get; }
    public IName UInt64OpInt32 { get; }
    public IName UInt64OpUInt32 { get; }
    public IName UInt64OpUInt64 { get; }
    public IName value { get; }
    public IName System { get; }
    public IName Void { get; }
    public IName VoidPtrOpVoidPtr { get; }
    public IName Boolean { get; }
    public IName Cctor { get; }
    public IName Char { get; }
    public IName Ctor { get; }
    public IName Byte { get; }
    public IName SByte { get; }
    public IName Int16 { get; }
    public IName UInt16 { get; }
    public IName Int32 { get; }
    public IName UInt32 { get; }
    public IName Int64 { get; }
    public IName UInt64 { get; }
    public IName String { get; }
    public IName IntPtr { get; }
    public IName UIntPtr { get; }
    public IName Object { get; }
    public IName Remove { get; }
    public IName Result { get; }
    public IName Set { get; }
    public IName Single { get; }
    public IName Double { get; }
    public IName TypedReference { get; }
    public IName Enum { get; }
    public IName Length { get; }
    public IName LongLength { get; }
    public IName MulticastDelegate { get; }
    public IName ValueType { get; }
    public IName Type { get; }
    public IName Array { get; }
    public IName Attribute { get; }
    public IName AttributeUsageAttribute { get; }
    public IName DateTime { get; }
    public IName DebuggerHiddenAttribute { get; }
    public IName Decimal { get; }
    public IName Delegate { get; }
    public IName Diagnostics { get; }
    public IName DBNull { get; }
    public IName Nullable { get; }
    public sealed virtual IName get_EmptyName();
    public sealed virtual IName GetNameFor(string name);
    public sealed virtual IName get_Address();
    public sealed virtual IName get_AllowMultiple();
    public sealed virtual IName get_BeginInvoke();
    public sealed virtual IName get_BoolOpBool();
    public sealed virtual IName get_Combine();
    public sealed virtual IName get_Concat();
    public sealed virtual IName get_DecimalOpDecimal();
    public sealed virtual IName get_DelegateOpDelegate();
    public sealed virtual IName get_EndInvoke();
    public sealed virtual IName get_EnumOpEnum();
    public sealed virtual IName get_EnumOpNum();
    public sealed virtual IName get_Equals();
    public sealed virtual IName get_Float32OpFloat32();
    public sealed virtual IName get_Float64OpFloat64();
    public sealed virtual IName get_Get();
    public sealed virtual IName get_global();
    public sealed virtual IName get_HasValue();
    public sealed virtual IName get_Inherited();
    public sealed virtual IName get_Invoke();
    public sealed virtual IName get_Int16OpInt16();
    public sealed virtual IName get_Int32OpInt32();
    public sealed virtual IName get_Int32OpUInt32();
    public sealed virtual IName get_Int64OpInt32();
    public sealed virtual IName get_Int64OpUInt32();
    public sealed virtual IName get_Int64OpUInt64();
    public sealed virtual IName get_Int64OpInt64();
    public sealed virtual IName get_Int8OpInt8();
    public sealed virtual IName get_NullCoalescing();
    public sealed virtual IName get_NumOpEnum();
    public sealed virtual IName get_ObjectOpObject();
    public sealed virtual IName get_ObjectOpString();
    public sealed virtual IName get_OpAddition();
    public sealed virtual IName get_OpBitwiseAnd();
    public sealed virtual IName get_OpBitwiseOr();
    public sealed virtual IName get_OpEnum();
    public sealed virtual IName get_OpEquality();
    public sealed virtual IName get_OpExplicit();
    public sealed virtual IName get_OpImplicit();
    public sealed virtual IName get_OpInequality();
    public sealed virtual IName get_OpInt8();
    public sealed virtual IName get_OpInt16();
    public sealed virtual IName get_OpInt32();
    public sealed virtual IName get_OpInt64();
    public sealed virtual IName get_OpComma();
    public sealed virtual IName get_OpConcatentation();
    public sealed virtual IName get_OpDivision();
    public sealed virtual IName get_OpExclusiveOr();
    public sealed virtual IName get_OpExponentiation();
    public sealed virtual IName get_OpFalse();
    public sealed virtual IName get_OpFloat32();
    public sealed virtual IName get_OpFloat64();
    public sealed virtual IName get_OpGreaterThan();
    public sealed virtual IName get_OpGreaterThanOrEqual();
    public sealed virtual IName get_OpIntegerDivision();
    public sealed virtual IName get_OpLeftShift();
    public sealed virtual IName get_OpLessThan();
    public sealed virtual IName get_OpLessThanOrEqual();
    public sealed virtual IName get_OpLike();
    public sealed virtual IName get_OpLogicalNot();
    public sealed virtual IName get_OpLogicalOr();
    public sealed virtual IName get_OpModulus();
    public sealed virtual IName get_OpMultiply();
    public sealed virtual IName get_OpOnesComplement();
    public sealed virtual IName get_OpBoolean();
    public sealed virtual IName get_OpChar();
    public sealed virtual IName get_OpDecimal();
    public sealed virtual IName get_OpDecrement();
    public sealed virtual IName get_OpIncrement();
    public sealed virtual IName get_OpRightShift();
    public sealed virtual IName get_OpSubtraction();
    public sealed virtual IName get_OpTrue();
    public sealed virtual IName get_OpUInt8();
    public sealed virtual IName get_OpUInt16();
    public sealed virtual IName get_OpUInt32();
    public sealed virtual IName get_OpUInt64();
    public sealed virtual IName get_OpUnaryNegation();
    public sealed virtual IName get_OpUnaryPlus();
    public sealed virtual IName get_StringOpString();
    public sealed virtual IName get_StringOpObject();
    public sealed virtual IName get_UIntPtrOpUIntPtr();
    public sealed virtual IName get_UInt32OpInt32();
    public sealed virtual IName get_UInt32OpUInt32();
    public sealed virtual IName get_UInt64OpInt32();
    public sealed virtual IName get_UInt64OpUInt32();
    public sealed virtual IName get_UInt64OpUInt64();
    public sealed virtual IName get_value();
    public sealed virtual IName get_System();
    public sealed virtual IName get_Void();
    public sealed virtual IName get_VoidPtrOpVoidPtr();
    public sealed virtual IName get_Boolean();
    public sealed virtual IName get_Cctor();
    public sealed virtual IName get_Char();
    public sealed virtual IName get_Ctor();
    public sealed virtual IName get_Byte();
    public sealed virtual IName get_SByte();
    public sealed virtual IName get_Int16();
    public sealed virtual IName get_UInt16();
    public sealed virtual IName get_Int32();
    public sealed virtual IName get_UInt32();
    public sealed virtual IName get_Int64();
    public sealed virtual IName get_UInt64();
    public sealed virtual IName get_String();
    public sealed virtual IName get_IntPtr();
    public sealed virtual IName get_UIntPtr();
    public sealed virtual IName get_Object();
    public sealed virtual IName get_Remove();
    public sealed virtual IName get_Result();
    public sealed virtual IName get_Set();
    public sealed virtual IName get_Single();
    public sealed virtual IName get_Double();
    public sealed virtual IName get_TypedReference();
    public sealed virtual IName get_Enum();
    public sealed virtual IName get_Length();
    public sealed virtual IName get_LongLength();
    public sealed virtual IName get_MulticastDelegate();
    public sealed virtual IName get_ValueType();
    public sealed virtual IName get_Type();
    public sealed virtual IName get_Array();
    public sealed virtual IName get_Attribute();
    public sealed virtual IName get_AttributeUsageAttribute();
    public sealed virtual IName get_DateTime();
    public sealed virtual IName get_DebuggerHiddenAttribute();
    public sealed virtual IName get_Decimal();
    public sealed virtual IName get_Delegate();
    public sealed virtual IName get_Diagnostics();
    public sealed virtual IName get_DBNull();
    public sealed virtual IName get_Nullable();
}
public interface Microsoft.Cci.INestedAliasForType {
}
public interface Microsoft.Cci.INestedTypeDefinition {
    public bool DoesNotInheritGenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public abstract virtual bool get_DoesNotInheritGenericParameters();
    public abstract virtual ushort get_GenericParameterCount();
}
internal abstract class Microsoft.Cci.INestedTypeDefinitionContract : object {
    private ushort Microsoft.Cci.INestedTypeDefinition.GenericParameterCount { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public bool DoesNotInheritGenericParameters { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public ITypeDefinition Container { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    private INestedTypeDefinition Microsoft.Cci.INestedTypeReference.ResolvedType { get; }
    private ushort Microsoft.Cci.INamedTypeDefinition.GenericParameterCount { get; }
    private ushort Microsoft.Cci.ITypeDefinition.GenericParameterCount { get; }
    private ushort Microsoft.Cci.INamedTypeReference.GenericParameterCount { get; }
    private ushort Microsoft.Cci.INestedTypeReference.GenericParameterCount { get; }
    private sealed virtual override ushort Microsoft.Cci.INestedTypeDefinition.get_GenericParameterCount();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual bool get_DoesNotInheritGenericParameters();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    private sealed virtual override INestedTypeDefinition Microsoft.Cci.INestedTypeReference.get_ResolvedType();
    private sealed virtual override ushort Microsoft.Cci.INamedTypeDefinition.get_GenericParameterCount();
    private sealed virtual override ushort Microsoft.Cci.ITypeDefinition.get_GenericParameterCount();
    private sealed virtual override ushort Microsoft.Cci.INamedTypeReference.get_GenericParameterCount();
    private sealed virtual override ushort Microsoft.Cci.INestedTypeReference.get_GenericParameterCount();
}
public interface Microsoft.Cci.INestedTypeReference {
    public ushort GenericParameterCount { get; }
    public INestedTypeDefinition ResolvedType { get; }
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual INestedTypeDefinition get_ResolvedType();
}
internal abstract class Microsoft.Cci.INestedTypeReferenceContract : object {
    public ushort GenericParameterCount { get; }
    public INestedTypeDefinition ResolvedType { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual INestedTypeDefinition get_ResolvedType();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.INestedUnitNamespace {
    public IUnitNamespace ContainingUnitNamespace { get; }
    public abstract virtual IUnitNamespace get_ContainingUnitNamespace();
}
internal abstract class Microsoft.Cci.INestedUnitNamespaceContract : object {
    public IUnitNamespace ContainingUnitNamespace { get; }
    public IUnit Unit { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    private IUnitReference Microsoft.Cci.IUnitNamespaceReference.Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    private IUnitNamespaceReference Microsoft.Cci.INestedUnitNamespaceReference.ContainingUnitNamespace { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    public sealed virtual IUnitNamespace get_ContainingUnitNamespace();
    public sealed virtual IUnit get_Unit();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
    private sealed virtual override IUnitReference Microsoft.Cci.IUnitNamespaceReference.get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    private sealed virtual override IUnitNamespaceReference Microsoft.Cci.INestedUnitNamespaceReference.get_ContainingUnitNamespace();
    public sealed virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.INestedUnitNamespaceReference {
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    public abstract virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public abstract virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
}
internal abstract class Microsoft.Cci.INestedUnitNamespaceReferenceContract : object {
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    public IUnitReference Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public sealed virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
    public sealed virtual IUnitReference get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.INestedUnitSetNamespace {
    public IUnitSetNamespace ContainingUnitSetNamespace { get; }
    public abstract virtual IUnitSetNamespace get_ContainingUnitSetNamespace();
}
internal abstract class Microsoft.Cci.INestedUnitSetNamespaceContract : object {
    public IUnitSetNamespace ContainingUnitSetNamespace { get; }
    public IUnitSet UnitSet { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    public sealed virtual IUnitSetNamespace get_ContainingUnitSetNamespace();
    public sealed virtual IUnitSet get_UnitSet();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public class Microsoft.Cci.InternFactory : object {
    private UInt32 CurrentAssemblyInternValue;
    private UInt32 CurrentModuleInternValue;
    private UInt32 CurrentNamespaceInternValue;
    private UInt32 CurrentTypeInternValue;
    private UInt32 CurrentTypeListInternValue;
    private UInt32 CurrentCustomModifierInternValue;
    private UInt32 CurrentCustomModifierListInternValue;
    private UInt32 CurrentParameterTypeInternValue;
    private UInt32 CurrentParameterTypeListInternValue;
    private UInt32 CurrentSignatureInternValue;
    private UInt32 CurrentMethodReferenceInternValue;
    private UInt32 CurrentFieldReferenceInternValue;
    private IMethodReference CurrentMethodReference;
    private MultiHashtable`1<AssemblyStore> AssemblyHashtable;
    private MultiHashtable`1<ModuleStore> ModuleHashtable;
    private DoubleHashtable NestedNamespaceHashtable;
    private MultiHashtable`1<NamespaceTypeStore> NamespaceTypeHashtable;
    private MultiHashtable`1<NestedTypeStore> NestedTypeHashtable;
    private Hashtable VectorTypeHashTable;
    private Hashtable PointerTypeHashTable;
    private Hashtable ManagedPointerTypeHashTable;
    private MultiHashtable`1<MatrixTypeStore> MatrixTypeHashtable;
    private DoubleHashtable TypeListHashtable;
    private DoubleHashtable GenericTypeInstanceHashtable;
    private DoubleHashtable GenericMethodInstanceHashtable;
    private DoubleHashtable GenericTypeParameterHashtable;
    private DoubleHashtable GenericMethodTypeParameterHashTable;
    private DoubleHashtable CustomModifierHashTable;
    private DoubleHashtable CustomModifierListHashTable;
    private MultiHashtable`1<ParameterTypeStore> ParameterTypeHashtable;
    private DoubleHashtable ParameterTypeListHashtable;
    private MultiHashtable`1<SignatureStore> SignatureHashtable;
    private Hashtable FunctionTypeHashTable;
    private DoubleHashtable ModifiedTypeHashtable;
    private Hashtable`1<MultiHashtable`1<SignatureStore>> MethodReferenceHashtable;
    private Hashtable`1<DoubleHashtable> FieldReferenceHashtable;
    private void ObjectInvariant();
    private AssemblyStore GetAssemblyStore(AssemblyIdentity assemblyIdentity);
    private ModuleStore GetModuleStore(ModuleIdentity moduleIdentity);
    private UInt32 GetUnitRootNamespaceInternId(IUnitReference unitReference);
    private UInt32 GetNestedNamespaceInternId(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    private UInt32 GetUnitNamespaceInternId(IUnitNamespaceReference unitNamespaceReference);
    private UInt32 GetNamespaceTypeReferenceInternId(IUnitNamespaceReference containingUnitNamespace, IName typeName, UInt32 genericParameterCount);
    private UInt32 GetNestedTypeReferenceInternId(ITypeReference containingTypeReference, IName typeName, UInt32 genericParameterCount);
    private UInt32 GetVectorTypeReferenceInternId(ITypeReference elementTypeReference);
    private UInt32 GetMatrixTypeReferenceInternId(ITypeReference elementTypeReference, int rank, IEnumerable`1<ulong> sizes, IEnumerable`1<int> lowerBounds);
    private UInt32 GetTypeReferenceListInternedId(IEnumerator`1<ITypeReference> typeReferences);
    private UInt32 GetGenericTypeInstanceReferenceInternId(ITypeReference genericTypeReference, IEnumerable`1<ITypeReference> genericArguments);
    private UInt32 GetPointerTypeReferenceInternId(ITypeReference targetTypeReference);
    private UInt32 GetManagedPointerTypeReferenceInternId(ITypeReference targetTypeReference);
    private UInt32 GetGenericTypeParameterReferenceInternId(ITypeReference definingTypeReference, int index);
    private static ITypeReference GetUninstantiatedGenericType(ITypeReference typeReference);
    private UInt32 GetGenericMethodParameterReferenceInternId(IMethodReference definingMethodReference, UInt32 index);
    private UInt32 GetParameterTypeInternId(IParameterTypeInformation parameterTypeInformation);
    private UInt32 GetParameterTypeListInternId(IEnumerator`1<IParameterTypeInformation> parameterTypeInformations);
    private UInt32 GetSignatureInternId(CallingConvention callingConvention, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, bool returnValueIsByRef, ITypeReference returnType);
    private UInt32 GetMethodReferenceInternedId(IMethodReference methodReference);
    private UInt32 GetGenericMethodInstanceReferenceInternedKey(IGenericMethodInstanceReference genericMethodInstanceReference);
    private UInt32 GetFieldReferenceInternedId(IFieldReference fieldReference);
    private UInt32 GetFunctionPointerTypeReferenceInternId(CallingConvention callingConvention, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, bool returnValueIsByRef, ITypeReference returnType);
    private UInt32 GetCustomModifierInternId(ICustomModifier customModifier);
    private UInt32 GetCustomModifierListInternId(IEnumerator`1<ICustomModifier> customModifiers);
    private UInt32 GetTypeReferenceInterendIdIgnoringCustomModifiers(ITypeReference typeReference);
    private UInt32 GetModifiedTypeReferenceInternId(ITypeReference typeReference, IEnumerable`1<ICustomModifier> customModifiers);
    private UInt32 GetTypeReferenceInternId(ITypeReference typeReference);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetAssemblyInternedKey(AssemblyIdentity assemblyIdentity);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetFieldInternedKey(IFieldReference methodReference);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetMethodInternedKey(IMethodReference methodReference);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetModuleInternedKey(ModuleIdentity moduleIdentity);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetVectorTypeReferenceInternedKey(ITypeReference elementTypeReference);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetMatrixTypeReferenceInternedKey(ITypeReference elementTypeReference, int rank, IEnumerable`1<ulong> sizes, IEnumerable`1<int> lowerBounds);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetGenericTypeInstanceReferenceInternedKey(ITypeReference genericTypeReference, IEnumerable`1<ITypeReference> genericArguments);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetPointerTypeReferenceInternedKey(ITypeReference targetTypeReference);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetManagedPointerTypeReferenceInternedKey(ITypeReference targetTypeReference);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetFunctionPointerTypeReferenceInternedKey(CallingConvention callingConvention, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, bool returnValueIsByRef, ITypeReference returnType);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetTypeReferenceInternedKey(ITypeReference typeReference);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetNamespaceTypeReferenceInternedKey(IUnitNamespaceReference containingUnitNamespace, IName typeName, UInt32 genericParameterCount);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetNestedTypeReferenceInternedKey(ITypeReference containingTypeReference, IName typeName, UInt32 genericParameterCount);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetGenericTypeParameterReferenceInternedKey(ITypeReference definingTypeReference, int index);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetModifiedTypeReferenceInternedKey(ITypeReference typeReference, IEnumerable`1<ICustomModifier> customModifiers);
    private sealed virtual override UInt32 Microsoft.Cci.IInternFactory.GetGenericMethodParameterReferenceInternedKey(IMethodReference methodReference, int index);
}
public interface Microsoft.Cci.IObjectWithLocations {
    public IEnumerable`1<ILocation> Locations { get; }
    public abstract virtual IEnumerable`1<ILocation> get_Locations();
}
internal abstract class Microsoft.Cci.IObjectWithLocationsContract : object {
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
public interface Microsoft.Cci.IOperation {
    public OperationCode OperationCode { get; }
    public UInt32 Offset { get; }
    public ILocation Location { get; }
    public object Value { get; }
    public abstract virtual OperationCode get_OperationCode();
    public abstract virtual UInt32 get_Offset();
    public abstract virtual ILocation get_Location();
    public abstract virtual object get_Value();
}
internal abstract class Microsoft.Cci.IOperationContract : object {
    public OperationCode OperationCode { get; }
    public UInt32 Offset { get; }
    public ILocation Location { get; }
    public object Value { get; }
    public sealed virtual OperationCode get_OperationCode();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual ILocation get_Location();
    public sealed virtual object get_Value();
}
public interface Microsoft.Cci.IOperationExceptionInformation {
    public HandlerKind HandlerKind { get; }
    public ITypeReference ExceptionType { get; }
    public UInt32 TryStartOffset { get; }
    public UInt32 TryEndOffset { get; }
    public UInt32 FilterDecisionStartOffset { get; }
    public UInt32 HandlerStartOffset { get; }
    public UInt32 HandlerEndOffset { get; }
    public abstract virtual HandlerKind get_HandlerKind();
    public abstract virtual ITypeReference get_ExceptionType();
    public abstract virtual UInt32 get_TryStartOffset();
    public abstract virtual UInt32 get_TryEndOffset();
    public abstract virtual UInt32 get_FilterDecisionStartOffset();
    public abstract virtual UInt32 get_HandlerStartOffset();
    public abstract virtual UInt32 get_HandlerEndOffset();
}
internal abstract class Microsoft.Cci.IOperationExceptionInformationContract : object {
    public HandlerKind HandlerKind { get; }
    public ITypeReference ExceptionType { get; }
    public UInt32 TryStartOffset { get; }
    public UInt32 TryEndOffset { get; }
    public UInt32 FilterDecisionStartOffset { get; }
    public UInt32 HandlerStartOffset { get; }
    public UInt32 HandlerEndOffset { get; }
    public sealed virtual HandlerKind get_HandlerKind();
    public sealed virtual ITypeReference get_ExceptionType();
    public sealed virtual UInt32 get_TryStartOffset();
    public sealed virtual UInt32 get_TryEndOffset();
    public sealed virtual UInt32 get_FilterDecisionStartOffset();
    public sealed virtual UInt32 get_HandlerStartOffset();
    public sealed virtual UInt32 get_HandlerEndOffset();
}
public interface Microsoft.Cci.IParameterDefinition {
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsIn { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsParameterArray { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference ParamArrayElementType { get; }
    public abstract virtual IMetadataConstant get_DefaultValue();
    public abstract virtual bool get_HasDefaultValue();
    public abstract virtual bool get_IsIn();
    public abstract virtual bool get_IsMarshalledExplicitly();
    public abstract virtual bool get_IsOptional();
    public abstract virtual bool get_IsOut();
    public abstract virtual bool get_IsParameterArray();
    public abstract virtual IMarshallingInformation get_MarshallingInformation();
    public abstract virtual ITypeReference get_ParamArrayElementType();
}
public interface Microsoft.Cci.IParameterListEntry {
    public ushort Index { get; }
    public abstract virtual ushort get_Index();
}
public interface Microsoft.Cci.IParameterTypeInformation {
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    public ITypeReference Type { get; }
    public abstract virtual ISignature get_ContainingSignature();
    public abstract virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public abstract virtual bool get_IsByReference();
    public abstract virtual bool get_IsModified();
    public abstract virtual ITypeReference get_Type();
}
internal abstract class Microsoft.Cci.IParameterTypeInformationContract : object {
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    public ITypeReference Type { get; }
    public ushort Index { get; }
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ushort get_Index();
}
public interface Microsoft.Cci.IPESection {
    public IName SectionName { get; }
    public PESectionCharacteristics Characteristics { get; }
    public int VirtualAddress { get; }
    public int VirtualSize { get; }
    public int SizeOfRawData { get; }
    public IEnumerable`1<byte> Rawdata { get; }
    public abstract virtual IName get_SectionName();
    public abstract virtual PESectionCharacteristics get_Characteristics();
    public abstract virtual int get_VirtualAddress();
    public abstract virtual int get_VirtualSize();
    public abstract virtual int get_SizeOfRawData();
    public abstract virtual IEnumerable`1<byte> get_Rawdata();
}
internal abstract class Microsoft.Cci.IPESectionContract : object {
    public IName SectionName { get; }
    public PESectionCharacteristics Characteristics { get; }
    public int VirtualAddress { get; }
    public int VirtualSize { get; }
    public int SizeOfRawData { get; }
    public IEnumerable`1<byte> Rawdata { get; }
    public sealed virtual IName get_SectionName();
    public sealed virtual PESectionCharacteristics get_Characteristics();
    public sealed virtual int get_VirtualAddress();
    public sealed virtual int get_VirtualSize();
    public sealed virtual int get_SizeOfRawData();
    public sealed virtual IEnumerable`1<byte> get_Rawdata();
}
public interface Microsoft.Cci.IPlatformInvokeInformation {
    public IName ImportName { get; }
    public IModuleReference ImportModule { get; }
    public StringFormatKind StringFormat { get; }
    public bool NoMangle { get; }
    public PInvokeCallingConvention PInvokeCallingConvention { get; }
    public bool SupportsLastError { get; }
    public Nullable`1<bool> UseBestFit { get; }
    public Nullable`1<bool> ThrowExceptionForUnmappableChar { get; }
    public abstract virtual IName get_ImportName();
    public abstract virtual IModuleReference get_ImportModule();
    public abstract virtual StringFormatKind get_StringFormat();
    public abstract virtual bool get_NoMangle();
    public abstract virtual PInvokeCallingConvention get_PInvokeCallingConvention();
    public abstract virtual bool get_SupportsLastError();
    public abstract virtual Nullable`1<bool> get_UseBestFit();
    public abstract virtual Nullable`1<bool> get_ThrowExceptionForUnmappableChar();
}
internal abstract class Microsoft.Cci.IPlatformInvokeInformationContract : object {
    public IName ImportName { get; }
    public IModuleReference ImportModule { get; }
    public StringFormatKind StringFormat { get; }
    public bool NoMangle { get; }
    public PInvokeCallingConvention PInvokeCallingConvention { get; }
    public bool SupportsLastError { get; }
    public Nullable`1<bool> UseBestFit { get; }
    public Nullable`1<bool> ThrowExceptionForUnmappableChar { get; }
    public sealed virtual IName get_ImportName();
    public sealed virtual IModuleReference get_ImportModule();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_NoMangle();
    public sealed virtual PInvokeCallingConvention get_PInvokeCallingConvention();
    public sealed virtual bool get_SupportsLastError();
    public sealed virtual Nullable`1<bool> get_UseBestFit();
    public sealed virtual Nullable`1<bool> get_ThrowExceptionForUnmappableChar();
}
public interface Microsoft.Cci.IPlatformType {
    public INamespaceTypeReference SystemDiagnosticsContractsContract { get; }
    public byte PointerSize { get; }
    public INamespaceTypeReference SystemArgIterator { get; }
    public INamespaceTypeReference SystemArray { get; }
    public INamespaceTypeReference SystemAsyncCallback { get; }
    public INamespaceTypeReference SystemAttribute { get; }
    public INamespaceTypeReference SystemAttributeUsageAttribute { get; }
    public INamespaceTypeReference SystemBoolean { get; }
    public INamespaceTypeReference SystemChar { get; }
    public INamespaceTypeReference SystemCollectionsGenericDictionary { get; }
    public INamespaceTypeReference SystemCollectionsGenericICollection { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsGenericIList { get; }
    public INamespaceTypeReference SystemCollectionsICollection { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsIList { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralComparable { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralEquatable { get; }
    public INamespaceTypeReference SystemDateTime { get; }
    public INamespaceTypeReference SystemDateTimeOffset { get; }
    public INamespaceTypeReference SystemDecimal { get; }
    public INamespaceTypeReference SystemDelegate { get; }
    public INamespaceTypeReference SystemDBNull { get; }
    public INamespaceTypeReference SystemEnum { get; }
    public INamespaceTypeReference SystemException { get; }
    public INamespaceTypeReference SystemFloat32 { get; }
    public INamespaceTypeReference SystemFloat64 { get; }
    public INamespaceTypeReference SystemGlobalizationCultureInfo { get; }
    public INamespaceTypeReference SystemIAsyncResult { get; }
    public INamespaceTypeReference SystemICloneable { get; }
    public INamespaceTypeReference SystemContextStaticAttribute { get; }
    public INamespaceTypeReference SystemInt16 { get; }
    public INamespaceTypeReference SystemInt32 { get; }
    public INamespaceTypeReference SystemInt64 { get; }
    public INamespaceTypeReference SystemInt8 { get; }
    public INamespaceTypeReference SystemIntPtr { get; }
    public INamespaceTypeReference SystemMulticastDelegate { get; }
    public INamespaceTypeReference SystemNullable { get; }
    public INamespaceTypeReference SystemObject { get; }
    public INamespaceTypeReference SystemReflectionAssemblySignatureKeyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeArgumentHandle { get; }
    public INamespaceTypeReference SystemRuntimeFieldHandle { get; }
    public INamespaceTypeReference SystemRuntimeMethodHandle { get; }
    public INamespaceTypeReference SystemRuntimeTypeHandle { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCallConvCdecl { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCompilerGeneratedAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesExtensionAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesInternalsVisibleToAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsConst { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsVolatile { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesReferenceAssemblyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeInteropServicesDllImportAttribute { get; }
    public INamespaceTypeReference SystemSecurityPermissionsSecurityAction { get; }
    public INamespaceTypeReference SystemSecuritySecurityCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySecuritySafeCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySuppressUnmanagedCodeSecurityAttribute { get; }
    public INamespaceTypeReference SystemString { get; }
    public INamespaceTypeReference SystemThreadStaticAttribute { get; }
    public INamespaceTypeReference SystemType { get; }
    public INamespaceTypeReference SystemTypedReference { get; }
    public INamespaceTypeReference SystemUInt16 { get; }
    public INamespaceTypeReference SystemUInt32 { get; }
    public INamespaceTypeReference SystemUInt64 { get; }
    public INamespaceTypeReference SystemUInt8 { get; }
    public INamespaceTypeReference SystemUIntPtr { get; }
    public INamespaceTypeReference SystemValueType { get; }
    public INamespaceTypeReference SystemVoid { get; }
    public abstract virtual INamespaceTypeReference get_SystemDiagnosticsContractsContract();
    public abstract virtual byte get_PointerSize();
    public abstract virtual INamespaceTypeReference get_SystemArgIterator();
    public abstract virtual INamespaceTypeReference get_SystemArray();
    public abstract virtual INamespaceTypeReference get_SystemAsyncCallback();
    public abstract virtual INamespaceTypeReference get_SystemAttribute();
    public abstract virtual INamespaceTypeReference get_SystemAttributeUsageAttribute();
    public abstract virtual INamespaceTypeReference get_SystemBoolean();
    public abstract virtual INamespaceTypeReference get_SystemChar();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsGenericDictionary();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsGenericICollection();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerable();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerator();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsGenericIList();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsICollection();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsIEnumerable();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsIEnumerator();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsIList();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsIStructuralComparable();
    public abstract virtual INamespaceTypeReference get_SystemCollectionsIStructuralEquatable();
    public abstract virtual INamespaceTypeReference get_SystemDateTime();
    public abstract virtual INamespaceTypeReference get_SystemDateTimeOffset();
    public abstract virtual INamespaceTypeReference get_SystemDecimal();
    public abstract virtual INamespaceTypeReference get_SystemDelegate();
    public abstract virtual INamespaceTypeReference get_SystemDBNull();
    public abstract virtual INamespaceTypeReference get_SystemEnum();
    public abstract virtual INamespaceTypeReference get_SystemException();
    public abstract virtual INamespaceTypeReference get_SystemFloat32();
    public abstract virtual INamespaceTypeReference get_SystemFloat64();
    public abstract virtual INamespaceTypeReference get_SystemGlobalizationCultureInfo();
    public abstract virtual INamespaceTypeReference get_SystemIAsyncResult();
    public abstract virtual INamespaceTypeReference get_SystemICloneable();
    public abstract virtual INamespaceTypeReference get_SystemContextStaticAttribute();
    public abstract virtual INamespaceTypeReference get_SystemInt16();
    public abstract virtual INamespaceTypeReference get_SystemInt32();
    public abstract virtual INamespaceTypeReference get_SystemInt64();
    public abstract virtual INamespaceTypeReference get_SystemInt8();
    public abstract virtual INamespaceTypeReference get_SystemIntPtr();
    public abstract virtual INamespaceTypeReference get_SystemMulticastDelegate();
    public abstract virtual INamespaceTypeReference get_SystemNullable();
    public abstract virtual INamespaceTypeReference get_SystemObject();
    public abstract virtual INamespaceTypeReference get_SystemReflectionAssemblySignatureKeyAttribute();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeArgumentHandle();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeFieldHandle();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeMethodHandle();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeTypeHandle();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCallConvCdecl();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCompilerGeneratedAttribute();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesExtensionAttribute();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesInternalsVisibleToAttribute();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsConst();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsVolatile();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesReferenceAssemblyAttribute();
    public abstract virtual INamespaceTypeReference get_SystemRuntimeInteropServicesDllImportAttribute();
    public abstract virtual INamespaceTypeReference get_SystemSecurityPermissionsSecurityAction();
    public abstract virtual INamespaceTypeReference get_SystemSecuritySecurityCriticalAttribute();
    public abstract virtual INamespaceTypeReference get_SystemSecuritySecuritySafeCriticalAttribute();
    public abstract virtual INamespaceTypeReference get_SystemSecuritySuppressUnmanagedCodeSecurityAttribute();
    public abstract virtual INamespaceTypeReference get_SystemString();
    public abstract virtual INamespaceTypeReference get_SystemThreadStaticAttribute();
    public abstract virtual INamespaceTypeReference get_SystemType();
    public abstract virtual INamespaceTypeReference get_SystemTypedReference();
    public abstract virtual INamespaceTypeReference get_SystemUInt16();
    public abstract virtual INamespaceTypeReference get_SystemUInt32();
    public abstract virtual INamespaceTypeReference get_SystemUInt64();
    public abstract virtual INamespaceTypeReference get_SystemUInt8();
    public abstract virtual INamespaceTypeReference get_SystemUIntPtr();
    public abstract virtual INamespaceTypeReference get_SystemValueType();
    public abstract virtual INamespaceTypeReference get_SystemVoid();
    public abstract virtual INamespaceTypeReference GetTypeFor(PrimitiveTypeCode typeCode);
}
internal abstract class Microsoft.Cci.IPlatformTypeContract : object {
    public INamespaceTypeReference SystemDiagnosticsContractsContract { get; }
    public byte PointerSize { get; }
    public INamespaceTypeReference SystemArgIterator { get; }
    public INamespaceTypeReference SystemArray { get; }
    public INamespaceTypeReference SystemAsyncCallback { get; }
    public INamespaceTypeReference SystemAttribute { get; }
    public INamespaceTypeReference SystemAttributeUsageAttribute { get; }
    public INamespaceTypeReference SystemBoolean { get; }
    public INamespaceTypeReference SystemChar { get; }
    public INamespaceTypeReference SystemCollectionsGenericDictionary { get; }
    public INamespaceTypeReference SystemCollectionsGenericICollection { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsGenericIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsGenericIList { get; }
    public INamespaceTypeReference SystemCollectionsICollection { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerable { get; }
    public INamespaceTypeReference SystemCollectionsIEnumerator { get; }
    public INamespaceTypeReference SystemCollectionsIList { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralComparable { get; }
    public INamespaceTypeReference SystemCollectionsIStructuralEquatable { get; }
    public INamespaceTypeReference SystemDateTime { get; }
    public INamespaceTypeReference SystemDateTimeOffset { get; }
    public INamespaceTypeReference SystemDecimal { get; }
    public INamespaceTypeReference SystemDelegate { get; }
    public INamespaceTypeReference SystemDBNull { get; }
    public INamespaceTypeReference SystemEnum { get; }
    public INamespaceTypeReference SystemException { get; }
    public INamespaceTypeReference SystemFloat32 { get; }
    public INamespaceTypeReference SystemFloat64 { get; }
    public INamespaceTypeReference SystemGlobalizationCultureInfo { get; }
    public INamespaceTypeReference SystemIAsyncResult { get; }
    public INamespaceTypeReference SystemICloneable { get; }
    public INamespaceTypeReference SystemInt16 { get; }
    public INamespaceTypeReference SystemInt32 { get; }
    public INamespaceTypeReference SystemInt64 { get; }
    public INamespaceTypeReference SystemInt8 { get; }
    public INamespaceTypeReference SystemIntPtr { get; }
    public INamespaceTypeReference SystemMulticastDelegate { get; }
    public INamespaceTypeReference SystemNullable { get; }
    public INamespaceTypeReference SystemObject { get; }
    public INamespaceTypeReference SystemReflectionAssemblySignatureKeyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeArgumentHandle { get; }
    public INamespaceTypeReference SystemRuntimeFieldHandle { get; }
    public INamespaceTypeReference SystemRuntimeMethodHandle { get; }
    public INamespaceTypeReference SystemRuntimeTypeHandle { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCallConvCdecl { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesCompilerGeneratedAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesExtensionAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesInternalsVisibleToAttribute { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsConst { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesIsVolatile { get; }
    public INamespaceTypeReference SystemRuntimeCompilerServicesReferenceAssemblyAttribute { get; }
    public INamespaceTypeReference SystemRuntimeInteropServicesDllImportAttribute { get; }
    public INamespaceTypeReference SystemSecurityPermissionsSecurityAction { get; }
    public INamespaceTypeReference SystemSecuritySecurityCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySecuritySafeCriticalAttribute { get; }
    public INamespaceTypeReference SystemSecuritySuppressUnmanagedCodeSecurityAttribute { get; }
    public INamespaceTypeReference SystemString { get; }
    public INamespaceTypeReference SystemType { get; }
    public INamespaceTypeReference SystemTypedReference { get; }
    public INamespaceTypeReference SystemUInt16 { get; }
    public INamespaceTypeReference SystemUInt32 { get; }
    public INamespaceTypeReference SystemUInt64 { get; }
    public INamespaceTypeReference SystemUInt8 { get; }
    public INamespaceTypeReference SystemUIntPtr { get; }
    public INamespaceTypeReference SystemValueType { get; }
    public INamespaceTypeReference SystemVoid { get; }
    public INamespaceTypeReference SystemContextStaticAttribute { get; }
    public INamespaceTypeReference SystemThreadStaticAttribute { get; }
    public sealed virtual INamespaceTypeReference get_SystemDiagnosticsContractsContract();
    public sealed virtual byte get_PointerSize();
    public sealed virtual INamespaceTypeReference get_SystemArgIterator();
    public sealed virtual INamespaceTypeReference get_SystemArray();
    public sealed virtual INamespaceTypeReference get_SystemAsyncCallback();
    public sealed virtual INamespaceTypeReference get_SystemAttribute();
    public sealed virtual INamespaceTypeReference get_SystemAttributeUsageAttribute();
    public sealed virtual INamespaceTypeReference get_SystemBoolean();
    public sealed virtual INamespaceTypeReference get_SystemChar();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericDictionary();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericICollection();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIEnumerator();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsGenericIList();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsICollection();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIEnumerable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIEnumerator();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIList();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIStructuralComparable();
    public sealed virtual INamespaceTypeReference get_SystemCollectionsIStructuralEquatable();
    public sealed virtual INamespaceTypeReference get_SystemDateTime();
    public sealed virtual INamespaceTypeReference get_SystemDateTimeOffset();
    public sealed virtual INamespaceTypeReference get_SystemDecimal();
    public sealed virtual INamespaceTypeReference get_SystemDelegate();
    public sealed virtual INamespaceTypeReference get_SystemDBNull();
    public sealed virtual INamespaceTypeReference get_SystemEnum();
    public sealed virtual INamespaceTypeReference get_SystemException();
    public sealed virtual INamespaceTypeReference get_SystemFloat32();
    public sealed virtual INamespaceTypeReference get_SystemFloat64();
    public sealed virtual INamespaceTypeReference get_SystemGlobalizationCultureInfo();
    public sealed virtual INamespaceTypeReference get_SystemIAsyncResult();
    public sealed virtual INamespaceTypeReference get_SystemICloneable();
    public sealed virtual INamespaceTypeReference get_SystemInt16();
    public sealed virtual INamespaceTypeReference get_SystemInt32();
    public sealed virtual INamespaceTypeReference get_SystemInt64();
    public sealed virtual INamespaceTypeReference get_SystemInt8();
    public sealed virtual INamespaceTypeReference get_SystemIntPtr();
    public sealed virtual INamespaceTypeReference get_SystemMulticastDelegate();
    public sealed virtual INamespaceTypeReference get_SystemNullable();
    public sealed virtual INamespaceTypeReference get_SystemObject();
    public sealed virtual INamespaceTypeReference get_SystemReflectionAssemblySignatureKeyAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeArgumentHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeFieldHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeMethodHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeTypeHandle();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCallConvCdecl();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesCompilerGeneratedAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesExtensionAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesInternalsVisibleToAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsConst();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesIsVolatile();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeCompilerServicesReferenceAssemblyAttribute();
    public sealed virtual INamespaceTypeReference get_SystemRuntimeInteropServicesDllImportAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecurityPermissionsSecurityAction();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySecurityCriticalAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySecuritySafeCriticalAttribute();
    public sealed virtual INamespaceTypeReference get_SystemSecuritySuppressUnmanagedCodeSecurityAttribute();
    public sealed virtual INamespaceTypeReference get_SystemString();
    public sealed virtual INamespaceTypeReference get_SystemType();
    public sealed virtual INamespaceTypeReference get_SystemTypedReference();
    public sealed virtual INamespaceTypeReference get_SystemUInt16();
    public sealed virtual INamespaceTypeReference get_SystemUInt32();
    public sealed virtual INamespaceTypeReference get_SystemUInt64();
    public sealed virtual INamespaceTypeReference get_SystemUInt8();
    public sealed virtual INamespaceTypeReference get_SystemUIntPtr();
    public sealed virtual INamespaceTypeReference get_SystemValueType();
    public sealed virtual INamespaceTypeReference get_SystemVoid();
    public sealed virtual INamespaceTypeReference GetTypeFor(PrimitiveTypeCode typeCode);
    public sealed virtual INamespaceTypeReference get_SystemContextStaticAttribute();
    public sealed virtual INamespaceTypeReference get_SystemThreadStaticAttribute();
}
public interface Microsoft.Cci.IPointerType {
}
public interface Microsoft.Cci.IPointerTypeReference {
    public ITypeReference TargetType { get; }
    public abstract virtual ITypeReference get_TargetType();
}
internal abstract class Microsoft.Cci.IPointerTypeReferenceContract : object {
    public ITypeReference TargetType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual ITypeReference get_TargetType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IPropertyDefinition {
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMetadataConstant DefaultValue { get; }
    public IMethodReference Getter { get; }
    public bool HasDefaultValue { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public IMethodReference Setter { get; }
    public abstract virtual IEnumerable`1<IMethodReference> get_Accessors();
    public abstract virtual IMetadataConstant get_DefaultValue();
    public abstract virtual IMethodReference get_Getter();
    public abstract virtual bool get_HasDefaultValue();
    public abstract virtual bool get_IsRuntimeSpecial();
    public abstract virtual bool get_IsSpecialName();
    public abstract virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public abstract virtual IMethodReference get_Setter();
}
internal abstract class Microsoft.Cci.IPropertyDefinitionContract : object {
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMetadataConstant DefaultValue { get; }
    public IMethodReference Getter { get; }
    public bool HasDefaultValue { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public IMethodReference Setter { get; }
    public CallingConvention CallingConvention { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeDefinition Container { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public IMetadataConstant Constant { get; }
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public sealed virtual IMetadataConstant get_DefaultValue();
    public sealed virtual IMethodReference get_Getter();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual IMethodReference get_Setter();
    public sealed virtual CallingConvention get_CallingConvention();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual IMetadataConstant get_Constant();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IReference {
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public abstract virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
}
internal abstract class Microsoft.Cci.IReferenceContract : object {
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
public interface Microsoft.Cci.IResource {
    public IEnumerable`1<byte> Data { get; }
    public bool IsInExternalFile { get; }
    public IFileReference ExternalFile { get; }
    public abstract virtual IEnumerable`1<byte> get_Data();
    public abstract virtual bool get_IsInExternalFile();
    public abstract virtual IFileReference get_ExternalFile();
}
public interface Microsoft.Cci.IResourceReference {
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IAssemblyReference DefiningAssembly { get; }
    public bool IsPublic { get; }
    public IName Name { get; }
    public IResource Resource { get; }
    public abstract virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public abstract virtual IAssemblyReference get_DefiningAssembly();
    public abstract virtual bool get_IsPublic();
    public abstract virtual IName get_Name();
    public abstract virtual IResource get_Resource();
}
internal abstract class Microsoft.Cci.IResourceReferenceContract : object {
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IAssemblyReference DefiningAssembly { get; }
    public bool IsPublic { get; }
    public IName Name { get; }
    public IResource Resource { get; }
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IAssemblyReference get_DefiningAssembly();
    public sealed virtual bool get_IsPublic();
    public sealed virtual IName get_Name();
    public sealed virtual IResource get_Resource();
}
public interface Microsoft.Cci.IRootUnitNamespace {
}
public interface Microsoft.Cci.IRootUnitNamespaceReference {
}
public interface Microsoft.Cci.IRootUnitSetNamespace {
}
public interface Microsoft.Cci.IScope`1 {
    public IEnumerable`1<MemberType> Members { get; }
    public abstract virtual bool Contains(MemberType member);
    public abstract virtual IEnumerable`1<MemberType> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<MemberType, bool> predicate);
    public abstract virtual IEnumerable`1<MemberType> GetMatchingMembers(Function`2<MemberType, bool> predicate);
    public abstract virtual IEnumerable`1<MemberType> GetMembersNamed(IName name, bool ignoreCase);
    public abstract virtual IEnumerable`1<MemberType> get_Members();
}
internal abstract class Microsoft.Cci.ISCopeContract`1 : object {
    public IEnumerable`1<MemberType> Members { get; }
    public sealed virtual bool Contains(MemberType member);
    public sealed virtual IEnumerable`1<MemberType> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<MemberType, bool> predicate);
    public sealed virtual IEnumerable`1<MemberType> GetMatchingMembers(Function`2<MemberType, bool> predicate);
    public sealed virtual IEnumerable`1<MemberType> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IEnumerable`1<MemberType> get_Members();
}
public interface Microsoft.Cci.IScopeMember`1 {
    public ScopeType ContainingScope { get; }
    public abstract virtual ScopeType get_ContainingScope();
}
internal abstract class Microsoft.Cci.IScopeMemberContract`1 : object {
    public ScopeType ContainingScope { get; }
    public IName Name { get; }
    public sealed virtual ScopeType get_ContainingScope();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.ISectionBlock {
    public PESectionKind PESectionKind { get; }
    public UInt32 Offset { get; }
    public UInt32 Size { get; }
    public IEnumerable`1<byte> Data { get; }
    public abstract virtual PESectionKind get_PESectionKind();
    public abstract virtual UInt32 get_Offset();
    public abstract virtual UInt32 get_Size();
    public abstract virtual IEnumerable`1<byte> get_Data();
}
public interface Microsoft.Cci.ISecurityAttribute {
    public SecurityAction Action { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public abstract virtual SecurityAction get_Action();
    public abstract virtual IEnumerable`1<ICustomAttribute> get_Attributes();
}
public interface Microsoft.Cci.ISignature {
    public CallingConvention CallingConvention { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public abstract virtual CallingConvention get_CallingConvention();
    public abstract virtual bool get_IsStatic();
    public abstract virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public abstract virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public abstract virtual bool get_ReturnValueIsByRef();
    public abstract virtual bool get_ReturnValueIsModified();
    public abstract virtual ITypeReference get_Type();
}
internal abstract class Microsoft.Cci.ISignatureContract : object {
    public CallingConvention CallingConvention { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
}
public interface Microsoft.Cci.ISpecializedEventDefinition {
    public IEventDefinition UnspecializedVersion { get; }
    public abstract virtual IEventDefinition get_UnspecializedVersion();
}
public interface Microsoft.Cci.ISpecializedFieldDefinition {
    public IFieldDefinition UnspecializedVersion { get; }
    public abstract virtual IFieldDefinition get_UnspecializedVersion();
}
public interface Microsoft.Cci.ISpecializedFieldReference {
    public IFieldReference UnspecializedVersion { get; }
    public abstract virtual IFieldReference get_UnspecializedVersion();
}
internal abstract class Microsoft.Cci.ISpecializedFieldReferenceContract : object {
    public IFieldReference UnspecializedVersion { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public UInt32 InternedKey { get; }
    public bool IsModified { get; }
    public bool IsStatic { get; }
    public ITypeReference Type { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IFieldReference get_UnspecializedVersion();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsStatic();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IFieldDefinition get_ResolvedField();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.ISpecializedMethodDefinition {
    public IMethodDefinition UnspecializedVersion { get; }
    public abstract virtual IMethodDefinition get_UnspecializedVersion();
}
internal abstract class Microsoft.Cci.ISpecializedMethodDefinitionContract : object {
    public IMethodDefinition UnspecializedVersion { get; }
    public IMethodBody Body { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsCil { get; }
    public bool IsConstructor { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStaticConstructor { get; }
    public bool IsSynchronized { get; }
    public bool IsVirtual { get; }
    public bool IsUnmanaged { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public bool PreserveSignature { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public bool RequiresSecurityObject { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public IName ReturnValueName { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeDefinition Container { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public bool IsStatic { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    private IMethodReference Microsoft.Cci.ISpecializedMethodReference.UnspecializedVersion { get; }
    public sealed virtual IMethodDefinition get_UnspecializedVersion();
    public sealed virtual IMethodBody get_Body();
    public sealed virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStaticConstructor();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual bool get_RequiresSecurityObject();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public sealed virtual IName get_ReturnValueName();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual bool get_IsStatic();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    private sealed virtual override IMethodReference Microsoft.Cci.ISpecializedMethodReference.get_UnspecializedVersion();
}
public interface Microsoft.Cci.ISpecializedMethodReference {
    public IMethodReference UnspecializedVersion { get; }
    public abstract virtual IMethodReference get_UnspecializedVersion();
}
internal abstract class Microsoft.Cci.ISpecializedMethodReferenceContract : object {
    public IMethodReference UnspecializedVersion { get; }
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public ushort ParameterCount { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public bool IsStatic { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IMethodReference get_UnspecializedVersion();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.ISpecializedNestedTypeDefinition {
    public INestedTypeDefinition UnspecializedVersion { get; }
    public abstract virtual INestedTypeDefinition get_UnspecializedVersion();
}
internal abstract class Microsoft.Cci.ISpecializedNestedTypeDefinitionContract : object {
    public INestedTypeDefinition UnspecializedVersion { get; }
    public ushort GenericParameterCount { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public bool DoesNotInheritGenericParameters { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public ITypeDefinition Container { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    private INestedTypeDefinition Microsoft.Cci.INestedTypeReference.ResolvedType { get; }
    private INestedTypeReference Microsoft.Cci.ISpecializedNestedTypeReference.UnspecializedVersion { get; }
    public sealed virtual INestedTypeDefinition get_UnspecializedVersion();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual bool get_DoesNotInheritGenericParameters();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    private sealed virtual override INestedTypeDefinition Microsoft.Cci.INestedTypeReference.get_ResolvedType();
    private sealed virtual override INestedTypeReference Microsoft.Cci.ISpecializedNestedTypeReference.get_UnspecializedVersion();
}
public interface Microsoft.Cci.ISpecializedNestedTypeReference {
    public INestedTypeReference UnspecializedVersion { get; }
    public abstract virtual INestedTypeReference get_UnspecializedVersion();
}
internal abstract class Microsoft.Cci.ISpecializedNestedTypeReferenceContract : object {
    public INestedTypeReference UnspecializedVersion { get; }
    public ushort GenericParameterCount { get; }
    public INestedTypeDefinition ResolvedType { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public sealed virtual INestedTypeReference get_UnspecializedVersion();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual INestedTypeDefinition get_ResolvedType();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.ISpecializedPropertyDefinition {
    public IPropertyDefinition UnspecializedVersion { get; }
    public abstract virtual IPropertyDefinition get_UnspecializedVersion();
}
public static class Microsoft.Cci.IteratorHelper : object {
    public static bool EnumerablesAreEqual(IEnumerable`1<T> left, IEnumerable`1<T> right);
    public static bool EnumerablesAreEqual(IEnumerable`1<T> left, IEnumerable`1<T> right, IEqualityComparer`1<T> comparer);
    public static T[] GetAsArray(IEnumerable`1<T> enumerable);
    [IteratorStateMachineAttribute("Microsoft.Cci.IteratorHelper/<GetEmptyEnumerable>d__3`1")]
[ObsoleteAttribute("Please use Enumerable<T>.Empty instead")]
public static IEnumerable`1<T> GetEmptyEnumerable();
    public static IEnumerable`1<T> GetReadonly(T[] array);
    [IteratorStateMachineAttribute("Microsoft.Cci.IteratorHelper/<GetSingletonEnumerable>d__6`1")]
public static IEnumerable`1<T> GetSingletonEnumerable(T t);
    [IteratorStateMachineAttribute("Microsoft.Cci.IteratorHelper/<GetConversionEnumerable>d__7`2")]
public static IEnumerable`1<TargetType> GetConversionEnumerable(IEnumerable`1<SourceType> sourceEnumeration);
    [IteratorStateMachineAttribute("Microsoft.Cci.IteratorHelper/<GetConversionEnumerable>d__8`2")]
public static IEnumerable`1<TargetType> GetConversionEnumerable(IEnumerable`1<SourceType> sourceEnumeration, Func`2<SourceType, TargetType> convert);
    [IteratorStateMachineAttribute("Microsoft.Cci.IteratorHelper/<GetFilterEnumerable>d__9`2")]
public static IEnumerable`1<TargetType> GetFilterEnumerable(IEnumerable`1<SourceType> sourceEnumeration);
    public static bool EnumerableIsNotEmpty(IEnumerable`1<T> enumerable);
    public static bool EnumerableIsEmpty(IEnumerable`1<T> enumerable);
    public static bool EnumerableContains(IEnumerable`1<T> enumerable, T element);
    public static UInt32 EnumerableCount(IEnumerable`1<T> enumerable);
    public static bool EnumerableHasLength(IEnumerable`1<T> enumerable, ulong length);
    public static T Single(IEnumerable`1<T> enumerable);
    public static T First(IEnumerable`1<T> enumerable);
    public static bool Any(IEnumerable`1<T> enumerable, Predicate`1<T> pred);
    [IteratorStateMachineAttribute("Microsoft.Cci.IteratorHelper/<Concat>d__18`1")]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> left, IEnumerable`1<T> right);
    [IteratorStateMachineAttribute("Microsoft.Cci.IteratorHelper/<Zip>d__19`3")]
public static IEnumerable`1<TResult> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Function`3<TFirst, TSecond, TResult> resultSelector);
    public static void Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Action`2<TFirst, TSecond> action);
}
public interface Microsoft.Cci.ITokenDecoder {
    public abstract virtual object GetObjectForToken(UInt32 token);
}
public interface Microsoft.Cci.ITypeDefinition {
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public abstract virtual ushort get_Alignment();
    public abstract virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public abstract virtual IEnumerable`1<IEventDefinition> get_Events();
    public abstract virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public abstract virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public abstract virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual bool get_HasDeclarativeSecurity();
    public abstract virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public abstract virtual IGenericTypeInstanceReference get_InstanceType();
    public abstract virtual bool get_IsAbstract();
    public abstract virtual bool get_IsBeforeFieldInit();
    public abstract virtual bool get_IsClass();
    public abstract virtual bool get_IsComObject();
    public abstract virtual bool get_IsDelegate();
    public abstract virtual bool get_IsGeneric();
    public abstract virtual bool get_IsInterface();
    public abstract virtual bool get_IsReferenceType();
    public abstract virtual bool get_IsRuntimeSpecial();
    public abstract virtual bool get_IsSerializable();
    public abstract virtual bool get_IsSpecialName();
    public abstract virtual bool get_IsStruct();
    public abstract virtual bool get_IsSealed();
    public abstract virtual bool get_IsStatic();
    public abstract virtual LayoutKind get_Layout();
    public abstract virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public abstract virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public abstract virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public abstract virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public abstract virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public abstract virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public abstract virtual UInt32 get_SizeOf();
    public abstract virtual StringFormatKind get_StringFormat();
    public abstract virtual ITypeReference get_UnderlyingType();
}
internal abstract class Microsoft.Cci.ITypeDefinitionContract : object {
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool HasDeclarativeSecurity { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsBeforeFieldInit { get; }
    public bool IsClass { get; }
    public bool IsComObject { get; }
    public bool IsDelegate { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSerializable { get; }
    public bool IsSpecialName { get; }
    public bool IsStruct { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public LayoutKind Layout { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public UInt32 SizeOf { get; }
    public StringFormatKind StringFormat { get; }
    public ITypeReference UnderlyingType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStruct();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual ITypeReference get_UnderlyingType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.ITypeDefinitionMember {
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public abstract virtual ITypeDefinition get_ContainingTypeDefinition();
    public abstract virtual TypeMemberVisibility get_Visibility();
}
internal abstract class Microsoft.Cci.ITypeDefinitionMemberContract : object {
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ITypeDefinition Container { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ITypeDefinition get_Container();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.ITypeMemberReference {
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public abstract virtual ITypeReference get_ContainingType();
    public abstract virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
}
internal abstract class Microsoft.Cci.ITypeMemberReferenceContract : object {
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.ITypeReference {
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public abstract virtual IAliasForType get_AliasForType();
    public abstract virtual UInt32 get_InternedKey();
    public abstract virtual bool get_IsAlias();
    public abstract virtual bool get_IsEnum();
    public abstract virtual bool get_IsValueType();
    public abstract virtual IPlatformType get_PlatformType();
    public abstract virtual ITypeDefinition get_ResolvedType();
    public abstract virtual PrimitiveTypeCode get_TypeCode();
}
internal abstract class Microsoft.Cci.ITypeReferenceContract : object {
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    public ITypeDefinition ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IUnit {
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public IPlatformType PlatformType { get; }
    public string Location { get; }
    public IEnumerable`1<IPESection> UninterpretedSections { get; }
    public IRootUnitNamespace UnitNamespaceRoot { get; }
    public IEnumerable`1<IUnitReference> UnitReferences { get; }
    public abstract virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public abstract virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public abstract virtual IPlatformType get_PlatformType();
    public abstract virtual string get_Location();
    public abstract virtual IEnumerable`1<IPESection> get_UninterpretedSections();
    public abstract virtual IRootUnitNamespace get_UnitNamespaceRoot();
    public abstract virtual IEnumerable`1<IUnitReference> get_UnitReferences();
}
internal abstract class Microsoft.Cci.IUnitContract : object {
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public IPlatformType PlatformType { get; }
    public string Location { get; }
    public IEnumerable`1<IPESection> UninterpretedSections { get; }
    public IRootUnitNamespace UnitNamespaceRoot { get; }
    public IEnumerable`1<IUnitReference> UnitReferences { get; }
    public INamespaceDefinition NamespaceRoot { get; }
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual string get_Location();
    public sealed virtual IEnumerable`1<IPESection> get_UninterpretedSections();
    public sealed virtual IRootUnitNamespace get_UnitNamespaceRoot();
    public sealed virtual IEnumerable`1<IUnitReference> get_UnitReferences();
    public sealed virtual INamespaceDefinition get_NamespaceRoot();
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IUnitNamespace {
    public IUnit Unit { get; }
    public abstract virtual IUnit get_Unit();
}
internal abstract class Microsoft.Cci.IUnitNamespaceContract : object {
    public IUnit Unit { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    private IUnitReference Microsoft.Cci.IUnitNamespaceReference.Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public sealed virtual IUnit get_Unit();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
    private sealed virtual override IUnitReference Microsoft.Cci.IUnitNamespaceReference.get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IUnitNamespaceReference {
    public IUnitReference Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public abstract virtual IUnitReference get_Unit();
    public abstract virtual IUnitNamespace get_ResolvedUnitNamespace();
}
internal abstract class Microsoft.Cci.IUnitNamespaceReferenceContract : object {
    public IUnitReference Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public sealed virtual IUnitReference get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IUnitReference {
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public abstract virtual IUnit get_ResolvedUnit();
    public abstract virtual UnitIdentity get_UnitIdentity();
}
internal abstract class Microsoft.Cci.IUnitReferenceContract : object {
    public IUnit ResolvedUnit { get; }
    public UnitIdentity UnitIdentity { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IUnit get_ResolvedUnit();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
}
public interface Microsoft.Cci.IUnitSet {
    public IEnumerable`1<IUnit> Units { get; }
    public IUnitSetNamespace UnitSetNamespaceRoot { get; }
    public abstract virtual bool Contains(IUnit unit);
    public abstract virtual IEnumerable`1<IUnit> get_Units();
    public abstract virtual IUnitSetNamespace get_UnitSetNamespaceRoot();
}
public interface Microsoft.Cci.IUnitSetNamespace {
    public IUnitSet UnitSet { get; }
    public abstract virtual IUnitSet get_UnitSet();
}
internal abstract class Microsoft.Cci.IUnitSetNamespaceContract : object {
    public IUnitSet UnitSet { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IEnumerable`1<INamespaceMember> Members { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public sealed virtual IUnitSet get_UnitSet();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IEnumerable`1<INamespaceMember> get_Members();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual bool Contains(INamespaceMember member);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMatchingMembers(Function`2<INamespaceMember, bool> predicate);
    public sealed virtual IEnumerable`1<INamespaceMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
}
public interface Microsoft.Cci.IWin32Resource {
    public string TypeName { get; }
    public int TypeId { get; }
    public string Name { get; }
    public int Id { get; }
    public UInt32 LanguageId { get; }
    public UInt32 CodePage { get; }
    public IEnumerable`1<byte> Data { get; }
    public abstract virtual string get_TypeName();
    public abstract virtual int get_TypeId();
    public abstract virtual string get_Name();
    public abstract virtual int get_Id();
    public abstract virtual UInt32 get_LanguageId();
    public abstract virtual UInt32 get_CodePage();
    public abstract virtual IEnumerable`1<byte> get_Data();
}
public enum Microsoft.Cci.LayoutKind : Enum {
    public int value__;
    public static LayoutKind Auto;
    public static LayoutKind Sequential;
    public static LayoutKind Explicit;
}
public enum Microsoft.Cci.Machine : Enum {
    public ushort value__;
    public static Machine Unknown;
    public static Machine I386;
    public static Machine R3000;
    public static Machine R4000;
    public static Machine R10000;
    public static Machine WCEMIPSV2;
    public static Machine Alpha;
    public static Machine SH3;
    public static Machine SH3DSP;
    public static Machine SH3E;
    public static Machine SH4;
    public static Machine SH5;
    public static Machine ARM;
    public static Machine Thumb;
    public static Machine AM33;
    public static Machine PowerPC;
    public static Machine PowerPCFP;
    public static Machine IA64;
    public static Machine MIPS16;
    public static Machine Alpha64;
    public static Machine MIPSFPU;
    public static Machine MIPSFPU16;
    public static Machine AXP64;
    public static Machine Tricore;
    public static Machine CEF;
    public static Machine EBC;
    public static Machine AMD64;
    public static Machine M32R;
    public static Machine CEE;
}
public static class Microsoft.Cci.MemberHelper : object {
    public static GenericMethodParameterInformationComparer GenericMethodParameterEqualityComparer;
    public static GenericMethodParameterInformationComparer ResolvingGenericMethodParameterEqualityComparer;
    public static ParameterInformationComparer ParameterInformationComparer;
    public static ParameterInformationComparer ResolvingParameterInformationComparer;
    private static MemberHelper();
    public static UInt32 ComputeFieldOffset(ITypeDefinitionMember item, ITypeDefinition containingTypeDefinition);
    [IteratorStateMachineAttribute("Microsoft.Cci.MemberHelper/<GetExplicitlyOverriddenMethods>d__1")]
public static IEnumerable`1<IMethodReference> GetExplicitlyOverriddenMethods(IMethodDefinition overridingMethod);
    public static UInt32 GetFieldBitOffset(IFieldDefinition field);
    public static UInt32 GetFieldOffset(IFieldDefinition field);
    public static bool MethodsAreEquivalent(IMethodDefinition m1, IMethodDefinition m2);
    [IteratorStateMachineAttribute("Microsoft.Cci.MemberHelper/<GetImplicitlyImplementedInterfaceMethods>d__5")]
public static IEnumerable`1<IMethodDefinition> GetImplicitlyImplementedInterfaceMethods(IMethodDefinition implementingMethod);
    public static IMethodDefinition GetImplicitlyOverriddenBaseClassMethod(IMethodDefinition derivedClassMethod);
    private static IMethodDefinition GetImplicitlyOverriddenBaseClassMethod(IMethodDefinition derivedClassMethod, ITypeDefinition baseClass);
    public static IMethodDefinition GetImplicitlyOverridingDerivedClassMethod(IMethodDefinition baseClassMethod, ITypeDefinition derivedClass);
    public static string GetMemberSignature(ITypeMemberReference member, NameFormattingOptions formattingOptions);
    public static string GetMethodSignature(IMethodReference method, NameFormattingOptions formattingOptions);
    public static bool IsVisibleOutsideAssembly(ITypeDefinitionMember typeDefinitionMember);
    private static bool IsExplicitImplementationVisible(IMethodReference methodReference, ITypeDefinition containingTypeDefinition);
    public static bool IsVolatile(IFieldDefinition field);
    public static bool SignaturesAreEqual(ISignature signature1, ISignature signature2, bool resolveTypes);
    public static bool GenericMethodSignaturesAreEqual(ISignature method1, ISignature method2, bool resolveTypes);
    public static IEventDefinition Unspecialize(IEventDefinition potentiallySpecializedEventDefinition);
    public static IFieldReference Unspecialize(IFieldReference potentiallySpecializedFieldReference);
    public static IFieldDefinition Unspecialize(IFieldDefinition potentiallySpecializedFieldDefinition);
    public static IMethodReference UninstantiateAndUnspecialize(IMethodReference potentiallySpecializedMethodReference);
    public static IMethodDefinition UninstantiateAndUnspecialize(IMethodDefinition potentiallySpecializedMethod);
    public static IPropertyDefinition Unspecialize(IPropertyDefinition potentiallySpecializedPropertyDefinition);
}
public class Microsoft.Cci.MemoryMappedFile : object {
    private Byte* buffer;
    private UInt32 length;
    private IBinaryDocument binaryDocument;
    private Byte* Microsoft.Cci.IBinaryDocumentMemoryBlock.Pointer { get; }
    private UInt32 Microsoft.Cci.IBinaryDocumentMemoryBlock.Length { get; }
    private IBinaryDocument Microsoft.Cci.IBinaryDocumentMemoryBlock.BinaryDocument { get; }
    private MemoryMappedFile(IBinaryDocument binaryDocument, Byte* buffer, UInt32 length);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Close();
    private sealed virtual override Byte* Microsoft.Cci.IBinaryDocumentMemoryBlock.get_Pointer();
    private sealed virtual override UInt32 Microsoft.Cci.IBinaryDocumentMemoryBlock.get_Length();
    private sealed virtual override IBinaryDocument Microsoft.Cci.IBinaryDocumentMemoryBlock.get_BinaryDocument();
    public static MemoryMappedFile CreateMemoryMappedFile(string localFileName, IBinaryDocument binaryDocument);
    private static void OpenFileMemoryMap(string filename, Byte*& buffer, UInt32& length);
    private static IntPtr CreateFileMapping(IntPtr hFile, IntPtr lpAttributes, PageAccess flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    private static Void* MapViewOfFile(IntPtr hFileMappingObject, FileMapAccess dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);
    private static bool UnmapViewOfFile(Void* lpBaseAddress);
    private static bool CloseHandle(IntPtr hObject);
}
public abstract class Microsoft.Cci.MetadataHostEnvironment : object {
    private List`1<string> libPaths;
    [CompilerGeneratedAttribute]
private bool <SearchInGAC>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<ErrorEventArgs> Errors;
    private AssemblyIdentity contractAssemblySymbolicIdentity;
    private SetOfObjects coreIdentities;
    private AssemblyIdentity coreAssemblySymbolicIdentity;
    private AssemblyIdentity systemCoreAssemblySymbolicIdentity;
    private IInternFactory internFactory;
    private INameTable nameTable;
    private IPlatformType platformType;
    private byte pointerSize;
    private Dictionary`2<UnitIdentity, IUnit> unitCache;
    protected List`1<string> LibPaths { get; }
    public bool SearchInGAC { get; protected set; }
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    protected SetOfObjects CoreIdentities { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    public AssemblyIdentity SystemCoreAssemblySymbolicIdentity { get; }
    public IInternFactory InternFactory { get; }
    public IEnumerable`1<IUnit> LoadedUnits { get; }
    public INameTable NameTable { get; }
    public IPlatformType PlatformType { get; }
    public byte PointerSize { get; }
    public bool PreserveILLocations { get; }
    protected MetadataHostEnvironment(INameTable nameTable, IInternFactory factory, byte pointerSize, IEnumerable`1<string> searchPaths, bool searchInGAC);
    private void ObjectInvariant();
    public virtual void AddLibPath(string path);
    protected List`1<string> get_LibPaths();
    [CompilerGeneratedAttribute]
public bool get_SearchInGAC();
    [CompilerGeneratedAttribute]
protected void set_SearchInGAC(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Errors(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Errors(EventHandler`1<ErrorEventArgs> value);
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    protected SetOfObjects get_CoreIdentities();
    protected virtual AssemblyIdentity GetContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    protected virtual AssemblyIdentity GetCoreAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_SystemCoreAssemblySymbolicIdentity();
    protected virtual AssemblyIdentity GetSystemCoreAssemblySymbolicIdentity();
    public sealed virtual IAssembly FindAssembly(AssemblyIdentity assemblyIdentity);
    public sealed virtual IModule FindModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit FindUnit(UnitIdentity unitIdentity);
    public static string GetLocalPath(AssemblyName assemblyName);
    public sealed virtual IInternFactory get_InternFactory();
    public virtual IAssembly LoadAssembly(AssemblyIdentity assemblyIdentity);
    public virtual IModule LoadModule(ModuleIdentity moduleIdentity);
    public sealed virtual IUnit LoadUnit(UnitIdentity unitIdentity);
    public abstract virtual IUnit LoadUnitFrom(string location);
    public sealed virtual IEnumerable`1<IUnit> get_LoadedUnits();
    public sealed virtual INameTable get_NameTable();
    public sealed virtual IPlatformType get_PlatformType();
    protected virtual IPlatformType GetPlatformType();
    public sealed virtual byte get_PointerSize();
    protected virtual byte GetTargetPlatformPointerSize();
    protected virtual AssemblyIdentity Probe(string probeDir, AssemblyIdentity referencedAssembly);
    public virtual AssemblyIdentity ProbeAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    public virtual ModuleIdentity ProbeModuleReference(IUnit referringUnit, ModuleIdentity referencedModule);
    public void RegisterAsLatest(IUnit unit);
    public bool RemoveUnit(UnitIdentity unitIdentity);
    public virtual void ReportErrors(ErrorEventArgs errorEventArguments);
    protected void SynchronousReportErrors(object state);
    public sealed virtual void ReportError(IErrorMessage error);
    public virtual AssemblyIdentity UnifyAssembly(AssemblyIdentity assemblyIdentity);
    public virtual AssemblyIdentity UnifyAssembly(IAssemblyReference assemblyReference);
    public virtual bool get_PreserveILLocations();
}
internal abstract class Microsoft.Cci.MetadataReader.AttributeDecoder : object {
    internal bool decodeFailed;
    internal bool morePermutationsArePossible;
    protected PEFileToObjectModel PEFileToObjectModel;
    protected MemoryReader SignatureMemoryReader;
    protected AttributeDecoder(PEFileToObjectModel peFileToObjectModel, MemoryReader signatureMemoryReader);
    protected object GetPrimitiveValue(ITypeReference type);
    protected string GetSerializedString();
    protected ITypeReference GetFieldOrPropType();
    protected TypeName ConvertToTypeName(string serializedTypeName);
    protected ExpressionBase ReadSerializedValue(ITypeReference type);
}
internal class Microsoft.Cci.MetadataReader.CoreTypes : object {
    internal IMetadataReaderNamedTypeReference SystemEnum;
    internal IMetadataReaderNamedTypeReference SystemValueType;
    internal IMetadataReaderNamedTypeReference SystemMulticastDelegate;
    internal IMetadataReaderNamedTypeReference SystemType;
    internal IMetadataReaderNamedTypeReference SystemParamArrayAttribute;
    internal CoreTypes(PEFileToObjectModel peFileToObjectModel);
}
internal class Microsoft.Cci.MetadataReader.CustomAttributeDecoder : AttributeDecoder {
    internal ICustomAttribute CustomAttribute;
    internal CustomAttributeDecoder(PEFileToObjectModel peFileToObjectModel, MemoryReader signatureMemoryReader, UInt32 customAttributeRowId, IMethodReference attributeConstructor);
}
public class Microsoft.Cci.MetadataReader.DefaultWindowsRuntimeHost : WindowsRuntimeMetadataReaderHost {
    protected PeReader peReader;
    public DefaultWindowsRuntimeHost(bool projectToCLRTypes);
    public DefaultWindowsRuntimeHost(INameTable nameTable, bool projectToCLRTypes);
    public virtual IUnit LoadUnitFrom(string location);
}
internal class Microsoft.Cci.MetadataReader.Errors.DirectoryLocation : object {
    internal IBinaryDocument binaryDocument;
    internal Directories directory;
    internal UInt32 offset;
    public IBinaryDocument BinaryDocument { get; }
    public string DirectoryName { get; }
    public UInt32 Offset { get; }
    public IDocument Document { get; }
    internal DirectoryLocation(IBinaryDocument binaryDocument, Directories directory, UInt32 offset);
    public sealed virtual IBinaryDocument get_BinaryDocument();
    public sealed virtual string get_DirectoryName();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual IDocument get_Document();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public interface Microsoft.Cci.MetadataReader.Errors.IDirectoryLocation {
    public IBinaryDocument BinaryDocument { get; }
    public string DirectoryName { get; }
    public UInt32 Offset { get; }
    public abstract virtual IBinaryDocument get_BinaryDocument();
    public abstract virtual string get_DirectoryName();
    public abstract virtual UInt32 get_Offset();
}
public interface Microsoft.Cci.MetadataReader.Errors.IMetadataLocation {
    public IBinaryDocument BinaryDocument { get; }
    public string TableName { get; }
    public int RowId { get; }
    public abstract virtual IBinaryDocument get_BinaryDocument();
    public abstract virtual string get_TableName();
    public abstract virtual int get_RowId();
}
public interface Microsoft.Cci.MetadataReader.Errors.IMetadataStreamLocation {
    public IBinaryDocument BinaryDocument { get; }
    public string StreamName { get; }
    public UInt32 Offset { get; }
    public abstract virtual IBinaryDocument get_BinaryDocument();
    public abstract virtual string get_StreamName();
    public abstract virtual UInt32 get_Offset();
}
internal class Microsoft.Cci.MetadataReader.Errors.MetadataErrorContainer : object {
    private PeReader MetadataReader;
    private IBinaryDocument BinaryDocument;
    private MultiHashtable`1<MetadataReaderErrorMessage> ErrorList;
    internal MetadataErrorContainer(PeReader metadataReader, IBinaryDocument binaryDocument);
    private void AddMetadataReaderErrorMessage(MetadataReaderErrorMessage errMessage);
    internal void AddBinaryError(UInt32 offset, MetadataReaderErrorKind errorKind);
    internal void AddDirectoryError(Directories directory, UInt32 offset, MetadataReaderErrorKind errorKind);
    internal void AddMetadataStreamError(string streamName, UInt32 offset, MetadataReaderErrorKind errorKind);
    internal void AddMetadataError(TableIndices tableIndex, UInt32 rowId, MetadataReaderErrorKind errorKind);
    internal void AddILError(IMethodDefinition methodDefinition, UInt32 offset, MetadataReaderErrorKind errorKind);
}
internal class Microsoft.Cci.MetadataReader.Errors.MetadataLocation : object {
    internal IBinaryDocument binaryDocument;
    internal TableIndices tableIndex;
    internal UInt32 rowId;
    public IBinaryDocument BinaryDocument { get; }
    public string TableName { get; }
    public int RowId { get; }
    public IDocument Document { get; }
    internal MetadataLocation(IBinaryDocument binaryDocument, TableIndices tableIndex, UInt32 rowId);
    public sealed virtual IBinaryDocument get_BinaryDocument();
    public sealed virtual string get_TableName();
    public sealed virtual int get_RowId();
    public sealed virtual IDocument get_Document();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal enum Microsoft.Cci.MetadataReader.Errors.MetadataReaderErrorKind : Enum {
    public int value__;
    public static MetadataReaderErrorKind FileSizeTooSmall;
    public static MetadataReaderErrorKind DosHeader;
    public static MetadataReaderErrorKind PESignature;
    public static MetadataReaderErrorKind COFFHeaderTooSmall;
    public static MetadataReaderErrorKind UnknownPEMagic;
    public static MetadataReaderErrorKind OptionalHeaderStandardFields32TooSmall;
    public static MetadataReaderErrorKind OptionalHeaderStandardFields64TooSmall;
    public static MetadataReaderErrorKind OptionalHeaderNTAdditionalFields32TooSmall;
    public static MetadataReaderErrorKind OptionalHeaderNTAdditionalFields64TooSmall;
    public static MetadataReaderErrorKind OptionalHeaderDirectoryEntriesTooSmall;
    public static MetadataReaderErrorKind SectionHeadersTooSmall;
    public static MetadataReaderErrorKind NotEnoughSpaceForCOR20HeaderTableDirectory;
    public static MetadataReaderErrorKind COR20HeaderTooSmall;
    public static MetadataReaderErrorKind NotEnoughSpaceForMetadataDirectory;
    public static MetadataReaderErrorKind MetadataHeaderTooSmall;
    public static MetadataReaderErrorKind MetadataSignature;
    public static MetadataReaderErrorKind NotEnoughSpaceForVersionString;
    public static MetadataReaderErrorKind StorageHeaderTooSmall;
    public static MetadataReaderErrorKind StreamHeaderTooSmall;
    public static MetadataReaderErrorKind NotEnoughSpaceForStreamHeaderName;
    public static MetadataReaderErrorKind NotEnoughSpaceForStringStream;
    public static MetadataReaderErrorKind NotEnoughSpaceForBlobStream;
    public static MetadataReaderErrorKind NotEnoughSpaceForGUIDStream;
    public static MetadataReaderErrorKind NotEnoughSpaceForUserStringStream;
    public static MetadataReaderErrorKind NotEnoughSpaceForMetadataStream;
    public static MetadataReaderErrorKind UnknownMetadataStream;
    public static MetadataReaderErrorKind MetadataTableHeaderTooSmall;
    public static MetadataReaderErrorKind UnknownVersionOfMetadata;
    public static MetadataReaderErrorKind UnknownTables;
    public static MetadataReaderErrorKind SomeRequiredTablesNotSorted;
    public static MetadataReaderErrorKind IllegalTablesInCompressedMetadataStream;
    public static MetadataReaderErrorKind TableRowCountSpaceTooSmall;
    public static MetadataReaderErrorKind MetadataTablesTooSmall;
    public static MetadataReaderErrorKind NestedClassParentError;
    public static MetadataReaderErrorKind UnknownILInstruction;
}
internal class Microsoft.Cci.MetadataReader.Errors.MetadataReaderErrorMessage : object {
    private object errorReporter;
    internal ILocation location;
    internal MetadataReaderErrorKind mrwErrorKind;
    public object ErrorReporter { get; }
    public string ErrorReporterIdentifier { get; }
    public long Code { get; }
    public bool IsWarning { get; }
    public string Message { get; }
    public ILocation Location { get; }
    public IEnumerable`1<ILocation> RelatedLocations { get; }
    internal MetadataReaderErrorMessage(object errorReporter, ILocation location, MetadataReaderErrorKind mrwErrorKind);
    public sealed virtual object get_ErrorReporter();
    public sealed virtual string get_ErrorReporterIdentifier();
    public sealed virtual long get_Code();
    public sealed virtual bool get_IsWarning();
    public sealed virtual string get_Message();
    public sealed virtual ILocation get_Location();
    public sealed virtual IEnumerable`1<ILocation> get_RelatedLocations();
}
internal class Microsoft.Cci.MetadataReader.Errors.MetadataStreamLocation : object {
    internal IBinaryDocument binaryDocument;
    internal string streamName;
    internal UInt32 offset;
    public IBinaryDocument BinaryDocument { get; }
    public string StreamName { get; }
    public UInt32 Offset { get; }
    public IDocument Document { get; }
    internal MetadataStreamLocation(IBinaryDocument binaryDocument, string streamName, UInt32 offset);
    public sealed virtual IBinaryDocument get_BinaryDocument();
    public sealed virtual string get_StreamName();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual IDocument get_Document();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.Cci.MetadataReader.FieldSignatureConverter : SignatureConverter {
    internal byte FirstByte;
    internal ITypeReference TypeReference;
    internal IEnumerable`1<ICustomModifier> customModifiers;
    internal FieldSignatureConverter(PEFileToObjectModel peFileToObjectModel, MetadataObject moduleField, MemoryReader signatureMemoryReader);
}
internal enum Microsoft.Cci.MetadataReader.LoadState : Enum {
    public byte value__;
    public static LoadState Uninitialized;
    public static LoadState Loading;
    public static LoadState Loaded;
}
internal class Microsoft.Cci.MetadataReader.MethodBody.CilExceptionInformation : object {
    internal HandlerKind HandlerKind;
    internal ITypeReference ExceptionType;
    internal UInt32 TryStartOffset;
    internal UInt32 TryEndOffset;
    internal UInt32 FilterDecisionStartOffset;
    internal UInt32 HandlerStartOffset;
    internal UInt32 HandlerEndOffset;
    private HandlerKind Microsoft.Cci.IOperationExceptionInformation.HandlerKind { get; }
    private ITypeReference Microsoft.Cci.IOperationExceptionInformation.ExceptionType { get; }
    private UInt32 Microsoft.Cci.IOperationExceptionInformation.TryStartOffset { get; }
    private UInt32 Microsoft.Cci.IOperationExceptionInformation.TryEndOffset { get; }
    private UInt32 Microsoft.Cci.IOperationExceptionInformation.FilterDecisionStartOffset { get; }
    private UInt32 Microsoft.Cci.IOperationExceptionInformation.HandlerStartOffset { get; }
    private UInt32 Microsoft.Cci.IOperationExceptionInformation.HandlerEndOffset { get; }
    internal CilExceptionInformation(HandlerKind handlerKind, ITypeReference exceptionType, UInt32 tryStartOffset, UInt32 tryEndOffset, UInt32 filterDecisionStartOffset, UInt32 handlerStartOffset, UInt32 handlerEndOffset);
    private sealed virtual override HandlerKind Microsoft.Cci.IOperationExceptionInformation.get_HandlerKind();
    private sealed virtual override ITypeReference Microsoft.Cci.IOperationExceptionInformation.get_ExceptionType();
    private sealed virtual override UInt32 Microsoft.Cci.IOperationExceptionInformation.get_TryStartOffset();
    private sealed virtual override UInt32 Microsoft.Cci.IOperationExceptionInformation.get_TryEndOffset();
    private sealed virtual override UInt32 Microsoft.Cci.IOperationExceptionInformation.get_FilterDecisionStartOffset();
    private sealed virtual override UInt32 Microsoft.Cci.IOperationExceptionInformation.get_HandlerStartOffset();
    private sealed virtual override UInt32 Microsoft.Cci.IOperationExceptionInformation.get_HandlerEndOffset();
}
internal class Microsoft.Cci.MetadataReader.MethodBody.CilInstruction : object {
    internal OperationCode CilOpCode;
    private MethodBodyDocument document;
    private UInt32 offset;
    internal object Value;
    public OperationCode OperationCode { get; }
    private UInt32 Microsoft.Cci.IOperation.Offset { get; }
    private ILocation Microsoft.Cci.IOperation.Location { get; }
    private object Microsoft.Cci.IOperation.Value { get; }
    public IMethodDefinition MethodDefinition { get; }
    private UInt32 Microsoft.Cci.IILLocation.Offset { get; }
    public IDocument Document { get; }
    internal CilInstruction(OperationCode cilOpCode, MethodBodyDocument document, UInt32 offset, object value);
    public sealed virtual OperationCode get_OperationCode();
    private sealed virtual override UInt32 Microsoft.Cci.IOperation.get_Offset();
    private sealed virtual override ILocation Microsoft.Cci.IOperation.get_Location();
    private sealed virtual override object Microsoft.Cci.IOperation.get_Value();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    private sealed virtual override UInt32 Microsoft.Cci.IILLocation.get_Offset();
    public sealed virtual IDocument get_Document();
}
internal class Microsoft.Cci.MetadataReader.MethodBody.ILReader : object {
    internal static EnumerableArrayWrapper`2<LocalVariableDefinition, ILocalDefinition> EmptyLocalVariables;
    private static HandlerKind[] HandlerKindMap;
    internal PEFileToObjectModel PEFileToObjectModel;
    internal MethodDefinition MethodDefinition;
    internal MethodBody MethodBody;
    private MethodIL MethodIL;
    internal UInt32 EndOfMethodOffset;
    internal ILReader(MethodDefinition methodDefinition, MethodIL methodIL);
    private static ILReader();
    private bool LoadLocalSignature();
    private string GetUserStringForToken(UInt32 token);
    private FunctionPointerType GetStandAloneMethodSignature(UInt32 standAloneMethodToken);
    private IParameterDefinition GetParameter(UInt32 rawParamNum);
    private ILocalDefinition GetLocal(UInt32 rawLocNum);
    private IMethodReference GetMethod(UInt32 methodToken);
    private IFieldReference GetField(UInt32 fieldToken);
    private ITypeReference GetType(UInt32 typeToken);
    private IFunctionPointerTypeReference GetFunctionPointerType(UInt32 standAloneSigToken);
    private object GetRuntimeHandleFromToken(UInt32 token);
    private bool PopulateCilInstructions();
    private static int CountCilInstructions(MemoryReader memReader);
    private bool PopulateExceptionInformation();
    internal bool ReadIL();
}
internal class Microsoft.Cci.MetadataReader.MethodBody.LocalVariableDefinition : object {
    private MethodBody methodBody;
    private IEnumerable`1<ICustomModifier> customModifiers;
    private bool isPinned;
    private bool isReference;
    private UInt32 index;
    private ITypeReference typeReference;
    private IName name;
    private IMetadataConstant Microsoft.Cci.ILocalDefinition.CompileTimeValue { get; }
    private IEnumerable`1<ICustomModifier> Microsoft.Cci.ILocalDefinition.CustomModifiers { get; }
    private bool Microsoft.Cci.ILocalDefinition.IsConstant { get; }
    private bool Microsoft.Cci.ILocalDefinition.IsModified { get; }
    private bool Microsoft.Cci.ILocalDefinition.IsPinned { get; }
    private bool Microsoft.Cci.ILocalDefinition.IsReference { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IMethodDefinition MethodDefinition { get; }
    public ITypeReference Type { get; }
    public IName Name { get; }
    internal LocalVariableDefinition(MethodBody methodBody, IEnumerable`1<ICustomModifier> customModifiers, bool isPinned, bool isReference, UInt32 index, ITypeReference typeReference);
    public virtual string ToString();
    private sealed virtual override IMetadataConstant Microsoft.Cci.ILocalDefinition.get_CompileTimeValue();
    private sealed virtual override IEnumerable`1<ICustomModifier> Microsoft.Cci.ILocalDefinition.get_CustomModifiers();
    private sealed virtual override bool Microsoft.Cci.ILocalDefinition.get_IsConstant();
    private sealed virtual override bool Microsoft.Cci.ILocalDefinition.get_IsModified();
    private sealed virtual override bool Microsoft.Cci.ILocalDefinition.get_IsPinned();
    private sealed virtual override bool Microsoft.Cci.ILocalDefinition.get_IsReference();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IName get_Name();
}
internal class Microsoft.Cci.MetadataReader.MethodBody.LocalVariableSignatureConverter : SignatureConverter {
    internal ILocalDefinition[] LocalVariables;
    private MethodBody OwningMethodBody;
    internal LocalVariableSignatureConverter(PEFileToObjectModel peFileToObjectModel, MethodBody owningMethodBody, MemoryReader signatureMemoryReader);
    private LocalVariableDefinition GetLocalVariable(UInt32 index);
}
internal class Microsoft.Cci.MetadataReader.MethodBody.MethodBody : object {
    internal MethodDefinition MethodDefinition;
    internal ILocalDefinition[] LocalVariables;
    private IEnumerable`1<IOperation> cilInstructions;
    private IEnumerable`1<IOperationExceptionInformation> cilExceptionInformation;
    internal bool IsLocalsInited;
    internal ushort StackSize;
    private UInt32 bodySize;
    private IMethodDefinition Microsoft.Cci.IMethodBody.MethodDefinition { get; }
    private IEnumerable`1<ILocalDefinition> Microsoft.Cci.IMethodBody.LocalVariables { get; }
    private bool Microsoft.Cci.IMethodBody.LocalsAreZeroed { get; }
    public IEnumerable`1<IOperation> Operations { get; }
    public IEnumerable`1<ITypeDefinition> PrivateHelperTypes { get; }
    public ushort MaxStack { get; }
    public IEnumerable`1<IOperationExceptionInformation> OperationExceptionInformation { get; }
    public UInt32 Size { get; }
    internal MethodBody(MethodDefinition methodDefinition, bool isLocalsInited, ushort stackSize, UInt32 bodySize);
    internal void SetLocalVariables(ILocalDefinition[] localVariables);
    internal void SetCilInstructions(IOperation[] cilInstructions);
    internal void SetExceptionInformation(IOperationExceptionInformation[] cilExceptionInformation);
    private sealed virtual override IMethodDefinition Microsoft.Cci.IMethodBody.get_MethodDefinition();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    private sealed virtual override IEnumerable`1<ILocalDefinition> Microsoft.Cci.IMethodBody.get_LocalVariables();
    private sealed virtual override bool Microsoft.Cci.IMethodBody.get_LocalsAreZeroed();
    public sealed virtual IEnumerable`1<IOperation> get_Operations();
    public sealed virtual IEnumerable`1<ITypeDefinition> get_PrivateHelperTypes();
    public sealed virtual ushort get_MaxStack();
    public sealed virtual IEnumerable`1<IOperationExceptionInformation> get_OperationExceptionInformation();
    public sealed virtual UInt32 get_Size();
}
internal class Microsoft.Cci.MetadataReader.MethodBody.StandAloneMethodSignatureConverter : SignatureConverter {
    internal byte FirstByte;
    internal IEnumerable`1<ICustomModifier> ReturnCustomModifiers;
    internal ITypeReference ReturnTypeReference;
    internal bool IsReturnByReference;
    internal IEnumerable`1<IParameterTypeInformation> RequiredParameters;
    internal IEnumerable`1<IParameterTypeInformation> VarArgParameters;
    internal StandAloneMethodSignatureConverter(PEFileToObjectModel peFileToObjectModel, MethodDefinition moduleMethodDef, MemoryReader signatureMemoryReader);
}
public class Microsoft.Cci.MetadataReader.MethodBodyDocument : object {
    internal MethodDefinition method;
    public string Location { get; }
    public UInt32 MethodToken { get; }
    public IName Name { get; }
    public ITokenDecoder TokenDecoder { get; }
    internal MethodBodyDocument(MethodDefinition method);
    public ITypeReference GetTypeFromToken(UInt32 standAloneSignatureToken);
    public sealed virtual string get_Location();
    public UInt32 get_MethodToken();
    public sealed virtual IName get_Name();
    public ITokenDecoder get_TokenDecoder();
}
internal class Microsoft.Cci.MetadataReader.MethodBodyLocation : object {
    private MethodBodyDocument document;
    private UInt32 offset;
    public MethodBodyDocument Document { get; }
    public IMethodDefinition MethodDefinition { get; }
    public UInt32 Offset { get; }
    private IDocument Microsoft.Cci.ILocation.Document { get; }
    internal MethodBodyLocation(MethodBodyDocument document, UInt32 offset);
    public MethodBodyDocument get_Document();
    public sealed virtual IMethodDefinition get_MethodDefinition();
    public sealed virtual UInt32 get_Offset();
    private sealed virtual override IDocument Microsoft.Cci.ILocation.get_Document();
}
internal class Microsoft.Cci.MetadataReader.MethodDefSignatureConverter : SignatureConverter {
    internal byte FirstByte;
    internal UInt32 GenericParamCount;
    internal int paramCount;
    internal IEnumerable`1<ICustomModifier> ReturnCustomModifiers;
    internal ITypeReference ReturnTypeReference;
    internal IParameterDefinition[] Parameters;
    internal ReturnParameter ReturnParameter;
    private ParamInfo[] ParamInfoArray;
    internal MethodDefSignatureConverter(PEFileToObjectModel peFileToObjectModel, MethodDefinition moduleMethod, MemoryReader signatureMemoryReader);
    protected virtual Nullable`1<ParamInfo> GetParamInfo(int paramSequence);
}
internal class Microsoft.Cci.MetadataReader.MethodRefSignatureConverter : SignatureConverter {
    internal ushort GenericParamCount;
    internal IEnumerable`1<ICustomModifier> ReturnCustomModifiers;
    internal ITypeReference ReturnTypeReference;
    internal bool IsReturnByReference;
    internal IParameterTypeInformation[] RequiredParameters;
    internal IParameterTypeInformation[] VarArgParameters;
    internal MethodRefSignatureConverter(PEFileToObjectModel peFileToObjectModel, MethodReference moduleMethodRef, MemoryReader signatureMemoryReader);
}
internal class Microsoft.Cci.MetadataReader.MethodSpecSignatureConverter : SignatureConverter {
    internal EnumerableArrayWrapper`2<ITypeReference, ITypeReference> GenericTypeArguments;
    internal MethodSpecSignatureConverter(PEFileToObjectModel peFileToObjectModel, MetadataObject owningObject, MemoryReader signatureMemoryReader);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation._Module_Type : NonGenericNamespaceType {
    public PrimitiveTypeCode TypeCode { get; }
    internal _Module_Type(PEFileToObjectModel peFileToObjectModel, IName memberName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, Namespace parentModuleNamespace);
    internal virtual void LoadMembers();
    public virtual PrimitiveTypeCode get_TypeCode();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ArrayExpression : ExpressionBase {
    internal IArrayTypeReference VectorType;
    internal EnumerableArrayWrapper`2<ExpressionBase, IMetadataExpression> Elements;
    internal ITypeReference ModuleTypeReference { get; }
    public ITypeReference ElementType { get; }
    public IEnumerable`1<IMetadataExpression> Initializers { get; }
    public IEnumerable`1<int> LowerBounds { get; }
    public UInt32 Rank { get; }
    public IEnumerable`1<ulong> Sizes { get; }
    internal ArrayExpression(IArrayTypeReference vectorType, EnumerableArrayWrapper`2<ExpressionBase, IMetadataExpression> elements);
    internal virtual ITypeReference get_ModuleTypeReference();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual ITypeReference get_ElementType();
    public sealed virtual IEnumerable`1<IMetadataExpression> get_Initializers();
    public sealed virtual IEnumerable`1<int> get_LowerBounds();
    public sealed virtual UInt32 get_Rank();
    public sealed virtual IEnumerable`1<ulong> get_Sizes();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ArrayTypeName : TypeName {
    private TypeName ElementType;
    private UInt32 Rank;
    internal ArrayTypeName(TypeName elementType, UInt32 rank);
    internal virtual ITypeReference GetAsTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.Assembly : Module {
    private IName AssemblyName;
    private AssemblyFlags AssemblyFlags;
    private Byte[] publicKey;
    internal AssemblyIdentity AssemblyIdentity;
    internal IModule[] MemberModules;
    public bool IsRetargetable { get; }
    public bool ContainsForeignTypes { get; }
    internal UInt32 TokenValue { get; }
    private IEnumerable`1<IAliasForType> Microsoft.Cci.IAssembly.ExportedTypes { get; }
    public IEnumerable`1<byte> HashValue { get; }
    private IEnumerable`1<IResourceReference> Microsoft.Cci.IAssembly.Resources { get; }
    private IEnumerable`1<IFileReference> Microsoft.Cci.IAssembly.Files { get; }
    private IEnumerable`1<IModule> Microsoft.Cci.IAssembly.MemberModules { get; }
    private IEnumerable`1<ISecurityAttribute> Microsoft.Cci.IAssembly.SecurityAttributes { get; }
    private UInt32 Microsoft.Cci.IAssembly.Flags { get; }
    private IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.PublicKey { get; }
    private IEnumerable`1<ICustomAttribute> Microsoft.Cci.IAssembly.AssemblyAttributes { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    private AssemblyIdentity Microsoft.Cci.IAssemblyReference.AssemblyIdentity { get; }
    private AssemblyIdentity Microsoft.Cci.IAssemblyReference.UnifiedAssemblyIdentity { get; }
    private IEnumerable`1<IName> Microsoft.Cci.IAssemblyReference.Aliases { get; }
    private IAssembly Microsoft.Cci.IAssemblyReference.ResolvedAssembly { get; }
    private string Microsoft.Cci.IAssemblyReference.Culture { get; }
    private IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.PublicKeyToken { get; }
    private Version Microsoft.Cci.IAssemblyReference.Version { get; }
    internal Assembly(PEFileToObjectModel peFileToObjectModel, IName moduleName, COR20Flags corFlags, UInt32 internedModuleId, AssemblyIdentity assemblyIdentity, IName assemblyName, AssemblyFlags assemblyFlags, Byte[] publicKey);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual bool get_ContainsForeignTypes();
    internal virtual UInt32 get_TokenValue();
    internal IModule FindMemberModuleNamed(IName moduleName);
    internal void SetMemberModules(IModule[] memberModules);
    public virtual string ToString();
    private sealed virtual override IEnumerable`1<IAliasForType> Microsoft.Cci.IAssembly.get_ExportedTypes();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
    private sealed virtual override IEnumerable`1<IResourceReference> Microsoft.Cci.IAssembly.get_Resources();
    private sealed virtual override IEnumerable`1<IFileReference> Microsoft.Cci.IAssembly.get_Files();
    private sealed virtual override IEnumerable`1<IModule> Microsoft.Cci.IAssembly.get_MemberModules();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.Assembly/<Microsoft-Cci-IAssembly-get_SecurityAttributes>d__28")]
private sealed virtual override IEnumerable`1<ISecurityAttribute> Microsoft.Cci.IAssembly.get_SecurityAttributes();
    private sealed virtual override UInt32 Microsoft.Cci.IAssembly.get_Flags();
    private sealed virtual override IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.get_PublicKey();
    private sealed virtual override IEnumerable`1<ICustomAttribute> Microsoft.Cci.IAssembly.get_AssemblyAttributes();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    private sealed virtual override AssemblyIdentity Microsoft.Cci.IAssemblyReference.get_AssemblyIdentity();
    private sealed virtual override AssemblyIdentity Microsoft.Cci.IAssemblyReference.get_UnifiedAssemblyIdentity();
    private sealed virtual override IEnumerable`1<IName> Microsoft.Cci.IAssemblyReference.get_Aliases();
    private sealed virtual override IAssembly Microsoft.Cci.IAssemblyReference.get_ResolvedAssembly();
    private sealed virtual override string Microsoft.Cci.IAssemblyReference.get_Culture();
    private sealed virtual override IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.get_PublicKeyToken();
    private sealed virtual override Version Microsoft.Cci.IAssemblyReference.get_Version();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.AssemblyQualifiedTypeName : TypeName {
    private TypeName TypeName;
    private AssemblyIdentity AssemblyIdentity;
    private bool Retargetable;
    internal AssemblyQualifiedTypeName(TypeName typeName, AssemblyIdentity assemblyIdentity, bool retargetable);
    internal virtual ITypeReference GetAsTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.AssemblyReference : MetadataObject {
    private UInt32 AssemblyRefRowId;
    internal AssemblyIdentity AssemblyIdentity;
    private AssemblyFlags AssemblyFlags;
    private UInt32 internedId;
    private IAssembly resolvedAssembly;
    private AssemblyIdentity unifiedAssemblyIdentity;
    internal UInt32 InternedId { get; }
    public bool IsRetargetable { get; }
    public bool ContainsForeignTypes { get; }
    internal IAssembly ResolvedAssembly { get; }
    internal UInt32 TokenValue { get; }
    internal AssemblyIdentity UnifiedAssemblyIdentity { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    private UnitIdentity Microsoft.Cci.IUnitReference.UnitIdentity { get; }
    private IUnit Microsoft.Cci.IUnitReference.ResolvedUnit { get; }
    private ModuleIdentity Microsoft.Cci.IModuleReference.ModuleIdentity { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    private IModule Microsoft.Cci.IModuleReference.ResolvedModule { get; }
    private AssemblyIdentity Microsoft.Cci.IAssemblyReference.AssemblyIdentity { get; }
    private AssemblyIdentity Microsoft.Cci.IAssemblyReference.UnifiedAssemblyIdentity { get; }
    private IAssembly Microsoft.Cci.IAssemblyReference.ResolvedAssembly { get; }
    private IEnumerable`1<IName> Microsoft.Cci.IAssemblyReference.Aliases { get; }
    private string Microsoft.Cci.IAssemblyReference.Culture { get; }
    private IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.HashValue { get; }
    private IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.PublicKey { get; }
    private IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.PublicKeyToken { get; }
    private Version Microsoft.Cci.IAssemblyReference.Version { get; }
    public UInt32 InternedModuleId { get; }
    internal AssemblyReference(PEFileToObjectModel peFileToObjectModel, UInt32 assemblyRefRowId, AssemblyIdentity assemblyIdentity, AssemblyFlags assemblyFlags);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal UInt32 get_InternedId();
    public sealed virtual bool get_IsRetargetable();
    public sealed virtual bool get_ContainsForeignTypes();
    internal IAssembly get_ResolvedAssembly();
    internal virtual UInt32 get_TokenValue();
    internal AssemblyIdentity get_UnifiedAssemblyIdentity();
    public virtual string ToString();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
    private sealed virtual override UnitIdentity Microsoft.Cci.IUnitReference.get_UnitIdentity();
    private sealed virtual override IUnit Microsoft.Cci.IUnitReference.get_ResolvedUnit();
    private sealed virtual override ModuleIdentity Microsoft.Cci.IModuleReference.get_ModuleIdentity();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    private sealed virtual override IModule Microsoft.Cci.IModuleReference.get_ResolvedModule();
    private sealed virtual override AssemblyIdentity Microsoft.Cci.IAssemblyReference.get_AssemblyIdentity();
    private sealed virtual override AssemblyIdentity Microsoft.Cci.IAssemblyReference.get_UnifiedAssemblyIdentity();
    private sealed virtual override IAssembly Microsoft.Cci.IAssemblyReference.get_ResolvedAssembly();
    private sealed virtual override IEnumerable`1<IName> Microsoft.Cci.IAssemblyReference.get_Aliases();
    private sealed virtual override string Microsoft.Cci.IAssemblyReference.get_Culture();
    private sealed virtual override IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.get_HashValue();
    private sealed virtual override IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.get_PublicKey();
    private sealed virtual override IEnumerable`1<byte> Microsoft.Cci.IAssemblyReference.get_PublicKeyToken();
    private sealed virtual override Version Microsoft.Cci.IAssemblyReference.get_Version();
    public sealed virtual UInt32 get_InternedModuleId();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ByValArrayMarshallingInformation : object {
    private UnmanagedType arrayElementType;
    private UInt32 numberOfElements;
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    private UnmanagedType Microsoft.Cci.IMarshallingInformation.UnmanagedType { get; }
    public UInt32 IidParameterIndex { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    internal ByValArrayMarshallingInformation(UnmanagedType arrayElementType, UInt32 numberOfElements);
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    private sealed virtual override UnmanagedType Microsoft.Cci.IMarshallingInformation.get_UnmanagedType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ByValTStrMarshallingInformation : object {
    private UInt32 numberOfElements;
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    public UnmanagedType UnmanagedType { get; }
    public UInt32 IidParameterIndex { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    internal ByValTStrMarshallingInformation(UInt32 numberOfElements);
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    public sealed virtual UnmanagedType get_UnmanagedType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ConstantExpression : ExpressionBase {
    private ITypeReference TypeReference;
    internal object value;
    internal ITypeReference ModuleTypeReference { get; }
    public object Value { get; }
    internal ConstantExpression(ITypeReference typeReference, object value);
    internal virtual ITypeReference get_ModuleTypeReference();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual object get_Value();
}
internal enum Microsoft.Cci.MetadataReader.ObjectModelImplementation.ContainerState : Enum {
    public byte value__;
    public static ContainerState Initialized;
    public static ContainerState StartedLoading;
    public static ContainerState Loaded;
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.CoreTypeReference : MetadataObject {
    internal IMetadataReaderModuleReference moduleReference;
    internal NamespaceReference namespaceReference;
    internal IName mangledTypeName;
    internal IName name;
    internal ushort genericParamCount;
    internal MetadataReaderSignatureTypeCode signatureTypeCode;
    private bool isResolved;
    private ITypeDefinition resolvedModuleTypeDefintion;
    private UInt32 internedKey;
    internal UInt32 TokenValue { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    private IPlatformType Microsoft.Cci.ITypeReference.PlatformType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IMetadataReaderModuleReference ModuleReference { get; }
    public IName NamespaceFullName { get; }
    public IName MangledTypeName { get; }
    public ushort GenericParameterCount { get; }
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    private INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    internal CoreTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference moduleReference, NamespaceReference namespaceReference, IName typeName, ushort genericParamCount, MetadataReaderSignatureTypeCode signatureTypeCode);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    private sealed virtual override IPlatformType Microsoft.Cci.ITypeReference.get_PlatformType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public virtual string ToString();
    public sealed virtual IMetadataReaderModuleReference get_ModuleReference();
    public sealed virtual IName get_NamespaceFullName();
    public sealed virtual IName get_MangledTypeName();
    public sealed virtual ExportedTypeAliasBase TryResolveAsExportedType();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    private sealed virtual override INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
    public sealed virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.CustomAttribute : MetadataObject {
    internal IMethodReference Constructor;
    internal IMetadataExpression[] Arguments;
    internal IMetadataNamedArgument[] NamedArguments;
    internal UInt32 AttributeRowId;
    internal UInt32 TokenValue { get; }
    private IEnumerable`1<IMetadataExpression> Microsoft.Cci.ICustomAttribute.Arguments { get; }
    private IMethodReference Microsoft.Cci.ICustomAttribute.Constructor { get; }
    private IEnumerable`1<IMetadataNamedArgument> Microsoft.Cci.ICustomAttribute.NamedArguments { get; }
    private ushort Microsoft.Cci.ICustomAttribute.NumberOfNamedArguments { get; }
    public ITypeReference Type { get; }
    internal CustomAttribute(PEFileToObjectModel peFileToObjectModel, UInt32 attributeRowId, IMethodReference constructor, IMetadataExpression[] arguments, IMetadataNamedArgument[] namedArguments);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    private sealed virtual override IEnumerable`1<IMetadataExpression> Microsoft.Cci.ICustomAttribute.get_Arguments();
    private sealed virtual override IMethodReference Microsoft.Cci.ICustomAttribute.get_Constructor();
    private sealed virtual override IEnumerable`1<IMetadataNamedArgument> Microsoft.Cci.ICustomAttribute.get_NamedArguments();
    private sealed virtual override ushort Microsoft.Cci.ICustomAttribute.get_NumberOfNamedArguments();
    public sealed virtual ITypeReference get_Type();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.CustomMarshallingInformation : object {
    private ITypeReference Marshaller;
    private string MarshallerRuntimeArgument;
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    private UnmanagedType Microsoft.Cci.IMarshallingInformation.UnmanagedType { get; }
    public UInt32 IidParameterIndex { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    internal CustomMarshallingInformation(ITypeReference marshaller, string marshallerRuntimeArgument);
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    private sealed virtual override UnmanagedType Microsoft.Cci.IMarshallingInformation.get_UnmanagedType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.CustomModifier : object {
    internal bool IsOptional;
    internal ITypeReference Modifier;
    private bool Microsoft.Cci.ICustomModifier.IsOptional { get; }
    private ITypeReference Microsoft.Cci.ICustomModifier.Modifier { get; }
    internal CustomModifier(bool isOptional, ITypeReference modifier);
    private sealed virtual override bool Microsoft.Cci.ICustomModifier.get_IsOptional();
    private sealed virtual override ITypeReference Microsoft.Cci.ICustomModifier.get_Modifier();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.EventDefinition : TypeMember {
    internal UInt32 EventRowId;
    private EventFlags EventFlags;
    private bool eventTypeInited;
    private ITypeReference eventType;
    private IMethodDefinition adderMethod;
    private IMethodDefinition removerMethod;
    private IMethodDefinition fireMethod;
    private TypeMemberVisibility visibility;
    internal UInt32 TokenValue { get; }
    internal IMethodDefinition AdderMethod { get; }
    internal IMethodDefinition RemoverMethod { get; }
    internal IMethodDefinition FireMethod { get; }
    public TypeMemberVisibility Visibility { get; }
    internal ITypeReference EventType { get; }
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMethodReference Adder { get; }
    public IMethodReference Caller { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IMethodReference Remover { get; }
    public ITypeReference Type { get; }
    internal EventDefinition(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase parentModuleType, UInt32 eventRowId, EventFlags eventFlags);
    internal virtual UInt32 get_TokenValue();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal IMethodDefinition get_AdderMethod();
    internal IMethodDefinition get_RemoverMethod();
    internal IMethodDefinition get_FireMethod();
    public virtual TypeMemberVisibility get_Visibility();
    internal ITypeReference get_EventType();
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public sealed virtual IMethodReference get_Adder();
    public sealed virtual IMethodReference get_Caller();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual IMethodReference get_Remover();
    public sealed virtual ITypeReference get_Type();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ExportedTypeAliasBase : ScopedContainerMetadataObject`3<IAliasMember, IAliasMember, IAliasForType> {
    internal IName TypeName;
    internal UInt32 ExportedTypeRowId;
    internal TypeDefFlags TypeDefFlags;
    private INamedTypeReference aliasTypeReference;
    internal UInt32 TokenValue { get; }
    public INamedTypeReference AliasedType { get; }
    internal ExportedTypeAliasBase(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 exportedTypeDefRowId, TypeDefFlags typeDefFlags);
    internal virtual void LoadMembers();
    internal virtual UInt32 get_TokenValue();
    public sealed virtual INamedTypeReference get_AliasedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ExportedTypeNamespaceAlias : ExportedTypeAliasBase {
    private Namespace ParentModuleNamespace;
    public bool IsPublic { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    public IName Name { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    internal ExportedTypeNamespaceAlias(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 exportedTypeDefRowId, TypeDefFlags typeDefFlags, Namespace parentModuleNamespace);
    public sealed virtual bool get_IsPublic();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ExportedTypeNestedAlias : ExportedTypeAliasBase {
    private ExportedTypeAliasBase ParentExportedTypeAlias;
    public IAliasForType ContainingAlias { get; }
    public TypeMemberVisibility Visibility { get; }
    public IAliasForType Container { get; }
    public IName Name { get; }
    public IScope`1<IAliasMember> ContainingScope { get; }
    internal ExportedTypeNestedAlias(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 exportedTypeDefRowId, TypeDefFlags typeDefFlags, ExportedTypeAliasBase parentExportedTypeAlias);
    public sealed virtual IAliasForType get_ContainingAlias();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual IAliasForType get_Container();
    public sealed virtual IName get_Name();
    public sealed virtual IScope`1<IAliasMember> get_ContainingScope();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ExpressionBase : object {
    internal ITypeReference ModuleTypeReference { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public ITypeReference Type { get; }
    internal abstract virtual ITypeReference get_ModuleTypeReference();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual ITypeReference get_Type();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.FieldDefinition : TypeMember {
    internal UInt32 FieldDefRowId;
    private FieldFlags FieldFlags;
    private IEnumerable`1<ICustomModifier> customModifiers;
    private ITypeReference fieldType;
    private UInt32 internedKey;
    internal UInt32 TokenValue { get; }
    public UInt32 InternedKey { get; }
    public TypeMemberVisibility Visibility { get; }
    public UInt32 BitLength { get; }
    public bool IsBitField { get; }
    public bool IsCompileTimeConstant { get; }
    public bool IsMapped { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsNotSerialized { get; }
    public bool IsReadOnly { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public UInt32 Offset { get; }
    public int SequenceNumber { get; }
    public IMetadataConstant CompileTimeValue { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference Type { get; }
    public ISectionBlock FieldMapping { get; }
    public ITypeReference OwningTypeReference { get; }
    public ITypeReference FieldType { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsModified { get; }
    public IFieldDefinition ResolvedField { get; }
    private IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.Constant { get; }
    internal FieldDefinition(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase parentModuleType, UInt32 fieldDefRowId, FieldFlags fieldFlags);
    internal virtual UInt32 get_TokenValue();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    private void InitFieldSignature();
    public sealed virtual UInt32 get_InternedKey();
    public virtual TypeMemberVisibility get_Visibility();
    public sealed virtual UInt32 get_BitLength();
    public sealed virtual bool get_IsBitField();
    public sealed virtual bool get_IsCompileTimeConstant();
    public sealed virtual bool get_IsMapped();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsNotSerialized();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual UInt32 get_Offset();
    public sealed virtual int get_SequenceNumber();
    public sealed virtual IMetadataConstant get_CompileTimeValue();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ISectionBlock get_FieldMapping();
    public ITypeReference get_OwningTypeReference();
    public ITypeReference get_FieldType();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsModified();
    public sealed virtual IFieldDefinition get_ResolvedField();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.get_Constant();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.FieldOrPropertyNamedArgumentExpression : ExpressionBase {
    private static int IsFieldFlag;
    private static int IsResolvedFlag;
    private IName Name;
    private ITypeReference ContainingType;
    private int Flags;
    private ITypeReference fieldOrPropTypeReference;
    private object resolvedFieldOrProperty;
    internal ExpressionBase ExpressionValue;
    public bool IsField { get; }
    internal ITypeReference ModuleTypeReference { get; }
    public IName ArgumentName { get; }
    public IMetadataExpression ArgumentValue { get; }
    public object ResolvedDefinition { get; }
    internal FieldOrPropertyNamedArgumentExpression(IName name, ITypeReference containingType, bool isField, ITypeReference fieldOrPropTypeReference, ExpressionBase expressionValue);
    public sealed virtual bool get_IsField();
    internal virtual ITypeReference get_ModuleTypeReference();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IName get_ArgumentName();
    public sealed virtual IMetadataExpression get_ArgumentValue();
    public sealed virtual object get_ResolvedDefinition();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.FieldReference : MemberReference {
    protected bool signatureLoaded;
    protected IEnumerable`1<ICustomModifier> customModifiers;
    protected ITypeReference typeReference;
    internal bool isStatic;
    private UInt32 internedKey;
    public UInt32 InternedKey { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public ITypeReference FieldType { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsModified { get; }
    public bool IsStatic { get; }
    public IFieldDefinition ResolvedField { get; }
    public ITypeReference Type { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    internal FieldReference(PEFileToObjectModel peFileToObjectModel, UInt32 memberRefRowId, ITypeReference parentTypeReference, IName name);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    protected virtual void InitFieldSignature();
    public sealed virtual UInt32 get_InternedKey();
    public virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public ITypeReference get_FieldType();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsStatic();
    public virtual IFieldDefinition get_ResolvedField();
    public sealed virtual ITypeReference get_Type();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.FileReference : MetadataObject {
    internal UInt32 FileRowId;
    internal FileFlags FileFlags;
    internal IName Name;
    internal UInt32 TokenValue { get; }
    public IAssembly ContainingAssembly { get; }
    public bool HasMetadata { get; }
    public IName FileName { get; }
    public IEnumerable`1<byte> HashValue { get; }
    internal FileReference(PEFileToObjectModel peFileToObjectModel, UInt32 fileRowId, FileFlags fileFlags, IName name);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    public sealed virtual IAssembly get_ContainingAssembly();
    public sealed virtual bool get_HasMetadata();
    public sealed virtual IName get_FileName();
    public sealed virtual IEnumerable`1<byte> get_HashValue();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.FunctionPointerTypeWithToken : FunctionPointerType {
    private UInt32 tokenValue;
    public UInt32 TokenValue { get; }
    public FunctionPointerTypeWithToken(UInt32 tokenValue, CallingConvention callingConvention, bool returnValueIsByRef, ITypeReference type, IEnumerable`1<ICustomModifier> returnValueCustomModifiers, IEnumerable`1<IParameterTypeInformation> parameters, IEnumerable`1<IParameterTypeInformation> extraArgumentTypes, IInternFactory internFactory);
    public sealed virtual UInt32 get_TokenValue();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericMethod : MethodDefinition {
    internal UInt32 GenericParamRowIdStart;
    internal UInt32 GenericParamRowIdEnd;
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool IsGeneric { get; }
    public ushort GenericMethodParameterCardinality { get; }
    internal GenericMethod(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase parentModuleType, UInt32 methodDefRowId, MethodFlags methodFlags, MethodImplFlags methodImplFlags, UInt32 genericParamRowIdStart, UInt32 genericParamRowIdEnd);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericMethod/<get_GenericParameters>d__4")]
public virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public virtual ushort get_GenericParameterCount();
    public virtual bool get_IsGeneric();
    public ushort get_GenericMethodParameterCardinality();
    public ITypeReference GetGenericMethodParameterFromOrdinal(ushort genericParamOrdinal);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericMethodInstanceReferenceWithToken : GenericMethodInstanceReference {
    private UInt32 tokenValue;
    public UInt32 TokenValue { get; }
    internal GenericMethodInstanceReferenceWithToken(IMethodReference genericMethod, IEnumerable`1<ITypeReference> genericArguments, IInternFactory internFactory, UInt32 tokenValue);
    public sealed virtual UInt32 get_TokenValue();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericMethodParameter : GenericParameter {
    internal GenericMethod OwningGenericMethod;
    public ushort Index { get; }
    public IMethodDefinition DefiningMethod { get; }
    private IMethodReference Microsoft.Cci.IGenericMethodParameterReference.DefiningMethod { get; }
    private IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.ResolvedType { get; }
    internal GenericMethodParameter(PEFileToObjectModel peFileToObjectModel, ushort genericParameterOrdinality, GenericParamFlags genericParamFlags, IName genericParamName, UInt32 genericParameterRowId, GenericMethod owningGenericMethod);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual ushort get_Index();
    public sealed virtual IMethodDefinition get_DefiningMethod();
    private sealed virtual override IMethodReference Microsoft.Cci.IGenericMethodParameterReference.get_DefiningMethod();
    private sealed virtual override IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.get_ResolvedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericNamespaceType : NamespaceType {
    private IName MangledName;
    private UInt32 GenericParamRowIdStart;
    private UInt32 GenericParamRowIdEnd;
    private IGenericTypeInstanceReference genericTypeInstance;
    public IName MangledTypeName { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool IsGeneric { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public ushort GenericTypeParameterCardinality { get; }
    public ushort ParentGenericTypeParameterCardinality { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public ITypeReference UnderlyingType { get; }
    public bool MangleName { get; }
    internal GenericNamespaceType(PEFileToObjectModel peFileToObjectModel, IName unmangledName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, Namespace parentModuleNamespace, IName mangledName, UInt32 genericParamRowIdStart, UInt32 genericParamRowIdEnd);
    public virtual IName get_MangledTypeName();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericNamespaceType/<get_GenericParameters>d__8")]
public virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public virtual ushort get_GenericParameterCount();
    public virtual bool get_IsGeneric();
    public virtual IGenericTypeInstanceReference get_InstanceType();
    public virtual ushort get_GenericTypeParameterCardinality();
    public virtual ushort get_ParentGenericTypeParameterCardinality();
    public virtual ITypeReference GetGenericTypeParameterFromOrdinal(ushort genericParamOrdinal);
    public virtual PrimitiveTypeCode get_TypeCode();
    public virtual ITypeReference get_UnderlyingType();
    public virtual bool get_MangleName();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericNamespaceTypeRefReference : NamespaceTypeRefReference {
    private IName mangledTypeName;
    private ushort genericParamCount;
    public ushort GenericParameterCount { get; }
    public IName MangledTypeName { get; }
    public bool MangleName { get; }
    internal GenericNamespaceTypeRefReference(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, NamespaceReference namespaceReference, IName mangledTypeName, ushort genericParamCount, bool isValueType);
    public virtual ushort get_GenericParameterCount();
    public virtual IName get_MangledTypeName();
    public virtual bool get_MangleName();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericNestedType : NestedType {
    private IName MangledName;
    internal UInt32 GenericParamRowIdStart;
    internal UInt32 GenericParamRowIdEnd;
    private IGenericTypeInstanceReference genericTypeInstance;
    public bool DoesNotInheritGenericParameters { get; }
    public IName MangledTypeName { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool IsGeneric { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public ushort GenericTypeParameterCardinality { get; }
    public ushort ParentGenericTypeParameterCardinality { get; }
    public bool MangleName { get; }
    internal GenericNestedType(PEFileToObjectModel peFileToObjectModel, IName unmangledName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, TypeBase parentModuleType, IName mangledName, UInt32 genericParamRowIdStart, UInt32 genericParamRowIdEnd);
    public virtual bool get_DoesNotInheritGenericParameters();
    private bool ContainingParametersAreNotAPrefixOfOwnParameters();
    public virtual IName get_MangledTypeName();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericNestedType/<get_GenericParameters>d__11")]
public virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public virtual ushort get_GenericParameterCount();
    public virtual bool get_IsGeneric();
    public virtual IGenericTypeInstanceReference get_InstanceType();
    private ITypeReference GetSpecializedTypeReference(INamedTypeReference nominalType, Int32& argumentsUsed, bool outer);
    public virtual ushort get_GenericTypeParameterCardinality();
    public virtual ushort get_ParentGenericTypeParameterCardinality();
    public virtual ITypeReference GetGenericTypeParameterFromOrdinal(ushort genericParamOrdinal);
    public virtual bool get_MangleName();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericNestedTypeRefReference : NestedTypeRefReference {
    private IName mangledTypeName;
    private ushort genericParamCount;
    public ushort GenericParameterCount { get; }
    public IName MangledTypeName { get; }
    public bool MangleName { get; }
    internal GenericNestedTypeRefReference(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, IMetadataReaderNamedTypeReference parentTypeReference, IName mangledTypeName, ushort genericParamCount, bool isValueType);
    public virtual ushort get_GenericParameterCount();
    public virtual IName get_MangledTypeName();
    public virtual bool get_MangleName();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericParameter : SimpleStructuralType {
    protected ushort GenericParameterOrdinality;
    internal GenericParamFlags GenericParameterFlags;
    protected IName GenericParameterName;
    internal UInt32 GenericParameterRowId;
    private UInt32 genericParamConstraintRowIDStart;
    private UInt32 genericParamConstraintRowIDEnd;
    internal UInt32 GenericParamConstraintRowIDStart { get; }
    internal UInt32 GenericParamConstraintRowIDEnd { get; }
    internal UInt32 GenericParamConstraintCount { get; }
    private ushort Microsoft.Cci.INamedTypeDefinition.GenericParameterCount { get; }
    public bool IsReferenceType { get; }
    public bool IsValueType { get; }
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Index { get; }
    public IName Name { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    internal GenericParameter(PEFileToObjectModel peFileToObjectModel, ushort genericParameterOrdinality, GenericParamFlags genericParamFlags, IName genericParamName, UInt32 genericParameterRowId);
    internal UInt32 get_GenericParamConstraintRowIDStart();
    internal UInt32 get_GenericParamConstraintRowIDEnd();
    internal UInt32 get_GenericParamConstraintCount();
    private sealed virtual override ushort Microsoft.Cci.INamedTypeDefinition.get_GenericParameterCount();
    public virtual bool get_IsReferenceType();
    public virtual bool get_IsValueType();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericParameter/<get_Constraints>d__20")]
public sealed virtual IEnumerable`1<ITypeReference> get_Constraints();
    public sealed virtual bool get_MustBeReferenceType();
    public sealed virtual bool get_MustBeValueType();
    public sealed virtual bool get_MustHaveDefaultConstructor();
    public sealed virtual TypeParameterVariance get_Variance();
    public abstract virtual ushort get_Index();
    public sealed virtual IName get_Name();
    public sealed virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericTypeInstanceReferenceWithToken : GenericTypeInstanceReference {
    private UInt32 tokenValue;
    public UInt32 TokenValue { get; }
    public GenericTypeInstanceReferenceWithToken(UInt32 tokenValue, INamedTypeReference genericType, IEnumerable`1<ITypeReference> genericArguments, IInternFactory internFactory);
    public sealed virtual UInt32 get_TokenValue();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericTypeName : TypeName {
    internal NominalTypeName GenericTemplate;
    internal List`1<TypeName> GenericArguments;
    internal GenericTypeName(NominalTypeName genericTemplate, List`1<TypeName> genericArguments);
    internal virtual ITypeReference GetAsTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
    private ITypeReference GetSpecializedTypeReference(PEFileToObjectModel peFileToObjectModel, INamedTypeReference nominalType, Int32& argumentUsed, bool mostNested);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GenericTypeParameter : GenericParameter {
    internal TypeBase OwningGenericType;
    public ushort Index { get; }
    public ITypeDefinition DefiningType { get; }
    private ITypeReference Microsoft.Cci.IGenericTypeParameterReference.DefiningType { get; }
    private IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.ResolvedType { get; }
    internal GenericTypeParameter(PEFileToObjectModel peFileToObjectModel, ushort genericParameterOrdinality, GenericParamFlags genericParamFlags, IName genericParamName, UInt32 genericParameterRowId, TypeBase owningGenericType);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual ushort get_Index();
    public sealed virtual ITypeDefinition get_DefiningType();
    private sealed virtual override ITypeReference Microsoft.Cci.IGenericTypeParameterReference.get_DefiningType();
    private sealed virtual override IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.get_ResolvedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GlobalFieldDefinition : FieldDefinition {
    private Namespace ParentModuleNamespace;
    private IName NamespaceMemberName;
    public INamespaceDefinition ContainingNamespace { get; }
    private INamespaceDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Name { get; }
    private IScope`1<INamespaceMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.INamespaceMember>>.ContainingScope { get; }
    internal GlobalFieldDefinition(PEFileToObjectModel peFileToObjectModel, IName typeMemberName, TypeBase parentModuleType, UInt32 fieldDefRowId, FieldFlags fieldFlags, IName namespaceMemberName, Namespace parentModuleNamespace);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    private sealed virtual override INamespaceDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Name();
    private sealed virtual override IScope`1<INamespaceMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.INamespaceMember>>.get_ContainingScope();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GlobalGenericMethod : GenericMethod {
    private Namespace ParentModuleNamespace;
    private IName NamespaceMemberName;
    private IEnumerable`1<IGenericMethodParameter> Microsoft.Cci.IMethodDefinition.GenericParameters { get; }
    private ushort Microsoft.Cci.IMethodReference.GenericParameterCount { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    private INamespaceDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Name { get; }
    private IScope`1<INamespaceMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.INamespaceMember>>.ContainingScope { get; }
    internal GlobalGenericMethod(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase parentModuleType, UInt32 methodDefRowId, MethodFlags methodFlags, MethodImplFlags methodImplFlags, UInt32 genericParamRowIdStart, UInt32 genericParamRowIdEnd, IName namespaceMemberName, Namespace parentModuleNamespace);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    private sealed virtual override IEnumerable`1<IGenericMethodParameter> Microsoft.Cci.IMethodDefinition.get_GenericParameters();
    private sealed virtual override ushort Microsoft.Cci.IMethodReference.get_GenericParameterCount();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    private sealed virtual override INamespaceDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Name();
    private sealed virtual override IScope`1<INamespaceMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.INamespaceMember>>.get_ContainingScope();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.GlobalNonGenericMethod : NonGenericMethod {
    private Namespace ParentModuleNamespace;
    private IName NamespaceMemberName;
    private IEnumerable`1<IGenericMethodParameter> Microsoft.Cci.IMethodDefinition.GenericParameters { get; }
    private ushort Microsoft.Cci.IMethodReference.GenericParameterCount { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    private INamespaceDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Name { get; }
    private IScope`1<INamespaceMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.INamespaceMember>>.ContainingScope { get; }
    internal GlobalNonGenericMethod(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase parentModuleType, UInt32 methodDefRowId, MethodFlags methodFlags, MethodImplFlags methodImplFlags, IName namespaceMemberName, Namespace parentModuleNamespace);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    private sealed virtual override IEnumerable`1<IGenericMethodParameter> Microsoft.Cci.IMethodDefinition.get_GenericParameters();
    private sealed virtual override ushort Microsoft.Cci.IMethodReference.get_GenericParameterCount();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    private sealed virtual override INamespaceDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Name();
    private sealed virtual override IScope`1<INamespaceMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.INamespaceMember>>.get_ContainingScope();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.IidParameterIndexMarshallingInformation : object {
    private UInt32 iidParameterIndex;
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    public UnmanagedType UnmanagedType { get; }
    public UInt32 IidParameterIndex { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    internal IidParameterIndexMarshallingInformation(UInt32 iidParameterIndex);
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    public sealed virtual UnmanagedType get_UnmanagedType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal interface Microsoft.Cci.MetadataReader.ObjectModelImplementation.IMetadataReaderModuleReference {
    public UInt32 InternedModuleId { get; }
    public abstract virtual UInt32 get_InternedModuleId();
}
internal interface Microsoft.Cci.MetadataReader.ObjectModelImplementation.IMetadataReaderNamedTypeReference {
    public IMetadataReaderModuleReference ModuleReference { get; }
    public IName NamespaceFullName { get; }
    public IName MangledTypeName { get; }
    public abstract virtual IMetadataReaderModuleReference get_ModuleReference();
    public abstract virtual IName get_NamespaceFullName();
    public abstract virtual IName get_MangledTypeName();
    public abstract virtual ExportedTypeAliasBase TryResolveAsExportedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.LPArrayMarshallingInformation : object {
    private UnmanagedType ArrayElementType;
    private int paramIndex;
    private UInt32 numElement;
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    private UnmanagedType Microsoft.Cci.IMarshallingInformation.UnmanagedType { get; }
    public UInt32 IidParameterIndex { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    internal LPArrayMarshallingInformation(UnmanagedType arrayElementType, int paramIndex, UInt32 numElement);
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    private sealed virtual override UnmanagedType Microsoft.Cci.IMarshallingInformation.get_UnmanagedType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ManagedPointerTypeName : TypeName {
    internal TypeName TargetType;
    internal ManagedPointerTypeName(TypeName targetType);
    internal virtual ITypeReference GetAsTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ManagedPointerTypeWithToken : ManagedPointerType {
    private UInt32 tokenValue;
    public UInt32 TokenValue { get; }
    internal ManagedPointerTypeWithToken(UInt32 tokenValue, ITypeReference targetType, IInternFactory internFactory);
    public sealed virtual UInt32 get_TokenValue();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MatrixWithToken : Matrix {
    private UInt32 tokenValue;
    public UInt32 TokenValue { get; }
    internal MatrixWithToken(UInt32 tokenValue, ITypeReference elementType, UInt32 rank, IEnumerable`1<int> lowerBounds, IEnumerable`1<ulong> sizes, IInternFactory internFactory);
    public sealed virtual UInt32 get_TokenValue();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MemberReference : MetadataObject {
    internal UInt32 MemberRefRowId;
    internal IName Name;
    internal ITypeReference ParentTypeReference;
    internal UInt32 TokenValue { get; }
    public ITypeReference OwningTypeReference { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    internal MemberReference(PEFileToObjectModel peFileToObjectModel, UInt32 memberRefRowId, ITypeReference parentTypeReference, IName name);
    internal virtual UInt32 get_TokenValue();
    public virtual string ToString();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public ITypeReference get_OwningTypeReference();
    public sealed virtual ITypeReference get_ContainingType();
    public abstract virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MetadataDefinitionObject : MetadataObject {
    private IEnumerable`1<ILocation> locations;
    public IEnumerable`1<ILocation> Locations { get; }
    protected MetadataDefinitionObject(PEFileToObjectModel peFileToObjectModel);
    public virtual IEnumerable`1<ILocation> get_Locations();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MetadataLocation : object {
    private IMetadataObjectWithToken definition;
    private IDocument document;
    public IMetadataObjectWithToken Definition { get; }
    public IDocument Document { get; }
    internal MetadataLocation(IDocument document, IMetadataObjectWithToken definition);
    public sealed virtual IMetadataObjectWithToken get_Definition();
    public sealed virtual IDocument get_Document();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MetadataObject : object {
    internal PEFileToObjectModel PEFileToObjectModel;
    private IEnumerable`1<ICustomAttribute> attributes;
    internal UInt32 TokenValue { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    private UInt32 Microsoft.Cci.IMetadataObjectWithToken.TokenValue { get; }
    protected MetadataObject(PEFileToObjectModel peFileToObjectModel);
    internal abstract virtual UInt32 get_TokenValue();
    public IPlatformType get_PlatformType();
    public virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    protected virtual IEnumerable`1<ICustomAttribute> GetAttributes();
    public abstract virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual IEnumerable`1<ILocation> get_Locations();
    private sealed virtual override UInt32 Microsoft.Cci.IMetadataObjectWithToken.get_TokenValue();
    public sealed virtual object GetObjectForToken(UInt32 token);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MetadataObjectDocument : object {
    private PEFileToObjectModel peFileToObjectModel;
    public string Location { get; }
    public IName Name { get; }
    internal MetadataObjectDocument(PEFileToObjectModel peFileToObjectModel);
    public sealed virtual string get_Location();
    public sealed virtual IName get_Name();
}
internal enum Microsoft.Cci.MetadataReader.ObjectModelImplementation.MetadataReaderSignatureTypeCode : Enum {
    public int value__;
    public static MetadataReaderSignatureTypeCode SByte;
    public static MetadataReaderSignatureTypeCode Int16;
    public static MetadataReaderSignatureTypeCode Int32;
    public static MetadataReaderSignatureTypeCode Int64;
    public static MetadataReaderSignatureTypeCode Byte;
    public static MetadataReaderSignatureTypeCode UInt16;
    public static MetadataReaderSignatureTypeCode UInt32;
    public static MetadataReaderSignatureTypeCode UInt64;
    public static MetadataReaderSignatureTypeCode Single;
    public static MetadataReaderSignatureTypeCode Double;
    public static MetadataReaderSignatureTypeCode IntPtr;
    public static MetadataReaderSignatureTypeCode UIntPtr;
    public static MetadataReaderSignatureTypeCode Void;
    public static MetadataReaderSignatureTypeCode Boolean;
    public static MetadataReaderSignatureTypeCode Char;
    public static MetadataReaderSignatureTypeCode Object;
    public static MetadataReaderSignatureTypeCode String;
    public static MetadataReaderSignatureTypeCode TypedReference;
    public static MetadataReaderSignatureTypeCode ValueType;
    public static MetadataReaderSignatureTypeCode NotModulePrimitive;
}
internal enum Microsoft.Cci.MetadataReader.ObjectModelImplementation.MetadataReaderTypeKind : Enum {
    public int value__;
    public static MetadataReaderTypeKind Dummy;
    public static MetadataReaderTypeKind Nominal;
    public static MetadataReaderTypeKind TypeSpec;
    public static MetadataReaderTypeKind GenericInstance;
    public static MetadataReaderTypeKind Vector;
    public static MetadataReaderTypeKind Matrix;
    public static MetadataReaderTypeKind FunctionPointer;
    public static MetadataReaderTypeKind Pointer;
    public static MetadataReaderTypeKind ManagedPointer;
    public static MetadataReaderTypeKind GenericTypeParameter;
    public static MetadataReaderTypeKind GenericMethodParameter;
    public static MetadataReaderTypeKind ModifiedType;
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MethodDefinition : TypeMember {
    internal UInt32 MethodDefRowId;
    internal MethodFlags MethodFlags;
    internal MethodImplFlags MethodImplFlags;
    private IEnumerable`1<ICustomModifier> returnValueCustomModifiers;
    private ITypeReference modreq(System.Runtime.CompilerServices.IsVolatile) returnType;
    private byte FirstSignatureByte;
    private IParameterDefinition[] moduleParameters;
    private ReturnParameter returnParameter;
    private WeakReference body;
    private IEnumerable`1<IParameterDefinition> parameters;
    private UInt32 internedKey;
    internal UInt32 TokenValue { get; }
    public TypeMemberVisibility Visibility { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public bool AcceptsExtraArguments { get; }
    public IMethodBody Body { get; }
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool HasExplicitThisParameter { get; }
    public bool IsAbstract { get; }
    public bool IsAccessCheckedOnOverride { get; }
    public bool IsCil { get; }
    public bool IsExternal { get; }
    public bool IsForwardReference { get; }
    public bool IsGeneric { get; }
    public bool IsHiddenBySignature { get; }
    public bool IsNativeCode { get; }
    public bool IsNewSlot { get; }
    public bool IsNeverInlined { get; }
    public bool IsNeverOptimized { get; }
    public bool IsAggressivelyInlined { get; }
    public bool IsPlatformInvoke { get; }
    public bool IsRuntimeImplemented { get; }
    public bool IsRuntimeInternal { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSealed { get; }
    public bool IsSpecialName { get; }
    public bool IsStatic { get; }
    public bool IsSynchronized { get; }
    public bool IsVirtual { get; }
    public bool IsUnmanaged { get; }
    public bool PreserveSignature { get; }
    public bool RequiresSecurityObject { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public bool IsConstructor { get; }
    public bool IsStaticConstructor { get; }
    public IPlatformInvokeInformation PlatformInvokeData { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public ushort ParameterCount { get; }
    public IEnumerable`1<ICustomAttribute> ReturnValueAttributes { get; }
    public bool ReturnValueIsMarshalledExplicitly { get; }
    public IMarshallingInformation ReturnValueMarshallingInformation { get; }
    public IName ReturnValueName { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public CallingConvention CallingConvention { get; }
    public ITypeReference OwningTypeReference { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    internal IParameterDefinition[] RequiredModuleParameters { get; }
    public UInt32 InternedKey { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    internal MethodDefinition(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase parentModuleType, UInt32 methodDefRowId, MethodFlags methodFlags, MethodImplFlags methodImplFlags);
    internal virtual UInt32 get_TokenValue();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual TypeMemberVisibility get_Visibility();
    private void InitMethodSignature();
    public virtual IEnumerable`1<ILocation> get_Locations();
    public virtual string ToString();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual IMethodBody get_Body();
    public abstract virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public abstract virtual ushort get_GenericParameterCount();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public sealed virtual bool get_HasExplicitThisParameter();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsAccessCheckedOnOverride();
    public sealed virtual bool get_IsCil();
    public sealed virtual bool get_IsExternal();
    public sealed virtual bool get_IsForwardReference();
    public abstract virtual bool get_IsGeneric();
    public sealed virtual bool get_IsHiddenBySignature();
    public sealed virtual bool get_IsNativeCode();
    public sealed virtual bool get_IsNewSlot();
    public sealed virtual bool get_IsNeverInlined();
    public sealed virtual bool get_IsNeverOptimized();
    public sealed virtual bool get_IsAggressivelyInlined();
    public sealed virtual bool get_IsPlatformInvoke();
    public sealed virtual bool get_IsRuntimeImplemented();
    public sealed virtual bool get_IsRuntimeInternal();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual bool get_IsUnmanaged();
    public sealed virtual bool get_PreserveSignature();
    public sealed virtual bool get_RequiresSecurityObject();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.MethodDefinition/<get_SecurityAttributes>d__81")]
public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual bool get_IsConstructor();
    public sealed virtual bool get_IsStaticConstructor();
    public sealed virtual IPlatformInvokeInformation get_PlatformInvokeData();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual ushort get_ParameterCount();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.MethodDefinition/<get_ReturnValueAttributes>d__94")]
public sealed virtual IEnumerable`1<ICustomAttribute> get_ReturnValueAttributes();
    public sealed virtual bool get_ReturnValueIsMarshalledExplicitly();
    public sealed virtual IMarshallingInformation get_ReturnValueMarshallingInformation();
    public sealed virtual IName get_ReturnValueName();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual CallingConvention get_CallingConvention();
    public ITypeReference get_OwningTypeReference();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    internal IParameterDefinition[] get_RequiredModuleParameters();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MethodImplementation : object {
    private ITypeDefinition containingType;
    private IMethodReference methodDeclaration;
    private IMethodReference methodBody;
    public ITypeDefinition ContainingType { get; }
    public IMethodReference ImplementedMethod { get; }
    public IMethodReference ImplementingMethod { get; }
    internal MethodImplementation(ITypeDefinition containingType, IMethodReference methodDeclaration, IMethodReference methodBody);
    public sealed virtual ITypeDefinition get_ContainingType();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IMethodReference get_ImplementedMethod();
    public sealed virtual IMethodReference get_ImplementingMethod();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.MethodReference : MemberReference {
    internal byte FirstByte;
    protected ushort genericParameterCount;
    protected IEnumerable`1<ICustomModifier> returnCustomModifiers;
    protected ITypeReference returnTypeReference;
    protected bool isReturnByReference;
    protected IParameterTypeInformation[] requiredParameters;
    protected IParameterTypeInformation[] varArgParameters;
    private UInt32 internedKey;
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IEnumerable`1<ICustomModifier> ReturnCustomModifiers { get; }
    public IParameterTypeInformation[] RequiredModuleParameterInfos { get; }
    public IParameterTypeInformation[] VarArgModuleParameterInfos { get; }
    public bool AcceptsExtraArguments { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public ushort ParameterCount { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public CallingConvention CallingConvention { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    internal MethodReference(PEFileToObjectModel peFileToObjectModel, UInt32 memberRefRowId, ITypeReference parentTypeReference, IName name, byte firstByte);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    protected virtual void InitMethodSignature();
    public virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public virtual string ToString();
    public IEnumerable`1<ICustomModifier> get_ReturnCustomModifiers();
    public IParameterTypeInformation[] get_RequiredModuleParameterInfos();
    public IParameterTypeInformation[] get_VarArgModuleParameterInfos();
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public virtual IMethodDefinition get_ResolvedMethod();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ModifiedTypeReference : object {
    private PEFileToObjectModel peFileToObjectModel;
    private ITypeReference unmodifiedType;
    private IEnumerable`1<ICustomModifier> customModifiers;
    private UInt32 internedKey;
    public IPlatformType PlatformType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public ITypeDefinition ResolvedType { get; }
    public UInt32 InternedKey { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public ITypeReference UnmodifiedType { get; }
    internal ModifiedTypeReference(PEFileToObjectModel peFileToObjectModel, ITypeReference unmodifiedType, IEnumerable`1<ICustomModifier> customModifiers);
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual ITypeReference get_UnmodifiedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.Module : MetadataObject {
    internal IName ModuleName;
    private COR20Flags Cor20Flags;
    internal UInt32 InternedModuleId;
    internal ModuleIdentity ModuleIdentity;
    private IMethodReference entryPointMethodReference;
    internal UInt32 TokenValue { get; }
    private ulong Microsoft.Cci.IModule.BaseAddress { get; }
    private IAssembly Microsoft.Cci.IModule.ContainingAssembly { get; }
    private IEnumerable`1<IAssemblyReference> Microsoft.Cci.IModule.AssemblyReferences { get; }
    private string Microsoft.Cci.IModule.DebugInformationLocation { get; }
    private string Microsoft.Cci.IModule.DebugInformationVersion { get; }
    private ushort Microsoft.Cci.IModule.DllCharacteristics { get; }
    private IMethodReference Microsoft.Cci.IModule.EntryPoint { get; }
    private UInt32 Microsoft.Cci.IModule.FileAlignment { get; }
    private bool Microsoft.Cci.IModule.ILOnly { get; }
    private bool Microsoft.Cci.IModule.StrongNameSigned { get; }
    private bool Microsoft.Cci.IModule.Prefers32bits { get; }
    private ModuleKind Microsoft.Cci.IModule.Kind { get; }
    private byte Microsoft.Cci.IModule.LinkerMajorVersion { get; }
    private byte Microsoft.Cci.IModule.LinkerMinorVersion { get; }
    private byte Microsoft.Cci.IModule.MetadataFormatMajorVersion { get; }
    private byte Microsoft.Cci.IModule.MetadataFormatMinorVersion { get; }
    private IName Microsoft.Cci.IModule.ModuleName { get; }
    private IEnumerable`1<IModuleReference> Microsoft.Cci.IModule.ModuleReferences { get; }
    private Guid Microsoft.Cci.IModule.PersistentIdentifier { get; }
    private Machine Microsoft.Cci.IModule.Machine { get; }
    private bool Microsoft.Cci.IModule.RequiresAmdInstructionSet { get; }
    private bool Microsoft.Cci.IModule.RequiresStartupStub { get; }
    private bool Microsoft.Cci.IModule.Requires32bits { get; }
    private bool Microsoft.Cci.IModule.Requires64bits { get; }
    private ulong Microsoft.Cci.IModule.SizeOfHeapCommit { get; }
    private ulong Microsoft.Cci.IModule.SizeOfHeapReserve { get; }
    private ulong Microsoft.Cci.IModule.SizeOfStackCommit { get; }
    private ulong Microsoft.Cci.IModule.SizeOfStackReserve { get; }
    private ushort Microsoft.Cci.IModule.SubsystemMajorVersion { get; }
    private ushort Microsoft.Cci.IModule.SubsystemMinorVersion { get; }
    private string Microsoft.Cci.IModule.TargetRuntimeVersion { get; }
    private bool Microsoft.Cci.IModule.TrackDebugData { get; }
    private bool Microsoft.Cci.IModule.UsePublicKeyTokensForAssemblyReferences { get; }
    private IEnumerable`1<IWin32Resource> Microsoft.Cci.IModule.Win32Resources { get; }
    private IEnumerable`1<ICustomAttribute> Microsoft.Cci.IModule.ModuleAttributes { get; }
    public AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    public AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    private IPlatformType Microsoft.Cci.IUnit.PlatformType { get; }
    private string Microsoft.Cci.IUnit.Location { get; }
    private IEnumerable`1<IPESection> Microsoft.Cci.IUnit.UninterpretedSections { get; }
    private IRootUnitNamespace Microsoft.Cci.IUnit.UnitNamespaceRoot { get; }
    private IEnumerable`1<IUnitReference> Microsoft.Cci.IUnit.UnitReferences { get; }
    private INamespaceDefinition Microsoft.Cci.INamespaceRootOwner.NamespaceRoot { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    private ModuleIdentity Microsoft.Cci.IModuleReference.ModuleIdentity { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    private IModule Microsoft.Cci.IModuleReference.ResolvedModule { get; }
    public UnitIdentity UnitIdentity { get; }
    public IUnit ResolvedUnit { get; }
    private UInt32 Microsoft.Cci.MetadataReader.ObjectModelImplementation.IMetadataReaderModuleReference.InternedModuleId { get; }
    internal Module(PEFileToObjectModel peFileToObjectModel, IName moduleName, COR20Flags cor20Flags, UInt32 internedModuleId, ModuleIdentity moduleIdentity);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    public virtual string ToString();
    private sealed virtual override ulong Microsoft.Cci.IModule.get_BaseAddress();
    private sealed virtual override IAssembly Microsoft.Cci.IModule.get_ContainingAssembly();
    private sealed virtual override IEnumerable`1<IAssemblyReference> Microsoft.Cci.IModule.get_AssemblyReferences();
    private sealed virtual override string Microsoft.Cci.IModule.get_DebugInformationLocation();
    private sealed virtual override string Microsoft.Cci.IModule.get_DebugInformationVersion();
    private sealed virtual override ushort Microsoft.Cci.IModule.get_DllCharacteristics();
    private sealed virtual override IMethodReference Microsoft.Cci.IModule.get_EntryPoint();
    private sealed virtual override UInt32 Microsoft.Cci.IModule.get_FileAlignment();
    private sealed virtual override bool Microsoft.Cci.IModule.get_ILOnly();
    private sealed virtual override bool Microsoft.Cci.IModule.get_StrongNameSigned();
    private sealed virtual override bool Microsoft.Cci.IModule.get_Prefers32bits();
    private sealed virtual override ModuleKind Microsoft.Cci.IModule.get_Kind();
    private sealed virtual override byte Microsoft.Cci.IModule.get_LinkerMajorVersion();
    private sealed virtual override byte Microsoft.Cci.IModule.get_LinkerMinorVersion();
    private sealed virtual override byte Microsoft.Cci.IModule.get_MetadataFormatMajorVersion();
    private sealed virtual override byte Microsoft.Cci.IModule.get_MetadataFormatMinorVersion();
    private sealed virtual override IName Microsoft.Cci.IModule.get_ModuleName();
    private sealed virtual override IEnumerable`1<IModuleReference> Microsoft.Cci.IModule.get_ModuleReferences();
    private sealed virtual override Guid Microsoft.Cci.IModule.get_PersistentIdentifier();
    private sealed virtual override Machine Microsoft.Cci.IModule.get_Machine();
    private sealed virtual override bool Microsoft.Cci.IModule.get_RequiresAmdInstructionSet();
    private sealed virtual override bool Microsoft.Cci.IModule.get_RequiresStartupStub();
    private sealed virtual override bool Microsoft.Cci.IModule.get_Requires32bits();
    private sealed virtual override bool Microsoft.Cci.IModule.get_Requires64bits();
    private sealed virtual override ulong Microsoft.Cci.IModule.get_SizeOfHeapCommit();
    private sealed virtual override ulong Microsoft.Cci.IModule.get_SizeOfHeapReserve();
    private sealed virtual override ulong Microsoft.Cci.IModule.get_SizeOfStackCommit();
    private sealed virtual override ulong Microsoft.Cci.IModule.get_SizeOfStackReserve();
    private sealed virtual override ushort Microsoft.Cci.IModule.get_SubsystemMajorVersion();
    private sealed virtual override ushort Microsoft.Cci.IModule.get_SubsystemMinorVersion();
    private sealed virtual override string Microsoft.Cci.IModule.get_TargetRuntimeVersion();
    private sealed virtual override bool Microsoft.Cci.IModule.get_TrackDebugData();
    private sealed virtual override bool Microsoft.Cci.IModule.get_UsePublicKeyTokensForAssemblyReferences();
    private sealed virtual override IEnumerable`1<IWin32Resource> Microsoft.Cci.IModule.get_Win32Resources();
    private sealed virtual override IEnumerable`1<ICustomAttribute> Microsoft.Cci.IModule.get_ModuleAttributes();
    private sealed virtual override IEnumerable`1<string> Microsoft.Cci.IModule.GetStrings();
    private sealed virtual override IEnumerable`1<INamedTypeDefinition> Microsoft.Cci.IModule.GetAllTypes();
    private sealed virtual override IEnumerable`1<IGenericMethodInstanceReference> Microsoft.Cci.IModule.GetGenericMethodInstances();
    private sealed virtual override IEnumerable`1<ITypeReference> Microsoft.Cci.IModule.GetStructuralTypeInstances();
    private sealed virtual override IEnumerable`1<ITypeMemberReference> Microsoft.Cci.IModule.GetStructuralTypeInstanceMembers();
    private sealed virtual override IEnumerable`1<ITypeMemberReference> Microsoft.Cci.IModule.GetTypeMemberReferences();
    private sealed virtual override IEnumerable`1<ITypeReference> Microsoft.Cci.IModule.GetTypeReferences();
    public sealed virtual AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    public sealed virtual AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    private sealed virtual override IPlatformType Microsoft.Cci.IUnit.get_PlatformType();
    private sealed virtual override string Microsoft.Cci.IUnit.get_Location();
    private sealed virtual override IEnumerable`1<IPESection> Microsoft.Cci.IUnit.get_UninterpretedSections();
    private sealed virtual override IRootUnitNamespace Microsoft.Cci.IUnit.get_UnitNamespaceRoot();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.Module/<Microsoft-Cci-IUnit-get_UnitReferences>d__101")]
private sealed virtual override IEnumerable`1<IUnitReference> Microsoft.Cci.IUnit.get_UnitReferences();
    private sealed virtual override INamespaceDefinition Microsoft.Cci.INamespaceRootOwner.get_NamespaceRoot();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
    private sealed virtual override ModuleIdentity Microsoft.Cci.IModuleReference.get_ModuleIdentity();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    private sealed virtual override IModule Microsoft.Cci.IModuleReference.get_ResolvedModule();
    public sealed virtual UnitIdentity get_UnitIdentity();
    public sealed virtual IUnit get_ResolvedUnit();
    private sealed virtual override UInt32 Microsoft.Cci.MetadataReader.ObjectModelImplementation.IMetadataReaderModuleReference.get_InternedModuleId();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ModuleReference : MetadataObject {
    private UInt32 ModuleRefRowId;
    internal UInt32 InternedId;
    internal ModuleIdentity ModuleIdentity;
    private IModule resolvedModule;
    internal UInt32 TokenValue { get; }
    internal IModule ResolvedModule { get; }
    private UnitIdentity Microsoft.Cci.IUnitReference.UnitIdentity { get; }
    private IUnit Microsoft.Cci.IUnitReference.ResolvedUnit { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    private ModuleIdentity Microsoft.Cci.IModuleReference.ModuleIdentity { get; }
    private IModule Microsoft.Cci.IModuleReference.ResolvedModule { get; }
    private IAssemblyReference Microsoft.Cci.IModuleReference.ContainingAssembly { get; }
    public UInt32 InternedModuleId { get; }
    internal ModuleReference(PEFileToObjectModel peFileToObjectModel, UInt32 moduleRefRowId, UInt32 internedId, ModuleIdentity moduleIdentity);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    internal IModule get_ResolvedModule();
    public virtual string ToString();
    private sealed virtual override UnitIdentity Microsoft.Cci.IUnitReference.get_UnitIdentity();
    private sealed virtual override IUnit Microsoft.Cci.IUnitReference.get_ResolvedUnit();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
    private sealed virtual override ModuleIdentity Microsoft.Cci.IModuleReference.get_ModuleIdentity();
    private sealed virtual override IModule Microsoft.Cci.IModuleReference.get_ResolvedModule();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IModuleReference.get_ContainingAssembly();
    public sealed virtual UInt32 get_InternedModuleId();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.Namespace : ScopedContainerMetadataObject`3<INamespaceMember, INamespaceMember, INamespaceDefinition> {
    internal IName NamespaceName;
    internal IName NamespaceFullName;
    private UInt32 namespaceNameOffset;
    internal UInt32 NamespaceNameOffset { get; }
    internal UInt32 TokenValue { get; }
    public IUnit Unit { get; }
    public INamespaceRootOwner RootOwner { get; }
    public IName Name { get; }
    private IUnitReference Microsoft.Cci.IUnitNamespaceReference.Unit { get; }
    private IUnitNamespace Microsoft.Cci.IUnitNamespaceReference.ResolvedUnitNamespace { get; }
    protected Namespace(PEFileToObjectModel peFileToObjectModel, IName namespaceName, IName namespaceFullName);
    internal void SetNamespaceNameOffset(UInt32 namespaceNameOffset);
    internal UInt32 get_NamespaceNameOffset();
    internal virtual UInt32 get_TokenValue();
    internal virtual void LoadMembers();
    public virtual string ToString();
    public sealed virtual IUnit get_Unit();
    public sealed virtual INamespaceRootOwner get_RootOwner();
    public sealed virtual IName get_Name();
    private sealed virtual override IUnitReference Microsoft.Cci.IUnitNamespaceReference.get_Unit();
    private sealed virtual override IUnitNamespace Microsoft.Cci.IUnitNamespaceReference.get_ResolvedUnitNamespace();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceName : object {
    internal IName FullyQualifiedName;
    internal NamespaceName ParentNamespaceName;
    internal IName Name;
    internal NamespaceName(INameTable nameTable, NamespaceName parentNamespaceName, IName name);
    internal IUnitNamespace Resolve(IModule module);
    public virtual string ToString();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceReference : MetadataObject {
    internal IName NamespaceName;
    internal IName NamespaceFullName;
    internal IMetadataReaderModuleReference ModuleReference;
    internal UInt32 TokenValue { get; }
    public IUnitReference Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IName Name { get; }
    protected NamespaceReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference moduleReference, IName namespaceName, IName namespaceFullName);
    internal virtual UInt32 get_TokenValue();
    public virtual string ToString();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IUnitReference get_Unit();
    public abstract virtual IUnitNamespace get_ResolvedUnitNamespace();
    public IName get_Name();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceType : TypeBase {
    private Namespace ParentModuleNamespace;
    public IName NamespaceFullName { get; }
    public IUnitNamespace ContainingUnitNamespace { get; }
    public bool IsPublic { get; }
    public bool IsForeignObject { get; }
    public INamespaceDefinition ContainingNamespace { get; }
    public INamespaceDefinition Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Name { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    private IUnitNamespaceReference Microsoft.Cci.INamespaceTypeReference.ContainingUnitNamespace { get; }
    private INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    protected NamespaceType(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, Namespace parentModuleNamespace);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceType/<AttributesFor>d__2")]
public sealed virtual IEnumerable`1<ICustomAttribute> AttributesFor(ITypeReference implementedInterface);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual IName get_NamespaceFullName();
    public sealed virtual IUnitNamespace get_ContainingUnitNamespace();
    public sealed virtual bool get_IsPublic();
    public sealed virtual bool get_IsForeignObject();
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Name();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    private sealed virtual override IUnitNamespaceReference Microsoft.Cci.INamespaceTypeReference.get_ContainingUnitNamespace();
    private sealed virtual override INamespaceTypeDefinition Microsoft.Cci.INamespaceTypeReference.get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceTypeName : NominalTypeName {
    private ushort genericParameterCount;
    internal NamespaceName NamespaceName;
    internal IName Name;
    internal IName unmanagledTypeName;
    internal UInt32 GenericParameterCount { get; }
    internal IName UnmangledTypeName { get; }
    internal bool MangleName { get; }
    internal NamespaceTypeName(INameTable nameTable, NamespaceName namespaceName, IName name);
    private NamespaceTypeName(INameTable nameTable, NamespaceName namespaceName, IName name, IName unmangledTypeName);
    internal virtual UInt32 get_GenericParameterCount();
    internal virtual IMetadataReaderNamedTypeReference GetAsNomimalType(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
    private NamespaceName GetNamespaceName(INameTable nameTable, INestedUnitNamespaceReference nestedUnitNamespaceReference);
    internal virtual IName get_UnmangledTypeName();
    internal virtual INamedTypeDefinition ResolveNominalTypeName(IMetadataReaderModuleReference module);
    internal bool get_MangleName();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceTypeNameNamespaceReference : object {
    protected NamespaceTypeNameTypeReference NamespaceTypeNameTypeReference;
    public IUnitReference Unit { get; }
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    protected NamespaceTypeNameNamespaceReference(NamespaceTypeNameTypeReference namespaceTypeNameTypeReference);
    public sealed virtual IUnitReference get_Unit();
    public sealed virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceTypeNameTypeReference : TypeNameTypeReference {
    internal NamespaceTypeName NamespaceTypeName;
    private PrimitiveTypeCode typeCode;
    private INamespaceTypeDefinition resolvedType;
    public PrimitiveTypeCode TypeCode { get; }
    public ushort GenericParameterCount { get; }
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public INamespaceTypeDefinition ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    public IName Name { get; }
    public IName MangledTypeName { get; }
    public IName NamespaceFullName { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    internal NamespaceTypeNameTypeReference(IMetadataReaderModuleReference module, NamespaceTypeName namespaceTypeName, PEFileToObjectModel peFileToObjectModel);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    private INamedTypeDefinition Resolve();
    public virtual PrimitiveTypeCode get_TypeCode();
    private PrimitiveTypeCode UseNameToResolveTypeCode();
    public virtual ushort get_GenericParameterCount();
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    internal virtual INamedTypeDefinition GetResolvedType();
    public sealed virtual INamespaceTypeDefinition get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
    public virtual IName get_Name();
    public virtual IName get_MangledTypeName();
    public virtual IName get_NamespaceFullName();
    public virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceTypeRefReference : TypeRefReference {
    private NamespaceReference namespaceReference;
    public IName NamespaceFullName { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public INamespaceTypeDefinition ResolvedType { get; }
    public bool KeepDistinctFromDefinition { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    internal NamespaceTypeRefReference(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, NamespaceReference namespaceReference, bool isValueType);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual ExportedTypeAliasBase TryResolveAsExportedType();
    public virtual IName get_NamespaceFullName();
    public virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public sealed virtual INamespaceTypeDefinition get_ResolvedType();
    public sealed virtual bool get_KeepDistinctFromDefinition();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceTypeRefReferenceWithoutPrimitiveTypeCode : NonGenericNamespaceTypeRefReference {
    internal NamespaceTypeRefReferenceWithoutPrimitiveTypeCode(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, NamespaceReference namespaceReference, bool isValueType);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NamespaceTypeRefReferenceWithPrimitiveTypeCode : NonGenericNamespaceTypeRefReference {
    private MetadataReaderSignatureTypeCode signatureTypeCode;
    public PrimitiveTypeCode TypeCode { get; }
    internal NamespaceTypeRefReferenceWithPrimitiveTypeCode(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, NamespaceReference namespaceReference, MetadataReaderSignatureTypeCode signatureTypeCode);
    public virtual PrimitiveTypeCode get_TypeCode();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NestedNamespace : Namespace {
    private Namespace ParentModuleNamespace;
    public INamespaceDefinition ContainingNamespace { get; }
    public IUnitNamespace ContainingUnitNamespace { get; }
    public INamespaceDefinition Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.Name { get; }
    public IScope`1<INamespaceMember> ContainingScope { get; }
    private IUnitNamespaceReference Microsoft.Cci.INestedUnitNamespaceReference.ContainingUnitNamespace { get; }
    private INestedUnitNamespace Microsoft.Cci.INestedUnitNamespaceReference.ResolvedNestedUnitNamespace { get; }
    internal NestedNamespace(PEFileToObjectModel peFileToObjectModel, IName namespaceName, IName namespaceFullName, Namespace parentModuleNamespace);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual INamespaceDefinition get_ContainingNamespace();
    public sealed virtual IUnitNamespace get_ContainingUnitNamespace();
    public sealed virtual INamespaceDefinition get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.INamespaceDefinition>.get_Name();
    public sealed virtual IScope`1<INamespaceMember> get_ContainingScope();
    private sealed virtual override IUnitNamespaceReference Microsoft.Cci.INestedUnitNamespaceReference.get_ContainingUnitNamespace();
    private sealed virtual override INestedUnitNamespace Microsoft.Cci.INestedUnitNamespaceReference.get_ResolvedNestedUnitNamespace();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NestedNamespaceReference : NamespaceReference {
    private NamespaceReference ParentModuleNamespaceReference;
    private INestedUnitNamespace resolvedNamespace;
    public IUnitNamespace ResolvedUnitNamespace { get; }
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    private IName Microsoft.Cci.INamedEntity.Name { get; }
    internal NestedNamespaceReference(PEFileToObjectModel peFileToObjectModel, IName namespaceName, IName namespaceFullName, NamespaceReference parentModuleNamespaceReference);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual IUnitNamespace get_ResolvedUnitNamespace();
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public sealed virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
    private sealed virtual override IName Microsoft.Cci.INamedEntity.get_Name();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NestedNamespaceTypeNameNamespaceReference : NamespaceTypeNameNamespaceReference {
    private NamespaceName NamespaceName;
    public IUnitNamespaceReference ContainingUnitNamespace { get; }
    public INestedUnitNamespace ResolvedNestedUnitNamespace { get; }
    public IName Name { get; }
    internal NestedNamespaceTypeNameNamespaceReference(NamespaceName namespaceName, NamespaceTypeNameTypeReference namespaceTypeNameTypeReference);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IUnitNamespaceReference get_ContainingUnitNamespace();
    public sealed virtual INestedUnitNamespace get_ResolvedNestedUnitNamespace();
    public sealed virtual IName get_Name();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NestedType : TypeBase {
    internal TypeBase OwningModuleType;
    private ITypeReference enumUnderlyingType;
    public bool DoesNotInheritGenericParameters { get; }
    public ITypeReference UnderlyingType { get; }
    public IName NamespaceFullName { get; }
    public PrimitiveTypeCode TypeCode { get; }
    private ushort Microsoft.Cci.INestedTypeDefinition.GenericParameterCount { get; }
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeDefinition Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.Name { get; }
    public IScope`1<ITypeDefinitionMember> ContainingScope { get; }
    private INestedTypeDefinition Microsoft.Cci.INestedTypeReference.ResolvedType { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    protected NestedType(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, TypeBase parentModuleType);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual bool get_DoesNotInheritGenericParameters();
    public virtual ITypeReference get_UnderlyingType();
    public virtual IName get_NamespaceFullName();
    public virtual PrimitiveTypeCode get_TypeCode();
    private sealed virtual override ushort Microsoft.Cci.INestedTypeDefinition.get_GenericParameterCount();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public sealed virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeDefinition get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.get_Name();
    public sealed virtual IScope`1<ITypeDefinitionMember> get_ContainingScope();
    private sealed virtual override INestedTypeDefinition Microsoft.Cci.INestedTypeReference.get_ResolvedType();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NestedTypeName : NominalTypeName {
    private ushort genericParameterCount;
    internal NominalTypeName ContainingTypeName;
    internal IName Name;
    internal IName unmangledTypeName;
    internal UInt32 GenericParameterCount { get; }
    internal IName UnmangledTypeName { get; }
    internal bool MangleName { get; }
    internal NestedTypeName(INameTable nameTable, NominalTypeName containingTypeName, IName mangledName);
    internal virtual UInt32 get_GenericParameterCount();
    internal virtual IMetadataReaderNamedTypeReference GetAsNomimalType(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
    internal virtual IName get_UnmangledTypeName();
    internal virtual INamedTypeDefinition ResolveNominalTypeName(IMetadataReaderModuleReference module);
    internal bool get_MangleName();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NestedTypeNameTypeReference : TypeNameTypeReference {
    internal NestedTypeName NestedTypeName;
    private INestedTypeDefinition resolvedType;
    public ushort GenericParameterCount { get; }
    public INestedTypeDefinition ResolvedType { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public IName Name { get; }
    public IName MangledTypeName { get; }
    public IName NamespaceFullName { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    internal NestedTypeNameTypeReference(IMetadataReaderModuleReference module, NestedTypeName nestedTypeName, PEFileToObjectModel peFileToObjectModel);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    private INamedTypeDefinition Resolve();
    public virtual ushort get_GenericParameterCount();
    internal virtual INamedTypeDefinition GetResolvedType();
    public sealed virtual INestedTypeDefinition get_ResolvedType();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public virtual IName get_Name();
    public virtual IName get_MangledTypeName();
    public virtual IName get_NamespaceFullName();
    public virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NestedTypeRefReference : TypeRefReference {
    private IMetadataReaderNamedTypeReference parentTypeReference;
    public IName NamespaceFullName { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public INestedTypeDefinition ResolvedType { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    internal NestedTypeRefReference(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, IMetadataReaderNamedTypeReference parentTypeReference, bool isValueType);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual ExportedTypeAliasBase TryResolveAsExportedType();
    public virtual IName get_NamespaceFullName();
    public virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual INestedTypeDefinition get_ResolvedType();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    public virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NominalTypeName : TypeName {
    internal UInt32 GenericParameterCount { get; }
    internal IName UnmangledTypeName { get; }
    internal abstract virtual UInt32 get_GenericParameterCount();
    internal abstract virtual IMetadataReaderNamedTypeReference GetAsNomimalType(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
    internal virtual ITypeReference GetAsTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
    internal IMetadataReaderNamedTypeReference GetAsNamedTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
    internal abstract virtual INamedTypeDefinition ResolveNominalTypeName(IMetadataReaderModuleReference module);
    internal abstract virtual IName get_UnmangledTypeName();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NonGenericMethod : MethodDefinition {
    public IEnumerable`1<IGenericMethodParameter> GenericParameters { get; }
    public bool IsGeneric { get; }
    public ushort GenericParameterCount { get; }
    internal NonGenericMethod(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase parentModuleType, UInt32 methodDefRowId, MethodFlags methodFlags, MethodImplFlags methodImplFlags);
    public virtual IEnumerable`1<IGenericMethodParameter> get_GenericParameters();
    public virtual bool get_IsGeneric();
    public virtual ushort get_GenericParameterCount();
    public virtual string ToString();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NonGenericNamespaceType : NamespaceType {
    private ITypeReference enumUnderlyingType;
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool IsGeneric { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public ushort GenericTypeParameterCardinality { get; }
    public ushort ParentGenericTypeParameterCardinality { get; }
    public ITypeReference UnderlyingType { get; }
    public bool MangleName { get; }
    internal NonGenericNamespaceType(PEFileToObjectModel peFileToObjectModel, IName memberName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, Namespace parentModuleNamespace);
    public virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public virtual ushort get_GenericParameterCount();
    public virtual bool get_IsGeneric();
    public virtual IGenericTypeInstanceReference get_InstanceType();
    public virtual ushort get_GenericTypeParameterCardinality();
    public virtual ushort get_ParentGenericTypeParameterCardinality();
    public virtual ITypeReference GetGenericTypeParameterFromOrdinal(ushort genericParamOrdinal);
    public virtual ITypeReference get_UnderlyingType();
    public sealed virtual bool get_MangleName();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NonGenericNamespaceTypeRefReference : NamespaceTypeRefReference {
    public ushort GenericParameterCount { get; }
    public IName MangledTypeName { get; }
    public bool MangleName { get; }
    internal NonGenericNamespaceTypeRefReference(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, NamespaceReference namespaceReference, bool isValueType);
    public virtual ushort get_GenericParameterCount();
    public virtual IName get_MangledTypeName();
    public sealed virtual bool get_MangleName();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NonGenericNamespaceTypeWithoutPrimitiveType : NonGenericNamespaceType {
    public PrimitiveTypeCode TypeCode { get; }
    internal NonGenericNamespaceTypeWithoutPrimitiveType(PEFileToObjectModel peFileToObjectModel, IName memberName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, Namespace parentModuleNamespace);
    public virtual PrimitiveTypeCode get_TypeCode();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NonGenericNamespaceTypeWithPrimitiveType : NonGenericNamespaceType {
    private MetadataReaderSignatureTypeCode signatureTypeCode;
    public PrimitiveTypeCode TypeCode { get; }
    internal NonGenericNamespaceTypeWithPrimitiveType(PEFileToObjectModel peFileToObjectModel, IName memberName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, Namespace parentModuleNamespace, MetadataReaderSignatureTypeCode signatureTypeCode);
    public virtual string ToString();
    public virtual PrimitiveTypeCode get_TypeCode();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NonGenericNestedType : NestedType {
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public bool IsGeneric { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public ushort GenericTypeParameterCardinality { get; }
    public ushort ParentGenericTypeParameterCardinality { get; }
    internal NonGenericNestedType(PEFileToObjectModel peFileToObjectModel, IName memberName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags, TypeBase parentModuleType);
    public virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public virtual ushort get_GenericParameterCount();
    public virtual bool get_IsGeneric();
    public virtual IGenericTypeInstanceReference get_InstanceType();
    public virtual ushort get_GenericTypeParameterCardinality();
    public virtual ushort get_ParentGenericTypeParameterCardinality();
    public virtual ITypeReference GetGenericTypeParameterFromOrdinal(ushort genericParamOrdinal);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.NonGenericNestedTypeRefReference : NestedTypeRefReference {
    public ushort GenericParameterCount { get; }
    public IName MangledTypeName { get; }
    internal NonGenericNestedTypeRefReference(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, IMetadataReaderNamedTypeReference parentTypeReference, bool isValueType);
    public virtual ushort get_GenericParameterCount();
    public virtual IName get_MangledTypeName();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.Parameter : MetadataDefinitionObject {
    private ushort index;
    private IEnumerable`1<ICustomModifier> customModifiers;
    private ITypeReference type;
    private ISignature containingSignature;
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsByReference { get; }
    public bool IsIn { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsModified { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsParameterArray { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference ParamArrayElementType { get; }
    public ITypeReference Type { get; }
    public IName Name { get; }
    public ushort Index { get; }
    private IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.Constant { get; }
    internal Parameter(PEFileToObjectModel peFileToObjectModel, int index, IEnumerable`1<ICustomModifier> customModifiers, ITypeReference type, ISignature containingSignature);
    public virtual string ToString();
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public abstract virtual IMetadataConstant get_DefaultValue();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public abstract virtual bool get_HasDefaultValue();
    public abstract virtual bool get_IsByReference();
    public abstract virtual bool get_IsIn();
    public abstract virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsModified();
    public abstract virtual bool get_IsOptional();
    public abstract virtual bool get_IsOut();
    public abstract virtual bool get_IsParameterArray();
    public abstract virtual IMarshallingInformation get_MarshallingInformation();
    public abstract virtual ITypeReference get_ParamArrayElementType();
    public sealed virtual ITypeReference get_Type();
    public abstract virtual IName get_Name();
    public sealed virtual ushort get_Index();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.get_Constant();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ParameterInfo : MetadataObject {
    private ushort index;
    private IEnumerable`1<ICustomModifier> customModifiers;
    private ITypeReference type;
    private ISignature containingSignature;
    private bool isByReference;
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    public ITypeReference Type { get; }
    public ushort Index { get; }
    internal UInt32 TokenValue { get; }
    internal ParameterInfo(PEFileToObjectModel peFileToObjectModel, int parameterIndex, IEnumerable`1<ICustomModifier> moduleCustomModifiers, ITypeReference typeReference, ISignature containingSignatureDefinition, bool isByReference);
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual ushort get_Index();
    internal virtual UInt32 get_TokenValue();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ParameterWithMetadata : Parameter {
    private ParamFlags ParameterFlags;
    private IName ParameterName;
    private UInt32 ParamRowId;
    internal UInt32 TokenValue { get; }
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsByReference { get; }
    public bool IsIn { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsParameterArray { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference ParamArrayElementType { get; }
    public IName Name { get; }
    internal ParameterWithMetadata(PEFileToObjectModel peFileToObjectModel, int parameterIndex, IEnumerable`1<ICustomModifier> moduleCustomModifiers, ITypeReference typeReference, ISignature containingSignatureDefinition, bool isByReference, bool possibleParamArray, UInt32 paramRowId, IName parameterName, ParamFlags parameterFlags);
    internal virtual UInt32 get_TokenValue();
    public virtual IMetadataConstant get_DefaultValue();
    public virtual bool get_HasDefaultValue();
    public virtual bool get_IsByReference();
    public virtual bool get_IsIn();
    public virtual bool get_IsMarshalledExplicitly();
    public virtual bool get_IsOptional();
    public virtual bool get_IsOut();
    public virtual bool get_IsParameterArray();
    public virtual IMarshallingInformation get_MarshallingInformation();
    public virtual ITypeReference get_ParamArrayElementType();
    public virtual IName get_Name();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ParameterWithoutMetadata : Parameter {
    private bool isByReference;
    internal UInt32 TokenValue { get; }
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsByReference { get; }
    public bool IsIn { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsParameterArray { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference ParamArrayElementType { get; }
    public IName Name { get; }
    internal ParameterWithoutMetadata(PEFileToObjectModel peFileToObjectModel, int index, IEnumerable`1<ICustomModifier> moduleCustomModifiers, ITypeReference typeReference, ISignature containingSignature, bool isByReference);
    internal virtual UInt32 get_TokenValue();
    public virtual IMetadataConstant get_DefaultValue();
    public virtual bool get_HasDefaultValue();
    public virtual bool get_IsByReference();
    public virtual bool get_IsIn();
    public virtual bool get_IsMarshalledExplicitly();
    public virtual bool get_IsOptional();
    public virtual bool get_IsOut();
    public virtual bool get_IsParameterArray();
    public virtual IMarshallingInformation get_MarshallingInformation();
    public virtual ITypeReference get_ParamArrayElementType();
    public virtual IName get_Name();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.PESection : object {
    private SectionHeader[] sectionHeaders;
    private int index;
    private IName sectionName;
    private PEFileToObjectModel peFileToObjectModel;
    public IName SectionName { get; }
    public PESectionCharacteristics Characteristics { get; }
    public int VirtualAddress { get; }
    public int VirtualSize { get; }
    public int SizeOfRawData { get; }
    public IEnumerable`1<byte> Rawdata { get; }
    internal PESection(SectionHeader[] sectionHeaders, int index, IName sectionName, PEFileToObjectModel peFileToObjectModel);
    public sealed virtual IName get_SectionName();
    public sealed virtual PESectionCharacteristics get_Characteristics();
    public sealed virtual int get_VirtualAddress();
    public sealed virtual int get_VirtualSize();
    public sealed virtual int get_SizeOfRawData();
    public sealed virtual IEnumerable`1<byte> get_Rawdata();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.PlatformInvokeInformation : object {
    private PInvokeMapFlags PInvokeMapFlags;
    private IName ImportName;
    private ModuleReference ImportModule;
    private IName Microsoft.Cci.IPlatformInvokeInformation.ImportName { get; }
    private IModuleReference Microsoft.Cci.IPlatformInvokeInformation.ImportModule { get; }
    private StringFormatKind Microsoft.Cci.IPlatformInvokeInformation.StringFormat { get; }
    private bool Microsoft.Cci.IPlatformInvokeInformation.NoMangle { get; }
    private bool Microsoft.Cci.IPlatformInvokeInformation.SupportsLastError { get; }
    public PInvokeCallingConvention PInvokeCallingConvention { get; }
    private Nullable`1<bool> Microsoft.Cci.IPlatformInvokeInformation.ThrowExceptionForUnmappableChar { get; }
    private Nullable`1<bool> Microsoft.Cci.IPlatformInvokeInformation.UseBestFit { get; }
    internal PlatformInvokeInformation(PInvokeMapFlags pInvokeMapFlags, IName importName, ModuleReference importModule);
    private sealed virtual override IName Microsoft.Cci.IPlatformInvokeInformation.get_ImportName();
    private sealed virtual override IModuleReference Microsoft.Cci.IPlatformInvokeInformation.get_ImportModule();
    private sealed virtual override StringFormatKind Microsoft.Cci.IPlatformInvokeInformation.get_StringFormat();
    private sealed virtual override bool Microsoft.Cci.IPlatformInvokeInformation.get_NoMangle();
    private sealed virtual override bool Microsoft.Cci.IPlatformInvokeInformation.get_SupportsLastError();
    public sealed virtual PInvokeCallingConvention get_PInvokeCallingConvention();
    private sealed virtual override Nullable`1<bool> Microsoft.Cci.IPlatformInvokeInformation.get_ThrowExceptionForUnmappableChar();
    private sealed virtual override Nullable`1<bool> Microsoft.Cci.IPlatformInvokeInformation.get_UseBestFit();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.PointerTypeName : TypeName {
    internal TypeName TargetType;
    internal PointerTypeName(TypeName targetType);
    internal virtual ITypeReference GetAsTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.PointerTypeWithToken : PointerType {
    private UInt32 tokenValue;
    public UInt32 TokenValue { get; }
    internal PointerTypeWithToken(UInt32 tokenValue, ITypeReference targetType, IInternFactory internFactory);
    public sealed virtual UInt32 get_TokenValue();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.PropertyDefinition : TypeMember {
    internal UInt32 PropertyRowId;
    private PropertyFlags PropertyFlags;
    private byte FirstSignatureByte;
    private IEnumerable`1<ICustomModifier> returnValueCustomModifiers;
    private ITypeReference returnType;
    private IEnumerable`1<IParameterDefinition> parameters;
    private IMethodDefinition getterMethod;
    private IMethodDefinition setterMethod;
    private TypeMemberVisibility visibility;
    internal UInt32 TokenValue { get; }
    public TypeMemberVisibility Visibility { get; }
    internal IEnumerable`1<ICustomModifier> ReturnModuleCustomModifiers { get; }
    internal ITypeReference ReturnType { get; }
    internal IMethodDefinition GetterMethod { get; }
    internal IMethodDefinition SetterMethod { get; }
    public IEnumerable`1<IMethodReference> Accessors { get; }
    public IMetadataConstant DefaultValue { get; }
    public IMethodReference Getter { get; }
    public bool HasDefaultValue { get; }
    public bool IsRuntimeSpecial { get; }
    public bool IsSpecialName { get; }
    public IMethodReference Setter { get; }
    public IEnumerable`1<IParameterDefinition> Parameters { get; }
    public bool IsStatic { get; }
    private IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.Parameters { get; }
    public IEnumerable`1<ICustomModifier> ReturnValueCustomModifiers { get; }
    public bool ReturnValueIsByRef { get; }
    public bool ReturnValueIsModified { get; }
    public ITypeReference Type { get; }
    public CallingConvention CallingConvention { get; }
    private IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.Constant { get; }
    internal PropertyDefinition(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase containingType, UInt32 propertyRowId, PropertyFlags propertyFlags);
    internal virtual UInt32 get_TokenValue();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual TypeMemberVisibility get_Visibility();
    private void InitPropertySignature();
    internal IEnumerable`1<ICustomModifier> get_ReturnModuleCustomModifiers();
    internal ITypeReference get_ReturnType();
    internal IMethodDefinition get_GetterMethod();
    internal IMethodDefinition get_SetterMethod();
    public sealed virtual IEnumerable`1<IMethodReference> get_Accessors();
    public sealed virtual IMetadataConstant get_DefaultValue();
    public sealed virtual IMethodReference get_Getter();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual IMethodReference get_Setter();
    public sealed virtual IEnumerable`1<IParameterDefinition> get_Parameters();
    public sealed virtual bool get_IsStatic();
    private sealed virtual override IEnumerable`1<IParameterTypeInformation> Microsoft.Cci.ISignature.get_Parameters();
    public sealed virtual IEnumerable`1<ICustomModifier> get_ReturnValueCustomModifiers();
    public sealed virtual bool get_ReturnValueIsByRef();
    public sealed virtual bool get_ReturnValueIsModified();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual CallingConvention get_CallingConvention();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.get_Constant();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.Resource : ResourceReference {
    internal UInt32 TokenValue { get; }
    public IEnumerable`1<byte> Data { get; }
    public IFileReference ExternalFile { get; }
    public bool IsInExternalFile { get; }
    private IAssemblyReference Microsoft.Cci.IResourceReference.DefiningAssembly { get; }
    private IResource Microsoft.Cci.IResourceReference.Resource { get; }
    internal Resource(PEFileToObjectModel peFileToObjectModel, UInt32 resourceRowId, IName name, ManifestResourceFlags flags, bool inExternalFile);
    internal virtual UInt32 get_TokenValue();
    public sealed virtual IEnumerable`1<byte> get_Data();
    public sealed virtual IFileReference get_ExternalFile();
    public sealed virtual bool get_IsInExternalFile();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IResourceReference.get_DefiningAssembly();
    private sealed virtual override IResource Microsoft.Cci.IResourceReference.get_Resource();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ResourceReference : MetadataObject {
    internal UInt32 ResourceRowId;
    private IAssemblyReference DefiningAssembly;
    protected ManifestResourceFlags Flags;
    internal IName Name;
    private IResource resolvedResource;
    internal UInt32 TokenValue { get; }
    private IEnumerable`1<ICustomAttribute> Microsoft.Cci.IResourceReference.Attributes { get; }
    private IAssemblyReference Microsoft.Cci.IResourceReference.DefiningAssembly { get; }
    public bool IsPublic { get; }
    private IName Microsoft.Cci.IResourceReference.Name { get; }
    public IResource Resource { get; }
    internal ResourceReference(PEFileToObjectModel peFileToObjectModel, UInt32 resourceRowId, IAssemblyReference definingAssembly, ManifestResourceFlags flags, IName name);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    private sealed virtual override IEnumerable`1<ICustomAttribute> Microsoft.Cci.IResourceReference.get_Attributes();
    private sealed virtual override IAssemblyReference Microsoft.Cci.IResourceReference.get_DefiningAssembly();
    public sealed virtual bool get_IsPublic();
    private sealed virtual override IName Microsoft.Cci.IResourceReference.get_Name();
    public sealed virtual IResource get_Resource();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ReturnParameter : MetadataObject {
    private IName name;
    internal ParamFlags ReturnParamFlags;
    internal UInt32 ReturnParamRowId;
    internal UInt32 TokenValue { get; }
    public bool IsMarshalledExplicitly { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public IName Name { get; }
    internal ReturnParameter(PEFileToObjectModel peFileToObjectModel, IName name, ParamFlags returnParamFlags, UInt32 returnParamRowId);
    internal virtual UInt32 get_TokenValue();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public bool get_IsMarshalledExplicitly();
    public IMarshallingInformation get_MarshallingInformation();
    public IName get_Name();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.RootNamespace : Namespace {
    internal RootNamespace(PEFileToObjectModel peFileToObjectModel);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.RootNamespaceReference : NamespaceReference {
    public IUnitNamespace ResolvedUnitNamespace { get; }
    internal RootNamespaceReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference moduleReference);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual IUnitNamespace get_ResolvedUnitNamespace();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.RootNamespaceTypeNameNamespaceReference : NamespaceTypeNameNamespaceReference {
    internal RootNamespaceTypeNameNamespaceReference(NamespaceTypeNameTypeReference namespaceTypeNameTypeReference);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SafeArrayMarshallingInformation : object {
    private VarEnum ArrayElementType;
    private ITypeReference safeArrayElementUserDefinedSubType;
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    private UnmanagedType Microsoft.Cci.IMarshallingInformation.UnmanagedType { get; }
    public UInt32 IidParameterIndex { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    internal SafeArrayMarshallingInformation(VarEnum arrayElementType, ITypeReference safeArrayElementUserDefinedSubType);
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    private sealed virtual override UnmanagedType Microsoft.Cci.IMarshallingInformation.get_UnmanagedType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ScannerState : ValueType {
    internal int CurrentIndex;
    internal TypeNameTokenKind CurrentTypeNameTokenKind;
    internal IName CurrentIdentifierInfo;
    internal ScannerState(int currentIndex, TypeNameTokenKind currentTypeNameTokenKind, IName currentIdentifierInfo);
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.ScopedContainerMetadataObject`3 : MetadataDefinitionObject {
    private MultiHashtable`1<InternalMemberType> caseSensitiveMemberHashTable;
    private MultiHashtable`1<InternalMemberType> caseInsensitiveMemberHashTable;
    protected ContainerState ContainerState;
    internal ValuesEnumerable<InternalMemberType> InternalMembers { get; }
    public IEnumerable`1<ExternalMemberType> Members { get; }
    protected ScopedContainerMetadataObject`3(PEFileToObjectModel peFileToObjectModel);
    internal void StartLoadingMembers();
    internal void AddMember(InternalMemberType member);
    protected void DoneLoadingMembers();
    internal abstract virtual void LoadMembers();
    internal ValuesEnumerable<InternalMemberType> get_InternalMembers();
    public sealed virtual bool Contains(ExternalMemberType member);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.ScopedContainerMetadataObject`3/<GetMatchingMembersNamed>d__11")]
public sealed virtual IEnumerable`1<ExternalMemberType> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ExternalMemberType, bool> predicate);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.ScopedContainerMetadataObject`3/<GetMatchingMembers>d__12")]
public sealed virtual IEnumerable`1<ExternalMemberType> GetMatchingMembers(Function`2<ExternalMemberType, bool> predicate);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.ScopedContainerMetadataObject`3/<GetMembersNamed>d__13")]
public sealed virtual IEnumerable`1<ExternalMemberType> GetMembersNamed(IName name, bool ignoreCase);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.ScopedContainerMetadataObject`3/<get_Members>d__15")]
public sealed virtual IEnumerable`1<ExternalMemberType> get_Members();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SectionBlock : object {
    private PESectionKind PESectionKind;
    private UInt32 Offset;
    private MemoryBlock MemoryBlock;
    private PESectionKind Microsoft.Cci.ISectionBlock.PESectionKind { get; }
    private UInt32 Microsoft.Cci.ISectionBlock.Offset { get; }
    private UInt32 Microsoft.Cci.ISectionBlock.Size { get; }
    private IEnumerable`1<byte> Microsoft.Cci.ISectionBlock.Data { get; }
    internal SectionBlock(PESectionKind peSectionKind, UInt32 offset, MemoryBlock memoryBlock);
    private sealed virtual override PESectionKind Microsoft.Cci.ISectionBlock.get_PESectionKind();
    private sealed virtual override UInt32 Microsoft.Cci.ISectionBlock.get_Offset();
    private sealed virtual override UInt32 Microsoft.Cci.ISectionBlock.get_Size();
    private sealed virtual override IEnumerable`1<byte> Microsoft.Cci.ISectionBlock.get_Data();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SecurityAttribute : MetadataObject {
    internal SecurityAction Action;
    internal UInt32 DeclSecurityRowId;
    internal UInt32 TokenValue { get; }
    private SecurityAction Microsoft.Cci.ISecurityAttribute.Action { get; }
    internal SecurityAttribute(PEFileToObjectModel peFileToObjectModel, UInt32 declSecurityRowId, SecurityAction action);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    protected virtual IEnumerable`1<ICustomAttribute> GetAttributes();
    private sealed virtual override SecurityAction Microsoft.Cci.ISecurityAttribute.get_Action();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SecurityCustomAttribute : object {
    internal SecurityAttribute ContainingSecurityAttribute;
    internal IMethodReference ConstructorReference;
    internal IMetadataNamedArgument[] NamedArguments;
    private IEnumerable`1<IMetadataExpression> Microsoft.Cci.ICustomAttribute.Arguments { get; }
    public IMethodReference Constructor { get; }
    private IEnumerable`1<IMetadataNamedArgument> Microsoft.Cci.ICustomAttribute.NamedArguments { get; }
    private ushort Microsoft.Cci.ICustomAttribute.NumberOfNamedArguments { get; }
    public ITypeReference Type { get; }
    internal SecurityCustomAttribute(SecurityAttribute containingSecurityAttribute, IMethodReference constructorReference, IMetadataNamedArgument[] namedArguments);
    private sealed virtual override IEnumerable`1<IMetadataExpression> Microsoft.Cci.ICustomAttribute.get_Arguments();
    public sealed virtual IMethodReference get_Constructor();
    private sealed virtual override IEnumerable`1<IMetadataNamedArgument> Microsoft.Cci.ICustomAttribute.get_NamedArguments();
    private sealed virtual override ushort Microsoft.Cci.ICustomAttribute.get_NumberOfNamedArguments();
    public sealed virtual ITypeReference get_Type();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SignatureGenericMethodParameter : SignatureGenericParameter {
    private IMethodReference ModuleMethodReference;
    private ushort GenericParameterOrdinality;
    private IName name;
    private IGenericMethodParameter resolvedType;
    public ushort Index { get; }
    public IName Name { get; }
    public ITypeDefinition ResolvedType { get; }
    public IMethodDefinition DefiningMethod { get; }
    private IMethodReference Microsoft.Cci.IGenericMethodParameterReference.DefiningMethod { get; }
    private IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.ResolvedType { get; }
    internal SignatureGenericMethodParameter(PEFileToObjectModel peFileToObjectModel, IMethodReference moduleMethodReference, ushort genericParameterOrdinality);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual ushort get_Index();
    public virtual IName get_Name();
    public virtual ITypeDefinition get_ResolvedType();
    private void Resolve();
    public virtual string ToString();
    public IMethodDefinition get_DefiningMethod();
    private sealed virtual override IMethodReference Microsoft.Cci.IGenericMethodParameterReference.get_DefiningMethod();
    private sealed virtual override IGenericMethodParameter Microsoft.Cci.IGenericMethodParameterReference.get_ResolvedType();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SignatureGenericParameter : object {
    internal PEFileToObjectModel PEFileToObjectModel;
    private UInt32 internedKey;
    public IEnumerable`1<ITypeReference> Constraints { get; }
    public bool MustBeReferenceType { get; }
    public bool MustBeValueType { get; }
    public bool MustHaveDefaultConstructor { get; }
    public TypeParameterVariance Variance { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsSealed { get; }
    public bool IsReferenceType { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasSecurityAttributes { get; }
    public IPlatformType PlatformType { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public ushort Index { get; }
    public IName Name { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public ITypeDefinition ResolvedType { get; }
    public UInt32 InternedKey { get; }
    protected SignatureGenericParameter(PEFileToObjectModel peFileToObjectModel);
    public IEnumerable`1<ITypeReference> get_Constraints();
    public bool get_MustBeReferenceType();
    public bool get_MustBeValueType();
    public bool get_MustHaveDefaultConstructor();
    public TypeParameterVariance get_Variance();
    public ushort get_Alignment();
    public IEnumerable`1<ITypeReference> get_BaseClasses();
    public IEnumerable`1<IEventDefinition> get_Events();
    public IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public IEnumerable`1<IFieldDefinition> get_Fields();
    public IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public ushort get_GenericParameterCount();
    public IEnumerable`1<ITypeReference> get_Interfaces();
    public IGenericTypeInstanceReference get_InstanceType();
    public bool get_IsAbstract();
    public bool get_IsClass();
    public bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public bool get_IsGeneric();
    public bool get_IsInterface();
    public bool get_IsSealed();
    public bool get_IsReferenceType();
    public bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public bool get_IsStruct();
    public IEnumerable`1<ITypeDefinitionMember> get_Members();
    public IEnumerable`1<IMethodDefinition> get_Methods();
    public IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public IEnumerable`1<IPropertyDefinition> get_Properties();
    public UInt32 get_SizeOf();
    public IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public ITypeReference get_UnderlyingType();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    public LayoutKind get_Layout();
    public bool get_IsSpecialName();
    public bool get_IsComObject();
    public bool get_IsSerializable();
    public bool get_IsBeforeFieldInit();
    public StringFormatKind get_StringFormat();
    public bool get_IsRuntimeSpecial();
    public bool get_HasSecurityAttributes();
    public sealed virtual IPlatformType get_PlatformType();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public bool Contains(ITypeDefinitionMember member);
    public IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public abstract virtual ushort get_Index();
    public abstract virtual IName get_Name();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public abstract virtual ITypeDefinition get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SignatureGenericTypeParameter : SignatureGenericParameter {
    private INamedTypeReference TypeReference;
    private ushort GenericParameterIndex;
    private IName name;
    private IGenericTypeParameter resolvedType;
    public ushort Index { get; }
    public IName Name { get; }
    public ITypeDefinition ResolvedType { get; }
    public ITypeDefinition DefiningType { get; }
    private ITypeReference Microsoft.Cci.IGenericTypeParameterReference.DefiningType { get; }
    private IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.ResolvedType { get; }
    internal SignatureGenericTypeParameter(PEFileToObjectModel peFileToObjectModel, ITypeReference typeReference, ushort genericParameterOrdinality);
    private INamedTypeReference Unspecialize(ITypeReference typeReference);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual ushort get_Index();
    public virtual IName get_Name();
    public virtual ITypeDefinition get_ResolvedType();
    private IGenericTypeParameter Resolve();
    public virtual string ToString();
    public ITypeDefinition get_DefiningType();
    private sealed virtual override ITypeReference Microsoft.Cci.IGenericTypeParameterReference.get_DefiningType();
    private sealed virtual override IGenericTypeParameter Microsoft.Cci.IGenericTypeParameterReference.get_ResolvedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SimpleMarshallingInformation : object {
    private UnmanagedType unmanagedType;
    public ITypeReference CustomMarshaller { get; }
    public string CustomMarshallerRuntimeArgument { get; }
    public UnmanagedType ElementType { get; }
    public UnmanagedType UnmanagedType { get; }
    public UInt32 IidParameterIndex { get; }
    public UInt32 NumberOfElements { get; }
    public Nullable`1<UInt32> ParamIndex { get; }
    public VarEnum SafeArrayElementSubtype { get; }
    public ITypeReference SafeArrayElementUserDefinedSubtype { get; }
    internal SimpleMarshallingInformation(UnmanagedType unmanagedType);
    public sealed virtual ITypeReference get_CustomMarshaller();
    public sealed virtual string get_CustomMarshallerRuntimeArgument();
    public sealed virtual UnmanagedType get_ElementType();
    public sealed virtual UnmanagedType get_UnmanagedType();
    public sealed virtual UInt32 get_IidParameterIndex();
    public sealed virtual UInt32 get_NumberOfElements();
    public sealed virtual Nullable`1<UInt32> get_ParamIndex();
    public sealed virtual VarEnum get_SafeArrayElementSubtype();
    public sealed virtual ITypeReference get_SafeArrayElementUserDefinedSubtype();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SimpleStructuralType : MetadataDefinitionObject {
    private UInt32 TypeSpecToken;
    private UInt32 internedKey;
    internal UInt32 TokenValue { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public IEnumerable`1<ITypeDefinitionMember> Members { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public ITypeDefinition ResolvedType { get; }
    public UInt32 InternedKey { get; }
    private IPlatformType Microsoft.Cci.ITypeReference.PlatformType { get; }
    protected SimpleStructuralType(PEFileToObjectModel peFileToObjectModel, UInt32 typeSpecToken);
    internal virtual UInt32 get_TokenValue();
    internal void UpdateTypeSpecToken(UInt32 typeSpecToken);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual ushort get_Alignment();
    public virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public sealed virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public sealed virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_Members();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual UInt32 get_SizeOf();
    public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public sealed virtual ITypeReference get_UnderlyingType();
    public virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public virtual string ToString();
    public sealed virtual bool Contains(ITypeDefinitionMember member);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembersNamed(IName name, bool ignoreCase, Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMatchingMembers(Function`2<ITypeDefinitionMember, bool> predicate);
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> GetMembersNamed(IName name, bool ignoreCase);
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override IPlatformType Microsoft.Cci.ITypeReference.get_PlatformType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SpecializedParameter : object {
    internal IParameterDefinition RawTemplateParameter;
    internal ISignature ContainingSignatureDefinition;
    internal ITypeReference TypeReference;
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public IMetadataConstant DefaultValue { get; }
    public bool HasDefaultValue { get; }
    public bool IsByReference { get; }
    public bool IsIn { get; }
    public bool IsMarshalledExplicitly { get; }
    public bool IsModified { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsParameterArray { get; }
    public IMarshallingInformation MarshallingInformation { get; }
    public ITypeReference ParamArrayElementType { get; }
    public ITypeReference Type { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IName Name { get; }
    public ushort Index { get; }
    private IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.Constant { get; }
    internal SpecializedParameter(IParameterDefinition rawTemplateParameter, ISignature containingSignatureDefinition, ITypeReference typeReference);
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IMetadataConstant get_DefaultValue();
    public sealed virtual bool get_HasDefaultValue();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsIn();
    public sealed virtual bool get_IsMarshalledExplicitly();
    public sealed virtual bool get_IsModified();
    public sealed virtual bool get_IsOptional();
    public sealed virtual bool get_IsOut();
    public sealed virtual bool get_IsParameterArray();
    public sealed virtual IMarshallingInformation get_MarshallingInformation();
    public sealed virtual ITypeReference get_ParamArrayElementType();
    public sealed virtual ITypeReference get_Type();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_Index();
    private sealed virtual override IMetadataConstant Microsoft.Cci.IMetadataConstantContainer.get_Constant();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.SpecializedParameterInfo : object {
    internal IParameterTypeInformation RawTemplateParameterInfo;
    internal ISignature ContainingSignatureDefinition;
    internal ITypeReference TypeReference;
    public ushort Index { get; }
    public ISignature ContainingSignature { get; }
    public IEnumerable`1<ICustomModifier> CustomModifiers { get; }
    public bool IsByReference { get; }
    public bool IsModified { get; }
    public ITypeReference Type { get; }
    internal SpecializedParameterInfo(IParameterTypeInformation rawTemplateParameterInfo, ISignature containingSignatureDefinition, ITypeReference typeReference);
    public sealed virtual ushort get_Index();
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual IEnumerable`1<ICustomModifier> get_CustomModifiers();
    public sealed virtual bool get_IsByReference();
    public sealed virtual bool get_IsModified();
    public sealed virtual ITypeReference get_Type();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeBase : ScopedContainerMetadataObject`3<ITypeDefinitionMember, ITypeDefinitionMember, ITypeDefinition> {
    internal IName TypeName;
    internal UInt32 TypeDefRowId;
    internal TypeDefFlags TypeDefFlags;
    internal ITypeReference baseTypeReference;
    private UInt32 interfaceRowIdStart;
    private UInt32 interfaceRowIdEnd;
    protected byte initFlags;
    internal static byte BaseInitFlag;
    internal static byte EnumInited;
    internal static byte InheritTypeParametersInited;
    internal IEnumerable`1<INestedTypeDefinition> nestedTypes;
    private UInt32 internedKey;
    internal UInt32 TokenValue { get; }
    public IEnumerable`1<IEventDefinition> Events { get; }
    public IEnumerable`1<IFieldDefinition> Fields { get; }
    public IEnumerable`1<IMethodDefinition> Methods { get; }
    public IEnumerable`1<INestedTypeDefinition> NestedTypes { get; }
    public IEnumerable`1<ITypeDefinitionMember> PrivateHelperMembers { get; }
    public IEnumerable`1<IPropertyDefinition> Properties { get; }
    internal ITypeReference BaseTypeReference { get; }
    internal UInt32 InterfaceRowIdStart { get; }
    internal UInt32 InterfaceRowIdEnd { get; }
    internal UInt32 InterfaceCount { get; }
    public ushort Alignment { get; }
    public IEnumerable`1<ITypeReference> BaseClasses { get; }
    public IEnumerable`1<IMethodImplementation> ExplicitImplementationOverrides { get; }
    public IEnumerable`1<IGenericTypeParameter> GenericParameters { get; }
    public ushort GenericParameterCount { get; }
    public IEnumerable`1<ITypeReference> Interfaces { get; }
    public IGenericTypeInstanceReference InstanceType { get; }
    public bool IsAbstract { get; }
    public bool IsClass { get; }
    public bool IsDelegate { get; }
    public bool IsEnum { get; }
    public bool IsGeneric { get; }
    public bool IsInterface { get; }
    public bool IsReferenceType { get; }
    public bool IsSealed { get; }
    public bool IsStatic { get; }
    public bool IsValueType { get; }
    public bool IsStruct { get; }
    public UInt32 SizeOf { get; }
    public IEnumerable`1<ISecurityAttribute> SecurityAttributes { get; }
    public ITypeReference UnderlyingType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public LayoutKind Layout { get; }
    public bool IsSpecialName { get; }
    public bool IsComObject { get; }
    public bool IsSerializable { get; }
    public bool IsBeforeFieldInit { get; }
    public StringFormatKind StringFormat { get; }
    public bool IsRuntimeSpecial { get; }
    public bool HasDeclarativeSecurity { get; }
    public IName Name { get; }
    public IMetadataReaderModuleReference ModuleReference { get; }
    public IName NamespaceFullName { get; }
    public IName MangledTypeName { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public UInt32 InternedKey { get; }
    private IPlatformType Microsoft.Cci.ITypeReference.PlatformType { get; }
    public ushort GenericTypeParameterCardinality { get; }
    public ushort ParentGenericTypeParameterCardinality { get; }
    public bool MangleName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    protected TypeBase(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeDefRowId, TypeDefFlags typeDefFlags);
    internal virtual UInt32 get_TokenValue();
    internal virtual void LoadMembers();
    public sealed virtual IEnumerable`1<IEventDefinition> get_Events();
    public sealed virtual IEnumerable`1<IFieldDefinition> get_Fields();
    public sealed virtual IEnumerable`1<IMethodDefinition> get_Methods();
    public sealed virtual IEnumerable`1<INestedTypeDefinition> get_NestedTypes();
    public sealed virtual IEnumerable`1<ITypeDefinitionMember> get_PrivateHelperMembers();
    public sealed virtual IEnumerable`1<IPropertyDefinition> get_Properties();
    internal ITypeReference get_BaseTypeReference();
    internal UInt32 get_InterfaceRowIdStart();
    internal UInt32 get_InterfaceRowIdEnd();
    internal UInt32 get_InterfaceCount();
    public sealed virtual ushort get_Alignment();
    public sealed virtual IEnumerable`1<ITypeReference> get_BaseClasses();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeBase/<get_ExplicitImplementationOverrides>d__40")]
public sealed virtual IEnumerable`1<IMethodImplementation> get_ExplicitImplementationOverrides();
    public abstract virtual IEnumerable`1<IGenericTypeParameter> get_GenericParameters();
    public abstract virtual ushort get_GenericParameterCount();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeBase/<get_Interfaces>d__46")]
public sealed virtual IEnumerable`1<ITypeReference> get_Interfaces();
    public abstract virtual IGenericTypeInstanceReference get_InstanceType();
    public sealed virtual bool get_IsAbstract();
    public sealed virtual bool get_IsClass();
    public sealed virtual bool get_IsDelegate();
    public sealed virtual bool get_IsEnum();
    public abstract virtual bool get_IsGeneric();
    public sealed virtual bool get_IsInterface();
    public sealed virtual bool get_IsReferenceType();
    public sealed virtual bool get_IsSealed();
    public sealed virtual bool get_IsStatic();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsStruct();
    public sealed virtual UInt32 get_SizeOf();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeBase/<get_SecurityAttributes>d__74")]
public sealed virtual IEnumerable`1<ISecurityAttribute> get_SecurityAttributes();
    public abstract virtual ITypeReference get_UnderlyingType();
    public abstract virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual LayoutKind get_Layout();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual bool get_IsComObject();
    public sealed virtual bool get_IsSerializable();
    public sealed virtual bool get_IsBeforeFieldInit();
    public sealed virtual StringFormatKind get_StringFormat();
    public sealed virtual bool get_IsRuntimeSpecial();
    public sealed virtual bool get_HasDeclarativeSecurity();
    public virtual string ToString();
    public sealed virtual IName get_Name();
    public sealed virtual IMetadataReaderModuleReference get_ModuleReference();
    public abstract virtual IName get_NamespaceFullName();
    public virtual IName get_MangledTypeName();
    public sealed virtual ExportedTypeAliasBase TryResolveAsExportedType();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override IPlatformType Microsoft.Cci.ITypeReference.get_PlatformType();
    public abstract virtual ushort get_GenericTypeParameterCardinality();
    public abstract virtual ushort get_ParentGenericTypeParameterCardinality();
    public abstract virtual ITypeReference GetGenericTypeParameterFromOrdinal(ushort genericParamOrdinal);
    public virtual bool get_MangleName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeCache : object {
    internal static Byte[] EmptyByteArray;
    internal static PrimitiveTypeCode[] PrimitiveTypeCodeConv;
    internal PEFileToObjectModel PEFileToObjectModel;
    private Hashtable`1<ITypeReference> ModuleTypeHashTable;
    private static TypeMemberVisibility[0...,0...] LUB;
    private static TypeMemberVisibility[0...,0...] GLB;
    internal TypeCache(PEFileToObjectModel peFileToObjectModel);
    private static TypeCache();
    internal CoreTypeReference CreateCoreTypeReference(AssemblyReference coreAssemblyReference, NamespaceReference namespaceReference, IName typeName, MetadataReaderSignatureTypeCode signatureTypeCode);
    internal CoreTypeReference CreateCoreTypeReference(AssemblyReference coreAssemblyReference, NamespaceReference namespaceReference, IName typeName, ushort genericParameterCount, MetadataReaderSignatureTypeCode signatureTypeCode);
    internal static TypeMemberVisibility LeastUpperBound(TypeMemberVisibility left, TypeMemberVisibility right);
    internal static void SplitMangledTypeName(string mangledTypeName, String& typeName, UInt16& genericParamCount);
    internal static INamedTypeReference Unspecialize(ITypeReference typeReference);
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeMember : MetadataDefinitionObject {
    protected IName MemberName;
    internal TypeBase OwningModuleType;
    public ITypeDefinition ContainingTypeDefinition { get; }
    public TypeMemberVisibility Visibility { get; }
    public ITypeReference ContainingType { get; }
    public ITypeDefinitionMember ResolvedTypeDefinitionMember { get; }
    private ITypeDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.Container { get; }
    private IName Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.Name { get; }
    private IScope`1<ITypeDefinitionMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>>.ContainingScope { get; }
    public IName Name { get; }
    protected TypeMember(PEFileToObjectModel peFileToObjectModel, IName memberName, TypeBase owningModuleType);
    public virtual string ToString();
    public sealed virtual ITypeDefinition get_ContainingTypeDefinition();
    public abstract virtual TypeMemberVisibility get_Visibility();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual ITypeDefinitionMember get_ResolvedTypeDefinitionMember();
    private sealed virtual override ITypeDefinition Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.get_Container();
    private sealed virtual override IName Microsoft.Cci.IContainerMember<Microsoft.Cci.ITypeDefinition>.get_Name();
    private sealed virtual override IScope`1<ITypeDefinitionMember> Microsoft.Cci.IScopeMember<Microsoft.Cci.IScope<Microsoft.Cci.ITypeDefinitionMember>>.get_ContainingScope();
    public virtual IName get_Name();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeName : object {
    internal abstract virtual ITypeReference GetAsTypeReference(PEFileToObjectModel peFileToObjectModel, IMetadataReaderModuleReference module);
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeNameParser : object {
    private INameTable NameTable;
    private string TypeName;
    private int Length;
    private IName Version;
    private IName Retargetable;
    private IName PublicKeyToken;
    private IName Culture;
    private IName neutral;
    private int CurrentIndex;
    private TypeNameTokenKind CurrentTypeNameTokenKind;
    private IName CurrentIdentifierInfo;
    internal TypeNameParser(INameTable nameTable, string typeName);
    private ScannerState ScannerSnapshot();
    private void RestoreScanner(ScannerState scannerState);
    private void SkipSpaces();
    private static bool IsEndofIdentifier(char c, bool assemblyName);
    private Version ScanVersion();
    private bool ScanYesNo(Boolean& value);
    private Byte[] ScanPublicKeyToken();
    private void NextToken(bool assemblyName);
    private static bool IsTypeNameStart(TypeNameTokenKind typeNameTokenKind);
    private NamespaceTypeName ParseNamespaceTypeName();
    private TypeName ParseGenericTypeArgument();
    private NominalTypeName ParseNominalTypeName();
    private TypeName ParsePossiblyGenericTypeName();
    private TypeName ParseFullName();
    private AssemblyIdentity ParseAssemblyName(Boolean& retargetable);
    private TypeName ParseTypeNameWithPossibleAssemblyName();
    internal TypeName ParseTypeName();
}
internal enum Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeNameTokenKind : Enum {
    public int value__;
    public static TypeNameTokenKind EOS;
    public static TypeNameTokenKind Identifier;
    public static TypeNameTokenKind Dot;
    public static TypeNameTokenKind Plus;
    public static TypeNameTokenKind OpenBracket;
    public static TypeNameTokenKind CloseBracket;
    public static TypeNameTokenKind Astrix;
    public static TypeNameTokenKind Comma;
    public static TypeNameTokenKind Ampersand;
    public static TypeNameTokenKind Equals;
    public static TypeNameTokenKind PublicKeyToken;
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeNameTypeReference : object {
    internal IMetadataReaderModuleReference Module;
    internal PEFileToObjectModel PEFileToObjectModel;
    private UInt32 internedKey;
    private bool isEnum;
    public IAliasForType AliasForType { get; }
    public UInt32 InternedKey { get; }
    public bool IsAlias { get; }
    public bool IsEnum { get; public set; }
    public bool IsValueType { get; }
    public IPlatformType PlatformType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IEnumerable`1<ICustomAttribute> Attributes { get; }
    public IEnumerable`1<ILocation> Locations { get; }
    public IMetadataReaderModuleReference ModuleReference { get; }
    public IName NamespaceFullName { get; }
    public IName MangledTypeName { get; }
    public ushort GenericParameterCount { get; }
    public bool MangleName { get; }
    private INamedTypeDefinition Microsoft.Cci.INamedTypeReference.ResolvedType { get; }
    public IName Name { get; }
    internal TypeNameTypeReference(IMetadataReaderModuleReference module, PEFileToObjectModel peFileToObjectModel);
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public abstract virtual void DispatchAsReference(IMetadataVisitor visitor);
    public virtual string ToString();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsAlias();
    public sealed virtual bool get_IsEnum();
    public void set_IsEnum(bool value);
    public sealed virtual bool get_IsValueType();
    public sealed virtual IPlatformType get_PlatformType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IEnumerable`1<ICustomAttribute> get_Attributes();
    public sealed virtual IEnumerable`1<ILocation> get_Locations();
    public sealed virtual IMetadataReaderModuleReference get_ModuleReference();
    public abstract virtual IName get_NamespaceFullName();
    public abstract virtual IName get_MangledTypeName();
    public sealed virtual ExportedTypeAliasBase TryResolveAsExportedType();
    public abstract virtual ushort get_GenericParameterCount();
    public abstract virtual bool get_MangleName();
    private sealed virtual override INamedTypeDefinition Microsoft.Cci.INamedTypeReference.get_ResolvedType();
    internal abstract virtual INamedTypeDefinition GetResolvedType();
    public abstract virtual IName get_Name();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeOfExpression : ExpressionBase {
    private PEFileToObjectModel PEFileToObjectModel;
    private ITypeReference TypeExpression;
    internal ITypeReference ModuleTypeReference { get; }
    public ITypeReference TypeToGet { get; }
    internal TypeOfExpression(PEFileToObjectModel peFileToObjectModel, ITypeReference typeExpression);
    internal virtual ITypeReference get_ModuleTypeReference();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual ITypeReference get_TypeToGet();
}
internal abstract class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeRefReference : MetadataObject {
    internal UInt32 TypeRefRowId;
    private IMetadataReaderModuleReference moduleReference;
    protected IName typeName;
    private bool isResolved;
    private bool isAliasIsInitialized;
    protected internal bool isValueType;
    private INamedTypeDefinition resolvedTypeDefinition;
    private ExportedTypeAliasBase exportedAliasBase;
    private UInt32 internedKey;
    internal UInt32 TokenValue { get; }
    public IMetadataReaderModuleReference ModuleReference { get; }
    public IName NamespaceFullName { get; }
    public IName MangledTypeName { get; }
    public INamedTypeDefinition ResolvedType { get; }
    private ITypeDefinition Microsoft.Cci.ITypeReference.ResolvedType { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public UInt32 InternedKey { get; }
    private IPlatformType Microsoft.Cci.ITypeReference.PlatformType { get; }
    public PrimitiveTypeCode TypeCode { get; }
    public IName Name { get; }
    public bool MangleName { get; }
    public ushort GenericParameterCount { get; }
    internal TypeRefReference(PEFileToObjectModel peFileToObjectModel, IName typeName, UInt32 typeRefRowId, IMetadataReaderModuleReference moduleReference, bool isValueType);
    internal virtual UInt32 get_TokenValue();
    public abstract virtual ExportedTypeAliasBase TryResolveAsExportedType();
    internal void InitResolvedModuleType();
    internal void InitExportedAliasBase();
    public virtual string ToString();
    public virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual IMetadataReaderModuleReference get_ModuleReference();
    public abstract virtual IName get_NamespaceFullName();
    public abstract virtual IName get_MangledTypeName();
    public sealed virtual INamedTypeDefinition get_ResolvedType();
    private sealed virtual override ITypeDefinition Microsoft.Cci.ITypeReference.get_ResolvedType();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual bool get_IsEnum();
    public virtual bool get_IsValueType();
    public sealed virtual UInt32 get_InternedKey();
    private sealed virtual override IPlatformType Microsoft.Cci.ITypeReference.get_PlatformType();
    public abstract virtual PrimitiveTypeCode get_TypeCode();
    public sealed virtual IName get_Name();
    public abstract virtual bool get_MangleName();
    public abstract virtual ushort get_GenericParameterCount();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.TypeSpecReference : MetadataObject {
    internal UInt32 TypeSpecRowId;
    internal MetadataObject TypeSpecOwner;
    private bool underlyingTypeInited;
    private ITypeReference underlyingModuleTypeReference;
    private UInt32 internedKey;
    internal UInt32 TokenValue { get; }
    internal ITypeReference UnderlyingModuleTypeReference { get; }
    public bool IsAlias { get; }
    public IAliasForType AliasForType { get; }
    public ITypeDefinition ResolvedType { get; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public UInt32 InternedKey { get; }
    public PrimitiveTypeCode TypeCode { get; }
    private IPlatformType Microsoft.Cci.ITypeReference.PlatformType { get; }
    internal TypeSpecReference(PEFileToObjectModel peFileToObjectModel, UInt32 typeSpecRowId, MetadataObject typeSpecOwner);
    public virtual void Dispatch(IMetadataVisitor visitor);
    public virtual void DispatchAsReference(IMetadataVisitor visitor);
    internal virtual UInt32 get_TokenValue();
    internal ITypeReference get_UnderlyingModuleTypeReference();
    public virtual string ToString();
    public sealed virtual bool get_IsAlias();
    public sealed virtual IAliasForType get_AliasForType();
    public sealed virtual ITypeDefinition get_ResolvedType();
    public sealed virtual bool get_IsEnum();
    public sealed virtual bool get_IsValueType();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual PrimitiveTypeCode get_TypeCode();
    private sealed virtual override IPlatformType Microsoft.Cci.ITypeReference.get_PlatformType();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.VectorWithToken : Vector {
    private UInt32 tokenValue;
    public UInt32 TokenValue { get; }
    internal VectorWithToken(UInt32 tokenValue, ITypeReference elementType, IInternFactory internFactory);
    public sealed virtual UInt32 get_TokenValue();
}
internal class Microsoft.Cci.MetadataReader.ObjectModelImplementation.Win32Resource : object {
    internal PEFileToObjectModel PEFileToObjectModel;
    internal int TypeIdOrName;
    internal int IdOrName;
    internal int LanguageIdOrName;
    internal int RVAToData;
    internal UInt32 Size;
    internal UInt32 CodePage;
    public string TypeName { get; }
    public int TypeId { get; }
    public string Name { get; }
    public int Id { get; }
    public UInt32 LanguageId { get; }
    private UInt32 Microsoft.Cci.IWin32Resource.CodePage { get; }
    public IEnumerable`1<byte> Data { get; }
    internal Win32Resource(PEFileToObjectModel peFileTOObjectModel, int typeIdOrName, int idOrName, int languageIdOrName, int rvaToData, UInt32 size, UInt32 codePage);
    public sealed virtual string get_TypeName();
    public sealed virtual int get_TypeId();
    public sealed virtual string get_Name();
    public sealed virtual int get_Id();
    public sealed virtual UInt32 get_LanguageId();
    private sealed virtual override UInt32 Microsoft.Cci.IWin32Resource.get_CodePage();
    public sealed virtual IEnumerable`1<byte> get_Data();
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyOSRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyOSTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal int OSPlatformIdOffset;
    internal int OSMajorVersionIdOffset;
    internal int OSMinorVersionIdOffset;
    internal int RowSize;
    internal MemoryReader AssemblyOSTableMemoryReader;
    internal AssemblyOSTableReader(UInt32 numberOfRows, Byte* buffer);
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyProcessorRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyProcessorTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal int ProcessorOffset;
    internal int RowSize;
    internal MemoryReader AssemblyProcessorTableMemoryReader;
    internal AssemblyProcessorTableReader(UInt32 numberOfRows, Byte* buffer);
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyRefOSRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyRefOSTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsAssemblyRefTableRowRefSizeSmall;
    internal int OSPlatformIdOffset;
    internal int OSMajorVersionIdOffset;
    internal int OSMinorVersionIdOffset;
    internal int AssemblyRefOffset;
    internal int RowSize;
    internal MemoryReader AssemblyRefOSTableMemoryReader;
    internal AssemblyRefOSTableReader(UInt32 numberOfRows, int assembyRefTableRowRefSize, Byte* buffer);
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyRefProcessorRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyRefProcessorTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsAssemblyRefTableRowSizeSmall;
    internal int ProcessorOffset;
    internal int AssemblyRefOffset;
    internal int RowSize;
    internal MemoryReader AssemblyRefProcessorTableMemoryReader;
    internal AssemblyRefProcessorTableReader(UInt32 numberOfRows, int assembyRefTableRowRefSize, Byte* buffer);
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyRefRow : ValueType {
    internal ushort MajorVersion;
    internal ushort MinorVersion;
    internal ushort BuildNumber;
    internal ushort RevisionNumber;
    internal AssemblyFlags Flags;
    internal UInt32 PublicKeyOrToken;
    internal UInt32 Name;
    internal UInt32 Culture;
    internal UInt32 HashValue;
    internal AssemblyRefRow(ushort majorVersion, ushort minorVersion, ushort buildNumber, ushort revisionNumber, AssemblyFlags flags, UInt32 publicKeyOrToken, UInt32 name, UInt32 culture, UInt32 hashValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyRefTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int MajorVersionOffset;
    internal int MinorVersionOffset;
    internal int BuildNumberOffset;
    internal int RevisionNumberOffset;
    internal int FlagsOffset;
    internal int PublicKeyOrTokenOffset;
    internal int NameOffset;
    internal int CultureOffset;
    internal int HashValueOffset;
    internal int RowSize;
    internal MemoryReader AssemblyRefTableMemoryReader;
    internal AssemblyRefRow Item { get; }
    internal AssemblyRefTableReader(UInt32 numberOfRows, int stringHeapRefSize, int blobHeapRefSize, Byte* buffer);
    internal AssemblyRefRow get_Item(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyRow : ValueType {
    internal UInt32 HashAlgId;
    internal ushort MajorVersion;
    internal ushort MinorVersion;
    internal ushort BuildNumber;
    internal ushort RevisionNumber;
    internal AssemblyFlags Flags;
    internal UInt32 PublicKey;
    internal UInt32 Name;
    internal UInt32 Culture;
    internal AssemblyRow(UInt32 hashAlgId, ushort majorVersion, ushort minorVersion, ushort buildNumber, ushort revisionNumber, AssemblyFlags flags, UInt32 publicKey, UInt32 name, UInt32 culture);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.AssemblyTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int HashAlgIdOffset;
    internal int MajorVersionOffset;
    internal int MinorVersionOffset;
    internal int BuildNumberOffset;
    internal int RevisionNumberOffset;
    internal int FlagsOffset;
    internal int PublicKeyOffset;
    internal int NameOffset;
    internal int CultureOffset;
    internal int RowSize;
    internal MemoryReader AssemblyTableMemoryReader;
    internal AssemblyRow Item { get; }
    internal AssemblyTableReader(UInt32 numberOfRows, int stringHeapRefSize, int blobHeapRefSize, Byte* buffer);
    internal AssemblyRow get_Item(UInt32 rowId);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.BlobStreamReader : ValueType {
    internal static Byte[] Empty;
    internal MemoryReader MemoryReader;
    internal Byte[] Item { get; }
    private static BlobStreamReader();
    internal Byte[] get_Item(UInt32 offset);
    internal byte GetByteAt(UInt32 offset, int index);
    internal MemoryBlock GetMemoryBlockAt(UInt32 offset);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.CILMethodFlags : object {
    internal static byte ILTinyFormat;
    internal static byte ILFatFormat;
    internal static byte ILFormatMask;
    internal static int ILTinyFormatSizeShift;
    internal static byte ILMoreSects;
    internal static byte ILInitLocals;
    internal static byte ILFatFormatHeaderSize;
    internal static int ILFatFormatHeaderSizeShift;
    internal static byte SectEHTable;
    internal static byte SectOptILTable;
    internal static byte SectFatFormat;
    internal static byte SectMoreSects;
}
internal class Microsoft.Cci.MetadataReader.PEFile.ClassLayoutRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.ClassLayoutTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeDefTableRowRefSizeSmall;
    internal int PackagingSizeOffset;
    internal int ClassSizeOffset;
    internal int ParentOffset;
    internal int RowSize;
    internal MemoryReader ClassLayoutTableMemoryReader;
    internal ClassLayoutTableReader(UInt32 numberOfRows, int typeDefTableRowRefSize, Byte* buffer);
    internal ushort GetPackingSize(UInt32 typeRowId);
    internal UInt32 GetClassSize(UInt32 typeRowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.COFFFileHeader : ValueType {
    internal Machine Machine;
    internal short NumberOfSections;
    internal int TimeDateStamp;
    internal int PointerToSymbolTable;
    internal int NumberOfSymbols;
    internal short SizeOfOptionalHeader;
    internal Characteristics Characteristics;
}
internal class Microsoft.Cci.MetadataReader.PEFile.ConstantRow : ValueType {
    internal byte Type;
    internal UInt32 Parent;
    internal UInt32 Value;
    internal ConstantRow(byte type, UInt32 parent, UInt32 value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.ConstantTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsHasConstantRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int TypeOffset;
    internal int ParentOffset;
    internal int ValueOffset;
    internal int RowSize;
    internal MemoryReader ConstantTableMemoryReader;
    internal ConstantRow Item { get; }
    internal ConstantTableReader(UInt32 numberOfRows, int hasConstantRefSize, int blobHeapRefSize, Byte* buffer);
    internal ConstantRow get_Item(UInt32 rowId);
    internal UInt32 GetConstantRowId(UInt32 parentToken);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.COR20Constants : object {
    internal static int SizeOfCOR20Header;
    internal static UInt32 COR20MetadataSignature;
    internal static int MinimumSizeofMetadataHeader;
    internal static int SizeofStorageHeader;
    internal static int MinimumSizeofStreamHeader;
    internal static string StringStreamName;
    internal static string BlobStreamName;
    internal static string GUIDStreamName;
    internal static string UserStringStreamName;
    internal static string CompressedMetadataTableStreamName;
    internal static string UncompressedMetadataTableStreamName;
    internal static int LargeStreamHeapSize;
}
internal class Microsoft.Cci.MetadataReader.PEFile.COR20Header : ValueType {
    internal int CountBytes;
    internal ushort MajorRuntimeVersion;
    internal ushort MinorRuntimeVersion;
    internal DirectoryEntry MetaDataDirectory;
    internal COR20Flags COR20Flags;
    internal UInt32 EntryPointTokenOrRVA;
    internal DirectoryEntry ResourcesDirectory;
    internal DirectoryEntry StrongNameSignatureDirectory;
    internal DirectoryEntry CodeManagerTableDirectory;
    internal DirectoryEntry VtableFixupsDirectory;
    internal DirectoryEntry ExportAddressTableJumpsDirectory;
    internal DirectoryEntry ManagedNativeHeaderDirectory;
}
internal class Microsoft.Cci.MetadataReader.PEFile.CustomAttributeRow : ValueType {
    internal UInt32 Parent;
    internal UInt32 Type;
    internal UInt32 Value;
    internal CustomAttributeRow(UInt32 parent, UInt32 type, UInt32 value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.CustomAttributeTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsHasCustomAttributeRefSizeSmall;
    internal bool IsCustomAttriubuteTypeRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int ParentOffset;
    internal int TypeOffset;
    internal int ValueOffset;
    internal int RowSize;
    internal MemoryReader CustomAttributeTableMemoryReader;
    internal CustomAttributeRow Item { get; }
    internal CustomAttributeTableReader(UInt32 numberOfRows, int hasCustomAttributeRefSize, int customAttributeTypeRefSize, int blobHeapRefSize, Byte* buffer);
    internal CustomAttributeRow get_Item(UInt32 rowId);
    internal UInt32 FindCustomAttributesForToken(UInt32 token, UInt32& customAttributeCount);
    private UInt32 BinarySearchTag(UInt32 searchCodedTag, UInt32& customAttributeCount);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.CustomAttributeTypeTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Method;
    internal static UInt32 MemberRef;
    internal static UInt32 TagMask;
    internal static UInt32[] TagToTokenTypeArray;
    internal static TableMask TablesReferenced;
    private static CustomAttributeTypeTag();
    internal static UInt32 ConvertToToken(UInt32 customAttributeType);
}
internal class Microsoft.Cci.MetadataReader.PEFile.DeclSecurityRow : ValueType {
    internal DeclSecurityActionFlags ActionFlags;
    internal UInt32 Parent;
    internal UInt32 PermissionSet;
    internal DeclSecurityRow(DeclSecurityActionFlags actionFlags, UInt32 parent, UInt32 permissionSet);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.DeclSecurityTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsHasDeclSecurityRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int ActionOffset;
    internal int ParentOffset;
    internal int PermissionSetOffset;
    internal int RowSize;
    internal MemoryReader DeclSecurityTableMemoryReader;
    internal DeclSecurityRow Item { get; }
    internal DeclSecurityTableReader(UInt32 numberOfRows, int hasDeclSecurityRefSize, int blobHeapRefSize, Byte* buffer);
    internal DeclSecurityRow get_Item(UInt32 rowId);
    internal UInt32 FindSecurityAttributesForToken(UInt32 token, UInt32& securityAttributeCount);
    private UInt32 BinarySearchTag(UInt32 searchCodedTag, UInt32& securityAttributeCount);
}
internal class Microsoft.Cci.MetadataReader.PEFile.DirectoryEntry : ValueType {
    internal int RelativeVirtualAddress;
    internal UInt32 Size;
}
internal class Microsoft.Cci.MetadataReader.PEFile.EnCLogRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.EnCLogTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal int TokenOffset;
    internal int FuncCodeOffset;
    internal int RowSize;
    internal MemoryReader EnCLogTableMemoryReader;
    internal EnCLogTableReader(UInt32 numberOfRows, Byte* buffer);
}
internal class Microsoft.Cci.MetadataReader.PEFile.EnCMapRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.EnCMapTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal int TokenOffset;
    internal int RowSize;
    internal MemoryReader EnCMapTableMemoryReader;
    internal EnCMapTableReader(UInt32 numberOfRows, Byte* buffer);
}
internal class Microsoft.Cci.MetadataReader.PEFile.EventMapRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.EventMapTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeDefTableRowRefSizeSmall;
    internal bool IsEventRefSizeSmall;
    internal int ParentOffset;
    internal int EventListOffset;
    internal int RowSize;
    internal MemoryReader EventMapTableMemoryReader;
    internal EventMapTableReader(UInt32 numberOfRows, int typeDefTableRowRefSize, int eventRefSize, Byte* buffer);
    internal UInt32 FindEventMapRowIdFor(UInt32 typeDefRowId);
    internal UInt32 GetEventListStartFor(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.EventPtrRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.EventPtrTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsEventTableRowRefSizeSmall;
    internal int EventOffset;
    internal int RowSize;
    internal MemoryReader EventPtrTableMemoryReader;
    internal EventPtrTableReader(UInt32 numberOfRows, int eventTableRowRefSize, Byte* buffer);
    internal UInt32 GetEventFor(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.EventRow : ValueType {
    internal EventFlags Flags;
    internal UInt32 Name;
    internal UInt32 EventType;
    internal EventRow(EventFlags flags, UInt32 name, UInt32 eventType);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.EventTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeDefOrRefRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int NameOffset;
    internal int EventTypeOffset;
    internal int RowSize;
    internal MemoryReader EventTableMemoryReader;
    internal EventRow Item { get; }
    internal EventTableReader(UInt32 numberOfRows, int typeDefOrRefRefSize, int stringHeapRefSize, Byte* buffer);
    internal EventRow get_Item(UInt32 rowId);
    internal UInt32 GetEventType(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ExportedTypeRow : ValueType {
    internal TypeDefFlags Flags;
    internal UInt32 TypeDefId;
    internal UInt32 TypeName;
    internal UInt32 TypeNamespace;
    internal UInt32 Implementation;
    internal bool IsNested { get; }
    internal ExportedTypeRow(TypeDefFlags typeDefFlags, UInt32 TypeDefId, UInt32 typeName, UInt32 typeNamespace, UInt32 implementation);
    internal bool get_IsNested();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.ExportedTypeTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsImplementationRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int TypeDefIdOffset;
    internal int TypeNameOffset;
    internal int TypeNamespaceOffset;
    internal int ImplementationOffset;
    internal int RowSize;
    internal MemoryReader ExportedTypeTableMemoryReader;
    internal ExportedTypeRow Item { get; }
    internal ExportedTypeTableReader(UInt32 numberOfRows, int implementationRefSize, int stringHeapRefSize, Byte* buffer);
    internal ExportedTypeRow get_Item(UInt32 rowId);
    internal UInt32 GetNamespace(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldLayoutRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldLayoutTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsFieldTableRowRefSizeSmall;
    internal int OffsetOffset;
    internal int FieldOffset;
    internal int RowSize;
    internal MemoryReader FieldLayoutTableMemoryReader;
    internal FieldLayoutTableReader(UInt32 numberOfRows, int fieldTableRowRefSize, Byte* buffer);
    internal UInt32 GetOffset(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldMarshalRow : ValueType {
    internal UInt32 Parent;
    internal UInt32 NativeType;
    internal FieldMarshalRow(UInt32 parent, UInt32 nativeType);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.FieldMarshalTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsHasFieldMarshalRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int ParentOffset;
    internal int NativeTypeOffset;
    internal int RowSize;
    internal MemoryReader FieldMarshalTableMemoryReader;
    internal FieldMarshalRow Item { get; }
    internal FieldMarshalTableReader(UInt32 numberOfRows, int hasFieldMarshalRefSize, int blobHeapRefSize, Byte* buffer);
    internal FieldMarshalRow get_Item(UInt32 rowId);
    internal UInt32 GetFieldMarshalRowId(UInt32 token);
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldPtrRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldPtrTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsFieldTableRowRefSizeSmall;
    internal int FieldOffset;
    internal int RowSize;
    internal MemoryReader FieldPtrTableMemoryReader;
    internal FieldPtrTableReader(UInt32 numberOfRows, int fieldTableRowRefSize, Byte* buffer);
    internal UInt32 GetFieldFor(UInt32 rowId);
    internal UInt32 GetRowIdForFieldDefRow(UInt32 fieldDefRowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldRow : ValueType {
    internal FieldFlags Flags;
    internal UInt32 Name;
    internal UInt32 Signature;
    internal FieldRow(FieldFlags flags, UInt32 name, UInt32 signature);
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldRVARow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.FieldRVATableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsFieldTableRowRefSizeSmall;
    internal int RVAOffset;
    internal int FieldOffset;
    internal int RowSize;
    internal MemoryReader FieldRVATableMemoryReader;
    internal FieldRVATableReader(UInt32 numberOfRows, int fieldTableRowRefSize, Byte* buffer);
    internal int GetFieldRVA(UInt32 fieldDefRowId);
    internal int GetNextRVA(int rva);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.FieldTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int NameOffset;
    internal int SignatureOffset;
    internal int RowSize;
    internal MemoryReader FieldTableMemoryReader;
    internal FieldRow Item { get; }
    internal FieldTableReader(UInt32 numberOfRows, int stringHeapRefSize, int blobHeapRefSize, Byte* buffer);
    internal FieldRow get_Item(UInt32 rowId);
    internal UInt32 GetSignature(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.FileRow : ValueType {
    internal FileFlags Flags;
    internal UInt32 Name;
    internal UInt32 HashValue;
    internal FileRow(FileFlags flags, UInt32 name, UInt32 hashValue);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.FileTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int NameOffset;
    internal int HashValueOffset;
    internal int RowSize;
    internal MemoryReader FileTableMemoryReader;
    internal FileRow Item { get; }
    internal FileTableReader(UInt32 numberOfRows, int stringHeapRefSize, int blobHeapRefSize, Byte* buffer);
    internal FileRow get_Item(UInt32 rowId);
    internal UInt32 GetHashValue(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.GenericParamConstraintRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.GenericParamConstraintTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsGenericParamTableRowRefSizeSmall;
    internal bool IsTypeDefOrRefRefSizeSmall;
    internal int OwnerOffset;
    internal int ConstraintOffset;
    internal int RowSize;
    internal MemoryReader GenericParamConstraintTableMemoryReader;
    internal GenericParamConstraintTableReader(UInt32 numberOfRows, int genericParamTableRowRefSize, int typeDefOrRefRefSize, Byte* buffer);
    internal UInt32 FindConstraintForGenericParam(UInt32 genericParamRowId, UInt32& genericParamConstraintCount);
    internal UInt32 GetConstraint(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.GenericParamRow : ValueType {
    internal ushort Number;
    internal GenericParamFlags Flags;
    internal UInt32 Owner;
    internal UInt32 Name;
    internal GenericParamRow(ushort number, GenericParamFlags flags, UInt32 owner, UInt32 name);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.GenericParamTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeOrMethodDefRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal int NumberOffset;
    internal int FlagsOffset;
    internal int OwnerOffset;
    internal int NameOffset;
    internal int RowSize;
    internal MemoryReader GenericParamTableMemoryReader;
    internal GenericParamRow Item { get; }
    internal GenericParamTableReader(UInt32 numberOfRows, int typeOrMethodDefRefSize, int stringHeapRefSize, Byte* buffer);
    internal GenericParamRow get_Item(UInt32 rowId);
    internal UInt32 FindGenericParametersForType(UInt32 typeDefRowId, UInt16& genericParamCount);
    internal UInt32 FindGenericParametersForMethod(UInt32 typeDefRowId, UInt16& genericParamCount);
    private UInt32 BinarySearchTag(UInt32 searchCodedTag, UInt16& genericParamCount);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.GUIDStreamReader : ValueType {
    internal MemoryReader MemoryReader;
    internal Guid Item { get; }
    internal Guid get_Item(UInt32 offset);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.HasConstantTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Param;
    internal static UInt32 Property;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32[] TagToTokenTypeArray;
    private static HasConstantTag();
    internal static UInt32 ConvertToToken(UInt32 hasConstant);
    internal static UInt32 ConvertToTag(UInt32 token);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.HasCustomAttributeTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Method;
    internal static UInt32 Field;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeDef;
    internal static UInt32 Param;
    internal static UInt32 InterfaceImpl;
    internal static UInt32 MemberRef;
    internal static UInt32 Module;
    internal static UInt32 DeclSecurity;
    internal static UInt32 Property;
    internal static UInt32 Event;
    internal static UInt32 StandAloneSig;
    internal static UInt32 ModuleRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 Assembly;
    internal static UInt32 AssemblyRef;
    internal static UInt32 File;
    internal static UInt32 ExportedType;
    internal static UInt32 ManifestResource;
    internal static UInt32 GenericParameter;
    internal static UInt32 TagMask;
    internal static UInt32[] TagToTokenTypeArray;
    internal static TableMask TablesReferenced;
    private static HasCustomAttributeTag();
    internal static UInt32 ConvertToToken(UInt32 hasCustomAttribute);
    internal static UInt32 ConvertToTag(UInt32 token);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.HasDeclSecurityTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 Method;
    internal static UInt32 Assembly;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32[] TagToTokenTypeArray;
    private static HasDeclSecurityTag();
    internal static UInt32 ConvertToToken(UInt32 hasDeclSecurity);
    internal static UInt32 ConvertToTag(UInt32 token);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.HasFieldMarshalTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Param;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32[] TagToTokenTypeArray;
    private static HasFieldMarshalTag();
    internal static UInt32 ConvertToToken(UInt32 hasFieldMarshal);
    internal static UInt32 ConvertToTag(UInt32 token);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.HasSemanticsTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Event;
    internal static UInt32 Property;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32[] TagToTokenTypeArray;
    private static HasSemanticsTag();
    internal static UInt32 ConvertToToken(UInt32 hasSemantic);
    internal static UInt32 ConvertEventRowIdToTag(UInt32 eventRowId);
    internal static UInt32 ConvertPropertyRowIdToTag(UInt32 propertyRowId);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.ImplementationTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 File;
    internal static UInt32 AssemblyRef;
    internal static UInt32 ExportedType;
    internal static UInt32 TagMask;
    internal static UInt32[] TagToTokenTypeArray;
    internal static TableMask TablesReferenced;
    private static ImplementationTag();
    internal static UInt32 ConvertToToken(UInt32 implementation);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ImplMapRow : ValueType {
    internal PInvokeMapFlags PInvokeMapFlags;
    internal UInt32 MemberForwarded;
    internal UInt32 ImportName;
    internal UInt32 ImportScope;
    internal ImplMapRow(PInvokeMapFlags pInvokeMapFlags, UInt32 memberForwarded, UInt32 importName, UInt32 importScope);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.ImplMapTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsModuleRefTableRowRefSizeSmall;
    internal bool IsMemberForwardRowRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int MemberForwardedOffset;
    internal int ImportNameOffset;
    internal int ImportScopeOffset;
    internal int RowSize;
    internal MemoryReader ImplMapTableMemoryReader;
    internal ImplMapRow Item { get; }
    internal ImplMapTableReader(UInt32 numberOfRows, int moduleRefTableRowRefSize, int memberForwardedRefSize, int stringHeapRefSize, Byte* buffer);
    internal ImplMapRow get_Item(UInt32 rowId);
    internal UInt32 FindImplForMethod(UInt32 methodRowId);
    private UInt32 BinarySearchTag(UInt32 searchCodedTag);
}
internal class Microsoft.Cci.MetadataReader.PEFile.InterfaceImplRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.InterfaceImplTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeDefTableRowRefSizeSmall;
    internal bool IsTypeDefOrRefRefSizeSmall;
    internal int ClassOffset;
    internal int InterfaceOffset;
    internal int RowSize;
    internal MemoryReader InterfaceImplTableMemoryReader;
    internal InterfaceImplTableReader(UInt32 numberOfRows, int typeDefTableRowRefSize, int typeDefOrRefRefSize, Byte* buffer);
    internal UInt32 FindInterfaceImplForType(UInt32 typeDefRowId, UInt32& interfaceCount);
    internal UInt32 GetInterface(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ManifestResourceRow : ValueType {
    internal UInt32 Offset;
    internal ManifestResourceFlags Flags;
    internal UInt32 Name;
    internal UInt32 Implementation;
    internal ManifestResourceRow(UInt32 offset, ManifestResourceFlags flags, UInt32 name, UInt32 implementation);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.ManifestResourceTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsImplementationRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal int OffsetOffset;
    internal int FlagsOffset;
    internal int NameOffset;
    internal int ImplementationOffset;
    internal int RowSize;
    internal MemoryReader ManifestResourceTableMemoryReader;
    internal ManifestResourceRow Item { get; }
    internal ManifestResourceTableReader(UInt32 numberOfRows, int implementationRefSize, int stringHeapRefSize, Byte* buffer);
    internal ManifestResourceRow get_Item(UInt32 rowId);
    internal UInt32 GetImplementation(UInt32 rowId);
    internal UInt32 GetOffset(UInt32 rowId);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.MemberForwardedTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Field;
    internal static UInt32 Method;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32[] TagToTokenTypeArray;
    private static MemberForwardedTag();
    internal static UInt32 ConvertToToken(UInt32 memberForwarded);
    internal static UInt32 ConvertMethodDefRowIdToTag(UInt32 methodDefRowId);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.MemberRefParentTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 TypeRef;
    internal static UInt32 ModuleRef;
    internal static UInt32 Method;
    internal static UInt32 TypeSpec;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32[] TagToTokenTypeArray;
    private static MemberRefParentTag();
    internal static UInt32 ConvertToToken(UInt32 memberRef);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MemberRefRow : ValueType {
    internal UInt32 Class;
    internal UInt32 Name;
    internal UInt32 Signature;
    internal MemberRefRow(UInt32 class, UInt32 name, UInt32 signature);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.MemberRefTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsMemberRefParentRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int ClassOffset;
    internal int NameOffset;
    internal int SignatureOffset;
    internal int RowSize;
    internal MemoryReader MemberRefTableMemoryReader;
    internal MemberRefRow Item { get; }
    internal MemberRefTableReader(UInt32 numberOfRows, int memberRefParentRefSize, int stringHeapRefSize, int blobHeapRefSize, Byte* buffer);
    internal MemberRefRow get_Item(UInt32 rowId);
    internal UInt32 GetSignature(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MetadataHeader : ValueType {
    internal UInt32 Signature;
    internal ushort MajorVersion;
    internal ushort MinorVersion;
    internal UInt32 ExtraData;
    internal int VersionStringSize;
    internal string VersionString;
}
internal static class Microsoft.Cci.MetadataReader.PEFile.MetadataStreamConstants : object {
    internal static int SizeOfMetadataTableHeader;
    internal static UInt32 LargeTableRowCount;
}
internal class Microsoft.Cci.MetadataReader.PEFile.MetadataTableHeader : ValueType {
    internal UInt32 Reserved;
    internal byte MajorVersion;
    internal byte MinorVersion;
    internal HeapSizeFlag HeapSizeFlags;
    internal byte RowId;
    internal TableMask ValidTables;
    internal TableMask SortedTables;
    internal int GetNumberOfTablesPresent();
}
internal static class Microsoft.Cci.MetadataReader.PEFile.MethodDefOrRefTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Method;
    internal static UInt32 MemberRef;
    internal static UInt32 TagMask;
    internal static TableMask TablesReferenced;
    internal static UInt32[] TagToTokenTypeArray;
    private static MethodDefOrRefTag();
    internal static UInt32 ConvertToToken(UInt32 methodDefOrRef);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MethodIL : object {
    internal bool LocalVariablesInited;
    internal ushort MaxStack;
    internal UInt32 LocalSignatureToken;
    internal MemoryBlock EncodedILMemoryBlock;
    internal SEHTableEntry[] SEHTable;
    internal MethodIL(bool localVariablesInited, ushort maxStack, UInt32 localSignatureToken, MemoryBlock encodedILMemoryBlock, SEHTableEntry[] sehTable);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MethodImplRow : ValueType {
    internal UInt32 Class;
    internal UInt32 MethodBody;
    internal UInt32 MethodDeclaration;
    internal MethodImplRow(UInt32 class, UInt32 methodBody, UInt32 methodDeclaration);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.MethodImplTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeDefTableRowRefSizeSmall;
    internal bool IsMethodDefOrRefRefSizeSmall;
    internal int ClassOffset;
    internal int MethodBodyOffset;
    internal int MethodDeclarationOffset;
    internal int RowSize;
    internal MemoryReader MethodImplTableMemoryReader;
    internal MethodImplRow Item { get; }
    internal MethodImplTableReader(UInt32 numberOfRows, int typeDefTableRowRefSize, int methodDefOrRefRefSize, Byte* buffer);
    internal MethodImplRow get_Item(UInt32 rowId);
    internal UInt32 FindMethodsImplForClass(UInt32 typeDefRowId, UInt16& methodImplCount);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MethodPtrRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.MethodPtrTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsMethodTableRowRefSizeSmall;
    internal int MethodOffset;
    internal int RowSize;
    internal MemoryReader MethodPtrTableMemoryReader;
    internal MethodPtrTableReader(UInt32 numberOfRows, int methodTableRowRefSize, Byte* buffer);
    internal UInt32 GetMethodFor(UInt32 rowId);
    internal UInt32 GetRowIdForMethodDefRow(UInt32 methodDefRowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MethodRow : ValueType {
    internal int RVA;
    internal MethodImplFlags ImplFlags;
    internal MethodFlags Flags;
    internal UInt32 Name;
    internal UInt32 Signature;
    internal UInt32 ParamList;
    internal MethodRow(int rva, MethodImplFlags implFlags, MethodFlags flags, UInt32 name, UInt32 signature, UInt32 paramList);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MethodSemanticsRow : ValueType {
    internal MethodSemanticsFlags SemanticsFlag;
    internal UInt32 Method;
    internal UInt32 Association;
    internal MethodSemanticsRow(MethodSemanticsFlags semanticsFlag, UInt32 method, UInt32 association);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.MethodSemanticsTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsMethodTableRowRefSizeSmall;
    internal bool IsHasSemanticRefSizeSmall;
    internal int SemanticsFlagOffset;
    internal int MethodOffset;
    internal int AssociationOffset;
    internal int RowSize;
    internal MemoryReader MethodSemanticsTableMemoryReader;
    internal MethodSemanticsRow Item { get; }
    internal MethodSemanticsTableReader(UInt32 numberOfRows, int methodTableRowRefSize, int hasSemanticRefSize, Byte* buffer);
    internal MethodSemanticsRow get_Item(UInt32 rowId);
    internal UInt32 FindSemanticMethodsForEvent(UInt32 eventRowId, UInt16& methodCount);
    internal UInt32 FindSemanticMethodsForProperty(UInt32 propertyRowId, UInt16& methodCount);
    private UInt32 BinarySearchTag(UInt32 searchCodedTag, UInt16& methodCount);
}
internal class Microsoft.Cci.MetadataReader.PEFile.MethodSpecRow : ValueType {
    internal UInt32 Method;
    internal UInt32 Instantiation;
    internal MethodSpecRow(UInt32 method, UInt32 instantiation);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.MethodSpecTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsMethodDefOrRefRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int MethodOffset;
    internal int InstantiationOffset;
    internal int RowSize;
    internal MemoryReader MethodSpecTableMemoryReader;
    internal MethodSpecRow Item { get; }
    internal MethodSpecTableReader(UInt32 numberOfRows, int methodDefOrRefRefSize, int blobHeapRefSize, Byte* buffer);
    internal MethodSpecRow get_Item(UInt32 rowId);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.MethodTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsParamRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int RVAOffset;
    internal int ImplFlagsOffset;
    internal int FlagsOffset;
    internal int NameOffset;
    internal int SignatureOffset;
    internal int ParamListOffset;
    internal int RowSize;
    internal MemoryReader MethodTableMemoryReader;
    internal MethodRow Item { get; }
    internal MethodTableReader(UInt32 numberOfRows, int paramRefSize, int stringHeapRefSize, int blobHeapRefSize, Byte* buffer);
    internal MethodRow get_Item(UInt32 rowId);
    internal UInt32 GetParamStart(UInt32 rowId);
    internal UInt32 GetSignature(UInt32 rowId);
    internal int GetNextRVA(int rva);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ModuleRefRow : ValueType {
    internal UInt32 Name;
    internal ModuleRefRow(UInt32 name);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.ModuleRefTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal int NameOffset;
    internal int RowSize;
    internal MemoryReader ModuleRefTableMemoryReader;
    internal ModuleRefRow Item { get; }
    internal ModuleRefTableReader(UInt32 numberOfRows, int stringHeapRefSize, Byte* buffer);
    internal ModuleRefRow get_Item(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ModuleRow : ValueType {
    internal ushort Generation;
    internal UInt32 Name;
    internal UInt32 MVId;
    internal UInt32 EnCId;
    internal UInt32 EnCBaseId;
    internal ModuleRow(ushort generation, UInt32 name, UInt32 mvId, UInt32 encId, UInt32 encBaseId);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.ModuleTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsGUIDHeapRefSizeSmall;
    internal UInt32 GenerationOffset;
    internal UInt32 NameOffset;
    internal UInt32 MVIdOffset;
    internal UInt32 EnCIdOffset;
    internal UInt32 EnCBaseIdOffset;
    internal UInt32 RowSize;
    internal MemoryReader ModuleTableMemoryReader;
    internal ModuleRow Item { get; }
    internal ModuleTableReader(UInt32 numberOfRows, int stringHeapRefSize, int guidHeapRefSize, Byte* buffer);
    internal ModuleRow get_Item(UInt32 rowId);
    internal UInt32 GetName(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.NestedClassRow : ValueType {
    internal UInt32 NestedClass;
    internal UInt32 EnclosingClass;
    internal NestedClassRow(UInt32 nestedClass, UInt32 enclosingClass);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.NestedClassTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeDefTableRowRefSizeSmall;
    internal int NestedClassOffset;
    internal int EnclosingClassOffset;
    internal int RowSize;
    internal MemoryReader NestedClassTableMemoryReader;
    internal NestedClassRow Item { get; }
    internal NestedClassTableReader(UInt32 numberOfRows, int typeDefTableRowRefSize, Byte* buffer);
    internal NestedClassRow get_Item(UInt32 rowId);
    internal UInt32 FindParentTypeDefRowId(UInt32 nestedTypeRowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.OptionalHeaderDirectoryEntries : ValueType {
    internal DirectoryEntry ExportTableDirectory;
    internal DirectoryEntry ImportTableDirectory;
    internal DirectoryEntry ResourceTableDirectory;
    internal DirectoryEntry ExceptionTableDirectory;
    internal DirectoryEntry CertificateTableDirectory;
    internal DirectoryEntry BaseRelocationTableDirectory;
    internal DirectoryEntry DebugTableDirectory;
    internal DirectoryEntry CopyrightTableDirectory;
    internal DirectoryEntry GlobalPointerTableDirectory;
    internal DirectoryEntry ThreadLocalStorageTableDirectory;
    internal DirectoryEntry LoadConfigTableDirectory;
    internal DirectoryEntry BoundImportTableDirectory;
    internal DirectoryEntry ImportAddressTableDirectory;
    internal DirectoryEntry DelayImportTableDirectory;
    internal DirectoryEntry COR20HeaderTableDirectory;
    internal DirectoryEntry ReservedDirectory;
}
internal class Microsoft.Cci.MetadataReader.PEFile.OptionalHeaderNTAdditionalFields : ValueType {
    internal ulong ImageBase;
    internal int SectionAlignment;
    internal UInt32 FileAlignment;
    internal ushort MajorOperatingSystemVersion;
    internal ushort MinorOperatingSystemVersion;
    internal ushort MajorImageVersion;
    internal ushort MinorImageVersion;
    internal ushort MajorSubsystemVersion;
    internal ushort MinorSubsystemVersion;
    internal UInt32 Win32VersionValue;
    internal int SizeOfImage;
    internal int SizeOfHeaders;
    internal UInt32 CheckSum;
    internal Subsystem Subsystem;
    internal DllCharacteristics DllCharacteristics;
    internal ulong SizeOfStackReserve;
    internal ulong SizeOfStackCommit;
    internal ulong SizeOfHeapReserve;
    internal ulong SizeOfHeapCommit;
    internal UInt32 LoaderFlags;
    internal int NumberOfRvaAndSizes;
}
internal class Microsoft.Cci.MetadataReader.PEFile.OptionalHeaderStandardFields : ValueType {
    internal PEMagic PEMagic;
    internal byte MajorLinkerVersion;
    internal byte MinorLinkerVersion;
    internal int SizeOfCode;
    internal int SizeOfInitializedData;
    internal int SizeOfUninitializedData;
    internal int RVAOfEntryPoint;
    internal int BaseOfCode;
    internal int BaseOfData;
}
internal class Microsoft.Cci.MetadataReader.PEFile.ParamPtrRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.ParamPtrTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsParamTableRowRefSizeSmall;
    internal int ParamOffset;
    internal int RowSize;
    internal MemoryReader ParamPtrTableMemoryReader;
    internal ParamPtrTableReader(UInt32 numberOfRows, int paramTableRowRefSize, Byte* buffer);
    internal UInt32 GetParamFor(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ParamRow : ValueType {
    internal ParamFlags Flags;
    internal ushort Sequence;
    internal UInt32 Name;
    internal ParamRow(ParamFlags flags, ushort sequence, UInt32 name);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.ParamTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int SequenceOffset;
    internal int NameOffset;
    internal int RowSize;
    internal MemoryReader ParamTableMemoryReader;
    internal ParamRow Item { get; }
    internal ParamTableReader(UInt32 numberOfRows, int stringHeapRefSize, Byte* buffer);
    internal ParamRow get_Item(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.PeDebugDirectory : object {
    public UInt32 Characteristics;
    public UInt32 TimeDateStamp;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public UInt32 Type;
    public UInt32 SizeOfData;
    public UInt32 AddressOfRawData;
    public UInt32 PointerToRawData;
}
internal static class Microsoft.Cci.MetadataReader.PEFile.PEFileConstants : object {
    internal static ushort DosSignature;
    internal static int PESignatureOffsetLocation;
    internal static UInt32 PESignature;
    internal static int BasicPEHeaderSize;
    internal static int SizeofCOFFFileHeader;
    internal static int SizeofOptionalHeaderStandardFields32;
    internal static int SizeofOptionalHeaderStandardFields64;
    internal static int SizeofOptionalHeaderNTAdditionalFields32;
    internal static int SizeofOptionalHeaderNTAdditionalFields64;
    internal static int NumberofOptionalHeaderDirectoryEntries;
    internal static int SizeofOptionalHeaderDirectoriesEntries;
    internal static int SizeofSectionHeader;
    internal static int SizeofSectionName;
    internal static int SizeofResourceDirectory;
    internal static int SizeofResourceDirectoryEntry;
}
internal class Microsoft.Cci.MetadataReader.PEFile.PEFileDebugInformation : object {
    [CompilerGeneratedAttribute]
private Guid <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Age>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PdbVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PdbFileName>k__BackingField;
    public Guid Signature { get; public set; }
    public UInt32 Age { get; public set; }
    public string PdbVersion { get; public set; }
    public string PdbFileName { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(Guid value);
    [CompilerGeneratedAttribute]
public UInt32 get_Age();
    [CompilerGeneratedAttribute]
public void set_Age(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_PdbVersion();
    [CompilerGeneratedAttribute]
public void set_PdbVersion(string value);
    [CompilerGeneratedAttribute]
public string get_PdbFileName();
    [CompilerGeneratedAttribute]
public void set_PdbFileName(string value);
}
internal class Microsoft.Cci.MetadataReader.PEFile.PEFileReader : object {
    internal ReaderState ReaderState;
    internal MetadataErrorContainer ErrorContainer;
    internal IBinaryDocumentMemoryBlock BinaryDocumentMemoryBlock;
    private COFFFileHeader COFFFileHeader;
    private OptionalHeaderStandardFields OptionalHeaderStandardFields;
    internal OptionalHeaderNTAdditionalFields OptionalHeaderNTAdditionalFields;
    private OptionalHeaderDirectoryEntries OptionalHeaderDirectoryEntries;
    internal SectionHeader[] SectionHeaders;
    internal MemoryReader Win32ResourceMemoryReader;
    private PEFileDebugInformation debugInformation;
    internal COR20Header COR20Header;
    internal MetadataHeader MetadataHeader;
    private StorageHeader StorageHeader;
    private StreamHeader[] StreamHeaders;
    internal StringStreamReader StringStream;
    internal BlobStreamReader BlobStream;
    internal GUIDStreamReader GUIDStream;
    internal UserStringStreamReader UserStringStream;
    internal MetadataStreamKind MetadataStreamKind;
    private MemoryBlock MetadataTableStream;
    internal MemoryReader ResourceMemoryReader;
    internal MemoryBlock StrongNameSignature;
    internal MetadataTableHeader MetadataTableHeader;
    private UInt32[] MetadataTableRowCount;
    internal ModuleTableReader ModuleTable;
    internal TypeRefTableReader TypeRefTable;
    internal TypeDefTableReader TypeDefTable;
    internal FieldPtrTableReader FieldPtrTable;
    internal FieldTableReader FieldTable;
    internal MethodPtrTableReader MethodPtrTable;
    internal MethodTableReader MethodTable;
    internal ParamPtrTableReader ParamPtrTable;
    internal ParamTableReader ParamTable;
    internal InterfaceImplTableReader InterfaceImplTable;
    internal MemberRefTableReader MemberRefTable;
    internal ConstantTableReader ConstantTable;
    internal CustomAttributeTableReader CustomAttributeTable;
    internal FieldMarshalTableReader FieldMarshalTable;
    internal DeclSecurityTableReader DeclSecurityTable;
    internal ClassLayoutTableReader ClassLayoutTable;
    internal FieldLayoutTableReader FieldLayoutTable;
    internal StandAloneSigTableReader StandAloneSigTable;
    internal EventMapTableReader EventMapTable;
    internal EventPtrTableReader EventPtrTable;
    internal EventTableReader EventTable;
    internal PropertyMapTableReader PropertyMapTable;
    internal PropertyPtrTableReader PropertyPtrTable;
    internal PropertyTableReader PropertyTable;
    internal MethodSemanticsTableReader MethodSemanticsTable;
    internal MethodImplTableReader MethodImplTable;
    internal ModuleRefTableReader ModuleRefTable;
    internal TypeSpecTableReader TypeSpecTable;
    internal ImplMapTableReader ImplMapTable;
    internal FieldRVATableReader FieldRVATable;
    internal EnCLogTableReader EnCLogTable;
    internal EnCMapTableReader EnCMapTable;
    internal AssemblyTableReader AssemblyTable;
    internal AssemblyProcessorTableReader AssemblyProcessorTable;
    internal AssemblyOSTableReader AssemblyOSTable;
    internal AssemblyRefTableReader AssemblyRefTable;
    internal AssemblyRefProcessorTableReader AssemblyRefProcessorTable;
    internal AssemblyRefOSTableReader AssemblyRefOSTable;
    internal FileTableReader FileTable;
    internal ExportedTypeTableReader ExportedTypeTable;
    internal ManifestResourceTableReader ManifestResourceTable;
    internal NestedClassTableReader NestedClassTable;
    internal GenericParamTableReader GenericParamTable;
    internal MethodSpecTableReader MethodSpecTable;
    internal GenericParamConstraintTableReader GenericParamConstraintTable;
    internal PEFileDebugInformation DebugInformation { get; }
    internal DllCharacteristics DllCharacteristics { get; }
    internal UInt32 FileAlignment { get; }
    internal ulong ImageBase { get; }
    internal bool IsDll { get; }
    internal bool IsExe { get; }
    internal bool IsConsoleApplication { get; }
    internal bool IsUnmanaged { get; }
    internal byte LinkerMajorVersion { get; }
    internal byte LinkerMinorVersion { get; }
    internal Machine Machine { get; }
    internal bool RequiresAmdInstructionSet { get; }
    internal bool RequiresStartupStub { get; }
    internal bool Requires64Bits { get; }
    internal ulong SizeOfHeapCommit { get; }
    internal ulong SizeOfHeapReserve { get; }
    internal ulong SizeOfStackCommit { get; }
    internal ulong SizeOfStackReserve { get; }
    private string MetadataStreamName { get; }
    internal Guid ModuleGuidIdentifier { get; }
    internal bool IsAssembly { get; }
    internal bool UseFieldPtrTable { get; }
    internal bool UseMethodPtrTable { get; }
    internal bool UseParamPtrTable { get; }
    internal bool UseEventPtrTable { get; }
    internal bool UsePropertyPtrTable { get; }
    internal PEFileReader(PeReader moduleReadWriteFactory, IBinaryDocumentMemoryBlock binaryDocumentMemoryBlock, bool snapshot);
    internal PEFileDebugInformation get_DebugInformation();
    internal DllCharacteristics get_DllCharacteristics();
    internal UInt32 get_FileAlignment();
    internal ulong get_ImageBase();
    internal bool get_IsDll();
    internal bool get_IsExe();
    internal bool get_IsConsoleApplication();
    internal bool get_IsUnmanaged();
    internal byte get_LinkerMajorVersion();
    internal byte get_LinkerMinorVersion();
    internal Machine get_Machine();
    internal bool get_RequiresAmdInstructionSet();
    internal bool get_RequiresStartupStub();
    internal bool get_Requires64Bits();
    internal ulong get_SizeOfHeapCommit();
    internal ulong get_SizeOfHeapReserve();
    internal ulong get_SizeOfStackCommit();
    internal ulong get_SizeOfStackReserve();
    private PEFileDebugInformation ReadDebugInformationLocationFromDebugTableDirectoryData();
    private bool ReadCOFFFileHeader(MemoryReader& memReader);
    private bool ReadOptionalHeaderStandardFields32(MemoryReader& memReader);
    private bool ReadOptionalHeaderNTAdditionalFields32(MemoryReader& memReader);
    private bool ReadOptionalHeaderStandardFields64(MemoryReader& memReader);
    private bool ReadOptionalHeaderNTAdditionalFields64(MemoryReader& memReader);
    private bool ReadOptionalHeaderDirectoryEntries(MemoryReader& memReader);
    private bool ReadSectionHeaders(MemoryReader& memReader);
    private bool ReadPEFileLevelData();
    internal ResourceDirectory GetResourceDirectoryAt(int offset);
    internal ResourceDirectoryEntry GetResourceDirectoryEntryAt(int offset);
    internal ResourceDataEntry GetResourceDataEntryAt(int offset);
    internal MemoryBlock DirectoryToMemoryBlock(DirectoryEntry directory);
    internal MemoryBlock RVAToMemoryBlockWithSize(int RVA, int size);
    internal MemoryBlock RVAToMemoryBlock(int RVA);
    internal bool RVAsInSameSection(int RVA1, int RVA2);
    internal SubSection RVAToSubSection(int RVA, int size);
    internal string RVAToSubSectionName(int RVA);
    internal int GetSizeOfRemainderOfSectionContaining(int RVA);
    private string get_MetadataStreamName();
    private bool ReadCOR20Header();
    private bool ReadMetadataHeader(MemoryReader& memReader);
    private bool ReadStorageHeader(MemoryReader& memReader);
    private bool ReadStreamHeaders(MemoryReader& memReader);
    private bool ProcessAndCacheStreams(MemoryBlock& metadataRoot);
    private bool ReadCORModuleLevelData();
    private bool ReadMetadataRoot();
    internal Guid get_ModuleGuidIdentifier();
    internal bool get_IsAssembly();
    internal bool get_UseFieldPtrTable();
    internal bool get_UseMethodPtrTable();
    internal bool get_UseParamPtrTable();
    internal bool get_UseEventPtrTable();
    internal bool get_UsePropertyPtrTable();
    private bool ReadMetadataTableInformation(MemoryReader& memReader);
    private static int ComputeCodedTokenSize(UInt32 largeRowSize, UInt32[] rowCountArray, TableMask tablesReferenced);
    private bool ProcessAndCacheMetadataTableBlocks(MemoryBlock metadataTablesMemoryBlock);
    private bool ReadMetadataLevelData();
    internal UInt32 GetFieldInformation(UInt32 typeDefRowId, UInt32& fieldCount);
    internal UInt32 GetMethodInformation(UInt32 typeDefRowId, UInt32& methodCount);
    internal UInt32 GetEventInformation(UInt32 typeDefRowId, UInt32& eventCount);
    internal UInt32 GetPropertyInformation(UInt32 typeDefRowId, UInt32& propertyCount);
    internal UInt32 GetParamInformation(UInt32 methodDefRowId, UInt32& paramRowCount);
    internal static SEHTableEntry[] GetSmallSEHEntries(MemoryReader memReader, int numEntries);
    internal static SEHTableEntry[] GetFatSEHEntries(MemoryReader memReader, int numEntries);
    internal MethodIL GetMethodIL(UInt32 methodDefRowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.PropertyMapRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.PropertyMapTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsTypeDefTableRowRefSizeSmall;
    internal bool IsPropertyRefSizeSmall;
    internal int ParentOffset;
    internal int PropertyListOffset;
    internal int RowSize;
    internal MemoryReader PropertyMapTableMemoryReader;
    internal PropertyMapTableReader(UInt32 numberOfRows, int typeDefTableRowRefSize, int propertyRefSize, Byte* buffer);
    internal UInt32 FindPropertyMapRowIdFor(UInt32 typeDefRowId);
    internal UInt32 GetPropertyListStartFor(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.PropertyPtrRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.PropertyPtrTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsPropertyTableRowRefSizeSmall;
    internal int PropertyOffset;
    internal int RowSize;
    internal MemoryReader PropertyPtrTableMemoryReader;
    internal PropertyPtrTableReader(UInt32 numberOfRows, int propertyTableRowRefSize, Byte* buffer);
    internal UInt32 GetPropertyFor(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.PropertyRow : ValueType {
    internal PropertyFlags Flags;
    internal UInt32 Name;
    internal UInt32 Signature;
    internal PropertyRow(PropertyFlags flags, UInt32 name, UInt32 signature);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.PropertyTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsStringHeapRefSizeSmall;
    internal bool IsBlobHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int NameOffset;
    internal int SignatureOffset;
    internal int RowSize;
    internal MemoryReader PropertyTableMemoryReader;
    internal PropertyRow Item { get; }
    internal PropertyTableReader(UInt32 numberOfRows, int stringHeapRefSize, int blobHeapRefSize, Byte* buffer);
    internal PropertyRow get_Item(UInt32 rowId);
    internal UInt32 GetSignature(UInt32 rowId);
}
internal enum Microsoft.Cci.MetadataReader.PEFile.ReaderState : Enum {
    public int value__;
    public static ReaderState Initialized;
    public static ReaderState PEFile;
    public static ReaderState CORModule;
    public static ReaderState Metadata;
}
internal static class Microsoft.Cci.MetadataReader.PEFile.ResolutionScopeTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 Module;
    internal static UInt32 ModuleRef;
    internal static UInt32 AssemblyRef;
    internal static UInt32 TypeRef;
    internal static UInt32 TagMask;
    internal static UInt32[] TagToTokenTypeArray;
    internal static TableMask TablesReferenced;
    private static ResolutionScopeTag();
    internal static UInt32 ConvertToToken(UInt32 resolutionScope);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ResourceDataEntry : ValueType {
    internal int RVAToData;
    internal int Size;
    internal int CodePage;
    internal int Reserved;
    internal ResourceDataEntry(int rvaToData, int size, int codePage, int reserved);
}
internal class Microsoft.Cci.MetadataReader.PEFile.ResourceDirectory : ValueType {
    internal UInt32 Charecteristics;
    internal UInt32 TimeDateStamp;
    internal short MajorVersion;
    internal short MinorVersion;
    internal short NumberOfNamedEntries;
    internal short NumberOfIdEntries;
}
internal class Microsoft.Cci.MetadataReader.PEFile.ResourceDirectoryEntry : ValueType {
    internal int NameOrId;
    private int DataOffset;
    internal bool IsDirectory { get; }
    internal int OffsetToDirectory { get; }
    internal int OffsetToData { get; }
    internal ResourceDirectoryEntry(int nameOrId, int dataOffset);
    internal bool get_IsDirectory();
    internal int get_OffsetToDirectory();
    internal int get_OffsetToData();
}
internal class Microsoft.Cci.MetadataReader.PEFile.SectionHeader : ValueType {
    internal string Name;
    internal int VirtualSize;
    internal int VirtualAddress;
    internal int SizeOfRawData;
    internal int OffsetToRawData;
    internal int RVAToRelocations;
    internal int PointerToLineNumbers;
    internal ushort NumberOfRelocations;
    internal ushort NumberOfLineNumbers;
    internal SectionCharacteristics SectionCharacteristics;
}
internal enum Microsoft.Cci.MetadataReader.PEFile.SEHFlags : Enum {
    public UInt32 value__;
    public static SEHFlags Catch;
    public static SEHFlags Filter;
    public static SEHFlags Finally;
    public static SEHFlags Fault;
}
internal class Microsoft.Cci.MetadataReader.PEFile.SEHTableEntry : ValueType {
    internal SEHFlags SEHFlags;
    internal UInt32 TryOffset;
    internal UInt32 TryLength;
    internal UInt32 HandlerOffset;
    internal UInt32 HandlerLength;
    internal UInt32 ClassTokenOrFilterOffset;
    internal SEHTableEntry(SEHFlags sehFlags, UInt32 tryOffset, UInt32 tryLength, UInt32 handlerOffset, UInt32 handlerLength, UInt32 classTokenOrFilterOffset);
}
internal class Microsoft.Cci.MetadataReader.PEFile.StandAloneSigRow : ValueType {
    internal UInt32 Signature;
    internal StandAloneSigRow(UInt32 signature);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.StandAloneSigTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsBlobHeapRefSizeSmall;
    internal int SignatureOffset;
    internal int RowSize;
    internal MemoryReader StandAloneSigTableMemoryReader;
    internal StandAloneSigRow Item { get; }
    internal StandAloneSigTableReader(UInt32 numberOfRows, int blobHeapRefSize, Byte* buffer);
    internal StandAloneSigRow get_Item(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.StorageHeader : ValueType {
    internal ushort Flags;
    internal short NumberOfStreams;
}
internal class Microsoft.Cci.MetadataReader.PEFile.StreamHeader : ValueType {
    internal UInt32 Offset;
    internal int Size;
    internal string Name;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.StringStreamReader : ValueType {
    internal MemoryReader MemoryReader;
    internal string Item { get; }
    internal string get_Item(UInt32 offset);
}
internal class Microsoft.Cci.MetadataReader.PEFile.SubSection : ValueType {
    internal string SectionName;
    internal UInt32 Offset;
    internal MemoryBlock MemoryBlock;
    internal SubSection(string sectionName, UInt32 offset, MemoryBlock memoryBlock);
    internal SubSection(string sectionName, int offset, MemoryBlock memoryBlock);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.TypeDefOrRefTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 TagMask;
    internal static UInt32[] TagToTokenTypeArray;
    internal static TableMask TablesReferenced;
    private static TypeDefOrRefTag();
    internal static UInt32 ConvertToToken(UInt32 typeDefOrRefTag);
}
internal class Microsoft.Cci.MetadataReader.PEFile.TypeDefRow : ValueType {
    internal TypeDefFlags Flags;
    internal UInt32 Name;
    internal UInt32 Namespace;
    internal UInt32 Extends;
    internal UInt32 FieldList;
    internal UInt32 MethodList;
    internal bool IsNested { get; }
    internal TypeDefRow(TypeDefFlags flags, UInt32 name, UInt32 namespace, UInt32 extends, UInt32 fieldList, UInt32 methodList);
    internal bool get_IsNested();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.TypeDefTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsFieldRefSizeSmall;
    internal bool IsMethodRefSizeSmall;
    internal bool IsTypeDefOrRefRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal int FlagsOffset;
    internal int NameOffset;
    internal int NamespaceOffset;
    internal int ExtendsOffset;
    internal int FieldListOffset;
    internal int MethodListOffset;
    internal int RowSize;
    internal MemoryReader TypeDefTableMemoryReader;
    internal TypeDefRow Item { get; }
    internal TypeDefTableReader(UInt32 numberOfRows, int fieldRefSize, int methodRefSize, int typeDefOrRefRefSize, int stringHeapRefSize, Byte* buffer);
    internal TypeDefRow get_Item(UInt32 rowId);
    internal UInt32 GetNamespace(UInt32 rowId);
    internal UInt32 GetName(UInt32 rowId);
    internal UInt32 GetExtends(UInt32 rowId);
    internal UInt32 GetFieldStart(UInt32 rowId);
    internal UInt32 GetMethodStart(UInt32 rowId);
    internal UInt32 FindTypeContainingMethod(UInt32 methodDefOrPtrRowId, int numberOfMethods);
    internal UInt32 FindTypeContainingField(UInt32 fieldDefOrPtrRowId, int numberOfFields);
}
internal static class Microsoft.Cci.MetadataReader.PEFile.TypeOrMethodDefTag : object {
    internal static int NumberOfBits;
    internal static UInt32 LargeRowSize;
    internal static UInt32 TypeDef;
    internal static UInt32 MethodDef;
    internal static UInt32 TagMask;
    internal static UInt32[] TagToTokenTypeArray;
    internal static TableMask TablesReferenced;
    private static TypeOrMethodDefTag();
    internal static UInt32 ConvertToToken(UInt32 typeOrMethodDef);
    internal static UInt32 ConvertTypeDefRowIdToTag(UInt32 typeDefRowId);
    internal static UInt32 ConvertMethodDefRowIdToTag(UInt32 methodDefRowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.TypeRefRow : ValueType {
    internal UInt32 ResolutionScope;
    internal UInt32 Name;
    internal UInt32 Namespace;
    internal TypeRefRow(UInt32 resolutionScope, UInt32 name, UInt32 namespace);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.TypeRefTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsResolutionScopeRefSizeSmall;
    internal bool IsStringHeapRefSizeSmall;
    internal int ResolutionScopeOffset;
    internal int NameOffset;
    internal int NamespaceOffset;
    internal int RowSize;
    internal MemoryReader TypeRefTableMemoryReader;
    internal TypeRefRow Item { get; }
    internal TypeRefTableReader(UInt32 numberOfRows, int resolutionScopeRefSize, int stringHeapRefSize, Byte* buffer);
    internal TypeRefRow get_Item(UInt32 rowId);
}
internal class Microsoft.Cci.MetadataReader.PEFile.TypeSpecRow : ValueType {
}
internal class Microsoft.Cci.MetadataReader.PEFile.TypeSpecTableReader : ValueType {
    internal UInt32 NumberOfRows;
    internal bool IsBlobHeapRefSizeSmall;
    internal int SignatureOffset;
    internal int RowSize;
    internal MemoryReader TypeSpecTableMemoryReader;
    internal TypeSpecTableReader(UInt32 numberOfRows, int blobHeapRefSize, Byte* buffer);
    internal UInt32 GetSignature(UInt32 rowId);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Cci.MetadataReader.PEFile.UserStringStreamReader : ValueType {
    internal MemoryReader MemoryReader;
    internal string Item { get; }
    internal string get_Item(UInt32 offset);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFile.UserStringStreamReader/<GetStrings>d__3")]
internal IEnumerable`1<string> GetStrings();
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.AssemblyFlags : Enum {
    public UInt32 value__;
    public static AssemblyFlags PublicKey;
    public static AssemblyFlags Retargetable;
    public static AssemblyFlags ContainsForeignTypes;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.AssemblyHashAlgorithmFlags : Enum {
    public UInt32 value__;
    public static AssemblyHashAlgorithmFlags None;
    public static AssemblyHashAlgorithmFlags MD5;
    public static AssemblyHashAlgorithmFlags SHA1;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.Characteristics : Enum {
    public ushort value__;
    public static Characteristics RelocsStripped;
    public static Characteristics ExecutableImage;
    public static Characteristics LineNumsStripped;
    public static Characteristics LocalSymsStripped;
    public static Characteristics AggressiveWsTrim;
    public static Characteristics LargeAddressAware;
    public static Characteristics BytesReversedLo;
    public static Characteristics Bit32Machine;
    public static Characteristics DebugStripped;
    public static Characteristics RemovableRunFromSwap;
    public static Characteristics NetRunFromSwap;
    public static Characteristics System;
    public static Characteristics Dll;
    public static Characteristics UpSystemOnly;
    public static Characteristics BytesReversedHi;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.COR20Flags : Enum {
    public UInt32 value__;
    public static COR20Flags ILOnly;
    public static COR20Flags Bit32Required;
    public static COR20Flags ILLibrary;
    public static COR20Flags StrongNameSigned;
    public static COR20Flags Prefers32bits;
    public static COR20Flags TrackDebugData;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.DeclSecurityActionFlags : Enum {
    public ushort value__;
    public static DeclSecurityActionFlags ActionNil;
    public static DeclSecurityActionFlags Request;
    public static DeclSecurityActionFlags Demand;
    public static DeclSecurityActionFlags Assert;
    public static DeclSecurityActionFlags Deny;
    public static DeclSecurityActionFlags PermitOnly;
    public static DeclSecurityActionFlags LinktimeCheck;
    public static DeclSecurityActionFlags InheritanceCheck;
    public static DeclSecurityActionFlags RequestMinimum;
    public static DeclSecurityActionFlags RequestOptional;
    public static DeclSecurityActionFlags RequestRefuse;
    public static DeclSecurityActionFlags PrejitGrant;
    public static DeclSecurityActionFlags PrejitDenied;
    public static DeclSecurityActionFlags NonCasDemand;
    public static DeclSecurityActionFlags NonCasLinkDemand;
    public static DeclSecurityActionFlags NonCasInheritance;
    public static DeclSecurityActionFlags MaximumValue;
    public static DeclSecurityActionFlags ActionMask;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.Directories : Enum {
    public ushort value__;
    public static Directories Export;
    public static Directories Import;
    public static Directories Resource;
    public static Directories Exception;
    public static Directories Certificate;
    public static Directories BaseRelocation;
    public static Directories Debug;
    public static Directories Copyright;
    public static Directories GlobalPointer;
    public static Directories ThreadLocalStorage;
    public static Directories LoadConfig;
    public static Directories BoundImport;
    public static Directories ImportAddress;
    public static Directories DelayImport;
    public static Directories COR20Header;
    public static Directories Reserved;
    public static Directories Cor20HeaderMetaData;
    public static Directories Cor20HeaderResources;
    public static Directories Cor20HeaderStrongNameSignature;
    public static Directories Cor20HeaderCodeManagerTable;
    public static Directories Cor20HeaderVtableFixups;
    public static Directories Cor20HeaderExportAddressTableJumps;
    public static Directories Cor20HeaderManagedNativeHeader;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.DllCharacteristics : Enum {
    public ushort value__;
    public static DllCharacteristics ProcessInit;
    public static DllCharacteristics ProcessTerm;
    public static DllCharacteristics ThreadInit;
    public static DllCharacteristics ThreadTerm;
    public static DllCharacteristics DynamicBase;
    public static DllCharacteristics NxCompatible;
    public static DllCharacteristics NoIsolation;
    public static DllCharacteristics NoSEH;
    public static DllCharacteristics NoBind;
    public static DllCharacteristics AppContainer;
    public static DllCharacteristics WDM_Driver;
    public static DllCharacteristics TerminalServerAware;
}
internal static class Microsoft.Cci.MetadataReader.PEFileFlags.ElementType : object {
    internal static byte End;
    internal static byte Void;
    internal static byte Boolean;
    internal static byte Char;
    internal static byte Int8;
    internal static byte UInt8;
    internal static byte Int16;
    internal static byte UInt16;
    internal static byte Int32;
    internal static byte UInt32;
    internal static byte Int64;
    internal static byte UInt64;
    internal static byte Single;
    internal static byte Double;
    internal static byte String;
    internal static byte Pointer;
    internal static byte ByReference;
    internal static byte ValueType;
    internal static byte Class;
    internal static byte GenericTypeParameter;
    internal static byte Array;
    internal static byte GenericTypeInstance;
    internal static byte TypedReference;
    internal static byte IntPtr;
    internal static byte UIntPtr;
    internal static byte FunctionPointer;
    internal static byte Object;
    internal static byte SzArray;
    internal static byte GenericMethodParameter;
    internal static byte RequiredModifier;
    internal static byte OptionalModifier;
    internal static byte Internal;
    internal static byte Max;
    internal static byte Modifier;
    internal static byte Sentinel;
    internal static byte Pinned;
    internal static byte SingleHFA;
    internal static byte DoubleHFA;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.EventFlags : Enum {
    public ushort value__;
    public static EventFlags SpecialNameImpl;
    public static EventFlags RTSpecialNameReserved;
    public static EventFlags AdderLoaded;
    public static EventFlags RemoverLoaded;
    public static EventFlags FireLoaded;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.FieldFlags : Enum {
    public ushort value__;
    public static FieldFlags CompilerControlledAccess;
    public static FieldFlags PrivateAccess;
    public static FieldFlags FamilyAndAssemblyAccess;
    public static FieldFlags AssemblyAccess;
    public static FieldFlags FamilyAccess;
    public static FieldFlags FamilyOrAssemblyAccess;
    public static FieldFlags PublicAccess;
    public static FieldFlags AccessMask;
    public static FieldFlags StaticContract;
    public static FieldFlags InitOnlyContract;
    public static FieldFlags LiteralContract;
    public static FieldFlags NotSerializedContract;
    public static FieldFlags SpecialNameImpl;
    public static FieldFlags PInvokeImpl;
    public static FieldFlags RTSpecialNameReserved;
    public static FieldFlags HasFieldMarshalReserved;
    public static FieldFlags HasDefaultReserved;
    public static FieldFlags HasFieldRVAReserved;
    public static FieldFlags FieldLoaded;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.FileFlags : Enum {
    public UInt32 value__;
    public static FileFlags ContainsMetadata;
    public static FileFlags ContainsNoMetadata;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.GenericParamFlags : Enum {
    public ushort value__;
    public static GenericParamFlags NonVariant;
    public static GenericParamFlags Covariant;
    public static GenericParamFlags Contravariant;
    public static GenericParamFlags VarianceMask;
    public static GenericParamFlags ReferenceTypeConstraint;
    public static GenericParamFlags ValueTypeConstraint;
    public static GenericParamFlags DefaultConstructorConstraint;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.HeapSizeFlag : Enum {
    public byte value__;
    public static HeapSizeFlag StringHeapLarge;
    public static HeapSizeFlag GUIDHeapLarge;
    public static HeapSizeFlag BlobHeapLarge;
    public static HeapSizeFlag EnCDeltas;
    public static HeapSizeFlag DeletedMarks;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.ManifestResourceFlags : Enum {
    public UInt32 value__;
    public static ManifestResourceFlags PublicVisibility;
    public static ManifestResourceFlags PrivateVisibility;
    public static ManifestResourceFlags VisibilityMask;
    public static ManifestResourceFlags InExternalFile;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.MetadataStreamKind : Enum {
    public int value__;
    public static MetadataStreamKind Illegal;
    public static MetadataStreamKind Compressed;
    public static MetadataStreamKind UnCompressed;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.MethodFlags : Enum {
    public ushort value__;
    public static MethodFlags CompilerControlledAccess;
    public static MethodFlags PrivateAccess;
    public static MethodFlags FamilyAndAssemblyAccess;
    public static MethodFlags AssemblyAccess;
    public static MethodFlags FamilyAccess;
    public static MethodFlags FamilyOrAssemblyAccess;
    public static MethodFlags PublicAccess;
    public static MethodFlags AccessMask;
    public static MethodFlags StaticContract;
    public static MethodFlags FinalContract;
    public static MethodFlags VirtualContract;
    public static MethodFlags HideBySignatureContract;
    public static MethodFlags ReuseSlotVTable;
    public static MethodFlags NewSlotVTable;
    public static MethodFlags CheckAccessOnOverrideImpl;
    public static MethodFlags AbstractImpl;
    public static MethodFlags SpecialNameImpl;
    public static MethodFlags PInvokeInterop;
    public static MethodFlags UnmanagedExportInterop;
    public static MethodFlags RTSpecialNameReserved;
    public static MethodFlags HasSecurityReserved;
    public static MethodFlags RequiresSecurityObjectReserved;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.MethodImplFlags : Enum {
    public ushort value__;
    public static MethodImplFlags ILCodeType;
    public static MethodImplFlags NativeCodeType;
    public static MethodImplFlags OPTILCodeType;
    public static MethodImplFlags RuntimeCodeType;
    public static MethodImplFlags CodeTypeMask;
    public static MethodImplFlags Unmanaged;
    public static MethodImplFlags NoInlining;
    public static MethodImplFlags ForwardRefInterop;
    public static MethodImplFlags Synchronized;
    public static MethodImplFlags NoOptimization;
    public static MethodImplFlags PreserveSigInterop;
    public static MethodImplFlags AggressiveInlining;
    public static MethodImplFlags InternalCall;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.MethodSemanticsFlags : Enum {
    public ushort value__;
    public static MethodSemanticsFlags Setter;
    public static MethodSemanticsFlags Getter;
    public static MethodSemanticsFlags Other;
    public static MethodSemanticsFlags AddOn;
    public static MethodSemanticsFlags RemoveOn;
    public static MethodSemanticsFlags Fire;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.ParamFlags : Enum {
    public ushort value__;
    public static ParamFlags InSemantics;
    public static ParamFlags OutSemantics;
    public static ParamFlags OptionalSemantics;
    public static ParamFlags HasDefaultReserved;
    public static ParamFlags HasFieldMarshalReserved;
    public static ParamFlags ByReference;
    public static ParamFlags ParamArray;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.PEMagic : Enum {
    public ushort value__;
    public static PEMagic PEMagic32;
    public static PEMagic PEMagic64;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.PInvokeMapFlags : Enum {
    public ushort value__;
    public static PInvokeMapFlags NoMangle;
    public static PInvokeMapFlags DisabledBestFit;
    public static PInvokeMapFlags EnabledBestFit;
    public static PInvokeMapFlags UseAssemblyBestFit;
    public static PInvokeMapFlags BestFitMask;
    public static PInvokeMapFlags CharSetNotSpec;
    public static PInvokeMapFlags CharSetAnsi;
    public static PInvokeMapFlags CharSetUnicode;
    public static PInvokeMapFlags CharSetAuto;
    public static PInvokeMapFlags CharSetMask;
    public static PInvokeMapFlags EnabledThrowOnUnmappableChar;
    public static PInvokeMapFlags DisabledThrowOnUnmappableChar;
    public static PInvokeMapFlags UseAssemblyThrowOnUnmappableChar;
    public static PInvokeMapFlags ThrowOnUnmappableCharMask;
    public static PInvokeMapFlags SupportsLastError;
    public static PInvokeMapFlags WinAPICallingConvention;
    public static PInvokeMapFlags CDeclCallingConvention;
    public static PInvokeMapFlags StdCallCallingConvention;
    public static PInvokeMapFlags ThisCallCallingConvention;
    public static PInvokeMapFlags FastCallCallingConvention;
    public static PInvokeMapFlags CallingConventionMask;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.PropertyFlags : Enum {
    public ushort value__;
    public static PropertyFlags SpecialNameImpl;
    public static PropertyFlags RTSpecialNameReserved;
    public static PropertyFlags HasDefaultReserved;
    public static PropertyFlags HasThis;
    public static PropertyFlags ReturnValueIsByReference;
    public static PropertyFlags GetterLoaded;
    public static PropertyFlags SetterLoaded;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.SectionCharacteristics : Enum {
    public UInt32 value__;
    public static SectionCharacteristics TypeReg;
    public static SectionCharacteristics TypeDSect;
    public static SectionCharacteristics TypeNoLoad;
    public static SectionCharacteristics TypeGroup;
    public static SectionCharacteristics TypeNoPad;
    public static SectionCharacteristics TypeCopy;
    public static SectionCharacteristics CNTCode;
    public static SectionCharacteristics CNTInitializedData;
    public static SectionCharacteristics CNTUninitializedData;
    public static SectionCharacteristics LNKOther;
    public static SectionCharacteristics LNKInfo;
    public static SectionCharacteristics TypeOver;
    public static SectionCharacteristics LNKRemove;
    public static SectionCharacteristics LNKCOMDAT;
    public static SectionCharacteristics MemProtected;
    public static SectionCharacteristics No_Defer_Spec_Exc;
    public static SectionCharacteristics GPRel;
    public static SectionCharacteristics MemFardata;
    public static SectionCharacteristics MemSysheap;
    public static SectionCharacteristics MemPurgeable;
    public static SectionCharacteristics Mem16Bit;
    public static SectionCharacteristics MemLocked;
    public static SectionCharacteristics MemPreload;
    public static SectionCharacteristics Align1Bytes;
    public static SectionCharacteristics Align2Bytes;
    public static SectionCharacteristics Align4Bytes;
    public static SectionCharacteristics Align8Bytes;
    public static SectionCharacteristics Align16Bytes;
    public static SectionCharacteristics Align32Bytes;
    public static SectionCharacteristics Align64Bytes;
    public static SectionCharacteristics Align128Bytes;
    public static SectionCharacteristics Align256Bytes;
    public static SectionCharacteristics Align512Bytes;
    public static SectionCharacteristics Align1024Bytes;
    public static SectionCharacteristics Align2048Bytes;
    public static SectionCharacteristics Align4096Bytes;
    public static SectionCharacteristics Align8192Bytes;
    public static SectionCharacteristics AlignMask;
    public static SectionCharacteristics LNKNRelocOvfl;
    public static SectionCharacteristics MemDiscardable;
    public static SectionCharacteristics MemNotCached;
    public static SectionCharacteristics MemNotPaged;
    public static SectionCharacteristics MemShared;
    public static SectionCharacteristics MemExecute;
    public static SectionCharacteristics MemRead;
    public static SectionCharacteristics MemWrite;
}
internal static class Microsoft.Cci.MetadataReader.PEFileFlags.SerializationType : object {
    internal static ushort CustomAttributeStart;
    internal static byte SecurityAttribute20Start;
    internal static byte Undefined;
    internal static byte Boolean;
    internal static byte Char;
    internal static byte Int8;
    internal static byte UInt8;
    internal static byte Int16;
    internal static byte UInt16;
    internal static byte Int32;
    internal static byte UInt32;
    internal static byte Int64;
    internal static byte UInt64;
    internal static byte Single;
    internal static byte Double;
    internal static byte String;
    internal static byte SZArray;
    internal static byte Type;
    internal static byte TaggedObject;
    internal static byte Field;
    internal static byte Property;
    internal static byte Enum;
}
internal static class Microsoft.Cci.MetadataReader.PEFileFlags.SignatureHeader : object {
    internal static byte DefaultCall;
    internal static byte CCall;
    internal static byte StdCall;
    internal static byte ThisCall;
    internal static byte FastCall;
    internal static byte VarArgCall;
    internal static byte Field;
    internal static byte LocalVar;
    internal static byte Property;
    internal static byte GenericInstance;
    internal static byte Max;
    internal static byte CallingConventionMask;
    internal static byte HasThis;
    internal static byte ExplicitThis;
    internal static byte Generic;
    internal static bool IsMethodSignature(byte signatureHeader);
    internal static bool IsVarArgCallSignature(byte signatureHeader);
    internal static bool IsFieldSignature(byte signatureHeader);
    internal static bool IsLocalVarSignature(byte signatureHeader);
    internal static bool IsPropertySignature(byte signatureHeader);
    internal static bool IsGenericInstanceSignature(byte signatureHeader);
    internal static bool IsExplicitThis(byte signatureHeader);
    internal static bool IsGeneric(byte signatureHeader);
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.Subsystem : Enum {
    public ushort value__;
    public static Subsystem Unknown;
    public static Subsystem Native;
    public static Subsystem WindowsGUI;
    public static Subsystem WindowsCUI;
    public static Subsystem OS2CUI;
    public static Subsystem POSIXCUI;
    public static Subsystem NativeWindows;
    public static Subsystem WindowsCEGUI;
    public static Subsystem EFIApplication;
    public static Subsystem EFIBootServiceDriver;
    public static Subsystem EFIRuntimeDriver;
    public static Subsystem EFIROM;
    public static Subsystem XBOX;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.TableIndices : Enum {
    public byte value__;
    public static TableIndices Module;
    public static TableIndices TypeRef;
    public static TableIndices TypeDef;
    public static TableIndices FieldPtr;
    public static TableIndices Field;
    public static TableIndices MethodPtr;
    public static TableIndices Method;
    public static TableIndices ParamPtr;
    public static TableIndices Param;
    public static TableIndices InterfaceImpl;
    public static TableIndices MemberRef;
    public static TableIndices Constant;
    public static TableIndices CustomAttribute;
    public static TableIndices FieldMarshal;
    public static TableIndices DeclSecurity;
    public static TableIndices ClassLayout;
    public static TableIndices FieldLayout;
    public static TableIndices StandAloneSig;
    public static TableIndices EventMap;
    public static TableIndices EventPtr;
    public static TableIndices Event;
    public static TableIndices PropertyMap;
    public static TableIndices PropertyPtr;
    public static TableIndices Property;
    public static TableIndices MethodSemantics;
    public static TableIndices MethodImpl;
    public static TableIndices ModuleRef;
    public static TableIndices TypeSpec;
    public static TableIndices ImplMap;
    public static TableIndices FieldRva;
    public static TableIndices EnCLog;
    public static TableIndices EnCMap;
    public static TableIndices Assembly;
    public static TableIndices AssemblyProcessor;
    public static TableIndices AssemblyOS;
    public static TableIndices AssemblyRef;
    public static TableIndices AssemblyRefProcessor;
    public static TableIndices AssemblyRefOS;
    public static TableIndices File;
    public static TableIndices ExportedType;
    public static TableIndices ManifestResource;
    public static TableIndices NestedClass;
    public static TableIndices GenericParam;
    public static TableIndices MethodSpec;
    public static TableIndices GenericParamConstraint;
    public static TableIndices Count;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.TableMask : Enum {
    public ulong value__;
    public static TableMask Module;
    public static TableMask TypeRef;
    public static TableMask TypeDef;
    public static TableMask FieldPtr;
    public static TableMask Field;
    public static TableMask MethodPtr;
    public static TableMask Method;
    public static TableMask ParamPtr;
    public static TableMask Param;
    public static TableMask InterfaceImpl;
    public static TableMask MemberRef;
    public static TableMask Constant;
    public static TableMask CustomAttribute;
    public static TableMask FieldMarshal;
    public static TableMask DeclSecurity;
    public static TableMask ClassLayout;
    public static TableMask FieldLayout;
    public static TableMask StandAloneSig;
    public static TableMask EventMap;
    public static TableMask EventPtr;
    public static TableMask Event;
    public static TableMask PropertyMap;
    public static TableMask PropertyPtr;
    public static TableMask Property;
    public static TableMask MethodSemantics;
    public static TableMask MethodImpl;
    public static TableMask ModuleRef;
    public static TableMask TypeSpec;
    public static TableMask ImplMap;
    public static TableMask FieldRva;
    public static TableMask EnCLog;
    public static TableMask EnCMap;
    public static TableMask Assembly;
    public static TableMask AssemblyProcessor;
    public static TableMask AssemblyOS;
    public static TableMask AssemblyRef;
    public static TableMask AssemblyRefProcessor;
    public static TableMask AssemblyRefOS;
    public static TableMask File;
    public static TableMask ExportedType;
    public static TableMask ManifestResource;
    public static TableMask NestedClass;
    public static TableMask GenericParam;
    public static TableMask MethodSpec;
    public static TableMask GenericParamConstraint;
    public static TableMask SortedTablesMask;
    public static TableMask CompressedStreamNotAllowedMask;
    public static TableMask V1_0_TablesMask;
    public static TableMask V1_1_TablesMask;
    public static TableMask V2_0_TablesMask;
}
internal static class Microsoft.Cci.MetadataReader.PEFileFlags.TokenTypeIds : object {
    internal static UInt32 Module;
    internal static UInt32 TypeRef;
    internal static UInt32 TypeDef;
    internal static UInt32 FieldDef;
    internal static UInt32 MethodDef;
    internal static UInt32 ParamDef;
    internal static UInt32 InterfaceImpl;
    internal static UInt32 MemberRef;
    internal static UInt32 CustomAttribute;
    internal static UInt32 Permission;
    internal static UInt32 Signature;
    internal static UInt32 Event;
    internal static UInt32 Property;
    internal static UInt32 ModuleRef;
    internal static UInt32 TypeSpec;
    internal static UInt32 Assembly;
    internal static UInt32 AssemblyRef;
    internal static UInt32 File;
    internal static UInt32 ExportedType;
    internal static UInt32 ManifestResource;
    internal static UInt32 GenericParam;
    internal static UInt32 MethodSpec;
    internal static UInt32 GenericParamConstraint;
    internal static UInt32 String;
    internal static UInt32 Name;
    internal static UInt32 BaseType;
    internal static UInt32 RIDMask;
    internal static UInt32 TokenTypeMask;
}
internal enum Microsoft.Cci.MetadataReader.PEFileFlags.TypeDefFlags : Enum {
    public UInt32 value__;
    public static TypeDefFlags PrivateAccess;
    public static TypeDefFlags PublicAccess;
    public static TypeDefFlags NestedPublicAccess;
    public static TypeDefFlags NestedPrivateAccess;
    public static TypeDefFlags NestedFamilyAccess;
    public static TypeDefFlags NestedAssemblyAccess;
    public static TypeDefFlags NestedFamilyAndAssemblyAccess;
    public static TypeDefFlags NestedFamilyOrAssemblyAccess;
    public static TypeDefFlags AccessMask;
    public static TypeDefFlags NestedMask;
    public static TypeDefFlags AutoLayout;
    public static TypeDefFlags SeqentialLayout;
    public static TypeDefFlags ExplicitLayout;
    public static TypeDefFlags LayoutMask;
    public static TypeDefFlags ClassSemantics;
    public static TypeDefFlags InterfaceSemantics;
    public static TypeDefFlags AbstractSemantics;
    public static TypeDefFlags SealedSemantics;
    public static TypeDefFlags SpecialNameSemantics;
    public static TypeDefFlags RTSpecialNameReserved;
    public static TypeDefFlags ImportImplementation;
    public static TypeDefFlags SerializableImplementation;
    public static TypeDefFlags IsForeign;
    public static TypeDefFlags AnsiString;
    public static TypeDefFlags UnicodeString;
    public static TypeDefFlags AutoCharString;
    public static TypeDefFlags StringMask;
    public static TypeDefFlags HasSecurityReserved;
    public static TypeDefFlags BeforeFieldInitImplementation;
    public static TypeDefFlags ForwarderImplementation;
    public static TypeDefFlags DoesNotInheritTypeParameters;
}
internal class Microsoft.Cci.MetadataReader.PEFileToObjectModel : object {
    internal PeReader ModuleReader;
    internal Assembly ContainingAssembly;
    internal IInternFactory InternFactory;
    internal PEFileReader PEFileReader;
    internal INameTable NameTable;
    internal TypeCache typeCache;
    internal byte pointerSize;
    internal MetadataObjectDocument document;
    internal Hashtable`1<IGenericTypeInstanceReference> genericInstanceCache;
    private Hashtable`1<IName> StringIndexToNameTable;
    private Hashtable`1<IName> StringIndexToUnmangledNameTable;
    internal _Module_Type _Module_;
    internal AssemblyReference SystemEnumAssembly;
    internal AssemblyReference SystemValueTypeAssembly;
    internal AssemblyReference SystemMulticastDelegateAssembly;
    internal AssemblyReference SystemTypeAssembly;
    internal AssemblyReference SystemParamArrayAttributeAssembly;
    private CoreTypes coreTypes;
    private AssemblyIdentity contractAssemblySymbolicIdentity;
    private AssemblyIdentity coreAssemblySymbolicIdentity;
    internal Module Module;
    internal AssemblyReference[] AssemblyReferenceArray;
    internal IEnumerable`1<IAssemblyReference> AssemblyReferences;
    private ModuleReference[] ModuleReferenceArray;
    private FileReference[] FileReferenceArray;
    private ResourceReference[] ResourceReferenceArray;
    internal RootNamespace RootModuleNamespace;
    private Hashtable`1<Namespace> NamespaceINameHashtable;
    private DoubleHashtable`1<NamespaceReference> NamespaceReferenceINameHashtable;
    private DoubleHashtable NamespaceTypeTokenTable;
    private DoubleHashtable NestedTypeTokenTable;
    private TypeBase[] ModuleTypeDefArray;
    private INamedTypeReference[] RedirectedTypeDefArray;
    private LoadState[] ModuleTypeDefLoadState;
    private ExportedTypeAliasBase[] ExportedTypeArray;
    private LoadState[] ExportedTypeLoadState;
    private GenericParameter[] ModuleGenericParamArray;
    private INamedTypeReference[] ModuleTypeRefReferenceArray;
    private LoadState[] ModuleTypeRefReferenceLoadState;
    private DoubleHashtable`1<TypeSpecReference> ModuleTypeSpecHashtable;
    private FieldDefinition[] ModuleFieldArray;
    private IMethodDefinition[] ModuleMethodArray;
    private EventDefinition[] ModuleEventArray;
    private PropertyDefinition[] ModulePropertyArray;
    private MemberReference[] ModuleMemberReferenceArray;
    private MemberReference[] UnspecializedMemberReferenceArray;
    private DoubleHashtable`1<ISpecializedFieldReference> SpecializedFieldHashtable;
    private DoubleHashtable`1<ISpecializedMethodReference> SpecializedMethodHashtable;
    private DoubleHashtable`1<IGenericMethodInstanceReference> ModuleMethodSpecHashtable;
    private ICustomAttribute[] CustomAttributeArray;
    private ISecurityAttribute[] DeclSecurityArray;
    private MetadataObject currentOwningObject;
    private CoreTypes CoreTypes { get; }
    internal IMetadataReaderNamedTypeReference SystemEnum { get; }
    internal IMetadataReaderNamedTypeReference SystemValueType { get; }
    internal IMetadataReaderNamedTypeReference SystemMulticastDelegate { get; }
    internal IMetadataReaderNamedTypeReference SystemType { get; }
    internal IMetadataReaderNamedTypeReference SystemParamArrayAttribute { get; }
    internal AssemblyIdentity ContractAssemblySymbolicIdentity { get; }
    internal AssemblyIdentity CoreAssemblySymbolicIdentity { get; }
    internal byte MetadataFormatMajorVersion { get; }
    internal byte MetadataFormatMinorVersion { get; }
    internal Machine Machine { get; }
    internal bool RequiresAmdInstructionSet { get; }
    internal bool RequiresStartupStub { get; }
    internal bool Requires64Bits { get; }
    internal Guid ModuleGuidIdentifier { get; }
    internal ushort SubsystemMajorVersion { get; }
    internal ushort SubsystemMinorVersion { get; }
    internal string TargetRuntimeVersion { get; }
    internal ModuleKind ModuleKind { get; }
    internal IPlatformType PlatformType { get; }
    internal PEFileToObjectModel(PeReader peReader, PEFileReader peFileReader, ModuleIdentity moduleIdentity, Assembly containingAssembly, byte pointerSize);
    private CoreTypes get_CoreTypes();
    internal IMetadataReaderNamedTypeReference get_SystemEnum();
    internal IMetadataReaderNamedTypeReference get_SystemValueType();
    internal IMetadataReaderNamedTypeReference get_SystemMulticastDelegate();
    internal IMetadataReaderNamedTypeReference get_SystemType();
    internal IMetadataReaderNamedTypeReference get_SystemParamArrayAttribute();
    internal AssemblyIdentity get_ContractAssemblySymbolicIdentity();
    internal AssemblyIdentity get_CoreAssemblySymbolicIdentity();
    private AssemblyIdentity GetContractAssemblySymbolicIdentity();
    private AssemblyIdentity GetCoreAssemblySymbolicIdentity();
    internal IName GetNameFromOffset(UInt32 offset);
    private IName GetUnmangledNameFromOffset(UInt32 offset);
    internal byte get_MetadataFormatMajorVersion();
    internal byte get_MetadataFormatMinorVersion();
    internal Machine get_Machine();
    internal bool get_RequiresAmdInstructionSet();
    internal bool get_RequiresStartupStub();
    internal bool get_Requires64Bits();
    internal Guid get_ModuleGuidIdentifier();
    internal ushort get_SubsystemMajorVersion();
    internal ushort get_SubsystemMinorVersion();
    internal string get_TargetRuntimeVersion();
    internal ModuleKind get_ModuleKind();
    internal IPlatformType get_PlatformType();
    private void LoadAssemblyReferences();
    private void LoadModuleReferences();
    internal AssemblyReference GetAssemblyReferenceAt(UInt32 assemRefRowId);
    internal ModuleReference GetModuleReferenceAt(UInt32 moduleRefRowId);
    internal IEnumerable`1<IAssemblyReference> GetAssemblyReferences();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetModuleReferences>d__74")]
internal IEnumerable`1<IModuleReference> GetModuleReferences();
    internal Assembly ResolveAssemblyRefReference(AssemblyReference assemblyReference);
    internal IModule ResolveModuleRefReference(ModuleReference moduleReference);
    internal AssemblyReference FindAssemblyReference(AssemblyIdentity assemblyIdentity);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetUninterpretedPESections>d__80")]
internal IEnumerable`1<IPESection> GetUninterpretedPESections();
    internal string GetWin32ResourceName(int idOrName);
    internal EnumerableMemoryBlockWrapper GetWin32ResourceBytes(int dataRVA, int size);
    internal EnumerableMemoryBlockWrapper GetWin32ResourceBytes(UInt32 dataRVA, UInt32 size);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetWin32Resources>d__84")]
internal IEnumerable`1<IWin32Resource> GetWin32Resources();
    internal EnumerableMemoryBlockWrapper GetFileHash(UInt32 fileRowId);
    private void InitFileReferenceArray();
    internal FileReference GetFileReferenceAt(UInt32 fileRefRowId);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetFiles>d__88")]
internal IEnumerable`1<IFileReference> GetFiles();
    private void InitResourceReferenceArray();
    internal ResourceReference LookupResourceReference(IName name);
    internal IResource ResolveResource(ResourceReference resourceReference, ResourceReference originalReference);
    internal IFileReference GetExternalFileForResource(UInt32 resourceRowId);
    internal IEnumerable`1<byte> GetResourceData(Resource resource);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetResources>d__94")]
internal IEnumerable`1<IResourceReference> GetResources();
    internal string GetDebugInformationLocation();
    internal string GetDebugInformationVersion();
    internal DllCharacteristics GetDllCharacteristics();
    internal IMethodReference GetEntryPointMethod();
    private Namespace GetNamespaceForString(string namespaceFullName);
    private void BuildNamespaceForNameOffset(UInt32 namespaceNameOffset, Hashtable`1<Namespace> namespaceOffsetHashtable);
    private void LoadNamespaces();
    private Namespace GetNamespaceForNameOffset(UInt32 namespaceNameOffset);
    internal NamespaceReference GetNamespaceReferenceForString(IMetadataReaderModuleReference moduleReference, IName iNamespaceFullName);
    private void PreLoadTypeDefTableLookup();
    private NamespaceType CreateModuleNamespaceType(UInt32 typeDefRowId, TypeDefRow typeDefRow, Namespace moduleNamespace, MetadataReaderSignatureTypeCode signatureTypeCode);
    private NestedType CreateModuleNestedType(UInt32 typeDefRowId, TypeDefRow typeDefRow, TypeBase parentModuleType);
    private ExportedTypeNamespaceAlias CreateExportedNamespaceType(UInt32 exportedTypeRowId, ExportedTypeRow exportedTypeRow, Namespace moduleNamespace);
    private ExportedTypeNestedAlias CreateExportedNestedType(UInt32 exportedTypeRowId, ExportedTypeRow exportedTypeRow, ExportedTypeAliasBase parentExportedType);
    internal void LoadTypesInNamespace(Namespace moduleNamespace);
    internal NamespaceType GetPredefinedTypeDefinitionAtRowWorker(UInt32 typeDefRowId, MetadataReaderSignatureTypeCode signatureTypeCode);
    internal _Module_Type Create_Module_Type();
    internal TypeBase GetTypeDefinitionAtRowWorker(UInt32 typeDefRowId);
    internal INamedTypeReference GetTypeDefinitionAtRow(UInt32 typeDefRowId);
    internal ExportedTypeAliasBase GetExportedTypeAtRowWorker(UInt32 exportedTypeRowId);
    internal ExportedTypeAliasBase GetExportedTypeAtRow(UInt32 exportedTypeRowId);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetEnumberableForExportedTypes>d__126")]
internal IEnumerable`1<IAliasForType> GetEnumberableForExportedTypes();
    internal void LoadNestedExportedTypesOfAlias(ExportedTypeAliasBase exportedType);
    internal INamedTypeDefinition ResolveNamespaceTypeDefinition(IName namespaceName, IName mangledTypeName);
    internal INamedTypeDefinition ResolveNestedTypeDefinition(INamedTypeDefinition parentType, IName typeName);
    internal ExportedTypeAliasBase TryToResolveAsNamespaceTypeAlias(IName namespaceName, IName mangledTypeName);
    internal ExportedTypeAliasBase ResolveExportedNestedType(ExportedTypeAliasBase parentType, IName typeName);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetAllTypes>d__132")]
internal IEnumerable`1<INamedTypeDefinition> GetAllTypes();
    internal void GetGenericParamInfoForType(UInt32 typeDefRowId, UInt32& genericParamRowIdStart, UInt32& genericParamRowIdEnd);
    internal ITypeReference GetBaseTypeForType(TypeBase moduleType);
    internal void GetInterfaceInfoForType(TypeBase moduleType, UInt32& interfaceRowIdStart, UInt32& interfaceRowIdEnd);
    internal void GetMethodImplInfoForType(TypeBase moduleType, UInt32& methodImplRowIdStart, UInt32& methodImplRowIdEnd);
    internal void GetConstraintInfoForGenericParam(GenericParameter genericParam, UInt32& genericParamConstraintRowIdStart, UInt32& genericParamConstraintRowIdEnd);
    internal ITypeReference GetInterfaceForInterfaceRowId(TypeBase moduleType, UInt32 interfaceRowId);
    internal MethodImplementation GetMethodImplementation(TypeBase moduleType, UInt32 methodImplRowId);
    internal ITypeReference GetTypeReferenceForGenericConstraintRowId(GenericParameter genParam, UInt32 interfaceRowId);
    internal ITypeReference GetSerializedTypeNameAsTypeReference(TypeName typeName);
    internal ITypeReference GetSerializedTypeNameAsTypeReference(string serializedTypeName);
    internal ushort GetAlignment(TypeBase type);
    internal UInt32 GetClassSize(TypeBase type);
    internal GenericTypeParameter GetGenericTypeParamAtRow(UInt32 genericParamRowId, TypeBase moduleTypeOwner);
    internal GenericMethodParameter GetGenericMethodParamAtRow(UInt32 genericParamRowId, GenericMethod moduleMethodOwner);
    private TypeRefReference CreateTypeRefReference(UInt32 typeRefRowId, TypeRefRow typeRefRow, IMetadataReaderNamedTypeReference parentModuleTypeReference, IMetadataReaderModuleReference moduleReference, MetadataReaderSignatureTypeCode signatureTypeCode);
    internal IMetadataReaderNamedTypeReference GetPredefinedTypeRefReferenceAtRowWorker(UInt32 typeRefRowId, MetadataReaderSignatureTypeCode signatureTypeCode);
    private IMetadataReaderNamedTypeReference GetTypeRefReferenceAtRowWorker(UInt32 typeRefRowId);
    private INamedTypeReference GetTypeRefReferenceAtRowWorker(UInt32 typeRefRowId, bool mustBeStruct);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetMemberReferences>d__155")]
internal IEnumerable`1<ITypeMemberReference> GetMemberReferences();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetTypeReferences>d__156")]
internal IEnumerable`1<ITypeReference> GetTypeReferences();
    internal INamedTypeReference GetTypeRefReferenceAtRow(UInt32 typeRefRowId);
    internal INamedTypeReference GetTypeRefReferenceAtRow(UInt32 typeRefRowId, bool mustBeStruct);
    internal TypeSpecReference GetTypeSpecReferenceAtRow(MetadataObject owningObject, UInt32 typeSpecRowId);
    internal ITypeReference GetTypeReferenceForToken(MetadataObject owningObject, UInt32 token);
    internal ITypeReference GetTypeReferenceForToken(MetadataObject owningObject, UInt32 token, bool mustBeStruct);
    internal INamedTypeDefinition ResolveModuleTypeRefReference(IMetadataReaderNamedTypeReference namedTypeReference);
    internal ExportedTypeAliasBase TryToResolveNamespaceTypeReferenceAsExportedType(NamespaceTypeRefReference namespaceTypeReference);
    internal INamedTypeReference GetReferenceToAliasedType(ExportedTypeAliasBase alias);
    internal ITypeReference UnderlyingModuleTypeSpecReference(TypeSpecReference moduleTypeSpecReference);
    internal TypeBase FindCoreTypeReference(CoreTypeReference coreTypeReference);
    private FieldDefinition CreateField(UInt32 fieldDefRowId, TypeBase parentModuleType);
    private IMethodDefinition CreateMethod(UInt32 methodDefRowId, TypeBase parentModuleType);
    private EventDefinition CreateEvent(UInt32 eventDefRowId, TypeBase parentModuleType);
    private PropertyDefinition CreateProperty(UInt32 propertyDefRowId, TypeBase parentModuleType);
    private void LoadNestedTypesOfType(TypeBase moduleType);
    private void LoadFieldsOfType(TypeBase moduleType);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetFieldsOfType>d__177")]
internal IEnumerable`1<IFieldDefinition> GetFieldsOfType(TypeBase moduleType);
    private void LoadMethodsOfType(TypeBase moduleType);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetMethodsOfType>d__179")]
internal IEnumerable`1<IMethodDefinition> GetMethodsOfType(TypeBase moduleType);
    private void LoadEventsOfType(TypeBase moduleType);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetEventsOfType>d__181")]
internal IEnumerable`1<IEventDefinition> GetEventsOfType(TypeBase moduleType);
    private void LoadPropertiesOfType(TypeBase moduleType);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetPropertiesOfType>d__183")]
internal IEnumerable`1<IPropertyDefinition> GetPropertiesOfType(TypeBase moduleType);
    internal void LoadMembersOfType(TypeBase moduleType);
    internal IMethodDefinition GetMethodDefAtRow(UInt32 methodDefRowId);
    internal FieldDefinition GetFieldDefAtRow(UInt32 fieldDefRowId);
    private FieldDefinition CreateGlobalField(UInt32 fieldDefRowId);
    private MethodDefinition CreateGlobalMethod(UInt32 methodDefRowId);
    internal void LoadMembersOf_Module_Type();
    internal void GetGenericParamInfoForMethod(UInt32 methodDefRowId, UInt32& genericParamRowIdStart, UInt32& genericParamRowIdEnd);
    internal FieldSignatureConverter GetFieldSignature(FieldDefinition moduleField);
    internal PropertySignatureConverter GetPropertySignature(PropertyDefinition moduleProperty);
    internal MethodDefSignatureConverter GetMethodSignature(MethodDefinition moduleMethod);
    internal ushort GetMethodParameterCount(MethodDefinition moduleMethod);
    internal ITypeReference GetEventType(EventDefinition moduleEvent);
    internal UInt32 GetFieldOffset(FieldDefinition fieldDefinition);
    internal int GetFieldSequenceNumber(FieldDefinition fieldDefinition);
    internal ISectionBlock GetFieldMapping(FieldDefinition fieldDefinition);
    private UInt32 GetFieldSizeIfPossibleToDoSoWithoutResolving(ITypeReference typeReference);
    internal void GetSemanticInfoForProperty(UInt32 propertyRowId, UInt32& methodSemanticRowIdStart, UInt32& methodSemanticRowIdEnd);
    internal void GetSemanticInfoForEvent(UInt32 eventRowId, UInt32& methodSemanticRowIdStart, UInt32& methodSemanticRowIdEnd);
    internal IMethodDefinition GetPropertyGetterOrSetterMethod(PropertyDefinition propertyDefinition, MethodSemanticsFlags getterOrSetterFlag);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetPropertyAccessorMethods>d__203")]
internal IEnumerable`1<IMethodReference> GetPropertyAccessorMethods(PropertyDefinition propertyDefinition);
    internal IMethodDefinition GetEventAddOrRemoveOrFireMethod(EventDefinition eventDefinition, MethodSemanticsFlags addOrRemoveOrFireFlag);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetEventAccessorMethods>d__205")]
internal IEnumerable`1<IMethodReference> GetEventAccessorMethods(EventDefinition eventDefinition);
    internal IMetadataConstant GetDefaultValue(MetadataObject metadataObject);
    internal IMarshallingInformation GetMarshallingInformation(MetadataObject metadataObject);
    internal IPlatformInvokeInformation GetPlatformInvokeInformation(MethodDefinition methodDefinition);
    internal IMethodBody GetMethodBody(MethodDefinition methodDefinition);
    internal ITypeMemberReference GetModuleMemberReferenceAtRowWorker(MetadataObject owningObject, UInt32 memberRefRowId);
    internal ITypeMemberReference GetModuleMemberReferenceAtRow(MetadataObject owningObject, UInt32 memberRefRowId);
    internal MethodRefSignatureConverter GetMethodRefSignature(MethodReference moduleMethodReference);
    internal int GetMethodRefParameterCount(MethodReference moduleMethodReference);
    internal int GetMethodRefGenericParameterCount(MethodReference moduleMethodReference);
    internal FieldSignatureConverter GetFieldRefSignature(FieldReference moduleFieldReference);
    internal IMethodReference GetMethodSpecAtRow(MetadataObject owningObject, UInt32 methodSpecRowId);
    internal IMethodReference GetMethodReferenceForToken(MetadataObject owningObject, UInt32 methodRefToken);
    internal IFieldReference GetFieldReferenceForToken(MetadataObject owningObject, UInt32 fieldRefToken);
    internal ITypeReference GetTypeReferenceFromStandaloneSignatureToken(MethodDefinition owningObject, UInt32 token);
    internal object GetReferenceForToken(MetadataObject owningObject, UInt32 token);
    internal void GetCustomAttributeInfo(MetadataObject metadataObject, UInt32& customAttributeRowIdStart, UInt32& customAttributeRowIdEnd);
    internal ICustomAttribute GetCustomAttributeAtRow(MetadataObject owningObject, UInt32 token, UInt32 customAttributeRowId);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetModuleCustomAttributes>d__231")]
internal IEnumerable`1<ICustomAttribute> GetModuleCustomAttributes();
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetAssemblyCustomAttributes>d__232")]
internal IEnumerable`1<ICustomAttribute> GetAssemblyCustomAttributes();
    internal void GetSecurityAttributeInfo(MetadataObject metadataObject, UInt32& securityAttributeRowIdStart, UInt32& securityAttributeRowIdEnd);
    internal ISecurityAttribute GetSecurityAttributeAtRow(MetadataObject owningObject, UInt32 securityAttributeRowId);
    internal IEnumerable`1<ICustomAttribute> GetSecurityAttributeData(SecurityAttribute securityAttribute);
    [IteratorStateMachineAttribute("Microsoft.Cci.MetadataReader.PEFileToObjectModel/<GetAttributesForSameParentAs>d__236")]
internal IEnumerable`1<ICustomAttribute> GetAttributesForSameParentAs(UInt32 tokenValue);
}
internal class Microsoft.Cci.MetadataReader.PropertySignatureConverter : SignatureConverter {
    internal byte firstByte;
    internal IEnumerable`1<ICustomModifier> returnCustomModifiers;
    internal bool returnValueIsByReference;
    internal ITypeReference type;
    internal IEnumerable`1<IParameterDefinition> parameters;
    internal PropertySignatureConverter(PEFileToObjectModel peFileToObjectModel, PropertyDefinition moduleProperty, MemoryReader signatureMemoryReader);
}
internal class Microsoft.Cci.MetadataReader.SecurityAttributeDecoder20 : AttributeDecoder {
    internal IEnumerable`1<ICustomAttribute> SecurityAttributes;
    internal SecurityAttributeDecoder20(PEFileToObjectModel peFileToObjectModel, MemoryReader signatureMemoryReader, SecurityAttribute securityAttribute);
    private SecurityCustomAttribute ReadSecurityAttribute(SecurityAttribute securityAttribute);
}
internal abstract class Microsoft.Cci.MetadataReader.SignatureConverter : object {
    protected PEFileToObjectModel PEFileToObjectModel;
    protected MetadataObject MetadataOwnerObject;
    protected TypeBase ModuleGenericType;
    protected GenericMethod ModuleGenericMethod;
    protected IMethodReference ModuleMethodReference;
    protected ITypeMemberReference ModuleMemberReference;
    protected MemoryReader SignatureMemoryReader;
    internal SignatureConverter(PEFileToObjectModel peFileToObjectModel, MemoryReader signatureMemoryReader, MetadataObject metadataOwnerObject);
    protected IEnumerable`1<ICustomModifier> GetCustomModifiers(Boolean& isPinned);
    protected ITypeReference GetModuleGenericTypeInstanceReference(UInt32 typeSpecToken);
    private ITypeReference Specialize(UInt32 typeSpecToken, INamedTypeReference namedTypeReference, UInt16& genericArgumentCount, bool outer);
    protected ManagedPointerType GetModuleManagedPointerType(UInt32 typeSpecToken);
    protected PointerType GetModulePointerType(UInt32 typeSpecToken);
    protected Matrix GetModuleMatrixType(UInt32 typeSpecToken);
    protected Vector GetModuleVectorType(UInt32 typeSpecToken);
    protected FunctionPointerType GetModuleFuntionPointer(UInt32 typeSpecToken);
    protected ITypeReference GetTypeReference();
    protected virtual Nullable`1<ParamInfo> GetParamInfo(int paramSequence);
    protected IParameterDefinition[] GetModuleParameters(bool useParamInfo, ISignature signatureDefinition, int paramCount);
    protected IParameterTypeInformation[] GetModuleParameterTypeInformations(ISignature signature, int paramCount);
}
internal class Microsoft.Cci.MetadataReader.TypeSpecSignatureConverter : SignatureConverter {
    internal ITypeReference TypeReference;
    internal TypeSpecSignatureConverter(PEFileToObjectModel peFileToObjectModel, TypeSpecReference moduleTypeSpecReference, MemoryReader signatureMemoryReader);
}
public abstract class Microsoft.Cci.MetadataReader.WindowsRuntimeMetadataReaderHost : MetadataReaderHost {
    private bool projectToCLRTypes;
    private IName AllowMultiple;
    private IName AllowMultipleAttribute;
    private IName Animation;
    private IName Collections;
    private IName Controls;
    private IName Data;
    private IName Foundation;
    private IName HResult;
    private IName IBindableIterable;
    private IName IBindableVector;
    private IName IClosable;
    private IName IIterable;
    private IName IKeyValuePair;
    private IName IMap;
    private IName IMapView;
    private IName INotifyCollectionChanged;
    private IName INotifyPropertyChanged;
    private IName Input;
    private IName Interop;
    private IName IReference;
    private IName IVector;
    private IName IVectorView;
    private IName Media;
    private IName Media3D;
    private IName Metadata;
    private IName NotifyCollectionChangedAction;
    private IName NotifyCollectionChangedEventArgs;
    private IName NotifyCollectionChangedEventHandler;
    private IName Primitives;
    private IName PropertyChangedEventArgs;
    private IName PropertyChangedEventHandler;
    private IName TypeName;
    private IName UI;
    private IName Windows;
    private IName Xaml;
    private WindowsRuntimePlatform platformType;
    protected WindowsRuntimeMetadataReaderHost(INameTable nameTable, IInternFactory factory, byte pointerSize, IEnumerable`1<string> searchPaths, bool searchInGAC, bool projectToCLRTypes);
    protected virtual IPlatformType GetPlatformType();
    public virtual IMethodDefinition Rewrite(IUnit containingUnit, IMethodDefinition methodDefinition);
    public virtual IEnumerable`1<IAssemblyReference> Redirect(IUnit referringUnit, IEnumerable`1<IAssemblyReference> assemblyReferences);
    public virtual INamedTypeReference Redirect(IUnit referringUnit, INamedTypeReference typeReference);
    public virtual ICustomAttribute Rewrite(IUnit referringUnit, ICustomAttribute customAttribute);
    private bool FellowCustomAttributeIncludeAllowMultiple(CustomAttribute customAttr);
    public virtual AssemblyIdentity UnifyAssembly(AssemblyIdentity assemblyIdentity);
    private bool IsWindows(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsFoundation(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsFoundationCollections(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsFoundationMetadata(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUI(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXaml(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlControls(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlControlsPrimitives(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlData(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlInput(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlInterop(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlMedia(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlMediaAnimation(INestedUnitNamespaceReference namespaceReference);
    private bool IsWindowsUIXamlMediaMedia3D(INestedUnitNamespaceReference namespaceReference);
}
internal class Microsoft.Cci.MetadataReader.WindowsRuntimePlatform : PlatformType {
    private IAssemblyReference system;
    private IAssemblyReference systemObjectModel;
    private IAssemblyReference systemRuntimeInteropServicesWindowsRuntime;
    private IAssemblyReference systemRuntimeWindowsRuntime;
    private IAssemblyReference systemRuntimeWindowsRuntimeUIXaml;
    private INamespaceTypeReference systemAttributeTargets;
    private INamespaceTypeReference systemCollectionsGenericIDictionary;
    private INamespaceTypeReference systemCollectionsGenericKeyValuePair;
    private INamespaceTypeReference systemCollectionsGenericReadOnlyDictionary;
    private INamespaceTypeReference systemCollectionsGenericReadOnlyList;
    private INamespaceTypeReference systemCollectionsSpecializedINotifyColletionChanged;
    private INamespaceTypeReference systemCollectionsSpecializedNotifyCollectionChangedAction;
    private INamespaceTypeReference systemCollectionsSpecializedNotifyCollectionChangedEventArgs;
    private INamespaceTypeReference systemCollectionsSpecializedNotifyCollectionChangedEventHandler;
    private INamespaceTypeReference systemComponentModelINotifyPropertyChanged;
    private INamespaceTypeReference systemComponentModelPropertyChangedEventArgs;
    private INamespaceTypeReference systemComponentModelPropertyChangedEventHandler;
    private INamespaceTypeReference systemEventHandler1;
    private INamespaceTypeReference systemIDisposable;
    private INamespaceTypeReference systemNullable1;
    private INamespaceTypeReference systemRuntimeInteropServicesWindowsRuntimeEventRegistrationToken;
    private INamespaceTypeReference systemTimeSpan;
    private INamespaceTypeReference systemUri;
    private INamespaceTypeReference systemWindowsInputICommand;
    private INamespaceTypeReference windowsFoundationColor;
    private INamespaceTypeReference windowsFoundationPoint;
    private INamespaceTypeReference windowsFoundationRect;
    private INamespaceTypeReference windowsFoundationSize;
    private INamespaceTypeReference windowsUIXamlCornerRadius;
    private INamespaceTypeReference windowsUIXamlDuration;
    private INamespaceTypeReference windowsUIXamlDurationType;
    private INamespaceTypeReference windowsUIXamlGridLength;
    private INamespaceTypeReference windowsUIXamlGridUnitType;
    private INamespaceTypeReference windowsUIXamlThickness;
    private INamespaceTypeReference windowsUIXamlControlsPrimitivesGeneratorPosition;
    private INamespaceTypeReference windowsUIXamlMediaMatrix;
    private INamespaceTypeReference windowsUIXamlMediaAnimationKeyTime;
    private INamespaceTypeReference windowsUIXamlMediaAnimationRepeatBehavior;
    private INamespaceTypeReference windowsUIXamlMediaAnimationRepeatBehaviorType;
    private INamespaceTypeReference windowsUIXamlMediaMedia3DMatrix3D;
    internal IAssemblyReference System { get; }
    internal IAssemblyReference SystemObjectModel { get; }
    internal IAssemblyReference SystemRuntimeInteropServicesWindowsRuntime { get; }
    internal IAssemblyReference SystemRuntimeWindowsRuntime { get; }
    internal IAssemblyReference SystemRuntimeWindowsRuntimeUIXaml { get; }
    internal INamespaceTypeReference SystemAttributeTargets { get; }
    internal INamespaceTypeReference SystemCollectionsGenericIDictionary { get; }
    internal INamespaceTypeReference SystemCollectionsGenericKeyValuePair { get; }
    internal INamespaceTypeReference SystemCollectionsGenericReadOnlyDictionary { get; }
    public INamespaceTypeReference SystemCollectionsGenericReadOnlyList { get; }
    public INamespaceTypeReference SystemCollectionsSpecializedINotifyColletionChanged { get; }
    public INamespaceTypeReference SystemCollectionsSpecializedNotifyCollectionChangedAction { get; }
    public INamespaceTypeReference SystemCollectionsSpecializedNotifyCollectionChangedEventArgs { get; }
    public INamespaceTypeReference SystemCollectionsSpecializedNotifyCollectionChangedEventHandler { get; }
    public INamespaceTypeReference SystemComponentModelINotifyPropertyChanged { get; }
    public INamespaceTypeReference SystemComponentModelPropertyChangedEventArgs { get; }
    public INamespaceTypeReference SystemComponentModelPropertyChangedEventHandler { get; }
    public INamespaceTypeReference SystemEventHandler1 { get; }
    internal INamespaceTypeReference SystemIDisposable { get; }
    internal INamespaceTypeReference SystemNullable1 { get; }
    internal INamespaceTypeReference SystemRuntimeInteropServicesWindowsRuntimeEventRegistrationToken { get; }
    internal INamespaceTypeReference SystemTimeSpan { get; }
    internal INamespaceTypeReference SystemUri { get; }
    internal INamespaceTypeReference SystemWindowsInputICommand { get; }
    public INamespaceTypeReference WindowsUIColor { get; }
    public INamespaceTypeReference WindowsFoundationPoint { get; }
    public INamespaceTypeReference WindowsFoundationRect { get; }
    public INamespaceTypeReference WindowsFoundationSize { get; }
    public INamespaceTypeReference WindowsUIXamlCornerRadius { get; }
    public INamespaceTypeReference WindowsUIXamlDuration { get; }
    public INamespaceTypeReference WindowsUIXamlDurationType { get; }
    public INamespaceTypeReference WindowsUIXamlGridLength { get; }
    public INamespaceTypeReference WindowsUIXamlGridUnitType { get; }
    public INamespaceTypeReference WindowsUIXamlThickness { get; }
    public INamespaceTypeReference WindowsUIXamlControlsPrimitivesGeneratorPosition { get; }
    public INamespaceTypeReference WindowsUIXamlMediaMatrix { get; }
    public INamespaceTypeReference WindowsUIXamlMediaAnimationKeyTime { get; }
    public INamespaceTypeReference WindowsUIXamlMediaAnimationRepeatBehavior { get; }
    public INamespaceTypeReference WindowsUIXamlMediaAnimationRepeatBehaviorType { get; }
    public INamespaceTypeReference WindowsUIXamlMediaMedia3DMatrix3D { get; }
    internal WindowsRuntimePlatform(IMetadataHost host);
    internal IAssemblyReference get_System();
    private AssemblyIdentity GetSystemSymbolicIdentity();
    internal IAssemblyReference get_SystemObjectModel();
    private AssemblyIdentity GetSystemObjectModelSymbolicIdentity();
    internal IAssemblyReference get_SystemRuntimeInteropServicesWindowsRuntime();
    private AssemblyIdentity GetSystemRuntimeInteropServicesWindowsRuntimeSymbolicIdentity();
    internal IAssemblyReference get_SystemRuntimeWindowsRuntime();
    private AssemblyIdentity GetSystemRuntimeWindowsRuntimeSymbolicIdentity();
    internal IAssemblyReference get_SystemRuntimeWindowsRuntimeUIXaml();
    private AssemblyIdentity GetSystemRuntimeWindowsRuntimeUIXamlSymbolicIdentity();
    internal INamespaceTypeReference get_SystemAttributeTargets();
    internal INamespaceTypeReference get_SystemCollectionsGenericIDictionary();
    internal INamespaceTypeReference get_SystemCollectionsGenericKeyValuePair();
    internal INamespaceTypeReference get_SystemCollectionsGenericReadOnlyDictionary();
    public INamespaceTypeReference get_SystemCollectionsGenericReadOnlyList();
    public INamespaceTypeReference get_SystemCollectionsSpecializedINotifyColletionChanged();
    public INamespaceTypeReference get_SystemCollectionsSpecializedNotifyCollectionChangedAction();
    public INamespaceTypeReference get_SystemCollectionsSpecializedNotifyCollectionChangedEventArgs();
    public INamespaceTypeReference get_SystemCollectionsSpecializedNotifyCollectionChangedEventHandler();
    public INamespaceTypeReference get_SystemComponentModelINotifyPropertyChanged();
    public INamespaceTypeReference get_SystemComponentModelPropertyChangedEventArgs();
    public INamespaceTypeReference get_SystemComponentModelPropertyChangedEventHandler();
    public INamespaceTypeReference get_SystemEventHandler1();
    internal INamespaceTypeReference get_SystemIDisposable();
    internal INamespaceTypeReference get_SystemNullable1();
    internal INamespaceTypeReference get_SystemRuntimeInteropServicesWindowsRuntimeEventRegistrationToken();
    internal INamespaceTypeReference get_SystemTimeSpan();
    internal INamespaceTypeReference get_SystemUri();
    internal INamespaceTypeReference get_SystemWindowsInputICommand();
    public INamespaceTypeReference get_WindowsUIColor();
    public INamespaceTypeReference get_WindowsFoundationPoint();
    public INamespaceTypeReference get_WindowsFoundationRect();
    public INamespaceTypeReference get_WindowsFoundationSize();
    public INamespaceTypeReference get_WindowsUIXamlCornerRadius();
    public INamespaceTypeReference get_WindowsUIXamlDuration();
    public INamespaceTypeReference get_WindowsUIXamlDurationType();
    public INamespaceTypeReference get_WindowsUIXamlGridLength();
    public INamespaceTypeReference get_WindowsUIXamlGridUnitType();
    public INamespaceTypeReference get_WindowsUIXamlThickness();
    public INamespaceTypeReference get_WindowsUIXamlControlsPrimitivesGeneratorPosition();
    public INamespaceTypeReference get_WindowsUIXamlMediaMatrix();
    public INamespaceTypeReference get_WindowsUIXamlMediaAnimationKeyTime();
    public INamespaceTypeReference get_WindowsUIXamlMediaAnimationRepeatBehavior();
    public INamespaceTypeReference get_WindowsUIXamlMediaAnimationRepeatBehaviorType();
    public INamespaceTypeReference get_WindowsUIXamlMediaMedia3DMatrix3D();
}
internal class Microsoft.Cci.MetadataReaderErrorsReporter : object {
}
internal class Microsoft.Cci.MetadataReaderException : Exception {
    internal MetadataReaderException(string message);
}
public abstract class Microsoft.Cci.MetadataReaderHost : MetadataHostEnvironment {
    protected List`1<IDisposable> disposableObjectAllocatedByThisHost;
    private Dictionary`2<UInt32, byte> successfulGuesses;
    private Dictionary`2<UInt32, byte> currentWildGuesses;
    private Dictionary`2<UInt32, byte> currentGoodGuesses;
    protected MetadataReaderHost(INameTable nameTable, IInternFactory factory, byte pointerSize, IEnumerable`1<string> searchPaths, bool searchInGAC);
    protected virtual override void Finalize();
    public virtual void Dispose();
    private void Close();
    public virtual IBinaryDocumentMemoryBlock OpenBinaryDocument(IBinaryDocument sourceDocument);
    public virtual IBinaryDocumentMemoryBlock OpenBinaryDocument(IBinaryDocument parentSourceDocument, string childDocumentName);
    public virtual IEnumerable`1<IAssemblyReference> Redirect(IUnit referringUnit, IEnumerable`1<IAssemblyReference> assemblyReferences);
    public virtual INamedTypeReference Redirect(IUnit referringUnit, INamedTypeReference typeReference);
    public virtual ICustomAttribute Rewrite(IUnit containingUnit, ICustomAttribute customAttribute);
    public virtual IMethodDefinition Rewrite(IUnit containingUnit, IMethodDefinition methodDefinition);
    public virtual void ResolvingAssemblyReference(IUnit referringUnit, AssemblyIdentity referencedAssembly);
    public virtual void ResolvingModuleReference(IUnit referringUnit, ModuleIdentity referencedModule);
    public sealed virtual void StartGuessingGame();
    public sealed virtual bool TryNextPermutation();
    public sealed virtual void WinGuessingGame();
    public sealed virtual byte GuessUnderlyingTypeSizeOfUnresolvableReferenceToEnum(ITypeReference reference);
}
public class Microsoft.Cci.MetadataTraverser : object {
    private Dispatcher dispatchingVisitor;
    protected SetOfObjects objectsThatHaveAlreadyBeenTraversed;
    private IMetadataVisitor preorderVisitor;
    private IMetadataVisitor postorderVisitor;
    private bool stopTraversal;
    private bool traverseIntoMethodBodies;
    public IMetadataVisitor PreorderVisitor { get; public set; }
    public IMetadataVisitor PostorderVisitor { get; public set; }
    public bool StopTraversal { get; public set; }
    public bool TraverseIntoMethodBodies { get; public set; }
    public IMetadataVisitor get_PreorderVisitor();
    public void set_PreorderVisitor(IMetadataVisitor value);
    public IMetadataVisitor get_PostorderVisitor();
    public void set_PostorderVisitor(IMetadataVisitor value);
    public bool get_StopTraversal();
    public void set_StopTraversal(bool value);
    public bool get_TraverseIntoMethodBodies();
    public void set_TraverseIntoMethodBodies(bool value);
    public void Traverse(IAliasForType aliasForType);
    public void Traverse(IAliasMember aliasMember);
    public void Traverse(IArrayTypeReference arrayTypeReference);
    public void Traverse(IAssembly assembly);
    public void Traverse(IAssemblyReference assemblyReference);
    public void Traverse(ICustomAttribute customAttribute);
    public void Traverse(ICustomModifier customModifier);
    public void Traverse(IDefinition definition);
    public void Traverse(IEventDefinition eventDefinition);
    public void Traverse(IFieldDefinition fieldDefinition);
    public void Traverse(IFieldReference fieldReference);
    private void TraverseUnspecialized(IFieldReference fieldReference);
    public void Traverse(IFileReference fileReference);
    public void Traverse(IFunctionPointerTypeReference functionPointerTypeReference);
    public void Traverse(IGenericMethodInstanceReference genericMethodInstanceReference);
    public void Traverse(IGenericMethodParameter genericMethodParameter);
    public void Traverse(IGenericMethodParameterReference genericMethodParameterReference);
    public void Traverse(IGenericTypeInstanceReference genericTypeInstanceReference);
    public void Traverse(IGenericTypeParameter genericTypeParameter);
    public void Traverse(IGenericTypeParameterReference genericTypeParameterReference);
    public void Traverse(IGlobalFieldDefinition globalFieldDefinition);
    public void Traverse(IGlobalMethodDefinition globalMethodDefinition);
    public void Traverse(ILocalDefinition localDefinition);
    public void Traverse(IManagedPointerTypeReference managedPointerTypeReference);
    public void Traverse(IMarshallingInformation marshallingInformation);
    public void Traverse(IMetadataConstant constant);
    public void Traverse(IMetadataCreateArray createArray);
    public void Traverse(IMetadataExpression expression);
    public void Traverse(IMetadataNamedArgument namedArgument);
    public void Traverse(IMetadataTypeOf typeOf);
    public virtual void Traverse(IMethodBody methodBody);
    public void Traverse(IMethodDefinition method);
    public void Traverse(IMethodImplementation methodImplementation);
    public void Traverse(IMethodReference methodReference);
    private void TraverseUnspecialized(IMethodReference methodReference);
    public void Traverse(IModifiedTypeReference modifiedTypeReference);
    public void Traverse(IModule module);
    public void Traverse(IModuleReference moduleReference);
    public void Traverse(INamespaceAliasForType namespaceAliasForType);
    public void Traverse(INamespaceDefinition namespaceDefinition);
    public void Traverse(INamespaceMember namespaceMember);
    public void Traverse(INamespaceTypeDefinition namespaceTypeDefinition);
    public void Traverse(INamespaceTypeReference namespaceTypeReference);
    public void Traverse(INestedAliasForType nestedAliasForType);
    public void Traverse(INestedTypeDefinition nestedTypeDefinition);
    public void Traverse(INestedTypeReference nestedTypeReference);
    private void TraverseUnspecialized(INestedTypeReference nestedTypeReference);
    public void Traverse(INestedUnitNamespace nestedUnitNamespace);
    public void Traverse(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    public void Traverse(INestedUnitSetNamespace nestedUnitSetNamespace);
    public void Traverse(IOperation operation);
    public void Traverse(IOperationExceptionInformation operationExceptionInformation);
    public void Traverse(IParameterDefinition parameterDefinition);
    public void Traverse(IParameterTypeInformation parameterTypeInformation);
    public void Traverse(IPESection peSection);
    public void Traverse(IPlatformInvokeInformation platformInvokeInformation);
    public void Traverse(IPointerTypeReference pointerTypeReference);
    public void Traverse(IPropertyDefinition propertyDefinition);
    public void Traverse(IResourceReference resourceReference);
    public void Traverse(IRootUnitNamespace rootUnitNamespace);
    public void Traverse(IRootUnitSetNamespace rootUnitSetNamespace);
    public void Traverse(IRootUnitNamespaceReference rootUnitNamespaceReference);
    public void Traverse(ISecurityAttribute securityAttribute);
    public void Traverse(ISpecializedFieldReference specializedFieldReference);
    public void Traverse(ISpecializedMethodReference specializedMethodReference);
    public void Traverse(ISpecializedNestedTypeReference specializedNestedTypeReference);
    public void Traverse(ITypeDefinition typeDefinition);
    public void Traverse(ITypeDefinitionMember typeMember);
    private void Traverse(ITypeMemberReference typeMemberReference);
    public void Traverse(ITypeReference typeReference);
    public void Traverse(IUnitNamespace namespaceDefinition);
    public void Traverse(IUnitNamespaceReference unitNamespaceReference);
    public void Traverse(IUnitReference unitReference);
    public void Traverse(IWin32Resource win32Resource);
    public void Traverse(IEnumerable`1<IAliasForType> aliasesForTypes);
    public void Traverse(IEnumerable`1<IAliasMember> aliasMembers);
    public void Traverse(IEnumerable`1<IAssemblyReference> assemblyReferences);
    public void Traverse(IEnumerable`1<ICustomAttribute> customAttributes);
    public void Traverse(IEnumerable`1<ICustomModifier> customModifiers);
    public void Traverse(IEnumerable`1<IEventDefinition> events);
    public void Traverse(IEnumerable`1<IFieldDefinition> fields);
    public void Traverse(IEnumerable`1<IFileReference> fileReferences);
    public void Traverse(IEnumerable`1<IGenericMethodParameter> genericMethodParameters);
    public void Traverse(IEnumerable`1<IGenericTypeParameter> genericTypeParameters);
    public void Traverse(IEnumerable`1<ILocalDefinition> localDefinitions);
    public void Traverse(IEnumerable`1<IMetadataExpression> expressions);
    public void Traverse(IEnumerable`1<IMetadataNamedArgument> namedArguments);
    public void Traverse(IEnumerable`1<IMethodDefinition> methods);
    public void Traverse(IEnumerable`1<IMethodImplementation> methodImplementations);
    public void Traverse(IEnumerable`1<IMethodReference> methodReferences);
    public void Traverse(IEnumerable`1<IModule> modules);
    public void Traverse(IEnumerable`1<IModuleReference> moduleReferences);
    public void Traverse(IEnumerable`1<INamedTypeDefinition> types);
    public void Traverse(IEnumerable`1<INamespaceMember> namespaceMembers);
    public void Traverse(IEnumerable`1<INestedTypeDefinition> nestedTypes);
    public void Traverse(IEnumerable`1<IOperation> operations);
    public void Traverse(IEnumerable`1<IOperationExceptionInformation> operationExceptionInformations);
    public void Traverse(IEnumerable`1<IParameterDefinition> parameters);
    public void Traverse(IEnumerable`1<IParameterTypeInformation> parameterTypeInformations);
    public void Traverse(IEnumerable`1<IPESection> peSections);
    public void Traverse(IEnumerable`1<IPropertyDefinition> properties);
    public void Traverse(IEnumerable`1<IResourceReference> resourceReferences);
    public void Traverse(IEnumerable`1<ISecurityAttribute> securityAttributes);
    public void Traverse(IEnumerable`1<ITypeMemberReference> typeMemberReferences);
    public void Traverse(IEnumerable`1<ITypeDefinitionMember> typeMembers);
    public void Traverse(IEnumerable`1<ITypeReference> typeReferences);
    public void Traverse(IEnumerable`1<IWin32Resource> win32Resources);
    public virtual void TraverseChildren(IAliasForType aliasForType);
    public virtual void TraverseChildren(IArrayTypeReference arrayTypeReference);
    public virtual void TraverseChildren(IAssembly assembly);
    public virtual void TraverseChildren(IAssemblyReference assemblyReference);
    public virtual void TraverseChildren(ICustomAttribute customAttribute);
    public virtual void TraverseChildren(ICustomModifier customModifier);
    public virtual void TraverseChildren(IEventDefinition eventDefinition);
    public virtual void TraverseChildren(IFieldDefinition fieldDefinition);
    public virtual void TraverseChildren(IFieldReference fieldReference);
    public virtual void TraverseChildren(IFileReference fileReference);
    public virtual void TraverseChildren(IFunctionPointerTypeReference functionPointerTypeReference);
    public virtual void TraverseChildren(IGenericMethodInstanceReference genericMethodInstanceReference);
    public virtual void TraverseChildren(IGenericMethodParameter genericMethodParameter);
    public virtual void TraverseChildren(IGenericMethodParameterReference genericMethodParameterReference);
    public virtual void TraverseChildren(IGenericParameterReference genericParameterReference);
    public virtual void TraverseChildren(IGenericParameter genericParameter);
    public virtual void TraverseChildren(IGenericTypeInstanceReference genericTypeInstanceReference);
    public virtual void TraverseChildren(IGenericTypeParameter genericTypeParameter);
    public virtual void TraverseChildren(IGenericTypeParameterReference genericTypeParameterReference);
    public virtual void TraverseChildren(IGlobalFieldDefinition globalFieldDefinition);
    public virtual void TraverseChildren(IGlobalMethodDefinition globalMethodDefinition);
    public virtual void TraverseChildren(ILocalDefinition localDefinition);
    public virtual void TraverseChildren(IManagedPointerTypeReference managedPointerTypeReference);
    public virtual void TraverseChildren(IMarshallingInformation marshallingInformation);
    public virtual void TraverseChildren(IMetadataConstant constant);
    public virtual void TraverseChildren(IMetadataCreateArray createArray);
    public virtual void TraverseChildren(IMetadataExpression expression);
    public virtual void TraverseChildren(IMetadataNamedArgument namedArgument);
    public virtual void TraverseChildren(IMetadataTypeOf typeOf);
    public virtual void TraverseChildren(IMethodBody methodBody);
    public virtual void TraverseChildren(IMethodDefinition method);
    public virtual void TraverseChildren(IMethodImplementation methodImplementation);
    public virtual void TraverseChildren(IMethodReference methodReference);
    public virtual void TraverseChildren(IModifiedTypeReference modifiedTypeReference);
    public virtual void TraverseChildren(IModule module);
    public virtual void TraverseChildren(IModuleReference moduleReference);
    public virtual void TraverseChildren(INamedTypeDefinition namedTypeDefinition);
    public virtual void TraverseChildren(INamespaceAliasForType namespaceAliasForType);
    public virtual void TraverseChildren(INamespaceDefinition namespaceDefinition);
    public virtual void TraverseChildren(INamespaceTypeDefinition namespaceTypeDefinition);
    public virtual void TraverseChildren(INamespaceTypeReference namespaceTypeReference);
    public virtual void TraverseChildren(INestedAliasForType nestedAliasForType);
    public virtual void TraverseChildren(INestedTypeDefinition nestedTypeDefinition);
    public virtual void TraverseChildren(INestedTypeReference nestedTypeReference);
    public virtual void TraverseChildren(INestedUnitNamespace nestedUnitNamespace);
    public virtual void TraverseChildren(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    public virtual void TraverseChildren(INestedUnitSetNamespace nestedUnitSetNamespace);
    public virtual void TraverseChildren(IOperation operation);
    public virtual void TraverseChildren(IOperationExceptionInformation operationExceptionInformation);
    public virtual void TraverseChildren(IParameterDefinition parameterDefinition);
    public virtual void TraverseChildren(IParameterTypeInformation parameterTypeInformation);
    public virtual void TraverseChildren(IPESection peSection);
    public virtual void TraverseChildren(IPlatformInvokeInformation platformInvokeInformation);
    public virtual void TraverseChildren(IPointerTypeReference pointerTypeReference);
    public virtual void TraverseChildren(IPropertyDefinition propertyDefinition);
    public virtual void TraverseChildren(IResourceReference resourceReference);
    public virtual void TraverseChildren(IRootUnitNamespace rootUnitNamespace);
    public virtual void TraverseChildren(IRootUnitSetNamespace rootUnitSetNamespace);
    public virtual void TraverseChildren(IRootUnitNamespaceReference rootUnitNamespaceReference);
    public virtual void TraverseChildren(ISecurityAttribute securityAttribute);
    public virtual void TraverseChildren(ISpecializedFieldReference specializedFieldReference);
    public virtual void TraverseChildren(ISpecializedMethodReference specializedMethodReference);
    public virtual void TraverseChildren(ISpecializedNestedTypeReference specializedNestedTypeReference);
    public virtual void TraverseChildren(ITypeDefinition typeDefinition);
    public virtual void TraverseChildren(ITypeDefinitionMember typeMember);
    public virtual void TraverseChildren(ITypeReference typeReference);
    public virtual void TraverseChildren(IUnitNamespace namespaceDefinition);
    public virtual void TraverseChildren(IUnitSetNamespace unitSetNamespace);
    public virtual void TraverseChildren(IUnitNamespaceReference unitNamespaceReference);
    public virtual void TraverseChildren(IUnitReference unitReference);
    public virtual void TraverseChildren(IWin32Resource win32Resource);
    public virtual void TraverseInterfaceImplementationAttributes(INamespaceTypeDefinition namespaceTypeDefinition);
}
public class Microsoft.Cci.MetadataVisitor : object {
    public virtual void Visit(IAliasForType aliasForType);
    public virtual void Visit(IArrayTypeReference arrayTypeReference);
    public virtual void Visit(IAssembly assembly);
    public virtual void Visit(IAssemblyReference assemblyReference);
    public virtual void Visit(ICustomAttribute customAttribute);
    public virtual void Visit(ICustomModifier customModifier);
    public virtual void Visit(IEventDefinition eventDefinition);
    public virtual void Visit(IFieldDefinition fieldDefinition);
    public virtual void Visit(IFieldReference fieldReference);
    public virtual void Visit(IFileReference fileReference);
    public virtual void Visit(IFunctionPointerTypeReference functionPointerTypeReference);
    public virtual void Visit(IGenericMethodInstanceReference genericMethodInstanceReference);
    public virtual void Visit(IGenericMethodParameter genericMethodParameter);
    public virtual void Visit(IGenericMethodParameterReference genericMethodParameterReference);
    public virtual void Visit(IGenericParameter genericParameter);
    public virtual void Visit(IGenericParameterReference genericParameterReference);
    public virtual void Visit(IGenericTypeInstanceReference genericTypeInstanceReference);
    public virtual void Visit(IGenericTypeParameter genericTypeParameter);
    public virtual void Visit(IGenericTypeParameterReference genericTypeParameterReference);
    public virtual void Visit(IGlobalFieldDefinition globalFieldDefinition);
    public virtual void Visit(IGlobalMethodDefinition globalMethodDefinition);
    public virtual void Visit(ILocalDefinition localDefinition);
    public virtual void VisitReference(ILocalDefinition localDefinition);
    public virtual void Visit(IManagedPointerTypeReference managedPointerTypeReference);
    public virtual void Visit(IMarshallingInformation marshallingInformation);
    public virtual void Visit(IMetadataConstant constant);
    public virtual void Visit(IMetadataCreateArray createArray);
    public virtual void Visit(IMetadataExpression expression);
    public virtual void Visit(IMetadataNamedArgument namedArgument);
    public virtual void Visit(IMetadataTypeOf typeOf);
    public virtual void Visit(IMethodBody methodBody);
    public virtual void Visit(IMethodDefinition method);
    public virtual void Visit(IMethodImplementation methodImplementation);
    public virtual void Visit(IMethodReference methodReference);
    public virtual void Visit(IModifiedTypeReference modifiedTypeReference);
    public virtual void Visit(IModule module);
    public virtual void Visit(IModuleReference moduleReference);
    public virtual void Visit(INamedTypeDefinition namedTypeDefinition);
    public virtual void Visit(INamedTypeReference namedTypeReference);
    public virtual void Visit(INamespaceAliasForType namespaceAliasForType);
    public virtual void Visit(INamespaceDefinition namespaceDefinition);
    public virtual void Visit(INamespaceMember namespaceMember);
    public virtual void Visit(INamespaceTypeDefinition namespaceTypeDefinition);
    public virtual void Visit(INamespaceTypeReference namespaceTypeReference);
    public virtual void Visit(INestedAliasForType nestedAliasForType);
    public virtual void Visit(INestedTypeDefinition nestedTypeDefinition);
    public virtual void Visit(INestedTypeReference nestedTypeReference);
    public virtual void Visit(INestedUnitNamespace nestedUnitNamespace);
    public virtual void Visit(INestedUnitNamespaceReference nestedUnitNamespaceReference);
    public virtual void Visit(INestedUnitSetNamespace nestedUnitSetNamespace);
    public virtual void Visit(IOperation operation);
    public virtual void Visit(IOperationExceptionInformation operationExceptionInformation);
    public virtual void Visit(IParameterDefinition parameterDefinition);
    public virtual void VisitReference(IParameterDefinition parameterDefinition);
    public virtual void Visit(IPropertyDefinition propertyDefinition);
    public virtual void Visit(IParameterTypeInformation parameterTypeInformation);
    public virtual void Visit(IPESection peSection);
    public virtual void Visit(IPlatformInvokeInformation platformInvokeInformation);
    public virtual void Visit(IPointerTypeReference pointerTypeReference);
    public virtual void Visit(IResourceReference resourceReference);
    public virtual void Visit(IRootUnitNamespace rootUnitNamespace);
    public virtual void Visit(IRootUnitNamespaceReference rootUnitNamespaceReference);
    public virtual void Visit(IRootUnitSetNamespace rootUnitSetNamespace);
    public virtual void Visit(ISecurityAttribute securityAttribute);
    public virtual void Visit(ISpecializedEventDefinition specializedEventDefinition);
    public virtual void Visit(ISpecializedFieldDefinition specializedFieldDefinition);
    public virtual void Visit(ISpecializedFieldReference specializedFieldReference);
    public virtual void Visit(ISpecializedMethodDefinition specializedMethodDefinition);
    public virtual void Visit(ISpecializedMethodReference specializedMethodReference);
    public virtual void Visit(ISpecializedPropertyDefinition specializedPropertyDefinition);
    public virtual void Visit(ISpecializedNestedTypeDefinition specializedNestedTypeDefinition);
    public virtual void Visit(ISpecializedNestedTypeReference specializedNestedTypeReference);
    public virtual void Visit(ITypeDefinition typeDefinition);
    public virtual void Visit(ITypeDefinitionMember typeMember);
    public virtual void Visit(ITypeMemberReference typeMember);
    public virtual void Visit(ITypeReference typeReference);
    public virtual void Visit(IUnit unit);
    public virtual void Visit(IUnitReference unitReference);
    public virtual void Visit(IUnitNamespace unitNamespace);
    public virtual void Visit(IUnitNamespaceReference unitNamespaceReference);
    public virtual void Visit(IUnitSet unitSet);
    public virtual void Visit(IUnitSetNamespace unitSetNamespace);
    public virtual void Visit(IWin32Resource win32Resource);
}
public class Microsoft.Cci.MethodReference : object {
    private CallingConvention callingConvention;
    private ITypeReference containingType;
    private IEnumerable`1<IParameterTypeInformation> extraParameters;
    private ushort genericParameterCount;
    protected IMetadataHost host;
    private UInt32 internedKey;
    private IName name;
    private ushort parameterCount;
    private IEnumerable`1<IParameterTypeInformation> parameters;
    private IMethodDefinition resolvedMethod;
    private ITypeReference type;
    public bool AcceptsExtraArguments { get; }
    public CallingConvention CallingConvention { get; }
    public ITypeReference ContainingType { get; }
    public IEnumerable`1<IParameterTypeInformation> ExtraParameters { get; }
    public ushort GenericParameterCount { get; }
    public UInt32 InternedKey { get; }
    public bool IsGeneric { get; }
    public bool IsStatic { get; }
    public IName Name { get; }
    public ushort ParameterCount { get; }
    public IEnumerable`1<IParameterTypeInformation> Parameters { get; }
    public IMethodDefinition ResolvedMethod { get; }
    public ITypeReference Type { get; }
    private IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.Attributes { get; }
    private IEnumerable`1<ILocation> Microsoft.Cci.IObjectWithLocations.Locations { get; }
    private IEnumerable`1<ICustomModifier> Microsoft.Cci.ISignature.ReturnValueCustomModifiers { get; }
    private bool Microsoft.Cci.ISignature.ReturnValueIsByRef { get; }
    private bool Microsoft.Cci.ISignature.ReturnValueIsModified { get; }
    private ITypeDefinitionMember Microsoft.Cci.ITypeMemberReference.ResolvedTypeDefinitionMember { get; }
    public MethodReference(IMetadataHost host, ITypeReference containingType, CallingConvention callingConvention, ITypeReference returnType, IName name, ushort genericParameterCount, ITypeReference[] parameterTypes);
    public MethodReference(IMetadataHost host, ITypeReference containingType, CallingConvention callingConvention, ITypeReference returnType, IName name, ushort genericParameterCount, IEnumerable`1<IParameterTypeInformation> parameters, ITypeReference[] extraParameterTypes);
    public sealed virtual bool get_AcceptsExtraArguments();
    public sealed virtual CallingConvention get_CallingConvention();
    public sealed virtual ITypeReference get_ContainingType();
    public sealed virtual void Dispatch(IMetadataVisitor visitor);
    public sealed virtual void DispatchAsReference(IMetadataVisitor visitor);
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_ExtraParameters();
    public sealed virtual ushort get_GenericParameterCount();
    public sealed virtual UInt32 get_InternedKey();
    public sealed virtual bool get_IsGeneric();
    public sealed virtual bool get_IsStatic();
    public sealed virtual IName get_Name();
    public sealed virtual ushort get_ParameterCount();
    public sealed virtual IEnumerable`1<IParameterTypeInformation> get_Parameters();
    public sealed virtual IMethodDefinition get_ResolvedMethod();
    private IMethodDefinition Resolve(ITypeDefinition typeToSearch);
    public virtual string ToString();
    public sealed virtual ITypeReference get_Type();
    private sealed virtual override IEnumerable`1<ICustomAttribute> Microsoft.Cci.IReference.get_Attributes();
    private sealed virtual override IEnumerable`1<ILocation> Microsoft.Cci.IObjectWithLocations.get_Locations();
    private sealed virtual override IEnumerable`1<ICustomModifier> Microsoft.Cci.ISignature.get_ReturnValueCustomModifiers();
    private sealed virtual override bool Microsoft.Cci.ISignature.get_ReturnValueIsByRef();
    private sealed virtual override bool Microsoft.Cci.ISignature.get_ReturnValueIsModified();
    private sealed virtual override ITypeDefinitionMember Microsoft.Cci.ITypeMemberReference.get_ResolvedTypeDefinitionMember();
}
public class Microsoft.Cci.ModuleIdentity : UnitIdentity {
    private AssemblyIdentity containingAssembly;
    public AssemblyIdentity ContainingAssembly { get; }
    public ModuleIdentity(IName name, string location);
    public ModuleIdentity(IName name, string location, AssemblyIdentity containingAssembly);
    public virtual AssemblyIdentity get_ContainingAssembly();
    public virtual bool Equals(object obj);
    internal virtual int ComputeHashCode();
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum Microsoft.Cci.ModuleKind : Enum {
    public int value__;
    public static ModuleKind ConsoleApplication;
    public static ModuleKind WindowsApplication;
    public static ModuleKind DynamicallyLinkedLibrary;
    public static ModuleKind ManifestResourceFile;
    public static ModuleKind UnmanagedDynamicallyLinkedLibrary;
}
[FlagsAttribute]
public enum Microsoft.Cci.NameFormattingOptions : Enum {
    public int value__;
    public static NameFormattingOptions None;
    public static NameFormattingOptions ContractNullable;
    public static NameFormattingOptions DocumentationId;
    public static NameFormattingOptions DocumentationIdMemberKind;
    public static NameFormattingOptions EmptyTypeParameterList;
    public static NameFormattingOptions EscapeKeyword;
    public static NameFormattingOptions FormattingForDocumentationId;
    public static NameFormattingOptions MemberKind;
    public static NameFormattingOptions MethodConstraints;
    public static NameFormattingOptions Modifiers;
    public static NameFormattingOptions OmitContainingNamespace;
    public static NameFormattingOptions OmitContainingType;
    public static NameFormattingOptions OmitCustomModifiers;
    public static NameFormattingOptions OmitImplementedInterface;
    public static NameFormattingOptions OmitTypeArguments;
    public static NameFormattingOptions OmitWhiteSpaceAfterListDelimiter;
    public static NameFormattingOptions ParameterName;
    public static NameFormattingOptions ParameterModifiers;
    public static NameFormattingOptions PreserveSpecialNames;
    public static NameFormattingOptions ReturnType;
    public static NameFormattingOptions Signature;
    public static NameFormattingOptions SmartTypeName;
    public static NameFormattingOptions SmartNamespaceName;
    public static NameFormattingOptions SupressAttributeSuffix;
    public static NameFormattingOptions TypeConstraints;
    public static NameFormattingOptions TypeParameters;
    public static NameFormattingOptions UseGenericTypeNameSuffix;
    public static NameFormattingOptions UseGlobalPrefix;
    public static NameFormattingOptions UseReflectionStyleForNestedTypeNames;
    public static NameFormattingOptions UseTypeKeywords;
    public static NameFormattingOptions Visibility;
}
public class Microsoft.Cci.NameTable : object {
    private Dictionary`2<string, int> caseInsensitiveTable;
    private Dictionary`2<string, IName> caseSensitiveTable;
    private int caseInsensitiveCounter;
    private int caseSensitiveCounter;
    private IName address;
    private IName emptyName;
    private IName get;
    private IName globalCache;
    private IName allowMultiple;
    private IName beginInvoke;
    private IName boolOpBool;
    private IName decimalOpAddition;
    private IName delegateOpAddition;
    private IName endInvoke;
    private IName enumOpEnum;
    private IName enumOpNum;
    private IName equals;
    private IName float32OpAddition;
    private IName float64OpAddition;
    private IName hasValue;
    private IName inherited;
    private IName invoke;
    private IName int16OpInt16;
    private IName int32OpInt32;
    private IName int32OpUInt32;
    private IName int64OpInt32;
    private IName int64OpUInt32;
    private IName int64OpUInt64;
    private IName int64OpInt64;
    private IName int8OpInt8;
    private IName nullCoalescing;
    private IName numOpEnum;
    private IName objectOpObject;
    private IName objectOpString;
    private IName opAddition;
    private IName opBoolean;
    private IName opChar;
    private IName opDecimal;
    private IName opEnum;
    private IName opEquality;
    private IName opExplicit;
    private IName opImplicit;
    private IName opInequality;
    private IName opInt8;
    private IName opInt16;
    private IName opInt32;
    private IName opInt64;
    private IName opBitwiseAnd;
    private IName opBitwiseOr;
    private IName opComma;
    private IName opConcatentation;
    private IName opDivision;
    private IName opExclusiveOr;
    private IName opExponentiation;
    private IName opFalse;
    private IName opFloat32;
    private IName opFloat64;
    private IName opGreaterThan;
    private IName opGreaterThanOrEqual;
    private IName opIntegerDivision;
    private IName opLeftShift;
    private IName opLessThan;
    private IName opLessThanOrEqual;
    private IName opLogicalAnd;
    private IName opLogicalNot;
    private IName opLogicalOr;
    private IName opModulus;
    private IName opMultiplication;
    private IName opOnesComplement;
    private IName opDecrement;
    private IName opIncrement;
    private IName opRightShift;
    private IName opSubtraction;
    private IName opTrue;
    private IName opUInt8;
    private IName opUInt16;
    private IName opUInt32;
    private IName opUInt64;
    private IName opUnaryNegation;
    private IName opUnaryPlus;
    private IName remove;
    private IName result;
    private IName stringOpString;
    private IName stringOpObject;
    private IName uint32OpInt32;
    private IName uint32OpUInt32;
    private IName uint64OpInt32;
    private IName uint64OpUInt32;
    private IName uint64OpUInt64;
    private IName uintPtrOpUIntPtr;
    private IName valueCache;
    private IName voidPtrOpVoidPtr;
    private IName systemCache;
    private IName voidCache;
    private IName booleanCache;
    private IName cctorCache;
    private IName charCache;
    private IName ctorCache;
    private IName byteCache;
    private IName sbyteCache;
    private IName int16Cache;
    private IName uint16Cache;
    private IName int32Cache;
    private IName uint32Cache;
    private IName int64Cache;
    private IName uint64Cache;
    private IName stringCache;
    private IName intPtrCache;
    private IName uintPtrCache;
    private IName objectCache;
    private IName set;
    private IName singleCache;
    private IName doubleCache;
    private IName typedReferenceCache;
    private IName enumCache;
    private IName multicastDelegateCache;
    private IName valueTypeCache;
    private IName type;
    private IName array;
    private IName attributeUsage;
    private IName attribute;
    private IName dateTime;
    private IName debuggerHiddenAttribute;
    private IName decimal;
    private IName delegate;
    private IName diagnostics;
    private IName dbNull;
    private IName length;
    private IName longLength;
    private IName nullable;
    private IName combine;
    private IName concat;
    private IName Microsoft.Cci.INameTable.Address { get; }
    public IName EmptyName { get; }
    private IName Microsoft.Cci.INameTable.Get { get; }
    private IName Microsoft.Cci.INameTable.global { get; }
    private IName Microsoft.Cci.INameTable.AllowMultiple { get; }
    private IName Microsoft.Cci.INameTable.BeginInvoke { get; }
    private IName Microsoft.Cci.INameTable.BoolOpBool { get; }
    private IName Microsoft.Cci.INameTable.DecimalOpDecimal { get; }
    private IName Microsoft.Cci.INameTable.DelegateOpDelegate { get; }
    private IName Microsoft.Cci.INameTable.EndInvoke { get; }
    private IName Microsoft.Cci.INameTable.EnumOpEnum { get; }
    private IName Microsoft.Cci.INameTable.EnumOpNum { get; }
    private IName Microsoft.Cci.INameTable.Equals { get; }
    private IName Microsoft.Cci.INameTable.Float32OpFloat32 { get; }
    private IName Microsoft.Cci.INameTable.Float64OpFloat64 { get; }
    private IName Microsoft.Cci.INameTable.HasValue { get; }
    private IName Microsoft.Cci.INameTable.Inherited { get; }
    private IName Microsoft.Cci.INameTable.Invoke { get; }
    private IName Microsoft.Cci.INameTable.Int16OpInt16 { get; }
    private IName Microsoft.Cci.INameTable.Int32OpInt32 { get; }
    private IName Microsoft.Cci.INameTable.Int32OpUInt32 { get; }
    private IName Microsoft.Cci.INameTable.Int64OpInt32 { get; }
    private IName Microsoft.Cci.INameTable.Int64OpUInt32 { get; }
    private IName Microsoft.Cci.INameTable.Int64OpUInt64 { get; }
    private IName Microsoft.Cci.INameTable.Int64OpInt64 { get; }
    private IName Microsoft.Cci.INameTable.Int8OpInt8 { get; }
    private IName Microsoft.Cci.INameTable.NullCoalescing { get; }
    private IName Microsoft.Cci.INameTable.NumOpEnum { get; }
    private IName Microsoft.Cci.INameTable.ObjectOpObject { get; }
    private IName Microsoft.Cci.INameTable.ObjectOpString { get; }
    private IName Microsoft.Cci.INameTable.OpAddition { get; }
    private IName Microsoft.Cci.INameTable.OpBoolean { get; }
    private IName Microsoft.Cci.INameTable.OpChar { get; }
    private IName Microsoft.Cci.INameTable.OpDecimal { get; }
    private IName Microsoft.Cci.INameTable.OpEnum { get; }
    private IName Microsoft.Cci.INameTable.OpEquality { get; }
    private IName Microsoft.Cci.INameTable.OpExplicit { get; }
    private IName Microsoft.Cci.INameTable.OpImplicit { get; }
    private IName Microsoft.Cci.INameTable.OpInequality { get; }
    private IName Microsoft.Cci.INameTable.OpInt8 { get; }
    private IName Microsoft.Cci.INameTable.OpInt16 { get; }
    private IName Microsoft.Cci.INameTable.OpInt32 { get; }
    private IName Microsoft.Cci.INameTable.OpInt64 { get; }
    private IName Microsoft.Cci.INameTable.OpBitwiseAnd { get; }
    private IName Microsoft.Cci.INameTable.OpBitwiseOr { get; }
    private IName Microsoft.Cci.INameTable.OpComma { get; }
    private IName Microsoft.Cci.INameTable.OpConcatentation { get; }
    private IName Microsoft.Cci.INameTable.OpDivision { get; }
    private IName Microsoft.Cci.INameTable.OpExclusiveOr { get; }
    private IName Microsoft.Cci.INameTable.OpExponentiation { get; }
    private IName Microsoft.Cci.INameTable.OpFalse { get; }
    private IName Microsoft.Cci.INameTable.OpFloat32 { get; }
    private IName Microsoft.Cci.INameTable.OpFloat64 { get; }
    private IName Microsoft.Cci.INameTable.OpGreaterThan { get; }
    private IName Microsoft.Cci.INameTable.OpGreaterThanOrEqual { get; }
    private IName Microsoft.Cci.INameTable.OpIntegerDivision { get; }
    private IName Microsoft.Cci.INameTable.OpLeftShift { get; }
    private IName Microsoft.Cci.INameTable.OpLessThan { get; }
    private IName Microsoft.Cci.INameTable.OpLessThanOrEqual { get; }
    private IName Microsoft.Cci.INameTable.OpLike { get; }
    private IName Microsoft.Cci.INameTable.OpLogicalNot { get; }
    private IName Microsoft.Cci.INameTable.OpLogicalOr { get; }
    private IName Microsoft.Cci.INameTable.OpModulus { get; }
    private IName Microsoft.Cci.INameTable.OpMultiply { get; }
    private IName Microsoft.Cci.INameTable.OpOnesComplement { get; }
    private IName Microsoft.Cci.INameTable.OpDecrement { get; }
    private IName Microsoft.Cci.INameTable.OpIncrement { get; }
    private IName Microsoft.Cci.INameTable.OpRightShift { get; }
    private IName Microsoft.Cci.INameTable.OpSubtraction { get; }
    private IName Microsoft.Cci.INameTable.OpTrue { get; }
    private IName Microsoft.Cci.INameTable.OpUInt8 { get; }
    private IName Microsoft.Cci.INameTable.OpUInt16 { get; }
    private IName Microsoft.Cci.INameTable.OpUInt32 { get; }
    private IName Microsoft.Cci.INameTable.OpUInt64 { get; }
    private IName Microsoft.Cci.INameTable.OpUnaryNegation { get; }
    private IName Microsoft.Cci.INameTable.OpUnaryPlus { get; }
    private IName Microsoft.Cci.INameTable.Remove { get; }
    private IName Microsoft.Cci.INameTable.Result { get; }
    private IName Microsoft.Cci.INameTable.StringOpString { get; }
    private IName Microsoft.Cci.INameTable.StringOpObject { get; }
    private IName Microsoft.Cci.INameTable.UInt32OpInt32 { get; }
    private IName Microsoft.Cci.INameTable.UInt32OpUInt32 { get; }
    private IName Microsoft.Cci.INameTable.UInt64OpInt32 { get; }
    private IName Microsoft.Cci.INameTable.UInt64OpUInt32 { get; }
    private IName Microsoft.Cci.INameTable.UInt64OpUInt64 { get; }
    private IName Microsoft.Cci.INameTable.UIntPtrOpUIntPtr { get; }
    private IName Microsoft.Cci.INameTable.value { get; }
    private IName Microsoft.Cci.INameTable.VoidPtrOpVoidPtr { get; }
    private IName Microsoft.Cci.INameTable.System { get; }
    private IName Microsoft.Cci.INameTable.Void { get; }
    private IName Microsoft.Cci.INameTable.Boolean { get; }
    private IName Microsoft.Cci.INameTable.Cctor { get; }
    private IName Microsoft.Cci.INameTable.Char { get; }
    private IName Microsoft.Cci.INameTable.Ctor { get; }
    private IName Microsoft.Cci.INameTable.Byte { get; }
    private IName Microsoft.Cci.INameTable.SByte { get; }
    private IName Microsoft.Cci.INameTable.Int16 { get; }
    private IName Microsoft.Cci.INameTable.UInt16 { get; }
    private IName Microsoft.Cci.INameTable.Int32 { get; }
    private IName Microsoft.Cci.INameTable.UInt32 { get; }
    private IName Microsoft.Cci.INameTable.Int64 { get; }
    private IName Microsoft.Cci.INameTable.UInt64 { get; }
    private IName Microsoft.Cci.INameTable.String { get; }
    private IName Microsoft.Cci.INameTable.IntPtr { get; }
    private IName Microsoft.Cci.INameTable.UIntPtr { get; }
    private IName Microsoft.Cci.INameTable.Object { get; }
    private IName Microsoft.Cci.INameTable.Set { get; }
    private IName Microsoft.Cci.INameTable.Single { get; }
    private IName Microsoft.Cci.INameTable.Double { get; }
    private IName Microsoft.Cci.INameTable.TypedReference { get; }
    private IName Microsoft.Cci.INameTable.Enum { get; }
    private IName Microsoft.Cci.INameTable.MulticastDelegate { get; }
    private IName Microsoft.Cci.INameTable.ValueType { get; }
    private IName Microsoft.Cci.INameTable.Type { get; }
    private IName Microsoft.Cci.INameTable.Array { get; }
    private IName Microsoft.Cci.INameTable.AttributeUsageAttribute { get; }
    private IName Microsoft.Cci.INameTable.Attribute { get; }
    private IName Microsoft.Cci.INameTable.DateTime { get; }
    private IName Microsoft.Cci.INameTable.DebuggerHiddenAttribute { get; }
    private IName Microsoft.Cci.INameTable.Decimal { get; }
    private IName Microsoft.Cci.INameTable.Delegate { get; }
    private IName Microsoft.Cci.INameTable.Diagnostics { get; }
    private IName Microsoft.Cci.INameTable.DBNull { get; }
    private IName Microsoft.Cci.INameTable.Length { get; }
    private IName Microsoft.Cci.INameTable.LongLength { get; }
    private IName Microsoft.Cci.INameTable.Nullable { get; }
    private IName Microsoft.Cci.INameTable.Combine { get; }
    private IName Microsoft.Cci.INameTable.Concat { get; }
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Address();
    public sealed virtual IName get_EmptyName();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Get();
    public sealed virtual IName GetNameFor(string name);
    private sealed virtual override IName Microsoft.Cci.INameTable.get_global();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_AllowMultiple();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_BeginInvoke();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_BoolOpBool();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_DecimalOpDecimal();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_DelegateOpDelegate();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_EndInvoke();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_EnumOpEnum();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_EnumOpNum();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Equals();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Float32OpFloat32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Float64OpFloat64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_HasValue();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Inherited();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Invoke();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int16OpInt16();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int32OpInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int32OpUInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int64OpInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int64OpUInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int64OpUInt64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int64OpInt64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int8OpInt8();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_NullCoalescing();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_NumOpEnum();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_ObjectOpObject();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_ObjectOpString();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpAddition();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpBoolean();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpChar();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpDecimal();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpEnum();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpEquality();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpExplicit();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpImplicit();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpInequality();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpInt8();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpInt16();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpInt64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpBitwiseAnd();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpBitwiseOr();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpComma();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpConcatentation();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpDivision();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpExclusiveOr();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpExponentiation();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpFalse();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpFloat32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpFloat64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpGreaterThan();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpGreaterThanOrEqual();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpIntegerDivision();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpLeftShift();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpLessThan();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpLessThanOrEqual();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpLike();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpLogicalNot();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpLogicalOr();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpModulus();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpMultiply();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpOnesComplement();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpDecrement();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpIncrement();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpRightShift();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpSubtraction();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpTrue();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpUInt8();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpUInt16();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpUInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpUInt64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpUnaryNegation();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_OpUnaryPlus();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Remove();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Result();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_StringOpString();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_StringOpObject();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt32OpInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt32OpUInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt64OpInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt64OpUInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt64OpUInt64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UIntPtrOpUIntPtr();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_value();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_VoidPtrOpVoidPtr();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_System();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Void();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Boolean();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Cctor();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Char();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Ctor();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Byte();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_SByte();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int16();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt16();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt32();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Int64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UInt64();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_String();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_IntPtr();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_UIntPtr();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Object();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Set();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Single();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Double();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_TypedReference();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Enum();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_MulticastDelegate();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_ValueType();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Type();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Array();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_AttributeUsageAttribute();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Attribute();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_DateTime();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_DebuggerHiddenAttribute();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Decimal();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Delegate();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Diagnostics();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_DBNull();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Length();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_LongLength();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Nullable();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Combine();
    private sealed virtual override IName Microsoft.Cci.INameTable.get_Concat();
}
public static class Microsoft.Cci.ObjectModelHelper : object {
    public static int CaseInsensitiveStringHash(string s);
    public static int CaseSensitiveStringHash(string s);
}
[FlagsAttribute]
public enum Microsoft.Cci.OperationCheckFlags : Enum {
    public byte value__;
    public static OperationCheckFlags NoTypeCheck;
    public static OperationCheckFlags NoRangeCheck;
    public static OperationCheckFlags NoNullCheck;
}
public enum Microsoft.Cci.OperationCode : Enum {
    public int value__;
    public static OperationCode Nop;
    public static OperationCode Break;
    public static OperationCode Ldarg_0;
    public static OperationCode Ldarg_1;
    public static OperationCode Ldarg_2;
    public static OperationCode Ldarg_3;
    public static OperationCode Ldloc_0;
    public static OperationCode Ldloc_1;
    public static OperationCode Ldloc_2;
    public static OperationCode Ldloc_3;
    public static OperationCode Stloc_0;
    public static OperationCode Stloc_1;
    public static OperationCode Stloc_2;
    public static OperationCode Stloc_3;
    public static OperationCode Ldarg_S;
    public static OperationCode Ldarga_S;
    public static OperationCode Starg_S;
    public static OperationCode Ldloc_S;
    public static OperationCode Ldloca_S;
    public static OperationCode Stloc_S;
    public static OperationCode Ldnull;
    public static OperationCode Ldc_I4_M1;
    public static OperationCode Ldc_I4_0;
    public static OperationCode Ldc_I4_1;
    public static OperationCode Ldc_I4_2;
    public static OperationCode Ldc_I4_3;
    public static OperationCode Ldc_I4_4;
    public static OperationCode Ldc_I4_5;
    public static OperationCode Ldc_I4_6;
    public static OperationCode Ldc_I4_7;
    public static OperationCode Ldc_I4_8;
    public static OperationCode Ldc_I4_S;
    public static OperationCode Ldc_I4;
    public static OperationCode Ldc_I8;
    public static OperationCode Ldc_R4;
    public static OperationCode Ldc_R8;
    public static OperationCode Dup;
    public static OperationCode Pop;
    public static OperationCode Jmp;
    public static OperationCode Call;
    public static OperationCode Calli;
    public static OperationCode Ret;
    public static OperationCode Br_S;
    public static OperationCode Brfalse_S;
    public static OperationCode Brtrue_S;
    public static OperationCode Beq_S;
    public static OperationCode Bge_S;
    public static OperationCode Bgt_S;
    public static OperationCode Ble_S;
    public static OperationCode Blt_S;
    public static OperationCode Bne_Un_S;
    public static OperationCode Bge_Un_S;
    public static OperationCode Bgt_Un_S;
    public static OperationCode Ble_Un_S;
    public static OperationCode Blt_Un_S;
    public static OperationCode Br;
    public static OperationCode Brfalse;
    public static OperationCode Brtrue;
    public static OperationCode Beq;
    public static OperationCode Bge;
    public static OperationCode Bgt;
    public static OperationCode Ble;
    public static OperationCode Blt;
    public static OperationCode Bne_Un;
    public static OperationCode Bge_Un;
    public static OperationCode Bgt_Un;
    public static OperationCode Ble_Un;
    public static OperationCode Blt_Un;
    public static OperationCode Switch;
    public static OperationCode Ldind_I1;
    public static OperationCode Ldind_U1;
    public static OperationCode Ldind_I2;
    public static OperationCode Ldind_U2;
    public static OperationCode Ldind_I4;
    public static OperationCode Ldind_U4;
    public static OperationCode Ldind_I8;
    public static OperationCode Ldind_I;
    public static OperationCode Ldind_R4;
    public static OperationCode Ldind_R8;
    public static OperationCode Ldind_Ref;
    public static OperationCode Stind_Ref;
    public static OperationCode Stind_I1;
    public static OperationCode Stind_I2;
    public static OperationCode Stind_I4;
    public static OperationCode Stind_I8;
    public static OperationCode Stind_R4;
    public static OperationCode Stind_R8;
    public static OperationCode Add;
    public static OperationCode Sub;
    public static OperationCode Mul;
    public static OperationCode Div;
    public static OperationCode Div_Un;
    public static OperationCode Rem;
    public static OperationCode Rem_Un;
    public static OperationCode And;
    public static OperationCode Or;
    public static OperationCode Xor;
    public static OperationCode Shl;
    public static OperationCode Shr;
    public static OperationCode Shr_Un;
    public static OperationCode Neg;
    public static OperationCode Not;
    public static OperationCode Conv_I1;
    public static OperationCode Conv_I2;
    public static OperationCode Conv_I4;
    public static OperationCode Conv_I8;
    public static OperationCode Conv_R4;
    public static OperationCode Conv_R8;
    public static OperationCode Conv_U4;
    public static OperationCode Conv_U8;
    public static OperationCode Callvirt;
    public static OperationCode Cpobj;
    public static OperationCode Ldobj;
    public static OperationCode Ldstr;
    public static OperationCode Newobj;
    public static OperationCode Castclass;
    public static OperationCode Isinst;
    public static OperationCode Conv_R_Un;
    public static OperationCode Unbox;
    public static OperationCode Throw;
    public static OperationCode Ldfld;
    public static OperationCode Ldflda;
    public static OperationCode Stfld;
    public static OperationCode Ldsfld;
    public static OperationCode Ldsflda;
    public static OperationCode Stsfld;
    public static OperationCode Stobj;
    public static OperationCode Conv_Ovf_I1_Un;
    public static OperationCode Conv_Ovf_I2_Un;
    public static OperationCode Conv_Ovf_I4_Un;
    public static OperationCode Conv_Ovf_I8_Un;
    public static OperationCode Conv_Ovf_U1_Un;
    public static OperationCode Conv_Ovf_U2_Un;
    public static OperationCode Conv_Ovf_U4_Un;
    public static OperationCode Conv_Ovf_U8_Un;
    public static OperationCode Conv_Ovf_I_Un;
    public static OperationCode Conv_Ovf_U_Un;
    public static OperationCode Box;
    public static OperationCode Newarr;
    public static OperationCode Ldlen;
    public static OperationCode Ldelema;
    public static OperationCode Ldelem_I1;
    public static OperationCode Ldelem_U1;
    public static OperationCode Ldelem_I2;
    public static OperationCode Ldelem_U2;
    public static OperationCode Ldelem_I4;
    public static OperationCode Ldelem_U4;
    public static OperationCode Ldelem_I8;
    public static OperationCode Ldelem_I;
    public static OperationCode Ldelem_R4;
    public static OperationCode Ldelem_R8;
    public static OperationCode Ldelem_Ref;
    public static OperationCode Stelem_I;
    public static OperationCode Stelem_I1;
    public static OperationCode Stelem_I2;
    public static OperationCode Stelem_I4;
    public static OperationCode Stelem_I8;
    public static OperationCode Stelem_R4;
    public static OperationCode Stelem_R8;
    public static OperationCode Stelem_Ref;
    public static OperationCode Ldelem;
    public static OperationCode Stelem;
    public static OperationCode Unbox_Any;
    public static OperationCode Conv_Ovf_I1;
    public static OperationCode Conv_Ovf_U1;
    public static OperationCode Conv_Ovf_I2;
    public static OperationCode Conv_Ovf_U2;
    public static OperationCode Conv_Ovf_I4;
    public static OperationCode Conv_Ovf_U4;
    public static OperationCode Conv_Ovf_I8;
    public static OperationCode Conv_Ovf_U8;
    public static OperationCode Refanyval;
    public static OperationCode Ckfinite;
    public static OperationCode Mkrefany;
    public static OperationCode Ldtoken;
    public static OperationCode Conv_U2;
    public static OperationCode Conv_U1;
    public static OperationCode Conv_I;
    public static OperationCode Conv_Ovf_I;
    public static OperationCode Conv_Ovf_U;
    public static OperationCode Add_Ovf;
    public static OperationCode Add_Ovf_Un;
    public static OperationCode Mul_Ovf;
    public static OperationCode Mul_Ovf_Un;
    public static OperationCode Sub_Ovf;
    public static OperationCode Sub_Ovf_Un;
    public static OperationCode Endfinally;
    public static OperationCode Leave;
    public static OperationCode Leave_S;
    public static OperationCode Stind_I;
    public static OperationCode Conv_U;
    public static OperationCode Arglist;
    public static OperationCode Ceq;
    public static OperationCode Cgt;
    public static OperationCode Cgt_Un;
    public static OperationCode Clt;
    public static OperationCode Clt_Un;
    public static OperationCode Ldftn;
    public static OperationCode Ldvirtftn;
    public static OperationCode Ldarg;
    public static OperationCode Ldarga;
    public static OperationCode Starg;
    public static OperationCode Ldloc;
    public static OperationCode Ldloca;
    public static OperationCode Stloc;
    public static OperationCode Localloc;
    public static OperationCode Endfilter;
    public static OperationCode Unaligned_;
    public static OperationCode Volatile_;
    public static OperationCode Tail_;
    public static OperationCode Initobj;
    public static OperationCode Constrained_;
    public static OperationCode Cpblk;
    public static OperationCode Initblk;
    public static OperationCode No_;
    public static OperationCode Rethrow;
    public static OperationCode Sizeof;
    public static OperationCode Refanytype;
    public static OperationCode Readonly_;
    public static OperationCode Array_Create;
    public static OperationCode Array_Create_WithLowerBound;
    public static OperationCode Array_Get;
    public static OperationCode Array_Set;
    public static OperationCode Array_Addr;
    public static OperationCode Invalid;
}
public class Microsoft.Cci.ParameterInformationComparer : object {
    private bool resolveTypes;
    public ParameterInformationComparer(bool resolveTypes);
    public sealed virtual bool Equals(IParameterTypeInformation x, IParameterTypeInformation y);
    public sealed virtual int GetHashCode(IParameterTypeInformation parameterTypeInformation);
}
public class Microsoft.Cci.PeReader : object {
    internal MetadataReaderErrorsReporter ErrorsReporter;
    internal IMetadataReaderHost metadataReaderHost;
    private Hashtable`1<Module> InternedIdToModuleMap;
    private Assembly coreAssembly;
    internal IName Value__;
    internal IName AsyncCallback;
    internal IName ParamArrayAttribute;
    internal IName IAsyncResult;
    internal IName ICloneable;
    internal IName RuntimeArgumentHandle;
    internal IName RuntimeFieldHandle;
    internal IName RuntimeMethodHandle;
    internal IName RuntimeTypeHandle;
    internal IName ArgIterator;
    internal IName IList;
    internal IName Mscorlib;
    internal IName System_Runtime;
    internal IName _Deleted_;
    internal Assembly CoreAssembly { get; }
    public IEnumerable`1<IModule> OpenedModules { get; }
    public PeReader(IMetadataReaderHost metadataReaderHost);
    internal void RegisterCoreAssembly(Assembly coreAssembly);
    internal Assembly get_CoreAssembly();
    private void OpenMemberModules(IBinaryDocument binaryDocument, Assembly assembly);
    private void LoadedModule(Module module);
    public IAssembly OpenAssembly(IBinaryDocument binaryDocument, AssemblyIdentity& assemblyIdentity);
    public IModule OpenModule(IBinaryDocument binaryDocument, ModuleIdentity& moduleIdentity);
    public IAssembly OpenAssembly(IBinaryDocument binaryDocument);
    public IModule OpenModule(IBinaryDocument binaryDocument);
    public IModule OpenSnapshot(IBinaryDocument binaryDocument);
    internal Assembly LookupAssembly(IModule referringModule, AssemblyIdentity unifiedAssemblyIdentity);
    internal Module LookupModule(IModule referringModule, ModuleIdentity moduleIdentity);
    public AssemblyIdentity GetAssemblyIdentifier(IBinaryDocument binaryDocument);
    internal AssemblyIdentity GetAssemblyIdentifier(PEFileReader peFileReader);
    internal ModuleIdentity GetModuleIdentifier(PEFileReader peFileReader);
    internal ModuleIdentity GetModuleIdentifier(PEFileReader peFileReader, AssemblyIdentity containingAssemblyIdentity);
    [IteratorStateMachineAttribute("Microsoft.Cci.PeReader/<get_OpenedModules>d__36")]
public IEnumerable`1<IModule> get_OpenedModules();
    public IModule FindModule(ModuleIdentity moduleIdentity);
    public IAssembly FindAssembly(AssemblyIdentity unifiedAssemblyIdentity);
    public ITypeDefinition ResolveSerializedTypeName(string typeName, IAssembly assembly);
}
[FlagsAttribute]
public enum Microsoft.Cci.PESectionCharacteristics : Enum {
    public int value__;
    public static PESectionCharacteristics ContainsExecutableCode;
    public static PESectionCharacteristics ContainsInitializedData;
    public static PESectionCharacteristics ContainsUninitializedData;
    public static PESectionCharacteristics IsExecutable;
    public static PESectionCharacteristics IsReadable;
    public static PESectionCharacteristics IsWritable;
}
public enum Microsoft.Cci.PESectionKind : Enum {
    public int value__;
    public static PESectionKind Illegal;
    public static PESectionKind ConstantData;
    public static PESectionKind CoverageData;
    public static PESectionKind ExtendedData;
    public static PESectionKind StaticData;
    public static PESectionKind Text;
    public static PESectionKind ThreadLocalStorage;
}
public enum Microsoft.Cci.PInvokeCallingConvention : Enum {
    public int value__;
    public static PInvokeCallingConvention WinApi;
    public static PInvokeCallingConvention CDecl;
    public static PInvokeCallingConvention StdCall;
    public static PInvokeCallingConvention ThisCall;
    public static PInvokeCallingConvention FastCall;
}
public enum Microsoft.Cci.PrimitiveTypeCode : Enum {
    public int value__;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode Int8;
    public static PrimitiveTypeCode Float32;
    public static PrimitiveTypeCode Float64;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode IntPtr;
    public static PrimitiveTypeCode Pointer;
    public static PrimitiveTypeCode Reference;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode UInt8;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode UIntPtr;
    public static PrimitiveTypeCode Void;
    public static PrimitiveTypeCode NotPrimitive;
    public static PrimitiveTypeCode Invalid;
}
public enum Microsoft.Cci.SecurityAction : Enum {
    public int value__;
    public static SecurityAction ActionNil;
    public static SecurityAction Request;
    public static SecurityAction Demand;
    public static SecurityAction Assert;
    public static SecurityAction Deny;
    public static SecurityAction PermitOnly;
    public static SecurityAction LinkDemand;
    public static SecurityAction InheritanceDemand;
    public static SecurityAction RequestMinimum;
    public static SecurityAction RequestOptional;
    public static SecurityAction RequestRefuse;
    public static SecurityAction PrejitGrant;
    public static SecurityAction PrejitDenied;
    public static SecurityAction NonCasDemand;
    public static SecurityAction NonCasLinkDemand;
    public static SecurityAction NonCasInheritance;
}
public class Microsoft.Cci.SignatureFormatter : object {
    protected TypeNameFormatter typeNameFormatter;
    public SignatureFormatter(TypeNameFormatter typeNameFormatter);
    public virtual string GetEventSignature(IEventDefinition eventDef, NameFormattingOptions formattingOptions);
    public virtual string GetFieldSignature(IFieldReference field, NameFormattingOptions formattingOptions);
    public virtual string GetMemberSignature(ITypeMemberReference member, NameFormattingOptions formattingOptions);
    public virtual string GetMethodSignature(IMethodReference method, NameFormattingOptions formattingOptions);
    public virtual string GetPropertySignature(IPropertyDefinition property, NameFormattingOptions formattingOptions);
    public virtual string GetVisibility(ITypeDefinitionMember typeDefinitionMember);
    protected virtual void AppendGenericArguments(IGenericMethodInstanceReference method, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual void AppendGenericParameters(IMethodReference method, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual void AppendMethodParameters(IMethodReference method, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual void AppendMethodName(IMethodReference method, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual void AppendParameter(IParameterTypeInformation param, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual void AppendPropertyName(IPropertyDefinition property, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual void AppendPropertyParameters(IEnumerable`1<IParameterDefinition> parameters, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual void AppendReturnTypeSignature(ISignature sig, NameFormattingOptions formattingOptions, StringBuilder sb);
    protected virtual string MapToDocumentationIdName(string name);
}
public class Microsoft.Cci.SimpleParameterTypeInformation : object {
    private ISignature containingSignature;
    private ushort index;
    private bool isByReference;
    private ITypeReference type;
    public ISignature ContainingSignature { get; }
    public ushort Index { get; }
    public bool IsByReference { get; }
    public ITypeReference Type { get; }
    private IEnumerable`1<ICustomModifier> Microsoft.Cci.IParameterTypeInformation.CustomModifiers { get; }
    private bool Microsoft.Cci.IParameterTypeInformation.IsModified { get; }
    public SimpleParameterTypeInformation(ISignature containingSignature, ushort index, ITypeReference type, bool isByReference);
    public sealed virtual ISignature get_ContainingSignature();
    public sealed virtual ushort get_Index();
    public sealed virtual bool get_IsByReference();
    public sealed virtual ITypeReference get_Type();
    private sealed virtual override IEnumerable`1<ICustomModifier> Microsoft.Cci.IParameterTypeInformation.get_CustomModifiers();
    private sealed virtual override bool Microsoft.Cci.IParameterTypeInformation.get_IsModified();
}
public enum Microsoft.Cci.StringFormatKind : Enum {
    public int value__;
    public static StringFormatKind Unspecified;
    public static StringFormatKind Ansi;
    public static StringFormatKind Unicode;
    public static StringFormatKind AutoChar;
}
public static class Microsoft.Cci.TypeHelper : object {
    public static ITypeDefinition BaseClass(ITypeDefinition typeDef);
    public static bool CanAccess(ITypeDefinition typeDefinition, ITypeDefinitionMember member);
    public static bool CanAccess(ITypeDefinition typeDefinition, ITypeDefinition otherTypeDefinition);
    public static ITypeDefinition EffectiveBaseClass(IGenericParameter genericParameter);
    public static bool IsCompilerGenerated(ITypeDefinition type);
    public static bool IsCompileTimeConstantType(ITypeReference type);
    public static bool IsOpen(ITypeReference typeReference);
    public static bool IsPrimitiveInteger(ITypeReference type);
    public static bool IsSignedPrimitiveInteger(ITypeReference type);
    public static bool IsSignedPrimitive(ITypeReference type);
    public static bool IsUnsignedPrimitiveInteger(ITypeReference type);
    public static bool IsUnsignedPrimitive(ITypeReference type);
    public static bool IsVisibleOutsideAssembly(ITypeDefinition typeDefinition);
    public static bool IsVisibleToFriendAssemblies(ITypeDefinition typeDefinition);
    public static ITypeReference MergedType(ITypeReference type1, ITypeReference type2);
    public static ITypeReference MergedType(ITypeDefinition type1, ITypeDefinition type2);
    public static TypeMemberVisibility GenericInstanceVisibilityAsTypeMemberVisibility(TypeMemberVisibility templateVisibility, IEnumerable`1<ITypeReference> typeArguments);
    public static TypeMemberVisibility TypeVisibilityAsTypeMemberVisibility(ITypeDefinition type);
    public static ITypeReference UninstantiateAndUnspecialize(ITypeReference type);
    public static INestedTypeReference Unspecialize(INestedTypeReference nestedType);
    public static TypeMemberVisibility VisibilityIntersection(TypeMemberVisibility visibility1, TypeMemberVisibility visibility2);
    public static IUnitNamespace GetDefiningNamespace(INamedTypeDefinition namedTypeDefinition);
    public static IUnit GetDefiningUnit(ITypeDefinition typeDefinition);
    public static IUnitReference GetDefiningUnitReference(ITypeReference typeReference);
    public static IEventDefinition GetEvent(ITypeDefinition declaringType, IName eventName);
    public static IFieldDefinition GetField(ITypeDefinition declaringType, IName fieldName);
    public static IFieldDefinition GetField(ITypeDefinition declaringType, IFieldReference fieldReference, bool resolveTypes);
    public static IMethodDefinition GetMethod(ITypeDefinition declaringType, IName methodName, ITypeReference[] parameterTypes);
    public static IMethodDefinition GetMethod(IEnumerable`1<ITypeDefinitionMember> members, IName methodName, ITypeReference[] parameterTypes);
    public static IMethodDefinition GetMethod(ITypeDefinition declaringType, IMethodReference methodReference, bool resolveTypes);
    public static IMethodDefinition GetInvokeMethod(ITypeDefinition delegateType, IMetadataHost host);
    public static IMethodDefinition GetMethod(IEnumerable`1<ITypeDefinitionMember> members, IMethodReference methodSignature, bool resolveTypes);
    public static string GetNamespaceName(IUnitSetNamespace namespaceDefinition, NameFormattingOptions formattingOptions);
    public static string GetNamespaceName(IUnitNamespaceReference namespaceReference, NameFormattingOptions formattingOptions);
    public static INestedTypeDefinition GetNestedType(ITypeDefinition declaringType, IName typeName, int genericParameterCount);
    public static IPropertyDefinition GetProperty(ITypeDefinition declaringType, IName propertyName);
    public static bool TryGetFullyInstantiatedSpecializedTypeReference(ITypeDefinition typeDefinition, ITypeReference& result);
    public static string GetAliasName(IAliasForType alias);
    public static TypeCode GetSytemTypeCodeFor(ITypeDefinition type);
    public static string GetTypeName(ITypeReference type);
    public static string GetTypeName(ITypeReference type, NameFormattingOptions formattingOptions);
    public static ITypeDefinition MostDerivedCommonBaseClass(ITypeDefinition type1, ITypeDefinition type2);
    public static bool ParametersAreEquivalent(IParameterTypeInformation param1, IParameterTypeInformation param2, bool resolveTypes);
    public static bool ParametersAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(IParameterTypeInformation param1, IParameterTypeInformation param2, bool resolveTypes);
    public static bool ParameterListsAreEquivalent(IEnumerable`1<IParameterTypeInformation> paramList1, IEnumerable`1<IParameterTypeInformation> paramList2, bool resolveTypes);
    public static bool ParameterListsAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(IEnumerable`1<IParameterTypeInformation> paramList1, IEnumerable`1<IParameterTypeInformation> paramList2, bool resolveTypes);
    public static bool ParameterListsAreEquivalent(IEnumerable`1<IParameterDefinition> paramList1, IEnumerable`1<IParameterDefinition> paramList2, bool resolveTypes);
    public static ITypeReference SignedEquivalent(ITypeReference typeReference);
    public static UInt32 SizeOfType(ITypeReference type);
    public static UInt32 SizeOfType(ITypeReference type, bool mayUseSizeOfProperty);
    private static UInt32 SizeOfType(ITypeReference type, ITypeReference rootType, bool mayUseSizeOfProperty);
    public static ITypeReference StackType(ITypeReference type);
    public static bool StackTypesAreEquivalent(ITypeReference type1, ITypeReference type2);
    public static ushort TypeAlignment(ITypeReference type);
    public static ushort TypeAlignment(ITypeReference type, bool mayUseAlignmentProperty);
    private static ushort TypeAlignment(ITypeReference type, ITypeReference rootType, bool mayUseAlignmentProperty);
    public static bool ArrayTypesAreEquivalent(IArrayTypeReference arrayTypeRef1, IArrayTypeReference arrayTypeRef2, bool resolveTypes);
    public static bool GenericTypeInstancesAreEquivalent(IGenericTypeInstanceReference genericTypeInstRef1, IGenericTypeInstanceReference genericTypeInstRef2, bool resolveTypes);
    public static ITypeDefinition GetInstanceOrSpecializedNestedType(ITypeDefinition type);
    public static bool HasOwnOrInheritedTypeParameters(ITypeDefinition type);
    public static bool IsAttributeType(ITypeDefinition type);
    public static bool PointerTypesAreEquivalent(IPointerTypeReference pointerTypeRef1, IPointerTypeReference pointerTypeRef2, bool resolveTypes);
    public static bool GenericTypeParametersAreEquivalent(IGenericTypeParameterReference genericTypeParam1, IGenericTypeParameterReference genericTypeParam2, bool resolveTypes);
    public static bool GenericMethodParametersAreEquivalent(IGenericMethodParameterReference genericMethodParam1, IGenericMethodParameterReference genericMethodParam2);
    public static bool FunctionPointerTypesAreEquivalent(IFunctionPointerTypeReference functionPointer1, IFunctionPointerTypeReference functionPointer2, bool resolveTypes);
    public static bool FunctionPointerTypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(IFunctionPointerTypeReference functionPointer1, IFunctionPointerTypeReference functionPointer2, bool resolveTypes);
    [ObsoleteAttribute("Please use TypeHelper.TypesAreEquivalent instead")]
public static bool NamespaceTypesAreEquivalent(INamespaceTypeReference nsType1, INamespaceTypeReference nsType2);
    [ObsoleteAttribute("Please use TypeHelper.TypesAreEquivalent instead")]
public static bool NestedTypesAreEquivalent(INestedTypeReference nstType1, INestedTypeReference nstType2);
    public static ITypeReference SpecializeTypeReference(ITypeReference typeReference, ITypeReference context, IInternFactory internFactory);
    public static ITypeReference SpecializeTypeReference(ITypeReference typeReference, IMethodReference context, IInternFactory internFactory);
    public static bool TypesAreEquivalent(ITypeReference type1, ITypeReference type2, bool resolveTypes);
    public static bool TypesAreEquivalentAssumingGenericMethodParametersAreEquivalentIfTheirIndicesMatch(ITypeReference type1, ITypeReference type2, bool resolveTypes);
    public static bool Type1DerivesFromOrIsTheSameAsType2(ITypeDefinition type1, ITypeReference type2, bool resolveTypes);
    public static bool Type1DerivesFromType2(ITypeDefinition type1, ITypeReference type2, bool resolveTypes);
    public static bool Type1ImplementsType2(ITypeDefinition type1, ITypeReference type2, bool resolveTypes);
    public static bool Type1IsCovariantWithType2(ITypeDefinition type1, ITypeReference type2, bool resolveTypes);
    public static bool TypesAreAssignmentCompatible(ITypeDefinition sourceType, ITypeDefinition targetType, bool resolveTypes);
    public static ITypeReference UnsignedEquivalent(ITypeReference typeReference);
}
public enum Microsoft.Cci.TypeMemberVisibility : Enum {
    public int value__;
    public static TypeMemberVisibility Default;
    public static TypeMemberVisibility Assembly;
    public static TypeMemberVisibility Family;
    public static TypeMemberVisibility FamilyAndAssembly;
    public static TypeMemberVisibility FamilyOrAssembly;
    public static TypeMemberVisibility Other;
    public static TypeMemberVisibility Private;
    public static TypeMemberVisibility Public;
    public static TypeMemberVisibility Mask;
}
public class Microsoft.Cci.TypeNameFormatter : object {
    protected virtual string AddGenericParametersIfNeeded(ITypeReference type, ushort genericParameterCount, NameFormattingOptions formattingOptions, string typeName);
    public string GetAliasName(IAliasForType alias);
    private void AppendAliasName(IAliasForType alias, StringBuilder sb);
    protected virtual string GetArrayTypeName(IArrayTypeReference arrayType, NameFormattingOptions formattingOptions);
    protected virtual void AppendArrayDimensions(IArrayTypeReference arrayType, StringBuilder sb, NameFormattingOptions formattingOptions);
    public virtual string EscapeKeyword(string name);
    protected virtual string GetGenericMethodParameterName(IGenericMethodParameterReference genericMethodParameter, NameFormattingOptions formattingOptions);
    protected virtual string GetGenericTypeParameterName(IGenericTypeParameterReference genericTypeParameter, NameFormattingOptions formattingOptions);
    protected virtual string GetManagedPointerTypeName(IManagedPointerTypeReference pointerType, NameFormattingOptions formattingOptions);
    protected virtual string GetModifiedTypeName(IModifiedTypeReference modifiedType, NameFormattingOptions formattingOptions);
    protected virtual string GetNamespaceTypeName(INamespaceTypeReference nsType, NameFormattingOptions formattingOptions);
    public virtual string GetNamespaceName(IUnitSetNamespace namespaceDefinition, NameFormattingOptions formattingOptions);
    public virtual string GetNamespaceName(IUnitNamespaceReference unitNamespace, NameFormattingOptions formattingOptions);
    protected virtual string GetNestedTypeName(INestedTypeReference nestedType, NameFormattingOptions formattingOptions);
    protected virtual string GetPointerTypeName(IPointerTypeReference pointerType, NameFormattingOptions formattingOptions);
    public virtual string GetTypeName(ITypeReference type, NameFormattingOptions formattingOptions);
    protected virtual string GetTypeKind(ITypeReference typeReference);
    public virtual string GetVisibility(INestedTypeDefinition nestedType);
    protected virtual string GetFunctionPointerTypeName(IFunctionPointerTypeReference functionPointerType, NameFormattingOptions formattingOptions);
    protected virtual string GetGenericTypeInstanceName(IGenericTypeInstanceReference genericTypeInstance, NameFormattingOptions formattingOptions);
    public static ITypeReference GetUnsignedEquivalent(ITypeReference type);
}
public enum Microsoft.Cci.TypeParameterVariance : Enum {
    public int value__;
    public static TypeParameterVariance NonVariant;
    public static TypeParameterVariance Covariant;
    public static TypeParameterVariance Contravariant;
    public static TypeParameterVariance Mask;
}
public static class Microsoft.Cci.UnitHelper : object {
    public static bool AssemblyOneAllowsAssemblyTwoToAccessItsInternals(IAssembly assembly1, IAssembly assembly2);
    public static AssemblyIdentity GetAssemblyIdentity(AssemblyName assemblyName, IMetadataHost metadataHost);
    public static AssemblyIdentity GetAssemblyIdentity(IAssembly assembly);
    public static ModuleIdentity GetModuleIdentity(IModule module);
    public static Byte[] ComputePublicKeyToken(IEnumerable`1<byte> publicKey);
    public static string StrongName(IAssemblyReference assemblyReference);
    public static string StrongName(AssemblyIdentity assemblyIdentity);
    public static INamedTypeDefinition FindType(INameTable nameTable, IUnit unit, string typeName);
    public static INamedTypeDefinition FindType(INameTable nameTable, IUnit unit, string typeName, int genericParameterCount);
    private static INamedTypeDefinition GetType(INameTable nameTable, INamespaceDefinition namespaceDefinition, string typeName, int genericParameterCount, Int32& offset);
    private static INestedUnitNamespace GetNamespace(INameTable nameTable, INamespaceDefinition namespaceDefinition, string typeName, Int32& offset);
    private static INestedTypeDefinition GetNestedType(INameTable nameTable, ITypeDefinition typeDefinition, string typeName, int genericParameterCount, Int32& offset);
    public static IResourceReference FindResourceNamed(IAssembly assembly, IName resourceName);
    public static bool AssembliesAreEquivalent(IAssemblyReference assembly1, IAssemblyReference assembly2);
    public static bool ModulesAreEquivalent(IModuleReference module1, IModuleReference module2);
    public static bool UnitsAreEquivalent(IUnitReference unit1, IUnitReference unit2);
    public static bool UnitsAreContainmentEquivalent(IUnitReference unit1, IUnitReference unit2);
    public static bool UnitNamespacesAreEquivalent(IUnitNamespaceReference unitNamespace1, IUnitNamespaceReference unitNamespace2);
}
public abstract class Microsoft.Cci.UnitIdentity : object {
    private Nullable`1<int> hashCode;
    private string location;
    private IName name;
    public string Location { get; }
    public IName Name { get; }
    internal UnitIdentity(IName name, string location);
    private void ObjectInvariant();
    public abstract virtual bool Equals(object obj);
    internal abstract virtual int ComputeHashCode();
    public virtual int GetHashCode();
    public string get_Location();
    public IName get_Name();
    public abstract virtual string ToString();
}
public class Microsoft.Cci.UnitSetIdentity : object {
    private IEnumerable`1<UnitIdentity> units;
    public IEnumerable`1<UnitIdentity> Units { get; }
    public UnitSetIdentity(IEnumerable`1<UnitIdentity> units);
    public IEnumerable`1<UnitIdentity> get_Units();
}
public class Microsoft.Cci.UnmanagedBinaryMemoryBlock : object {
    private IBinaryDocument binaryDocument;
    private IntPtr Pointer;
    private IBinaryDocument Microsoft.Cci.IBinaryDocumentMemoryBlock.BinaryDocument { get; }
    private Byte* Microsoft.Cci.IBinaryDocumentMemoryBlock.Pointer { get; }
    private UInt32 Microsoft.Cci.IBinaryDocumentMemoryBlock.Length { get; }
    private UnmanagedBinaryMemoryBlock(IBinaryDocument binaryDocument);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Close();
    private sealed virtual override IBinaryDocument Microsoft.Cci.IBinaryDocumentMemoryBlock.get_BinaryDocument();
    private sealed virtual override Byte* Microsoft.Cci.IBinaryDocumentMemoryBlock.get_Pointer();
    private sealed virtual override UInt32 Microsoft.Cci.IBinaryDocumentMemoryBlock.get_Length();
    public static UnmanagedBinaryMemoryBlock CreateUnmanagedBinaryMemoryBlock(string localFileName, IBinaryDocument binaryDocument);
    public static UnmanagedBinaryMemoryBlock CreateUnmanagedBinaryMemoryBlock(Stream stream, IBinaryDocument binaryDocument);
    public static UnmanagedBinaryMemoryBlock CreateUnmanagedBinaryMemoryBlock(IEnumerable`1<byte> stream, IBinaryDocument binaryDocument);
}
public class Microsoft.Cci.UtilityDataStructures.DoubleHashtable : object {
    private Key1Key2ValueTriple[] keysValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public DoubleHashtable(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public UInt32 get_Count();
    private void Expand();
    private bool AddInternal(UInt32 key1, UInt32 key2, UInt32 value);
    public bool Add(UInt32 key1, UInt32 key2, UInt32 value);
    public UInt32 Find(UInt32 key1, UInt32 key2);
}
public class Microsoft.Cci.UtilityDataStructures.DoubleHashtable`1 : object {
    private Key1Key2ValueTriple[] keysValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public DoubleHashtable`1(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public UInt32 get_Count();
    public void Clear();
    private void Expand();
    private bool AddInternal(UInt32 key1, UInt32 key2, T value);
    public bool Add(UInt32 key1, UInt32 key2, T value);
    public T Find(UInt32 key1, UInt32 key2);
}
internal class Microsoft.Cci.UtilityDataStructures.EnumerableArrayWrapper`2 : object {
    internal T[] RawArray;
    internal U DummyValue;
    internal EnumerableArrayWrapper`2(T[] rawArray, U dummyValue);
    public sealed virtual IEnumerator`1<U> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Cci.UtilityDataStructures.EnumerableBinaryDocumentMemoryBlockWrapper : object {
    internal IBinaryDocumentMemoryBlock BinaryDocumentMemoryBlock;
    internal EnumerableBinaryDocumentMemoryBlockWrapper(IBinaryDocumentMemoryBlock binaryDocumentMemoryBlock);
    public sealed virtual IEnumerator`1<byte> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Cci.UtilityDataStructures.EnumerableMemoryBlockWrapper : object {
    internal MemoryBlock MemBlock;
    internal EnumerableMemoryBlockWrapper(MemoryBlock memBlock);
    public sealed virtual IEnumerator`1<byte> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class Microsoft.Cci.UtilityDataStructures.HashHelper : object {
    public static UInt32 HashInt1(UInt32 key);
    public static UInt32 HashInt2(UInt32 key);
    public static UInt32 HashDoubleInt1(UInt32 key1, UInt32 key2);
    public static UInt32 HashDoubleInt2(UInt32 key1, UInt32 key2);
    public static UInt32 StartHash(UInt32 key);
    public static UInt32 ContinueHash(UInt32 prevHash, UInt32 key);
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Microsoft.Cci.UtilityDataStructures.Hashtable/DebugView")]
public class Microsoft.Cci.UtilityDataStructures.Hashtable : object {
    private KeyValuePair[] keyValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public UInt32 Item { get; public set; }
    public ValuesEnumerable Values { get; }
    public Hashtable(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public UInt32 get_Count();
    private void Expand();
    private void AddInternal(UInt32 key, UInt32 value);
    public void Add(UInt32 key, UInt32 value);
    public bool ContainsKey(UInt32 key);
    public UInt32 Find(UInt32 key);
    public UInt32 get_Item(UInt32 key);
    public void set_Item(UInt32 key, UInt32 value);
    public bool TryGetValue(UInt32 key, UInt32& value);
    public ValuesEnumerable get_Values();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Microsoft.Cci.UtilityDataStructures.Hashtable`1/DebugView")]
public class Microsoft.Cci.UtilityDataStructures.Hashtable`1 : object {
    private KeyValuePair[] keyValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public InternalT Item { get; public set; }
    public ValuesEnumerable<InternalT> Values { get; }
    public Hashtable`1(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public UInt32 get_Count();
    private void Expand();
    private void AddInternal(UInt32 key, InternalT value);
    public void Add(UInt32 key, InternalT value);
    public void Clear();
    public InternalT Find(UInt32 key);
    public InternalT get_Item(UInt32 key);
    public void set_Item(UInt32 key, InternalT value);
    public KeyValuePairEnumerator<InternalT> GetEnumerator();
    public ValuesEnumerable<InternalT> get_Values();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Cci.UtilityDataStructures.Hashtable`2 : object {
    private static Value dummyObject;
    private KeyValuePair[] keyValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public Value Item { get; public set; }
    public Hashtable`2(UInt32 expectedEntries);
    public Hashtable`2(Hashtable`2<Key, Value> tableToClone);
    private static Hashtable`2();
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public void Clear();
    public UInt32 get_Count();
    private void Expand();
    private void AddInternal(Key key, Value value);
    public void Add(Key key, Value value);
    public bool ContainsKey(Key key);
    public void Remove(Key key);
    public Value get_Item(Key key);
    public void set_Item(Key key, Value value);
    public bool TryGetValue(Key key, Value& value);
    public KeyValuePairEnumerator<Key, Value> GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Microsoft.Cci.UtilityDataStructures.HashtableForUintValues`1/DebugView")]
public class Microsoft.Cci.UtilityDataStructures.HashtableForUintValues`1 : object {
    private KeyValuePair[] keyValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public UInt32 Item { get; public set; }
    public HashtableForUintValues`1(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public void Clear();
    public UInt32 get_Count();
    private void Expand();
    private void AddInternal(Key key, UInt32 value);
    public void Add(Key key, UInt32 value);
    public bool ContainsKey(Key key);
    public UInt32 get_Item(Key key);
    public void set_Item(Key key, UInt32 value);
    public bool TryGetValue(Key key, UInt32& value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Cci.UtilityDataStructures.HashtableUlong`1 : object {
    private KeyValuePair[] keyValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public InternalT Item { get; public set; }
    public ValuesEnumerable<InternalT> Values { get; }
    public HashtableUlong`1(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public UInt32 get_Count();
    private void Expand();
    private void AddInternal(ulong key, InternalT value);
    public void Add(ulong key, InternalT value);
    public void Clear();
    public InternalT Find(ulong key);
    public InternalT get_Item(ulong key);
    public void set_Item(ulong key, InternalT value);
    public ValuesEnumerable<InternalT> get_Values();
}
internal class Microsoft.Cci.UtilityDataStructures.MemoryBlock : ValueType {
    internal Byte* Buffer;
    internal int Length;
    internal MemoryBlock(Byte* buffer, int length);
    internal MemoryBlock(Byte* buffer, UInt32 length);
}
internal class Microsoft.Cci.UtilityDataStructures.MemoryReader : ValueType {
    private Byte* Buffer;
    private Byte* CurrentPointer;
    internal int Length;
    internal UInt32 Offset { get; }
    internal UInt32 RemainingBytes { get; }
    internal bool NotEndOfBytes { get; }
    internal MemoryBlock RemainingMemoryBlock { get; }
    internal MemoryReader(Byte* buffer, int length, int offset);
    internal MemoryReader(Byte* buffer, int length);
    internal MemoryReader(Byte* buffer, UInt32 length);
    internal MemoryReader(MemoryBlock memBlock);
    internal UInt32 get_Offset();
    internal UInt32 get_RemainingBytes();
    internal bool get_NotEndOfBytes();
    internal bool SeekOffset(int offset);
    internal void SkipBytes(int count);
    internal void Align(UInt32 alignment);
    internal MemoryBlock get_RemainingMemoryBlock();
    internal MemoryBlock GetMemoryBlockAt(UInt32 offset, UInt32 length);
    internal MemoryBlock GetMemoryBlockAt(int offset, int length);
    internal short PeekInt16(int offset);
    internal int PeekInt32(int offset);
    internal byte PeekByte(int offset);
    internal ushort PeekUInt16(int offset);
    internal ushort PeekUInt16(UInt32 offset);
    internal UInt32 PeekUInt32(int offset);
    internal UInt32 PeekUInt32(UInt32 offset);
    internal UInt32 PeekReference(int offset, bool smallRefSize);
    internal UInt32 PeekReference(UInt32 offset, bool smallRefSize);
    internal Guid PeekGuid(int offset);
    internal Byte[] PeekBytes(int offset, int byteCount);
    private static string ScanUTF16WithSize(Byte* bytePtr, int byteCount);
    internal string PeekUTF16WithSize(int offset, int byteCount);
    internal int PeekCompressedInt32(int offset, Int32& numberOfBytesRead);
    internal UInt32 PeekCompressedUInt32(UInt32 offset, UInt32& numberOfBytesRead);
    internal string PeekUTF8NullTerminated(int offset, Int32& numberOfBytesRead);
    internal string PeekUTF16WithShortSize(int offset, Int32& numberOfBytesRead);
    internal int BinarySearchForSlot(UInt32 numberOfRows, int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal int BinarySearchReference(UInt32 numberOfRows, int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal int LinearSearchReference(int rowSize, int referenceOffset, UInt32 referenceValue, bool isReferenceSmall);
    internal char ReadChar();
    internal sbyte ReadSByte();
    internal short ReadInt16();
    internal int ReadInt32();
    internal long ReadInt64();
    internal byte ReadByte();
    internal ushort ReadUInt16();
    internal UInt32 ReadUInt32();
    internal ulong ReadUInt64();
    internal float ReadSingle();
    internal double ReadDouble();
    internal OperationCode ReadOpcode();
    internal string ReadASCIIWithSize(int byteCount);
    internal string ReadUTF8WithSize(int byteCount);
    internal string ReadUTF16WithSize(int byteCount);
    internal int ReadCompressedUInt32();
    internal int ReadCompressedInt32();
    internal string ReadASCIINullTerminated();
}
public class Microsoft.Cci.UtilityDataStructures.MultiHashtable`1 : object {
    private KeyValuePair[] keyValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public ValuesEnumerable<InternalT> Values { get; }
    public MultiHashtable`1(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public UInt32 get_Count();
    private void Expand();
    private void AddInternal(UInt32 key, InternalT value);
    public void Add(UInt32 key, InternalT value);
    public void Clear();
    public bool Contains(UInt32 key, InternalT value);
    public bool ContainsKey(UInt32 key);
    public int NumberOfEntries(UInt32 key);
    public void ReplaceEntry(UInt32 key, InternalT oldValue, InternalT newValue);
    public KeyedValuesEnumerable<InternalT> GetValuesFor(UInt32 key);
    public ValuesEnumerable<InternalT> get_Values();
}
public class Microsoft.Cci.UtilityDataStructures.MultiHashtable`2 : object {
    private KeyValuePair[] keyValueTable;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private static int loadPercent;
    public UInt32 Count { get; }
    public ValuesEnumerable<Key, InternalT> Values { get; }
    public MultiHashtable`2(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public UInt32 get_Count();
    private void Expand();
    private void AddInternal(Key key, InternalT value);
    public void Add(Key key, InternalT value);
    public void Clear();
    public bool Contains(Key key, InternalT value);
    public bool ContainsKey(Key key);
    public int NumberOfEntries(Key key);
    public void ReplaceEntry(Key key, InternalT oldValue, InternalT newValue);
    public KeyedValuesEnumerable<Key, InternalT> GetValuesFor(Key key);
    public ValuesEnumerable<Key, InternalT> get_Values();
}
public class Microsoft.Cci.UtilityDataStructures.SetOfObjects : object {
    private Object[] elements;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private UInt32 dummyCount;
    private static int loadPercent;
    private static object dummyObject;
    public UInt32 Count { get; }
    public ValuesEnumerable Values { get; }
    public SetOfObjects(UInt32 expectedEntries);
    public SetOfObjects(SetOfObjects setToClone);
    private static SetOfObjects();
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public void Clear();
    public UInt32 get_Count();
    private void Expand();
    private bool AddInternal(object element);
    public bool Add(object element);
    public bool Contains(object element);
    public void Remove(object element);
    public ValuesEnumerable get_Values();
}
[DebuggerTypeProxyAttribute("Microsoft.Cci.UtilityDataStructures.SetOfUints/DebugView")]
public class Microsoft.Cci.UtilityDataStructures.SetOfUints : object {
    private UInt32[] elements;
    private UInt32 size;
    private UInt32 resizeCount;
    private UInt32 count;
    private UInt32 dummyCount;
    private static int loadPercent;
    public UInt32 Count { get; }
    public ValuesEnumerable Values { get; }
    public SetOfUints(UInt32 expectedEntries);
    private static UInt32 SizeFromExpectedEntries(UInt32 expectedEntries);
    public void Clear();
    public UInt32 get_Count();
    private void Expand();
    private bool AddInternal(UInt32 element);
    public bool Add(UInt32 element);
    public bool Contains(UInt32 element);
    public void Remove(UInt32 element);
    public ValuesEnumerable get_Values();
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Microsoft.Cci.UtilityDataStructures.Sublist`1/DebugView")]
public class Microsoft.Cci.UtilityDataStructures.Sublist`1 : ValueType {
    private List`1<T> masterList;
    private int offset;
    private int count;
    public int Count { get; }
    public T Item { get; public set; }
    public Sublist`1(List`1<T> masterList, int offset, int count);
    private void ObjectInvariant();
    public int get_Count();
    public int Find(T element);
    public Sublist`1<T> GetSublist(int offset, int count);
    public T get_Item(int i);
    public void set_Item(int i, T value);
    public Enumerator<T> GetEnumerator();
}
[CompilerGeneratedAttribute]
internal static class Microsoft.Cci.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
