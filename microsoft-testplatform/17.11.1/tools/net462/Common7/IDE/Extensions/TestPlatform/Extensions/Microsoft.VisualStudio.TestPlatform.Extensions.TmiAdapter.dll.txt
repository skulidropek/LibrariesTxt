[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.Constants : object {
    private static string TmiTestIdLabel;
    private static string TmiTestResultXmlLabel;
    private static string TmiTestElementXmlLabel;
    private static string ExecutionIdLabel;
    private static string ParentExecIdLabel;
    private static string TestTypeLabel;
    private static string RootTestCaseIdLabel;
    private static string InnerResultsCountLabel;
    private static string ExtensionId;
    public static TestProperty TmiTestIdTestProperty;
    public static TestProperty TmiTestResultXmlProperty;
    public static TestProperty TmiTestElementXmlProperty;
    public static TestProperty ExecutionIdProperty;
    public static TestProperty ParentExecIdProperty;
    public static TestProperty TestTypeProperty;
    public static TestProperty RootTestCaseIdProperty;
    public static TestProperty InnerResultsCountProperty;
    public static TestProperty ExtensionIdProperty;
    public static string EnvironmentVariableToEnableWebTest;
    public static string VSInstallPathEnvVarName;
    public static string PathToWebRootEnvVarName;
    public static string StaticCodeCoveragePdbSuffix;
    public static string RunsettingsDirectoryNodeName;
    public static Guid GenericTestType;
    public static Guid OrderedTestType;
    public static Guid UnitTestType;
    public static Guid WebTestType;
    public static Guid CodedWebTestType;
    private static Constants();
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.LegacySettings : object {
    [CompilerGeneratedAttribute]
private string <SetupCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CleanupCommand>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private HostRunConfigurationData <HostData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipUnhostableTests>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestRunConfig <UnitTestRunConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParallelTestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentItemCollection <DeploymentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessorArchitecture <HostProcessPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeploymentEnabled>k__BackingField;
    public string SetupCommand { get; public set; }
    public string CleanupCommand { get; public set; }
    public int TestTimeout { get; public set; }
    public HostRunConfigurationData HostData { get; public set; }
    public bool SkipUnhostableTests { get; public set; }
    public UnitTestRunConfig UnitTestRunConfig { get; public set; }
    public int ParallelTestCount { get; public set; }
    public DeploymentItemCollection DeploymentItems { get; public set; }
    public ProcessorArchitecture HostProcessPlatform { get; public set; }
    public bool IsDeploymentEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SetupCommand();
    [CompilerGeneratedAttribute]
public void set_SetupCommand(string value);
    [CompilerGeneratedAttribute]
public string get_CleanupCommand();
    [CompilerGeneratedAttribute]
public void set_CleanupCommand(string value);
    [CompilerGeneratedAttribute]
public int get_TestTimeout();
    [CompilerGeneratedAttribute]
public void set_TestTimeout(int value);
    [CompilerGeneratedAttribute]
public HostRunConfigurationData get_HostData();
    [CompilerGeneratedAttribute]
public void set_HostData(HostRunConfigurationData value);
    [CompilerGeneratedAttribute]
public bool get_SkipUnhostableTests();
    [CompilerGeneratedAttribute]
public void set_SkipUnhostableTests(bool value);
    [CompilerGeneratedAttribute]
public UnitTestRunConfig get_UnitTestRunConfig();
    [CompilerGeneratedAttribute]
public void set_UnitTestRunConfig(UnitTestRunConfig value);
    [CompilerGeneratedAttribute]
public int get_ParallelTestCount();
    [CompilerGeneratedAttribute]
public void set_ParallelTestCount(int value);
    [CompilerGeneratedAttribute]
public DeploymentItemCollection get_DeploymentItems();
    [CompilerGeneratedAttribute]
public void set_DeploymentItems(DeploymentItemCollection value);
    [CompilerGeneratedAttribute]
public ProcessorArchitecture get_HostProcessPlatform();
    [CompilerGeneratedAttribute]
public void set_HostProcessPlatform(ProcessorArchitecture value);
    [CompilerGeneratedAttribute]
public bool get_IsDeploymentEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDeploymentEnabled(bool value);
}
[SettingsNameAttribute("LegacySettings")]
public class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.LegacySettingsProvider : object {
    [CompilerGeneratedAttribute]
private LegacySettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WarningMessage>k__BackingField;
    public static string SettingsName;
    public static string WebTestRunConfigurationName;
    public static string UnitTestRunConfigName;
    public static string DeploySatelliteAssembliesAttribute;
    public static string UserDeploymentRootAttribute;
    public static string IgnoredDependentAssembliesAttribute;
    public static string UseDefaultDeploymentRootAttribute;
    public static string UploadDeploymentItemsAttribute;
    public static string RunDeploymentRootAttribute;
    internal LegacySettings Settings { get; private set; }
    public string WarningMessage { get; private set; }
    [CompilerGeneratedAttribute]
internal LegacySettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(LegacySettings value);
    [CompilerGeneratedAttribute]
public string get_WarningMessage();
    [CompilerGeneratedAttribute]
private void set_WarningMessage(string value);
    public sealed virtual void Load(XmlReader reader);
    private bool ContainsUnsupportedDeploymentAttributes(XmlElement node);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.NavigationDataSink : object {
    private ITestCaseDiscoverySink m_discoverySink;
    public NavigationDataSink(ITestCaseDiscoverySink discoverySink);
    public sealed virtual void SendTestCase(TestCase discoveredTest);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string DataDrivenInnerTestDisplayName { get; }
    public static string DisablingCodeCoverageDuringDebug { get; }
    public static string FailedToConvertTestResult { get; }
    public static string FailedToLoadVsmdiFile { get; }
    public static string IgnoreOtherTestTypeSpecificData { get; }
    public static string IgnoreWebTestConfigInLegacySettings { get; }
    public static string IgnoringCodedWebTest { get; }
    public static string IgnoringDeploymentAttributes { get; }
    public static string IgnoringEmbeddedTestSettings { get; }
    public static string NonDataDrivenInnerTestDisplayName { get; }
    public static string TmiDeprecated { get; }
    public static string TmiTestElementXml { get; }
    public static string TmiTestId { get; }
    public static string TmiTestResultXml { get; }
    public static string UseLegacySettings { get; }
    public static string WarningDisabledDataCollectors { get; }
    public static string WarningDisabledDataCollectorsDuringParallel { get; }
    public static string WarningDisabledTestImpactDataCollector { get; }
    public static string XmlValidationMessageFormat { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_DataDrivenInnerTestDisplayName();
    public static string get_DisablingCodeCoverageDuringDebug();
    public static string get_FailedToConvertTestResult();
    public static string get_FailedToLoadVsmdiFile();
    public static string get_IgnoreOtherTestTypeSpecificData();
    public static string get_IgnoreWebTestConfigInLegacySettings();
    public static string get_IgnoringCodedWebTest();
    public static string get_IgnoringDeploymentAttributes();
    public static string get_IgnoringEmbeddedTestSettings();
    public static string get_NonDataDrivenInnerTestDisplayName();
    public static string get_TmiDeprecated();
    public static string get_TmiTestElementXml();
    public static string get_TmiTestId();
    public static string get_TmiTestResultXml();
    public static string get_UseLegacySettings();
    public static string get_WarningDisabledDataCollectors();
    public static string get_WarningDisabledDataCollectorsDuringParallel();
    public static string get_WarningDisabledTestImpactDataCollector();
    public static string get_XmlValidationMessageFormat();
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.ResultContainer : object {
    [CompilerGeneratedAttribute]
private TestResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private TestResult <ParentResult>k__BackingField;
    internal TestResult Result { get; private set; }
    internal TestResult ParentResult { get; private set; }
    internal ResultContainer(TestResult result, TestResult parentResult);
    [CompilerGeneratedAttribute]
internal TestResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(TestResult value);
    [CompilerGeneratedAttribute]
internal TestResult get_ParentResult();
    [CompilerGeneratedAttribute]
private void set_ParentResult(TestResult value);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.ResultFilesFinder : object {
    [CompilerGeneratedAttribute]
private bool <HasAnyAttachments>k__BackingField;
    internal bool HasAnyAttachments { get; private set; }
    internal IList`1<string> GetTestResultFiles(TestResult qtoolsResult);
    [CompilerGeneratedAttribute]
internal bool get_HasAnyAttachments();
    [CompilerGeneratedAttribute]
private void set_HasAnyAttachments(bool value);
    internal void RecordRunLevelAttachments(IList`1<AttachmentSet> attachmentSets);
    private IList`1<string> GetResultFiles(TestResult qtoolsResult);
    private List`1<string> GetAllFiles(string directory);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.SettingsTransformer : object {
    private IRunContext m_runContext;
    protected MSTestAdapterSettings m_adapterSettings;
    private IMessageLogger m_messageLogger;
    private Uri m_executorUri;
    private static string VSLOGGER_CPLAN;
    public SettingsTransformer(IRunContext runContext, IMessageLogger messageLogger, MSTestAdapterSettings adapterSettings, Uri executorUri);
    public void ModifyRunConfiguration(TestRunConfiguration testRunConfiguration);
    private void PopulateRunParametersInTestSettings(TestRunConfiguration testRunConfiguration);
    private void AddLegacySettingsIfRequired(TestRunConfiguration testRunConfiguration);
    private static string GetFullPath(string root, string fileName);
    private void AddWebTestConfigurationIfRequired(TestRunConfiguration testRunConfiguration);
    private bool IsCodeCoverageCollectionEnabled();
    private bool IsParallelEnabled();
    private bool IsDataCollectorEnabled();
    public string GetRunSettingsDirectory(string settingsXml);
    private bool IsWebTestExecution();
    private void DisableDataCollectorsIfRequired(TestRunConfiguration runConfiguration);
    private void SetKeepHostProcessAliveIfRequired(TestRunConfiguration runConfiguration);
    private void DisableTestImpactIfRequired(TestRunConfiguration runConfiguration);
    private void DisableCodeCoverageIfRequired(TestRunConfiguration runConfiguration);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.TmiBridge : object {
    private AssemblyResolver m_assemblyResolver;
    private bool showRootResultWithInnerResults;
    public void RunAllTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, bool showRootResultWithInnerResults, bool checkLicense);
    public void RunAllTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, bool checkLicense);
    internal void RunTests(TmiTestExecutionRequest testExecutionRequest, bool checkLicense);
    public void RunTests(IEnumerable`1<TestCase> tests, IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, bool showRootResultWithInnerResults, bool checkLicense);
    public void RunTests(IEnumerable`1<TestCase> tests, IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, bool checkLicense);
    internal void DiscoverTests(TmiDiscoveryRequest testDiscoveryRequest);
    public void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink, Uri executorUri);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public static class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.TmiConverter : object {
    internal static TestResult ToTestResult(TestResult qtoolsResult, TestCase testCase, IEnumerable`1<string> resultFiles, string testResultDisplayName, bool sendXmlForQToolsObjects, bool mapInconclusiveToFailed);
    private static void StoreXmlForQToolsTestResultAndTestElement(TestResult testResult, TestResult result);
    internal static AttachmentSet GetResultFilesAttachmentSet(Uri resultSourceUri, IEnumerable`1<string> resultFiles);
    internal static IList`1<AttachmentSet> GetAttachmentSetsFromCollectorDataEntries(IList`1<CollectorDataEntry> collectorDataEntries, List`1& collectionFiles);
    internal static IEnumerable`1<TestRunMessageEventArgs> ToDataCollectionMessages(IList`1<DataCollectorMessageInfo> qtoolsMessages);
    private static TestMessageLevel ToMessageLevel(DataCollectorMessageLevel qtoolsMessageLevel);
    internal static IEnumerable`1<TestRunMessageEventArgs> GetMessagesFromRunInfo(TestRun run);
    private static TestMessageLevel ToMessageLevel(TestOutcome qtoolsRunInfoOutCome);
    internal static TestOutcome ToTestOutcome(TestOutcome qtoolsOutcome, bool mapInconclusiveToFailed);
    internal static TestCase ToTestCase(ITestElement iTestElement, string source, Uri executorUri, TestListCategory[] testLists);
    private static IEnumerable`1<Trait> GetTestPropertiesAsTraits(Hashtable hashtable);
    public static Dictionary`2<string, string> FromQToolsEnvironmentVariableString(string environmentVariables);
    internal static string GetTestResultDisplayName(TestResult qtoolsResult, TestResult parentResult, TestResult overallParentResult, string orderId);
    internal static List`1<string> GetStaticCodeCoverageResultFiles(TestRun qtoolsRun);
    private static void SearchAndAddFiles(string searchFolder, List`1<string> staticCodeCoverageResultFiles, string fileNameWithoutExtension, string fileExtension);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.TmiDiscoveryRequest : TmiRequest {
    private Uri m_executorUri;
    private ITestCaseDiscoverySink m_discoverySink;
    private IEnumerable`1<string> m_sources;
    public TmiDiscoveryRequest(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink, Uri executorUri);
    public void Execute();
    private void DiscoverTests(IEnumerable`1<string> sources, Tmi tmi);
    private void DiscoverTests(string source, Tmi tmi);
    private void SendTest(ITestElement testElement, TestCase testCase, DiaSession diaSession);
    protected virtual void AddNavigationData(ITestElement testElement, TestCase testCase, DiaSession diaSession);
    private static string GetTestClassName(ITestElement testElement);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.TmiHelperDebugCallBack : object {
    private IFrameworkHandle m_frameworkHandle;
    internal TmiHelperDebugCallBack(IFrameworkHandle frameworkHandle);
    public sealed virtual int DebugTarget(DebugInfo info, bool prepareEnvironment);
    private static void AddEnvironmentVariableFromCurrentProcess(Dictionary`2<string, string> environmentVariables, string envVarName);
}
internal abstract class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.TmiRequest : object {
    protected static Dictionary`2<string, TestProperty> s_supportedPropertiesCache;
    protected MSTestAdapterSettings m_adapterSettings;
    private IDiscoveryContext m_context;
    protected IMessageLogger m_messageLogger;
    private static TmiRequest();
    public TmiRequest(IDiscoveryContext context, IMessageLogger messageLogger);
    private void HandleXmlValidationErrors(string source, string error);
    protected TestRunConfiguration CreateTestRunConfiguration();
    protected static void AddRequiredPaths(AssemblyResolutionSettings assemblyResolutionSettings);
    protected void tmi_WarningHandler(object sender, WarningEventArgs e);
    protected virtual bool FilterOutTest(ITestElement testElement);
    protected void LoadTestListsFile(Tmi tmi);
    protected TestListCategory[] GetTestLists(ITestElement testElement, Tmi tmi);
    protected ITestCaseFilterExpression GetFilterExpression(Boolean& filterHasError);
    private bool IsLegacySettingsEnabled();
    private ITestCaseFilterExpression GetTestCaseFilterFromRunContext();
    private ITestCaseFilterExpression GetTestCaseFilterFromDiscoveryContext();
    private static string GetActiveTestSettingFile(string vsmdiFile);
    public static bool IsCustomTestType(ITestElement testElement);
    protected static object PropertyValueProvider(TestCase currentTest, string propertyName);
    private static TestProperty PropertyProvider(string propertyName);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.TmiTestExecutionRequest : TmiRequest {
    [CompilerGeneratedAttribute]
private bool <HasAnyTestFailed>k__BackingField;
    private static bool LoggedDeprecationMessage;
    protected ResultFilesFinder m_resultFileFinder;
    private Uri m_executorUri;
    protected ManualResetEvent m_runCompletedEvent;
    protected ManualResetEvent m_runCanceledEvent;
    protected static Tmi s_tmi;
    private IFrameworkHandle m_frameworkHandle;
    private IRunContext m_runContext;
    private IEnumerable`1<string> m_sources;
    private Dictionary`2<Guid, Dictionary`2<int, TestCase>> m_tests;
    private List`1<Guid> m_duplicateTestIds;
    private HashSet`1<object> m_qtoolsTests;
    private HashSet`1<object> m_qtoolsResults;
    private object m_syncObjectForTestEvents;
    protected TestRunCancellationToken m_cancellationToken;
    private object m_syncLock;
    protected TestRun m_activeTestRun;
    private bool showRootResultWithInnerResults;
    internal bool IsRunAllMode { get; }
    private bool HasAnyTestFailed { get; private set; }
    private bool ShouldHintShutdownAfterTestRun { get; }
    private bool WillExecutorShutdownOccur { get; }
    private bool ShouldCleanupCommunicationChannels { get; }
    public TmiTestExecutionRequest(IEnumerable`1<TestCase> tests, IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, bool showRootResultWithInnerResults);
    public TmiTestExecutionRequest(IEnumerable`1<TestCase> tests, IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken);
    public TmiTestExecutionRequest(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, bool showRootResultWithInnerResults);
    public TmiTestExecutionRequest(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken);
    public virtual void Execute(bool checkLicense);
    protected virtual void ExecuteTestsInternal(TestRunConfiguration runConfiguration, TestId[] testIds, bool checkLicense);
    protected void CleanupTMITestRun(ControllerProxy localControllerProxy);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void DisposeTmiInstance();
    private static void CleanupChannels();
    private void CancelExecution();
    protected virtual bool StartTmiRun(TestRunConfiguration runConfiguration, TestId[] testIds, ControllerProxy& localControllerProxy, bool checkLicense);
    protected virtual void RegisterTMIAsyncEvents();
    protected virtual void tmi_TestRunFinishedEvent(object sender, TestRunEventArgs e);
    private void UpdateTestEntriesProperties(Dictionary`2<Guid, IList`1<TestEntry>> entriesDict, Dictionary`2<Guid, Dictionary`2<int, TestCase>> tests);
    private void UpdateTestEntryProperties(TestCase testCase, TestEntry testEntry);
    private Dictionary`2<Guid, IList`1<TestEntry>> GetTestEntriesDictionary(TestEntry[] testEntries);
    private ITestElement[] LoadTmiTests();
    private void SendRunLevelMessageAndAttachments(Guid runId);
    private void tmi_TestResultFinishedEvent(object sender, TestResultEventArgs e);
    private void tmi_TestStartedEvent(object sender, TestResultEventArgs e);
    private void OnTestStart(TestResult qtoolsResult);
    private void OnNewTestResult(TestResult qtoolsResult, bool scanForResultFiles);
    private ResultContainer[] GetAllResults(TestResult qtoolsResult, TestResult parentResult, Boolean& hasInnerTests);
    private void SendResults(TestResult qtoolsResult, bool scanForResultFiles);
    private static string GetOrderFormat(int totalIntegers);
    private void SendResult(TestResult qtoolsResult, bool scanForResultFiles, string testResultDisplayName, bool sendXmlForQToolsObjects, Guid rootTestCaseId);
    protected virtual IList`1<string> GetAttachments(TestResult qtoolsResult, bool scanForResultFiles);
    private TestId[] GetTestIds(ITestElement[] testElements);
    private TestId[] FilterOutUnwantedTests(TestId[] testIds, Tmi tmi);
    protected virtual void ConfigureResultFilePath();
    private void SendSkippedResult(ITestElement testElement, ITestExecutionRecorder recorder);
    private TestCase GetTestCase(ITestElement testElement);
    private string GetMatchingTestSource(string tmiTestElementStorage);
    private void PopulateTestList(IEnumerable`1<TestCase> tests);
    private void UpdateTestCasePropeties(TestCase testCase, IDictionary`2<TestProperty, object> properties);
    private void CleanupRunDirectory();
    internal static List`1<TestResult> GetAllTestResults(Guid runId, Tmi tmi);
    private static void SetPathToWebRootEnv(RunConfiguration runConfig);
    internal bool get_IsRunAllMode();
    [CompilerGeneratedAttribute]
private bool get_HasAnyTestFailed();
    [CompilerGeneratedAttribute]
private void set_HasAnyTestFailed(bool value);
    private bool get_ShouldHintShutdownAfterTestRun();
    private bool get_WillExecutorShutdownOccur();
    private bool get_ShouldCleanupCommunicationChannels();
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
[SettingsNameAttribute("WebTestRunConfiguration")]
internal class Microsoft.VisualStudio.TestPlatform.Extensions.TmiHelper.WebTestSettingsProvider : object {
    [CompilerGeneratedAttribute]
private XmlElement <Settings>k__BackingField;
    public static string SettingsName;
    public XmlElement Settings { get; private set; }
    [CompilerGeneratedAttribute]
public XmlElement get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(XmlElement value);
    public sealed virtual void Load(XmlReader reader);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
