[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Internal.VSRegKeyNames : object {
    internal static string RGS_VAR_PROGID;
    internal static string RGS_VAR_PROGID_APPIDNAME;
    internal static string RGS_VAR_PROGID_VERSION;
    internal static string RGS_VAR_DDE_NAME;
    internal static string REGKEY_VISUALSTUDIOROOT_NOVERSION;
    internal static string REGKEY_VISUALSTUDIOROOT;
}
public static class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Constants : object {
    private static string IsEnabledLabel;
    private static string TestClassNameLabel;
    private static string IsDataDrivenLabel;
    private static string DeploymentItemsLabel;
    private static string NeedsLegacyRunnerLabel;
    private static string IsAsyncLabel;
    private static string TestCategoryLabel;
    private static string PriorityLabel;
    private static string ExecutionIdLabel;
    private static string ParentExecIdLabel;
    private static string InnerResultsCountLabel;
    public static string ExecutorUriString;
    internal static Uri ExecutorUri;
    public static TestProperty TestEnabledProperty;
    public static TestProperty TestClassNameProperty;
    public static TestProperty TestDataDrivenProperty;
    public static TestProperty DeploymentItemsProperty;
    public static TestProperty NeedsLegacyRunnerProperty;
    public static TestProperty AsyncTestProperty;
    public static TestProperty TestCategoryProperty;
    public static TestProperty PriorityProperty;
    public static TestProperty ExecutionIdProperty;
    public static TestProperty ParentExecIdProperty;
    public static TestProperty InnerResultsCountProperty;
    public static string VisualStudioRootRegKey32;
    public static string VisualStudioRootRegKey64;
    public static string TestImpactDataCollectorUri;
    private static Constants();
}
public static class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Converter : object {
    internal static TestCase ToTestCase(UnitTestElement testElement);
    internal static UnitTestElement ToTestElement(TestCase testCase);
    private static TestMethod ToTestMethod(TestCase testCase);
    internal static TestResult ToTestResult(UnitTestResult unitTestResult, TestCase testCase, DateTimeOffset startTime, DateTimeOffset endTime, bool mapInconclusiveToFailed);
    internal static TestOutcome ToTestOutcome(UnitTestOutcome unitTestOutcome, bool mapInconclusiveToFailed);
    public static bool IsIgnored(TestCase testCase);
    internal static bool IsAsync(TestCase testCase);
    internal static bool IsDataDriven(TestCase testCase);
    internal static KeyValuePair`2[] GetDeploymentItems(TestCase testCase);
    internal static bool HasDeploymentItems(TestCase testCase);
    public static bool NeedsLegacyRunner(TestCase testCase);
    private static bool GetBooleanProperty(TestCase testCase, TestProperty propertyToGet, bool defaultValue);
    private static String[] GetTestCategory(TestCase testCase);
    private static Nullable`1<int> GetPriority(TestCase testCase);
    internal static string GetTestClassName(TestCase testCase);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.DeploymentDataPacket : object {
    [CompilerGeneratedAttribute]
private bool <HasDeploymentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private TestRunDirectories <RunDirectories>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <SourcesThatContainTests>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TestCase> <TestsFoundInOneSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceWhoseTestsAreFound>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IList`1<DeploymentItem>> <SourceVsDeploymentItems>k__BackingField;
    public bool HasDeploymentItems { get; public set; }
    public TestRunDirectories RunDirectories { get; public set; }
    public IList`1<string> SourcesThatContainTests { get; public set; }
    public ICollection`1<TestCase> TestsFoundInOneSource { get; public set; }
    public string SourceWhoseTestsAreFound { get; public set; }
    public Dictionary`2<string, IList`1<DeploymentItem>> SourceVsDeploymentItems { get; private set; }
    public bool AreTestsCached { get; }
    [CompilerGeneratedAttribute]
public bool get_HasDeploymentItems();
    [CompilerGeneratedAttribute]
public void set_HasDeploymentItems(bool value);
    [CompilerGeneratedAttribute]
public TestRunDirectories get_RunDirectories();
    [CompilerGeneratedAttribute]
public void set_RunDirectories(TestRunDirectories value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SourcesThatContainTests();
    [CompilerGeneratedAttribute]
public void set_SourcesThatContainTests(IList`1<string> value);
    [CompilerGeneratedAttribute]
public ICollection`1<TestCase> get_TestsFoundInOneSource();
    [CompilerGeneratedAttribute]
public void set_TestsFoundInOneSource(ICollection`1<TestCase> value);
    [CompilerGeneratedAttribute]
public string get_SourceWhoseTestsAreFound();
    [CompilerGeneratedAttribute]
public void set_SourceWhoseTestsAreFound(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IList`1<DeploymentItem>> get_SourceVsDeploymentItems();
    [CompilerGeneratedAttribute]
private void set_SourceVsDeploymentItems(Dictionary`2<string, IList`1<DeploymentItem>> value);
    public bool get_AreTestsCached();
    public void AddDeploymentItems(IList`1<DeploymentItem> deploymentItems, string source);
}
[GuidAttribute("6380BCFF-41D3-4B2E-8B2E-BF8A6810C848")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Framework.IEnumSetupInstances {
    public abstract virtual void Next(int celt, ISetupInstance& rgelt, Int32& pceltFetched);
    public abstract virtual void Skip(int celt);
    public abstract virtual void Reset();
    public abstract virtual IEnumSetupInstances Clone();
}
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Framework.ISetupConfiguration {
    public abstract virtual IEnumSetupInstances EnumInstances();
    public abstract virtual ISetupInstance GetInstanceForCurrentProcess();
    public abstract virtual ISetupInstance GetInstanceForPath(string wzPath);
}
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Framework.ISetupInstance {
    public abstract virtual string GetInstanceId();
    public abstract virtual FILETIME GetInstallDate();
    public abstract virtual string GetInstallationName();
    public abstract virtual string GetInstallationPath();
    public abstract virtual string GetInstallationVersion();
    public abstract virtual string GetDisplayName(int lcid);
    public abstract virtual string GetDescription(int lcid);
    public abstract virtual string ResolvePath(string relativePath);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Framework.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string Common_CannotBeLessThanZero { get; }
    public static string Common_CannotBeNullOrEmpty { get; }
    public static string Common_CannotFindFile { get; }
    public static string Common_CannotGetNextIterationName { get; }
    public static string Common_DeploymentItem { get; }
    public static string Common_DeploymentItemContainsInvalidCharacters { get; }
    public static string Common_DeploymentItemOutputDirectoryCannotBeNull { get; }
    public static string Common_DeploymentItemOutputDirectoryMustBeRelative { get; }
    public static string Common_DeploymentItemPathCannotBeNullOrEmpty { get; }
    public static string Common_DeploymentItemWithOutputDirectory { get; }
    public static string Common_MustBeGreaterThanZero { get; }
    public static string Common_TestRunName { get; }
    public static string CouldNotInspectTypeDuringDiscovery { get; }
    public static string DIAHelper_DiaInitializationFailed { get; }
    public static string EnumeratorFailedLoadTest { get; }
    public static string EnumeratorLoadTypeErrorFormat { get; }
    public static string Execution_Test_Timeout { get; }
    public static string TestAssembly_FileDoesNotExist { get; }
    public static string TestNotFound { get; }
    public static string TMI_DeploymentErrorBadDeploymentItemOutputDirectoryOutsideDeploymentRoot { get; }
    public static string TMI_DeploymentErrorFailedToAccessDeploymentItemOutputDirectory { get; }
    public static string TMI_DeploymentErrorFailedToAccessFile { get; }
    public static string TMI_DeploymentErrorFailedToCopyWithOverwrite { get; }
    public static string TMI_DeploymentErrorFailedToDeployDependencies { get; }
    public static string TMI_DeploymentErrorFailedToGetFileForDeploymentItem { get; }
    public static string TMI_DeploymentErrorGettingSatellite { get; }
    public static string TMI_MissingDeploymentDependency { get; }
    public static string TMI_MissingDeploymentDependencyWithoutReason { get; }
    public static string TypeLoadFailed { get; }
    public static string UTA_AssemblyCleanupMethodWasUnsuccesful { get; }
    public static string UTA_AssemblyInitMethodThrows { get; }
    public static string UTA_AttributeNotSupportedInAppContainerMode { get; }
    public static string UTA_ClassCleanupMethodWasUnsuccesful { get; }
    public static string UTA_ClassInitMethodThrows { get; }
    public static string UTA_ClassOrAssemblyCleanupMethodHasWrongSignature { get; }
    public static string UTA_ClassOrAssemblyInitializeMethodHasWrongSignature { get; }
    public static string UTA_CleanupMethodThrows { get; }
    public static string UTA_CleanupMethodThrowsGeneralError { get; }
    public static string UTA_CleanupStackTrace { get; }
    public static string UTA_DataRowOutcomeNotPassed { get; }
    public static string UTA_DataRowOutcomePassed { get; }
    public static string UTA_DataSourceAttributeConstructionException { get; }
    public static string UTA_DataSourceConfigurationSectionMissing { get; }
    public static string UTA_EmptyTestDatasource { get; }
    public static string UTA_EndingDataRow { get; }
    public static string UTA_EndOfInnerExceptionTrace { get; }
    public static string UTA_ErrorCleanupOutOfTestClass { get; }
    public static string UTA_ErrorDataConnectionFailed { get; }
    public static string UTA_ErrorDataSourceMethodOutOfTestClass { get; }
    public static string UTA_ErrorDataSourceNonTestMethod { get; }
    public static string UTA_ErrorDeploymentItemMethodOutOfTestClass { get; }
    public static string UTA_ErrorDeploymentItemNonTestMethod { get; }
    public static string UTA_ErrorDeploymentItemOnMethodGeneral { get; }
    public static string UTA_ErrorExceptionNonTestMethod { get; }
    public static string UTA_ErrorGenericTestClass { get; }
    public static string UTA_ErrorGenericTestMethod { get; }
    public static string UTA_ErrorIncorrectTestMethodSignature { get; }
    public static string UTA_ErrorInitOutOfTestClass { get; }
    public static string UTA_ErrorInValidTestContextSignature { get; }
    public static string UTA_ErrorInvalidTestProperty { get; }
    public static string UTA_ErrorInvalidTimeout { get; }
    public static string UTA_ErrorMethodOutOfTestClass { get; }
    public static string UTA_ErrorMultiAssemblyClean { get; }
    public static string UTA_ErrorMultiAssemblyInit { get; }
    public static string UTA_ErrorMultiClassClean { get; }
    public static string UTA_ErrorMultiClassInit { get; }
    public static string UTA_ErrorMultiClean { get; }
    public static string UTA_ErrorMultiInit { get; }
    public static string UTA_ErrorNonPublicTestClass { get; }
    public static string UTA_ErrorPredefinedTestProperty { get; }
    public static string UTA_ErrorStackTrace { get; }
    public static string UTA_ErrorTestPropertyAlreadyDefined { get; }
    public static string UTA_ErrorTestPropertyNullOrEmpty { get; }
    public static string UTA_ErrorTimeoutMethodOutOfTestClass { get; }
    public static string UTA_ErrorTimeoutNonTestMethod { get; }
    public static string UTA_ExpectedExceptionAttributeConstructionException { get; }
    public static string UTA_FailedToGetTestMethodException { get; }
    public static string UTA_InitMethodThrows { get; }
    public static string UTA_InstanceCreationError { get; }
    public static string UTA_MethodDoesNotExists { get; }
    public static string UTA_MultipleDataSourceOnTestMethod { get; }
    public static string UTA_MultipleExpectedExceptionsOnTestMethod { get; }
    public static string UTA_NoDefaultConstructor { get; }
    public static string UTA_StartingDataRow { get; }
    public static string UTA_TestContextLoadError { get; }
    public static string UTA_TestContextSetError { get; }
    public static string UTA_TestContextTypeMismatchLoadError { get; }
    public static string UTA_TestInitializeAndCleanupMethodHasWrongSignature { get; }
    public static string UTA_TestMethodThrows { get; }
    public static string UTA_TypeLoadError { get; }
    public static string UTF_FailedToGetExceptionMessage { get; }
    public static string UTF_TestMethodNoExceptionDefault { get; }
    public static string UTF_TestMethodWrongException { get; }
    public static string UTF_TestMethodWrongExceptionDerivedAllowed { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Common_CannotBeLessThanZero();
    public static string get_Common_CannotBeNullOrEmpty();
    public static string get_Common_CannotFindFile();
    public static string get_Common_CannotGetNextIterationName();
    public static string get_Common_DeploymentItem();
    public static string get_Common_DeploymentItemContainsInvalidCharacters();
    public static string get_Common_DeploymentItemOutputDirectoryCannotBeNull();
    public static string get_Common_DeploymentItemOutputDirectoryMustBeRelative();
    public static string get_Common_DeploymentItemPathCannotBeNullOrEmpty();
    public static string get_Common_DeploymentItemWithOutputDirectory();
    public static string get_Common_MustBeGreaterThanZero();
    public static string get_Common_TestRunName();
    public static string get_CouldNotInspectTypeDuringDiscovery();
    public static string get_DIAHelper_DiaInitializationFailed();
    public static string get_EnumeratorFailedLoadTest();
    public static string get_EnumeratorLoadTypeErrorFormat();
    public static string get_Execution_Test_Timeout();
    public static string get_TestAssembly_FileDoesNotExist();
    public static string get_TestNotFound();
    public static string get_TMI_DeploymentErrorBadDeploymentItemOutputDirectoryOutsideDeploymentRoot();
    public static string get_TMI_DeploymentErrorFailedToAccessDeploymentItemOutputDirectory();
    public static string get_TMI_DeploymentErrorFailedToAccessFile();
    public static string get_TMI_DeploymentErrorFailedToCopyWithOverwrite();
    public static string get_TMI_DeploymentErrorFailedToDeployDependencies();
    public static string get_TMI_DeploymentErrorFailedToGetFileForDeploymentItem();
    public static string get_TMI_DeploymentErrorGettingSatellite();
    public static string get_TMI_MissingDeploymentDependency();
    public static string get_TMI_MissingDeploymentDependencyWithoutReason();
    public static string get_TypeLoadFailed();
    public static string get_UTA_AssemblyCleanupMethodWasUnsuccesful();
    public static string get_UTA_AssemblyInitMethodThrows();
    public static string get_UTA_AttributeNotSupportedInAppContainerMode();
    public static string get_UTA_ClassCleanupMethodWasUnsuccesful();
    public static string get_UTA_ClassInitMethodThrows();
    public static string get_UTA_ClassOrAssemblyCleanupMethodHasWrongSignature();
    public static string get_UTA_ClassOrAssemblyInitializeMethodHasWrongSignature();
    public static string get_UTA_CleanupMethodThrows();
    public static string get_UTA_CleanupMethodThrowsGeneralError();
    public static string get_UTA_CleanupStackTrace();
    public static string get_UTA_DataRowOutcomeNotPassed();
    public static string get_UTA_DataRowOutcomePassed();
    public static string get_UTA_DataSourceAttributeConstructionException();
    public static string get_UTA_DataSourceConfigurationSectionMissing();
    public static string get_UTA_EmptyTestDatasource();
    public static string get_UTA_EndingDataRow();
    public static string get_UTA_EndOfInnerExceptionTrace();
    public static string get_UTA_ErrorCleanupOutOfTestClass();
    public static string get_UTA_ErrorDataConnectionFailed();
    public static string get_UTA_ErrorDataSourceMethodOutOfTestClass();
    public static string get_UTA_ErrorDataSourceNonTestMethod();
    public static string get_UTA_ErrorDeploymentItemMethodOutOfTestClass();
    public static string get_UTA_ErrorDeploymentItemNonTestMethod();
    public static string get_UTA_ErrorDeploymentItemOnMethodGeneral();
    public static string get_UTA_ErrorExceptionNonTestMethod();
    public static string get_UTA_ErrorGenericTestClass();
    public static string get_UTA_ErrorGenericTestMethod();
    public static string get_UTA_ErrorIncorrectTestMethodSignature();
    public static string get_UTA_ErrorInitOutOfTestClass();
    public static string get_UTA_ErrorInValidTestContextSignature();
    public static string get_UTA_ErrorInvalidTestProperty();
    public static string get_UTA_ErrorInvalidTimeout();
    public static string get_UTA_ErrorMethodOutOfTestClass();
    public static string get_UTA_ErrorMultiAssemblyClean();
    public static string get_UTA_ErrorMultiAssemblyInit();
    public static string get_UTA_ErrorMultiClassClean();
    public static string get_UTA_ErrorMultiClassInit();
    public static string get_UTA_ErrorMultiClean();
    public static string get_UTA_ErrorMultiInit();
    public static string get_UTA_ErrorNonPublicTestClass();
    public static string get_UTA_ErrorPredefinedTestProperty();
    public static string get_UTA_ErrorStackTrace();
    public static string get_UTA_ErrorTestPropertyAlreadyDefined();
    public static string get_UTA_ErrorTestPropertyNullOrEmpty();
    public static string get_UTA_ErrorTimeoutMethodOutOfTestClass();
    public static string get_UTA_ErrorTimeoutNonTestMethod();
    public static string get_UTA_ExpectedExceptionAttributeConstructionException();
    public static string get_UTA_FailedToGetTestMethodException();
    public static string get_UTA_InitMethodThrows();
    public static string get_UTA_InstanceCreationError();
    public static string get_UTA_MethodDoesNotExists();
    public static string get_UTA_MultipleDataSourceOnTestMethod();
    public static string get_UTA_MultipleExpectedExceptionsOnTestMethod();
    public static string get_UTA_NoDefaultConstructor();
    public static string get_UTA_StartingDataRow();
    public static string get_UTA_TestContextLoadError();
    public static string get_UTA_TestContextSetError();
    public static string get_UTA_TestContextTypeMismatchLoadError();
    public static string get_UTA_TestInitializeAndCleanupMethodHasWrongSignature();
    public static string get_UTA_TestMethodThrows();
    public static string get_UTA_TypeLoadError();
    public static string get_UTF_FailedToGetExceptionMessage();
    public static string get_UTF_TestMethodNoExceptionDefault();
    public static string get_UTF_TestMethodWrongException();
    public static string get_UTF_TestMethodWrongExceptionDerivedAllowed();
}
internal static class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Framework.RegistryDetourHelper : object {
    [CompilerGeneratedAttribute]
private static string <VSInstallPath>k__BackingField;
    private static bool m_enableDetour;
    internal static string VSInstallPath { get; private set; }
    private static RegistryDetourHelper();
    [CompilerGeneratedAttribute]
internal static string get_VSInstallPath();
    [CompilerGeneratedAttribute]
private static void set_VSInstallPath(string value);
    public static void StartDetouring();
    public static void StopDetouring();
    private static void InvokeDetourAction(Action action);
    private static bool IsDetourEnabled();
}
[GuidAttribute("177F0C4A-1CD3-4DE7-A32C-71DBBB9FA36D")]
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Framework.SetupConfiguration : object {
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.FrameworkHandleWrapper : object {
    private IFrameworkHandle m_innerHandle;
    public bool EnableShutdownAfterTestRun { get; public set; }
    public FrameworkHandleWrapper(IFrameworkHandle innerHandle);
    public sealed virtual bool get_EnableShutdownAfterTestRun();
    public sealed virtual void set_EnableShutdownAfterTestRun(bool value);
    public sealed virtual int LaunchProcessWithDebuggerAttached(string filePath, string workingDirectory, string arguments, IDictionary`2<string, string> environmentVariables);
    public sealed virtual void RecordResult(TestResult testResult);
    public sealed virtual void RecordStart(TestCase testCase);
    public sealed virtual void RecordEnd(TestCase testCase, TestOutcome outcome);
    public sealed virtual void RecordAttachments(IList`1<AttachmentSet> attachmentSets);
    public sealed virtual void SendMessage(TestMessageLevel testMessageLevel, string message);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.LogMessageIgnorer : object {
    public sealed virtual void SendMessage(TestMessageLevel testMessageLevel, string message);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.MixedModeExecutor : object {
    private Dictionary`2<string, object> testRunParameters;
    [CompilerGeneratedAttribute]
private bool <HasResultFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAnyTestFailed>k__BackingField;
    private TestRunCancellationToken m_cancellationToken;
    private MSTestAdapterSettings m_adapterSettings;
    private TmiBridgeWrapper m_tmiBridge;
    private TcmTestPropertiesProvider tcmTestPropertiesProvider;
    private Dictionary`2<string, object> TestRunParameters { get; private set; }
    private bool HasResultFiles { get; private set; }
    private bool HasAnyTestFailed { get; private set; }
    public void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    public void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    private void CleanupDeploymentDirectories(TestRunDirectories runDirectories);
    private void ExecuteTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunDirectories runDirectories, bool isDeploymentDone, int globalTestTimeout);
    private void ExecuteTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunDirectories runDirectories, bool isDeploymentDone, string source, int globalTestimeout);
    private void ExecuteDurontoTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, string source, TestRunDirectories runDirectories, TmiTestRun tmiTestRun, int globalTestTimeout);
    private void ExecuteDurontoTestsInternal(IEnumerable`1<TestCase> tests, IRunContext runContext, ITestExecutionRecorder testExecutionRecorder, string source, TestRunDirectories runDirectories, TmiTestRun tmiTestRun, int globalTestTimeout);
    private void ExecuteTests(IEnumerable`1<TestCase> tests, IRunContext runContext, ITestExecutionRecorder testExecutionRecorder, UnitTestRunner testRunner, TmiTestRun tmiTestRun);
    private IList`1<string> CleanupMsTestV1Runner(UnitTestResult[] unitTestResult, UnitTestRunner testRunner);
    private UnitTestResult[] ExecuteTestViaMsTestV1Runner(TestCase testCase, ITestExecutionRecorder testExecutionRecorder, UnitTestRunner testRunner, DateTimeOffset& startTime, DateTimeOffset& endTime);
    private static void LogWarnings(ITestExecutionRecorder testExecutionRecorder, IEnumerable`1<string> warnings);
    private void SendTestResults(TestCase test, UnitTestResult[] unitTestResults, DateTimeOffset startTime, DateTimeOffset endTime, bool isDataCollectionEnabled, ITestExecutionRecorder testExecutionRecorder);
    private void SendTestResult(TestCase test, UnitTestResult unitTestResult, DateTimeOffset startTime, DateTimeOffset endTime, bool isDataCollectionEnabled, ITestExecutionRecorder testExecutionRecorder);
    private static bool SetWorkingDirectory(string directoryPath, ITestExecutionRecorder testExecutionRecorder);
    private static IList`1<DeploymentItem> GetDeploymentItems(IEnumerable`1<TestCase> tests);
    private DeploymentDataPacket DoDeploymentIfRequired(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, bool canDeploy);
    private static bool FindDeploymentItems(string source, IDiscoveryContext discoveryContext, IFrameworkHandle frameworkHandle, bool canDeploy, DeploymentDataPacket deploymentDataPacket);
    public virtual bool DoDeployment(IEnumerable`1<TestCase> tests, string source, IRunContext runContext, ITestExecutionRecorder testExecutionRecorder, TestRunDirectories& testRunDirectories);
    private static bool DoDeployment(string source, IRunContext runContext, ITestExecutionRecorder testExecutionRecorder, IList`1<DeploymentItem> deploymentItems, TestRunDirectories& testRunDirectories);
    private bool CanDeploy();
    private TestRunDirectories CreateDeploymentDirectoriesIfRequired(bool canDeploy, bool hasDeploymentItems, IRunContext runContext);
    public virtual TestRunDirectories CreateDeploymentDirectories(IRunContext runContext);
    private Dictionary`2<string, object> get_TestRunParameters();
    private void set_TestRunParameters(Dictionary`2<string, object> value);
    private void CacheTestRunParameters(IRunContext runContext, ITestExecutionRecorder testExecutionRecorder);
    [CompilerGeneratedAttribute]
private bool get_HasResultFiles();
    [CompilerGeneratedAttribute]
private void set_HasResultFiles(bool value);
    [CompilerGeneratedAttribute]
private bool get_HasAnyTestFailed();
    [CompilerGeneratedAttribute]
private void set_HasAnyTestFailed(bool value);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.MSTestAdapterSettings : object {
    private List`1<RecursiveDirectoryPath> SearchDirectories;
    [CompilerGeneratedAttribute]
private bool <DeploymentEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureTraceOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteDeploymentDirectoryAfterTestRunIsComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MapInconclusiveToFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForcedLegacyMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepExecutorAliveAfterLegacyRun>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CleanUpCommunicationChannels>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreTestImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InProcMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestTimeout>k__BackingField;
    public bool DeploymentEnabled { get; private set; }
    public bool CaptureTraceOutput { get; private set; }
    public bool DeleteDeploymentDirectoryAfterTestRunIsComplete { get; private set; }
    public bool MapInconclusiveToFailed { get; private set; }
    public bool ForcedLegacyMode { get; private set; }
    public string SettingsFile { get; private set; }
    public bool KeepExecutorAliveAfterLegacyRun { get; private set; }
    public bool CleanUpCommunicationChannels { get; private set; }
    public bool IgnoreTestImpact { get; private set; }
    public bool InProcMode { get; private set; }
    public int TestTimeout { get; private set; }
    public bool IsSettingsFileAMetadataFile { get; }
    [CompilerGeneratedAttribute]
public bool get_DeploymentEnabled();
    [CompilerGeneratedAttribute]
private void set_DeploymentEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_CaptureTraceOutput();
    [CompilerGeneratedAttribute]
private void set_CaptureTraceOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteDeploymentDirectoryAfterTestRunIsComplete();
    [CompilerGeneratedAttribute]
private void set_DeleteDeploymentDirectoryAfterTestRunIsComplete(bool value);
    [CompilerGeneratedAttribute]
public bool get_MapInconclusiveToFailed();
    [CompilerGeneratedAttribute]
private void set_MapInconclusiveToFailed(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForcedLegacyMode();
    [CompilerGeneratedAttribute]
private void set_ForcedLegacyMode(bool value);
    [CompilerGeneratedAttribute]
public string get_SettingsFile();
    [CompilerGeneratedAttribute]
private void set_SettingsFile(string value);
    [CompilerGeneratedAttribute]
public bool get_KeepExecutorAliveAfterLegacyRun();
    [CompilerGeneratedAttribute]
private void set_KeepExecutorAliveAfterLegacyRun(bool value);
    [CompilerGeneratedAttribute]
public bool get_CleanUpCommunicationChannels();
    [CompilerGeneratedAttribute]
private void set_CleanUpCommunicationChannels(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTestImpact();
    [CompilerGeneratedAttribute]
private void set_IgnoreTestImpact(bool value);
    [CompilerGeneratedAttribute]
public bool get_InProcMode();
    [CompilerGeneratedAttribute]
private void set_InProcMode(bool value);
    [CompilerGeneratedAttribute]
public int get_TestTimeout();
    [CompilerGeneratedAttribute]
private void set_TestTimeout(int value);
    public bool get_IsSettingsFileAMetadataFile();
    public static MSTestAdapterSettings ToSettings(XmlReader reader);
    private void ReadAssemblyResolutionPath(XmlReader reader);
    public List`1<RecursiveDirectoryPath> GetDirectoryListWithRecursiveProperty(string baseDirectory);
    internal static string ResolveEnvironmentVariableAndReturnFullPathIfExist(string path, string baseDirectory);
    public static MSTestAdapterSettings GetSettings(IDiscoveryContext context);
}
[DefaultExecutorUriAttribute("executor://MSTestAdapter/v1")]
[FileExtensionAttribute(".dll")]
[FileExtensionAttribute(".exe")]
[CategoryAttribute("managed")]
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.MSTestDiscoverer : object {
    private TmiBridgeWrapper m_tmiBridge;
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink);
}
[ExtensionUriAttribute("executor://MSTestAdapter/v1")]
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.MSTestExecutor : object {
    private TmiModeExecutor m_tmiModeExecutor;
    private MixedModeExecutor m_mixedModeExecutor;
    private TestRunCancellationToken m_cancellationToken;
    public MixedModeExecutor MixedModeExecutor { get; protected set; }
    public TmiModeExecutor TmiModeExecutor { get; protected set; }
    public sealed virtual void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void Cancel();
    public MixedModeExecutor get_MixedModeExecutor();
    protected void set_MixedModeExecutor(MixedModeExecutor value);
    public TmiModeExecutor get_TmiModeExecutor();
    protected void set_TmiModeExecutor(TmiModeExecutor value);
}
[SettingsNameAttribute("MSTest")]
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.MSTestSettingsProvider : object {
    [CompilerGeneratedAttribute]
private MSTestAdapterSettings <Settings>k__BackingField;
    public static string SettingsName;
    public MSTestAdapterSettings Settings { get; private set; }
    [CompilerGeneratedAttribute]
public MSTestAdapterSettings get_Settings();
    [CompilerGeneratedAttribute]
private void set_Settings(MSTestAdapterSettings value);
    public sealed virtual void Load(XmlReader reader);
}
public static class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.NavigationData : object {
    public static void AddNavigationData(TestCase testCase, string declaringTypeName, string methodName, DiaSession diaSession);
    public static DiaSession CreateDiaSession(string source);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string AttachmentSetDisplayName { get; }
    public static string CannotDiscoverTestAsTmiHelperNotAvailableWithoutReason { get; }
    public static string CannotDiscoverTestAsTmiHelperNotAvailableWithReason { get; }
    public static string CannotExecuteTestsAsAnotherRunIsInProgress { get; }
    public static string CannotRunThisTestAsTmiHelperNotAvailableWithoutReason { get; }
    public static string CannotRunThisTestAsTmiHelperNotAvailableWithReason { get; }
    public static string DataDrivenResultDisplayName { get; }
    public static string DebugSessionInformationFailed { get; }
    public static string DebugTraceBanner { get; }
    public static string DeploymentItems { get; }
    public static string DeploymentNotSupportedInAppContainerMode { get; }
    public static string Dev10SP1PatchNotInstalled { get; }
    public static string FailedToLoadTestsFromSource { get; }
    public static string FailedToSetWorkingDirectory { get; }
    public static string InvalidSettingsXmlElement { get; }
    public static string IsAsync { get; }
    public static string IsDataDrivenCategory { get; }
    public static string IsTestEnabledCategory { get; }
    public static string NeedsLegacyRunner { get; }
    public static string NonExistingTestSettingsFile { get; }
    public static string Priority { get; }
    public static string TestCategory { get; }
    public static string TestClassNameCategory { get; }
    public static string TestClassNamespaceCategory { get; }
    public static string TestContainerSkippedInAppContainerMode { get; }
    public static string TestContextMessageBanner { get; }
    public static string TestIdInvalid { get; }
    public static string TestIdNull { get; }
    public static string TestMethodSkippedInAppContainerMode { get; }
    public static string UsingTmiAdapter { get; }
    public static string VsTestEnabledCategory { get; }
    public static string VsTestErrorMessageForNonRunnable { get; }
    public static string VsTestIdCategory { get; }
    public static string WrongNumberOfObjects { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_AttachmentSetDisplayName();
    public static string get_CannotDiscoverTestAsTmiHelperNotAvailableWithoutReason();
    public static string get_CannotDiscoverTestAsTmiHelperNotAvailableWithReason();
    public static string get_CannotExecuteTestsAsAnotherRunIsInProgress();
    public static string get_CannotRunThisTestAsTmiHelperNotAvailableWithoutReason();
    public static string get_CannotRunThisTestAsTmiHelperNotAvailableWithReason();
    public static string get_DataDrivenResultDisplayName();
    public static string get_DebugSessionInformationFailed();
    public static string get_DebugTraceBanner();
    public static string get_DeploymentItems();
    public static string get_DeploymentNotSupportedInAppContainerMode();
    public static string get_Dev10SP1PatchNotInstalled();
    public static string get_FailedToLoadTestsFromSource();
    public static string get_FailedToSetWorkingDirectory();
    public static string get_InvalidSettingsXmlElement();
    public static string get_IsAsync();
    public static string get_IsDataDrivenCategory();
    public static string get_IsTestEnabledCategory();
    public static string get_NeedsLegacyRunner();
    public static string get_NonExistingTestSettingsFile();
    public static string get_Priority();
    public static string get_TestCategory();
    public static string get_TestClassNameCategory();
    public static string get_TestClassNamespaceCategory();
    public static string get_TestContainerSkippedInAppContainerMode();
    public static string get_TestContextMessageBanner();
    public static string get_TestIdInvalid();
    public static string get_TestIdNull();
    public static string get_TestMethodSkippedInAppContainerMode();
    public static string get_UsingTmiAdapter();
    public static string get_VsTestEnabledCategory();
    public static string get_VsTestErrorMessageForNonRunnable();
    public static string get_VsTestIdCategory();
    public static string get_WrongNumberOfObjects();
}
[DataContractAttribute]
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TcmTestProperties : object {
    [CompilerGeneratedAttribute]
private int <TestPlanId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestRunId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BuildConfigurationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildFlavor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TfsServerCollectionUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TeamProject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInLabEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private object <LabEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TestCaseInfo> <TestCases>k__BackingField;
    [DataMemberAttribute]
public int TestPlanId { get; public set; }
    [DataMemberAttribute]
public int TestRunId { get; public set; }
    [DataMemberAttribute]
public int BuildConfigurationId { get; public set; }
    [DataMemberAttribute]
public string BuildDirectory { get; public set; }
    [DataMemberAttribute]
public string BuildFlavor { get; public set; }
    [DataMemberAttribute]
public string BuildNumber { get; public set; }
    [DataMemberAttribute]
public string BuildPlatform { get; public set; }
    [DataMemberAttribute]
public string BuildUri { get; public set; }
    [DataMemberAttribute]
public string TfsServerCollectionUrl { get; public set; }
    [DataMemberAttribute]
public string TeamProject { get; public set; }
    [DataMemberAttribute]
public bool IsInLabEnvironment { get; public set; }
    [DataMemberAttribute]
public object LabEnvironment { get; public set; }
    [DataMemberAttribute]
public List`1<TestCaseInfo> TestCases { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TestPlanId();
    [CompilerGeneratedAttribute]
public void set_TestPlanId(int value);
    [CompilerGeneratedAttribute]
public int get_TestRunId();
    [CompilerGeneratedAttribute]
public void set_TestRunId(int value);
    [CompilerGeneratedAttribute]
public int get_BuildConfigurationId();
    [CompilerGeneratedAttribute]
public void set_BuildConfigurationId(int value);
    [CompilerGeneratedAttribute]
public string get_BuildDirectory();
    [CompilerGeneratedAttribute]
public void set_BuildDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_BuildFlavor();
    [CompilerGeneratedAttribute]
public void set_BuildFlavor(string value);
    [CompilerGeneratedAttribute]
public string get_BuildNumber();
    [CompilerGeneratedAttribute]
public void set_BuildNumber(string value);
    [CompilerGeneratedAttribute]
public string get_BuildPlatform();
    [CompilerGeneratedAttribute]
public void set_BuildPlatform(string value);
    [CompilerGeneratedAttribute]
public string get_BuildUri();
    [CompilerGeneratedAttribute]
public void set_BuildUri(string value);
    [CompilerGeneratedAttribute]
public string get_TfsServerCollectionUrl();
    [CompilerGeneratedAttribute]
public void set_TfsServerCollectionUrl(string value);
    [CompilerGeneratedAttribute]
public string get_TeamProject();
    [CompilerGeneratedAttribute]
public void set_TeamProject(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInLabEnvironment();
    [CompilerGeneratedAttribute]
public void set_IsInLabEnvironment(bool value);
    [CompilerGeneratedAttribute]
public object get_LabEnvironment();
    [CompilerGeneratedAttribute]
public void set_LabEnvironment(object value);
    [CompilerGeneratedAttribute]
public List`1<TestCaseInfo> get_TestCases();
    [CompilerGeneratedAttribute]
public void set_TestCases(List`1<TestCaseInfo> value);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TcmTestPropertiesFileHelper : object {
    public virtual string GetFileContent(string file);
    public virtual bool Exists(string file);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TcmTestPropertiesProvider : object {
    private Dictionary`2<TestProperty, object> tcmCommonProperties;
    private Dictionary`2<string, Queue`1<TestCaseInfo>> tcmTestCaseSpecificPropertiesMap;
    private TcmTestPropertiesFileHelper fileHelper;
    private bool isInitialized;
    internal TcmTestPropertiesProvider(TcmTestPropertiesFileHelper fileHelper);
    public IDictionary`2<TestProperty, object> GetTcmProperties(TestCase testCase, IDictionary`2<string, object> properties);
    private IDictionary`2<TestProperty, object> AddTcmPropertiesFromJson(TestCase testCase, IDictionary`2<string, object> properties);
    private IDictionary`2<TestProperty, object> AddTcmPropertiesFromTestCase(TestCase testCase, IDictionary`2<string, object> properties);
    private void Initialize(IDictionary`2<string, object> testRunParameters);
    private TcmTestProperties GetTcmProperties(string tcmPropertiesJsonFile);
    private void InitializeTcmCommonProperties(TcmTestProperties tcmProperties);
    private void InitializeTcmTestCaseSpecificProperties(TcmTestProperties tcmProperties);
    private string GetTestCaseKey(string fullyQualifiedName, string source);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TestCaseDiscoverySink : object {
    [CompilerGeneratedAttribute]
private ICollection`1<TestCase> <Tests>k__BackingField;
    public ICollection`1<TestCase> Tests { get; private set; }
    public sealed virtual void SendTestCase(TestCase discoveredTest);
    [CompilerGeneratedAttribute]
public ICollection`1<TestCase> get_Tests();
    [CompilerGeneratedAttribute]
private void set_Tests(ICollection`1<TestCase> value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TestCaseExtension : object {
    [ExtensionAttribute]
public static bool IsDurontoTest(TestCase testCase);
}
[DataContractAttribute]
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TestCaseInfo : object {
    [CompilerGeneratedAttribute]
private string <FullyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestCaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestPointId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestConfigurationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestConfigurationName>k__BackingField;
    [DataMemberAttribute]
public string FullyQualifiedName { get; public set; }
    [DataMemberAttribute]
public string Source { get; public set; }
    [DataMemberAttribute]
public int TestCaseId { get; public set; }
    [DataMemberAttribute]
public int TestPointId { get; public set; }
    [DataMemberAttribute]
public int TestConfigurationId { get; public set; }
    [DataMemberAttribute]
public string TestConfigurationName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FullyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_FullyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public int get_TestCaseId();
    [CompilerGeneratedAttribute]
public void set_TestCaseId(int value);
    [CompilerGeneratedAttribute]
public int get_TestPointId();
    [CompilerGeneratedAttribute]
public void set_TestPointId(int value);
    [CompilerGeneratedAttribute]
public int get_TestConfigurationId();
    [CompilerGeneratedAttribute]
public void set_TestConfigurationId(int value);
    [CompilerGeneratedAttribute]
public string get_TestConfigurationName();
    [CompilerGeneratedAttribute]
public void set_TestConfigurationName(string value);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TestContextTfsPropertyNames : object {
    public static string TestRunId;
    public static string TestPlanId;
    public static string TestCaseId;
    public static string TestPointId;
    public static string TestConfigurationId;
    public static string TestConfigurationName;
    public static string IsInLabEnvironment;
    public static string BuildConfigurationId;
    public static string BuildDirectory;
    public static string BuildFlavor;
    public static string BuildNumber;
    public static string BuildPlatform;
    public static string BuildUri;
    public static string TfsServerCollectionUrl;
    public static string TfsTeamProject;
    public static string TCMTestPropertiesJsonParamName;
    public static TestProperty TestRunIdProperty;
    public static TestProperty TestPlanIdProperty;
    public static TestProperty TestCaseIdProperty;
    public static TestProperty TestPointIdProperty;
    public static TestProperty TestConfigurationIdProperty;
    public static TestProperty TestConfigurationNameProperty;
    public static TestProperty IsInLabEnvironmentProperty;
    public static TestProperty BuildConfigurationIdProperty;
    public static TestProperty BuildDirectoryProperty;
    public static TestProperty BuildFlavorProperty;
    public static TestProperty BuildNumberProperty;
    public static TestProperty BuildPlatformProperty;
    public static TestProperty BuildUriProperty;
    public static TestProperty TfsServerCollectionUrlProperty;
    public static TestProperty TfsTeamProjectProperty;
    private static TestContextTfsPropertyNames();
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TestMethodFilter : object {
    private Dictionary`2<string, TestProperty> supportedProperties;
    public ITestCaseFilterExpression GetFilterExpression(IDiscoveryContext context, IMessageLogger logger, Boolean& filterHasError);
    public TestProperty PropertyProvider(string propertyName);
    public object PropertyValueProvider(TestCase currentTest, string propertyName);
    private ITestCaseFilterExpression GetTestCaseFilterFromRunContext(IRunContext context);
    private ITestCaseFilterExpression GetTestCaseFilterFromDiscoveryContext(IDiscoveryContext context);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TestRunCancellationToken : object {
    private bool m_cancelled;
    private Action m_RegisteredCallback;
    public bool Canceled { get; private set; }
    public bool get_Canceled();
    private void set_Canceled(bool value);
    public void Cancel();
    public void Register(Action callback);
    public void Unregister();
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TmiBridgeWrapper : object {
    private Nullable`1<bool> m_tmiBridgeCreationResult;
    private string m_tmiBridgeCreationFailureMessage;
    private object m_tmiBridge;
    private Type m_tmiBridgeType;
    public static string TmiBridgeAssemblyName;
    public static string TmiBridgeTypeName;
    public bool RunTests(IEnumerable`1<TestCase> tests, IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, String& errorMessage);
    public bool RunAllTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken, String& errorMessage);
    public bool DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext context, IMessageLogger logger, ITestCaseDiscoverySink discoverySink, Uri executorUri, String& errorMessage);
    private bool TryCreateTmiBridge(String& errorMessage);
    public bool TryCreateTmiBridge();
    private void RunTestsInternal(IEnumerable`1<TestCase> tests, IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken);
    private void RunAllTestsInternal(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, Uri executorUri, TestRunCancellationToken cancellationToken);
    private void DiscoverTestsInternal(IEnumerable`1<string> sources, IDiscoveryContext context, IMessageLogger logger, ITestCaseDiscoverySink discoverySink, Uri executorUri);
    private bool CreateTmiBridgeInternal();
    private static void InvokeMethod(MethodInfo methodInfo, object onObject, Object[] parameters);
}
public class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TmiModeExecutor : object {
    private TmiBridgeWrapper m_tmiBridge;
    public void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    public void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
}
internal class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.TmiTestRun : object {
    private List`1<TestCase> m_ignoredTests;
    private List`1<TestCase> m_executableTests;
    private IEnumerable`1<string> m_sources;
    private TmiBridgeWrapper m_tmiBridge;
    public TmiTestRun(TmiBridgeWrapper tmiBridgeWrapper, IEnumerable`1<string> sources);
    public TmiTestRun(TmiBridgeWrapper tmiBridgeWrapper, IEnumerable`1<string> sources, IEnumerable`1<TestCase> testsToExecute);
    public void Execute(IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    public void ExecuteAllInSources(IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    private void ExecuteAllInSourcesInternal(IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    private void ExecuteInternal(IRunContext runContext, IFrameworkHandle frameworkHandle, TestRunCancellationToken cancellationToken);
    private static void SendSkippedResult(IEnumerable`1<TestCase> tests, string reasonForSkip, ITestExecutionRecorder recorder);
    private static void SendSkippedResult(TestCase test, string reasonForSkip, ITestExecutionRecorder recorder);
    public void AddTestToRun(TestCase testCase);
    private void AddTestToRun(IEnumerable`1<TestCase> testCases);
}
public static class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.UnitTestDiscoverer : object {
    private static AssemblyName s_utfAsemblyName;
    private static UnitTestDiscoverer();
    internal static void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink);
    internal static void DiscoverTests(string source, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.Extensions.VSTestIntegration.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AppDomainIsolatedHost : AssemblyEnumeratorHost {
    private AssemblyResolver assemblyResolver;
    internal AppDomain appDomain;
    private List`1<string> m_resolutionPaths;
    internal virtual AssemblyEnumerator CreateEnumerator(string assemblyFileName, IRunSettings runSettings);
    public virtual void Dispose(bool isExplicitDispose);
    internal List`1<string> GetResolutionPaths(string assemblyFileName, bool isPortableMode);
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AppDomainUtilities : object {
    private static string s_xmlNamespace;
    private static AppDomainUtilities();
    internal static Byte[] AddUTFAssemblyRedirectAndConvertToByteArray(string configFile);
    internal static void SetConfigurationFile(AppDomainSetup appDomainSetup, string testSource);
    private static XmlElement FindOrCreateElement(XmlDocument doc, XmlNode parent, string name);
    private static XmlElement FindOrCreateAssemblyBindingSection(XmlDocument doc, XmlElement configurationElement);
    private static void AddAssemblyBindingRedirect(XmlDocument doc, XmlElement assemblyBindingSection, AssemblyName assemblyName, string fromVersion, string toVersion);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AssemblyEnumerator : MarshalByRefObject {
    public ICollection`1<UnitTestElement> EnumerateAssembly(string assemblyFileName, ICollection`1& warnings);
    internal static Type[] GetTypes(Assembly& assembly, string assemblyFileName, List`1<string> warningMessages);
    public virtual object InitializeLifetimeService();
    private static string GetLoadExceptionDetails(ReflectionTypeLoadException ex);
}
internal abstract class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AssemblyEnumeratorHost : object {
    internal static AssemblyEnumeratorHost Create(bool createAppDomain);
    internal abstract virtual AssemblyEnumerator CreateEnumerator(string assemblyFileName, IRunSettings runSettings);
    public sealed virtual void Dispose();
    public virtual void Dispose(bool isExplicitDipose);
}
public static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AssemblyEnumeratorWrapper : object {
    internal static ICollection`1<UnitTestElement> GetTests(string assemblyFileName, IDiscoveryContext discoveryContext, ICollection`1& warnings);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AssemblyLoadWorker : MarshalByRefObject {
    public static string DefaultIgnoredPattern;
    private static Regex DefaultIgnoreExpression;
    private static AssemblyLoadWorker();
    public String[] GetFullPathToDependentAssemblies(string assemblyPath, IList`1& warnings);
    private void ProcessChildren(Assembly assembly, IList`1<string> result, IList`1<string> visitedAssemblies, IList`1<string> warnings);
    private void GetDependentAssembliesInternal(string assemblyString, IList`1<string> result, IList`1<string> visitedAssemblies, IList`1<string> warnings);
    private static bool NeedToBeFilteredOut(string assemblyName);
    public virtual object InitializeLifetimeService();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AssemblyResolver : MarshalByRefObject {
    private Queue`1<RecursiveDirectoryPath> directoryList;
    private List`1<string> m_searchDirectories;
    private Dictionary`2<string, Assembly> m_resolvedAssemblies;
    private HashSet`1<string> allowedGreaterVersionAssembly;
    private bool m_disposed;
    public AssemblyResolver(IList`1<string> directories);
    public void AddSearchDirectoriesFromRunSetting(List`1<RecursiveDirectoryPath> recursiveDirectoryPath);
    internal Assembly OnResolve(object senderAppDomain, ResolveEventArgs args);
    internal void AddSubdirectories(string path, List`1<string> searchDirectories);
    private Assembly SearchAssembly(List`1<string> searchDirectorypaths, string name);
    private Assembly SearchAndLoadAssembly(string assemblyPath, string assemblyName, AssemblyName requestedName);
    private bool TryLoadFromCache(string assemblyName, Assembly& assembly);
    private bool RequestedAssemblyNameMatchesFound(AssemblyName requestedName, AssemblyName foundName);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.AssemblyUtilities : object {
    private static String[] s_assemblyExtensions;
    private static Dictionary`2<string, object> s_cultures;
    private static Dictionary`2<string, object> Cultures { get; }
    private static AssemblyUtilities();
    internal static bool IsAssemblyExtension(string extensionWithLeadingDot);
    public static bool IsAssembly(string path);
    public static List`1<string> GetSatelliteAssemblies(string assemblyPath);
    internal static String[] GetFullPathToDependentAssemblies(string assemblyPath, string configFile, IList`1& warnings);
    internal static IList`1<string> GetResolutionPaths();
    private static Dictionary`2<string, object> get_Cultures();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.ConsoleOutputRedirector : object {
    private static ConsoleOutputRedirector s_activeRedirector;
    private ConsoleOutputRedirector m_previousRedirector;
    private TextWriter m_redirectStdOut;
    private TextWriter m_redirectStdErr;
    private TextWriterTraceListener m_traceListener;
    private bool m_captureDebugTraces;
    private TextWriter m_origStdOut;
    private TextWriter m_origStdErr;
    public string StandardOut { get; }
    public string StandardError { get; }
    public string DebugTrace { get; }
    public ConsoleOutputRedirector(bool captureDebugTraces);
    public string get_StandardOut();
    public string get_StandardError();
    public string get_DebugTrace();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.CsvDataConnection : TestDataConnection {
    private static string CsvConnectionTemplate;
    private string m_fileName;
    private string TableName { get; }
    public CsvDataConnection(string fileName, List`1<string> dataFolders);
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
    private string get_TableName();
    public DataTable ReadTable(string tableName, IEnumerable columns, int maxRows);
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.DeploymentItem : object {
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativeOutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentItemOriginType <OriginType>k__BackingField;
    public string SourcePath { get; private set; }
    public string RelativeOutputDirectory { get; private set; }
    public DeploymentItemOriginType OriginType { get; private set; }
    public DeploymentItem(string sourcePath);
    public DeploymentItem(string sourcePath, string relativeOutputDirectory);
    public DeploymentItem(string sourcePath, string relativeOutputDirectory, DeploymentItemOriginType originType);
    [CompilerGeneratedAttribute]
public string get_SourcePath();
    [CompilerGeneratedAttribute]
private void set_SourcePath(string value);
    [CompilerGeneratedAttribute]
public string get_RelativeOutputDirectory();
    [CompilerGeneratedAttribute]
private void set_RelativeOutputDirectory(string value);
    [CompilerGeneratedAttribute]
public DeploymentItemOriginType get_OriginType();
    [CompilerGeneratedAttribute]
private void set_OriginType(DeploymentItemOriginType value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool CheckDeploymentItem(string sourcePath, string relativeOutputDirectory, String& errorMessage);
    internal static void AddDeploymentItem(IList`1<DeploymentItem> deploymentItemList, DeploymentItem deploymentItem);
    internal static void AddDeploymentItems(IList`1<DeploymentItem> deploymentItemList, KeyValuePair`2[] deploymentItemsDataToBeAdded);
    internal static IList`1<DeploymentItem> Concat(IList`1<DeploymentItem> deploymentItemList1, IList`1<DeploymentItem> deploymentItemList2);
    internal static KeyValuePair`2[] ToKeyValuePairs(IList`1<DeploymentItem> deploymentItemList);
    private static KeyValuePair`2<string, string> ToKeyValuePair(DeploymentItem deploymentItem);
    internal static IList`1<DeploymentItem> FromKeyValuePairs(KeyValuePair`2[] deploymentItemsData);
    private static DeploymentItem FromKeyValuePair(KeyValuePair`2<string, string> deploymentItemData);
}
public enum Microsoft.VisualStudio.TestPlatform.MSTestFramework.DeploymentItemOriginType : Enum {
    public int value__;
    public static DeploymentItemOriginType PerTestDeployment;
    public static DeploymentItemOriginType TestStorage;
    public static DeploymentItemOriginType Dependency;
    public static DeploymentItemOriginType Satellite;
}
public static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.DeploymentManager : object {
    private static string s_deploymentFolderPrefix;
    private static string TestAssemblyConfigFileExtension;
    private static string NetAppConfigFile;
    internal static TestRunDirectories DoDeployment(IList`1<DeploymentItem> deploymentItems, string testSource, IRunContext runContext, IEnumerable`1& deploymentWarnings);
    internal static void DoDeployment(IList`1<DeploymentItem> deploymentItems, string testSource, string deploymentDirectory, IEnumerable`1& deploymentWarnings);
    private static bool ProcessNewStorage(string testSource, IList`1<DeploymentItem> deploymentItems, IList`1<string> warnings);
    private static void AddDependencies(string testSource, string configFile, IList`1<DeploymentItem> deploymentItems, IList`1<string> warnings);
    private static string AddTestSourceConfigFileIfExists(string testSource, IList`1<DeploymentItem> deploymentItems);
    internal static string GetConfigFile(string testSource);
    private static void AddDependenciesOfDeploymentItem(string deploymentItemFile, IList`1<string> filesToDeploy, IList`1<string> warnings);
    private static IEnumerable`1<DeploymentItem> GetSatellites(IEnumerable`1<DeploymentItem> deploymentItems, string testSource, IList`1<string> warnings);
    private static string FindAndDeployPdb(string destinationFile, string relativeDestination, string sourceFile, Dictionary`2<string, string> destToSource);
    public static string GetSymbolsFileName(string path);
    private static String[] GetFullPathToFilesCorrespondingToDeploymentItem(DeploymentItem deploymentItem, string testSource, IList`1<string> warnings, Boolean& isDirectory);
    public static TestRunDirectories CreateDeploymentDirectories(IRunContext runContext);
    public static string GetTestResultsDirectory(IRunContext runContext);
    internal static void CreateDirectoryIfNotExists(string directory);
    internal static void DeleteDirectories(string filePath);
    private static string CopyFileOverwrite(string source, string destination, String& warning);
    private static bool IsOutputDirectoryValid(DeploymentItem deploymentItem, string deploymentDirectory, IList`1<string> warnings);
    private static string GetFullPathToDeploymentItemSource(string deploymentItemSourcePath, string testSource);
    private static bool IsDeploymentItemSourceADirectory(DeploymentItem deploymentItem, string testSource, String& resultDirectory);
    private static bool IsDeploymentItemSourceAFile(string deploymentItemSourcePath, string testSource, String& file);
    private static string TryConvertPathToRelative(string path, string rootDir);
    private static void AddFilesFromDirectory(string directoryPath, List`1<string> filePaths, bool ignoreIOExceptions);
    private static string GetRootDeploymentDirectory(string baseDirectory);
}
public static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.EqtAssert : object {
    public static void ParameterNotNull(object parameter, string parameterName);
    public static void IsGreaterThanZero(int value, string parameterName);
    public static void StringNotNullOrEmpty(string parameter, string parameterName);
    public static void CollectionNotNullOrEmpty(ICollection`1<T> collection, string parameterName);
    public static void CollectionNotNullOrEmpty(IEnumerable`1<T> collection, string parameterName);
    [ConditionalAttribute("DEBUG")]
private static void AssertParameterNameNotNullOrEmpty(string parameterName);
}
public static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.ExceptionUtilities : object {
    public static string GetExceptionMessage(Exception ex);
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.FileHelper : object {
    private static Char[] s_invalidFileNameCharacters;
    internal static Char[] InvalidFileNameCharacters { get; }
    internal static string ReplaceInvalidFileNameChars(string fileName);
    public static string GetNextIterationDirectoryName(string parentDirectoryName, string originalDirectoryName);
    internal static Char[] get_InvalidFileNameCharacters();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.NoIsolationHost : AssemblyEnumeratorHost {
    internal virtual AssemblyEnumerator CreateEnumerator(string assemblyFileName, IRunSettings runSettings);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.OdbcDataConnection : TestDataConnectionSql {
    private bool m_isMSSql;
    public OdbcCommandBuilder CommandBuilder { get; }
    public OdbcConnection Connection { get; }
    public OdbcDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public OdbcCommandBuilder get_CommandBuilder();
    public OdbcConnection get_Connection();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    public virtual void GetQuoteLiterals();
    public virtual string GetDefaultSchema();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.OleDataConnection : TestDataConnectionSql {
    private bool m_isMSSql;
    public OleDbCommandBuilder CommandBuilder { get; }
    public OleDbConnection Connection { get; }
    public OleDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
    public OleDbCommandBuilder get_CommandBuilder();
    public OleDbConnection get_Connection();
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    public virtual void GetQuoteLiterals();
    public virtual string GetDefaultSchema();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.RandomIntPermutation : object {
    private Int32[] m_objects;
    public RandomIntPermutation(int numberOfObjects);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.RecursiveDirectoryPath : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private string <DirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubDirectories>k__BackingField;
    public string DirectoryPath { get; private set; }
    public bool IncludeSubDirectories { get; private set; }
    public RecursiveDirectoryPath(string dirPath, bool includeSubDirectories);
    [CompilerGeneratedAttribute]
public string get_DirectoryPath();
    [CompilerGeneratedAttribute]
private void set_DirectoryPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSubDirectories();
    [CompilerGeneratedAttribute]
private void set_IncludeSubDirectories(bool value);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.ReflectHelper : object {
    public static Type TaskType;
    internal static Type AsyncStateMachineAttributeType;
    internal static PropertyInfo AsyncStateMachineTypePropertyInfo;
    public static string TestContextPropertyName;
    private Dictionary`2<MemberInfo, Dictionary`2<string, object>> m_attributeCache;
    private static ReflectHelper();
    public bool IsAttributeDefined(MemberInfo memberInfo, Type attributeType, bool inherit);
    public bool HasAttributeDerivedFrom(MemberInfo memberInfo, Type baseAttributeType, bool inherit);
    public bool HasAttributeDerivedFrom(MemberInfo memberInfo, Type baseAttributeType, bool inherit, Object& targetAttribute);
    public void ClearCache();
    internal AttributeType GetAttribute(MethodInfo method);
    internal static Attribute GetAttribute(Type attributeType, MethodInfo method);
    public static bool MatchReturnType(MethodInfo method, Type returnType);
    internal static bool HasCorrectTimeout(MethodInfo method);
    internal static bool HasCorrectTestMethodSignature(MethodInfo testMethod, bool ignoreParameterLength);
    internal static bool HasCorrectTestInitializeCleanupSignature(MethodInfo method);
    internal static bool HasCorrectClassOrAssemblyCleanupSignature(MethodInfo method);
    internal static bool HasCorrectClassOrAssemblyInitializeSignature(MethodInfo method);
    internal static IList`1<DeploymentItem> GetDeploymentItems(MemberInfo deploymentAttributeProvider, ICollection`1<string> warnings);
    internal static IList`1<DeploymentItem> GetDeploymentItems(MemberInfo deploymentAttributeProvider, IList`1& warnings);
    internal static bool HasAsyncStateMachineAttribute(MethodInfo methodInfo);
    private static IEnumerable`1<object> GetDeploymentItemAttributes(MemberInfo deploymentAttributeProvider);
    private static IEnumerable`1<object> GetCategoryAttributes(MemberInfo categoryAttributeProvider);
    private static IEnumerable`1<object> GetTestPropertyAttributes(MemberInfo propertyAttributeProvider);
    private static string GetOwner(MemberInfo ownerAttributeProvider);
    internal static IEnumerable`1<string> GetCategories(MemberInfo categoryAttributeProvider);
    internal static Trait GetTestOwnerAsTraits(MemberInfo ownerAttributeProvider);
    internal static IEnumerable`1<Trait> GetTestPropertiesAsTraits(MemberInfo testPropertyProvider);
    internal static Trait GetTestPriorityAsTraits(Nullable`1<int> testPriority);
    internal static Nullable`1<int> GetPriority(MemberInfo priorityAttributeProvider);
    private static IEnumerable`1<object> GetCustomAttributes(MemberInfo memberInfo, Type type, bool inherit);
    private Dictionary`2<string, object> GetAttributes(MemberInfo memberInfo, bool inherit);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.RunCleanupResult : object {
    [CompilerGeneratedAttribute]
private string <StandardOut>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Warnings>k__BackingField;
    public string StandardOut { get; internal set; }
    public string StandardError { get; internal set; }
    public string DebugTrace { get; internal set; }
    public IList`1<string> Warnings { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_StandardOut();
    [CompilerGeneratedAttribute]
internal void set_StandardOut(string value);
    [CompilerGeneratedAttribute]
public string get_StandardError();
    [CompilerGeneratedAttribute]
internal void set_StandardError(string value);
    [CompilerGeneratedAttribute]
public string get_DebugTrace();
    [CompilerGeneratedAttribute]
internal void set_DebugTrace(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Warnings();
    [CompilerGeneratedAttribute]
internal void set_Warnings(IList`1<string> value);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.SequentialIntPermutation : object {
    private int m_numberOfObjects;
    public SequentialIntPermutation(int numberOfObjects);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.SqlDataConnection : TestDataConnectionSql {
    public SqlDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public virtual string GetDefaultSchema();
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.StackTraceHelper : object {
    private static string s_typeToBeExcluded;
    private static string TypeToBeExcluded { get; }
    internal static StackTraceInformation GetStackTraceInformation(Exception ex);
    internal static string TrimStackTrace(string stackTrace);
    internal static string GetExceptionMessage(Exception ex);
    internal static StackTraceInformation CreateStackTraceInformation(Exception ex, bool checkInnerExceptions, string stackTraceString);
    internal static bool HasReferenceToUTF(string stackFrame);
    internal static bool HasReferenceToUTF(StackFrame stackFrame);
    private static string get_TypeToBeExcluded();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.StackTraceInformation : object {
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorColumnNumber>k__BackingField;
    public string ErrorStackTrace { get; private set; }
    public string ErrorFilePath { get; private set; }
    public int ErrorLineNumber { get; private set; }
    public int ErrorColumnNumber { get; private set; }
    public StackTraceInformation(string stackTrace);
    public StackTraceInformation(string stackTrace, string filePath, int lineNumber, int columnNumber);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
private void set_ErrorStackTrace(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorFilePath();
    [CompilerGeneratedAttribute]
private void set_ErrorFilePath(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorLineNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorColumnNumber(int value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.StringUtilities : object {
    [ExtensionAttribute]
public static string ReplaceNullChars(string input);
    public static bool IsNullOrWhiteSpace(string input);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestAssemblyInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsAssemblyInitializeExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <AssemblyInitializationException>k__BackingField;
    private MethodInfo m_assemblyCleanupMethod;
    private MethodInfo m_assemblyInitializeMethod;
    public MethodInfo AssemblyInitializeMethod { get; internal set; }
    public MethodInfo AssemblyCleanupMethod { get; internal set; }
    public bool IsAssemblyInitializeExecuted { get; internal set; }
    public Exception AssemblyInitializationException { get; internal set; }
    public bool HasExecutableCleanupMethod { get; }
    public MethodInfo get_AssemblyInitializeMethod();
    internal void set_AssemblyInitializeMethod(MethodInfo value);
    public MethodInfo get_AssemblyCleanupMethod();
    internal void set_AssemblyCleanupMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsAssemblyInitializeExecuted();
    [CompilerGeneratedAttribute]
internal void set_IsAssemblyInitializeExecuted(bool value);
    [CompilerGeneratedAttribute]
public Exception get_AssemblyInitializationException();
    [CompilerGeneratedAttribute]
internal void set_AssemblyInitializationException(Exception value);
    public bool get_HasExecutableCleanupMethod();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestClassInfo : object {
    [CompilerGeneratedAttribute]
private Type <ClassType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConstructorInfo <Constructor>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <TestContextProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClassInitializeExecuted>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <ClassInitializationException>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<MethodInfo> <BaseTestInitializeMethodsQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<MethodInfo> <BaseTestCleanupMethodsQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private TestAssemblyInfo <Parent>k__BackingField;
    private MethodInfo m_classCleanup;
    private MethodInfo m_classInitialize;
    private MethodInfo m_testCleanup;
    private MethodInfo m_testInitialize;
    public Type ClassType { get; private set; }
    public ConstructorInfo Constructor { get; private set; }
    public PropertyInfo TestContextProperty { get; private set; }
    public MethodInfo ClassInitializeMethod { get; internal set; }
    public bool IsClassInitializeExecuted { get; internal set; }
    public Exception ClassInitializationException { get; internal set; }
    public MethodInfo ClassCleanupMethod { get; internal set; }
    public bool HasExecutableCleanupMethod { get; }
    public MethodInfo TestInitializeMethod { get; internal set; }
    public MethodInfo TestCleanupMethod { get; internal set; }
    public Queue`1<MethodInfo> BaseTestInitializeMethodsQueue { get; private set; }
    public Queue`1<MethodInfo> BaseTestCleanupMethodsQueue { get; private set; }
    public TestAssemblyInfo Parent { get; private set; }
    internal TestClassInfo(Type type, ConstructorInfo constructor, PropertyInfo testContextProperty, TestAssemblyInfo parent);
    [CompilerGeneratedAttribute]
public Type get_ClassType();
    [CompilerGeneratedAttribute]
private void set_ClassType(Type value);
    [CompilerGeneratedAttribute]
public ConstructorInfo get_Constructor();
    [CompilerGeneratedAttribute]
private void set_Constructor(ConstructorInfo value);
    [CompilerGeneratedAttribute]
public PropertyInfo get_TestContextProperty();
    [CompilerGeneratedAttribute]
private void set_TestContextProperty(PropertyInfo value);
    public MethodInfo get_ClassInitializeMethod();
    internal void set_ClassInitializeMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public bool get_IsClassInitializeExecuted();
    [CompilerGeneratedAttribute]
internal void set_IsClassInitializeExecuted(bool value);
    [CompilerGeneratedAttribute]
public Exception get_ClassInitializationException();
    [CompilerGeneratedAttribute]
internal void set_ClassInitializationException(Exception value);
    public MethodInfo get_ClassCleanupMethod();
    internal void set_ClassCleanupMethod(MethodInfo value);
    public bool get_HasExecutableCleanupMethod();
    public MethodInfo get_TestInitializeMethod();
    internal void set_TestInitializeMethod(MethodInfo value);
    public MethodInfo get_TestCleanupMethod();
    internal void set_TestCleanupMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public Queue`1<MethodInfo> get_BaseTestInitializeMethodsQueue();
    [CompilerGeneratedAttribute]
private void set_BaseTestInitializeMethodsQueue(Queue`1<MethodInfo> value);
    [CompilerGeneratedAttribute]
public Queue`1<MethodInfo> get_BaseTestCleanupMethodsQueue();
    [CompilerGeneratedAttribute]
private void set_BaseTestCleanupMethodsQueue(Queue`1<MethodInfo> value);
    [CompilerGeneratedAttribute]
public TestAssemblyInfo get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TestAssemblyInfo value);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestContextImplementation : TestContext {
    private IList`1<string> m_testResultFiles;
    private IDictionary`2<string, object> m_properties;
    private UnitTestOutcome m_outcome;
    private ThreadSafeStringWriter m_stringWriter;
    private bool m_stringWriterDisposed;
    private TestMethod m_testMethod;
    private DbConnection m_dbConnection;
    private DataRow m_dataRow;
    public UnitTestOutcome CurrentTestOutcome { get; }
    public DbConnection DataConnection { get; }
    public DataRow DataRow { get; }
    public IDictionary Properties { get; }
    public string TestRunDirectory { get; }
    public string DeploymentDirectory { get; }
    public string ResultsDirectory { get; }
    public string TestRunResultsDirectory { get; }
    public string TestResultsDirectory { get; }
    public string TestDir { get; }
    public string TestDeploymentDir { get; }
    public string TestLogsDir { get; }
    public string FullyQualifiedTestClassName { get; }
    public string TestName { get; }
    internal string Messages { get; }
    public bool HasProperties { get; }
    public TestContextImplementation(TestMethod testMethod, ThreadSafeStringWriter stringWriter, IDictionary`2<string, object> properties, TestRunDirectories runDirectories);
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public virtual DbConnection get_DataConnection();
    public virtual DataRow get_DataRow();
    public virtual IDictionary get_Properties();
    public virtual string get_TestRunDirectory();
    public virtual string get_DeploymentDirectory();
    public virtual string get_ResultsDirectory();
    public virtual string get_TestRunResultsDirectory();
    public virtual string get_TestResultsDirectory();
    public virtual string get_TestDir();
    public virtual string get_TestDeploymentDir();
    public virtual string get_TestLogsDir();
    public virtual string get_FullyQualifiedTestClassName();
    public virtual string get_TestName();
    public virtual void AddResultFile(string fileName);
    public virtual void BeginTimer(string timerName);
    public virtual void EndTimer(string timerName);
    public virtual void WriteLine(string format, Object[] args);
    internal void SetOutcome(UnitTestOutcome outcome);
    internal string get_Messages();
    internal void ClearMessages();
    internal void SetDataConnection(DbConnection dbConnection);
    internal void SetDataRow(DataRow dataRow);
    public bool get_HasProperties();
    internal bool TryGetPropertyValue(string propertyName, Object& propertyValue);
    internal void AddStringProperty(string propertyName, string propertyValue);
    internal IList`1<string> GetResultFiles();
    private string GetStringPropertyValue(string propertyname);
    private void InitializeProperties(TestRunDirectories runDirectories);
    private static UnitTestOutcome ToUTF(UnitTestOutcome outcome);
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestContextPropertyStrings : object {
    public static string TestRunDirectory;
    public static string DeploymentDirectory;
    public static string ResultsDirectory;
    public static string TestRunResultsDirectory;
    public static string TestResultsDirectory;
    public static string TestDir;
    public static string TestDeploymentDir;
    public static string TestLogsDir;
    public static string FullyQualifiedTestClassName;
    public static string TestName;
    private static TestContextPropertyStrings();
}
internal abstract class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestDataConnection : object {
    internal static string ConnectionDirectoryKey;
    private List`1<string> m_dataFolders;
    private static Nullable`1<bool> s_extendedDiagnosticsEnabled;
    public DbConnection Connection { get; }
    private static bool ExtendedDiagnosticsEnabled { get; }
    protected internal TestDataConnection(List`1<string> dataFolders);
    internal static bool PathNeedsFixup(string path);
    internal static string GetRelativePart(string path);
    internal static string FixPath(string path, List`1<string> foldersToCheck);
    protected string FixPath(string path);
    public abstract virtual List`1<string> GetDataTablesAndViews();
    public abstract virtual List`1<string> GetColumns(string tableName);
    public abstract virtual DataTable ReadTable(string tableName, IEnumerable columns);
    public virtual DbConnection get_Connection();
    public virtual void Dispose();
    [ConditionalAttribute("DEBUG")]
protected internal static void WriteDiagnostics(string formatString, Object[] parameters);
    private static bool get_ExtendedDiagnosticsEnabled();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestDataConnectionFactory : object {
    private static Dictionary`2<string, TestDataConnectionFactory> s_specializedProviders;
    private static TestDataConnectionFactory();
    public virtual TestDataConnection Create(string invariantProviderName, string connectionString, List`1<string> dataFolders);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestDataConnectionSql : TestDataConnection {
    private string m_quoteSuffix;
    private string m_quotePrefix;
    private DbCommandBuilder m_commandBuilder;
    private DbConnection m_connection;
    private DbProviderFactory m_factory;
    private char CatalogSeperatorChar { get; }
    private char SchemaSeperatorChar { get; }
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    protected DbCommandBuilder CommandBuilder { get; }
    public DbConnection Connection { get; }
    protected DbProviderFactory Factory { get; }
    protected internal TestDataConnectionSql(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public static TestDataConnectionSql Create(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    public string PrepareNameForSql(string tableName);
    public String[] SplitName(string name);
    public string JoinAndQuoteName(String[] parts, bool fullyQuote);
    private string MaybeQuote(string identifier, bool force);
    private int FindSeperators(string text, int from);
    private char get_CatalogSeperatorChar();
    private char get_SchemaSeperatorChar();
    private int FindIdentifierEnd(string text, int start);
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    public virtual void GetQuoteLiterals();
    protected void GetQuoteLiteralsHelper();
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    protected DbCommandBuilder get_CommandBuilder();
    public virtual DbConnection get_Connection();
    protected DbProviderFactory get_Factory();
    public virtual string GetDefaultSchema();
    protected string FormatTableNameForDisplay(string tableSchema, string tableName);
    private static bool IsInArray(string candidate, String[] values);
    public virtual List`1<string> GetDataTablesAndViews();
    protected void SplitTableName(string name, String& schemaName, String& tableName);
    public virtual List`1<string> GetColumns(string tableName);
    protected virtual bool IsUserSchema(string tableSchema);
    public bool IsOpen();
    protected string GetDefaultSchemaMSSql();
    protected static bool IsMSSql(string providerName);
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
    private string GetColumnsSQL(IEnumerable columns);
    public virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestExecutionOutputs : object {
    private TestContextImplementation m_testContext;
    internal ConsoleOutputRedirector ConsoleOutputsHandle;
    [CompilerGeneratedAttribute]
private string <StandardOut>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestContextMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ResultFiles>k__BackingField;
    private object m_lockObject;
    private bool m_isUpdated;
    internal string StandardOut { get; internal set; }
    internal string StandardError { get; internal set; }
    internal string DebugTrace { get; internal set; }
    internal string TestContextMessages { get; internal set; }
    internal IList`1<string> ResultFiles { get; internal set; }
    public TestExecutionOutputs(TestContextImplementation m_testContext);
    [CompilerGeneratedAttribute]
internal string get_StandardOut();
    [CompilerGeneratedAttribute]
internal void set_StandardOut(string value);
    [CompilerGeneratedAttribute]
internal string get_StandardError();
    [CompilerGeneratedAttribute]
internal void set_StandardError(string value);
    [CompilerGeneratedAttribute]
internal string get_DebugTrace();
    [CompilerGeneratedAttribute]
internal void set_DebugTrace(string value);
    [CompilerGeneratedAttribute]
internal string get_TestContextMessages();
    [CompilerGeneratedAttribute]
internal void set_TestContextMessages(string value);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_ResultFiles();
    [CompilerGeneratedAttribute]
internal void set_ResultFiles(IList`1<string> value);
    internal void Update();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestFailedException : Exception {
    [CompilerGeneratedAttribute]
private StackTraceInformation <StackTraceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private UnitTestOutcome <Outcome>k__BackingField;
    public StackTraceInformation StackTraceInformation { get; private set; }
    public UnitTestOutcome Outcome { get; private set; }
    public TestFailedException(UnitTestOutcome outcome, string errorMessage);
    public TestFailedException(UnitTestOutcome outcome, string errorMessage, StackTraceInformation stackTraceInformation);
    [CompilerGeneratedAttribute]
public StackTraceInformation get_StackTraceInformation();
    [CompilerGeneratedAttribute]
private void set_StackTraceInformation(StackTraceInformation value);
    [CompilerGeneratedAttribute]
public UnitTestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
private void set_Outcome(UnitTestOutcome value);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethod : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    private string m_DeclaringClassFullName;
    public string Name { get; private set; }
    public string FullClassName { get; private set; }
    public string DeclaringClassFullName { get; public set; }
    public string AssemblyName { get; private set; }
    public bool IsAsync { get; private set; }
    public TestMethod(string name, string fullClassName, string assemblyName, bool isAsync);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullClassName();
    [CompilerGeneratedAttribute]
private void set_FullClassName(string value);
    public string get_DeclaringClassFullName();
    public void set_DeclaringClassFullName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
private void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
private void set_IsAsync(bool value);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethodInfo : object {
    [CompilerGeneratedAttribute]
private MethodInfo <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpectedExceptionBaseAttribute <ExpectedException>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TestClassInfo <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSourceAttribute <DataSourceParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotRunnableReason>k__BackingField;
    public static int TimeoutWhenNotSet;
    public MethodInfo TestMethod { get; private set; }
    public ExpectedExceptionBaseAttribute ExpectedException { get; private set; }
    public int Timeout { get; private set; }
    public TestClassInfo Parent { get; internal set; }
    public bool IsTimeoutSet { get; }
    public DataSourceAttribute DataSourceParameters { get; internal set; }
    public string NotRunnableReason { get; internal set; }
    public bool IsRunnable { get; }
    internal TestMethodInfo(MethodInfo testMethod, ExpectedExceptionBaseAttribute expectedException, int timeout, TestClassInfo parent, DataSourceAttribute dataSourceAttribute);
    [CompilerGeneratedAttribute]
public MethodInfo get_TestMethod();
    [CompilerGeneratedAttribute]
private void set_TestMethod(MethodInfo value);
    [CompilerGeneratedAttribute]
public ExpectedExceptionBaseAttribute get_ExpectedException();
    [CompilerGeneratedAttribute]
private void set_ExpectedException(ExpectedExceptionBaseAttribute value);
    [CompilerGeneratedAttribute]
public int get_Timeout();
    [CompilerGeneratedAttribute]
private void set_Timeout(int value);
    [CompilerGeneratedAttribute]
public TestClassInfo get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(TestClassInfo value);
    public bool get_IsTimeoutSet();
    [CompilerGeneratedAttribute]
public DataSourceAttribute get_DataSourceParameters();
    [CompilerGeneratedAttribute]
internal void set_DataSourceParameters(DataSourceAttribute value);
    [CompilerGeneratedAttribute]
public string get_NotRunnableReason();
    [CompilerGeneratedAttribute]
internal void set_NotRunnableReason(string value);
    public bool get_IsRunnable();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestMethodRunner : object {
    private TestContextImplementation m_testContext;
    private TestMethod m_test;
    private TestMethodInfo m_testMethodInfo;
    private object m_instance;
    private bool m_captureDebugTraces;
    private bool m_isTestRunning;
    private TestFailedException m_testMethodFailure;
    private Stopwatch m_totalTimewatch;
    private Stopwatch m_testDuration;
    public TestMethodRunner(TestMethodInfo testMethodInfo, TestMethod testMethod, TestContextImplementation testContext, bool captureDebugTraces);
    internal UnitTestResult Execute();
    private UnitTestResult ExecuteInternalWithTimeout();
    private UnitTestResult ExecuteInternal();
    private UnitTestResult ExecuteTest();
    private void CreateTestClassInstance();
    private void SetTestContext();
    private void RunTestInitializeMethod();
    private void RunTestMethod();
    private TestMethodInvokerResult DefaultTestMethodInvoke(Object[] args);
    private void HandleMethodException(Exception ex);
    private void RunCleanupMethod();
    private void RunAssemblyInitializeIfRequired();
    private void RunClassInitializeMethodIfRequired();
    private static string GetExceptionMessage(Exception ex);
    private static StackTraceInformation GetExceptionStackTrace(Exception ex);
    private void Verify(Exception exception, ExpectedExceptionAttribute expectedException);
    private static void RethrowIfAssertException(Exception exception);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestRunDirectories : object {
    [CompilerGeneratedAttribute]
private string <RootDeploymentDirectory>k__BackingField;
    public static string DefaultDeploymentRootDirectory;
    public static string DeploymentInDirectorySuffix;
    public static string DeploymentOutDirectorySuffix;
    public string RootDeploymentDirectory { get; public set; }
    public string InDirectory { get; }
    public string OutDirectory { get; }
    public string InMachineNameDirectory { get; }
    public TestRunDirectories(string rootDirectory);
    [CompilerGeneratedAttribute]
public string get_RootDeploymentDirectory();
    [CompilerGeneratedAttribute]
public void set_RootDeploymentDirectory(string value);
    public string get_InDirectory();
    public string get_OutDirectory();
    public string get_InMachineNameDirectory();
}
internal static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TestSpecificProviderInvariantNames : object {
    internal static string CsvProvider;
    internal static string XmlProvider;
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.ThreadSafeStringWriter : StringWriter {
    private object m_lock;
    public ThreadSafeStringWriter(IFormatProvider formatProvider);
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public virtual string ToString();
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void Write(Char[] buffer, int index, int count);
    private static void InvokeBaseClass(Action action);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
    [CompilerGeneratedAttribute]
private void <Close>b__3_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(char value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__2(string value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__3(Char[] buffer, int index, int count);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TypeCache : object {
    private static String[] PredefinedNames;
    private ReflectHelper m_reflectionHelper;
    private Dictionary`2<Assembly, TestAssemblyInfo> m_testAssemblyInfo;
    private Dictionary`2<string, TestClassInfo> m_classInfoCache;
    public IEnumerable`1<TestClassInfo> ClassInfoWithExecutableCleanupMethod { get; }
    public IEnumerable`1<TestAssemblyInfo> AssemblyInfoWithExecutableCleanupMethod { get; }
    private static TypeCache();
    public TestMethodInfo GetTestMethodInfo(TestMethod testMethod, bool isDataSource, TestContextImplementation testContext, int globalTestTimeout);
    public IEnumerable`1<TestClassInfo> get_ClassInfoWithExecutableCleanupMethod();
    public IEnumerable`1<TestAssemblyInfo> get_AssemblyInfoWithExecutableCleanupMethod();
    private TestClassInfo CreateClassInfo(Type classType, TestMethod testMethod);
    private void UpdateInfoIfTestInitializeOrCleanupMethod(TestClassInfo classInfo, MethodInfo methodInfo, bool isBase, Dictionary`2<string, string> instanceMethods, Type testInitializeAttributeType, Type testCleanupAttributeType);
    private void UpdateInfoIfClassInitializeMethod(TestClassInfo classInfo, MethodInfo methodInfo, Type classInitializeAttributeType);
    private void UpdateInfoIfAssemblyInitializeMethod(TestAssemblyInfo assemblyInfo, MethodInfo methodInfo, Type assemblyInitializeType);
    private void UpdateInfoIfAssemblyCleanupMethod(TestAssemblyInfo assemblyInfo, MethodInfo methodInfo, Type assemblyCleanupAttributeType);
    private void UpdateInfoIfClassCleanupMethod(TestClassInfo classInfo, MethodInfo methodInfo, Type classCleanupAttributeType);
    private TestAssemblyInfo GetAssemblyInfo(Type type);
    private TestClassInfo GetClassInfo(TestMethod testMethod);
    private static Type LoadType(string typeName, string assemblyName);
    private TestMethodInfo ResolveTestMethod(TestMethod testMethod, TestClassInfo testClassInfo, TestContextImplementation testContext, bool isDataDriven, int globalTestTimeout);
    private static DataSourceAttribute ResolveDataSourceAttribute(MethodInfo testMethodInfo, TestMethod testMethod);
    private int GetTestTimeout(MethodInfo methodInfo, TestMethod testMethod, int globalTestTimeout);
    private static ExpectedExceptionBaseAttribute ResolveExpectedExceptionHelper(MethodInfo methodInfo, TestMethod testMethod, TestContext testContext);
    private static MethodInfo ResolveTestMethodHelper(TestMethod testMethod, TestClassInfo testClassInfo);
    private static MethodInfo ResolveTestMethodHelper(TestMethod testMethod, MethodInfo[] methodsInClass);
    private static PropertyInfo ResolveTestContext(Type classType);
    private static void SetCustomProperties(TestMethodInfo testMethodInfo, TestContextImplementation testContext);
    private static bool ValidateAndAssignTestProperty(TestMethodInfo testMethodInfo, TestContextImplementation testContext, string propertyName, string propertyValue);
    private static bool IsPredefined(string attributeName);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TypeEnumerator : object {
    private TestClassExtensionAttribute m_extensionAttribute;
    private static BindingFlags TestMethodSearchFlags;
    private ReflectHelper m_reflectionHelper;
    private Type m_type;
    private string m_assemblyName;
    private Nullable`1<bool> m_isIgnoreAttributeOnClass;
    private Dictionary`2<Guid, Type> m_testIdToDeclaringClassMap;
    private bool IsIgnoreAttributeOnTestClass { get; }
    public TypeEnumerator(Type type, string assemblyName);
    public Collection`1<UnitTestElement> Enumerate(ICollection`1& warnings);
    private bool IsValidTestClass(ICollection`1<string> warnings, Boolean& ignoreInvalidTestClassWarnings);
    private Collection`1<UnitTestElement> GetTests(ICollection`1<string> warnings);
    private static Guid GuidFromString(string data);
    private bool IsOKToAddTest(MethodInfo method);
    private UnitTestElement GetTest(MethodInfo method, IList`1<DeploymentItem> classLevelDeploymentItems, ICollection`1<string> warnings);
    private static string GetAsyncTypeName(MethodInfo method);
    private static bool HasCorrectTestContextSignature(Type type);
    private bool TestMethodIsValid(MethodInfo testMethodInfo, ICollection`1<string> warnings);
    private static void UpdateDeploymentItems(UnitTestElement test, MethodInfo method, IList`1<DeploymentItem> classLevelDeploymentItems, ICollection`1<string> warnings);
    private bool get_IsIgnoreAttributeOnTestClass();
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.TypeInspectionException : Exception {
    public TypeInspectionException(string message);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestAdapter : object {
    private AssemblyResolver m_assemblyResolver;
    private AppDomain appDomain;
    public static IList`1<string> DefaultResolutionPaths { get; }
    public UnitTestRunner CreateTestRunner(string testSource, bool captureDebugTraces, TestRunDirectories runDirectories, IRunContext runContext, int globalTestTimeout);
    internal AppDomain CreateAppDomain(string testSource, IRunContext runContext);
    private static string GetApplicationCodeBase(string testSource);
    public static IList`1<string> get_DefaultResolutionPaths();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isExplicitDispose);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestElement : object {
    [CompilerGeneratedAttribute]
private TestMethod <TestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ignored>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDataDriven>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NeedsLegacyRunner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <TestCategory>k__BackingField;
    [CompilerGeneratedAttribute]
private Trait[] <Traits>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private KeyValuePair`2[] <DeploymentItems>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AsyncTypeName>k__BackingField;
    public TestMethod TestMethod { get; private set; }
    public bool Ignored { get; public set; }
    public bool IsDataDriven { get; public set; }
    public bool NeedsLegacyRunner { get; public set; }
    public bool IsAsync { get; public set; }
    public String[] TestCategory { get; public set; }
    public Trait[] Traits { get; public set; }
    public Nullable`1<int> Priority { get; public set; }
    public KeyValuePair`2[] DeploymentItems { get; public set; }
    internal string AsyncTypeName { get; internal set; }
    public UnitTestElement(TestMethod testMethod);
    [CompilerGeneratedAttribute]
public TestMethod get_TestMethod();
    [CompilerGeneratedAttribute]
private void set_TestMethod(TestMethod value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDataDriven();
    [CompilerGeneratedAttribute]
public void set_IsDataDriven(bool value);
    [CompilerGeneratedAttribute]
public bool get_NeedsLegacyRunner();
    [CompilerGeneratedAttribute]
public void set_NeedsLegacyRunner(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(bool value);
    [CompilerGeneratedAttribute]
public String[] get_TestCategory();
    [CompilerGeneratedAttribute]
public void set_TestCategory(String[] value);
    [CompilerGeneratedAttribute]
public Trait[] get_Traits();
    [CompilerGeneratedAttribute]
public void set_Traits(Trait[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public KeyValuePair`2[] get_DeploymentItems();
    [CompilerGeneratedAttribute]
public void set_DeploymentItems(KeyValuePair`2[] value);
    [CompilerGeneratedAttribute]
internal string get_AsyncTypeName();
    [CompilerGeneratedAttribute]
internal void set_AsyncTypeName(string value);
}
public enum Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestOutcome : Enum {
    public int value__;
    public static UnitTestOutcome Error;
    public static UnitTestOutcome Failed;
    public static UnitTestOutcome Timeout;
    public static UnitTestOutcome Inconclusive;
    public static UnitTestOutcome Ignored;
    public static UnitTestOutcome NotRunnable;
    public static UnitTestOutcome Passed;
    public static UnitTestOutcome NotFound;
    public static UnitTestOutcome InProgress;
}
public static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestOutcomeHelper : object {
    public static bool IsPass(UnitTestOutcome outcome);
    public static bool IsFail(UnitTestOutcome outcome, bool mapInconclusiveToFailed);
    public static bool IsIgnored(UnitTestOutcome outcome, bool mapInconclusiveToFailed);
    public static UnitTestOutcome GetMoreImportantOutcome(UnitTestOutcome outcome1, UnitTestOutcome outcome2);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestResult : object {
    [CompilerGeneratedAttribute]
private UnitTestOutcome <Outcome>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentExecId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InnerResultsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardOut>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestContextMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatarowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ResultFiles>k__BackingField;
    public UnitTestOutcome Outcome { get; internal set; }
    public string ErrorMessage { get; internal set; }
    public string ErrorStackTrace { get; internal set; }
    public Guid ExecutionId { get; internal set; }
    public Guid ParentExecId { get; internal set; }
    public int InnerResultsCount { get; internal set; }
    public TimeSpan Duration { get; internal set; }
    public string StandardOut { get; internal set; }
    public string StandardError { get; internal set; }
    public string DebugTrace { get; internal set; }
    public string ErrorFilePath { get; internal set; }
    public int ErrorLineNumber { get; private set; }
    public int ErrorColumnNumber { get; private set; }
    public string TestContextMessages { get; internal set; }
    public int DatarowIndex { get; internal set; }
    public IList`1<string> ResultFiles { get; internal set; }
    internal UnitTestResult(TestFailedException testFailedException);
    internal UnitTestResult(UnitTestOutcome outcome, string errorMessage);
    [CompilerGeneratedAttribute]
public UnitTestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
internal void set_Outcome(UnitTestOutcome value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
internal void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [CompilerGeneratedAttribute]
internal void set_ErrorStackTrace(string value);
    [CompilerGeneratedAttribute]
public Guid get_ExecutionId();
    [CompilerGeneratedAttribute]
internal void set_ExecutionId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ParentExecId();
    [CompilerGeneratedAttribute]
internal void set_ParentExecId(Guid value);
    [CompilerGeneratedAttribute]
public int get_InnerResultsCount();
    [CompilerGeneratedAttribute]
internal void set_InnerResultsCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
internal void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_StandardOut();
    [CompilerGeneratedAttribute]
internal void set_StandardOut(string value);
    [CompilerGeneratedAttribute]
public string get_StandardError();
    [CompilerGeneratedAttribute]
internal void set_StandardError(string value);
    [CompilerGeneratedAttribute]
public string get_DebugTrace();
    [CompilerGeneratedAttribute]
internal void set_DebugTrace(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorFilePath();
    [CompilerGeneratedAttribute]
internal void set_ErrorFilePath(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorLineNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorLineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ErrorColumnNumber(int value);
    [CompilerGeneratedAttribute]
public string get_TestContextMessages();
    [CompilerGeneratedAttribute]
internal void set_TestContextMessages(string value);
    [CompilerGeneratedAttribute]
public int get_DatarowIndex();
    [CompilerGeneratedAttribute]
internal void set_DatarowIndex(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_ResultFiles();
    [CompilerGeneratedAttribute]
internal void set_ResultFiles(IList`1<string> value);
}
public class Microsoft.VisualStudio.TestPlatform.MSTestFramework.UnitTestRunner : MarshalByRefObject {
    private TestRunDirectories m_runDirectories;
    private TypeCache m_typeCache;
    private string m_testAssembly;
    private bool m_captureDebugTraces;
    private int m_globalTestTimeout;
    public UnitTestRunner(string rootDeploymentDirectory, string testAssembly, bool captureDebugTraces, int globalTestTimeout);
    private UnitTestResult[] RunDataDrivenTestInternal(TestContextImplementation testContext, TestMethodInfo testMethodInfo, TestMethod testMethod);
    private static IEnumerable`1<int> GetPermutation(DataAccessMethod dataAccessMethod, int length);
    private static void GetConnectionProperties(DataSourceAttribute dataSourceAttribute, String& providerNameInvariant, String& connectionString, String& tableName, DataAccessMethod& dataAccessMethod);
    public UnitTestResult RunSingleTest(string name, string fullClassName, bool isAsync);
    public UnitTestResult RunSingleTest(string name, string fullClassName, bool isAsync, Dictionary`2<string, object> runParameters);
    public UnitTestResult[] RunDataDrivenTest(string name, string fullClassName, bool isAsync);
    public UnitTestResult[] RunDataDrivenTest(string name, string fullClassName, bool isAsync, Dictionary`2<string, object> runParameters);
    private UnitTestResult[] RunInternal(TestMethod testMethod, bool isDataDriven, Dictionary`2<string, object> runParameters);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    public RunCleanupResult RunCleanup();
    private static void RunAssemblyCleanup(IEnumerable`1<TestAssemblyInfo> assemblyInfoCache, IList`1<string> warnings);
    private static void RunClassCleanupMethods(IEnumerable`1<TestClassInfo> classInfoCache, IList`1<string> warnings);
    private static string RunClassCleanupMethod(TestClassInfo classInfo);
    private static string RunAssemblyCleanupMethod(TestAssemblyInfo assemblyInfo);
}
public static class Microsoft.VisualStudio.TestPlatform.MSTestFramework.VSInstallationUtilities : object {
    public static string VSRegistryRootOn64BitMachine;
    public static string SideBySideKeyOnTeamBuildMachine;
    private static string RegistryRootEnvironmentVariableName;
    private static string PublicAssembliesDirectoryName;
    private static string PrivateAssembliesFolderName;
    private static string PortableVsTestManifestFilename;
    public static string DataCollectorsDirectory;
    public static string VSInstallPath { get; }
    public static string PathToPublicAssemblies { get; }
    public static string PathToPrivateAssemblies { get; }
    public static string RascalProRegistryRootPath { get; }
    public static string get_VSInstallPath();
    public static string get_PathToPublicAssemblies();
    public static string get_PathToPrivateAssemblies();
    public static string get_RascalProRegistryRootPath();
    public static bool CheckIfTestProcessIsRunningInXcopyableMode();
    public static bool CheckIfTestProcessIsRunningInXcopyableMode(string exeName);
    private static string GetFullPath(string folderName);
    private static bool Is64BitProcess();
    private static string GetEnvironmentVariable(string keyName);
}
internal class Microsoft.VisualStudio.TestPlatform.MSTestFramework.XmlDataConnection : TestDataConnection {
    private string m_fileName;
    public XmlDataConnection(string fileName, List`1<string> dataFolders);
    private DataSet LoadDataSet(bool schemaOnly);
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
