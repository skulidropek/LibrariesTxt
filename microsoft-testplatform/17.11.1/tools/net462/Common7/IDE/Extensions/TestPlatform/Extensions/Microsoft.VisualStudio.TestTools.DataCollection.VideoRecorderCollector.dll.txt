[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.AudioRecorderException : MediaRecorderException {
    public static string LinkIdForAudioSettings;
    public AudioRecorderException(string message, Exception innerException);
    protected AudioRecorderException(SerializationInfo info, StreamingContext context);
    private static AudioRecorderException();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.AudioRecorderSettings : object {
    [CompilerGeneratedAttribute]
private int <Bitrate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfChannels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SamplesPerSecond>k__BackingField;
    private static string ScreenCaptureVideoElementName;
    private static string EnabledXmlLocation;
    public static string PropertyNameEnabled;
    private bool m_enabled;
    private static bool EnabledDefault;
    private static int BitrateDefault;
    private static int BitsPerSampleDefault;
    private static int NumberOfChannelsDefault;
    private static int SamplesPerSecondDefault;
    public bool Enabled { get; public set; }
    public int Bitrate { get; public set; }
    public int BitsPerSample { get; public set; }
    public int NumberOfChannels { get; public set; }
    public int SamplesPerSecond { get; public set; }
    public AudioRecorderSettings(XmlElement xmlElement);
    private static AudioRecorderSettings();
    public void Reset();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public int get_Bitrate();
    [CompilerGeneratedAttribute]
public void set_Bitrate(int value);
    [CompilerGeneratedAttribute]
public int get_BitsPerSample();
    [CompilerGeneratedAttribute]
public void set_BitsPerSample(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfChannels();
    [CompilerGeneratedAttribute]
public void set_NumberOfChannels(int value);
    [CompilerGeneratedAttribute]
public int get_SamplesPerSecond();
    [CompilerGeneratedAttribute]
public void set_SamplesPerSecond(int value);
    public void Load(XmlElement xmlElement);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.CollectorNameValueConfigurationManager : object {
    private static string ConfigurationNodeName;
    private static string SettingNodeName;
    private static string SettingNameAttributeName;
    private static string SettingValueAttributeName;
    private Dictionary`2<string, string> m_nameValuePairs;
    public string Item { get; public set; }
    public CollectorNameValueConfigurationManager(XmlElement configurationElement);
    public string get_Item(string name);
    public void set_Item(string name, string value);
}
public abstract class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.EncoderAdapter : object {
    private static string TempDirectory;
    protected bool m_isConstructed;
    private DataCollectionContext m_context;
    private DataCollectionLogger m_logger;
    private DataCollectionEnvironmentContext m_environmentContext;
    private string m_outputDirectory;
    [CompilerGeneratedAttribute]
private EncoderState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableAudio>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableVideo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildTestCase>k__BackingField;
    protected DataCollectionContext Context { get; }
    protected DataCollectionLogger Logger { get; }
    protected DataCollectionEnvironmentContext EnvironmentContext { get; }
    public string OutputDirectory { get; }
    public EncoderState State { get; private set; }
    public Nullable`1<bool> EnableAudio { get; public set; }
    public Nullable`1<bool> EnableVideo { get; public set; }
    public bool IsChildTestCase { get; public set; }
    protected TimeSpan Duration { get; }
    protected EncoderAdapter(DataCollectionContext context, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    private static EncoderAdapter();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposeManaged);
    protected DataCollectionContext get_Context();
    protected DataCollectionLogger get_Logger();
    protected DataCollectionEnvironmentContext get_EnvironmentContext();
    public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public EncoderState get_State();
    [CompilerGeneratedAttribute]
private void set_State(EncoderState value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableAudio();
    [CompilerGeneratedAttribute]
public void set_EnableAudio(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableVideo();
    [CompilerGeneratedAttribute]
public void set_EnableVideo(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IsChildTestCase();
    [CompilerGeneratedAttribute]
public void set_IsChildTestCase(bool value);
    protected abstract virtual TimeSpan get_Duration();
    public void Start(DataCollectionContext context, bool isChildTestCase);
    protected abstract virtual void OnStart();
    public void Stop();
    protected abstract virtual void OnStop();
    public void Reset();
    protected virtual void OnReset();
    public ICollection`1<FileTransferInformation> GetOutputFiles();
    protected abstract virtual ICollection`1<FileTransferInformation> OnGetOutputFiles();
    private void CreateOutputDirectory();
    private void DeleteOutputDirectory();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.EncoderPool : object {
    private DataCollectionLogger m_logger;
    private DataCollectionEnvironmentContext m_environmentContext;
    private MediaRecorderConfiguration m_configuration;
    private Stack`1<EncoderAdapter> m_pool;
    private HashSet`1<EncoderAdapter> m_acquiredEncoders;
    private bool m_isDisposed;
    public EncoderPool(DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext, MediaRecorderConfiguration configuration);
    public sealed virtual void Dispose();
    public EncoderAdapter Acquire(DataCollectionContext context);
    public void Release(EncoderAdapter encoder, bool reuseEncoder);
    protected virtual EncoderAdapter CreateEncoder(DataCollectionContext context);
}
public enum Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.EncoderState : Enum {
    public int value__;
    public static EncoderState Initialized;
    public static EncoderState Running;
    public static EncoderState Paused;
    public static EncoderState Finished;
    public static EncoderState Disposed;
}
public static class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.ExecutionUtilities : object {
    internal static bool IsWindowsXP();
    internal static string DetermineEveryoneGroupname();
    internal static string SplitUserNameAndDomain(String& username);
    internal static IpcChannel RegisterIpcClientServerChannel(string ipcPortName, bool currentUserOnly, bool useHigherPriority);
}
public interface Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.IMediaFoundationHelper {
    public EncoderAdapter Encoder { get; public set; }
    public MediaFoundationRecorder Recorder { get; public set; }
    public abstract virtual bool IsRemoteSession();
    public abstract virtual bool IsDesktopExperienceEnabled();
    public abstract virtual EncoderAdapter get_Encoder();
    public abstract virtual void set_Encoder(EncoderAdapter value);
    public abstract virtual MediaFoundationRecorder get_Recorder();
    public abstract virtual void set_Recorder(MediaFoundationRecorder value);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.InvokableThread : object {
    private Thread m_thread;
    private Action m_action;
    private Exception m_actionException;
    private AutoResetEvent m_actionAvailable;
    private AutoResetEvent m_invokeComplete;
    public sealed virtual void Dispose();
    private void ThreadMain();
    public void Invoke(Action action);
    public void BeginInvokeAsync(Action action);
}
public interface Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.IQTMeasurementBlock {
    public abstract virtual void Begin(string s, Object[] args);
    public abstract virtual void Step(string s, Object[] args);
    public abstract virtual void End();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <HResult>k__BackingField;
    public int HResult { get; public set; }
    public MediaFoundationErrorEventArgs(int hResult);
    [CompilerGeneratedAttribute]
public int get_HResult();
    [CompilerGeneratedAttribute]
public void set_HResult(int value);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationHelper : object {
    [CompilerGeneratedAttribute]
private EncoderAdapter <Encoder>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaFoundationRecorder <Recorder>k__BackingField;
    public EncoderAdapter Encoder { get; public set; }
    public MediaFoundationRecorder Recorder { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual EncoderAdapter get_Encoder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Encoder(EncoderAdapter value);
    [CompilerGeneratedAttribute]
public sealed virtual MediaFoundationRecorder get_Recorder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Recorder(MediaFoundationRecorder value);
    public sealed virtual bool IsRemoteSession();
    public sealed virtual bool IsDesktopExperienceEnabled();
    private static bool CheckSystemDLLExists(string strDll);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationRecorder : object {
    [CompilerGeneratedAttribute]
private int <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FrameRate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bitrate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AudioEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VideoEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildTestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private static IMediaFoundationHelper <MFHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MediaFoundationErrorEventArgs> OnError;
    private static string recorderProcessName;
    private static string recorderDirectory;
    private static string recorderProcessVSHostName;
    private static string dllName;
    private static string debugCommandLineArgsFormat;
    private static string mfTraceExeName;
    private static string LogFileFormat;
    private static string logFileTimeStampFormat;
    private static string commandLineArgsFormat;
    private static string recorderExeName;
    private static string MFDebugEnabledProperty;
    private static bool MediaFoundationDebugEnabled;
    private object m_stopLock;
    private bool m_isStopping;
    private RecorderState currentState;
    private Stopwatch durationClock;
    private bool disposed;
    private IMediaRecorder recorder;
    private InvokableThread m_stopthread;
    private Process recorderProcess;
    private MediaRecorderEvent recorderStartEventObject;
    private static string RecorderEventNameFormat;
    private static int RecorderStartTimeout;
    private IpcChannel recorderChannel;
    public int Quality { get; public set; }
    public int FrameRate { get; public set; }
    public int Bitrate { get; public set; }
    public bool AudioEnabled { get; public set; }
    public string OutputPath { get; public set; }
    public TimeSpan Duration { get; }
    public bool VideoEnabled { get; public set; }
    public bool IsChildTestCase { get; public set; }
    public static IMediaFoundationHelper MFHelper { get; public set; }
    private static MediaFoundationRecorder();
    [CompilerGeneratedAttribute]
public int get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(int value);
    [CompilerGeneratedAttribute]
public int get_FrameRate();
    [CompilerGeneratedAttribute]
public void set_FrameRate(int value);
    [CompilerGeneratedAttribute]
public int get_Bitrate();
    [CompilerGeneratedAttribute]
public void set_Bitrate(int value);
    [CompilerGeneratedAttribute]
public bool get_AudioEnabled();
    [CompilerGeneratedAttribute]
public void set_AudioEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public bool get_VideoEnabled();
    [CompilerGeneratedAttribute]
public void set_VideoEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsChildTestCase();
    [CompilerGeneratedAttribute]
public void set_IsChildTestCase(bool value);
    [CompilerGeneratedAttribute]
public static IMediaFoundationHelper get_MFHelper();
    [CompilerGeneratedAttribute]
public static void set_MFHelper(IMediaFoundationHelper value);
    public sealed virtual void Dispose();
    public void Start();
    private void EndRunningVideoRecorderProcesses();
    private void RecorderProcessExited(object sender, EventArgs eventArgs);
    private void StartMediaRecorderProcess(string channelName, string recorderEventName);
    public void Stop();
    private void CleanupWork(Action cleanupAction);
    public void MediaFoundationErrorReceived(object sender, MediaFoundationErrorEventArgs args);
    public static bool IsRemoteSession();
    [CompilerGeneratedAttribute]
public void add_OnError(EventHandler`1<MediaFoundationErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnError(EventHandler`1<MediaFoundationErrorEventArgs> value);
    private static bool InitializeMFDebugEnabled();
    [CompilerGeneratedAttribute]
private void <Stop>b__39_0();
    [CompilerGeneratedAttribute]
private void <Stop>b__39_1();
    [CompilerGeneratedAttribute]
private void <Stop>b__39_2();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationRecorderAdapter : EncoderAdapter {
    private static string ScreenCaptureFileName;
    private string m_screenCaptureFilePath;
    private MediaFoundationRecorder m_recorder;
    private Timer m_drmTimer;
    private TimeSpan m_duration;
    private MediaRecorderConfiguration m_configuration;
    private static UInt32 AUDIO_PLAYBACK_DEVICE_INVALIDATED;
    private static UInt32 AUDIO_CAPTURE_DEVICE_INVALIDATED;
    private IMediaFoundationHelper m_mfHelper;
    public static Func`1<IMediaFoundationHelper> GetMFHelper;
    protected TimeSpan Duration { get; }
    public MediaFoundationRecorderAdapter(DataCollectionContext context, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext, MediaRecorderConfiguration configuration);
    protected virtual void Dispose(bool disposeManaged);
    private void MediaFoundationErrorReceived(object sender, MediaFoundationErrorEventArgs args);
    protected virtual TimeSpan get_Duration();
    protected virtual void OnStart();
    private void DrmCheckTimerElapsed(object sender, ElapsedEventArgs eventArgs);
    private void CheckForDrmWindows();
    protected virtual void OnStop();
    protected virtual void OnReset();
    protected virtual ICollection`1<FileTransferInformation> OnGetOutputFiles();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaRecorderConfiguration : object {
    public static string PropertyNameSendRecordedMediaForPassedTestCase;
    public static string PropertyNameScreenCaptureVideoSettings;
    private static bool SendRecordedMediaForPassedTestCaseDefault;
    private static string XmlElementName;
    private static string SendRecordedMediaForPassedTestCaseXmlLocation;
    private static string OldSaveVideoRecordingForPassedTestCaseName;
    private bool m_sendRecordedMediaForPassedTestCase;
    private ScreenCaptureVideoSettings m_screenCaptureVideoSettings;
    private AudioRecorderSettings m_audioRecorderSettings;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool SendRecordedMediaForPassedTestCase { get; public set; }
    public ScreenCaptureVideoSettings ScreenCaptureVideoSettings { get; public set; }
    public AudioRecorderSettings AudioRecorderSettings { get; }
    public MediaRecorderConfiguration(XmlElement xmlElement);
    private static MediaRecorderConfiguration();
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(PropertyChangedEventHandler value);
    public bool get_SendRecordedMediaForPassedTestCase();
    public void set_SendRecordedMediaForPassedTestCase(bool value);
    public ScreenCaptureVideoSettings get_ScreenCaptureVideoSettings();
    public void set_ScreenCaptureVideoSettings(ScreenCaptureVideoSettings value);
    public AudioRecorderSettings get_AudioRecorderSettings();
    public void Load(XmlElement xmlElement);
    private bool TryReadWMEConfiguration(XmlElement xmlElement, Boolean& saveVideoForPassedTestCase);
    private void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaRecorderException : Exception {
    private bool m_alreadyLogged;
    public bool AlreadyLogged { get; }
    public MediaRecorderException(string message, Exception innerException);
    public MediaRecorderException(string message, bool alreadyLogged, Exception innerException);
    protected MediaRecorderException(SerializationInfo info, StreamingContext context);
    public bool get_AlreadyLogged();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.QTMeasurementBlockFactory : object {
    private static QTNullMeasurementProxy nullProxy;
    private static ProxyCreator modreq(System.Runtime.CompilerServices.IsVolatile) creator;
    private static QTMeasurementBlockFactory();
    public static void SetCreator(ProxyCreator c1);
    public static IQTMeasurementBlock New();
    public static IQTMeasurementBlock BeginNew(string formatStr, Object[] args);
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.QTNullMeasurementProxy : object {
    public sealed virtual void Begin(string s, Object[] args);
    public sealed virtual void Step(string s, Object[] args);
    public sealed virtual void End();
    public sealed virtual void Dispose();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentExceptionMessage { get; }
    internal static string EncoderAdapter_CreateOutputDirectory_Cannot { get; }
    internal static string EncoderAdapter_DeleteOutputDirectory_Cannot { get; }
    internal static string ErrorStartingWmvCore { get; }
    internal static string FailedToReadOldConfigurationSettings { get; }
    internal static string FailedToStartRecorderProcess { get; }
    internal static string MediaFoundation_OnGetOutputFiles_ScreenCaptureDescription { get; }
    internal static string MediaFoundation_OnScreenCaptureFinished_OfficeIrm { get; }
    internal static string MediaFoundation_OnStart_Error { get; }
    internal static string MediaRecorderDataAdapter_MoreThanOneDisplay { get; }
    internal static string MFAudioDeviceError { get; }
    internal static string MFGenericSessionError { get; }
    internal static string MFRemoteAudioWarning { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentExceptionMessage();
    internal static string get_EncoderAdapter_CreateOutputDirectory_Cannot();
    internal static string get_EncoderAdapter_DeleteOutputDirectory_Cannot();
    internal static string get_ErrorStartingWmvCore();
    internal static string get_FailedToReadOldConfigurationSettings();
    internal static string get_FailedToStartRecorderProcess();
    internal static string get_MediaFoundation_OnGetOutputFiles_ScreenCaptureDescription();
    internal static string get_MediaFoundation_OnScreenCaptureFinished_OfficeIrm();
    internal static string get_MediaFoundation_OnStart_Error();
    internal static string get_MediaRecorderDataAdapter_MoreThanOneDisplay();
    internal static string get_MFAudioDeviceError();
    internal static string get_MFGenericSessionError();
    internal static string get_MFRemoteAudioWarning();
}
internal static class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.ScreenCaptureHelper : object {
    internal static int virtualScreenHeight;
    internal static int virtualScreenWidth;
    internal static int topLeftCornerOfScreenX;
    internal static int topLeftCornerOfScreenY;
    internal static string ImageFileName;
    internal static int MaxStringLength;
    private static IntPtr Handle;
    private static bool drmWindowExists;
    private static string windowText;
    internal static bool EnumerateForDRMWindows(IntPtr currentHandle, String& drmWindowText);
    internal static void SetVirtualScreenSize();
    internal static bool EnumCallBack(IntPtr wnd, IntPtr param);
    internal static void LimitRectToScreenBoundary(Rectangle& rect);
}
internal static class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.ScreenCaptureNativeMethods : object {
    public static bool GetWindowRect(IntPtr hwnd, RECT& rc);
    public static bool IsWindowVisible(IntPtr hWnd);
    public static IntPtr GetForegroundWindow();
    public static int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);
    public static bool IsIconic(IntPtr hWnd);
    public static bool IsWindow(IntPtr hWnd);
    public static int DRMIsWindowProtected(IntPtr windowHandle, Boolean& isProtected);
    public static bool EnumWindows(EnumWindowCallBack callBack, IntPtr param);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.ScreenCaptureVideoSettings : object {
    public static string PropertyNameFrameRate;
    public static string PropertyNameBitRate;
    public static string PropertyNameQuality;
    private static int FrameRateDefault;
    private static int BitRateDefault;
    private static int QualityDefault;
    private static int FrameRateMin;
    private static int FrameRateMax;
    private static int BitRateMin;
    private static int BitRateMax;
    private static int QualityMin;
    private static int QualityMax;
    private static string ScreenCaptureVideoElementName;
    private static string FrameRateXmlLocation;
    private static string BitRateXmlLocation;
    private static string QualityXmlLocation;
    private int m_frameRate;
    private int m_bitRate;
    private int m_quality;
    public int FrameRate { get; public set; }
    public int BitRate { get; public set; }
    public int Quality { get; public set; }
    public ScreenCaptureVideoSettings(XmlElement xmlElement);
    private static ScreenCaptureVideoSettings();
    public int get_FrameRate();
    public void set_FrameRate(int value);
    public int get_BitRate();
    public void set_BitRate(int value);
    public int get_Quality();
    public void set_Quality(int value);
    public void Load(XmlElement xmlElement);
    public void Reset();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.TestInformation : object {
    private DataCollectionContext m_context;
    [CompilerGeneratedAttribute]
private EncoderAdapter <Encoder>k__BackingField;
    public DataCollectionContext Context { get; }
    public EncoderAdapter Encoder { get; public set; }
    public TestInformation(DataCollectionContext context);
    public DataCollectionContext get_Context();
    [CompilerGeneratedAttribute]
public EncoderAdapter get_Encoder();
    [CompilerGeneratedAttribute]
public void set_Encoder(EncoderAdapter value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.TestTracker : object {
    private Dictionary`2<DataCollectionContext, TestInformation> m_testsByContext;
    public TestInformation Item { get; }
    public void Track(TestInformation test);
    public TestInformation get_Item(DataCollectionContext context);
    public void Forget(DataCollectionContext context);
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/VideoRecorder/1.0")]
[DataCollectorFriendlyNameAttribute("Screen and Voice Recorder")]
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.VideoRecorderDataCollector : DataCollector {
    private MediaRecorderConfiguration m_configuration;
    private DataCollectionEvents m_events;
    private DataCollectionSink m_dataSink;
    private DataCollectionLogger m_logger;
    private DataCollectionEnvironmentContext m_environmentContext;
    private EncoderPool m_encoderPool;
    private TestTracker m_testTracker;
    private bool m_isDisposed;
    public virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    protected virtual void Dispose(bool disposeManagedObjects);
    private void ValidateDisplayDevice();
    private void ValidateDesktopExperience();
    private bool IsDesktopExperienceEnabled();
    private void OnTestCaseStart(object sender, TestCaseStartEventArgs e);
    private void OnTestCaseEnd(object sender, TestCaseEndEventArgs e);
    private void RunDataAdapterCall(DataCollectionContext context, Action action);
    private bool TryCatchAndLogError(DataCollectionContext context, Action action);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.XmlPersistence : object {
    private XmlNamespaceManager xmlNamespaceManager;
    private static Dictionary`2<string, string> queryCache;
    private static string DateTimePersistenceFormat;
    private static string DateTimeUtcPersistenceFormat;
    private static Type TimeSpanType;
    private static Type DateTimeType;
    private static Type UriType;
    private static Type GuidType;
    private static Type ByteArrayType;
    private static Type TestResultType;
    private static Type BoolType;
    private static XmlPersistence();
    private string ProcessXPathQuery(string queryIn);
    public XmlNode LocationToXmlNode(XmlElement element, string location);
    public T LoadSimpleField(XmlElement xml, string location, T defaultValue);
    public string LoadXmlValue(XmlElement xml, string location);
    private object LoadSimpleField(XmlElement xml, string location, Type fieldType, object defaultValue);
    private object GetProperValue(object value, Type fieldType);
    private static DateTime DateTimeFromRaw(object value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
