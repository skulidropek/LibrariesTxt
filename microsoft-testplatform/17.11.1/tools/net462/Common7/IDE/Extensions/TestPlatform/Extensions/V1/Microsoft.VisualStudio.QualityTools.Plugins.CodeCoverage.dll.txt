[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.QualityTools.Plugins.CodeCoverage.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CodeCoverageDataCollector { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CodeCoverageDataCollector();
}
public class Microsoft.VisualStudio.TestTools.CodeCoverage.CodeCoverageCollectionException : EqtException {
    protected CodeCoverageCollectionException(SerializationInfo info, StreamingContext context);
    public CodeCoverageCollectionException(string message, Exception innerException);
    public CodeCoverageCollectionException(string message);
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/CodeCoverage/1.0")]
[DataCollectorFriendlyNameAttribute("CodeCoverageDataCollector", "True")]
[DataCollectorConfigurationEditorAttribute("configurationeditor://Microsoft/CodeCoverageEditor/1.0")]
[DataCollectorTestClientRestrictionAttribute]
[AgentRoleTypeRestrictionAttribute]
[DataCollectorVersionObsoleteAttribute("datacollector://Microsoft/CodeCoverage/2.0", "Microsoft.VisualStudio.Coverage.DynamicCoverageDataCollector, Microsoft.VisualStudio.TraceCollector", "Microsoft.VisualStudio.Coverage.ConfigurationConverter2010, Microsoft.VisualStudio.TraceCollector")]
internal class Microsoft.VisualStudio.TestTools.CodeCoverage.CoveragePlugIn : object {
    private static Monitor m_monitor;
    private Guid m_testRunId;
    private string m_oldPath;
    private string m_outputDirectory;
    private string m_deploymentDirectory;
    private List`1<AspNetHelper> m_aspHelpers;
    private IResultSink m_resultSink;
    private Guid m_instanceId;
    private AspNetHelper m_firstIISHelper;
    private StringDictionary m_userNames;
    private string PluginPath { get; }
    public sealed virtual void BeforeExecutionStarted(TestRun run, IResultSink sink, IDataCollectionRunContext context);
    public sealed virtual void AfterExecutionCompleted(TestRun run, IResultSink sink, IDataCollectionRunContext context);
    public sealed virtual bool BeforeTestStarted(IDataCollectionRunContext context, TestExecId id);
    public sealed virtual void AfterTestCompleted(IDataCollectionRunContext context, TestExecId id);
    public void OnBinaryInstrumentationSuccess(string filePath);
    private void BinaryCopyingFailed(string filePath, string destinationDirectory, Exception ex);
    public void OnBinaryInstrumentationError(string errorMessage);
    public void OnBinaryInstrumentationWarning(string warning);
    private string get_PluginPath();
    private void StartMonitor(Guid runId, bool perTestCoverageEnabled);
    private void StopMonitor(Guid runId, bool perTestCoverageEnabled);
    private void MonitorNotify(IResultSink sink, Guid id, VoidDelegate notifier);
    private void ReportException(IResultSink sink, Exception e);
    protected void ReportError(IResultSink sink, string errorText);
    protected string PerformanceToolsPath();
    private void SetEnvironment();
    private void RestoreEnvironment();
    private static string GetOutputPath(IDataCollectionRunContext context);
    [ConditionalAttribute("TRACE")]
private static void TraceIt(string message, Object[] pars);
    private void InitAspNetInstrumentation(TestRun testRun);
    private void InitAspNet(TestRun testRun);
    private void CleanupAspNetListening();
    private void InitPostInstrumentationListening();
    private string ResolveDirectory(string directory, TestRunConfiguration runConfig);
    private void CleanupAspNetSupport();
}
