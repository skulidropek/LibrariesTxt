internal class Microsoft.VisualStudio.TestTools.DataCollection.EventLog.EventLogCollectorException : Exception {
    public EventLogCollectorException(string localizedMessage, Exception innerException);
    protected EventLogCollectorException(SerializationInfo info, StreamingContext context);
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/EventLog/1.0")]
[DataCollectorFriendlyNameAttribute("Execution_Agent_DataCollectors_EventLog_FriendlyName", "True")]
[DataCollectorDescriptionAttribute("Execution_Agent_DataCollectors_EventLog_Description", "True")]
[DataCollectorConfigurationEditorAttribute("configurationeditor://Microsoft/EventLogEditor/1.0")]
[DataCollectorSupportsTailoredApplicationsAttribute("True")]
public class Microsoft.VisualStudio.TestTools.DataCollection.EventLog.EventLogDataCollector : DataCollector {
    private static string DEFAULT_URI;
    private static string RootName;
    private List`1<string> eventLogDirectories;
    private static string eventLogFileName;
    private DataCollectionEvents m_events;
    private DataCollectionSink m_dataSink;
    private DataCollectionLogger m_logger;
    private EventHandler`1<SessionStartEventArgs> m_sessionStartEventHandler;
    private EventHandler`1<SessionEndEventArgs> m_sessionEndEventHandler;
    private EventHandler`1<SessionPauseEventArgs> m_sessionPauseEventHandler;
    private EventHandler`1<SessionResumeEventArgs> m_sessionResumeEventHandler;
    private EventHandler`1<TestCaseStartEventArgs> m_testCaseStartEventHandler;
    private EventHandler`1<TestCasePauseEventArgs> m_testCasePauseEventHandler;
    private EventHandler`1<TestCaseResumeEventArgs> m_testCaseResumeEventHandler;
    private EventHandler`1<TestCaseEndEventArgs> m_testCaseEndEventHandler;
    private EventHandler`1<TestCaseResetEventArgs> m_testCaseResetEventHandler;
    private EventHandler`1<DataRequestEventArgs> m_dataRequestEventHandler;
    private List`1<string> m_eventLogNames;
    private List`1<string> m_eventSources;
    private List`1<EventLogEntryType> m_entryTypes;
    private int m_maxEntries;
    private bool m_collectForInnerTests;
    private Dictionary`2<DataCollectionContext, EventLogCollectorContextData> m_contextData;
    internal static string EventLogFileName { get; }
    internal static string FriendlyName { get; }
    internal static string Uri { get; }
    internal DataCollectionLogger Logger { get; }
    internal int MaxEntries { get; }
    internal List`1<string> EventSources { get; }
    internal List`1<EventLogEntryType> EntryTypes { get; }
    internal Dictionary`2<DataCollectionContext, EventLogCollectorContextData> ContextData { get; }
    private static EventLogDataCollector();
    public virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext dataCollectionEnvironmentContext);
    private static bool GetBoolConfigSetting(CollectorNameValueConfigurationManager nameValueSettings, string settingName, bool defaultValue);
    protected virtual void Dispose(bool disposing);
    private void OnSessionStart(object sender, SessionStartEventArgs e);
    private void OnSessionEnd(object sender, SessionEndEventArgs e);
    private void OnSessionPause(object sender, SessionPauseEventArgs e);
    private void OnSessionResume(object sender, SessionResumeEventArgs e);
    private void OnTestCaseStart(object sender, TestCaseStartEventArgs e);
    private void OnDataRequest(object sender, DataRequestEventArgs e);
    private void OnTestCaseEnd(object sender, TestCaseEndEventArgs e);
    private void OnTestCaseReset(object sender, TestCaseResetEventArgs e);
    private void OnTestCasePause(object sender, TestCasePauseEventArgs e);
    private void OnTestCaseResume(object sender, TestCaseResumeEventArgs e);
    private void RemoveTempEventLogDirs(List`1<string> tempDirs);
    private void DeleteEmptyDirectory(string dirPath);
    private static List`1<string> ParseCommaSeparatedList(string commaSeparatedList);
    private void StartCollectionForContext(DataCollectionContext dataCollectionContext, bool isSessionContext);
    private void WriteCollectedEventLogEntries(DataCollectionContext dataCollectionContext, bool terminateCollectionForContext, TimeSpan requestedDuration, DateTime timeRequestRecieved);
    private EventLogCollectorContextData GetEventLogContext(DataCollectionContext dataCollectionContext);
    internal static string get_EventLogFileName();
    internal static string get_FriendlyName();
    internal static string get_Uri();
    internal DataCollectionLogger get_Logger();
    internal int get_MaxEntries();
    internal List`1<string> get_EventSources();
    internal List`1<EventLogEntryType> get_EntryTypes();
    internal Dictionary`2<DataCollectionContext, EventLogCollectorContextData> get_ContextData();
}
[DataCollectorConfigurationEditorTypeUriAttribute("configurationeditor://Microsoft/EventLogEditor/1.0")]
internal class Microsoft.VisualStudio.TestTools.DataCollection.EventLog.EventLogEditorPage : UserControl {
    private DataCollectorSettings m_settings;
    private CollectorNameValueConfigurationManager m_nameValueSettings;
    private Dictionary`2<string, string> m_eventLogDisplayNameMap;
    private Dictionary`2<string, string> m_eventLogNameReverseLookupMap;
    private Dictionary`2<string, string> m_eventTypeDisplayNameMap;
    private Dictionary`2<string, string> m_eventTypeNameReverseLookupMap;
    private IContainer components;
    private CheckedListBox EventTypesBox;
    private CheckBox InnerTestCollectorCheckbox;
    private NumericUpDown MaximumEntries;
    private CheckedListBox LogsToWatchBox;
    private TableLayoutPanel configurationLayout;
    private Label eventlogsToCollectLabel;
    private Label eventLogTypesLabel;
    private Label maxEntriesLabel;
    public string Caption { get; }
    public string Description { get; }
    public string get_Caption();
    public string get_Description();
    public sealed virtual void Initialize(IServiceProvider serviceProvider, DataCollectorSettings settings);
    public sealed virtual void ResetToAgentDefaults();
    public sealed virtual DataCollectorSettings SaveData();
    public sealed virtual bool VerifyData();
    private void SetEventTypesItems(string itemsList);
    private void SetEventLogItems(string itemsList);
    private string GetEventLogItems();
    private string GetEventTypeItems();
    private void InitEventLogDisplayNames();
    private void UncheckItemsInListBox(CheckedListBox listBox);
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal static class Microsoft.VisualStudio.TestTools.DataCollection.EventLog.EventLogShared : object {
    public static string SETTING_EVENT_LOGS;
    public static string SETTING_EVENT_SOURCES;
    public static string SETTING_ENTRY_TYPES;
    public static string SETTING_MAX_ENTRIES;
    public static string SETTING_COLLECT_FOR_INNER_TESTS;
    public static string SETTING_FILE_TYPE;
    public static string DEFAULT_EVENT_LOGS;
    public static string DEFAULT_EVENT_SOURCES;
    public static string DEFAULT_ENTRY_TYPES;
    public static int DEFAULT_MAX_ENTRIES;
    public static bool DEFAULT_COLLECT_FOR_INNER_TESTS;
}
internal static class Microsoft.VisualStudio.TestTools.DataCollection.EventLog.EventLogXmlWriter : object {
    public static void WriteEventLogEntriesToXmlFile(string xmlFilePath, List`1<EventLogEntry> eventLogEntries, DateTime minDate, DateTime maxDate);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.DataCollection.EventLog.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CollectInnerTextCheckBoxText { get; }
    internal static string EditorCaption { get; }
    internal static string EditorDescription { get; }
    internal static string EventLogsToCollectText { get; }
    internal static string EventTypeErrorDisplayText { get; }
    internal static string EventTypeFailureAuditDisplayText { get; }
    internal static string EventTypeInformationDisplayText { get; }
    internal static string EventTypesToCollectText { get; }
    internal static string EventTypeSuccessAuditDisplayText { get; }
    internal static string EventTypeWarningDisplayText { get; }
    internal static string Execution_Agent_DataCollectors_EventLog_CleanupException { get; }
    internal static string Execution_Agent_DataCollectors_EventLog_ContextNotFoundException { get; }
    internal static string Execution_Agent_DataCollectors_EventLog_Description { get; }
    internal static string Execution_Agent_DataCollectors_EventLog_EventsLostWarning { get; }
    internal static string Execution_Agent_DataCollectors_EventLog_FriendlyName { get; }
    internal static string InvalidConfigurationXml { get; }
    internal static string MaxEntriesToLogText { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CollectInnerTextCheckBoxText();
    internal static string get_EditorCaption();
    internal static string get_EditorDescription();
    internal static string get_EventLogsToCollectText();
    internal static string get_EventTypeErrorDisplayText();
    internal static string get_EventTypeFailureAuditDisplayText();
    internal static string get_EventTypeInformationDisplayText();
    internal static string get_EventTypesToCollectText();
    internal static string get_EventTypeSuccessAuditDisplayText();
    internal static string get_EventTypeWarningDisplayText();
    internal static string get_Execution_Agent_DataCollectors_EventLog_CleanupException();
    internal static string get_Execution_Agent_DataCollectors_EventLog_ContextNotFoundException();
    internal static string get_Execution_Agent_DataCollectors_EventLog_Description();
    internal static string get_Execution_Agent_DataCollectors_EventLog_EventsLostWarning();
    internal static string get_Execution_Agent_DataCollectors_EventLog_FriendlyName();
    internal static string get_InvalidConfigurationXml();
    internal static string get_MaxEntriesToLogText();
}
