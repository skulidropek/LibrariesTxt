[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.AudioRecorderSettings : object {
    [CompilerGeneratedAttribute]
private int <Bitrate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerSample>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfChannels>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SamplesPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private static string ScreenCaptureVideoElementName;
    private static string EnabledXmlLocation;
    public static string PropertyNameEnabled;
    private bool m_enabled;
    private static bool EnabledDefault;
    private static int BitrateDefault;
    private static int BitsPerSampleDefault;
    private static int NumberOfChannelsDefault;
    private static int SamplesPerSecondDefault;
    public bool Enabled { get; public set; }
    public int Bitrate { get; public set; }
    public int BitsPerSample { get; public set; }
    public int NumberOfChannels { get; public set; }
    public int SamplesPerSecond { get; public set; }
    public AudioRecorderSettings(XmlElement xmlElement);
    private static AudioRecorderSettings();
    public void Reset();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public int get_Bitrate();
    [CompilerGeneratedAttribute]
public void set_Bitrate(int value);
    [CompilerGeneratedAttribute]
public int get_BitsPerSample();
    [CompilerGeneratedAttribute]
public void set_BitsPerSample(int value);
    [CompilerGeneratedAttribute]
public int get_NumberOfChannels();
    [CompilerGeneratedAttribute]
public void set_NumberOfChannels(int value);
    [CompilerGeneratedAttribute]
public int get_SamplesPerSecond();
    [CompilerGeneratedAttribute]
public void set_SamplesPerSecond(int value);
    private void RaisePropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Load(XmlElement xmlElement, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement xmlElement, XmlTestStoreParameters parameters);
    private bool ShouldAudioCollectorBeEnabled();
}
public abstract class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.EncoderAdapter : object {
    private static string TempDirectory;
    protected bool m_isConstructed;
    private DataCollectionContext m_context;
    private DataCollectionLogger m_logger;
    private DataCollectionEnvironmentContext m_environmentContext;
    private string m_outputDirectory;
    private PauseTimeTracker m_pauseTimeTracker;
    private MediaRecorderMetadata m_mediaMetadata;
    [CompilerGeneratedAttribute]
private EncoderState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableAudio>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableVideo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildTestCase>k__BackingField;
    protected DataCollectionContext Context { get; }
    protected DataCollectionLogger Logger { get; }
    protected DataCollectionEnvironmentContext EnvironmentContext { get; }
    public string OutputDirectory { get; }
    public EncoderState State { get; private set; }
    internal MediaRecorderMetadata MediaMetadata { get; }
    public Nullable`1<bool> EnableAudio { get; public set; }
    public Nullable`1<bool> EnableVideo { get; public set; }
    public bool IsChildTestCase { get; public set; }
    protected TimeSpan Duration { get; }
    protected EncoderAdapter(DataCollectionContext context, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    private static EncoderAdapter();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposeManaged);
    protected DataCollectionContext get_Context();
    protected DataCollectionLogger get_Logger();
    protected DataCollectionEnvironmentContext get_EnvironmentContext();
    public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public EncoderState get_State();
    [CompilerGeneratedAttribute]
private void set_State(EncoderState value);
    internal MediaRecorderMetadata get_MediaMetadata();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableAudio();
    [CompilerGeneratedAttribute]
public void set_EnableAudio(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableVideo();
    [CompilerGeneratedAttribute]
public void set_EnableVideo(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IsChildTestCase();
    [CompilerGeneratedAttribute]
public void set_IsChildTestCase(bool value);
    protected abstract virtual TimeSpan get_Duration();
    public void Start(DataCollectionContext context, TcmInformation tcmInformation, bool isChildTestCase);
    protected abstract virtual void OnStart();
    public void Pause();
    protected abstract virtual void OnPause();
    public void Resume();
    protected abstract virtual void OnResume();
    public void Stop();
    protected abstract virtual void OnStop();
    public void Reset();
    protected virtual void OnReset();
    public void InsertBugMarker(TimeSpan relevantTestingDuration);
    public ICollection`1<FileTransferInformation> GetOutputFiles();
    protected abstract virtual ICollection`1<FileTransferInformation> OnGetOutputFiles();
    private void CreateOutputDirectory();
    private void DeleteOutputDirectory();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.EncoderPool : object {
    private DataCollectionLogger m_logger;
    private DataCollectionEnvironmentContext m_environmentContext;
    private MediaRecorderConfiguration m_configuration;
    private Stack`1<EncoderAdapter> m_pool;
    private HashSet`1<EncoderAdapter> m_acquiredEncoders;
    private bool m_isDisposed;
    public EncoderPool(DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext, MediaRecorderConfiguration configuration);
    public sealed virtual void Dispose();
    public EncoderAdapter Acquire(DataCollectionContext context);
    public void Release(EncoderAdapter encoder, bool reuseEncoder);
    protected virtual EncoderAdapter CreateEncoder(DataCollectionContext context);
}
public enum Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.EncoderState : Enum {
    public int value__;
    public static EncoderState Initialized;
    public static EncoderState Running;
    public static EncoderState Paused;
    public static EncoderState Finished;
    public static EncoderState Disposed;
}
public interface Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.IMediaFoundationHelper {
    public EncoderAdapter Encoder { get; public set; }
    public MediaFoundationRecorder Recorder { get; public set; }
    public abstract virtual int GetDefaultAudioDevice(String& deviceName);
    public abstract virtual bool IsRemoteSession();
    public abstract virtual bool IsDesktopExperienceEnabled();
    public abstract virtual EncoderAdapter get_Encoder();
    public abstract virtual void set_Encoder(EncoderAdapter value);
    public abstract virtual MediaFoundationRecorder get_Recorder();
    public abstract virtual void set_Recorder(MediaFoundationRecorder value);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.InvokableThread : object {
    private Thread m_thread;
    private Action m_action;
    private Exception m_actionException;
    private AutoResetEvent m_actionAvailable;
    private AutoResetEvent m_invokeComplete;
    public sealed virtual void Dispose();
    private void ThreadMain();
    public void Invoke(Action action);
    public void BeginInvokeAsync(Action action);
    public void EndInvokeAsync();
    public T Invoke(Func`1<T> func);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <HResult>k__BackingField;
    public int HResult { get; public set; }
    public MediaFoundationErrorEventArgs(int hResult);
    [CompilerGeneratedAttribute]
public int get_HResult();
    [CompilerGeneratedAttribute]
public void set_HResult(int value);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationHelper : object {
    [CompilerGeneratedAttribute]
private EncoderAdapter <Encoder>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaFoundationRecorder <Recorder>k__BackingField;
    public EncoderAdapter Encoder { get; public set; }
    public MediaFoundationRecorder Recorder { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual EncoderAdapter get_Encoder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Encoder(EncoderAdapter value);
    [CompilerGeneratedAttribute]
public sealed virtual MediaFoundationRecorder get_Recorder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Recorder(MediaFoundationRecorder value);
    public sealed virtual int GetDefaultAudioDevice(String& deviceName);
    public sealed virtual bool IsRemoteSession();
    public sealed virtual bool IsDesktopExperienceEnabled();
    private static bool CheckSystemDLLExists(string strDll);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationRecorder : object {
    [CompilerGeneratedAttribute]
private int <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FrameRate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bitrate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AudioEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VideoEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildTestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private static IMediaFoundationHelper <MFHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MediaFoundationErrorEventArgs> OnError;
    private static string recorderProcessName;
    private static string recorderProcessVSHostName;
    private static string dllName;
    private static string debugCommandLineArgsFormat;
    private static string mfTraceExeName;
    private static string LogFileFormat;
    private static string logFileTimeStampFormat;
    private static string commandLineArgsFormat;
    private static string recorderExeName;
    private static string MFDebugEnabledProperty;
    private static bool MediaFoundationDebugEnabled;
    private object m_stopLock;
    private bool m_isStopping;
    private RecorderState currentState;
    private Stopwatch durationClock;
    private bool disposed;
    private IMediaRecorder recorder;
    private InvokableThread m_stopthread;
    private Process recorderProcess;
    private MediaRecorderEvent recorderStartEventObject;
    private static string RecorderEventNameFormat;
    private static int RecorderStartTimeout;
    private IpcChannel recorderChannel;
    public int Quality { get; public set; }
    public int FrameRate { get; public set; }
    public int Bitrate { get; public set; }
    public bool AudioEnabled { get; public set; }
    public string OutputPath { get; public set; }
    public TimeSpan Duration { get; }
    public bool VideoEnabled { get; public set; }
    public bool IsChildTestCase { get; public set; }
    public static IMediaFoundationHelper MFHelper { get; public set; }
    private static MediaFoundationRecorder();
    [CompilerGeneratedAttribute]
public int get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(int value);
    [CompilerGeneratedAttribute]
public int get_FrameRate();
    [CompilerGeneratedAttribute]
public void set_FrameRate(int value);
    [CompilerGeneratedAttribute]
public int get_Bitrate();
    [CompilerGeneratedAttribute]
public void set_Bitrate(int value);
    [CompilerGeneratedAttribute]
public bool get_AudioEnabled();
    [CompilerGeneratedAttribute]
public void set_AudioEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public bool get_VideoEnabled();
    [CompilerGeneratedAttribute]
public void set_VideoEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsChildTestCase();
    [CompilerGeneratedAttribute]
public void set_IsChildTestCase(bool value);
    [CompilerGeneratedAttribute]
public static IMediaFoundationHelper get_MFHelper();
    [CompilerGeneratedAttribute]
public static void set_MFHelper(IMediaFoundationHelper value);
    public sealed virtual void Dispose();
    public void Start();
    private void EndRunningVideoRecorderProcesses();
    private void RecorderProcessExited(object sender, EventArgs eventArgs);
    private void StartMediaRecorderProcess(string channelName, string recorderEventName);
    public void Pause();
    public bool IsPaused();
    public void Resume();
    public void Stop();
    private void CleanupWork(Action cleanupAction);
    public static string ValidateDefaultAudioDevice();
    public void MediaFoundationErrorReceived(object sender, MediaFoundationErrorEventArgs args);
    public static bool IsRemoteSession();
    public static string GetAudioDevice();
    [CompilerGeneratedAttribute]
public void add_OnError(EventHandler`1<MediaFoundationErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnError(EventHandler`1<MediaFoundationErrorEventArgs> value);
    private static bool InitializeMFDebugEnabled();
    internal static int GetDefaultAudioDeviceName(String& deviceName);
    [CompilerGeneratedAttribute]
private void <Stop>b__42_0();
    [CompilerGeneratedAttribute]
private void <Stop>b__42_1();
    [CompilerGeneratedAttribute]
private void <Stop>b__42_2();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaFoundationRecorderAdapter : EncoderAdapter {
    private static string ScreenCaptureFileName;
    private string m_screenCaptureFilePath;
    private MediaFoundationRecorder m_recorder;
    private Timer m_drmTimer;
    private TimeSpan m_duration;
    private MediaRecorderConfiguration m_configuration;
    private static UInt32 AUDIO_PLAYBACK_DEVICE_INVALIDATED;
    private static UInt32 AUDIO_CAPTURE_DEVICE_INVALIDATED;
    private IMediaFoundationHelper m_mfHelper;
    public static Func`1<IMediaFoundationHelper> GetMFHelper;
    protected TimeSpan Duration { get; }
    public MediaFoundationRecorderAdapter(DataCollectionContext context, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext, MediaRecorderConfiguration configuration);
    protected virtual void Dispose(bool disposeManaged);
    private void MediaFoundationErrorReceived(object sender, MediaFoundationErrorEventArgs args);
    protected virtual TimeSpan get_Duration();
    protected virtual void OnStart();
    private void DrmCheckTimerElapsed(object sender, ElapsedEventArgs eventArgs);
    private void CheckForDrmWindows();
    protected virtual void OnPause();
    protected virtual void OnResume();
    protected virtual void OnStop();
    protected virtual void OnReset();
    protected virtual ICollection`1<FileTransferInformation> OnGetOutputFiles();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaRecorderConfiguration : object {
    public static string PropertyNameSendRecordedMediaForPassedTestCase;
    public static string PropertyNameScreenCaptureVideoSettings;
    private static bool SendRecordedMediaForPassedTestCaseDefault;
    private static string XmlElementName;
    private static string SendRecordedMediaForPassedTestCaseXmlLocation;
    private static string OldSaveVideoRecordingForPassedTestCaseName;
    private bool m_sendRecordedMediaForPassedTestCase;
    private ScreenCaptureVideoSettings m_screenCaptureVideoSettings;
    private AudioRecorderSettings m_audioRecorderSettings;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public bool SendRecordedMediaForPassedTestCase { get; public set; }
    public ScreenCaptureVideoSettings ScreenCaptureVideoSettings { get; public set; }
    public AudioRecorderSettings AudioRecorderSettings { get; }
    public MediaRecorderConfiguration(XmlElement xmlElement);
    private static MediaRecorderConfiguration();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public bool get_SendRecordedMediaForPassedTestCase();
    public void set_SendRecordedMediaForPassedTestCase(bool value);
    public ScreenCaptureVideoSettings get_ScreenCaptureVideoSettings();
    public void set_ScreenCaptureVideoSettings(ScreenCaptureVideoSettings value);
    public AudioRecorderSettings get_AudioRecorderSettings();
    public sealed virtual void Save(XmlElement xmlElement, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement xmlElement, XmlTestStoreParameters parameters);
    private bool TryReadWMEConfiguration(XmlElement xmlElement, Boolean& saveVideoForPassedTestCase);
    private void RaisePropertyChanged(string propertyName);
    public void Reset();
}
[DataCollectorConfigurationEditorTypeUriAttribute("configurationeditor://Microsoft/VideoRecorder/1.0")]
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaRecorderConfigurationEditor : UserControl {
    private DataCollectorSettings m_settings;
    private MediaRecorderConfiguration m_configuration;
    private IContainer components;
    private ElementHost m_elementHost;
    public sealed virtual void Initialize(IServiceProvider serviceProvider, DataCollectorSettings settings);
    public sealed virtual void ResetToAgentDefaults();
    public sealed virtual DataCollectorSettings SaveData();
    public sealed virtual bool VerifyData();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaRecorderConfigurationEditorUI : UserControl {
    internal CheckBox m_recordAudio_checkBox;
    internal TextBlock m_recordAudio_textBlock;
    internal CheckBox m_sendRecordedMediaForPassedTestCase_checkBox;
    internal TextBlock m_sendRecordedMediaForPassedTestCase_textBlock;
    internal Grid m_videoQualityGrid;
    internal TextBlock m_videoQualityLbl;
    internal ComboBox m_frameRateCombo;
    internal ComboBox m_bitRateCombo;
    internal ComboBox m_qualityCombo;
    private bool _contentLoaded;
    public MediaRecorderConfigurationEditorUI(MediaRecorderConfiguration configuration);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public abstract class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.MediaRecorderDataAdapter : DataCollector {
    private MediaRecorderConfiguration m_configuration;
    private DataCollectionEvents m_events;
    private DataCollectionSink m_dataSink;
    private DataCollectionLogger m_logger;
    private DataCollectionEnvironmentContext m_environmentContext;
    private EncoderPool m_encoderPool;
    private TestTracker m_testTracker;
    private bool m_isDisposed;
    private Nullable`1<bool> m_overrideAudioRecoderSettings;
    private Nullable`1<bool> m_overrideVideoRecoderSettings;
    public virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    private void OnCustomNotification(object sender, CustomNotificationEventArgs eventArgs);
    private void ValidateDisplayDevice();
    private bool ValidateAudioDevice();
    private void ValidateDesktopExperience();
    private bool IsDesktopExperienceEnabled();
    protected virtual void Dispose(bool disposeManagedObjects);
    private void OnTestCaseStart(object sender, TestCaseStartEventArgs e);
    private void OnTestCasePause(object sender, TestCasePauseEventArgs e);
    private void OnTestCaseResume(object sender, TestCaseResumeEventArgs e);
    private void OnDataRequest(object sender, DataRequestEventArgs e);
    private void OnTestCaseReset(object sender, TestCaseResetEventArgs e);
    private void OnTestCaseEnd(object sender, TestCaseEndEventArgs e);
    private void RunDataAdapterCall(DataCollectionContext context, Action action);
    private bool TryCatchAndLogError(DataCollectionContext context, Action action);
    private StreamTransferInformation CreateMetadataStreamTransferInformation(TestInformation test, RequestId requestId);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.PauseTimeTracker : object {
    private List`1<DateTime> m_pauseTimes;
    private List`1<DateTime> m_resumeTimes;
    public void Pause();
    public void Resume();
    public void Reset();
    public TimeSpan PausedDurationInLast(TimeSpan spanOfRealTime);
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.Resources : object {
    internal static ResourceManager ResourceManager;
    public static EqtMessage ErrorStartingWmvCore { get; }
    public static EqtMessage MediaFoundation_DefaultDeviceGenericError { get; }
    public static EqtMessage MediaFoundation_DefaultDeviceNotFoundErrorRemote { get; }
    public static EqtMessage MediaFoundation_DefaultDeviceOSError { get; }
    public static EqtMessage MediaFoundation_OnGetOutputFiles_ScreenCaptureDescription { get; }
    public static EqtMessage MediaFoundation_OnScreenCaptureFinished_OfficeIrm { get; }
    public static EqtMessage MediaFoundation_OnStart_Error { get; }
    public static EqtMessage FailedToReadOldConfigurationSettings { get; }
    public static EqtMessage FailedToStartRecorderProcess { get; }
    public static EqtMessage MediaRecorderDataAdapter_Description { get; }
    public static EqtMessage MediaRecorderDataAdapter_FriendlyName { get; }
    public static EqtMessage MediaRecorderMetadata_StreamTransfer_Description { get; }
    public static EqtMessage MFRemoteAudioWarning { get; }
    public static EqtMessage MFAudioDeviceError { get; }
    private static Resources();
    public static EqtMessage EncoderAdapter_CreateOutputDirectory_Cannot(object param0);
    public static EqtMessage EncoderAdapter_DeleteOutputDirectory_Cannot(object param0, object param1);
    public static EqtMessage get_ErrorStartingWmvCore();
    public static EqtMessage MediaFoundation_AudioRecordingDisabled(object param0);
    public static EqtMessage get_MediaFoundation_DefaultDeviceGenericError();
    public static EqtMessage get_MediaFoundation_DefaultDeviceNotFoundErrorRemote();
    public static EqtMessage get_MediaFoundation_DefaultDeviceOSError();
    public static EqtMessage get_MediaFoundation_OnGetOutputFiles_ScreenCaptureDescription();
    public static EqtMessage get_MediaFoundation_OnScreenCaptureFinished_OfficeIrm();
    public static EqtMessage get_MediaFoundation_OnStart_Error();
    public static EqtMessage get_FailedToReadOldConfigurationSettings();
    public static EqtMessage get_FailedToStartRecorderProcess();
    public static EqtMessage get_MediaRecorderDataAdapter_Description();
    public static EqtMessage get_MediaRecorderDataAdapter_FriendlyName();
    public static EqtMessage MediaRecorderDataAdapter_MoreThanOneDisplay(object param0);
    public static EqtMessage get_MediaRecorderMetadata_StreamTransfer_Description();
    public static EqtMessage get_MFRemoteAudioWarning();
    public static EqtMessage get_MFAudioDeviceError();
    public static EqtMessage MFGenericSessionError(object param0);
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.ScreenCaptureVideoSettings : object {
    public static string PropertyNameFrameRate;
    public static string PropertyNameBitRate;
    public static string PropertyNameQuality;
    private static int FrameRateDefault;
    private static int BitRateDefault;
    private static int QualityDefault;
    private static int FrameRateMin;
    private static int FrameRateMax;
    private static int BitRateMin;
    private static int BitRateMax;
    private static int QualityMin;
    private static int QualityMax;
    private static string ScreenCaptureVideoElementName;
    private static string FrameRateXmlLocation;
    private static string BitRateXmlLocation;
    private static string QualityXmlLocation;
    private int m_frameRate;
    private int m_bitRate;
    private int m_quality;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public int FrameRate { get; public set; }
    public int BitRate { get; public set; }
    public int Quality { get; public set; }
    public ScreenCaptureVideoSettings(XmlElement xmlElement);
    private static ScreenCaptureVideoSettings();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public int get_FrameRate();
    public void set_FrameRate(int value);
    public int get_BitRate();
    public void set_BitRate(int value);
    public int get_Quality();
    public void set_Quality(int value);
    public sealed virtual void Load(XmlElement xmlElement, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement xmlElement, XmlTestStoreParameters parameters);
    private void RaisePropertyChanged(string propertyName);
    public void Reset();
}
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.TestInformation : object {
    private DataCollectionContext m_context;
    [CompilerGeneratedAttribute]
private EncoderAdapter <Encoder>k__BackingField;
    public DataCollectionContext Context { get; }
    public EncoderAdapter Encoder { get; public set; }
    public TestInformation(DataCollectionContext context);
    public DataCollectionContext get_Context();
    [CompilerGeneratedAttribute]
public EncoderAdapter get_Encoder();
    [CompilerGeneratedAttribute]
public void set_Encoder(EncoderAdapter value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.DataCollection.MediaRecorder.TestTracker : object {
    private Dictionary`2<DataCollectionContext, TestInformation> m_testsByContext;
    public TestInformation Item { get; }
    public void Track(TestInformation test);
    public TestInformation get_Item(DataCollectionContext context);
    public void Forget(DataCollectionContext context);
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/VideoRecorder/1.0")]
[DataCollectorFriendlyNameAttribute("MediaRecorderDataAdapter_FriendlyName", "True")]
[DataCollectorDescriptionAttribute("MediaRecorderDataAdapter_Description", "True")]
[DataCollectorConfigurationEditorAttribute("configurationeditor://Microsoft/VideoRecorder/1.0")]
public class Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder.VideoRecorderDataCollector : MediaRecorderDataAdapter {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
