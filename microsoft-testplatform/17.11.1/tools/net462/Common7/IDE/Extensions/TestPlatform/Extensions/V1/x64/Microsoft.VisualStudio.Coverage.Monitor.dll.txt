[NativeCppClassAttribute]
[UnsafeValueTypeAttribute]
internal class __s_GUID : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal enum __scrt_native_startup_state : Enum {
    public int value__;
}
[NativeCppClassAttribute]
internal class _EXCEPTION_POINTERS : ValueType {
    private long <alignment member>;
}
[UnsafeValueTypeAttribute]
[NativeCppClassAttribute]
internal class _GUID : ValueType {
    private int <alignment member>;
}
[NativeCppClassAttribute]
internal class gcroot<System::String ^> : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class ICLRRuntimeHost : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class ICorRuntimeHost : ValueType {
    private long <alignment member>;
}
[NativeCppClassAttribute]
internal static class IUnknown : ValueType {
    private long <alignment member>;
}
public class Microsoft.VisualStudio.CodeCoverage.Monitor : object {
    private Guid m_RunId;
    public void StartRunCoverage(Guid runId, string outputFile, String[] users, bool globalSession);
    public void StartRunCoverage(Guid runId, string outputFile, String[] users);
    public void StartRunCoverage(Guid runId, string outputFile);
    public void FinishRunCoverage(Guid runId);
    public void StartTestExecution(Guid testExecutionId);
    public void FinishTestExecution(Guid testExecutionId);
    private static void MarshalGuidToGUID(Guid SystemGuidIn, _GUID* modopt(System.Runtime.CompilerServices.IsImplicitlyDereferenced) NativeGuidOut);
}
public enum Microsoft.VisualStudio.CodeCoverage.MonitorCollectionMode : Enum {
    public int value__;
    public static MonitorCollectionMode NotRunning;
    public static MonitorCollectionMode Trace;
    public static MonitorCollectionMode Sampling;
    public static MonitorCollectionMode Coverage;
    public static MonitorCollectionMode Contention;
    public static MonitorCollectionMode Unknown;
}
public class Microsoft.VisualStudio.CodeCoverage.MonitorException : Exception {
    internal UInt32 m_hr;
    internal static bool m_HasMessageResources;
    internal MonitorException(Int32 modopt(System.Runtime.CompilerServices.IsLong) hr, string message);
    protected MonitorException(SerializationInfo info, StreamingContext context);
    public MonitorException(string message, Exception innerException);
    public MonitorException(string message);
    public MonitorException(Int32 modopt(System.Runtime.CompilerServices.IsLong) result);
    private static MonitorException();
    public UInt32 GetHResult();
    public UInt32 GetErrorCode();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static MonitorException Create(UInt32 modopt(System.Runtime.CompilerServices.IsLong) errorCode, string additionalInfo);
    internal static MonitorException Create(UInt32 modopt(System.Runtime.CompilerServices.IsLong) errorCode);
}
