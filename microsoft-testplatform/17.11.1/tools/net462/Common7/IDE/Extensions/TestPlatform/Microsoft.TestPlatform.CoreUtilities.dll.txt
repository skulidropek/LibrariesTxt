[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Common.Utilities.Job`1 : object {
    [CompilerGeneratedAttribute]
private TPayload <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Shutdown>k__BackingField;
    [CompilerGeneratedAttribute]
private ManualResetEvent <WaitManualResetEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [NullableAttribute("1")]
public static Job`1<TPayload> ShutdownJob { get; }
    public TPayload Payload { get; private set; }
    public bool Shutdown { get; private set; }
    public ManualResetEvent WaitManualResetEvent { get; private set; }
    public int Size { get; private set; }
    [NullableContextAttribute("1")]
public Job`1(TPayload job, int size);
    [NullableContextAttribute("1")]
public static Job`1<TPayload> get_ShutdownJob();
    [CompilerGeneratedAttribute]
public TPayload get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(TPayload value);
    [CompilerGeneratedAttribute]
public bool get_Shutdown();
    [CompilerGeneratedAttribute]
private void set_Shutdown(bool value);
    [CompilerGeneratedAttribute]
public ManualResetEvent get_WaitManualResetEvent();
    [CompilerGeneratedAttribute]
private void set_WaitManualResetEvent(ManualResetEvent value);
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [NullableContextAttribute("1")]
public static Job`1<TPayload> CreateWaitJob(ManualResetEvent waitEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Constants : object {
    public static string VstestConsoleProcessName;
    public static string TesthostProcessName;
    public static string DatacollectorProcessName;
    public static int StandardErrorMaxLength;
    public static string DotNetUserSpecifiedCulture;
    public static string TestSourcesKeyName;
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Extensions.StringBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AppendSafeWithNewLine(StringBuilder result, string data);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Extensions.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string AddDoubleQuote(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.CommandLineArgumentsHelper : object {
    public static IDictionary`2<string, string> GetArgumentsDictionary(String[] args);
    public static int GetIntArgFromDict(IDictionary`2<string, string> argsDictionary, string fullname);
    public static bool TryGetIntArgFromDict(IDictionary`2<string, string> argsDictionary, string fullname, Int32& value);
    public static string GetStringArgFromDict(IDictionary`2<string, string> argsDictionary, string fullname);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.DotnetMuxerResolutionStrategy : Enum {
    public int value__;
    public static DotnetMuxerResolutionStrategy DotnetRootArchitecture;
    public static DotnetMuxerResolutionStrategy DotnetRootArchitectureLess;
    public static DotnetMuxerResolutionStrategy GlobalInstallationLocation;
    public static DotnetMuxerResolutionStrategy DefaultInstallationLocation;
    public static DotnetMuxerResolutionStrategy Default;
}
public class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.EnvironmentHelper : object {
    [NullableAttribute("1")]
public static string VstestConnectionTimeout;
    public static int DefaultConnectionTimeout;
    public static int GetConnectionTimeout();
}
internal class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Helpers.EnvironmentVariableHelper : object {
    [NullableContextAttribute("1")]
public sealed virtual string GetEnvironmentVariable(string variable);
    public sealed virtual TEnum GetEnvironmentVariableAsEnum(string variable, TEnum defaultValue);
    [NullableContextAttribute("1")]
public sealed virtual void SetEnvironmentVariable(string variable, string value);
    [NullableContextAttribute("1")]
public sealed virtual IDictionary GetEnvironmentVariables();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotBeNullOrEmpty { get; }
    internal static string CommandLineError { get; }
    internal static string CommandLineInformational { get; }
    internal static string CommandLineWarning { get; }
    internal static string Error_ArgumentIsEmpty { get; }
    internal static string Error_ArgumentIsNegative { get; }
    internal static string Error_ArgumentNotTypeOf { get; }
    internal static string Error_ArgumentPropertyIsEmpty { get; }
    internal static string Error_ArgumentPropertyIsNegative { get; }
    internal static string Error_ArgumentPropertyIsNull { get; }
    internal static string Error_ArgumentPropertyNotTypeOf { get; }
    internal static string ExceptionFromJobProcessor { get; }
    internal static string QueueAlreadyDisposed { get; }
    internal static string QueuePausedDisposeError { get; }
    internal static string Utility_ProcessNameWhenCannotGetIt { get; }
    internal static string NoDotnetExeFound { get; }
    internal static string MethodNotImplementedOnPlatform { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotBeNullOrEmpty();
    internal static string get_CommandLineError();
    internal static string get_CommandLineInformational();
    internal static string get_CommandLineWarning();
    internal static string get_Error_ArgumentIsEmpty();
    internal static string get_Error_ArgumentIsNegative();
    internal static string get_Error_ArgumentNotTypeOf();
    internal static string get_Error_ArgumentPropertyIsEmpty();
    internal static string get_Error_ArgumentPropertyIsNegative();
    internal static string get_Error_ArgumentPropertyIsNull();
    internal static string get_Error_ArgumentPropertyNotTypeOf();
    internal static string get_ExceptionFromJobProcessor();
    internal static string get_QueueAlreadyDisposed();
    internal static string get_QueuePausedDisposeError();
    internal static string get_Utility_ProcessNameWhenCannotGetIt();
    internal static string get_NoDotnetExeFound();
    internal static string get_MethodNotImplementedOnPlatform();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.CoreUtilities.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
internal static class Microsoft.VisualStudio.TestPlatform.CoreUtilities.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource {
    public abstract virtual void VsTestConsoleStart();
    public abstract virtual void VsTestConsoleStop();
    public abstract virtual void DiscoveryRequestStart();
    public abstract virtual void DiscoveryRequestStop();
    public abstract virtual void ExecutionRequestStart();
    public abstract virtual void ExecutionRequestStop();
    public abstract virtual void TestHostStart();
    public abstract virtual void TestHostStop();
    public abstract virtual void TestHostAppDomainCreationStart();
    public abstract virtual void TestHostAppDomainCreationStop();
    public abstract virtual void AdapterSearchStart();
    public abstract virtual void AdapterSearchStop();
    public abstract virtual void AdapterExecutionStart(string executorUri);
    public abstract virtual void AdapterExecutionStop(long numberOfTests);
    public abstract virtual void AdapterDiscoveryStart(string executorUri);
    public abstract virtual void AdapterDiscoveryStop(long numberOfTests);
    public abstract virtual void DiscoveryStart();
    public abstract virtual void DiscoveryStop(long numberOfTests);
    public abstract virtual void ExecutionStart();
    public abstract virtual void ExecutionStop(long numberOfTests);
    public abstract virtual void DataCollectionStart(string dataCollectorUri);
    public abstract virtual void DataCollectionStop();
    public abstract virtual void TranslationLayerInitializeStart();
    public abstract virtual void TranslationLayerInitializeStop();
    public abstract virtual void TranslationLayerDiscoveryStart();
    public abstract virtual void TranslationLayerDiscoveryStop();
    public abstract virtual void TranslationLayerExecutionStart(long customTestHost, long sourcesCount, long testCasesCount, string runSettings);
    public abstract virtual void TranslationLayerExecutionStop();
    public abstract virtual void MetricsDisposeStart();
    public abstract virtual void MetricsDisposeStop();
    public abstract virtual void TestRunAttachmentsProcessingRequestStart();
    public abstract virtual void TestRunAttachmentsProcessingRequestStop();
    public abstract virtual void TestRunAttachmentsProcessingStart(long numberOfAttachments);
    public abstract virtual void TestRunAttachmentsProcessingStop(long numberOfAttachments);
    public abstract virtual void TranslationLayerTestRunAttachmentsProcessingStart();
    public abstract virtual void TranslationLayerTestRunAttachmentsProcessingStop();
    public abstract virtual void StartTestSessionStart();
    public abstract virtual void StartTestSessionStop();
    public abstract virtual void TranslationLayerStartTestSessionStart();
    public abstract virtual void TranslationLayerStartTestSessionStop();
    public abstract virtual void StopTestSessionStart();
    public abstract virtual void StopTestSessionStop();
    public abstract virtual void TranslationLayerStopTestSessionStart();
    public abstract virtual void TranslationLayerStopTestSessionStop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
public class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformEventSource : EventSource {
    private static TestPlatformEventSource LocalInstance;
    public static ITestPlatformEventSource Instance { get; }
    private static TestPlatformEventSource();
    public static ITestPlatformEventSource get_Instance();
    [EventAttribute("16")]
public sealed virtual void VsTestConsoleStart();
    [EventAttribute("17")]
public sealed virtual void VsTestConsoleStop();
    [EventAttribute("25")]
public sealed virtual void DiscoveryRequestStart();
    [EventAttribute("32")]
public sealed virtual void DiscoveryRequestStop();
    [EventAttribute("33")]
public sealed virtual void ExecutionRequestStart();
    [EventAttribute("34")]
public sealed virtual void ExecutionRequestStop();
    [EventAttribute("19")]
public sealed virtual void TestHostStart();
    [EventAttribute("20")]
public sealed virtual void TestHostStop();
    [EventAttribute("48")]
public sealed virtual void TestHostAppDomainCreationStart();
    [EventAttribute("49")]
public sealed virtual void TestHostAppDomainCreationStop();
    [EventAttribute("22")]
public sealed virtual void AdapterSearchStart();
    [EventAttribute("23")]
public sealed virtual void AdapterSearchStop();
    [EventAttribute("7")]
public sealed virtual void AdapterExecutionStart(string executorUri);
    [EventAttribute("8")]
public sealed virtual void AdapterExecutionStop(long numberOfTests);
    [EventAttribute("39")]
public sealed virtual void AdapterDiscoveryStart(string executorUri);
    [EventAttribute("40")]
public sealed virtual void AdapterDiscoveryStop(long numberOfTests);
    [EventAttribute("1")]
public sealed virtual void DiscoveryStart();
    [EventAttribute("2")]
public sealed virtual void DiscoveryStop(long numberOfTests);
    [EventAttribute("4")]
public sealed virtual void ExecutionStart();
    [EventAttribute("5")]
public sealed virtual void ExecutionStop(long numberOfTests);
    [EventAttribute("37")]
public sealed virtual void DataCollectionStart(string dataCollectorUri);
    [EventAttribute("38")]
public sealed virtual void DataCollectionStop();
    [EventAttribute("50")]
public sealed virtual void TranslationLayerInitializeStart();
    [EventAttribute("51")]
public sealed virtual void TranslationLayerInitializeStop();
    [EventAttribute("52")]
public sealed virtual void TranslationLayerDiscoveryStart();
    [EventAttribute("53")]
public sealed virtual void TranslationLayerDiscoveryStop();
    [EventAttribute("54")]
public sealed virtual void TranslationLayerExecutionStart(long customTestHost, long sourcesCount, long testCasesCount, string runSettings);
    [EventAttribute("55")]
public sealed virtual void TranslationLayerExecutionStop();
    [EventAttribute("56")]
public sealed virtual void MetricsDisposeStart();
    [EventAttribute("57")]
public sealed virtual void MetricsDisposeStop();
    [EventAttribute("66")]
public sealed virtual void TestRunAttachmentsProcessingRequestStart();
    [EventAttribute("67")]
public sealed virtual void TestRunAttachmentsProcessingRequestStop();
    [EventAttribute("64")]
public sealed virtual void TestRunAttachmentsProcessingStart(long numberOfAttachments);
    [EventAttribute("65")]
public sealed virtual void TestRunAttachmentsProcessingStop(long numberOfAttachments);
    [EventAttribute("68")]
public sealed virtual void TranslationLayerTestRunAttachmentsProcessingStart();
    [EventAttribute("69")]
public sealed virtual void TranslationLayerTestRunAttachmentsProcessingStop();
    [EventAttribute("70")]
public sealed virtual void StartTestSessionStart();
    [EventAttribute("71")]
public sealed virtual void StartTestSessionStop();
    [EventAttribute("72")]
public sealed virtual void TranslationLayerStartTestSessionStart();
    [EventAttribute("73")]
public sealed virtual void TranslationLayerStartTestSessionStop();
    [EventAttribute("74")]
public sealed virtual void StopTestSessionStart();
    [EventAttribute("75")]
public sealed virtual void StopTestSessionStop();
    [EventAttribute("76")]
public sealed virtual void TranslationLayerStopTestSessionStart();
    [EventAttribute("77")]
public sealed virtual void TranslationLayerStopTestSessionStop();
}
internal class Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.TestPlatformInstrumentationEvents : object {
    public static int DiscoveryStartEventId;
    public static int DiscoveryStopEventId;
    public static int ExecutionStartEventId;
    public static int ExecutionStopEventId;
    public static int AdapterExecutionStartEventId;
    public static int AdapterExecutionStopEventId;
    public static int VsTestConsoleStartEventId;
    public static int VsTestConsoleStopEventId;
    public static int TestHostStartEventId;
    public static int TestHostStopEventId;
    public static int AdapterSearchStartEventId;
    public static int AdapterSearchStopEventId;
    public static int DiscoveryRequestStartEventId;
    public static int DiscoveryRequestStopEventId;
    public static int ExecutionRequestStartEventId;
    public static int ExecutionRequestStopEventId;
    public static int DataCollectionStartEventId;
    public static int DataCollectionStopEventId;
    public static int AdapterDiscoveryStartEventId;
    public static int AdapterDiscoveryStopEventId;
    public static int TestHostAppDomainCreationStartEventId;
    public static int TestHostAppDomainCreationStopEventId;
    public static int TranslationLayerInitializeStartEventId;
    public static int TranslationLayerInitializeStopEventId;
    public static int TranslationLayerDiscoveryStartEventId;
    public static int TranslationLayerDiscoveryStopEventId;
    public static int TranslationLayerExecutionStartEventId;
    public static int TranslationLayerExecutionStopEventId;
    public static int MetricsDisposeStartEventId;
    public static int MetricsDisposeStopEventId;
    public static int TestRunAttachmentsProcessingStartEventId;
    public static int TestRunAttachmentsProcessingStopEventId;
    public static int TestRunAttachmentsProcessingRequestStartEventId;
    public static int TestRunAttachmentsProcessingRequestStopEventId;
    public static int TranslationLayerTestRunAttachmentsProcessingStartEventId;
    public static int TranslationLayerTestRunAttachmentsProcessingStopEventId;
    public static int StartTestSessionStartEventId;
    public static int StartTestSessionStopEventId;
    public static int TranslationLayerStartTestSessionStartEventId;
    public static int TranslationLayerStartTestSessionStopEventId;
    public static int StopTestSessionStartEventId;
    public static int StopTestSessionStopEventId;
    public static int TranslationLayerStopTestSessionStartEventId;
    public static int TranslationLayerStopTestSessionStopEventId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Helpers.DotnetHostHelper : object {
    public static string MONOEXENAME;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IWindowsRegistryHelper _windowsRegistryHelper;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    private IProcessHelper _processHelper;
    private string _muxerName;
    public DotnetHostHelper(IFileHelper fileHelper, IEnvironment environment);
    internal DotnetHostHelper(IFileHelper fileHelper, IEnvironment environment, IWindowsRegistryHelper windowsRegistryHelper, IEnvironmentVariableHelper environmentVariableHelper, IProcessHelper processHelper);
    public sealed virtual string GetDotnetPath();
    public sealed virtual string GetMonoPath();
    private bool TryGetExecutablePath(string executableBaseName, String& executablePath);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetDotnetPathByArchitecture(PlatformArchitecture targetArchitecture, DotnetMuxerResolutionStrategy dotnetMuxerResolutionStrategy, String& muxerPath);
    [NullableContextAttribute("2")]
private string GetMuxerFromGlobalRegistrationWin(PlatformArchitecture targetArchitecture);
    [NullableContextAttribute("2")]
private string GetMuxerFromGlobalRegistrationOnUnix(PlatformArchitecture targetArchitecture);
    private Nullable`1<PlatformArchitecture> GetMuxerArchitectureByPEHeaderOnWin(string path);
    private Nullable`1<PlatformArchitecture> GetMuxerArchitectureByMachoOnMac(string path);
    private bool IsValidArchitectureMuxer(PlatformArchitecture targetArchitecture, string path);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Helpers.Interfaces.IDotnetHostHelper {
    public abstract virtual string GetDotnetPath();
    public abstract virtual string GetMonoPath();
    [NullableContextAttribute("2")]
public abstract virtual bool TryGetDotnetPathByArchitecture(PlatformArchitecture targetArchitecture, DotnetMuxerResolutionStrategy dotnetMuxerResolutionStrategy, String& muxerPath);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.EqtTrace : object {
    [NullableAttribute("1")]
private static IPlatformEqtTrace TraceImpl;
    [CompilerGeneratedAttribute]
private static string <ErrorOnInitialization>k__BackingField;
    public static TraceLevel TraceLevel { get; public set; }
    public static string LogFile { get; }
    public static bool DoNotInitailize { get; public set; }
    public static string ErrorOnInitialization { get; public set; }
    public static bool IsErrorEnabled { get; }
    public static bool IsInfoEnabled { get; }
    public static bool IsVerboseEnabled { get; }
    public static bool IsWarningEnabled { get; }
    private static EqtTrace();
    public static void SetupRemoteEqtTraceListeners(AppDomain childDomain);
    public static void SetupListener(TraceListener listener);
    public static TraceLevel get_TraceLevel();
    public static void set_TraceLevel(TraceLevel value);
    public static string get_LogFile();
    public static bool get_DoNotInitailize();
    public static void set_DoNotInitailize(bool value);
    [CompilerGeneratedAttribute]
public static string get_ErrorOnInitialization();
    [CompilerGeneratedAttribute]
public static void set_ErrorOnInitialization(string value);
    public static bool get_IsErrorEnabled();
    public static bool get_IsInfoEnabled();
    public static bool get_IsVerboseEnabled();
    public static bool get_IsWarningEnabled();
    public static bool InitializeVerboseTrace(string customLogFile);
    public static bool InitializeTrace(string customLogFile, PlatformTraceLevel traceLevel);
    [ConditionalAttribute("TRACE")]
public static void Fail(string message);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void Fail(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Error(string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string message);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void Error(string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void ErrorAssert(string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void Error(Exception exceptionToTrace);
    [ConditionalAttribute("TRACE")]
public static void Warning(string message);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string message);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void Warning(string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Info(string message);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string message);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void Info(string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, PlatformTraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, PlatformTraceLevel level, string message);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void Verbose(string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string format, Object[] args);
    [NullableContextAttribute("1")]
[ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, PlatformTraceLevel level, string format, Object[] args);
    [NullableContextAttribute("1")]
private static string FormatException(Exception exceptionToTrace);
    private static void WriteAtLevel(PlatformTraceLevel level, string message);
    [NullableContextAttribute("1")]
private static void WriteAtLevel(PlatformTraceLevel level, string format, Object[] args);
    private static void FailDebugger(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArg : object {
    [DebuggerStepThroughAttribute]
public static T NotNull(T arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static string NotNullOrEmpty(string arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static string NotNullOrWhiteSpace(string arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNegative(int arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNegative(long arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(IEnumerable`1<T> arg, string parameterName);
    [DebuggerStepThroughAttribute]
public static void TypeOf(object arg, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateArgProperty : object {
    [DebuggerStepThroughAttribute]
public static void NotNull(object arg, string parameterName, string propertyName);
    [DebuggerStepThroughAttribute]
public static void NotNegative(int arg, string parameterName, string propertyName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(string arg, string parameterName, string propertyName);
    [DebuggerStepThroughAttribute]
public static void TypeOf(object arg, string parameterName, string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.Utilities.ConsoleOutput : object {
    private static object LockObject;
    [NullableAttribute("2")]
private static ConsoleOutput s_consoleOutput;
    private TextWriter _standardOutput;
    private TextWriter _standardError;
    public static ConsoleOutput Instance { get; }
    private static ConsoleOutput();
    public static ConsoleOutput get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual void WriteLine(string message, OutputLevel level);
    [NullableContextAttribute("2")]
public sealed virtual void Write(string message, OutputLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Utilities.FeatureFlag : object {
    private ConcurrentDictionary`2<string, bool> _cache;
    [CompilerGeneratedAttribute]
private static IFeatureFlag <Instance>k__BackingField;
    public static string VSTEST_DISABLE_ARTIFACTS_POSTPROCESSING;
    public static string VSTEST_DISABLE_ARTIFACTS_POSTPROCESSING_NEW_SDK_UX;
    public static string VSTEST_DISABLE_FASTER_JSON_SERIALIZATION;
    public static string VSTEST_DISABLE_MULTI_TFM_RUN;
    public static string VSTEST_DISABLE_THREADPOOL_SIZE_INCREASE;
    public static string VSTEST_DISABLE_SERIALTESTRUN_DECORATOR;
    public static string VSTEST_DISABLE_UTF8_CONSOLE_ENCODING;
    public static string VSTEST_DISABLE_STANDARD_OUTPUT_CAPTURING;
    public static string VSTEST_DISABLE_STANDARD_OUTPUT_FORWARDING;
    public static string VSTEST_DISABLE_SHARING_NETFRAMEWORK_TESTHOST;
    public static IFeatureFlag Instance { get; private set; }
    private static FeatureFlag();
    [CompilerGeneratedAttribute]
public static IFeatureFlag get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(IFeatureFlag value);
    public sealed virtual bool IsSet(string featureFlag);
    [ObsoleteAttribute("Only use this in tests.")]
internal static void Reset();
    [ObsoleteAttribute("Only use this in tests.")]
internal void SetFlag(string key, bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.FileHelper : object {
    private static Version DefaultFileVersion;
    private static FileHelper();
    public sealed virtual DirectoryInfo CreateDirectory(string path);
    public sealed virtual string GetCurrentDirectory();
    [NullableContextAttribute("2")]
public sealed virtual bool Exists(string path);
    [NullableContextAttribute("2")]
public sealed virtual bool DirectoryExists(string path);
    public sealed virtual Stream GetStream(string filePath, FileMode mode, FileAccess access);
    public sealed virtual Stream GetStream(string filePath, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string directory, SearchOption searchOption, String[] endsWithSearchPatterns);
    public sealed virtual FileAttributes GetFileAttributes(string path);
    public sealed virtual Version GetFileVersion(string path);
    public sealed virtual void CopyFile(string sourcePath, string destinationPath);
    public sealed virtual void MoveFile(string sourcePath, string destinationPath);
    public sealed virtual void WriteAllTextToFile(string filePath, string content);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual void DeleteEmptyDirectroy(string dirPath);
    public sealed virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual void Delete(string path);
    public sealed virtual void DeleteDirectory(string directoryPath, bool recursive);
    public sealed virtual string GetTempPath();
    public sealed virtual long GetFileLength(string path);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IEnvironmentVariableHelper {
    public abstract virtual string GetEnvironmentVariable(string variable);
    [NullableContextAttribute("0")]
public abstract virtual TEnum GetEnvironmentVariableAsEnum(string variable, TEnum defaultValue);
    public abstract virtual void SetEnvironmentVariable(string variable, string value);
    public abstract virtual IDictionary GetEnvironmentVariables();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper {
    public abstract virtual DirectoryInfo CreateDirectory(string path);
    public abstract virtual string GetCurrentDirectory();
    [NullableContextAttribute("2")]
public abstract virtual bool Exists(string path);
    [NullableContextAttribute("2")]
public abstract virtual bool DirectoryExists(string path);
    public abstract virtual Stream GetStream(string filePath, FileMode mode, FileAccess access);
    public abstract virtual Stream GetStream(string filePath, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string directory, SearchOption searchOption, String[] endsWithSearchPatterns);
    public abstract virtual FileAttributes GetFileAttributes(string path);
    public abstract virtual Version GetFileVersion(string path);
    public abstract virtual void CopyFile(string sourcePath, string destinationPath);
    public abstract virtual void MoveFile(string sourcePath, string destinationPath);
    public abstract virtual void WriteAllTextToFile(string filePath, string content);
    public abstract virtual string GetFullPath(string path);
    public abstract virtual void DeleteEmptyDirectroy(string directoryPath);
    public abstract virtual void DeleteDirectory(string directoryPath, bool recursive);
    public abstract virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual void Delete(string path);
    public abstract virtual string GetTempPath();
    public abstract virtual long GetFileLength(string path);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IRegistryKey {
    public abstract virtual IRegistryKey OpenSubKey(string name);
    public abstract virtual object GetValue(string name);
    public abstract virtual String[] GetSubKeyNames();
}
internal interface Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IRunSettingsHelper {
    public bool IsDefaultTargetArchitecture { get; public set; }
    public bool IsDesignMode { get; public set; }
    public abstract virtual bool get_IsDefaultTargetArchitecture();
    public abstract virtual void set_IsDefaultTargetArchitecture(bool value);
    public abstract virtual bool get_IsDesignMode();
    public abstract virtual void set_IsDesignMode(bool value);
}
[NullableContextAttribute("2")]
internal interface Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IWindowsRegistryHelper {
    public abstract virtual IRegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.RegistryKeyWrapper : object {
    private RegistryKey _registryKey;
    public RegistryKeyWrapper(RegistryKey registryKey);
    public sealed virtual object GetValue(string name);
    public sealed virtual IRegistryKey OpenSubKey(string name);
    public sealed virtual String[] GetSubKeyNames();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.RunSettingsHelper : object {
    [NullableAttribute("1")]
private static IRunSettingsHelper RunSettings;
    [NullableAttribute("1")]
public static IRunSettingsHelper Instance;
    [CompilerGeneratedAttribute]
private bool <IsDefaultTargetArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDesignMode>k__BackingField;
    public bool IsDefaultTargetArchitecture { get; public set; }
    public bool IsDesignMode { get; public set; }
    private static RunSettingsHelper();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDefaultTargetArchitecture();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDefaultTargetArchitecture(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDesignMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDesignMode(bool value);
}
internal class Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.WindowsRegistryHelper : object {
    [NullableContextAttribute("2")]
public sealed virtual IRegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.Utilities.IFeatureFlag {
    public abstract virtual bool IsSet(string featureName);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.Utilities.IOutput {
    public abstract virtual void WriteLine(string message, OutputLevel level);
    public abstract virtual void Write(string message, OutputLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<T> _processJob;
    private string _displayName;
    private Queue`1<Job`1<T>> _jobsQueue;
    private ManualResetEvent _jobAdded;
    private int _maxNumberOfJobsInQueue;
    private int _maxBytesQueueCanHold;
    private int _currentNumberOfBytesQueueIsHolding;
    private bool _enableBoundsOnQueue;
    private ManualResetEvent _queueProcessing;
    private Task _backgroundJobProcessor;
    private bool _isDisposed;
    private Action`1<string> _exceptionLogger;
    [CompilerGeneratedAttribute]
private bool <IsPaused>k__BackingField;
    public bool IsPaused { get; private set; }
    public JobQueue`1(Action`1<T> processJob, string displayName, int maxQueueLength, int maxQueueSize, bool enableBounds, Action`1<string> exceptionLogger);
    [CompilerGeneratedAttribute]
public bool get_IsPaused();
    [CompilerGeneratedAttribute]
private void set_IsPaused(bool value);
    public void QueueJob(T job, int jobSize);
    public void Pause();
    public void Resume();
    public void Flush();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual bool WaitForQueueToGetEmpty();
    private void InternalQueueJob(Job`1<T> job);
    private void CheckDisposed();
    private void BackgroundJobProcessor(string threadName);
    [NullableContextAttribute("2")]
private void SafeProcessJob(T job);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.MulticastDelegateUtilities : object {
    [ExtensionAttribute]
public static void SafeInvoke(Delegate delegates, object sender, EventArgs args, string traceDisplayName);
    [ExtensionAttribute]
public static void SafeInvoke(Delegate delegates, object sender, object args, string traceDisplayName);
    [ExtensionAttribute]
internal static string GetMethodName(Delegate delegate);
    [ExtensionAttribute]
internal static string GetTargetName(Delegate delegate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.OutputExtensions : object {
    private static string DefaultFormat;
    [ExtensionAttribute]
public static void Error(IOutput output, bool appendPrefix, string format, Object[] args);
    [ExtensionAttribute]
public static void Warning(IOutput output, bool appendPrefix, string format, Object[] args);
    [ExtensionAttribute]
public static void Information(IOutput output, bool appendPrefix, string format, Object[] args);
    [ExtensionAttribute]
public static void Information(IOutput output, bool appendPrefix, ConsoleColor foregroundColor, string format, Object[] args);
    [ExtensionAttribute]
public static void Write(IOutput output, string message, OutputLevel level, ConsoleColor foregroundColor);
    private static void Output(IOutput output, OutputLevel level, string messageTypeFormat, string format, Object[] args);
    private static string Format(string messageTypeFormat, string format, Object[] args);
    private static void SetColorForAction(ConsoleColor foregroundColor, Action action);
}
public enum Microsoft.VisualStudio.TestPlatform.Utilities.OutputLevel : Enum {
    public int value__;
    public static OutputLevel Information;
    public static OutputLevel Warning;
    public static OutputLevel Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.TimeSpanParser : object {
    private static Regex Pattern;
    private static TimeSpanParser();
    [NullableContextAttribute("2")]
public static TimeSpan Parse(string time);
    [NullableContextAttribute("2")]
public static bool TryParse(string time, TimeSpan& result);
    private static FormatException GetFormatException(string value);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal static class System.GuidPolyfill : object {
    [NullableContextAttribute("1")]
public static Guid Parse(string s, IFormatProvider provider);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderPolyfill : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static StringBuilder Append(StringBuilder builder, IFormatProvider provider, string value);
}
