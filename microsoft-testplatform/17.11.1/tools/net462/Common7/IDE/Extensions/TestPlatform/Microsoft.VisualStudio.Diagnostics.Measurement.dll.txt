[SuppressUnmanagedCodeSecurityAttribute]
internal static class Microsoft.VisualStudio.Diagnostics.Measurement.EtwNativeMethods : object {
    internal static string ADVAPI32;
    internal static UInt32 RegisterTraceGuids(EtwEnableCallback requestAddress, Void* requestContext, Guid& controlGuid, UInt32 guidCount, TRACE_GUID_REGISTRATION& traceGuidReg, string mofImagePath, string mofResourceName, UInt64& registrationHandle);
    internal static int UnregisterTraceGuids(ulong registrationHandle);
    internal static ulong GetTraceLoggerHandle(Byte* Buffer);
    internal static UInt32 GetTraceEnableFlags(ulong TraceHandle);
    internal static byte GetTraceEnableLevel(ulong TraceHandle);
    internal static UInt32 TraceEvent(ulong traceHandle, Byte* eventTrace);
}
internal class Microsoft.VisualStudio.Diagnostics.Measurement.EventProviderVersionOne : object {
    private EtwEnableCallback m_etwCallback;
    private ulong m_regHandle;
    private byte m_level;
    private long m_flags;
    private int m_enabled;
    private Guid m_providerId;
    private ulong m_logger;
    private int m_disposed;
    internal static UInt32 s_eventFlags;
    internal EventProviderVersionOne(Guid providerId);
    private UInt32 Register();
    internal UInt32 EtwEnableCallBack(WMIDPREQUESTCODE requestCode, IntPtr context, UInt32* bufferSize, Byte* byteBuffer);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    protected virtual override void Finalize();
    private void Deregister();
    public bool IsEnabled(byte level, UInt32 flags);
    public bool IsEnabled();
    internal bool WriteEvent(EventDescriptor& eventDescriptor, Guid& eventGuid, string data);
    internal bool TemplateEventPayload(EventDescriptor& eventDescriptor, Guid& eventGuid, UInt32 ComponentId, ulong Ticks, ulong CpuTicks, ulong Size, Guid CorrelationId, UInt32 SequenceNumber, UInt32 NestingLevel, Guid ParentCorrelationId, UInt32 ParentSequenceNumber, string Category);
}
internal class Microsoft.VisualStudio.Diagnostics.Measurement.EventProviderVersionTwo : EventProvider {
    internal EventProviderVersionTwo(Guid id);
    internal bool TemplateEventPayload(EventDescriptor& eventDescriptor, UInt32 ComponentId, ulong Ticks, ulong CpuTicks, ulong Size, Guid CorrelationId, UInt32 SequenceNumber, UInt32 NestingLevel, Guid ParentCorrelationId, UInt32 ParentSequenceNumber, string Category);
}
public class Microsoft.VisualStudio.Diagnostics.Measurement.ExtendedStopwatch : object {
    public static bool HasElapsedCpu;
    public static long CpuFrequency;
    private static long TicksPerMillisecond;
    private static long TicksPerSecond;
    private static int OSVista;
    private static double rawTimeToTicks;
    private static bool isHighResolution;
    private static long frequency;
    private long elapsedTime;
    private long elapsedCpu;
    private long startTime;
    private long startCpu;
    private int startThread;
    private bool threadSwitchOccurred;
    private bool isRunning;
    public static long Frequency { get; }
    public bool IsRunning { get; }
    public TimeSpan Elapsed { get; }
    public long ElapsedMilliseconds { get; }
    public long ElapsedTicks { get; }
    public TimeSpan ElapsedCpu { get; }
    public long ElapsedCpuMilliseconds { get; }
    public long ElapsedCpuCycles { get; }
    public bool ThreadSwitchOccurred { get; }
    private static ExtendedStopwatch();
    public static long get_Frequency();
    public bool get_IsRunning();
    public TimeSpan get_Elapsed();
    public long get_ElapsedMilliseconds();
    public long get_ElapsedTicks();
    public TimeSpan get_ElapsedCpu();
    public long get_ElapsedCpuMilliseconds();
    public long get_ElapsedCpuCycles();
    public bool get_ThreadSwitchOccurred();
    public static ExtendedStopwatch StartNew();
    public static long GetTimestamp();
    public static long GetCpuCycles();
    internal static long GetMaxCpuFrequency();
    public void Start();
    public void Stop();
    public void Reset();
    private long GetRawElapsedTime();
    private long GetElapsedDateTimeTicks();
    private long GetCpuCyclesWithErrorChecks();
    private long GetRawElapsedCpuCycles();
    private long GetElapsedCpuDateTimeTicks();
}
public class Microsoft.VisualStudio.Diagnostics.Measurement.MeasurementBlock : object {
    private static string providerName;
    private static Guid providerGuid;
    private ExtendedStopwatch stopwatch;
    private Guid correlationId;
    private Guid parentCorrelationId;
    private UInt32 parentSequenceNumber;
    private int nestingLevel;
    private UInt32 sequenceNumber;
    private string categoryData;
    private UInt32 componentId;
    private ulong sizeData;
    private bool disposed;
    public static bool HasElapsedCpu { get; }
    public static string Name { get; }
    public static Guid Guid { get; }
    public bool IsDisposed { get; }
    public string Category { get; public set; }
    public UInt32 ComponentId { get; public set; }
    public Guid CorrelationId { get; }
    public TimeSpan Elapsed { get; }
    public TimeSpan ElapsedCpu { get; }
    public bool IsRunning { get; }
    public int NestingLevel { get; }
    public Guid ParentCorrelationId { get; }
    public UInt32 ParentSequenceNumber { get; }
    public UInt32 SequenceNumber { get; }
    public ulong Size { get; public set; }
    public bool ThreadSwitchOccurred { get; }
    public MeasurementBlock(ulong size);
    public MeasurementBlock(ulong size, string category);
    public MeasurementBlock(ulong size, string category, int nestingLevel);
    public MeasurementBlock(ulong size, string category, MeasurementBlock parent);
    private static MeasurementBlock();
    protected virtual override void Finalize();
    public static bool get_HasElapsedCpu();
    public static string get_Name();
    public static Guid get_Guid();
    public bool get_IsDisposed();
    public string get_Category();
    public void set_Category(string value);
    public UInt32 get_ComponentId();
    public void set_ComponentId(UInt32 value);
    public Guid get_CorrelationId();
    public TimeSpan get_Elapsed();
    public TimeSpan get_ElapsedCpu();
    public bool get_IsRunning();
    public int get_NestingLevel();
    public Guid get_ParentCorrelationId();
    public UInt32 get_ParentSequenceNumber();
    public UInt32 get_SequenceNumber();
    public ulong get_Size();
    public void set_Size(ulong value);
    public bool get_ThreadSwitchOccurred();
    public static MeasurementBlock BeginNew();
    public static MeasurementBlock BeginNew(ulong size);
    public static MeasurementBlock BeginNew(ulong size, string category);
    public static MeasurementBlock BeginNew(ulong size, string category, int nestingLevel);
    public static MeasurementBlock BeginNew(ulong size, string category, MeasurementBlock parent);
    public static void Mark();
    public static void Mark(ulong size);
    public static void Mark(ulong size, string category);
    public void Begin();
    public void Begin(ulong size);
    public void Begin(ulong size, string category);
    public void End();
    public void End(ulong size);
    public void End(ulong size, string category);
    public void Step();
    public void Step(ulong size);
    public void Step(ulong size, string category);
    public void Reset();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
public static class Microsoft.VisualStudio.Diagnostics.Measurement.MeasurementBlockProvider : object {
    private static EventProviderVersionTwo m_provider;
    private static EventProviderVersionOne m_providerLegacy;
    private static bool m_vistaProvider;
    private static Guid m_providerId;
    private static Guid BlockId;
    private static EventDescriptor _Begin;
    private static EventDescriptor _End;
    private static EventDescriptor _Step;
    private static EventDescriptor _Mark;
    private static MeasurementBlockProvider();
    public static bool EventWrite_Begin(UInt32 ComponentId, ulong Ticks, ulong CpuTicks, ulong Size, Guid CorrelationId, UInt32 SequenceNumber, UInt32 NestingLevel, Guid ParentCorrelationId, UInt32 ParentSequenceNumber, string Category);
    public static bool EventWrite_End(UInt32 ComponentId, ulong Ticks, ulong CpuTicks, ulong Size, Guid CorrelationId, UInt32 SequenceNumber, UInt32 NestingLevel, Guid ParentCorrelationId, UInt32 ParentSequenceNumber, string Category);
    public static bool EventWrite_Step(UInt32 ComponentId, ulong Ticks, ulong CpuTicks, ulong Size, Guid CorrelationId, UInt32 SequenceNumber, UInt32 NestingLevel, Guid ParentCorrelationId, UInt32 ParentSequenceNumber, string Category);
    public static bool EventWrite_Mark(UInt32 ComponentId, ulong Ticks, ulong CpuTicks, ulong Size, Guid CorrelationId, UInt32 SequenceNumber, UInt32 NestingLevel, Guid ParentCorrelationId, UInt32 ParentSequenceNumber, string Category);
    public static bool EventWrite_BeginLevel(UInt32 componentId, ulong ticks, ulong cpuTicks, ulong size, Guid correlationId, UInt32 sequenceNumber, UInt32 nestingLevel, Guid parentCorrelationId, UInt32 parentSequenceNumber, string category);
    private static byte GetEtwLevelFromNestingLevel(UInt32 nestingLevel, byte offset);
    public static bool EventWrite_EndLevel(UInt32 componentId, ulong ticks, ulong cpuTicks, ulong size, Guid correlationId, UInt32 sequenceNumber, UInt32 nestingLevel, Guid parentCorrelationId, UInt32 parentSequenceNumber, string category);
    public static bool EventWrite_StepLevel(UInt32 componentId, ulong ticks, ulong cpuTicks, ulong size, Guid correlationId, UInt32 sequenceNumber, UInt32 nestingLevel, Guid parentCorrelationId, UInt32 parentSequenceNumber, string category);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
