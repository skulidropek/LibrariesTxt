[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Internal.VSRegKeyNames : object {
    internal static string RGS_VAR_PROGID;
    internal static string RGS_VAR_PROGID_APPIDNAME;
    internal static string RGS_VAR_PROGID_VERSION;
    internal static string RGS_VAR_DDE_NAME;
    internal static string REGKEY_VISUALSTUDIOROOT_NOVERSION;
    internal static string REGKEY_VISUALSTUDIOROOT;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Enterprise.AspNetHelper.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_GeneralWebException { get; }
    internal static string Error_Resetter { get; }
    internal static string IISAccessDenied { get; }
    internal static string IISNotFound { get; }
    internal static string IISVersonTooLow { get; }
    internal static string InvalidApplicationPool { get; }
    internal static string NoIIS { get; }
    internal static string Test { get; }
    internal static string UnknownApplicationPoolUser { get; }
    internal static string WebAdministrationNotPresent { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_GeneralWebException();
    internal static string get_Error_Resetter();
    internal static string get_IISAccessDenied();
    internal static string get_IISNotFound();
    internal static string get_IISVersonTooLow();
    internal static string get_InvalidApplicationPool();
    internal static string get_NoIIS();
    internal static string get_Test();
    internal static string get_UnknownApplicationPoolUser();
    internal static string get_WebAdministrationNotPresent();
}
public class Microsoft.VisualStudio.Enterprise.Common.AspCoverageInstrumenter : AspInstrumenter {
    public virtual void PostProcessAssembly(string path);
}
public class Microsoft.VisualStudio.Enterprise.Common.AspInstrumenter : object {
    private IInstrumentingListener m_listener;
    private string m_instrpath;
    private string m_instrtools;
    internal string VSInstrLocation { get; }
    internal string VSInstrTools { get; }
    protected virtual override void Finalize();
    public virtual void PostProcessAssembly(string path);
    public virtual void Dispose();
    internal virtual void Log(string line);
    internal string get_VSInstrLocation();
    internal string get_VSInstrTools();
    internal void InvokeVsInstr(string file, string flags);
    internal void ShowError(string err);
    internal void ShowInstrumented(string err);
}
public abstract class Microsoft.VisualStudio.Enterprise.Common.AspNetHelper : object {
    internal static string ASPKEYNAME;
    internal static string PROCESSNAME;
    internal static string PROCESSUSER;
    internal static string ChannelKey;
    internal static string WebAppProjectGuid;
    internal static int S_OK;
    public static InstrumentEvent InstrumentSucceeded;
    public static InstrumentEvent InstrumentFailed;
    public static InstrumentEvent InstrumentWarning;
    private static UInt32 PAGE_READWRITE;
    private static UInt32 SEC_RESERVE;
    [CompilerGeneratedAttribute]
private int <TargetFrameworkVersion>k__BackingField;
    internal static int UnknownFrameworkVersion;
    internal static string s_vsinstr;
    internal static string s_vsinstrPath;
    internal static string s_processnameDef;
    internal static string s_processuserDef;
    internal static string s_localRegistry;
    internal static Listener s_listener;
    internal static int s_channelCount;
    internal static ObjRef s_listenerRemote;
    internal IpcServerChannel m_channel;
    internal string m_channelName;
    internal BaseHelper m_helper;
    internal string m_configpath;
    internal string m_launchUrl;
    internal static string m_webConfigName;
    public string FriendlyName { get; }
    public bool IsLocal { get; }
    public webType WebType { get; }
    public bool IsWap { get; }
    public string VRoot { get; }
    public int WorkerProcessId { get; }
    public string WorkerProcessIdentity { get; }
    public string WorkerProcessImpersonatedIdentity { get; }
    public string WorkerProcessName { get; }
    public string LaunchUrl { get; public set; }
    public string WebsiteUrl { get; }
    public string PhysicalPath { get; }
    public string BinaryPath { get; }
    public bool IsRunningAtFullTrust { get; }
    public bool IsWin32 { get; }
    public bool EnableVsWebServer { get; }
    internal static string LocalRegistry { get; }
    internal string ConfigPath { get; }
    public string AppRoot { get; }
    public int Port { get; }
    protected Uri Uri { get; }
    internal string FullPath { get; }
    internal string StartPage { get; }
    internal string VsInstr { get; }
    internal string VsInstrPath { get; }
    internal static bool CanCreateGlobalObject { get; }
    internal int TargetFrameworkVersion { get; internal set; }
    private static AspNetHelper();
    public static AspNetHelper Create(Uri uri);
    public static AspNetHelper Create(Uri uri, int frameworkMajorVersion);
    public static AspNetHelper Create(Uri uri, BasicAuthCredential credential);
    public static AspNetHelper Create(Uri uri, string path);
    public static AspNetHelper Create(Uri uri, string path, string appRoot);
    private static void DefaultInstrumentEvent(string text);
    public static void InitializeDefaults(string localRegistry);
    public abstract virtual string get_FriendlyName();
    public abstract virtual bool get_IsLocal();
    public abstract virtual webType get_WebType();
    public virtual bool get_IsWap();
    public virtual string get_VRoot();
    public int get_WorkerProcessId();
    public string get_WorkerProcessIdentity();
    public string get_WorkerProcessImpersonatedIdentity();
    public string get_WorkerProcessName();
    public string get_LaunchUrl();
    public void set_LaunchUrl(string value);
    public string get_WebsiteUrl();
    public string get_PhysicalPath();
    public string get_BinaryPath();
    public bool IsWebsiteInstrumented();
    public bool IsWebConfigCorrupted();
    public bool get_IsRunningAtFullTrust();
    public void ForceRestoreWebConfig();
    public bool SetupInstrument(Type type);
    public bool SetupInstrument(Type type, Guid sessionId);
    public bool SetupInstrument(Type type, Guid sessionId, IEnumerable`1<Type> dependencies);
    public bool CleanupInstrument(Type type);
    public bool get_IsWin32();
    public bool Launch();
    public bool LaunchReset();
    public void Shutdown();
    public bool StartService();
    public void ShutdownFreeze();
    public void ShutdownUnfreeze();
    public bool Reset();
    public virtual void Cleanup();
    public void PushServiceVars(String[] vars, String[] values);
    public List`1<string> GetServiceRegistryEnvironmentPaths();
    public bool ClearServiceVars(String[] vars);
    public void QueryServiceVars(String[]& vars, String[]& values);
    public abstract virtual bool get_EnableVsWebServer();
    internal static string get_LocalRegistry();
    internal string get_ConfigPath();
    public virtual string get_AppRoot();
    public virtual String[] BinFiles();
    public int get_Port();
    internal void Initialize(BasicAuthCredential credential, string appRoot, object project);
    internal void SetupListener(Guid sessionId);
    internal void CleanupListener();
    protected virtual override void Finalize();
    protected abstract virtual Uri get_Uri();
    internal abstract virtual string get_FullPath();
    internal abstract virtual string get_StartPage();
    internal bool ConfigCanInstrument(ConfigHelper config, Type type, IEnumerable`1<Type> dependencies);
    internal static string LocationFromPath(string path);
    internal void SetupPaths();
    private void SetVsInstrPathUsingSetupApis();
    internal string get_VsInstr();
    internal string get_VsInstrPath();
    internal static IntPtr CreateFileMapping(IntPtr hFile, IntPtr lpAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    private static bool CloseHandle(IntPtr hObject);
    internal static bool get_CanCreateGlobalObject();
    [CompilerGeneratedAttribute]
internal int get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
internal void set_TargetFrameworkVersion(int value);
}
public class Microsoft.VisualStudio.Enterprise.Common.AspNetHelperException : Exception {
    private string m_errorType;
    public string ErrorName { get; }
    public AspNetHelperException(string message);
    public AspNetHelperException(string errorType, string message);
    public AspNetHelperException(string message, Exception innerException);
    public AspNetHelperException(string errorType, string message, Exception innerException);
    private AspNetHelperException(SerializationInfo info, StreamingContext context);
    public string get_ErrorName();
    public static AspNetHelperException GetException(string errorMessage);
    public static AspNetHelperException GetException(string errorMessage, string parameter);
    public static AspNetHelperException GetException(string errorMessage, Exception innerException);
    internal static AspNetHelperException GetException(string errorMessage, Object[] args);
    internal static AspNetHelperException GetException(Exception innerException, string errorMessage, Object[] args);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.Enterprise.Common.AspNetHelperHandler : object {
    private static int PROCESSOR_ARCHITECTURE_INTEL;
    private static string s_unknownValue;
    public bool IsReusable { get; }
    private static bool IsWow64Process(IntPtr hProcess, Boolean& pIsWow64);
    public static void GetSystemInfo(SYSTEM_INFO& lpSystemInfo);
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
internal class Microsoft.VisualStudio.Enterprise.Common.AspNetHelperMan : AspNetHelper {
    private bool m_vswebserver;
    private Uri m_uri;
    private string m_path;
    public string FriendlyName { get; }
    public bool IsLocal { get; }
    public webType WebType { get; }
    public bool EnableVsWebServer { get; }
    protected Uri Uri { get; }
    internal string FullPath { get; }
    internal string StartPage { get; }
    public AspNetHelperMan(Uri uri);
    public AspNetHelperMan(Uri uri, int frameworkMajorVersion);
    public AspNetHelperMan(Uri uri, BasicAuthCredential credential);
    public AspNetHelperMan(Uri uri, BasicAuthCredential credential, int frameworkMajorVersion);
    public AspNetHelperMan(Uri uri, string path);
    public AspNetHelperMan(Uri uri, string path, string appRoot);
    public virtual String[] BinFiles();
    public virtual string get_FriendlyName();
    public virtual bool get_IsLocal();
    public virtual webType get_WebType();
    public virtual bool get_EnableVsWebServer();
    protected virtual Uri get_Uri();
    internal virtual string get_FullPath();
    internal virtual string get_StartPage();
}
public abstract class Microsoft.VisualStudio.Enterprise.Common.AspNetHelperProject : AspNetHelper {
    internal IVsHierarchy m_proj;
    internal VSWebSite m_web;
    internal Properties m_props;
    public string FriendlyName { get; }
    public webType WebType { get; }
    internal string FullPath { get; }
    internal string StartPage { get; }
    public static bool IsWapProject(IVsProject project);
    public static bool IsWebProject(IVsProject project);
    public static bool IsVenusProject(IVsProject project);
    public static bool IsLocalWebProject(IVsProject project);
    internal static Project ProjectFromVsProject(IVsProject project);
    public static AspNetHelper Create(IVsProject project);
    public static AspNetHelperProject Create(IVsHierarchy project, VSWebSite web, Properties props);
    public virtual string get_FriendlyName();
    public virtual webType get_WebType();
    internal virtual string get_FullPath();
    internal virtual string get_StartPage();
    public virtual void Cleanup();
    protected string GetStringProperty(string name);
    [CompilerGeneratedAttribute]
private void <Cleanup>b__16_0();
}
internal class Microsoft.VisualStudio.Enterprise.Common.AspNetHelperVenusProj : AspNetHelperProject {
    public bool IsWap { get; }
    public string VRoot { get; }
    public bool IsLocal { get; }
    public bool EnableVsWebServer { get; }
    protected Uri Uri { get; }
    public AspNetHelperVenusProj(IVsHierarchy project, VSWebSite web, Properties props);
    public virtual bool get_IsWap();
    public virtual string get_VRoot();
    public virtual bool get_IsLocal();
    public virtual bool get_EnableVsWebServer();
    public virtual void Cleanup();
    protected virtual Uri get_Uri();
}
internal class Microsoft.VisualStudio.Enterprise.Common.AspNetHelperWAPProj : AspNetHelperProject {
    public bool IsWap { get; }
    public bool IsLocal { get; }
    public bool EnableVsWebServer { get; }
    public string VRoot { get; }
    protected Uri Uri { get; }
    public AspNetHelperWAPProj(IVsHierarchy project, Properties props);
    public virtual bool get_IsWap();
    public virtual bool get_IsLocal();
    public virtual bool get_EnableVsWebServer();
    public virtual string get_VRoot();
    public virtual void Cleanup();
    protected virtual Uri get_Uri();
}
public class Microsoft.VisualStudio.Enterprise.Common.AspPerformanceInstrumenter : AspInstrumenter {
    public virtual void PostProcessAssembly(string path);
}
public abstract class Microsoft.VisualStudio.Enterprise.Common.BaseHelper : object {
    internal Uri m_baseUri;
    internal AspNetHelper m_aspnethelper;
    internal int m_id;
    internal string m_path;
    internal bool m_gotWorkerProcessInfo;
    private string m_workerProcessIdentity;
    private string m_workerProcessImpersonatedIdentity;
    private bool m_canInstrument;
    private bool m_isWin32;
    private string m_webConfigPath;
    internal BasicAuthCredential m_basicAuthCredential;
    private static string s_webConfigName;
    private static string s_aspNetHelperHandlerPath;
    private static string s_unknownValue;
    private static string _pathEnvironmentVariable;
    internal bool CanStart { get; }
    internal string AppRoot { get; }
    public string WebSiteUrl { get; }
    internal int Port { get; }
    public string PhysicalPath { get; }
    public bool IsLocal { get; }
    public string FriendlyName { get; }
    public int WorkerProcessId { get; }
    public string WorkerProcessIdentity { get; }
    public string WorkerProcessImpersonatedIdentity { get; }
    public string WorkerProcessName { get; }
    public bool CanInstrument { get; }
    public bool IsWin32 { get; }
    public bool ValidSessionId { get; }
    internal Uri BaseUri { get; }
    protected ICredentials WebRequestCredentials { get; }
    private string WebConfigPath { get; }
    internal BaseHelper(AspNetHelper aspnethelper, string path);
    internal virtual bool get_CanStart();
    internal virtual string get_AppRoot();
    public abstract virtual void SetEnv(string var, string val);
    public abstract virtual bool DelEnv(string var);
    public abstract virtual void CommitEnv(bool fSet);
    public abstract virtual void QueryEnv(String[]& vars, String[]& values);
    public virtual List`1<string> GetEnvRegistryKeys();
    protected void SetEnv(string var, string val, Dictionary`2& table, Dictionary`2& backup);
    protected bool DelEnv(string var, Dictionary`2& table, Dictionary`2& backup);
    internal static bool IsPathEnvironmentVariable(string var);
    public virtual void MakeWebRequest();
    public abstract virtual void Shutdown();
    public virtual void ShutdownFreeze();
    public virtual void ShutdownUnfreeze();
    public abstract virtual bool Launch();
    public abstract virtual bool LaunchReset();
    public abstract virtual bool Reset();
    public abstract virtual bool StartService();
    public abstract virtual string get_WebSiteUrl();
    internal abstract virtual int get_Port();
    public abstract virtual string get_PhysicalPath();
    public virtual bool get_IsLocal();
    public virtual bool IsWebConfigCorrupted();
    public abstract virtual string get_FriendlyName();
    public int get_WorkerProcessId();
    public string get_WorkerProcessIdentity();
    public string get_WorkerProcessImpersonatedIdentity();
    public abstract virtual string get_WorkerProcessName();
    public bool get_CanInstrument();
    public virtual bool get_IsWin32();
    public virtual bool get_ValidSessionId();
    internal abstract virtual Uri get_BaseUri();
    internal virtual string Retarget(string url);
    protected virtual ICredentials get_WebRequestCredentials();
    private void GetWorkerProcessInfo();
    private bool AddAspNetHelperHandler();
    private string get_WebConfigPath();
    private AttributeState AddTargetFrameworkMoniker(int major, int minor);
    private void RemoveTargetFrameworkMoniker(AttributeState previousState, int majorVersion, int minorVersion);
    private void RemoveAspNetHelperHandler();
    private static bool IsInternationalizedDomainName(string hostName);
}
public abstract class Microsoft.VisualStudio.Enterprise.Common.BaseWebDevHelper : BaseHelper {
    protected Dictionary`2<string, string> m_envstrings;
    protected Dictionary`2<string, string> m_envback;
    protected long m_processStartTime;
    protected int m_port;
    protected string m_approot;
    protected string m_workerProcessName;
    private ConfigHelper m_configShutdown;
    protected static string VSAspNetTestCassiniWebServer;
    public bool IsWin32 { get; }
    public string WorkerProcessName { get; }
    public string WebSiteUrl { get; }
    internal int Port { get; }
    public string FriendlyName { get; }
    public string PhysicalPath { get; }
    internal Uri BaseUri { get; }
    internal string AppRoot { get; }
    public BaseWebDevHelper(AspNetHelper aspnethelper, string path, string approot);
    public BaseWebDevHelper(AspNetHelper aspnethelper, string path, string approot, int port);
    protected abstract virtual bool KillWebDev();
    protected abstract virtual bool StartWebDev(bool reset);
    public virtual void Shutdown();
    public virtual void ShutdownFreeze();
    public virtual void ShutdownUnfreeze();
    public virtual bool Launch();
    public virtual bool LaunchReset();
    public virtual bool IsWebConfigCorrupted();
    private bool InternalIsWebConfigCorrupted(ConfigHelper config, bool doThrow);
    private bool InternalLaunch(bool reset);
    public virtual bool get_IsWin32();
    public virtual string get_WorkerProcessName();
    public virtual bool Reset();
    public virtual bool StartService();
    public virtual string get_WebSiteUrl();
    internal virtual int get_Port();
    public virtual string get_FriendlyName();
    public virtual string get_PhysicalPath();
    public virtual void SetEnv(string var, string val);
    public virtual bool DelEnv(string var);
    public virtual void CommitEnv(bool fSet);
    public virtual void QueryEnv(String[]& vars, String[]& values);
    internal virtual Uri get_BaseUri();
    internal virtual string Retarget(string url);
    internal virtual string get_AppRoot();
    internal static Process GetProcessObjectForPid(int pid);
    internal static Process GetProcessObject(int pid, long processStartTime);
    internal Process GetProcessObject();
}
public class Microsoft.VisualStudio.Enterprise.Common.BasicAuthCredential : object {
    private string m_userName;
    private string m_password;
    private string m_domain;
    public string UserName { get; }
    public string Password { get; }
    public string Domain { get; }
    public BasicAuthCredential(string userName, string password, string domain);
    public string get_UserName();
    public string get_Password();
    public string get_Domain();
}
public class Microsoft.VisualStudio.Enterprise.Common.ConfigHelper : object {
    private bool _modified;
    private XmlDocument _doc;
    private string _path;
    private XmlElement _root;
    private FileStream _fs;
    private bool _created;
    private XmlNamespaceManager _nsmgr;
    private string _namespacePrefix;
    private static string _xmlNameSpace;
    private static string _configuration;
    private static string _location;
    private static string _appSettings;
    private static string _backupInfo;
    private static string _webConfigBackupName;
    private static string _cassiniLaunchInfo;
    private static string _systemWebName;
    private static string _compilationName;
    private static string _targetFrameworkMonikerName;
    public bool Created { get; }
    public bool Modified { get; }
    private static ConfigHelper();
    public sealed virtual void Dispose();
    public bool Open(string path, bool forceCreate);
    private static string RemoveNamespace(string xml);
    public void Open(string path);
    public void Create(string path);
    private void SetupNamespaceManager();
    public void Save();
    public void Close();
    public bool get_Created();
    public void SetAttribute(string section, string element, string attribute, string value);
    public string GetAttribute(string section, string element, string attribute);
    public void RemoveAttribute(string section, string element, string attribute);
    public void AddElement(String[] sections, string element, String[] attributes, String[] values, bool addElementAsFirst);
    public void RemoveElement(String[] sections, string element, string attribute, string value);
    public XmlElement FindOrCreateAssemblyBindingSection(string appliesTo);
    public void AddAssemblyBinding(XmlElement assemblyBindingSection, AssemblyName assemblyName);
    public void AddAssemblyBinding(AssemblyName assemblyName);
    public void AddProbingPath(string probingPath);
    public void EnableMigrationErrorMessage();
    public void DisableMigrationErrorMessage();
    public void RemoveAssemblyBinding(AssemblyName assemblyName);
    private void AddAnonymousUserAccess(string path);
    private void RemoveAnonymousUserAccess(string path);
    public void AddHttpHandler(string verb, string precondition, string path, Type type);
    public void RemoveHttpHandler(string path, Type type);
    public void AddAppSetting(string key, string value);
    public bool AttributeExists(string path, string attribute, string value);
    public bool Exists(string section, string element, string attribute);
    public bool Exists(string section, string element, string attribute, string value);
    public bool get_Modified();
    public bool SetupForShutdown(string appRoot, Int32& pid, Int64& processStartTime);
    internal bool GetLaunchInfo(string appRoot, Int32& port, Boolean& portSet, Int32& pid, Int32& launchCount, Int64& processStartTime);
    internal void SetLaunchInfo(string appRoot, int port, bool portSet, int pid, int launchCount, long processStartTime);
    private void RemoveLaunchInfo(string appRoot, bool keepPort, int port);
    private static string CreateFrameworkMoniker(int majorVersion, int minorVersion);
    internal AttributeState AddTargetFrameworkMoniker(int majorVersion, int minorVersion);
    internal void RemoveTargetFrameworkMoniker(AttributeState previousAction, int majorVersion, int minorVersion);
    public void BackUp();
    public void ForceRestore();
    public void Restore();
    private void Restore(bool force);
    private string MakeBackupPath(string filename);
    internal bool GetBackupInfo(String& filename, Int32& lockCount);
    internal void SetBackupInfo(string filename, int lockCount);
    internal void RemoveBackupInfo();
    public static void Delete(string path);
    private XmlElement FindOrCreateAssemblyBindingSection();
    private XmlElement FindOrCreateElement(XmlNode parent, string name);
    private XmlAttribute FindAttribute(string section, string element, string attribute);
    private void RemoveDependentAssemblyElement(string elementName, string elementAttribute, string elementAttributeValue);
    private void RemoveEmptySections(XmlElement xsection);
    private void RemoveAppSetting(string key);
    private string BuildFind(string key);
}
public interface Microsoft.VisualStudio.Enterprise.Common.IInstrumentingListener {
    public string Instrumenter { get; }
    public string ToolsPath { get; }
    public Guid SessionId { get; }
    public abstract virtual void Instrumented(string filePath);
    public abstract virtual void ErrorMessage(string message);
    public abstract virtual void Warning(string warningMessage);
    public abstract virtual string get_Instrumenter();
    public abstract virtual string get_ToolsPath();
    public abstract virtual Guid get_SessionId();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Enterprise.Common.IISComponentRegistryKeyFlags : Enum {
    public int value__;
    public static IISComponentRegistryKeyFlags None;
    public static IISComponentRegistryKeyFlags Metabase;
    public static IISComponentRegistryKeyFlags WMICompatibility;
    public static IISComponentRegistryKeyFlags LegacyScripts;
    public static IISComponentRegistryKeyFlags LegacySnapIn;
    public static IISComponentRegistryKeyFlags W3SVC;
    public static IISComponentRegistryKeyFlags ASPNET;
    public static IISComponentRegistryKeyFlags WindowsAuthentication;
    public static IISComponentRegistryKeyFlags ASPNET45;
}
public class Microsoft.VisualStudio.Enterprise.Common.IISHelper : BaseHelper {
    private ServiceController m_IISsvc;
    private ServiceController m_W3svc;
    private ServiceController m_WASsvc;
    private RegistryKey m_IISsvcreg;
    private RegistryKey m_W3svcreg;
    private RegistryKey m_WASsvcreg;
    private RegistryKey m_SIDenvreg;
    private bool m_envfetched;
    private bool m_IISenvfromreg;
    private bool m_W3envfromreg;
    private bool m_WASenvfromreg;
    private string m_ordinal;
    private Uri m_uri;
    internal Dictionary`2<string, string> m_IISenvstrings;
    internal Dictionary`2<string, string> m_IISenvback;
    internal Dictionary`2<string, string> m_W3envstrings;
    internal Dictionary`2<string, string> m_W3envback;
    internal Dictionary`2<string, string> m_WASenvstrings;
    internal Dictionary`2<string, string> m_WASenvback;
    internal Dictionary`2<string, string> m_SIDenv;
    private static string s_reg_svc_prefix;
    private static string s_env_name;
    private static string s_iisadmin_name;
    private static string s_w3svc_name;
    private static string s_WASsvc_name;
    private string WebServerOrdinal { get; }
    internal bool CanStart { get; }
    public bool ValidSessionId { get; }
    public string WebSiteUrl { get; }
    internal int Port { get; }
    internal string RootPath { get; }
    public string PhysicalPath { get; }
    public string FriendlyName { get; }
    public bool IsLocal { get; }
    public string WorkerProcessName { get; }
    internal Uri BaseUri { get; }
    private string PathFromUri { get; }
    internal string AppRoot { get; }
    public IISHelper(AspNetHelper aspnethelper, Uri uri, BasicAuthCredential credential);
    public static string GetDnsResolutionString(string siteUrl);
    private static string GetWebServerOrdinal(Uri site);
    private string get_WebServerOrdinal();
    internal virtual bool get_CanStart();
    private bool IssueStopAndWait();
    private static bool IssueStopAndWait(ServiceController service);
    private bool IssueStart();
    private static bool IssueStart(ServiceController service);
    private bool PrimeHelper();
    public virtual void MakeWebRequest();
    private bool InternalReset(bool fStop);
    private bool IsSiteResponding(Uri uri);
    public virtual void SetEnv(string var, string val);
    public virtual bool DelEnv(string var);
    public virtual List`1<string> GetEnvRegistryKeys();
    public virtual void CommitEnv(bool fSet);
    private void CommitEnv(Dictionary`2<string, string> table, RegistryKey rk, bool set, bool fromenv);
    public virtual void QueryEnv(String[]& vars, String[]& values);
    public void GetSIDenvreg();
    public virtual void Shutdown();
    public virtual bool Launch();
    public virtual bool LaunchReset();
    public virtual bool Reset();
    public virtual bool StartService();
    public virtual bool get_ValidSessionId();
    public virtual string get_WebSiteUrl();
    internal virtual int get_Port();
    internal string get_RootPath();
    public virtual string get_PhysicalPath();
    public virtual string get_FriendlyName();
    public virtual bool get_IsLocal();
    public virtual string get_WorkerProcessName();
    private static bool IIS5IsolationModeEnabled();
    private ArrayList GetDefaultServiceEnv(UInt32 procid);
    private void PreFetchEnv();
    private RegistryKey PreFetchEnv(Dictionary`2& table, string name, Boolean& envfromreg);
    internal virtual Uri get_BaseUri();
    private string get_PathFromUri();
    internal virtual string get_AppRoot();
    private static string StringUpToLastIndexOf(string str, char c);
}
public static class Microsoft.VisualStudio.Enterprise.Common.IISRegistryChecker : object {
    private static string IISVersionRegistryPath;
    private static string IISComponentsRegistrySubPath;
    private static string IISServicesPath;
    private static string IISServicesValue;
    private static string WebAdministrationAssemblyName;
    private static string IISVersionMinorKey;
    private static string IISVersionMajorKey;
    private static string W3SvcName;
    public static int UnknownIISVersion;
    public static int IISMajorVersion { get; }
    public static int IISMinorVersion { get; }
    public static bool IISManagementPresent { get; }
    public static bool AreIISEssentialsInstalled { get; }
    public static bool IsIIS6CompatibilityInstalled { get; }
    private static IISRegistryChecker();
    public static int get_IISMajorVersion();
    public static int get_IISMinorVersion();
    public static bool get_IISManagementPresent();
    public static IISComponentRegistryKeyFlags RequiredIISComponentsNotInstalled();
    public static bool get_AreIISEssentialsInstalled();
    public static bool get_IsIIS6CompatibilityInstalled();
    public static bool AreIISComponentsInstalled(IISComponentRegistryKeyFlags regFlags);
    private static bool IsIISComponentRegistryKeyPresent(IISComponentRegistryKeyFlags key);
    private static string GetHKLMMultiSzKeyValue(string subKeyName, string valueName);
    private static object GetHKLMDwordKeyValue(string subKeyName, string valueName, object defaultValue);
    private static bool IsWow64Process(UIntPtr handle);
}
public class Microsoft.VisualStudio.Enterprise.Common.InstrumentEvent : MulticastDelegate {
    public InstrumentEvent(object object, IntPtr method);
    public virtual void Invoke(string value);
    public virtual IAsyncResult BeginInvoke(string value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.Enterprise.Common.Listener : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private string <Instrumenter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SessionId>k__BackingField;
    public string Instrumenter { get; private set; }
    public string ToolsPath { get; private set; }
    public Guid SessionId { get; private set; }
    public Listener(string vsinstr, string vsinstrPath, Guid sessionId);
    public sealed virtual void Instrumented(string filePath);
    public sealed virtual void ErrorMessage(string message);
    public sealed virtual void Warning(string warning);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Instrumenter();
    [CompilerGeneratedAttribute]
private void set_Instrumenter(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ToolsPath();
    [CompilerGeneratedAttribute]
private void set_ToolsPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_SessionId();
    [CompilerGeneratedAttribute]
private void set_SessionId(Guid value);
}
public static class Microsoft.VisualStudio.Enterprise.Common.MainStaThread : object {
    private static STAThread s_mainThread;
    public static void EnsureInitialized();
    public static void RunOperation(Operation operation);
}
internal static class Microsoft.VisualStudio.Enterprise.Common.NativeMethods : object {
    internal static int WM_QUERYENDSESSION;
    internal static int WM_CLOSE;
    internal static UInt32 HKEY_LOCAL_MACHINE;
    internal static int KEY_WOW64_64KEY;
    internal static int KEY_READ;
    public static int GetCurrentThreadId();
    internal static int CloseHandle(IntPtr h);
    internal static int CloseHandle(UIntPtr h);
    internal static IntPtr OpenProcess(UInt32 dwDesiredAccess, bool bInheritHandle, UInt32 dwProcessId);
    internal static bool OpenProcessToken(IntPtr hProc, UInt32 dwDesiredAccess, IntPtr& hToken);
    internal static bool CreateEnvironmentBlock(IntPtr& env, IntPtr hToken, int fInherit);
    internal static bool DestroyEnvironmentBlock(IntPtr henv);
    public static bool PostMessage(HandleRef hwnd, int msg, IntPtr wparam, IntPtr lparam);
    public static IntPtr SendMessageTimeout(HandleRef hWnd, UInt32 Msg, UIntPtr wParam, UIntPtr lParam, SendMessageTimeoutFlags fuFlags, UInt32 uTimeout, UIntPtr& lpdwResult);
    public static int EnumWindows(EnumWindowsCallback callback, IntPtr lparam);
    public static UInt32 GetWindowThreadProcessId(IntPtr hwnd, Int32& pid);
    public static bool IsWindow(IntPtr hWnd);
    internal static bool Succeeded(UInt32 hr);
    internal static bool Succeeded(int hr);
    internal static int RegOpenKeyExW(UIntPtr hKey, string subKey, UInt32 options, int sam, UIntPtr& phkResult);
    internal static int RegCloseKey(UIntPtr pHkey);
    internal static int RegQueryValueExW(UIntPtr hkey, string lpValueName, IntPtr lpReserved, UInt32& lpType, Int32& pdwData, UInt32& pcbData);
    internal static int RegQueryValueExW(UIntPtr hkey, string lpValueName, IntPtr lpReserved, UInt32& lpType, Byte[] chars, UInt32& pcbData);
    internal static bool IsWow64Process(UIntPtr hProcess, Boolean& wow64Process);
    internal static UIntPtr GetCurrentProcess();
}
public class Microsoft.VisualStudio.Enterprise.Common.Operation : MulticastDelegate {
    public Operation(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.Enterprise.Common.ResourceLoader : object {
    private static ResourceManager s_rm;
    public static string GetString(string res_str_id);
    internal static string FormatString(string res_str_id, Object[] args);
}
internal class Microsoft.VisualStudio.Enterprise.Common.STAThread : object {
    public int Id;
    private Form m_hiddenForm;
    public static int CurrentThreadId { get; }
    public void RunOperation(Operation operation);
    public static int get_CurrentThreadId();
}
internal enum Microsoft.VisualStudio.Enterprise.Common.VSITEMID : Enum {
    public UInt32 value__;
    public static VSITEMID VSITEMID_NIL;
    public static VSITEMID VSITEMID_ROOT;
    public static VSITEMID VSITEMID_SELECTION;
}
public class Microsoft.VisualStudio.Enterprise.Common.WebDevHelper : BaseWebDevHelper {
    private static string LatestDirectoryForCassini;
    private static string VSIISExpressWebServer;
    private static string VSIISExpressWebServerPath;
    private static string IISExpressRegistryKeyName;
    private static string IISExpressRegistryKey;
    private static string UseIISExpressRegistryKeyName;
    private static string QualityToolsRegistryKey;
    private static string VsInstallDirValueKeyName;
    public static string VisualStudioRootRegKey32;
    public static string VisualStudioRootRegKey64;
    public WebDevHelper(AspNetHelper aspnethelper, string path, string approot);
    public WebDevHelper(AspNetHelper aspnethelper, string path, string approot, int port);
    protected virtual bool KillWebDev();
    protected virtual bool StartWebDev(bool reset);
    private void ThrowIfWebServerNotFound();
    private string GetPathToIISExpress();
    private string GetPathToCassini();
    private string GetPathToIISExpressFromRegistry();
    private bool ShouldIISExpressBeUsed();
    private string GetVsInstallDir();
    private static bool Is64BitProcess();
    private static bool FindWindowPid(IntPtr hwnd, IntPtr param);
    private int ComputePort();
    private int GetRegistryPort();
    private int GetNextAvailPort();
    private bool CanConnectToPort();
}
public class Microsoft.VisualStudio.Enterprise.Common.WebDevProjHelper : BaseWebDevHelper {
    private IVsProjectServerHost _project;
    public WebDevProjHelper(AspNetHelper aspnethelper, string path, string approot, object project);
    protected virtual bool KillWebDev();
    protected virtual bool StartWebDev(bool reset);
    private string GetTargetEnvironmentBlock();
}
public class Microsoft.VisualStudio.Enterprise.WebInstrument.AppPoolInfo : object {
    private static ProcessModelIdentityType ProcessModelIdentityType_ApplicationPoolIdentity;
    private static string AppPoolUserPrefix;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Is64BitPool>k__BackingField;
    public string Name { get; public set; }
    private Nullable`1<bool> Is64BitPool { get; private set; }
    public bool IsStarted { get; }
    public bool Is64BitEnabled { get; }
    public AppPoolInfo(string name);
    private AppPoolInfo(ApplicationPool pool);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
private Nullable`1<bool> get_Is64BitPool();
    [CompilerGeneratedAttribute]
private void set_Is64BitPool(Nullable`1<bool> value);
    public static IList`1<AppPoolInfo> GetAllPools();
    private static void VerifyIISSupport();
    private void VerifyPoolExists();
    private ApplicationPool GetApplicationPool(ServerManager sm);
    private static IList`1<AppPoolInfo> GetAllPoolsCore();
    public static Version GetIISVersion();
    public SecurityIdentifier GetUser();
    public bool get_IsStarted();
    public string FrameworkVersion();
    public IList`1<UInt32> GetWorkerProcessIds();
    public bool get_Is64BitEnabled();
    public static SecurityIdentifier GetUserFromAppPool(object applicationPool);
    public static SecurityIdentifier GetAppPoolIdentitySid(string poolName);
    public static SecurityIdentifier CreateSidFromUser(string userName);
}
public class Microsoft.VisualStudio.Enterprise.WebInstrument.IISLegacyVersionException : WebInstrumenterException {
    public IISLegacyVersionException(int iisVersion);
    public IISLegacyVersionException(string message);
    public IISLegacyVersionException(string message, Exception innerException);
    protected IISLegacyVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Enterprise.WebInstrument.IISResetterException : WebInstrumenterException {
    public IISResetterException(string message);
    public IISResetterException(string message, Exception innerException);
    protected IISResetterException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Enterprise.WebInstrument.InvalidApplicationPoolException : WebInstrumenterException {
    public InvalidApplicationPoolException(string message);
    public InvalidApplicationPoolException(string appPoolName, Exception inner);
    protected InvalidApplicationPoolException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Enterprise.WebInstrument.ManagementNotPresentException : IISResetterException {
    public ManagementNotPresentException(Exception innerException);
    public ManagementNotPresentException(string message);
    public ManagementNotPresentException(string message, Exception innerException);
    protected ManagementNotPresentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Enterprise.WebInstrument.UnknownAppPoolUserException : IISResetterException {
    public UnknownAppPoolUserException(string message);
    public UnknownAppPoolUserException(string message, Exception innerException);
    protected UnknownAppPoolUserException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.Enterprise.WebInstrument.WebInstrumenterException : Exception {
    public WebInstrumenterException(string message);
    public WebInstrumenterException(string message, Exception innerException);
    protected WebInstrumenterException(SerializationInfo info, StreamingContext context);
}
[GuidAttribute("6380BCFF-41D3-4B2E-8B2E-BF8A6810C848")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Setup.Interop.IEnumSetupInstances {
    public abstract virtual void Next(int celt, ISetupInstance& rgelt, Int32& pceltFetched);
    public abstract virtual void Skip(int celt);
    public abstract virtual void Reset();
    public abstract virtual IEnumSetupInstances Clone();
}
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Setup.Interop.ISetupConfiguration {
    public abstract virtual IEnumSetupInstances EnumInstances();
    public abstract virtual ISetupInstance GetInstanceForCurrentProcess();
    public abstract virtual ISetupInstance GetInstanceForPath(string path);
}
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.Setup.Interop.ISetupInstance {
    public abstract virtual string GetInstanceId();
    public abstract virtual FILETIME GetInstallDate();
    public abstract virtual string GetInstallationName();
    public abstract virtual string GetInstallationPath();
    public abstract virtual string GetInstallationVersion();
    public abstract virtual string GetDisplayName(int lcid);
    public abstract virtual string GetDescription(int lcid);
    public abstract virtual string ResolvePath(string pwszRelativePath);
}
[GuidAttribute("177F0C4A-1CD3-4DE7-A32C-71DBBB9FA36D")]
internal class Microsoft.VisualStudio.Setup.Interop.SetupConfiguration : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
