[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.QualityTools.AgentObject.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentExecution : MarshalByRefObject {
    private AgentObject m_agentObject;
    private IResultSink m_resultSink;
    private bool m_allowAdapterMessages;
    private bool m_resultSent;
    private object m_shutdownLock;
    private object m_executingTestLock;
    private TestStateMachine m_testState;
    private Guid m_runId;
    private Guid m_execId;
    private TestOutcome m_testOutcome;
    private ITestElement m_testElement;
    private IBaseAdapter m_testAdapter;
    private ILoadTestAdapter m_loadAdapter;
    private ITestContext m_testContext;
    private bool m_loadTest;
    private Thread m_testThread;
    private ManualResetEvent m_testThreadComplete;
    private Thread m_stateExecutionThread;
    private TimerKey m_testTimeoutKey;
    private DateTime m_startTime;
    private ManualResetEvent m_testPaused;
    private ManualResetEvent m_testRunning;
    private ManualResetEvent m_testCompleted;
    private int m_synchronizedTimeout;
    private static int c_defaultSyncTimeout;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestExecutionCompletedEventArgs> TestExecutionCompleted;
    private bool IsNotificationForCollectorsNeeded { get; }
    internal string TestName { get; }
    internal ITestElement TestElement { get; }
    internal TestState TestState { get; }
    internal bool IsExecutedUnderDebugger { get; }
    internal ManualResetEvent TestPaused { get; }
    internal ManualResetEvent TestRunning { get; }
    internal ManualResetEvent TestCompleted { get; }
    public int SynchronizedTimeout { get; }
    internal Guid RunId { get; }
    internal void Initialize(AgentObject agentObject, IResultSink resultSink);
    internal void StartTest(ITestElement test, IBaseAdapter adapter, ITestContext context, bool loadTest, bool forceSynchronousExecution);
    private void ExecuteTest(object obj);
    private void ExecuteTest(bool forceSynchronousExecution);
    private void TestStateStarting();
    private void TestStateStarted();
    private void TestStateRunning();
    private void TestStatePausing();
    private void TestStatePaused();
    private void TestStateResuming();
    private void TestStateTimeout();
    private void TestStateStopping();
    private void TestStateAborting();
    private void TestStateCompleting();
    private void TestStateCompleted();
    internal void PauseTest();
    internal void ResumeTest();
    internal void StopTest();
    internal void AbortTest();
    private void CompleteTest();
    internal void ReceiveMessage(object message);
    internal void Hello();
    public sealed virtual void AddResult(TestMessage message);
    private void SendTestResult(TestOutcome outcome, string message);
    private void SendTestResult(TestOutcome outcome, string message, Exception ex);
    private void SendStateEvent(TestState newState);
    internal void ForceStop();
    private void OnTestTimeout();
    private void CallAdapterRunMethod(object obj);
    private bool get_IsNotificationForCollectorsNeeded();
    internal string get_TestName();
    internal ITestElement get_TestElement();
    internal TestState get_TestState();
    internal bool get_IsExecutedUnderDebugger();
    internal ManualResetEvent get_TestPaused();
    internal ManualResetEvent get_TestRunning();
    internal ManualResetEvent get_TestCompleted();
    public int get_SynchronizedTimeout();
    internal Guid get_RunId();
    [CompilerGeneratedAttribute]
internal void add_TestExecutionCompleted(EventHandler`1<TestExecutionCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_TestExecutionCompleted(EventHandler`1<TestExecutionCompletedEventArgs> value);
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentIPHelper : object {
    private ManagedNICHelper m_managedNIChelper;
    private AgentIPConfig m_agentIpConfig;
    private String[] m_ipArray;
    public String[] IPArray { get; }
    internal static String[] GetNICNames();
    internal void SetIPInformation(AgentIPConfig ipConfig);
    internal void CleanupIPAddresses();
    public String[] get_IPArray();
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentObject : MarshalByRefObject {
    private static int DefaultMinDataCollectorThreadPoolThreads;
    private static int DefaultMaxDataCollectorThreadPoolThreads;
    private IControllerCallback m_controller;
    private bool m_connectionLost;
    private IDeploymentManager m_deploymentManager;
    private AgentStateMachine m_agentState;
    private Thread m_stateMachineThread;
    private ManualResetEvent m_agentOnline;
    private List`1<AgentExecution> m_executionList;
    private ManualResetEvent m_executeTests;
    private bool m_testsAborted;
    private Guid m_runId;
    private TestRun m_testRun;
    private Queue`1<TestRun> m_testRunQueue;
    private Queue`1<Dictionary`2<string, object>> m_settingsQueue;
    private RunContext m_runContext;
    private IContextAccessor m_runContextVariables;
    private TestContext m_testContext;
    private RunConfiguration m_runConfig;
    private TestAdapterManager m_testAdapterManager;
    private AspNetWebSiteConfigurer m_webSiteConfigurer;
    private object m_webSiteConfigurerLock;
    private ExecutionPluginManager m_executionPluginMgr;
    private EqtThreadPool m_dataCollectionThreadPool;
    private SafeAbortableUserWorkItemFactory m_userWorkItemFactory;
    private ISyncStartTest m_syncStartTest;
    private Queue`1<ITestElement> m_testQueue;
    private Thread m_testQueueThread;
    private BackgroundTestMessageProcessor`1<TestMessage> m_testMessageSender;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_allowTestMessages;
    private Thread m_heartbeatThread;
    private static int c_heartbeatTime;
    private ManualResetEvent m_indicateHeartbeatThreadToExit;
    private int m_copyResultFilesTimeout;
    private static int c_defaultCopyResultFilesTimeoutInSeconds;
    private Timer m_timeoutTimer;
    private object m_timeoutTimerLock;
    private SingleThreadTimerManager m_testTimeoutManager;
    private object m_testTimeoutManagerLock;
    private static int c_maxHandlesPerWait;
    private int m_testThreadCount;
    private int m_maximumAllowedHangs;
    private int c_defaultMaxAllowedHangs;
    private Nullable`1<int> m_stopTestRunTimeout;
    private static int c_defaultStopTestRunTimeout;
    private Nullable`1<int> m_adapterStopTestRunTimeout;
    private static int c_defaultAdapterStopTestRunTimeout;
    private Nullable`1<int> m_testEndCollectorEventTimeout;
    private static int c_defaultTestEndCollectorEventTimeout;
    private int m_testCleanupTimeout;
    private IPSimulationManager m_ipSimulationMgr;
    private AgentIPHelper m_agentIPHelper;
    private TestRunDirectories m_testRunDirectories;
    private bool m_deleteResultFiles;
    private FileCopyServiceFlags m_deploymentFlags;
    private bool m_deploying;
    private object m_deployingLock;
    private string m_originalWorkingDirectory;
    private object m_messagePumpThreadLock;
    private IDictionary`2<Guid, EqtThreadPool> m_innerTestThreadPools;
    private ReaderWriterLock m_innerTestThreadPoolsLock;
    private AgentRestartInfo m_restartInfo;
    private EventPumpSink m_dataCollectionEventReceiverSink;
    private BackgroundJobProcessor`1<SynchronizedEventInfo> m_dataCollectionEventReceiver;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_allowDataCollectionMessages;
    private DataCollectionEnvironmentContext m_dataCollectionEnvironmentContext;
    private bool m_isDisposed;
    private Semaphore m_executionUnitAvailable;
    private int m_parallelTestCount;
    public DataCollectionEnvironmentContext DataCollectionEnvironmentContext { get; public set; }
    public bool CloseHostApplication { get; }
    public ICollectorEventSink CollectorEventSink { get; }
    public bool IsRemote { get; }
    public ManualResetEvent Online { get; }
    public string AgentName { get; }
    public string AgentDisplayName { get; }
    internal Guid RunId { get; }
    internal TestRun TestRun { get; }
    public IAgentProcessManager AgentProcessManager { get; }
    internal TestRunDirectories TestRunDirectories { get; }
    internal IResultSink ResultSink { get; }
    public IRunContext RunContext { get; }
    public IContextAccessor RunContextVariables { get; }
    internal IExecutionRunConfiguration RunConfig { get; }
    internal SingleThreadTimerManager TestTimeoutManager { get; }
    internal int StopTestRunTimeout { get; }
    internal int AdapterStopTestRunTimeout { get; }
    private int TestEndCollectorEventTimeout { get; }
    internal IDictionary`2<Guid, EqtThreadPool> InnerTestThreadPools { get; }
    internal ReaderWriterLock InnerTestThreadPoolsLock { get; }
    private SafeAbortableUserWorkItemFactory UserWorkItemFactory { get; }
    public AgentObject(IControllerCallback controller, DataCollectionEnvironmentContext dataCollectionEnvironmentContext);
    public void CleanupExecutionPlugins();
    public sealed virtual void Dispose();
    private void AgentStateOnline();
    private void AgentStateQueuing();
    protected virtual bool CheckForTestRunExecutionRestart(AgentRestartInfo restartInfo, Dictionary`2<string, object> agentSettings);
    private void AgentStateDeploying();
    private void AgentStateDeployed();
    private void AgentStateRunSetupScript();
    private void AgentStateInitializeDataCollectors();
    private void AgentStateSynchronizing();
    private void AgentStateStarting();
    private void AgentStateRunning();
    private void AgentStatePausing();
    private void AgentStatePaused();
    private void AgentStateResuming();
    private void AgentStateStopping();
    private void AgentStateAborting();
    private void AgentStateCompleting();
    private void AgentStateWaiting();
    private void AgentStateCleanupDataCollectors();
    private void AgentStateRunCleanupScript();
    private void AgentStateCleanup();
    private void AgentStateRunCompleted();
    private bool SetRunContext(Dictionary`2<string, object> agentSettings);
    private bool SetWorkingDirectory(string directoryPath);
    private int AdjustParallelTestCount(int countProvidedByUser);
    private void ExecuteTest(ITestElement test, IResultSink resultSink, TestContext testContext, bool loadTest);
    private void ExecuteTest(ITestElement test, IResultSink resultSink, TestContext testContext, bool loadTest, bool forceSynchronousExecution);
    private void OnExecutionTestCompleted(object sender, TestExecutionCompletedEventArgs args);
    internal bool RaiseEventAndWait(DataCollectionEventArgs args, bool raiseToController, bool useDataSynchronization);
    private bool InvokeController(Action invokeController, string caller);
    private void SendRunStateEvent(RunState newState);
    private void ProcessExecutionPluginMgrException(Exception ex);
    private void SendTestRunMessage(string message);
    private void ReportTestFailure(IResultSink resultSink, ITestElement test, TestOutcome outcome, string errorMessage);
    private void ReportStateEvent(IResultSink resultSink, ITestElement test, TestState newState);
    private void AbortTestRun(bool setStateDirectly);
    private void TestQueueThread(object obj);
    private void HeartbeatThread(object obj);
    private void OnSendTestMessage(TestMessage testMessage, IQueuedJobs`1<TestMessage> queuedJobs);
    private void OnConnectionLost();
    private void WaitForPauseOrComplete(object obj);
    private static void WaitForTestState(AgentExecution execution, TestWaitFlags waitFlags);
    private static void WaitForTestState(object param);
    private void RunSetupScript(object obj);
    private void RunCleanupScript(object obj);
    private void StopDeployment();
    protected virtual bool CheckForAgentRestart(ITestElement[] allTests, Dictionary`2<string, object> agentSettings, ITestElement[]& testsToRun);
    private static string GetExecutionId(Dictionary`2<string, object> agentSettings);
    private void UpdateRestartInfoAfterCompletedTest();
    private void RemoveRestartInfo();
    private void InitializeDataCollectors();
    private void SendCollectionRunStateMessage();
    private void InitMaximumAllowedHangs(int parallelTestCount);
    public sealed virtual DataCollectionEnvironmentContext get_DataCollectionEnvironmentContext();
    public sealed virtual void set_DataCollectionEnvironmentContext(DataCollectionEnvironmentContext value);
    public sealed virtual AgentState GetAgentState();
    public sealed virtual void QueueTests(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings);
    public sealed virtual void BeginSyncStart();
    public sealed virtual void PauseTests();
    public sealed virtual void ResumeTests();
    public sealed virtual void StopTests();
    public sealed virtual void AbortTests();
    public void PauseTestRun();
    public void StopTestRun();
    public sealed virtual void ReceiveMessage(object message);
    public sealed virtual void RunEndFileCopyComplete();
    public sealed virtual bool Cleanup(int maxWaitTime);
    public sealed virtual bool get_CloseHostApplication();
    public sealed virtual void Hello();
    public sealed virtual AgentDataCollectorInformation GetDataCollectorInformation();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.SetExecutionPluginManager(ExecutionPluginManager manager);
    public sealed virtual void FileCopyComplete(Exception ex);
    public sealed virtual void AddResult(TestMessage message);
    public sealed virtual ICollectorEventSink get_CollectorEventSink();
    private void DispatchControllerEvent(SynchronizedEventInfo synchronizedEventInfo, IQueuedJobs`1<SynchronizedEventInfo> queuedJobs);
    private void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    private void TimeoutHandler(object o);
    private void SetTimeout(int timeout);
    private void CancelTimeout();
    internal void IncrementTestCount();
    internal void DecrementTestCount();
    public bool get_IsRemote();
    public ManualResetEvent get_Online();
    public string get_AgentName();
    public string get_AgentDisplayName();
    internal Guid get_RunId();
    internal TestRun get_TestRun();
    public IAgentProcessManager get_AgentProcessManager();
    internal TestRunDirectories get_TestRunDirectories();
    internal IResultSink get_ResultSink();
    public IRunContext get_RunContext();
    public IContextAccessor get_RunContextVariables();
    internal IExecutionRunConfiguration get_RunConfig();
    internal SingleThreadTimerManager get_TestTimeoutManager();
    internal int get_StopTestRunTimeout();
    internal int get_AdapterStopTestRunTimeout();
    private int get_TestEndCollectorEventTimeout();
    internal IDictionary`2<Guid, EqtThreadPool> get_InnerTestThreadPools();
    internal ReaderWriterLock get_InnerTestThreadPoolsLock();
    private SafeAbortableUserWorkItemFactory get_UserWorkItemFactory();
    private AdapterRunResult AdapterRun(ITestElement[] testElements, IResultSink resultSink, IDictionary`2<string, object> contextProperties, bool loadTest);
    public sealed virtual AdapterRunResult Run(ITestElement[] testElements, IResultSink resultSink);
    public sealed virtual AdapterRunResult LoadRun(ITestElement[] testElements, IResultSink resultSink, IDictionary`2<string, object> contextProperties);
    public virtual object InitializeLifetimeService();
    [CompilerGeneratedAttribute]
private void <AgentStateRunCompleted>b__94_0();
    [CompilerGeneratedAttribute]
private void <StopDeployment>b__118_0();
    [CompilerGeneratedAttribute]
private void <AbortTests>b__135_0(object unusedParam);
    [CompilerGeneratedAttribute]
private void <AbortTests>b__135_1();
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentRestartInfo : object {
    private static string RESTART_INFO_FILENAME;
    private static object m_lock;
    private Guid m_runId;
    private int m_testsCompleted;
    private string m_executionId;
    public Guid RunId { get; }
    public string ExecutionId { get; public set; }
    public int TestsCompleted { get; public set; }
    public AgentRestartInfo(Guid runId, string executionId);
    private static AgentRestartInfo();
    public static void Write(AgentRestartInfo restartInfo, string directory);
    public static AgentRestartInfo Read(string directory);
    public static void Clear(string directory);
    public Guid get_RunId();
    public string get_ExecutionId();
    public void set_ExecutionId(string value);
    public void set_TestsCompleted(int value);
    public int get_TestsCompleted();
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentRestartInfoSerializationBinder : SerializationBinder {
    private static HashSet`1<string> SupportedTypes;
    private static AgentRestartInfoSerializationBinder();
    public virtual Type BindToType(string assemblyName, string typeName);
}
internal class Microsoft.VisualStudio.TestTools.Agent.RunContext : MarshalByRefObject {
    private AgentObject m_agentObject;
    private IResultSink m_resultSink;
    public IContextAccessor RunContextVariables { get; }
    public IResultSink ResultSink { get; }
    public IExecutionRunConfiguration RunConfig { get; }
    public Guid TestRunId { get; }
    public string AgentName { get; }
    public ITestRunner TestRunner { get; }
    public RunContext(AgentObject agentObject);
    public sealed virtual IContextAccessor get_RunContextVariables();
    public sealed virtual IResultSink get_ResultSink();
    public sealed virtual IExecutionRunConfiguration get_RunConfig();
    public Guid get_TestRunId();
    public sealed virtual string get_AgentName();
    public sealed virtual void StopTestRun();
    public sealed virtual void PauseTestRun();
    public sealed virtual ITestRunner get_TestRunner();
    public virtual object InitializeLifetimeService();
    internal void Close();
    public sealed virtual DataTable ReadTable(string invariantProviderName, string connectionString, string tableName);
    public sealed virtual List`1<string> GetColumns(string invariantProviderName, string connectionString, string tableName);
}
internal class Microsoft.VisualStudio.TestTools.Agent.TestContext : MarshalByRefObject {
    private ContextBase m_contextBase;
    private RunContext m_runContext;
    private IResultSink m_resultSink;
    private Dictionary`2<string, object> m_properties;
    public IContextAccessor TestContextVariables { get; }
    public IContextAccessor RunContextVariables { get; }
    public IResultSink ResultSink { get; internal set; }
    public IDictionary`2<string, object> Properties { get; }
    public TestContext(RunContext runContext);
    public TestContext(TestContext other);
    protected TestContext(SerializationInfo info, StreamingContext context);
    public void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual IContextAccessor get_TestContextVariables();
    public sealed virtual IContextAccessor get_RunContextVariables();
    public sealed virtual IResultSink get_ResultSink();
    internal void set_ResultSink(IResultSink value);
    public sealed virtual IDictionary`2<string, object> get_Properties();
    public virtual object InitializeLifetimeService();
    internal void Close();
}
internal class Microsoft.VisualStudio.TestTools.Agent.TestExecutionCompletedEventArgs : EventArgs {
    private AgentExecution m_execution;
    private bool m_wasTestExecutedSynchnously;
    internal AgentExecution Execution { get; }
    internal bool WasTestExecutedSynchronously { get; }
    internal TestExecutionCompletedEventArgs(AgentExecution execution, bool wasTestExecutedSynchnously);
    internal AgentExecution get_Execution();
    internal bool get_WasTestExecutedSynchronously();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentDataCollectorNotifications : DataCollectorNotifications {
    private TestRun m_testRun;
    private AgentObject m_agentObject;
    private SafeAbortableUserWorkItemFactory m_workItemFactory;
    [CompilerGeneratedAttribute]
private AsyncCompletedEventHandler CustomEventCompleted;
    [CompilerGeneratedAttribute]
private bool <EventsEnabled>k__BackingField;
    public bool EventsEnabled { get; public set; }
    public AgentDataCollectorNotifications(TestRun testRun, AgentObject agentObject, SafeAbortableUserWorkItemFactory workItemFactory);
    [CompilerGeneratedAttribute]
public virtual void add_CustomEventCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_CustomEventCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public bool get_EventsEnabled();
    [CompilerGeneratedAttribute]
public void set_EventsEnabled(bool value);
    public virtual void RaiseTestFailedEvent(ITestElement testCase, TestCaseFailureType failureType);
    public virtual void RaiseCustomEvent(CustomNotificationEventArgs eventArgs, NotificationBroadcastLevel broadcastLevel);
    public virtual void RaiseCustomEventAsync(CustomNotificationEventArgs eventArgs, NotificationBroadcastLevel broadcastLevel, object userToken);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.ICollectorEventSink.RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.ICollectorEventSink.RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
    private DataCollectionEventArgs PackageCustomNotification(CustomNotificationEventArgs args, NotificationBroadcastLevel broadcastLevel);
    private void SendEvent(DataCollectionEventArgs eventArgs, NotificationBroadcastLevel broadcastLevel);
    private bool ShouldRaiseToController(NotificationBroadcastLevel broadCastLevel);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentDataCollectorNotificationsFactory : DataCollectorNotificationsFactory {
    private AgentObject m_agentObject;
    private SafeAbortableUserWorkItemFactory m_workItemFactory;
    public AgentDataCollectorNotificationsFactory(AgentObject agentObject, SafeAbortableUserWorkItemFactory workItemFactory);
    public virtual DataCollectorNotifications Create(TestRun testRun);
}
