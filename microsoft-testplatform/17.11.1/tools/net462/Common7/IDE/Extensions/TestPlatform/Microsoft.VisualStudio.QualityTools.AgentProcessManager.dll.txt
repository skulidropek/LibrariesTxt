[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.QualityTools.AgentProcessManager.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentProcessDebugStartupInfo : AgentProcessStartupInfo {
    private IDebugTestCallback m_debugTestCallback;
    private DebugInfo m_debugInfo;
    public IDebugTestCallback DebugTestCallback { get; }
    public DebugInfo DebugInfo { get; }
    internal bool IsProcessRecoverySupported { get; }
    public AgentProcessDebugStartupInfo(string commandLineArgs, string workingDirectory, IDebugTestCallback debugTestCallback, DebugInfo debugInfo);
    public IDebugTestCallback get_DebugTestCallback();
    public DebugInfo get_DebugInfo();
    internal virtual bool get_IsProcessRecoverySupported();
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentProcessManager : MarshalByRefObject {
    private DataCollectionEnvironmentContext m_dataCollectionEnvironmentContext;
    private AgentProcessStartupInfo m_agentProcessStartupInfo;
    private IControllerCallback m_controllerCallback;
    private IDeploymentManager m_deploymentManager;
    private HostProcessPlatformHelper m_hostProcessPlatformHelper;
    private object m_processLock;
    private AgentProcessProxyManager m_agentProcessProxyManager;
    private object m_sinkLock;
    private RemoteDataProvider m_dataConnectionProvider;
    private AgentStatusAggregator m_agentStatusAggregator;
    private TestRun modreq(System.Runtime.CompilerServices.IsVolatile) m_run;
    private FileCopyService m_fileCopyService;
    private Dictionary`2<string, object> m_agentSettings;
    private bool m_closeHostApplication;
    private ManualResetEvent m_hostShutdown;
    private ManualResetEvent m_agentDied;
    private ManualResetEvent m_dataCollectionAgentStarted;
    private ManualResetEvent m_testAgentsStarted;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_dataCollectionAgentDied;
    private bool m_dataCollectionAgentQueueRunPending;
    private static int c_agentProcessStartup;
    private EventPumpSink m_dataCollectionEventReceiverSink;
    private BackgroundJobProcessor`1<SynchronizedEventInfo> m_dataCollectionEventReceiver;
    private Dictionary`2<string, string> m_processEnvironmentVariablesBackup;
    private UserEnvironmentVariablesHelper m_userEnvironmentVariablesHelper;
    private bool m_lastRunUsedSpecialEnvironment;
    private Thread m_initializeDataCollectorCacheThread;
    private object m_initializeDataCollectorCacheThreadLock;
    private Thread m_sendDataCollectorInformationThread;
    private object m_sendDataCollectorInformationThreadLock;
    private object m_lock;
    private object m_disposeLock;
    private bool m_isDisposed;
    private bool m_restartExecutionProcessForEachRun;
    private static string RestartTestExecutionProcessForEachRun;
    [CompilerGeneratedAttribute]
private EventHandler AgentDied;
    [CompilerGeneratedAttribute]
private EventHandler FailedToReachController;
    internal HostProcessPlatformHelper HostProcessPlatformHelper { get; }
    public ProcessorArchitecture CurrentPlatform { get; public set; }
    public AssemblyClrVersion CurrentClrVersion { get; public set; }
    public ITestAgentProxy PrimaryExecutionAgent { get; }
    private bool IsExecutingTests { get; }
    public ManualResetEvent HostShutdown { get; }
    public bool HasShutdown { get; }
    public ICollectorEventSink CollectorEventSink { get; }
    private bool Microsoft.VisualStudio.TestTools.Agent.IAgentObject.CloseHostApplication { get; }
    public IControllerCallback ControllerCallback { get; public set; }
    public DataCollectionEnvironmentContext DataCollectionEnvironmentContext { get; public set; }
    public IRemoteDataProvider DataConnectionProvider { get; }
    public AgentProcessManager(DataCollectionEnvironmentContext dataCollectionEnvironmentContext);
    public AgentProcessManager(DataCollectionEnvironmentContext dataCollectionEnvironmentContext, IDeploymentManager deploymentManager);
    public AgentProcessManager(DataCollectionEnvironmentContext dataCollectionEnvironmentContext, IDeploymentManager deploymentManager, ProcessStrategy processStrategy);
    public AgentProcessManager(DataCollectionEnvironmentContext dataCollectionEnvironmentContext, IDeploymentManager deploymentManager, ProcessStrategy processStrategy, AgentStatusAggregator agentStatusAggregator);
    private void InitializeRestartConfiguration();
    private void UnregisterProxyManagerEventHandlers();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public void add_AgentDied(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_AgentDied(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FailedToReachController(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FailedToReachController(EventHandler value);
    public virtual object InitializeLifetimeService();
    public void KillAgentProcess();
    public void RestartAgentProcess();
    public void Shutdown(int timeout);
    private void ResetAgentEvents();
    public void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo, TestRunConfiguration testRunConfiguration);
    public void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo, bool startDataCollectionAgent);
    private void StartupDataCollectionAgent(AgentProcessStartupInfo agentProcessStartupInfo);
    private void StartupTestAgents(AgentProcessStartupInfo agentProcessStartupInfo);
    public void WaitForAgentProcessToStart();
    public void WaitForDataCollectionAgentProcessToStart();
    internal void HandleCannotStartAgentProcessError();
    internal void HandleCannotStartAgentProcessError(Exception ex);
    public void WaitForTestAgentsProcessesToStart();
    internal HostProcessPlatformHelper get_HostProcessPlatformHelper();
    public IAgentObject GetAgentObject(bool waitForAgentProcessToStart);
    public void TestRunFinished();
    private IDataCollectionAgentObject GetDataCollectionAgentObject();
    private IAgentObject GetTestAgentObject();
    private void HandleSyncEventMessage(ProcessManagerSynchonizationMessage message);
    private void WireupDataCollectionAgent();
    internal void SetCurrentPlatform(ProcessorArchitecture platform, AssemblyClrVersion clrVersion);
    internal void SetCurrentPlatform(ProcessorArchitecture platform);
    private bool PerformTestAgentActionIgnoringExceptions(string actionName, MyAction action);
    private bool PerformDataCollectionAgentActionIgnoringExceptions(string actionName, MyAction action);
    private bool PerformControllerActionIgnoringExceptions(string actionName, MyAction action, bool cleanUpOnFailure);
    private bool PerformActionIgnoringExceptions(string actionName, string actionTarget, MyAction action);
    private void InitializeDataCollectorCache();
    private void DataCollectorsUpdatedHandler(object sender, EventArgs args);
    private void SendDataCollectorInformation();
    private void OnAgentDied(object sender, AgentProxyEventArgs e);
    private void OnAgentRestarted(object sender, AgentProxyEventArgs e);
    private void OnDataCollectionAgentDied();
    private void SendDataCollectionAgentDied(TestRun run);
    private void DataCollectionAgentStarted(object sender, EventArgs e);
    private void TestAgentsStarted(object sender, EventArgs e);
    public ProcessorArchitecture get_CurrentPlatform();
    public void set_CurrentPlatform(ProcessorArchitecture value);
    public AssemblyClrVersion get_CurrentClrVersion();
    public void set_CurrentClrVersion(AssemblyClrVersion value);
    public ITestAgentProxy get_PrimaryExecutionAgent();
    private bool get_IsExecutingTests();
    public ManualResetEvent get_HostShutdown();
    public bool get_HasShutdown();
    public sealed virtual ICollectorEventSink get_CollectorEventSink();
    private void DispatchControllerEvent(SynchronizedEventInfo synchronizedEventInfo, IQueuedJobs`1<SynchronizedEventInfo> queuedJobs);
    private void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.BeginSyncStart();
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Agent.IAgentObject.Cleanup(int maxWaitTime);
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Agent.IAgentObject.get_CloseHostApplication();
    private sealed virtual override AgentState Microsoft.VisualStudio.TestTools.Agent.IAgentObject.GetAgentState();
    private sealed virtual override AgentDataCollectorInformation Microsoft.VisualStudio.TestTools.Agent.IAgentObject.GetDataCollectorInformation();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.Hello();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.PauseTests();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.QueueTests(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.ReceiveMessage(object message);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.ResumeTests();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.RunEndFileCopyComplete();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.AbortTests();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.StopTests();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.ICommonUtilityCallback.FileCopyComplete(Exception ex);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IResultSink.AddResult(TestMessage testMessage);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentObject.SetExecutionPluginManager(ExecutionPluginManager manager);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.AgentEvent(string agentName, TestMessage message);
    private void CallControllerCallback(Action controllerCall);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.AgentEventImmediate(string agentName, TestMessage message);
    private sealed virtual override DataCollectionEnvironmentContext Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.ConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentObject);
    private sealed virtual override DataCollectionEnvironmentContext Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, IAgentService agentObject);
    private sealed virtual override DataCollectionEnvironmentContext Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, IAgentService agentObject);
    private sealed virtual override DataCollectionEnvironmentContext Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, string version, IAgentService agentObject);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.SetAgentDataCollectorInformation(AgentDataCollectorInformation info);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.Hello();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.ReadyForSyncStart(string agentName, Guid runId, Guid execId);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.SetAgentConnectionState(string agentName, bool online);
    public IControllerCallback get_ControllerCallback();
    public void set_ControllerCallback(IControllerCallback value);
    public sealed virtual DataCollectionEnvironmentContext get_DataCollectionEnvironmentContext();
    public sealed virtual void set_DataCollectionEnvironmentContext(DataCollectionEnvironmentContext value);
    public sealed virtual IDeploymentManager GetDeploymentManager();
    public sealed virtual void StartTestAgentRun(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings, ICollection`1<TestExecutionEnvironmentVariable> testEnvironmentVariables);
    private void StartTestAgentRun_DoWork(TestRun run, bool isNewRun, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings, ICollection`1<TestExecutionEnvironmentVariable> testEnvironmentVariables);
    private void SendTestAgentProcessStartedMessage();
    private void SetTestExecutionEnvironmentVariables(ICollection`1<TestExecutionEnvironmentVariable> testEnvironmentVariables, TestRun run);
    private void RestoreTestExecutionEnvironmentVariables(TestRun run);
    private void QueueTestsToTestAgents(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings);
    public sealed virtual void RaiseEventToControllerAsync(DataCollectionEventArgs e, bool useDataSynchronization, WaitOrTimerCallback completed);
    internal static bool IsDataCollectionAgentNeeded(TestRunConfiguration runConfig);
    private static bool IsOutOfProcessDataCollectorEnabled(AgentRule agentRule);
    public sealed virtual IRemoteDataProvider get_DataConnectionProvider();
    [CompilerGeneratedAttribute]
private void <InitializeDataCollectorCache>b__76_0(object state);
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentProcessManagerAccessManager : MarshalByRefObject {
    public static string RelativeRemotingPublishUri;
    private IAgentProcessProxy m_agentProcessProxy;
    private string m_executionKey;
    internal AgentProcessManagerAccessManager(string executionKey, IAgentProcessProxy agentProcessProxy);
    private static AgentProcessManagerAccessManager();
    public sealed virtual IAgentProcessProxy GetAgentProcessProxy(string executionKey);
    public virtual object InitializeLifetimeService();
    private void CheckExecutionKey(string executionKey);
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentProcessProxyManager : object {
    [CompilerGeneratedAttribute]
private EventHandler DataCollectionAgentsStarted;
    [CompilerGeneratedAttribute]
private EventHandler TestAgentsStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> AgentDied;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> AgentRestarted;
    private AgentProcessManager m_agentManager;
    private static int c_numberOfTestAgents;
    private ProcessStateWrapper m_dataCollectionAgentProcessState;
    private ProcessStateWrapper[] m_testProcessStates;
    private TestAgentProxy[] m_testAgents;
    [CompilerGeneratedAttribute]
private DataCollectionAgentProxy <DataCollectionAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessorArchitecture <CurrentPlatform>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyClrVersion <CurrentClrVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessStrategy <ProcessStrategy>k__BackingField;
    public AgentProcessManager AgentManager { get; }
    public DataCollectionAgentProxy DataCollectionAgent { get; private set; }
    public TestAgentProxy[] TestAgents { get; }
    public string AgentKey { get; private set; }
    public ProcessorArchitecture CurrentPlatform { get; public set; }
    public AssemblyClrVersion CurrentClrVersion { get; public set; }
    public ManualResetEvent HostShutdown { get; }
    public ProcessStrategy ProcessStrategy { get; public set; }
    public AgentProcessProxyManager(AgentProcessManager owner, ProcessorArchitecture currentPlatform, AssemblyClrVersion currentClrVersion, ProcessStrategy processStrategy);
    [CompilerGeneratedAttribute]
public void add_DataCollectionAgentsStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DataCollectionAgentsStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_TestAgentsStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TestAgentsStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_AgentDied(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AgentDied(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_AgentRestarted(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AgentRestarted(EventHandler`1<AgentProxyEventArgs> value);
    public void ClearOnTestAgentStartEvent();
    public void KillAgentProcesses();
    public void KillTestAgents();
    private void StartAgentProcess(AgentProxy proxy, AgentProcessStartupInfo agentProcessStartupInfo);
    private void RegisterForAgentProxyEvents(AgentProxy proxy);
    private void UnregisterAgentProxyEventHandlers(AgentProxy proxy);
    public void ResetForNewRun();
    private void ProcessDied(object sender, AgentProxyEventArgs e);
    private void ProcessFailedToStart(object sender, AgentProxyEventArgs e);
    private void ProcessStarted(object sender, AgentProxyEventArgs e);
    public void StartDataCollectionProcess(AgentProcessStartupInfo agentProcessStartupInfo);
    public void StartTestAgentProcesses(AgentProcessStartupInfo agentProcessStartupInfo);
    public void Shutdown(int timeout);
    private void Shutdown(IAgentProxy proxy, int timeout);
    private void OnDataCollectionAgentStarted();
    private void OnTestAgentsStarted();
    private void OnDied(object sender, AgentProxyEventArgs e);
    private void OnAgentRestarted(object sender, AgentProxyEventArgs e);
    private ProcessStateWrapper GetProcessState(AgentProxyEventArgs args, AgentProxy proxy);
    public AgentProcessManager get_AgentManager();
    [CompilerGeneratedAttribute]
public DataCollectionAgentProxy get_DataCollectionAgent();
    [CompilerGeneratedAttribute]
private void set_DataCollectionAgent(DataCollectionAgentProxy value);
    public TestAgentProxy[] get_TestAgents();
    [CompilerGeneratedAttribute]
public string get_AgentKey();
    [CompilerGeneratedAttribute]
private void set_AgentKey(string value);
    [CompilerGeneratedAttribute]
public ProcessorArchitecture get_CurrentPlatform();
    [CompilerGeneratedAttribute]
public void set_CurrentPlatform(ProcessorArchitecture value);
    [CompilerGeneratedAttribute]
public AssemblyClrVersion get_CurrentClrVersion();
    [CompilerGeneratedAttribute]
public void set_CurrentClrVersion(AssemblyClrVersion value);
    public ManualResetEvent get_HostShutdown();
    [CompilerGeneratedAttribute]
public ProcessStrategy get_ProcessStrategy();
    [CompilerGeneratedAttribute]
public void set_ProcessStrategy(ProcessStrategy value);
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentProcessStartupInfo : object {
    private static int c_defaultAgentProcessStartup;
    private string m_commandLineArgs;
    private string m_workingDirectory;
    private int m_startupTimeout;
    private IEnumerable`1<KeyValuePair`2<string, string>> m_testEnvironmentVariables;
    public string CommandLineArgs { get; }
    public string WorkingDirectory { get; }
    public int StartupTimeout { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> TestEnvironmentVariables { get; public set; }
    public static AgentProcessStartupInfo InProcess { get; }
    internal bool IsProcessRecoverySupported { get; }
    public AgentProcessStartupInfo(string commandLineArgs, string workingDirectory, int startupTimeout);
    public AgentProcessStartupInfo(string commandLineArgs, string workingDirectory);
    public AgentProcessStartupInfo(string commandLineArgs);
    public string get_CommandLineArgs();
    public string get_WorkingDirectory();
    public int get_StartupTimeout();
    public void set_TestEnvironmentVariables(IEnumerable`1<KeyValuePair`2<string, string>> value);
    public IEnumerable`1<KeyValuePair`2<string, string>> get_TestEnvironmentVariables();
    public static AgentProcessStartupInfo get_InProcess();
    internal virtual bool get_IsProcessRecoverySupported();
}
internal abstract class Microsoft.VisualStudio.TestTools.Agent.AgentProcessStrategy : MarshalByRefObject {
    protected AgentProcessProxyManager m_manager;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> Died;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> Restarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> Started;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> FailedToStart;
    [CompilerGeneratedAttribute]
private AgentProxy <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    protected object AgentObject { get; protected set; }
    protected AgentProxy Context { get; protected set; }
    public int Id { get; private set; }
    public AgentProcessStrategy(AgentProxy context, AgentProcessProxyManager manager, int processId);
    protected virtual void ProcessDied(object sender, EventArgs e);
    protected virtual void ProcessRestarted(object sender, EventArgs e);
    protected void OnRaiseAgentStartEvent();
    protected void OnRaiseFailedToStartAgentEvent();
    public abstract virtual void KillAgentProcess();
    public abstract virtual void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo);
    public abstract virtual void Shutdown(int timeout);
    public virtual void ResetForNewRun();
    [CompilerGeneratedAttribute]
public sealed virtual void add_Died(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Died(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Restarted(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Restarted(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Started(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Started(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_FailedToStart(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_FailedToStart(EventHandler`1<AgentProxyEventArgs> value);
    protected abstract virtual object get_AgentObject();
    protected abstract virtual void set_AgentObject(object value);
    [CompilerGeneratedAttribute]
protected AgentProxy get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(AgentProxy value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    private sealed virtual override IAgentProcessManager Microsoft.VisualStudio.TestTools.Agent.IAgentProcessProxy.GetAgentManager();
    public virtual object InitializeLifetimeService();
}
internal abstract class Microsoft.VisualStudio.TestTools.Agent.AgentProxy : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> Died;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> Restarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> Started;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentProxyEventArgs> FailedToStart;
    [CompilerGeneratedAttribute]
private AgentProcessProxyManager <AgentProcessProxyManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IProcessStrategy <StrategyImpl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    protected AgentProcessProxyManager AgentProcessProxyManager { get; protected set; }
    protected IProcessStrategy StrategyImpl { get; private set; }
    public int Id { get; private set; }
    protected AgentProxy(AgentProcessProxyManager manager, int id);
    [CompilerGeneratedAttribute]
public void add_Died(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Died(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Restarted(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Restarted(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Started(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Started(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_FailedToStart(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FailedToStart(EventHandler`1<AgentProxyEventArgs> value);
    protected void CreateProcessStategy(ProcessStrategy processStrategy);
    public void ResetForNewRun();
    public void KillAgentProcess();
    public virtual void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo);
    protected abstract virtual IProcessStrategy CreateInProcStrategy();
    protected abstract virtual IProcessStrategy CreateOutOfProcStrategy();
    public abstract virtual AgentProxyType GetProxyType();
    private void OnRaiseAgentDiedEvent(object sender, EventArgs e);
    private void OnRaiseAgentStartEvent(object sender, EventArgs e);
    private void OnRaiseAgentRestartEvent(object sender, EventArgs e);
    private void OnRaiseFailedToStartAgentEvent(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
protected AgentProcessProxyManager get_AgentProcessProxyManager();
    [CompilerGeneratedAttribute]
protected void set_AgentProcessProxyManager(AgentProcessProxyManager value);
    [CompilerGeneratedAttribute]
protected IProcessStrategy get_StrategyImpl();
    [CompilerGeneratedAttribute]
private void set_StrategyImpl(IProcessStrategy value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IAgentProxy.Shutdown(int timeout);
}
internal class Microsoft.VisualStudio.TestTools.Agent.AgentProxyEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private AgentProxyType <AgentProcessProxyType>k__BackingField;
    public AgentProxyType AgentProcessProxyType { get; private set; }
    public AgentProxyEventArgs(AgentProxyType proxyType);
    [CompilerGeneratedAttribute]
public AgentProxyType get_AgentProcessProxyType();
    [CompilerGeneratedAttribute]
private void set_AgentProcessProxyType(AgentProxyType value);
}
public enum Microsoft.VisualStudio.TestTools.Agent.AgentProxyType : Enum {
    public int value__;
    public static AgentProxyType DataCollectionAgent;
    public static AgentProxyType TestAgent;
}
internal class Microsoft.VisualStudio.TestTools.Agent.DataCollectionAgentProxy : AgentProxy {
    public DataCollectionAgentProxy(AgentProcessProxyManager manager, int id, ProcessStrategy processStrategy);
    protected virtual IProcessStrategy CreateInProcStrategy();
    protected virtual IProcessStrategy CreateOutOfProcStrategy();
    public virtual AgentProxyType GetProxyType();
    public sealed virtual IDataCollectionAgentObject GetDataCollectionAgentObject();
}
internal class Microsoft.VisualStudio.TestTools.Agent.DebugProcessLauncher : ProcessLauncher {
    private IDebugTestCallback m_testDebugCallback;
    private DebugInfo m_debugInfo;
    private EventHandler m_processExitedHandler;
    public DebugProcessLauncher(IDebugTestCallback testDebugCallback, DebugInfo debugInfo);
    public virtual void Launch(string exeFileName, string args, string workingDir, IEnumerable`1<KeyValuePair`2<string, string>> environmentVariables, EventHandler processExitedHandler, Process& process);
}
internal class Microsoft.VisualStudio.TestTools.Agent.InProcessDataCollectionAgentStrategy : InProcessStrategy {
    private IDataCollectionAgentObject m_agentObject;
    protected object AgentObject { get; protected set; }
    public InProcessDataCollectionAgentStrategy(AgentProxy context, AgentProcessProxyManager manager, int processId);
    public sealed virtual IDataCollectionAgentObject GetDataCollectionAgentObject();
    protected virtual object get_AgentObject();
    protected virtual void set_AgentObject(object value);
    protected virtual bool CreateAgentObject();
    protected virtual void DisposeAgentObject();
}
internal abstract class Microsoft.VisualStudio.TestTools.Agent.InProcessStrategy : AgentProcessStrategy {
    private int m_shutdownInitiated;
    public InProcessStrategy(AgentProxy context, AgentProcessProxyManager manager, int processId);
    public virtual void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo);
    public virtual void Shutdown(int timeout);
    public virtual void KillAgentProcess();
    protected abstract virtual bool CreateAgentObject();
    protected abstract virtual void DisposeAgentObject();
}
internal class Microsoft.VisualStudio.TestTools.Agent.InProcessTestAgentStrategy : InProcessStrategy {
    private IAgentObject m_agentObject;
    protected object AgentObject { get; protected set; }
    public InProcessTestAgentStrategy(AgentProxy context, AgentProcessProxyManager manager, int processId);
    public sealed virtual IAgentObject GetTestAgentObject();
    protected virtual object get_AgentObject();
    protected virtual void set_AgentObject(object value);
    protected virtual bool CreateAgentObject();
    protected virtual void DisposeAgentObject();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IProcessStrategy {
    public abstract virtual void KillAgentProcess();
    public abstract virtual void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo);
    public abstract virtual void Shutdown(int timeout);
    public abstract virtual void ResetForNewRun();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Died(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Died(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Started(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Started(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Restarted(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Restarted(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FailedToStart(EventHandler`1<AgentProxyEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FailedToStart(EventHandler`1<AgentProxyEventArgs> value);
}
internal class Microsoft.VisualStudio.TestTools.Agent.OutOfProcessDataCollectionAgentStrategy : OutOfProcessStrategy {
    private static int c_maxLocalDataCollectorAgentRestarts;
    private static int c_maxRemoteDataCollectorAgentRestarts;
    private IDataCollectionAgentObject m_agentObject;
    protected object AgentObject { get; protected set; }
    public OutOfProcessDataCollectionAgentStrategy(AgentProxy context, AgentProcessProxyManager manager, int processId);
    protected virtual string GetAgentProcessExeName(ProcessorArchitecture platform, AssemblyClrVersion clrVersion);
    protected virtual void RetrieveAgentObjectFromAgentProcess();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentProcessProxy.RegisterDataCollectionAgent(IDataCollectionAgentProcess agent);
    public sealed virtual IDataCollectionAgentObject GetDataCollectionAgentObject();
    protected virtual object get_AgentObject();
    protected virtual void set_AgentObject(object value);
    private static int GetMaxRestarts(DataCollectionEnvironmentContext dataCollectionEnvironmentContext);
}
internal abstract class Microsoft.VisualStudio.TestTools.Agent.OutOfProcessStrategy : AgentProcessStrategy {
    private object m_startProcessLock;
    private object m_processLock;
    private object m_objectLock;
    private int m_shutdownInitiated;
    private Process m_systemProcess;
    private AgentProcessStartupInfo m_agentProcessStartupInfo;
    private ManualResetEvent m_agentExited;
    private ManualResetEvent m_monitorStopped;
    private ManualResetEvent m_agentStarted;
    private ManualResetEvent m_agentRestarted;
    private ManualResetEvent m_agentFailedToRestart;
    private Thread m_processMonitorThread;
    private int m_maxRestarts;
    private int m_restarts;
    private static int c_agentProcessStartup;
    private static int c_killProcessTimeout;
    private JobHandle m_job;
    [CompilerGeneratedAttribute]
private IAgentProcess <AgentProcess>k__BackingField;
    protected IAgentProcess AgentProcess { get; protected set; }
    protected ManualResetEvent AgentStarted { get; }
    private bool ShouldRestartProcess { get; }
    public OutOfProcessStrategy(AgentProxy context, AgentProcessProxyManager manager, int processId, int maxRestarts);
    public virtual void ResetForNewRun();
    public virtual void KillAgentProcess();
    private void RestartAgentProcess();
    public virtual void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo);
    private void StartAgentProcess(AgentProcessStartupInfo agentProcessStartupInfo, bool restarting);
    public virtual void Shutdown(int timeout);
    protected abstract virtual string GetAgentProcessExeName(ProcessorArchitecture platform, AssemblyClrVersion clrVersion);
    protected abstract virtual void RetrieveAgentObjectFromAgentProcess();
    protected virtual void ProcessDied(object sender, EventArgs e);
    private string GetExePath();
    private Process LaunchProcessHelper(AgentProcessStartupInfo agentProcessStartupInfo);
    private static string GetVSIdeInstallationDirectory();
    private void StartMonitorThread();
    private void StopMonitorThread();
    private void ProcessMonitorThread(object obj);
    [CompilerGeneratedAttribute]
protected IAgentProcess get_AgentProcess();
    [CompilerGeneratedAttribute]
protected void set_AgentProcess(IAgentProcess value);
    protected ManualResetEvent get_AgentStarted();
    private bool get_ShouldRestartProcess();
    private void EnsureProcessExited(int timeout);
    private void AssignProcessToJobNoLock();
    private static JobHandle AssignProcessToJobHelper(Process process);
    private void KillAgentProcessAndChildren();
}
internal class Microsoft.VisualStudio.TestTools.Agent.OutOfProcessTestAgentStrategy : OutOfProcessStrategy {
    private static int c_maxTestAgentRestarts;
    private IAgentObject m_agentObject;
    protected object AgentObject { get; protected set; }
    public OutOfProcessTestAgentStrategy(AgentProxy context, AgentProcessProxyManager manager, int processId);
    protected virtual string GetAgentProcessExeName(ProcessorArchitecture platform, AssemblyClrVersion clrVersion);
    protected virtual void RetrieveAgentObjectFromAgentProcess();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.ITestAgentProcessProxy.RegisterTestAgent(ITestAgentProcess agent);
    public sealed virtual IAgentObject GetTestAgentObject();
    protected virtual object get_AgentObject();
    protected virtual void set_AgentObject(object value);
}
internal abstract class Microsoft.VisualStudio.TestTools.Agent.ProcessLauncher : object {
    public abstract virtual void Launch(string exeFileName, string args, string workingDir, IEnumerable`1<KeyValuePair`2<string, string>> environmentVariables, EventHandler processExitedHandler, Process& process);
}
internal enum Microsoft.VisualStudio.TestTools.Agent.ProcessStrategy : Enum {
    public int value__;
    public static ProcessStrategy InProc;
    public static ProcessStrategy OutOfProc;
}
internal class Microsoft.VisualStudio.TestTools.Agent.RemoteDataProvider : MarshalByRefObject {
    private AgentProcessManager m_processManager;
    internal RemoteDataProvider(AgentProcessManager processManager);
    public virtual object InitializeLifetimeService();
    public sealed virtual void Dispose();
    public sealed virtual DataTable ReadTable(string invariantProviderName, string connectionString, string tableName);
    public sealed virtual List`1<string> GetColumns(string invariantProviderName, string connectionString, string tableName);
}
internal class Microsoft.VisualStudio.TestTools.Agent.RetargetClrHelper : object {
    private static string c_targetClrRootName;
    private static string c_targetClrVersionName;
    private static string c_targetCoreEEName;
    private static string c_targetCustomEnvironment;
    private RetargetClrSettings m_settings;
    [CompilerGeneratedAttribute]
private static RetargetClrHelper <Instance>k__BackingField;
    internal RetargetClrSettings Settings { get; }
    internal static RetargetClrHelper Instance { get; private set; }
    private static RetargetClrHelper();
    internal RetargetClrHelper(RetargetClrSettings settings);
    internal RetargetClrSettings get_Settings();
    [CompilerGeneratedAttribute]
internal static RetargetClrHelper get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(RetargetClrHelper value);
    internal IEnumerable`1<KeyValuePair`2<string, string>> UpdateEnvironment(IEnumerable`1<KeyValuePair`2<string, string>> currentEnvironment);
    private string CanonicalizeVariableValue(string value);
}
internal class Microsoft.VisualStudio.TestTools.Agent.RetargetClrSettings : object {
    internal static string RetargetClrRootVariableName;
    internal static string RetargetClrVersionVariableName;
    internal static string RetargetClrIsEnabled;
    private string m_desiredTargetClrRoot;
    private string m_desiredTargetClrVersion;
    [CompilerGeneratedAttribute]
private bool <IsRetargetingEnabled>k__BackingField;
    internal bool IsRetargetingEnabled { get; internal set; }
    internal string TargetClrRoot { get; }
    internal string TargetClrVersion { get; }
    internal string TargetCoreEEPath { get; }
    [CompilerGeneratedAttribute]
internal bool get_IsRetargetingEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsRetargetingEnabled(bool value);
    internal string get_TargetClrRoot();
    internal string get_TargetClrVersion();
    internal string get_TargetCoreEEPath();
}
internal class Microsoft.VisualStudio.TestTools.Agent.SystemEnvironment : object {
    internal virtual string GetEnvironmentVariable(string name);
}
internal class Microsoft.VisualStudio.TestTools.Agent.TestAgentProxy : AgentProxy {
    public TestAgentProxy(AgentProcessProxyManager manager, int id, ProcessStrategy processStrategy);
    protected virtual IProcessStrategy CreateInProcStrategy();
    protected virtual IProcessStrategy CreateOutOfProcStrategy();
    public virtual AgentProxyType GetProxyType();
    public sealed virtual IAgentObject GetTestAgentObject();
}
internal class Microsoft.VisualStudio.TestTools.Agent.Win32ProcessLauncher : ProcessLauncher {
    public virtual void Launch(string exeFileName, string args, string workingDir, IEnumerable`1<KeyValuePair`2<string, string>> environmentVariables, EventHandler processExitedHandler, Process& process);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
