internal class AssemblyRef : object {
    internal static string VsAssemblyVer;
    internal static string NdpAssemblyVer;
    internal static string MicrosoftVisualBasicVsa;
    internal static string MicrosoftJScript;
    internal static string MicrosoftVisualBasicVsaDt;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Internal.VSRegKeyNames : object {
    internal static string RGS_VAR_PROGID;
    internal static string RGS_VAR_PROGID_APPIDNAME;
    internal static string RGS_VAR_PROGID_VERSION;
    internal static string RGS_VAR_DDE_NAME;
    internal static string REGKEY_VISUALSTUDIOROOT_NOVERSION;
    internal static string REGKEY_VISUALSTUDIOROOT;
}
internal class Microsoft.VisualStudio.TestTools.Common.AgentConfigurationInfo : object {
    [CompilerGeneratedAttribute]
private string <TfsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectCollectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgentUri>k__BackingField;
    private static string RootElement;
    private static string TfsUrlElement;
    private static string ProjectCollectionIdElement;
    private static string TestAgentUriElement;
    public string TfsUrl { get; public set; }
    public Guid ProjectCollectionId { get; public set; }
    public string AgentUri { get; public set; }
    public static string TestAgentConfigFilePath { get; }
    public AgentConfigurationInfo(string agentUri, string tfsUrl, Guid pcId);
    [CompilerGeneratedAttribute]
public string get_TfsUrl();
    [CompilerGeneratedAttribute]
public void set_TfsUrl(string value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectCollectionId();
    [CompilerGeneratedAttribute]
public void set_ProjectCollectionId(Guid value);
    [CompilerGeneratedAttribute]
public string get_AgentUri();
    [CompilerGeneratedAttribute]
public void set_AgentUri(string value);
    public static AgentConfigurationInfo ReadAgentConfiguration();
    public static AgentConfigurationInfo ReadAgentConfiguration(string testAgentConfigFilePath);
    private static string GetValue(XPathNavigator navigator, string RootElement, string TestControllerMachine);
    public static void WriteAgentConfiguration(AgentConfigurationInfo agentConfiguration);
    public static void WriteAgentConfiguration(string filePath, AgentConfigurationInfo agentConfiguration);
    public static string get_TestAgentConfigFilePath();
}
internal static class Microsoft.VisualStudio.TestTools.Common.AgentDefaults : object {
    public static int Port;
    public static UInt32 AgentProtectionEntropy;
    public static string RemoteAgentService;
    public static string ServiceCommandLineArgInteractive;
    public static string ServiceCommandLineArgInteractiveAlt;
    public static string ServiceCommandLineArgIpcPortName;
    public static string ServiceCommandLineArgParentProcessId;
    public static string ProcessCommandLineArgAgentKey;
    public static string ProcessCommandLineArgHostProcessId;
    public static string ProcessCommandLineArgHostIpcPortName;
    public static string AgentServiceExeName;
    public static string AgentServiceDisplayName;
    public static string AgentServiceName;
    public static string AgentServiceLogFileName;
    public static string AgentProcessExeName;
    public static string Agent32ProcessExeName;
    public static string AgentProcessFramework35ExeName;
    public static string Agent32ProcessFramework35ExeName;
    public static string AgentProcessFramework40ExeName;
    public static string Agent32ProcessFramework40ExeName;
    public static string DataCollectionAgentProcessExeName;
    public static string DataCollectionAgent32ProcessExeName;
    public static string LabAgentServiceExeName;
    public static string LabAgentServiceName;
    public static string LabNetworkAgentServiceExeName;
    public static string LabNetworkAgentServiceName;
    public static string AgentProcessEventSourceName;
    public static string AgentProcessLogFileName;
    public static string DataCollectionAgentProcessLogFileName;
    public static string AgentConfigurationFile;
    public static int TimeoutPeriod;
    private static int s_threadAbortTimeout;
    private static double s_testTimeoutMultiplier;
    public static int LogSizeTearoffPeriod;
    public static long DefaultMaxLogSizeMB;
    public static int NumberOfTimeoutsForHeartbeat;
    internal static int LoadTestPluginOperationTimeout;
    internal static int MaximumUtilityThreadStackSize;
    private static int s_maximumTestThreadStackSize;
    private static SingleInstanceHelper s_agentServiceSingleInstance;
    private static AgentRunMode s_agentRunMode;
    private static string s_interactiveAgentUserName;
    public static int ThreadAbortTimeout { get; }
    public static double TestTimeoutMultiplier { get; }
    internal static int MaximumTestThreadStackSize { get; }
    internal static SingleInstanceHelper AgentServiceSingleInstance { get; }
    internal static AgentRunMode AgentRunMode { get; }
    internal static string InteractiveAgentUserName { get; }
    private static AgentDefaults();
    public static int get_ThreadAbortTimeout();
    public static double get_TestTimeoutMultiplier();
    internal static int get_MaximumTestThreadStackSize();
    internal static SingleInstanceHelper get_AgentServiceSingleInstance();
    internal static AgentRunMode get_AgentRunMode();
    internal static string get_InteractiveAgentUserName();
    public static string GetAgentWorkingDirectory();
}
internal class Microsoft.VisualStudio.TestTools.Common.AgentRule : object {
    private static string SelectionCriteriaXmlLocation;
    private static string DataCollectorsXmlLocation;
    private static string DataCollectorXmlLocation;
    private static string DataCollectorItemXmlLocation;
    private static bool AreDataCollectorsEnabledDefault;
    [StoreXmlSimpleFieldAttribute("@name", "Mono.Cecil.CustomAttributeArgument")]
private string m_name;
    [StoreXmlSimpleFieldAttribute("DataCollectors/@enabled", "Mono.Cecil.CustomAttributeArgument")]
private bool m_areDataCollectorsEnabled;
    [StoreXmlFieldAttribute]
private SelectionCriteriaDictionary m_selectionCriteria;
    private Dictionary`2<Uri, AgentRuleDataCollector> m_dataCollectors;
    public string Name { get; public set; }
    public bool AreDataCollectorsEnabled { get; public set; }
    internal bool IsAtLeastOneDataCollectorEnabled { get; }
    public SelectionCriteriaDictionary SelectionCriteria { get; public set; }
    internal AgentRule(AgentRule other);
    public AgentRule(string name);
    public AgentRule(string name, bool areDataCollectorsEnabled);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public string get_Name();
    public void set_Name(string value);
    public bool get_AreDataCollectorsEnabled();
    public void set_AreDataCollectorsEnabled(bool value);
    internal bool get_IsAtLeastOneDataCollectorEnabled();
    public SelectionCriteriaDictionary get_SelectionCriteria();
    public void set_SelectionCriteria(SelectionCriteriaDictionary value);
    public ICollection`1<AgentRuleDataCollector> GetDataCollectorsCopy();
    public bool ContainsDataCollector(Uri collectorUri);
    public AgentRuleDataCollector GetDataCollector(Uri collectorUri, string assemblyQualifiedName);
    public void AddDataCollector(AgentRuleDataCollector dataCollector);
    public bool RemoveDataCollector(Uri collectorUri);
    public void ClearDataCollectors();
    private void CopyFrom(AgentRule other);
}
internal class Microsoft.VisualStudio.TestTools.Common.AgentRuleCollection : object {
    private static string AgentRulesXmlLocation;
    private static string AgentRuleItemXmlLocation;
    private static string AgentRuleKeyXmlLocation;
    private static string AgentRuleValueXmlLocation;
    private Dictionary`2<string, AgentRule> m_agentRules;
    public ICollection`1<AgentRule> AgentRules { get; }
    internal AgentRuleCollection(AgentRuleCollection other);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public ICollection`1<AgentRule> get_AgentRules();
    public bool ContainsAgentRule(string ruleName);
    public AgentRule GetAgentRule(string ruleName);
    public void AddAgentRule(AgentRule agentRule);
    public bool RemoveAgentRule(string ruleName);
    public void ClearAgentRules();
    private void CopyFrom(AgentRuleCollection other);
}
internal class Microsoft.VisualStudio.TestTools.Common.AgentRuleDataCollector : object {
    internal static string ConfigurationElementName;
    private static string ConfigurationLocation;
    private static bool IsEnabledDefault;
    [StoreXmlSimpleFieldAttribute("@uri", "Mono.Cecil.CustomAttributeArgument")]
private Uri m_uri;
    [StoreXmlSimpleFieldAttribute("@assemblyQualifiedName", "Mono.Cecil.CustomAttributeArgument")]
private string m_assemblyQualifiedName;
    [StoreXmlSimpleFieldAttribute("@friendlyName", "Mono.Cecil.CustomAttributeArgument")]
private string m_friendlyName;
    [StoreXmlSimpleFieldAttribute("@enabled", "Mono.Cecil.CustomAttributeArgument")]
private bool m_isEnabled;
    private DataCollectorConfiguration m_configuration;
    public Uri Uri { get; }
    public string FriendlyName { get; internal set; }
    public string AssemblyQualifiedName { get; }
    public bool IsEnabled { get; public set; }
    public DataCollectorConfiguration Configuration { get; internal set; }
    internal AgentRuleDataCollector(AgentRuleDataCollector other);
    public AgentRuleDataCollector(Uri uri, string assemblyQualifiedName);
    public AgentRuleDataCollector(Uri uri, string assemblyQualifiedName, DataCollectorConfiguration configuration);
    public AgentRuleDataCollector(Uri uri, string assemblyQualifiedName, bool isEnabled);
    public AgentRuleDataCollector(Uri uri, string assemblyQualifiedName, DataCollectorConfiguration configuration, bool isEnabled);
    public AgentRuleDataCollector(Uri uri, string assemblyQualifiedName, DataCollectorConfiguration configuration, bool isEnabled, string friendlyName);
    protected AgentRuleDataCollector(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public Uri get_Uri();
    public string get_FriendlyName();
    internal void set_FriendlyName(string value);
    public string get_AssemblyQualifiedName();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public DataCollectorConfiguration get_Configuration();
    internal void set_Configuration(DataCollectorConfiguration value);
    private void CopyFrom(AgentRuleDataCollector other);
}
internal class Microsoft.VisualStudio.TestTools.Common.AgentRuleDataCollectorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private AgentRuleDataCollector <AgentRuleDataCollector>k__BackingField;
    public AgentRuleDataCollector AgentRuleDataCollector { get; private set; }
    public AgentRuleDataCollectorEventArgs(AgentRuleDataCollector agentRuleDataCollector);
    [CompilerGeneratedAttribute]
public AgentRuleDataCollector get_AgentRuleDataCollector();
    [CompilerGeneratedAttribute]
private void set_AgentRuleDataCollector(AgentRuleDataCollector value);
}
internal enum Microsoft.VisualStudio.TestTools.Common.AgentRunMode : Enum {
    public int value__;
    public static AgentRunMode None;
    public static AgentRunMode AsInteractiveProcess;
    public static AgentRunMode AsService;
}
internal class Microsoft.VisualStudio.TestTools.Common.AgentSpecificData : object {
    [CompilerGeneratedAttribute]
private string <RuleName>k__BackingField;
    internal string RuleName { get; private set; }
    internal AgentSpecificData(string ruleName);
    private AgentSpecificData(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
internal string get_RuleName();
    [CompilerGeneratedAttribute]
private void set_RuleName(string value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.Common.Algorithms : object {
    public static bool IsSorted(IEnumerable`1<T> collection, Comparison`1<T> comparer);
    public static int BinarySearch(T toFind, IList`1<T> list, Comparison`1<T> comparer, Boolean& exactMatch);
    [ExtensionAttribute]
public static bool SetEquals(IEnumerable`1<T> collectionA, IEnumerable`1<T> collectionB, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool IsSupersetOf(IEnumerable`1<T> collectionA, IEnumerable`1<T> collectionB, IEqualityComparer`1<T> comparer);
    public static int CreateHashCode(Int32[] values);
    [ExtensionAttribute]
public static Dictionary`2<string, string> ToDictionary(StringDictionary sd);
}
internal static class Microsoft.VisualStudio.TestTools.Common.AppSettingsHelper : object {
    public static TimeSpan GetTimeoutInSecondsFromSettings(NameValueCollection settings, string key, int defaultValue);
    public static int GetIntegerValueFromSettings(NameValueCollection settings, string key, int defaultValue);
    public static string GetStringValueFromSettings(NameValueCollection settings, string key, string defaultValue);
    public static bool AppSettingDefined(string key);
}
public class Microsoft.VisualStudio.TestTools.Common.AspNetDevelopmentServer : object {
    [StoreXmlSimpleFieldAttribute("@name", "Mono.Cecil.CustomAttributeArgument")]
private string m_name;
    [StoreXmlSimpleFieldAttribute("@pathToWebApp", "Mono.Cecil.CustomAttributeArgument")]
private string m_pathToWebApp;
    [StoreXmlSimpleFieldAttribute("@webAppRoot", "Mono.Cecil.CustomAttributeArgument")]
private string m_webAppRoot;
    public string Name { get; }
    public string PathToWebApp { get; }
    public string WebAppRoot { get; }
    public AspNetDevelopmentServer(string name, string pathToWebApp, string webAppRoot);
    public string get_Name();
    public string get_PathToWebApp();
    public string get_WebAppRoot();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Common.AspNetProjectItem : object {
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("id")]
private Guid m_id;
    [StoreXmlSimpleFieldAttribute("@name", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("name")]
private string m_name;
    [StoreXmlSimpleFieldAttribute("@applicationRoot", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("applicationRoot")]
private string m_applicationRoot;
    [StoreXmlSimpleFieldAttribute("@url", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("url")]
private string m_url;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("isIis")]
private bool m_isIis;
    public string Name { get; }
    public Guid Id { get; }
    public string Url { get; }
    public bool IsIis { get; }
    public string ApplicationRoot { get; }
    public AspNetProjectItem(string name, Guid id, string url, string applicationRoot, bool isIis);
    public string get_Name();
    public Guid get_Id();
    public string get_Url();
    public bool get_IsIis();
    public string get_ApplicationRoot();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal enum Microsoft.VisualStudio.TestTools.Common.AssemblyClrVersion : Enum {
    public int value__;
    public static AssemblyClrVersion Unknown;
    public static AssemblyClrVersion V2;
    public static AssemblyClrVersion V4;
    public static AssemblyClrVersion V45;
}
internal class Microsoft.VisualStudio.TestTools.Common.AttachmentFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttachmentUri>k__BackingField;
    public string FileName { get; internal set; }
    public string AttachmentUri { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
internal void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_AttachmentUri();
    [CompilerGeneratedAttribute]
internal void set_AttachmentUri(string value);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Common.BackgroundJobProcessor`1 : object {
    private string m_name;
    private List`1<Job<T>> m_jobs;
    private int m_numJobsBeingProcessed;
    private Action`2<T, IQueuedJobs`1<T>> m_processJob;
    private int m_maxJobCount;
    private Queue`1<WaitingJob<T>> m_jobsWaitingToBeQueued;
    private ManualResetEvent m_jobQueued;
    private ManualResetEvent m_jobQueueNotFull;
    private List`1<Job<T>> m_jobsBeingProcessed;
    private int m_currentJobIndex;
    private ManualResetEvent m_allJobsProcessed;
    private RegisteredWaitHandle m_registeredJobQueuedWaitHandle;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_isAborting;
    private object m_abortLock;
    private object m_lock;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    protected string Name { get; }
    protected int OnProcessJobsThreadId { get; }
    protected bool IsDisposed { get; private set; }
    public BackgroundJobProcessor`1(string name, Action`2<T, IQueuedJobs`1<T>> processJob);
    public BackgroundJobProcessor`1(string name, Action`2<T, IQueuedJobs`1<T>> processJob, int maxJobCount);
    public virtual void Dispose();
    protected string get_Name();
    protected int get_OnProcessJobsThreadId();
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public void Enqueue(T job);
    protected virtual void Enqueue(Job<T> job);
    private bool TryEnqueueJob(Job<T> job);
    public void Abort();
    private void DoAbort();
    protected virtual void OnAborted();
    public void Flush();
    public void Flush(bool waitAsLongAsThereAreJobs);
    protected void VerifyNotDisposed();
    private void RegisterWaitForJobQueued();
    private void UnregisterJobQueuedWaitHandle();
    protected static void InvokeJobAction(T job, Action`1<T> invoke, string caller, string actionDescription);
    private void OnProcessJobs(object state, bool timedOut);
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Common.IQueuedJobs<T>.TryProcessNextJob(T& nextJob);
    protected virtual void OnEmptied();
}
internal class Microsoft.VisualStudio.TestTools.Common.BackgroundSpecialJobProcessor`1 : BackgroundJobProcessor`1<T> {
    private Func`2<T, bool> m_isSpecialJob;
    private int m_specialJobCount;
    private int m_maxSpecialJobCount;
    private Queue`1<WaitingJob<T>> m_specialJobsWaitingToBeQueued;
    private ManualResetEvent m_specialJobQueueNotFull;
    private object m_lock;
    private object m_enqueueSyncRoot;
    public BackgroundSpecialJobProcessor`1(string name, Action`2<T, IQueuedJobs`1<T>> processJob, Func`2<T, bool> isSpecialJob, int maxSpecialJobCount);
    public BackgroundSpecialJobProcessor`1(string name, Action`2<T, IQueuedJobs`1<T>> processJob, int maxJobCount, Func`2<T, bool> isSpecialJob, int maxSpecialJobCount);
    public virtual void Dispose();
    protected virtual void Enqueue(Job<T> job);
    private bool TryEnqueueJob(Job<T> job);
    private bool TryEnqueueSpecialJob(Job<T> job);
    protected virtual void OnAborted();
    protected virtual void OnEmptied();
}
internal class Microsoft.VisualStudio.TestTools.Common.BackgroundTestMessageProcessor`1 : BackgroundSpecialJobProcessor`1<TestMessage> {
    public static int MaxJobCount;
    private static int LargeTestMessageSizeThreshold;
    public BackgroundTestMessageProcessor`1(string name, Action`2<TestMessage, IQueuedJobs`1<TestMessage>> processTestMessage, int maxLargeMessageCount);
    private static BackgroundTestMessageProcessor`1();
    public static bool IsLarge(TestMessage testMessage);
}
internal static class Microsoft.VisualStudio.TestTools.Common.ClientDefaults : object {
    private static Nullable`1<bool> m_showRemoveableMSTestUIActions;
    private static Nullable`1<bool> m_showDeprecatedMSTestUIActions;
    internal static bool ShowDeprecatedMSTestUIActions { get; }
    internal static bool ShowRemoveableMSTestUIActions { get; }
    internal static bool get_ShowDeprecatedMSTestUIActions();
    internal static bool get_ShowRemoveableMSTestUIActions();
    private static bool GetRegistryValue(string keyName, bool valueOnException);
}
internal class Microsoft.VisualStudio.TestTools.Common.CodeCoverageDataCollectorConfiguration : DataCollectorConfiguration {
    public static bool PerTestDefault;
    public static string KeyFileDefault;
    [StoreXmlSimpleFieldAttribute]
private bool m_perTest;
    [StoreXmlSimpleFieldAttribute]
private string m_keyFile;
    private List`1<CodeCoverageItem> m_items;
    private List`1<AspNetProjectItem> m_aspNetProjectItems;
    public bool IsDefault { get; }
    public bool PerTest { get; public set; }
    public string KeyFile { get; public set; }
    public IList`1<CodeCoverageItem> Items { get; public set; }
    public IList`1<AspNetProjectItem> AspNetProjectItems { get; public set; }
    public CodeCoverageDataCollectorConfiguration(XmlElement element, XmlTestStoreParameters parameters);
    public CodeCoverageDataCollectorConfiguration(DataCollectorConfiguration other);
    protected virtual int GetConfigurationHashCode();
    public virtual bool Equals(DataCollectorConfiguration other);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual DataCollectorConfiguration Clone();
    public virtual void Reset();
    public virtual bool get_IsDefault();
    public bool get_PerTest();
    public void set_PerTest(bool value);
    public string get_KeyFile();
    public void set_KeyFile(string value);
    public IList`1<CodeCoverageItem> get_Items();
    public void set_Items(IList`1<CodeCoverageItem> value);
    public IList`1<AspNetProjectItem> get_AspNetProjectItems();
    public void set_AspNetProjectItems(IList`1<AspNetProjectItem> value);
    private void ResetToDefault();
    public void AddAspNetProjectItem(AspNetProjectItem item);
    public void RemoveAspNetProjectItem(AspNetProjectItem item);
    public void RemoveAllAspNetProjectItems();
    public void AddItem(CodeCoverageItem item);
    public void RemoveItem(CodeCoverageItem item);
    public void RemoveAllItems();
}
internal class Microsoft.VisualStudio.TestTools.Common.CodeCoverageItem : object {
    [StoreXmlSimpleFieldAttribute("@binaryFile", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("binaryFile")]
private string m_binaryFile;
    [StoreXmlSimpleFieldAttribute("KeyFile/@path", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("keyFile")]
private string m_keyFile;
    [StoreXmlSimpleFieldAttribute("KeyFile/@isPublicKey", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("isPublicKey")]
private bool m_keyFileIsPublicKey;
    [StoreXmlSimpleFieldAttribute("@pdbFile", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("pdbFile")]
private string m_pdbFile;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("instrumentInPlace")]
private bool m_instrumentInPlace;
    [StoreXmlSimpleFieldAttribute("@outputDirectory", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("outputDirectory")]
private string m_outputDirectory;
    public static string InstrumentedPdbFileExtension;
    public string BinaryFile { get; }
    public string PdbFile { get; public set; }
    public string KeyFile { get; public set; }
    public bool KeyFileIsPublicKey { get; public set; }
    public bool InstrumentInPlace { get; public set; }
    public string OutputDirectory { get; }
    public CodeCoverageItem(string binaryFile, string pdbFile, string keyFile, bool instrumentInPlace);
    public CodeCoverageItem(string binaryFile, string pdbFile, string keyFile, string outputDirectory, bool instrumentInPlace);
    public CodeCoverageItem(CodeCoverageItem other);
    public string get_BinaryFile();
    public string get_PdbFile();
    public void set_PdbFile(string value);
    public string get_KeyFile();
    public void set_KeyFile(string value);
    public bool get_KeyFileIsPublicKey();
    public void set_KeyFileIsPublicKey(bool value);
    public bool get_InstrumentInPlace();
    public void set_InstrumentInPlace(bool value);
    public string get_OutputDirectory();
    public sealed virtual object Clone();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool CheckCodeCoverageItem(string binaryFile, string pdbFile, string keyFile, string outputDirectory, String& errorMessage);
    public sealed virtual void PrepareToPersist();
    public sealed virtual void RecoverFromPersistence();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Common.CollectionControllerConnectionInformation : object {
    private Uri m_connectionUri;
    private List`1<Uri> m_callbackUris;
    public Uri ConnectionUri { get; }
    public List`1<Uri> CallbackUris { get; }
    public CollectionControllerConnectionInformation(Uri connectionUri);
    public Uri get_ConnectionUri();
    public List`1<Uri> get_CallbackUris();
    public CollectionControllerConnectionInformation Clone();
}
public class Microsoft.VisualStudio.TestTools.Common.CollectorDataEntry : object {
    private string m_agentName;
    private string m_agentDisplayName;
    private bool m_isFromRemoteAgent;
    private Uri m_uri;
    private string m_collectorDisplayName;
    private List`1<IDataAttachment> m_attachments;
    public Uri Uri { get; }
    public string CollectorDisplayName { get; }
    public string AgentName { get; }
    public string AgentDisplayName { get; }
    public bool IsFromRemoteAgent { get; }
    public IList`1<IDataAttachment> Attachments { get; }
    public CollectorDataEntry(Uri uri, string collectorDisplayName, string agentName, string agentDisplayName, bool isFromRemoteAgent);
    public CollectorDataEntry(Uri uri, string collectorDisplayName, string agentName, string agentDisplayName, bool isFromRemoteAgent, IList`1<IDataAttachment> attachments);
    internal CollectorDataEntry(CollectorDataEntry other);
    private CollectorDataEntry(CollectorDataEntry other, string resultsDirectory, bool useAbsolutePaths);
    internal void AddAttachment(IDataAttachment attachment);
    internal CollectorDataEntry Clone();
    internal CollectorDataEntry Clone(string resultsDirectory, bool useAbsolutePaths);
    private void Initialize(Uri uri, string collectorDisplayName, string agentName, string agentDisplayName, bool isFromRemoteAgent, IEnumerable`1<IDataAttachment> attachments);
    public Uri get_Uri();
    public string get_CollectorDisplayName();
    public string get_AgentName();
    public string get_AgentDisplayName();
    public bool get_IsFromRemoteAgent();
    public IList`1<IDataAttachment> get_Attachments();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.CommonAgentServiceInformation : object {
    private string _controllerName;
    private string _agentName;
    private string _tfsUrl;
    private string _registeredAgentIdOnTfs;
    public string ControllerName { get; }
    public string TFSUrl { get; }
    public string AgentName { get; }
    public string RegisteredAgentIdOnTfs { get; }
    public string get_ControllerName();
    public string get_TFSUrl();
    public string get_AgentName();
    public string get_RegisteredAgentIdOnTfs();
    protected void Refresh();
}
[ObsoleteAttribute("This class is obsolete.")]
public class Microsoft.VisualStudio.TestTools.Common.ComputerInfo : object {
    private string m_computerName;
    public string ComputerName { get; }
    public ComputerInfo(string computerName);
    public string get_ComputerName();
}
internal class Microsoft.VisualStudio.TestTools.Common.ConnectionManager`1 : object {
    [CompilerGeneratedAttribute]
private ConnectionEvent<ConnectionType> ConnectionTimeout;
    private Dictionary`2<ConnectionType, TimeSpan> m_lastAccessed;
    private int m_timeoutPeriod;
    private static int c_defaultTimeout;
    private Timer m_timeoutTimer;
    private int m_updateTimerThreads;
    public int TimeoutPeriod { get; public set; }
    public ConnectionManager`1(int timeout);
    [CompilerGeneratedAttribute]
public void add_ConnectionTimeout(ConnectionEvent<ConnectionType> value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionTimeout(ConnectionEvent<ConnectionType> value);
    public bool TimeoutExpired(ConnectionType connection);
    public TimeSpan LastAccessed(ConnectionType connection);
    public void AddConnection(ConnectionType connection);
    public void RemoveConnection(ConnectionType connection, bool updateTimer);
    public void UpdateAccessTime(ConnectionType connection);
    public int get_TimeoutPeriod();
    public void set_TimeoutPeriod(int value);
    private void DueTimeExpired(object o);
    private void UpdateTimer();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Dispose(bool explicitDispose);
}
internal class Microsoft.VisualStudio.TestTools.Common.ConsoleWarningHandler : object {
    public sealed virtual void Write(object sender, WarningEventArgs ea);
}
internal class Microsoft.VisualStudio.TestTools.Common.ControllerCredentialProvider : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> CredentialChanged;
    public static ControllerCredentialProvider Instance;
    private NetworkCredential m_credential;
    public NetworkCredential NetworkCredential { get; public set; }
    private static ControllerCredentialProvider();
    [CompilerGeneratedAttribute]
public void add_CredentialChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CredentialChanged(EventHandler`1<EventArgs> value);
    public NetworkCredential get_NetworkCredential();
    public void set_NetworkCredential(NetworkCredential value);
}
internal static class Microsoft.VisualStudio.TestTools.Common.ControllerDefaults : object {
    public static int Port;
    public static string RemoteExecutionObject;
    public static string RemoteAdminObject;
    public static string ControllerServiceExeName;
    public static string ControllerServiceExeName64;
    public static string ControllerDisplayName;
    public static string ControllerServiceName;
    public static string ControllerLogFileName;
    public static string RemoteControllerAccessManager;
    public static string RemoteControllerAccessManagerObject;
    public static string AgentServiceUserGroupName;
    public static string ControllerConfigurationFile;
    public static string TestRunStorageDir;
    public static string TestControllerAdministrators;
    public static string ControllerAdministratorGroup;
    public static string TestControllerUsers;
    public static string ControllerUsersGroup;
    public static string AgentInstallerServiceProvisionUrl;
    public static string AgentInstallerServiceTemplateBaseUrl;
    public static int AgentInstallerServiceDefaultPort;
    public static Version ControllerVersion;
    public static int TimeoutPeriod;
    public static int LogSizeTearoffPeriod;
    public static long DefaultMaxLogSizeMB;
    private static int CollectorDataRequestDefaultTimeout;
    private static int AgentInitializeDefaultTimeout;
    private static int AgentCleanupDefaultTimeout;
    public static int ControllerSynchronizeWithTfsDefaultIntervalSeconds;
    private static int ReceiveFileFragmentDefaultTimeout;
    public static int NumberOfTimeoutsForHeartbeat;
    public static int HeartbeatTimeoutPeriod;
    public static bool DefaultAgentImpersonationEnabled;
    public static int DefaultAgentIdentityCacheExpirationTimeInSeconds;
    public static int DefaultRemotingTimeoutSeconds;
    public static int DefaultDataCollectorCommandToResponseTimeout;
    private static bool s_isExecutionTimeoutEnabled;
    private static int s_collectorDataRequestTimeout;
    private static int s_receiveFileFragmentTimeout;
    private static int s_agentInitializeTimeout;
    private static int s_agentCleanupTimeout;
    private static int s_controllerSynchronizeWithTfsIntervalSeconds;
    private static bool s_agentImpersonationEnabled;
    private static int s_agentIdentityCacheExpirationTimeInSeconds;
    private static int s_remotingTimeoutSeconds;
    private static int s_dataCollectorCommandToResponseTimeout;
    public static string OptionYes;
    public static string OptionNo;
    public static Uri LocalControllerUri;
    public static string LocalTestHostName;
    public static string TestEnvironmentPropertyName;
    public static string MachineRolePropertyName;
    public static string PlaceholderControllerName;
    public static string PlaceholderTestEnvironmentName;
    public static string ConfigurationNamespaceUri;
    public static string DefaultEnvironmentAndRoleName;
    public static int MaxAgentNameLength;
    public static int MaxAgentDisplayNameLength;
    public static int MaxAgentMachineNameLength;
    public static int MaxMachineRoleNameLength;
    public static int MaxTestEnvironmentNameLength;
    public static int MaxTestEnvironmentDisplayNameLength;
    public static int MaxTestEnvironmentDescriptionLength;
    public static string MaxConcurrentTcmRuns;
    public static string TfsPollingInterval;
    public static string TfsPostingInterval;
    public static string BuildDownloadCacheSize;
    [CompilerGeneratedAttribute]
private static bool <DeleteTestRunStorageData>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DeleteTestDeploymentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DeleteTempFilesAfterTestRun>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <LogBackgroundProcessorVerboseLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <HandlePluginMessagesFromCollectionController>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <UseLabServiceAcccountToAccessBuildDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private static int <NumAttemptsToUseLabServiceAcccountToAccessBuildDirectory>k__BackingField;
    internal static bool IsExecutionTimeoutEnabled { get; }
    public static int CollectorDataRequestTimeout { get; }
    public static int AgentInitializeTimeout { get; }
    public static int AgentCleanupTimeout { get; }
    public static int ControllerSynchronizeWithTfsIntervalSeconds { get; }
    public static int ReceiveFileFragmentTimeout { get; }
    public static int AgentIdentityCacheExpirationTimeInSeconds { get; }
    public static bool AgentImpersonationEnabled { get; }
    public static bool DeleteTestRunStorageData { get; private set; }
    public static bool DeleteTestDeploymentFiles { get; private set; }
    public static bool DeleteTempFilesAfterTestRun { get; private set; }
    public static bool LogBackgroundProcessorVerboseLogs { get; private set; }
    public static int RemotingTimeoutSeconds { get; }
    public static int DataCollectorCommandToResponseTimeout { get; }
    public static bool HandlePluginMessagesFromCollectionController { get; private set; }
    public static bool UseLabServiceAcccountToAccessBuildDirectory { get; private set; }
    public static int NumAttemptsToUseLabServiceAcccountToAccessBuildDirectory { get; private set; }
    private static ControllerDefaults();
    private static void SetControllerHeartbeatTimeOutPeriod();
    internal static bool get_IsExecutionTimeoutEnabled();
    public static int get_CollectorDataRequestTimeout();
    public static int get_AgentInitializeTimeout();
    public static int get_AgentCleanupTimeout();
    public static int get_ControllerSynchronizeWithTfsIntervalSeconds();
    public static int get_ReceiveFileFragmentTimeout();
    public static int get_AgentIdentityCacheExpirationTimeInSeconds();
    public static bool get_AgentImpersonationEnabled();
    [CompilerGeneratedAttribute]
public static bool get_DeleteTestRunStorageData();
    [CompilerGeneratedAttribute]
private static void set_DeleteTestRunStorageData(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DeleteTestDeploymentFiles();
    [CompilerGeneratedAttribute]
private static void set_DeleteTestDeploymentFiles(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DeleteTempFilesAfterTestRun();
    [CompilerGeneratedAttribute]
private static void set_DeleteTempFilesAfterTestRun(bool value);
    [CompilerGeneratedAttribute]
public static bool get_LogBackgroundProcessorVerboseLogs();
    [CompilerGeneratedAttribute]
private static void set_LogBackgroundProcessorVerboseLogs(bool value);
    public static int get_RemotingTimeoutSeconds();
    public static int get_DataCollectorCommandToResponseTimeout();
    [CompilerGeneratedAttribute]
public static bool get_HandlePluginMessagesFromCollectionController();
    [CompilerGeneratedAttribute]
private static void set_HandlePluginMessagesFromCollectionController(bool value);
    [CompilerGeneratedAttribute]
public static bool get_UseLabServiceAcccountToAccessBuildDirectory();
    [CompilerGeneratedAttribute]
private static void set_UseLabServiceAcccountToAccessBuildDirectory(bool value);
    [CompilerGeneratedAttribute]
public static int get_NumAttemptsToUseLabServiceAcccountToAccessBuildDirectory();
    [CompilerGeneratedAttribute]
private static void set_NumAttemptsToUseLabServiceAcccountToAccessBuildDirectory(int value);
    public static Uri GetRemoteControllerUri(string machineName);
    public static string GetControllerWorkingDirectory();
}
internal static class Microsoft.VisualStudio.TestTools.Common.ControllerMruHelper : object {
    private static int s_maxControllerCount;
    internal static String[] RecentlyUsedControllerNames { get; }
    private static ControllerMruHelper();
    internal static String[] get_RecentlyUsedControllerNames();
    internal static void SaveControllerNameToRegistry(string controllerName);
    public static bool IsControllerServiceUri(string controllerUri);
    private static RegistryKey OpenRunConfigRegistryKey(RegistryKey rootKey, bool create);
    private static RegistryKey OpenRunConfigRegistryKey(RegistryKey rootKey, bool create, bool writable);
}
internal static class Microsoft.VisualStudio.TestTools.Common.CopyHelper : object {
    private static bool CheckThatDirsAreNotTheSameOrContained(string from, string to);
    public static long CopyDirectory(string fromDirectory, string toDirectory, long maxSize);
    public static long CopyDirectory(string fromDirectory, string toDirectory, long maxSize, List`1<string> skipList, ICollection`1<string> filesCopied);
    private static bool FileNameNotInExclusionList(ICollection`1<string> skipList, string file);
    public static long TotalFileSize(string directory);
    public static long TotalFileSize(string directory, ICollection`1<string> skipList);
}
internal abstract class Microsoft.VisualStudio.TestTools.Common.DataCollectorConfiguration : object {
    public bool IsDefault { get; }
    internal XmlElement XmlElement { get; }
    public DataCollectorConfiguration(DataCollectorConfiguration other);
    public abstract virtual bool Equals(DataCollectorConfiguration other);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected abstract virtual int GetConfigurationHashCode();
    public abstract virtual bool get_IsDefault();
    internal XmlElement get_XmlElement();
    public static DataCollectorConfiguration Create(Uri dataCollectorUri);
    public abstract virtual DataCollectorConfiguration Clone();
    public abstract virtual void Reset();
}
public class Microsoft.VisualStudio.TestTools.Common.DataCollectorExceptionMessageInfo : DataCollectorMessageInfo {
    private static string c_exceptionTypeLocation;
    private static string c_exceptionMessageLocation;
    private static string c_stackTraceLocation;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public string ExceptionType { get; private set; }
    public string ExceptionMessage { get; private set; }
    public string StackTrace { get; private set; }
    protected string ElementName { get; }
    internal DataCollectorExceptionMessageInfo(string exceptionType, string exceptionMessage, string stackTrace, string text, DateTime timestamp, Uri dataCollectorUri, string dataCollectorFriendlyName, string agentName, DataCollectorMessageLevel level);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
private void set_ExceptionMessage(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
private void set_StackTrace(string value);
    protected virtual string get_ElementName();
    public virtual string ToString();
    protected virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    protected virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.DataCollectorMessageInfo : object {
    private static string c_timestampLocation;
    private static string c_dataCollectorUriLocation;
    private static string c_dataCollectorFriendlyNameLocation;
    private static string c_agentName;
    private static string c_textLocation;
    private static string c_levelLocation;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DataCollectorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataCollectorFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectorMessageLevel <Level>k__BackingField;
    public DateTime Timestamp { get; private set; }
    public Uri DataCollectorUri { get; private set; }
    public string DataCollectorFriendlyName { get; private set; }
    public string AgentName { get; private set; }
    public string Text { get; private set; }
    public DataCollectorMessageLevel Level { get; private set; }
    protected string ElementName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.ElementName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.NamespaceUri { get; }
    private TestOutcome Microsoft.VisualStudio.TestTools.Common.IResultMessage.Outcome { get; }
    private IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.ColumnHeadersText { get; }
    private IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.RowText { get; }
    internal DataCollectorMessageInfo(string text, DataCollectorMessageLevel level, DateTime timestamp, Uri dataCollectorUri, string dataCollectorFriendlyName, string agentName);
    internal DataCollectorMessageInfo(DataCollectorMessageLevel level, DateTime timestamp, Uri dataCollectorUri, string dataCollectorFriendlyName, string agentName);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public Uri get_DataCollectorUri();
    [CompilerGeneratedAttribute]
private void set_DataCollectorUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_DataCollectorFriendlyName();
    [CompilerGeneratedAttribute]
private void set_DataCollectorFriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_AgentName();
    [CompilerGeneratedAttribute]
private void set_AgentName(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public DataCollectorMessageLevel get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(DataCollectorMessageLevel value);
    public virtual string ToString();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Save(XmlElement element, XmlTestStoreParameters parameters);
    protected virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    protected virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    protected virtual string get_ElementName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_ElementName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_NamespaceUri();
    private sealed virtual override TestOutcome Microsoft.VisualStudio.TestTools.Common.IResultMessage.get_Outcome();
    private sealed virtual override IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.get_ColumnHeadersText();
    private sealed virtual override IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.get_RowText();
}
public enum Microsoft.VisualStudio.TestTools.Common.DataCollectorMessageLevel : Enum {
    public int value__;
    public static DataCollectorMessageLevel Error;
    public static DataCollectorMessageLevel Warning;
    public static DataCollectorMessageLevel Info;
    public static DataCollectorMessageLevel Data;
}
internal static class Microsoft.VisualStudio.TestTools.Common.DataCollectorMessageLevelHelper : object {
    public static string ToString(DataCollectorMessageLevel level);
    public static TestOutcome ToTestOutcome(DataCollectorMessageLevel level);
}
internal static class Microsoft.VisualStudio.TestTools.Common.DebugConstants : object {
    internal static Guid OriginalEngine;
    internal static Guid ManagedEngine;
    internal static Guid ManagedAndNativeEngine;
    internal static Guid NativeEngine;
    internal static Guid DefaultPortSupplier;
    private static DebugConstants();
}
public enum Microsoft.VisualStudio.TestTools.Common.DebugEngine : Enum {
    public int value__;
    public static DebugEngine Original;
    public static DebugEngine Managed;
    public static DebugEngine ManagedAndNative;
    public static DebugEngine Native;
    public static DebugEngine Custom;
}
public class Microsoft.VisualStudio.TestTools.Common.DebugEventHandler : MulticastDelegate {
    public DebugEventHandler(object object, IntPtr method);
    public virtual void Invoke(DebugOperationResult result);
    public virtual IAsyncResult BeginInvoke(DebugOperationResult result, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.Common.DebugInfo : object {
    private int m_launchFlags;
    private Guid[] m_projectGuids;
    private string m_programToLaunch;
    private string m_arguments;
    private string m_workingDir;
    private DebugTargetInfo m_targetInfo;
    private Guid m_runId;
    private DebugOperationTypeInternal m_launchOperation;
    [CompilerGeneratedAttribute]
private string <BStrEnv>k__BackingField;
    internal int LaunchFlags { get; internal set; }
    internal Guid[] ProjectGuids { get; }
    internal string ProgramToLaunch { get; internal set; }
    internal string Arguments { get; internal set; }
    internal string WorkingDirectory { get; internal set; }
    internal string BStrEnv { get; internal set; }
    internal DebugTargetInfo TargetInfo { get; internal set; }
    internal DebugOperationTypeInternal LaunchOperation { get; internal set; }
    internal Guid RunId { get; internal set; }
    internal DebugInfo(int launchFlags, Guid[] projectGuids);
    internal DebugInfo(DebugInfo other);
    internal DebugInfo(DebugTargetInfo targetInfo);
    internal int get_LaunchFlags();
    internal void set_LaunchFlags(int value);
    internal Guid[] get_ProjectGuids();
    internal string get_ProgramToLaunch();
    internal void set_ProgramToLaunch(string value);
    internal string get_Arguments();
    internal void set_Arguments(string value);
    internal string get_WorkingDirectory();
    internal void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
internal string get_BStrEnv();
    [CompilerGeneratedAttribute]
internal void set_BStrEnv(string value);
    internal DebugTargetInfo get_TargetInfo();
    internal void set_TargetInfo(DebugTargetInfo value);
    internal DebugOperationTypeInternal get_LaunchOperation();
    internal void set_LaunchOperation(DebugOperationTypeInternal value);
    internal Guid get_RunId();
    internal void set_RunId(Guid value);
}
public class Microsoft.VisualStudio.TestTools.Common.DebugOperationResult : object {
    private bool m_succeeded;
    private string m_errorMessage;
    public bool Succeeded { get; }
    public string ErrorMessage { get; }
    internal DebugOperationResult(bool succeeded);
    internal DebugOperationResult(bool succeeded, string errorMessage);
    public bool get_Succeeded();
    public string get_ErrorMessage();
}
internal enum Microsoft.VisualStudio.TestTools.Common.DebugOperationTypeInternal : Enum {
    public int value__;
    public static DebugOperationTypeInternal AttachToProcess;
    public static DebugOperationTypeInternal LaunchProcess;
}
public class Microsoft.VisualStudio.TestTools.Common.DebugRequestMessage : TestResultMessage {
    private DebugTargetInfo m_targetInfo;
    private DebugEventHandler m_debugEventCallback;
    public DebugTargetInfo TargetInfo { get; }
    public DebugEventHandler DebugEventHandler { get; }
    public DebugRequestMessage(Guid runId, DebugTargetInfo targetInfo);
    public DebugRequestMessage(Guid runId, DebugTargetInfo targetInfo, DebugEventHandler debugEventHandler);
    public DebugTargetInfo get_TargetInfo();
    public DebugEventHandler get_DebugEventHandler();
}
public class Microsoft.VisualStudio.TestTools.Common.DebugTargetInfo : object {
    private int m_processId;
    private string m_qualifier;
    private DebugEngine m_engine;
    private Guid m_engineGuid;
    private Guid m_portSupplier;
    private string m_portName;
    private static Dictionary`2<DebugEngine, Guid> s_engineMap;
    public int ProcessId { get; public set; }
    public string Qualifier { get; public set; }
    public DebugEngine DebugEngine { get; public set; }
    public Guid DebugEngineGuid { get; public set; }
    public Guid PortSupplier { get; public set; }
    public string PortName { get; public set; }
    private static DebugTargetInfo();
    public int get_ProcessId();
    public void set_ProcessId(int value);
    public string get_Qualifier();
    public void set_Qualifier(string value);
    public DebugEngine get_DebugEngine();
    public void set_DebugEngine(DebugEngine value);
    public Guid get_DebugEngineGuid();
    public void set_DebugEngineGuid(Guid value);
    public Guid get_PortSupplier();
    public void set_PortSupplier(Guid value);
    public string get_PortName();
    public void set_PortName(string value);
}
internal class Microsoft.VisualStudio.TestTools.Common.DefaultDataCollectorConfiguration : DataCollectorConfiguration {
    private string m_configurationXml;
    public bool IsDefault { get; }
    public DefaultDataCollectorConfiguration(XmlElement element, XmlTestStoreParameters parameters);
    public DefaultDataCollectorConfiguration(DataCollectorConfiguration other);
    protected virtual int GetConfigurationHashCode();
    public virtual bool Equals(DataCollectorConfiguration other);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual DataCollectorConfiguration Clone();
    public virtual void Reset();
    public virtual bool get_IsDefault();
    private string UnformatInnerXml(XmlElement xmlElement);
}
internal class Microsoft.VisualStudio.TestTools.Common.DeploymentComplete : ServiceMessage {
    public DeploymentComplete(string computer);
    protected DeploymentComplete(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.VisualStudio.TestTools.Common.DeploymentDefaults : object {
    public static string DeploymentDirectoryName;
    public static string LogsDirectoryName;
    public static string RootDirectoryName;
    public static string GetDefaultWorkingDirectory();
}
public class Microsoft.VisualStudio.TestTools.Common.DeploymentItem : object {
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("path")]
private string m_path;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("outputDirectory")]
private string m_outputDirectory;
    [NonPersistableAttribute]
private DeploymentItemOrigin m_origin;
    public string Path { get; }
    public string OutputDirectory { get; }
    internal DeploymentItemOrigin Origin { get; internal set; }
    public DeploymentItem(string path);
    public DeploymentItem(string path, string relativeOutputDirectory);
    internal DeploymentItem(string path, string relativeOutputDirectory, DeploymentItemOrigin origin);
    public sealed virtual void PrepareToPersist();
    public sealed virtual void RecoverFromPersistence();
    public string get_Path();
    public string get_OutputDirectory();
    internal DeploymentItemOrigin get_Origin();
    internal void set_Origin(DeploymentItemOrigin value);
    internal IFileProvider GetFileProvider(TestRunConfiguration runConfig);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool CheckDeploymentItem(string path, string outputDirectory, String& errorMessage);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.DeploymentItemCollection : EqtBaseCollection`1<DeploymentItem> {
    public DeploymentItemCollection(DeploymentItemCollection other);
}
internal class Microsoft.VisualStudio.TestTools.Common.DeploymentItemOrigin : object {
    [NonPersistableAttribute]
private DeploymentItemOriginType m_type;
    [NonPersistableAttribute]
private string m_source;
    internal DeploymentItemOriginType Type { get; }
    internal DeploymentItemOrigin(DeploymentItemOriginType type, string source);
    internal DeploymentItemOriginType get_Type();
    public virtual string ToString();
}
internal enum Microsoft.VisualStudio.TestTools.Common.DeploymentItemOriginType : Enum {
    public int value__;
    public static DeploymentItemOriginType TestRunConfiguration;
    public static DeploymentItemOriginType PerTestDeployment;
    public static DeploymentItemOriginType TestStorage;
    public static DeploymentItemOriginType Dependency;
    public static DeploymentItemOriginType Satellite;
}
internal class Microsoft.VisualStudio.TestTools.Common.DestinationDirIsUnderSourceDirException : EqtDataException {
    public DestinationDirIsUnderSourceDirException(string msg);
    public DestinationDirIsUnderSourceDirException(string msg, Exception inner);
    protected DestinationDirIsUnderSourceDirException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.VisualStudio.TestTools.Common.DeviceHelper : object {
    private static Byte[] NetcfPKT;
    private static Byte[] DesktopPKT;
    private static string mscorlibString;
    private static DeviceHelper();
    internal static bool IsNetCfAssembly(Assembly assembly);
    private static bool IsSamePKT(Byte[] firstPKT, Byte[] secondPKT);
    private static bool IsNetcfPublicKeyToken(Byte[] pkt);
    private static bool IsDesktopPublicKeyToken(Byte[] pkt);
    internal static IList`1<string> GetNetCfAssemblySdkFolders();
}
[CoClassAttribute("Microsoft.VisualStudio.TestTools.Common.Dia2Lib.DiaSourceClass")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
internal interface Microsoft.VisualStudio.TestTools.Common.Dia2Lib.DiaSource {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("3bfcea48-620f-4b6b-81f7-b9af75454c7d")]
[TypeLibTypeAttribute("2")]
internal class Microsoft.VisualStudio.TestTools.Common.Dia2Lib.DiaSourceClass : object {
}
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.Common.Dia2Lib.IDiaDataSource {
    [DispIdAttribute("1")]
public string lastError { get; }
    public abstract virtual string get_lastError();
    public abstract virtual void loadDataFromPdb(string pdbPath);
    public abstract virtual void loadAndValidateDataFromPdb(string pdbPath, Guid& pcsig70, UInt32 sig, UInt32 age);
    public abstract virtual void loadDataForExe(string executable, string searchPath, object pCallback);
    public abstract virtual void loadDataFromIStream(IStream pIStream);
    public abstract virtual void openSession(IDiaSession& ppSession);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("486943E8-D187-4A6B-A3C4-291259FFF60D")]
[DefaultMemberAttribute("Item")]
internal interface Microsoft.VisualStudio.TestTools.Common.Dia2Lib.IDiaEnumDebugStreamData {
    [DispIdAttribute("1")]
public int count { get; }
    [DispIdAttribute("2")]
public string name { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual string get_name();
    public abstract virtual void Item(UInt32 index, UInt32 cbData, UInt32& pcbData, Byte& pbData);
    public abstract virtual void Next(UInt32 celt, UInt32 cbData, UInt32& pcbData, Byte& pbData, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumDebugStreamData& ppenum);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("08CBB41E-47A6-4F87-92F1-1C9C87CED044")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.Common.Dia2Lib.IDiaEnumDebugStreams {
    [DispIdAttribute("1")]
public int count { get; }
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual int get_count();
    public abstract virtual IDiaEnumDebugStreamData Item(object index);
    public abstract virtual void Next(UInt32 celt, IDiaEnumDebugStreamData& rgelt, UInt32& pceltFetched);
    public abstract virtual void Skip(UInt32 celt);
    public abstract virtual void Reset();
    public abstract virtual void Clone(IDiaEnumDebugStreams& ppenum);
}
[GuidAttribute("6FC5D63F-011E-40C2-8DD2-E6486E9D6B68")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.Common.Dia2Lib.IDiaSession {
    [DispIdAttribute("1")]
public ulong loadAddress { get; public set; }
    public IDiaSymbol globalScope { get; }
    public abstract virtual ulong get_loadAddress();
    public abstract virtual void set_loadAddress(ulong value);
    public abstract virtual IDiaSymbol get_globalScope();
    public abstract virtual void getEnumTables();
    public abstract virtual void getSymbolsByAddr();
    public abstract virtual void findChildren();
    public abstract virtual void findSymbolByAddr();
    public abstract virtual void findSymbolByRVA();
    public abstract virtual void findSymbolByVA();
    public abstract virtual void findSymbolByToken();
    public abstract virtual void symsAreEquiv();
    public abstract virtual void symbolById();
    public abstract virtual void findSymbolByRVAEx();
    public abstract virtual void findSymbolByVAEx();
    public abstract virtual void findFile();
    public abstract virtual void findFileById();
    public abstract virtual void findLines();
    public abstract virtual void findLinesByAddr();
    public abstract virtual void findLinesByRVA();
    public abstract virtual void findLinesByVA();
    public abstract virtual void findLinesByLinenum();
    public abstract virtual void findInjectedSource();
    public abstract virtual void getEnumDebugStreams(IDiaEnumDebugStreams& ppEnumDebugStreams);
}
[DefaultMemberAttribute("symIndexId")]
[GuidAttribute("CB787B2F-BD6C-4635-BA52-933126BD2DCD")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.Common.Dia2Lib.IDiaSymbol {
    [DispIdAttribute("0")]
public UInt32 symIndexId { get; }
    [DispIdAttribute("1")]
public UInt32 symTag { get; }
    [DispIdAttribute("2")]
public string name { get; }
    [DispIdAttribute("3")]
public IDiaSymbol lexicalParent { get; }
    [DispIdAttribute("4")]
public IDiaSymbol classParent { get; }
    [DispIdAttribute("5")]
public IDiaSymbol type { get; }
    [DispIdAttribute("6")]
public UInt32 dataKind { get; }
    [DispIdAttribute("7")]
public UInt32 locationType { get; }
    [DispIdAttribute("8")]
public UInt32 addressSection { get; }
    [DispIdAttribute("9")]
public UInt32 addressOffset { get; }
    [DispIdAttribute("10")]
public UInt32 relativeVirtualAddress { get; }
    [DispIdAttribute("11")]
public ulong virtualAddress { get; }
    [DispIdAttribute("12")]
public UInt32 registerId { get; }
    [DispIdAttribute("13")]
public int offset { get; }
    [DispIdAttribute("14")]
public ulong length { get; }
    [DispIdAttribute("15")]
public UInt32 slot { get; }
    [DispIdAttribute("16")]
public int volatileType { get; }
    [DispIdAttribute("17")]
public int constType { get; }
    [DispIdAttribute("18")]
public int unalignedType { get; }
    [DispIdAttribute("19")]
public UInt32 access { get; }
    [DispIdAttribute("20")]
public string libraryName { get; }
    [DispIdAttribute("21")]
public UInt32 platform { get; }
    [DispIdAttribute("22")]
public UInt32 language { get; }
    [DispIdAttribute("23")]
public int editAndContinueEnabled { get; }
    [DispIdAttribute("24")]
public UInt32 frontEndMajor { get; }
    [DispIdAttribute("25")]
public UInt32 frontEndMinor { get; }
    [DispIdAttribute("26")]
public UInt32 frontEndBuild { get; }
    [DispIdAttribute("27")]
public UInt32 backEndMajor { get; }
    [DispIdAttribute("28")]
public UInt32 backEndMinor { get; }
    [DispIdAttribute("29")]
public UInt32 backEndBuild { get; }
    [DispIdAttribute("30")]
public string sourceFileName { get; }
    [DispIdAttribute("31")]
public string unused { get; }
    [DispIdAttribute("32")]
public UInt32 thunkOrdinal { get; }
    [DispIdAttribute("33")]
public int thisAdjust { get; }
    [DispIdAttribute("34")]
public UInt32 virtualBaseOffset { get; }
    [DispIdAttribute("35")]
public int virtual { get; }
    [DispIdAttribute("36")]
public int intro { get; }
    [DispIdAttribute("37")]
public int pure { get; }
    [DispIdAttribute("38")]
public UInt32 callingConvention { get; }
    [DispIdAttribute("39")]
public object value { get; }
    [DispIdAttribute("40")]
public UInt32 baseType { get; }
    [DispIdAttribute("41")]
public UInt32 token { get; }
    [DispIdAttribute("42")]
public UInt32 timeStamp { get; }
    [DispIdAttribute("43")]
public Guid guid { get; }
    [DispIdAttribute("44")]
public string symbolsFileName { get; }
    [DispIdAttribute("46")]
public int reference { get; }
    [DispIdAttribute("47")]
public UInt32 count { get; }
    [DispIdAttribute("49")]
public UInt32 bitPosition { get; }
    [DispIdAttribute("50")]
public IDiaSymbol arrayIndexType { get; }
    [DispIdAttribute("51")]
public int packed { get; }
    [DispIdAttribute("52")]
public int constructor { get; }
    [DispIdAttribute("53")]
public int overloadedOperator { get; }
    [DispIdAttribute("54")]
public int nested { get; }
    [DispIdAttribute("55")]
public int hasNestedTypes { get; }
    [DispIdAttribute("56")]
public int hasAssignmentOperator { get; }
    [DispIdAttribute("57")]
public int hasCastOperator { get; }
    [DispIdAttribute("58")]
public int scoped { get; }
    [DispIdAttribute("59")]
public int virtualBaseClass { get; }
    [DispIdAttribute("60")]
public int indirectVirtualBaseClass { get; }
    [DispIdAttribute("61")]
public int virtualBasePointerOffset { get; }
    [DispIdAttribute("62")]
public IDiaSymbol virtualTableShape { get; }
    [DispIdAttribute("64")]
public UInt32 lexicalParentId { get; }
    [DispIdAttribute("65")]
public UInt32 classParentId { get; }
    [DispIdAttribute("66")]
public UInt32 typeId { get; }
    [DispIdAttribute("67")]
public UInt32 arrayIndexTypeId { get; }
    [DispIdAttribute("68")]
public UInt32 virtualTableShapeId { get; }
    [DispIdAttribute("69")]
public int code { get; }
    [DispIdAttribute("70")]
public int function { get; }
    [DispIdAttribute("71")]
public int managed { get; }
    [DispIdAttribute("72")]
public int msil { get; }
    [DispIdAttribute("73")]
public UInt32 virtualBaseDispIndex { get; }
    [DispIdAttribute("74")]
public string undecoratedName { get; }
    [DispIdAttribute("75")]
public UInt32 age { get; }
    [DispIdAttribute("76")]
public UInt32 signature { get; }
    [DispIdAttribute("77")]
public int compilerGenerated { get; }
    [DispIdAttribute("78")]
public int addressTaken { get; }
    [DispIdAttribute("79")]
public UInt32 rank { get; }
    [DispIdAttribute("80")]
public IDiaSymbol lowerBound { get; }
    [DispIdAttribute("81")]
public IDiaSymbol upperBound { get; }
    [DispIdAttribute("82")]
public UInt32 lowerBoundId { get; }
    [DispIdAttribute("83")]
public UInt32 upperBoundId { get; }
    [DispIdAttribute("84")]
public UInt32 targetSection { get; }
    [DispIdAttribute("85")]
public UInt32 targetOffset { get; }
    [DispIdAttribute("86")]
public UInt32 targetRelativeVirtualAddress { get; }
    [DispIdAttribute("87")]
public ulong targetVirtualAddress { get; }
    [DispIdAttribute("88")]
public UInt32 machineType { get; }
    [DispIdAttribute("89")]
public UInt32 oemId { get; }
    [DispIdAttribute("90")]
public UInt32 oemSymbolId { get; }
    [DispIdAttribute("91")]
public IDiaSymbol objectPointerType { get; }
    [DispIdAttribute("92")]
public UInt32 udtKind { get; }
    [DispIdAttribute("93")]
public int noReturn { get; }
    [DispIdAttribute("94")]
public int customCallingConvention { get; }
    [DispIdAttribute("95")]
public int noInline { get; }
    [DispIdAttribute("96")]
public int optmizedCodeDebugInfo { get; }
    [DispIdAttribute("97")]
public int notReached { get; }
    [DispIdAttribute("98")]
public int interruptReturn { get; }
    [DispIdAttribute("99")]
public int farReturn { get; }
    [DispIdAttribute("100")]
public int isStatic { get; }
    [DispIdAttribute("101")]
public int hasDebugInfo { get; }
    [DispIdAttribute("102")]
public int isLTCG { get; }
    [DispIdAttribute("103")]
public int isDataAligned { get; }
    [DispIdAttribute("104")]
public int hasSecurityChecks { get; }
    [DispIdAttribute("105")]
public string compilerName { get; }
    [DispIdAttribute("106")]
public int hasAlloca { get; }
    [DispIdAttribute("107")]
public int hasSetJump { get; }
    [DispIdAttribute("108")]
public int hasLongJump { get; }
    [DispIdAttribute("109")]
public int hasInlAsm { get; }
    [DispIdAttribute("110")]
public int hasEH { get; }
    [DispIdAttribute("111")]
public int hasSEH { get; }
    [DispIdAttribute("112")]
public int hasEHa { get; }
    [DispIdAttribute("113")]
public int isNaked { get; }
    [DispIdAttribute("114")]
public int isAggregated { get; }
    [DispIdAttribute("115")]
public int isSplitted { get; }
    [DispIdAttribute("116")]
public IDiaSymbol container { get; }
    [DispIdAttribute("117")]
public int inlSpec { get; }
    [DispIdAttribute("118")]
public int noStackOrdering { get; }
    [DispIdAttribute("119")]
public IDiaSymbol virtualBaseTableType { get; }
    public abstract virtual UInt32 get_symIndexId();
    public abstract virtual UInt32 get_symTag();
    public abstract virtual string get_name();
    public abstract virtual IDiaSymbol get_lexicalParent();
    public abstract virtual IDiaSymbol get_classParent();
    public abstract virtual IDiaSymbol get_type();
    public abstract virtual UInt32 get_dataKind();
    public abstract virtual UInt32 get_locationType();
    public abstract virtual UInt32 get_addressSection();
    public abstract virtual UInt32 get_addressOffset();
    public abstract virtual UInt32 get_relativeVirtualAddress();
    public abstract virtual ulong get_virtualAddress();
    public abstract virtual UInt32 get_registerId();
    public abstract virtual int get_offset();
    public abstract virtual ulong get_length();
    public abstract virtual UInt32 get_slot();
    public abstract virtual int get_volatileType();
    public abstract virtual int get_constType();
    public abstract virtual int get_unalignedType();
    public abstract virtual UInt32 get_access();
    public abstract virtual string get_libraryName();
    public abstract virtual UInt32 get_platform();
    public abstract virtual UInt32 get_language();
    public abstract virtual int get_editAndContinueEnabled();
    public abstract virtual UInt32 get_frontEndMajor();
    public abstract virtual UInt32 get_frontEndMinor();
    public abstract virtual UInt32 get_frontEndBuild();
    public abstract virtual UInt32 get_backEndMajor();
    public abstract virtual UInt32 get_backEndMinor();
    public abstract virtual UInt32 get_backEndBuild();
    public abstract virtual string get_sourceFileName();
    public abstract virtual string get_unused();
    public abstract virtual UInt32 get_thunkOrdinal();
    public abstract virtual int get_thisAdjust();
    public abstract virtual UInt32 get_virtualBaseOffset();
    public abstract virtual int get_virtual();
    public abstract virtual int get_intro();
    public abstract virtual int get_pure();
    public abstract virtual UInt32 get_callingConvention();
    public abstract virtual object get_value();
    public abstract virtual UInt32 get_baseType();
    public abstract virtual UInt32 get_token();
    public abstract virtual UInt32 get_timeStamp();
    public abstract virtual Guid get_guid();
    public abstract virtual string get_symbolsFileName();
    public abstract virtual int get_reference();
    public abstract virtual UInt32 get_count();
    public abstract virtual UInt32 get_bitPosition();
    public abstract virtual IDiaSymbol get_arrayIndexType();
    public abstract virtual int get_packed();
    public abstract virtual int get_constructor();
    public abstract virtual int get_overloadedOperator();
    public abstract virtual int get_nested();
    public abstract virtual int get_hasNestedTypes();
    public abstract virtual int get_hasAssignmentOperator();
    public abstract virtual int get_hasCastOperator();
    public abstract virtual int get_scoped();
    public abstract virtual int get_virtualBaseClass();
    public abstract virtual int get_indirectVirtualBaseClass();
    public abstract virtual int get_virtualBasePointerOffset();
    public abstract virtual IDiaSymbol get_virtualTableShape();
    public abstract virtual UInt32 get_lexicalParentId();
    public abstract virtual UInt32 get_classParentId();
    public abstract virtual UInt32 get_typeId();
    public abstract virtual UInt32 get_arrayIndexTypeId();
    public abstract virtual UInt32 get_virtualTableShapeId();
    public abstract virtual int get_code();
    public abstract virtual int get_function();
    public abstract virtual int get_managed();
    public abstract virtual int get_msil();
    public abstract virtual UInt32 get_virtualBaseDispIndex();
    public abstract virtual string get_undecoratedName();
    public abstract virtual UInt32 get_age();
    public abstract virtual UInt32 get_signature();
    public abstract virtual int get_compilerGenerated();
    public abstract virtual int get_addressTaken();
    public abstract virtual UInt32 get_rank();
    public abstract virtual IDiaSymbol get_lowerBound();
    public abstract virtual IDiaSymbol get_upperBound();
    public abstract virtual UInt32 get_lowerBoundId();
    public abstract virtual UInt32 get_upperBoundId();
    public abstract virtual void get_dataBytes(UInt32 cbData, UInt32& pcbData, Byte& pbData);
    public abstract virtual void findChildren();
    public abstract virtual UInt32 get_targetSection();
    public abstract virtual UInt32 get_targetOffset();
    public abstract virtual UInt32 get_targetRelativeVirtualAddress();
    public abstract virtual ulong get_targetVirtualAddress();
    public abstract virtual UInt32 get_machineType();
    public abstract virtual UInt32 get_oemId();
    public abstract virtual UInt32 get_oemSymbolId();
    public abstract virtual void get_types(UInt32 cTypes, UInt32& pcTypes, IDiaSymbol& pTypes);
    public abstract virtual void get_typeIds(UInt32 cTypeIds, UInt32& pcTypeIds, UInt32& pdwTypeIds);
    public abstract virtual IDiaSymbol get_objectPointerType();
    public abstract virtual UInt32 get_udtKind();
    public abstract virtual void get_undecoratedNameEx(UInt32 undecorateOptions, String& name);
    public abstract virtual void get_liveLVarInstances();
    public abstract virtual int get_noReturn();
    public abstract virtual int get_customCallingConvention();
    public abstract virtual int get_noInline();
    public abstract virtual int get_optmizedCodeDebugInfo();
    public abstract virtual int get_notReached();
    public abstract virtual int get_interruptReturn();
    public abstract virtual int get_farReturn();
    public abstract virtual int get_isStatic();
    public abstract virtual int get_hasDebugInfo();
    public abstract virtual int get_isLTCG();
    public abstract virtual int get_isDataAligned();
    public abstract virtual int get_hasSecurityChecks();
    public abstract virtual string get_compilerName();
    public abstract virtual int get_hasAlloca();
    public abstract virtual int get_hasSetJump();
    public abstract virtual int get_hasLongJump();
    public abstract virtual int get_hasInlAsm();
    public abstract virtual int get_hasEH();
    public abstract virtual int get_hasSEH();
    public abstract virtual int get_hasEHa();
    public abstract virtual int get_isNaked();
    public abstract virtual int get_isAggregated();
    public abstract virtual int get_isSplitted();
    public abstract virtual IDiaSymbol get_container();
    public abstract virtual int get_inlSpec();
    public abstract virtual int get_noStackOrdering();
    public abstract virtual IDiaSymbol get_virtualBaseTableType();
}
internal static class Microsoft.VisualStudio.TestTools.Common.DiaHelper : object {
    public static string GetSymbolsFileName(string imagePath);
    public static void ReleaseComObject(object o);
}
internal class Microsoft.VisualStudio.TestTools.Common.DirectoryFileProvider : object {
    private string m_directoryPath;
    private bool m_recursive;
    private string m_searchPattern;
    public string DirectoryPath { get; public set; }
    public bool Recursive { get; public set; }
    public string SearchPattern { get; public set; }
    public sealed virtual StringCollection GetFilePaths();
    private void AddFilesFromDirectory(StringCollection filePaths, string directoryPath, bool ignoreIOExceptions);
    public string get_DirectoryPath();
    public void set_DirectoryPath(string value);
    public bool get_Recursive();
    public void set_Recursive(bool value);
    public string get_SearchPattern();
    public void set_SearchPattern(string value);
}
internal class Microsoft.VisualStudio.TestTools.Common.DirectoryTree : object {
    private Dictionary`2<string, DirectoryTree> m_directories;
    [CompilerGeneratedAttribute]
private DirectoryTree <ParentDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DirectoryPath>k__BackingField;
    public DirectoryTree ParentDirectory { get; private set; }
    public string DirectoryPath { get; private set; }
    public Dictionary`2<string, DirectoryTree> Directories { get; }
    public bool IsEmpty { get; }
    public DirectoryTree(string directoryPath);
    private DirectoryTree(string directoryPath, DirectoryTree parentDirectory);
    [CompilerGeneratedAttribute]
public DirectoryTree get_ParentDirectory();
    [CompilerGeneratedAttribute]
private void set_ParentDirectory(DirectoryTree value);
    [CompilerGeneratedAttribute]
public string get_DirectoryPath();
    [CompilerGeneratedAttribute]
private void set_DirectoryPath(string value);
    public Dictionary`2<string, DirectoryTree> get_Directories();
    public bool get_IsEmpty();
    public DirectoryTree GetDirectory(string relativeDirectoryPath);
    public List`1<string> GetAllFiles();
}
internal abstract class Microsoft.VisualStudio.TestTools.Common.DisposableLock : object {
    private static bool s_traceVerbose;
    private bool m_isReaderLockInitiallyHeld;
    private bool m_isWriterLockInitiallyHeld;
    private bool m_isDisposed;
    private DisposingReaderWriterLock m_lock;
    private ThreadLockInfo m_threadInfo;
    private string m_stacktrace;
    protected bool ReaderLockInitiallyHeld { get; }
    protected bool WriterLockInitiallyHeld { get; }
    protected bool AnyLockInitiallyHeld { get; }
    protected DisposingReaderWriterLock Parent { get; }
    internal ThreadLockInfo ThreadLockInfo { get; }
    public bool IsWriterLock { get; }
    internal string StackTrace { get; }
    protected DisposableLock(DisposingReaderWriterLock disposingReaderWriterLock);
    private static DisposableLock();
    protected virtual override void Finalize();
    public virtual void Dispose();
    protected bool get_ReaderLockInitiallyHeld();
    protected bool get_WriterLockInitiallyHeld();
    protected bool get_AnyLockInitiallyHeld();
    protected void ThrowOutOfOrderError(bool preRelease);
    protected DisposingReaderWriterLock get_Parent();
    internal ThreadLockInfo get_ThreadLockInfo();
    public abstract virtual bool get_IsWriterLock();
    internal string get_StackTrace();
}
internal class Microsoft.VisualStudio.TestTools.Common.DisposingReaderWriterLock : object {
    private object m_lock;
    private int m_timeout;
    private string m_name;
    private static string s_defaultName;
    private LocalDataStoreSlot m_dataStoreSlot;
    private static int LockPulse;
    private static int WaitTime;
    private static bool s_trackLockUsage;
    private static bool s_suppressDiagnosticInfo;
    private static bool s_writeVerboseTraceInfo;
    public bool IsWriterLockHeld { get; }
    public bool IsReaderLockHeld { get; }
    public bool IsAnyLockHeld { get; }
    public int DefaultTimeout { get; }
    internal string Name { get; }
    internal ThreadLockInfo CurrentThreadLockInfo { get; }
    private LocalDataStoreSlot ThreadInfoDataStoreSlot { get; }
    internal object LockObject { get; }
    public static bool TrackLockUsage { get; public set; }
    public static bool SuppressDiagnosticInfo { get; public set; }
    public static bool WriteVerboseTraceInfo { get; public set; }
    public DisposingReaderWriterLock(string name);
    public DisposingReaderWriterLock(int defaultTimeout);
    public DisposingReaderWriterLock(string name, int defaultTimeout);
    private static DisposingReaderWriterLock();
    public DisposableLock AcquireReaderLock();
    public DisposableLock AcquireReaderLock(int timeout);
    public DisposableLock AcquireWriterLock();
    public DisposableLock AcquireWriterLock(int timeout);
    private void RWLAcquireReaderLock(ThreadLockInfo t, int timeout);
    private void RWLAcquireWriterLock(ThreadLockInfo t, int timeout);
    private LockCookie RWLUpgradeToWriterLock(ThreadLockInfo t, int timeout);
    private void RWLReleaseReaderLock(ThreadLockInfo t);
    private void RWLReleaseWriterLock(ThreadLockInfo t);
    private void RWLDowngradeFromWriterLock(ThreadLockInfo t, LockCookie& cookie);
    private void RWLReleaseLock(ThreadLockInfo t);
    private static int CalculatePulseTimeoutValue(int timeout);
    private static bool TimeoutExceeded(Stopwatch timer, int timeout);
    public bool VerifyNoLocks();
    internal string CreateStackList(DisposableLock stopPoint);
    private static void DecrementTimeout(Int32& timeout, int decrementValue);
    public bool get_IsWriterLockHeld();
    public bool get_IsReaderLockHeld();
    public bool get_IsAnyLockHeld();
    public int get_DefaultTimeout();
    internal string get_Name();
    internal ThreadLockInfo get_CurrentThreadLockInfo();
    private LocalDataStoreSlot get_ThreadInfoDataStoreSlot();
    internal object get_LockObject();
    public static bool get_TrackLockUsage();
    public static void set_TrackLockUsage(bool value);
    public static bool get_SuppressDiagnosticInfo();
    public static void set_SuppressDiagnosticInfo(bool value);
    public static bool get_WriteVerboseTraceInfo();
    public static void set_WriteVerboseTraceInfo(bool value);
}
internal enum Microsoft.VisualStudio.TestTools.Common.EndPointType : Enum {
    public int value__;
    public static EndPointType Source;
    public static EndPointType Destination;
}
internal static class Microsoft.VisualStudio.TestTools.Common.EnvironmentHelper : object {
    private static string EnvironmentChangeBroadcastMessage;
    private static string s_fqdn;
    private static string s_hostName;
    private static bool s_executingInClr20;
    public static bool ExecutingInClr20 { get; }
    public static string Fqdn { get; }
    public static string HostName { get; }
    private static EnvironmentHelper();
    public static bool get_ExecutingInClr20();
    public static string get_Fqdn();
    public static string get_HostName();
    public static string GetHostNameFromFqdn(string fqdn);
    public static string NormalizeVariableValue(string envVarValue);
}
internal class Microsoft.VisualStudio.TestTools.Common.EqtAssert : object {
    public static void IsTrue(bool expression, string comment);
    public static void Fail(string comment);
    public static void ParameterNotNull(object parameter, string parameterName);
    public static void IsGreaterThanZero(int value, string parameterName);
    public static void StringNotNullOrEmpty(string parameter, string parameterName);
    public static void StringNotNullOrEmptyRemovingWhiteSpace(String& parameter, string parameterName);
    public static void CollectionNotNullOrEmpty(ICollection`1<T> collection, string parameterName);
    public static void CollectionNotNullOrEmpty(IEnumerable`1<T> collection, string parameterName);
    public static void DisableDebugUIMessages();
    public static void RestoreDebugUIMessages();
    [ConditionalAttribute("DEBUG")]
private static void AssertParameterNameNotNullOrEmpty(string parameterName);
}
public class Microsoft.VisualStudio.TestTools.Common.EqtBaseCollection`1 : object {
    protected Hashtable m_container;
    private string m_childElementName;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private string ChildElementName { get; }
    protected EqtBaseCollection`1(IEqualityComparer comparer);
    protected EqtBaseCollection`1(EqtBaseCollection`1<T> other);
    public virtual void Add(T item);
    public virtual bool Contains(T item);
    public virtual bool Remove(T item);
    public virtual void Clear();
    public virtual object Clone();
    public virtual int get_Count();
    public virtual void CopyTo(T[] array, int index);
    public sealed virtual bool get_IsReadOnly();
    public virtual IEnumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    private string get_ChildElementName();
}
internal class Microsoft.VisualStudio.TestTools.Common.EqtEventHelper : object {
    public static void FireEventIgnoringExceptions(Delegate eventDelegate, object sender, EventArgs args);
    public static bool FireVetoingEvent(Delegate eventDelegate, object sender, EventArgs args);
    internal static T CastDelegate(Delegate source);
}
internal static class Microsoft.VisualStudio.TestTools.Common.EqtHash : object {
    private static HashAlgorithm s_provider;
    internal static HashAlgorithm Provider { get; }
    private static EqtHash();
    internal static HashAlgorithm get_Provider();
    internal static Guid GuidFromString(string data);
}
internal class Microsoft.VisualStudio.TestTools.Common.EqtStringCollection : EqtBaseCollection`1<string> {
    public EqtStringCollection(bool caseSensitive);
    public EqtStringCollection(StringComparer comparer);
}
internal class Microsoft.VisualStudio.TestTools.Common.EqtStringPerThreadWriter : TextWriter {
    private object m_lock;
    private Dictionary`2<int, StringWriter> m_stringWritersByThreadId;
    private StringWriter m_unregisteredThreadWriter;
    public Encoding Encoding { get; }
    public EqtStringPerThreadWriter(bool isUnregisteredThreadsOutputCollected);
    public void RegisterThread(int managedThreadId);
    public void UnRegisterThread(int managedThreadId);
    public string StringForThread(int managedThreadId);
    private StringWriter GetStringWriterForCurrentThread();
    private StringWriter GetStringWriterForThread(int managedThreadId);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual string ToString();
    public virtual void Write(bool value);
    public virtual void Write(Char[] buffer);
    public virtual void Write(decimal value);
    public virtual void Write(float value);
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(double value);
    public virtual void Write(int value);
    public virtual void Write(long value);
    public virtual void Write(object value);
    public virtual void Write(string format, object arg0);
    public virtual void Write(string format, object arg0, object arg1);
    public virtual void Write(string format, object arg0, object arg1, object arg2);
    public virtual void Write(string format, Object[] arg);
    public virtual void Write(string value);
    public virtual void Write(UInt32 value);
    public virtual void Write(ulong value);
    public virtual void WriteLine();
    public virtual void WriteLine(bool value);
    public virtual void WriteLine(Char[] buffer);
    public virtual void WriteLine(decimal value);
    public virtual void WriteLine(float value);
    public virtual void WriteLine(char value);
    public virtual void WriteLine(Char[] buffer, int index, int count);
    public virtual void WriteLine(double value);
    public virtual void WriteLine(int value);
    public virtual void WriteLine(long value);
    public virtual void WriteLine(object value);
    public virtual void WriteLine(string format, object arg0);
    public virtual void WriteLine(string format, object arg0, object arg1);
    public virtual void WriteLine(string format, object arg0, object arg1, object arg2);
    public virtual void WriteLine(string format, Object[] arg);
    public virtual void WriteLine(string value);
    public virtual void WriteLine(UInt32 value);
    public virtual void WriteLine(ulong value);
    public virtual Encoding get_Encoding();
}
public class Microsoft.VisualStudio.TestTools.Common.EqtTextWriterTraceListener : TextWriterTraceListener {
    public EqtTextWriterTraceListener(string fileName);
    public EqtTextWriterTraceListener(string fileName, string name);
    private static FileStream OpenFileStream(string fileName);
}
internal class Microsoft.VisualStudio.TestTools.Common.EquivalenceClassLockProvider`1 : object {
    public static TimeSpan InfiniteTimeout;
    private IDictionary`2<T, EquivalenceClassLock<T>> m_classLocks;
    public EquivalenceClassLockProvider`1(IEqualityComparer`1<T> comparer);
    private static EquivalenceClassLockProvider`1();
    public IDisposable GetLock(T representative);
    public IDisposable GetLock(T representative, TimeSpan timeout);
}
internal class Microsoft.VisualStudio.TestTools.Common.EventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; private set; }
    public EventArgs`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
}
internal static class Microsoft.VisualStudio.TestTools.Common.ExceptionHelper : object {
    private static Exception Unwrap(Exception ex);
    public static string GetExceptionMessage(Exception ex);
    public static string SafeGetMessage(Exception ex);
    public static string SafeGetStackTrace(Exception ex);
    public static string SafeGetDetailedMessage(Exception ex);
}
internal class Microsoft.VisualStudio.TestTools.Common.ExecutionConstants : object {
    internal static string NoIsolationThreadDataKey;
    internal static long LOADTEST_TRIAL_VS_VUSER_COUNT;
}
public class Microsoft.VisualStudio.TestTools.Common.Extension : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconId>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("IconId")]
public string IconId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_IconId();
    [CompilerGeneratedAttribute]
public void set_IconId(string value);
    public int GetIntValue(string valPath);
}
internal class Microsoft.VisualStudio.TestTools.Common.FileCopyInfo : object {
    private int m_rootIndex;
    private string m_fileName;
    public int RootIndex { get; public set; }
    public string FileName { get; public set; }
    public FileCopyInfo(string fileNameAndPath, int rootIndex);
    public int get_RootIndex();
    public void set_RootIndex(int value);
    public string get_FileName();
    public void set_FileName(string value);
}
internal class Microsoft.VisualStudio.TestTools.Common.FileCopyService : MarshalByRefObject {
    private FileCopyServiceFlags m_flags;
    private Dictionary`2<string, FileCopyInfo> m_fileNameList;
    private int m_countBeforeClose;
    private Dictionary`2<string, QTFileStreamAccessMap> m_activeQTFileList;
    private IQTFileStreamCallback m_fileStreamStatusCallback;
    private object m_lock;
    public FileCopyInfo[] FileList { get; }
    public int FileCount { get; }
    public FileCopyServiceFlags DeploymentFlags { get; public set; }
    public int CountBeforeClose { get; public set; }
    public IQTFileStreamCallback FileStreamCallback { get; public set; }
    public FileCopyService(IQTFileStreamCallback fileStreamStatusCallback);
    private FileCopyService(SerializationInfo info, StreamingContext context);
    private void Init();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual object Clone();
    public void Cleanup();
    public virtual object InitializeLifetimeService();
    public static int ComputeRootIndex(string fileName, string rootDir);
    public void AddFile(string fileNameAndPath, string rootDirectory);
    public void AddFile(FileCopyInfo fileCopyInfo);
    public void AddFile(string fileNameAndPath);
    public void AddFile(String[] fileNameAndPaths);
    public bool ContainsFile(string fileNameAndPath);
    public void RemoveFile(string fileNameAndPath);
    public void RemoveAllFiles();
    public FileCopyInfo[] get_FileList();
    public int get_FileCount();
    public FileCopyServiceFlags get_DeploymentFlags();
    public void set_DeploymentFlags(FileCopyServiceFlags value);
    public int get_CountBeforeClose();
    public void set_CountBeforeClose(int value);
    public IQTFileStreamCallback get_FileStreamCallback();
    public void set_FileStreamCallback(IQTFileStreamCallback value);
    public sealed virtual void CloseQTFile(QTFile fr);
    private static void CloseAndDisconnect(QTFileStream fileStream);
    public sealed virtual QTFile OpenQTFile(string fileNameAndPath);
    public sealed virtual void FileStreamStatus(string agent, string fileName, int offset);
    public sealed virtual void FileStreamClosed(string fileName);
    public QTFile CreateQTFile(QTFileStream fileStream);
    public void Ping();
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.Common.FileCopyServiceFlags : Enum {
    public int value__;
    public static FileCopyServiceFlags NoFlags;
    public static FileCopyServiceFlags SkipFileDeployment;
    public static FileCopyServiceFlags DeleteFilesAfterRunComplete;
    public static FileCopyServiceFlags FailOnCopyError;
    public static FileCopyServiceFlags FailOnSetupError;
}
internal class Microsoft.VisualStudio.TestTools.Common.FileCopyServiceProvider : object {
    private Guid m_runId;
    private FileCopyService m_FileCopyService;
    private List`1<string> m_listFiles;
    private FileCopyFinished m_delegateFileCopyFinished;
    private object m_lockingObject;
    private Timer m_timer;
    private static int m_timerFrequency;
    private DateTime m_timeLastAccess;
    private int m_numTimeoutSeconds;
    public FileCopyService FileCopyService { get; }
    public FileCopyServiceProvider(Guid runId, string rootDir, String[] files, int timeoutSeconds, FileCopyFinished delegateFileCopyFinished);
    public FileCopyServiceProvider(Guid runId, FileCopyService fileCopyService, int timeoutSeconds, FileCopyFinished delegateFileCopyFinished);
    private void Init(int numTimeoutSeconds, FileCopyFinished delegateFileCopyFinished);
    public FileCopyService get_FileCopyService();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.IQTFileStreamCallback.FileStreamStatus(string strMachineName, string strFilename, int offset);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.IQTFileStreamCallback.FileStreamClosed(string strFileName);
    public sealed virtual void Dispose();
    private void CheckForTimeout(object state);
    private void ShutDown(FileCopyFinishedReason reason);
}
internal class Microsoft.VisualStudio.TestTools.Common.FileCopyTestResultMessage : TestResultMessage {
    private FileCopyService m_fileCopyService;
    public FileCopyService FileCopyServiceObject { get; public set; }
    public FileCopyTestResultMessage(string computerInfo, Guid runId, TestMessageKind kind, FileCopyService fileCopyService);
    public FileCopyTestResultMessage(FileCopyTestResultMessage source);
    public FileCopyService get_FileCopyServiceObject();
    public void set_FileCopyServiceObject(FileCopyService value);
}
internal class Microsoft.VisualStudio.TestTools.Common.FileFilters : object {
    private StringBuilder m_filterString;
    public string FilterString { get; }
    public FileFilters Add(string description, String[] extensions);
    public FileFilters Add(string description, string extension);
    public string get_FilterString();
}
internal class Microsoft.VisualStudio.TestTools.Common.FileHelper : object {
    private static Dictionary`2<char, object> m_invalidFileNameChars;
    private static Dictionary`2<char, object> m_additionalInvalidFileNameChars;
    private static Regex ReservedFileNamesRegex;
    private static Regex AvailableFileTitleIndexRegex;
    private static RNGCryptoServiceProvider s_cryptoProvider;
    private static string RelativeDirectorySeparator;
    internal static string VisualStudioDocumentRootDirectory { get; }
    internal static char CsvSeparatorChar { get; }
    private static FileHelper();
    public static string GetFirstAvailableFilePath(string desiredFilePath, bool createFile);
    public static string GetFileNameForIndex(string fileTitle, UInt32 index, string extension);
    public static string GetFirstAvailableDirectoryName(string location, string baseName);
    public static string MakePathRelative(string path, string basePath);
    internal static string LocateFile(ICollection`1<string> searchPaths, string fileName);
    internal static string LocateDirectory(ICollection`1<string> searchPaths, string directoryName);
    public static string ExpandEnvironmentVariables(string name, StringDictionary environment, bool useSystemVariables);
    public static string GetOriginalFileName(string path);
    public static string GetNextIterationFileName(string parentDirectoryName, string originalFileName);
    public static string GetNextIterationFileName(string parentDirectoryName, string originalFileName, bool checkMatchingDirectory);
    public static string GetNextIterationDirectoryName(string parentDirectoryName, string originalDirectoryName);
    public static string GetNextIterationDirectoryName(string parentDirectoryName, string originalDirectoryName, string additionalSuffixToCheck);
    public static string ReplaceInvalidFileNameChars(string fileName);
    public static bool IsValidFileName(string fileName, String& invalidCharacters);
    internal static bool IsReservedFileName(string fileName);
    internal static string get_VisualStudioDocumentRootDirectory();
    internal static string GetBrowsePath(string userPartialPath, string rootDirectory);
    internal static string GetBrowsePath(string userPartialPath, string rootDirectory, Boolean& foundAtOriginalPath);
    internal static string GetCanonicalPath(string path);
    public static string ExpandPath(string path);
    public static string ExpandPath(string fromDirectory, string path);
    public static bool IsSubDirectory(string directory, string subDirectory);
    public static bool IsPathSyntaxValid(string path, String& errorMessage);
    internal static string FormatFileNamesForDisplay(ICollection`1<string> filesNames, int maxFilesToDisplay);
    internal static bool FileHasAnyOfExtensions(string file, ICollection`1<string> extensions);
    internal static char get_CsvSeparatorChar();
    public static string GenerateRandomPipeName();
    public static string GenerateRandomName();
    internal static void DeleteFileIgnoringExceptions(string filePath);
    internal static bool IsTrustedForLocalExecution(string path);
    private static string LocateFileSystemItem(string searchPath, string fileSystemItem, ExistsDelegate existensePredicate);
    private static string LocateFileSystemItem(ICollection`1<string> searchPaths, string fileSystemItem, ExistsDelegate existensePredicate);
    private static string GetNextIterationNameHelper(string baseDirectoryName, string originalName, IterationHelper helper);
    private static bool IsFilePathAvailable(string directory, string fileName, bool createFile);
    private static bool TryCreateNewFile(string directory, string fileName);
}
internal class Microsoft.VisualStudio.TestTools.Common.FirewallHelper : object {
    private INetFwMgr m_fwMgr;
    private INetFwProfile m_fwProfile;
    internal bool IsAvailable { get; }
    internal bool IsEnabled { get; }
    private void CheckProfile();
    private void Initialize();
    internal bool get_IsAvailable();
    internal bool get_IsEnabled();
    internal void TurnOn();
    internal INetFwAuthorizedApplication GetApplication(string processImageFileName);
    internal bool IsApplicationAuthorized(string processImageFileName);
    internal bool AppExistsButNotEnabled(string processImageFileName);
}
internal enum Microsoft.VisualStudio.TestTools.Common.FirewallProfileType : Enum {
    public int value__;
    public static FirewallProfileType Domain;
    public static FirewallProfileType Standard;
    public static FirewallProfileType Current;
    public static FirewallProfileType Max;
}
internal enum Microsoft.VisualStudio.TestTools.Common.FirewallScope : Enum {
    public int value__;
    public static FirewallScope All;
    public static FirewallScope LocalSubnet;
    public static FirewallScope Custom;
    public static FirewallScope Max;
}
internal enum Microsoft.VisualStudio.TestTools.Common.FirewallServiceType : Enum {
    public int value__;
    public static FirewallServiceType FileAndPrint;
    public static FirewallServiceType UPnP;
    public static FirewallServiceType RemoteDesktop;
    public static FirewallServiceType None;
    public static FirewallServiceType Max;
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.TestTools.Common.GroupingPropertyAttribute : Attribute {
}
internal class Microsoft.VisualStudio.TestTools.Common.HeartbeatMessage : ServiceMessage {
    public HeartbeatMessage(string computer);
    protected HeartbeatMessage(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.VisualStudio.TestTools.Common.HelpKeywords : object {
    public static string TestElementName;
    public static string TestElementHumanReadableId;
    public static string TestElementDescription;
    public static string TestElementOwner;
    public static string TestElementStorage;
    public static string TestElementSolutionName;
    public static string TestElementProjectName;
    public static string TestElementProjectRelativePath;
    public static string TestElementEnabled;
    public static string TestElementDeploymentItems;
    public static string TestElementPriority;
    public static string TestElementTestCategory;
    public static string TestElementTimeout;
    public static string TestElementAgentRestrictions;
    public static string TestElementTestType;
    public static string TestElementErrorMessageForNonRunnable;
    public static string TestElementCssProjectStructure;
    public static string TestElementCssIteration;
    public static string TestElementWorkitemAssociations;
    internal static string TestElementHostType;
    internal static string TestElementHostData;
    public static string UnitTestFullyQualifiedClassName;
    public static string UnitTestClassName;
    public static string UnitTestNamespace;
    public static string UnitTestDataConnectionString;
    public static string UnitTestDataProviderName;
    public static string UnitTestDataTableName;
    public static string UnitTestDataAccessMethod;
    internal static string UnitTestExtensionTypeName;
    public static string OrderedTestContinueAfterFailure;
    public static string GenericTestFileName;
    public static string GenericTestArguments;
    public static string GenericTestSummaryXmlFileName;
    public static string GenericTestUseSummaryXmlFile;
    public static string GenericTestRedirectStandardOutputAndError;
    public static string GenericTestMaximumDuration;
    public static string GenericTestWorkingDirectory;
    public static string GenericTestEnvironmentVariables;
    public static string DeleteOldRunsDialog;
    public static string ImportCategoryDialog;
}
internal static class Microsoft.VisualStudio.TestTools.Common.HostingRules : object {
    internal static bool CanHost(string hostType, TestType testType);
    internal static IList`1<string> GetSupportedHostTypeNames(TestType testType, IWarningHandler warningHandler);
    private static bool TestTypeCaBeHosted(TestTypeInfo testType, HostTypeInfo hostType, Boolean& delegateToHost);
    private static bool HostTypeCanHost(HostTypeInfo hostType, TestTypeInfo testType, bool requireExplicitReference);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.Common.HostRunConfigurationData : object {
    [StoreXmlSimpleFieldAttribute("@type")]
[PersistenceElementNameAttribute("currentHostType")]
private string m_currentHostType;
    [PersistenceElementNameAttribute("mapHostSpecificData")]
private Dictionary`2<string, IHostSpecificRunConfigurationData> m_mapHostSpecificData;
    public string CurrentHostType { get; public set; }
    public IHostSpecificRunConfigurationData Item { get; public set; }
    public string get_CurrentHostType();
    public void set_CurrentHostType(string value);
    public IHostSpecificRunConfigurationData get_Item(string hostType);
    public void set_Item(string hostType, IHostSpecificRunConfigurationData value);
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Common.HostTypeInfo : object {
    private static Dictionary`2<string, HostTypeInfo> s_hostTypes;
    private static List`1<string> s_hostNames;
    private static string s_warningSender;
    private string m_name;
    private string m_typeName;
    private string m_editorTypeName;
    private bool m_isLoadTestCandidate;
    private SupportedTestTypesData m_supportedTestTypes;
    internal string Name { get; }
    internal string TypeName { get; }
    internal string EditorTypeName { get; }
    internal bool IsLoadTestCandidate { get; }
    internal SupportedTestTypesData SupportedTestTypes { get; }
    internal HostTypeInfo(string name, TestConfigKey hostAdapterKey);
    private static HostTypeInfo();
    internal string get_Name();
    internal string get_TypeName();
    internal string get_EditorTypeName();
    internal bool get_IsLoadTestCandidate();
    internal SupportedTestTypesData get_SupportedTestTypes();
    internal static IList`1<string> GetHostTypeNames(IWarningHandler warningHandler);
    internal static HostTypeInfo GetHostTypeInfo(string hostType);
    internal static string GetHostTypeNameForDisplay(string hostType);
    internal static void ClearCache();
}
public interface Microsoft.VisualStudio.TestTools.Common.IAspNetDevelopmentServerTest {
    public ICollection`1<AspNetDevelopmentServer> AspNetDevelopmentServers { get; }
    public abstract virtual ICollection`1<AspNetDevelopmentServer> get_AspNetDevelopmentServers();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IControllerProxy {
    public abstract virtual void QueueTestRun(TestRun run);
    public abstract virtual void StopTestRun(Guid runId);
}
internal class Microsoft.VisualStudio.TestTools.Common.IconWrapper : object {
    public int IconId;
    public Icon Icon;
    public IconWrapper(int iconId);
}
public interface Microsoft.VisualStudio.TestTools.Common.IDataAttachment {
    public string Description { get; }
    public abstract virtual string get_Description();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IDataCollectorDocumentReference {
    public CollectorDataEntry CollectorDataEntry { get; }
    public abstract virtual CollectorDataEntry get_CollectorDataEntry();
}
public interface Microsoft.VisualStudio.TestTools.Common.IDataSourceBindingData {
    public string DataConnectionString { get; public set; }
    public string DataProviderName { get; public set; }
    public string DataTableName { get; public set; }
    public ITestElement TestElement { get; }
    public abstract virtual string get_DataConnectionString();
    public abstract virtual void set_DataConnectionString(string value);
    public abstract virtual string get_DataProviderName();
    public abstract virtual void set_DataProviderName(string value);
    public abstract virtual string get_DataTableName();
    public abstract virtual void set_DataTableName(string value);
    public abstract virtual ITestElement get_TestElement();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IDebugTestCallback {
    public abstract virtual int DebugTarget(DebugInfo info, bool prepareEnvironment);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IDeepEquals`1 {
    public abstract virtual bool DeepEquals(T other);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IDocumentReference {
    public string StorageLocation { get; }
    public Nullable`1<int> LineNumber { get; }
    public string ActiveStatement { get; }
    public abstract virtual string get_StorageLocation();
    public abstract virtual Nullable`1<int> get_LineNumber();
    public abstract virtual string get_ActiveStatement();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IDynamicPropertyProvider {
    public abstract virtual bool IsPropertySupported(PropertyDescriptor descriptor);
    public abstract virtual bool IsPropertyReadOnly(PropertyDescriptor descriptor);
}
public interface Microsoft.VisualStudio.TestTools.Common.IFastVisiblePropertyProvider {
    public abstract virtual void FillDataRow(DataRow row);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IFileCopyServiceCallback {
    public abstract virtual QTFile OpenQTFile(string fileName);
    public abstract virtual void CloseQTFile(QTFile fr);
}
public interface Microsoft.VisualStudio.TestTools.Common.IFileProvider {
    public abstract virtual StringCollection GetFilePaths();
}
public interface Microsoft.VisualStudio.TestTools.Common.IHostedTest {
    public string HostType { get; public set; }
    public abstract virtual string get_HostType();
    public abstract virtual void set_HostType(string value);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IHostedWebAppTest {
    public string UrlToTest { get; public set; }
    public AspNetDevelopmentServer AspNetDevelopmentServerHost { get; public set; }
    public bool HasCredentialAttribute { get; public set; }
    public string WebAppUserName { get; public set; }
    public string WebAppPassword { get; public set; }
    public string WebAppDomain { get; public set; }
    public abstract virtual string get_UrlToTest();
    public abstract virtual void set_UrlToTest(string value);
    public abstract virtual AspNetDevelopmentServer get_AspNetDevelopmentServerHost();
    public abstract virtual void set_AspNetDevelopmentServerHost(AspNetDevelopmentServer value);
    public abstract virtual bool get_HasCredentialAttribute();
    public abstract virtual void set_HasCredentialAttribute(bool value);
    public abstract virtual string get_WebAppUserName();
    public abstract virtual void set_WebAppUserName(string value);
    public abstract virtual string get_WebAppPassword();
    public abstract virtual void set_WebAppPassword(string value);
    public abstract virtual string get_WebAppDomain();
    public abstract virtual void set_WebAppDomain(string value);
}
public interface Microsoft.VisualStudio.TestTools.Common.IHostSpecificRunConfigurationData {
}
internal interface Microsoft.VisualStudio.TestTools.Common.IManualTestEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestStarted(EventHandler`1<TestResultEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestStarted(EventHandler`1<TestResultEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestFinished(EventHandler`1<TestResultEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestFinished(EventHandler`1<TestResultEventArgs> value);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IMultipleAgentTest {
    public int MinimumAgents { get; }
    public int MaximumAgents { get; }
    public abstract virtual int get_MinimumAgents();
    public abstract virtual int get_MaximumAgents();
}
[ComVisibleAttribute("False")]
[GuidAttribute("B5E64FFA-C2C5-444E-A301-FB5E00018050")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwAuthorizedApplication {
    public string Name { get; public set; }
    public string ProcessImageFileName { get; public set; }
    public IPVersion IpVersion { get; public set; }
    public FirewallScope Scope { get; public set; }
    public string RemoteAddresses { get; public set; }
    public bool Enabled { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_ProcessImageFileName();
    public abstract virtual void set_ProcessImageFileName(string value);
    public abstract virtual IPVersion get_IpVersion();
    public abstract virtual void set_IpVersion(IPVersion value);
    public abstract virtual FirewallScope get_Scope();
    public abstract virtual void set_Scope(FirewallScope value);
    public abstract virtual string get_RemoteAddresses();
    public abstract virtual void set_RemoteAddresses(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("644EFD52-CCF9-486C-97A2-39F352570B30")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwAuthorizedApplications {
    public long Count { get; }
    public IEnumerator _NewEnum { get; }
    public abstract virtual long get_Count();
    public abstract virtual void Add(INetFwAuthorizedApplication app);
    public abstract virtual void Remove(string imageFileName);
    public abstract virtual INetFwAuthorizedApplication Item(string imageFileName);
    public abstract virtual IEnumerator get__NewEnum();
}
[ComVisibleAttribute("False")]
[GuidAttribute("A6207B2E-7CDD-426A-951E-5E1CBC5AFEAD")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwIcmpSettings {
    public bool AllowOutboundDestinationUnreachable { get; public set; }
    public bool AllowRedirect { get; public set; }
    public bool AllowInboundEchoRequest { get; public set; }
    public bool AllowOutboundTimeExceeded { get; public set; }
    public bool AllowOutboundParameterProblem { get; public set; }
    public bool AllowOutboundSourceQuench { get; public set; }
    public bool AllowInboundRouterRequest { get; public set; }
    public bool AllowInboundTimestampRequest { get; public set; }
    public bool AllowInboundMaskRequest { get; public set; }
    public bool AllowOutboundPacketTooBig { get; public set; }
    public abstract virtual bool get_AllowOutboundDestinationUnreachable();
    public abstract virtual void set_AllowOutboundDestinationUnreachable(bool value);
    public abstract virtual bool get_AllowRedirect();
    public abstract virtual void set_AllowRedirect(bool value);
    public abstract virtual bool get_AllowInboundEchoRequest();
    public abstract virtual void set_AllowInboundEchoRequest(bool value);
    public abstract virtual bool get_AllowOutboundTimeExceeded();
    public abstract virtual void set_AllowOutboundTimeExceeded(bool value);
    public abstract virtual bool get_AllowOutboundParameterProblem();
    public abstract virtual void set_AllowOutboundParameterProblem(bool value);
    public abstract virtual bool get_AllowOutboundSourceQuench();
    public abstract virtual void set_AllowOutboundSourceQuench(bool value);
    public abstract virtual bool get_AllowInboundRouterRequest();
    public abstract virtual void set_AllowInboundRouterRequest(bool value);
    public abstract virtual bool get_AllowInboundTimestampRequest();
    public abstract virtual void set_AllowInboundTimestampRequest(bool value);
    public abstract virtual bool get_AllowInboundMaskRequest();
    public abstract virtual void set_AllowInboundMaskRequest(bool value);
    public abstract virtual bool get_AllowOutboundPacketTooBig();
    public abstract virtual void set_AllowOutboundPacketTooBig(bool value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("F7898AF5-CAC4-4632-A2EC-DA06E5111AF2")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwMgr {
    public INetFwPolicy LocalPolicy { get; }
    public FirewallProfileType CurrentProfileType { get; }
    public abstract virtual INetFwPolicy get_LocalPolicy();
    public abstract virtual FirewallProfileType get_CurrentProfileType();
    public abstract virtual void RestoreDefaults();
    public abstract virtual void IsPortAllowed(string imageFileName, IPVersion ipVersion, long portNumber, string localAddress, IPProtocol ipProtocol, Boolean& allowed, Boolean& restricted);
    public abstract virtual void IsIcmpTypeAllowed(IPVersion ipVersion, string localAddress, byte type, Boolean& allowed, Boolean& restricted);
}
[ComVisibleAttribute("False")]
[GuidAttribute("E0483BA0-47FF-4D9C-A6D6-7741D0B195F7")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwOpenPort {
    public string Name { get; public set; }
    public IPVersion IpVersion { get; public set; }
    public IPProtocol Protocol { get; public set; }
    public long Port { get; public set; }
    public FirewallScope Scope { get; public set; }
    public string RemoteAddresses { get; public set; }
    public bool Enabled { get; public set; }
    public bool BuiltIn { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IPVersion get_IpVersion();
    public abstract virtual void set_IpVersion(IPVersion value);
    public abstract virtual IPProtocol get_Protocol();
    public abstract virtual void set_Protocol(IPProtocol value);
    public abstract virtual long get_Port();
    public abstract virtual void set_Port(long value);
    public abstract virtual FirewallScope get_Scope();
    public abstract virtual void set_Scope(FirewallScope value);
    public abstract virtual string get_RemoteAddresses();
    public abstract virtual void set_RemoteAddresses(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual bool get_BuiltIn();
}
[ComVisibleAttribute("False")]
[GuidAttribute("C0E9D7FA-E07E-430A-B19A-090CE82D92E2")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwOpenPorts {
    public long Count { get; }
    public IEnumerator _NewEnum { get; }
    public abstract virtual long get_Count();
    public abstract virtual void Add(INetFwOpenPort port);
    public abstract virtual void Remove(long portNumber, IPProtocol ipProtocol);
    public abstract virtual INetFwOpenPort Item(long portNumber, IPProtocol ipProtocol);
    public abstract virtual IEnumerator get__NewEnum();
}
[ComVisibleAttribute("False")]
[GuidAttribute("D46D2478-9AC9-4008-9DC7-5563CE5536CC")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwPolicy {
    public INetFwProfile CurrentProfile { get; }
    public abstract virtual INetFwProfile get_CurrentProfile();
    public abstract virtual INetFwProfile GetProfileByType(FirewallProfileType profileType);
}
[ComVisibleAttribute("False")]
[GuidAttribute("174A0DDA-E9F9-449D-993B-21AB667CA456")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwProfile {
    public FirewallProfileType Type { get; }
    public bool FirewallEnabled { get; public set; }
    public bool ExceptionsNotAllowed { get; public set; }
    public bool NotificationsDisabled { get; public set; }
    public bool UnicastResponsesToMulticastBroadcastDisabled { get; public set; }
    public INetFwRemoteAdminSettings RemoteAdminSettings { get; }
    public INetFwIcmpSettings IcmpSettings { get; }
    public INetFwOpenPorts GloballyOpenPorts { get; }
    public INetFwServices Services { get; }
    public INetFwAuthorizedApplications AuthorizedApplications { get; }
    public abstract virtual FirewallProfileType get_Type();
    public abstract virtual bool get_FirewallEnabled();
    public abstract virtual void set_FirewallEnabled(bool value);
    public abstract virtual bool get_ExceptionsNotAllowed();
    public abstract virtual void set_ExceptionsNotAllowed(bool value);
    public abstract virtual bool get_NotificationsDisabled();
    public abstract virtual void set_NotificationsDisabled(bool value);
    public abstract virtual bool get_UnicastResponsesToMulticastBroadcastDisabled();
    public abstract virtual void set_UnicastResponsesToMulticastBroadcastDisabled(bool value);
    public abstract virtual INetFwRemoteAdminSettings get_RemoteAdminSettings();
    public abstract virtual INetFwIcmpSettings get_IcmpSettings();
    public abstract virtual INetFwOpenPorts get_GloballyOpenPorts();
    public abstract virtual INetFwServices get_Services();
    public abstract virtual INetFwAuthorizedApplications get_AuthorizedApplications();
}
[ComVisibleAttribute("False")]
[GuidAttribute("D4BECDDF-6F73-4A83-B832-9C66874CD20E")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwRemoteAdminSettings {
    public IPVersion IpVersion { get; public set; }
    public FirewallScope Scope { get; public set; }
    public string RemoteAddresses { get; public set; }
    public bool Enabled { get; public set; }
    public abstract virtual IPVersion get_IpVersion();
    public abstract virtual void set_IpVersion(IPVersion value);
    public abstract virtual FirewallScope get_Scope();
    public abstract virtual void set_Scope(FirewallScope value);
    public abstract virtual string get_RemoteAddresses();
    public abstract virtual void set_RemoteAddresses(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
[ComVisibleAttribute("False")]
[GuidAttribute("79FD57C8-908E-4A36-9888-D5B3F0A444CF")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwService {
    public string Name { get; }
    public FirewallServiceType Type { get; }
    public bool Customized { get; }
    public IPVersion IpVersion { get; public set; }
    public FirewallScope Scope { get; public set; }
    public string RemoteAddresses { get; public set; }
    public bool Enabled { get; public set; }
    public INetFwOpenPorts GloballyOpenPorts { get; }
    public abstract virtual string get_Name();
    public abstract virtual FirewallServiceType get_Type();
    public abstract virtual bool get_Customized();
    public abstract virtual IPVersion get_IpVersion();
    public abstract virtual void set_IpVersion(IPVersion value);
    public abstract virtual FirewallScope get_Scope();
    public abstract virtual void set_Scope(FirewallScope value);
    public abstract virtual string get_RemoteAddresses();
    public abstract virtual void set_RemoteAddresses(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual INetFwOpenPorts get_GloballyOpenPorts();
}
[ComVisibleAttribute("False")]
[GuidAttribute("79649BB4-903E-421B-94C9-79848E79F6EE")]
[InterfaceTypeAttribute("2")]
internal interface Microsoft.VisualStudio.TestTools.Common.INetFwServices {
    public long Count { get; }
    public IEnumerator _NewEnum { get; }
    public abstract virtual long get_Count();
    public abstract virtual INetFwService Item(FirewallServiceType serviceType);
    public abstract virtual IEnumerator get__NewEnum();
}
internal class Microsoft.VisualStudio.TestTools.Common.Int32ListConverter : CollectionConverter {
    private static char m_separator;
    private static char m_escaper;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    protected static List`1<int> StringToList(CultureInfo culture, string value);
}
public interface Microsoft.VisualStudio.TestTools.Common.IPersistable {
    public abstract virtual void RecoverFromPersistence();
    public abstract virtual void PrepareToPersist();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IPersistedTestExecId {
    public TestExecId TestExecutionId { get; }
    public abstract virtual TestExecId get_TestExecutionId();
}
internal static class Microsoft.VisualStudio.TestTools.Common.IPHelper : object {
    public static IPAddress ParseIPAddress(string ipString, bool isBaseAddress, bool isSubnetMask);
    public static IPAddress ParseIPv4Address(string ipString, bool isBaseAddress, bool isSubnetMask);
    private static void VerifyIPv4Segments(string ipString, bool isBaseAddress, bool isSubnetMask);
    public static string AddSegmentToIPv4Address(string baseIPString, int lastSegmentValue);
    private static string AddIPv4SegmentSeparator(string baseIPString);
    public static IPAddress ParseIPv6Address(string ipString, bool isBaseAddress, bool isSubnetMask);
    public static string AddSegmentToIPv6Address(string baseIPString, int lastSegmentValue);
    private static string AddIPv6SegmentSeparator(string baseIPString, Boolean& useHexForLastSegment);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IPoolable {
    public abstract virtual void Initialize();
    public abstract virtual void Release();
    public abstract virtual void FinalRelease();
}
public interface Microsoft.VisualStudio.TestTools.Common.IPotentiallyLarge {
    public int ApproximateSize { get; }
    public abstract virtual int get_ApproximateSize();
}
internal enum Microsoft.VisualStudio.TestTools.Common.IPProtocol : Enum {
    public int value__;
    public static IPProtocol Tcp;
    public static IPProtocol Udp;
}
internal enum Microsoft.VisualStudio.TestTools.Common.IPVersion : Enum {
    public int value__;
    public static IPVersion IPv4;
    public static IPVersion IPv6;
    public static IPVersion IPAny;
    public static IPVersion IPMax;
}
internal interface Microsoft.VisualStudio.TestTools.Common.IQTFileStreamCallback {
    public abstract virtual void FileStreamStatus(string computer, string fileName, int offset);
    public abstract virtual void FileStreamClosed(string fileName);
}
public interface Microsoft.VisualStudio.TestTools.Common.IQTMeasurementBlock {
    public abstract virtual void Begin(string s, Object[] args);
    public abstract virtual void Step(string s, Object[] args);
    public abstract virtual void End();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IQueuedJobs`1 {
    public abstract virtual bool TryProcessNextJob(T& nextJob);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IRequiredProductFeatures {
    public ProductFeature RequiredProductFeatures { get; }
    public abstract virtual ProductFeature get_RequiredProductFeatures();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IRequiredProductFeaturesForRemoteExecution {
    public ProductFeature RequiredProductFeaturesForRemoteExecution { get; }
    public abstract virtual ProductFeature get_RequiredProductFeaturesForRemoteExecution();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IResultMessage {
    public TestOutcome Outcome { get; }
    public IList`1<string> ColumnHeadersText { get; }
    public IList`1<string> RowText { get; }
    public abstract virtual TestOutcome get_Outcome();
    public abstract virtual IList`1<string> get_ColumnHeadersText();
    public abstract virtual IList`1<string> get_RowText();
}
internal interface Microsoft.VisualStudio.TestTools.Common.ISafeAbortableUserWorkItem {
    public bool IsComplete { get; }
    public Exception Exception { get; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Complete(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Complete(EventHandler`1<EventArgs> value);
    public abstract virtual void Queue();
    public abstract virtual void Abort();
    public abstract virtual bool get_IsComplete();
    public abstract virtual Exception get_Exception();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
internal interface Microsoft.VisualStudio.TestTools.Common.ISupportsParallelTestExecution {
    public bool SupportsParallelTestExecution { get; }
    public abstract virtual bool get_SupportsParallelTestExecution();
}
internal interface Microsoft.VisualStudio.TestTools.Common.ISyncStartTest {
    public bool IsSynchronized { get; }
    public abstract virtual bool get_IsSynchronized();
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestAggregation {
    public TestId[] Elements { get; }
    public Link[] Links { get; }
    public Link[] VisibleLinks { get; }
    public abstract virtual TestId[] get_Elements();
    public abstract virtual Link[] get_Links();
    public abstract virtual Link[] get_VisibleLinks();
    public abstract virtual void Add(Link link);
    public abstract virtual void Remove(Link link);
    public abstract virtual void Clear();
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestElement {
    public TestId Id { get; }
    public string HumanReadableId { get; }
    public TestType TestType { get; }
    public string Name { get; public set; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    public string Owner { get; public set; }
    public bool CreatedByUI { get; public set; }
    public bool IsRunOnRestart { get; public set; }
    public int Timeout { get; public set; }
    public bool IsGroupable { get; public set; }
    public bool AbortRunOnAgentFailure { get; public set; }
    public TestExecId ExecutionId { get; public set; }
    public TestExecId ParentExecId { get; public set; }
    public int Priority { get; public set; }
    public TestCategoryItemCollection TestCategories { get; }
    public Hashtable Properties { get; }
    public bool IsModified { get; public set; }
    public bool ReadOnly { get; public set; }
    public bool CanBeAggregated { get; }
    public DeploymentItemCollection DeploymentItems { get; }
    public StringDictionary AgentAttributes { get; }
    public string Storage { get; public set; }
    public ProjectData ProjectData { get; public set; }
    public string SolutionName { get; }
    public string ProjectName { get; }
    public string ProjectRelativePath { get; }
    public string SourceFileName { get; public set; }
    public string Adapter { get; }
    public string ControllerPlugin { get; }
    public object UserData { get; public set; }
    public PropertyDescriptorCollection Groups { get; }
    public Link Link { get; }
    public TestListCategoryId CategoryId { get; public set; }
    public string CssProjectStructure { get; public set; }
    public string CssIteration { get; public set; }
    public IList WorkItemIds { get; }
    public bool IsRunnable { get; }
    public string ErrorMessageForNonRunnable { get; }
    public bool IsAutomated { get; }
    public ITestElement Copy { get; }
    public abstract virtual TestId get_Id();
    public abstract virtual string get_HumanReadableId();
    public abstract virtual TestType get_TestType();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual string get_Owner();
    public abstract virtual void set_Owner(string value);
    public abstract virtual bool get_CreatedByUI();
    public abstract virtual void set_CreatedByUI(bool value);
    public abstract virtual bool get_IsRunOnRestart();
    public abstract virtual void set_IsRunOnRestart(bool value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual bool get_IsGroupable();
    public abstract virtual void set_IsGroupable(bool value);
    public abstract virtual bool get_AbortRunOnAgentFailure();
    public abstract virtual void set_AbortRunOnAgentFailure(bool value);
    public abstract virtual TestExecId get_ExecutionId();
    public abstract virtual void set_ExecutionId(TestExecId value);
    public abstract virtual TestExecId get_ParentExecId();
    public abstract virtual void set_ParentExecId(TestExecId value);
    public abstract virtual int get_Priority();
    public abstract virtual void set_Priority(int value);
    public abstract virtual TestCategoryItemCollection get_TestCategories();
    public abstract virtual Hashtable get_Properties();
    public abstract virtual bool get_IsModified();
    public abstract virtual void set_IsModified(bool value);
    public abstract virtual bool get_ReadOnly();
    public abstract virtual void set_ReadOnly(bool value);
    public abstract virtual bool get_CanBeAggregated();
    public abstract virtual DeploymentItemCollection get_DeploymentItems();
    public abstract virtual StringDictionary get_AgentAttributes();
    public abstract virtual string get_Storage();
    public abstract virtual void set_Storage(string value);
    public abstract virtual ProjectData get_ProjectData();
    public abstract virtual void set_ProjectData(ProjectData value);
    public abstract virtual string get_SolutionName();
    public abstract virtual string get_ProjectName();
    public abstract virtual string get_ProjectRelativePath();
    public abstract virtual string get_SourceFileName();
    public abstract virtual void set_SourceFileName(string value);
    public abstract virtual string get_Adapter();
    public abstract virtual string get_ControllerPlugin();
    public abstract virtual object get_UserData();
    public abstract virtual void set_UserData(object value);
    public abstract virtual PropertyDescriptorCollection get_Groups();
    public abstract virtual Link get_Link();
    public abstract virtual TestListCategoryId get_CategoryId();
    public abstract virtual void set_CategoryId(TestListCategoryId value);
    public abstract virtual string get_CssProjectStructure();
    public abstract virtual void set_CssProjectStructure(string value);
    public abstract virtual string get_CssIteration();
    public abstract virtual void set_CssIteration(string value);
    public abstract virtual IList get_WorkItemIds();
    public abstract virtual bool get_IsRunnable();
    public abstract virtual string get_ErrorMessageForNonRunnable();
    public abstract virtual void AssignIsRunnable(bool runnable, string errorMessage);
    public abstract virtual bool get_IsAutomated();
    public abstract virtual ITestElement get_Copy();
}
internal interface Microsoft.VisualStudio.TestTools.Common.ITestElementDeploymentRuleProvider {
    public bool RequiresBuild { get; }
    public bool RequiresFullDeployment { get; }
    public List`1<string> ImpliedDependentAssemblies { get; }
    public List`1<DeploymentItem> ImpliedDeploymentItems { get; }
    public abstract virtual bool get_RequiresBuild();
    public abstract virtual bool get_RequiresFullDeployment();
    public abstract virtual List`1<string> get_ImpliedDependentAssemblies();
    public abstract virtual List`1<DeploymentItem> get_ImpliedDeploymentItems();
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestElementResultTestPropertyProvider {
    public abstract virtual void FillDataRow(DataRow row, string columnPrefix);
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestList {
    public string Name { get; public set; }
    public bool ReadOnly { get; }
    public bool CanChangeTests { get; }
    public bool CanChangeTestLists { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_ReadOnly();
    public abstract virtual bool get_CanChangeTests();
    public abstract virtual bool get_CanChangeTestLists();
    public abstract virtual ITestElement[] GetTests();
    public abstract virtual Link[] GetMissingTests();
    public abstract virtual ITestList[] GetChildLists();
    public abstract virtual void AddTest(ITestElement test);
    public abstract virtual void RemoveTest(ITestElement test);
    public abstract virtual ITestList CreateChildList(string name);
    public abstract virtual void DeleteChildList(ITestList childList);
    public abstract virtual void MoveChildList(ITestList childList, ITestList destination);
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestManagementEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunSubmitting(EventHandler`1<TestRunEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunSubmitting(EventHandler`1<TestRunEventArgs> value);
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestResultExtension {
    public object ExtensionResult { get; }
    public abstract virtual object get_ExtensionResult();
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestTypeExtension {
    public Uri ExtensionId { get; }
    public abstract virtual Uri get_ExtensionId();
}
internal interface Microsoft.VisualStudio.TestTools.Common.ITestTypeExtensionClientSidesProvider {
    public abstract virtual IDictionary`2<Uri, TestTypeExtensionClientSide> GetTestTypeExtensionClientSides();
}
public interface Microsoft.VisualStudio.TestTools.Common.ITestTypeSpecificRunConfigurationData {
    public string RunConfigurationInformation { get; }
    public abstract virtual string get_RunConfigurationInformation();
}
internal interface Microsoft.VisualStudio.TestTools.Common.IThreadConsumer {
    public int MaxThreads { get; }
    public int MinThreads { get; }
    public abstract virtual int get_MaxThreads();
    public abstract virtual int get_MinThreads();
}
public interface Microsoft.VisualStudio.TestTools.Common.ITip {
    public TestType TestType { get; }
    public abstract virtual TestType get_TestType();
    public abstract virtual ICollection Load(string location, ProjectData projectData, IWarningHandler warningHandler);
    public abstract virtual void Unload(string location, IWarningHandler warningHandler);
    public abstract virtual void Save(ITestElement[] tests, string location, ProjectData projectData);
    public abstract virtual TestResult MergeResults(TestResult inMemory, TestResultMessage fromTheWire);
    public abstract virtual void Reset();
    public abstract virtual void BeforeRemoveTestRun(Guid runId);
}
public interface Microsoft.VisualStudio.TestTools.Common.ITmi {
    public TestRunConfigurationId ActiveTestRunConfigurationId { get; public set; }
    public abstract virtual ITestElement GetTest(TestId testId);
    public abstract virtual ITestElement AddTest(ITestElement test);
    public abstract virtual ITestElement UpdateTest(ITestElement test);
    public abstract virtual void SaveTest(TestId testId);
    public abstract virtual void ReleaseTest(TestId id);
    public abstract virtual void ReleaseTests(string location);
    public abstract virtual void AddTests(ICollection tests);
    public abstract virtual void UpdateTests(ICollection tests);
    public abstract virtual void AddOrUpdateTests(ICollection tests);
    public abstract virtual void ReleaseTests(ICollection tests);
    public abstract virtual void AddManagedTestStorage(object manager, string storagePath);
    public abstract virtual void AddManagedTestStorage(object manager, string storagePath, TestType testType);
    public abstract virtual void ClearManagedTestStorage(object manager);
    public abstract virtual ITip FindTipForTestType(TestType type);
    public abstract virtual ITestElement[] GetTests();
    public abstract virtual TestRun GetTestRun(Guid runId);
    public abstract virtual TestRun[] GetTestRuns();
    public abstract virtual TestRunConfiguration[] GetTestRunConfigurations();
    public abstract virtual TestRunConfiguration GetTestRunConfiguration(TestRunConfigurationId id);
    public abstract virtual TestRunConfigurationId get_ActiveTestRunConfigurationId();
    public abstract virtual void set_ActiveTestRunConfigurationId(TestRunConfigurationId value);
    public abstract virtual TestResult[] GetTestResults(TestRun run);
    public abstract virtual TestResult[] GetTestResults(TestRun run, ITestElement test);
    public abstract virtual ITestList[] GetTestLists();
    public abstract virtual ITestList[] GetTestListsForResults(TestRun run);
    public abstract virtual ITestElement[] GetTestsNotInAnyTestList();
    public abstract virtual ITestElement[] GetTestsNotInAnyTestList(TestRun run);
}
internal interface Microsoft.VisualStudio.TestTools.Common.ITmiFactory {
    public abstract virtual ITmiInternal Create(EventHandler`1<WarningEventArgs> warningEventHandler);
}
internal interface Microsoft.VisualStudio.TestTools.Common.ITmiInternal {
    public abstract virtual bool TryGetTest(TestId testId, ITestElement& test);
    public abstract virtual TestRun CreateRun(TestId[] testIds, TestListCategoryId[] categories, TestRunConfiguration runConfiguration);
    public abstract virtual ITestElement[] LoadTests(IEnumerable`1<string> locations, ProjectData projectData);
    public abstract virtual TestRunConfiguration GetActiveRunConfiguration();
    public abstract virtual TestResult GetResult(TestResultId id);
    public abstract virtual IControllerProxy GetControllerProxy(Uri controllerUri);
    public abstract virtual IControllerProxy GetControllerProxy(Guid runId);
    public abstract virtual void Reset();
    public abstract virtual void SubscribeToTestRunnerEvents(EventHandler`1<TestRunEventArgs> runStartedHandler, EventHandler`1<TestRunEventArgs> runCompletedHandler, EventHandler`1<TestResultEventArgs> testStartedHandler, EventHandler`1<TestResultEventArgs> testCompletedHandler);
    public abstract virtual void UnSubscribeFromTestRunnerEvents(EventHandler`1<TestRunEventArgs> runStartedHandler, EventHandler`1<TestRunEventArgs> runCompletedHandler, EventHandler`1<TestResultEventArgs> testStartedHandler, EventHandler`1<TestResultEventArgs> testCompletedHandler);
}
internal interface Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation {
    public string FullName { get; }
    public string Namespace { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public abstract virtual string get_FullName();
    public abstract virtual string get_Namespace();
    public abstract virtual string get_ClassName();
    public abstract virtual string get_MethodName();
}
public interface Microsoft.VisualStudio.TestTools.Common.IVerifiable {
    public abstract virtual bool IsValid();
}
public interface Microsoft.VisualStudio.TestTools.Common.IVisiblePropertyProvider {
    public PropertyDescriptorCollection VisibleProperties { get; }
    public abstract virtual PropertyDescriptorCollection get_VisibleProperties();
}
public interface Microsoft.VisualStudio.TestTools.Common.IWarningHandler {
    public abstract virtual void Write(object sender, WarningEventArgs ea);
}
public static class Microsoft.VisualStudio.TestTools.Common.KnownExecutionAppKeys : object {
    public static string AgentServicePort;
    public static string AgentProcessPort;
    public static string ControllerServicePort;
    public static string ControllerComputerName;
    public static string ControllerJobSpooling;
    internal static string MinimumTestsPerAgent;
    internal static string AgentImpersonationEnabled;
    internal static string ControllerConnectionPeriod;
    internal static string DataCollectorDiscoveryPeriod;
    public static string SyncTestTimeout;
    public static string StopTestRunTimeout;
    public static string AdapterStopTestRunTimeout;
    public static string TestEndCollectorEventTimeout;
    internal static string CopyResultFilesTimeout;
    internal static string MinimumSizeDataCollectorEventThreadPool;
    internal static string MaximumSizeDataCollectorEventThreadPool;
    internal static string DataCollectorInitializationTimeout;
    internal static string DataCollectorEventTimeout;
    internal static string DataCollectorCommandToResponseTimeout;
    internal static string DataCollectorCleanupTimeout;
    public static string LoadTestPluginOperationsTimeout;
    internal static string AgentConnectionTimeout;
    public static string AgentSyncTimeout;
    public static string AgentDeploymentTimeout;
    public static string AgentExecutionTimeout;
    internal static string AgentInitializeTimeout;
    internal static string AgentCleanupTimeout;
    internal static string AgentIdentityCacheExpirationTimeInSeconds;
    internal static string CollectorDataRequestTimeout;
    internal static string ReceiveFileFragmentTimeout;
    internal static string DeleteTestRunStorageData;
    internal static string DeleteTestDeploymentFiles;
    internal static string DeleteTempFilesAfterTestRun;
    internal static string LogBackgroundProcessorVerboseLogs;
    public static string BatFileTimeout;
    public static string NameInWorkingDirectory;
    public static string WorkingDirectory;
    public static string CreateTraceListener;
    public static string TraceLogsDirectory;
    public static string EnableTestExecutionEventLogTracing;
    public static string TestControllerFQDN;
    public static string ControllerHeartbeatTimeoutInSeconds;
    public static string ControllerSynchronizeWithTfsInterval;
    public static int IdleTimeToDisconnect;
    public static string HandlePluginMessagesFromCollectionController;
    public static string UseLabServiceAccountToAccessBuildDirectory;
    public static string NumAttemptsToUseLabServiceAccountToAccessBuildDirectory;
    public static string TestRunDirectory;
    public static string DeploymentDirectory;
    public static string ResultsDirectory;
    public static string TestRunResultsDirectory;
    public static string TestResultsDirectory;
    public static string BuildDirectory;
    public static string TestDir;
    public static string TestDeploymentDir;
    public static string TestLogsDir;
    public static string AgentId;
    public static string AgentWeighting;
    public static string TotalAgents;
    public static string AgentLoadDistributor;
    public static string ExecutionId;
    public static string CustomLoadDistribution;
    public static string LoadServiceAgentCount;
    public static string LoadServiceAgentId;
    public static string AgentName;
    public static string ControllerName;
    public static string DataCollectionEnvironmentContext;
    internal static string EnableIPSwitching;
    internal static string BindTo;
    internal static string AlwaysUseMachineName;
    internal static string UseNetBiosName;
    internal static string BindToIPAddress;
    internal static string BaseIP;
    internal static string NetMask;
    internal static string Nic;
    internal static string IPStart;
    internal static string IPEnd;
    internal static string RemotingTimeoutSeconds;
    internal static string IgnoreNetworkAdapterInfo;
    internal static string ConditionalLastTaskFlag;
    internal static string ConditionalFirstTaskFlag;
    private static String[] executionEnvironment;
    public static string RunDeploymentLifetime;
    public static string LogSizeLimitInMegs;
    public static string TestOutputDirectory;
    public static string TestLocation;
    public static string TestProjectRetargetTo35Allowed;
    public static String[] ExecutionEnvironment { get; }
    private static KnownExecutionAppKeys();
    public static String[] get_ExecutionEnvironment();
}
internal enum Microsoft.VisualStudio.TestTools.Common.LabCompatibilityResult : Enum {
    public int value__;
    public static LabCompatibilityResult OK;
    public static LabCompatibilityResult Fail;
    public static LabCompatibilityResult WarnUpgrade;
    public static LabCompatibilityResult InformUpgrade;
}
internal static class Microsoft.VisualStudio.TestTools.Common.LabCompatibilityUtils : object {
    internal static LabCompatibilityResult CheckCompatibility(Version preferredVersion, Version givenVersion);
}
internal class Microsoft.VisualStudio.TestTools.Common.LabServiceCryptography : object {
    internal static NetworkCredential DecryptCredential(NetworkCredential credential);
    internal static string EncodeString(string str);
    internal static string DecodeString(string str);
    private static Byte[] GetKey();
    private static Byte[] GetIV();
}
public class Microsoft.VisualStudio.TestTools.Common.Link : object {
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("id")]
private Guid m_id;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("name")]
private string m_name;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("storage")]
private string m_storage;
    [PersistenceElementNameAttribute("type")]
private Type m_type;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("enabled")]
private bool m_enabled;
    public Guid Id { get; }
    [VisiblePropertyAttribute]
public string Name { get; }
    [VisiblePropertyAttribute]
public string Storage { get; }
    public Type Type { get; }
    public PropertyDescriptorCollection VisibleProperties { get; }
    public bool Enabled { get; }
    public Link(Guid id, string name, string storage, Type type, bool enabled);
    public Link(Guid id, string name, string storage, Type type);
    public Guid get_Id();
    public string get_Name();
    public string get_Storage();
    public Type get_Type();
    public virtual bool Equals(object other);
    public bool IsSame(Link other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual PropertyDescriptorCollection get_VisibleProperties();
    public bool get_Enabled();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.TestTools.Common.LocalizedDescriptionAttribute : DescriptionAttribute {
    private Type m_resourceType;
    private string m_resourceId;
    private string m_description;
    public string Description { get; }
    public Type ResourceType { get; }
    public string ResourceId { get; }
    public LocalizedDescriptionAttribute(Type resourceType, string resourceId);
    public virtual string get_Description();
    public Type get_ResourceType();
    public string get_ResourceId();
}
internal static class Microsoft.VisualStudio.TestTools.Common.MachineNameHelper : object {
    public static bool GetMachineNameAndPort(string machineName, String& name, String& port);
    public static string EnsurePortIsSpecified(string machineName, int defaultPort);
}
internal static class Microsoft.VisualStudio.TestTools.Common.ManualTestConstants : object {
    internal static string WordFormatFileExtension;
    internal static string TestTypePropertyName;
    internal static string TestTypePropertyValue;
}
internal class Microsoft.VisualStudio.TestTools.Common.ManualTestElement : TestElement {
    internal static TestType ManualTestType;
    public TestType TestType { get; }
    public bool IsAutomated { get; }
    public bool CanBeAggregated { get; }
    public bool ReadOnly { get; public set; }
    public string Adapter { get; }
    public string ControllerPlugin { get; }
    public ManualTestElement(int id, string name, string description);
    private ManualTestElement(ManualTestElement copy);
    private static ManualTestElement();
    public virtual TestType get_TestType();
    public virtual bool get_IsAutomated();
    public virtual bool get_CanBeAggregated();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual string get_Adapter();
    public virtual string get_ControllerPlugin();
    public virtual object Clone();
}
internal static class Microsoft.VisualStudio.TestTools.Common.ManualTestHelper : object {
    internal static bool IsValidWordFormatManualTest(string path);
}
internal class Microsoft.VisualStudio.TestTools.Common.MediaRecorder.MediaRecorderBugMarker : object {
    private static string TimeCodeXmlLocation;
    private static string RelevantTestingStartTimeCodeXmlLocation;
    private TimeSpan m_timeCode;
    private TimeSpan m_relevantTestingStartTimeCode;
    public TimeSpan TimeCode { get; public set; }
    public TimeSpan RelevantTestingStartTimeCode { get; public set; }
    public TimeSpan RelevantTestingDuration { get; public set; }
    public MediaRecorderBugMarker(XmlElement xmlElement);
    public TimeSpan get_TimeCode();
    public void set_TimeCode(TimeSpan value);
    public TimeSpan get_RelevantTestingStartTimeCode();
    public void set_RelevantTestingStartTimeCode(TimeSpan value);
    public TimeSpan get_RelevantTestingDuration();
    public void set_RelevantTestingDuration(TimeSpan value);
    public sealed virtual void Save(XmlElement xmlElement, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement xmlElement, XmlTestStoreParameters parameters);
}
internal static class Microsoft.VisualStudio.TestTools.Common.MediaRecorder.MediaRecorderCommon : object {
    internal static string Internal_DataAdapterUriString;
    internal static string Internal_ConfigurationEditorUriString;
    public static Uri DataAdapterUri;
    public static Uri ConfigurationEditorUri;
    public static string DataAdapterTypeName;
    public static string WindowsMediaVideoExtension;
    public static string MetadataFileExtension;
    public static string ScreenCaptureFileExtension;
    private static string PlayStartTime_UriQueryParameterName;
    private static MediaRecorderCommon();
    public static void Extract(CollectorDataEntry data, UriDataAttachment& metadataAttachment, UriDataAttachment& screenCaptureAttachment);
    public static void Encode(NameValueCollection uriQueryParameters, TimeSpan playStartTimeCode);
    public static void Decode(NameValueCollection uriQueryParameters, TimeSpan& playStartTimeCode);
}
internal class Microsoft.VisualStudio.TestTools.Common.MediaRecorder.MediaRecorderMetadata : object {
    public static string MetadataFilename;
    private static string RootXmlElementName;
    private static string FilesXmlLocation;
    private static string FileXmlLocation;
    private static string FileDataXmlLocation;
    private static string DurationXmlLocation;
    private static string BugsXmlLocation;
    private static string BugXmlLocation;
    private static string BugDataXmlLocation;
    private static string TcmXmlLocation;
    private List`1<string> m_files;
    private TimeSpan m_duration;
    private List`1<MediaRecorderBugMarker> m_bugs;
    [CompilerGeneratedAttribute]
private TcmInformation <Tcm>k__BackingField;
    public List`1<string> Files { get; }
    public TimeSpan Duration { get; public set; }
    public List`1<MediaRecorderBugMarker> Bugs { get; }
    public TcmInformation Tcm { get; public set; }
    public MediaRecorderMetadata(XmlElement xmlElement);
    public MediaRecorderMetadata(Stream stream);
    public MediaRecorderMetadata(string filePath);
    private static MediaRecorderMetadata();
    public List`1<string> get_Files();
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public List`1<MediaRecorderBugMarker> get_Bugs();
    [CompilerGeneratedAttribute]
public TcmInformation get_Tcm();
    [CompilerGeneratedAttribute]
public void set_Tcm(TcmInformation value);
    public sealed virtual void Save(XmlElement xmlElement, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement xmlElement, XmlTestStoreParameters parameters);
    public void Save(Stream stream);
    public void Load(Stream stream);
    private static FileStream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public void Save(string filePath);
    public void Load(string filePath);
    private void WeedCollections();
}
internal class Microsoft.VisualStudio.TestTools.Common.MultiValue : object {
    public static char ValueSeparator;
    private static string ValueSeparatorString;
    private static Char[] ValueSeparatorCharArray;
    [PersistenceElementNameAttribute("multiValues")]
[StoreXmlSimpleFieldAttribute]
private string m_persistentValues;
    [NonPersistableAttribute]
private List`1<string> m_values;
    public int Count { get; }
    private static MultiValue();
    public void Clear();
    public int get_Count();
    public void Add(string val);
    public void Remove(string val);
    public bool Contains(string val);
    public sealed virtual void RecoverFromPersistence();
    public sealed virtual void PrepareToPersist();
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.Common.NameValue : object {
    private string m_name;
    private string m_value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public NameValue(NameValue other);
    public NameValue(string name, string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Common.NameValueArrayConverter : ArrayConverter {
    private static char m_nameValueSeparator;
    private static char m_pairSeparator;
    private static char m_escaper;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.VisualStudio.TestTools.Common.NativeMethods : object {
    internal static UInt32 S_OK;
    internal static int ERROR_FILE_NOT_FOUND;
    private static string KERNEL32;
    private static string USER32;
    private static string SHELL32;
    private static string ADVAPI32;
    private static string MSI;
    public static int MAX_PATH;
    public static int ERROR_SUCCESS;
    public static int ERROR_INVALID_PARAMETER;
    public static int ERROR_INVALID_HANDLE;
    public static int ERROR_ALREADY_EXISTS;
    public static int ERROR_NOT_CONNECTED;
    public static int ERROR_CONNECTION_UNAVAIL;
    public static int ERROR_BAD_DEVICE;
    public static int ERROR_MORE_DATA;
    public static int ERROR_DEVICE_ALREADY_REMEMBERED;
    public static int ERROR_NO_NET_OR_BAD_PATH;
    public static int ERROR_BAD_PROVIDER;
    public static int INVALID_SET_FILE_POINTER;
    public static int INVALID_HANDLE_VALUE;
    public static int TH32CS_SNAPPROCESS;
    public static int PROCESS_QUERY_INFORMATION;
    public static int WAIT_OBJECT_0;
    public static int PROCESS_TERMINATE;
    public static UInt32 LOAD_LIBRARY_AS_DATAFILE;
    public static int JOB_OBJECT_LIMIT_BREAKAWAY_OK;
    public static int WM_KEYDOWN;
    public static int PM_NOREMOVE;
    public static int PM_REMOVE;
    internal static int WM_SYSCOLORCHANGE;
    internal static int WM_THEMECHANGED;
    public static int QS_KEY;
    public static int QS_MOUSEMOVE;
    public static int QS_MOUSEBUTTON;
    public static int QS_POSTMESSAGE;
    public static int QS_TIMER;
    public static int QS_PAINT;
    public static int QS_SENDMESSAGE;
    public static int QS_HOTKEY;
    public static int QS_ALLPOSTMESSAGE;
    public static int QS_MOUSE;
    public static int QS_INPUT;
    public static int QS_ALLEVENTS;
    public static int QS_ALLINPUT;
    public static int MWMO_INPUTAVAILABLE;
    private static NativeMethods();
    internal static int CreateAssemblyCache(IAssemblyCache& ppAsmCache, UInt32 dwReserved);
    public static IntPtr GetStdHandle(int nStdHandle);
    public static int GetConsoleScreenBufferInfo(IntPtr hConsoleOutput, ConsoleScreenBufferInfo& lpConsoleScreenBufferInfo);
    public static void SetLastError(int errorCode);
    public static bool LogonUser(string UserName, string Domain, string Password, int LogonType, int LogonProvider, IntPtr& hToken);
    public static bool ImpersonateLoggedOnUser(IntPtr hToken);
    public static bool RevertToSelf();
    public static UInt32 WNetGetConnection(string lpszLocalName, string lpszRemoteName, Int32& cbRemoteName);
    public static bool CloseHandle(IntPtr handle);
    public static int GetConsoleScreenBufferInfo(IntPtr hConsoleOutput, CONSOLE_SCREEN_BUFFER_INFO& lpConsoleScreenBufferInfo);
    public static int SetConsoleTextAttribute(IntPtr hConsoleOutput, ushort wAttributes);
    internal static IntPtr CreateFileW(string lpFileName, UInt32 dwDesiredAccess, int dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, IntPtr hTemplateFile);
    internal static bool WriteFile(IntPtr hFile, Byte[] lpBuffer, int nBytesToWrite, Int32& nBytesWritten, IntPtr overlapped);
    internal static int SetFilePointer(IntPtr hFile, int lDistanceToMove, IntPtr lpDistanceToMoveHigh, UInt32 dwMoveMethod);
    internal static bool SetEndOfFile(IntPtr hFile);
    internal static UInt32 RegOpenKeyExW(IntPtr key, string subKey, UInt32 ulOptions, UInt32 samDesired, IntPtr& resultSubKey);
    internal static UInt32 RegCloseKey(IntPtr key);
    internal static UInt32 RegNotifyChangeKeyValue(IntPtr key, bool watchSubTree, UInt32 notifyFilter, IntPtr regEvent, bool async);
    internal static int MsiEnumRelatedProducts(string strUpgradeCode, int reserved, int iIndex, StringBuilder sbProductCode);
    internal static int MsiGetProductInfo(string product, string property, StringBuilder valueBuf, Int32& len);
    public static ModuleHandle LoadLibraryEx(string fileName, IntPtr reservedHandle, UInt32 flags);
    public static ModuleHandle LoadLibrary(string fileName);
    public static bool FreeLibrary(ModuleHandle moduleHandle);
    public static bool FreeLibrary(IntPtr moduleHandle);
    public static ModuleHandle GetProcAddress(ModuleHandle moduleHandle, string procName);
    public static bool Process32First(IntPtr hSnapshot, PROCESSENTRY32& lppe);
    public static bool Process32Next(IntPtr hSnapshot, PROCESSENTRY32& lpProcessEntry32);
    public static IntPtr OpenProcess(UInt32 dwDesiredAccess, bool bInheritHandle, UInt32 dwProcessId);
    public static bool TerminateProcess(IntPtr hProcess, int uExitCode);
    public static JobHandle CreateJobObject(IntPtr securityAttributes, string name);
    public static bool AssignProcessToJobObject(JobHandle hJob, IntPtr hProcess);
    public static bool TerminateJobObject(JobHandle hJob, int exitCode);
    public static bool QueryBasicInformationJobObject(JobHandle hJob, JOBOBJECTINFOCLASS jobObjectInfoClass, JOBOBJECT_EXTENDED_LIMIT_INFORMATION& lpJobObjectInfo, UInt32 cbJobObjectInfoLength, UInt32& lpReturnLength);
    public static bool SetExtendedInformationJobObject(JobHandle hJob, JOBOBJECTINFOCLASS JobObjectInfoClass, JOBOBJECT_EXTENDED_LIMIT_INFORMATION& lpJobObjectInfo, UInt32 cbJobObjectInfoLength);
    public static int StrongNameSignatureGeneration(string filePath, string keyContainer, Byte[] keyBlob, UInt32 keyBlobSize, Byte[] signatureBlob, UInt64[] signatureBlobSizes);
    public static int StrongNameTokenFromPublicKey(Byte[] PublicKeyBlob, int PublicKeyBlobSize, IntPtr& StrongNameToken, Int32& StrongNameTokenSize);
    public static UInt32 StrongNameErrorInfo();
    public static void StrongNameFreeBuffer(IntPtr buffer);
    public static int StrongNameGetPublicKey(string wszKeyContainer, Byte[] KeyBlob, int KeyBlobSize, IntPtr& PublicKeyBlob, Int32& PublicKeyBlobSize);
    public static IntPtr LoadIcon(ModuleHandle moduleHandle, IntPtr iconId);
    public static int LoadString(ModuleHandle moduleHandle, int stringId, StringBuilder outBuffer, int bufferMaximumSize);
    public static int ExtractIconEx(string path, int index, IntPtr[] smallIcons, IntPtr[] largeIcons, UInt32 numberOfIcons);
    internal static bool PostMessage(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam);
    internal static IntPtr SendMessage(IntPtr hwnd, int msg, IntPtr wparam, IntPtr lparam);
    public static IntPtr CreateToolhelp32Snapshot(UInt32 dwFlags, UInt32 th32ProcessID);
    public static IntPtr GetForegroundWindow();
    public static IntPtr GetFocus();
    internal static IntPtr SendMessage(HandleRef hWnd, int msg, IntPtr wParam, IntPtr lParam);
    internal static bool PeekMessage(Msg& msg, IntPtr hWnd, int uMsgFilterMin, int uMsgFilterMax, int wRemoveMsg);
    internal static bool GetMessage(Msg& msg, IntPtr hWnd, int uMsgFilterMin, int uMsgFilterMax);
    internal static bool TranslateMessage(Msg& msg);
    internal static IntPtr DispatchMessage(Msg& msg);
    internal static int MsgWaitForMultipleObjects(int nCount, IntPtr[] pHandles, bool fWaitAll, int dwMilliseconds, int dwWakeMask);
    internal static int MsgWaitForMultipleObjectsEx(int nCount, IntPtr[] pHandles, int dwMilliseconds, int dwWakeMask, int dwFlags);
}
[ComVisibleAttribute("False")]
[GuidAttribute("EC9846B3-2762-4A6B-A214-6ACB603462D2")]
internal class Microsoft.VisualStudio.TestTools.Common.NetFwAuthorizedApplication : object {
}
[ComVisibleAttribute("False")]
[GuidAttribute("304CE942-6E39-40D8-943A-B913C40C9CD4")]
internal class Microsoft.VisualStudio.TestTools.Common.NetFwMgr : object {
}
[ComVisibleAttribute("False")]
[GuidAttribute("0CA545C6-37AD-4A6C-BF92-9F7610067EF5")]
internal class Microsoft.VisualStudio.TestTools.Common.NetFwOpenPort : object {
}
internal class Microsoft.VisualStudio.TestTools.Common.NetworkAddressList : HashSet`1<string> {
    public static NetworkAddressList GetLocalNetworkAddressList();
    public static NetworkAddressList Parse(string listAsString);
    public virtual string ToString();
    public bool Equals(NetworkAddressList other);
}
internal class Microsoft.VisualStudio.TestTools.Common.NetworkEmulationProfile : object {
    private static string FilterElementName;
    private static string FilterElementNameAttr;
    private static string FilterElementExcludeAttr;
    private static string IpVersionElementName;
    private static string ProtocolElementName;
    private static string LocalElementName;
    private static string RemoteElementName;
    private static string IpAddressElementName;
    private static string IpMaskElementName;
    private static string PortBeginElementName;
    private static string PortEndElementName;
    private static string DefaultIpAddress;
    private static string DefaultIpV6Address;
    public static string DefaultProfileName;
    public static string DefaultConfigNodeName;
    private static string DefaultLegacyProfile;
    [StoreXmlSimpleFieldAttribute("@name", "Mono.Cecil.CustomAttributeArgument")]
private string m_name;
    private float m_bandwidthInKbps;
    private string m_configurationXml;
    public string Name { get; public set; }
    public float BandwidthInKbps { get; public set; }
    public string ConfigurationXml { get; public set; }
    public string ConfigurationXmlNoNameSpace { get; }
    internal NetworkEmulationProfile(NetworkEmulationProfile other);
    public NetworkEmulationProfile(string name);
    public NetworkEmulationProfile(string name, float bandwidthInKbps, string configurationXml);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NetworkEmulationProfile other);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public string get_Name();
    public void set_Name(string value);
    public float get_BandwidthInKbps();
    public void set_BandwidthInKbps(float value);
    public string get_ConfigurationXml();
    public void set_ConfigurationXml(string value);
    public string get_ConfigurationXmlNoNameSpace();
    private void CopyFrom(NetworkEmulationProfile other);
    public sealed virtual object Clone();
    internal void FilterConnection(IPEndPoint source, IPEndPoint destination, IPVersion ipVersion, bool exclude);
    internal void FilterIpEndPoint(IPEndPoint endPoint, EndPointType endPointType, IPVersion ipVersion, bool exclude);
    internal void FilterPortRange(bool exclude, EndPointType endPointType, int beginPort, int endPort);
    internal void MergeProfile(NetworkEmulationProfile profile);
    private void AddFilterRange(bool exclude, string filterIpAddress, IPVersion ipVersion, EndPointType endPointType, int beginPort, int endPort);
    private IPVersion GetIPVersion(IPEndPoint endPoint);
    private string FormatAddressAsString(IPEndPoint endPoint);
    private void AddFilter(bool exclude, IPEndPoint source, IPEndPoint destination, IPVersion ipVersion);
    private void SaveXmlDocument(XmlDocument xmlDocument);
    private XmlElement CreateIpVersionElement(XmlDocument xmlDocument, IPVersion ipVersion);
    private XmlElement CreateProtocolElement(XmlDocument xmlDocument);
    private XmlElement CreateLocalElement(XmlDocument xmlDocument, string ipAddress, IPVersion ipVersion, int portBegin, int portEnd);
    private XmlElement CreateRemoteElement(XmlDocument xmlDocument, string ipAddress, IPVersion ipVersion, int portBegin, int portEnd);
    private void CreatePortRangeElements(XmlDocument xmlDocument, string ipAddress, IPVersion ipVersion, int portBegin, int portEnd, XmlElement element);
    private XmlElement CreateIpAddressElement(XmlDocument xmlDocument, string ipAddress);
    private XmlElement CreateIpMaskElement(XmlDocument xmlDocument, IPVersion ipVersion);
    private XmlElement CreatePortBeginElement(XmlDocument xmlDocument, int portBegin);
    private XmlElement CreatePortEndElement(XmlDocument xmlDocument, int portEnd);
}
internal static class Microsoft.VisualStudio.TestTools.Common.NetworkInterfaceHelper : object {
    public static bool HasMultipleNicsForRemoting();
    public static bool IsAddressAvailable(string address);
    public static string GetNonTransientAddress();
    public static bool IsTransientAddress(IPAddress address);
    private static bool IsWindowsAutoConfiguredAddress(IPAddress ipAddress);
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualStudio.TestTools.Common.NonPersistableAttribute : Attribute {
}
internal class Microsoft.VisualStudio.TestTools.Common.OfficeAutomation : object {
    private static int m_msoPropertyTypeString;
    public static String[] GetWordProperties(string path, String[] propertyNames);
    public static void SetWordProperties(string path, String[] propertyNames, String[] propertyValues);
    private static Object[] GetOpenArguments(string path, bool readOnly, bool visible);
    private static bool PropertyExists(object properties, string propertyName);
    private static bool IsBuiltInProperty(object document, string propertyName);
    private static string GetDocumentProperty(object document, string propertyName);
    private static void SetDocumentProperty(object document, string propertyName, string propertyValue);
    internal static object GetOpenDocument(object documents, string file);
}
internal class Microsoft.VisualStudio.TestTools.Common.OfficeHelper : object {
    public static bool RequiredWordApplicationIsInstalled { get; }
    public static string WordExecutable { get; }
    public static void ReleaseOfficeResources();
    public static bool get_RequiredWordApplicationIsInstalled();
    public static string get_WordExecutable();
    public static String[] GetWordProperties(string path, String[] propertyNames);
    public static void SetWordProperties(string path, String[] propertyNames, String[] propertyValues);
    public static bool IsFileOpenInWord(string path);
    private static string GetDefaultValueFromClasses(string key);
}
internal class Microsoft.VisualStudio.TestTools.Common.OfficePropertyNames : object {
    public static string Author;
    public static string Title;
}
internal class Microsoft.VisualStudio.TestTools.Common.OutcomeConditionFunction : MulticastDelegate {
    public OutcomeConditionFunction(object object, IntPtr method);
    public virtual bool Invoke(TestOutcome outcome);
    public virtual IAsyncResult BeginInvoke(TestOutcome outcome, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualStudio.TestTools.Common.PersistenceElementNameAttribute : Attribute {
    private string m_name;
    public string Name { get; }
    public PersistenceElementNameAttribute(string name);
    public string get_Name();
}
internal class Microsoft.VisualStudio.TestTools.Common.PkgDefManager : object {
    private IntPtr pkgDefManager;
    internal static string PkgDefManagementAssemblyPath;
    private PkgDefManager(IntPtr pkgDefManager);
    private static IntPtr CreatePkgDefManagerForApplication(string applicationPath, string rootSuffix, PkgDefManagementFlags flags);
    private static void DestroyPkgDefManager(IntPtr manager);
    internal static PkgDefManager CreateForApplication(string installationPath, PkgDefManagementFlags flags, string rootSuffix);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TestTools.Common.Pool`1 : object {
    private static int c_defaultMinPoolSize;
    private static int c_defaultMaxPoolSize;
    private static int c_defaultCollectionTimeout;
    private static int c_minCollectionTimeout;
    private static int c_maxCollectionTimeout;
    private int m_minPoolSize;
    private int m_maxPoolSize;
    private int m_collectionTimeout;
    private List`1<T> m_freePool;
    private object m_freePoolLock;
    private int m_lastFreeCount;
    private Timer m_collectTimer;
    public int MinPoolSize { get; public set; }
    public int MaxPoolSize { get; public set; }
    public int CollectionTimeout { get; public set; }
    public Pool`1(int minPoolSize);
    public Pool`1(int minPoolSize, int maxPoolSize, int collectionTimeout);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_CollectionTimeout();
    public void set_CollectionTimeout(int value);
    private void Initialize();
    public T Get();
    public void Free(T obj);
    private void Collect(object state);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.Common.PriorityConverter : Int32Converter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.VisualStudio.TestTools.Common.ProcessHelper : object {
    private Process m_process;
    private bool m_processStarted;
    private ManualResetEvent m_processExited;
    private StringBuilder m_stdOut;
    private StringBuilder m_stdErr;
    private object m_stdOutLock;
    private object m_stdErrLock;
    private DataReceivedEventHandler m_stdOutEvent;
    private DataReceivedEventHandler m_stdErrEvent;
    private bool m_collectionStarted;
    public ProcessStartInfo StartInfo { get; }
    public bool HasExited { get; }
    public int ExitCode { get; }
    public string StandardOutput { get; }
    public string StandardError { get; }
    public ProcessStartInfo get_StartInfo();
    public bool get_HasExited();
    public int get_ExitCode();
    public bool Start();
    public bool Start(bool collectOutput);
    public WaitHandle GetWaitHandle();
    public void WaitForExit();
    public bool WaitForExit(int timeout);
    public void Kill();
    private void OnProcessExited(object sendingProcess, EventArgs unused);
    public sealed virtual void Dispose();
    public string get_StandardOutput();
    public string get_StandardError();
    private void SetupOutputCollection();
    public void StopCollection();
    private void OnOutputDataReceived(object sendingProcess, DataReceivedEventArgs outLine);
    private void OnErrorDataReceived(object sendingProcess, DataReceivedEventArgs outLine);
    public static string GetProcessName();
    public static string GetProcessName(int processId);
    public static SafeAutoResetEvent Console_RegisterForControlC();
    public static int Console_ReadLine(String& line, WaitHandle[] additionalWaitHandles);
    public static void OpenFile(string file, string arguments);
}
internal static class Microsoft.VisualStudio.TestTools.Common.ProcessIdentity : object {
    public static WindowsIdentity Identity;
    private static ProcessIdentity();
}
internal class Microsoft.VisualStudio.TestTools.Common.ProcessWaitHandle : WaitHandle {
    public ProcessWaitHandle(Process process);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.Common.ProductFeature : Enum {
    public int value__;
    public static ProductFeature None;
    public static ProductFeature TestListEditor;
    public static ProductFeature TeamDeveloperTools;
    public static ProductFeature TfsIntegration;
    public static ProductFeature RemoteExecution;
    public static ProductFeature NonCoreTests;
    public static ProductFeature WebLoadTests;
    public static ProductFeature LoadTestFull;
    public static ProductFeature LoadTestRemoteExecution;
}
public class Microsoft.VisualStudio.TestTools.Common.ProjectData : object {
    [PersistenceElementNameAttribute("id")]
private Guid m_projectId;
    [PersistenceElementNameAttribute("projectName")]
private string m_projectName;
    [PersistenceElementNameAttribute("solutionName")]
private string m_solutionName;
    [PersistenceElementNameAttribute("projectRelativePath")]
private string m_projectRelativePath;
    private string m_projectOutputDirectory;
    public string SolutionName { get; }
    public string ProjectName { get; }
    public string ProjectRelativePath { get; }
    public Guid ProjectId { get; }
    internal string ProjectOutputDirectory { get; }
    public ProjectData(Guid projectId, string solutionName, string projectName, string projectRelativePath);
    internal ProjectData(Guid projectId, string solutionName, string projectName, string projectRelativePath, string projectOutputDirectory);
    public string get_SolutionName();
    public string get_ProjectName();
    public string get_ProjectRelativePath();
    public Guid get_ProjectId();
    internal string get_ProjectOutputDirectory();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Microsoft.VisualStudio.TestTools.Common.PropertyConverterType : Enum {
    public int value__;
    public static PropertyConverterType NoTypeConverter;
    public static PropertyConverterType DataTableTypeConverter;
    public static PropertyConverterType ProjectStructureConverter;
    public static PropertyConverterType IterationConverter;
    public static PropertyConverterType WorkItemListConverter;
    public static PropertyConverterType TimeoutConverter;
    public static PropertyConverterType HostTypeConverter;
    public static PropertyConverterType DataAccessMethodConverter;
    public static PropertyConverterType TestCategoryConverter;
    public static PropertyConverterType PriorityConverter;
}
public enum Microsoft.VisualStudio.TestTools.Common.PropertyEditorType : Enum {
    public int value__;
    public static PropertyEditorType NoEditor;
    public static PropertyEditorType CssProjectStructurePicker;
    public static PropertyEditorType CssIterationPicker;
    public static PropertyEditorType WorkItemsPicker;
    public static PropertyEditorType DataConnectionPicker;
    public static PropertyEditorType TestCategoryPicker;
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.TestTools.Common.PropertyWindowAttribute : Attribute {
    private PropertyEditorType m_editorType;
    private PropertyConverterType m_converterType;
    public PropertyEditorType EditorType { get; }
    public PropertyConverterType ConverterType { get; }
    public PropertyWindowAttribute(PropertyEditorType editorType);
    public PropertyWindowAttribute(PropertyConverterType converterType);
    public PropertyWindowAttribute(PropertyEditorType editorType, PropertyConverterType converterType);
    public PropertyEditorType get_EditorType();
    public PropertyConverterType get_ConverterType();
}
public class Microsoft.VisualStudio.TestTools.Common.PublishInfo : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTestManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PublishFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TeamProject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BuildUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Flavor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestConfigName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestConfigId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RunId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResultsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBvt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanPromptForCredentials>k__BackingField;
    internal string ConnectionString { get; internal set; }
    internal bool UseTestManagement { get; internal set; }
    internal bool PublishFiles { get; internal set; }
    internal string PublishUri { get; internal set; }
    internal string TeamProject { get; internal set; }
    internal string BuildNumber { get; internal set; }
    internal string BuildId { get; internal set; }
    internal Uri BuildUri { get; internal set; }
    internal string Platform { get; internal set; }
    internal string Flavor { get; internal set; }
    internal string TestConfigName { get; internal set; }
    internal int TestConfigId { get; internal set; }
    internal Guid RunId { get; internal set; }
    internal string RunTitle { get; internal set; }
    internal string ResultsFile { get; internal set; }
    internal bool IsBvt { get; internal set; }
    internal bool CanPromptForCredentials { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ConnectionString();
    [CompilerGeneratedAttribute]
internal void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
internal bool get_UseTestManagement();
    [CompilerGeneratedAttribute]
internal void set_UseTestManagement(bool value);
    [CompilerGeneratedAttribute]
internal bool get_PublishFiles();
    [CompilerGeneratedAttribute]
internal void set_PublishFiles(bool value);
    [CompilerGeneratedAttribute]
internal string get_PublishUri();
    [CompilerGeneratedAttribute]
internal void set_PublishUri(string value);
    [CompilerGeneratedAttribute]
internal string get_TeamProject();
    [CompilerGeneratedAttribute]
internal void set_TeamProject(string value);
    [CompilerGeneratedAttribute]
internal string get_BuildNumber();
    [CompilerGeneratedAttribute]
internal void set_BuildNumber(string value);
    [CompilerGeneratedAttribute]
internal string get_BuildId();
    [CompilerGeneratedAttribute]
internal void set_BuildId(string value);
    [CompilerGeneratedAttribute]
internal Uri get_BuildUri();
    [CompilerGeneratedAttribute]
internal void set_BuildUri(Uri value);
    [CompilerGeneratedAttribute]
internal string get_Platform();
    [CompilerGeneratedAttribute]
internal void set_Platform(string value);
    [CompilerGeneratedAttribute]
internal string get_Flavor();
    [CompilerGeneratedAttribute]
internal void set_Flavor(string value);
    [CompilerGeneratedAttribute]
internal string get_TestConfigName();
    [CompilerGeneratedAttribute]
internal void set_TestConfigName(string value);
    [CompilerGeneratedAttribute]
internal int get_TestConfigId();
    [CompilerGeneratedAttribute]
internal void set_TestConfigId(int value);
    [CompilerGeneratedAttribute]
internal Guid get_RunId();
    [CompilerGeneratedAttribute]
internal void set_RunId(Guid value);
    [CompilerGeneratedAttribute]
internal string get_RunTitle();
    [CompilerGeneratedAttribute]
internal void set_RunTitle(string value);
    [CompilerGeneratedAttribute]
internal string get_ResultsFile();
    [CompilerGeneratedAttribute]
internal void set_ResultsFile(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsBvt();
    [CompilerGeneratedAttribute]
internal void set_IsBvt(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CanPromptForCredentials();
    [CompilerGeneratedAttribute]
internal void set_CanPromptForCredentials(bool value);
}
internal class Microsoft.VisualStudio.TestTools.Common.QTFile : object {
    private QTFileStream m_fs;
    public QTFileStream StreamToFile { get; }
    public string FileName { get; }
    public long FileSize { get; }
    public QTFile(QTFileStream qtFileStream);
    public QTFileStream get_StreamToFile();
    public string get_FileName();
    public long get_FileSize();
}
internal class Microsoft.VisualStudio.TestTools.Common.QTFileStream : FileStream {
    private IQTFileStreamCallback m_callback;
    private object m_lockingObject;
    public static int DefaultBufferSize;
    public IQTFileStreamCallback FileStreamCallback { get; public set; }
    public long Size { get; }
    public string Filename { get; }
    public QTFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, IQTFileStreamCallback callback);
    private static QTFileStream();
    public virtual object InitializeLifetimeService();
    public Byte[] Read(string agent, int offset, int count);
    public IQTFileStreamCallback get_FileStreamCallback();
    public void set_FileStreamCallback(IQTFileStreamCallback value);
    public long get_Size();
    public string get_Filename();
}
internal class Microsoft.VisualStudio.TestTools.Common.QTFileStreamAccessMap : object {
    internal int accessCount;
    internal QTFileStream fileStream;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.Common.QTKeyValueCollection : object {
    public static string XmlNamespaceUriParameterName;
    public static string CollectionElementName;
    public static string ItemElementName;
    public static string KeyAttributeName;
    public static string ValueAttributeName;
    public static int DefaultMaxKeyLength;
    public static int DefaultMaxValueLength;
    public static string DoubleUnderscore;
    private Dictionary`2<string, string> m_keyValuePairs;
    private int m_maxKeyLength;
    private int m_maxValueLength;
    public int Count { get; }
    public string Item { get; public set; }
    public QTKeyValueCollection(int maxKeyLength, int maxValueLength);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual bool Equals(QTKeyValueCollection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool IsReserved(string propertyName);
    public int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    public string get_Item(string key);
    public void set_Item(string key, string value);
    public bool ContainsKey(string key);
    public bool Remove(string key);
    public void Add(string key, string value);
    public void Clear();
    public bool TryGetValue(string key, String& value);
    public QTKeyValueCollection DeepClone();
    private void GetCollectionParameters(XmlTestStoreParameters parameters, String& xmlNamespaceUri, String& collectionElementName, String& itemElementName, String& keyAttributeName, String& valueAttributeName);
    private void ValidateLengths(string key, string value);
    private static string TrimAndVerify(string parameterValue, string parameterName);
}
public class Microsoft.VisualStudio.TestTools.Common.QTMeasurementBlockFactory : object {
    private static QTNullMeasurementProxy nullProxy;
    private static ProxyCreator modreq(System.Runtime.CompilerServices.IsVolatile) creator;
    private static QTMeasurementBlockFactory();
    public static void SetCreator(ProxyCreator c1);
    public static IQTMeasurementBlock New();
    public static IQTMeasurementBlock BeginNew(string formatStr, Object[] args);
}
internal class Microsoft.VisualStudio.TestTools.Common.QTNullMeasurementProxy : object {
    public sealed virtual void Begin(string s, Object[] args);
    public sealed virtual void Step(string s, Object[] args);
    public sealed virtual void End();
    public sealed virtual void Dispose();
}
internal static class Microsoft.VisualStudio.TestTools.Common.ReflectHelper : object {
    private static Dictionary`2<MemberInfo, Dictionary`2<string, object>> s_infoAttributes;
    public static Type TaskType;
    public static Type AsyncStateMachineAttributeType;
    public static PropertyInfo AsyncStateMachineTypePropertyInfo;
    private static ReflectHelper();
    internal static bool IsDefined(MemberInfo info, Type attrType, bool bInherit);
    internal static bool DefinesAttributeDerivedFrom(MemberInfo info, Type baseAttrType, bool bInherit);
    internal static bool DefinesAttributeDerivedFrom(MemberInfo info, Type baseAttrType, bool bInherit, Object& targetAttribute);
    internal static void ClearCache();
    private static Dictionary`2<string, object> GetAttributes(MemberInfo info, bool bInherit);
}
internal class Microsoft.VisualStudio.TestTools.Common.RegistryConstants : object {
    private static RegistryKey s_defaultHive;
    private static string s_defaultRoot;
    private static string s_applicationRoot;
    private static string RegistryHiveAppSettingName;
    private static string RegistryRootAppSettingName;
    public static string DefaultRootConstant;
    public static string NetworkEmulationSubKey;
    public static string LicensesSubKey;
    public static string ToolsOptionsPagesSubKey;
    public static string QualityToolsSubkey;
    public static string XmlSubKey;
    public static string TestTypesSubkey;
    public static string TestTypesSubkeyName;
    public static string ExtensionSubkeyName;
    public static string TestTypeExtensionsSubkeyName;
    public static string IconIdValueName;
    public static string NameIdValueName;
    public static string SatellitePathValueName;
    public static string SatelliteNameValueName;
    public static string ExecutingAssemblyDirectoryToken;
    public static string EditorValueName;
    public static string TipTypeName;
    public static string ServiceTypeName;
    public static string RunConfigurationEditorTypeName;
    public static string EnableWarnings;
    public static string LogPackageInitFailure;
    public static string AudibleTmiLoad;
    public static string AllowDeploymentFromShareValueName;
    public static string HostProcessIdleTimeout;
    public static string VisualStudioLocationValueName;
    public static string ProductVersion;
    public static string AllowObsoleteCollectorsValueName;
    public static string ListenPortSubkey;
    public static string ListenPortBeginInt;
    public static string ListenPortEndInt;
    public static string BindToIPAddress;
    public static string AlwaysUseMachineName;
    public static string UseNetBiosName;
    public static string TestManagerColumnsSubkey;
    public static string TestViewColumnsSubkey;
    public static string TestResultsColumnsSubkey;
    public static string TestPickerColumnsSubkey;
    public static string ControllerSubkey;
    public static string LoadTestResultsConnectString;
    public static string LoadTestResultsDisplayConnectString;
    public static string LastModifiedDateTime;
    public static string LastModifiedUser;
    private static string s_loadTestLicensingRoot;
    public static string LoadTestLicenseHighWaterMarkKey;
    public static string AgentControllerDefaultRoot;
    public static string AgentSubkey;
    public static string AgentSettingRoot;
    public static string ControllerMachineName;
    public static string AgentProcessExecutionUserName;
    public static string AgentProcessExecutionUserPassword;
    public static string MaximumAllowedHangs;
    public static string MaximumTestThreadStackSize;
    public static string ThreadAbortTimeout;
    public static string TestTimeoutMultiplier;
    public static string TfsUrl;
    public static string RegisteredAgentIdOnTfs;
    public static string TestAgentName;
    public static string LastConnectedTime;
    public static string VirtualMachineRoot;
    public static string GuestParametersSubKey;
    public static string ExternalSubKey;
    public static string FenceAgentSubKey;
    public static string FenceAgentConfigurationStatus;
    public static string FenceAgentInstructionSubKey;
    public static string ServiceLabContractVersion;
    public static string ServiceLabVersion;
    public static string AgentLabContractVersionKey;
    public static string AgentLabVersionKey;
    public static Version CurrentAgentLabVersion;
    public static string LabQualifiedTestAgentConfiguration;
    public static string LabQualifiedTfsCollectionUrl;
    public static string LabQualifiedTfsCollectionId;
    public static string LabQualifiedTestAgentName;
    public static string LabQualifiedTestAgentExternalMachineName;
    public static string LabQualifiedTestControllerMachineName;
    public static string LabQualifiedAgentRestartCommandKey;
    public static string LabQualifiedRestartId;
    public static string LabQualifiedForceRestartKey;
    public static string LabQualifiedCredentials;
    public static char TestAgentConfigurationSeparator;
    public static string TestAgentNetworkAdapterInfo;
    public static string LabServiceUserName;
    public static string LabServiceUserPassword;
    public static string MaxAgentVersionOnController;
    public static string AgentId;
    public static string DteaSkuMpcCode;
    public static string DteaLicenseKey;
    public static string TrialLicenseInstallDateValueName;
    public static string TrialLicensePeriodValueName;
    public static string DteaRunCountValueName;
    public static string RegistrationSubkey;
    public static string AgentRunModeKey;
    public static string AgentInteractiveProcessUserNameKey;
    public static string RunConfigSubkey;
    public static string DefaultRunConfigName;
    public static string PromptAlwaysName;
    public static string RunConfigTemplateFolderName;
    public static string EnableRemoteExecution;
    public static string RecentlyUsedControllerSubKey;
    public static string PackagesSubKey;
    public static string PackageSatelliteDllSubKey;
    public static string PackageSatelliteDllName;
    public static string PackageSatelliteDllPath;
    public static string ProjectsSubKey;
    public static string ProjectPackage;
    public static string DiagnosticsSubKey;
    public static string EnableTracingName;
    public static string TraceLevelName;
    public static string EnableTestExecutionEventLogTracingName;
    public static string TestExecutionEventLogTraceLevelName;
    public static string LogsDirectoryName;
    public static string RuntimeSubKey;
    public static string UserEnvironmentVariablesSubKey;
    public static string CurrituckConnectionSubkey;
    public static string CurrituckADString;
    public static string CurrituckProject;
    public static string CurrituckDomain;
    public static char ExtensionSeparator;
    public static string CodeModelProcessorsSubKey;
    public static string CodeModelProcessorType;
    public static string CodeModelUnitTestDeferDelay;
    public static string EnableCmiRefreshOnKeystrokeValue;
    public static string EnablePublicizeValue;
    public static string EnableIdleLoading;
    public static string CalculateLoadTime;
    internal static string TmiTimeoutEnabledRegistryValueName;
    internal static string ExecutionTimeoutEnabled;
    internal static string IsClrRetargetingEnabledValueName;
    internal static string UILanguage;
    internal static string UILanguageLoaded;
    internal static string General;
    public static string VSShellFolderSubKey;
    public static string VSInstallDirSubkey;
    public static string ToolsOptionsSubKey;
    public static string TestExecutionSettings;
    public static string PathToWebRootToolsOptionsValue;
    public static string ProjectLocationEntries;
    public static string VenusProjectLocationEntry;
    public static string TestSkuPackage;
    public static string ShowDeprecatedMSTestUIActionsKey;
    public static string ShowRemoveableMSTestUIActionsKey;
    public static string MaxOpenedCoverageFilesKey;
    public static int MaxOpenedCoverageFilesDefaultValue;
    public static string DialogKey;
    public static string DialogNameKey;
    public static string DialogOptionsKey;
    public static string DialogResource;
    public static string DialogResourceId;
    public static string DialogPropId;
    public static string DialogPropVal;
    public static string DialogToolPriority;
    public static string HostAdaptersSubkeyName;
    public static string HostAdaptersSubkey;
    public static string HostAdapterType;
    public static string HostAdapterEditorType;
    public static string HostAdapterIsLoadTestCandidate;
    public static string HostAdapterSupportedTestTypesSubkeyName;
    public static string TestTypeSupportedHostAdaptersSubkeyName;
    public static RegistryKey DefaultHive { get; public set; }
    public static string DefaultRoot { get; public set; }
    public static string ApplicationRoot { get; public set; }
    public static string LoadTestLicensingRoot { get; public set; }
    public static string LoadTestLicensesRoot { get; }
    public static string LoadTestRegistrationRoot { get; }
    private static RegistryConstants();
    public static RegistryKey get_DefaultHive();
    public static void set_DefaultHive(RegistryKey value);
    public static string get_DefaultRoot();
    public static void set_DefaultRoot(string value);
    public static string get_ApplicationRoot();
    public static void set_ApplicationRoot(string value);
    public static string get_LoadTestLicensingRoot();
    public static void set_LoadTestLicensingRoot(string value);
    public static string get_LoadTestLicensesRoot();
    public static string get_LoadTestRegistrationRoot();
    private static string GetConfigValueIgnoringExceptions(string appSettingName);
    private static string GetRegistryHiveIfRascal();
}
internal static class Microsoft.VisualStudio.TestTools.Common.RegistryDetourHelper : object {
    [CompilerGeneratedAttribute]
private static string <VSInstallPath>k__BackingField;
    private static bool m_enableDetour;
    internal static string VSInstallPath { get; private set; }
    private static RegistryDetourHelper();
    [CompilerGeneratedAttribute]
internal static string get_VSInstallPath();
    [CompilerGeneratedAttribute]
private static void set_VSInstallPath(string value);
    public static void StartDetouring();
    public static void StopDetouring();
    public static void InitiatePkgDefMerge();
    private static void InitiatePkgDefMerge(string installationPath);
    private static void InvokeDetourAction(Action action);
    private static bool IsDetourEnabled();
    private static bool Is64BitProcess();
    private static bool IsPkgDefInitialized();
}
internal class Microsoft.VisualStudio.TestTools.Common.RegistryKeyHelper : object {
    private static RegistryKey RegOpenKey(string keyName);
    public static string RegGetOpenSubKey(string keyName);
    public static object RegGetValue(string keyName, string valueName);
    public static String[] RegGetValueNames(string keyName);
    public static String[] RegGetSubKeyNames(string keyName);
}
[AttributeUsageAttribute("128")]
internal class Microsoft.VisualStudio.TestTools.Common.RequiredProductFeaturesAttribute : Attribute {
    private ProductFeature m_features;
    internal ProductFeature ProductFeature { get; }
    internal RequiredProductFeaturesAttribute(ProductFeature features);
    internal ProductFeature get_ProductFeature();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.Common.ResourceHelper : object {
    private static string RESOURCE_EXTENSION;
    public static string GetString(string name, Assembly assembly, CultureInfo cultureInfo);
    public static void SplitByPlaceholder(string formatString, String& leftHalf, String& rightHalf);
    public static void SplitByPlaceholder(string formatString, int placeholderIndex, String& leftHalf, String& rightHalf);
    [ExtensionAttribute]
public static string CommaSeparate(IEnumerable`1<string> strings);
    [ExtensionAttribute]
public static string IndentedLineSeparate(IEnumerable`1<string> strings);
}
internal class Microsoft.VisualStudio.TestTools.Common.RunConfigurationEventArgs : EventArgs {
    private List`1<TestRunConfigurationId> m_runConfigurationIds;
    public TestRunConfigurationId[] RunConfigurationIds { get; }
    public int Count { get; }
    internal RunConfigurationEventArgs(TestRunConfigurationId id);
    public TestRunConfigurationId[] get_RunConfigurationIds();
    public int get_Count();
    internal void Add(TestRunConfigurationId id);
}
public class Microsoft.VisualStudio.TestTools.Common.RunInfo : object {
    [StoreXmlSimpleFieldAttribute("Text", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("text")]
private string m_text;
    [PersistenceElementNameAttribute("exception")]
private Exception m_exception;
    [StoreXmlSimpleFieldAttribute("@computerName", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("computerInfo")]
private string m_computer;
    [StoreXmlSimpleFieldAttribute("@outcome")]
[PersistenceElementNameAttribute("outcome")]
private TestOutcome m_outcome;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("timestamp")]
private DateTime m_timestamp;
    public string Text { get; }
    public int TextHashCode { get; }
    public Exception Exception { get; }
    public string ComputerInfo { get; }
    [WarehouseDimensionFieldAttribute("Machine", "4")]
public string AgentMachine { get; }
    public TestOutcome Outcome { get; }
    public string OutcomeText { get; }
    public bool IsPass { get; }
    public DateTime Timestamp { get; }
    private IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.ColumnHeadersText { get; }
    private IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.RowText { get; }
    public RunInfo(string textMessage, Exception ex, string computer, TestOutcome outcome);
    public string get_Text();
    public int get_TextHashCode();
    public Exception get_Exception();
    public string get_ComputerInfo();
    public string get_AgentMachine();
    public sealed virtual TestOutcome get_Outcome();
    public string get_OutcomeText();
    public bool get_IsPass();
    public DateTime get_Timestamp();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.get_ColumnHeadersText();
    private sealed virtual override IList`1<string> Microsoft.VisualStudio.TestTools.Common.IResultMessage.get_RowText();
}
public class Microsoft.VisualStudio.TestTools.Common.RunOutputTestResultMessage : TestResultMessage {
    [PersistenceElementNameAttribute("stdout")]
private string m_stdOut;
    [PersistenceElementNameAttribute("stderr")]
private string m_stdErr;
    [PersistenceElementNameAttribute("debugTrace")]
private string m_debugTrace;
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{53483f67-ae8d-4e1b-a048-7dd678cf1869}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_StdOut")]
public string StdOut { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{908fc174-9158-4ae9-8c1f-3e6fa51e2bd6}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_StdErr")]
public string StdErr { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{93c2eda9-612d-40db-9988-2d73a85c99cc}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_DebugTrace")]
public string DebugTrace { get; public set; }
    private RunOutputTestResultMessage(SerializationInfo info, StreamingContext context);
    private RunOutputTestResultMessage(RunOutputTestResultMessage other);
    public RunOutputTestResultMessage(Guid runId);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_StdOut();
    public void set_StdOut(string value);
    public string get_StdErr();
    public void set_StdErr(string value);
    public string get_DebugTrace();
    public void set_DebugTrace(string value);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.Common.RunResultAndStatistics : object {
    private TestRun m_testRun;
    [PersistenceElementNameAttribute("runInfoList")]
private List`1<RunInfo> m_runInfoList;
    private List`1<DataCollectorMessageInfo> m_dataCollectorMessages;
    [StoreXmlSimpleFieldAttribute("Counters/@total")]
[PersistenceElementNameAttribute("totalTestCount")]
private int m_totalTests;
    [StoreXmlSimpleFieldAttribute("Counters/@executed", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("executedTestCount")]
private int m_executedTests;
    [StoreXmlSimpleFieldAttribute("Counters/@passed", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("passedTestCount")]
private int m_passedTests;
    [StoreXmlSimpleFieldAttribute("Output/StdOut", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("stdout")]
private string m_stdOut;
    [StoreXmlSimpleFieldAttribute("Output/StdErr", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("stderr")]
private string m_stdErr;
    [StoreXmlSimpleFieldAttribute("Output/DebugTrace", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("debugTrace")]
private string m_debugTrace;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("outcome")]
private TestOutcome m_outcome;
    [PersistenceElementNameAttribute("counters")]
private Int32[] m_counters;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("isPartialRun")]
private bool m_isPartialRun;
    private SortedList`2<string, object> m_resultFiles;
    private Dictionary`2<string, AttachmentFileInfo> m_fileUris;
    private List`1<CollectorDataEntry> m_collectorDataEntries;
    internal IList`1<AttachmentFileInfo> AttachmentFileUris { get; }
    public TestRun TestRun { get; }
    [WarehouseObjectAttribute]
public RunInfo[] RunInfoList { get; }
    public IList`1<DataCollectorMessageInfo> DataCollectorMessages { get; }
    public bool HasPassed { get; }
    [VisiblePropertyAttribute]
public TestOutcome Outcome { get; public set; }
    public string StdOut { get; public set; }
    public string StdErr { get; public set; }
    public string DebugTrace { get; public set; }
    public bool IsPartialRun { get; public set; }
    public string OutcomeText { get; }
    public int TotalTestCount { get; internal set; }
    public int ExecutedTestCount { get; }
    public int PassedTestCount { get; }
    public int FailedTestCount { get; }
    public int Item { get; }
    public string ResultsDirectory { get; }
    internal IList`1<string> RelativeResultFiles { get; }
    public IList`1<string> ResultFiles { get; }
    internal IList`1<CollectorDataEntry> RelativeCollectorDataEntries { get; }
    public IList`1<CollectorDataEntry> CollectorDataEntries { get; }
    internal RunResultAndStatistics(TestRun testRun, int totalTestCount);
    private RunResultAndStatistics(RunResultAndStatistics copy, TestRun targetRun);
    internal RunResultAndStatistics(TestRun testRun, XmlElement element, XmlTestStoreParameters parameters);
    public void AddRunInfo(string textMessage, Exception ex, string computer, TestOutcome outcome);
    internal void AddDataCollectorMessage(DataCollectorMessageInfo message);
    internal void UpdateFromAggregation(TestResultAggregation newAggregation, TestResultAggregation oldAggregation);
    internal void UpdateWithNewTestOutcome(TestOutcome outcome, bool rollbackPreviousPassed);
    internal void UpdateWithNewTestOutcome(TestOutcome outcome);
    internal void AddResultFiles(IEnumerable`1<string> resultFiles);
    internal bool AddAttachmentFileInfo(string fileName, Uri attachmentUri);
    internal void AddCollectorDataEntries(IEnumerable`1<CollectorDataEntry> collectorDataEntries);
    internal void LoadResultFilesFromDisk(IEnumerable`1<TestResult> testResultsToExclude);
    [ConditionalAttribute("Debug")]
private void CheckConsistency();
    private void FixCounters(TestResultAggregation agg);
    private void SetOutcomeInternal(TestOutcome value, bool skipAllChecks);
    private int CountAllOutcomesInternal(OutcomeConditionFunction conditionFunction);
    public void CopyTo(TestRun targetRun);
    internal IList`1<AttachmentFileInfo> get_AttachmentFileUris();
    public TestRun get_TestRun();
    public RunInfo[] get_RunInfoList();
    public IList`1<DataCollectorMessageInfo> get_DataCollectorMessages();
    public bool get_HasPassed();
    public TestOutcome get_Outcome();
    public void set_Outcome(TestOutcome value);
    public string get_StdOut();
    public void set_StdOut(string value);
    public string get_StdErr();
    public void set_StdErr(string value);
    public string get_DebugTrace();
    public void set_DebugTrace(string value);
    public bool get_IsPartialRun();
    public void set_IsPartialRun(bool value);
    public string get_OutcomeText();
    public int get_TotalTestCount();
    internal void set_TotalTestCount(int value);
    public int get_ExecutedTestCount();
    public int get_PassedTestCount();
    public int get_FailedTestCount();
    public int get_Item(TestOutcome outcome);
    public string get_ResultsDirectory();
    internal IList`1<string> get_RelativeResultFiles();
    public IList`1<string> get_ResultFiles();
    internal IList`1<CollectorDataEntry> get_RelativeCollectorDataEntries();
    public IList`1<CollectorDataEntry> get_CollectorDataEntries();
    public sealed virtual object Clone();
    public virtual string ToString();
    public sealed virtual bool IsValid();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public enum Microsoft.VisualStudio.TestTools.Common.RunState : Enum {
    public int value__;
    public static RunState Uninitialized;
    public static RunState Queuing;
    public static RunState Deploying;
    public static RunState Deployed;
    public static RunState Queued;
    public static RunState Starting;
    public static RunState Started;
    public static RunState Running;
    public static RunState Pausing;
    public static RunState Paused;
    public static RunState Resuming;
    public static RunState Timeout;
    public static RunState Stopping;
    public static RunState Stopped;
    public static RunState Aborting;
    public static RunState Aborted;
    public static RunState Completing;
    public static RunState CompletingCleanup;
    public static RunState Completed;
    public static RunState Disposed;
}
public class Microsoft.VisualStudio.TestTools.Common.RunStateEvent : TestMessage {
    [PersistenceElementNameAttribute("runId")]
private Guid m_runId;
    [PersistenceElementNameAttribute("newState")]
private RunState m_newState;
    [PersistenceElementNameAttribute("computer")]
private string m_computer;
    [PersistenceElementNameAttribute("time")]
private DateTime m_timestamp;
    public Guid RunId { get; }
    public RunState NewState { get; }
    public string Computer { get; }
    public DateTime Timestamp { get; }
    public RunStateEvent(Guid runId, RunState newState, string computer, DateTime timestamp);
    public RunStateEvent(Guid runId, RunState newState, string computer);
    protected RunStateEvent(SerializationInfo info, StreamingContext context);
    public Guid get_RunId();
    public RunState get_NewState();
    public string get_Computer();
    public DateTime get_Timestamp();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsValid();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Common.SafeAbortableUserWorkItemFactory : object {
    private Predicate`1<WaitCallback> m_queueUserWorkItem;
    public SafeAbortableUserWorkItemFactory(Predicate`1<WaitCallback> queueUserWorkItem);
    public ISafeAbortableUserWorkItem Create(WaitCallback callback);
    public ISafeAbortableUserWorkItem Create(WaitCallback callback, object state);
}
internal class Microsoft.VisualStudio.TestTools.Common.SafeAutoResetEvent : SafeEventWaitHandle {
    public SafeAutoResetEvent(bool initialState);
}
internal class Microsoft.VisualStudio.TestTools.Common.SafeEventWaitHandle : EventWaitHandle {
    private object m_lock;
    private bool m_isDisposed;
    public SafeEventWaitHandle(bool initialState, EventResetMode mode);
    protected virtual void Dispose(bool explicitDisposing);
    public bool Set();
    public bool Reset();
}
internal class Microsoft.VisualStudio.TestTools.Common.SafeManualResetEvent : SafeEventWaitHandle {
    public SafeManualResetEvent(bool initialState);
}
internal class Microsoft.VisualStudio.TestTools.Common.SafeReaderWriterLockSlim : ReaderWriterLockSlim {
    private object m_readerLock;
    private object m_upgradeableReaderLock;
    private object m_writerLock;
    private bool m_isDisposed;
    public sealed virtual void Dispose();
    public void EnterReadLock();
    public bool TryEnterReadLock(int millisecondsTimeout);
    public bool TryEnterReadLock(TimeSpan timeout);
    public void ExitReadLock();
    public void EnterUpgradeableReadLock();
    public bool TryEnterUpgradeableReadLock(int millisecondsTimeout);
    public bool TryEnterUpgradeableReadLock(TimeSpan timeout);
    public void ExitUpgradeableReadLock();
    public void EnterWriteLock();
    public bool TryEnterWriteLock(int millisecondsTimeout);
    public bool TryEnterWriteLock(TimeSpan timeout);
    public void ExitWriteLock();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.Common.SearchPaths : object {
    [PersistenceElementNameAttribute("TestSearchPath")]
private ArrayList m_testSearchPath;
    [PersistenceElementNameAttribute("RunConfigSearchPath")]
private ArrayList m_runConfigSearchPath;
    [NonPersistableAttribute]
private bool m_userModified;
    [NonPersistableAttribute]
private string m_associatedFile;
    [NonPersistableAttribute]
private static string OptionExtension;
    public bool UserModified { get; public set; }
    public string AssociatedFile { get; }
    public String[] Item { get; }
    public bool get_UserModified();
    public void set_UserModified(bool value);
    public string get_AssociatedFile();
    public static SearchPaths LoadSearchPaths(string filename);
    public static SearchPaths ConstructSearchPathsRecursively(SearchPathType[] searchPathTypes, string rootPath);
    public void Save();
    public string FindOnSamePathAsAssociatedFile(string filename);
    public void AddPathToSearchPath(SearchPathType type, string newPath);
    public void InsertPathIntoSearchPath(SearchPathType type, int index, string newPath);
    public void AddSearchPathsRecursively(SearchPathType[] searchPathTypes, string rootPath);
    public void RemoveFromSearchPathAt(SearchPathType type, int index);
    public void RemovePathFromSearchPath(SearchPathType type, string oldPath);
    public void Merge(SearchPaths pathsToMerge);
    public String[] get_Item(SearchPathType type);
    public void Clear();
    private ArrayList ListFromEnum(SearchPathType type);
    private static int IndexOf(ArrayList list, string searchPath);
    private static String[] ToArray(ArrayList list);
    private static void GetSubDirectories(string pathToTopDirectory, List`1& paths);
    private static void AddPathRecursivelyToSearchPath(SearchPaths searchPaths, SearchPathType[] searchPathTypes, string rootPath);
}
internal class Microsoft.VisualStudio.TestTools.Common.SelectionCriteriaDictionary : Dictionary`2<string, string> {
    private static string AgentPropertyXmlLocation;
    private static string AgentPropertyNameXmlLocation;
    private static string AgentPropertyValueXmlLocation;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_selectAllAgents;
    public bool SelectAllAgents { get; public set; }
    public string TestEnvironmentName { get; }
    internal SelectionCriteriaDictionary(SelectionCriteriaDictionary other);
    public SelectionCriteriaDictionary(XmlElement elementToLoadFrom);
    protected SelectionCriteriaDictionary(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public bool get_SelectAllAgents();
    public void set_SelectAllAgents(bool value);
    public string get_TestEnvironmentName();
    private void CopyFrom(SelectionCriteriaDictionary other);
}
internal class Microsoft.VisualStudio.TestTools.Common.SerializationHelper : object {
    private SerializationInfo m_info;
    private int m_classLevel;
    private bool m_started;
    private bool m_serialize;
    private int m_nonDefaults;
    private static char c_baseFieldNameChar;
    private static char c_nonDefaultsChar;
    private static string c_versionFieldName;
    private static char c_currentVersion;
    private int m_nextFieldId;
    private static int c_maxBitsPerField;
    private static Type s_intType;
    private static Type s_charType;
    private static Type s_boolType;
    private static Type s_longType;
    private static Type s_stringType;
    private static Type s_guidType;
    public SerializationHelper(SerializationInfo info, int classLevel);
    private static SerializationHelper();
    private void IncrementNextFieldId();
    private int GetFieldBitMask();
    public static void AddVersionField(SerializationInfo info);
    public void BeginSerialization();
    private void AddField(object fieldValue, object defaultValue, Type fieldType);
    public void AddGuid(Guid fieldValue);
    public void AddGuid(Guid fieldValue, Guid defaultValue);
    public void AddBool(bool fieldValue);
    public void AddBool(bool fieldValue, bool defaultValue);
    public void AddInt(int fieldValue);
    public void AddInt(int fieldValue, int defaultValue);
    public void AddLong(long fieldValue);
    public void AddLong(long fieldValue, long defaultValue);
    public void AddString(string fieldValue);
    public void AddString(string fieldValue, string defaultValue);
    public void AddCollection(ICollection fieldValue);
    public void AddGenericCollection(ICollection`1<T> fieldValue);
    public void AddField(T fieldValue);
    public void AddField(T fieldValue, T defaultValue);
    public void SkipField();
    public void EndSerialization();
    public void BeginDeserialization();
    private object GetField(Type fieldType, object defaultValue);
    public Guid GetGuid();
    public Guid GetGuid(Guid defaultValue);
    public bool GetBool();
    public bool GetBool(bool defaultValue);
    public int GetInt();
    public int GetInt(int defaultValue);
    public long GetLong();
    public long GetLong(long defaultValue);
    public string GetString();
    public string GetString(string defaultValue);
    public TestId GetTestId();
    public TestId GetTestId(TestId defaultValue);
    public T GetCollection();
    public T GetField();
    public T GetField(T defaultValue);
    public void EndDeserialization();
    private string GetFieldIdString();
    private string GetBitFieldIdString();
}
internal class Microsoft.VisualStudio.TestTools.Common.ServiceMessage : TestMessage {
    [PersistenceElementNameAttribute("computer")]
private string m_computer;
    public string Computer { get; }
    public ServiceMessage(string computer);
    protected ServiceMessage(SerializationInfo info, StreamingContext context);
    public string get_Computer();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsValid();
}
public class Microsoft.VisualStudio.TestTools.Common.SessionId : object {
    [PersistenceElementNameAttribute("id")]
private Guid m_sessionId;
    private static SessionId m_empty;
    public static SessionId Empty { get; }
    public Guid Id { get; }
    public SessionId(Guid id);
    private static SessionId();
    public static SessionId get_Empty();
    public Guid get_Id();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleFileProvider : object {
    private string m_filePath;
    public string FilePath { get; public set; }
    public sealed virtual StringCollection GetFilePaths();
    public string get_FilePath();
    public void set_FilePath(string value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("b722bccb-4e68-101b-a2bc-00aa00404770")]
internal interface Microsoft.VisualStudio.TestTools.Common.SingleInstance.IOleCommandTarget {
    public abstract virtual int QueryStatus(Guid& pguidCmdGroup, UInt32 cCmds, OLECMD[] prgCmds, IntPtr pCmdText);
    public abstract virtual int Exec(Guid& pguidCmdGroup, UInt32 nCmdID, OLECMDEXECOPT nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("b722bccb-4e68-101b-a2bc-00aa00404770")]
internal interface Microsoft.VisualStudio.TestTools.Common.SingleInstance.IOleCommandTargetGetCommandValue {
    public abstract virtual void QueryStatus(Guid pguidCmdGroup, UInt32 cCmds, OLECMD& prgCmds, IntPtr pCmdText);
    public abstract virtual void Exec(Guid pguidCmdGroup, UInt32 nCmdID, OLECMDEXECOPT nCmdexecopt, IntPtr pvaIn, Object& pvaOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("b722bccb-4e68-101b-a2bc-00aa00404770")]
internal interface Microsoft.VisualStudio.TestTools.Common.SingleInstance.IOleCommandTargetNullOutputParam {
    public abstract virtual void QueryStatus(Guid pguidCmdGroup, UInt32 cCmds, OLECMD& prgCmds, IntPtr pCmdText);
    public abstract virtual void Exec(Guid pguidCmdGroup, UInt32 nCmdID, OLECMDEXECOPT nCmdexecopt, Object& pvaIn, IntPtr pvaOut);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("b722bccb-4e68-101b-a2bc-00aa00404770")]
internal interface Microsoft.VisualStudio.TestTools.Common.SingleInstance.IOleCommandTargetWithExecParams {
    public abstract virtual void QueryStatus(Guid pguidCmdGroup, UInt32 cCmds, OLECMD& prgCmds, IntPtr pCmdText);
    public abstract virtual void Exec(Guid pguidCmdGroup, UInt32 nCmdID, OLECMDEXECOPT nCmdexecopt, Object& pvaIn, Object& pvaOut);
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleInstance.Ole32 : object {
    public static int CreateItemMoniker(string lpszDelim, string lpszItem, IMoniker& ppmk);
    public static int GetRunningObjectTable(int reserved, IRunningObjectTable& pprot);
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleInstance.OLECMD : ValueType {
    public UInt32 cmdID;
    public OLECMDF cmdf;
}
internal enum Microsoft.VisualStudio.TestTools.Common.SingleInstance.OLECMDEXECOPT : Enum {
    public UInt32 value__;
    public static OLECMDEXECOPT DODEFAULT;
    public static OLECMDEXECOPT PROMPTUSER;
    public static OLECMDEXECOPT DONTPROMPTUSER;
    public static OLECMDEXECOPT SHOWHELP;
}
internal enum Microsoft.VisualStudio.TestTools.Common.SingleInstance.OLECMDF : Enum {
    public UInt32 value__;
    public static OLECMDF None;
    public static OLECMDF SUPPORTED;
    public static OLECMDF ENABLED;
    public static OLECMDF LATCHED;
    public static OLECMDF NINCHED;
}
internal static class Microsoft.VisualStudio.TestTools.Common.SingleInstance.OLECMDID : object {
    public static UInt32 SHOWSCRIPTERROR;
    public static UInt32 SHOWMESSAGE;
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleInstance.OLECMDTEXT : ValueType {
    public OLECMDTEXTF cmdtextf;
    public UInt32 cwActual;
    public UInt32 cwBuf;
    public Char[] rgwz;
}
internal enum Microsoft.VisualStudio.TestTools.Common.SingleInstance.OLECMDTEXTF : Enum {
    public UInt32 value__;
    public static OLECMDTEXTF NONE;
    public static OLECMDTEXTF NAME;
    public static OLECMDTEXTF STATUS;
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleInstance.RunningObjectTable : object {
    private IRunningObjectTable _rot;
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public IDisposable Register(string itemName, object obj);
    private static IMoniker CreateMoniker(string itemName);
    public object GetObject(string itemName);
    private void Revoke(int registration);
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleInstance.SingleInstanceApplicationManager : object {
    private static string AppMutextFormatString;
    public static bool Run(string appId, string applicationTitle, LaunchAction action, String[] args);
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleInstance.User32 : object {
    public static bool AllowSetForegroundWindow(int procId);
}
internal class Microsoft.VisualStudio.TestTools.Common.SingleInstanceHelper : object {
    private static string c_semaphoreNameFormatString;
    private string m_semaphoreName;
    private Semaphore m_singleInstanceSemaphore;
    private bool m_ownsSingleInstance;
    private bool m_isDisposed;
    public bool OwnsSingleInstance { get; private set; }
    public SingleInstanceHelper(string name, SingleInstanceScope scope);
    public bool get_OwnsSingleInstance();
    private void set_OwnsSingleInstance(bool value);
    public bool TryTakeOwnership();
    public void Exit();
    public sealed virtual void Dispose();
    private void CheckDisposed();
}
internal enum Microsoft.VisualStudio.TestTools.Common.SingleInstanceScope : Enum {
    public int value__;
    public static SingleInstanceScope Local;
    public static SingleInstanceScope Global;
}
internal class Microsoft.VisualStudio.TestTools.Common.StackTraceElement : object {
    private string m_methodSig;
    private string m_srcFile;
    private Nullable`1<int> m_lineNumber;
    internal bool HasSourceFile { get; }
    internal string MethodSignature { get; }
    internal bool HasLineNumber { get; }
    public string StorageLocation { get; }
    public Nullable`1<int> LineNumber { get; }
    public string ActiveStatement { get; }
    internal StackTraceElement(string methodSig, string srcFile, Nullable`1<int> lineNumber);
    internal bool get_HasSourceFile();
    internal string get_MethodSignature();
    internal bool get_HasLineNumber();
    public virtual string ToString();
    public sealed virtual string get_StorageLocation();
    public sealed virtual Nullable`1<int> get_LineNumber();
    public sealed virtual string get_ActiveStatement();
}
internal class Microsoft.VisualStudio.TestTools.Common.StackTraceParser : object {
    internal List`1<StackTraceElement> Parse(string errorStackTrace);
}
internal static class Microsoft.VisualStudio.TestTools.Common.StackTraceRegex : object {
    private static Regex m_regex;
    internal static Regex RegexExpression { get; }
    internal static Regex get_RegexExpression();
}
internal abstract class Microsoft.VisualStudio.TestTools.Common.StateMachine`1 : object {
    private object m_stateLock;
    private StateEnum m_state;
    private AutoResetEvent m_stateChange;
    private StateHandlerDelegate[] m_stateHandlers;
    private List`1<StateEnum> m_stateRequests;
    private StateEnum m_enumBase;
    private bool m_traceVerbose;
    public StateEnum State { get; }
    public StateMachine`1(StateHandlerDelegate[] stateHandlers, StateEnum initialState);
    public StateEnum get_State();
    public abstract virtual bool IsExecuting(StateEnum state);
    public abstract virtual bool IsHigherPriority(StateEnum oldState, StateEnum newState);
    public abstract virtual bool CanSwitchToState(StateEnum oldState, StateEnum newState);
    public abstract virtual bool ExceptionHandler(StateEnum state, Exception ex);
    public abstract virtual int CovertStateToInt(StateEnum state);
    public abstract virtual bool StateEquals(StateEnum state1, StateEnum state2);
    private void VerifyStateHandlerDelegates(StateHandlerDelegate[] stateHandlers);
    public void Execute();
    public void SetNextState(StateEnum newState);
    public void RequestState(StateEnum newState);
    public void CheckRequestQueue();
    public void ClearRequestQueue();
    public void Verify(StateEnum expected);
    private void HandleStateRequests();
}
internal class Microsoft.VisualStudio.TestTools.Common.StringBasedEqualityComparer`1 : object {
    private StringProvider`1<T> m_stringProvider;
    private IEqualityComparer`1<string> m_stringComparer;
    public StringBasedEqualityComparer`1(StringProvider`1<T> stringProvider, IEqualityComparer`1<string> stringComparer);
    public sealed virtual bool Equals(T t1, T t2);
    public sealed virtual int GetHashCode(T t);
}
internal static class Microsoft.VisualStudio.TestTools.Common.StringConstants : object {
    public static string TestRunConfigurationFileExtension;
    public static string TestSettingsFileExtension;
    public static string TestMetadataFileExtension;
    public static string CoverageBinaryFileExtension;
    public static string CoverageXmlFileExtension;
    public static string TestImpactFileName;
    public static string CoverageBinaryFileNameOnly;
    public static string CoverageFilesFilter;
    public static string CoverageBinaryFilesFilter;
    public static string CoverageXmlFilesFilter;
    public static string ResultFileExtension;
    public static string ExeFileExtension;
    public static string DllFileExtension;
    public static string OcxFileExtension;
    public static string PfxFileExtension;
    public static string XmlFileExtension;
    public static string SnkFileExtension;
    public static string PdbFileExtension;
    public static string StarFileExtension;
    public static string VSUserContextHelpKeywordName;
    public static string VsInstrExeDefaultName;
    public static string TeamBuildRegistrationKey;
    public static string TeamBuildDataBase;
    public static string AspNetBinariesDirectory;
    public static string AgentCanExecuteUiIndicator;
    public static string PathToWebRoot;
    public static string CommandLineUI_Automation;
    public static string TestToolsArtifactToolIdentifier;
    public static string TestResultRegisteredLinkType;
    public static string TestResultArtifactTestOutcomeProperty;
    public static string TestResultArtifactTestNameProperty;
    public static string TestResultArtifactTestTypeProperty;
    public static string PrivateBinPath;
    public static string PerformanceToolsRelativePath;
    private static StringConstants();
}
internal class Microsoft.VisualStudio.TestTools.Common.StringHelper : object {
    private static Regex Regex_Whitespace;
    private static StringHelper();
    public static string Substring(string origin, char delimiter);
    private static string RemoveEscaping(string raw, char escaper);
    public static string ReplaceNullChars(string input);
    public static string RemoveAllWhitespace(string s);
    public static string Merge(String[] items, char escaper, char separator);
    public static string Merge(String[] items, char escaper, char separator, bool alreadyEscaped);
    public static String[] Split(string raw, char escaper, char separator);
    public static String[] Split(string raw, char escaper, char separator, bool removesEscape);
}
internal class Microsoft.VisualStudio.TestTools.Common.StringProvider`1 : MulticastDelegate {
    public StringProvider`1(object object, IntPtr method);
    public virtual string Invoke(T t);
    public virtual IAsyncResult BeginInvoke(T t, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.Common.SupportedHostAdapter : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostAdapter>k__BackingField;
    [XmlAttributeAttribute("Type")]
public string Type { get; public set; }
    [XmlAttributeAttribute("HostAdapter")]
public string HostAdapter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_HostAdapter();
    [CompilerGeneratedAttribute]
public void set_HostAdapter(string value);
}
internal class Microsoft.VisualStudio.TestTools.Common.SupportedHostTypesData : object {
    internal static string AllHostTypes;
    internal static string DelegateToHostType;
    private bool m_supportsAll;
    private bool m_isDelegate;
    private Dictionary`2<string, object> m_supportedVerified;
    private Dictionary`2<string, object> m_supportedRaw;
    private string m_hostTypesKeyName;
    internal bool All { get; }
    internal bool Delegate { get; }
    internal SupportedHostTypesData(TestConfigKey supportedHostTypesKey);
    internal SupportedHostTypesData(SupportedHostAdapter[] supportedHostAdapters);
    private static SupportedHostTypesData();
    private void PopulateSupportedTypes(String[] hostTypes);
    internal bool get_All();
    internal bool get_Delegate();
    internal bool Contains(string hostType);
    private void FillCache();
}
internal class Microsoft.VisualStudio.TestTools.Common.SupportedTestTypesData : object {
    internal static string AllTestTypes;
    private bool m_supportsAll;
    private Dictionary`2<Guid, object> m_supportedGuids;
    private Dictionary`2<TestType, object> m_supportedTypes;
    private string m_testTypesKeyName;
    internal bool All { get; }
    internal SupportedTestTypesData(TestConfigKey supportedTestTypesKey);
    private static SupportedTestTypesData();
    internal bool get_All();
    internal bool Contains(TestType testType);
    private void FillCache();
}
public class Microsoft.VisualStudio.TestTools.Common.TcmContext : object {
    private Uri m_teamFoundationServerUri;
    private string m_teamProjectName;
    private int m_testRunId;
    [CompilerGeneratedAttribute]
private string <BuildDirectory>k__BackingField;
    public Uri TeamFoundationServerUri { get; }
    public string TeamProjectName { get; }
    public int TestRunId { get; }
    public string BuildDirectory { get; private set; }
    public TcmContext(Uri teamFoundationServerUri, string teamProjectName, int testRunId);
    public TcmContext(Uri teamFoundationServerUri, string teamProjectName, int testRunId, string buildDirectory);
    public Uri get_TeamFoundationServerUri();
    public string get_TeamProjectName();
    public int get_TestRunId();
    [CompilerGeneratedAttribute]
public string get_BuildDirectory();
    [CompilerGeneratedAttribute]
private void set_BuildDirectory(string value);
    public void Internal_SetTestRunId(int runId);
}
public class Microsoft.VisualStudio.TestTools.Common.TcmInformation : object {
    internal static string XmlNamespaceUriParameter;
    [StoreXmlSimpleFieldAttribute("@testCaseId", "Mono.Cecil.CustomAttributeArgument")]
private int m_testCaseId;
    [StoreXmlSimpleFieldAttribute("@testRunId", "Mono.Cecil.CustomAttributeArgument")]
private int m_testRunId;
    [StoreXmlSimpleFieldAttribute("@testResultId", "Mono.Cecil.CustomAttributeArgument")]
private int m_testResultId;
    [StoreXmlSimpleFieldAttribute("@testIterationId", "Mono.Cecil.CustomAttributeArgument")]
private int m_testIterationId;
    public int TestCaseId { get; }
    public int TestRunId { get; }
    public int TestResultId { get; }
    public int TestIterationId { get; }
    public TcmInformation(int testCaseId, int testRunId, int testResultId);
    public TcmInformation(int testCaseId, int testRunId, int testResultId, int testIterationId);
    private static TcmInformation();
    public int get_TestCaseId();
    public int get_TestRunId();
    public int get_TestResultId();
    public int get_TestIterationId();
    public sealed virtual bool Equals(TcmInformation other);
    private bool ValueEquals(TcmInformation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(TcmInformation left, TcmInformation right);
    public static bool op_Inequality(TcmInformation left, TcmInformation right);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Save(XmlElement element, XmlTestStoreParameters parameters);
    private static XmlPersistence CreateXmlPersistenceHelper(XmlTestStoreParameters parameters);
}
public abstract class Microsoft.VisualStudio.TestTools.Common.TestAggregation : TestElement {
    [PersistenceElementNameAttribute("links")]
protected ArrayList m_links;
    public TestId[] Elements { get; }
    public Link[] Links { get; }
    public Link[] VisibleLinks { get; }
    [ObsoleteAttribute]
public bool SynchronizedStart { get; }
    protected TestAggregation(string name, string description);
    protected TestAggregation(TestAggregation copy);
    protected TestAggregation(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual TestId[] get_Elements();
    public sealed virtual Link[] get_Links();
    public virtual Link[] get_VisibleLinks();
    public virtual void Add(Link link);
    public virtual void Remove(Link link);
    public virtual void Clear();
    public void MakeLinksRelative(string rootPath);
    public virtual bool get_SynchronizedStart();
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestAndCategoryPair : object {
    [PersistenceElementNameAttribute("testId")]
private TestId m_testId;
    [PersistenceElementNameAttribute("categoryId")]
private TestListCategoryId m_categoryId;
    [PersistenceElementNameAttribute("isBrokenLink")]
private bool m_isBrokenLink;
    [PersistenceElementNameAttribute("enabled")]
private bool m_enabled;
    public TestId TestId { get; }
    public TestListCategoryId CategoryId { get; }
    public bool IsBrokenLink { get; }
    public bool Enabled { get; }
    public TestAndCategoryPair(TestId testId, TestListCategoryId categoryId);
    public TestAndCategoryPair(TestId testId, TestListCategoryId categoryId, bool isBrokenLink, bool isEnabled);
    public TestId get_TestId();
    public TestListCategoryId get_CategoryId();
    public bool get_IsBrokenLink();
    public bool get_Enabled();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static TestId ToTestId(TestAndCategoryPair pair);
    public static TestId op_Implicit(TestAndCategoryPair pair);
    public static TestListCategoryId ToTestListCategoryId(TestAndCategoryPair pair);
    public static TestListCategoryId op_Implicit(TestAndCategoryPair pair);
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.TestTools.Common.TestCaseManagementDisplayNameAttribute : DisplayNameAttribute {
    private Type m_resourceType;
    private string m_resourceId;
    private string m_displayName;
    public string DisplayName { get; }
    public Type ResourceType { get; }
    public string ResourceId { get; }
    public TestCaseManagementDisplayNameAttribute(Type resourceType, string resourceId);
    public virtual string get_DisplayName();
    public Type get_ResourceType();
    public string get_ResourceId();
}
public class Microsoft.VisualStudio.TestTools.Common.TestCategoryItem : object {
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("category")]
private string m_category;
    public string TestCategory { get; }
    public TestCategoryItem(string category);
    public sealed virtual void PrepareToPersist();
    public sealed virtual void RecoverFromPersistence();
    public string get_TestCategory();
    private string StripIllegalChars(string category);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestCategoryItemCollection : EqtBaseCollection`1<TestCategoryItem> {
    public TestCategoryItemCollection(String[] items);
    public TestCategoryItemCollection(TestCategoryItemCollection other);
    public void Add(string item);
    public virtual void Add(TestCategoryItem item);
    public virtual string ToString();
    public String[] ToArray();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualStudio.TestTools.Common.TestCategoryItemCollectionConverter : ArrayConverter {
    private static char m_separator;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal class Microsoft.VisualStudio.TestTools.Common.TestConditionFunction : MulticastDelegate {
    public TestConditionFunction(object object, IntPtr method);
    public virtual bool Invoke(ITestElement test);
    public virtual IAsyncResult BeginInvoke(ITestElement test, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.Common.TestConfigHelper : object {
    private static Dictionary`2<string, TestConfigKey> s_rootToConfig;
    private static string s_defaultRelativeRootString;
    private static RegistryKey s_defaultHive;
    private static RegistryKey s_defaultRelativeRoot;
    private TestConfigKey m_rootKey;
    private bool m_enableDetouring;
    internal TestConfigKey LocalMachineConfig { get; }
    unknown static RegistryKey DefaultRegistryRoot {internal set; }
    internal TestConfigHelper(string relativeRegMachineRoot, bool enableDetouring);
    internal TestConfigHelper(bool enableDetouring);
    private static TestConfigHelper();
    public sealed virtual void Dispose();
    private void Init(string relativeRegRoot, string name);
    internal TestConfigKey get_LocalMachineConfig();
    internal static void set_DefaultRegistryRoot(RegistryKey value);
    internal static string CanonicalizeValueName(string valueName);
}
internal class Microsoft.VisualStudio.TestTools.Common.TestConfigKey : object {
    private string m_configRoot;
    private string m_myRegKey;
    private bool m_myRegKeyComputed;
    private ConfigNode m_node;
    internal string Name { get; }
    private string MyRegKey { get; }
    private TestConfigKey(ConfigNode node, string relativeRoot);
    internal static TestConfigKey FactoryLoad(string relativeRoot, string nodeName);
    internal string get_Name();
    internal string GetStringValue(string valPath);
    internal string TryGetStringValue(string path, string defValue);
    internal string GetStringValue(string valPath, string defValue);
    internal int TryGetIntValue(string path, int defValue);
    internal int GetIntValue(string valPath);
    internal int GetIntValue(string valPath, int defValue);
    internal double TryGetDoubleValue(string path, double defValue);
    internal double GetDoubleValue(string valPath);
    internal double GetDoubleValue(string valPath, double defValue);
    internal bool KeyExists(string localSubKey);
    internal String[] GetValueNames();
    internal String[] GetValueNames(string subpath);
    internal String[] GetSubKeyNames();
    internal String[] GetSubKeyNames(string pathname);
    private static String[] Merge(String[] array1, String[] array2);
    internal TestConfigKey OpenSubKey(string subKey);
    private string LoadValueFromRegistry(string name, string defValue);
    private string get_MyRegKey();
}
public abstract class Microsoft.VisualStudio.TestTools.Common.TestElement : object {
    public static char DeploymentItemSeparator;
    private static char WorkItemSeparator;
    public static string EnabledPropName;
    public static string CanBeAggregatedPropertyName;
    public static string CreatedByUIPropertyName;
    public static string CssIterationPropertyName;
    public static string CssProjectStructurePropertyName;
    public static string DescriptionPropertyName;
    public static string EnabledPropertyName;
    public static string ErrorMessageForNonRunnablePropertyName;
    public static string HumanReadableIdPropertyName;
    public static string IsAutomatedPropertyName;
    public static string IsRunnablePropertyName;
    public static string NamePropertyName;
    public static string OwnerPropertyName;
    public static string PriorityPropertyName;
    public static string TestCategoryPropertyName;
    public static string ProjectDataPropertyName;
    public static string ProjectNamePropertyName;
    public static string ProjectRelativePathPropertyName;
    public static string SolutionNamePropertyName;
    public static string SourceFileNamePropertyName;
    public static string StoragePropertyName;
    public static string TestTypePropertyName;
    public static string TimeoutVisiblePropertyName;
    public static string WorkItemIdsViewablePropertyName;
    public static string HostTypePropertyName;
    public static string ObjectColumnName;
    internal static int DefaultPriority;
    public static int InfiniteTimeout;
    internal static int NotSetTimeout;
    [PersistenceElementNameAttribute("cssProjectStructure")]
protected string m_cssProjectStructure;
    [PersistenceElementNameAttribute("isRunOnRestart")]
protected bool m_isRunOnRestart;
    [PersistenceElementNameAttribute("timeOut")]
protected int m_timeout;
    [PersistenceElementNameAttribute("isGroupable")]
protected bool m_isGroupable;
    [PersistenceElementNameAttribute("abortRunOnAgentFailure")]
protected bool m_abortRunOnAgentFailure;
    [PersistenceElementNameAttribute("cssIteration")]
protected string m_cssIteration;
    [PersistenceElementNameAttribute("workItemIds")]
protected List`1<int> m_workItemIds;
    [PersistenceElementNameAttribute("id")]
protected TestId m_id;
    [PersistenceElementNameAttribute("name")]
protected string m_name;
    [PersistenceElementNameAttribute("description")]
protected string m_description;
    [PersistenceElementNameAttribute("enabled")]
protected internal bool m_enabled;
    [PersistenceElementNameAttribute("owner")]
protected string m_owner;
    [PersistenceElementNameAttribute("userData")]
protected object m_userData;
    [NonPersistableAttribute]
private bool m_createdByUI;
    [PersistenceElementNameAttribute("priority")]
protected int m_priority;
    [PersistenceElementNameAttribute("TestCategories")]
protected TestCategoryItemCollection m_testCategories;
    [NonPersistableAttribute]
private string m_sourceFileName;
    [PersistenceElementNameAttribute("executionId")]
protected TestExecId m_executionId;
    [PersistenceElementNameAttribute("parentExecutId")]
protected TestExecId m_parentExecutionId;
    [PersistenceElementNameAttribute("properties")]
protected Hashtable m_properties;
    protected DeploymentItemCollection m_deploymentItems;
    [PersistenceElementNameAttribute("agentAttributes")]
protected StringDictionary m_agentAttributes;
    [PersistenceElementNameAttribute("storage")]
protected string m_storage;
    [PersistenceElementNameAttribute("projectData")]
protected ProjectData m_projectData;
    [NonPersistableAttribute]
private bool m_isRunnable;
    protected string m_nonRunnableReason;
    [NonPersistableAttribute]
private bool m_modified;
    [NonPersistableAttribute]
private TestListCategoryId m_catId;
    [PersistenceElementNameAttribute("hostType")]
protected string m_hostType;
    [PersistenceElementNameAttribute("hostData")]
protected string m_hostData;
    [DefaultValueAttribute("")]
[ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{A9405AE6-9AC6-4f0e-A03F-7AFE45F6FCB7}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Name")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Name_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.testname")]
public string Name { get; public set; }
    internal string FullName { get; }
    [DefaultValueAttribute("")]
[UserVisiblePropertyAttribute("{A9405AE6-9AC6-4f0e-A03F-7AFE45F6FDB7}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_HumanReadableId")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_HumanReadableId_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.id")]
public string HumanReadableId { get; }
    [DefaultValueAttribute("")]
[GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{B65344DF-319D-4a50-B8FB-0292317C6E8A}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Description")]
[PropertyWindowAttribute]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Description_PropertyDescription")]
[HelpKeywordAttribute("vs.test.properties.description")]
public string Description { get; public set; }
    [GroupingPropertyAttribute]
[DefaultValueAttribute("")]
[UserVisiblePropertyAttribute("{5220C4AB-D3A7-48f1-8467-062E55CB4917}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Owner")]
[PropertyWindowAttribute]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Owner_PropertyDescription")]
[WarehouseFactFieldAttribute("Owner", "4")]
[HelpKeywordAttribute("vs.test.properties.owner")]
public string Owner { get; public set; }
    [GroupingPropertyAttribute]
[ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{FCCF87D7-C683-47d8-8DCB-81C4472F32F3}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Storage")]
[PropertyWindowAttribute]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Storage_PropertyDescription")]
[HelpKeywordAttribute("vs.test.properties.teststorage")]
public string Storage { get; public set; }
    [VisiblePropertyAttribute]
public ProjectData ProjectData { get; public set; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{17471FB1-6BE0-4582-87AE-0154BF98656C}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_SolutionName")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_SolutionName_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.solution")]
public string SolutionName { get; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{E2EF333A-8029-4dbe-9BDE-434B1CF17A01}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_ProjectName")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_ProjectName_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.project")]
public string ProjectName { get; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_ProjectRelativePath")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_ProjectRelativePath_PropertyDescription")]
[UserVisiblePropertyAttribute("{E0D317A6-6F41-455d-BD72-B4344CC5EC0B}")]
[DefaultValueAttribute("")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.projectrelativepath")]
public string ProjectRelativePath { get; }
    [DefaultValueAttribute("True")]
[GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{376F2C59-87E5-416d-8109-7B40DEAA2EF5}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Enabled")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Enabled_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.testenabled")]
public bool Enabled { get; public set; }
    internal bool IsExplicitlyDisabled { get; }
    [PropertyWindowAttribute]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_DeploymentItems")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_DeploymentItems_PropertyDescription")]
[TestPropertyConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[HelpKeywordAttribute("vs.test.properties.deploymentitems")]
public String[] DeploymentItemsEditable { get; public set; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{946480CE-4C06-44e8-9F94-AA70C4938BB4}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_IsRunnable")]
public bool IsRunnable { get; }
    [GroupingPropertyAttribute]
[VisiblePropertyAttribute]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_ErrorMessageForNonRunnable")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_ErrorMessageForNonRunnable_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.nonrunnableerror")]
public string ErrorMessageForNonRunnable { get; }
    [VisiblePropertyAttribute]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_CssProjectStructure")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_CssProjectStructure_PropertyDescription")]
[PropertyWindowAttribute("1", "2")]
[HelpKeywordAttribute("vs.test.properties.projectarea")]
[WarehouseFactFieldAttribute("Area", "4")]
[RequiredProductFeaturesAttribute("4")]
public string CssProjectStructure { get; public set; }
    [VisiblePropertyAttribute]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_CssIteration")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_CssIteration_PropertyDescription")]
[PropertyWindowAttribute("2", "3")]
[WarehouseFactFieldAttribute("Iteration", "4")]
[HelpKeywordAttribute("vs.test.properties.iteration")]
[RequiredProductFeaturesAttribute("4")]
public string CssIteration { get; public set; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_WorkitemAssociations")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_WorkitemAssociations_PropertyDescription")]
[PropertyWindowAttribute("3", "4")]
[TestPropertyConverterAttribute("Microsoft.VisualStudio.TestTools.Common.Int32ListConverter")]
[HelpKeywordAttribute("vs.test.properties.associatedworkitems")]
[RequiredProductFeaturesAttribute("4")]
public IList WorkItemIds { get; public set; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_WorkitemAssociations")]
[UserVisiblePropertyAttribute("{D78B2C92-7024-43bd-B6DB-B3E90F1FD309}")]
[GroupingPropertyAttribute]
[DefaultValueAttribute("")]
[RequiredProductFeaturesAttribute("4")]
public string WorkItemIdsViewable { get; }
    public bool AbortRunOnAgentFailure { get; public set; }
    public bool IsGroupable { get; public set; }
    public bool IsRunOnRestart { get; public set; }
    public TestExecId ExecutionId { get; public set; }
    public TestExecId ParentExecId { get; public set; }
    public Hashtable Properties { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseFactFieldAttribute("Test", "4", "6", "7", "0", "3")]
public string TestIdString { get; }
    public TestId Id { get; }
    public object UserData { get; public set; }
    public bool IsModified { get; public set; }
    [DefaultValueAttribute("2147483647")]
[GroupingPropertyAttribute]
[HelpKeywordAttribute("vs.test.properties.priority")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Priority_PropertyDescription")]
[PropertyWindowAttribute("9")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Priority")]
[UserVisiblePropertyAttribute("{8E14F374-EA8C-4c77-843B-B4075899F238}")]
public int Priority { get; public set; }
    [DefaultValueAttribute("")]
[UserVisiblePropertyAttribute("{2C4323CE-250D-448b-844A-FB570477F324}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_TestCategory")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_TestCategory_PropertyDescription")]
[TestPropertyConverterAttribute("Microsoft.VisualStudio.TestTools.Common.TestCategoryItemCollectionConverter")]
[PropertyWindowAttribute("5", "8")]
[HelpKeywordAttribute("vs.test.properties.testcategory")]
public TestCategoryItemCollection TestCategories { get; public set; }
    [DefaultValueAttribute("0")]
[HelpKeywordAttribute("vs.test.properties.timeout")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Timeout_PropertyDescription")]
[PropertyWindowAttribute("0", "5")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Timeout")]
[UserVisiblePropertyAttribute("{8E14F374-EA8C-4c77-843B-B4075899F239}")]
public int Timeout { get; public set; }
    public DeploymentItemCollection DeploymentItems { get; }
    public StringDictionary AgentAttributes { get; }
    public Link Link { get; }
    public TestListCategoryId CategoryId { get; public set; }
    [VisiblePropertyAttribute]
public bool IsAutomated { get; }
    public bool IsLoadTestCandidate { get; }
    [VisiblePropertyAttribute]
public bool CreatedByUI { get; public set; }
    [VisiblePropertyAttribute]
public string SourceFileName { get; public set; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{748C7CC5-7A39-42e6-A74A-D010BD143D01}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_TestType")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_TestType_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.properties.testtype")]
public TestType TestType { get; }
    public string TestTypeName { get; }
    public bool ReadOnly { get; public set; }
    [VisiblePropertyAttribute]
public bool CanBeAggregated { get; }
    public string Adapter { get; }
    public string ControllerPlugin { get; }
    public PropertyDescriptorCollection Groups { get; }
    public PropertyDescriptorCollection VisibleProperties { get; }
    public ITestElement Copy { get; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "Common_HostType")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "Common_HostType_PropertyDescription")]
[PropertyWindowAttribute("6")]
[UserVisiblePropertyAttribute("{A898971C-FFC5-491b-A5C3-346A62BA6136}")]
[GroupingPropertyAttribute]
[DefaultValueAttribute("")]
[HelpKeywordAttribute("vs.test.properties.hosttype")]
public string HostType { get; public set; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "Common_HostData")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "Common_HostData_PropertyDescription")]
[PropertyWindowAttribute]
[DefaultValueAttribute("")]
[HelpKeywordAttribute("vs.test.properties.hostdata")]
public string HostData { get; public set; }
    protected TestElement(TestId id, string name, string description);
    protected TestElement(string name, string description);
    protected TestElement(string name, string description, string storage);
    protected TestElement(TestId id, string name, string description, string storage);
    protected TestElement(TestElement copy);
    protected TestElement(SerializationInfo info, StreamingContext context);
    private static TestElement();
    private void Initialize();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal virtual string get_FullName();
    public virtual string get_HumanReadableId();
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Owner();
    public virtual void set_Owner(string value);
    public virtual string get_Storage();
    public virtual void set_Storage(string value);
    public virtual ProjectData get_ProjectData();
    public virtual void set_ProjectData(ProjectData value);
    public virtual string get_SolutionName();
    public virtual string get_ProjectName();
    public virtual string get_ProjectRelativePath();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    internal bool get_IsExplicitlyDisabled();
    public virtual String[] get_DeploymentItemsEditable();
    public virtual void set_DeploymentItemsEditable(String[] value);
    public sealed virtual bool get_IsRunnable();
    public sealed virtual string get_ErrorMessageForNonRunnable();
    public virtual string get_CssProjectStructure();
    public virtual void set_CssProjectStructure(string value);
    public virtual string get_CssIteration();
    public virtual void set_CssIteration(string value);
    public sealed virtual IList get_WorkItemIds();
    public void set_WorkItemIds(IList value);
    public virtual string get_WorkItemIdsViewable();
    public sealed virtual bool get_AbortRunOnAgentFailure();
    public sealed virtual void set_AbortRunOnAgentFailure(bool value);
    public sealed virtual bool get_IsGroupable();
    public sealed virtual void set_IsGroupable(bool value);
    public sealed virtual bool get_IsRunOnRestart();
    public sealed virtual void set_IsRunOnRestart(bool value);
    public sealed virtual TestExecId get_ExecutionId();
    public sealed virtual void set_ExecutionId(TestExecId value);
    public sealed virtual TestExecId get_ParentExecId();
    public sealed virtual void set_ParentExecId(TestExecId value);
    public virtual Hashtable get_Properties();
    public string get_TestIdString();
    public sealed virtual TestId get_Id();
    public sealed virtual object get_UserData();
    public sealed virtual void set_UserData(object value);
    public virtual bool get_IsModified();
    public virtual void set_IsModified(bool value);
    public sealed virtual int get_Priority();
    public sealed virtual void set_Priority(int value);
    public sealed virtual TestCategoryItemCollection get_TestCategories();
    public void set_TestCategories(TestCategoryItemCollection value);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual DeploymentItemCollection get_DeploymentItems();
    public virtual StringDictionary get_AgentAttributes();
    public sealed virtual Link get_Link();
    public sealed virtual TestListCategoryId get_CategoryId();
    public sealed virtual void set_CategoryId(TestListCategoryId value);
    public virtual bool get_IsAutomated();
    public virtual bool get_IsLoadTestCandidate();
    public sealed virtual bool get_CreatedByUI();
    public sealed virtual void set_CreatedByUI(bool value);
    public sealed virtual string get_SourceFileName();
    public sealed virtual void set_SourceFileName(string value);
    public abstract virtual TestType get_TestType();
    public string get_TestTypeName();
    public abstract virtual bool get_ReadOnly();
    public abstract virtual void set_ReadOnly(bool value);
    public abstract virtual bool get_CanBeAggregated();
    public abstract virtual string get_Adapter();
    public abstract virtual string get_ControllerPlugin();
    public abstract virtual object Clone();
    public sealed virtual void AssignIsRunnable(bool runnable, string errorMessage);
    public sealed virtual PropertyDescriptorCollection get_Groups();
    public sealed virtual PropertyDescriptorCollection get_VisibleProperties();
    public sealed virtual bool IsValid();
    public virtual ITestElement get_Copy();
    public virtual string get_HostType();
    public virtual void set_HostType(string value);
    public virtual string get_HostData();
    public virtual void set_HostData(string value);
    public virtual string ToString();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    protected static String[] GetEditableItemsFromDeploymentItems(DeploymentItemCollection deploymentItems);
    protected static DeploymentItemCollection GetDeploymentItemsFromEditableItems(String[] editableItems);
    public virtual void FillDataRow(DataRow row, string columnPrefix);
    internal virtual bool DeepEquals(TestElement otherTest);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    internal void Internal_SetId(TestId id);
}
public class Microsoft.VisualStudio.TestTools.Common.TestEntry : object {
    private TestId m_testId;
    private TestExecId m_execId;
    private TestExecId m_parentExecId;
    private TestListCategoryId m_categoryId;
    private Hashtable m_properties;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_isTransparent;
    private List`1<TestEntry> m_nestedEntries;
    public TestId TestId { get; public set; }
    public TestExecId ExecId { get; public set; }
    public TestExecId ParentExecId { get; public set; }
    public TestListCategoryId CategoryId { get; public set; }
    public List`1<TestEntry> NestedEntries { get; public set; }
    public Hashtable Properties { get; }
    public bool IsTransparent { get; public set; }
    private TestEntry(SerializationInfo info, StreamingContext context);
    public TestEntry(TestId testId, TestListCategoryId catId);
    private TestEntry(TestEntry copy);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public TestId get_TestId();
    public void set_TestId(TestId value);
    public TestExecId get_ExecId();
    public void set_ExecId(TestExecId value);
    public TestExecId get_ParentExecId();
    public void set_ParentExecId(TestExecId value);
    public TestListCategoryId get_CategoryId();
    public void set_CategoryId(TestListCategoryId value);
    public List`1<TestEntry> get_NestedEntries();
    public void set_NestedEntries(List`1<TestEntry> value);
    public Hashtable get_Properties();
    public bool get_IsTransparent();
    public void set_IsTransparent(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestExecId : object {
    [PersistenceElementNameAttribute("id")]
private Guid m_execId;
    private static TestExecId m_empty;
    public static TestExecId Empty { get; }
    public Guid Id { get; }
    public TestExecId(Guid id);
    private static TestExecId();
    public static TestExecId get_Empty();
    public Guid get_Id();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.Common.TestExecutionTraceInformation : object {
    [PersistenceElementNameAttribute("trace")]
private StringBuilder m_trace;
    public string Message { get; }
    public TestExecutionTraceInformation(string trace);
    public void AppendTrace(string trace);
    public string get_Message();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestId : object {
    private static TestId m_empty;
    internal static string IdLocationKey;
    private static string DefaultIdLocation;
    internal static string TcmInformationLocationKey;
    private static string TcmInformationLocation;
    private Guid m_id;
    private TcmInformation m_tcmInformation;
    public static TestId Empty { get; }
    public Guid Id { get; }
    internal TcmInformation TcmInformation { get; }
    public TestId(Guid id);
    internal TestId(TcmInformation tcmInformation);
    internal TestId(Guid id, TcmInformation tcmInformation);
    internal TestId(XmlElement element, XmlTestStoreParameters parameters);
    private static TestId();
    private static Guid CreateIdFromTcmInformation(TcmInformation tcmInformation);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Save(XmlElement element, XmlTestStoreParameters parameters);
    private void GetIdLocation(XmlTestStoreParameters parameters, String& idLocation);
    public static TestId get_Empty();
    public Guid get_Id();
    internal TcmInformation get_TcmInformation();
    public sealed virtual bool Equals(TestId other);
    private bool ValueEquals(TestId other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(TestId left, TestId right);
    public static bool op_Inequality(TestId left, TestId right);
    public sealed virtual int CompareTo(TestId other);
    public sealed virtual int CompareTo(object other);
    public static bool op_GreaterThan(TestId left, TestId right);
    public static bool op_LessThan(TestId left, TestId right);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Common.TestIdExecId : object {
    internal TestId m_testId;
    internal TestExecId m_parentExecId;
    internal TestIdExecId(TestId tid, TestExecId eid);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Microsoft.VisualStudio.TestTools.Common.TestListCategory : object {
    public static char NameSeparator;
    [PersistenceElementNameAttribute("id")]
private TestListCategoryId m_id;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("name")]
private string m_name;
    [NonPersistableAttribute]
private string m_fullName;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("description")]
private string m_description;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("enabled")]
private bool m_enabled;
    [PersistenceElementNameAttribute("parentCategoryId")]
private TestListCategoryId m_parentCategoryId;
    [StoreXmlFieldAttribute]
[PersistenceElementNameAttribute("runConfiguration")]
private Link m_runConfiguration;
    [PersistenceElementNameAttribute("testLinks")]
private Hashtable m_testLinks;
    private static TestListCategory m_uncategorizedTests;
    private static TestListCategory m_uncategorizedResults;
    private static TestListCategory m_categories;
    private static TestListCategory m_resultCategories;
    private static TestListCategory m_allTests;
    private static TestListCategory m_allResults;
    private static object m_reservedCategoryLock;
    private static Type TestRunConfigurationType;
    public TestListCategoryId Id { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseDimensionFieldAttribute("Category ID", "2")]
public string IdString { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseDimensionFieldAttribute("Parent Category", "2")]
public string ParentIdString { get; }
    [GroupingPropertyAttribute]
[DefaultValueAttribute("")]
[UserVisiblePropertyAttribute("{B56CDA1A-41CA-4f2a-AFDD-02A707CC46CC}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestList_Name")]
[WarehouseDimensionFieldAttribute("Test Category", "2")]
public string Name { get; public set; }
    [GroupingPropertyAttribute]
[ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{C50BDB28-DC23-43bc-9CD7-AAF3F79A961A}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestList_FullName")]
[WarehouseDimensionFieldAttribute("Category Full Name", "2")]
public string FullName { get; public set; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    public Link RunConfiguration { get; public set; }
    public TestListCategoryId ParentCategoryId { get; public set; }
    public static TestListCategory Uncategorized { get; }
    public static TestListCategory UncategorizedResults { get; }
    public static TestListCategory Categories { get; }
    public static TestListCategory ResultCategories { get; }
    public static TestListCategory AllTests { get; }
    public static TestListCategory AllResults { get; }
    public Link[] TestLinks { get; }
    public PropertyDescriptorCollection VisibleProperties { get; }
    public TestListCategory(string name, TestListCategoryId parentCategoryId);
    private TestListCategory(TestListCategory copy);
    private TestListCategory(string name, TestListCategoryId id, TestListCategoryId parentId);
    private static TestListCategory();
    public TestListCategoryId get_Id();
    public string get_IdString();
    public string get_ParentIdString();
    public string get_Name();
    public void set_Name(string value);
    public string get_FullName();
    public void set_FullName(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public Link get_RunConfiguration();
    public void set_RunConfiguration(Link value);
    public TestListCategoryId get_ParentCategoryId();
    public void set_ParentCategoryId(TestListCategoryId value);
    public static TestListCategory get_Uncategorized();
    public static TestListCategory get_UncategorizedResults();
    public static TestListCategory get_Categories();
    public static TestListCategory get_ResultCategories();
    public static TestListCategory get_AllTests();
    public static TestListCategory get_AllResults();
    public Link[] get_TestLinks();
    public sealed virtual PropertyDescriptorCollection get_VisibleProperties();
    public void AddTestLink(Link testLink);
    public void RemoveTestLink(Link link);
    public void RemoveTestLink(TestId id);
    public void RemoveAllTestLinks();
    public bool HasTestLink(TestId id);
    public Link GetTestLink(Guid linkId);
    public bool IsSameTestLink(Link link);
    public void UpdateTestLink(Link link);
    public sealed virtual bool IsValid();
    public sealed virtual object Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestListCategoryId : object {
    [PersistenceElementNameAttribute("id")]
private Guid m_id;
    private static TestListCategoryId m_empty;
    private static TestListCategoryId m_uncategorized;
    private static TestListCategoryId m_categories;
    private static TestListCategoryId m_all;
    public static TestListCategoryId Empty { get; }
    public static TestListCategoryId Root { get; }
    public static TestListCategoryId Uncategorized { get; }
    public static TestListCategoryId Categories { get; }
    public static TestListCategoryId AllItems { get; }
    public Guid Id { get; }
    public TestListCategoryId(Guid id);
    private static TestListCategoryId();
    public static TestListCategoryId get_Empty();
    public static TestListCategoryId get_Root();
    public static TestListCategoryId get_Uncategorized();
    public static TestListCategoryId get_Categories();
    public static TestListCategoryId get_AllItems();
    public Guid get_Id();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.Common.TestMessage : object {
    protected TestMessage(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsValid();
}
internal class Microsoft.VisualStudio.TestTools.Common.TestMessageBulk : TestMessage {
    private static int FullSizeThreshold;
    private static int AssumedTestMessageSize;
    private List`1<TestMessage> m_testMessages;
    private int m_approximateSize;
    private int Microsoft.VisualStudio.TestTools.Common.IPotentiallyLarge.ApproximateSize { get; }
    public bool IsFull { get; }
    public int Count { get; }
    private sealed virtual override int Microsoft.VisualStudio.TestTools.Common.IPotentiallyLarge.get_ApproximateSize();
    public bool get_IsFull();
    public int get_Count();
    public sealed virtual IEnumerator`1<TestMessage> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(TestMessage testMessage);
    public Stack`1<T> GetAndRemoveMessagesOfType();
    public bool FindAndReplace(Predicate`1<TestMessage> isMatch, Func`2<TestMessage, TestMessage> replaceAction);
    public static void UnwrapAndHandle(TestMessage testMessage, Action`1<TestMessage> handleIndividualTestMessage);
}
public enum Microsoft.VisualStudio.TestTools.Common.TestMessageKind : Enum {
    public int value__;
    [ObsoleteAttribute("TestMessageKind.Panic is obsolete. Use RunState.Aborting instead.", "True")]
public static TestMessageKind Panic;
    public static TestMessageKind Result;
    public static TestMessageKind FileCopy;
    public static TestMessageKind RunInfo;
    [ObsoleteAttribute("TestMessageKind.RunStateChanged is obsolete. Use RunStateEvent messages instead.", "True")]
public static TestMessageKind RunStateChanged;
    public static TestMessageKind RunOutput;
    public static TestMessageKind Debug;
    [ObsoleteAttribute("TestMessageKind.Heartbeat is obsolete. Use HeartbeatMessage instead.", "True")]
public static TestMessageKind Heartbeat;
    public static TestMessageKind TextMessage;
    [ObsoleteAttribute("TestMessageKind.TestStart is obsolete. Use TestState.Started instead.", "True")]
public static TestMessageKind TestStart;
    [ObsoleteAttribute("TestMessageKind.TestEnd is obsolete. Use TestState.Completed instead.", "True")]
public static TestMessageKind TestEnd;
    [ObsoleteAttribute("TestMessageKind.RunAbort is obsolete. Use RunState.Aborting instead.", "True")]
public static TestMessageKind RunAbort;
    [ObsoleteAttribute("TestMessageKind.RunStart is obsolete. Use RunState.Started instead.", "True")]
public static TestMessageKind RunStart;
    [ObsoleteAttribute("TestMessageKind.RunEnd is obsolete. Use RunState.Completed instead.", "True")]
public static TestMessageKind RunEnd;
}
public enum Microsoft.VisualStudio.TestTools.Common.TestOutcome : Enum {
    public int value__;
    public static TestOutcome Error;
    public static TestOutcome Failed;
    public static TestOutcome Timeout;
    public static TestOutcome Aborted;
    public static TestOutcome Inconclusive;
    public static TestOutcome PassedButRunAborted;
    public static TestOutcome NotRunnable;
    public static TestOutcome NotExecuted;
    public static TestOutcome Disconnected;
    public static TestOutcome Warning;
    public static TestOutcome Passed;
    public static TestOutcome Completed;
    public static TestOutcome InProgress;
    public static TestOutcome Pending;
    public static TestOutcome Min;
    public static TestOutcome Max;
}
public static class Microsoft.VisualStudio.TestTools.Common.TestOutcomeHelper : object {
    public static string Localize(TestOutcome outcome);
    public static bool IsPass(TestOutcome outcome);
    public static bool IsFail(TestOutcome outcome);
    public static bool IsWarning(TestOutcome outcome);
    public static bool IsAbort(TestOutcome outcome);
    public static bool IsTerminal(TestOutcome outcome);
    internal static bool IsExecuted(TestOutcome outcome);
    public static TestOutcome GetAggregationOutcome(TestResult[] results);
    internal static TestOutcome GetMoreImportantOutcome(TestOutcome outcome1, TestOutcome outcome2);
}
[AttributeUsageAttribute("128")]
internal class Microsoft.VisualStudio.TestTools.Common.TestPropertyConverterAttribute : Attribute {
    private Type m_conveterType;
    public Type ConverterType { get; }
    public TestPropertyConverterAttribute(Type converterType);
    public Type get_ConverterType();
}
public class Microsoft.VisualStudio.TestTools.Common.TestResult : TestResultMessage {
    public static string TestRunParameterName;
    private TestRun m_testRun;
    [NonPersistableAttribute]
private ITestElement m_test;
    [PersistenceElementNameAttribute("categoryId")]
protected TestListCategoryId m_categoryId;
    [PersistenceElementNameAttribute("outcome")]
protected TestOutcome m_outcome;
    [PersistenceElementNameAttribute("stdout")]
protected string m_stdOut;
    [PersistenceElementNameAttribute("stderr")]
protected string m_stdErr;
    [PersistenceElementNameAttribute("debugTrace")]
protected string m_debugTrace;
    [PersistenceElementNameAttribute("traceInfo")]
protected TestExecutionTraceInformation m_traceInfo;
    [PersistenceElementNameAttribute("errorInfo")]
protected TestResultErrorInfo m_errorInfo;
    [PersistenceElementNameAttribute("timerResults")]
protected TimerResult[] m_timerResults;
    [PersistenceElementNameAttribute("workItemIds")]
protected List`1<int> m_workItemIds;
    [PersistenceElementNameAttribute("textMessages")]
protected ArrayList m_textMessages;
    private string m_relativeTestResultsDirectory;
    private SortedList`2<string, object> m_resultFiles;
    private Dictionary`2<string, AttachmentFileInfo> m_fileUris;
    private List`1<CollectorDataEntry> m_collectorDataEntries;
    private List`1<DataCollectorMessageInfo> m_dataCollectorMessages;
    public static string ComputerNamePropertyName;
    public static string DebugTracePropertyName;
    public static string DisplayTextPropertyName;
    public static string DurationPropertyName;
    public static string EndTimePropertyName;
    public static string ErrorMessagePropertyName;
    public static string ErrorStackTracePropertyName;
    public static string HasPassedPropertyName;
    public static string LongTextPropertyName;
    public static string OutcomePropertyName;
    public static string OutcomeTextPropertyName;
    public static string StdOutPropertyName;
    public static string StdErrPropertyName;
    public static string StartTimePropertyName;
    public static string StoragePropertyName;
    public static string TestNamePropertyName;
    public static string TestTypePropertyName;
    public static string TraceInfoPropertyName;
    public static string ObjectColumnName;
    public TestRun TestRun { get; }
    [ReadOnlyAttribute("True")]
[GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{B27F4E1B-4DF4-41bd-8B86-671BAE2D7067}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_Outcome")]
public TestOutcome Outcome { get; public set; }
    [VisiblePropertyAttribute]
[WarehouseFactFieldAttribute("Outcome", "4")]
public string OutcomeText { get; }
    [VisiblePropertyAttribute]
public bool HasPassed { get; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{D0B33661-A037-4002-A312-063A54D8F591}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_StdOut")]
public string StdOut { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{42C44186-0318-41ca-95CA-07D8F4A1C375}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_StdErr")]
public string StdErr { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{88C219EA-7069-49cb-8C41-CBAA4AD797D7}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_DebugTrace")]
public string DebugTrace { get; public set; }
    [WarehouseObjectAttribute]
public ITestElement Test { get; internal set; }
    [WarehouseDimensionFieldAttribute("Test Description", "10")]
public string TestDescription { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseFactFieldAttribute("Category", "4")]
public string TestListCategoryIdString { get; }
    public TestListCategoryId TestListCategoryId { get; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{64600D7C-7361-4048-B6EF-5BF48D60D6F3}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_ErrorMessage")]
[WarehouseDimensionFieldAttribute("Error Message", "10")]
public string ErrorMessage { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{7B515CB2-DAAD-4400-9567-8B7CBC5E9C7B}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_ErrorStackTrace")]
public string ErrorStackTrace { get; public set; }
    public TestResultErrorInfo ErrorInfo { get; public set; }
    public TimerResult[] TimerResults { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{AC5D8201-BA36-410f-A719-485C5B664799}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResult_TraceInfo")]
public TestExecutionTraceInformation TraceInfo { get; }
    public IList WorkItemIds { get; }
    public String[] TextMessages { get; internal set; }
    internal string RelativeTestResultsDirectory { get; }
    public string TestResultsDirectory { get; }
    internal IList`1<string> RelativeResultFiles { get; }
    public IList`1<string> ResultFiles { get; }
    internal IList`1<CollectorDataEntry> RelativeCollectorDataEntries { get; }
    public IList`1<CollectorDataEntry> CollectorDataEntries { get; }
    public IList`1<DataCollectorMessageInfo> DataCollectorMessages { get; internal set; }
    internal IList`1<AttachmentFileInfo> AttachmentFileUris { get; }
    protected TestResult(SerializationInfo info, StreamingContext context);
    public TestResult(string computerName, Guid runId, ITestElement test);
    [ObsoleteAttribute("This constructor is obsolete. Use the constructor that takes string instead.")]
public TestResult(ComputerInfo computerInfo, Guid runId, ITestElement test);
    protected TestResult(TestResult copy);
    private static TestResult();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void Initialize();
    public TestRun get_TestRun();
    public TestOutcome get_Outcome();
    public void set_Outcome(TestOutcome value);
    public string get_OutcomeText();
    public virtual bool get_HasPassed();
    public string get_StdOut();
    public void set_StdOut(string value);
    public string get_StdErr();
    public void set_StdErr(string value);
    public string get_DebugTrace();
    public void set_DebugTrace(string value);
    public ITestElement get_Test();
    internal void set_Test(ITestElement value);
    public string get_TestDescription();
    public string get_TestListCategoryIdString();
    public TestListCategoryId get_TestListCategoryId();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public string get_ErrorStackTrace();
    public void set_ErrorStackTrace(string value);
    public TestResultErrorInfo get_ErrorInfo();
    public void set_ErrorInfo(TestResultErrorInfo value);
    public TimerResult[] get_TimerResults();
    public void set_TimerResults(TimerResult[] value);
    public TestExecutionTraceInformation get_TraceInfo();
    public IList get_WorkItemIds();
    public String[] get_TextMessages();
    internal void set_TextMessages(String[] value);
    internal string get_RelativeTestResultsDirectory();
    public string get_TestResultsDirectory();
    internal IList`1<string> get_RelativeResultFiles();
    public IList`1<string> get_ResultFiles();
    internal IList`1<CollectorDataEntry> get_RelativeCollectorDataEntries();
    public IList`1<CollectorDataEntry> get_CollectorDataEntries();
    public IList`1<DataCollectorMessageInfo> get_DataCollectorMessages();
    internal void set_DataCollectorMessages(IList`1<DataCollectorMessageInfo> value);
    private IList`1<string> GetResultFiles(string testResultsDirectory);
    private IList`1<CollectorDataEntry> GetCollectorDataEntries(string testResultsDirectory);
    internal IList`1<AttachmentFileInfo> get_AttachmentFileUris();
    internal bool AddAttachmentFileInfo(string runResultsDirectory, string fileName, Uri attachmentUri);
    internal virtual void SetTestRun(TestRun testRun);
    public void AddTextMessage(string text);
    internal void AddResultFiles(IEnumerable`1<string> resultFiles);
    internal void AddCollectorDataEntries(IEnumerable`1<CollectorDataEntry> collectorDataEntries, bool clone);
    internal void AddCollectorDataEntries(IEnumerable`1<CollectorDataEntry> collectorDataEntries);
    internal void AddDataCollectorMessage(DataCollectorMessageInfo message);
    private void LoadResultFilesFromDisk();
    public virtual object Clone();
    public virtual string ToString();
    public virtual void FillDataRow(DataRow row);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestResultAggregation : TestResult {
    [PersistenceElementNameAttribute("counters")]
protected TestResultCounter m_counters;
    [PersistenceElementNameAttribute("innerResults")]
protected TestResult[] m_innerResults;
    [NonPersistableAttribute]
private string m_failedCount;
    [NonPersistableAttribute]
private int m_currentTestIndex;
    [NonPersistableAttribute]
private object m_lock;
    public static string FailedCountPropertyName;
    private int m_innerResultsCount;
    public TestResultCounter Counters { get; }
    public TestResult[] InnerResults { get; }
    private int InnerResultsCount { get; }
    public int CurrentTestIndex { get; }
    [UserVisiblePropertyAttribute("{510BFB2D-385B-4b00-8E72-72F88F48AD00}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultAggregation_FailedCount")]
public string FailedCount { get; }
    internal bool IsUpdateTotalTestCountRequired { get; }
    public string DisplayText { get; }
    protected TestResultAggregation(SerializationInfo info, StreamingContext context);
    protected TestResultAggregation(TestResultAggregation other);
    public TestResultAggregation(TestResult result);
    public TestResultAggregation(string computerInfo, Guid runId, ITestElement test, TestOutcome outcome, TestResultCounter counters, TestResult[] innerResults);
    public TestResultAggregation(string computerInfo, Guid runId, ITestElement test, TestOutcome outcome, TestResultCounter counters, TestResult[] innerResults, int currentTestIndex);
    public TestResultAggregation(string computerInfo, Guid runId, ITestElement test);
    [ObsoleteAttribute("This constructor is obsolete. Use the constructor that takes string instead.")]
public TestResultAggregation(ComputerInfo computerInfo, Guid runId, ITestElement test, TestOutcome outcome, TestResultCounter counters, TestResult[] innerResults);
    [ObsoleteAttribute("This constructor is obsolete. Use the constructor that takes string instead.")]
public TestResultAggregation(ComputerInfo computerInfo, Guid runId, ITestElement test, TestOutcome outcome, TestResultCounter counters, TestResult[] innerResults, int currentTestIndex);
    [ObsoleteAttribute("This constructor is obsolete. Use the constructor that takes string instead.")]
public TestResultAggregation(ComputerInfo computerInfo, Guid runId, ITestElement test);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public TestResultCounter get_Counters();
    public TestResult[] get_InnerResults();
    private int get_InnerResultsCount();
    public int get_CurrentTestIndex();
    public virtual string get_FailedCount();
    internal virtual bool get_IsUpdateTotalTestCountRequired();
    internal virtual void SetTestRun(TestRun testRun);
    public virtual object Clone();
    public virtual string get_DisplayText();
    internal virtual void Merge(TestResult mergeFrom);
    internal static IEnumerable`1<TestResult> EnumerateAllTestResults(IEnumerable`1<TestResult> testResults);
    internal static IEnumerable`1<TestResult> EnumerateAllTestResults(TestResult testResult);
    public virtual void FillDataRow(DataRow row);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestResultBase : TestMessage {
    [PersistenceElementNameAttribute("runId")]
private Guid m_runId;
    [PersistenceElementNameAttribute("execId")]
private Guid m_execId;
    public Guid RunId { get; }
    public Guid ExecId { get; }
    public bool IsRunLevel { get; }
    public TestResultBase(Guid runId, Guid execId);
    public TestResultBase(TestResultBase other);
    protected TestResultBase(SerializationInfo info, StreamingContext context);
    public Guid get_RunId();
    public Guid get_ExecId();
    public bool get_IsRunLevel();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsValid();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.Common.TestResultCounter : object {
    [PersistenceElementNameAttribute("values")]
private Int32[] m_values;
    [PersistenceElementNameAttribute("total")]
private int m_total;
    public int Item { get; public set; }
    public int Length { get; }
    public int Total { get; public set; }
    public TestResultCounter(TestResultCounter other);
    public TestResultCounter(int total);
    public int get_Item(TestOutcome index);
    public void set_Item(TestOutcome index, int value);
    public int get_Length();
    public int get_Total();
    public void set_Total(int value);
    internal void Add(TestResultCounter other);
    internal void Subtract(TestResultCounter other);
    internal void Clear();
    internal int CountOutcomes(OutcomeConditionFunction predicate);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestResultDetail : object {
    [NonPersistableAttribute]
private Dictionary`2<TestId, ITestElement> m_tests;
    [NonPersistableAttribute]
private TestResult m_result;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("runId")]
private Guid m_runId;
    public static string IsDev10Parameter;
    public TestResult TestResult { get; }
    public Dictionary`2<TestId, ITestElement> TestElements { get; }
    public Guid RunId { get; }
    public TestResultDetail(TestResult result, TestRun run);
    public TestResult get_TestResult();
    public Dictionary`2<TestId, ITestElement> get_TestElements();
    public Guid get_RunId();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    private void PopulateInnerTests(TestRun run, TestExecId executionId);
}
public class Microsoft.VisualStudio.TestTools.Common.TestResultErrorInfo : object {
    [StoreXmlSimpleFieldAttribute("Message", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("message")]
private string m_message;
    [StoreXmlSimpleFieldAttribute("StackTrace", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("stackTrace")]
private string m_stackTrace;
    public string Message { get; public set; }
    public string StackTrace { get; public set; }
    public TestResultErrorInfo(string message);
    public string get_Message();
    public void set_Message(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Common.TestResultEventArgs : EventArgs {
    private List`1<TestResultId> m_resultIds;
    private bool m_allInRun;
    public TestResultId[] ResultIds { get; }
    public int Count { get; }
    public bool AllInRun { get; internal set; }
    internal TestResultEventArgs(TestResultId id);
    public TestResultId[] get_ResultIds();
    public int get_Count();
    public bool get_AllInRun();
    internal void set_AllInRun(bool value);
    internal void Add(TestResultId id);
}
public class Microsoft.VisualStudio.TestTools.Common.TestResultId : object {
    [PersistenceElementNameAttribute("runId")]
private Guid m_runId;
    [PersistenceElementNameAttribute("executionId")]
private TestExecId m_executionId;
    [PersistenceElementNameAttribute("parentExecId")]
private TestExecId m_parentExecId;
    [PersistenceElementNameAttribute("testId")]
private TestId m_testId;
    [EditorBrowsableAttribute("1")]
[WarehouseFactFieldAttribute("Run", "4", "6", "7", "0", "3")]
public string RunIdString { get; }
    public Guid RunId { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseFactFieldAttribute("Result", "4", "6", "7", "0", "3")]
[WarehouseDimensionFieldAttribute("Result ID", "10")]
public string ExecutionIdString { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseDimensionFieldAttribute("Result Root", "10")]
public bool IsRootLevel { get; }
    public TestExecId ExecutionId { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseDimensionFieldAttribute("Parent Result", "10")]
public string ParentExecIdString { get; }
    public TestExecId ParentExecId { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseFactFieldAttribute("Test", "4", "0")]
public string TestIdString { get; }
    public TestId TestId { get; }
    public bool IsRunLevel { get; }
    public TestResultId(Guid runId, TestExecId executionId, TestExecId parentExecutionId, TestId testId);
    internal TestResultId(Guid runId, Guid executionId, Guid parentExecutionId, Guid testId);
    public TestResultId(string runId, string executionId, string parentExecutionId, string testId);
    public static TestResultId RunLevelId(Guid runId);
    public string get_RunIdString();
    public Guid get_RunId();
    public string get_ExecutionIdString();
    public bool get_IsRootLevel();
    public TestExecId get_ExecutionId();
    public string get_ParentExecIdString();
    public TestExecId get_ParentExecId();
    public string get_TestIdString();
    public TestId get_TestId();
    public bool get_IsRunLevel();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool IsValid();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestResultMessage : TestMessage {
    [PersistenceElementNameAttribute("id")]
protected TestResultId m_id;
    [PersistenceElementNameAttribute("testName")]
protected string m_testName;
    [PersistenceElementNameAttribute("testType")]
protected TestType m_testType;
    [PersistenceElementNameAttribute("messageKind")]
protected TestMessageKind m_messageKind;
    [PersistenceElementNameAttribute("exception")]
protected Exception m_exception;
    [PersistenceElementNameAttribute("computerInfo")]
private string m_computerInfo;
    [PersistenceElementNameAttribute("duration")]
protected TimeSpan m_duration;
    [PersistenceElementNameAttribute("startTime")]
protected DateTime m_startTime;
    [PersistenceElementNameAttribute("endTime")]
protected DateTime m_endTime;
    [NonPersistableAttribute]
private string m_storage;
    [PersistenceElementNameAttribute("spoolMessage")]
protected bool m_spoolMessage;
    [WarehouseObjectAttribute]
public TestResultId Id { get; internal set; }
    public bool IsRunLevel { get; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{C0A718B8-1878-4f61-9953-5C6D991A70EC}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultMessage_ComputerName")]
[WarehouseFactFieldAttribute("Agent Machine", "4")]
[WarehouseDimensionFieldAttribute("Machine", "4")]
public string ComputerName { get; }
    public TestMessageKind MessageKind { get; public set; }
    [VisiblePropertyAttribute]
public string DisplayText { get; }
    [VisiblePropertyAttribute]
public string LongText { get; }
    [ReadOnlyAttribute("True")]
[VisiblePropertyAttribute]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultMessage_TestName")]
[WarehouseDimensionFieldAttribute("Test", "10")]
public string TestName { get; public set; }
    [ReadOnlyAttribute("True")]
[GroupingPropertyAttribute]
[VisiblePropertyAttribute]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultMessage_TestType")]
public TestType TestType { get; public set; }
    public Exception SystemException { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{E0EFC60D-D618-430a-9D4F-860C257D9EAA}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultMessage_StartTime")]
[WarehouseFactFieldAttribute("Date", "4")]
public DateTime StartTime { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{7F636B83-D839-4684-AB2F-666F3A9D36E3}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultMessage_EndTime")]
[WarehouseFactFieldAttribute("Finished Date", "4")]
public DateTime EndTime { get; public set; }
    [ReadOnlyAttribute("True")]
[UserVisiblePropertyAttribute("{F4B15960-1C11-46ce-8D5F-29D89E484CF7}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultMessage_Duration")]
public TimeSpan Duration { get; public set; }
    [ReadOnlyAttribute("True")]
[GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{9E5B8AAB-0EC6-439e-9DAA-5F291ADE7848}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestResultMessage_Storage")]
public string Storage { get; public set; }
    public bool SpoolMessage { get; public set; }
    [EditorBrowsableAttribute("1")]
[WarehouseDimensionFieldAttribute("Load Test Agent List", "10")]
public string LoadTestAgentNames { get; }
    public PropertyDescriptorCollection VisibleProperties { get; }
    protected TestResultMessage(SerializationInfo info, StreamingContext context);
    public TestResultMessage(string computerName, Guid runId, ITestElement test, TestMessageKind kind);
    public TestResultMessage(string computerName, Guid runId, TestMessageKind kind);
    [ObsoleteAttribute("This constructor is obsolete. Use the constructor that takes string instead.")]
public TestResultMessage(ComputerInfo computerInfo, Guid runId, ITestElement test, TestMessageKind kind);
    [ObsoleteAttribute("This constructor is obsolete. Use the constructor that takes string instead.")]
public TestResultMessage(ComputerInfo computerInfo, Guid runId, TestMessageKind kind);
    protected TestResultMessage(TestResultMessage copy);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public TestResultId get_Id();
    internal void set_Id(TestResultId value);
    public bool get_IsRunLevel();
    public string get_ComputerName();
    public TestMessageKind get_MessageKind();
    public void set_MessageKind(TestMessageKind value);
    public virtual string get_DisplayText();
    public virtual string get_LongText();
    public string get_TestName();
    public void set_TestName(string value);
    public TestType get_TestType();
    public void set_TestType(TestType value);
    public Exception get_SystemException();
    public void set_SystemException(Exception value);
    public DateTime get_StartTime();
    public void set_StartTime(DateTime value);
    public DateTime get_EndTime();
    public void set_EndTime(DateTime value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public string get_Storage();
    public void set_Storage(string value);
    public bool get_SpoolMessage();
    public void set_SpoolMessage(bool value);
    public virtual string get_LoadTestAgentNames();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual PropertyDescriptorCollection get_VisibleProperties();
    public virtual object Clone();
    public virtual bool IsValid();
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestRun : object {
    private static List`1<TestRunValidationRule> s_fixTestRunRules;
    private static object s_fixTestRunRulesLock;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("id")]
private Guid m_id;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("name")]
private string m_name;
    [StoreXmlSimpleFieldAttribute("@runUser", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("runUser")]
private string m_runUser;
    [PersistenceElementNameAttribute("runConfig")]
private TestRunConfiguration m_runConfig;
    [PersistenceElementNameAttribute("result")]
private RunResultAndStatistics m_result;
    [PersistenceElementNameAttribute("userData")]
private object m_userData;
    [StoreXmlSimpleFieldAttribute("Times/@creation")]
[PersistenceElementNameAttribute("creationTime")]
private DateTime m_created;
    [StoreXmlSimpleFieldAttribute("Times/@queuing")]
[PersistenceElementNameAttribute("queueingTime")]
private DateTime m_queued;
    [StoreXmlSimpleFieldAttribute("Times/@start")]
[PersistenceElementNameAttribute("startTime")]
private DateTime m_started;
    [StoreXmlSimpleFieldAttribute("Times/@finish")]
[PersistenceElementNameAttribute("finishTime")]
private DateTime m_finished;
    [StoreXmlSimpleFieldAttribute("Build/@flavor")]
[PersistenceElementNameAttribute("buildFlavor")]
private string m_buildFlavor;
    [StoreXmlSimpleFieldAttribute("Build/@platform")]
[PersistenceElementNameAttribute("buildPlatform")]
private string m_buildPlatform;
    [PersistenceElementNameAttribute("tests")]
private Hashtable m_tests;
    [PersistenceElementNameAttribute("categories")]
private Hashtable m_categories;
    [PersistenceElementNameAttribute("entries")]
private TestEntry[] m_entries;
    [PersistenceElementNameAttribute("replacedHostTests")]
private Dictionary`2<ITestElement, HostTypeInfo> m_replacedHostTests;
    [NonPersistableAttribute]
private string m_storage;
    [NonPersistableAttribute]
private string m_resultFileName;
    [NonPersistableAttribute]
private bool m_autoSaveResults;
    [NonPersistableAttribute]
private Dictionary`2<TestExecId, TestEntry> m_elementMap;
    [NonPersistableAttribute]
private Dictionary`2<TestIdExecId, TestEntry> m_testExecMap;
    [NonPersistableAttribute]
private CollectionControllerConnectionInformation m_collectionControllerConnectionInfo;
    private Dictionary`2<string, object> m_nonSerializedProperties;
    private AssemblyClrVersion m_targetedClrVersion;
    private bool m_testsFromMixedClr;
    [NonPersistableAttribute]
private SessionId m_sessionId;
    [NonPersistableAttribute]
private SessionId m_dataCollectionSessionId;
    [NonPersistableAttribute]
private TcmContext m_tcmContext;
    [NonPersistableAttribute]
private bool m_areMultipleSessionsEnabled;
    [NonPersistableAttribute]
private bool m_forceDataSynchronization;
    [NonPersistableAttribute]
private bool m_isCollectionOnlyRun;
    [NonPersistableAttribute]
private bool m_isExecutedOnConnectedDevice;
    [NonPersistableAttribute]
private bool m_isManualTest;
    [NonPersistableAttribute]
private AgentSpecificData m_agentSpecificData;
    internal static string SummaryOnlyParameterName;
    internal static string MiniTrxParameterName;
    internal bool TestsFromMixedClr { get; }
    internal AssemblyClrVersion TargetedClrVersion { get; }
    internal Hashtable AllTests { get; }
    [EditorBrowsableAttribute("1")]
[WarehouseFactFieldAttribute("Run", "4", "5", "6", "0", "3", "7")]
[WarehouseDimensionFieldAttribute("Run ID", "11")]
public string IdString { get; }
    public Guid Id { get; }
    public TestEntry[] Entries { get; }
    public ITestElement[] Tests { get; }
    internal IEnumerable`1<TestId> TestIds { get; }
    internal int TestCount { get; }
    public string RunUser { get; public set; }
    [VisiblePropertyAttribute]
[WarehouseDimensionFieldAttribute("Run", "11")]
public string Name { get; public set; }
    [WarehouseObjectAttribute]
public RunResultAndStatistics Result { get; internal set; }
    public object UserData { get; public set; }
    [WarehouseObjectAttribute]
public TestRunConfiguration RunConfiguration { get; public set; }
    public PropertyDescriptorCollection VisibleProperties { get; }
    public string ResultFilePath { get; internal set; }
    public string ResultFileName { get; public set; }
    public bool AutoSaveResults { get; public set; }
    [VisiblePropertyAttribute]
public DateTime Created { get; }
    [VisiblePropertyAttribute]
public DateTime Queued { get; public set; }
    [VisiblePropertyAttribute]
public DateTime Started { get; public set; }
    [VisiblePropertyAttribute]
public DateTime Finished { get; public set; }
    public bool ContainsManualTest { get; }
    [WarehouseDimensionFieldAttribute("Build Flavor", "15")]
public string BuildFlavor { get; public set; }
    [WarehouseDimensionFieldAttribute("Platform", "14")]
public string BuildPlatform { get; public set; }
    internal bool IsCollectionOnlyRun { get; internal set; }
    internal bool IsExecutedOnConnectedDevice { get; internal set; }
    internal bool IsManualTest { get; internal set; }
    internal bool IsCollectionRun { get; }
    internal SessionId SessionId { get; internal set; }
    internal SessionId DataCollectionSessionId { get; internal set; }
    internal bool AreMultipleSessionsEnabled { get; internal set; }
    internal bool ForceDataSynchronization { get; internal set; }
    internal TcmContext TcmContext { get; internal set; }
    internal bool IsTcmRun { get; }
    internal CollectionControllerConnectionInformation CollectionControllerConnectionInformation { get; internal set; }
    internal Dictionary`2<string, object> NonSerializedProperties { get; }
    internal AgentSpecificData AgentSpecificData { get; internal set; }
    internal bool CanRunDeployedTests { get; }
    private static List`1<TestRunValidationRule> TestRunValidationRules { get; }
    private TestRun(SerializationInfo info, StreamingContext context);
    internal TestRun(Guid runId, TestEntry[] entries, Hashtable tests, Hashtable categories);
    internal TestRun(TestEntry[] entries, Hashtable tests, Hashtable categories);
    internal TestRun(TestRun oldRun, Guid[] testExecIdList);
    internal TestRun(TestRun oldRun, Guid[] testExecIdList, bool cloneRunConfig);
    internal TestRun(TestRun oldRun, Guid[] testExecIdList, bool cloneRunConfig, Guid newRunId);
    private static TestRun();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void SetExecId(TestEntry entry, TestExecId parentExecId);
    private void AddDefaultCategories();
    private void CopyTestsAndCategories(TestRun run, TestEntry entry);
    private void CopyCategories(TestRun run, TestListCategoryId categoryId);
    private void AssignRunResult();
    private void Initialize();
    internal bool get_TestsFromMixedClr();
    internal AssemblyClrVersion get_TargetedClrVersion();
    internal Hashtable get_AllTests();
    public string get_IdString();
    public Guid get_Id();
    public TestEntry[] get_Entries();
    public ITestElement[] get_Tests();
    internal IEnumerable`1<TestId> get_TestIds();
    internal int get_TestCount();
    private ITestElement GetTest(TestEntry entry);
    public string get_RunUser();
    public void set_RunUser(string value);
    public string get_Name();
    public void set_Name(string value);
    public RunResultAndStatistics get_Result();
    internal void set_Result(RunResultAndStatistics value);
    public object get_UserData();
    public void set_UserData(object value);
    public TestRunConfiguration get_RunConfiguration();
    public void set_RunConfiguration(TestRunConfiguration value);
    public sealed virtual PropertyDescriptorCollection get_VisibleProperties();
    public string get_ResultFilePath();
    internal void set_ResultFilePath(string value);
    public string get_ResultFileName();
    public void set_ResultFileName(string value);
    public bool get_AutoSaveResults();
    public void set_AutoSaveResults(bool value);
    public DateTime get_Created();
    public DateTime get_Queued();
    public void set_Queued(DateTime value);
    public DateTime get_Started();
    public void set_Started(DateTime value);
    public DateTime get_Finished();
    public void set_Finished(DateTime value);
    public bool get_ContainsManualTest();
    public string get_BuildFlavor();
    public void set_BuildFlavor(string value);
    public string get_BuildPlatform();
    public void set_BuildPlatform(string value);
    internal bool get_IsCollectionOnlyRun();
    internal void set_IsCollectionOnlyRun(bool value);
    internal bool get_IsExecutedOnConnectedDevice();
    internal void set_IsExecutedOnConnectedDevice(bool value);
    internal bool get_IsManualTest();
    internal void set_IsManualTest(bool value);
    internal bool get_IsCollectionRun();
    internal SessionId get_SessionId();
    internal void set_SessionId(SessionId value);
    internal SessionId get_DataCollectionSessionId();
    internal void set_DataCollectionSessionId(SessionId value);
    internal bool get_AreMultipleSessionsEnabled();
    internal void set_AreMultipleSessionsEnabled(bool value);
    internal bool get_ForceDataSynchronization();
    internal void set_ForceDataSynchronization(bool value);
    internal TcmContext get_TcmContext();
    internal void set_TcmContext(TcmContext value);
    internal bool get_IsTcmRun();
    internal CollectionControllerConnectionInformation get_CollectionControllerConnectionInformation();
    internal void set_CollectionControllerConnectionInformation(CollectionControllerConnectionInformation value);
    internal Dictionary`2<string, object> get_NonSerializedProperties();
    internal AgentSpecificData get_AgentSpecificData();
    internal void set_AgentSpecificData(AgentSpecificData value);
    internal bool get_CanRunDeployedTests();
    internal TestRun CloneAsRemoteCollectionOnly();
    internal ITestElement[] GetTestElements();
    public ITestElement GetTestElement(TestExecId executionId);
    internal ITestElement GetTestVolatile(TestExecId executionId);
    internal TestEntry GetTestEntry(TestExecId executionId);
    public ITestElement GetTestElement(TestExecId parentExecutionId, TestId innerTestId);
    public ITestElement[] GetInnerTests(TestExecId executionId);
    [EditorBrowsableAttribute("1")]
internal Hashtable GetTestsInternal();
    [EditorBrowsableAttribute("1")]
internal Hashtable GetCategoriesInternal();
    public int CountTestCases();
    private int CountEntryComponents(TestEntry entry);
    private List`1<TestEntry> RemoveTestsFromMapsAndInnerEntries(TestConditionFunction conditionFunction, List`1<TestEntry> entries, bool canRemoveFromEntries);
    internal bool ContainsTest(TestConditionFunction conditionFunction, ITestElement& testMatchingCondition);
    internal HostTypeInfo GetHostType(ITestElement test);
    private bool IsHostingRuleConflictTest(ITestElement test, String& message);
    private bool IsValid(TestRunConfiguration runConfig, Exception& ex, bool commandLineExecution, bool stopOnError, bool checkLicense);
    internal void Validate(TestRunConfiguration runConfig, bool noTuipUI);
    internal TestRun Fix(TestRunConfiguration runConfig, StringBuilder info, bool commandLineExecution, bool checkLicense);
    internal TestRun Fix(TestRunConfiguration runConfig, StringBuilder info, bool commandLineExecution, bool forceFix, bool checkLicense);
    private static TestRun FixTestRun(TestRun run, TestRunConfiguration runConfig, bool commandLineExecution, StringBuilder info);
    internal void FixResultTest(TestResult result);
    private static List`1<TestRunValidationRule> get_TestRunValidationRules();
    public string GetResultFilesDirectory(TestResult result);
    internal string GetResultsDirectory();
    internal static string FormatDateTimeForRunName(DateTime timeStamp);
    private void InitializeTargetedClrVersion();
    public sealed virtual object Clone();
    public sealed virtual void PrepareToPersist();
    public sealed virtual void RecoverFromPersistence();
    private void AddElementsFromEntries(List`1<TestEntry> entries);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool IsValid();
    internal static TestRun LoadSummary(string fileLocation);
    internal void AddTestElements(IEnumerable`1<ITestElement> tests);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestRunConfiguration : object {
    public static string DefaultDeploymentRootDirectory;
    public static string DefaultRelativePathRoot;
    internal static string DeploymentInDirectorySuffix;
    internal static string DeploymentOutDirectorySuffix;
    internal static string ExecutionAgentRuleName;
    internal static string TestSettingsUITypeString;
    internal static string LoadTestString;
    internal static string UnitTestString;
    private static string ParallelTestCountXPath;
    private static int ParallelTestCountDefaultValue;
    private TestRunConfigurationId m_id;
    [StoreXmlSimpleFieldAttribute]
private string m_name;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_abortRunOnError;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_autoSaveResults;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_mapIpAddresses;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_traceExecutionSequence;
    [StoreXmlSimpleFieldAttribute]
private bool m_enableDefaultDataCollectors;
    [StoreXmlSimpleFieldAttribute]
private string m_description;
    [StoreXmlFieldAttribute("Deployment")]
private DeploymentItemCollection m_deploymentItems;
    [StoreXmlSimpleFieldAttribute("Deployment/@deploySatelliteAssemblies", "Mono.Cecil.CustomAttributeArgument")]
private bool m_deploySatelliteAssemblies;
    [StoreXmlSimpleFieldAttribute("Deployment/@ignoredDependentAssemblies", "Mono.Cecil.CustomAttributeArgument")]
private string m_ignoredDependentAssembliesPattern;
    [StoreXmlSimpleFieldAttribute("Deployment/@userDeploymentRoot", "Mono.Cecil.CustomAttributeArgument")]
private string m_userDeploymentRoot;
    private string m_runDeploymentRoot;
    [StoreXmlSimpleFieldAttribute("Deployment/@useDefaultDeploymentRoot", "Mono.Cecil.CustomAttributeArgument")]
private bool m_useDefaultDeploymentRoot;
    [StoreXmlSimpleFieldAttribute("Deployment/@uploadDeploymentItems", "Mono.Cecil.CustomAttributeArgument")]
private bool m_uploadDeploymentItems;
    [StoreXmlSimpleFieldAttribute("Deployment/@enabled", "Mono.Cecil.CustomAttributeArgument")]
private bool m_isDeploymentEnabled;
    private string m_defaultUserDeploymentRootDirectory;
    [StoreXmlFieldAttribute("NamingScheme")]
private TestRunNamingScheme m_testRunNamingScheme;
    [StoreXmlSimpleFieldAttribute("Scripts/@setupScript", "Mono.Cecil.CustomAttributeArgument")]
private string m_setupCommand;
    [StoreXmlSimpleFieldAttribute("Scripts/@cleanupScript", "Mono.Cecil.CustomAttributeArgument")]
private string m_cleanupCommand;
    [StoreXmlFieldAttribute]
private TestRunConstraints m_constraints;
    [StoreXmlSimpleFieldAttribute("RemoteController/@name", "Mono.Cecil.CustomAttributeArgument")]
private string m_controllerName;
    [StoreXmlSimpleFieldAttribute("Execution/@location", "Mono.Cecil.CustomAttributeArgument")]
private ExecutionLocation m_executionLocation;
    [StoreXmlSimpleFieldAttribute("Execution/@hostProcessPlatform", "Mono.Cecil.CustomAttributeArgument")]
private ProcessorArchitecture m_hostProcessPlatform;
    [StoreXmlSimpleFieldAttribute("Execution/@parallelTestCount")]
private int m_parallelTestCount;
    [StoreXmlSimpleFieldAttribute("Execution/Buckets/@size", "Mono.Cecil.CustomAttributeArgument")]
private int m_bucketSize;
    [StoreXmlSimpleFieldAttribute("Execution/ExecutionThread/@apartmentState", "Mono.Cecil.CustomAttributeArgument")]
private ApartmentState m_apartmentState;
    [StoreXmlFieldAttribute("Execution/Hosts")]
private HostRunConfigurationData m_hostData;
    [StoreXmlSimpleFieldAttribute("Execution/Hosts/@skipUnhostableTests", "Mono.Cecil.CustomAttributeArgument")]
private bool m_skipUnhostableTests;
    private Dictionary`2<TestType, ITestTypeSpecificRunConfigurationData> m_testTypeSpecificData;
    [StoreXmlSimpleFieldAttribute("Execution/Timeouts/@runTimeout", "Mono.Cecil.CustomAttributeArgument")]
private int m_runTimeout;
    [StoreXmlSimpleFieldAttribute("Execution/Timeouts/@testTimeout", "Mono.Cecil.CustomAttributeArgument")]
private int m_testTimeout;
    [StoreXmlSimpleFieldAttribute("Execution/Timeouts/@agentNotRespondingTimeout", "Mono.Cecil.CustomAttributeArgument")]
private int m_agentNotRespondingTimeout;
    [StoreXmlSimpleFieldAttribute("Execution/Timeouts/@deploymentTimeout", "Mono.Cecil.CustomAttributeArgument")]
private int m_deploymentTimeout;
    [StoreXmlSimpleFieldAttribute("Execution/Timeouts/@scriptTimeout", "Mono.Cecil.CustomAttributeArgument")]
private int m_scriptTimeout;
    private AgentRule m_executionRule;
    private SearchPathsWrapper m_searchPaths;
    private AgentRuleCollection m_collectionOnlyRules;
    private string m_storage;
    private string m_setupScript;
    private string m_cleanupScript;
    private bool m_keepHostProcessAlive;
    private bool m_useDefaultKeepHostProcessAlive;
    private bool m_isExecutedOutOfProc;
    private bool m_isExecutedUnderDebugger;
    private DebugInfo m_debugInfo;
    private StringDictionaryAdapter m_agentProperties;
    private int m_effectiveParallelTestCount;
    private Dictionary`2<string, string> m_testSettingsProperties;
    private bool obsoleteCollectorsAllowed;
    public TestRunConfigurationId Id { get; }
    [VisiblePropertyAttribute]
[GroupingPropertyAttribute]
public string Name { get; public set; }
    [VisiblePropertyAttribute]
[GroupingPropertyAttribute]
[WarehouseDimensionFieldAttribute("Run Description", "11")]
public string Description { get; public set; }
    [VisiblePropertyAttribute]
[GroupingPropertyAttribute]
public string Storage { get; public set; }
    internal Link Link { get; }
    public Dictionary`2<string, string> TestSettingsProperties { get; }
    public string TestSettingsUIType { get; public set; }
    internal TestType[] TestTypesWithData { get; }
    public string DeploymentRootDirectory { get; }
    public string UserDeploymentRootDirectory { get; public set; }
    public bool UseDefaultDeploymentRootDirectory { get; public set; }
    public string DefaultUserDeploymentRootDirectory { get; public set; }
    internal string RunDeploymentRootDirectory { get; internal set; }
    public string RunDeploymentInDirectory { get; }
    public string RunDeploymentOutDirectory { get; }
    public string RelativePathRootDirectory { get; public set; }
    public bool UploadDeploymentItems { get; public set; }
    public DeploymentItemCollection DeploymentItems { get; public set; }
    public string SetupCommand { get; public set; }
    internal string SetupScript { get; internal set; }
    public string CleanupCommand { get; public set; }
    internal string CleanupScript { get; internal set; }
    internal string IgnoredDependentAssembliesPattern { get; internal set; }
    internal SearchPathsWrapper SearchPaths { get; }
    internal bool DeploySatelliteAssemblies { get; internal set; }
    public bool SkipUnhostableTests { get; public set; }
    internal bool TraceExecutionSequence { get; internal set; }
    internal bool EnableDefaultDataCollectors { get; internal set; }
    public bool IsDeploymentEnabled { get; internal set; }
    [WarehouseDimensionFieldAttribute("Remote Run", "11")]
public bool IsExecutedRemotely { get; public set; }
    public ProcessorArchitecture HostProcessPlatform { get; public set; }
    public int AgentNotRespondingTimeout { get; public set; }
    public int RunTimeout { get; public set; }
    public int TestTimeout { get; public set; }
    public int BucketSize { get; public set; }
    public int DeploymentTimeout { get; public set; }
    internal int ScriptTimeout { get; internal set; }
    internal bool AutoSaveResults { get; internal set; }
    [WarehouseDimensionFieldAttribute("Machine", "4")]
internal string ControllerName { get; internal set; }
    public bool IsRemoteDataCollectionEnabled { get; }
    internal TestRunConstraints Constraints { get; internal set; }
    internal AgentRule ExecutionRule { get; internal set; }
    internal AgentRuleCollection CollectionOnlyRules { get; internal set; }
    internal Uri ControllerUri { get; }
    public bool AbortRunOnError { get; public set; }
    internal bool MapIPAddresses { get; internal set; }
    public bool IsExecutedOutOfProc { get; internal set; }
    public bool IsCodeCoverageEnabled { get; public set; }
    public bool IsExecutedUnderDebugger { get; public set; }
    internal DebugInfo DebugInfo { get; internal set; }
    public StringDictionary AgentProperties { get; }
    public HostRunConfigurationData HostData { get; public set; }
    public ApartmentState ApartmentState { get; public set; }
    internal bool KeepHostProcessAlive { get; internal set; }
    internal bool UseDefaultKeepHostProcessAlive { get; internal set; }
    internal CodeCoverageDataCollectorConfiguration CodeCoverage { get; }
    internal int ParallelTestCount { get; internal set; }
    internal int EffectiveParallelTestCount { get; internal set; }
    internal TestRunNamingScheme TestRunNamingScheme { get; internal set; }
    public PropertyDescriptorCollection VisibleProperties { get; }
    public string ElementName { get; }
    public string NamespaceUri { get; }
    protected TestRunConfiguration(SerializationInfo info, StreamingContext context);
    public TestRunConfiguration(string name, string storage);
    private TestRunConfiguration(TestRunConfiguration copy);
    private static TestRunConfiguration();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public void AddTestSettingsProperties(Dictionary`2<string, object> properties);
    private void Initialize();
    public TestRunConfigurationId get_Id();
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Storage();
    public void set_Storage(string value);
    internal Link get_Link();
    public Dictionary`2<string, string> get_TestSettingsProperties();
    public string get_TestSettingsUIType();
    public void set_TestSettingsUIType(string value);
    internal TestType[] get_TestTypesWithData();
    public string get_DeploymentRootDirectory();
    public string get_UserDeploymentRootDirectory();
    public void set_UserDeploymentRootDirectory(string value);
    public bool get_UseDefaultDeploymentRootDirectory();
    public void set_UseDefaultDeploymentRootDirectory(bool value);
    public string get_DefaultUserDeploymentRootDirectory();
    public void set_DefaultUserDeploymentRootDirectory(string value);
    internal string get_RunDeploymentRootDirectory();
    internal void set_RunDeploymentRootDirectory(string value);
    public string get_RunDeploymentInDirectory();
    public string get_RunDeploymentOutDirectory();
    public string get_RelativePathRootDirectory();
    public void set_RelativePathRootDirectory(string value);
    public bool get_UploadDeploymentItems();
    public void set_UploadDeploymentItems(bool value);
    public DeploymentItemCollection get_DeploymentItems();
    public void set_DeploymentItems(DeploymentItemCollection value);
    public string get_SetupCommand();
    public void set_SetupCommand(string value);
    internal string get_SetupScript();
    internal void set_SetupScript(string value);
    public string get_CleanupCommand();
    public void set_CleanupCommand(string value);
    internal string get_CleanupScript();
    internal void set_CleanupScript(string value);
    internal string get_IgnoredDependentAssembliesPattern();
    internal void set_IgnoredDependentAssembliesPattern(string value);
    internal SearchPathsWrapper get_SearchPaths();
    internal bool get_DeploySatelliteAssemblies();
    internal void set_DeploySatelliteAssemblies(bool value);
    public bool get_SkipUnhostableTests();
    public void set_SkipUnhostableTests(bool value);
    internal bool get_TraceExecutionSequence();
    internal void set_TraceExecutionSequence(bool value);
    internal bool get_EnableDefaultDataCollectors();
    internal void set_EnableDefaultDataCollectors(bool value);
    public bool get_IsDeploymentEnabled();
    internal void set_IsDeploymentEnabled(bool value);
    public bool get_IsExecutedRemotely();
    public void set_IsExecutedRemotely(bool value);
    public ProcessorArchitecture get_HostProcessPlatform();
    public void set_HostProcessPlatform(ProcessorArchitecture value);
    public int get_AgentNotRespondingTimeout();
    public void set_AgentNotRespondingTimeout(int value);
    public int get_RunTimeout();
    public void set_RunTimeout(int value);
    public int get_TestTimeout();
    public void set_TestTimeout(int value);
    public int get_BucketSize();
    public void set_BucketSize(int value);
    public int get_DeploymentTimeout();
    public void set_DeploymentTimeout(int value);
    internal int get_ScriptTimeout();
    internal void set_ScriptTimeout(int value);
    internal bool get_AutoSaveResults();
    internal void set_AutoSaveResults(bool value);
    internal string get_ControllerName();
    internal void set_ControllerName(string value);
    public bool get_IsRemoteDataCollectionEnabled();
    internal TestRunConstraints get_Constraints();
    internal void set_Constraints(TestRunConstraints value);
    internal AgentRule get_ExecutionRule();
    internal void set_ExecutionRule(AgentRule value);
    internal AgentRuleCollection get_CollectionOnlyRules();
    internal void set_CollectionOnlyRules(AgentRuleCollection value);
    internal Uri get_ControllerUri();
    public bool get_AbortRunOnError();
    public void set_AbortRunOnError(bool value);
    internal bool get_MapIPAddresses();
    internal void set_MapIPAddresses(bool value);
    public bool get_IsExecutedOutOfProc();
    internal void set_IsExecutedOutOfProc(bool value);
    public bool get_IsCodeCoverageEnabled();
    public void set_IsCodeCoverageEnabled(bool value);
    public bool get_IsExecutedUnderDebugger();
    public void set_IsExecutedUnderDebugger(bool value);
    internal DebugInfo get_DebugInfo();
    internal void set_DebugInfo(DebugInfo value);
    public StringDictionary get_AgentProperties();
    public HostRunConfigurationData get_HostData();
    public void set_HostData(HostRunConfigurationData value);
    public ApartmentState get_ApartmentState();
    public void set_ApartmentState(ApartmentState value);
    internal bool get_KeepHostProcessAlive();
    internal void set_KeepHostProcessAlive(bool value);
    internal bool get_UseDefaultKeepHostProcessAlive();
    internal void set_UseDefaultKeepHostProcessAlive(bool value);
    internal CodeCoverageDataCollectorConfiguration get_CodeCoverage();
    internal int get_ParallelTestCount();
    internal void set_ParallelTestCount(int value);
    internal int get_EffectiveParallelTestCount();
    internal void set_EffectiveParallelTestCount(int value);
    internal TestRunNamingScheme get_TestRunNamingScheme();
    internal void set_TestRunNamingScheme(TestRunNamingScheme value);
    internal void CopyFrom(TestRunConfiguration other);
    public ITestTypeSpecificRunConfigurationData GetTestTypeSpecificData(TestType testType);
    internal void AddTestTypeSpecificData(TestType testType, ITestTypeSpecificRunConfigurationData data);
    public void SetTestTypeSpecificData(TestType testType, ITestTypeSpecificRunConfigurationData data);
    internal void ClearTestTypeSpecificData();
    public sealed virtual object Clone();
    public sealed virtual PropertyDescriptorCollection get_VisibleProperties();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static string GetDeploymentInDirectory(string runDeploymentDirectory);
    internal static string GetDeploymentOutDirectory(string runDeploymentDirectory);
    public int GetTestElementTimeout(ITestElement test);
    internal void Validate();
    internal void FixForTargetFramework35();
    internal TestRunConfiguration Fix(RunConfigErrors errorsToFix);
    public void SetTestEnvironment(string controllerName, string testEnvironmentName);
    public sealed virtual bool IsValid();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual string get_ElementName();
    public sealed virtual string get_NamespaceUri();
}
public class Microsoft.VisualStudio.TestTools.Common.TestRunConfigurationId : object {
    [PersistenceElementNameAttribute("id")]
private Guid m_id;
    private static TestRunConfigurationId m_empty;
    internal static TestRunConfigurationId Empty { get; }
    public Guid Id { get; }
    public TestRunConfigurationId(Guid id);
    private static TestRunConfigurationId();
    internal static TestRunConfigurationId get_Empty();
    public Guid get_Id();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Common.TestRunConstraints : object {
    private ArrayList m_agentList;
    [StoreXmlSimpleFieldAttribute("@maxAgents", "Mono.Cecil.CustomAttributeArgument")]
private int m_agentCount;
    public int AgentCount { get; public set; }
    public String[] AgentList { get; }
    private TestRunConstraints(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public int get_AgentCount();
    public void set_AgentCount(int value);
    public String[] get_AgentList();
    public void AddAgent(string agentName);
    public void RemoveAgent(string agentName);
    public void RemoveAllAgents();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal static class Microsoft.VisualStudio.TestTools.Common.TestRunDefaults : object {
    public static int DefaultBucketSize;
    public static string WebHostAdapterTypeName;
    public static string SmartDeviceHostAdapterTypeName;
    public static string CodeCoveragePluginTypeName;
    public static string CodeCoveragePluginUriString;
    public static string DynamicCodeCoveragePluginUriString;
    public static string TestImpactPluginUriString;
    public static string NetworkEmulationPluginUriString;
    public static string VideoRecorderPluginUriString;
    public static string EventLogPluginUriString;
    public static string SystemInfoPluginUriString;
    public static string IntelliTracePluginUriString;
    public static string HttpProxyPluginUriString;
    public static string GenericCollectorConfigurationEditorString;
    public static string ScreenCaptureDataCollectorUriString;
    public static Uri ScreenCaptureDataCollectorUri;
    public static string ScreenCaptureDataCollectorTypeName;
    public static Uri CodeCoveragePluginUri;
    public static Uri DynamicCodeCoveragePluginUri;
    public static Uri TestImpactPluginUri;
    public static Uri NetworkEmulationPluginUri;
    public static Uri GenericCollectorConfigurationEditorUri;
    public static Uri EventLogPluginUri;
    public static Uri SystemInfoPluginUri;
    public static Uri IntelliTracePluginUri;
    public static Uri VideoRecorderPluginUri;
    public static Uri HttpProxyPluginUri;
    public static ProcessorArchitecture PlatformDefault;
    public static int MaxLargeTestMessageCount;
    private static TestRunDefaults();
}
internal class Microsoft.VisualStudio.TestTools.Common.TestRunDirectories : object {
    private string m_testRunDirectory;
    private string m_deploymentDirectory;
    private string m_resultsDirectory;
    private string m_resultsLeafDirectoryName;
    private string m_testRunResultsDirectory;
    public string TestRunDirectory { get; }
    public string DeploymentDirectory { get; }
    public string ResultsDirectory { get; }
    public string TestRunResultsDirectory { get; }
    public TestRunDirectories(TestRun testRun, string workingDirectoryForRemoteTestRun);
    public TestRunDirectories(TestRun testRun, string workingDirectoryForRemoteTestRun, string testRunDirectoryNameForRemoteTestRun, string resultsLeafDirectoryName);
    public string get_TestRunDirectory();
    public string get_DeploymentDirectory();
    public string get_ResultsDirectory();
    public string get_TestRunResultsDirectory();
    public static string GetRelativeTestRunResultsDirectory(string leafDirectoryName);
    public static string GetRelativeTestResultsDirectory(Guid testExecutionId);
    public static string GetRelativeTestResultsDirectory(Guid testExecutionId, string leafDirectoryName);
    public static void CreateDirectory(string path);
    public static void DeleteDirectory(string path);
    private static void VerifyLeafDirectoryName(String& leafDirectoryName);
    public string GetTestResultsDirectory(Guid testExecutionId, bool createDirectory);
    public void CreateDirectories();
    public void DeleteDirectories(bool deploymentDirectory, bool resultsDirectory);
    public void Trace(string linePrefix);
}
public class Microsoft.VisualStudio.TestTools.Common.TestRunEventArgs : EventArgs {
    private Guid m_runId;
    public Guid RunId { get; }
    internal TestRunEventArgs(Guid runId);
    public Guid get_RunId();
}
internal class Microsoft.VisualStudio.TestTools.Common.TestRunNamingScheme : object {
    [StoreXmlSimpleFieldAttribute("@baseName", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("baseName")]
private string m_baseName;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("appendTimeStamp")]
private bool m_appendTimeStamp;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("useDefault")]
private bool m_useDefault;
    public string BaseName { get; public set; }
    public bool AppendTimestamp { get; public set; }
    public bool UseDefault { get; public set; }
    protected TestRunNamingScheme(TestRunNamingScheme copy);
    public sealed virtual object Clone();
    public string get_BaseName();
    public void set_BaseName(string value);
    public bool get_AppendTimestamp();
    public void set_AppendTimestamp(bool value);
    public bool get_UseDefault();
    public void set_UseDefault(bool value);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestRunTextResultMessage : TestResultMessage {
    [PersistenceElementNameAttribute("text")]
private string m_text;
    [PersistenceElementNameAttribute("outcome")]
private TestOutcome m_outcome;
    public string Text { get; }
    public TestOutcome Outcome { get; public set; }
    public string OutcomeText { get; }
    public TestRunTextResultMessage(string computerName, Guid runId, string messageText, TestMessageKind messageKind);
    [ObsoleteAttribute("This constructor is obsolete. Use the constructor that takes computerName instead.")]
public TestRunTextResultMessage(ComputerInfo computerInfo, Guid runId, string messageText, TestMessageKind messageKind);
    public TestRunTextResultMessage(Guid runId, string messageText);
    public TestRunTextResultMessage(Guid runId, string messageText, Exception exception);
    protected TestRunTextResultMessage(SerializationInfo info, StreamingContext context);
    public string get_Text();
    public TestOutcome get_Outcome();
    public void set_Outcome(TestOutcome value);
    public string get_OutcomeText();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.VisualStudio.TestTools.Common.TestState : Enum {
    public int value__;
    public static TestState Uninitialized;
    public static TestState Starting;
    public static TestState Started;
    public static TestState Running;
    public static TestState Pausing;
    public static TestState Paused;
    public static TestState Resuming;
    public static TestState Timeout;
    public static TestState Stopping;
    public static TestState Aborting;
    public static TestState Completing;
    public static TestState Completed;
    public static TestState Disposed;
}
public class Microsoft.VisualStudio.TestTools.Common.TestStateEvent : TestMessage {
    [PersistenceElementNameAttribute("runId")]
private Guid m_runId;
    [PersistenceElementNameAttribute("execId")]
private Guid m_execId;
    [PersistenceElementNameAttribute("newState")]
private TestState m_newState;
    [PersistenceElementNameAttribute("time")]
private DateTime m_timestamp;
    public Guid RunId { get; }
    public Guid ExecId { get; }
    public TestState NewState { get; }
    public DateTime Timestamp { get; }
    public TestStateEvent(Guid runId, Guid execId, TestState newState, DateTime timestamp);
    public TestStateEvent(Guid runId, Guid execId, TestState newState);
    protected TestStateEvent(SerializationInfo info, StreamingContext context);
    public Guid get_RunId();
    public Guid get_ExecId();
    public TestState get_NewState();
    public DateTime get_Timestamp();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual bool IsValid();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.Common.TestType : object {
    [StoreXmlSimpleFieldAttribute(".")]
[PersistenceElementNameAttribute("id")]
private Guid m_typeId;
    public Guid Id { get; }
    public TestType(Guid id);
    public Guid get_Id();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Common.TestTypeExtension : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttributeProvider>k__BackingField;
    [XmlAttributeAttribute("Name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("AttributeProvider")]
public string AttributeProvider { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AttributeProvider();
    [CompilerGeneratedAttribute]
public void set_AttributeProvider(string value);
}
public abstract class Microsoft.VisualStudio.TestTools.Common.TestTypeExtensionClientSide : object {
    public string ExtensionName { get; }
    public abstract virtual string get_ExtensionName();
    public virtual void Initialize(ITmi tmi);
    public virtual object GetUI();
}
internal class Microsoft.VisualStudio.TestTools.Common.TestTypeInfo : object {
    private static string PackageResourceName;
    private TestType m_type;
    private string m_name;
    private Dictionary`2<string, IconWrapper> m_extensionsToIcon;
    private string m_tipName;
    private Guid m_editorGuid;
    private string m_serviceTypeText;
    private Type m_serviceType;
    private string m_runConfigurationEditorTypeText;
    private Type m_runConfigurationEditorType;
    private SupportedHostTypesData m_supportedHostTypes;
    private bool m_areTestTypeExtensionsSupported;
    private string m_satelliteDll;
    private static bool s_requireTip;
    private static Icon DefaultIcon { get; }
    internal static bool RequireTip { get; internal set; }
    public TestType TestType { get; }
    public Type ServiceType { get; }
    public Type RunConfigurationEditorType { get; }
    public string Name { get; }
    public String[] Extensions { get; }
    internal bool AreTestTypeExtensionsSupported { get; }
    public string TipName { get; }
    public Guid EditorGuid { get; }
    public SupportedHostTypesData SupportedHostTypes { get; }
    public TestTypeInfo(TestConfigKey key);
    public TestTypeInfo(TestTypeXml testType);
    private static TestTypeInfo();
    private static Icon get_DefaultIcon();
    internal static bool get_RequireTip();
    internal static void set_RequireTip(bool value);
    private void ReadTestExtensions(TestConfigKey key);
    private void ReadTestExtensions(TestTypeXml testType);
    private void LoadTestIcons();
    private void ReadTestEditor(TestConfigKey key);
    private void ReadTestEditor(TestTypeXml testType);
    private void ReadTestType(TestConfigKey key);
    public void ReadTestType(TestTypeXml testType);
    private string ConstructDllPath(string dllPath, string dllName);
    private static List`1<ResourceManager> GetResourceManagers(string tip);
    public TestType get_TestType();
    public Type get_ServiceType();
    public Type get_RunConfigurationEditorType();
    public string get_Name();
    public String[] get_Extensions();
    internal bool get_AreTestTypeExtensionsSupported();
    public Icon GetIcon(string extension);
    public string get_TipName();
    public Guid get_EditorGuid();
    public SupportedHostTypesData get_SupportedHostTypes();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.Common.TestTypeInfoCollection : object {
    private Dictionary`2<Guid, TestTypeInfo> m_testTypesById;
    private Dictionary`2<string, List`1<TestTypeInfo>> m_testTypesByExtension;
    private static bool s_fOutputWarnings;
    private static string TmiClassName;
    private static string PathToTestPlatform;
    private static XmlSerializer serializer;
    [CompilerGeneratedAttribute]
private static TestTypeWarningEventHandler TestTypeLoadWarningEvent;
    private static TestTypeInfoCollection s_testTypeInfoCollection;
    public TestTypeInfo Item { get; }
    public TestTypeInfo Item { get; }
    public TestTypeInfo[] Item { get; }
    public TestType[] TestTypes { get; }
    public ICollection TestTypeInfoSet { get; }
    public int Count { get; }
    public static bool OutputWarnings { get; }
    public static TestTypeInfoCollection Instance { get; }
    public static string AssemblyDirectory { get; }
    public TestTypeInfoCollection(TestConfigKey root);
    private static TestTypeInfoCollection();
    public TestTypeInfo get_Item(TestType testType);
    public TestTypeInfo get_Item(Guid testTypeId);
    public TestTypeInfo[] get_Item(string extension);
    public TestType[] get_TestTypes();
    public ICollection get_TestTypeInfoSet();
    public int get_Count();
    public static bool get_OutputWarnings();
    private void ReadTypesFromFile(string typesFilePath);
    private void ReadRegistry(TestConfigKey root);
    internal static void OutputWarning(string message);
    internal static void OutputError(string message);
    public static TestTypeInfoCollection get_Instance();
    public static string get_AssemblyDirectory();
    [CompilerGeneratedAttribute]
public static void add_TestTypeLoadWarningEvent(TestTypeWarningEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_TestTypeLoadWarningEvent(TestTypeWarningEventHandler value);
    internal static string TestTypeNameFromTestType(TestType testType);
    internal static void ClearCache();
}
[XmlRootAttribute("TestTypes")]
public class Microsoft.VisualStudio.TestTools.Common.TestTypesXml : object {
    [CompilerGeneratedAttribute]
private HashSet`1<TestTypeXml> <Types>k__BackingField;
    [XmlArrayAttribute("TestType")]
[XmlArrayItemAttribute("Test", "Microsoft.VisualStudio.TestTools.Common.TestTypeXml")]
public HashSet`1<TestTypeXml> Types { get; public set; }
    [CompilerGeneratedAttribute]
public HashSet`1<TestTypeXml> get_Types();
    [CompilerGeneratedAttribute]
public void set_Types(HashSet`1<TestTypeXml> value);
}
public class Microsoft.VisualStudio.TestTools.Common.TestTypeXml : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SatelliteBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SatelliteDllName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TipProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VsEditor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunConfigurationEditorType>k__BackingField;
    [CompilerGeneratedAttribute]
private Extension[] <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private SupportedHostAdapter[] <SupportedHostAdapters>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<TestTypeExtension> <TestTypeExtensions>k__BackingField;
    [XmlAttributeAttribute("Id")]
public string Id { get; public set; }
    [XmlAttributeAttribute("NameId")]
public string NameId { get; public set; }
    [XmlAttributeAttribute("SatelliteBasePath")]
public string SatelliteBasePath { get; public set; }
    [XmlAttributeAttribute("SatelliteDllName")]
public string SatelliteDllName { get; public set; }
    [XmlAttributeAttribute("ServiceType")]
public string ServiceType { get; public set; }
    [XmlAttributeAttribute("TipProvider")]
public string TipProvider { get; public set; }
    [XmlAttributeAttribute("VsEditor")]
public string VsEditor { get; public set; }
    [XmlAttributeAttribute("RunConfigurationEditorType")]
public string RunConfigurationEditorType { get; public set; }
    [XmlArrayAttribute("Extensions")]
[XmlArrayItemAttribute("Extension", "Microsoft.VisualStudio.TestTools.Common.Extension")]
public Extension[] Extensions { get; public set; }
    [XmlArrayAttribute("SupportedHostAdapters")]
[XmlArrayItemAttribute("SupportedHostAdapter", "Microsoft.VisualStudio.TestTools.Common.SupportedHostAdapter")]
public SupportedHostAdapter[] SupportedHostAdapters { get; public set; }
    [XmlArrayAttribute("TestTypeExtensions")]
[XmlArrayItemAttribute("TestTypeExtension", "Microsoft.VisualStudio.TestTools.Common.TestTypeExtension")]
public HashSet`1<TestTypeExtension> TestTypeExtensions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_NameId();
    [CompilerGeneratedAttribute]
public void set_NameId(string value);
    [CompilerGeneratedAttribute]
public string get_SatelliteBasePath();
    [CompilerGeneratedAttribute]
public void set_SatelliteBasePath(string value);
    [CompilerGeneratedAttribute]
public string get_SatelliteDllName();
    [CompilerGeneratedAttribute]
public void set_SatelliteDllName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceType();
    [CompilerGeneratedAttribute]
public void set_ServiceType(string value);
    [CompilerGeneratedAttribute]
public string get_TipProvider();
    [CompilerGeneratedAttribute]
public void set_TipProvider(string value);
    [CompilerGeneratedAttribute]
public string get_VsEditor();
    [CompilerGeneratedAttribute]
public void set_VsEditor(string value);
    [CompilerGeneratedAttribute]
public string get_RunConfigurationEditorType();
    [CompilerGeneratedAttribute]
public void set_RunConfigurationEditorType(string value);
    [CompilerGeneratedAttribute]
public Extension[] get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(Extension[] value);
    [CompilerGeneratedAttribute]
public SupportedHostAdapter[] get_SupportedHostAdapters();
    [CompilerGeneratedAttribute]
public void set_SupportedHostAdapters(SupportedHostAdapter[] value);
    [CompilerGeneratedAttribute]
public HashSet`1<TestTypeExtension> get_TestTypeExtensions();
    [CompilerGeneratedAttribute]
public void set_TestTypeExtensions(HashSet`1<TestTypeExtension> value);
}
public class Microsoft.VisualStudio.TestTools.Common.TextTestResultMessage : TestResultMessage {
    [PersistenceElementNameAttribute("text")]
private string m_text;
    public string Text { get; }
    public TextTestResultMessage(Guid runId, ITestElement test, string messageText);
    protected TextTestResultMessage(SerializationInfo info, StreamingContext context);
    public string get_Text();
    public virtual string ToString();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.VisualStudio.TestTools.Common.ThreadHelper : object {
    public static bool SafeThreadAbort(Thread thread, int timeout);
}
internal class Microsoft.VisualStudio.TestTools.Common.TimeoutConverter : Int32Converter {
    private TimeSpanConverter m_timeSpanConverter;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.VisualStudio.TestTools.Common.TimerResult : object {
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("name")]
protected string m_name;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("startTime")]
protected DateTime m_startTime;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("duration")]
protected TimeSpan m_duration;
    [StoreXmlSimpleFieldAttribute]
[PersistenceElementNameAttribute("timezone")]
protected TimeZoneInfo m_timeZone;
    public string Name { get; }
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; }
    public TimeSpan Duration { get; public set; }
    public TimerResult(string name);
    public string get_Name();
    public void set_StartTime(DateTime value);
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public void set_Duration(TimeSpan value);
    public TimeSpan get_Duration();
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public abstract class Microsoft.VisualStudio.TestTools.Common.Tip : object {
    public TestType TestType { get; }
    public abstract virtual TestType get_TestType();
    public abstract virtual ICollection Load(string location, ProjectData projectData, IWarningHandler warningHandler);
    public sealed virtual void Unload(string location, IWarningHandler warningHandler);
    public abstract virtual void Save(ITestElement[] tests, string location, ProjectData projectData);
    public virtual TestResult MergeResults(TestResult inMemory, TestResultMessage fromTheWire);
    public sealed virtual void Reset();
    public sealed virtual void BeforeRemoveTestRun(Guid runId);
    public sealed virtual void Dispose();
}
internal static class Microsoft.VisualStudio.TestTools.Common.TypeHelper : object {
    private static Regex MatchSpacesAroundComma;
    private static TypeHelper();
    public static string NormalizeAssemblyQualifiedName(string assemblyQualifiedName);
}
internal class Microsoft.VisualStudio.TestTools.Common.UnmanagedResourceHelper : object {
    private static int MAX_RESOURCE_STRING_SIZE;
    private ModuleHandle m_hModule;
    private bool m_disposed;
    private string m_fileName;
    private object m_lock;
    private ModuleHandle ModuleHandle { get; }
    public UnmanagedResourceHelper(string fileName);
    protected virtual override void Finalize();
    private ModuleHandle get_ModuleHandle();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public Icon LoadIcon(int iconId);
    public static void LoadIcons(string fileName, int iconId, Icon& smallIcon, Icon& largeIcon);
    public string LoadString(int id);
}
public class Microsoft.VisualStudio.TestTools.Common.UriDataAttachment : object {
    private string m_description;
    private Uri m_uri;
    public string Description { get; }
    public Uri Uri { get; }
    public UriDataAttachment(string description, Uri uri);
    internal UriDataAttachment Clone(string baseDirectory, bool useAbsoluteUri);
    private void Initialize(string description, Uri uri);
    public sealed virtual string get_Description();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public Uri get_Uri();
}
internal class Microsoft.VisualStudio.TestTools.Common.UserEnvironmentVariablesHelper : object {
    private static string RegistrySemaphoreName;
    private static string RegistrySubKeyPath;
    private static string BackupSubKeyRelativePath;
    private static string RefCountValueName;
    private Semaphore m_registrySemaphore;
    private bool m_isDisposed;
    public UserEnvironmentVariablesHelper(ICollection`1<KeyValuePair`2<string, string>> userEnvironmentVariables, List`1& couldNotSet);
    private static UserEnvironmentVariablesHelper();
    public sealed virtual void Dispose();
    private static void BackupAndSet(ICollection`1<KeyValuePair`2<string, string>> userEnvironmentVariables, List`1<KeyValuePair`2<string, string>> couldNotSet);
    private static void Restore();
    public static void RestoreIfInconsistent();
}
internal class Microsoft.VisualStudio.TestTools.Common.UserStateBackgroundWorker : BackgroundWorker {
    [CompilerGeneratedAttribute]
private object <UserState>k__BackingField;
    public object UserState { get; private set; }
    protected virtual void OnDoWork(DoWorkEventArgs e);
    [CompilerGeneratedAttribute]
public object get_UserState();
    [CompilerGeneratedAttribute]
private void set_UserState(object value);
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.TestTools.Common.UserVisiblePropertyAttribute : VisiblePropertyAttribute {
    private Guid m_guid;
    public Guid Guid { get; }
    public string Id { get; }
    public UserVisiblePropertyAttribute(string id);
    public Guid get_Guid();
    public string get_Id();
}
internal class Microsoft.VisualStudio.TestTools.Common.Utility.GenericSerializationBinder`1 : SerializationBinder {
    private static HashSet`1<string> SupportedTypes;
    private static GenericSerializationBinder`1();
    public virtual Type BindToType(string assemblyName, string typeName);
}
internal class Microsoft.VisualStudio.TestTools.Common.Utility.SerializationWrapper`1 : object {
    private T m_value;
    private Byte[] m_bytes;
    private SerializationWrapper`1(SerializationInfo info, StreamingContext context);
    internal T GetValue();
    internal void SetValue(T value);
    private static Byte[] Serialize(T value);
    private static T Deserialize(Byte[] bytes);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Common.Utility.SuspendCodeCoverage : object {
    private bool m_disposed;
    public static string SuspendCodeCoverageEnvVarName;
    private string prevEnvValue;
    public sealed virtual void Dispose();
    internal void Dispose(bool disposing);
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.TestTools.Common.VisiblePropertyAttribute : Attribute {
}
internal static class Microsoft.VisualStudio.TestTools.Common.VisualPropertyObtainer : object {
    internal static PropertyDescriptorCollection GetVisibleProperties(object obj);
    internal static List`1<PropertyDescriptor> GetProperties(object obj, Type propertyAttribute);
    internal static bool IsSupportedByProduct(PropertyDescriptor pd);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestTools.Common.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.Common.VoidWarningHandler : object {
    public sealed virtual void Write(object sender, WarningEventArgs ea);
}
internal static class Microsoft.VisualStudio.TestTools.Common.VSRegKeyNamesWrapper : object {
    internal static string RGS_VAR_PROGID;
    internal static string RGS_VAR_PROGID_APPIDNAME;
    internal static string RGS_VAR_PROGID_VERSION;
    internal static string RGS_VAR_DDE_NAME;
    internal static string REGKEY_VISUALSTUDIOROOT_NOVERSION;
    internal static string REGKEY_VISUALSTUDIOROOT;
}
[AttributeUsageAttribute("128")]
internal class Microsoft.VisualStudio.TestTools.Common.WarehouseDimensionFieldAttribute : Attribute {
    private WarehouseDimensionTable m_dimension;
    private string m_field;
    public WarehouseDimensionTable Dimension { get; }
    public string Field { get; }
    public WarehouseDimensionFieldAttribute(string field, WarehouseDimensionTable dimension);
    public WarehouseDimensionTable get_Dimension();
    public string get_Field();
    public virtual string ToString();
}
internal enum Microsoft.VisualStudio.TestTools.Common.WarehouseDimensionTable : Enum {
    public int value__;
    [DescriptionAttribute("Assembly")]
public static WarehouseDimensionTable BuildAssemblyDimension;
    [DescriptionAttribute("Build")]
public static WarehouseDimensionTable BuildDimension;
    [DescriptionAttribute("Test Category")]
public static WarehouseDimensionTable Category;
    [DescriptionAttribute("Load Test Counter Dimension")]
public static WarehouseDimensionTable CounterDimension;
    [DescriptionAttribute("Machine")]
public static WarehouseDimensionTable Machine;
    [DescriptionAttribute("Outcome")]
public static WarehouseDimensionTable Outcome;
    [DescriptionAttribute("Load Test Page Summary Dimension")]
public static WarehouseDimensionTable PageSummaryDimension;
    [DescriptionAttribute("Person")]
public static WarehouseDimensionTable Person;
    [DescriptionAttribute("Project")]
public static WarehouseDimensionTable ProjectDimension;
    [DescriptionAttribute("Date")]
public static WarehouseDimensionTable ProjectTime;
    [DescriptionAttribute("Result")]
public static WarehouseDimensionTable ResultDimension;
    [DescriptionAttribute("Run")]
public static WarehouseDimensionTable RunDimension;
    [DescriptionAttribute("Load Test Scenario")]
public static WarehouseDimensionTable Scenario;
    [DescriptionAttribute("Load Test Transaction Dimension")]
public static WarehouseDimensionTable TransactionSummaryDimension;
    [DescriptionAttribute("Platform")]
public static WarehouseDimensionTable BuildPlatformDimension;
    [DescriptionAttribute("Build Flavor")]
public static WarehouseDimensionTable BuildFlavorDimension;
}
[AttributeUsageAttribute("128")]
internal class Microsoft.VisualStudio.TestTools.Common.WarehouseFactFieldAttribute : Attribute {
    private WarehouseFactTable[] m_facts;
    private string m_field;
    public WarehouseFactTable[] Facts { get; }
    public string Field { get; }
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable facts);
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable f0, WarehouseFactTable f1);
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable f0, WarehouseFactTable f1, WarehouseFactTable f2);
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable f0, WarehouseFactTable f1, WarehouseFactTable f2, WarehouseFactTable f3);
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable f0, WarehouseFactTable f1, WarehouseFactTable f2, WarehouseFactTable f3, WarehouseFactTable f4);
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable f0, WarehouseFactTable f1, WarehouseFactTable f2, WarehouseFactTable f3, WarehouseFactTable f4, WarehouseFactTable f5);
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable f0, WarehouseFactTable f1, WarehouseFactTable f2, WarehouseFactTable f3, WarehouseFactTable f4, WarehouseFactTable f5, WarehouseFactTable f6);
    public WarehouseFactFieldAttribute(string fieldName, WarehouseFactTable f0, WarehouseFactTable f1, WarehouseFactTable f2, WarehouseFactTable f3, WarehouseFactTable f4, WarehouseFactTable f5, WarehouseFactTable f6, WarehouseFactTable f7, WarehouseFactTable f8);
    public WarehouseFactTable[] get_Facts();
    public string get_Field();
    public virtual string ToString();
}
internal enum Microsoft.VisualStudio.TestTools.Common.WarehouseFactLinkTable : Enum {
    public int value__;
}
internal enum Microsoft.VisualStudio.TestTools.Common.WarehouseFactTable : Enum {
    public int value__;
    [DescriptionAttribute("Load Test Counter")]
public static WarehouseFactTable Counter;
    [DescriptionAttribute("Build Coverage")]
public static WarehouseFactTable BuildCoverage;
    [DescriptionAttribute("Run Coverage")]
public static WarehouseFactTable RunCoverage;
    [DescriptionAttribute("Load Test Page Summary")]
public static WarehouseFactTable PageSummary;
    [DescriptionAttribute("Test Result")]
public static WarehouseFactTable Result;
    [DescriptionAttribute("Load Test Summary")]
public static WarehouseFactTable LoadTestSummary;
    [DescriptionAttribute("Load Test Details")]
public static WarehouseFactTable LoadTestDetails;
    [DescriptionAttribute("Load Test Transaction")]
public static WarehouseFactTable TransactionSummary;
}
[AttributeUsageAttribute("128")]
internal class Microsoft.VisualStudio.TestTools.Common.WarehouseObjectAttribute : Attribute {
    private string m_fieldName;
    public string FieldName { get; }
    public WarehouseObjectAttribute(string fieldName);
    public string get_FieldName();
}
public class Microsoft.VisualStudio.TestTools.Common.WarningEventArgs : EventArgs {
    private string m_warning;
    public string Warning { get; }
    public WarningEventArgs(string warning);
    public string get_Warning();
}
public enum Microsoft.VisualStudio.TestTools.Common.WebServerType : Enum {
    public int value__;
    public static WebServerType None;
    public static WebServerType Iis;
    public static WebServerType WebDev;
}
internal class Microsoft.VisualStudio.TestTools.Common.WordNotInstalledException : EqtException {
    public WordNotInstalledException(string msg);
    public WordNotInstalledException(string msg, Exception inner);
    protected WordNotInstalledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Common.WordPropertyException : EqtException {
    public WordPropertyException(string msg);
    public WordPropertyException(string msg, Exception inner);
    protected WordPropertyException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Common.WordPropertyReader : object {
    private string m_path;
    private String[] m_propertyNames;
    private String[] m_propertyValues;
    private static DateTime m_lastBlockedDate;
    private static WordPropertyReader();
    public String[] ReadProperties(string path, String[] propertyNames);
    private void ReadViaAutomation();
}
internal class Microsoft.VisualStudio.TestTools.Common.WordPropertyWriter : object {
    private string m_path;
    private String[] m_propertyNames;
    private String[] m_propertyValues;
    private WordPropertyException m_exception;
    public void WriteProperties(string path, String[] propertyNames, String[] propertyValues);
    private void WriteViaAutomation();
}
internal class Microsoft.VisualStudio.TestTools.Common.WordPropertyXmlReader : object {
    private static string m_headTag;
    private static string m_propertiesTag;
    private static string m_customPropertiesTag;
    private static string m_titleTag;
    public static String[] ReadProperties(string path, String[] propertyNames);
    private static string GetTagValue(string block, string tagName);
    private static string GetOpenTag(string tagName);
    private static string GetCloseTag(string tagName);
    private static string ReadXmlBlock(string path, String[] tags);
}
internal class Microsoft.VisualStudio.TestTools.Common.WordWrapper : object {
    private object m_word;
    private static WordWrapper m_instance;
    private static string m_wordProgId;
    private bool m_createdByMyself;
    public object Word { get; }
    public object Documents { get; }
    public static WordWrapper Instance { get; }
    public static bool HasInstance { get; }
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void DoDispose();
    public object get_Word();
    public object get_Documents();
    public static WordWrapper get_Instance();
    public static bool get_HasInstance();
    private static bool WordIsAlive(object word);
    private static object GetDocuments(object word);
    private static bool NoDocumentsOpen(object word);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.ConversionResolver : XmlUrlResolver {
    private string m_baseResourceName;
    unknown ICredentials Credentials {public set; }
    public virtual void set_Credentials(ICredentials value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.Dev10ToOrcasXmlConverter : XmlConverter {
    private static Dev10ToOrcasXmlConverter m_instance;
    private ConversionResolver m_conversionResolver;
    internal static Dev10ToOrcasXmlConverter Instance { get; }
    protected ConversionResolver ConversionResolver { get; }
    protected string XslResourceUri { get; }
    internal static Dev10ToOrcasXmlConverter get_Instance();
    protected virtual ConversionResolver get_ConversionResolver();
    protected virtual string get_XslResourceUri();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.Dev10XsltFunctions : object {
    internal static string NamespaceUri { get; }
    internal static string get_NamespaceUri();
    public static string RegexReplace(string text, string what, string replacement);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.DummyXmlTestStore : object {
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public interface Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore {
    public abstract virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public abstract virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public interface Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom {
    public string ElementName { get; }
    public string NamespaceUri { get; }
    public abstract virtual string get_ElementName();
    public abstract virtual string get_NamespaceUri();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.OrcasToDev10XmlConverter : XmlConverter {
    private static OrcasToDev10XmlConverter m_instance;
    private ConversionResolver m_conversionResolver;
    internal static OrcasToDev10XmlConverter Instance { get; }
    protected ConversionResolver ConversionResolver { get; }
    protected string XslResourceUri { get; }
    internal static OrcasToDev10XmlConverter get_Instance();
    protected virtual ConversionResolver get_ConversionResolver();
    protected virtual string get_XslResourceUri();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.OrcasToWhidbeyXmlConverter : XmlConverter {
    private static OrcasToWhidbeyXmlConverter m_instance;
    private ConversionResolver m_conversionResolver;
    internal static OrcasToWhidbeyXmlConverter Instance { get; }
    protected ConversionResolver ConversionResolver { get; }
    protected string XslResourceUri { get; }
    internal static OrcasToWhidbeyXmlConverter get_Instance();
    internal virtual void ValidateInput(string inputFile);
    protected virtual ConversionResolver get_ConversionResolver();
    protected virtual string get_XslResourceUri();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.OrcasXsltFunctions : object {
    internal static string NamespaceUri { get; }
    internal static string get_NamespaceUri();
    public static string ConvertDateTime(string whidbeyFormatDate);
    public static string ConvertTestOutcome(int outcome);
    public static string ConvertTypeString(string typeName);
    public static string GetSingleCounter(string input, int index);
    public static string Get64BitStringFromCsv(string input);
    public static string GetDecimal(int flags, int hi, int lo, int mid);
    private static void SetInstanceField(Type type, string fieldName, object objectInstance, object value);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.PersistenceProxy`1 : object {
    private T m_master;
    private XmlPersistence m_persistenceHelper;
    internal T Master { get; internal set; }
    internal XmlPersistence PersistenceHelper { get; }
    internal PersistenceProxy`1(T master);
    internal T get_Master();
    internal void set_Master(T value);
    internal XmlPersistence get_PersistenceHelper();
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
[AttributeUsageAttribute("256")]
internal abstract class Microsoft.VisualStudio.TestTools.Common.Xml.StoreXmlAttribute : Attribute {
    public string Location;
    public StoreXmlAttribute(string location);
}
[AttributeUsageAttribute("256")]
internal class Microsoft.VisualStudio.TestTools.Common.Xml.StoreXmlFieldAttribute : StoreXmlAttribute {
    public bool CreateDefaultInstance;
    internal static bool CreateDefaultInstanceDefault;
    public StoreXmlFieldAttribute(string location, bool createDefaultInstance);
    public StoreXmlFieldAttribute(string location);
    private static StoreXmlFieldAttribute();
}
[AttributeUsageAttribute("256")]
internal class Microsoft.VisualStudio.TestTools.Common.Xml.StoreXmlSimpleFieldAttribute : StoreXmlAttribute {
    public object DefaultValue;
    public StoreXmlSimpleFieldAttribute(string location);
    public StoreXmlSimpleFieldAttribute(object defaultValue);
    public StoreXmlSimpleFieldAttribute(string location, object defaultValue);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.TestFormatsConverter : object {
    private static OldFormatDecisionMakerDelegate oldFormatDecisionMaker;
    private static XmlReaderSettings m_readerSettings;
    private static XmlWriterSettings m_writerSettings;
    private static Dictionary`2<ReleaseIndex, XmlConverter> m_converters;
    internal static ConvertFileEventHandler LoadAsCurrentVersionPreConvert;
    internal static ConvertFileEventHandler LoadAsCurrentVersionPostConvert;
    [CompilerGeneratedAttribute]
private static TestMessageDelegate TestMessage;
    internal static OldFormatDecisionMakerDelegate OldFormatDecisionMaker { get; internal set; }
    private static TestFormatsConverter();
    internal static OldFormatDecisionMakerDelegate get_OldFormatDecisionMaker();
    internal static void set_OldFormatDecisionMaker(OldFormatDecisionMakerDelegate value);
    [CompilerGeneratedAttribute]
internal static void add_TestMessage(TestMessageDelegate value);
    [CompilerGeneratedAttribute]
internal static void remove_TestMessage(TestMessageDelegate value);
    internal static XmlReader LoadAsCurrentVersion(string file);
    internal static bool ConvertFile(string inputFile, string outputFile);
    internal static bool ConvertFile(string inputFile, string outputFile, ReleaseName targetRelease);
    private static void ConvertFileHelper(string inputFile, string outputFile, XmlConverter converter);
    protected static XmlConverter GetXmlConverter(ReleaseName sourceRelease, ReleaseName targetRelease);
    private static OldFormatDecision DefaultOldFormatDecisionMaker(string file);
    private static XmlReader CreateXmlReaderOverFile(string file);
    private static bool CanBeWritten(string file);
    private static void OutputTestMessage(string message);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.UnknownHostSpecificData : UnknownStoreXmlObject {
    internal UnknownHostSpecificData(XmlElement xml);
    protected UnknownHostSpecificData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.UnknownStoreXmlObject : object {
    private static string s_serializationFieldName;
    private XmlElement m_xml;
    internal UnknownStoreXmlObject(XmlElement xml);
    protected UnknownStoreXmlObject(SerializationInfo info, StreamingContext context);
    private static UnknownStoreXmlObject();
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement source, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement target, XmlTestStoreParameters parameters);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.UnknownTest : TestElement {
    internal static TestType UnknownTestType;
    private XmlElement m_xml;
    public TestType TestType { get; }
    public bool ReadOnly { get; public set; }
    public string Adapter { get; }
    public string ControllerPlugin { get; }
    public bool CanBeAggregated { get; }
    public string Name { get; public set; }
    internal UnknownTest(XmlElement xml);
    private static UnknownTest();
    public virtual object Clone();
    public virtual TestType get_TestType();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual string get_Adapter();
    public virtual string get_ControllerPlugin();
    public virtual bool get_CanBeAggregated();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual void Load(XmlElement source, XmlTestStoreParameters parameters);
    public virtual void Save(XmlElement target, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.UnknownTestResult : TestResult {
    private XmlElement m_xml;
    internal UnknownTestResult(XmlElement xml);
    public virtual void Save(XmlElement target, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement source, XmlTestStoreParameters parameters);
    public virtual bool IsValid();
    public virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.UnknownTestTypeSpecificData : UnknownStoreXmlObject {
    public string RunConfigurationInformation { get; }
    internal UnknownTestTypeSpecificData(XmlElement xml);
    protected UnknownTestTypeSpecificData(SerializationInfo info, StreamingContext context);
    public sealed virtual string get_RunConfigurationInformation();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.WhidbeyToDev10XmlConverter : XmlConverter {
    private static WhidbeyToDev10XmlConverter m_instance;
    internal static WhidbeyToDev10XmlConverter Instance { get; }
    protected ConversionResolver ConversionResolver { get; }
    protected string XslResourceUri { get; }
    internal static WhidbeyToDev10XmlConverter get_Instance();
    internal virtual void Convert(XmlReader inputReader, Stream outputStream);
    protected virtual ConversionResolver get_ConversionResolver();
    protected virtual string get_XslResourceUri();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.WhidbeyToOrcasXmlConverter : XmlConverter {
    private static WhidbeyToOrcasXmlConverter m_instance;
    private ConversionResolver m_conversionResolver;
    internal static WhidbeyToOrcasXmlConverter Instance { get; }
    protected ConversionResolver ConversionResolver { get; }
    protected string XslResourceUri { get; }
    internal static WhidbeyToOrcasXmlConverter get_Instance();
    protected virtual ConversionResolver get_ConversionResolver();
    protected virtual string get_XslResourceUri();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.WhidbeyXsltFunctions : object {
    private static string m_version;
    private static string m_version8000;
    private static string m_emptyNodeString;
    private static string m_nodeString;
    private static string m_zero;
    private static Dictionary`2<string, string> m_escapeStrings;
    internal static string NamespaceUri { get; }
    private static WhidbeyXsltFunctions();
    internal static string get_NamespaceUri();
    public static string GetValueFromNode(string value, string defaultValue);
    public static string GenerateNodeFromValue(string value, string nodeName, string typeName);
    public static string EscapeValue(string value);
    public static string GenerateHashcode(string value);
    public static string ConvertTypeTo80(string type);
    public static string ConvertDateTime(string dateTime);
    public static string CalculateDurationIf(string starttime, string endtime, string value);
    public static string ConvertOutcomeToInt(string outcome);
    public static string ConvertUnitTestResultTypeToInt(string resultType);
    public static string ConvertResultsStoreToInt(string resultStore);
    public static string ConvertDataAccessMethodToInt(string dataAccessMethod);
    public static string ConvertWebServerTypeToInt(string webServerType);
    public static string ConvertBase64ToByteArray(string base64String);
    public static string LengthOfBytesFromBase64(string base64String);
    public static string ConvertWebLoadStringsToInt(string traceLevel);
    public static string ComputeCheckSumForBytes(string base64String);
    private static bool TryConvertEnumValueToInt(string valueToConvert, String[] enumValues, int defaultValueIfEmpty, Int32& value);
    private static string CapitalizeBoolean(string value);
}
internal abstract class Microsoft.VisualStudio.TestTools.Common.Xml.XmlConverter : object {
    private XsltArgumentList m_argumentList;
    private XmlWriterSettings m_writerSettings;
    private XslCompiledTransform m_transform;
    internal Encoding Encoding { get; }
    protected XslCompiledTransform Transform { get; }
    protected string XslResourceUri { get; }
    protected ConversionResolver ConversionResolver { get; }
    protected XmlWriterSettings WriterSettings { get; }
    protected XsltArgumentList ArgumentList { get; }
    protected XmlConverter(Encoding encoding);
    internal virtual void Convert(XmlReader inputReader, Stream outputStream);
    internal Encoding get_Encoding();
    internal virtual void ValidateInput(string inputFile);
    protected XslCompiledTransform get_Transform();
    protected abstract virtual string get_XslResourceUri();
    protected abstract virtual ConversionResolver get_ConversionResolver();
    protected XmlWriterSettings get_WriterSettings();
    protected XsltArgumentList get_ArgumentList();
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.XmlElementToClassMapping : object {
    private static XmlElementToClassMapping s_mapping;
    private XmlSchemaSet m_customSchemas;
    private Dictionary`2<string, Dictionary`2<string, DelayLoadType>> m_namespaceToDictionary;
    private Dictionary`2<string, DelayLoadType> m_builtInElementToType;
    public static XmlElementToClassMapping Mapping { get; }
    internal XmlSchemaSet CustomSchemas { get; }
    public static XmlElementToClassMapping get_Mapping();
    public Type GetType(string namespaceUri, string elementName);
    private void LoadBuiltInTypes();
    internal void TryAddBuiltInType(string elementName, string requestedType, Type substituteType);
    internal XmlSchemaSet get_CustomSchemas();
    private void LoadCustomMappings();
    private void TryAddSchema(string file);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.XmlFilePersistence : XmlPersistence {
    public static string RootObjectType;
    public static string DirectoryPath;
    internal static string TopLevelFileParameter;
    public XmlFilePersistence(string prefix, string namespaceUri);
    internal static void SaveToFile(IXmlTestStore value, string fileName);
    internal static void SaveToFile(IXmlTestStore value, string fileName, string rootElementName);
    internal static XmlElement SaveToXmlElement(IXmlTestStore value);
    internal static XmlElement SaveToXmlElement(string rootElementName, IXmlTestStore value);
    internal static T LoadFromFile(string fileName);
    internal static T LoadFromFile(string fileName, bool useRegisteredNamespacesForConversion);
    internal static object LoadFromFile(string fileName, Type expectedType);
    internal static XmlDocument LoadFile(string fileName);
    internal static XmlDocument LoadFile(string fileName, bool useRegisteredNamespacesForConversion);
    private static bool IsFilePreDev10Version(string filePath);
    public void SaveToFile(string fileName, IXmlTestStore instance, string rootElementName);
    public XmlElement SaveToXmlElement(IXmlTestStore instance, string rootElementName);
    internal static void SaveTestList(TestListCategory testList, string fileName);
    internal static void SaveTestList(List`1<TestListCategory> categories, string fileName);
    internal static List`1<TestListCategory> LoadTestList(string fileName);
    public static void SaveTestRunConfiguration(string fileName, TestRunConfiguration runConfiguration);
    public static XmlElement SaveTestRunConfiguration(TestRunConfiguration runConfiguration);
    public static TestRunConfiguration LoadTestRunConfiguration(string fileName);
    public static TestRunConfiguration LoadTestRunConfiguration(string fileName, bool validate);
    public static void SaveNetworkEmulationProfile(string fileName, NetworkEmulationProfile profile);
    public static XmlElement SaveNetworkEmulationProfile(NetworkEmulationProfile profile);
    public static NetworkEmulationProfile LoadNetworkEmulationProfile(string fileName);
    public static NetworkEmulationProfile LoadNetworkEmulationProfile(string fileName, bool validate);
    public static void SaveTestRun(string fileName, TestRun run, IEnumerable results);
    public static void SaveTestRun(string fileName, TestRun run, IEnumerable results, bool isMiniTrx);
    public static TestRun LoadTestRun(string fileName, List`1& results, bool summaryOnly);
    public static TestRun LoadTestRun(string fileName, List`1& results, bool summaryOnly, bool isMiniTrx);
    internal static ITestElement LoadTest(string file);
    internal void SaveTest(TestElement test);
    public static void SaveTestResultDetail(string fileName, TestResultDetail detail);
    public static TestResultDetail LoadTestResultDetail(string fileName, string trxFilePath);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.XmlLoader : object {
    private static Nullable`1<bool> isXsdValidationEnabled;
    private static XmlSchemaSet schemas;
    internal static HandleXmlValidationErrorDelegate HandleXmlValidationErrors;
    internal static string VststXsd;
    private static bool IsXsdValidationEnabled { get; }
    internal static XmlSchemaSet Schemas { get; }
    private static XmlLoader();
    private static bool get_IsXsdValidationEnabled();
    internal static XmlSchemaSet get_Schemas();
    private static XmlSchemaSet GetKnownSchemas();
    public static XmlDocument LoadXmlDocumentFromStream(Stream stream);
    public static XmlDocument LoadXmlDocumentFromFile(string fileName);
    public static XmlDocument LoadXmlDocumentFromString(string xmlString);
    internal static XmlDocument Load(string source, XmlReader reader);
    private static XmlDocument LoadAndValidate(string source, XmlReader reader);
    private static void OnXmlValidationError(string source, string errors);
    internal static XmlSchema LoadXmlSchemaFromResource(string schemaResourceName);
    internal static XmlSchema LoadXmlSchemaFromResource(Assembly targetAssembly, string schemaResourceName);
    internal static XmlSchema LoadSchema(string name, XmlReader xmlReader);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.XmlPersistence : object {
    private string prefix;
    private string namespaceUri;
    private static string defaultNamespacePrefixEquivalent;
    private Version m_assemblyVersion;
    private XmlNamespaceManager xmlNamespaceManager;
    private static Dictionary`2<string, string> queryCache;
    private static Type GuidType;
    private static Type ByteArrayType;
    private static Type TestElementType;
    private static Type TestResultType;
    private static Type ITestTypeSpecificConfigurationDataType;
    private static Type BoolType;
    private static string EmptyGuidString;
    private static Dictionary`2<Type, string> typeToPersistenceString;
    private static Dictionary`2<Type, IEnumerable`1<FieldPersistenceInfo>> typeToPersistenceInfoCache;
    private static Type TimeSpanType;
    private static Type DateTimeType;
    private static Type UriType;
    internal static string DateTimePersistenceFormat;
    internal static string DateTimeUtcPersistenceFormat;
    public XmlPersistence(string prefix, string namespaceUri);
    private static XmlPersistence();
    private static Type FindType(XmlElement xmlElement);
    private string ProcessXPathQuery(string queryIn);
    public XmlNodeList LocationToXmlNodes(XmlElement element, string location);
    public XmlNode LocationToXmlNode(XmlElement element, string location);
    internal XmlElement FindFirstChildElement(XmlNode parent);
    public XmlNode EnsureLocationExists(XmlElement xml, string location);
    public XmlNode EnsureLocationExists(XmlElement xml, string location, string namespaceUri);
    private string GetNamespaceUriOrDefault(string namespaceUri);
    public XmlElement CreateElement(XmlElement xml, string name);
    public XmlElement CreateElement(XmlElement xml, string name, string elementNamespaceUri);
    internal XmlElement CreateElement(XmlElement parent, object instance);
    internal XmlElement CreateElement(XmlElement parent, string name, object instance);
    public XmlElement CreateRootElement(string name);
    public XmlElement CreateRootElement(string name, string namespaceUri);
    internal NewElementCreateData GetElementCreateData(object persistee);
    public void SaveSimpleField(XmlElement xml, string location, object value, object defaultValue);
    public T LoadSimpleField(XmlElement xml, string location, T defaultValue);
    public string LoadXmlValue(XmlElement xml, string location);
    private object LoadSimpleField(XmlElement xml, string location, Type fieldType, object defaultValue);
    public Guid LoadGuid(XmlElement xml, string location);
    public void SaveGuid(XmlElement xml, string location, Guid guid);
    public V LoadObject(XmlElement xmlItem, string itemLocation, XmlTestStoreParameters parameters);
    public V LoadObject(XmlElement xmlItem, string itemLocation, XmlTestStoreParameters parameters, bool useDynamicMapping);
    public IXmlTestStore LoadIXmlTestStore(XmlElement xmlItem, string itemLocation, XmlTestStoreParameters parameters, Type defaultType);
    public IXmlTestStore LoadIXmlTestStore(XmlElement xmlItem, string itemLocation, XmlTestStoreParameters parameters, Type defaultType, bool createInstanceIfNoXml);
    public IXmlTestStore LoadIXmlTestStore(XmlElement xmlItem, string itemLocation, XmlTestStoreParameters parameters, Type defaultType, bool createInstanceIfNoXml, bool useDynamicMapping);
    public void SaveObject(object objectToSave, XmlElement parentXml, string location, XmlTestStoreParameters parameters);
    public void SaveObject(object objectToSave, XmlNode nodeToSaveAt, XmlTestStoreParameters parameters);
    public void SaveObject(object objectToSave, XmlNode nodeToSaveAt, XmlTestStoreParameters parameters, object defaultValue);
    private void SaveSimpleData(object value, XmlNode nodeToSaveAt, object defaultValue);
    internal static string DateTimeToString(DateTime dateTime);
    private static string GetAssemblyQualifiedNameForPersistence(Type type);
    public void SaveType(XmlElement xml, string location, Type type);
    public Type LoadType(XmlElement xml, string location);
    internal static string MakeAssemblyQualifiedClassNameVersionAndCultureIndependent(string typeName);
    private static string CutOutNameValuePair(string input, string nameToCutOut);
    public void SaveException(Exception ex, XmlElement target, string location);
    public Exception LoadException(XmlElement xml, string location);
    public ArrayList LoadArrayList(XmlElement parentXml, string listElementName, string itemLocation, XmlTestStoreParameters parameters);
    public List`1<V> LoadList(XmlElement parentXml, string listElementName, string itemLocation, XmlTestStoreParameters parameters);
    public void SaveIEnumerable(IEnumerable list, XmlElement element, string listXmlElement, string itemLocation, string itemElementName, XmlTestStoreParameters parameters);
    public void SaveList(IList`1<V> list, XmlElement element, string listXmlElement, string itemLocation, string itemElementName, XmlTestStoreParameters parameters);
    internal static V CreateObject(XmlNode xmlItem);
    internal static object CreateObject(XmlNode xmlItem, Type defaultType);
    internal static object CreateObject(XmlNode xmlItem, Type defaultType, bool useDynamicMapping);
    public void SaveHashtable(Hashtable ht, XmlElement element, string location, string keyLocation, string valueLocation, string itemElementName, XmlTestStoreParameters parameters);
    public Hashtable LoadHashtable(XmlElement element, string location, string keyLocation, string valueLocation, XmlTestStoreParameters parameters);
    public Dictionary`2<K, V> LoadDictionary(XmlElement element, string location, string keyLocation, string valueLocation, XmlTestStoreParameters parameters);
    public Dictionary`2<K, V> LoadDictionary(IEqualityComparer`1<K> comparer, XmlElement element, string location, string keyLocation, string valueLocation, XmlTestStoreParameters parameters);
    public StringDictionary LoadStringDictionary(XmlElement element, string location, string keyLocation, string valueLocation, XmlTestStoreParameters parameters);
    public void SaveStringDictionary(StringDictionary dict, XmlElement element, string location, string keyLocation, string valueLocation, string itemElementName, XmlTestStoreParameters parameters);
    public void SaveDictionary(IDictionary`2<K, V> dict, XmlElement element, string location, string keyLocation, string valueLocation, string itemElementName, XmlTestStoreParameters parameters);
    private static IEnumerable`1<FieldPersistenceInfo> GetFieldInfos(Type type);
    private static IEnumerable`1<FieldPersistenceInfo> ReflectFields(Type type);
    internal static void LoadUsingReflection(XmlElement element, object instance, Type requestedType, XmlTestStoreParameters parameters);
    internal static void SaveUsingReflection(XmlElement element, object instance, Type requestedType, XmlTestStoreParameters parameters);
    internal static void LoadUsingReflection(XmlElement element, object instance, Type requestedType, XmlTestStoreParameters parameters, string prefix, string namespaceUri);
    internal static void SaveUsingReflection(XmlElement element, object instance, Type requestedType, XmlTestStoreParameters parameters, string prefix, string namespaceUri);
    public void SaveSingleFields(XmlElement parentXml, object instance, XmlTestStoreParameters parameters);
    public void SaveSingleFields(XmlElement parentXml, object instance, Type requestedType, XmlTestStoreParameters parameters);
    public void LoadSingleFields(XmlElement parentXml, object instance, XmlTestStoreParameters parameters);
    internal void LoadSingleFields(XmlElement parentXml, object instance, Type requestedType, XmlTestStoreParameters parameters);
    internal void LoadSingleFields(XmlElement parentXml, object instance, Type requestedType, XmlTestStoreParameters parameters, bool ignoreDefaultValues);
    internal static DateTime DateTimeFromRaw(object value);
    private static T GetAttribute(FieldInfo fieldInfo);
    private static string GetFieldLocation(FieldInfo fieldInfo);
    private static string GetDefaultFieldLocation(FieldInfo fieldInfo);
    private static bool ImplementsIXmlTestStore(Type type);
    public void SaveCounters(XmlElement xml, string location, Int32[] counters);
    public int LoadCounters(XmlElement xml, string location, Int32[] counters);
    private object GetProperValue(object value, Type fieldType);
    private static string RemoveInvalidXmlChar(string str);
    private static string ReplaceInvalidCharacterWithUniCodeEscapeSequence(Match match);
}
internal class Microsoft.VisualStudio.TestTools.Common.Xml.XmlPersistenceVersions : object {
    internal static string CurrentNamespaceUri;
    private static List`1<ReleaseInfo> s_registeredReleases;
    internal static List`1<ReleaseInfo> RegisteredReleases { get; }
    private static XmlPersistenceVersions();
    internal static List`1<ReleaseInfo> get_RegisteredReleases();
    internal static string GetReleaseUri(ReleaseName release);
    internal static bool IsCurrentVersion(string file);
    internal static ReleaseName GetFileFormatReleaseName(string file);
}
public class Microsoft.VisualStudio.TestTools.Common.Xml.XmlTestStoreParameters : Dictionary`2<string, object> {
    public static XmlTestStoreParameters GetParameters();
    public bool Contains(string parameter);
}
public class Microsoft.VisualStudio.TestTools.Common.XmlTestReader : object {
    private static Type StringBuilderType;
    private static Type GuidType;
    private static Type StringType;
    private static Type TimeSpanType;
    private static bool s_writeVerboseTraceInfo;
    internal static string RootElementName;
    internal static string TypeAttrName;
    internal static string VersionElementName;
    internal static string VersionBuildAttributeName;
    internal static string VersionRevisionAttributeName;
    internal static string VersionBranchAttributeName;
    internal static string Branch;
    internal static string KeyElementName;
    internal static string ValueElementName;
    internal static string ArrayElementElementName;
    internal static char SimpleArrayElementSeparator;
    private static Char[] SimpleArrayElementSeparatorArray;
    private XmlTextReader reader;
    private string fileName;
    private ConversionTable m_table;
    private Dictionary`2<string, Type> m_typeNameToTypeMap;
    private UpgradeType m_upgradeType;
    private static Dictionary`2<FieldInfo, string> s_persistenceNameCache;
    public static bool WriteVerboseTraceInfo { get; public set; }
    private ConversionTable Table { get; }
    private static XmlTestReader();
    public static bool get_WriteVerboseTraceInfo();
    public static void set_WriteVerboseTraceInfo(bool value);
    private ConversionTable get_Table();
    private void Error(string what);
    private void Error(string what, Exception e);
    private void CheckNodeType(XmlNodeType expected);
    private void CheckElementName(string expectedName);
    private bool AdvanceReader();
    private Type ReadTypeAttribute(bool mustExist);
    private Type InstantiateType(string typeName);
    private Type InstantiateTypeImpl(string typeName);
    private static string RemoveVersionCulturePkInfo(string typeName);
    internal static string GetPersistenceNameForField(FieldInfo field);
    internal static bool IsASimpleType(Type fieldType);
    internal static bool CanUseSimpleArray(Type elementType);
    private object ReadSimpleType(Type type);
    private object ReadOneClass(string classElementName, Type type);
    private void SkipCurrentElement();
    private object ReadOneElement(string elementName, Type fieldType);
    private ArrayList ReadArray(string arrayTagName);
    private ArrayList ReadSimpleArrayValues(ArrayList list, Type elementType);
    private Hashtable ReadHashtable(string hashTagName);
    public Object[] Read(string location);
    private bool ReadVersionTag();
    public TestRun ReadTestRunSummary(string location);
}
public class Microsoft.VisualStudio.TestTools.Common.XmlTestWriter : object {
    private static string MsCorLibAssemblyName;
    private static string VsQtCommonAssemblyName;
    private XmlTextWriter writer;
    private Dictionary`2<Type, List`1<FieldPersistence>> m_typeToFieldInfoMap;
    private Dictionary`2<Assembly, string> m_assemblyToAssemblyNameMap;
    private Dictionary`2<Type, string> m_typeToShortNameMap;
    private static XmlTestWriter();
    private List`1<FieldPersistence> GetFieldPersistenceInfos(Type type);
    private string ShortAssemblyName(Type type);
    private void WriteOneClass(object obj);
    private void WriteOneField(string name, object val);
    private void WriteArray(string name, Array array, Type fieldType);
    private void WriteHashtable(string name, Hashtable hash);
    public void Write(string destination, Object[] tests);
    public void Write(string destination, Object[] tests, Formatting formatting);
}
internal class Microsoft.VisualStudio.TestTools.Common.XmlUtility : object {
    public static XmlDocument LoadXmlDocumentFromFile(string fileName);
    public static XmlDocument LoadXmlDocumentFromString(string input);
}
internal static class Microsoft.VisualStudio.TestTools.Diagnostics.EqtTrace : object {
    private static TraceSwitch s_traceLevelSwitch;
    private static string s_processName;
    private static int s_processId;
    private static int s_timesCanWriteToSystemLog;
    private static string SystemEventLogSource;
    private static bool s_isTracingOn;
    private static string DefaultEventLogSource;
    private static TraceSwitch s_eventLogSwitch;
    private static string s_eventSource;
    private static EventLog s_eventLog;
    private static object s_eventLogLock;
    private static bool s_isEventLogTracingOn;
    public static TraceLevel TraceLevel { get; public set; }
    public static bool TraceError { get; }
    public static bool TraceWarning { get; }
    public static bool TraceInfo { get; }
    public static bool TraceVerbose { get; }
    public static TraceLevel EventLogTraceLevel { get; public set; }
    private static EventLog EventLog { get; }
    private static EqtTrace();
    private static bool IsTracingEnabledInRegistry(string fullDiagnosticsSubKeyPath, string enableTracingName);
    private static TraceLevel GetTraceLevelFromRegistry(string fullDiagnosticsSubKeyPath, string traceLevelName, TraceLevel defaultTraceLevel);
    private static bool IsEventLogTracingDisabledInConfig();
    public static TraceLevel get_TraceLevel();
    public static void set_TraceLevel(TraceLevel value);
    public static bool get_TraceError();
    public static bool get_TraceWarning();
    public static bool get_TraceInfo();
    public static bool get_TraceVerbose();
    public static bool ShouldTrace(TraceLevel traceLevel);
    public static TraceLevel get_EventLogTraceLevel();
    public static void set_EventLogTraceLevel(TraceLevel value);
    private static TraceLevel GetTraceLevel(TraceSwitch traceSwitch);
    private static void SetTraceLevel(TraceSwitch traceSwitch, TraceLevel traceLevel);
    public static RemoteEqtTrace GetRemoteEqtTrace(AppDomain domain);
    public static void SetEventSource(string sourceName);
    private static EventLog get_EventLog();
    [ConditionalAttribute("TRACE")]
public static void Fail(string message);
    [ConditionalAttribute("TRACE")]
public static void FailIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void FailUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void Fail(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void FailIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void FailUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Error(string message);
    [ConditionalAttribute("TRACE")]
public static void Error(Exception exceptionToTrace);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void Error(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Warning(string message);
    [ConditionalAttribute("TRACE")]
public static void Warning(Exception exceptionToTrace);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void Warning(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Info(string message);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void Info(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseXml(XmlNode xdoc);
    private static void Error(Func`1<string> messageProvider);
    private static void Warning(Func`1<string> messageProvider);
    private static void Info(Func`1<string> messageProvider);
    private static void Verbose(Func`1<string> messageProvider);
    private static void TraceIfNeeded(Predicate`1<TraceSwitch> traceLevelChecker, TraceLevel traceLevel, EventLogEntryType eventLogEntryType, Func`1<string> messageProvider);
    private static string GetProcessName();
    private static int GetProcessId();
    private static bool CheckIsTracingOn(TraceLevel traceLevel);
    private static void WriteLine(TraceLevel level, string message);
    private static void LogIgnoredException(Exception e);
    private static void WriteEventLogEntry(string message, EventLogEntryType logType);
    private static string Format(string format, Object[] args);
    private static string FormatException(Exception exceptionToTrace);
}
internal class Microsoft.VisualStudio.TestTools.Diagnostics.RemoteEqtTrace : MarshalByRefObject {
    public TraceLevel TraceLevel { get; public set; }
    public TraceLevel EventLogTraceLevel { get; public set; }
    public TraceLevel get_TraceLevel();
    public void set_TraceLevel(TraceLevel value);
    public TraceLevel get_EventLogTraceLevel();
    public void set_EventLogTraceLevel(TraceLevel value);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.AccessDeniedException : EqtException {
    internal AccessDeniedException(EqtMessage message);
    public AccessDeniedException(string msg);
    public AccessDeniedException(string msg, Exception inner);
    protected AccessDeniedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.CommandException : EqtException {
    internal CommandException(EqtMessage message);
    public CommandException(string msg);
    public CommandException(string msg, Exception inner);
    protected CommandException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.CorruptedResultException : EqtDataException {
    internal CorruptedResultException(EqtMessage message);
    public CorruptedResultException(string msg);
    public CorruptedResultException(string msg, Exception inner);
    protected CorruptedResultException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.DuplicateIdException : EqtDataException {
    internal DuplicateIdException(EqtMessage message);
    public DuplicateIdException(string msg);
    public DuplicateIdException(string msg, Exception inner);
    protected DuplicateIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.EqtDataException : EqtException {
    internal EqtDataException(EqtMessage message);
    public EqtDataException(string msg);
    public EqtDataException(string msg, Exception inner);
    protected EqtDataException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.EqtException : Exception {
    private EqtMessage m_message;
    [CompilerGeneratedAttribute]
private bool <IsWrapper>k__BackingField;
    public string Message { get; }
    internal bool IsWrapper { get; private set; }
    internal EqtException(EqtMessage message);
    internal EqtException(Exception exceptionToWrap);
    internal EqtException(EqtMessage message, Exception inner);
    public EqtException(string message);
    public EqtException(string message, Exception innerException);
    protected EqtException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
internal bool get_IsWrapper();
    [CompilerGeneratedAttribute]
private void set_IsWrapper(bool value);
    internal Exception Unwrap();
}
public class Microsoft.VisualStudio.TestTools.Exceptions.ErrorReadingStorageException : EqtDataException {
    internal ErrorReadingStorageException(EqtMessage message);
    public ErrorReadingStorageException(string msg);
    public ErrorReadingStorageException(string msg, Exception inner);
    protected ErrorReadingStorageException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.FailedToInstantiateTypeException : EqtDataException {
    private string m_type;
    public string Type { get; }
    internal FailedToInstantiateTypeException(EqtMessage message);
    public FailedToInstantiateTypeException(string msg);
    public FailedToInstantiateTypeException(string msg, Exception inner);
    internal FailedToInstantiateTypeException(string message, string typeFailedToInstantiate, Exception inner);
    protected FailedToInstantiateTypeException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_Type();
}
public class Microsoft.VisualStudio.TestTools.Exceptions.IdNotFoundException : EqtDataException {
    internal IdNotFoundException(EqtMessage message);
    public IdNotFoundException(string msg);
    public IdNotFoundException(string msg, Exception inner);
    protected IdNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.InternalException : EqtDataException {
    internal InternalException(EqtMessage message);
    public InternalException(string msg);
    public InternalException(string msg, Exception inner);
    protected InternalException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.InvalidDataInStorageException : EqtDataException {
    internal InvalidDataInStorageException(EqtMessage message);
    public InvalidDataInStorageException(string msg);
    public InvalidDataInStorageException(string msg, Exception inner);
    protected InvalidDataInStorageException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Exceptions.InvalidRunConfigException : EqtDataException {
    private RunConfigErrors m_errors;
    public RunConfigErrors Errors { get; public set; }
    public InvalidRunConfigException(EqtMessage message);
    public InvalidRunConfigException(RunConfigErrors errors);
    public InvalidRunConfigException(string msg);
    public InvalidRunConfigException(string msg, Exception inner);
    protected InvalidRunConfigException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public RunConfigErrors get_Errors();
    public void set_Errors(RunConfigErrors value);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.InvalidTestObjectException : EqtDataException {
    public InvalidTestObjectException(object invalid);
    public InvalidTestObjectException(string msg);
    public InvalidTestObjectException(string msg, Exception inner);
    protected InvalidTestObjectException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Exceptions.InvalidTestRunException : EqtDataException {
    private TestRunErrors m_errors;
    internal TestRunErrors Errors { get; }
    public string Message { get; }
    internal InvalidTestRunException(TestRunErrors errors);
    protected InvalidTestRunException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal TestRunErrors get_Errors();
    public virtual string get_Message();
}
internal class Microsoft.VisualStudio.TestTools.Exceptions.LicenseValidationException : EqtException {
    internal LicenseValidationException(EqtMessage message);
    public LicenseValidationException(string msg);
    public LicenseValidationException(string msg, Exception inner);
    private LicenseValidationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Exceptions.RigExecutionException : EqtException {
    private bool m_shouldAbortTestRun;
    internal bool ShouldAbortTestRun { get; }
    public RigExecutionException(EqtMessage message);
    public RigExecutionException(EqtMessage message, bool abortTestRun);
    public RigExecutionException(string msg);
    public RigExecutionException(string msg, Exception inner);
    protected RigExecutionException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal bool get_ShouldAbortTestRun();
}
public class Microsoft.VisualStudio.TestTools.Exceptions.SaveNotSupportedException : InternalException {
    public SaveNotSupportedException(Type type);
    public SaveNotSupportedException(string msg);
    public SaveNotSupportedException(string msg, Exception inner);
    protected SaveNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.SingleInstanceApplicationException : EqtException {
    internal SingleInstanceApplicationException(EqtMessage message);
    public SingleInstanceApplicationException(string msg);
    public SingleInstanceApplicationException(string msg, Exception inner);
    protected SingleInstanceApplicationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.StorageNotAccessibleException : EqtDataException {
    internal StorageNotAccessibleException(EqtMessage message);
    public StorageNotAccessibleException(string msg);
    public StorageNotAccessibleException(string msg, Exception inner);
    protected StorageNotAccessibleException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Exceptions.TestFileConversionAbortedException : EqtDataException {
    private bool m_isConversionCanceled;
    internal bool IsCanceled { get; }
    public TestFileConversionAbortedException(EqtMessage message);
    public TestFileConversionAbortedException(EqtMessage message, bool isCanceled);
    public TestFileConversionAbortedException(string msg);
    public TestFileConversionAbortedException(string msg, Exception inner);
    protected TestFileConversionAbortedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal bool get_IsCanceled();
}
internal class Microsoft.VisualStudio.TestTools.Exceptions.TestValidationException : EqtDataException {
    internal TestValidationException(EqtMessage message);
    public TestValidationException(string msg);
    public TestValidationException(string msg, Exception inner);
    protected TestValidationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Exceptions.UnknownTestTypeException : EqtDataException {
    internal UnknownTestTypeException(EqtMessage message);
    public UnknownTestTypeException(string msg);
    public UnknownTestTypeException(string msg, Exception inner);
    protected UnknownTestTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Exceptions.WrongResultTypeException : EqtDataException {
    internal WrongResultTypeException(EqtMessage message);
    public WrongResultTypeException(string msg);
    public WrongResultTypeException(string msg, Exception inner);
    protected WrongResultTypeException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.Framework.ReadOnlyDictionary`2 : object {
    private IDictionary`2<TKey, TValue> m_original;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    public TValue Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ReadOnlyDictionary`2(IDictionary`2<TKey, TValue> originalDictionary);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    public TValue get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void ThrowNotSupported();
}
internal class Microsoft.VisualStudio.TestTools.Framework.Test : object {
    private ITestElement m_testElement;
    private List`1<Test> m_children;
    public Guid Id { get; }
    public Guid TestTypeId { get; }
    public string Name { get; }
    public TestInformation Information { get; }
    public TestState State { get; }
    public string Description { get; }
    public int Priority { get; }
    public string Owner { get; }
    public TimeSpan Timeout { get; }
    public ReadOnlyCollection`1<string> Categories { get; }
    public bool HasChildren { get; }
    public ReadOnlyCollection`1<Test> Children { get; }
    internal ITestElement TestElement { get; }
    internal Test(ITestElement testElement);
    public Guid get_Id();
    public Guid get_TestTypeId();
    public string get_Name();
    public TestInformation get_Information();
    public TestState get_State();
    public string get_Description();
    public int get_Priority();
    public string get_Owner();
    public TimeSpan get_Timeout();
    public ReadOnlyCollection`1<string> get_Categories();
    public bool get_HasChildren();
    public ReadOnlyCollection`1<Test> get_Children();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal ITestElement get_TestElement();
    internal void AddChildren(IEnumerable`1<Test> children);
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestCollection : object {
    private List`1<Test> m_tests;
    internal EventHandler`1<WarningEventArgs> Warning;
    public int Count { get; }
    public void Load(string testContainerFile);
    public void Load(IEnumerable`1<string> testContainerFiles);
    public void Add(Test test);
    public void Add(IEnumerable`1<Test> tests);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Test> GetEnumerator();
    public int get_Count();
    private void OnTmiWarning(object sender, WarningEventArgs args);
    private static void AssignChildren(Test test, ITmiInternal tmi, Dictionary`2<Guid, object> testIdsOkToProcess);
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestCompletedEventArgs : TestEventArgs {
    private int m_completedCount;
    private int m_totalCount;
    public int CompletedCount { get; }
    public int TotalCount { get; }
    public TestResult TestResult { get; }
    internal TestCompletedEventArgs(TestRunEntry testRunEntry, TestResultId resultId, int completedCount, int totalCount);
    public int get_CompletedCount();
    public int get_TotalCount();
    public TestResult get_TestResult();
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestEventArgs : EventArgs {
    private TestRunEntry m_testRunEntry;
    private TestResultId m_resultId;
    public Test Test { get; }
    internal TestRunEntry TestRunEntry { get; }
    internal TestResultId ResultId { get; }
    internal TestEventArgs(TestRunEntry testRunEntry, TestResultId resultId);
    public Test get_Test();
    internal TestRunEntry get_TestRunEntry();
    internal TestResultId get_ResultId();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.Framework.TestExtensions : object {
    [ExtensionAttribute]
public static List`1<Test> ConvertToTests(IEnumerable`1<ITestElement> testElements);
    [ExtensionAttribute]
public static List`1<ITestElement> ConvertToTestElements(IEnumerable`1<Test> tests);
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestFrameworkException : Exception {
    public TestFrameworkException(string message);
    public TestFrameworkException(string message, Exception innerException);
    protected TestFrameworkException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestInformation : object {
    private Test m_test;
    public string FullContainerName { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string ClassName { get; }
    public string MethodName { get; }
    public ReadOnlyDictionary`2<string, string> Properties { get; }
    internal TestInformation(Test test);
    public string get_FullContainerName();
    public string get_FullName();
    public string get_Namespace();
    public string get_ClassName();
    public string get_MethodName();
    public ReadOnlyDictionary`2<string, string> get_Properties();
    private string GetUnitTestInformationData(Func`2<IUnitTestInformation, string> dataObtainer);
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestResult : object {
    private TestResult m_testElementResult;
    public Guid Id { get; }
    public string TestName { get; }
    public TestOutcome Outcome { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public TimeSpan Duration { get; }
    public string ComputerName { get; }
    public string ErrorMessage { get; }
    public string ErrorStackTrace { get; }
    public string CollectorData { get; }
    public bool HasChildren { get; }
    public ReadOnlyCollection`1<TestResult> Children { get; }
    public Test Test { get; }
    internal TestResult TestElementResult { get; }
    internal TestResult(TestResult testElementResult);
    public Guid get_Id();
    public string get_TestName();
    public TestOutcome get_Outcome();
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public TimeSpan get_Duration();
    public string get_ComputerName();
    public string get_ErrorMessage();
    public string get_ErrorStackTrace();
    public string get_CollectorData();
    public bool get_HasChildren();
    public ReadOnlyCollection`1<TestResult> get_Children();
    public Test get_Test();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal TestResult get_TestElementResult();
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestRunCompletedEventArgs : TestRunEventArgs {
    public TestRunResult Result { get; }
    public bool IsCancelled { get; }
    internal TestRunCompletedEventArgs(TestRunEntry testRunEntry);
    public TestRunResult get_Result();
    public bool get_IsCancelled();
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestRunEntry : object {
    private TestRun m_testRun;
    private TestCollectionInternal m_tests;
    private TestResultCollectionInternal m_testResults;
    private object m_userToken;
    private ITmiInternal m_tmi;
    private ManualResetEvent m_testRunCompletedWaitHandle;
    [CompilerGeneratedAttribute]
private bool <IsCancelled>k__BackingField;
    internal ITmiInternal Tmi { get; }
    internal TestRun TestRun { get; internal set; }
    internal TestResultCollectionInternal TestResults { get; }
    internal TestCollectionInternal Tests { get; }
    internal bool IsCancelled { get; internal set; }
    internal object UserToken { get; }
    public ReadOnlyCollection`1<TestRunMessage> TestRunMessages { get; }
    internal ManualResetEvent TestRunCompletedWaitHandle { get; }
    internal int TotalTestCount { get; }
    internal int CompletedTestCount { get; }
    internal TestRunEntry(ITmiInternal tmi, TestRun testRun, object userToken);
    public sealed virtual void Dispose();
    internal ITmiInternal get_Tmi();
    internal TestRun get_TestRun();
    internal void set_TestRun(TestRun value);
    internal TestResultCollectionInternal get_TestResults();
    internal TestCollectionInternal get_Tests();
    [CompilerGeneratedAttribute]
internal bool get_IsCancelled();
    [CompilerGeneratedAttribute]
internal void set_IsCancelled(bool value);
    internal object get_UserToken();
    public ReadOnlyCollection`1<TestRunMessage> get_TestRunMessages();
    internal ManualResetEvent get_TestRunCompletedWaitHandle();
    internal int get_TotalTestCount();
    internal int get_CompletedTestCount();
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestRunEventArgs : EventArgs {
    private TestRunEntry m_testRunEntry;
    private TestSettings m_testSettings;
    public object UserToken { get; }
    internal TestRunEntry TestRunEntry { get; }
    internal TestRunEventArgs(TestRunEntry testRunEntry);
    public object get_UserToken();
    internal TestRunEntry get_TestRunEntry();
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestRunMessage : object {
    private RunInfo m_runInfo;
    public TestRunMessageSeverity Severity { get; }
    public string Text { get; }
    public DateTime Timestamp { get; }
    internal TestRunMessage(RunInfo runInfo);
    public TestRunMessageSeverity get_Severity();
    public string get_Text();
    public DateTime get_Timestamp();
    private static TestRunMessageSeverity ConvertOutcomeToMessageType(TestOutcome outcome);
}
internal enum Microsoft.VisualStudio.TestTools.Framework.TestRunMessageSeverity : Enum {
    public int value__;
    public static TestRunMessageSeverity Information;
    public static TestRunMessageSeverity Warning;
    public static TestRunMessageSeverity Error;
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestRunner : object {
    private Dictionary`2<Guid, TestRunEntry> m_runEntries;
    private Dictionary`2<object, Guid> m_userTokenToRunIdMap;
    private object m_runEntriesLock;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestRunStartedEventArgs> RunStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestRunCompletedEventArgs> RunCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestStartedEventArgs> TestStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestCompletedEventArgs> TestCompleted;
    public TestRunResult Run(IEnumerable`1<Test> testsToRun);
    public TestRunResult Run(IEnumerable`1<Test> testsToRun, TestSettings testSettings);
    public void RunAsync(IEnumerable`1<Test> testsToRun, object userToken);
    public void RunAsync(IEnumerable`1<Test> testsToRun, TestSettings testSettings, object userToken);
    public void CancelRunAsync(object userToken);
    [CompilerGeneratedAttribute]
public void add_RunStarted(EventHandler`1<TestRunStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RunStarted(EventHandler`1<TestRunStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RunCompleted(EventHandler`1<TestRunCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RunCompleted(EventHandler`1<TestRunCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TestStarted(EventHandler`1<TestStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TestStarted(EventHandler`1<TestStartedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TestCompleted(EventHandler`1<TestCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TestCompleted(EventHandler`1<TestCompletedEventArgs> value);
    private TestRunEntry QueueTestRun(IEnumerable`1<Test> testsToRun, TestSettings testSettings, object userToken);
    private void OnTmiTestRunStarted(object sender, TestRunEventArgs args);
    private void OnTmiTestRunCompleted(object sender, TestRunEventArgs args);
    private void OnTmiTestStarted(object sender, TestResultEventArgs args);
    private void OnTmiTestCompleted(object sender, TestResultEventArgs args);
    private void OnTmiTestEvent(TestResultEventArgs args, Delegate delegateToFire, Action`2<TestRunEntry, TestResult> testResultAction, Func`3<TestRunEntry, TestResultId, EventArgs> testEventArgsCreator);
    private ITmiInternal CreateTmi();
    private static void AssertTestsToRun(IEnumerable`1<Test> testsToRun);
    private static TestSettings PrepareTestSettings(TestSettings originalTestSettings, ITmiInternal tmi);
    private TestRunEntry GetRunEntry(Guid runId);
    private TestRunEntry GetRunEntry(object userToken);
    private void ValidateTestIdsForUniqueness(IEnumerable`1<Test> tests);
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestRunResult : object {
    private TestRunEntry m_runEntry;
    private TestSettings m_testSettings;
    public TestOutcome Outcome { get; }
    public ReadOnlyCollection`1<TestResult> TestResults { get; }
    public ReadOnlyCollection`1<TestRunMessage> TestRunMessages { get; }
    public TestSettings TestSettings { get; }
    internal TestRunEntry TestRunEntry { get; }
    internal TestRunResult(TestRunEntry testRunEntry);
    public TestOutcome get_Outcome();
    public ReadOnlyCollection`1<TestResult> get_TestResults();
    public ReadOnlyCollection`1<TestRunMessage> get_TestRunMessages();
    public TestSettings get_TestSettings();
    public void Save(string resultFilePath);
    internal TestRunEntry get_TestRunEntry();
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestRunStartedEventArgs : TestRunEventArgs {
    internal TestRunStartedEventArgs(TestRunEntry testRunEntry);
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestSettings : object {
    private TestRunConfiguration m_runConfig;
    public string Location { get; }
    internal TestRunConfiguration RunConfiguration { get; }
    public TestSettings(string testSettingsFile);
    internal TestSettings(TestRunConfiguration runConfig);
    public string get_Location();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal TestRunConfiguration get_RunConfiguration();
}
internal class Microsoft.VisualStudio.TestTools.Framework.TestStartedEventArgs : TestEventArgs {
    internal TestStartedEventArgs(TestRunEntry testRunEntry, TestResultId resultId);
}
internal enum Microsoft.VisualStudio.TestTools.Framework.TestState : Enum {
    public int value__;
    public static TestState Active;
    public static TestState Disabled;
}
internal class Microsoft.VisualStudio.TestTools.Framework.TmiFactoryAdapter : object {
    private static string s_tmiFactoryTypeFullName;
    private static TmiFactoryAdapter();
    public sealed virtual ITmiInternal Create(EventHandler`1<WarningEventArgs> warningEventHandler);
}
internal class Microsoft.VisualStudio.TestTools.Utility.AgentInformationComparer : object {
    private static AgentInformationComparer m_instance;
    internal static AgentInformationComparer Instance { get; }
    private static AgentInformationComparer();
    internal static AgentInformationComparer get_Instance();
    public sealed virtual bool Equals(IAgentInformation x, IAgentInformation y);
    public sealed virtual int GetHashCode(IAgentInformation agent);
}
internal class Microsoft.VisualStudio.TestTools.Utility.AgentRuleAcceptanceResult : AgentRuleValidationResult {
    [CompilerGeneratedAttribute]
private TestRunAcceptanceAction <AcceptanceAction>k__BackingField;
    internal TestRunAcceptanceAction AcceptanceAction { get; private set; }
    internal AgentRuleAcceptanceResult(TestRunAcceptanceAction action);
    internal AgentRuleAcceptanceResult(TestRunAcceptanceAction action, ICollection`1<IAgentInformation> executionAgents, ICollection`1<EqtMessage> warnings);
    [CompilerGeneratedAttribute]
internal TestRunAcceptanceAction get_AcceptanceAction();
    [CompilerGeneratedAttribute]
private void set_AcceptanceAction(TestRunAcceptanceAction value);
}
internal class Microsoft.VisualStudio.TestTools.Utility.AgentRuleFeasibilityResult : AgentRuleValidationResult {
    internal AgentRuleFeasibilityResult(ICollection`1<IAgentInformation> executionAgents);
    internal AgentRuleFeasibilityResult(ICollection`1<IAgentInformation> executionAgents, ICollection`1<EqtMessage> warnings);
}
internal class Microsoft.VisualStudio.TestTools.Utility.AgentRuleValidationResult : object {
    [CompilerGeneratedAttribute]
private ICollection`1<IAgentInformation> <ExecutionAgents>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IAgentInformation, string> <CollectionAgentToRuleMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<EqtMessage> <Warnings>k__BackingField;
    internal ICollection`1<IAgentInformation> ExecutionAgents { get; private set; }
    internal IDictionary`2<IAgentInformation, string> CollectionAgentToRuleMap { get; private set; }
    internal ICollection`1<EqtMessage> Warnings { get; private set; }
    internal AgentRuleValidationResult(ICollection`1<IAgentInformation> executionAgents, ICollection`1<EqtMessage> warnings);
    [CompilerGeneratedAttribute]
internal ICollection`1<IAgentInformation> get_ExecutionAgents();
    [CompilerGeneratedAttribute]
private void set_ExecutionAgents(ICollection`1<IAgentInformation> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<IAgentInformation, string> get_CollectionAgentToRuleMap();
    [CompilerGeneratedAttribute]
private void set_CollectionAgentToRuleMap(IDictionary`2<IAgentInformation, string> value);
    [CompilerGeneratedAttribute]
internal ICollection`1<EqtMessage> get_Warnings();
    [CompilerGeneratedAttribute]
private void set_Warnings(ICollection`1<EqtMessage> value);
}
internal static class Microsoft.VisualStudio.TestTools.Utility.AgentRuleValidator : object {
    internal static AgentRuleFeasibilityResult ValidateFeasibility(TestRunConfiguration runConfig, bool isCollectionOnlyRun, IAgentProvider agentProvider);
    internal static AgentRuleAcceptanceResult ValidateAcceptance(TestRunConfiguration runConfig, bool isCollectionOnlyRun, AgentRuleFeasibilityResult feasibilityResult);
    private static AgentRuleFeasibilityResult ValidateLocalRunFeasibility(bool isCollectionOnlyRun, IAgentProvider agentProvider);
    private static AgentRuleFeasibilityResult ValidateRemoteRunFeasibility(TestRunConfiguration runConfig, bool isCollectionOnlyRun, IAgentProvider agentProvider);
    private static void CheckForCollectionRunNoRules(TestRunConfiguration runConfig, bool isCollectionOnlyRun, IAgentProvider agentProvider);
    private static void CheckForEmptyCollectionCriteria(TestRunConfiguration runConfig, bool isCollectionOnlyRun);
    private static RuleResolutionResult ResolveRules(TestRunConfiguration runConfig, bool isCollectionOnlyRun, IAgentProvider agentProvider);
    private static void ValidateCollectionOnlyRules(TestRunConfiguration runConfig, bool isCollectionOnlyRun, IDictionary`2<string, ICollection`1<IAgentInformation>> collectionRuleToAgentsMap, IDictionary`2<IAgentInformation, string> collectionAgentToRuleMap, ICollection`1<EqtMessage> warnings);
    private static ICollection`1<IAgentInformation> ValidateRemoteExecutionRun(TestRunConfiguration runConfig, ICollection`1<IAgentInformation> executionRuleAgents, IDictionary`2<IAgentInformation, string> collectionAgentToRuleMap, ICollection`1<EqtMessage> warnings);
    private static void ThrowExecutionRuleNoOnlineAgentsException(TestRunConfiguration runConfig);
    private static bool IsSelectionCriteriaEmpty(AgentRule rule);
    private static bool IsExecutionRuleCriteriaEmpty(TestRunConfiguration runConfig);
    private static AgentRuleAcceptanceResult ValidateRemoteRunAcceptance(TestRunConfiguration runConfig, bool isCollectionOnlyRun, AgentRuleFeasibilityResult feasibilityResult);
    private static AgentRuleAcceptanceResult CreateAcceptanceResult(TestRunAcceptanceAction action, AgentRuleFeasibilityResult feasibilityResult, List`1<EqtMessage> warnings);
    private static TestRunAcceptanceAction ValidateCollectionOnlyAgentsForBeingBusy(TestRunConfiguration runConfig, bool isCollectionOnlyRun, AgentRuleFeasibilityResult feasibilityResult, ICollection`1<EqtMessage> warnings);
    private static TestRunAcceptanceAction ValidateExecutionAgentsForBeingBusy(TestRunConfiguration runConfig, bool isCollectionOnlyRun, AgentRuleFeasibilityResult feasibilityResult, ICollection`1<EqtMessage> warnings);
    private static bool IsAgentOnline(IAgentInformation agent);
    private static bool IsAgentOnlineNonBusy(IAgentInformation agent);
    private static ICollection`1<IAgentInformation> FilterAgents(ICollection`1<IAgentInformation> agents, AgentFilterFunctor condition);
    private static void AssignFilterAgents(IDictionary`2<IAgentInformation, string> destination, IDictionary`2<IAgentInformation, string> source, AgentFilterFunctor condition);
}
internal static class Microsoft.VisualStudio.TestTools.Utility.AssemblyHelper : object {
    private static Dictionary`2<string, object> s_cultures;
    private static String[] s_assemblyExtensions;
    private static Dictionary`2<string, object> Cultures { get; }
    private static AssemblyHelper();
    private static Dictionary`2<string, object> get_Cultures();
    public static AssemblyReference[] GetDependentAssemblies(string path);
    public static AssemblyReference[] GetDependentAssemblies(string path, DependentAssemblyOptions options, string configFile);
    public static string GetAssemblyClrVersion(string assemblyName);
    public static List`1<string> GetSatelliteAssemblies(string assemblyPath);
    public static bool IsAssembly(string path);
    public static bool IsAssemblyExtension(string extensionWithLeadingDot);
    public static bool IsNetmoduleExtension(string extensionWithLeadingDot);
}
internal class Microsoft.VisualStudio.TestTools.Utility.AssemblyLoadStrategy : object {
    private DependentAssemblyOptions m_options;
    private string m_configFile;
    public AssemblyLoadStrategy(DependentAssemblyOptions options, string configFile);
    public AssemblyReference[] GetDependentAssemblies(string path);
    public string GetAssemblyClrVersion(string path);
    private void CreateWorkerAppDomain(string path, string domainName, AppDomain& appDomain, AssemblyLoadWorker& worker);
}
internal class Microsoft.VisualStudio.TestTools.Utility.AssemblyLoadWorker : MarshalByRefObject {
    private static string TargetFrameworkAttributeFullName;
    private static string DotNetFramework40;
    private static string DotNetFramework45;
    private static string DotNetFramework451;
    private static string DotNetFramework46;
    private DependentAssemblyOptions m_options;
    private List`1<AssemblyReference> m_references;
    private EqtStringCollection m_triedFullNames;
    private Regex m_ignoreExpression;
    private static Regex m_defaultIgnoreExpression;
    public AssemblyLoadWorker(DependentAssemblyOptions options);
    private static AssemblyLoadWorker();
    public AssemblyReference[] GetDependentAssemblies(string path);
    public string GetAssemblyClrVersion(string path);
    private void GetDependentAssembliesInternal(string assemblyString);
    private void ProcessChildren(Assembly assembly);
    private bool NeedToBeFilteredOut(string assemblyName);
    public virtual object InitializeLifetimeService();
}
internal class Microsoft.VisualStudio.TestTools.Utility.AssemblyReference : object {
    private string m_assemblyString;
    private string m_location;
    private bool m_isMissing;
    private AssemblyReferenceType m_type;
    public string AssemblyString { get; }
    public AssemblyName AssemblyName { get; }
    public string Location { get; }
    public bool IsMissing { get; }
    public AssemblyReferenceType Type { get; }
    internal AssemblyReference(string assemblyString, string location, AssemblyReferenceType type, bool isMissing);
    public string get_AssemblyString();
    public AssemblyName get_AssemblyName();
    public string get_Location();
    public bool get_IsMissing();
    public AssemblyReferenceType get_Type();
    public virtual string ToString();
}
internal enum Microsoft.VisualStudio.TestTools.Utility.AssemblyReferenceType : Enum {
    public int value__;
    public static AssemblyReferenceType Assembly;
    public static AssemblyReferenceType GacAssembly;
    public static AssemblyReferenceType Module;
}
internal class Microsoft.VisualStudio.TestTools.Utility.CsvDataConnection : TestDataConnection {
    private static string CsvConnectionTemplate;
    private static string CsvConnectionTemplate64;
    private string m_fileName;
    private string TableName { get; }
    public CsvDataConnection(string fileName, List`1<string> dataFolders);
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
    private string get_TableName();
    public DataTable ReadTable(string tableName, IEnumerable columns, int maxRows);
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
}
internal class Microsoft.VisualStudio.TestTools.Utility.DelayLoadObject`1 : object {
    private T m_loadedObject;
    private EventHandler`1<DelayLoadObjectEventArgs`1<T>> m_loadedObjectAvailable;
    internal void add_ObjectAvailable(EventHandler`1<DelayLoadObjectEventArgs`1<T>> value);
    internal void remove_ObjectAvailable(EventHandler`1<DelayLoadObjectEventArgs`1<T>> value);
    internal void SetObject(T delayLoadObject);
}
internal class Microsoft.VisualStudio.TestTools.Utility.DelayLoadObjectEventArgs`1 : EventArgs {
    [CompilerGeneratedAttribute]
private T <DelayLoadObject>k__BackingField;
    internal T DelayLoadObject { get; private set; }
    internal DelayLoadObjectEventArgs`1(T delayLoadObject);
    [CompilerGeneratedAttribute]
internal T get_DelayLoadObject();
    [CompilerGeneratedAttribute]
private void set_DelayLoadObject(T value);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.Utility.DependentAssemblyOptionFlags : Enum {
    public int value__;
    public static DependentAssemblyOptionFlags ReportMissing;
    public static DependentAssemblyOptionFlags Recursively;
    public static DependentAssemblyOptionFlags ReportTopLevelGacAssemblies;
    public static DependentAssemblyOptionFlags ReportModules;
    public static DependentAssemblyOptionFlags ThrowIfNotAssembly;
    public static DependentAssemblyOptionFlags Default;
}
internal class Microsoft.VisualStudio.TestTools.Utility.DependentAssemblyOptions : object {
    public static string DefaultIgnoredPattern;
    public static string IgnoredAllPattern;
    public static string IgnoredNonePattern;
    private DependentAssemblyOptionFlags m_flags;
    private string m_ignoredPattern;
    private CultureInfo m_culture;
    public static DependentAssemblyOptions Default { get; }
    public DependentAssemblyOptionFlags Flags { get; public set; }
    public string IgnoredAssembliesPattern { get; public set; }
    public DependentAssemblyOptions(DependentAssemblyOptionFlags flags, string ignoredAssembliesPattern);
    private static DependentAssemblyOptions();
    public static DependentAssemblyOptions get_Default();
    public DependentAssemblyOptionFlags get_Flags();
    public void set_Flags(DependentAssemblyOptionFlags value);
    public string get_IgnoredAssembliesPattern();
    public void set_IgnoredAssembliesPattern(string value);
    public virtual string ToString();
}
internal static class Microsoft.VisualStudio.TestTools.Utility.EqtThreadData : object {
    private static string SlotName;
    internal static object GetData(string key);
    internal static void SetData(string key, object data);
    private static IDictionary`2<string, object> GetDataStore(bool createDataStore);
}
internal class Microsoft.VisualStudio.TestTools.Utility.EqtThreadPool : object {
    private static int c_disposeThreadsTimeout;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_running;
    private int m_minWorkerThreads;
    private int m_maxWorkerThreads;
    private int m_threadId;
    private long m_maxVMBytesAtWhichToStartThread;
    private Queue m_waitingCallbacks;
    private Semaphore m_workerThreadNeeded;
    private ArrayList m_workerThreads;
    private int m_inUseThreads;
    private int m_maxStackSize;
    private object m_poolLock;
    private AutoResetEvent m_stoppedEvent;
    private ApartmentState m_apartmentState;
    [CompilerGeneratedAttribute]
private UnhandledExceptionEventHandler UnhandledException;
    public int MaxThreads { get; }
    public int ActiveThreads { get; }
    public int WaitingCallbacks { get; }
    public ApartmentState ApartmentState { get; public set; }
    public EqtThreadPool(int minWorkerThreads, int maxWorkerThreads, int maxStackSize);
    public EqtThreadPool(int maxWorkerThreads);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public void Start();
    public bool QueueUserWorkItem(WaitCallback callback);
    public bool QueueUserWorkItem(WaitCallback callback, object state);
    public void Stop(int millisecondsTimeout);
    public void Abort();
    public int get_MaxThreads();
    public int get_ActiveThreads();
    public int get_WaitingCallbacks();
    public void set_ApartmentState(ApartmentState value);
    public ApartmentState get_ApartmentState();
    [CompilerGeneratedAttribute]
public void add_UnhandledException(UnhandledExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UnhandledException(UnhandledExceptionEventHandler value);
    private void StartWorkerThread();
    private void ProcessQueuedItems();
}
internal static class Microsoft.VisualStudio.TestTools.Utility.EqualityHelper : object {
    internal static bool SetEquals(IEnumerable`1<T> x, IEnumerable`1<T> y);
    internal static bool DictionaryEquals(IDictionary x, IDictionary y);
}
internal static class Microsoft.VisualStudio.TestTools.Utility.FusionHelper : object {
    private static string c_processorArchitechtureTokenName;
    internal static string GetAssemblyPath(AssemblyName assemblyName);
    internal static string TryGetAssemblyPath(AssemblyName assemblyName);
    private static string GetStrongName(AssemblyName assemblyName);
}
internal interface Microsoft.VisualStudio.TestTools.Utility.IAgentInformation {
    public string AgentName { get; }
    public bool IsOnline { get; }
    public bool IsBusy { get; }
    public abstract virtual string get_AgentName();
    public abstract virtual bool get_IsOnline();
    public abstract virtual bool get_IsBusy();
}
internal interface Microsoft.VisualStudio.TestTools.Utility.IAgentProvider {
    public string DisplayNameForMessages { get; }
    public abstract virtual string get_DisplayNameForMessages();
    public abstract virtual ICollection`1<IAgentInformation> GetAgents(SelectionCriteriaDictionary selectionCriteria);
}
internal static class Microsoft.VisualStudio.TestTools.Utility.Internal.AssemblyResolutionHelper : object {
    private static String[] m_probePaths;
    private static AssemblyResolutionHelper();
    internal static IList`1<string> GetResolutionPaths();
    private static string GetAlternateBaseDirectory();
}
public interface Microsoft.VisualStudio.TestTools.Utility.IRemoteDataProvider {
    public abstract virtual DataTable ReadTable(string invariantProviderName, string connectionString, string tableName);
    public abstract virtual List`1<string> GetColumns(string invariantProviderName, string connectionString, string tableName);
}
internal class Microsoft.VisualStudio.TestTools.Utility.LicenseHelper : object {
    private static string TestListEditorLicenseKey;
    private static string TestListEditorLicenseString;
    private static string TeamDevToolsLicenseKey;
    private static string TeamDevToolsLicenseString;
    private static string TfsIntegrationLicenseKey;
    private static string TfsIntegrationLicenseString;
    private static string RemoteExecutionLicenseKey;
    private static string RemoteExecutionLicenseString;
    private static string NonCoreTestsLicenseKey;
    private static string NonCoreTestsLicenseString;
    private static string WebLoadTestsLicenseKey;
    private static string WebLoadTestsLicenseString;
    private ProductFeature m_enabledFeatures;
    private TestConfigKey m_licenseKey;
    private static LicenseHelper s_instance;
    internal static LicenseHelper Instance { get; }
    private static LicenseHelper();
    internal static LicenseHelper get_Instance();
    internal bool AreFeaturesEnabled(ProductFeature feature);
    internal void CheckTfsIntegrationEnabled();
    internal bool AreFeaturesDisabled(ProductFeature feature);
    private void InitializeFeature(string keyName, string license, ProductFeature feature);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.Utility.LoadTestFeature : Enum {
    public int value__;
    public static LoadTestFeature None;
    public static LoadTestFeature SingleProcessor;
    public static LoadTestFeature MultiProcessor;
    public static LoadTestFeature LocalLoadTestExecution;
    public static LoadTestFeature RemoteLoadTestExecution;
    public static LoadTestFeature VUserHardStop;
    public static LoadTestFeature UnlimitedVUsers;
}
internal class Microsoft.VisualStudio.TestTools.Utility.LoadTestProductKeyValidator : object {
    public static int LOADTEST_MPC;
    public sealed virtual PIDAction IsValidProductKey(string productKey, Boolean& allowsDuplicates, Int32& featureLevel);
    public sealed virtual bool AllowDuplicateEntry(string productKey);
}
internal class Microsoft.VisualStudio.TestTools.Utility.OdbcDataConnection : TestDataConnectionSql {
    private bool m_isMSSql;
    public OdbcCommandBuilder CommandBuilder { get; }
    public OdbcConnection Connection { get; }
    public OdbcDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public OdbcCommandBuilder get_CommandBuilder();
    public OdbcConnection get_Connection();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    public virtual void GetQuoteLiterals();
    public virtual string GetDefaultSchema();
}
internal class Microsoft.VisualStudio.TestTools.Utility.OleDataConnection : TestDataConnectionSql {
    private bool m_isMSSql;
    public OleDbCommandBuilder CommandBuilder { get; }
    public OleDbConnection Connection { get; }
    public OleDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
    public OleDbCommandBuilder get_CommandBuilder();
    public OleDbConnection get_Connection();
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    public virtual void GetQuoteLiterals();
    public virtual string GetDefaultSchema();
}
internal class Microsoft.VisualStudio.TestTools.Utility.OracleDataConnection : TestDataConnectionSql {
    public OracleDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public virtual void GetQuoteLiterals();
}
internal static class Microsoft.VisualStudio.TestTools.Utility.RegistryHelper : object {
    private static string GetDefaultWebSitesFolder();
    internal static string GetPathToWebRoot();
}
internal class Microsoft.VisualStudio.TestTools.Utility.RegistryHelper`1 : object {
    internal static T GetValueIgnoringExceptions(RegistryKey hive, string subkeyName, string valueName, T defaultValue);
}
internal class Microsoft.VisualStudio.TestTools.Utility.RuntimeDataConnectionFactory : TestDataConnectionFactory {
    private IRemoteDataProvider m_remoteProvider;
    internal RuntimeDataConnectionFactory(IRemoteDataProvider remoteProvider);
    public virtual TestDataConnection Create(string invariantProviderName, string connectionString, List`1<string> dataFolders);
}
internal class Microsoft.VisualStudio.TestTools.Utility.SelfRestoringThreadData : object {
    private bool m_isDisposed;
    private string m_key;
    private object m_oldValue;
    internal SelfRestoringThreadData(string key, object value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.Utility.SqlCeDataConnection : TestDataConnectionSql {
    public SqlCeDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public virtual string GetDefaultSchema();
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
}
internal class Microsoft.VisualStudio.TestTools.Utility.SqlDataConnection : TestDataConnectionSql {
    public SqlDataConnection(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    private static string FixConnectionString(string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public virtual string GetDefaultSchema();
}
internal abstract class Microsoft.VisualStudio.TestTools.Utility.TestDataConnection : object {
    internal static string ConnectionDirectoryKey;
    private List`1<string> m_dataFolders;
    private static Nullable`1<bool> s_extendedDiagnosticsEnabled;
    public DbConnection Connection { get; }
    private static bool ExtendedDiagnosticsEnabled { get; }
    protected internal TestDataConnection(List`1<string> dataFolders);
    internal static bool PathNeedsFixup(string path);
    internal static string GetRelativePart(string path);
    internal static string FixPath(string path, List`1<string> foldersToCheck);
    protected string FixPath(string path);
    public abstract virtual List`1<string> GetDataTablesAndViews();
    public abstract virtual List`1<string> GetColumns(string tableName);
    public abstract virtual DataTable ReadTable(string tableName, IEnumerable columns);
    public virtual DbConnection get_Connection();
    public virtual void Dispose();
    [ConditionalAttribute("DEBUG")]
protected internal static void WriteDiagnostics(string formatString, Object[] parameters);
    private static bool get_ExtendedDiagnosticsEnabled();
}
internal class Microsoft.VisualStudio.TestTools.Utility.TestDataConnectionFactory : object {
    private static TestDataConnectionFactory s_instance;
    private static Dictionary`2<string, TestDataConnectionFactory> s_specializedProviders;
    internal static TestDataConnectionFactory DesignTime { get; }
    private static TestDataConnectionFactory();
    public TestDataConnection Create(string invariantProviderName, string connectionString);
    public virtual TestDataConnection Create(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    internal static TestDataConnectionFactory get_DesignTime();
}
internal class Microsoft.VisualStudio.TestTools.Utility.TestDataConnectionSql : TestDataConnection {
    private string m_quoteSuffix;
    private string m_quotePrefix;
    private DbCommandBuilder m_commandBuilder;
    private DbConnection m_connection;
    private DbProviderFactory m_factory;
    private char CatalogSeperatorChar { get; }
    private char SchemaSeperatorChar { get; }
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    protected DbCommandBuilder CommandBuilder { get; }
    public DbConnection Connection { get; }
    protected DbProviderFactory Factory { get; }
    protected internal TestDataConnectionSql(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    protected virtual SchemaMetaData[] GetSchemaMetaData();
    public static TestDataConnectionSql Create(string invariantProviderName, string connectionString, List`1<string> dataFolders);
    public string PrepareNameForSql(string tableName);
    public String[] SplitName(string name);
    public string JoinAndQuoteName(String[] parts, bool fullyQuote);
    private string MaybeQuote(string identifier, bool force);
    private int FindSeperators(string text, int from);
    private char get_CatalogSeperatorChar();
    private char get_SchemaSeperatorChar();
    private int FindIdentifierEnd(string text, int start);
    protected virtual string QuoteIdentifier(string identifier);
    protected virtual string UnquoteIdentifier(string identifier);
    public virtual void GetQuoteLiterals();
    protected void GetQuoteLiteralsHelper();
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    protected DbCommandBuilder get_CommandBuilder();
    public virtual DbConnection get_Connection();
    protected DbProviderFactory get_Factory();
    public virtual string GetDefaultSchema();
    protected string FormatTableNameForDisplay(string tableSchema, string tableName);
    private static bool IsInArray(string candidate, String[] values);
    public virtual List`1<string> GetDataTablesAndViews();
    protected void SplitTableName(string name, String& schemaName, String& tableName);
    public virtual List`1<string> GetColumns(string tableName);
    protected virtual bool IsUserSchema(string tableSchema);
    public bool IsOpen();
    protected string GetDefaultSchemaMSSql();
    protected static bool IsMSSql(string providerName);
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
    private string GetColumnsSQL(IEnumerable columns);
    public virtual void Dispose();
}
internal enum Microsoft.VisualStudio.TestTools.Utility.TestRunAcceptanceAction : Enum {
    public int value__;
    public static TestRunAcceptanceAction Execute;
    public static TestRunAcceptanceAction Queue;
}
internal static class Microsoft.VisualStudio.TestTools.Utility.TestSpecificProviderInvariantNames : object {
    internal static string CsvProvider;
    internal static string XmlProvider;
    internal static string TestCaseProvider;
}
internal class Microsoft.VisualStudio.TestTools.Utility.XmlDataConnection : TestDataConnection {
    private string m_fileName;
    public XmlDataConnection(string fileName, List`1<string> dataFolders);
    private DataSet LoadDataSet(bool schemaOnly);
    public virtual List`1<string> GetDataTablesAndViews();
    public virtual List`1<string> GetColumns(string tableName);
    public virtual DataTable ReadTable(string tableName, IEnumerable columns);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
