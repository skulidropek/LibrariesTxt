[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.VisualStudio.TestTools.Common.IdentityCache`1 : object {
    private Dictionary`2<T, DateTime> m_cachedObjects;
    private TimeSpan m_timeoutPeriod;
    private static int c_defaultTimeout;
    private ReaderWriterLock m_lock;
    public int TimeoutPeriod { get; public set; }
    public IdentityCache`1(int timeout);
    public bool Contains(T obj);
    public void Add(T obj);
    public int get_TimeoutPeriod();
    public void set_TimeoutPeriod(int value);
}
internal class Microsoft.VisualStudio.TestTools.Controller.AgentFilterFunctor : MulticastDelegate {
    public AgentFilterFunctor(object object, IntPtr method);
    public virtual bool Invoke(AgentMachine agent);
    public virtual IAsyncResult BeginInvoke(AgentMachine agent, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.Controller.AgentInfoEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private AgentInformation <AgentInformation>k__BackingField;
    public AgentInformation AgentInformation { get; private set; }
    public AgentInfoEventArgs(AgentInformation agentInformation);
    [CompilerGeneratedAttribute]
public AgentInformation get_AgentInformation();
    [CompilerGeneratedAttribute]
private void set_AgentInformation(AgentInformation value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.Controller.AgentInstallerHelper : object {
    public static string relativeTestAgentPath;
    public static string testAgentFileName;
    public static string unzipExeFileName;
    public static string testAgentZipFileName;
    public static string qfeDirectoryName;
    public static string qfeExtension;
    public static string customDirectoryName;
    public static string defaultSetupParam;
    public static char idSeparator;
    public static String[] uninstallPatterns;
    public static int netUseAttempts;
    public static int netUseDelayBetweenAttempts;
    private static AgentInstallerHelper();
    [ExtensionAttribute]
public static void InsertionSort(IList`1<T> list, Comparison`1<T> comparison);
}
internal class Microsoft.VisualStudio.TestTools.Controller.AgentListEventArgs : EventArgs {
    private List`1<AgentMachine> m_agentList;
    public List`1<AgentMachine> AgentList { get; }
    public AgentListEventArgs(List`1<AgentMachine> agentList);
    public List`1<AgentMachine> get_AgentList();
}
internal class Microsoft.VisualStudio.TestTools.Controller.AgentMachine : object {
    private AgentProperties m_agentProperties;
    private RemoteAgentServiceWrapper m_agentService;
    private RemoteAgentObjectWrapper m_agentObject;
    private bool m_allocated;
    private ManualResetEvent m_runComplete;
    private bool m_connected;
    private bool m_canPerformUITesting;
    private DateTime m_lastAccessTime;
    private object m_verifyConnectionLock;
    private ControllerExecution m_execution;
    private RunState m_status;
    private Dictionary`2<Guid, object> m_tests;
    private int m_agentRunId;
    private bool m_hasNewTestList;
    private int m_multiAgentId;
    private static int c_defaultMultiAgentId;
    private bool m_arePluginsInitialized;
    private bool m_isAgentProcessInitialized;
    private bool m_isCollectionOnly;
    private string m_ruleName;
    private AgentDataCollectorInformation modreq(System.Runtime.CompilerServices.IsVolatile) m_agentDataCollectorInformation;
    private WindowsIdentity m_remoteIdentity;
    [CompilerGeneratedAttribute]
private bool <IsParticipatingInRun>k__BackingField;
    public ControllerExecution Execution { get; public set; }
    public Dictionary`2<Guid, object> Tests { get; public set; }
    public ManualResetEvent RunComplete { get; }
    public bool CanPerformUITesting { get; public set; }
    public bool Connected { get; public set; }
    public AgentProperties Properties { get; }
    public bool Online { get; }
    public bool RigOnline { get; public set; }
    public bool ConnectionOnline { get; public set; }
    public AgentIPConfig IPConfig { get; }
    public bool Allocated { get; public set; }
    public DateTime AgentLastAccess { get; public set; }
    public IAgentObject AgentObject { get; public set; }
    public IAgentService AgentService { get; public set; }
    public WindowsIdentity RemoteIdentity { get; public set; }
    public int Weighting { get; }
    public int Port { get; }
    public RunState Status { get; public set; }
    public string MachineName { get; }
    public int AgentRunId { get; public set; }
    public int MultiAgentId { get; public set; }
    public bool HasNewTestList { get; public set; }
    internal bool IsCollectionOnly { get; internal set; }
    internal string RuleName { get; internal set; }
    public AgentDataCollectorInformation DataCollectorInformation { get; public set; }
    public bool IsParticipatingInRun { get; public set; }
    public string Name { get; }
    public bool ArePluginsInitialized { get; public set; }
    public bool IsAgentProcessInitialized { get; public set; }
    public string AgentName { get; }
    public bool IsOnline { get; }
    public bool IsBusy { get; }
    public AgentMachine(AgentProperties agentProperties);
    public static AgentMachine GetLocalAgent(IAgentObject agentObject);
    public void UpdateAgentProperties(AgentProperties agentProperties);
    public void Release();
    public AgentConnectionState GetAgentState();
    public void VerifyAgentConnection();
    public void VerifyAgentConnection(int timeout);
    private void VerifyAgentConnectionThread(object connectionFailureReason);
    public ControllerExecution get_Execution();
    public void set_Execution(ControllerExecution value);
    public Dictionary`2<Guid, object> get_Tests();
    public void set_Tests(Dictionary`2<Guid, object> value);
    public ManualResetEvent get_RunComplete();
    public void SetTests(IList`1<Guid> testList);
    public void InvalidateMultiAgentId();
    public bool get_CanPerformUITesting();
    public void set_CanPerformUITesting(bool value);
    public bool get_Connected();
    public void set_Connected(bool value);
    public AgentProperties get_Properties();
    public bool get_Online();
    public bool get_RigOnline();
    public void set_RigOnline(bool value);
    public bool get_ConnectionOnline();
    public void set_ConnectionOnline(bool value);
    public AgentIPConfig get_IPConfig();
    public void set_Allocated(bool value);
    public bool get_Allocated();
    public void set_AgentLastAccess(DateTime value);
    public DateTime get_AgentLastAccess();
    public IAgentObject get_AgentObject();
    public void set_AgentObject(IAgentObject value);
    public IAgentService get_AgentService();
    public void set_AgentService(IAgentService value);
    public WindowsIdentity get_RemoteIdentity();
    public void set_RemoteIdentity(WindowsIdentity value);
    public int get_Weighting();
    public int get_Port();
    public RunState get_Status();
    public void set_Status(RunState value);
    public string get_MachineName();
    public int get_AgentRunId();
    public void set_AgentRunId(int value);
    public int get_MultiAgentId();
    public void set_MultiAgentId(int value);
    public bool get_HasNewTestList();
    public void set_HasNewTestList(bool value);
    internal bool get_IsCollectionOnly();
    internal void set_IsCollectionOnly(bool value);
    internal string get_RuleName();
    internal void set_RuleName(string value);
    public AgentDataCollectorInformation get_DataCollectorInformation();
    public void set_DataCollectorInformation(AgentDataCollectorInformation value);
    [CompilerGeneratedAttribute]
public bool get_IsParticipatingInRun();
    [CompilerGeneratedAttribute]
public void set_IsParticipatingInRun(bool value);
    public sealed virtual string get_Name();
    public sealed virtual bool get_ArePluginsInitialized();
    public sealed virtual void set_ArePluginsInitialized(bool value);
    public bool get_IsAgentProcessInitialized();
    public void set_IsAgentProcessInitialized(bool value);
    public sealed virtual void StopTestRun(Guid runId);
    public sealed virtual void AbortTestRun(Guid runId);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
    public sealed virtual string get_AgentName();
    public sealed virtual bool get_IsOnline();
    public sealed virtual bool get_IsBusy();
    public virtual string ToString();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    private void SetRunComplete(object sender, AgentListEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.Controller.AgentManager : object {
    private Dictionary`2<string, AgentMachine> m_agentList;
    private AutoResetEvent m_agentAvailableEvent;
    private static int c_restartAgentTimeout;
    private static int c_restartRigTimeout;
    private static int c_defaultAgentSyncTimeout;
    private static int c_defaultAgentConnectionTimeout;
    private int m_agentSyncTimeout;
    private int m_agentConnectionTimeout;
    private ConnectionManager`1<AgentMachine> m_agentConnections;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentNameEventArgs> ConnectionTimeout;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentInfoEventArgs> AgentStateChanged;
    private bool m_isLocalAgent;
    private ReaderWriterLockSlim m_rwLock;
    [CompilerGeneratedAttribute]
private string <DisplayNameForMessages>k__BackingField;
    public AutoResetEvent AgentAvailable { get; }
    public int TotalAgents { get; }
    public int AgentSyncTimeout { get; }
    public int AgentConnectionTimeout { get; }
    public int OnlineAgents { get; }
    internal ReaderWriterLockSlim ReaderWriterLock { get; }
    public string DisplayNameForMessages { get; internal set; }
    public AgentManager(AgentMachine localAgent);
    internal AgentManager(ICollection`1<AgentMachine> agents, ReaderWriterLockSlim readerWriterLock);
    public AgentManager(ControllerConfiguration controllerConfiguration);
    [CompilerGeneratedAttribute]
public void add_ConnectionTimeout(EventHandler`1<AgentNameEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ConnectionTimeout(EventHandler`1<AgentNameEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_AgentStateChanged(EventHandler`1<AgentInfoEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AgentStateChanged(EventHandler`1<AgentInfoEventArgs> value);
    public AutoResetEvent get_AgentAvailable();
    public int get_TotalAgents();
    public int get_AgentSyncTimeout();
    public int get_AgentConnectionTimeout();
    public int get_OnlineAgents();
    internal ReaderWriterLockSlim get_ReaderWriterLock();
    public sealed virtual void BeforeAgentsAdd(IEnumerable`1<AgentInformation> agentInformations);
    public sealed virtual void AfterAgentsAdd(IEnumerable`1<AgentInformation> agentInformations);
    private void agentInformation_StateChanged(object sender, EventArgs e);
    public sealed virtual void BeforeAgentsUpdate(IEnumerable`1<AgentInformation> agentInformations, bool areAgentsConnecting);
    public sealed virtual void AfterAgentsUpdate(IEnumerable`1<AgentInformation> agentInformations);
    public sealed virtual void AgentInformationReplaced(IEnumerable`1<AgentInformation> agentInformations);
    private void UpdateAgentInformation(IEnumerable`1<AgentInformation> agentInformations);
    public sealed virtual void BeforeAgentsRemove(IEnumerable`1<AgentInformation> agentInformations);
    public sealed virtual void AfterAgentsRemove(IEnumerable`1<AgentInformation> agentInformations);
    public sealed virtual bool BeforeSetAgentOperationalState(string agentName, bool online);
    public sealed virtual void AfterSetAgentOperationalState(string agentName, bool online);
    public sealed virtual void BeforeConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentService, WindowsIdentity remoteIdentity);
    public sealed virtual void AfterConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentService);
    private void LoadAgent(AgentInformation agentInformation);
    private void AddAgentMachine_NoLock(AgentInformation agentInformation);
    public bool TimeoutExpired(AgentMachine agent);
    public void UpdateAgentAccessTime(string agentName);
    public void UpdateAgentAccessTime(AgentMachine agent);
    private List`1<AgentMachine> GetAgentListSnapshot();
    private List`1<AgentMachine> GetAgentListSnapshot(List`1<Uri> agentUris);
    public AgentProperties[] GetAllAgentsProperties();
    public AgentStatus[] GetAgentStatuses();
    public AgentStatus[] GetAgentStatuses(List`1<Uri> agentUris);
    public AgentStatus GetAgentStatus(string agentName);
    public AgentProperties GetAgentProperties(string agentName);
    public String[] GetAgentNetworkInterfaceNames(string agentName);
    public AgentMachine GetAgentMachine(string agentName);
    private AgentMachine GetAgentMachine_NoLock(string agentName);
    public void ReleaseAgents(List`1<AgentMachine> agentList);
    public void ReleaseAgents(List`1<AgentMachine> agentList, bool signalAgentAvailable);
    public void ReleaseAgent(AgentMachine agent);
    public void CheckForAgentAvailable();
    private void CheckForAgentAvailable_NoLock();
    public int GetOnlineAgentCountForExecutionCriteria(TestRunConfiguration runConfig, bool removeAgentsMatchingCollectionCriteria);
    public ICollection`1<AgentMachine> GetOnlineAgentsForExecutionCriteria(TestRunConfiguration runConfig, bool removeAgentsMatchingCollectionCriteria);
    public ICollection`1<AgentMachine> ReserveAvailableAgentsForExecution(TestRunConfiguration runConfig);
    public bool ReserveAgents(TestRun run, List`1& agents, ICollection`1& warnings);
    private static AgentMachine GetAgentMachine(IAgentInformation agentInfo);
    private static void ReserveAgent(AgentMachine agent, bool isCollectionOnly);
    private bool CheckAgentAttributes(string agentName, SelectionCriteriaDictionary selectionCriteria);
    private static SelectionCriteriaDictionary GetExecutionCriteria(TestRunConfiguration runConfig);
    public void RestartAgent(string agentName);
    public void DeleteTempFiles();
    public void DeleteTempFiles(bool specificEnvironmentDelete, List`1<Uri> agentUris);
    public void StopAgents();
    public void StartAgents();
    private void FlushDnsCacheIfRequired(string agentMachineName, string agentName);
    private void ConnectionTimeoutHandler(ConnectionEventArgs<AgentMachine> e);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DisplayNameForMessages();
    [CompilerGeneratedAttribute]
internal void set_DisplayNameForMessages(string value);
    public sealed virtual ICollection`1<IAgentInformation> GetAgents(SelectionCriteriaDictionary selectionCriteria);
    public ICollection`1<DataCollectorInformation> GetAllAvailableDataCollectorInformation();
    internal static List`1<AgentMachine> FilterAgents(ICollection`1<AgentMachine> agents, AgentFilterFunctor filterCriteria);
    private sealed virtual override void System.IDisposable.Dispose();
    public void Dispose(bool explicitDispose);
}
internal class Microsoft.VisualStudio.TestTools.Controller.AgentNameEventArgs : EventArgs {
    private string m_agentName;
    public string AgentName { get; }
    public AgentNameEventArgs(string agentName);
    public string get_AgentName();
}
public static class Microsoft.VisualStudio.TestTools.Controller.ConfigReaderHelper : object {
    private static List`1<TestAgentInstallFile> cachedInstalledFiles;
    private static DateTime m_cachedControllerConfigModificationTime;
    private static NetworkCredential m_cachedLabServiceCredential;
    private static bool isrefreshing;
    private static object m_refreshlock;
    private static ConfigReaderHelper();
    public static List`1<TestAgentInstallFile> GetInstallableFiles(NetworkCredential labServiceCreds, bool force);
}
internal enum Microsoft.VisualStudio.TestTools.Controller.ControllerAction : Enum {
    public int value__;
    public static ControllerAction UpdateController;
    public static ControllerAction ViewController;
    public static ControllerAction AdministerController;
    public static ControllerAction UpdateTestEnvironment;
    public static ControllerAction ViewTestEnvironment;
    public static ControllerAction QueueTestRuns;
    public static ControllerAction ManageTestRuns;
    public static ControllerAction ViewTestRuns;
    public static ControllerAction ConnectAgent;
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerConfiguration : object {
    [CompilerGeneratedAttribute]
private TfsUriChangedEventHandler TfsUriChangedEvent;
    [CompilerGeneratedAttribute]
private EventHandler TestControllerUnregistered;
    private Dictionary`2<Guid, TestEnvironment> m_testEnvironmentsById;
    private Dictionary`2<string, TestEnvironment> m_testEnvironmentsByName;
    private Guid m_defaultTestEnvironmentId;
    private Dictionary`2<string, AgentInformation> m_agents;
    private ControllerInformation m_controllerInformation;
    private ReaderWriterLockSlim m_lock;
    private ReaderWriterLockSlim m_tfsLock;
    private object m_configurationFileLock;
    private IConfigurationEventListener m_configurationEventListener;
    private TestManagementServiceHelper m_tcmHelper;
    private LabServiceHelper m_labServiceHelper;
    private object m_labServiceHelperLockObject;
    private int m_port;
    private TfsTeamProjectCollection m_activeTfsServer;
    private bool isRunningAsAdmin;
    private int serverSyncsAfterLastAccntCleanup;
    private static int DefaultTfsSyncIntervalForHostedTfs;
    private static int MaxServerSyncsBeforeAccntCleanup;
    private DateTime m_lastSyncAttemptTimeAgentVersion;
    private static int m_VersionSyncTimeInMinutes;
    internal ReaderWriterLockSlim ReaderWriterLock { get; }
    internal IConfigurationEventListener ConfigurationEventListener { get; internal set; }
    internal ReadOnlyCollection`1<AgentInformation> Agents { get; }
    public ControllerInformation ControllerInformation { get; public set; }
    public TfsTeamProjectCollection ActiveTfsServer { get; private set; }
    internal TestManagementServiceHelper TcmHelper { get; private set; }
    internal LabServiceHelper LabServiceHelper { get; internal set; }
    public ReadOnlyCollection`1<TestEnvironment> TestEnvironments { get; }
    private ReadOnlyCollection`1<TestEnvironment> TestEnvironments_NoLock { get; }
    public ReadOnlyCollection`1<string> TestEnvironmentNames { get; }
    public string ElementName { get; }
    public string NamespaceUri { get; }
    private ControllerConfiguration(int port);
    public ControllerConfiguration(int port, XmlElement element, XmlTestStoreParameters parameters);
    public ControllerConfiguration(int port, string controllerName, XmlElement element, XmlTestStoreParameters parameters);
    [CompilerGeneratedAttribute]
internal void add_TfsUriChangedEvent(TfsUriChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_TfsUriChangedEvent(TfsUriChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_TestControllerUnregistered(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_TestControllerUnregistered(EventHandler value);
    internal static ControllerConfiguration GetLocalControllerConfiguration();
    internal ReaderWriterLockSlim get_ReaderWriterLock();
    internal IConfigurationEventListener get_ConfigurationEventListener();
    internal void set_ConfigurationEventListener(IConfigurationEventListener value);
    internal ReadOnlyCollection`1<AgentInformation> get_Agents();
    public ControllerInformation get_ControllerInformation();
    public void set_ControllerInformation(ControllerInformation value);
    public TfsTeamProjectCollection get_ActiveTfsServer();
    private void set_ActiveTfsServer(TfsTeamProjectCollection value);
    internal static TfsTeamProjectCollection GetTfsServer(string tfsUrl);
    internal static TfsTeamProjectCollection GetTfsServer(string tfsUrl, bool useStoredCredential);
    internal TestManagementServiceHelper get_TcmHelper();
    private void set_TcmHelper(TestManagementServiceHelper value);
    internal LabServiceHelper get_LabServiceHelper();
    internal void set_LabServiceHelper(LabServiceHelper value);
    private TestManagementServiceHelper CreateTcmHelper();
    public ReadOnlyCollection`1<TestEnvironment> get_TestEnvironments();
    private ReadOnlyCollection`1<TestEnvironment> get_TestEnvironments_NoLock();
    public ReadOnlyCollection`1<string> get_TestEnvironmentNames();
    public TestEnvironment GetTestEnvironment(string testEnvironmentName);
    public TestEnvironment GetTestEnvironment(Guid testEnvironmentId);
    public UpdatedTestEnvironments UpdateTestEnvironment(TestEnvironment testEnvironment);
    private UpdatedTestEnvironments UpdateTestEnvironmentNoLock(TestEnvironment testEnvironment);
    private static void ReplaceWithClones(IList`1<AgentInformation> agentList);
    private static void FilterAgentsToAddToController(List`1<AgentInformation> agents, List`1<AgentInformation> agentsToAddToController, TestEnvironment defaultTestEnvironment);
    private static void FilterAgentsToRemoveFromController(List`1<AgentInformation> agents, List`1<AgentInformation> agentsToRemoveFromController);
    private void VerifyAgentNotInAnyEnvironment(AgentInformation agent);
    private void VerifyAgentNotInNonDefaultEnvironments(AgentInformation agent);
    private static void VerifyAgentDoesNotHaveReservedProperties(AgentInformation agent);
    private void ValidateAgentsToAddToController(List`1<AgentInformation> agentsToAdd);
    private void ValidateAgentsToMoveToEnvironment(List`1<AgentInformation> agentsToMove, TestEnvironment testEnvironment, TestEnvironment defaultTestEnvironment);
    private static void ValidateAgentsToRemain(List`1<AgentInformation> agentsToRemain, TestEnvironment testEnvironment, TestEnvironment existingEnvironment);
    public TestEnvironment RemoveTestEnvironment(TestEnvironment testEnvironment);
    private TestEnvironment RemoveTestEnvironmentNoLock(TestEnvironment testEnvironment);
    private void RemoveTestEnvironments(IEnumerable`1<TestEnvironment> environments);
    public string AddAgent(AgentInformation agentInformation);
    private string AddAgent(AgentInformation agentInformation, bool register);
    private string AddAgentNoLock(AgentInformation agentInformation, bool register);
    public void RemoveAgent(string agentName);
    public void RemoveAgent(string agentName, bool unregister);
    private void RemoveAgentNoLock(string agentName, bool unregister);
    public void SetAgentProperties(AgentInformation agentInformation);
    public DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, bool canPerformUITesting, string configuredUserName, string agentVersion, IAgentService agentService, WindowsIdentity remoteIdentity);
    public string GetAgentDisplayName(string agentName);
    public void SetAgentOperationalState(string agentName, bool online);
    public void RegisterDataCollectors(IEnumerable`1<DataCollectorInformation> collectorsToRegister);
    public sealed virtual void Dispose();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public void Load(XmlElement element, XmlTestStoreParameters parameters, string controllerName);
    private void LoadUnboundTestMachines(TestEnvironment environment);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    private void ValidateLoadedTestEnvironment(TestEnvironment testEnvironment);
    public sealed virtual string get_ElementName();
    public sealed virtual string get_NamespaceUri();
    internal TestEnvironment GetTestEnvironmentFromAgentName(string agentName);
    private void UpdateAgent(AgentInformation existingAgent, AgentInformation newAgent, bool updateTFS);
    private bool AddDefaults();
    private UpdatedTestEnvironments AddNewTestEnvironment(TestEnvironment testEnvironment, TestEnvironment defaultTestEnvironment);
    private void AddTestEnvironment(TestEnvironment testEnvironment);
    private void RemoveExistingTestEnvironment(TestEnvironment testEnvironment);
    internal void ClearLists();
    private void WriteConfigurationFile(bool mandatoryWrite);
    private void WriteConfigurationFile();
    private TestEnvironment ConvertToTestEnvironment(LabEnvironment labEnvironment);
    private void ConfigureLabSystemAccountOnController(LabEnvironment labEnvironment, LabSystem labSystem);
    private void RemoveUnregisteredAgentAccounts(IEnumerable`1<string> registeredAgents);
    private void HandleTfsUpdatesForNewControllerInformation(ControllerInformation newControllerInfo);
    private void CleanupEnvironemtsAndAgents();
    private void CheckForAgentsInUse();
    private void CleanupTcmHelper(ControllerInformation newControllerInfo);
    private static bool ShouldUpdateAgentMachineName(string newMachineName, AgentInformation oldAgentInformation);
    private bool ShouldUpdateAgentUserName(string configuredUserName, AgentInformation oldAgentInformation);
    private bool ShouldUpdateAgentVersion(string newVersion, AgentInformation oldAgentInformation);
    internal void SynchronizeWithTfs();
    private void GetTfsDataAndSynchronize();
    internal static Version GetStrippedVersionWithoutRev(Version ver);
    private void UpdateMaxTestAgentVersionOnTFs();
    internal static Version GetMaxVersion(Version testAgentMaxVersion, Version maxVersion);
    private void UpdateEnvironmentsAndUnBoundMachines();
    private void UpdateTestMachineStatusInTfs(ICollection`1<LabEnvironment> labEnvironments, ICollection`1<TestMachine> freeTestMachines);
    private bool IsEnvironmentNewOrUpdated_NoLock(TestEnvironment testEnvironment);
    internal IDictionary`2<string, string> GetTfsControllerProperties();
    internal int GetTfsSyncInterval();
    [CompilerGeneratedAttribute]
private TestEnvironment <UpdateEnvironmentsAndUnBoundMachines>b__120_2(LabEnvironment le);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerConnectionException : EqtException {
    public ControllerConnectionException(string message);
    public ControllerConnectionException(string message, Exception innerException);
    protected ControllerConnectionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerConnectionInfo : object {
    [CompilerGeneratedAttribute]
private bool <TolerateOldController>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControllerDisplayNameForErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private NetworkCredential <LabServiceUserCredential>k__BackingField;
    public bool TolerateOldController { get; private set; }
    public string ControllerUri { get; private set; }
    public string ControllerDisplayNameForErrors { get; private set; }
    public NetworkCredential LabServiceUserCredential { get; private set; }
    public ControllerConnectionInfo(string fullHostName, NetworkCredential labServiceUserCredential, bool tolerateOldController);
    public ControllerConnectionInfo(string controllerName, string controllerDisplayName, int port, bool tolerateOldController, NetworkCredential labServiceUserCredential);
    [CompilerGeneratedAttribute]
public bool get_TolerateOldController();
    [CompilerGeneratedAttribute]
private void set_TolerateOldController(bool value);
    [CompilerGeneratedAttribute]
public string get_ControllerUri();
    [CompilerGeneratedAttribute]
private void set_ControllerUri(string value);
    [CompilerGeneratedAttribute]
public string get_ControllerDisplayNameForErrors();
    [CompilerGeneratedAttribute]
private void set_ControllerDisplayNameForErrors(string value);
    [CompilerGeneratedAttribute]
public NetworkCredential get_LabServiceUserCredential();
    [CompilerGeneratedAttribute]
private void set_LabServiceUserCredential(NetworkCredential value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static string GetControllerUri(string fullControllerName);
}
internal static class Microsoft.VisualStudio.TestTools.Controller.ControllerConnectionManager : object {
    private static TcpClientServerChannelContainer m_channel;
    private static Dictionary`2<ControllerConnectionInfo, ControllerObject> m_controllers;
    private static ControllerConnectionManager();
    public static ControllerObject Connect(string fullControllerName);
    public static ControllerObject Connect(string controllerName, string controllerDisplayName, int port, bool tolerateOldController);
    public static ControllerObject Connect(string controllerName, string controllerDisplayName, int port);
    internal static ControllerObject Connect(ControllerConnectionInfo connectionInfo);
    public static void UnregisterChannel();
    private static void SetupChannel();
    private static ControllerObject InternalConnect(ControllerConnectionInfo controllerConnectionInfo);
    private static void OnNetworkCredentialChanged(object sender, EventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerContext : object {
    private ControllerExecution m_execution;
    private ITestElement m_testElement;
    private TestRun Microsoft.VisualStudio.TestTools.Controller.IControllerContext.TestRun { get; }
    private ITestElement Microsoft.VisualStudio.TestTools.Controller.IControllerContext.TestElement { get; }
    private TestRunDirectories Microsoft.VisualStudio.TestTools.Controller.IControllerContext.TestRunDirectories { get; }
    private string Microsoft.VisualStudio.TestTools.Controller.IControllerContext.LoadTestResultsConnectString { get; }
    public String[] AgentNames { get; }
    public ControllerContext(ControllerExecution execution, ITestElement testElement);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerContext.SendAgentMessage(string agentName, object message);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerContext.SendListenerMessage(TestMessage testMessage);
    private sealed virtual override TestRun Microsoft.VisualStudio.TestTools.Controller.IControllerContext.get_TestRun();
    private sealed virtual override ITestElement Microsoft.VisualStudio.TestTools.Controller.IControllerContext.get_TestElement();
    private sealed virtual override TestRunDirectories Microsoft.VisualStudio.TestTools.Controller.IControllerContext.get_TestRunDirectories();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Controller.IControllerContext.get_LoadTestResultsConnectString();
    public sealed virtual String[] get_AgentNames();
    public sealed virtual AgentInformation GetAgentInformation(string agentName);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerDataProvider : MarshalByRefObject {
    public virtual object InitializeLifetimeService();
    public sealed virtual void Dispose();
    public sealed virtual DataTable ReadTable(string invariantProviderName, string connectionString, string tableName);
    public sealed virtual List`1<string> GetColumns(string invariantProviderName, string connectionString, string tableName);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerEventSink : MarshalByRefObject {
    private ControllerEventSinkCallback m_callback;
    internal ControllerEventSink(ControllerEventSinkCallback callback);
    public sealed virtual void Dispose();
    public sealed virtual void ControllerEvent(TestMessage message);
    public virtual object InitializeLifetimeService();
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerEventSinkCallback : MulticastDelegate {
    public ControllerEventSinkCallback(object object, IntPtr method);
    public virtual void Invoke(TestMessage message);
    public virtual IAsyncResult BeginInvoke(TestMessage message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerExecution : object {
    private static int c_defaultMinTestsPerAgent;
    private int m_minimumTestsPerAgent;
    private int m_bucketSize;
    private DeploymentQueue m_deploymentQueue;
    private DeploymentJob m_deploymentJob;
    private object m_deploymentJobLock;
    private RemoteObjectContainer`1<FileCopyService> m_fileCopyService;
    private FileCopyServiceFlags m_deploymentFlags;
    private FileCopyInfo[] m_fileRequirementList;
    private FileCopyService m_agentFileCopyService;
    private int m_fileCopyListenerCount;
    private object m_fileCopyLock;
    private static int c_defaultLogCopyTimeout;
    private Dictionary`2<Guid, CompleteCallback> m_dataCompletedResetEvents;
    private TestRun m_testRun;
    private Guid m_runId;
    private bool m_isRemoteRun;
    private ControllerObject m_controller;
    private IControllerSpooledJob m_controllerSpooledJob;
    private Dictionary`2<string, AgentMachine> m_agentMachines;
    private Dictionary`2<Guid, List`1<AgentMachine>> m_testAgents;
    private HashSet`1<AgentMachine> m_activeAgents;
    private Dictionary`2<Guid, List`1<AgentMachine>> m_unassignedTests;
    private bool m_canAssignTests;
    private int m_onlineMatchingExecutionAgentCount;
    private int m_queuedAgentRunCount;
    private ControllerMachine m_collectionController;
    private ControllerEventSink m_collectionControllerMessageSink;
    private ControllerEventSink m_sessionManagerSink;
    private ControllerExecution m_sessionManagerExecution;
    private object m_sessionManagerExecutionLock;
    private bool m_isOwnedBySessionManager;
    private object m_collectionControllerLock;
    private ITestElement[] m_testList;
    private Dictionary`2<Guid, ISyncStartTest> m_syncStartTests;
    private RunStateMachine m_runState;
    private bool m_runStarted;
    private HashSet`1<RemoteObjectContainer`1<IControllerEvents>> m_listeners;
    private HashSet`1<RemoteObjectContainer`1<IControllerEvents>> m_masterListeners;
    private BackgroundSpecialJobProcessor`1<ReceivedTestMessageWrapper> m_testMessageReceiver;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_allowIncomingTestMessages;
    private BackgroundTestMessageProcessor`1<TestMessage> m_testMessageSender;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_allowOutgoingTestMessages;
    private Thread m_heartbeatThread;
    private Thread m_executionThread;
    private ControllerPluginManager m_pluginManager;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_allowPluginMessages;
    private Dictionary`2<Guid, List`1<AgentMachine>> m_agentSyncList;
    private Dictionary`2<Guid, Timer> m_syncTimer;
    private static int c_defaultSyncTimeout;
    private static int AgentHelloTimeout;
    private ManualResetEvent m_agentsReleased;
    private string m_workingDirectory;
    private TestRunDirectories m_testRunDirectories;
    private DateTime m_timeQueued;
    private DateTime m_timeStarted;
    private ManualResetEvent m_executeRun;
    private ManualResetEvent m_runStoppingOrAborting;
    private Stopwatch m_runningTime;
    private Timer m_timeoutTimer;
    private int m_runTimeout;
    private static int c_timeoutResolution;
    private bool m_traceVerbose;
    [CompilerGeneratedAttribute]
private EventHandler RunQueued;
    [CompilerGeneratedAttribute]
private EventHandler RunStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentListEventArgs> RunComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentListEventArgs> AgentReleased;
    private WindowsIdentity m_currentIdentity;
    private ManualResetEvent m_collectorsInitialized;
    private ManualResetEvent m_agentProcessesInitialized;
    private EventAsynchronousMultiDispatcher m_asyncMultiDispatcher;
    private Thread m_signalSyncStartThread;
    private object m_signalSyncStartThreadLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_stopSignalingSyncStart;
    private Dictionary`2<int, Thread> m_threadsToWaitForOnDispose;
    private bool m_isDisposed;
    private object m_messagePumpThreadLock;
    private ControllerExecution AgentOwner { get; }
    internal StateMachine`1<RunState> StateMachine { get; }
    internal Guid RunId { get; }
    internal TestRun TestRun { get; }
    internal RunState RunState { get; }
    internal bool IsStarted { get; }
    internal bool IsCompleted { get; }
    public DateTime TimeJobQueued { get; }
    public TimeSpan ElapsedExecutionTime { get; }
    public string Owner { get; }
    public int SyncStartTimeout { get; }
    internal bool IsOwnedBySessionManager { get; internal set; }
    private SessionManager SessionManager { get; }
    private string Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine.Name { get; }
    private bool Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine.ArePluginsInitialized { get; private set; }
    public TestRunDirectories TestRunDirectories { get; }
    public string LoadTestResultsConnectionString { get; }
    public String[] AgentNames { get; }
    private TestRun Microsoft.VisualStudio.TestTools.Execution.IExecutionRunConfiguration.TestRun { get; }
    private ITestElement[] Microsoft.VisualStudio.TestTools.Execution.IExecutionRunConfiguration.TestElements { get; }
    internal ControllerExecution(ControllerObject controller, string workingDirectory, DeploymentQueue deploymentQueue, IControllerSpooledJob controllerSpooledJob);
    internal ControllerExecution(ControllerObject controller, string workingDirectory, DeploymentQueue deploymentQueue, IControllerSpooledJob controllerSpooledJob, RunStateMachineFactory runStateMachineFactory);
    private void InitializeAgentAssignments();
    internal bool AddAgentMachines(List`1<AgentMachine> agentMachines, List`1<AgentMachine> unusedAgents, int matchingOnlineExecutionAgentCount);
    private void UpdateAgentExecutingStatus(AgentMachine agent);
    private void RequestStartRunState();
    private bool AssignTestsToAgents(List`1<AgentMachine> availableAgents);
    private ControllerExecution get_AgentOwner();
    private bool AssignToExecutionAgents(List`1<AgentMachine> availableAgents);
    private bool AssignTestsToExecutionAgentsHelper(List`1<AgentMachine> executionAgents);
    private void AssignToCollectionOnlyAgents(List`1<AgentMachine> availableAgents);
    private void AssignToSingleAgentRig(IList`1<AgentMachine> availableAgents, IList`1<Guid> execIdsToAssign);
    private void AssignFullBuckets(IList`1<AgentMachine> availableAgents, IList`1<Guid> execIdsToAssign);
    private void AssignPartialBuckets(IList`1<AgentMachine> availableAgents, IList`1<Guid> execIdsToAssign);
    private void AssignMultiAgentTest(IList`1<AgentMachine> availableAgents, Guid execId);
    private void AssignAgentTestList(AgentMachine agent, IList`1<Guid> testList, bool createTestMap);
    private void UnassignTests(AgentMachine agent);
    private void GetMinMaxAgentsFromMultiAgentTest(IMultipleAgentTest multiAgentTest, Int32& minAgents, Int32& maxAgents);
    private void InitializeDeployment(DeploymentQueue deploymentQueue);
    private bool DoDeployment();
    private void AddDeploymentJob(DeploymentJob job);
    private static FileCopyService CreateAgentFileCopyService(RemoteObjectContainer`1<FileCopyService> clientFileCopyServiceContainer, string deploymentDir);
    private void DoReverseDeployment();
    private void CleanupDeployment();
    private void ReverseDeploymentComplete(Guid runId, FileCopyFinishedReason reason);
    private void IncrementFileCopyServiceCount();
    private void DecrementFileCopyServiceCount();
    private bool SendFileCopyEvent();
    private void StopDeployment();
    public sealed virtual void FileCopyComplete(Exception exInfo);
    private void MoveInstrumentedAssemblies();
    [CompilerGeneratedAttribute]
public void add_RunQueued(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RunQueued(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RunStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RunStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_RunComplete(EventHandler`1<AgentListEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RunComplete(EventHandler`1<AgentListEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_AgentReleased(EventHandler`1<AgentListEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_AgentReleased(EventHandler`1<AgentListEventArgs> value);
    public sealed virtual void Dispose();
    internal void StartTestRun(TestRun testRun, RemoteObjectContainer`1<FileCopyService> fileCopyServiceContainer, RemoteObjectContainer`1<IControllerEvents> defaultListenerContainer);
    private void SetTestRunVars(TestRun testRun);
    private bool QueueTests(AgentMachine agent, AgentLoadDistributor loadDistributor, int totalAgentCount);
    private AgentLoadDistributor GetCustomLoadDistributor(string customLoadDistribution, AgentLoadDistributor defaultLoadDistributor);
    private void DoStopTestRun();
    private void DoAbortTestRun();
    private void DoStopOrAbortTestRun(Action`1<ICollectorMachine> stop, string actionName);
    private void RunStateQueuing();
    private void RunStateDeploying();
    private void RunStateDeployed();
    private void RunStateQueued();
    protected virtual void RunStateStarting();
    private AgentLoadDistributor CreateLoadDistributor();
    private void RunStateStarted();
    private void RunStateRunning();
    private void RunStatePausing();
    private void RunStatePaused();
    private void RunStateResuming();
    private void RunStateTimeout();
    private void RunStateStopping();
    private void RunStateStopped();
    private void RunStateAborting();
    private void RunStateAborted();
    private void RunStateCompleting();
    private void ReleaseAllAgents();
    private void RunStateCompletingCleanup();
    private void RunStateCompleted();
    private void UpdateAgentMachineStatus(RunState newState);
    private void TimeoutMonitor(object o);
    private void SignalSyncStart(object state);
    private void SyncStartTimeoutHandler(object state);
    internal StateMachine`1<RunState> get_StateMachine();
    private void SendListenerEvent(TestMessage message);
    internal void SendRunTextMessage(string message, Exception ex, TestOutcome runOutcome);
    private void SendRunTextMessage(string message, Exception ex);
    internal void SendRunTextMessage(string message);
    private void SendExceptionMessage(Exception ex);
    private void SendStateEvent(RunState newState);
    private void OnSendTestMessage(TestMessage testMessage, IQueuedJobs`1<TestMessage> queuedJobs);
    private void CallListeners(TestMessage testMessage);
    private FileCopyTestResultMessage HandleInternalFileCopyMessage(InternalFileCopyTestResultMessage internalFileCopyMessage, List`1<KeyValuePair`2<InternalFileCopyTestResultMessage, FileCopyTestResultMessage>> internalFileCopyMessages);
    private void CheckListeners();
    private void HeartbeatThread(object obj);
    internal Guid get_RunId();
    internal TestRun get_TestRun();
    internal RunState get_RunState();
    internal bool get_IsStarted();
    internal bool get_IsCompleted();
    public DateTime get_TimeJobQueued();
    public TimeSpan get_ElapsedExecutionTime();
    public string get_Owner();
    public int get_SyncStartTimeout();
    internal bool get_IsOwnedBySessionManager();
    internal void set_IsOwnedBySessionManager(bool value);
    private void SpoolingFailed(Exception ex);
    private void ReportTestRunWarning(string message);
    private bool CheckQueueRunToCollectionController();
    protected virtual IControllerExecution CreateCollectionController();
    private bool HandleDataCompleteMessage(DataCompletedMessage dataCompleted);
    private void ControllerEvent(TestMessage message);
    private void ControllerEventImmediate(TestMessage message);
    private Guid GetExecIdForTestMessage(TestMessage message);
    private void CollectionControllerRunCompleted(Guid runId);
    private void ReleaseCollectionController();
    private SessionManager get_SessionManager();
    private void SessionManagerEvent(TestMessage message);
    private void SessionManagerRunCompleted(Guid runId);
    private void ReleaseSessionManagerExecution();
    internal void CheckSessionManagement(Boolean& skipAgentReservation);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine.get_Name();
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine.get_ArePluginsInitialized();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine.set_ArePluginsInitialized(bool value);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine.StopTestRun(Guid runId);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine.AbortTestRun(Guid runId);
    private bool CheckQueueRunToCollectionOnlyAgents();
    private void SyncAllCollectorsReady();
    private void SyncAllExecutionAgentsReady();
    private bool CheckQueueRunToExecutionAgents();
    private void HandleRaiseEventMessage(RaiseEventMessage message, AgentMachine agent);
    private void OnProcessReceivedTestMessage(ReceivedTestMessageWrapper receivedTestMessageWrapper, IQueuedJobs`1<ReceivedTestMessageWrapper> queuedJobs);
    internal void AgentEvent(string agentName, TestMessage message);
    internal void AgentEventImmediate(string agentName, TestMessage message);
    internal void ReadyForSyncStart(string agentName, Guid runId, Guid execId);
    private void OnAgentRunFinished(string agentName, Guid runId);
    public void OnAgentDisconnected(AgentMachine agent);
    public void SafeActionCallWhileDispose(AgentMachine agent, Action action);
    private bool SendAgentDisconnectedToPlugins(AgentMachine agent);
    private void ReleaseAgent(AgentMachine agent);
    private void ReleaseAgentWorker(object param);
    private void VerifyAgentOnlineStateBeforeRelease(AgentMachine agent);
    private void CheckForRunCompleteAndCleanup(bool ignoreCollectionOnlyMachines);
    private void CollectorReady(ICollectorMachine collector);
    private void TestAgentProcessReady(AgentMachine agent);
    private void HandleRunStateEvent(RunStateEvent runEvent, bool isFromCollectionOnly);
    private bool HandleTestStateEvent(AgentMachine agent, TestStateEvent testEvent);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
    internal IList`1<ICollectorMachine> GetCollectorMachinesSnapshot();
    private IList`1<ICollectorMachine> GetCollectorMachinesSnapshot(AgentFilterFunctor agentFilterCriteria);
    internal List`1<ICollectorMachine> GetCollectorMachinesSnapshot(DataCollectionEventArgs args, bool includeOurCollectorMachinesOnly);
    private List`1<ICollectorMachine> GetCollectorMachinesSnapshot(DataCollectionEventArgs args, bool includeOurCollectorMachinesOnly, AgentFilterFunctor agentFilterCriteria);
    private List`1<AgentMachine> GetExecutionMachinesSnapshot();
    private List`1<AgentMachine> GetOnlineAgentsSnapshot();
    internal List`1<AgentMachine> GetAgentsSnapshot(AgentFilterFunctor filterCriteria);
    private void HandleErrorAbortRun(string errorMessage, Exception ex);
    private bool CheckForRunComplete();
    private bool CheckForRunComplete(bool bypassCollectionOnlyMachines);
    protected void CancelUnassignedTests();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IDataCompletedSink.SendMessage(DataCompletedMessage message);
    protected List`1<AgentMachine> GetAgentsSnapshot();
    public void SendAgentMessage(string agentName, object message);
    public void SendListenerMessage(TestMessage testMessage);
    public TestRunDirectories get_TestRunDirectories();
    public string get_LoadTestResultsConnectionString();
    public String[] get_AgentNames();
    private sealed virtual override TestRun Microsoft.VisualStudio.TestTools.Execution.IExecutionRunConfiguration.get_TestRun();
    private sealed virtual override ITestElement[] Microsoft.VisualStudio.TestTools.Execution.IExecutionRunConfiguration.get_TestElements();
    public void PauseTestRun();
    public void ResumeTestRun();
    public void StopTestRun();
    public void AbortTestRun();
    public void RegisterForTestRunEvents(RemoteObjectContainer`1<IControllerEvents> listenerContainer);
    internal void RegisterForTestRunEvents(RemoteObjectContainer`1<IControllerEvents> listenerContainer, bool isMaster);
    public void DisconnectTestRun(IControllerEvents eventHandler);
    public String[] GetAgentList();
    public void SendAgentMessage(Guid runId, Guid execId, string agentName, object message);
    private String[] GetExecutionAgentList();
    private List`1<string> GetAgentList(AgentFilterFunctor condition);
    private void SendAgentsMessage(List`1<AgentMachine> agents, object message);
    [CompilerGeneratedAttribute]
private void <DoDeployment>b__33_0(FileCopyService fileCopyService);
    [CompilerGeneratedAttribute]
private void <StartTestRun>b__120_0(FileCopyService fileCopyService);
    [CompilerGeneratedAttribute]
private void <DoStopTestRun>b__124_0(ICollectorMachine collectorMachine);
    [CompilerGeneratedAttribute]
private void <DoAbortTestRun>b__125_0(ICollectorMachine collectorMachine);
    [CompilerGeneratedAttribute]
private bool <GetAgentList>b__264_0(AgentMachine agent);
    [CompilerGeneratedAttribute]
private bool <GetExecutionAgentList>b__266_0(AgentMachine agent);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerMachine : object {
    private IControllerExecution m_controller;
    private string m_name;
    private bool m_arePluginsInitialized;
    private NetworkCredential m_userCredential;
    public IControllerExecution Controller { get; }
    public string Name { get; }
    public bool ArePluginsInitialized { get; public set; }
    internal ControllerMachine(IControllerExecution controller, string name);
    internal ControllerMachine(IControllerExecution controller, string name, NetworkCredential labServiceUser);
    public IControllerExecution get_Controller();
    public sealed virtual string get_Name();
    public sealed virtual bool get_ArePluginsInitialized();
    public sealed virtual void set_ArePluginsInitialized(bool value);
    public sealed virtual void StopTestRun(Guid runId);
    public sealed virtual void AbortTestRun(Guid runId);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerObject : MarshalByRefObject {
    private Dictionary`2<Guid, ControllerExecution> m_executionList;
    private ManualResetEvent m_executionListEmpty;
    private Queue`1<ControllerExecution> m_runQueue;
    private AutoResetEvent m_runQueuedEvent;
    private Thread m_runQueueThread;
    private Dictionary`2<IControllerQueueEvents, WindowsIdentity> m_runQueueListeners;
    private BackgroundJobProcessor`1<ControllerQueueEntry> m_runQueueMessageProcessor;
    private WindowsIdentity m_currentIdentity;
    private bool m_remoteController;
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) m_controllerDomainName;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_serviceShutdown;
    private string m_controllerUser;
    private string m_workingDirectory;
    private bool m_createdLocalAgent;
    private static string m_defaultAgentVersion;
    private AgentManager m_agentManager;
    private DeploymentQueue m_deploymentQueue;
    private List`1<Guid> m_deleteLiveRun;
    private static int c_runAbortTimeout;
    private EventPumpSink m_dataCollectionEventReceiverSink;
    private BackgroundJobProcessor`1<SynchronizedEventInfo> m_dataCollectionEventReceiver;
    private SessionManager m_sessionManager;
    private bool m_isRegisteredForRemoteCollection;
    private object m_registerForRemoteCollectionLock;
    private object m_tfsSyncLock;
    private object m_tfsSyncTimerLock;
    private Timer m_tfsSyncTimer;
    private ControllerConfiguration m_controllerConfiguration;
    private IRunMonitorFactory m_tcmRunMonitorFactory;
    private IRunMonitor m_tcmRunMonitor;
    private Dictionary`2<int, Thread> m_threadsToAbortOnDispose;
    private bool m_isDisposed;
    private ControllerDataProvider m_dataProvider;
    private IdentityCache`1<string> m_allowedAgentIdentities;
    private IDeploymentTaskMonitor deploymentTaskMonitor;
    [CompilerGeneratedAttribute]
private bool <TolerateOldController>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConfiguredWithHostedTfs>k__BackingField;
    [CompilerGeneratedAttribute]
private NetworkCredential <LabServiceUserCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<RegisterRemoteCollectionEventArgs> RemoteCollectionRegistering;
    [CompilerGeneratedAttribute]
private EventHandler`1<RegisterRemoteCollectionEventArgs> RemoteCollectionUnregistering;
    private static Dictionary`2<Uri, ControllerObject> s_controllerObjects;
    private static object s_controllerObjectsLock;
    [CompilerGeneratedAttribute]
private static Domain <ControllerDomain>k__BackingField;
    public bool IsRemote { get; }
    public AgentManager LocalAgentManager { get; public set; }
    internal TfsTeamProjectCollection TeamProjectCollection { get; }
    internal bool IsConfiguredWithTfs { get; }
    internal bool TolerateOldController { get; internal set; }
    internal bool IsConfiguredWithHostedTfs { get; internal set; }
    internal NetworkCredential LabServiceUserCredential { get; internal set; }
    public ICollectorEventSink CollectorEventSink { get; }
    public IRemoteDataProvider DataConnectionProvider { get; }
    public Version ControllerVersion { get; }
    public bool CloseLocalHostApplication { get; }
    public bool TestsRunning { get; }
    public SessionManager SessionManager { get; }
    private static string ControllerDomainName { get; }
    private static Domain ControllerDomain { get; private set; }
    public ControllerObject(bool remote, ControllerConfiguration controllerConfiguration, AgentManager agentManager);
    public ControllerObject(bool remote, string workingDirectory, ControllerConfiguration controllerConfiguration, AgentManager agentManager);
    public ControllerObject(bool remote, string workingDirectory, ControllerConfiguration controllerConfiguration, AgentManager agentManager, IRunMonitorFactory runMonitorFactory);
    private static ControllerObject();
    private void StartDeploymentTaskPolling(string serverUrl);
    internal void InitializeAgentManager(bool remote, ControllerConfiguration controllerConfiguration, AgentManager agentManager);
    private void AgentStateChangedHandler(object sender, AgentInfoEventArgs e);
    private void InitializeAgentManager_Local(ControllerConfiguration controllerConfiguration);
    public sealed virtual void Dispose();
    private void DisposeLocalAgent();
    public bool get_IsRemote();
    public AgentManager get_LocalAgentManager();
    public void set_LocalAgentManager(AgentManager value);
    internal TfsTeamProjectCollection get_TeamProjectCollection();
    internal bool get_IsConfiguredWithTfs();
    [CompilerGeneratedAttribute]
internal bool get_TolerateOldController();
    [CompilerGeneratedAttribute]
internal void set_TolerateOldController(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsConfiguredWithHostedTfs();
    [CompilerGeneratedAttribute]
internal void set_IsConfiguredWithHostedTfs(bool value);
    [CompilerGeneratedAttribute]
internal NetworkCredential get_LabServiceUserCredential();
    [CompilerGeneratedAttribute]
internal void set_LabServiceUserCredential(NetworkCredential value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemoteCollectionRegistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemoteCollectionRegistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RemoteCollectionUnregistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RemoteCollectionUnregistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
    public sealed virtual void RegisterForRemoteCollection(TestRun run);
    public sealed virtual void UnregisterForRemoteCollection(TestRun run);
    public sealed virtual ICollectorEventSink get_CollectorEventSink();
    private void DispatchClientEvent(SynchronizedEventInfo synchronizedEventInfo, IQueuedJobs`1<SynchronizedEventInfo> queuedJobs);
    private void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
    private void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, Action`1<ControllerExecution> raiseEvent);
    public sealed virtual void QueueTestRun(TestRun testRun, FileCopyService fileCopyService, IControllerEvents eventHandler);
    private void TestRunAvailableHandler(object sender, TestRunAvailableEventArgs args);
    private IControllerSpooledJob GetSpooledJob(TestRun testRun);
    private void CheckMultiAgentTest(TestRun run, int matchingOnlineExecutionAgentCount);
    private void RunQueueThread();
    private void AddAgentsToRunFromQueue(ControllerExecution nextRun, Boolean& takeOutFromQueue);
    private IList`1<ControllerExecution> MoveOutFromRunQueue();
    private void Sleep();
    private bool AddAgentsToRun(ControllerExecution run);
    private void TraceReservedAgents(IList`1<AgentMachine> agents, Guid runId);
    private void RunQueuedHandler(object sender, EventArgs e);
    private void RunStartedHandler(object sender, EventArgs e);
    private void RunCompleteHandler(object sender, AgentListEventArgs e);
    private void AgentReleasedHandler(object sender, AgentListEventArgs e);
    private void AgentTimeoutHandler(object sender, AgentNameEventArgs args);
    public sealed virtual void PauseTestRun(Guid runId);
    public sealed virtual void ResumeTestRun(Guid runId);
    public sealed virtual void StopTestRun(Guid runId);
    public sealed virtual void AbortTestRun(Guid runId);
    public sealed virtual void RegisterForTestRunEvents(Guid runId, IControllerEvents eventHandler);
    public sealed virtual void DisconnectTestRun(Guid runId, IControllerEvents eventHandler);
    public sealed virtual String[] GetAgentList(Guid runId);
    public sealed virtual string GetTestRunOwner(Guid runId);
    internal string GetTestRunOwnerInternal(Guid runId);
    internal TestRun GetTestRun(Guid runId);
    public sealed virtual IRemoteDataProvider get_DataConnectionProvider();
    public sealed virtual void SendAgentMessage(Guid runId, Guid execId, string agentName, object message);
    public sealed virtual void RegisterForRunQueueEvents(IControllerQueueEvents eventHandler);
    public sealed virtual void DisconnectQueueListener(IControllerQueueEvents eventHandler);
    public sealed virtual void AgentHello(string agentName);
    public sealed virtual void Hello();
    public sealed virtual Version get_ControllerVersion();
    private void SendRunQueueMessage(ControllerExecution execution, RunQueueState queueState);
    private void SendRunQueueMessage(Guid runId, RunQueueState queueState);
    private void OnCallQueueListeners(ControllerQueueEntry message, IQueuedJobs`1<ControllerQueueEntry> queuedJobs);
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentService);
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, IAgentService agentService);
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, IAgentService agentService);
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, string agentVersion, IAgentService agentService);
    public sealed virtual void SetAgentDataCollectorInformation(AgentDataCollectorInformation info);
    public sealed virtual void ReadyForSyncStart(string agentName, Guid runId, Guid execId);
    public sealed virtual void SetAgentConnectionState(string agentName, bool online);
    private void SetAgentConnectionStateInternal(string agentName, bool online);
    public sealed virtual void AgentEvent(string agentName, TestMessage message);
    public sealed virtual void AgentEventImmediate(string agentName, TestMessage message);
    public sealed virtual ControllerQueueEntry[] GetControllerQueue();
    private ControllerQueueEntry CreateQueueEntry(ControllerExecution execution);
    public sealed virtual ControllerTestRunDescription[] GetTestRunDescriptions();
    public sealed virtual ControllerTestRunDescription GetTestRunDescription(Guid runId);
    public sealed virtual IExecutionRunConfiguration GetExecutionRunConfig(Guid runId);
    public sealed virtual void DeleteTestRun(Guid runId);
    private void DeleteSpooledRun(Guid runId);
    public sealed virtual bool CheckTestRunAccess(Guid testRunId);
    public sealed virtual string GetControllerUserName();
    public sealed virtual AgentStatus[] GetAgentStatuses();
    public virtual AgentStatus GetAgentStatus(string agentName);
    public sealed virtual string AddAgent(AgentProperties agentProp);
    public sealed virtual void AddAgentServiceAccount(string agentMachine, string userName);
    public sealed virtual void RemoveAgentServiceAccount(string userName);
    private void RequirePermissionForRegisterOrUpdateAgent(WindowsIdentity identity);
    public sealed virtual void RemoveAgent(string agentName);
    public sealed virtual void RestartAgent(string agentName);
    public sealed virtual void SetAgentOperationalState(string agentName, bool online);
    public sealed virtual AgentProperties GetAgentProperties(string agentName);
    public sealed virtual void SetAgentProperties(AgentProperties agentProp);
    public sealed virtual AgentProperties[] GetAllAgents();
    public sealed virtual String[] GetAgentNetworkInterfaceNames(string agentName);
    public sealed virtual void StartAgents();
    public sealed virtual void StopAgents();
    public sealed virtual void DeleteTempFiles(Guid tmiRunId, Guid testEnvironmentId);
    public sealed virtual void DeleteTempFiles();
    public sealed virtual int GetLoadFactor();
    public sealed virtual ReadOnlyCollection`1<string> GetTestEnvironmentNames();
    public virtual TestEnvironment GetTestEnvironment(string testEnvironmentName, bool includeCollectorInformation);
    private void AddCollectorInformation(TestEnvironment testEnvironment);
    public sealed virtual TestEnvironment GetTestEnvironment(Guid testEnvironmentId, bool includeCollectorInformation);
    internal string GetTeamProjectFromTestRunId(Guid testRunId);
    private string GetTeamProjectFromTestRun(TestRun testRun);
    public sealed virtual TestEnvironmentStatus GetTestEnvironmentStatus(string testEnvironmentName);
    public sealed virtual UpdatedTestEnvironments UpdateTestEnvironment(TestEnvironment testEnvironment);
    public virtual TestEnvironment UnregisterTestEnvironment(TestEnvironment testEnvironment);
    public sealed virtual ControllerInformation GetControllerInformation();
    public sealed virtual void SetControllerInformation(ControllerInformation controllerInformation);
    public void SetControllerConnectionStringInformation(ControllerInformation controllerInformation);
    private void RequirePermissionsForAction(WindowsIdentity identity, ControllerAction controllerAction);
    private void RequirePermissionsForAction(WindowsIdentity identity, ControllerAction controllerAction, string teamProjectName);
    private void RequirePermissionsForAction(WindowsIdentity identity, ControllerAction controllerAction, Guid testRunId);
    private void RequirePermissionsForAction(WindowsIdentity identity, ControllerAction controllerAction, TfsTeamProjectCollection server, string teamProjectName);
    private void RequirePermissionsForAction(WindowsIdentity identity, ControllerAction controllerAction, TfsTeamProjectCollection server, string teamProjectName, ControllerObject controllerObject, Guid testRunId);
    internal virtual void RequireAgentServiceUser(WindowsIdentity identity, string identitySid, string agentName, bool canUseIdentityCache);
    private ControllerExecution FindExecutionObject(Guid testRunId);
    public void PurgeResultsDataBase();
    public sealed virtual bool get_CloseLocalHostApplication();
    public sealed virtual bool get_TestsRunning();
    private ControllerExecution GetControllerExecution(SessionId sessionId);
    internal static string FormatQueueRunExceptionMessage(TestRun testRun, string errorMessage);
    protected virtual ControllerExecution CreateControllerExecution(string workingDirectory, DeploymentQueue deploymentQueue, IControllerSpooledJob controllerSpooledJob);
    private void OnSynchronizeWithTfsElapsedEvent(object sender, ElapsedEventArgs args);
    protected virtual void SetAgentDataCollectorInformationImpl(AgentDataCollectorInformation newInfo);
    private void RegisterAgentDataCollectorsWithTfs(object obj);
    private void RegisterAllDataCollectorsWithTfs(object state);
    private void RegisterDataCollectorsWithTfs(ICollection`1<DataCollectorInformation> dataCollectorsToRegister);
    private void OnTfsUriChanged(object sender, TfsUriChangedEventArgs e);
    private void StartTcmRunMonitor(string tfsUri, string controllerName);
    private void StopTcmRunMonitor();
    private void StopDeploymentTaskMonitor();
    private void OnTestControllerUnregistered(object sender, EventArgs e);
    public virtual object InitializeLifetimeService();
    public sealed virtual SessionManager get_SessionManager();
    private AgentDataCollectorInformation GetAgentDataCollectorInformation(AgentMachine agent);
    public sealed virtual ReadOnlyCollection`1<AgentDataCollectorInformation> GetDataCollectorInformation();
    public static void AddControllerToHashtable(Uri controllerUri, ControllerObject controller);
    public static ControllerObject GetControllerInHashtable(Uri controllerUri);
    public static bool IsInControllerHashtable(Uri controllerUri);
    private static string get_ControllerDomainName();
    [CompilerGeneratedAttribute]
private static Domain get_ControllerDomain();
    [CompilerGeneratedAttribute]
private static void set_ControllerDomain(Domain value);
    private static bool AgentDomainTrusted(string agentDomainName);
    private AgentMachine GetAgentMachineAndUpdateAccessTime(string agentName);
    public sealed virtual bool ExecuteDeploymentTask(DeploymentTask task, string agentName);
    public sealed virtual void CancelDeploymentTask(long deploymentTaskId, string agentName);
    public sealed virtual void UpdateAgentStatus(string agentName, bool deployingBuild);
    public sealed virtual void ExecutionDataReceived(string data, bool error, long deploymentTaskId);
    public sealed virtual void UpdateDeploymentTaskStatus(long deploymentTaskId, DeploymentTaskStatus newStatus);
    [CompilerGeneratedAttribute]
private void <.ctor>b__37_0(object state);
    [CompilerGeneratedAttribute]
private void <OnTfsUriChanged>b__184_0(object state);
}
internal enum Microsoft.VisualStudio.TestTools.Controller.ControllerPermissions : Enum {
    public int value__;
    public static ControllerPermissions ControllerAdmin;
    public static ControllerPermissions ControllerUser;
    public static ControllerPermissions ControllerAdminOrTestRunOwner;
    public static ControllerPermissions AgentServiceUser;
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerPlugin : object {
    private IControllerPlugin m_plugin;
    private bool m_badMessageSink;
    private ControllerContext m_context;
    private bool m_initialized;
    public IControllerPlugin Plugin { get; public set; }
    public bool MessageSinkBad { get; public set; }
    public ControllerContext Context { get; public set; }
    public bool Initialized { get; public set; }
    public IControllerPlugin get_Plugin();
    public void set_Plugin(IControllerPlugin value);
    public bool get_MessageSinkBad();
    public void set_MessageSinkBad(bool value);
    public ControllerContext get_Context();
    public void set_Context(ControllerContext value);
    public bool get_Initialized();
    public void set_Initialized(bool value);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerPluginManager : object {
    private Dictionary`2<Guid, ControllerPlugin> m_plugins;
    public IControllerPlugin LoadPlugin(ControllerExecution execution, ITestElement testElement);
    public static IControllerPlugin CreateControllerPlugin(ITestElement testElement);
    public void InitializePlugin(Guid executionId);
    public IControllerPlugin FindPlugin(Guid executionId);
    public void SetMessageSinkBad(Guid executionId);
    public void CleanupTest(Guid execId);
    public void CleanupPlugins();
    public static void DeleteTestRun(Guid guidTestRunId, IExecutionRunConfiguration runConfig, ControllerInformation controllerInformation);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerUtilities : object {
    private static Dictionary`2<ControllerAction, ControllerPermissions> ControllerActionToControllerPermission;
    private static Dictionary`2<ControllerAction, TfsPermissions> ControllerActionToTfsPermission;
    private static ControllerUtilities();
    private static bool IsAuthenticatedOnTfsProject(WindowsIdentity identity, TfsTeamProjectCollection server, string teamProjectName, string permissionName);
    private static bool IsAuthenticatedOnTfs(WindowsIdentity identity, TfsTeamProjectCollection server, string permissionName);
    internal static void AuthenticateUserforControllerAndTfsPermissions(WindowsIdentity identity, ControllerAction controllerAction, TfsTeamProjectCollection server, string teamProjectName);
    internal static void AuthenticateUserforControllerAndTfsPermissions(WindowsIdentity identity, ControllerAction controllerAction, TfsTeamProjectCollection server, string teamProjectName, ControllerObject controllerObject, Guid testRunId);
    internal static void AuthenticateUserforControllerAndTfsPermissions(WindowsIdentity identity, ControllerAction controllerAction, TfsTeamProjectCollection server, string teamProjectName, ControllerObject controllerObject, Guid testRunId, bool isVirtualEnv);
    private static bool HasControllerPermissions(WindowsIdentity identity, ControllerAction controllerAction, ControllerObject controllerObject, Guid testRunId);
    internal static bool HasTfsPermissions(WindowsIdentity identity, ControllerAction controllerAction, TfsTeamProjectCollection server, string teamProjectName, ControllerObject controllerObject, Guid testRunId);
    private static bool IsTestRunOwner(WindowsIdentity identity, ControllerObject controllerObject, Guid testRunId);
    private static Dictionary`2<ControllerAction, ControllerPermissions> InitializeControllerGroupPermissionMapping();
    private static Dictionary`2<ControllerAction, TfsPermissions> InitializeControllerTfsPermissionMapping();
}
internal class Microsoft.VisualStudio.TestTools.Controller.CredentialsHelper : object {
    internal static void StoreCredentials(Uri uri, CachedCredentialsType credentialsType, string userName, string password);
    internal static void StoreCredentials(Uri uri, CachedCredentialsType credentialsType, string userName, SecureString password);
    internal static void RemoveStoredCredential(Uri uri);
    internal static TfsCredentialCacheEntry GetCredentials(Uri uri);
    private static SecureString ConvertToSecureString(string normalString);
}
public class Microsoft.VisualStudio.TestTools.Controller.FileCollection : ConfigurationElementCollection {
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
}
public class Microsoft.VisualStudio.TestTools.Controller.FileElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("path")]
public string Path { get; }
    [ConfigurationPropertyAttribute("ispreinstall")]
public bool IsPreinstall { get; }
    [ConfigurationPropertyAttribute("parameters")]
public string Parameters { get; }
    public string get_Path();
    public bool get_IsPreinstall();
    public string get_Parameters();
}
internal interface Microsoft.VisualStudio.TestTools.Controller.ICollectorMachine {
    public string Name { get; }
    public bool ArePluginsInitialized { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_ArePluginsInitialized();
    public abstract virtual void set_ArePluginsInitialized(bool value);
    public abstract virtual void StopTestRun(Guid runId);
    public abstract virtual void AbortTestRun(Guid runId);
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IConfigurationEventListener {
    public abstract virtual void BeforeAgentsAdd(IEnumerable`1<AgentInformation> agentInformations);
    public abstract virtual void AfterAgentsAdd(IEnumerable`1<AgentInformation> agentInformations);
    public abstract virtual void BeforeAgentsUpdate(IEnumerable`1<AgentInformation> agentInformations, bool areAgentsConnecting);
    public abstract virtual void AfterAgentsUpdate(IEnumerable`1<AgentInformation> agentInformations);
    public abstract virtual void BeforeAgentsRemove(IEnumerable`1<AgentInformation> agentInformations);
    public abstract virtual void AfterAgentsRemove(IEnumerable`1<AgentInformation> agentInformations);
    public abstract virtual bool BeforeSetAgentOperationalState(string agentName, bool online);
    public abstract virtual void AfterSetAgentOperationalState(string agentName, bool online);
    public abstract virtual void BeforeConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentService, WindowsIdentity remoteIdentity);
    public abstract virtual void AfterConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentService);
    public abstract virtual void AgentInformationReplaced(IEnumerable`1<AgentInformation> agentInformations);
}
internal interface Microsoft.VisualStudio.TestTools.Controller.ISessionManagerProvider {
    public SessionManager SessionManager { get; }
    public abstract virtual SessionManager get_SessionManager();
}
internal class Microsoft.VisualStudio.TestTools.Controller.LabServiceHelper : object {
    private ControllerInformation m_controllerInfo;
    private TfsTeamProjectCollection m_teamFoundationServer;
    private LabService m_labService;
    public LabServiceHelper(ControllerInformation controllerInfo, TfsTeamProjectCollection server);
    public void UnregisterTestAgent(AgentInformation agentInformation);
    internal LabEnvironment QueryLabEnvironment(Uri labEnvironmentUri);
    public TestMachine RegisterTestAgent(AgentInformation agentInformation);
    public void UpdateTestMachineStatus(AgentInformation agentInformation);
    public void UpdateTestMachineStatus(AgentInformation agentInformation, List`1<StatusMessage> messages);
    public ICollection`1<LabEnvironment> QueryAllLabEnvironments();
    public ICollection`1<TestMachine> QueryUnboundTestMachines();
    public TestMachine GetTestMachine(AgentInformation agentInformation);
    public TestMachine GetTestMachine(Uri machineUri);
    internal static TestMachineState ConvertToTestMachineState(AgentConnectionState state);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.Controller.LoadTestHelper : object {
    public static string DEFAULT_LOADTEST_CATALOG_NAME;
    public static string DEFAULT_LOADTEST_RESULTS_CONNECT_STRING;
    public static string ALTERNATE_DEFAULT_LOADTEST_RESULTS_CONNECT_STRING;
    public static string DEFAULT_LOADTEST_LOCALDB_RESULTS_CONNECT_STRING;
    private static string EMPTY_LOADTEST_RESULTS_CONNECT_STRING;
    private static LoadTestHelper();
    public static string GetLoadTestResultsConnectString(bool isExecutedRemotely);
    public static void SetLoadTestResultsConnectString(string loadTestResultsConnectString);
    public static bool IsDefaultConnectionString(string connectionString);
    private static bool useSqlExpress();
    private static bool TestLoadTestResultsConnectString(string loadTestResultsConnectString);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ReceivedTestMessageWrapper : object {
    private string m_agentName;
    private TestMessage m_testMessage;
    public string AgentName { get; }
    public TestMessage TestMessage { get; }
    public ReceivedTestMessageWrapper(string agentName, TestMessage testMessage);
    public string get_AgentName();
    public TestMessage get_TestMessage();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Controller.RegistryHelper : object {
    private static string s_controllerSubKeyPath;
    private static RegistryHelper();
    public static void SetControllerRegistryKey(string keyName, string keyValue);
    public static string GetControllerRegistryKey(string keyName);
}
internal class Microsoft.VisualStudio.TestTools.Controller.SessionManager : object {
    private static TimeSpan SyncEventTimeout;
    private ControllerObject m_controller;
    private string m_workingDirectory;
    private DeploymentQueue m_deploymentQueue;
    private IDictionary`2<SessionGroupKey, SessionGroup> m_sessionGroups;
    private EquivalenceClassLockProvider`1<SessionGroupKey> m_lockProvider;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestRunAvailableEventArgs> TestRunAvailable;
    [CompilerGeneratedAttribute]
private EventHandler RunQueued;
    [CompilerGeneratedAttribute]
private EventHandler RunStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentListEventArgs> RunCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<AgentListEventArgs> AgentReleased;
    internal SessionManager(ControllerObject controller, string workingDirectory, DeploymentQueue deploymentQueue);
    private static SessionManager();
    [CompilerGeneratedAttribute]
internal void add_TestRunAvailable(EventHandler`1<TestRunAvailableEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_TestRunAvailable(EventHandler`1<TestRunAvailableEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_RunQueued(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RunQueued(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_RunStarted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_RunStarted(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_RunCompleted(EventHandler`1<AgentListEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_RunCompleted(EventHandler`1<AgentListEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_AgentReleased(EventHandler`1<AgentListEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_AgentReleased(EventHandler`1<AgentListEventArgs> value);
    internal bool RegisterSession(TestRun sessionRun, RemoteObjectContainer`1<FileCopyService> fileCopyServiceContainer, IControllerEvents listener, ControllerExecution& masterExecution);
    internal bool UnregisterSession(TestRun sessionRun, bool raiseSessionEndEvent);
    internal void StartSession(TestRun sessionRun);
    internal bool IsSessionInManagedGroup(TestRun testRun);
    internal static bool IsSessionManageable(TestRun sessionRun);
    internal ControllerExecution CreateMasterExecution();
    internal void OnCollectionRunQueued(object sender, EventArgs args);
    private void OnCollectionRunStarted(object sender, EventArgs args);
    private void OnCollectionRunCompleted(object sender, AgentListEventArgs args);
    private void OnAgentReleased(object sender, AgentListEventArgs args);
}
public class Microsoft.VisualStudio.TestTools.Controller.TestAgentInstallFile : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExecutable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPreinstall>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Param>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ProductVersion>k__BackingField;
    public string FullPath { get; public set; }
    public bool IsLocal { get; public set; }
    public bool IsExecutable { get; public set; }
    public bool IsPreinstall { get; public set; }
    public string Param { get; public set; }
    public Version ProductVersion { get; public set; }
    public TestAgentInstallFile(string path, bool preinstall, string param, NetworkCredential labServiceCreds);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLocal();
    [CompilerGeneratedAttribute]
public void set_IsLocal(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsExecutable();
    [CompilerGeneratedAttribute]
public void set_IsExecutable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPreinstall();
    [CompilerGeneratedAttribute]
public void set_IsPreinstall(bool value);
    [CompilerGeneratedAttribute]
public string get_Param();
    [CompilerGeneratedAttribute]
public void set_Param(string value);
    [CompilerGeneratedAttribute]
public Version get_ProductVersion();
    [CompilerGeneratedAttribute]
public void set_ProductVersion(Version value);
}
public class Microsoft.VisualStudio.TestTools.Controller.TestAgentInstallSettingsSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("Files")]
[ConfigurationCollectionAttribute]
public FileCollection TestSections { get; }
    public FileCollection get_TestSections();
}
internal class Microsoft.VisualStudio.TestTools.Controller.TestManagementServiceHelper : object {
    private ControllerInformation m_controllerInfo;
    private TfsTeamProjectCollection m_teamFoundationServer;
    private ITestManagementService m_testCaseManager;
    private static string m_defaultExpectedTestAgentVersion;
    [CompilerGeneratedAttribute]
private ITestController <Controller>k__BackingField;
    public ITestController Controller { get; private set; }
    public TfsTeamProjectCollection TeamProjectCollection { get; }
    public Guid TfsProjectCollectionId { get; }
    public TestManagementServiceHelper(ControllerInformation controllerInfo, TfsTeamProjectCollection server);
    public TestManagementServiceHelper(ControllerInformation controllerInfo, TfsTeamProjectCollection server, bool expectControllerAlreadyRegistered);
    [CompilerGeneratedAttribute]
public ITestController get_Controller();
    [CompilerGeneratedAttribute]
private void set_Controller(ITestController value);
    public TfsTeamProjectCollection get_TeamProjectCollection();
    public Guid get_TfsProjectCollectionId();
    public sealed virtual void Dispose();
    public void RefreshController();
    public void RegisterDataCollectors(IEnumerable`1<DataCollectorInformation> collectorsToRegister);
    private static void PopulateTfsDataCollector(IDataCollectorInformation tfsDataCollector, DataCollectorInformation info);
    private void InitializeController(bool expectControllerAlreadyRegistered);
    internal void UpdateControllerProperties(QTKeyValueCollection properties, bool updateTfs, bool updatelabServiceUserInTFS);
    private void UpdateControllerProperties(bool updateTfs, bool updatelabServiceInTFS);
    private ITestEnvironment GetTestEnvironment(string environmentName);
    private bool IsTestResultsServiceRegistered();
    private TeamFoundationIdentity GetIdentity(string sid);
    public static NetworkCredential GetLabServiceUserCredential(ITestController testController);
    public static Version GetExpectedTestAgentVersion(ITestController testController);
    public static string GetControllerName(ITestController controller);
    public static int GetControllerPort(ITestController controller);
}
internal class Microsoft.VisualStudio.TestTools.Controller.TestRunAvailableEventArgs : EventArgs {
    private Guid m_runId;
    private ControllerExecution m_execution;
    internal Guid RunId { get; }
    internal ControllerExecution ControllerExecution { get; }
    public TestRunAvailableEventArgs(Guid runId, ControllerExecution execution);
    internal Guid get_RunId();
    internal ControllerExecution get_ControllerExecution();
}
internal enum Microsoft.VisualStudio.TestTools.Controller.TfsPermissions : Enum {
    public int value__;
    public static TfsPermissions ManageTestControllers;
    public static TfsPermissions ManageTestControllersOrTestEnvironments;
    public static TfsPermissions ManageTestControllersOrTestRuns;
    public static TfsPermissions ManageTestControllersOrOwnedTestRuns;
    public static TfsPermissions ReadProjectCollection;
    public static TfsPermissions ReadProject;
    public static TfsPermissions ConnectTestAgentToTestController;
}
internal class Microsoft.VisualStudio.TestTools.Controller.TfsUriChangedEventArgs : EventArgs {
    internal string TfsUri;
    internal string ControllerName;
    internal TfsUriChangedEventArgs(string tfsUri, string controllerName);
}
internal class Microsoft.VisualStudio.TestTools.Controller.WindowsCredentialsProvider : object {
    private ICredentials m_windowsCredentials;
    public WindowsCredentialsProvider(ICredentials windowsCredentials);
    public sealed virtual ICredentials GetCredentials(Uri uri, ICredentials failedCredentials);
    public sealed virtual void NotifyCredentialsAuthenticated(Uri uri);
}
internal class Microsoft.VisualStudio.TestTools.Execution.ControllerAccessManager : MarshalByRefObject {
    private ControllerObject m_controllerObject;
    public Version ControllerVersion { get; }
    public ControllerAccessManager(ControllerObject controllerObject);
    public virtual object InitializeLifetimeService();
    private sealed virtual override object Microsoft.VisualStudio.TestTools.Execution.IControllerAccessManager.GetControllerObject();
    private sealed virtual override object Microsoft.VisualStudio.TestTools.Execution.IControllerAccessManagerAgent.GetControllerObject(string agentName);
    public sealed virtual Version get_ControllerVersion();
    private sealed virtual override object Microsoft.VisualStudio.TestTools.Execution.IControllerAccessManager.GetControllerObject(Version versionInfo);
    private sealed virtual override object Microsoft.VisualStudio.TestTools.Execution.IControllerAccessManagerAgent.GetControllerObject(Version versionInfo, string agentName);
    private void ValidateVersion(Version clientVersion);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IRegisterForRemoteCollection {
    public abstract virtual void RegisterForRemoteCollection(TestRun run);
    public abstract virtual void UnregisterForRemoteCollection(TestRun run);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
