[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.QualityTools.DataCollectionAgentObject.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.Agent.DataCollectionAgentObject : MarshalByRefObject {
    private static int DefaultMinThreadPoolThreads;
    private static int DefaultMaxThreadPoolThreads;
    private DataCollectionEnvironmentContext m_dataCollectionEnvironmentContext;
    private IControllerCallback m_controller;
    private ExecutionPluginManager m_executionPluginManager;
    private EqtThreadPool m_dataCollectionThreadPool;
    private SafeAbortableUserWorkItemFactory m_userWorkItemFactory;
    private DataCollectionAgentStateMachine m_agentState;
    private Thread m_stateMachineThread;
    private bool m_connectionLost;
    private bool m_sendHeartbeat;
    private ManualResetEvent m_agentOnline;
    private Thread m_heartbeatThread;
    private static int c_heartbeatTime;
    private Guid m_runId;
    private TestRunQueueItem m_testRun;
    private IContextAccessor m_runContextVariables;
    private DataCollectionRunContext m_runContext;
    private Queue`1<TestRunQueueItem> m_testRunQueue;
    private BackgroundTestMessageProcessor`1<TestMessage> m_testMessageSender;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_allowTestMessages;
    private object m_messagePumpThreadLock;
    private EventPumpSink m_dataCollectionEventReceiverSink;
    private BackgroundJobProcessor`1<SynchronizedEventInfo> m_dataCollectionEventReceiver;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_allowDataCollectionMessages;
    private ICollection`1<TestExecutionEnvironmentVariable> m_testEnvironmentVariables;
    private Thread m_initializeDataCollectorCacheThread;
    private object m_initializeDataCollectorCacheThreadLock;
    private bool m_isDisposed;
    public DataCollectionEnvironmentContext DataCollectionEnvironmentContext { get; public set; }
    private ExecutionPluginManager Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentObject.ExecutionPluginManager { get; }
    public ICollectorEventSink CollectorEventSink { get; }
    internal TestRun CurrentRun { get; }
    public IContextAccessor RunContextVariables { get; }
    private SafeAbortableUserWorkItemFactory UserWorkItemFactory { get; }
    public DataCollectionAgentObject(IControllerCallback controller, DataCollectionEnvironmentContext dataCollectionEnvironmentContext);
    public sealed virtual void Dispose();
    public sealed virtual DataCollectionEnvironmentContext get_DataCollectionEnvironmentContext();
    public sealed virtual void set_DataCollectionEnvironmentContext(DataCollectionEnvironmentContext value);
    public sealed virtual DataCollectionAgentState GetAgentState();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentObject.Hello();
    private sealed virtual override ExecutionPluginManager Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentObject.get_ExecutionPluginManager();
    public sealed virtual void AddResult(TestMessage message);
    public sealed virtual ICollectorEventSink get_CollectorEventSink();
    private void DispatchControllerEvent(SynchronizedEventInfo synchronizedEventInfo, IQueuedJobs`1<SynchronizedEventInfo> queuedJobs);
    private void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public sealed virtual void AbortDataCollection();
    public sealed virtual void QueueRun(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings);
    public virtual object InitializeLifetimeService();
    private void AgentStateOnline();
    private void AgentStateRunInitialize();
    private bool InitializeDataCollectors();
    private void AgentStateInitializeDataCollectors();
    private void AgentStateRunning();
    public sealed virtual bool StopDataCollection(int maxWaitTime);
    private void AgentStateAborting();
    private void AgentStateCleanupDataCollectors();
    private void AgentStateCleanupRun();
    private void AgentStateFinalizeRun();
    private void AbortTestRun(bool setStateDirectly);
    private void HeartbeatThread(object obj);
    private bool InvokeController(Action invokeController, string caller);
    private void SendCollectionRunStateMessage();
    private void SendRunStateEvent(RunState newState);
    private void SendTestRunMessage(string message);
    private void OnSendTestMessage(TestMessage testMessage, IQueuedJobs`1<TestMessage> queuedJobs);
    private void OnConnectionLost();
    internal TestRun get_CurrentRun();
    public sealed virtual IContextAccessor get_RunContextVariables();
    private SafeAbortableUserWorkItemFactory get_UserWorkItemFactory();
    private void InitializeDataCollectorCache();
    [CompilerGeneratedAttribute]
private void <InitializeDataCollectorCache>b__72_0(object state);
}
