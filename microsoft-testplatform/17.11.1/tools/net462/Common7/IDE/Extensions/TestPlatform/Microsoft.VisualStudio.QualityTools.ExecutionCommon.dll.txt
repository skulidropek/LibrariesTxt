[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Internal.Performance.CodeMarkerExStartEnd : object {
    private int _end;
    private Byte[] _aBuff;
    public CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff);
    public CodeMarkerExStartEnd(int begin, int end, Guid guidData);
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Performance.CodeMarkers : object {
    public static CodeMarkers Instance;
    private static string AtomName;
    private static string DllName;
    private bool fUseCodeMarkers;
    private static CodeMarkers();
    public void CodeMarker(int nTimerID);
    public void CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public void CodeMarkerEx(int nTimerID, Guid guidData);
    public void CodeMarkerEx(int nTimerID, UInt32 uintData);
    public void CodeMarkerEx(int nTimerID, ulong ulongData);
    public void InitPerformanceDll(int iApp, string strRegRoot);
    private static bool UseCodeMarkers(string strRegRoot);
    private static string GetPerformanceSubKey(RegistryKey hKey, string strRegRoot);
    public void UninitializePerformanceDLL(int iApp);
}
internal class Microsoft.Internal.Performance.CodeMarkerStartEnd : object {
    private int _end;
    public CodeMarkerStartEnd(int begin, int end);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.QualityTools.RemoteDataCollection.DataCollectorHostConnectionLostMessage : DataCollectionTextMessage {
    internal static Uri ConnectionLostTypeUri;
    public Uri TypeUri { get; }
    internal DataCollectorHostConnectionLostMessage(DataCollectionContext context, string text, DataCollectorMessageLevel level);
    private static DataCollectorHostConnectionLostMessage();
    public virtual Uri get_TypeUri();
}
internal enum Microsoft.VisualStudio.TestTools.Agent.AgentState : Enum {
    public int value__;
    public static AgentState Uninitialized;
    public static AgentState Online;
    public static AgentState Queuing;
    public static AgentState Deploying;
    public static AgentState Deployed;
    public static AgentState RunSetupScript;
    public static AgentState InitializeDataCollectors;
    public static AgentState Synchronizing;
    public static AgentState Starting;
    public static AgentState Running;
    public static AgentState Pausing;
    public static AgentState Paused;
    public static AgentState Resuming;
    public static AgentState Stopping;
    public static AgentState Aborting;
    public static AgentState Completing;
    public static AgentState Waiting;
    public static AgentState CleanupDataCollectors;
    public static AgentState RunCleanupScript;
    public static AgentState Cleanup;
    public static AgentState RunCompleted;
    public static AgentState Disposed;
}
internal enum Microsoft.VisualStudio.TestTools.Agent.DataCollectionAgentState : Enum {
    public int value__;
    public static DataCollectionAgentState Uninitialized;
    public static DataCollectionAgentState Online;
    public static DataCollectionAgentState RunInitialize;
    public static DataCollectionAgentState InitializeDataCollectors;
    public static DataCollectionAgentState Running;
    public static DataCollectionAgentState Aborting;
    public static DataCollectionAgentState CleanupDataCollectors;
    public static DataCollectionAgentState Cleanup;
    public static DataCollectionAgentState Finalize;
    public static DataCollectionAgentState Disposed;
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IAgentObject {
    public DataCollectionEnvironmentContext DataCollectionEnvironmentContext { get; public set; }
    public bool CloseHostApplication { get; }
    public abstract virtual DataCollectionEnvironmentContext get_DataCollectionEnvironmentContext();
    public abstract virtual void set_DataCollectionEnvironmentContext(DataCollectionEnvironmentContext value);
    public abstract virtual AgentState GetAgentState();
    public abstract virtual void QueueTests(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings);
    public abstract virtual void BeginSyncStart();
    public abstract virtual void PauseTests();
    public abstract virtual void ResumeTests();
    public abstract virtual void StopTests();
    public abstract virtual void AbortTests();
    public abstract virtual void ReceiveMessage(object message);
    public abstract virtual void RunEndFileCopyComplete();
    public abstract virtual bool Cleanup(int maxWaitTime);
    public abstract virtual bool get_CloseHostApplication();
    public abstract virtual void Hello();
    public abstract virtual AgentDataCollectorInformation GetDataCollectorInformation();
    public abstract virtual void SetExecutionPluginManager(ExecutionPluginManager manager);
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IAgentProcess {
    public abstract virtual void Shutdown();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IAgentProcessManager {
    public abstract virtual IDeploymentManager GetDeploymentManager();
    public abstract virtual void StartTestAgentRun(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings, ICollection`1<TestExecutionEnvironmentVariable> testEnvironmentVariables);
    public abstract virtual void RaiseEventToControllerAsync(DataCollectionEventArgs e, bool useDataSynchronization, WaitOrTimerCallback completed);
    [CompilerGeneratedAttribute]
public abstract virtual void add_FailedToReachController(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_FailedToReachController(EventHandler value);
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IAgentProcessManagerAccessManager {
    public abstract virtual IAgentProcessProxy GetAgentProcessProxy(string executionKey);
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IAgentProcessProxy {
    public abstract virtual IAgentProcessManager GetAgentManager();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IAgentProxy {
    public abstract virtual void Shutdown(int timeout);
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IAgentService {
    public string AgentName { get; }
    public abstract virtual void Restart();
    public abstract virtual void DeleteTempFiles();
    public abstract virtual String[] GetNetworkInterfaceNames();
    public abstract virtual string GetControllerName();
    public abstract virtual string get_AgentName();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentObject {
    public DataCollectionEnvironmentContext DataCollectionEnvironmentContext { get; public set; }
    public ExecutionPluginManager ExecutionPluginManager { get; }
    public IContextAccessor RunContextVariables { get; }
    public abstract virtual DataCollectionEnvironmentContext get_DataCollectionEnvironmentContext();
    public abstract virtual void set_DataCollectionEnvironmentContext(DataCollectionEnvironmentContext value);
    public abstract virtual DataCollectionAgentState GetAgentState();
    public abstract virtual void Hello();
    public abstract virtual void AbortDataCollection();
    public abstract virtual void QueueRun(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings);
    public abstract virtual bool StopDataCollection(int maxWaitTime);
    public abstract virtual ExecutionPluginManager get_ExecutionPluginManager();
    public abstract virtual IContextAccessor get_RunContextVariables();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentProcess {
    public abstract virtual IDataCollectionAgentObject GetDataCollectionAgentObject();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentProcessProxy {
    public abstract virtual void RegisterDataCollectionAgent(IDataCollectionAgentProcess agent);
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IDataCollectionAgentProxy {
    public abstract virtual IDataCollectionAgentObject GetDataCollectionAgentObject();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.IDeploymentManager {
    public abstract virtual FileCopyServiceFlags DeployRun(Guid runId, TestRunDirectories testRunDirectories);
    public abstract virtual void CancelDeployment(Guid runId);
    public abstract virtual bool CopyResultFiles(Guid runId, TestRunDirectories testRunDirectories);
}
internal class Microsoft.VisualStudio.TestTools.Agent.IPSimulationManager : object {
    private static IPSimulationManager s_instance;
    private IPEndPoint[] m_ipLocalBeginPoint;
    private int m_currentIndex;
    public static IPSimulationManager Instance { get; }
    public IPSimulationManager(AgentIPConfig ipConfig);
    public IPEndPoint GetNextIpEndPoint();
    public static IPSimulationManager get_Instance();
    public void Stop();
    private void CreateLocalIpEndPoints(String[] ipAddresses);
}
internal interface Microsoft.VisualStudio.TestTools.Agent.ITestAgentProcess {
    public abstract virtual IAgentObject GetTestAgentObject();
}
internal interface Microsoft.VisualStudio.TestTools.Agent.ITestAgentProcessProxy {
    public abstract virtual void RegisterTestAgent(ITestAgentProcess agent);
}
internal interface Microsoft.VisualStudio.TestTools.Agent.ITestAgentProxy {
    public abstract virtual IAgentObject GetTestAgentObject();
}
internal class Microsoft.VisualStudio.TestTools.Agent.RemoteAgentObjectWrapper : object {
    private RemoteObjectContainer`1<IAgentObject> m_agentObjectContainer;
    public DataCollectionEnvironmentContext DataCollectionEnvironmentContext { get; public set; }
    public bool CloseHostApplication { get; }
    public ICollectorEventSink CollectorEventSink { get; }
    public RemoteAgentObjectWrapper(IAgentObject agentObject, WindowsIdentity agentIdentity);
    public sealed virtual DataCollectionEnvironmentContext get_DataCollectionEnvironmentContext();
    public sealed virtual void set_DataCollectionEnvironmentContext(DataCollectionEnvironmentContext value);
    public sealed virtual bool get_CloseHostApplication();
    public sealed virtual void AbortTests();
    public sealed virtual void BeginSyncStart();
    public sealed virtual bool Cleanup(int maxWaitTime);
    public sealed virtual AgentState GetAgentState();
    public sealed virtual AgentDataCollectorInformation GetDataCollectorInformation();
    public sealed virtual void Hello();
    public sealed virtual void PauseTests();
    public sealed virtual void QueueTests(TestRun run, FileCopyService fileCopyService, Dictionary`2<string, object> agentSettings);
    public sealed virtual void ReceiveMessage(object message);
    public sealed virtual void ResumeTests();
    public sealed virtual void RunEndFileCopyComplete();
    public sealed virtual void SetExecutionPluginManager(ExecutionPluginManager manager);
    public sealed virtual void StopTests();
    public sealed virtual void AddResult(TestMessage testMessage);
    public sealed virtual void FileCopyComplete(Exception ex);
    public sealed virtual ICollectorEventSink get_CollectorEventSink();
    public void DisposeLocalAgent();
}
internal class Microsoft.VisualStudio.TestTools.Agent.RemoteAgentServiceWrapper : RemoteAgentObjectWrapper {
    private RemoteObjectContainer`1<IAgentService> m_agentServiceContainer;
    public string AgentName { get; }
    public IRemoteDataProvider DataConnectionProvider { get; }
    public RemoteAgentServiceWrapper(IAgentService agentService, WindowsIdentity agentIdentity);
    public sealed virtual void Restart();
    public sealed virtual void DeleteTempFiles();
    public sealed virtual String[] GetNetworkInterfaceNames();
    public sealed virtual string GetControllerName();
    public sealed virtual string get_AgentName();
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentObject);
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, IAgentService agentObject);
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, IAgentService agentObject);
    public sealed virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, string version, IAgentService agentObject);
    public sealed virtual void SetAgentDataCollectorInformation(AgentDataCollectorInformation info);
    public sealed virtual void ReadyForSyncStart(string agentName, Guid runId, Guid execId);
    public sealed virtual void AgentEvent(string agentName, TestMessage message);
    public sealed virtual void AgentEventImmediate(string agentName, TestMessage message);
    public sealed virtual void SetAgentConnectionState(string agentName, bool online);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Controller.IControllerCallback.Hello();
    public sealed virtual IRemoteDataProvider get_DataConnectionProvider();
    public sealed virtual FileCopyServiceFlags DeployRun(Guid runId, TestRunDirectories testRunDirectories);
    public sealed virtual void CancelDeployment(Guid runId);
    public sealed virtual bool CopyResultFiles(Guid runId, TestRunDirectories testRunDirectories);
    public sealed virtual bool ExecuteDeploymentTask(DeploymentTask task, string deploymentCallBackPortName);
    public sealed virtual void CancelDeploymentTask(long deploymentTaskId);
}
internal class Microsoft.VisualStudio.TestTools.Controller.ControllerTestRunDescription : object {
    private string m_strName;
    private Guid m_id;
    private bool m_boolIsLive;
    private int m_countMessages;
    private int m_countDroppedMessages;
    private string m_strOwner;
    private DateTime m_timeStarted;
    private DateTime m_timeFinished;
    public string Name { get; }
    public Guid Id { get; }
    public bool IsLive { get; }
    public int CountMessages { get; }
    public int CountDroppedMessages { get; }
    public string Owner { get; }
    public DateTime TimeTestRunStarted { get; }
    public DateTime TimeTestRunFinished { get; }
    public ControllerTestRunDescription(string name, Guid id, bool isLive, int countMessages, int countDroppedMessages, string owner, DateTime timeStarted, DateTime timeFinished);
    public string get_Name();
    public Guid get_Id();
    public bool get_IsLive();
    public int get_CountMessages();
    public int get_CountDroppedMessages();
    public string get_Owner();
    public DateTime get_TimeTestRunStarted();
    public DateTime get_TimeTestRunFinished();
    public virtual string ToString();
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerCallback {
    public IRemoteDataProvider DataConnectionProvider { get; }
    public abstract virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, bool canPerformUITesting, IAgentService agentObject);
    public abstract virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, IAgentService agentObject);
    public abstract virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, IAgentService agentObject);
    public abstract virtual DataCollectionEnvironmentContext ConnectAgent(string agentName, string machineName, string domainName, bool canPerformUITesting, string configuredUserName, string agentVersion, IAgentService agentObject);
    public abstract virtual void SetAgentDataCollectorInformation(AgentDataCollectorInformation info);
    public abstract virtual void ReadyForSyncStart(string agentName, Guid runId, Guid execId);
    public abstract virtual void AgentEvent(string agentName, TestMessage message);
    public abstract virtual void AgentEventImmediate(string agentName, TestMessage message);
    public abstract virtual void SetAgentConnectionState(string agentName, bool online);
    public abstract virtual void Hello();
    public abstract virtual IRemoteDataProvider get_DataConnectionProvider();
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerContext {
    public TestRun TestRun { get; }
    public ITestElement TestElement { get; }
    public TestRunDirectories TestRunDirectories { get; }
    public string LoadTestResultsConnectString { get; }
    public String[] AgentNames { get; }
    public abstract virtual void SendAgentMessage(string agentName, object message);
    public abstract virtual void SendListenerMessage(TestMessage testMessage);
    public abstract virtual TestRun get_TestRun();
    public abstract virtual ITestElement get_TestElement();
    public abstract virtual TestRunDirectories get_TestRunDirectories();
    public abstract virtual string get_LoadTestResultsConnectString();
    public abstract virtual String[] get_AgentNames();
    public abstract virtual AgentInformation GetAgentInformation(string agentName);
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerEvents {
    public abstract virtual void ControllerEvent(TestMessage report);
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerExecution {
    public bool CloseLocalHostApplication { get; }
    public bool TestsRunning { get; }
    public Version ControllerVersion { get; }
    public abstract virtual void QueueTestRun(TestRun testRun, FileCopyService fileCopyService, IControllerEvents eventHandler);
    public abstract virtual void PauseTestRun(Guid testRunId);
    public abstract virtual void ResumeTestRun(Guid testRunId);
    public abstract virtual void StopTestRun(Guid testRunId);
    public abstract virtual void AbortTestRun(Guid testRunId);
    public abstract virtual void RegisterForTestRunEvents(Guid testRunId, IControllerEvents eventHandler);
    public abstract virtual void DisconnectTestRun(Guid testRunId, IControllerEvents eventHandler);
    public abstract virtual String[] GetAgentList(Guid testRunId);
    public abstract virtual string GetTestRunOwner(Guid testRunId);
    public abstract virtual void SendAgentMessage(Guid runId, Guid testExecutionId, string agentName, object obj);
    public abstract virtual void RegisterForRunQueueEvents(IControllerQueueEvents eventHandler);
    public abstract virtual void DisconnectQueueListener(IControllerQueueEvents eventHandler);
    public abstract virtual void AgentHello(string agentName);
    public abstract virtual void Hello();
    public abstract virtual bool get_CloseLocalHostApplication();
    public abstract virtual bool get_TestsRunning();
    public abstract virtual Version get_ControllerVersion();
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerQueueEvents {
    public abstract virtual void ControllerQueueEvent(ControllerQueueEntry report);
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerSpooledJob {
    public string Owner { get; }
    public bool IsInitialized { get; }
    public abstract virtual void AddListener(RemoteObjectContainer`1<IControllerEvents> listener);
    public abstract virtual void RemoveListener(RemoteObjectContainer`1<IControllerEvents> listener);
    public abstract virtual void StartJob();
    public abstract virtual void ExecutionStarted();
    public abstract virtual void EndJob();
    public abstract virtual List`1<RemoteObjectContainer`1<IControllerEvents>> AddMessage(TestMessage message);
    public abstract virtual IExecutionRunConfiguration GetExecutionRunConfig();
    public abstract virtual ControllerTestRunDescription GetTestRunDescription();
    public abstract virtual string get_Owner();
    public abstract virtual bool get_IsInitialized();
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerSpooledJobManager {
    public abstract virtual IControllerSpooledJob CreateSpooledJob(TestRun testRun);
    public abstract virtual IControllerSpooledJob[] GetSpooledJobs();
    public abstract virtual IControllerSpooledJob GetSpooledJob(Guid guidTestRunId);
    public abstract virtual IExecutionRunConfiguration GetExecutionRunConfig(Guid guidTestRunId);
    public abstract virtual void DeleteSpooledJob(Guid guidTestRunId);
}
internal interface Microsoft.VisualStudio.TestTools.Controller.IControllerTestRuns {
    public abstract virtual ControllerQueueEntry[] GetControllerQueue();
    public abstract virtual ControllerTestRunDescription[] GetTestRunDescriptions();
    public abstract virtual ControllerTestRunDescription GetTestRunDescription(Guid guidTestRunId);
    public abstract virtual IExecutionRunConfiguration GetExecutionRunConfig(Guid guidTestRunId);
    public abstract virtual void DeleteTestRun(Guid guidTestRunId);
    public abstract virtual bool CheckTestRunAccess(Guid testRunId);
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.AgentMessageSink : object {
    private DataCollectorInformation m_dataCollectorInformation;
    private IResultSink m_resultSink;
    private DataCollectionEnvironmentContext m_dataCollectionEnvironmentContext;
    internal AgentMessageSink(DataCollectorInformation dataCollectorInformation, IResultSink resultSink, DataCollectionEnvironmentContext dataCollectionEnvironmentContext);
    public sealed virtual void SendMessage(DataCollectionMessage message);
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.AsyncDataCollectorInitializationInfo : AsyncDataCollectorOperationInfo {
    private Type m_collectorType;
    public Type CollectorType { get; }
    public AsyncDataCollectorInitializationInfo(DataCollectorInfo dataCollector, ManualResetEvent waitEvent, ISafeAbortableUserWorkItem userWorkItem, Type collectorType);
    public Type get_CollectorType();
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.AsyncDataCollectorOperationInfo : object {
    private DataCollectorInfo m_dataCollector;
    private ManualResetEvent m_waitEvent;
    private ISafeAbortableUserWorkItem m_userWorkItem;
    public DataCollectorInfo DataCollector { get; }
    public ManualResetEvent WaitEvent { get; }
    public ISafeAbortableUserWorkItem UserWorkItem { get; }
    public AsyncDataCollectorOperationInfo(DataCollectorInfo dataCollector, ManualResetEvent waitEvent, ISafeAbortableUserWorkItem userWorkItem);
    public DataCollectorInfo get_DataCollector();
    public ManualResetEvent get_WaitEvent();
    public ISafeAbortableUserWorkItem get_UserWorkItem();
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.DataCollectionRunContext : object {
    private IResultSink m_resultSink;
    private TestRun m_testRun;
    private IContextAccessor m_runContextVariables;
    private IResultSink Microsoft.VisualStudio.TestTools.Execution.IDataCollectionRunContext.ResultSink { get; }
    private TestRun Microsoft.VisualStudio.TestTools.Execution.IDataCollectionRunContext.TestRun { get; }
    private IContextAccessor Microsoft.VisualStudio.TestTools.Execution.IDataCollectionRunContext.RunContextVariables { get; }
    public DataCollectionRunContext(IResultSink resultSink, TestRun testRun, IContextAccessor runContextVariables);
    private sealed virtual override IResultSink Microsoft.VisualStudio.TestTools.Execution.IDataCollectionRunContext.get_ResultSink();
    private sealed virtual override TestRun Microsoft.VisualStudio.TestTools.Execution.IDataCollectionRunContext.get_TestRun();
    private sealed virtual override IContextAccessor Microsoft.VisualStudio.TestTools.Execution.IDataCollectionRunContext.get_RunContextVariables();
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.DataCollectorDiscovery : MarshalByRefObject {
    public static string DataCollectorsDirectoryName;
    private static string PrivateAssembliesDirectoryName;
    private static string ExtensionFolder;
    private string m_path;
    private static string s_currentProcessLocation;
    private static string m_dataCollectorDirectory;
    public static string DataCollectorsDirectory { get; public set; }
    private static DataCollectorDiscovery();
    public DataCollectorDiscovery(string path);
    public static string get_DataCollectorsDirectory();
    public static void set_DataCollectorsDirectory(string value);
    public void GetCollectorInformation(Dictionary`2& collectorInfoByName, Dictionary`2& editorInfoByUri, CultureInfo cInfoUiCulture, CultureInfo cInfoculture);
    private static void GetCollectorsFromFiles(String[] files, Dictionary`2<Uri, DataCollectorInformation> collectorInfoByUri, Dictionary`2<string, DataCollectorInformation> collectorInfoByName, Dictionary`2<Uri, DataCollectorConfigurationEditorInformation> editorInfoByUri, Dictionary`2<string, DataCollectorConfigurationEditorInformation> editorInfoByName);
    private static void GetCollectorsFromAssembly(Assembly assembly, Dictionary`2<Uri, DataCollectorInformation> collectorInfoByUri, Dictionary`2<string, DataCollectorInformation> collectorInfoByName, Dictionary`2<Uri, DataCollectorConfigurationEditorInformation> editorInfoByUri, Dictionary`2<string, DataCollectorConfigurationEditorInformation> editorInfoByName);
    internal static XmlDocument GetConfigurationForAssembly(Assembly assembly);
    private static List`1<string> GetOSNeutralCultureNames();
    private static string GetAssemblyCultureLanguage(Assembly assembly);
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.DataCollectorInfo : object {
    private HashSet`1<ISafeAbortableUserWorkItem> m_incompleteUserWorkItems;
    private SafeAbortableUserWorkItemFactory m_userWorkItemFactory;
    [CompilerGeneratedAttribute]
private DataCollector <DataCollector>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <ConfigurationElement>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalDataCollectionEvents <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSink <MessageSink>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectionSink <DataSink>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectionLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectorInformation <DataCollectorInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<KeyValuePair`2<string, string>> <TestExecutionEnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Failed>k__BackingField;
    public DataCollector DataCollector { get; private set; }
    public XmlElement ConfigurationElement { get; internal set; }
    public InternalDataCollectionEvents Events { get; private set; }
    public IMessageSink MessageSink { get; private set; }
    public DataCollectionSink DataSink { get; private set; }
    public DataCollectionLogger Logger { get; private set; }
    public DataCollectorInformation DataCollectorInformation { get; private set; }
    public IEnumerable`1<KeyValuePair`2<string, string>> TestExecutionEnvironmentVariables { get; public set; }
    public bool Failed { get; public set; }
    public DataCollectorInfo(DataCollector dataCollector, XmlElement configurationElement, IResultSink resultSink, FileDataSender fileDataSender, DataCollectorInformation dataCollectorInformation, DataCollectionEnvironmentContext dataCollectionEnvironmentContext, SafeAbortableUserWorkItemFactory userWorkItemFactory);
    [CompilerGeneratedAttribute]
public DataCollector get_DataCollector();
    [CompilerGeneratedAttribute]
private void set_DataCollector(DataCollector value);
    [CompilerGeneratedAttribute]
public XmlElement get_ConfigurationElement();
    [CompilerGeneratedAttribute]
internal void set_ConfigurationElement(XmlElement value);
    [CompilerGeneratedAttribute]
public InternalDataCollectionEvents get_Events();
    [CompilerGeneratedAttribute]
private void set_Events(InternalDataCollectionEvents value);
    [CompilerGeneratedAttribute]
public IMessageSink get_MessageSink();
    [CompilerGeneratedAttribute]
private void set_MessageSink(IMessageSink value);
    [CompilerGeneratedAttribute]
public DataCollectionSink get_DataSink();
    [CompilerGeneratedAttribute]
private void set_DataSink(DataCollectionSink value);
    [CompilerGeneratedAttribute]
public DataCollectionLogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(DataCollectionLogger value);
    [CompilerGeneratedAttribute]
public DataCollectorInformation get_DataCollectorInformation();
    [CompilerGeneratedAttribute]
private void set_DataCollectorInformation(DataCollectorInformation value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<KeyValuePair`2<string, string>> get_TestExecutionEnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_TestExecutionEnvironmentVariables(IEnumerable`1<KeyValuePair`2<string, string>> value);
    [CompilerGeneratedAttribute]
public bool get_Failed();
    [CompilerGeneratedAttribute]
public void set_Failed(bool value);
    public ISafeAbortableUserWorkItem InitializeDataCollectorAsync(IDataCollectionRunContext runContext, DataCollectionEnvironmentContext dataCollectionEnvironmentContext, Action completeCallback);
    public ISafeAbortableUserWorkItem GetTestExecutionEnvironmentVariablesAsync(Action completeCallback);
    public ISafeAbortableUserWorkItem DisposeDataCollectorAsync(Action completeCallback);
    public void DisposeDataCollector();
    public void AbortIncompleteUserWorkItems();
    private ISafeAbortableUserWorkItem ExecuteDataCollectorActionAsync(Action action, string actionName, Action completeCallback);
    [CompilerGeneratedAttribute]
private void <GetTestExecutionEnvironmentVariablesAsync>b__40_0();
    [CompilerGeneratedAttribute]
private void <DisposeDataCollectorAsync>b__41_0();
}
internal class Microsoft.VisualStudio.TestTools.DataCollection.ExecutionPluginManager : MarshalByRefObject {
    private Dictionary`2<Type, DataCollectorInfo> m_dataCollectors;
    private Dictionary`2<Type, DataCollectorInfo> m_runDataCollectors;
    private Dictionary`2<TestExecId, Dictionary`2<Type, DataCollectorInfo>> m_testCaseDataCollectors;
    private AgentRule m_agentRule;
    private bool m_manageSessionEvents;
    private SessionId m_activeSessionId;
    private FileDataSender m_fileDataSender;
    private String[] FileExtensions;
    private bool m_arePluginsCleanedUp;
    private DataCollectionEnvironmentContext m_dataCollectionEnvironmentContext;
    private IResultSink m_resultSink;
    private IDataCollectionRunContext m_runContext;
    private SafeAbortableUserWorkItemFactory m_userWorkItemFactory;
    private bool m_waitForMessagesToDrainFromSink;
    private TestRun m_testRun;
    private object m_lock;
    public static TimeSpan DataCollectionInitializationTimeout;
    public static TimeSpan DataCollectionEventTimeout;
    public static TimeSpan DataCollectionCleanupTimeout;
    private static int DefaultDataCollectionInitializationTimeoutInSeconds;
    private static int DefaultDataCollectionEventTimeoutInSeconds;
    private static int DefaultDataCollectionCleanupTimeoutInSeconds;
    internal SessionId ActiveSessionId { get; }
    private static ExecutionPluginManager();
    public ExecutionPluginManager(IResultSink resultSink, bool waitForMessagesToDrainFromSink, IDataCollectionRunContext runContext, DataCollectionEnvironmentContext dataCollectionEnvironmentContext, SafeAbortableUserWorkItemFactory userWorkItemFactory);
    public virtual object InitializeLifetimeService();
    public ICollection`1<TestExecutionEnvironmentVariable> LoadAndInitDataCollectors(TestRun testRun);
    public void CleanupPlugins();
    public void UpdateTestRun(TestRun testRun);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
    private void RegisterCollectors(RegisterCollectorsEventArgs args, SynchronizationInfo synchronizationInfo);
    private void UnregisterCollectors(UnregisterCollectorsEventArgs args, SynchronizationInfo synchronizationInfo);
    private void LoadDataCollectorConfigurations(TestRunConfiguration testRunConfiguration, bool isCollectionOnlyRun, bool isExecutedOnConnectedDevice, string collectionRuleName);
    private List`1<string> GetDataCollectorsEnabledForRun();
    private XmlElement GetConfigurationElement(DataCollectorInformation collectorInfo);
    private ICollection`1<TestExecutionEnvironmentVariable> LoadAndInitDataCollectors(TestRun testRun, ICollection`1<string> collectorTypeNames, Dictionary`2<Type, DataCollectorInfo> dataCollectorCache);
    private Type GetCollectorTypeHandlingVersionMismatch(string collectorTypeName);
    private AsyncDataCollectorInitializationInfo LoadAndInitDataCollectorAsync(TestRun testRun, string collectorTypeName, Dictionary`2<Type, DataCollectorInfo> dataCollectorCache);
    private void GetReplacementForObsoleteCollector(TestRun testRun, string originalCollectorTypeName, Type& collectorType, DataCollectorInfo& dataCollectorInfo);
    private Type GetCollectorType(string collectorTypeName, Exception& loadException);
    private AsyncDataCollectorOperationInfo GetTestExecutionEnvironmentVariablesAsync(DataCollectorInfo dataCollectorInfo);
    private void WaitForDataCollectorInitializationOperationToComplete(IEnumerable`1<AsyncDataCollectorOperationInfo> operationInfoList);
    private bool IsFailedOperation(AsyncDataCollectorOperationInfo operationInfo, String& errorMessage);
    private void LogError(string errorMessage);
    private void LogWarning(string errorMessage);
    private void SetEnvironmentVariables(DataCollectorInfo dataCollectorInfo, Dictionary`2<string, TestExecutionEnvironmentVariable> dataCollectorEnvironmentVariables);
    private List`1<DataCollectorInfo> GetDataCollectorsSnapshot(DataCollectionEventArgs eventArgs);
    private static void AddDataCollectorInfos(Dictionary`2<Type, DataCollectorInfo> dataCollectors, List`1<DataCollectorInfo> datacollectorInfoList, Uri collectorUri);
    private static DataCollector CreateDataCollector(Type dataCollectorType);
    private void DisposeDataCollectorAsync(DataCollectorInfo dataCollector);
    private void DisposeDataCollectorsAsync(IEnumerable`1<DataCollectorInfo> dataCollectors);
    private static void DisposeDataCollectors(IEnumerable`1<DataCollectorInfo> dataCollectors);
    private static Action CreateCallback(EventWaitHandle handle);
    private DataCollectorInfo GetDataCollectorInfo(TestRun testRun, DataCollector dataCollector, Type dataCollectorType, string runConfigCollectorAqn);
    private void SendEvent(DataCollectionEventArgs args, SynchronizationInfo synchronizationInfo);
    private bool WaitForMessagesToDrainFromSink(EventHandler onMessagesDrainedCallback);
    internal SessionId get_ActiveSessionId();
}
public enum Microsoft.VisualStudio.TestTools.Execution.AdapterRunResult : Enum {
    public int value__;
    public static AdapterRunResult RunSuccess;
    public static AdapterRunResult RunError;
}
internal enum Microsoft.VisualStudio.TestTools.Execution.AgentConnectionState : Enum {
    public int value__;
    public static AgentConnectionState NotResponding;
    public static AgentConnectionState Offline;
    public static AgentConnectionState Ready;
    public static AgentConnectionState RunningTest;
    public static AgentConnectionState DeployingBuild;
}
public class Microsoft.VisualStudio.TestTools.Execution.AgentContext : object {
    private string m_name;
    private string m_displayName;
    private string m_connectionString;
    private bool m_isRemote;
    private bool m_isConnectedDevice;
    private HashSet`1<Uri> m_agentProcessUris;
    public string Name { get; internal set; }
    public string DisplayName { get; internal set; }
    public string ConnectionString { get; internal set; }
    internal IEnumerable`1<Uri> AgentProcessUris { get; }
    public bool IsRemote { get; internal set; }
    internal bool IsConnectedDevice { get; }
    public AgentContext(string agentName, string agentDisplayName, string agentConnectionString, bool isRemote);
    public static AgentContext CreateForLocalAgent();
    internal static AgentContext CreateForConnectedDevicve();
    public string get_Name();
    internal void set_Name(string value);
    public string get_DisplayName();
    internal void set_DisplayName(string value);
    public string get_ConnectionString();
    internal void set_ConnectionString(string value);
    internal IEnumerable`1<Uri> get_AgentProcessUris();
    public bool get_IsRemote();
    internal void set_IsRemote(bool value);
    internal bool get_IsConnectedDevice();
    internal void AddAgentProcessUri(Uri uri);
    internal void AddAgentProcessChannelUri(IChannelReceiver receiver);
    internal void Validate();
    internal AgentContext Clone();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentDataCollectorInformation : object {
    [CompilerGeneratedAttribute]
private string <AgentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgentDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemote>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DataCollectorInformation> <DataCollectors>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> <ConfigurationEditors>k__BackingField;
    public string AgentName { get; private set; }
    public string AgentDisplayName { get; private set; }
    public bool IsRemote { get; private set; }
    public ReadOnlyCollection`1<DataCollectorInformation> DataCollectors { get; private set; }
    public ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> ConfigurationEditors { get; private set; }
    internal AgentDataCollectorInformation(string agentName, string agentDisplayName, bool isRemote, ReadOnlyCollection`1<DataCollectorInformation> collectorInformation, ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> configurationEditorInformation);
    [CompilerGeneratedAttribute]
public string get_AgentName();
    [CompilerGeneratedAttribute]
private void set_AgentName(string value);
    [CompilerGeneratedAttribute]
public string get_AgentDisplayName();
    [CompilerGeneratedAttribute]
private void set_AgentDisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRemote();
    [CompilerGeneratedAttribute]
private void set_IsRemote(bool value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DataCollectorInformation> get_DataCollectors();
    [CompilerGeneratedAttribute]
private void set_DataCollectors(ReadOnlyCollection`1<DataCollectorInformation> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> get_ConfigurationEditors();
    [CompilerGeneratedAttribute]
private void set_ConfigurationEditors(ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> value);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentDiscoveryCache : object {
    private AgentDataCollectorInformation m_collectorInfo;
    private QTKeyValueCollection m_agentProperties;
    public AgentDataCollectorInformation DataCollectorInformation { get; public set; }
    public QTKeyValueCollection AgentProperties { get; public set; }
    public AgentDiscoveryCache(AgentDataCollectorInformation info);
    public AgentDataCollectorInformation get_DataCollectorInformation();
    public void set_DataCollectorInformation(AgentDataCollectorInformation value);
    public QTKeyValueCollection get_AgentProperties();
    public void set_AgentProperties(QTKeyValueCollection value);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentIPConfig : object {
    [StoreXmlSimpleFieldAttribute]
private bool m_enableIPSwitching;
    private bool m_IPV6;
    private string m_baseIP;
    private string m_netMask;
    [StoreXmlSimpleFieldAttribute]
private string m_nic;
    private int m_IPStart;
    private int m_IPEnd;
    private String[] m_ipArray;
    public bool EnableIPSwitching { get; public set; }
    public string BaseIP { get; public set; }
    public string NetMask { get; public set; }
    public string Nic { get; public set; }
    public int IPStart { get; public set; }
    public int IPEnd { get; public set; }
    public bool IPV6 { get; }
    public String[] IPArray { get; public set; }
    public AgentIPConfig(Dictionary`2<string, object> agentSettings);
    public AgentIPConfig(XmlElement element, XmlTestStoreParameters parameters);
    public bool get_EnableIPSwitching();
    public void set_EnableIPSwitching(bool value);
    public string get_BaseIP();
    public void set_BaseIP(string value);
    public string get_NetMask();
    public void set_NetMask(string value);
    public string get_Nic();
    public void set_Nic(string value);
    public int get_IPStart();
    public void set_IPStart(int value);
    public int get_IPEnd();
    public void set_IPEnd(int value);
    public bool get_IPV6();
    public void set_IPArray(String[] value);
    public String[] get_IPArray();
    internal void LogContents();
    internal String[] BuildIPArray();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual bool Equals(AgentIPConfig other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public AgentIPConfig DeepClone();
    public void Validate();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentLoadDistributor : object {
    private Dictionary`2<string, int> m_agentWeightings;
    public void AddAgentWeighting(string agentName, int agentWeighting);
    public int GetAgentUserCount(int totalUserCount, string thisAgentName, ICollection`1<string> agentsToUse);
    public int GetAgentIterations(int totalIterations, int totalUserCount, string thisAgentName, ICollection`1<string> agentsToUse);
    private static Dictionary`2<string, int> GetAgentDistribution(int itemCount, Dictionary`2<string, int> agentWeightings, ICollection`1<string> agentsToUse);
    private static int SumIntValues(ICollection`1<int> intValues);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentProperties : object {
    private AgentInformation m_agentInformation;
    private static AgentProperties s_localAgentProperties;
    public AgentInformation AgentInformation { get; public set; }
    public static AgentProperties LocalAgentProperties { get; }
    public string AgentName { get; }
    public bool CanPerformUITesting { get; }
    public bool Online { get; }
    public bool RigOnline { get; public set; }
    public bool ConnectionOnline { get; public set; }
    public int Port { get; }
    public int Weighting { get; }
    public AgentIPConfig IPConfig { get; }
    public QTKeyValueCollection Attributes { get; }
    public AgentProperties(AgentInformation agentInformation);
    public AgentInformation get_AgentInformation();
    public void set_AgentInformation(AgentInformation value);
    public static AgentProperties get_LocalAgentProperties();
    public string get_AgentName();
    public bool get_CanPerformUITesting();
    public bool get_Online();
    public bool get_RigOnline();
    public void set_RigOnline(bool value);
    public bool get_ConnectionOnline();
    public void set_ConnectionOnline(bool value);
    public int get_Port();
    public int get_Weighting();
    public AgentIPConfig get_IPConfig();
    public QTKeyValueCollection get_Attributes();
    public void LogContents();
}
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TestTools.Execution.AgentRoleTypeRestrictionAttribute : Attribute {
    private AgentRoleTypes m_agentRoleTypes;
    public AgentRoleTypes Restriction { get; }
    public AgentRoleTypeRestrictionAttribute(AgentRoleTypes agentRoleTypes);
    public sealed virtual AgentRoleTypes get_Restriction();
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.Execution.AgentRoleTypes : Enum {
    public int value__;
    public static AgentRoleTypes None;
    public static AgentRoleTypes Execution;
    public static AgentRoleTypes CollectionOnly;
    public static AgentRoleTypes All;
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentRunFinishedMessage : TestMessage {
    private Guid m_testRunId;
    public Guid TestRunId { get; }
    public AgentRunFinishedMessage(Guid testRunId);
    public Guid get_TestRunId();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentStatus : object {
    private string m_agentName;
    private AgentConnectionState m_agentState;
    private bool m_canPerformUITesting;
    private string m_machineName;
    public string AgentName { get; }
    public AgentConnectionState AgentConnectionState { get; }
    public bool CanPerformUITesting { get; internal set; }
    public string MachineName { get; }
    public AgentStatus(string agentName, bool canPerformUITesting, AgentConnectionState agentState, string machineName);
    public string get_AgentName();
    public AgentConnectionState get_AgentConnectionState();
    public bool get_CanPerformUITesting();
    internal void set_CanPerformUITesting(bool value);
    public string get_MachineName();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentStatusAggregator : MarshalByRefObject {
    public static string QTAgentServiceStatusChannelName;
    public static string RelativeRemotingPublishUri;
    private TestRun m_currentTestRun;
    private AgentStatusInformation m_agentStatusInfo;
    private DisposingReaderWriterLock m_agentStatusLock;
    private IServiceControl agentControl;
    public IServiceControl AgentServiceControl { get; }
    public AgentStatusAggregator(string agentName, string controllerName, IServiceControl agentControl);
    private static AgentStatusAggregator();
    public void TestRunStarted(TestRun testRun);
    public void ProcessTestMessage(TestMessage testMessage);
    public void UpdateControllerName(string controllerName);
    public void UpdateAgentName(string agentName);
    public void DeploymentTaskExecutionStarted();
    public void DeploymentTaskExecutionFinished();
    public void ControllerDisconnected();
    public void ControllerConnected(DataCollectionEnvironmentContext newDataCollectionEnvironmentContext);
    public virtual object InitializeLifetimeService();
    public sealed virtual AgentStatusInformation GetStatus();
    public sealed virtual IServiceControl get_AgentServiceControl();
    private void ProcessTestStateMessage(TestStateEvent testStateMessage);
    private void ProcessAgentRunFinished(AgentRunFinishedMessage agentRunFinished);
    private bool IsParentTest(Guid testId, ITestElement& parent);
    private bool IsParentTest(ITestElement testElement);
    private void ClearStatus();
    private void AuthenticateUser();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AgentStatusInformation : object {
    private string m_agentName;
    private string m_controllerName;
    private AgentConnectionState m_agentState;
    private string m_currentTestName;
    private DateTime m_currentTestStartTime;
    private int m_testsCompletedInBucket;
    private int m_totalTestsInBucket;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    public string AgentName { get; public set; }
    public string ControllerName { get; public set; }
    public AgentConnectionState AgentState { get; public set; }
    public string CurrentTestName { get; public set; }
    public DateTime CurrentTestStartTime { get; public set; }
    public int TestsCompletedInBucket { get; public set; }
    public int TotalTestsInBucket { get; public set; }
    public string MachineName { get; public set; }
    public AgentStatusInformation(AgentStatusInformation copy);
    public string get_AgentName();
    public void set_AgentName(string value);
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public AgentConnectionState get_AgentState();
    public void set_AgentState(AgentConnectionState value);
    public string get_CurrentTestName();
    public void set_CurrentTestName(string value);
    public DateTime get_CurrentTestStartTime();
    public void set_CurrentTestStartTime(DateTime value);
    public int get_TestsCompletedInBucket();
    public void set_TestsCompletedInBucket(int value);
    public int get_TotalTestsInBucket();
    public void set_TotalTestsInBucket(int value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.AggregationLogger : DataCollectionLogger {
    public EventHandler`1<EventArgs`1<DataCollectionTextMessage>> MessageReceived;
    public virtual void LogError(DataCollectionContext context, string text);
    public virtual void LogError(DataCollectionContext context, string text, Exception exception);
    public virtual void LogWarning(DataCollectionContext context, string text);
    private void SendTextMessage(DataCollectionContext context, string text, DataCollectorMessageLevel level);
    private void SendTextMessage(DataCollectionTextMessage message);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.AggregationManager : object {
    private TimeSpan OnDataRequestTimeout;
    private Dictionary`2<SessionId, ICollectorEventSink> m_sessionIdToEventsMap;
    private Dictionary`2<Guid, ManualResetEvent> m_dataCompletedResetEvents;
    private List`1<IAggregator> m_allAggregators;
    private CapabilitiesMap`2<Uri, IAggregator> m_capabilityMap;
    private DataCollectionLogger m_logger;
    private Dictionary`2<SessionId, ICollectorEventSink> EventsMap { get; }
    private AggregationManager(DataCollectionLogger logger);
    public static AggregationManager Create(DataCollectionLogger logger);
    public void CloseSession(SessionId sessionId);
    public void ConfigureSession(SessionId sessionId, ICollectorEventSink eventDispatcher);
    public void ConfigureSession(SessionId sessionId, ICollectorEventSink eventDispatcher, AggregationSessionConfiguration configuration);
    private IAggregator CreateAggregator(string aggregatorType);
    public void DispatchMessage(TestMessage testMessage);
    public IList`1<CollectorDataEntry> GetData(DataCollectionContext context);
    public IList`1<CollectorDataEntry> GetData(DataRequestEventArgs args);
    private void SendWithDataSynchronization(DataCollectionEventArgs eventArgs, TimeSpan timeout);
    private IList`1<CollectorDataEntry> CollectData(DataCollectionContext context, RequestId requestId);
    private void InitializeAggregator(IAggregator aggregator);
    private void LoadAggregators();
    private void LoadAggregator(string aggregatorType);
    private void RegisterAggregator(IAggregator aggregator);
    private void ShutdownAggregators();
    private void UnregisterAggregator(IAggregator aggregator);
    private Dictionary`2<SessionId, ICollectorEventSink> get_EventsMap();
    public sealed virtual void Dispose();
}
public class Microsoft.VisualStudio.TestTools.Execution.Aggregation.AggregationSessionConfiguration : object {
    private string m_outputDirectory;
    public string OutputDirectory { get; }
    public AggregationSessionConfiguration(string outputDirectory);
    public string get_OutputDirectory();
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.CapabilitiesMap`2 : object {
    private Dictionary`2<TKey, List`1<TValue>> m_capabilities;
    public ICollection`1<TValue> GetCapabilityHandlers(TKey capability);
    public void RegisterCapabilities(ICollection`1<TKey> capabilities, TValue id);
    public void RegisterCapability(TKey capability, TValue id);
    public void UnregisterCapabilities(ICollection`1<TKey> capabilities, TValue id);
    public void UnregisterCapability(TKey capability, TValue id);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.CopyRequestData : object {
    private Exception m_exception;
    private string m_fileName;
    private string m_directory;
    private string m_localPath;
    private FileDataHeaderMessage m_headerMessage;
    private ManualResetEvent m_fileCopyCompleteEvent;
    private FileDataReceiver m_fileDataReceiver;
    private bool m_timedout;
    private bool m_completed;
    private object m_completedSyncRoot;
    public FileDataHeaderMessage FileInfo { get; }
    public string LocalFileName { get; public set; }
    public string LocalPath { get; }
    public Exception Exception { get; }
    public CopyRequestData(FileDataHeaderMessage headerMessage, string baseOutputDirectory, FileDataReceiver fileDataReceiver);
    public FileDataHeaderMessage get_FileInfo();
    public string get_LocalFileName();
    public void set_LocalFileName(string value);
    public string get_LocalPath();
    public Exception get_Exception();
    public bool WaitForCopyComplete();
    public void TimeoutFileTransfer();
    public sealed virtual void Dispose();
    private void FileCopyCompleted(object sender, AsyncCompletedEventArgs args);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileAggregator : object {
    private static string c_testSessionDirectoryName;
    private static string c_transientDataDirectoryName;
    private Dictionary`2<SessionId, FileAggregatorSessionInfo> m_sessionInfo;
    private Dictionary`2<DataCollectionContext, List`1<CopyRequestData>> m_fileCopies;
    private Dictionary`2<Guid, List`1<CopyRequestData>> m_transientFiles;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_shutdown;
    private FileDataReceiver m_fileReceiver;
    private DataCollectionLogger m_logger;
    public sealed virtual void Startup(DataCollectionLogger logger);
    public sealed virtual void Shutdown();
    public sealed virtual ICollection`1<CollectorDataEntry> GetData(DataCollectionContext context, RequestId requestId);
    public sealed virtual void DispatchMessage(DataCollectionMessage message);
    public sealed virtual void ConfigureSession(SessionId sessionId, AggregationSessionConfiguration configuration);
    public sealed virtual void CloseSession(SessionId sessionId);
    public sealed virtual ICollection`1<Uri> GetCapabilities();
    private void AddNewFileTransfer(FileDataHeaderMessage fileHeader);
    private string GetNextAvailableFileName(string filename, string agentName, List`1<CopyRequestData> copyRequests);
    private bool IsDuplicateFileName(string fileName, string agentName, List`1<CopyRequestData> copyRequests);
    private List`1<CopyRequestData> GetFileCopies(DataCollectionContext context, RequestId requestId);
    private List`1<CollectorDataEntry> GetDataEntries(List`1<CopyRequestData> fileCopies);
    private void CleanupFileCopies(DataCollectionContext context, RequestId requestId);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileCleanupCompletedWrapper : MarshalByRefObject {
    private AsyncCompletedEventHandler m_cleanupCompleted;
    private object m_userToken;
    public FileCleanupCompletedWrapper(AsyncCompletedEventHandler cleanupCompleted, object userToken);
    public virtual object InitializeLifetimeService();
    public void FireCleanupCallback();
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataContentsMessage : FileDataMessage {
    [CompilerGeneratedAttribute]
private Byte[] <Contents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EndOfFile>k__BackingField;
    public int ApproximateSize { get; }
    public Byte[] Contents { get; private set; }
    public bool EndOfFile { get; private set; }
    internal FileDataContentsMessage(DataCollectionContext context, Guid fileTransferId, Byte[] contents, bool endOfFile);
    public sealed virtual int get_ApproximateSize();
    [CompilerGeneratedAttribute]
public Byte[] get_Contents();
    [CompilerGeneratedAttribute]
private void set_Contents(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_EndOfFile();
    [CompilerGeneratedAttribute]
private void set_EndOfFile(bool value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataCopiedMessaage : FileDataMessage {
    [CompilerGeneratedAttribute]
private string <NewPath>k__BackingField;
    public string NewPath { get; private set; }
    internal FileDataCopiedMessaage(DataCollectionContext context, Guid fileTransferId, string newPath);
    [CompilerGeneratedAttribute]
public string get_NewPath();
    [CompilerGeneratedAttribute]
private void set_NewPath(string value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataErrorMessage : FileDataMessage {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; private set; }
    internal FileDataErrorMessage(DataCollectionContext context, Guid fileTransferId, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataHeaderMessage : FileDataMessage {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformCleanup>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStreamTransfer>k__BackingField;
    [CompilerGeneratedAttribute]
private FileCleanupCompletedWrapper <CleanupCompletedHandler>k__BackingField;
    public string FileName { get; private set; }
    public string Description { get; private set; }
    public bool PerformCleanup { get; private set; }
    public bool IsTransient { get; }
    public RequestId RequestId { get; private set; }
    public bool IsStreamTransfer { get; private set; }
    public FileCleanupCompletedWrapper CleanupCompletedHandler { get; private set; }
    internal FileDataHeaderMessage(DataCollectionContext context, Guid fileTransferId, string fileName, string description, bool remote, bool deleteFile, RequestId requestId, bool isStreamTransfer, object userToken, AsyncCompletedEventHandler CleanupCompleted);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_PerformCleanup();
    [CompilerGeneratedAttribute]
private void set_PerformCleanup(bool value);
    public bool get_IsTransient();
    [CompilerGeneratedAttribute]
public RequestId get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(RequestId value);
    [CompilerGeneratedAttribute]
public bool get_IsStreamTransfer();
    [CompilerGeneratedAttribute]
private void set_IsStreamTransfer(bool value);
    [CompilerGeneratedAttribute]
public FileCleanupCompletedWrapper get_CleanupCompletedHandler();
    [CompilerGeneratedAttribute]
private void set_CleanupCompletedHandler(FileCleanupCompletedWrapper value);
}
internal abstract class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataMessage : DataCollectionMessage {
    internal static Uri FileDataTypeUri;
    [CompilerGeneratedAttribute]
private Guid <FileTransferId>k__BackingField;
    public Uri TypeUri { get; }
    public Guid FileTransferId { get; private set; }
    internal FileDataMessage(DataCollectionContext context, Guid fileTransferId);
    private static FileDataMessage();
    public virtual Uri get_TypeUri();
    [CompilerGeneratedAttribute]
public Guid get_FileTransferId();
    [CompilerGeneratedAttribute]
private void set_FileTransferId(Guid value);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataReceiver : object {
    private Dictionary`2<Guid, FileReceiverJob> m_activeFileTransfers;
    private BackgroundTestMessageProcessor`1<FileDataMessage> m_fileDataMessageReceiver;
    [CompilerGeneratedAttribute]
private ProgressChangedEventHandler ProgressChanged;
    [CompilerGeneratedAttribute]
private AsyncCompletedEventHandler Completed;
    [CompilerGeneratedAttribute]
public void add_ProgressChanged(ProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ProgressChanged(ProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Completed(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Completed(AsyncCompletedEventHandler value);
    public void QueueFileDataMessage(FileDataMessage message);
    public void QueueFileTransfer(FileDataHeaderMessage headerMessage, string localFilePath);
    public bool AbortFileTransfer(FileDataHeaderMessage headerMessage);
    public sealed virtual void Dispose();
    private void OnProcessFileDataMessage(FileDataMessage fileDataMessage, IQueuedJobs`1<FileDataMessage> queuedJobs);
    private void ProcessFileContents(FileReceiverJob fileTransfer, FileDataContentsMessage fileContents);
    private void ProcessFileCopied(FileReceiverJob fileTransfer, FileDataCopiedMessaage fileCopied);
    private void ProcesFileError(FileReceiverJob fileTransfer, FileDataErrorMessage fileError);
    private FileReceiverJob GetReceiverJob(Guid fileTransferId);
    private void CompleteTransfer(FileReceiverJob fileTransfer, Exception exception);
    private void TriggerCompletedCallback(FileDataHeaderMessage headerMessage, Exception exception, bool cancelled, string localPath);
    private void TriggerProgressCallback(FileDataHeaderMessage headerMessage, string localPath);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataSender : object {
    private static int c_maxReadCount;
    private BackgroundJobProcessor`1<FileTransferJob> m_fileTransferJobProcessor;
    private bool m_isRemote;
    private SafeReaderWriterLockSlim m_disposeRWLock;
    internal FileDataSender(bool isRemote);
    internal void QueueFileTransfer(IMessageSink messageSink, FileTransferInformation fileTransferInformation, AsyncCompletedEventHandler transferCompletedHandler);
    internal void QueueFileTransfer(IMessageSink messageSink, StreamTransferInformation streamTransferInformation, AsyncCompletedEventHandler transferCompletedHandler);
    private void QueueFileTransfer(FileDataHeaderMessage headerMessage, Stream stream, IMessageSink messageSink, object userToken, AsyncCompletedEventHandler transferCompletedHandler);
    public void WaitForPendingTransfers();
    public sealed virtual void Dispose();
    private FileDataHeaderMessage CreateHeaderMessage(BasicTransferInformation transferInformation, AsyncCompletedEventHandler cleanupCompleted);
    private void OnProcessFileTransferJob(FileTransferJob fileTransferJob, IQueuedJobs`1<FileTransferJob> queuedJobs);
    private void SendFile(FileTransferJob fileTransfer);
    private void CopyFile(FileTransferJob fileTransfer);
    private void CompleteFileTransfer(FileTransferJob fileTransfer, Exception exception);
    private void TriggerCallback(AsyncCompletedEventHandler transferCompletedCallback, object userToken, Exception exception, string path);
}
internal class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileDataTransferPingMessage : FileDataMessage {
    internal FileDataTransferPingMessage(DataCollectionContext context, Guid fileTransferId);
}
internal static class Microsoft.VisualStudio.TestTools.Execution.Aggregation.FileTransferUtilities : object {
    internal static void CopyFileWithProgress(string sourceFileName, string destFileName, ElapsedEventHandler handler);
    internal static void MoveFileWithProgress(string sourceFileName, string destFileName, ElapsedEventHandler handler);
    private static Timer CreateTimer(ElapsedEventHandler handler);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.Aggregation.IAggregator {
    public abstract virtual void Startup(DataCollectionLogger logger);
    public abstract virtual void Shutdown();
    public abstract virtual ICollection`1<CollectorDataEntry> GetData(DataCollectionContext context, RequestId requestId);
    public abstract virtual void CloseSession(SessionId sessionId);
    public abstract virtual void ConfigureSession(SessionId sessionId, AggregationSessionConfiguration configuration);
    public abstract virtual void DispatchMessage(DataCollectionMessage message);
    public abstract virtual ICollection`1<Uri> GetCapabilities();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AllowedAgentProperties : object {
    private string m_agentId;
    private NameValueCollection m_attributes;
    public string AgentId { get; }
    public NameValueCollection Attributes { get; }
    public AllowedAgentProperties(string agentId);
    public AllowedAgentProperties(string agentId, NameValueCollection properties);
    public string get_AgentId();
    public NameValueCollection get_Attributes();
    public void LogContents();
}
internal static class Microsoft.VisualStudio.TestTools.Execution.ApplicationEventLog : object {
    private static bool s_boolIsWriting;
    private static string s_eventSource;
    internal static string EventSource { get; internal set; }
    public static bool IsWriting { get; public set; }
    private static ApplicationEventLog();
    internal static string get_EventSource();
    internal static void set_EventSource(string value);
    public static bool get_IsWriting();
    public static void set_IsWriting(bool value);
    public static void WriteEventLogError(string errorMessage);
    public static void WriteEventLogInformation(string message);
}
internal abstract class Microsoft.VisualStudio.TestTools.Execution.AspNetWebSiteConfigurer : object {
    public bool IsConfiguredForTest { get; }
    public static AspNetWebSiteConfigurer Create(IRunContext runContext);
    public abstract virtual void Dispose();
    public abstract virtual bool get_IsConfiguredForTest();
    public abstract virtual void ConfigureHostForTestRun();
    public abstract virtual void ConfigureHostForTest(ITestElement testElement, ITestContext testContext);
    public abstract virtual void ConfigureForTest(ITestElement testElement, ITestContext testContext);
    public abstract virtual void UnconfigureForTest();
    public void Unconfigure();
}
internal class Microsoft.VisualStudio.TestTools.Execution.AssemblyResolutionConfig : object {
    private string m_applicationBase;
    private ConfigHelper m_config;
    public AssemblyResolutionConfig(string configPath, string applicationBase);
    public void AddDirectory(string path);
    public void AddDirectoryProbePath(string path);
    public void AddDirectoryCodeBases(string path);
    public void WriteSettings();
    private void AddDirectoryCodeBases(string path, string searchPattern);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AssemblyResolutionPath : object {
    private static string c_pathLocation;
    private static string c_includeSubDirectoriesLocation;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSubDirectories>k__BackingField;
    public string Path { get; public set; }
    public bool IncludeSubDirectories { get; public set; }
    protected AssemblyResolutionPath(AssemblyResolutionPath assemblyResolutionPath);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSubDirectories();
    [CompilerGeneratedAttribute]
public void set_IncludeSubDirectories(bool value);
    public virtual AssemblyResolutionPath Clone();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Save(XmlElement element, XmlTestStoreParameters parameters);
    protected virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    protected virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AssemblyResolutionRuntimePath : AssemblyResolutionPath {
    private static string c_useLoadContextLocation;
    [CompilerGeneratedAttribute]
private bool <UseLoadContext>k__BackingField;
    public bool UseLoadContext { get; public set; }
    private AssemblyResolutionRuntimePath(AssemblyResolutionRuntimePath assemblyResolutionRuntimePath);
    [CompilerGeneratedAttribute]
public bool get_UseLoadContext();
    [CompilerGeneratedAttribute]
public void set_UseLoadContext(bool value);
    public virtual AssemblyResolutionPath Clone();
    protected virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    protected virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AssemblyResolutionSettings : object {
    private static string c_applicationBaseDirectoryLocation;
    private static string c_testDirectoryLocation;
    private static string c_runtimeResolutionLocation;
    private static string c_discoveryResolutionLocation;
    private static string c_directoryItemLocation;
    [CompilerGeneratedAttribute]
private string <ApplicationBaseDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private TestDirectoryElement <TestDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AssemblyResolutionRuntimePath> <RuntimeResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<AssemblyResolutionPath> <DiscoveryResolution>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigFileDirectory>k__BackingField;
    public string ApplicationBaseDirectory { get; public set; }
    public TestDirectoryElement TestDirectory { get; public set; }
    public IList`1<AssemblyResolutionRuntimePath> RuntimeResolution { get; private set; }
    public IList`1<AssemblyResolutionPath> DiscoveryResolution { get; private set; }
    public string ConfigFileDirectory { get; public set; }
    public bool IsDefault { get; }
    private AssemblyResolutionSettings(AssemblyResolutionSettings assemblyResolutionSettings);
    [CompilerGeneratedAttribute]
public string get_ApplicationBaseDirectory();
    [CompilerGeneratedAttribute]
public void set_ApplicationBaseDirectory(string value);
    [CompilerGeneratedAttribute]
public TestDirectoryElement get_TestDirectory();
    [CompilerGeneratedAttribute]
public void set_TestDirectory(TestDirectoryElement value);
    [CompilerGeneratedAttribute]
public IList`1<AssemblyResolutionRuntimePath> get_RuntimeResolution();
    [CompilerGeneratedAttribute]
private void set_RuntimeResolution(IList`1<AssemblyResolutionRuntimePath> value);
    [CompilerGeneratedAttribute]
public IList`1<AssemblyResolutionPath> get_DiscoveryResolution();
    [CompilerGeneratedAttribute]
private void set_DiscoveryResolution(IList`1<AssemblyResolutionPath> value);
    [CompilerGeneratedAttribute]
public string get_ConfigFileDirectory();
    [CompilerGeneratedAttribute]
public void set_ConfigFileDirectory(string value);
    public bool get_IsDefault();
    public string GetExpandedApplicationBase(IWarningHandler warningHandler);
    public List`1<string> GetExpandedDiscoveryResolutionPaths(IWarningHandler warningHandler);
    public List`1<AssemblyResolutionRuntimePath> GetExpandedRuntimeResolutionPaths(IWarningHandler warningHandler);
    public AssemblyResolutionSettings Clone();
    private void AddSubdirectories(string path, Action`1<string> addHandler);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Execution.AudioRecorderException : MediaRecorderException {
    public static string LinkIdForAudioSettings;
    public AudioRecorderException(string message, Exception innerException);
    protected AudioRecorderException(SerializationInfo info, StreamingContext context);
    private static AudioRecorderException();
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.BasicTransferInformation : object {
    private string m_description;
    [CompilerGeneratedAttribute]
private DataCollectionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserToken>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    public DataCollectionContext Context { get; private set; }
    public string Description { get; public set; }
    public object UserToken { get; public set; }
    public RequestId RequestId { get; public set; }
    protected internal bool PerformCleanup { get; }
    protected internal string ClientFileName { get; }
    protected BasicTransferInformation(DataCollectionContext context);
    [CompilerGeneratedAttribute]
public DataCollectionContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DataCollectionContext value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public object get_UserToken();
    [CompilerGeneratedAttribute]
public void set_UserToken(object value);
    [CompilerGeneratedAttribute]
public RequestId get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(RequestId value);
    protected internal abstract virtual bool get_PerformCleanup();
    protected internal abstract virtual string get_ClientFileName();
}
internal class Microsoft.VisualStudio.TestTools.Execution.CollectionRunStateMessage : ServiceMessage {
    protected CollectionRunStateMessage(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Execution.CollectorDataSet : object {
    private IList`1<CollectorDataEntry> m_entries;
    public IList`1<CollectorDataEntry> Entries { get; }
    internal CollectorDataSet(IList`1<CollectorDataEntry> entries);
    public IList`1<CollectorDataEntry> get_Entries();
    public IList`1<CollectorDataEntry> GetEntriesForUri(Uri uri);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.Execution.CollectorNameValueConfigurationManager : object {
    private static string ConfigurationNodeName;
    private static string SettingNodeName;
    private static string SettingNameAttributeName;
    private static string SettingValueAttributeName;
    private Dictionary`2<string, string> m_nameValuePairs;
    public string Item { get; public set; }
    public CollectorNameValueConfigurationManager(XmlElement configurationElement);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public XmlElement ExportToXml();
}
internal class Microsoft.VisualStudio.TestTools.Execution.CollectorRegistrationEventArgs : TestCaseEventArgs {
    private List`1<string> m_collectorTypes;
    public ReadOnlyCollection`1<string> CollectorTypes { get; }
    protected CollectorRegistrationEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, IList`1<string> collectorTypes);
    public ReadOnlyCollection`1<string> get_CollectorTypes();
}
internal class Microsoft.VisualStudio.TestTools.Execution.CompleteCallback : MulticastDelegate {
    public CompleteCallback(object object, IntPtr method);
    public virtual void Invoke(Guid synchronizationId);
    public virtual IAsyncResult BeginInvoke(Guid synchronizationId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.Execution.ConfigurationHelper : object {
    private static LogMgr s_logMgr;
    private static IDictionary wellKnownTypes;
    private static string DefaultEventLogSourceName;
    private static ConfigurationHelper();
    public static void InitList();
    public static long ValidateConfigValue(string settingValue, long defaultValue, int scale);
    public static int ValidateConfigValue(string settingValue, int defaultValue, int scale);
    public static bool ValidateConfigValue(string settingValue, bool defaultValue);
    public static object GetObject(Type type);
    public virtual void ReadConfigurationFile(string fileName, string processName);
    public static void ReadConfigurationFile(string processName);
    public static void LogError(string processName, string message);
    public static string ComputeApplicationPath(bool stripAppNameFromPath);
    public static void CreateTraceListener(string fileName, string processName);
    private static string GetTraceLogDirectory();
    public static void BackupLogFile(string filename);
    public static long GetLogSize();
    public static void RemoveListener(string name);
    public static void CheckLogSize(string fileName, string eventSource, long defaultMaxLogSizeMb);
}
internal class Microsoft.VisualStudio.TestTools.Execution.ContextBase : object {
    private Hashtable m_contextHash;
    private String[] m_readOnlyKeys;
    public int Count { get; }
    public ContextBase(String[] readOnlyKeys, Hashtable seedHash);
    public ContextBase(String[] readOnlyKeys, String[] keys, String[] values);
    protected ContextBase(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public sealed virtual object Clone();
    public sealed virtual void RemoveValue(string key);
    public sealed virtual object GetObject(string key);
    public sealed virtual string GetStringValue(string key);
    public sealed virtual double GetDoubleValue(string key);
    public sealed virtual int GetIntValue(string key);
    public sealed virtual void AddStringValue(string key, string value);
    public sealed virtual void AddObject(string key, object obj);
    public sealed virtual void AddIntValue(string key, int value);
    public sealed virtual void AddDoubleValue(string key, double value);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    private bool IsReadOnlyKey(string key);
    internal void ForceSetValue(string key, object value);
    internal Hashtable Internal_GetContextVariables();
}
public class Microsoft.VisualStudio.TestTools.Execution.ControllerContext : object {
    private string m_name;
    private string m_displayName;
    private string m_connectionString;
    private CollectionControllerConnectionInformation m_collectionControllerConnectionInformation;
    public string Name { get; internal set; }
    public string DisplayName { get; internal set; }
    public string ConnectionString { get; internal set; }
    internal CollectionControllerConnectionInformation CollectionControllerConnectionInformation { get; internal set; }
    public ControllerContext(string name, string displayName, string connectionString);
    public static ControllerContext CreateForLocalController();
    public string get_Name();
    internal void set_Name(string value);
    public string get_DisplayName();
    internal void set_DisplayName(string value);
    public string get_ConnectionString();
    internal void set_ConnectionString(string value);
    internal CollectionControllerConnectionInformation get_CollectionControllerConnectionInformation();
    internal void set_CollectionControllerConnectionInformation(CollectionControllerConnectionInformation value);
    internal void Validate();
    internal ControllerContext Clone();
}
internal class Microsoft.VisualStudio.TestTools.Execution.ControllerInformation : object {
    private static string TfsProjectCollectionIdLocation;
    private static string UseStoredCredentialLocation;
    [StoreXmlSimpleFieldAttribute]
private Uri m_tfsUri;
    private Guid m_tfsProjectCollectionId;
    private bool m_useStoredCredential;
    private string m_loadTestResultsConnectionString;
    private string m_loadTestResultsDisplayConnectString;
    private QTKeyValueCollection m_properties;
    private string m_lastModifiedUser;
    private DateTime m_lastModifiedTime;
    private string m_controllerName;
    private string m_controllerDisplayName;
    private int m_port;
    [CompilerGeneratedAttribute]
private string <ServerCredentialsType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateLabServiceUserInfo>k__BackingField;
    public string ControllerName { get; }
    public string ControllerDisplayName { get; }
    public int Port { get; }
    public string FullControllerName { get; }
    public string ControllerDisplayNameForMessages { get; }
    public string TfsUri { get; public set; }
    public Guid TfsProjectCollectionId { get; private set; }
    public bool UseStoredCredential { get; public set; }
    public string ServerCredentialsType { get; public set; }
    public string ServerUserName { get; public set; }
    public string ServerPassword { get; public set; }
    public bool UpdateLabServiceUserInfo { get; public set; }
    public string LoadTestResultsConnectionString { get; public set; }
    public string LoadTestResultsDisplayConnectString { get; public set; }
    public QTKeyValueCollection Properties { get; }
    public string LastModifiedUser { get; public set; }
    public DateTime LastModifiedDateTime { get; private set; }
    public ControllerInformation(int port);
    public ControllerInformation(int port, string controllerName);
    public ControllerInformation(int port, XmlElement element, XmlTestStoreParameters parameters);
    public ControllerInformation(int port, string controllerName, XmlElement element, XmlTestStoreParameters parameters);
    public string get_ControllerName();
    public string get_ControllerDisplayName();
    public int get_Port();
    public string get_FullControllerName();
    public string get_ControllerDisplayNameForMessages();
    public string get_TfsUri();
    public void set_TfsUri(string value);
    public Guid get_TfsProjectCollectionId();
    private void set_TfsProjectCollectionId(Guid value);
    public bool get_UseStoredCredential();
    public void set_UseStoredCredential(bool value);
    [CompilerGeneratedAttribute]
public string get_ServerCredentialsType();
    [CompilerGeneratedAttribute]
public void set_ServerCredentialsType(string value);
    [CompilerGeneratedAttribute]
public string get_ServerUserName();
    [CompilerGeneratedAttribute]
public void set_ServerUserName(string value);
    [CompilerGeneratedAttribute]
public string get_ServerPassword();
    [CompilerGeneratedAttribute]
public void set_ServerPassword(string value);
    [CompilerGeneratedAttribute]
public bool get_UpdateLabServiceUserInfo();
    [CompilerGeneratedAttribute]
public void set_UpdateLabServiceUserInfo(bool value);
    public string get_LoadTestResultsConnectionString();
    public void set_LoadTestResultsConnectionString(string value);
    public string get_LoadTestResultsDisplayConnectString();
    public void set_LoadTestResultsDisplayConnectString(string value);
    public QTKeyValueCollection get_Properties();
    public string get_LastModifiedUser();
    public void set_LastModifiedUser(string value);
    public DateTime get_LastModifiedDateTime();
    private void set_LastModifiedDateTime(DateTime value);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public ControllerInformation DeepClone();
    public static string GetFullControllerName(string controllerName, int port);
    internal void Internal_UpdateLastModifiedTime(DateTime datetime);
    internal void Internal_SetTfsProjectCollectionId(Guid id);
    internal void Internal_CopyNonPersistedStateTo(ControllerInformation other);
    private static XmlTestStoreParameters CreateQTKeyValueCollectionParameters();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.Execution.ControllerQueueEntry : object {
    private RunQueueState m_state;
    private int m_position;
    private Guid m_runId;
    private string m_testRunName;
    private string m_owner;
    private string m_description;
    private string m_status;
    private RunState m_runState;
    private int m_priority;
    private DateTime m_enteredQueue;
    private TimeSpan m_elapsedTime;
    private bool m_isCollectionOnlyRun;
    internal RunQueueState State { get; internal set; }
    internal int Position { get; internal set; }
    internal Guid RunId { get; internal set; }
    internal string TestRunName { get; internal set; }
    internal string Owner { get; internal set; }
    internal string Description { get; internal set; }
    internal RunState RunState { get; internal set; }
    internal string Status { get; }
    internal int Priority { get; internal set; }
    internal DateTime EnteredQueue { get; internal set; }
    internal TimeSpan ElapsedTime { get; internal set; }
    internal bool IsCollectionOnlyRun { get; internal set; }
    private ControllerQueueEntry(SerializationInfo info, StreamingContext context);
    internal RunQueueState get_State();
    internal void set_State(RunQueueState value);
    internal int get_Position();
    internal void set_Position(int value);
    internal Guid get_RunId();
    internal void set_RunId(Guid value);
    internal string get_TestRunName();
    internal void set_TestRunName(string value);
    internal string get_Owner();
    internal void set_Owner(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal RunState get_RunState();
    internal void set_RunState(RunState value);
    internal string get_Status();
    internal int get_Priority();
    internal void set_Priority(int value);
    internal DateTime get_EnteredQueue();
    internal void set_EnteredQueue(DateTime value);
    internal TimeSpan get_ElapsedTime();
    internal void set_ElapsedTime(TimeSpan value);
    internal bool get_IsCollectionOnlyRun();
    internal void set_IsCollectionOnlyRun(bool value);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static string MapStateToString(RunState state);
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.CustomCollectorData : object {
}
public class Microsoft.VisualStudio.TestTools.Execution.CustomCollectorGenericErrorData : CustomCollectorData {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.CustomNotificationEventArgs : DataCollectionEventArgs {
    [CompilerGeneratedAttribute]
private Guid <NotificationIdentifier>k__BackingField;
    internal Guid NotificationIdentifier { get; private set; }
    protected CustomNotificationEventArgs(TestExecId testExecId);
    internal CustomNotificationEventArgs(DataCollectionContext context);
    internal CustomNotificationEventArgs(DataCollectionContext context, Uri targetDataCollectorUri);
    [CompilerGeneratedAttribute]
internal Guid get_NotificationIdentifier();
    [CompilerGeneratedAttribute]
private void set_NotificationIdentifier(Guid value);
}
internal static class Microsoft.VisualStudio.TestTools.Execution.DataCollection.ScreenCaptureHelper : object {
    internal static int virtualScreenHeight;
    internal static int virtualScreenWidth;
    internal static int topLeftCornerOfScreenX;
    internal static int topLeftCornerOfScreenY;
    internal static string ImageFileName;
    internal static int MaxStringLength;
    private static IntPtr Handle;
    private static bool drmWindowExists;
    private static string windowText;
    internal static bool EnumerateForDRMWindows(IntPtr currentHandle, String& drmWindowText);
    internal static void SetVirtualScreenSize();
    internal static bool EnumCallBack(IntPtr wnd, IntPtr param);
    internal static void LimitRectToScreenBoundary(Rectangle& rect);
}
internal static class Microsoft.VisualStudio.TestTools.Execution.DataCollection.ScreenCaptureNativeMethods : object {
    public static bool GetWindowRect(IntPtr hwnd, RECT& rc);
    public static bool IsWindowVisible(IntPtr hWnd);
    public static IntPtr GetForegroundWindow();
    public static int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);
    public static bool IsIconic(IntPtr hWnd);
    public static bool IsWindow(IntPtr hWnd);
    public static int DRMIsWindowProtected(IntPtr windowHandle, Boolean& isProtected);
    public static bool EnumWindows(EnumWindowCallBack callBack, IntPtr param);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollection.WindowInfo : object {
    private Rectangle rect;
    private IntPtr windowHandle;
    public Rectangle Rect { get; }
    public IntPtr WindowHandle { get; }
    public WindowInfo(Rectangle rect, IntPtr windowHandle);
    public Rectangle get_Rect();
    public IntPtr get_WindowHandle();
}
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectionContext : object {
    private SessionId m_sessionId;
    private TestExecId m_testExecId;
    private int m_hashCode;
    public SessionId SessionId { get; }
    public TestExecId TestExecId { get; }
    public bool HasTestCase { get; }
    protected internal DataCollectionContext(SessionId sessionId);
    protected internal DataCollectionContext(SessionId sessionId, TestExecId testExecId);
    public SessionId get_SessionId();
    public TestExecId get_TestExecId();
    public bool get_HasTestCase();
    public static bool op_Equality(DataCollectionContext context1, DataCollectionContext context2);
    public static bool op_Inequality(DataCollectionContext context1, DataCollectionContext context2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int ComputeHashCode();
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectionDataMessage : DataCollectionTextMessage {
    [CompilerGeneratedAttribute]
private Guid <NotificationIdentifier>k__BackingField;
    private SerializationWrapper`1<CustomCollectorData> serializationWrapper;
    public CustomCollectorData CustomData { get; }
    internal Guid NotificationIdentifier { get; private set; }
    public DataCollectionDataMessage(DataCollectionContext context, CustomCollectorData data, Guid notificationIdentifier);
    public CustomCollectorData get_CustomData();
    [CompilerGeneratedAttribute]
internal Guid get_NotificationIdentifier();
    [CompilerGeneratedAttribute]
private void set_NotificationIdentifier(Guid value);
    public virtual DataCollectorMessageInfo Convert();
}
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectionEnvironmentContext : object {
    private AgentContext m_agentContext;
    private ControllerContext m_controllerContext;
    private TcmContext m_tcmContext;
    private DataCollectionContext m_sessionDataCollectionContext;
    [CompilerGeneratedAttribute]
private bool <IsManualTest>k__BackingField;
    public AgentContext AgentContext { get; internal set; }
    public ControllerContext ControllerContext { get; internal set; }
    public TcmContext TcmContext { get; internal set; }
    public DataCollectionContext SessionDataCollectionContext { get; internal set; }
    public bool IsManualTest { get; internal set; }
    internal DataCollectionEnvironmentContext(AgentContext agentContext, ControllerContext controllerContext);
    public DataCollectionEnvironmentContext(AgentContext agentContext, ControllerContext controllerContext, DataCollectionContext sessionDataCollectionContext);
    public DataCollectionEnvironmentContext(AgentContext agentContext, ControllerContext controllerContext, DataCollectionContext sessionDataCollectionContext, TcmContext tcmContext);
    public static DataCollectionEnvironmentContext CreateForLocalEnvironment();
    public static DataCollectionEnvironmentContext CreateForLocalEnvironment(DataCollectionContext sessionDataCollectionContext);
    internal static DataCollectionEnvironmentContext CreateForConnectedDeviceEnvironment();
    internal static DataCollectionEnvironmentContext CreateForConnectedDeviceEnvironment(DataCollectionContext sessionDataCollectionContext);
    public AgentContext get_AgentContext();
    internal void set_AgentContext(AgentContext value);
    public ControllerContext get_ControllerContext();
    internal void set_ControllerContext(ControllerContext value);
    public TcmContext get_TcmContext();
    internal void set_TcmContext(TcmContext value);
    public DataCollectionContext get_SessionDataCollectionContext();
    internal void set_SessionDataCollectionContext(DataCollectionContext value);
    [CompilerGeneratedAttribute]
public bool get_IsManualTest();
    [CompilerGeneratedAttribute]
internal void set_IsManualTest(bool value);
    internal void Validate();
    internal DataCollectionEnvironmentContext Clone();
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollectionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataCollectionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TargetDataCollectorUri>k__BackingField;
    public DataCollectionContext Context { get; private set; }
    public Uri TargetDataCollectorUri { get; public set; }
    protected DataCollectionEventArgs(DataCollectionContext context);
    protected DataCollectionEventArgs(DataCollectionContext context, Uri targetDataCollectorUri);
    [CompilerGeneratedAttribute]
public DataCollectionContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(DataCollectionContext value);
    [CompilerGeneratedAttribute]
public Uri get_TargetDataCollectorUri();
    [CompilerGeneratedAttribute]
public void set_TargetDataCollectorUri(Uri value);
    internal void UpdateDataCollectionContext(DataCollectionContext context);
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollectionEvents : object {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionPause(EventHandler`1<SessionPauseEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionPause(EventHandler`1<SessionPauseEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionResume(EventHandler`1<SessionResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionResume(EventHandler`1<SessionResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCasePause(EventHandler`1<TestCasePauseEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCasePause(EventHandler`1<TestCasePauseEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseResume(EventHandler`1<TestCaseResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseResume(EventHandler`1<TestCaseResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseReset(EventHandler`1<TestCaseResetEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseReset(EventHandler`1<TestCaseResetEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseFailed(EventHandler`1<TestCaseFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseFailed(EventHandler`1<TestCaseFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestStepStart(EventHandler`1<TestStepStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestStepStart(EventHandler`1<TestStepStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestStepEnd(EventHandler`1<TestStepEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestStepEnd(EventHandler`1<TestStepEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataRequest(EventHandler`1<DataRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataRequest(EventHandler`1<DataRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomNotification(EventHandler`1<CustomNotificationEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomNotification(EventHandler`1<CustomNotificationEventArgs> value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectionExceptionMessage : DataCollectionTextMessage {
    public DataCollectionExceptionMessage(DataCollectionContext context, Exception exception);
    public DataCollectionExceptionMessage(DataCollectionContext context, Exception exception, string text);
    public DataCollectionExceptionMessage(DataCollectionContext context, Exception exception, string text, DataCollectorMessageLevel level);
    public virtual DataCollectorMessageInfo Convert();
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollectionLogger : object {
    public abstract virtual void LogError(DataCollectionContext context, string text);
    public void LogError(DataCollectionContext context, Exception exception);
    public abstract virtual void LogError(DataCollectionContext context, string text, Exception exception);
    public abstract virtual void LogWarning(DataCollectionContext context, string text);
    public virtual void LogException(DataCollectionContext context, Exception ex, DataCollectorMessageLevel level);
    public virtual void SendData(CustomNotificationEventArgs matchingEventArgs, CustomCollectorData data);
    public virtual void SendData(DataCollectionContext context, CustomCollectorData data);
}
internal abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollectionMessage : TestMessage {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectionContext <DataCollectionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DataCollectorUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataCollectorFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AgentDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromRemoteAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromConnectedDevice>k__BackingField;
    public DateTime Timestamp { get; private set; }
    public DataCollectionContext DataCollectionContext { get; private set; }
    internal Uri DataCollectorUri { get; internal set; }
    internal string DataCollectorFriendlyName { get; internal set; }
    internal string AgentName { get; internal set; }
    internal string AgentDisplayName { get; internal set; }
    internal bool IsFromRemoteAgent { get; internal set; }
    internal bool IsFromConnectedDevice { get; internal set; }
    public Uri TypeUri { get; }
    protected DataCollectionMessage(DataCollectionContext context);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
private void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public DataCollectionContext get_DataCollectionContext();
    [CompilerGeneratedAttribute]
private void set_DataCollectionContext(DataCollectionContext value);
    [CompilerGeneratedAttribute]
internal Uri get_DataCollectorUri();
    [CompilerGeneratedAttribute]
internal void set_DataCollectorUri(Uri value);
    [CompilerGeneratedAttribute]
internal string get_DataCollectorFriendlyName();
    [CompilerGeneratedAttribute]
internal void set_DataCollectorFriendlyName(string value);
    [CompilerGeneratedAttribute]
internal string get_AgentName();
    [CompilerGeneratedAttribute]
internal void set_AgentName(string value);
    [CompilerGeneratedAttribute]
internal string get_AgentDisplayName();
    [CompilerGeneratedAttribute]
internal void set_AgentDisplayName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsFromRemoteAgent();
    [CompilerGeneratedAttribute]
internal void set_IsFromRemoteAgent(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsFromConnectedDevice();
    [CompilerGeneratedAttribute]
internal void set_IsFromConnectedDevice(bool value);
    public abstract virtual Uri get_TypeUri();
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollectionSink : object {
    [CompilerGeneratedAttribute]
public abstract virtual void add_SendFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SendFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SendStreamCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SendStreamCompleted(AsyncCompletedEventHandler value);
    public void SendFileAsync(DataCollectionContext context, string path, bool deleteFile);
    public void SendFileAsync(DataCollectionContext context, string path, string description, bool deleteFile);
    public abstract virtual void SendFileAsync(FileTransferInformation fileTransferInformation);
    public void SendStreamAsync(DataCollectionContext context, Stream stream, string fileName, bool closeStream);
    public void SendStreamAsync(DataCollectionContext context, Stream stream, string fileName, string description, bool closeStream);
    public abstract virtual void SendStreamAsync(StreamTransferInformation streamTransferInformation);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectionTextMessage : DataCollectionMessage {
    public static Uri MessageTypeUri;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectorMessageLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public Uri TypeUri { get; }
    public string Text { get; private set; }
    public DataCollectorMessageLevel Level { get; private set; }
    public string ExceptionType { get; protected set; }
    public string ExceptionMessage { get; protected set; }
    public string StackTrace { get; protected set; }
    public DataCollectionTextMessage(DataCollectionContext context, string text, DataCollectorMessageLevel level);
    public DataCollectionTextMessage(DataCollectionContext context, string text, Exception exception, DataCollectorMessageLevel level);
    public DataCollectionTextMessage(DataCollectionContext context, DataCollectorMessageLevel level);
    private static DataCollectionTextMessage();
    public virtual Uri get_TypeUri();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public DataCollectorMessageLevel get_Level();
    [CompilerGeneratedAttribute]
private void set_Level(DataCollectorMessageLevel value);
    public virtual DataCollectorMessageInfo Convert();
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
protected void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionMessage();
    [CompilerGeneratedAttribute]
protected void set_ExceptionMessage(string value);
    [CompilerGeneratedAttribute]
public string get_StackTrace();
    [CompilerGeneratedAttribute]
protected void set_StackTrace(string value);
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollector : object {
    public abstract virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.VisualStudio.TestTools.Execution.DataCollectorCache : object {
    private static ReadOnlyCollection`1<DataCollectorInformation> m_collectorInfo;
    private static ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> m_editorInfo;
    private static Dictionary`2<string, DataCollectorInformation> m_collectorCache;
    private static Dictionary`2<Uri, DataCollectorConfigurationEditorInformation> m_editorCache;
    private static ReaderWriterLockSlim m_cacheRWLock;
    private static bool m_autoUpdateCache;
    private static DataCollectorWatcher m_dataCollectorWatcher;
    public static EventHandler DataCollectorsUpdated;
    public static bool AutoUpdateCache { get; public set; }
    private static DataCollectorCache();
    public static bool get_AutoUpdateCache();
    public static void set_AutoUpdateCache(bool value);
    public static DataCollectorInformation GetCollectorInformation(Uri dataCollectorUri);
    public static DataCollectorInformation GetCollectorInformation(string dataCollectorAssemblyQualifiedName);
    public static DataCollectorInformation FirstOrDefault(Func`2<DataCollectorInformation, bool> predicate);
    public static ReadOnlyCollection`1<DataCollectorInformation> GetAllCollectorInformation();
    public static DataCollectorConfigurationEditorInformation GetCollectorEditorInformation(Uri collectorConfigurationUri);
    public static ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> GetAllCollectorEditorInformation();
    private static void ForceCacheUpdate();
    private static void PerformDiscovery();
    private static void RaiseDataCollectorsUpdated();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorConfigurationEditorAttribute : Attribute {
    private string m_typeUri;
    private string m_helpUri;
    public string TypeUri { get; }
    public string HelpUri { get; public set; }
    public DataCollectorConfigurationEditorAttribute(string typeUri);
    public string get_TypeUri();
    public string get_HelpUri();
    public void set_HelpUri(string value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectorConfigurationEditorInformation : object {
    [StoreXmlSimpleFieldAttribute("@typeUri", "Mono.Cecil.CustomAttributeArgument")]
private Uri m_typeUri;
    [StoreXmlSimpleFieldAttribute("@assemblyQualifiedName", "Mono.Cecil.CustomAttributeArgument")]
private string m_assemblyQualifiedName;
    public Uri TypeUri { get; }
    public string AssemblyQualifiedName { get; }
    private DataCollectorConfigurationEditorInformation(Uri typeUri, Type type);
    public Uri get_TypeUri();
    public string get_AssemblyQualifiedName();
    public static bool TryCreate(Type type, DataCollectorConfigurationEditorInformation& info);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public DataCollectorConfigurationEditorInformation DeepClone();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorConfigurationEditorTypeUriAttribute : Attribute {
    private string m_typeUri;
    public string TypeUri { get; }
    public DataCollectorConfigurationEditorTypeUriAttribute(string typeUri);
    public string get_TypeUri();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorDescriptionAttribute : Attribute {
    private string m_description;
    private bool m_isResourceName;
    public string Description { get; }
    public bool IsResourceName { get; }
    private string Microsoft.VisualStudio.TestTools.Execution.IDataCollectorResourceInfo.ResourceName { get; }
    public DataCollectorDescriptionAttribute(string description);
    public DataCollectorDescriptionAttribute(string description, bool isResourceName);
    public string get_Description();
    public sealed virtual bool get_IsResourceName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Execution.IDataCollectorResourceInfo.get_ResourceName();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorEnabledByDefaultAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsEnabledByDefault>k__BackingField;
    public bool IsEnabledByDefault { get; private set; }
    public DataCollectorEnabledByDefaultAttribute(bool isEnabledByDefault);
    [CompilerGeneratedAttribute]
public bool get_IsEnabledByDefault();
    [CompilerGeneratedAttribute]
private void set_IsEnabledByDefault(bool value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorFriendlyNameAttribute : Attribute {
    private string m_friendlyName;
    private bool m_isResourceName;
    public string FriendlyName { get; }
    public bool IsResourceName { get; }
    private string Microsoft.VisualStudio.TestTools.Execution.IDataCollectorResourceInfo.ResourceName { get; }
    public DataCollectorFriendlyNameAttribute(string friendlyName);
    public DataCollectorFriendlyNameAttribute(string friendlyName, bool isResourceName);
    public string get_FriendlyName();
    public sealed virtual bool get_IsResourceName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Execution.IDataCollectorResourceInfo.get_ResourceName();
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectorInformation : object {
    private static XmlNamespaceManager xmlNamespaceManager;
    [StoreXmlSimpleFieldAttribute("FriendlyName", "Mono.Cecil.CustomAttributeArgument")]
private string m_friendlyName;
    [StoreXmlSimpleFieldAttribute("Description", "Mono.Cecil.CustomAttributeArgument")]
private string m_description;
    [StoreXmlSimpleFieldAttribute("@typeUri", "Mono.Cecil.CustomAttributeArgument")]
private Uri m_typeUri;
    [StoreXmlSimpleFieldAttribute("ConfigurationEditor/@typeUri", "Mono.Cecil.CustomAttributeArgument")]
private Uri m_configurationEditorTypeUri;
    [StoreXmlSimpleFieldAttribute("ConfigurationEditor/@helpUri", "Mono.Cecil.CustomAttributeArgument")]
private Uri m_configurationHelpUri;
    [StoreXmlSimpleFieldAttribute]
private bool m_isEnabledByDefault;
    [StoreXmlSimpleFieldAttribute]
private bool m_requiresOutOfProcessCollection;
    [StoreXmlSimpleFieldAttribute("@assemblyQualifiedName", "Mono.Cecil.CustomAttributeArgument")]
private string m_assemblyQualifiedName;
    private static bool DefaultIsEnabledOnCollectionOnlyAgents;
    [StoreXmlSimpleFieldAttribute("@supportedTestClients", "Mono.Cecil.CustomAttributeArgument")]
private DataCollectorTestClients m_supportedTestClients;
    [StoreXmlSimpleFieldAttribute("@supportedLocations", "Mono.Cecil.CustomAttributeArgument")]
private DataCollectorLocations m_supportedLocations;
    [StoreXmlSimpleFieldAttribute("@supportedAgentRoleTypes", "Mono.Cecil.CustomAttributeArgument")]
private AgentRoleTypes m_supportedAgentRoleTypes;
    [StoreXmlSimpleFieldAttribute]
private bool m_supportsTailoredApplications;
    [StoreXmlSimpleFieldAttribute]
private bool m_isEnabledByDefaultForTailoredApplications;
    private VersionObsolete m_obsolete;
    [CompilerGeneratedAttribute]
private XmlElement <DefaultConfiguration>k__BackingField;
    public Uri TypeUri { get; internal set; }
    public string FriendlyName { get; internal set; }
    public string AssemblyQualifiedName { get; internal set; }
    public string Description { get; internal set; }
    public Uri ConfigurationEditorTypeUri { get; internal set; }
    public Uri ConfigurationHelpUri { get; internal set; }
    public bool IsEnabledByDefault { get; internal set; }
    public bool RequiresOutOfProcessCollection { get; internal set; }
    public DataCollectorTestClients SupportedTestClients { get; }
    public DataCollectorLocations SupportedLocations { get; }
    public AgentRoleTypes SupportedAgentRoleTypes { get; internal set; }
    public bool SupportsTailoredApplications { get; internal set; }
    public bool IsEnabledByDefaultForTailoredApplications { get; internal set; }
    public XmlElement DefaultConfiguration { get; internal set; }
    internal VersionObsolete VersionObsolete { get; internal set; }
    private static DataCollectorInformation();
    internal DataCollectorInformation(Type dataCollectorType);
    internal DataCollectorInformation(Type dataCollectorType, XmlDocument config);
    private DataCollectorInformation(SerializationInfo info, StreamingContext context);
    public Uri get_TypeUri();
    internal void set_TypeUri(Uri value);
    public string get_FriendlyName();
    internal void set_FriendlyName(string value);
    public string get_AssemblyQualifiedName();
    internal void set_AssemblyQualifiedName(string value);
    public string get_Description();
    internal void set_Description(string value);
    public Uri get_ConfigurationEditorTypeUri();
    internal void set_ConfigurationEditorTypeUri(Uri value);
    public Uri get_ConfigurationHelpUri();
    internal void set_ConfigurationHelpUri(Uri value);
    public bool get_IsEnabledByDefault();
    internal void set_IsEnabledByDefault(bool value);
    public bool get_RequiresOutOfProcessCollection();
    internal void set_RequiresOutOfProcessCollection(bool value);
    public DataCollectorTestClients get_SupportedTestClients();
    public DataCollectorLocations get_SupportedLocations();
    public AgentRoleTypes get_SupportedAgentRoleTypes();
    internal void set_SupportedAgentRoleTypes(AgentRoleTypes value);
    public bool get_SupportsTailoredApplications();
    internal void set_SupportsTailoredApplications(bool value);
    public bool get_IsEnabledByDefaultForTailoredApplications();
    internal void set_IsEnabledByDefaultForTailoredApplications(bool value);
    [CompilerGeneratedAttribute]
public XmlElement get_DefaultConfiguration();
    [CompilerGeneratedAttribute]
internal void set_DefaultConfiguration(XmlElement value);
    internal VersionObsolete get_VersionObsolete();
    internal void set_VersionObsolete(VersionObsolete value);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public DataCollectorInformation DeepClone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public bool SupportsTestClients(DataCollectorTestClients testClients);
    public bool SupportsLocations(DataCollectorLocations locations);
    public bool SupportsAgentRoleTypes(AgentRoleTypes agentRoleTypes);
    private static Uri GetTypeUri(Type dataCollectorType);
    private static void GetConfigurationEditorInfo(Type dataCollectorType, Uri& typeUri, Uri& helpUri);
    public static bool IsConfigurationHelpUriValid(Uri helpUri);
    private static string GetFriendlyName(Type dataCollectorType);
    private static string GetDescription(Type dataCollectorType);
    private static bool GetIsEnabledByDefault(Type dataCollectorType);
    private static bool GetSupportsTailoredApplications(Type dataCollectorType, Boolean& isEnabledByDefault);
    private static bool GetRequiresOutOfProcessCollection(Type dataCollectorType);
    private static VersionObsolete GetVersionObsolete(Type dataCollectorType);
    private static T GetDataCollectorRestriction(Type dataCollectorType, T defaultValue);
    private static string GetAttributeString(Type dataCollectorType, Type attributeType, bool isRequired, CultureInfo cultureInfo);
    private static Object[] GetAttributes(Type dataCollectorType, Type attributeType, bool isRequired);
    private static XmlElement GetDefaultConfig(Uri collectorUri, XmlDocument config);
    private static XmlNode FindNodeForDataCollector(Uri collectorUri, XmlDocument config);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectorInvocationError : object {
    [CompilerGeneratedAttribute]
private object <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectionEventArgs <EventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public object Target { get; private set; }
    public MethodInfo Method { get; private set; }
    public DataCollectionEventArgs EventArgs { get; private set; }
    public Exception Exception { get; private set; }
    public DataCollectorInvocationError(Delegate del, DataCollectionEventArgs eventArgs, Exception exception);
    [CompilerGeneratedAttribute]
public object get_Target();
    [CompilerGeneratedAttribute]
private void set_Target(object value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodInfo value);
    [CompilerGeneratedAttribute]
public DataCollectionEventArgs get_EventArgs();
    [CompilerGeneratedAttribute]
private void set_EventArgs(DataCollectionEventArgs value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectorLocationRestrictionAttribute : Attribute {
    private DataCollectorLocations m_locations;
    public DataCollectorLocations Restriction { get; }
    public DataCollectorLocationRestrictionAttribute(DataCollectorLocations locations);
    public sealed virtual DataCollectorLocations get_Restriction();
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.Execution.DataCollectorLocations : Enum {
    public int value__;
    public static DataCollectorLocations None;
    public static DataCollectorLocations Local;
    public static DataCollectorLocations Remote;
    public static DataCollectorLocations All;
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollectorNotifications : object {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomEventCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomEventCompleted(AsyncCompletedEventHandler value);
    public abstract virtual void RaiseTestFailedEvent(ITestElement testCase, TestCaseFailureType failureType);
    public void RaiseCustomEvent(CustomNotificationEventArgs eventArgs);
    public abstract virtual void RaiseCustomEvent(CustomNotificationEventArgs eventArgs, NotificationBroadcastLevel broadcastLevel);
    public void RaiseCustomEventAsync(CustomNotificationEventArgs eventArgs);
    public void RaiseCustomEventAsync(CustomNotificationEventArgs eventArgs, NotificationBroadcastLevel broadcastLevel);
    public abstract virtual void RaiseCustomEventAsync(CustomNotificationEventArgs eventArgs, NotificationBroadcastLevel broadcastLevel, object userToken);
}
internal abstract class Microsoft.VisualStudio.TestTools.Execution.DataCollectorNotificationsFactory : object {
    public abstract virtual DataCollectorNotifications Create(TestRun testRun);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectorRequiresOutOfProcessCollectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <RequiresOutOfProcessCollection>k__BackingField;
    public bool RequiresOutOfProcessCollection { get; private set; }
    public DataCollectorRequiresOutOfProcessCollectionAttribute(bool requiresOutOfProcessCollection);
    [CompilerGeneratedAttribute]
public bool get_RequiresOutOfProcessCollection();
    [CompilerGeneratedAttribute]
private void set_RequiresOutOfProcessCollection(bool value);
}
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorSettings : object {
    private RoleContext m_roleContext;
    [CompilerGeneratedAttribute]
private XmlElement <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <DefaultConfiguration>k__BackingField;
    public XmlElement Configuration { get; public set; }
    public bool IsEnabled { get; public set; }
    public XmlElement DefaultConfiguration { get; private set; }
    public RoleContext RoleContext { get; }
    public DataCollectorSettings(XmlElement defaultConfiguration, XmlElement configuration, bool isEnabled, RoleContext roleContext);
    [CompilerGeneratedAttribute]
public XmlElement get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(XmlElement value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public XmlElement get_DefaultConfiguration();
    [CompilerGeneratedAttribute]
private void set_DefaultConfiguration(XmlElement value);
    public RoleContext get_RoleContext();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorSupportsTailoredApplicationsAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <SupportsTailoredApplications>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabledByDefault>k__BackingField;
    public bool SupportsTailoredApplications { get; private set; }
    public bool IsEnabledByDefault { get; private set; }
    public DataCollectorSupportsTailoredApplicationsAttribute(bool isEnabledByDefault);
    [CompilerGeneratedAttribute]
public bool get_SupportsTailoredApplications();
    [CompilerGeneratedAttribute]
private void set_SupportsTailoredApplications(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabledByDefault();
    [CompilerGeneratedAttribute]
private void set_IsEnabledByDefault(bool value);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectorTestClientRestrictionAttribute : Attribute {
    private DataCollectorTestClients m_testClients;
    public DataCollectorTestClients Restriction { get; }
    public DataCollectorTestClientRestrictionAttribute(DataCollectorTestClients testClients);
    public sealed virtual DataCollectorTestClients get_Restriction();
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.Execution.DataCollectorTestClients : Enum {
    public int value__;
    public static DataCollectorTestClients None;
    public static DataCollectorTestClients ManualTestRunner;
    public static DataCollectorTestClients VisualStudio;
    public static DataCollectorTestClients All;
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorTypeUriAttribute : Attribute {
    private string m_typeUri;
    public string TypeUri { get; }
    public DataCollectorTypeUriAttribute(string typeUri);
    public string get_TypeUri();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.Execution.DataCollectorVersionObsoleteAttribute : Attribute {
    private string m_newVersionTypeUri;
    private string m_newVersionTypeName;
    private string m_configurationConverter;
    public string NewVersionTypeUri { get; }
    public string NewVersionTypeName { get; }
    public string ConfigurationConverter { get; }
    public DataCollectorVersionObsoleteAttribute(string newVersionTypeUri, string newVersionName, string configurationConverter);
    public string get_NewVersionTypeUri();
    public string get_NewVersionTypeName();
    public string get_ConfigurationConverter();
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCollectorWatcher : object {
    private bool m_disposed;
    private Nullable`1<int> m_dataCollectorDiscoveryPeriod;
    private static int c_defaultDataCollectorDiscoveryPeriod;
    private Timer m_dataCollectorDiscoveryTimer;
    private object m_dataCollectionDiscoveryTimerLock;
    private FileSystemWatcher m_fileSystemWatcher;
    public EventHandler DataCollectorsChanged;
    private int DataCollectorDiscoveryPeriod { get; }
    public void Start();
    public void Stop();
    private sealed virtual override void System.IDisposable.Dispose();
    private int get_DataCollectorDiscoveryPeriod();
    private FileSystemWatcher CreateFileSystemWatcher();
    private void OnDataCollectorAssemblyChanged(object source, FileSystemEventArgs e);
    private void StartDataCollectorDiscoveryTimer();
    private void RaiseDataCollectorsChanged();
    private void EnsureNotDisposed();
    [CompilerGeneratedAttribute]
private void <.ctor>b__6_0(object sender, ElapsedEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DataCompletedMessage : DataCollectionMessage {
    internal static Uri DataCompletedTypeUri;
    private Guid m_synchronizationId;
    public Guid SynchronizationId { get; }
    public Uri TypeUri { get; }
    internal DataCompletedMessage(DataCollectionContext context, Guid synchronizationId);
    private static DataCompletedMessage();
    public Guid get_SynchronizationId();
    public virtual Uri get_TypeUri();
}
public class Microsoft.VisualStudio.TestTools.Execution.DataRequestEventArgs : TestCaseEventArgs {
    private static Guid DefaultTestCaseId;
    private static string DefaultTestCaseName;
    private static bool DefaultIsChildTestCase;
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestedDuration>k__BackingField;
    public RequestId RequestId { get; private set; }
    public TimeSpan RequestedDuration { get; private set; }
    internal DataRequestEventArgs(DataCollectionContext context, TimeSpan requestedDuration);
    internal DataRequestEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, TimeSpan requestedDuration);
    public DataRequestEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation, TimeSpan requestedDuration);
    private static DataRequestEventArgs();
    [CompilerGeneratedAttribute]
public RequestId get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(RequestId value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestedDuration();
    [CompilerGeneratedAttribute]
private void set_RequestedDuration(TimeSpan value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DCMessageSender : object {
    private TestRun testRun;
    private TestMessageReceiverDelegate testMessageReceiverDelegate;
    public DCMessageSender(TestRun testRun, TestMessageReceiverDelegate testMessageReceiverDelegate);
    public void SendError(string message);
    public void SendWarning(string message);
    public void SendConnectionLostMessage(string message);
    public void SendRunStarted();
    public void SendRunCompleted();
}
internal class Microsoft.VisualStudio.TestTools.Execution.DeploymentHelper : object {
    private static ProcessHelper s_process;
    private static string commentHeaderFooter;
    private static string commentBegin;
    private static string CRLF;
    private static string SET;
    private static string SETUPBATNAME;
    private static string CLEANUPBATNAME;
    private static UInt32 GetShortPathName(string lpszLongPath, StringBuilder lpszShortPath, UInt32 cchBuffer);
    public static String[] GetFileList(string logFilePath);
    public static String[] GetSubDirList(string logFilePath);
    public static void CreateBatFiles(string path, string setupCommands, string cleanupCommands, Hashtable variables);
    private static void WriteBatFile(string fileName, string batCommands);
    private static string CreateBatFile(string commands, Hashtable variables);
    private static string CreateUserCommands(string userCommands);
    private static string CreateBatHeader();
    private static string CreateVariableSection(Hashtable variables);
    public static int ExecuteSetupBat(string path, int scriptTimeout, Boolean& processTimedout, String& stdOut, String& stdErr);
    public static int ExecuteCleanupBat(string path, int scriptTimeout, Boolean& processTimedout, String& stdOut, String& stdErr);
    public static void KillBatFileProcess();
    private static int ExecuteFile(string fileName, int scriptTimeout, Boolean& processTimedout, String& stdOut, String& stdErr);
    public static void FillRunContextVariables(StringDictionary dictionary, IContextAccessor runContextVariables, bool overrideExisting);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DeploymentJob : object {
    private ICommonUtilityCallback m_callback;
    private RemoteObjectContainer`1<FileCopyService> m_fileCopyService;
    private Guid m_testRunId;
    private FileCopyInfo[] m_fileList;
    private string m_machineName;
    private TestRunDirectories m_testRunDirectories;
    private bool m_canceled;
    private bool m_deployToLogs;
    public ICommonUtilityCallback Callback { get; }
    public RemoteObjectContainer`1<FileCopyService> FileCopyService { get; }
    public Guid TestRunId { get; }
    public FileCopyInfo[] FileList { get; }
    public string MachineName { get; }
    public TestRunDirectories TestRunDirectories { get; }
    public bool Canceled { get; public set; }
    internal bool DeployToLogs { get; }
    private DeploymentJob(ICommonUtilityCallback callback, RemoteObjectContainer`1<FileCopyService> serviceContainer, FileCopyInfo[] fileList, Guid testRunId, string machineName);
    public DeploymentJob(ICommonUtilityCallback callback, RemoteObjectContainer`1<FileCopyService> serviceContainer, FileCopyInfo[] fileList, Guid testRunId, string machineName, TestRunDirectories testRunDirectories);
    public DeploymentJob(ICommonUtilityCallback callback, RemoteObjectContainer`1<FileCopyService> serviceContainer, FileCopyInfo[] fileList, Guid testRunId, string machineName, TestRunDirectories testRunDirectories, bool deployToLogs);
    public ICommonUtilityCallback get_Callback();
    public RemoteObjectContainer`1<FileCopyService> get_FileCopyService();
    public Guid get_TestRunId();
    public FileCopyInfo[] get_FileList();
    public string get_MachineName();
    public TestRunDirectories get_TestRunDirectories();
    public bool get_Canceled();
    public void set_Canceled(bool value);
    internal bool get_DeployToLogs();
}
internal class Microsoft.VisualStudio.TestTools.Execution.DeploymentQueue : object {
    private Queue`1<DeploymentJob> m_deploymentQueue;
    private Thread m_queueThread;
    private AutoResetEvent m_queueMessage;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_stop;
    private UnmanagedFileMgr m_fileMgr;
    private DeploymentJob m_currentJob;
    private object m_currentJobLock;
    private static int c_maxReadCount;
    public void Stop();
    public void AddDeploymentJob(DeploymentJob job);
    public void CancelDeploymentJob(Guid runId);
    public void CancelDeploymentJob(DeploymentJob job);
    private void DeploymentQueueThread();
    private static void ContainsRelativePath(DeploymentJob job);
    private void CopyFiles(DeploymentJob job);
    private void CopyFile(string agentName, string remoteFileName, string localFileName, RemoteObjectContainer`1<QTFile> qtFileContainer);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DeploymentTask : object {
    [CompilerGeneratedAttribute]
private string <AgentName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DeploymentTaskId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LabSystemId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BuildUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BuildInformationNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptToExecute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScriptArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxDeploymentWaitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DeploymentTaskStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <LabSystemUri>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationDate>k__BackingField;
    public static string DeploymentExecutionUri;
    public static string DeploymentExecutionChannelName;
    public static string DeploymentCallBackUri;
    private object m_buildInformationNode;
    public string AgentName { get; public set; }
    public long DeploymentTaskId { get; public set; }
    public long LabSystemId { get; public set; }
    public string BuildLocation { get; public set; }
    public Uri BuildUri { get; public set; }
    public int BuildInformationNodeId { get; public set; }
    public string ScriptToExecute { get; public set; }
    public string ScriptArguments { get; public set; }
    public string WorkingDirectory { get; public set; }
    public long MaxDeploymentWaitTime { get; public set; }
    public DeploymentTaskStatus Status { get; public set; }
    public Uri LabSystemUri { get; public set; }
    public DateTime CreationDate { get; public set; }
    [XmlIgnoreAttribute]
public object BuildInformationNode { get; public set; }
    private static DeploymentTask();
    [CompilerGeneratedAttribute]
public string get_AgentName();
    [CompilerGeneratedAttribute]
public void set_AgentName(string value);
    [CompilerGeneratedAttribute]
public long get_DeploymentTaskId();
    [CompilerGeneratedAttribute]
public void set_DeploymentTaskId(long value);
    [CompilerGeneratedAttribute]
public long get_LabSystemId();
    [CompilerGeneratedAttribute]
public void set_LabSystemId(long value);
    [CompilerGeneratedAttribute]
public string get_BuildLocation();
    [CompilerGeneratedAttribute]
public void set_BuildLocation(string value);
    [CompilerGeneratedAttribute]
public Uri get_BuildUri();
    [CompilerGeneratedAttribute]
public void set_BuildUri(Uri value);
    [CompilerGeneratedAttribute]
public int get_BuildInformationNodeId();
    [CompilerGeneratedAttribute]
public void set_BuildInformationNodeId(int value);
    [CompilerGeneratedAttribute]
public string get_ScriptToExecute();
    [CompilerGeneratedAttribute]
public void set_ScriptToExecute(string value);
    [CompilerGeneratedAttribute]
public string get_ScriptArguments();
    [CompilerGeneratedAttribute]
public void set_ScriptArguments(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public long get_MaxDeploymentWaitTime();
    [CompilerGeneratedAttribute]
public void set_MaxDeploymentWaitTime(long value);
    [CompilerGeneratedAttribute]
public DeploymentTaskStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(DeploymentTaskStatus value);
    [CompilerGeneratedAttribute]
public Uri get_LabSystemUri();
    [CompilerGeneratedAttribute]
public void set_LabSystemUri(Uri value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public void set_CreationDate(DateTime value);
    public object get_BuildInformationNode();
    public void set_BuildInformationNode(object value);
    public virtual string ToString();
}
internal enum Microsoft.VisualStudio.TestTools.Execution.DeploymentTaskStatus : Enum {
    public int value__;
    public static DeploymentTaskStatus Pending;
    public static DeploymentTaskStatus Queued;
    public static DeploymentTaskStatus Running;
    public static DeploymentTaskStatus Cancel;
    public static DeploymentTaskStatus Passed;
    public static DeploymentTaskStatus Failed;
    public static DeploymentTaskStatus Aborted;
}
internal static class Microsoft.VisualStudio.TestTools.Execution.Dev10Beta2BackCompatHelper : object {
    public static Nullable`1<bool> GetResolutionTypeAsUseLoadContextValue(XmlElement element, XmlPersistence helper);
}
internal class Microsoft.VisualStudio.TestTools.Execution.DiscoveryCache : object {
    private static string RootXmlElementName;
    private static string FileName;
    public static string Storage;
    private static string s_mutexName;
    private AgentDataCollectorInformation m_localAgent;
    private Dictionary`2<string, RigDiscoveryCache> m_rigs;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_isDisposed;
    [CompilerGeneratedAttribute]
private Mutex <Mutex>k__BackingField;
    public AgentDataCollectorInformation LocalAgent { get; public set; }
    public Dictionary`2<string, RigDiscoveryCache> Rigs { get; }
    private Mutex Mutex { get; private set; }
    private static DiscoveryCache();
    public AgentDataCollectorInformation get_LocalAgent();
    public void set_LocalAgent(AgentDataCollectorInformation value);
    public Dictionary`2<string, RigDiscoveryCache> get_Rigs();
    [CompilerGeneratedAttribute]
private Mutex get_Mutex();
    [CompilerGeneratedAttribute]
private void set_Mutex(Mutex value);
    public static DiscoveryCache LoadFromDisk();
    public void SaveToDisk();
    public void UpdateRig(string controllerName, Dictionary`2<string, AgentDataCollectorInformation> collectorInfoTable);
    public void UpdateRig(string controllerName, Dictionary`2<string, AgentDataCollectorInformation> collectorInfoTable, Dictionary`2<string, AgentProperties> propsTable);
    public sealed virtual void Dispose();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    private static string DetermineVersion();
    private static string GetStorage();
    private void VerifyNotDisposed();
}
internal class Microsoft.VisualStudio.TestTools.Execution.EventAsynchronousMultiDispatcher : object {
    private object m_parentLock;
    private object m_childLock;
    private Dictionary`2<SynchronizationInfo, Dictionary`2<Guid, object>> m_parentToChildSynchronizationMap;
    private Dictionary`2<Guid, SynchronizationInfo> m_childToParentSynchronizationMap;
    private SynchronizationCallbackProxy m_synchronizationCallbackProxy;
    private IDataCompletedSink m_dataSink;
    private bool m_revertToSelfOnReceiverCallbacks;
    internal EventAsynchronousMultiDispatcher(IDataCompletedSink dataSink, bool revertToSelfOnReceiverCallbacks);
    public sealed virtual void Dispose();
    public void Dispatch(DataCollectionEventArgs args, SynchronizationInfo parentSynchronizationInfo, ICollection`1<ICollectorEventSink> receivers);
    public void EventComplete(Guid childSynchronizationId);
    private static void InvokeComplete(SynchronizationInfo parentSynchronizationInfo);
    public void DataCompleted(DataCompletedMessage dataCompletedMessage);
    private bool ChildEventCompleted(Guid childSynchronizationId, SynchronizationInfo& parentSynchronizationInfo);
}
internal class Microsoft.VisualStudio.TestTools.Execution.EventPumpSink : MarshalByRefObject {
    [CompilerGeneratedAttribute]
private BackgroundJobProcessor`1<SynchronizedEventInfo> <EventPump>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureRemoteIdentity>k__BackingField;
    private BackgroundJobProcessor`1<SynchronizedEventInfo> EventPump { get; private set; }
    private bool CaptureRemoteIdentity { get; private set; }
    private WindowsIdentity RemoteIdentity { get; }
    public EventPumpSink(BackgroundJobProcessor`1<SynchronizedEventInfo> eventPump);
    public EventPumpSink(BackgroundJobProcessor`1<SynchronizedEventInfo> eventPump, bool captureRemoteIdentity);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
    [CompilerGeneratedAttribute]
private BackgroundJobProcessor`1<SynchronizedEventInfo> get_EventPump();
    [CompilerGeneratedAttribute]
private void set_EventPump(BackgroundJobProcessor`1<SynchronizedEventInfo> value);
    [CompilerGeneratedAttribute]
private bool get_CaptureRemoteIdentity();
    [CompilerGeneratedAttribute]
private void set_CaptureRemoteIdentity(bool value);
    private WindowsIdentity get_RemoteIdentity();
    public sealed virtual void Dispose();
    public virtual object InitializeLifetimeService();
}
internal class Microsoft.VisualStudio.TestTools.Execution.EventSynchronousDispatcher : object {
    private DataCollectionEventArgs m_args;
    private SynchronizationCallbackProxy m_synchronizationCallbackProxy;
    private ManualResetEvent m_eventComplete;
    private object m_timedOutLock;
    private bool m_timedOut;
    private Guid m_synchronizationId;
    public EventSynchronousDispatcher(DataCollectionEventArgs args);
    public sealed virtual void Dispose();
    public bool Dispatch(ICollectorEventSink receiver, TimeSpan timeout);
    private void EventComplete(Guid synchronizationId);
    private void Reset();
}
internal class Microsoft.VisualStudio.TestTools.Execution.ExecutionAssemblyResolver : MarshalByRefObject {
    private String[] m_searchDirList;
    public static string ExecutionDirectoryKeyName;
    public String[] DirectorySearchList { get; public set; }
    public ExecutionAssemblyResolver(String[] searchDirList);
    public String[] get_DirectorySearchList();
    public void set_DirectorySearchList(String[] value);
    private Assembly OnResolve(object senderAppDomain, ResolveEventArgs args);
    public virtual object InitializeLifetimeService();
}
public static class Microsoft.VisualStudio.TestTools.Execution.ExecutionUtilities : object {
    private static string s_appName;
    private static String[] s_runContextReadOnlyArray;
    private static bool s_testHook_assumeRemoteUserIsAnonymous;
    internal static String[] RunContextReadOnlyArray { get; }
    internal static string AppName { get; internal set; }
    private static ExecutionUtilities();
    internal static String[] get_RunContextReadOnlyArray();
    internal static string get_AppName();
    internal static void set_AppName(string value);
    internal static WindowsIdentity SafeRevertToSelf();
    internal static string EncryptStringToBase64(string clearTextString);
    internal static string EncryptByteToBase64(Byte[] clearTextArray);
    internal static string DecryptBase64ToString(string base64EncyptedString);
    private static Byte[] CalcEntropy();
    internal static Byte[] ConvertHexPairsToByteArray(string inString);
    internal static bool IsUserInGroup(WindowsIdentity identity, string groupName);
    internal static bool GroupExists(string groupName);
    internal static void CreateLocalGroup(string groupName, string description);
    internal static void DeleteLocalGroup(string groupName);
    private static string GetComputerAdsiPath();
    private static string GetGroupAdsiPath(string groupName);
    internal static WindowsIdentity GetRemoteUserIdentity();
    internal static void AddUserToAgentServiceGroup(WindowsIdentity identity);
    internal static void AddUserToGroup(WindowsIdentity identity, string groupName);
    internal static void AddUser(DirectoryEntry userToAdd, DirectoryEntry computer, string groupName);
    internal static void RemoveUser(DirectoryEntry userToRemove, DirectoryEntry computer, string groupName);
    internal static DirectoryEntry FindGroup(DirectoryEntry computer, string groupName);
    internal static DirectoryEntry GetUserDirectoryEntry(DirectoryEntry computer, string domain, string userName, string userPassword, bool createIfNotFound);
    internal static DirectoryEntry CreateUser(DirectoryEntry computer, string userName, string userPassword);
    internal static string DetermineDomain(String& username);
    internal static bool IsMachineIp(string ip);
    internal static string DetermineAdministratorsGroupname();
    internal static string DetermineEveryoneGroupname();
    internal static bool IsAuthenticatedControllerAdmin(WindowsIdentity identity);
    public static bool IsAuthenticatedUserInAdminGroup(WindowsIdentity identity);
    internal static bool IsAuthenticatedControllerUserOrAdmin(WindowsIdentity identity);
    internal static string SplitUserNameAndDomain(String& username);
    internal static Byte[] ConvertStringToByteArray(string inString);
    internal static Thread StartNewThread(ParameterizedThreadStart parameterizedThreadStart, object parameter, string threadName);
    internal static Thread StartNewThread(ParameterizedThreadStart parameterizedThreadStart, ApartmentState apartmentState, int maxStackSize, object parameter, string threadName);
    internal static Thread CreateNewThread(ParameterizedThreadStart parameterizedThreadStart, string threadName);
    internal static Thread CreateNewThread(ParameterizedThreadStart parameterizedThreadStart, int maxStackSize, string threadName);
    internal static bool InvokeWithTimeout(Action action, int timeout, string description);
    public static DebugOperationResult DebugTarget(IResultSink sink, Guid runId, DebugTargetInfo targetInfo, TimeSpan timeout);
    internal static Hashtable CreateTcpClientServerChannelProperties(int serverChannelPort, Nullable`1<int> retryCount, Nullable`1<int> timeout, string bindToAddress, bool secure, ProtectionLevel protectionLevel, TokenImpersonationLevel clientImpersonationLevel, bool isImpersonationByServerEnabled, NetworkCredential networkCredential);
    internal static bool GetAlwaysUseMachineNameFromRegistry();
    internal static bool GetUseNetBiosNameFromRegistry();
    internal static string GetBindToAddressFromRegistry();
    internal static bool GetAlwaysUseMachineNameFromConfig(NameValueCollection appSettings);
    internal static bool GetUseNetBiosNameFromConfig(NameValueCollection appSettings);
    internal static bool GetBindToIPAddressFromConfig(NameValueCollection appSettings);
    internal static string GetBindToAddressFromConfig(NameValueCollection appSettings);
    internal static IpcChannel RegisterIpcClientServerChannel();
    internal static IpcChannel RegisterIpcClientServerChannel(bool currentUserOnly);
    internal static IpcChannel RegisterIpcClientServerChannel(string ipcPortName, bool useHigherPriority);
    internal static IpcChannel RegisterIpcClientServerChannel(string ipcPortName, bool currentUserOnly, bool useHigherPriority);
    internal static bool IsWindowsXP();
    internal static Uri GetChannelUri(IChannelReceiver receiver);
    internal static bool InvokeController(Action invokeController, string caller, Boolean& connectionLost);
    internal static bool InvokeRemoteMethod(Action invokeRemoteMethod, string caller, string additionalInfo, bool throwOnCommunicationError, bool throwOnOtherError);
    internal static void EnableDefaultLocalDataCollectors(AgentRule agentRule, Func`2<Uri, bool> shouldEnableCollector, bool connectedDeviceContext);
    internal static void EnableDefaultDataCollectors(IEnumerable`1<DataCollectorInformation> availableDataCollectors, AgentRule agentRule, bool isCollectionOnlyRule);
    internal static void EnableDefaultDataCollectors(IEnumerable`1<DataCollectorInformation> availableDataCollectors, AgentRule agentRule, Func`2<Uri, bool> shouldEnableCollector, bool isCollectionOnlyRule, bool connectedDeviceContext);
    internal static bool IsControllerConnectedToTFS(IControllerCommands controllerCommands);
    internal static Version GetControllerVersion(IControllerAccessManager accessManager);
    internal static void UpdateRemotingCredentials(object proxyObject, NetworkCredential networkCredential, Func`2<NetworkCredential, NetworkCredential> decryptionFunction);
    internal static Version GetControllerVersion(IControllerAccessManager accessManager, bool tolerateOldControllers);
    internal static Dictionary`2<string, string> ParseTestIntegrationLabConfigurationString(string vmString);
}
public class Microsoft.VisualStudio.TestTools.Execution.FileTransferInformation : BasicTransferInformation {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteFile>k__BackingField;
    public string Path { get; private set; }
    public bool DeleteFile { get; private set; }
    protected internal bool PerformCleanup { get; }
    protected internal string ClientFileName { get; }
    public FileTransferInformation(DataCollectionContext context, string path, bool deleteFile);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_DeleteFile();
    [CompilerGeneratedAttribute]
private void set_DeleteFile(bool value);
    protected internal virtual bool get_PerformCleanup();
    protected internal virtual string get_ClientFileName();
}
internal class Microsoft.VisualStudio.TestTools.Execution.FlushDataEventArgs : DataCollectionEventArgs {
    internal FlushDataEventArgs(DataCollectionContext context);
}
internal class Microsoft.VisualStudio.TestTools.Execution.HostProcessPlatformHelper : object {
    private ProcessorArchitecture m_currentPlatform;
    private AssemblyClrVersion m_currentClrVersion;
    private bool m_is32BitOS;
    private object m_processSyncObject;
    private object m_syncObj;
    public ProcessorArchitecture CurrentPlatform { get; }
    public AssemblyClrVersion CurrentClrVersion { get; }
    public bool Is32BitOS { get; }
    public bool IsExecutingOn64BitClr { get; }
    public HostProcessPlatformHelper(object lockObject);
    public bool SwitchProcessArchitecture(ProcessorArchitecture newPlatform, AssemblyClrVersion newClrVersion);
    public bool DoesSwitchRequireRestart(ProcessorArchitecture newPlatform, AssemblyClrVersion newClrVersion);
    public ProcessorArchitecture get_CurrentPlatform();
    public AssemblyClrVersion get_CurrentClrVersion();
    public bool get_Is32BitOS();
    public bool get_IsExecutingOn64BitClr();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IAgentStatusProvider {
    public IServiceControl AgentServiceControl { get; }
    public abstract virtual AgentStatusInformation GetStatus();
    public abstract virtual IServiceControl get_AgentServiceControl();
}
public interface Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter {
    public abstract virtual void Run(ITestElement testElement, ITestContext testContext);
    public abstract virtual void Cleanup();
    public abstract virtual void StopTestRun();
    public abstract virtual void AbortTestRun();
    public abstract virtual void PauseTestRun();
    public abstract virtual void ResumeTestRun();
}
public interface Microsoft.VisualStudio.TestTools.Execution.IBaseRunContext {
    public IExecutionRunConfiguration RunConfig { get; }
    public IResultSink ResultSink { get; }
    public ITestRunner TestRunner { get; }
    public abstract virtual IExecutionRunConfiguration get_RunConfig();
    public abstract virtual IResultSink get_ResultSink();
    public abstract virtual ITestRunner get_TestRunner();
    public abstract virtual void StopTestRun();
    public abstract virtual void PauseTestRun();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.ICollectorEventSink {
    public abstract virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public abstract virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.ICollectorEventSinkProvider {
    public ICollectorEventSink CollectorEventSink { get; }
    public abstract virtual ICollectorEventSink get_CollectorEventSink();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.ICommonUtilityCallback {
    public abstract virtual void FileCopyComplete(Exception ex);
}
public interface Microsoft.VisualStudio.TestTools.Execution.IContextAccessor {
    public int Count { get; }
    public abstract virtual void RemoveValue(string key);
    public abstract virtual string GetStringValue(string key);
    public abstract virtual double GetDoubleValue(string key);
    public abstract virtual int GetIntValue(string key);
    public abstract virtual object GetObject(string key);
    public abstract virtual void AddStringValue(string key, string value);
    public abstract virtual void AddIntValue(string key, int value);
    public abstract virtual void AddDoubleValue(string key, double value);
    public abstract virtual void AddObject(string key, object value);
    public abstract virtual IDictionaryEnumerator GetEnumerator();
    public abstract virtual int get_Count();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IControllerAccessManager {
    public Version ControllerVersion { get; }
    public abstract virtual Version get_ControllerVersion();
    public abstract virtual object GetControllerObject();
    public abstract virtual object GetControllerObject(Version versionInfo);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IControllerAccessManagerAgent {
    public abstract virtual object GetControllerObject(string agentName);
    public abstract virtual object GetControllerObject(Version versionInfo, string agentName);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IControllerCommands {
    public abstract virtual AgentStatus[] GetAgentStatuses();
    public abstract virtual AgentStatus GetAgentStatus(string agentName);
    public abstract virtual string AddAgent(AgentProperties agentProp);
    public abstract virtual void RemoveAgent(string agentName);
    public abstract virtual void AddAgentServiceAccount(string agentMachine, string userName);
    public abstract virtual void RemoveAgentServiceAccount(string userName);
    public abstract virtual void RestartAgent(string agentName);
    public abstract virtual void SetAgentOperationalState(string agentName, bool online);
    public abstract virtual AgentProperties GetAgentProperties(string agentName);
    public abstract virtual void SetAgentProperties(AgentProperties agentProp);
    public abstract virtual AgentProperties[] GetAllAgents();
    public abstract virtual String[] GetAgentNetworkInterfaceNames(string agentName);
    public abstract virtual string GetControllerUserName();
    public abstract virtual void StartAgents();
    public abstract virtual void StopAgents();
    public abstract virtual void DeleteTempFiles();
    public abstract virtual void DeleteTempFiles(Guid tmiRunId, Guid testEnvironmentId);
    public abstract virtual int GetLoadFactor();
    public abstract virtual ReadOnlyCollection`1<string> GetTestEnvironmentNames();
    public abstract virtual TestEnvironment GetTestEnvironment(string testEnvironmentName, bool includeCollectorInformation);
    public abstract virtual TestEnvironment GetTestEnvironment(Guid testEnvironmentId, bool includeCollectorInformation);
    public abstract virtual TestEnvironmentStatus GetTestEnvironmentStatus(string testEnvironmentName);
    public abstract virtual UpdatedTestEnvironments UpdateTestEnvironment(TestEnvironment testEnvironment);
    public abstract virtual TestEnvironment UnregisterTestEnvironment(TestEnvironment testEnvironment);
    public abstract virtual ControllerInformation GetControllerInformation();
    public abstract virtual void SetControllerInformation(ControllerInformation controllerInformation);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IControllerPlugin {
    public abstract virtual void Initialize(IControllerContext testContext);
    public abstract virtual void Cleanup();
    public abstract virtual void TestAgentsReady(String[] agentList);
    public abstract virtual void MessageSink(TestMessage testMessage);
    public abstract virtual void DeleteTestRun(Guid guidTestRunId, ControllerInformation controllerInformation);
    public abstract virtual void TestAgentDisconnected(string agentName);
}
public interface Microsoft.VisualStudio.TestTools.Execution.IDataCollectionAwareTestAdapter {
    public DataCollectorNotifications DataCollectors { get; public set; }
    public abstract virtual DataCollectorNotifications get_DataCollectors();
    public abstract virtual void set_DataCollectors(DataCollectorNotifications value);
}
public interface Microsoft.VisualStudio.TestTools.Execution.IDataCollectionRunContext {
    public IResultSink ResultSink { get; }
    public TestRun TestRun { get; }
    public IContextAccessor RunContextVariables { get; }
    public abstract virtual IResultSink get_ResultSink();
    public abstract virtual TestRun get_TestRun();
    public abstract virtual IContextAccessor get_RunContextVariables();
}
public interface Microsoft.VisualStudio.TestTools.Execution.IDataCollectorConfigurationConverter {
    public abstract virtual void Convert(Uri sourceCollectorUri, XmlElement sourceCollectorRunConfiguration, Uri targetCollectorUri, XmlElement targetCollectorDefaultConfiguration, XmlElement& targetCollectorRunConfiguration);
}
public interface Microsoft.VisualStudio.TestTools.Execution.IDataCollectorConfigurationEditor {
    public abstract virtual void Initialize(IServiceProvider serviceProvider, DataCollectorSettings settings);
    public abstract virtual bool VerifyData();
    public abstract virtual DataCollectorSettings SaveData();
    public abstract virtual void ResetToAgentDefaults();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDataCollectorInformationProvider {
    public abstract virtual ReadOnlyCollection`1<AgentDataCollectorInformation> GetDataCollectorInformation();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDataCollectorResourceInfo {
    public string ResourceName { get; }
    public bool IsResourceName { get; }
    public abstract virtual string get_ResourceName();
    public abstract virtual bool get_IsResourceName();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDataCollectorRestrictionProvider`1 {
    public T Restriction { get; }
    public abstract virtual T get_Restriction();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDataCompletedSink {
    public abstract virtual void SendMessage(DataCompletedMessage message);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDeploymentTaskExecution {
    public abstract virtual bool ExecuteDeploymentTask(DeploymentTask task, string deploymentCallBackPortName);
    public abstract virtual void CancelDeploymentTask(long deploymentTaskId);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDeploymentTaskExecutionCallback {
    public abstract virtual void ExecutionDataReceived(string data, bool error, long deploymentTaskId);
    public abstract virtual void UpdateDeploymentTaskStatus(long deploymentTaskId, DeploymentTaskStatus newStatus);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDeploymentTaskManager {
    public abstract virtual bool ExecuteDeploymentTask(DeploymentTask task, string agentName);
    public abstract virtual void CancelDeploymentTask(long deploymentTaskId, string agentName);
    public abstract virtual void UpdateAgentStatus(string agentName, bool reserve);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IDeploymentTaskMonitor {
    public abstract virtual void StartDeploymentTaskPolling();
    public abstract virtual void StopDeploymentTaskPolling();
}
public interface Microsoft.VisualStudio.TestTools.Execution.IExecutionRunConfiguration {
    public TestRun TestRun { get; }
    public ITestElement[] TestElements { get; }
    public abstract virtual TestRun get_TestRun();
    public abstract virtual ITestElement[] get_TestElements();
}
public interface Microsoft.VisualStudio.TestTools.Execution.IHostAdapter {
    public abstract virtual ITestAdapter GetTestAdapter(ITestElement test, IRunContext runContext);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IMessageSink {
    public abstract virtual void SendMessage(DataCollectionMessage message);
}
internal class Microsoft.VisualStudio.TestTools.Execution.InternalDataCollectionEvents : DataCollectionEvents {
    private SafeAbortableUserWorkItemFactory m_userWorkItemFactory;
    private Dictionary`2<Type, EventInvoker> m_eventArgsToEventInvokerMap;
    internal string m_collectorDiagnosticName;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionStartEventArgs> SessionStart;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionEndEventArgs> SessionEnd;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionPauseEventArgs> SessionPause;
    [CompilerGeneratedAttribute]
private EventHandler`1<SessionResumeEventArgs> SessionResume;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestCaseStartEventArgs> TestCaseStart;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestCaseEndEventArgs> TestCaseEnd;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestCasePauseEventArgs> TestCasePause;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestCaseResumeEventArgs> TestCaseResume;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestCaseResetEventArgs> TestCaseReset;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestCaseFailedEventArgs> TestCaseFailed;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestStepStartEventArgs> TestStepStart;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestStepEndEventArgs> TestStepEnd;
    [CompilerGeneratedAttribute]
private EventHandler`1<DataRequestEventArgs> DataRequest;
    [CompilerGeneratedAttribute]
private EventHandler`1<CustomNotificationEventArgs> CustomNotification;
    internal InternalDataCollectionEvents(SafeAbortableUserWorkItemFactory userWorkItemFactory);
    [CompilerGeneratedAttribute]
public virtual void add_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_SessionPause(EventHandler`1<SessionPauseEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_SessionPause(EventHandler`1<SessionPauseEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_SessionResume(EventHandler`1<SessionResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_SessionResume(EventHandler`1<SessionResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestCasePause(EventHandler`1<TestCasePauseEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestCasePause(EventHandler`1<TestCasePauseEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestCaseResume(EventHandler`1<TestCaseResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestCaseResume(EventHandler`1<TestCaseResumeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestCaseReset(EventHandler`1<TestCaseResetEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestCaseReset(EventHandler`1<TestCaseResetEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestCaseFailed(EventHandler`1<TestCaseFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestCaseFailed(EventHandler`1<TestCaseFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestStepStart(EventHandler`1<TestStepStartEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestStepStart(EventHandler`1<TestStepStartEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_TestStepEnd(EventHandler`1<TestStepEndEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_TestStepEnd(EventHandler`1<TestStepEndEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_DataRequest(EventHandler`1<DataRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_DataRequest(EventHandler`1<DataRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_CustomNotification(EventHandler`1<CustomNotificationEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_CustomNotification(EventHandler`1<CustomNotificationEventArgs> value);
    internal List`1<DataCollectorInvocationError> RaiseEvent(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnSessionStart(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnSessionEnd(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnSessionPause(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnSessionResume(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestCaseStart(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestCaseEnd(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestCasePause(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestCaseResume(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestCaseReset(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestCaseFailed(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestStepStart(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnTestStepEnd(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnDataRequest(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> OnCustomNotification(DataCollectionEventArgs e);
    private List`1<DataCollectorInvocationError> On(MulticastDelegate multicastDel, DataCollectionEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.Execution.InternalDataCollectionLogger : DataCollectionLogger {
    private Uri m_dataCollectorType;
    private IMessageSink m_sink;
    internal InternalDataCollectionLogger(Uri dataCollectorType, IMessageSink sink);
    public virtual void SendData(CustomNotificationEventArgs matchingNotificationEventArgs, CustomCollectorData data);
    public virtual void SendData(DataCollectionContext context, CustomCollectorData data);
    public virtual void LogError(DataCollectionContext context, string text);
    public virtual void LogError(DataCollectionContext context, string text, Exception exception);
    public virtual void LogWarning(DataCollectionContext context, string text);
    public virtual void LogException(DataCollectionContext context, Exception exception, DataCollectorMessageLevel level);
    private void SendTextMessage(DataCollectionContext context, string text, DataCollectorMessageLevel level);
}
internal class Microsoft.VisualStudio.TestTools.Execution.InternalDataCollectionSink : DataCollectionSink {
    private IMessageSink m_sink;
    private FileDataSender m_fileDataSender;
    [CompilerGeneratedAttribute]
private AsyncCompletedEventHandler SendFileCompleted;
    [CompilerGeneratedAttribute]
private AsyncCompletedEventHandler SendStreamCompleted;
    internal IMessageSink MessageSink { get; }
    internal InternalDataCollectionSink(IMessageSink sink, FileDataSender fileDataSender);
    internal IMessageSink get_MessageSink();
    [CompilerGeneratedAttribute]
public virtual void add_SendFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_SendFileCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_SendStreamCompleted(AsyncCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_SendStreamCompleted(AsyncCompletedEventHandler value);
    public virtual void SendFileAsync(FileTransferInformation fileTransferInformation);
    public virtual void SendStreamAsync(StreamTransferInformation streamTransferInformation);
    private void InternalSendFileAsync(FileTransferInformation fileTransferInformation);
    private void InternalSendStreamAsync(StreamTransferInformation streamTransferInformation);
}
internal class Microsoft.VisualStudio.TestTools.Execution.InternalFileCopyTestResultMessage : FileCopyTestResultMessage {
    private IncrementFileCopyServiceCountCallback m_incrementFileCopyServiceCount;
    private DecrementFileCopyServiceCountCallback m_decrementFileCopyServiceCount;
    private FileCopyFinished m_fileCopyComplete;
    public IncrementFileCopyServiceCountCallback IncrementFileCopyServiceCount { get; }
    public DecrementFileCopyServiceCountCallback DecrementFileCopyServiceCount { get; }
    public FileCopyFinished FileCopyComplete { get; }
    public InternalFileCopyTestResultMessage(string computerInfo, Guid runId, TestMessageKind kind, FileCopyService fileCopyService, IncrementFileCopyServiceCountCallback incrementFileCopyServiceCount, DecrementFileCopyServiceCountCallback decrementFileCopyServiceCount, FileCopyFinished fileCopyComplete);
    public IncrementFileCopyServiceCountCallback get_IncrementFileCopyServiceCount();
    public DecrementFileCopyServiceCountCallback get_DecrementFileCopyServiceCount();
    public FileCopyFinished get_FileCopyComplete();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IOrcasTestExecutionPluginInitialize {
    public abstract virtual void Initialize(IDataCollectionRunContext runContext);
}
public interface Microsoft.VisualStudio.TestTools.Execution.IRegisterHostAdapter {
    public abstract virtual void Ping();
    public abstract virtual void Register(IHostAdapter hostAdapter);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IRegisterRemoteCollectionEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemoteCollectionRegistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemoteCollectionRegistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RemoteCollectionUnregistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RemoteCollectionUnregistering(EventHandler`1<RegisterRemoteCollectionEventArgs> value);
}
public interface Microsoft.VisualStudio.TestTools.Execution.IResultSink {
    public abstract virtual void AddResult(TestMessage testMessage);
}
public interface Microsoft.VisualStudio.TestTools.Execution.IRunContext {
    public string AgentName { get; }
    public IContextAccessor RunContextVariables { get; }
    public abstract virtual string get_AgentName();
    public abstract virtual IContextAccessor get_RunContextVariables();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IRunMonitor {
    public abstract virtual void StartPollingForTCMRuns();
    public abstract virtual void StopPollingForTcmRuns();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IRunMonitorFactory {
    public abstract virtual IRunMonitor CreateRunMonitor(IControllerCommands controllerObject, string controllerName, string tfsUri);
    public abstract virtual IDeploymentTaskMonitor CreateDeploymentTaskMonitor(IControllerCommands controllerObject, string controllerName, string tfsUri);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.IServiceControl {
    public abstract virtual void StopService();
}
public interface Microsoft.VisualStudio.TestTools.Execution.ITestContext {
    public IContextAccessor TestContextVariables { get; }
    public IContextAccessor RunContextVariables { get; }
    public IResultSink ResultSink { get; }
    public IDictionary`2<string, object> Properties { get; }
    public abstract virtual IContextAccessor get_TestContextVariables();
    public abstract virtual IContextAccessor get_RunContextVariables();
    public abstract virtual IResultSink get_ResultSink();
    public abstract virtual IDictionary`2<string, object> get_Properties();
}
internal interface Microsoft.VisualStudio.TestTools.Execution.ITestExecutionEnvironmentSpecifier {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> GetTestExecutionEnvironmentVariables();
}
public interface Microsoft.VisualStudio.TestTools.Execution.ITestExecutionPlugin {
    public abstract virtual void BeforeExecutionStarted(TestRun run, IResultSink sink, IDataCollectionRunContext runContext);
    public abstract virtual void AfterExecutionCompleted(TestRun run, IResultSink sink, IDataCollectionRunContext runContext);
    public abstract virtual bool BeforeTestStarted(IDataCollectionRunContext runContext, TestExecId id);
    public abstract virtual void AfterTestCompleted(IDataCollectionRunContext runContext, TestExecId id);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.ITestHost {
    public IControllerAccessManager ControllerAccessManager { get; }
    public abstract virtual IControllerAccessManager get_ControllerAccessManager();
    public abstract virtual void SetWorkingDirectory(string directory);
}
public interface Microsoft.VisualStudio.TestTools.Execution.ITestRunner {
    public abstract virtual AdapterRunResult Run(ITestElement[] testElement, IResultSink resultSink);
    public abstract virtual AdapterRunResult LoadRun(ITestElement[] testElement, IResultSink resultSink, IDictionary`2<string, object> contextProperties);
}
internal class Microsoft.VisualStudio.TestTools.Execution.LegacyPluginFailedException : RigExecutionException {
    internal LegacyPluginFailedException(EqtMessage message);
    public LegacyPluginFailedException(string msg);
    public LegacyPluginFailedException(string msg, Exception inner);
    protected LegacyPluginFailedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Execution.LogMgr : object {
    private FileStream m_logFileStream;
    private FileStream m_bakFileStream;
    internal FileStream CreateLog(string pathAndFilename);
    internal static void BackupLog(string oldfilenameAndPath, string newfilenameAndPath);
    internal long GetLogSize();
    internal void CloseBackupLog();
}
public enum Microsoft.VisualStudio.TestTools.Execution.MediaRecorderCommand : Enum {
    public int value__;
    public static MediaRecorderCommand GetDefaultAudioDeviceName;
    public static MediaRecorderCommand StartInputVolumeLevelPolling;
    public static MediaRecorderCommand StopInputVolumeLevelPolling;
    public static MediaRecorderCommand MuteDefaultAudioDevice;
    public static MediaRecorderCommand UnmuteDefaultAudioDevice;
    public static MediaRecorderCommand GetDefaultAudioDeviceMuteStatus;
    public static MediaRecorderCommand EnableAudioRecorder;
    public static MediaRecorderCommand DisableAudioRecorder;
    public static MediaRecorderCommand GetAudioRecorderStatus;
    public static MediaRecorderCommand DisableVideoRecorder;
    public static MediaRecorderCommand EnableVideoRecorder;
    public static MediaRecorderCommand GetVideoRecorderStatus;
}
public class Microsoft.VisualStudio.TestTools.Execution.MediaRecorderCommandEventArgs : CustomNotificationEventArgs {
    [CompilerGeneratedAttribute]
private MediaRecorderCommand <Command>k__BackingField;
    public MediaRecorderCommand Command { get; private set; }
    public MediaRecorderCommandEventArgs(DataCollectionContext context, MediaRecorderCommand command);
    [CompilerGeneratedAttribute]
public MediaRecorderCommand get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(MediaRecorderCommand value);
}
public class Microsoft.VisualStudio.TestTools.Execution.MediaRecorderCustomData : CustomCollectorData {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    public string Data { get; private set; }
    public MediaRecorderCustomData(string data);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.MediaRecorderException : Exception {
    private bool m_alreadyLogged;
    public bool AlreadyLogged { get; }
    public MediaRecorderException(string message, Exception innerException);
    public MediaRecorderException(string message, bool alreadyLogged, Exception innerException);
    protected MediaRecorderException(SerializationInfo info, StreamingContext context);
    public bool get_AlreadyLogged();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Execution.MediaRecorderVolumeLevelData : CustomCollectorData {
    [CompilerGeneratedAttribute]
private float <Volume>k__BackingField;
    public float Volume { get; private set; }
    public MediaRecorderVolumeLevelData(float volume);
    [CompilerGeneratedAttribute]
public float get_Volume();
    [CompilerGeneratedAttribute]
private void set_Volume(float value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.NetworkEmulationEventArgs : CustomNotificationEventArgs {
    [CompilerGeneratedAttribute]
private NetworkEmulationProfile <Profile>k__BackingField;
    public NetworkEmulationProfile Profile { get; private set; }
    public NetworkEmulationEventArgs(DataCollectionContext context, NetworkEmulationProfile profile);
    [CompilerGeneratedAttribute]
public NetworkEmulationProfile get_Profile();
    [CompilerGeneratedAttribute]
private void set_Profile(NetworkEmulationProfile value);
}
public enum Microsoft.VisualStudio.TestTools.Execution.NotificationBroadcastLevel : Enum {
    public int value__;
    public static NotificationBroadcastLevel LocalOnly;
    public static NotificationBroadcastLevel All;
}
internal class Microsoft.VisualStudio.TestTools.Execution.OnDemandRemoteCollectionChannel : object {
    private IRegisterRemoteCollectionEvents m_eventProvider;
    private string m_channelPrefix;
    private TcpClientServerChannelContainer m_collectionControllerChannel;
    internal OnDemandRemoteCollectionChannel(IRegisterRemoteCollectionEvents eventProvider, string channelPrefix);
    public sealed virtual void Dispose();
    private void OnRemoteCollectionRegistering(object sender, RegisterRemoteCollectionEventArgs e);
    private void OnRemoteCollectionUnregistering(object sender, RegisterRemoteCollectionEventArgs e);
    private void UnregisterCollectionControllerChannel();
}
[DataCollectorTypeUriAttribute("datacollector://Microsoft/Legacy/1.0")]
[DataCollectorFriendlyNameAttribute("Legacy Add-in")]
internal class Microsoft.VisualStudio.TestTools.Execution.OrcasTestExecutionPluginAdapter : DataCollector {
    private DataCollectionEvents m_events;
    private IDataCollectionRunContext m_runContext;
    private ITestExecutionPlugin m_legacyPlugin;
    private bool m_enabled;
    private EventHandler`1<SessionStartEventArgs> m_sessionStartEventHandler;
    private EventHandler`1<SessionEndEventArgs> m_sessionEndEventHandler;
    private EventHandler`1<TestCaseStartEventArgs> m_testCaseStartEventHandler;
    private EventHandler`1<TestCaseEndEventArgs> m_testCaseEndEventHandler;
    public ITestExecutionPlugin LegacyPlugin { get; }
    internal OrcasTestExecutionPluginAdapter(ITestExecutionPlugin legacyPlugin);
    public sealed virtual void Initialize(IDataCollectionRunContext runContext);
    public virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext dataCollectionEnvironmentContext);
    protected virtual void Dispose(bool disposing);
    public ITestExecutionPlugin get_LegacyPlugin();
    private void OnSessionStart(object sender, SessionStartEventArgs e);
    private void OnSessionEnd(object sender, SessionEndEventArgs e);
    private void OnTestCaseStart(object sender, TestCaseStartEventArgs e);
    private void OnTestCaseEnd(object sender, TestCaseEndEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.Execution.ProcessJobObject : object {
    private IntPtr jobHandle;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) disposed;
    private static bool Is32Bit;
    private static ProcessJobObject();
    public void AddProcess(IntPtr handle);
    private void CreateJobObject();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.Execution.ProcessManagerSynchonizationMessage : TestMessage {
    private SynchronizationCallbackProxy m_callback;
    public SynchronizationCallbackProxy Callback { get; }
    internal ProcessManagerSynchonizationMessage(SynchronizationCallbackProxy callback);
    public SynchronizationCallbackProxy get_Callback();
}
internal class Microsoft.VisualStudio.TestTools.Execution.RaiseEventMessage : TestMessage {
    private SynchronizationCallbackProxy m_callback;
    private DataCollectionEventArgs m_eventArgs;
    private bool m_useDataSynchronization;
    public SynchronizationCallbackProxy Callback { get; }
    public DataCollectionEventArgs EventArgs { get; }
    public bool UseDataSynchronization { get; }
    internal RaiseEventMessage(DataCollectionEventArgs args, SynchronizationCallbackProxy callback);
    internal RaiseEventMessage(DataCollectionEventArgs args, SynchronizationCallbackProxy callback, bool useDataSynchronization);
    public SynchronizationCallbackProxy get_Callback();
    public DataCollectionEventArgs get_EventArgs();
    public bool get_UseDataSynchronization();
}
internal class Microsoft.VisualStudio.TestTools.Execution.RegisterCollectorsEventArgs : CollectorRegistrationEventArgs {
    internal RegisterCollectorsEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, IList`1<string> collectorTypes);
}
internal class Microsoft.VisualStudio.TestTools.Execution.RegisterRemoteCollectionEventArgs : EventArgs {
    private TestRun m_testRun;
    internal TestRun TestRun { get; }
    internal RegisterRemoteCollectionEventArgs(TestRun run);
    internal TestRun get_TestRun();
}
internal class Microsoft.VisualStudio.TestTools.Execution.RemoteCollectorEventSinkWrapper : object {
    private RemoteObjectContainer`1<ICollectorEventSink> m_collectorEventSinkContainer;
    public RemoteCollectorEventSinkWrapper(ICollectorEventSink collectorSink, WindowsIdentity agentIdentity);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo);
    public sealed virtual void RaiseEvent(DataCollectionEventArgs arg, SynchronizationInfo synchronizationInfo, NotificationBroadcastLevel broadcastLevel);
}
internal class Microsoft.VisualStudio.TestTools.Execution.RemoteObjectContainer`1 : object {
    private T m_remoteObject;
    private WindowsIdentity m_remoteIdentity;
    public WindowsIdentity RemoteIdentity { get; }
    public RemoteObjectContainer`1(T remoteObject);
    public RemoteObjectContainer`1(T remoteObject, WindowsIdentity remoteIdentity);
    public WindowsIdentity get_RemoteIdentity();
    private bool ValueEquals(RemoteObjectContainer`1<T> other);
    public sealed virtual bool Equals(RemoteObjectContainer`1<T> other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(RemoteObjectContainer`1<T> left, RemoteObjectContainer`1<T> right);
    public static bool op_Inequality(RemoteObjectContainer`1<T> left, RemoteObjectContainer`1<T> right);
    public virtual int GetHashCode();
    public void InvokeAsRemoteUser(Action`1<T> invoke);
    public R InvokeAsRemoteUser(Func`2<T, R> invoke);
    private static void Undo(WindowsImpersonationContext impersonationContext);
    private WindowsImpersonationContext Impersonate();
    private WindowsImpersonationContext ImpersonateInternal();
}
public class Microsoft.VisualStudio.TestTools.Execution.RequestId : object {
    public static RequestId Empty;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    public Guid Id { get; private set; }
    internal RequestId(Guid id);
    private static RequestId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual bool Equals(RequestId other);
    public sealed virtual int CompareTo(RequestId other);
    public sealed virtual int CompareTo(object obj);
    public static bool op_Equality(RequestId left, RequestId right);
    public static bool op_Inequality(RequestId left, RequestId right);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.ResolutionAppDomainHelper : object {
    private static string c_configFileExtension;
    private string m_testFile;
    private string m_traceName;
    private bool m_setupFullResoluton;
    private bool m_useDiscoveryPaths;
    private IWarningHandler m_warningHandler;
    private AssemblyResolutionSettings m_assemblySettings;
    private AppDomainSetup m_setupInfo;
    private AppDomain m_testAppDomain;
    private ObjectHandle m_assemblyResolver;
    private string m_generatedApplicationConfigurationFile;
    private string m_applicationBase;
    private Nullable`1<bool> m_isUsingConfiguredApplicationBase;
    private List`1<AssemblyResolutionRuntimePath> m_resolutionPaths;
    private static string s_xmlNamespace;
    public AppDomain AppDomain { get; }
    public AppDomainSetup AppDomainSetup { get; }
    public ObjectHandle AssemblyResolverWrapper { get; }
    private string ApplicationBase { get; }
    private bool IsUsingConfiguredApplicationBase { get; }
    private List`1<AssemblyResolutionRuntimePath> ResolutionPaths { get; }
    public ResolutionAppDomainHelper(AssemblyResolutionSettings assemblyResolutionSettings, bool setupFullResoluton, bool useDiscoverySettings, IWarningHandler warningHandler);
    public ResolutionAppDomainHelper(AssemblyResolutionSettings assemblyResolutionSettings, string testFile, bool setupFullResoluton, bool useDiscoverySettings, IWarningHandler warningHandler);
    private static ResolutionAppDomainHelper();
    public AppDomain get_AppDomain();
    public AppDomainSetup get_AppDomainSetup();
    public ObjectHandle get_AssemblyResolverWrapper();
    private string get_ApplicationBase();
    private bool get_IsUsingConfiguredApplicationBase();
    private List`1<AssemblyResolutionRuntimePath> get_ResolutionPaths();
    public AppDomain CreateAppDomain();
    public sealed virtual void Dispose();
    private AppDomainSetup GetAppDomainSettings();
    private void GenerateConfigSettings(string configPath);
    private void AddResolutionPaths(AssemblyResolutionConfig assemblyResolutionConfig);
    private string GetTempAppConfigFile();
    private AppDomain CreateTestAppDomain(AppDomainSetup setupInfo);
    private Byte[] AddAssemblyRedirectsAndConvertToByteArray(string configFile);
    private XmlElement FindOrCreateElement(XmlDocument doc, XmlNode parent, string name);
    private XmlElement FindOrCreateAssemblyBindingSection(XmlDocument doc, XmlElement configurationElement);
    private void AddAssemblyBindingRedirect(XmlDocument doc, XmlElement assemblyBindingSection, AssemblyName assemblyName, string fromVersion, string toVersion);
}
internal class Microsoft.VisualStudio.TestTools.Execution.RigDiscoveryCache : object {
    [StoreXmlSimpleFieldAttribute("@name", "Mono.Cecil.CustomAttributeArgument")]
private string m_controllerName;
    private Dictionary`2<string, AgentDiscoveryCache> m_agents;
    public string ControllerName { get; }
    public Dictionary`2<string, AgentDiscoveryCache> Agents { get; }
    public RigDiscoveryCache(string controllerName);
    public string get_ControllerName();
    public Dictionary`2<string, AgentDiscoveryCache> get_Agents();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.Execution.RoleContext : object {
    private bool m_isRemoteRole;
    private bool m_isExecutionRole;
    public bool IsRemoteRole { get; }
    public bool IsExecutionRole { get; }
    public RoleContext(bool isRemoteRole, bool isExecutionRole);
    public bool get_IsRemoteRole();
    public bool get_IsExecutionRole();
}
public class Microsoft.VisualStudio.TestTools.Execution.RunConfiguration : object {
    private TestRun m_testRun;
    private ITestElement[] m_testElements;
    private TestRunConstraints m_trc;
    internal TestRunConstraints Constraints { get; internal set; }
    public int TestCount { get; }
    public TestRun TestRun { get; }
    public ITestElement[] TestElements { get; }
    public RunConfiguration(TestRun testRun);
    internal TestRunConstraints get_Constraints();
    internal void set_Constraints(TestRunConstraints value);
    public int get_TestCount();
    public sealed virtual TestRun get_TestRun();
    public sealed virtual ITestElement[] get_TestElements();
    public sealed virtual bool IsValid();
}
internal enum Microsoft.VisualStudio.TestTools.Execution.RunQueueState : Enum {
    public int value__;
    public static RunQueueState Active;
    public static RunQueueState Queued;
    public static RunQueueState Completed;
    public static RunQueueState Deleted;
    public static RunQueueState Disconnected;
}
internal class Microsoft.VisualStudio.TestTools.Execution.RuntimeWarningHandler : object {
    private IResultSink m_resultSink;
    private Guid m_runId;
    public RuntimeWarningHandler(IResultSink resultSink, Guid runId);
    public sealed virtual void Write(object sender, WarningEventArgs ea);
}
internal static class Microsoft.VisualStudio.TestTools.Execution.ServiceManager : object {
    public static void RestartService(string serviceName, string computerName, int timeout);
    public static void StopService(string serviceName, string computerName, string agentName, int timeout, IAgentService agentService, bool canPerformUITesting);
    public static void RestartService(string serviceName, string computerName, string agentName, int timeout, IAgentService agentService, bool canPerformUITesting);
    private static void RestartService(string serviceName, string computerName, string agentName, int timeout, IAgentService agentService, bool canPerformUITesting, bool startService);
}
public class Microsoft.VisualStudio.TestTools.Execution.SessionEndEventArgs : DataCollectionEventArgs {
    public SessionEndEventArgs(DataCollectionContext context);
}
public class Microsoft.VisualStudio.TestTools.Execution.SessionPauseEventArgs : DataCollectionEventArgs {
    public SessionPauseEventArgs(DataCollectionContext context);
}
public class Microsoft.VisualStudio.TestTools.Execution.SessionResumeEventArgs : DataCollectionEventArgs {
    public SessionResumeEventArgs(DataCollectionContext context);
}
public class Microsoft.VisualStudio.TestTools.Execution.SessionStartEventArgs : DataCollectionEventArgs {
    public SessionStartEventArgs(DataCollectionContext context);
}
internal class Microsoft.VisualStudio.TestTools.Execution.SingleThreadTimerManager : object {
    private static int s_sequence;
    private SortedList`2<TimerKey, TimerDelegate> m_timers;
    private Dictionary`2<TimerKey, object> m_timersToRemove;
    private Stopwatch m_stopwatch;
    private TimeSpan m_sleepInterval;
    private Thread m_timeoutThread;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_isDisposed;
    internal SingleThreadTimerManager(string timeoutThreadName);
    public sealed virtual void Dispose();
    internal TimerKey AddTimer(TimeSpan timeout, TimerDelegate callback);
    internal void RemoveTimer(TimerKey timer);
    private void TimeoutThread(object state);
}
public class Microsoft.VisualStudio.TestTools.Execution.StreamTransferInformation : BasicTransferInformation {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseStream>k__BackingField;
    public Stream Stream { get; private set; }
    public string FileName { get; private set; }
    public bool CloseStream { get; private set; }
    protected internal bool PerformCleanup { get; }
    protected internal string ClientFileName { get; }
    public StreamTransferInformation(DataCollectionContext context, Stream stream, string fileName, bool closeStream);
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
private void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public bool get_CloseStream();
    [CompilerGeneratedAttribute]
private void set_CloseStream(bool value);
    protected internal virtual bool get_PerformCleanup();
    protected internal virtual string get_ClientFileName();
}
internal class Microsoft.VisualStudio.TestTools.Execution.SynchronizationCallbackProxy : MarshalByRefObject {
    private CompleteCallback m_completeCallback;
    public SynchronizationCallbackProxy(CompleteCallback completeCallback);
    public virtual object InitializeLifetimeService();
    public void Complete(Guid synchronizationId);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.Execution.SynchronizationInfo : object {
    [CompilerGeneratedAttribute]
private Guid <SynchronizationId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDataSynchronization>k__BackingField;
    private CompleteCallback m_completeCallback;
    public Guid SynchronizationId { get; private set; }
    internal bool EnableDataSynchronization { get; private set; }
    internal bool HasCallback { get; }
    public SynchronizationInfo(Guid synchronizationId, CompleteCallback completeCallback);
    internal SynchronizationInfo(Guid synchronizationId);
    [CompilerGeneratedAttribute]
public Guid get_SynchronizationId();
    [CompilerGeneratedAttribute]
private void set_SynchronizationId(Guid value);
    [CompilerGeneratedAttribute]
internal bool get_EnableDataSynchronization();
    [CompilerGeneratedAttribute]
private void set_EnableDataSynchronization(bool value);
    internal bool get_HasCallback();
    public void Complete();
}
internal class Microsoft.VisualStudio.TestTools.Execution.SynchronizedEventInfo : object {
    [CompilerGeneratedAttribute]
private DataCollectionEventArgs <CollectorEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private SynchronizationInfo <SynchronizationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsIdentity <RemoteIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationBroadcastLevel <BroadCastLevel>k__BackingField;
    public DataCollectionEventArgs CollectorEventArgs { get; private set; }
    public SynchronizationInfo SynchronizationInfo { get; private set; }
    public WindowsIdentity RemoteIdentity { get; private set; }
    public NotificationBroadcastLevel BroadCastLevel { get; private set; }
    public SynchronizedEventInfo(DataCollectionEventArgs args, SynchronizationInfo synchronizationInfo);
    public SynchronizedEventInfo(DataCollectionEventArgs args, SynchronizationInfo synchronizationInfo, WindowsIdentity remoteIdentity);
    public SynchronizedEventInfo(DataCollectionEventArgs args, SynchronizationInfo synchronizationInfo, WindowsIdentity remoteIdentity, NotificationBroadcastLevel broadcastLevel);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public DataCollectionEventArgs get_CollectorEventArgs();
    [CompilerGeneratedAttribute]
private void set_CollectorEventArgs(DataCollectionEventArgs value);
    [CompilerGeneratedAttribute]
public SynchronizationInfo get_SynchronizationInfo();
    [CompilerGeneratedAttribute]
private void set_SynchronizationInfo(SynchronizationInfo value);
    [CompilerGeneratedAttribute]
public WindowsIdentity get_RemoteIdentity();
    [CompilerGeneratedAttribute]
private void set_RemoteIdentity(WindowsIdentity value);
    [CompilerGeneratedAttribute]
public NotificationBroadcastLevel get_BroadCastLevel();
    [CompilerGeneratedAttribute]
private void set_BroadCastLevel(NotificationBroadcastLevel value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.TcpClientServerChannelContainer : object {
    public static string TcpChannelDefaultPriorityString;
    private List`1<IChannel> m_channels;
    private static List`1<IChannel> m_staticChannels;
    private static Nullable`1<bool> isExecutingInVS;
    private static string DevenvProcessName;
    private bool usingStaticChannels;
    public IEnumerable`1<Uri> ChannelUris { get; }
    private List`1<IChannel> Channels { get; }
    private static bool IsExecutingInVS { get; }
    public TcpClientServerChannelContainer(string channelNamePrefix, Hashtable channelProperties, bool useMachineName, bool useNetBiosName);
    public TcpClientServerChannelContainer(Hashtable overriddenChannelProperties);
    private static TcpClientServerChannelContainer();
    private void GetPortRange(string portBeginValName, string portEndValName, Int32& portBegin, Int32& portEnd);
    public sealed virtual void Dispose();
    public IEnumerable`1<Uri> get_ChannelUris();
    private static BinaryServerFormatterSinkProvider CreateServerProvider();
    private static void FixMachineNameProperty(Hashtable channelProperties, bool useMachineName, bool useNetBiosName, Boolean& shouldCreateIPV6Channel);
    private bool TryCreateIPV6Channel(Hashtable channelProperties, string channelNamePrefix, TcpServerChannel& ipV6ServerChannel);
    private void RegisterAndAddChannel(IChannel channel);
    private void UnregisterChannels();
    private void LogChannelDetails();
    private List`1<IChannel> get_Channels();
    private static bool get_IsExecutingInVS();
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestAdapterManager : object {
    private Hashtable m_loadedAdapters;
    private object m_adapterLock;
    private DataCollectorNotificationsFactory m_collectorNotificationsFactory;
    private bool m_closeHostApplication;
    private Dictionary`2<string, object> m_badAdapters;
    public bool CloseHostApplication { get; public set; }
    public TestAdapterManager(DataCollectorNotificationsFactory notificationsFactory);
    public bool get_CloseHostApplication();
    public void set_CloseHostApplication(bool value);
    public IBaseAdapter LoadAdapter(ITestElement testElement, IRunContext runContext, bool checkHostAdapter, bool shouldPrepare);
    public IBaseAdapter LoadAdapter(ITestElement testElement, IRunContext runContext);
    public void Cleanup(IRunContext runContext);
    private IBaseAdapter LoadAndInitAdapter(string adapterTypeName, ITestElement testElement, IRunContext runContext, bool shouldPrepare);
    private static ITestAdapter CreateAdapter(string adapterTypeName);
    private static Type GetAdapterType(string adapterTypeName, string fileName);
    private static void ReportRunError(string computerInfo, Guid runId, IResultSink resultSink, string errorMessage);
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestAgentProcessStartedMessage : ServiceMessage {
    protected TestAgentProcessStartedMessage(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestCaseEndEventArgs : TestCaseEventArgs {
    [CompilerGeneratedAttribute]
private TestOutcome <TestOutcome>k__BackingField;
    public TestOutcome TestOutcome { get; private set; }
    internal TestCaseEndEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase);
    internal TestCaseEndEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, TestOutcome testOutcome);
    public TestCaseEndEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation, TestOutcome testOutcome);
    [CompilerGeneratedAttribute]
public TestOutcome get_TestOutcome();
    [CompilerGeneratedAttribute]
private void set_TestOutcome(TestOutcome value);
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.TestCaseEventArgs : DataCollectionEventArgs {
    [CompilerGeneratedAttribute]
private Guid <TestCaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private TcmInformation <TcmInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildTestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestElement <TestElement>k__BackingField;
    public Guid TestCaseId { get; private set; }
    public TcmInformation TcmInformation { get; private set; }
    public string TestCaseName { get; private set; }
    public bool IsChildTestCase { get; private set; }
    public ITestElement TestElement { get; internal set; }
    protected TestCaseEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase);
    protected TestCaseEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation);
    [CompilerGeneratedAttribute]
public Guid get_TestCaseId();
    [CompilerGeneratedAttribute]
private void set_TestCaseId(Guid value);
    [CompilerGeneratedAttribute]
public TcmInformation get_TcmInformation();
    [CompilerGeneratedAttribute]
private void set_TcmInformation(TcmInformation value);
    [CompilerGeneratedAttribute]
public string get_TestCaseName();
    [CompilerGeneratedAttribute]
private void set_TestCaseName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsChildTestCase();
    [CompilerGeneratedAttribute]
private void set_IsChildTestCase(bool value);
    [CompilerGeneratedAttribute]
public ITestElement get_TestElement();
    [CompilerGeneratedAttribute]
internal void set_TestElement(ITestElement value);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestCaseFailedEventArgs : TestCaseEventArgs {
    [CompilerGeneratedAttribute]
private TestCaseFailureType <FailureType>k__BackingField;
    public TestCaseFailureType FailureType { get; private set; }
    internal TestCaseFailedEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, TestCaseFailureType failureType);
    public TestCaseFailedEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation, TestCaseFailureType failureType);
    [CompilerGeneratedAttribute]
public TestCaseFailureType get_FailureType();
    [CompilerGeneratedAttribute]
private void set_FailureType(TestCaseFailureType value);
}
public enum Microsoft.VisualStudio.TestTools.Execution.TestCaseFailureType : Enum {
    public int value__;
    public static TestCaseFailureType None;
    public static TestCaseFailureType Assertion;
    public static TestCaseFailureType UnhandledException;
    public static TestCaseFailureType UnexpectedException;
    public static TestCaseFailureType MissingException;
    public static TestCaseFailureType Other;
}
public class Microsoft.VisualStudio.TestTools.Execution.TestCasePauseEventArgs : TestCaseEventArgs {
    internal TestCasePauseEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase);
    public TestCasePauseEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestCaseResetEventArgs : TestCaseEventArgs {
    internal TestCaseResetEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase);
    public TestCaseResetEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestCaseResumeEventArgs : TestCaseEventArgs {
    internal TestCaseResumeEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase);
    public TestCaseResumeEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestCaseStartEventArgs : TestCaseEventArgs {
    internal TestCaseStartEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase);
    public TestCaseStartEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation);
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestDirectoryElement : object {
    private static string c_useLoadContextLocation;
    [CompilerGeneratedAttribute]
private bool <UseLoadContext>k__BackingField;
    public bool UseLoadContext { get; public set; }
    public bool IsDefault { get; }
    private TestDirectoryElement(TestDirectoryElement testDirectoryElement);
    [CompilerGeneratedAttribute]
public bool get_UseLoadContext();
    [CompilerGeneratedAttribute]
public void set_UseLoadContext(bool value);
    public bool get_IsDefault();
    public TestDirectoryElement Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.AgentInformation : object {
    private static int WeightingDefault;
    private string m_name;
    private string m_displayName;
    private string m_machineName;
    [StoreXmlSimpleFieldAttribute]
private string m_labEnvironmentName;
    [StoreXmlSimpleFieldAttribute]
private Uri m_labSystemUri;
    private AgentConnectionState m_agentConnectionState;
    [StoreXmlSimpleFieldAttribute]
private bool m_canPerformUITesting;
    private string m_configuredUserName;
    private int m_port;
    private int m_weighting;
    [StoreXmlSimpleFieldAttribute]
private bool m_takenOffline;
    private bool m_isConnected;
    private AgentIPConfig m_agentIPConfig;
    private QTKeyValueCollection m_properties;
    private ReadOnlyCollection`1<DataCollectorInformation> m_dataCollectors;
    private ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> m_configurationEditors;
    private MachineRole m_parentMachineRole;
    private Exception exception;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> StateChanged;
    [CompilerGeneratedAttribute]
private string <SubStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestAgentVersion>k__BackingField;
    public MachineRole ParentMachineRole { get; private set; }
    public string Name { get; private set; }
    public string DisplayName { get; private set; }
    public string MachineName { get; private set; }
    public string LabEnvironmentName { get; public set; }
    public Uri LabSystemUri { get; private set; }
    public AgentConnectionState Status { get; private set; }
    public string SubStatus { get; private set; }
    public string TestAgentVersion { get; public set; }
    public bool CanPerformUITesting { get; public set; }
    public string ConfiguredUserName { get; public set; }
    public bool TakenOffline { get; public set; }
    public bool IsConnected { get; public set; }
    public int Port { get; public set; }
    public int Weighting { get; public set; }
    public AgentIPConfig IPConfig { get; public set; }
    public QTKeyValueCollection Properties { get; private set; }
    public ReadOnlyCollection`1<DataCollectorInformation> DataCollectors { get; }
    public ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> ConfigurationEditors { get; }
    [XmlIgnoreAttribute]
internal Exception LastEncounteredException { get; internal set; }
    public static AgentInformation LocalAgentInformation { get; }
    public AgentInformation(string name);
    public AgentInformation(string name, int port, int weighting, bool canPerformUITesting, string configuredUserName, bool takenOffline, bool connectionOnline, AgentConnectionState status, QTKeyValueCollection properties, AgentIPConfig agentIPConfig);
    public AgentInformation(string name, QTKeyValueCollection properties);
    public AgentInformation(string name, QTKeyValueCollection properties, ReadOnlyCollection`1<DataCollectorInformation> dataCollectors, ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> configurationEditors);
    public AgentInformation(string name, string displayName, string labEnvironmentName, Uri labSystemUri, QTKeyValueCollection properties);
    public AgentInformation(string name, string displayName, string machineName, string labEnvironmentName, Uri labSystemUri, QTKeyValueCollection properties);
    public AgentInformation(XmlElement element, XmlTestStoreParameters parameters);
    [CompilerGeneratedAttribute]
public void add_StateChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StateChanged(EventHandler`1<EventArgs> value);
    public MachineRole get_ParentMachineRole();
    private void set_ParentMachineRole(MachineRole value);
    public string get_Name();
    private void set_Name(string value);
    public string get_DisplayName();
    private void set_DisplayName(string value);
    public string get_MachineName();
    private void set_MachineName(string value);
    public string get_LabEnvironmentName();
    public void set_LabEnvironmentName(string value);
    public Uri get_LabSystemUri();
    private void set_LabSystemUri(Uri value);
    public AgentConnectionState get_Status();
    private void set_Status(AgentConnectionState value);
    [CompilerGeneratedAttribute]
public string get_SubStatus();
    [CompilerGeneratedAttribute]
private void set_SubStatus(string value);
    [CompilerGeneratedAttribute]
public string get_TestAgentVersion();
    [CompilerGeneratedAttribute]
public void set_TestAgentVersion(string value);
    public bool get_CanPerformUITesting();
    public void set_CanPerformUITesting(bool value);
    public string get_ConfiguredUserName();
    public void set_ConfiguredUserName(string value);
    public bool get_TakenOffline();
    public void set_TakenOffline(bool value);
    public bool get_IsConnected();
    public void set_IsConnected(bool value);
    public int get_Port();
    public void set_Port(int value);
    public int get_Weighting();
    public void set_Weighting(int value);
    public AgentIPConfig get_IPConfig();
    public void set_IPConfig(AgentIPConfig value);
    public QTKeyValueCollection get_Properties();
    private void set_Properties(QTKeyValueCollection value);
    public ReadOnlyCollection`1<DataCollectorInformation> get_DataCollectors();
    public ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> get_ConfigurationEditors();
    internal Exception get_LastEncounteredException();
    internal void set_LastEncounteredException(Exception value);
    public static AgentInformation get_LocalAgentInformation();
    public AgentInformation DeepClone();
    internal void Internal_SetParentMachineRole(MachineRole parentMachineRole);
    internal void Internal_SetMachineName(string machineName);
    internal void Internal_SetName(string name);
    internal void Internal_SetStatus(AgentConnectionState status);
    internal void Internal_SetSubStatus(string subStatus);
    internal void Internal_SetAgentCollectionInfo(AgentDataCollectorInformation dataCollectorInformation);
    internal void Internal_CopyNonPersistedStateTo(AgentInformation agent);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual bool Equals(AgentInformation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void LogContents();
    private static XmlTestStoreParameters CreateQTKeyValueCollectionParameters();
    internal bool IsLabSystem();
    private void UpdateParentEnvironmentStatus();
    private void OnStateChanged(EventArgs eventArgs);
}
internal interface Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.ITestEnvironmentInformationProvider {
    public abstract virtual ReadOnlyCollection`1<string> GetTestEnvironments();
    public abstract virtual TestEnvironment GetTestEnvironmentInformation(string testEnvironmentName);
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.LabInformation : object {
    [StoreXmlSimpleFieldAttribute]
private Uri m_labServerUri;
    [StoreXmlSimpleFieldAttribute]
private Uri m_labEnvironmentUri;
    [StoreXmlSimpleFieldAttribute]
private Guid m_labCollectionId;
    public Uri LabServerUri { get; private set; }
    public Uri LabEnvironmentUri { get; private set; }
    public Guid LabCollectionId { get; private set; }
    public LabInformation(Uri labServerUri, Uri labEnvironmentUri, Guid labCollectionId);
    public LabInformation(XmlElement element, XmlTestStoreParameters parameters);
    public Uri get_LabServerUri();
    private void set_LabServerUri(Uri value);
    public Uri get_LabEnvironmentUri();
    private void set_LabEnvironmentUri(Uri value);
    public Guid get_LabCollectionId();
    private void set_LabCollectionId(Guid value);
    public sealed virtual bool Equals(LabInformation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public void LogContents();
    public LabInformation DeepClone();
    internal void Validate();
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.Machine : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private AgentProperties <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DataCollectorInformation> <DataCollectors>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> <ConfigurationEditors>k__BackingField;
    public string Name { get; private set; }
    public AgentProperties Properties { get; private set; }
    public ReadOnlyCollection`1<DataCollectorInformation> DataCollectors { get; private set; }
    public ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> ConfigurationEditors { get; private set; }
    internal Machine(string machineName, AgentProperties agentProperties, ReadOnlyCollection`1<DataCollectorInformation> dataCollectors, ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> configurationEditors);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public AgentProperties get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(AgentProperties value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DataCollectorInformation> get_DataCollectors();
    [CompilerGeneratedAttribute]
private void set_DataCollectors(ReadOnlyCollection`1<DataCollectorInformation> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> get_ConfigurationEditors();
    [CompilerGeneratedAttribute]
private void set_ConfigurationEditors(ReadOnlyCollection`1<DataCollectorConfigurationEditorInformation> value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.MachineRole : object {
    [StoreXmlSimpleFieldAttribute]
private string m_name;
    [StoreXmlSimpleFieldAttribute]
private Guid m_id;
    private Dictionary`2<string, AgentInformation> m_agentsByName;
    [CompilerGeneratedAttribute]
private TestEnvironment <ParentTestEnvironment>k__BackingField;
    public string Name { get; public set; }
    public TestEnvironment ParentTestEnvironment { get; internal set; }
    public Guid Id { get; private set; }
    public ReadOnlyCollection`1<AgentInformation> Agents { get; }
    public bool IsDefault { get; }
    public MachineRole(string machineRoleName);
    public MachineRole(XmlElement element, XmlTestStoreParameters parameters);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TestEnvironment get_ParentTestEnvironment();
    [CompilerGeneratedAttribute]
internal void set_ParentTestEnvironment(TestEnvironment value);
    public Guid get_Id();
    private void set_Id(Guid value);
    public ReadOnlyCollection`1<AgentInformation> get_Agents();
    public bool get_IsDefault();
    public AgentInformation GetAgent(string agentName);
    public void AddAgent(AgentInformation agent);
    public bool RemoveAgent(string agentName);
    public MachineRole DeepClone();
    internal void Internal_SetParentTestEnvironment(TestEnvironment parentTestEnvironment);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual bool Equals(MachineRole other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void LogContents();
    internal void Validate();
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.TestEnvironment : object {
    private List`1<MachineRole> m_machineRoles;
    private Dictionary`2<string, AgentInformation> m_agentsByName;
    [StoreXmlSimpleFieldAttribute]
private string m_name;
    [StoreXmlSimpleFieldAttribute]
private string m_displayName;
    [StoreXmlSimpleFieldAttribute]
private Guid m_id;
    [StoreXmlSimpleFieldAttribute]
private string m_description;
    [StoreXmlSimpleFieldAttribute]
private TestEnvironmentType m_type;
    private LabInformation m_labInformation;
    [StoreXmlSimpleFieldAttribute]
private string m_teamProjectName;
    [StoreXmlSimpleFieldAttribute]
private string m_owner;
    private TestEnvironmentStatus m_status;
    private QTKeyValueCollection m_properties;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public Guid Id { get; private set; }
    public string Description { get; public set; }
    public TestEnvironmentType Type { get; }
    public LabInformation Lab { get; private set; }
    public ReadOnlyCollection`1<MachineRole> MachineRoles { get; }
    public ReadOnlyCollection`1<AgentInformation> Agents { get; }
    public string TeamProjectName { get; public set; }
    public TestEnvironmentStatus Status { get; private set; }
    public string Owner { get; }
    public QTKeyValueCollection Properties { get; }
    public bool IsDefault { get; }
    public TestEnvironment(string name);
    public TestEnvironment(Guid identifier, string name, TestEnvironmentType type, string teamProjectName, LabInformation lab);
    public TestEnvironment(XmlElement element, XmlTestStoreParameters parameters);
    public string get_Name();
    public void set_Name(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Guid get_Id();
    private void set_Id(Guid value);
    public string get_Description();
    public void set_Description(string value);
    public TestEnvironmentType get_Type();
    public LabInformation get_Lab();
    private void set_Lab(LabInformation value);
    public ReadOnlyCollection`1<MachineRole> get_MachineRoles();
    public ReadOnlyCollection`1<AgentInformation> get_Agents();
    public string get_TeamProjectName();
    public void set_TeamProjectName(string value);
    public TestEnvironmentStatus get_Status();
    private void set_Status(TestEnvironmentStatus value);
    public string get_Owner();
    public QTKeyValueCollection get_Properties();
    public bool get_IsDefault();
    public MachineRole GetMachineRole(string machineRoleName);
    internal void AddMachineRole(MachineRole machineRole);
    public bool RemoveMachineRole(string machineRoleName);
    public AgentInformation GetAgent(string agentName);
    public TestEnvironment DeepClone();
    internal void Internal_CheckStatus();
    internal void Internal_SetOwner(string owner);
    internal void Internal_CopyNonPersistedStateTo(TestEnvironment testEnvironment);
    internal void Internal_AddAgent(AgentInformation agentInformation);
    internal bool Internal_RemoveAgent(string agentName);
    public sealed virtual bool Equals(TestEnvironment other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    private static XmlTestStoreParameters CreateQTKeyValueCollectionParameters();
    public void LogContents();
    internal void Validate();
}
internal enum Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.TestEnvironmentStatus : Enum {
    public int value__;
    public static TestEnvironmentStatus NotReady;
    public static TestEnvironmentStatus Ready;
    public static TestEnvironmentStatus InUse;
}
internal enum Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.TestEnvironmentType : Enum {
    public int value__;
    public static TestEnvironmentType Physical;
    public static TestEnvironmentType Virtual;
    public static TestEnvironmentType Hybrid;
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestEnvironment.UpdatedTestEnvironments : object {
    [CompilerGeneratedAttribute]
private TestEnvironment <UpdatedTestEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private TestEnvironment <DefaultTestEnvironment>k__BackingField;
    public TestEnvironment UpdatedTestEnvironment { get; private set; }
    public TestEnvironment DefaultTestEnvironment { get; private set; }
    internal UpdatedTestEnvironments(TestEnvironment updatedTestEnvironment, TestEnvironment defaultTestEnvironment);
    [CompilerGeneratedAttribute]
public TestEnvironment get_UpdatedTestEnvironment();
    [CompilerGeneratedAttribute]
private void set_UpdatedTestEnvironment(TestEnvironment value);
    [CompilerGeneratedAttribute]
public TestEnvironment get_DefaultTestEnvironment();
    [CompilerGeneratedAttribute]
private void set_DefaultTestEnvironment(TestEnvironment value);
}
internal class Microsoft.VisualStudio.TestTools.Execution.TestExecutionEnvironmentVariable : object {
    private KeyValuePair`2<string, string> m_variable;
    private List`1<string> m_dataCollectorsThatRequested;
    public string Name { get; }
    public string Value { get; }
    public KeyValuePair`2<string, string> Pair { get; }
    public string FirstDataCollectorThatRequested { get; }
    public TestExecutionEnvironmentVariable(KeyValuePair`2<string, string> variable, string requestingDataCollectorFriendlyName);
    public string get_Name();
    public string get_Value();
    public KeyValuePair`2<string, string> get_Pair();
    public string get_FirstDataCollectorThatRequested();
    public void AddRequestingDataCollector(string requestingDataCollectorFriendlyName);
    public List`1<string> GetDataCollectorsThatRequested();
}
public class Microsoft.VisualStudio.TestTools.Execution.TestExecutionSection : ConfigurationSection {
    private static string c_configFileExtension;
    private static string c_resolutionSettingsName;
    private static string c_sectionName;
    [CompilerGeneratedAttribute]
private AssemblyResolutionSettings <AssemblyResolutionSettings>k__BackingField;
    internal AssemblyResolutionSettings AssemblyResolutionSettings { get; internal set; }
    internal static TestExecutionSection GetTestConfigurationForTestContainer(string testFile);
    [CompilerGeneratedAttribute]
internal AssemblyResolutionSettings get_AssemblyResolutionSettings();
    [CompilerGeneratedAttribute]
internal void set_AssemblyResolutionSettings(AssemblyResolutionSettings value);
    protected virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    protected virtual bool SerializeToXmlElement(XmlWriter writer, string elementName);
    protected virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestMessageReceiverDelegate : MulticastDelegate {
    public TestMessageReceiverDelegate(object object, IntPtr method);
    public virtual void Invoke(TestMessage message);
    public virtual IAsyncResult BeginInvoke(TestMessage message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestStepEndEventArgs : TestStepEventArgs {
    private TestOutcome m_testStepOutcome;
    public TestOutcome TestStepOutcome { get; }
    internal TestStepEndEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, int testStepId, string testStepDescription, TestOutcome testStepOutcome);
    public TestStepEndEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation, int testStepId, string testStepDescription, TestOutcome testStepOutcome);
    public TestOutcome get_TestStepOutcome();
}
public abstract class Microsoft.VisualStudio.TestTools.Execution.TestStepEventArgs : TestCaseEventArgs {
    [CompilerGeneratedAttribute]
private int <TestStepId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestStepDescription>k__BackingField;
    public int TestStepId { get; private set; }
    public string TestStepDescription { get; private set; }
    protected TestStepEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, int testStepId, string testStepDescription);
    protected TestStepEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation, int testStepId, string testStepDescription);
    [CompilerGeneratedAttribute]
public int get_TestStepId();
    [CompilerGeneratedAttribute]
private void set_TestStepId(int value);
    [CompilerGeneratedAttribute]
public string get_TestStepDescription();
    [CompilerGeneratedAttribute]
private void set_TestStepDescription(string value);
}
public class Microsoft.VisualStudio.TestTools.Execution.TestStepStartEventArgs : TestStepEventArgs {
    internal TestStepStartEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, int testStepId, string testStepDescription);
    public TestStepStartEventArgs(DataCollectionContext context, ITestElement testElement, TcmInformation tcmInformation, int testStepId, string testStepDescription);
}
internal class Microsoft.VisualStudio.TestTools.Execution.UnmanagedFileMgr : object {
    private IntPtr m_fileHandle;
    private bool m_delete;
    private static IntPtr INVALID_HANDLE_VALUE;
    private static UInt32 GENERIC_READ;
    private static UInt32 GENERIC_WRITE;
    private static int FILE_SHARE_READ;
    private static int FILE_SHARE_WRITE;
    private static int FILE_SHARE_DELETE;
    private static int CREATE_ALWAYS;
    private static int OPEN_EXISTING;
    private static int FILE_ATTRIBUTE_TEMPORARY;
    private static int FILE_FLAG_DELETE_ON_CLOSE;
    private static int FILE_BEGIN;
    private static int ERROR_SHARING_VIOLATION;
    private static int ERROR_FILE_EXISTS;
    private static UnmanagedFileMgr();
    protected virtual override void Finalize();
    public bool CreateFile(string fileName);
    private bool CreateFile(string fileName, int fileSize);
    public void WriteFile(Byte[] buffer, int bytes);
    public void WriteFile(Byte[] buffer, int bytes, int location);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.Execution.UnregisterCollectorsEventArgs : CollectorRegistrationEventArgs {
    internal UnregisterCollectorsEventArgs(DataCollectionContext context, Guid testCaseId, TcmInformation tcmInformation, string testCaseName, bool isChildTestCase, IList`1<string> collectorTypes);
}
internal class Microsoft.VisualStudio.TestTools.Execution.UserConfiguration.ServiceAccount : ServiceAccountBase {
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    private SecurityIdentifier m_sid;
    private string m_normalizedName;
    private bool m_isNetworkService;
    private bool m_isLocalSystem;
    private static ServiceAccount s_networkServiceAccount;
    private static ServiceAccount localSystemAccount;
    public static ServiceAccount LocalSystem { get; }
    public static ServiceAccount NetworkService { get; }
    public string RemoteName { get; }
    public string MachineName { get; public set; }
    public bool IsNetworkService { get; }
    public bool IsLocalSystem { get; }
    public bool IsCurrentLoggedOnUser { get; }
    public string UserName { get; }
    public string Domain { get; }
    internal ServiceAccount(string fullName, string password);
    public static ServiceAccount get_LocalSystem();
    public static ServiceAccount get_NetworkService();
    public static ServiceAccount NetworkServiceAccountClone(string machineName);
    public string get_RemoteName();
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    public bool get_IsNetworkService();
    public bool get_IsLocalSystem();
    public bool get_IsCurrentLoggedOnUser();
    public string get_UserName();
    public string get_Domain();
    public virtual string ToString();
}
internal abstract class Microsoft.VisualStudio.TestTools.Execution.UserConfiguration.ServiceAccountBase : object {
    protected string m_password;
    protected string m_fullName;
    public string FullName { get; }
    public string Password { get; }
    public string get_FullName();
    public string get_Password();
}
internal class Microsoft.VisualStudio.TestTools.Execution.UserConfiguration.UserConfigNativeMethods : object {
    internal static UInt32 DsBind(string DomainControllerName, string DnsDomainName, IntPtr& phDS);
    public static UInt32 DsUnBind(IntPtr& phDS);
    public static DS_NAME_RESULT_ITEM[] DsCrackNames(IntPtr hDS, DS_NAME_FLAGS flags, DS_NAME_FORMAT formatOffered, DS_NAME_FORMAT formatDesired, String[] names);
    public static UInt32 DsCrackNames(IntPtr hDS, DS_NAME_FLAGS flags, DS_NAME_FORMAT formatOffered, DS_NAME_FORMAT formatDesired, UInt32 cNames, String[] rpNames, IntPtr& ppResult);
    internal static void DsFreeNameResult(IntPtr pResult);
}
internal class Microsoft.VisualStudio.TestTools.Execution.UserConfiguration.UserConfigurationHelper : object {
    public static bool TryTranslateNetworkServiceAccountName(string userName, string machineName, String& machineAccountName);
    public static bool TryTranslateNetworkServiceAccountName(string userName, String& machineAccountName);
    public static bool TryTranslateLocalSystemAccountName(string userName, string machineName, String& machineAccountName);
    public static bool TryTranslateLocalSystemAccountName(string userName, String& machineAccountName);
    public static bool TryIsLocalSystemAccount(string userName);
    private static bool IsLocalSystemAccountName(string userName);
    private static bool IsWellKnownAccountUsername(string userName, WellKnownSidType accountSid);
    public static bool IsNetworkServiceAccountName(string userName);
    public static bool TryIsNetworkServiceAccount(string userName);
    internal static void AddUserAccount(ServiceAccount account, string groupName, string machineName, bool useRemoteName);
    internal static void RemoveUserAccount(ServiceAccount account, string groupName, string machineName, bool useRemoteName);
    internal static IEnumerable`1<string> GetMachineAccountsInGroup(string group);
    internal static bool TryIsSameMachine(string hostname1, string hostname2);
    internal static bool IsLocalAccount(string accountName, string remoteMachineName, String& localAccountName);
    internal static bool IsSameMachine(string hostname1, string hostname2);
    public static DirectoryEntry GetUserDirectoryEntry(string machineName, ServiceAccount userAccount, bool useRemoteName);
    public static string GetFullUserName(string userName);
    internal static string NormalizeDomainUserFormat(string account);
    internal static void GetAccountDetails(string accountName, String& normalizedAccountName, SecurityIdentifier& sid);
    internal static string DetermineDomain(string machineName, String& username);
    public static bool TryGetDomainAccountForServer(string hostname, String& domainAccount);
}
internal class Microsoft.VisualStudio.TestTools.Execution.VersionObsolete : object {
    private Uri m_newVersionTypeUri;
    private string m_newVersionTypeName;
    private string m_configurationConverter;
    public Uri NewVersionTypeUri { get; public set; }
    public string NewVersionTypeName { get; public set; }
    public string ConfigurationConverter { get; public set; }
    public VersionObsolete(SerializationInfo info, StreamingContext context);
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public Uri get_NewVersionTypeUri();
    public void set_NewVersionTypeUri(Uri value);
    public void set_NewVersionTypeName(string value);
    public string get_NewVersionTypeName();
    public string get_ConfigurationConverter();
    public void set_ConfigurationConverter(string value);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestTools.Execution.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.Execution.WaitOrTimerCallbackProxy : MarshalByRefObject {
    private WaitOrTimerCallback m_onTick;
    public WaitOrTimerCallbackProxy(WaitOrTimerCallback onTick);
    public sealed virtual void Dispose();
    public virtual object InitializeLifetimeService();
    public void OnTick(object state, bool timedOut);
}
internal class Microsoft.VisualStudio.TestTools.Execution.WebLoadCryptography : object {
    internal static string EncodeString(string str);
    internal static string DecodeString(string str);
    private static Byte[] GetKey();
    private static Byte[] GetIV();
}
internal class Microsoft.VisualStudio.TestTools.Execution.WindowsMediaEncoderNotInstalledException : Exception {
    public WindowsMediaEncoderNotInstalledException(string localizedMessage);
    public WindowsMediaEncoderNotInstalledException(string localizedMessage, Exception innerException);
    protected WindowsMediaEncoderNotInstalledException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.Execution.WrapperCustomNotificationEventArgs : CustomNotificationEventArgs {
    private SerializationWrapper`1<CustomNotificationEventArgs> m_serializationWrapper;
    public CustomNotificationEventArgs CustomNotificationEventArgs { get; }
    public WrapperCustomNotificationEventArgs(CustomNotificationEventArgs eventArgs);
    public CustomNotificationEventArgs get_CustomNotificationEventArgs();
    private static DataCollectionContext GetDataCollectionContext(CustomNotificationEventArgs eventArgs);
}
internal interface Microsoft.VisualStudio.TestTools.TestAdapter.ICloseHostApplication {
    public bool CloseHostApplication { get; }
    public abstract virtual bool get_CloseHostApplication();
}
public interface Microsoft.VisualStudio.TestTools.TestAdapter.ILoadTestAdapter {
    public abstract virtual void LoadRun(ITestElement testElement, ITestContext testContext);
}
internal interface Microsoft.VisualStudio.TestTools.TestAdapter.ISyncStartTestAdapter {
    public abstract virtual void Prepare(ITestElement testElement);
}
public interface Microsoft.VisualStudio.TestTools.TestAdapter.ITestAdapter {
    public abstract virtual void Initialize(IRunContext runContext);
    public abstract virtual void ReceiveMessage(object message);
    public abstract virtual void PreTestRunFinished(IRunContext runContext);
}
public interface Microsoft.VisualStudio.TestTools.TestAdapter.ITimeoutTestAdapter {
    public abstract virtual void TestTimeout(ITestElement test);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
