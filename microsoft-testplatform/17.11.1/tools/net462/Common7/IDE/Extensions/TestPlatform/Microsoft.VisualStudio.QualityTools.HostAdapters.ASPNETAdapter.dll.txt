internal static class Microsoft.VisualStudio.TestTools.HostAdapter.Web.AspNetStringConstants : object {
    public static string EnableTestingHeader;
    public static string DirectRemotingUriHeader;
    public static string ErrorResponseHeader;
    public static string GeneralErrorResponseHeader;
}
internal class Microsoft.VisualStudio.TestTools.HostAdapter.Web.AssemblyResolver : object {
    private List`1<string> m_listDirectories;
    public void On();
    public void Off();
    public void AddSearchDirectory(string directory);
    private Assembly OnResolve(object senderAppDomain, ResolveEventArgs args);
}
internal enum Microsoft.VisualStudio.TestTools.HostAdapter.Web.CommunicationError : Enum {
    public int value__;
    public static CommunicationError SetupTimeout;
    public static CommunicationError CleanupTimeout;
}
internal class Microsoft.VisualStudio.TestTools.HostAdapter.Web.HostAdapter : MarshalByRefObject {
    private TestRun m_testRun;
    public HostAdapter(TestRun testRun);
    private sealed virtual override ITestAdapter Microsoft.VisualStudio.TestTools.Execution.IHostAdapter.GetTestAdapter(ITestElement test, IRunContext runContext);
}
internal class Microsoft.VisualStudio.TestTools.HostAdapter.Web.HostAdapterChannel : object {
    private IpcClientChannel m_clientChannel;
    private IpcServerChannel m_serverChannel;
    private static string m_registerHostAdapterChannelPrefix;
    private static string m_registerHostAdapterUriPrefix;
    public void OpenClient();
    public void OpenServer();
    public void Close();
    internal static bool IsRemotingUriValid(string remotingUri);
}
internal class Microsoft.VisualStudio.TestTools.HostAdapter.Web.HttpModule : object {
    private static AssemblyResolver m_assemblyResolver;
    private int m_testHousekeepingWaitTime;
    internal int TestHousekeepingWaitTime { get; }
    private static HttpModule();
    private sealed virtual override void System.Web.IHttpModule.Dispose();
    private sealed virtual override void System.Web.IHttpModule.Init(HttpApplication app);
    private void OnPreRequestHandlerExecute(object sender, EventArgs e);
    private void OnPageLoad(object sender, EventArgs e);
    internal int get_TestHousekeepingWaitTime();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapter.Web.TestAdapter : MarshalByRefObject {
    private ITestAdapter m_testAdapter;
    private TestRun m_testRun;
    public TestAdapter(ITestElement test, IRunContext runContext, TestRun testRun);
    protected virtual override void Finalize();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.TestAdapter.ITestAdapter.Initialize(IRunContext runContext);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.TestAdapter.ITestAdapter.ReceiveMessage(object obj);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.TestAdapter.ITestAdapter.PreTestRunFinished(IRunContext runContext);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.Run(ITestElement test, ITestContext testContext);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.Cleanup();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.StopTestRun();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.AbortTestRun();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.PauseTestRun();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.ResumeTestRun();
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    private void InternalCleanup();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapter.Web.TestContext : object {
    private ITestContext m_wrappedTestContext;
    private Dictionary`2<string, object> m_properties;
    private IContextAccessor Microsoft.VisualStudio.TestTools.Execution.ITestContext.TestContextVariables { get; }
    private IContextAccessor Microsoft.VisualStudio.TestTools.Execution.ITestContext.RunContextVariables { get; }
    private IResultSink Microsoft.VisualStudio.TestTools.Execution.ITestContext.ResultSink { get; }
    private IDictionary`2<string, object> Microsoft.VisualStudio.TestTools.Execution.ITestContext.Properties { get; }
    public TestContext(ITestContext wrappedTestContext, Page requestedPage);
    private sealed virtual override IContextAccessor Microsoft.VisualStudio.TestTools.Execution.ITestContext.get_TestContextVariables();
    private sealed virtual override IContextAccessor Microsoft.VisualStudio.TestTools.Execution.ITestContext.get_RunContextVariables();
    private sealed virtual override IResultSink Microsoft.VisualStudio.TestTools.Execution.ITestContext.get_ResultSink();
    private sealed virtual override IDictionary`2<string, object> Microsoft.VisualStudio.TestTools.Execution.ITestContext.get_Properties();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapter.Web.TestRun : object {
    private HostAdapterChannel m_hostAdapterChannel;
    private HostAdapter m_hostAdapter;
    private ITestAdapter m_testAdapter;
    private ITestElement m_test;
    private ITestContext m_testContext;
    private Page m_requestedPage;
    private AutoResetEvent m_eventStartRun;
    private AutoResetEvent m_eventRunFinished;
    private AutoResetEvent m_eventCleanupComplete;
    public Page RequestedPage { get; }
    public AutoResetEvent StartRunEvent { get; }
    public AutoResetEvent RunFinishedEvent { get; }
    public AutoResetEvent CleanupCompleteEvent { get; }
    public TestRun(Page requestedPage);
    internal void RegisterHostAdapter(string directRemotingUri);
    internal void UnregisterHostAdapter();
    public void StartRun(ITestAdapter testAdapter, ITestElement test, ITestContext testContext);
    public void Run();
    public Page get_RequestedPage();
    public AutoResetEvent get_StartRunEvent();
    public AutoResetEvent get_RunFinishedEvent();
    public AutoResetEvent get_CleanupCompleteEvent();
}
