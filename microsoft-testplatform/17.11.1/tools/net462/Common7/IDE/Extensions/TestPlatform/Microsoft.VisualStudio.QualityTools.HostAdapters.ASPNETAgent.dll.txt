[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.QualityTools.HostAdapters.ASPNETAgent.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AspNetDataCollector { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AspNetDataCollector();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.AbortTestExecutionException : ApplicationException {
    protected AbortTestExecutionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.AspNetHostRunConfig : object {
    [StoreXmlSimpleFieldAttribute("@executionType", "Mono.Cecil.CustomAttributeArgument")]
private WebServerType m_webServerType;
    [StoreXmlSimpleFieldAttribute("@urlToTest", "Mono.Cecil.CustomAttributeArgument")]
private string m_urlToTest;
    [StoreXmlSimpleFieldAttribute("DevelopmentServer/@pathToWebSite", "Mono.Cecil.CustomAttributeArgument")]
private string m_pathToWeb;
    [StoreXmlSimpleFieldAttribute("DevelopmentServer/@webApplicationRoot", "Mono.Cecil.CustomAttributeArgument")]
private string m_webAppRoot;
    private static string m_name;
    private static string m_defaultAspNetHostType;
    public WebServerType WebServerType { get; }
    public string UrlToTest { get; }
    public string PathToWeb { get; }
    public string WebAppRoot { get; }
    public static string Name { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.ElementName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.NamespaceUri { get; }
    public AspNetHostRunConfig(WebServerType webServerType, string urlToTest, string pathToWeb, string webAppRoot);
    public WebServerType get_WebServerType();
    public string get_UrlToTest();
    public string get_PathToWeb();
    public string get_WebAppRoot();
    public static string get_Name();
    private sealed virtual override object System.ICloneable.Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_ElementName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_NamespaceUri();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.AspNetHostUserControl : UserControl {
    [CompilerGeneratedAttribute]
private EventHandler DataGetDirty;
    private IServiceProvider m_serviceProvider;
    private static string m_defaultAspNetHostType;
    private IContainer components;
    private Button m_browseButton;
    private TextBox m_urlToTest;
    private Label label3;
    private RadioButton m_webServerIIS;
    private TextBox m_webAppRoot;
    private Label label2;
    private TextBox m_pathToWeb;
    private Label label1;
    private RadioButton m_webServerCassini;
    private TableLayoutPanel browseTableLayoutPanel;
    private TableLayoutPanel overarchingTableLayoutPanel;
    private TableLayoutPanel subPanel;
    public string Description { get; }
    public string HelpKeyword { get; }
    public string Summary { get; }
    public string HostType { get; }
    public sealed virtual void Initialize(IServiceProvider serviceProvider, TestRun run);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DataGetDirty(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DataGetDirty(EventHandler value);
    public sealed virtual void OnCommonDataDirty(object sender, CommonRunConfigurationDirtyEventArgs dirtyEventArgs);
    public sealed virtual string get_Description();
    public sealed virtual string get_HelpKeyword();
    public sealed virtual bool VerifyData();
    public string get_Summary();
    public sealed virtual string get_HostType();
    public sealed virtual void SetData(IHostSpecificRunConfigurationData data);
    public sealed virtual IHostSpecificRunConfigurationData GetData();
    public sealed virtual void SetHostApplication(TestToolsHostApplication hostApplication);
    private void BrowseButton_Click(object sender, EventArgs e);
    private void UrlToTest_TextChanged(object sender, EventArgs e);
    private void WebServerCassini_CheckedChanged(object sender, EventArgs e);
    private void WebServerIIS_CheckedChanged(object sender, EventArgs e);
    private void PathToWeb_TextChanged(object sender, EventArgs e);
    private void WebAppRoot_TextChanged(object sender, EventArgs e);
    private void UpdateControls();
    private void SetDirty();
    protected virtual void Dispose(bool disposing);
    private void InitializeComponent();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.Context : object {
    private IRunContext m_runContext;
    private ITestElement m_testElement;
    private ITestContext m_testContext;
    public IRunContext RunContext { get; }
    public Guid TestRunId { get; }
    public TestRunConfiguration TestRunConfiguration { get; }
    public ITestElement TestElement { get; }
    public ITestContext TestContext { get; }
    public IResultSink ResultSink { get; }
    public IContextAccessor ContextVariables { get; }
    public Context(IRunContext runContext);
    public IRunContext get_RunContext();
    public Guid get_TestRunId();
    public TestRunConfiguration get_TestRunConfiguration();
    public ITestElement get_TestElement();
    public ITestContext get_TestContext();
    public IResultSink get_ResultSink();
    public IContextAccessor get_ContextVariables();
    public void SetTestCase(ITestElement testElement, ITestContext testContext);
    public void ClearTestCase();
    public void ReportTestFailure(string message);
    public void ReportTestRunWarning(string message);
    public void ReportTestRunError(string message);
    private void ReportTestRunMessage(string message, TestOutcome level);
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.HostAdapterChannel : object {
    private IpcClientChannel m_clientChannel;
    private IpcServerChannel m_serverChannel;
    private List`1<string> m_userNames;
    public string Name { get; }
    public void AllowAccessAndOpen(String[] userNames);
    public bool IsAllowedAccess(string userName);
    public void Open();
    public void Close();
    public string get_Name();
    private void OpenClient();
    private void OpenServer();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.RegisterHostAdapter : MarshalByRefObject {
    private IHostAdapter m_hostAdapter;
    private string m_uri;
    private AutoResetEvent m_registeredEvent;
    private static string m_registerHostAdapterUriPrefix;
    internal IHostAdapter HostAdapter { get; }
    internal string Uri { get; }
    internal AutoResetEvent RegisteredEvent { get; }
    public sealed virtual void Ping();
    public sealed virtual void Register(IHostAdapter hostAdapter);
    internal IHostAdapter get_HostAdapter();
    internal string get_Uri();
    internal AutoResetEvent get_RegisteredEvent();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebConfigurationException : ApplicationException {
    public WebConfigurationException(string message);
    protected WebConfigurationException(SerializationInfo info, StreamingContext context);
}
[RegisterHostAdapterAttribute("ASP.NET", "Microsoft.VisualStudio.TestTools.HostAdapters.WebHostAdapter", "Microsoft.VisualStudio.TestTools.HostAdapters.AspNetHostUserControl")]
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebHostAdapter : object {
    private WebSiteConfigurer m_webSiteConfigurer;
    private WebTestAdapter m_testAdapter;
    private HostAdapterChannel m_hostAdapterChannel;
    private RegisterHostAdapter m_registerHostAdapter;
    private bool m_stopped;
    private bool m_adapterInitialized;
    private object m_adapterLock;
    public bool Stopped { get; }
    private sealed virtual override void Microsoft.VisualStudio.TestTools.TestAdapter.ITestAdapter.Initialize(IRunContext runContext);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.TestAdapter.ITestAdapter.ReceiveMessage(object obj);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.TestAdapter.ITestAdapter.PreTestRunFinished(IRunContext runContext);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.Run(ITestElement test, ITestContext testContext);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.Cleanup();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.StopTestRun();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.AbortTestRun();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.PauseTestRun();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Execution.IBaseAdapter.ResumeTestRun();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.TestAdapter.ILoadTestAdapter.LoadRun(ITestElement testElement, ITestContext testContext);
    private void CleanupAdapter(bool stopping);
    public bool get_Stopped();
    public void SetStopped();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebSite : MarshalByRefObject {
    private object m_webSiteLock;
    private string m_webServerName;
    private WebServerType m_serverType;
    private string m_path;
    private string m_root;
    private WebSiteConfigurationType m_webSiteConfigType;
    private AspNetHelper m_aspNetHelper;
    private static string m_webConfigName;
    private static string m_urlPrefixTemplate;
    private static string s_hostAdapterModuleName;
    private WebSiteState m_state;
    public string WorkerProcessImpersonatedIdentity { get; }
    public string WorkerProcessIdentity { get; }
    public bool IsRunningAtFullTrust { get; }
    private string WebConfigPath { get; }
    public string WebServerName { get; }
    public WebServerType WebServerType { get; }
    public string PathToWeb { get; }
    public int Port { get; }
    public bool IsConfigured { get; }
    public bool IsConfiguredAndStarted { get; }
    public Uri UrlPrefix { get; }
    internal WebSiteConfigurationType WebSiteConfigType { get; }
    public WebSite(string webServerName, WebServerType serverType, string path, string root, AspNetHelper aspNetHelper, WebSiteConfigurationType webSiteConfigType);
    public void Configure();
    public void Unconfigure(Context context);
    public void Start();
    public void Stop();
    public void ConfigureAndStart(bool force);
    public void StopAndUnconfigure(Context context);
    public string get_WorkerProcessImpersonatedIdentity();
    public string get_WorkerProcessIdentity();
    public bool get_IsRunningAtFullTrust();
    private static string TryConvertPathToAbsolute(string path, Context context, StringDictionary runContextVariables);
    private static void ThrowPathToWebSiteNotFound(string pathToWeb, Origin origin);
    public static string NormalizePathToWeb(string pathToWeb, Context context, Origin origin);
    public static string NormalizeWebAppRoot(string webAppRoot);
    private ConfigHelper OpenWebConfig();
    private static void RestoreWebConfig(Context context, ConfigHelper config);
    private string get_WebConfigPath();
    private static void AddHttpModule(ConfigHelper webConfig, Type moduleType);
    private static void RemoveHttpModule(ConfigHelper webConfig);
    public string get_WebServerName();
    public WebServerType get_WebServerType();
    public string get_PathToWeb();
    public int get_Port();
    public bool get_IsConfigured();
    public bool get_IsConfiguredAndStarted();
    public Uri get_UrlPrefix();
    internal WebSiteConfigurationType get_WebSiteConfigType();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebSiteConfigurationException : ApplicationException {
    public WebSiteConfigurationException(string message);
    protected WebSiteConfigurationException(SerializationInfo info, StreamingContext context);
}
internal enum Microsoft.VisualStudio.TestTools.HostAdapters.WebSiteConfigurationType : Enum {
    public int value__;
    public static WebSiteConfigurationType NoConfiguration;
    public static WebSiteConfigurationType AlreadyConfigured;
    public static WebSiteConfigurationType AspNetHostedConfiguration;
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebSiteConfigurer : AspNetWebSiteConfigurer {
    private Context m_context;
    private bool m_usingRunLevelHostConfiguration;
    private object m_lock;
    private bool m_isDisposed;
    public Context Context { get; }
    public bool IsConfiguredForTest { get; }
    public WebSiteConfigurer(IRunContext runContext);
    public virtual void Dispose();
    public Context get_Context();
    public virtual bool get_IsConfiguredForTest();
    public virtual void ConfigureHostForTestRun();
    public virtual void ConfigureHostForTest(ITestElement testElement, ITestContext testContext);
    public virtual void ConfigureForTest(ITestElement testElement, ITestContext testContext);
    public virtual void UnconfigureForTest();
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebSiteId : object {
    private string m_webServerName;
    private WebServerType m_webServerType;
    private string m_pathToWeb;
    private string m_webAppRoot;
    private WebSiteConfigurationType m_webSiteConfigType;
    public WebSiteId(string webServerName, WebServerType webServerType, string pathToWeb, string webAppRoot, WebSiteConfigurationType webSiteConfigType);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebSites : MarshalByRefObject {
    public static WebSites Instance;
    private Dictionary`2<WebSiteId, WebSite> m_webSites;
    private Dictionary`2<TestExecId, WebSite> m_mapTestToWebSite;
    private object m_webSitesLock;
    public WebSite Item { get; }
    private static WebSites();
    public WebSite get_Item(ITestElement test);
    public WebSite GetHostWebServer(Context context);
    public WebSite[] GetWebServers(Context context);
    public WebSite CreateWebSite(WebServerType webServerType, string urlToTest, string pathToWeb, string webAppRoot, Context context);
    public void StopAndUnconfigureWebSites(Context context);
    public void ClearWebSites();
    public bool IsWebConfigConfigured(string pathToWeb);
    private WebSite GetWebServer(string webServerName, WebServerType webServerType, string urlToTest, string pathToWeb, string webAppRoot, BasicAuthCredential credential, Context context, WebSiteConfigurationType webSiteConfigType, Origin origin);
    internal static void ValidateUrl(string url);
}
internal class Microsoft.VisualStudio.TestTools.HostAdapters.WebTestAdapter : object {
    private WebSiteConfigurer m_webSiteConfigurer;
    private string m_urlToTest;
    private IAsyncResult m_result;
    private AutoResetEvent m_eventResponseDone;
    private static int m_aspNetConnectWaitTime;
    private HostAdapterChannel m_hostAdapterChannel;
    private RegisterHostAdapter m_registerHostAdapter;
    private string m_directRemotingUri;
    private AutoResetEvent m_eventStopWaiting;
    private IHostAdapter m_hostAdapter;
    private ITestAdapter m_testAdapter;
    private ConnectionState m_state;
    internal WebTestAdapter(HostAdapterChannel hostAdapterChannel, RegisterHostAdapter registerHostAdapter, WebSiteConfigurer webSiteConfigurer);
    public sealed virtual void Initialize(IRunContext runContext);
    public sealed virtual void ReceiveMessage(object obj);
    public sealed virtual void PreTestRunFinished(IRunContext runContext);
    public sealed virtual void Run(ITestElement test, ITestContext testContext);
    public sealed virtual void Cleanup();
    public sealed virtual void StopTestRun();
    public sealed virtual void AbortTestRun();
    public sealed virtual void PauseTestRun();
    public sealed virtual void ResumeTestRun();
    private void ConnectToHostAdapter();
    private void ConnectToTestAdapter();
    private bool AnalyzeResponseError(WebHeaderCollection responseHeaders);
    private void WebResponseCallback(IAsyncResult result);
    private string ValidateAndNormalizeUrl(string url, WebSite webSite);
    private string WriteResponse(HttpWebResponse response);
}
