[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ComVisibleAttribute("False")]
[FlagsAttribute]
internal enum Microsoft.Tools.MessagePacking.CompressionOptions : Enum {
    public int value__;
    public static CompressionOptions None;
    public static CompressionOptions Headers;
    public static CompressionOptions PointerFields;
    public static CompressionOptions IntegerFields;
    public static CompressionOptions ArraysRLE;
}
[ComVisibleAttribute("False")]
internal class Microsoft.Tools.MessagePacking.FieldInfo : object {
    public int offset;
    public FieldType type;
    public int structIndex;
    public bool variableLength;
    public int sizeOrIndex;
    public FieldInfo(int offset, FieldType type, int structIndex, bool variableLength, int sizeOrIndex);
}
[ComVisibleAttribute("False")]
internal enum Microsoft.Tools.MessagePacking.FieldType : Enum {
    public int value__;
    public static FieldType Structure;
    public static FieldType Bool;
    public static FieldType Byte;
    public static FieldType Char;
    public static FieldType Short;
    public static FieldType Int;
    public static FieldType Float;
    public static FieldType Long;
    public static FieldType Double;
}
[ComVisibleAttribute("False")]
internal interface Microsoft.Tools.MessagePacking.IMessageMemory {
    public abstract virtual IntPtr Reserve(int numBytes);
    public abstract virtual void Release(IntPtr p, int numBytes);
}
[ComVisibleAttribute("False")]
internal interface Microsoft.Tools.MessagePacking.IMessageMemory2 {
    public abstract virtual IntPtr Alloc(int numBytes);
    public abstract virtual void Free(IntPtr p);
}
[ComVisibleAttribute("False")]
internal interface Microsoft.Tools.MessagePacking.IMessagePartSink {
    public abstract virtual void BeginMessage(string name, int length, short msgID);
    public abstract virtual void BeginStructure(string name);
    public abstract virtual void ByteField(string name, Byte[] theBytes, string lengthFieldName);
    public abstract virtual void BoolField(string name, Boolean[] theBools, string lengthFieldName);
    public abstract virtual void CharField(string name, Char[] theChars, string lengthFieldName);
    public abstract virtual void ShortField(string name, Int16[] theShorts, string lengthFieldName);
    public abstract virtual void IntField(string name, Int32[] theInts, string lengthFieldName);
    public abstract virtual void FloatField(string name, Single[] theFloats, string lengthFieldName);
    public abstract virtual void LongField(string name, Int64[] theLongs, string lengthFieldName);
    public abstract virtual void DoubleField(string name, Double[] theDoubles, string lengthFieldName);
    public abstract virtual void BeginStructureField(string fieldName, string structName, int length, string lengthFieldName);
    public abstract virtual void EndStructureField(string name, int length);
    public abstract virtual void EndStructure(string name);
    public abstract virtual void EndMessage(string name);
}
[ComVisibleAttribute("False")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Tools.MessagePacking.MessageInfo : object {
    public FieldType messageLengthType;
    public FieldType messageIDType;
    public Type enumType;
    public Int32[] msr;
    public StructureInfo[] si;
    public Guid schemaID;
    public CompressionOptions compressionOptions;
    public UInt32 extensionLevel;
    public bool unpackOnly;
    public MessageInfo(FieldType messageLengthType, FieldType messageIDType, Type enumType, Int32[] msr, StructureInfo[] si, Guid schemaID, CompressionOptions compressionOptions, UInt32 extensionLevel, bool unpackOnly);
    public Byte[] ToByteArray();
    public static MessageInfo FromByteArray(Byte[] bytes);
    public void ToStream(Stream stream);
    public static MessageInfo FromStream(Stream stream);
}
internal class Microsoft.Tools.MessagePacking.MessageMemoryByteArray : object {
    private Dictionary`2<IntPtr, GCHandle> _handles;
    public sealed virtual IntPtr Alloc(int numBytes);
    public sealed virtual void Free(IntPtr p);
    public Byte[] Release(IntPtr p);
}
[DebuggerNonUserCodeAttribute]
internal abstract class Microsoft.Tools.MessagePacking.MessagePacker : object {
    public static int BinaryProtocolVersion;
    private static int _Pointer_Size_If_Compression;
    private static Int32[] fieldTypeSize;
    public MessageInfo MsgInfo { get; }
    private static MessagePacker();
    public abstract virtual MessageInfo get_MsgInfo();
    public static int CalcHeaderLength(MessageInfo mi);
    public static int CalcCompressedHeaderLength(MessageInfo mi, int dataLen, short messageID);
    public static int CalcCompressedHeaderLength(MessageInfo mi, Stream stream);
    public static int GetMessageLength(MessageInfo mi, Byte[] msg, bool swapBytes);
    public static int GetMessageLength(MessageInfo mi, Byte* pMsg, bool swapBytes);
    public static short GetMessageID(MessageInfo mi, Byte[] msg, bool swapBytes);
    public static short GetMessageID(MessageInfo mi, Byte* pMsg, bool swapBytes);
    public static bool ReadMessageHeader(MessageInfo mi, Stream stream, bool swapBytes, Int32& length, Int16& id);
    public static int ReadMessage(MessageInfo mi, Stream stream, bool swapBytes, Byte[]& buffer);
    public static Byte[] ReadMessage(MessageInfo mi, Stream stream, bool swapBytes);
    public static Byte* PackMessage(MessageInfo mi, short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public static void WriteHeader(MessageInfo mi, int msgLen, short msgID, Byte* pMsg);
    public static void PackMessage(MessageInfo mi, short msgID, Byte* pData, IMessageMemory memory);
    public static Byte* UnpackMessage(MessageInfo mi, Byte* pMsg, bool swapBytes);
    public static Byte* UnpackMessage(MessageInfo mi, Byte* pMsg, IMessageMemory2 memory, bool swapBytes);
    private static int ReadHeader(MessageInfo mi, Byte* pMsg, bool swapBytes, Int32& messageLength, Int16& messageID);
    private static void PackHeader(MessageInfo mi, Byte* pMsg, int totalLen, short msgID);
    private static int GetMessageRootStructure(MessageInfo mi, short msgID);
    private static int CalcPackedSize(MessageInfo mi, int structIndex, Void* pStruct);
    private static int RecurCalcPackedSize(MessageInfo mi, StructureInfo si, Byte* pStruct);
    private static int Pack(MessageInfo mi, int structIndex, Byte* pStruct, Byte* pFix);
    private static int RecurPack(MessageInfo mi, StructureInfo si, Byte* pStruct, Byte* pFix, Byte* pVar, Byte* pBase);
    private static Byte* Unpack(MessageInfo mi, int structIndex, Byte* pFix, bool swapBytes);
    private static void RecurUnpack(MessageInfo mi, StructureInfo si, Byte* pStruct, Byte* pBase, bool swapBytes);
    public static void Pack1(Byte* pF, Byte* pT);
    public static void Pack1(Byte* pF, Byte* pT, int size);
    public static void Pack2(Byte* pF, Byte* pT);
    public static void Pack2(Byte* pF, Byte* pT, int size);
    public static void Pack4(Byte* pF, Byte* pT);
    public static void Pack4(Byte* pF, Byte* pT, int size);
    public static void Pack8(Byte* pF, Byte* pT);
    public static void Pack8(Byte* pF, Byte* pT, int size);
    public static int PackP4(UInt32 n, Byte* pT);
    public static void PackAddr(Byte* pB, Byte* pA, Byte* pT);
    public static void Swap(Byte* pF, Byte* pT);
    public static void Unpack1(Byte* pT);
    public static void Unpack2(Byte* pT);
    public static void Unpack4(Byte* pT);
    public static void Unpack8(Byte* pT);
    public static int UnpackP4(UInt32& n, Byte* pB);
    public static void UnpackAddr(Byte* pB, Byte* pA, bool swapBytes);
    public static int GetPackP4Size(UInt32 n);
    private static void CompressHeader(MessageInfo mi, Byte* pCompressedData, UInt32 totalLen, short msgID);
    private static int CalcCompressedSize(MessageInfo mi, int structIndex, Byte* pStruct);
    private static int RecurCalcCompressedSize(MessageInfo mi, StructureInfo si, bool includeSiSize, Byte*& pStruct);
    private static void Compress(MessageInfo mi, int structIndex, Byte* pStruct, Byte* pCompressedStruct);
    private static void RecurCompress(MessageInfo mi, StructureInfo si, Byte*& pStruct, Byte*& pCompressedStruct);
    private static Byte* Decompress(MessageInfo mi, int structIndex, Byte* pCompressedMsg, int compressedMsgLen, int compressedHeaderLen, IMessageMemory2 memory, bool swapBytes);
    private static void RecurDecompress(MessageInfo mi, StructureInfo si, bool swapBytes, Byte*& pCompressedStruct, Byte*& pStruct, Byte*& pVar, bool skipUnpack);
    private static int CalcDecompressedSize(MessageInfo mi, StructureInfo si, bool swapBytes, Byte* pCompressedStruct);
    private static int RecurCalcDecompressedSize(MessageInfo mi, StructureInfo si, bool includeSiSize, bool swapBytes, Byte*& pCompressedStruct);
    private static void CopyAndSwap(Byte*& pSrc, Byte*& pDest, FieldType ft, int count, bool swapBytes);
    private static int RecurDumpCompressedStructure(MessageInfo mi, IMessagePartSink sink, StructureInfo si, Byte* pStruct, bool swapBytes);
    public static int GetFieldTypeSize(FieldType type);
    public static void DumpMessage(MessageInfo mi, IMessagePartSink sink, Byte[] msg, bool swapBytes);
    public static void DumpMessage(MessageInfo mi, IMessagePartSink sink, Byte* pMsg, bool swapBytes);
    private static void DumpStructure(MessageInfo mi, IMessagePartSink sink, int structIndex, Void* pFix, bool swapBytes);
    private static void RecurDumpStructure(MessageInfo mi, IMessagePartSink sink, StructureInfo si, Byte* pStruct, bool swapBytes);
    private static void DumpField(MessageInfo mi, IMessagePartSink sink, string name, FieldType type, int size, int structIndex, string lengthFieldName, bool swapBytes, Byte*& pData);
    private static bool CompressingHeaders(MessageInfo mi);
    private static bool CompressingPointers(MessageInfo mi);
    private static bool CompressingUnsupported(MessageInfo mi);
    private static int UnpackInt(MessageInfo mi, bool swapBytes, Byte* pData);
    private static int LocalFixedPartSize(StructureInfo si);
    public static MessageInfo MergeMessageInfo(MessageInfo origin, MessageInfo target);
    private static StructureInfo AdjustStructInfo(StructureInfo origin_si, StructureInfo target_si);
    private static FieldInfo AdjustFieldInfo(FieldInfo origin_fi, FieldInfo target_fi);
}
internal class Microsoft.Tools.MessagePacking.MessagePackerMessageMemory : object {
    private sealed virtual override IntPtr Microsoft.Tools.MessagePacking.IMessageMemory2.Alloc(int numBytes);
    private sealed virtual override void Microsoft.Tools.MessagePacking.IMessageMemory2.Free(IntPtr pMem);
}
internal class Microsoft.Tools.MessagePacking.MsgHandle : ValueType {
    [CompilerGeneratedAttribute]
private Byte* <p>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageMemory2 <msgMem>k__BackingField;
    public Byte* p { get; private set; }
    public IMessageMemory2 msgMem { get; private set; }
    public MsgHandle(Byte* p_, IMessageMemory2 msgMem_);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Byte* get_p();
    [CompilerGeneratedAttribute]
private void set_p(Byte* value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IMessageMemory2 get_msgMem();
    [CompilerGeneratedAttribute]
private void set_msgMem(IMessageMemory2 value);
    public static Byte* op_Explicit(MsgHandle h);
    public static Void* op_Explicit(MsgHandle h);
    public static IntPtr op_Explicit(MsgHandle h);
    public sealed virtual void Dispose();
}
[ComVisibleAttribute("False")]
[FlagsAttribute]
internal enum Microsoft.Tools.MessagePacking.PointerSize : Enum {
    public int value__;
    public static PointerSize Size32;
    public static PointerSize Size64;
}
[ComVisibleAttribute("False")]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Tools.MessagePacking.StructureInfo : object {
    public Type type;
    public StructureInitializer structInitializer;
    public int fixedPartSize;
    public FieldInfo[] fi;
    public StructureInfo(Type type, StructureInitializer structInitializer, int fixedPartSize, FieldInfo[] fi);
}
internal class Microsoft.Tools.MessagePacking.StructureInitializer : MulticastDelegate {
    public StructureInitializer(object object, IntPtr method);
    public virtual void Invoke(Void* pStruct, UInt32 extensionLevel);
    public virtual IAsyncResult BeginInvoke(Void* pStruct, UInt32 extensionLevel, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.QualityTools.LoadTest.Engine.Results.LoadTestControllerRestartInfo : object {
    [CompilerGeneratedAttribute]
private List`1<LoadTestCounterCategoryDefinition> <CounterCategoryDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, LoadTestPerformanceCounter>> <CounterInstances>k__BackingField;
    [CompilerGeneratedAttribute]
private WebLoadTransactionMap <TransactionMap>k__BackingField;
    [CompilerGeneratedAttribute]
private WebLoadRequestMap <RequestMap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransactionMapEntryIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestMapEntryIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FirstIntervalStartTime>k__BackingField;
    private static string RestartFileName;
    private static object m_lock;
    private static int m_isWriteInProgress;
    public List`1<LoadTestCounterCategoryDefinition> CounterCategoryDefinitions { get; public set; }
    public Dictionary`2<string, Dictionary`2<string, LoadTestPerformanceCounter>> CounterInstances { get; public set; }
    public WebLoadTransactionMap TransactionMap { get; public set; }
    public WebLoadRequestMap RequestMap { get; public set; }
    public int TransactionMapEntryIndex { get; public set; }
    public int RequestMapEntryIndex { get; public set; }
    public DateTime FirstIntervalStartTime { get; public set; }
    private static LoadTestControllerRestartInfo();
    public static void Write(LoadTestControllerRestartInfo restartInfo, string directory);
    public static LoadTestControllerRestartInfo Read(string directory);
    public static void Clear(string directory);
    [CompilerGeneratedAttribute]
public List`1<LoadTestCounterCategoryDefinition> get_CounterCategoryDefinitions();
    [CompilerGeneratedAttribute]
public void set_CounterCategoryDefinitions(List`1<LoadTestCounterCategoryDefinition> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, LoadTestPerformanceCounter>> get_CounterInstances();
    [CompilerGeneratedAttribute]
public void set_CounterInstances(Dictionary`2<string, Dictionary`2<string, LoadTestPerformanceCounter>> value);
    [CompilerGeneratedAttribute]
public WebLoadTransactionMap get_TransactionMap();
    [CompilerGeneratedAttribute]
public void set_TransactionMap(WebLoadTransactionMap value);
    [CompilerGeneratedAttribute]
public WebLoadRequestMap get_RequestMap();
    [CompilerGeneratedAttribute]
public void set_RequestMap(WebLoadRequestMap value);
    [CompilerGeneratedAttribute]
public int get_TransactionMapEntryIndex();
    [CompilerGeneratedAttribute]
public void set_TransactionMapEntryIndex(int value);
    [CompilerGeneratedAttribute]
public int get_RequestMapEntryIndex();
    [CompilerGeneratedAttribute]
public void set_RequestMapEntryIndex(int value);
    [CompilerGeneratedAttribute]
public DateTime get_FirstIntervalStartTime();
    [CompilerGeneratedAttribute]
public void set_FirstIntervalStartTime(DateTime value);
}
internal enum Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestResultsStoreType : Enum {
    public int value__;
    public static LoadTestResultsStoreType None;
    public static LoadTestResultsStoreType Database;
    public static LoadTestResultsStoreType XmlResultFile;
    public static LoadTestResultsStoreType SQLAzure;
    public static LoadTestResultsStoreType AzureStorage;
    public static LoadTestResultsStoreType CltNoSql;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.AddCommentCallback : MulticastDelegate {
    public AddCommentCallback(object object, IntPtr method);
    public virtual void Invoke(Comment comment);
    public virtual IAsyncResult BeginInvoke(Comment comment, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.AddCorrelationResultCallback : MulticastDelegate {
    public AddCorrelationResultCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestCorrelationResult correlationResult);
    public virtual IAsyncResult BeginInvoke(WebTestCorrelationResult correlationResult, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.AgentDiagnosticsLevel : Enum {
    public int value__;
    public static AgentDiagnosticsLevel None;
    public static AgentDiagnosticsLevel Error;
    public static AgentDiagnosticsLevel Warning;
    public static AgentDiagnosticsLevel Information;
    public static AgentDiagnosticsLevel Verbose;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.AgentErrorInfo : object {
    private int m_maxErrorDetailsToWrite;
    private int m_errorDetailsWritten;
    public int MaxErrorDetailsToWrite { get; public set; }
    public int ErrorDetailsWritten { get; public set; }
    public void set_MaxErrorDetailsToWrite(int value);
    public int get_MaxErrorDetailsToWrite();
    public void set_ErrorDetailsWritten(int value);
    public int get_ErrorDetailsWritten();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.AppDomainAssemblyReflector : object {
    private AppDomain m_appDomain;
    private AssemblyReflector m_reflector;
    private string m_assemblyFile;
    public AppDomainAssemblyReflector(string assemblyFile);
    protected virtual override void Finalize();
    public void LoadAssembly();
    public ArrayList GetClassesThatDeriveFromClass(Type baseClassType);
    public ArrayList GetClassesThatImplementInterface(string interfaceName);
    public bool FindType(string typeName);
    public DeploymentItemCollection GetDeploymentItemsForClass(WebTestClassName webTestClassName);
    public List`1<IncludedWebTest> GetIncludedWebTestsForClass(WebTestClassName webTestClassName);
    public WebTestAssemblyRuleInfo CreateWebTestAssemblyRuleInfo();
    public string GetAttributeData(WebTestClassName webTestClassName, Type attributeType);
    public string GetAttributeData(WebTestClassName webTestClassName, string methodName, Type attributeType);
    public string GetConditionalRuleText(ConditionalRuleReference ruleReference);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.AssemblyReflector : MarshalByRefObject {
    private Assembly m_assembly;
    private List`1<string> m_extractionExcludeProperties;
    private List`1<string> m_defaultExcludeProperties;
    private static Dictionary`2<Type, string> s_dictionaryDefaultValues;
    public void LoadAssembly(string assemblyFile);
    public ArrayList GetClasses(Type baseClassType);
    public ArrayList GetInterfaces(string interfaceName);
    public WebTestAssemblyRuleInfo CreateWebTestAssemblyRuleInfo(string assemblyFile);
    private static RuleReference CreateRuleReference(string assemblyFullName, Type type, List`1<string> excludeProperties);
    internal static string GetDefaultValueForType(Type type);
    public string GetAttributeData(WebTestClassName webTestClassName, string methodName, Type attributeType);
    public string GetAttributeData(WebTestClassName webTestClassName, Type attributeType);
    public bool FindType(string typeName);
    public DeploymentItemCollection GetDeploymentItemsForClass(WebTestClassName webTestClassName);
    public List`1<IncludedWebTest> GetIncludedWebTestsForClass(WebTestClassName webTestClassName);
    public string GetConditionalRuleText(string assemblyPath, ConditionalRuleReference ruleReference);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.AssemblyResolver : MarshalByRefObject {
    private string m_directory;
    private Dictionary`2<string, Assembly> m_ResolvedAssemblies;
    public static string AssemblyDirectoryKeyName;
    public string SearchDirectory { get; public set; }
    public AssemblyResolver(string directory);
    private static AssemblyResolver();
    protected virtual override void Finalize();
    private Assembly OnResolve(object senderAppDomain, ResolveEventArgs args);
    private static bool RequestedAssemblyNameMatchesFound(AssemblyName requestedName, AssemblyName foundName);
    public string get_SearchDirectory();
    public void set_SearchDirectory(string value);
    public sealed virtual void Dispose();
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
}
public class Microsoft.VisualStudio.TestTools.WebStress.AutComponent : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AutCounter> <AutCounters>k__BackingField;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public string Id { get; public set; }
    public string Type { get; public set; }
    public string Separator { get; public set; }
    public string Version { get; public set; }
    public List`1<AutCounter> AutCounters { get; public set; }
    public AutComponent(AutComponent autComponent);
    public AutComponent(string name);
    public AutComponent(string name, string id);
    public AutComponent(string name, string id, string type);
    public AutComponent(string name, string id, string type, string separator);
    public AutComponent(string name, string id, string type, string separator, string version);
    public AutComponent(string name, string id, string type, string separator, string version, string description);
    protected bool Equals(AutComponent other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public List`1<AutCounter> get_AutCounters();
    [CompilerGeneratedAttribute]
public void set_AutCounters(List`1<AutCounter> value);
    public sealed virtual object Clone();
    public virtual bool Equals(object obj);
}
public class Microsoft.VisualStudio.TestTools.WebStress.AutCounter : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    public string Id { get; public set; }
    public string Path { get; public set; }
    public string Description { get; public set; }
    public string Name { get; public set; }
    public bool IsDefault { get; public set; }
    public AutCounter(string id);
    public AutCounter(AutCounter autCounter);
    public AutCounter(string id, string path);
    public AutCounter(string id, string path, string name);
    public AutCounter(string id, string path, string name, string description);
    public AutCounter(string id, string path, string name, string description, bool isDefault);
    protected bool Equals(AutCounter other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    public sealed virtual object Clone();
    public virtual bool Equals(object obj);
}
internal abstract class Microsoft.VisualStudio.TestTools.WebStress.BaseTableCursor : object {
    protected int m_rowCount;
    protected int m_currentRowIndex;
    public int RowCount { get; public set; }
    public int CurrentRow { get; public set; }
    public int get_RowCount();
    public void set_RowCount(int value);
    public virtual int get_CurrentRow();
    public virtual void set_CurrentRow(int value);
    public virtual void NextRow();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.BinaryItemResultWriter : object {
    private bool m_moveTimingDetailsInline;
    private int m_timingDetailsBatchSize;
    private string m_filePath;
    private FileStream m_fileStream;
    private BinaryFormatter m_formatter;
    private WebTestSuite m_suite;
    private int m_logsOrErrorDetailsToWrite;
    private int m_logsOrErrorDetailsWritten;
    private int m_unflushedItems;
    private WebLoadBrowserMap m_browserMap;
    private WebLoadNetworkMap m_networkMap;
    private Queue`1<List`1<LoadTestItemResult>> m_writeQueue;
    private Thread m_writerThread;
    private bool m_closing;
    private AutoResetEvent m_messageQueuedEvent;
    private object m_logsWrittenLock;
    private Action`1<List`1<LoadTestItemResult>> m_writeCallback;
    public bool MaxLogsAlreadyWritten { get; }
    public BinaryItemResultWriter(WebTestSuite suite, string filePath, Action`1<List`1<LoadTestItemResult>> writeCallback);
    public bool get_MaxLogsAlreadyWritten();
    public void Open(FileMode fileMode);
    public void Close();
    public void WriteErrorDetail(WebTestErrorDetailReport errorDetailReport);
    public void ProcessTestCaseResults(ITestCaseVariation testCaseVariation, bool includeTimingDetails, bool inMeasurementInterval);
    private void EnqueueItemResults(List`1<LoadTestItemResult> itemResults);
    private void WriteItemResultsThread();
    private void WriteItemResultsInlineThread();
    private int GetQueueCount();
    private void WriteItemResults(List`1<LoadTestItemResult> itemResults);
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.BrowserTemplateManager : object {
    private static WebTestBrowser s_defaultBrowser;
    private static List`1<WebTestBrowser> s_browsers;
    public static List`1<WebTestBrowser> Browsers { get; }
    public static String[] BrowserNames { get; }
    public static string BrowserTemplateDir { get; }
    public static WebTestBrowser DefaultBrowser { get; }
    private static WebTestBrowser FallbackBrowser { get; }
    private static BrowserTemplateManager();
    public static List`1<WebTestBrowser> get_Browsers();
    public static String[] get_BrowserNames();
    public static string get_BrowserTemplateDir();
    public static WebTestBrowser get_DefaultBrowser();
    private static WebTestBrowser get_FallbackBrowser();
    public static WebTestBrowser GetBrowser(string browserName);
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.ByteArraySerializer : object {
    public static Byte[] ObjectToBytes(object obj);
    public static object BytesToObject(Byte[] bytes);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CassiniManager : object {
    private static CassiniManager modreq(System.Runtime.CompilerServices.IsVolatile) m_singleton;
    private static object m_singletonLock;
    private Dictionary`2<CassiniStartInfo, AspNetHelper> m_runningServers;
    private ReaderWriterLock m_runningServersLock;
    private static int m_infiniteTimeout;
    public static bool Active { get; }
    public static CassiniManager Singleton { get; }
    private static CassiniManager();
    public static bool get_Active();
    public static CassiniManager get_Singleton();
    public string StartCassiniIfNecessaryAndGetUrl(string cassiniBinding);
    public void ShutdownAllServers();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CassiniStartInfo : object {
    private static Regex m_cassingBindingRegex;
    private string m_appRoot;
    private string m_path;
    public static string BindingPrefix { get; }
    public string AppRoot { get; }
    public string Path { get; public set; }
    public CassiniStartInfo(string path, string appRoot);
    public static string get_BindingPrefix();
    public string get_AppRoot();
    public string get_Path();
    public void set_Path(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static CassiniStartInfo Parse(string cassiniBinding);
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.CheapDateTime : object {
    private static TimeSpan s_utcOffset;
    private static bool s_initialized;
    internal static DateTime Now { get; }
    private static CheapDateTime();
    internal static DateTime get_Now();
    internal static void Initialize();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CodedWebTestElement : WebTestElement {
    private WebTest m_webTest;
    private WebTestClassName m_className;
    private List`1<IncludedWebTest> m_includedWebTests;
    private static TestType s_testType;
    [BrowsableAttribute("False")]
public WebTest WebTest { get; }
    public TestType TestType { get; }
    public string HumanReadableId { get; }
    [BrowsableAttribute("False")]
public WebTestClassName WebTestClassName { get; }
    [BrowsableAttribute("False")]
public bool ReadOnly { get; public set; }
    public ITestElement Copy { get; }
    [BrowsableAttribute("False")]
public static TestType CodedWebTestType { get; }
    [ReadOnlyAttribute("True")]
public string Name { get; public set; }
    [ReadOnlyAttribute("True")]
public string Owner { get; public set; }
    [ReadOnlyAttribute("True")]
public string Description { get; public set; }
    [ReadOnlyAttribute("True")]
[PropertyWindowAttribute("0", "3")]
public string CssIteration { get; public set; }
    [ReadOnlyAttribute("True")]
[PropertyWindowAttribute("0", "2")]
public string CssProjectStructure { get; public set; }
    [ReadOnlyAttribute("True")]
public int Priority { get; public set; }
    [ReadOnlyAttribute("True")]
public int Timeout { get; public set; }
    [ReadOnlyAttribute("True")]
public String[] DeploymentItemsEditable { get; public set; }
    [ReadOnlyAttribute("True")]
public string WorkItemIdsViewable { get; }
    [BrowsableAttribute("False")]
public IList WorkItemIds { get; public set; }
    [BrowsableAttribute("False")]
public List`1<IncludedWebTest> IncludedWebTests { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.ElementName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.NamespaceUri { get; }
    public bool RequiresBuild { get; }
    public bool RequiresFullDeployment { get; }
    public List`1<string> ImpliedDependentAssemblies { get; }
    public List`1<DeploymentItem> ImpliedDeploymentItems { get; }
    public CodedWebTestElement(WebTestClassName className);
    public CodedWebTestElement(WebTest webTest);
    private CodedWebTestElement(CodedWebTestElement copy);
    private static CodedWebTestElement();
    public virtual WebTest get_WebTest();
    public virtual TestType get_TestType();
    public virtual string get_HumanReadableId();
    public WebTestClassName get_WebTestClassName();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual object Clone();
    public virtual ITestElement get_Copy();
    public static TestType get_CodedWebTestType();
    public virtual WebTest CreateWebTestInstance();
    public void SetDeploymentItems(DeploymentItemCollection deploymentItems);
    public void SetIncludedWebTests(List`1<IncludedWebTest> includedWebTests);
    public void AddAgentProperty(string key, string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Owner();
    public virtual void set_Owner(string value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_CssIteration();
    public virtual void set_CssIteration(string value);
    public virtual string get_CssProjectStructure();
    public virtual void set_CssProjectStructure(string value);
    public int get_Priority();
    public void set_Priority(int value);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual String[] get_DeploymentItemsEditable();
    public virtual void set_DeploymentItemsEditable(String[] value);
    public virtual string get_WorkItemIdsViewable();
    public IList get_WorkItemIds();
    public void set_WorkItemIds(IList value);
    public virtual List`1<IncludedWebTest> get_IncludedWebTests();
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_ElementName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_NamespaceUri();
    public sealed virtual bool get_RequiresBuild();
    public sealed virtual bool get_RequiresFullDeployment();
    public sealed virtual List`1<string> get_ImpliedDependentAssemblies();
    public sealed virtual List`1<DeploymentItem> get_ImpliedDeploymentItems();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CollapsingDataSeries : DataSeries {
    private DataSeriesElement[] m_buckets;
    private int m_firstFreeBucket;
    private double m_collapsePercentage;
    private CounterSample m_baseSample;
    private CounterSample m_previousSample;
    private int m_sampleRateSeconds;
    private int m_lastUpdateSeconds;
    private int m_skippedSamples;
    private int m_unitsPerNewBucket;
    public int MinX { get; }
    public int MaxX { get; }
    public CollapsingDataSeries(LoadTestStat stat, int sampleRateSeconds, CounterSample baseSample, int capacity, double collapsePercentage, bool isCounterTypeAverage);
    public virtual int get_MinX();
    public virtual int get_MaxX();
    public void AddSample(int elapsedSeconds, CounterSample sample);
    public virtual int PointCount();
    public virtual DataPoint[] Points();
    public virtual DataPoint PointAt(int index);
    private void AddToSeries(CounterSample sample, int elapsedSeconds);
    private void RecomputeValues();
    private void ComputeValue(CounterSample currentSample);
    private void CollapseBuckets();
    private void CompactBuckets();
    private DataSeriesElement ElementAt(int index);
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.Compatibility : object {
    private static CompatibilityLevel _level;
    public static CompatibilityLevel Level { get; }
    private static Compatibility();
    public static CompatibilityLevel get_Level();
    public static WebTestError GetWebTestError(Exception exceptionToReport, bool processInnerException);
    private static WebTestError CreateWebTestError(Exception e);
    private static WebTestError CreateWebTestError(Exception e, bool processInnerException);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CompletionCallbackFinishedDelegate : MulticastDelegate {
    public CompletionCallbackFinishedDelegate(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ComputerTag : object {
    private string m_tag;
    public string Tag { get; public set; }
    public ComputerTag(string tag);
    public ComputerTag(ComputerTag copy);
    public string get_Tag();
    public void set_Tag(string value);
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ConfigurationReader : object {
    public static int GetIntConfigValue(string appSettingName, int defaultValue);
    public static long GetLongConfigValue(string appSettingName, long defaultValue);
    public static bool GetBoolConfigValue(string appSettingName, bool defaultValue);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ConnectionStringValues : object {
    private string m_displayConnectionString;
    private string m_fullConnectionString;
    public string DisplayConnectionString { get; }
    public string FullConnectionString { get; }
    public ConnectionStringValues(string display, string full);
    public ConnectionStringValues(ConnectionStringValues copy);
    public ConnectionStringValues Clone();
    public virtual string ToString();
    public string get_DisplayConnectionString();
    public string get_FullConnectionString();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ContentLengthTrackerStream : Stream {
    private Stream m_wrappedStream;
    private int m_contentLength;
    public int ContentLength { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ContentLengthTrackerStream(Stream sourceStream);
    public int get_ContentLength();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Counter : object {
    private string m_name;
    private int m_range;
    private string m_rangeGroup;
    private bool m_higherIsBetter;
    private List`1<ThresholdRuleReference> m_thresholdRuleReferences;
    public string Name { get; public set; }
    public int Range { get; public set; }
    public string RangeGroup { get; public set; }
    public bool HigherIsBetter { get; public set; }
    public List`1<ThresholdRuleReference> ThresholdRuleReferences { get; }
    public Counter(Counter copy);
    public sealed virtual object Clone();
    public string get_Name();
    public void set_Name(string value);
    public int get_Range();
    public void set_Range(int value);
    public string get_RangeGroup();
    public void set_RangeGroup(string value);
    public bool get_HigherIsBetter();
    public void set_HigherIsBetter(bool value);
    public List`1<ThresholdRuleReference> get_ThresholdRuleReferences();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CounterCategory : object {
    private string m_name;
    private List`1<Counter> m_counters;
    private List`1<CounterInstance> m_instances;
    public string Name { get; public set; }
    public List`1<Counter> Counters { get; public set; }
    public List`1<CounterInstance> Instances { get; public set; }
    internal bool IsLoadTestCounterCategory { get; }
    public CounterCategory(CounterCategory copy);
    public string get_Name();
    public void set_Name(string value);
    public List`1<Counter> get_Counters();
    public void set_Counters(List`1<Counter> value);
    public List`1<CounterInstance> get_Instances();
    public void set_Instances(List`1<CounterInstance> value);
    internal bool ContainsCounter(string counterName);
    internal Counter GetCounter(string counterName);
    internal bool ContainsInstance(string instanceName);
    internal bool get_IsLoadTestCounterCategory();
    internal void Merge(CounterCategory counterSetCategoryToAdd);
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CounterInstance : object {
    private string m_name;
    public string Name { get; public set; }
    public CounterInstance(CounterInstance copy);
    public string get_Name();
    public void set_Name(string value);
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CounterSet : object {
    private string m_name;
    private string m_counterSetType;
    private string m_counterSetLocId;
    private List`1<CounterCategory> m_categoryCollection;
    private List`1<DefaultCounter> m_defaultCounterCollection;
    public string Name { get; public set; }
    public string CounterSetType { get; public set; }
    public string CounterSetLocId { get; public set; }
    public List`1<CounterCategory> Categories { get; public set; }
    public List`1<DefaultCounter> DefaultCounters { get; public set; }
    public CounterSet(CounterSet copy);
    public string get_Name();
    public void set_Name(string value);
    public string get_CounterSetType();
    public void set_CounterSetType(string value);
    public string get_CounterSetLocId();
    public void set_CounterSetLocId(string value);
    public List`1<CounterCategory> get_Categories();
    public void set_Categories(List`1<CounterCategory> value);
    public List`1<DefaultCounter> get_DefaultCounters();
    public void set_DefaultCounters(List`1<DefaultCounter> value);
    public CounterCategory GetCategory(string categoryName);
    public Counter GetCounter(string categoryName, string counterName);
    public void MergeCategory(CounterCategory category);
    public bool IsAutoMappedCounterSet();
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CounterSetMapping : object {
    public static string AGENT_MACHINES_MACRO;
    public static string CONTROLLER_MACHINE_MACRO;
    private List`1<CounterSetReference> m_counterSetReferences;
    private string m_computerName;
    private List`1<ComputerTag> m_computerTags;
    public List`1<CounterSetReference> CounterSetReferences { get; public set; }
    public string ComputerName { get; public set; }
    public List`1<ComputerTag> ComputerTags { get; public set; }
    public string ComputerNameWithTags { get; }
    public CounterSetMapping(List`1<CounterSetReference> counterSetReferences, string computerName);
    public CounterSetMapping(CounterSetMapping copy);
    public List`1<CounterSetReference> get_CounterSetReferences();
    public void set_CounterSetReferences(List`1<CounterSetReference> value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    public List`1<ComputerTag> get_ComputerTags();
    public void set_ComputerTags(List`1<ComputerTag> value);
    public string get_ComputerNameWithTags();
    public sealed virtual object Clone();
    public bool IsAgentMapping();
    public bool IsControllerMapping();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CounterSetReference : object {
    private string m_counterSetName;
    public string CounterSetName { get; public set; }
    public CounterSetReference(string counterSetName);
    public CounterSetReference(CounterSetReference copy);
    public string get_CounterSetName();
    public void set_CounterSetName(string value);
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CounterSetTypes : object {
    public static string Controller;
    public static string Agent;
    public static string LoadTest;
    public static string AspDotNet;
    public static string DotNetApplication;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.CounterWriterCommand : object {
    private CounterWriterCommandType m_commandType;
    private object m_data;
    public CounterWriterCommandType CommandType { get; }
    public object Data { get; }
    public CounterWriterCommand(CounterWriterCommandType commandType, object data);
    public CounterWriterCommandType get_CommandType();
    public object get_Data();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.CounterWriterCommandType : Enum {
    public int value__;
    public static CounterWriterCommandType StartTestRun;
    public static CounterWriterCommandType EndTestRun;
    public static CounterWriterCommandType WriteIntervalData;
    public static CounterWriterCommandType WriteInstanceSummaries;
    public static CounterWriterCommandType WriteError;
    public static CounterWriterCommandType WriteItemResults;
    public static CounterWriterCommandType ImportSqlTrace;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DataBindingAccessDescriptor : object {
    private DataBindingAccessMethod m_accessMethod;
    private int m_uniqueCursorInitialIndex;
    private int m_uniqueCursorIndexIncrement;
    public DataBindingAccessMethod AccessMethod { get; public set; }
    public int UniqueCursorInitialIndex { get; }
    public int UniqueCursorIndexIncrement { get; }
    public DataBindingAccessDescriptor(DataBindingAccessMethod accessMethod, int uniqueCursorInitialIndex, int uniqueCursorIndexIncrement);
    public DataBindingAccessMethod get_AccessMethod();
    public void set_AccessMethod(DataBindingAccessMethod value);
    public int get_UniqueCursorInitialIndex();
    public int get_UniqueCursorIndexIncrement();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DataCaptureStream : Stream {
    private int m_maxCaptureLength;
    private MemoryStream m_captureMemoryStream;
    private Stream m_wrappedStream;
    private Byte[] m_capturedBytes;
    private CaptureState m_captureState;
    private Byte[] m_asyncReadBuffer;
    private int m_asyncReadOffset;
    public Byte[] CapturedData { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DataCaptureStream(Stream wrappedStream, int maxCaptureLength);
    public Byte[] get_CapturedData();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    private static void CloseStreamAndBaseStreams(Stream stream);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void SaveCapturedDataArray();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DataPoint : object {
    private float m_x;
    private float m_y;
    private ThresholdRuleResult m_overallThresholdResult;
    public float X { get; }
    public float Y { get; }
    public ThresholdRuleResult OverallThresholdResult { get; }
    public bool HasThresholdViolation { get; }
    public DataPoint(float x, float y, ThresholdRuleResult thresholdResult);
    public float get_X();
    public float get_Y();
    public ThresholdRuleResult get_OverallThresholdResult();
    public bool get_HasThresholdViolation();
}
internal abstract class Microsoft.VisualStudio.TestTools.WebStress.DataSeries : object {
    private float m_minY;
    private float m_maxY;
    private float m_scale;
    private float m_average;
    private float m_valueCount;
    private float m_sumOfValues;
    private bool m_isCounterTypeAverage;
    protected LoadTestStat m_stat;
    protected int m_capacity;
    protected bool m_scrolled;
    protected bool m_itemAdded;
    protected bool m_replotSeries;
    public static int ScrollingDataSeriesSize;
    public static int ScrollingDataSeriesScrollCount;
    public static int CollapsingDataSeriesSize;
    public static double CollapsingDataSeriesPercent;
    public static int ZoomingDataSeriesSize;
    public int MinX { get; }
    public int MaxX { get; }
    public int Capacity { get; }
    public bool IsCounterTypeAverage { get; }
    public float MinY { get; }
    public float MaxY { get; }
    public float LastY { get; }
    public float Scale { get; }
    public float Average { get; }
    public DataSeries(LoadTestStat stat, int capacity, bool isCounterTypeAverage);
    public abstract virtual int get_MinX();
    public abstract virtual int get_MaxX();
    public abstract virtual DataPoint PointAt(int index);
    public abstract virtual DataPoint[] Points();
    public abstract virtual int PointCount();
    public int get_Capacity();
    public bool get_IsCounterTypeAverage();
    public float get_MinY();
    public float get_MaxY();
    public float get_LastY();
    public float get_Scale();
    public float get_Average();
    public DataPoint LastPoint();
    public DataSeriesChange GetDataSeriesChange();
    protected virtual void OnMinMaxModeChanged();
    public static float ComputeValueFromSamples(CounterSample sample1, CounterSample sample2);
    protected void ResetMinMaxScaleAverage();
    protected void ComputeMinY(float value);
    protected void ComputeMaxY(float value);
    protected void ComputeScale(float value);
    protected void ComputeAverage(float value);
    protected void ComputeAverage(CounterSample sample1, CounterSample sample2);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.DataSeriesChange : Enum {
    public int value__;
    public static DataSeriesChange None;
    public static DataSeriesChange ReplotSeries;
    public static DataSeriesChange Scrolled;
    public static DataSeriesChange NewPoint;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DataSeriesElement : object {
    private int m_timeUnits;
    private int m_elapsedSeconds;
    private CounterSample m_sample;
    public int TimeUnits { get; }
    public int ElapsedSeconds { get; }
    public CounterSample Sample { get; }
    public DataSeriesElement(CounterSample sample, int elapsedSeconds, int timeUnits);
    public int get_TimeUnits();
    public int get_ElapsedSeconds();
    public CounterSample get_Sample();
    public void Merge(DataSeriesElement element);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DeclarativeWebTestElement : WebTestElement {
    [NonPersistableAttribute]
private DeclarativeWebTest m_webTest;
    private static TestType s_testType;
    [StoreXmlSimpleFieldAttribute("@persistedWebTest")]
private string m_persistedWebTest;
    public WebTest WebTest { get; }
    public DeclarativeWebTest DeclarativeWebTest { get; }
    public TestType TestType { get; }
    public string HumanReadableId { get; }
    [BrowsableAttribute("False")]
public bool ReadOnly { get; public set; }
    public string Description { get; public set; }
    [ReadOnlyAttribute("True")]
public string Name { get; public set; }
    public string Storage { get; public set; }
    public ITestElement Copy { get; }
    public bool CanBeAggregated { get; }
    public static TestType WebTestType { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.ElementName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.NamespaceUri { get; }
    public bool RequiresFullDeployment { get; }
    public bool RequiresBuild { get; }
    public List`1<string> ImpliedDependentAssemblies { get; }
    public List`1<DeploymentItem> ImpliedDeploymentItems { get; }
    [BrowsableAttribute("False")]
public List`1<IncludedWebTest> IncludedWebTests { get; }
    public DeclarativeWebTestElement(DeclarativeWebTest webTest);
    public DeclarativeWebTestElement(DeclarativeWebTestElement copy);
    private static DeclarativeWebTestElement();
    public virtual WebTest get_WebTest();
    public DeclarativeWebTest get_DeclarativeWebTest();
    public virtual TestType get_TestType();
    public virtual string get_HumanReadableId();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual string get_Description();
    public virtual void set_Description(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Storage();
    public virtual void set_Storage(string value);
    public virtual ITestElement get_Copy();
    public virtual object Clone();
    public virtual bool get_CanBeAggregated();
    public static TestType get_WebTestType();
    public virtual WebTest CreateWebTestInstance();
    public sealed virtual void PrepareToPersist();
    public sealed virtual void RecoverFromPersistence();
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_ElementName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_NamespaceUri();
    public sealed virtual bool get_RequiresFullDeployment();
    public sealed virtual bool get_RequiresBuild();
    public sealed virtual List`1<string> get_ImpliedDependentAssemblies();
    public sealed virtual List`1<DeploymentItem> get_ImpliedDeploymentItems();
    public virtual List`1<IncludedWebTest> get_IncludedWebTests();
    private void AddClassReference(List`1<string> items, WebTestClassName className);
    private static string FindAssembly(string path, string name);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DefaultConfiguration : object {
    public static int MaxCookieContainerCapacity;
    public static int MaxCookieContainerPerDomainCapacity;
    public static int MaxCookieContainerCookieSize;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DefaultCounter : object {
    private string m_categoryName;
    private string m_counterName;
    private string m_instanceName;
    private string m_graphName;
    private string m_runType;
    public string CategoryName { get; public set; }
    public string CounterName { get; public set; }
    public string InstanceName { get; public set; }
    public string GraphName { get; public set; }
    public string RunType { get; public set; }
    public DefaultCounter(DefaultCounter copy);
    public sealed virtual object Clone();
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CounterName();
    public void set_CounterName(string value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public string get_GraphName();
    public void set_GraphName(string value);
    public string get_RunType();
    public void set_RunType(string value);
    public LoadTestCounterDescriptor CreateCounterDescriptor(string machineName);
}
public class Microsoft.VisualStudio.TestTools.WebStress.DefaultValues : object {
    public static int SampleRate;
    public static int MinSampleRate;
    public static int MaxSampleRate;
    public static int MinRunDuration;
    public static string MinRunDurationInHHMMSS;
    public static bool IPSwitching;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DetailGraphOptions : object {
    [CompilerGeneratedAttribute]
private LoadTestDetailResultType <DetailType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, FilterItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LoadTestMessageType> <ErrorTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <SelectedMessageTypeIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ErrorColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LogsColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterSuccessfulResults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterResultsWithoutLogs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HighLightErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HighLightLogs>k__BackingField;
    public LoadTestDetailResultType DetailType { get; public set; }
    public Dictionary`2<int, FilterItem> Items { get; public set; }
    public List`1<LoadTestMessageType> ErrorTypes { get; public set; }
    public List`1<int> SelectedMessageTypeIds { get; public set; }
    public Color ErrorColor { get; public set; }
    public Color LogsColor { get; public set; }
    public bool FilterSuccessfulResults { get; public set; }
    public bool FilterResultsWithoutLogs { get; public set; }
    public bool HighLightErrors { get; public set; }
    public bool HighLightLogs { get; public set; }
    public DetailGraphOptions(LoadTestDetailResultType detailType, List`1<LoadTestDetailIdentifier> ids, List`1<LoadTestMessageType> errorTypes);
    [CompilerGeneratedAttribute]
public LoadTestDetailResultType get_DetailType();
    [CompilerGeneratedAttribute]
public void set_DetailType(LoadTestDetailResultType value);
    [CompilerGeneratedAttribute]
public Dictionary`2<int, FilterItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(Dictionary`2<int, FilterItem> value);
    [CompilerGeneratedAttribute]
public List`1<LoadTestMessageType> get_ErrorTypes();
    [CompilerGeneratedAttribute]
public void set_ErrorTypes(List`1<LoadTestMessageType> value);
    [CompilerGeneratedAttribute]
public List`1<int> get_SelectedMessageTypeIds();
    [CompilerGeneratedAttribute]
public void set_SelectedMessageTypeIds(List`1<int> value);
    [CompilerGeneratedAttribute]
public Color get_ErrorColor();
    [CompilerGeneratedAttribute]
public void set_ErrorColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_LogsColor();
    [CompilerGeneratedAttribute]
public void set_LogsColor(Color value);
    [CompilerGeneratedAttribute]
public bool get_FilterSuccessfulResults();
    [CompilerGeneratedAttribute]
public void set_FilterSuccessfulResults(bool value);
    [CompilerGeneratedAttribute]
public bool get_FilterResultsWithoutLogs();
    [CompilerGeneratedAttribute]
public void set_FilterResultsWithoutLogs(bool value);
    [CompilerGeneratedAttribute]
public bool get_HighLightErrors();
    [CompilerGeneratedAttribute]
public void set_HighLightErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_HighLightLogs();
    [CompilerGeneratedAttribute]
public void set_HighLightLogs(bool value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.DeterministicWeightedCollection : object {
    private object m_lock;
    private double m_totalWeight;
    private int m_totalUseCount;
    private Dictionary`2<object, DeterministicWeightedCollectionItem> m_itemsByObject;
    public int Count { get; }
    public double TotalWeight { get; }
    public int get_Count();
    public double get_TotalWeight();
    public void Add(object o, double weight);
    public bool Remove(object o);
    public object Select();
    public void Release(object o);
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.EngineSettings : object {
    private static string c_hardcodedDefaultBrowserTemplateName;
    private static string s_defaultBrowserTemplateName;
    private static object s_defaultBrowserTemplateNameLock;
    private static string s_ieAcceptLanguage;
    private static object s_ieAcceptLanguageLock;
    private static IWebProxy s_autoWebProxy;
    private static object s_autoWebProxyLock;
    public static string DefaultBrowserTemplateName { get; }
    public static string IEAcceptLanguage { get; }
    public static IWebProxy AutoWebProxy { get; }
    private static EngineSettings();
    public static string get_DefaultBrowserTemplateName();
    public static string get_IEAcceptLanguage();
    public static IWebProxy get_AutoWebProxy();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ErrorRollupCounter : object {
    private int m_count;
    private WebTestError m_error;
    public WebTestError Error { get; public set; }
    public int Count { get; public set; }
    public ErrorRollupCounter(WebTestError error, int count);
    public WebTestError get_Error();
    public void set_Error(WebTestError value);
    public int get_Count();
    public void set_Count(int value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.ErrorRollupCounterCollection : CollectionBase {
    public ErrorRollupCounter Item { get; }
    public int Add(ErrorRollupCounter instance);
    public void Insert(int index, ErrorRollupCounter instance);
    public int IndexOf(ErrorRollupCounter instance);
    public void Remove(ErrorRollupCounter instance);
    public ErrorRollupCounter get_Item(int index);
    public bool Contains(ErrorRollupCounter instance);
    public void CopyTo(ErrorRollupCounter[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ExceptionCallback : MulticastDelegate {
    public ExceptionCallback(object object, IntPtr method);
    public virtual void Invoke(Exception exception, string testName);
    public virtual IAsyncResult BeginInvoke(Exception exception, string testName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ExportImportFileDescriptor : object {
    private string m_filename;
    private long m_filesize;
    public string Filename { get; }
    public long Filesize { get; }
    public ExportImportFileDescriptor(string filename, long filesize);
    public string get_Filename();
    public long get_Filesize();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.FilterItem : object {
    private TestDetailDescriptor m_descriptor;
    private LoadTestDetailIdentifier m_identifier;
    private bool m_filtered;
    public LoadTestDetailIdentifier Identifier { get; }
    public bool IsFiltered { get; public set; }
    public TestDetailDescriptor Descriptor { get; public set; }
    public FilterItem(LoadTestDetailIdentifier identifier);
    public LoadTestDetailIdentifier get_Identifier();
    public bool get_IsFiltered();
    public void set_IsFiltered(bool value);
    public TestDetailDescriptor get_Descriptor();
    public void set_Descriptor(TestDetailDescriptor value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.GenericTestCaseVariation : object {
    private ITestElement m_testElement;
    private GenericLoadTestRunContext m_runContext;
    private TestResult m_result;
    private Exception m_exception;
    private SaveResultOption m_saveResultOption;
    private int m_testIteration;
    private bool m_isInitializeTest;
    private bool m_isTerminateTest;
    private LoadTestUserContext m_loadTestUserContext;
    private string m_scenarioName;
    private DateTime m_startTime;
    private DateTime m_endTime;
    private LoadTestThreadPool m_threadPool;
    private object m_callerState;
    private IDictionary`2<string, object> m_contextProperties;
    private AsyncCallback m_completionCallback;
    private AsyncTestCaseResult m_asyncResult;
    public object CallerState { get; }
    public string ScenarioName { get; }
    public ITestElement Test { get; }
    public bool IsInitializeTest { get; public set; }
    public bool IsTerminateTest { get; public set; }
    public LoadTestUserContext LoadTestUserContext { get; public set; }
    public string TestCaseName { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public Dictionary`2<string, LoadTestMessageType> MessageTypes { get; }
    public TestResult Result { get; public set; }
    public SaveResultOption SaveResultOption { get; public set; }
    public bool SaveResult { get; }
    public int TestIteration { get; public set; }
    public Exception Exception { get; }
    public GenericTestCaseVariation(ITestElement testElement, int testIteration, string scenarioName, LoadTestThreadPool threadPool);
    public object get_CallerState();
    public sealed virtual string get_ScenarioName();
    public sealed virtual ITestElement get_Test();
    public sealed virtual bool get_IsInitializeTest();
    public sealed virtual void set_IsInitializeTest(bool value);
    public sealed virtual bool get_IsTerminateTest();
    public sealed virtual void set_IsTerminateTest(bool value);
    public sealed virtual LoadTestUserContext get_LoadTestUserContext();
    public sealed virtual void set_LoadTestUserContext(LoadTestUserContext value);
    public sealed virtual string get_TestCaseName();
    public sealed virtual DateTime get_StartTime();
    public sealed virtual DateTime get_EndTime();
    public sealed virtual Dictionary`2<string, LoadTestMessageType> get_MessageTypes();
    public sealed virtual TestResult get_Result();
    public void set_Result(TestResult value);
    public sealed virtual void set_SaveResultOption(SaveResultOption value);
    public sealed virtual SaveResultOption get_SaveResultOption();
    public sealed virtual bool get_SaveResult();
    public sealed virtual void set_TestIteration(int value);
    public sealed virtual int get_TestIteration();
    public sealed virtual Exception get_Exception();
    public sealed virtual void Run();
    public sealed virtual IAsyncResult Run(AsyncCallback completionCallback, object callerState, IDictionary`2<string, object> contextProperties);
    private static void RunVariationCallback(object callerState);
    private void RunVariation();
    private TestResult CreateErrorResult(Exception e);
}
public class Microsoft.VisualStudio.TestTools.WebStress.GeoLocation : object {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Percentage>k__BackingField;
    public static string DefaultGeoLocation;
    public string Location { get; public set; }
    public int Percentage { get; public set; }
    public GeoLocation(GeoLocation geoLocation);
    public GeoLocation(string location);
    public GeoLocation(string location, int percentage);
    private static GeoLocation();
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(string value);
    [CompilerGeneratedAttribute]
public int get_Percentage();
    [CompilerGeneratedAttribute]
public void set_Percentage(int value);
    public sealed virtual object Clone();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    protected bool Equals(GeoLocation other);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.GoalProfileData : object {
    private LoadTestGoalBasedLoadProfile m_goalProfile;
    private LoadTestScenario m_loadTestScenario;
    private bool m_isGoalBasedOnLoadTestCounter;
    private LoadTestCounterDefinition m_loadTestCounterDefinition;
    private LoadTestPerformanceCounterReporter m_perfCounterReporter;
    private PerformanceCounter m_performanceCounter;
    private CounterSample m_previousSample;
    private TimeSpan m_goalSamplingTimeSpan;
    private DateTime m_timeForNextSample;
    private DateTime m_startTime;
    public LoadTestGoalBasedLoadProfile GoalProfile { get; public set; }
    public LoadTestScenario Scenario { get; }
    public DateTime TimeForNextSample { get; }
    public bool IsGoalBasedOnLoadTestCounter { get; }
    public GoalProfileData(LoadTestGoalBasedLoadProfile goalProfile, int goalSamplingInterval, LoadTestCounterDefinition loadTestCounterDefinition, LoadTestPerformanceCounterReporter perfCounterReporter);
    public GoalProfileData(LoadTestGoalBasedLoadProfile goalProfile, int goalSamplingInterval, PerformanceCounter performanceCounter);
    private GoalProfileData(LoadTestGoalBasedLoadProfile goalProfile, int goalSamplingInterval, bool isGoalBasedOnLoadTestCounter);
    public void set_GoalProfile(LoadTestGoalBasedLoadProfile value);
    public LoadTestGoalBasedLoadProfile get_GoalProfile();
    public LoadTestScenario get_Scenario();
    public DateTime get_TimeForNextSample();
    public float GetNextComputedValue();
    public bool get_IsGoalBasedOnLoadTestCounter();
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.HelperMethods : object {
    public static int PumpStream(Stream input, Stream output);
    public static Byte[] GetStreamAsByteArray(Stream stream);
    public static string UpdateBindingSites(WebTestCaseContext testCaseContext, string preBoundString);
    public static string GetBindingMacroValue(WebTestCaseContext testCaseContext, string bindingSite);
    public static bool IsExecutingInAsyncMode(IRunContext runContext);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.HttpRequestRangeHeader : object {
    [CompilerGeneratedAttribute]
private bool <ValidRangeHeaderValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RangeSpecifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RangeValue> <Ranges>k__BackingField;
    private ISafeRegex rangeValueExpression;
    private ISafeRegex rangeExpression;
    public bool ValidRangeHeaderValue { get; private set; }
    public string RangeSpecifier { get; private set; }
    public IList`1<RangeValue> Ranges { get; private set; }
    public HttpRequestRangeHeader(string rangeHeaderValue);
    public void AddRangeValuesToRequest(HttpWebRequest httpWebRequest);
    private void ProcessHeaderValue(string rangeHeaderValue);
    private void ParseRangeValues(string rangeValues);
    private Nullable`1<long> GetValue(string indexValue);
    private string GetRangeSpecifier(string rangeHeaderValue, String& rangeValues);
    [CompilerGeneratedAttribute]
public bool get_ValidRangeHeaderValue();
    [CompilerGeneratedAttribute]
private void set_ValidRangeHeaderValue(bool value);
    [CompilerGeneratedAttribute]
public string get_RangeSpecifier();
    [CompilerGeneratedAttribute]
private void set_RangeSpecifier(string value);
    [CompilerGeneratedAttribute]
public IList`1<RangeValue> get_Ranges();
    [CompilerGeneratedAttribute]
private void set_Ranges(IList`1<RangeValue> value);
}
internal interface Microsoft.VisualStudio.TestTools.WebStress.IDetailResultProcessor {
    public int Count { get; }
    public bool ReachedMaxNumberOfDetailsToProcess { get; }
    public bool Canceled { get; }
    unknown SqlCommand SqlCommand {public set; }
    public abstract virtual int get_Count();
    public abstract virtual bool get_ReachedMaxNumberOfDetailsToProcess();
    public abstract virtual void Cancel();
    public abstract virtual bool get_Canceled();
    public abstract virtual void set_SqlCommand(SqlCommand value);
    public abstract virtual void ProcessDetail(string resultId, LoadTestDetailResult result);
}
internal interface Microsoft.VisualStudio.TestTools.WebStress.ILoadTestCounterReader {
    public abstract virtual void Open();
    public abstract virtual LoadTestCounterIntervalData ReadIntervalData();
    public abstract virtual void Close();
}
internal interface Microsoft.VisualStudio.TestTools.WebStress.ILoadTestCounterWriter {
    public abstract virtual void Open();
    public abstract virtual void Close();
    public abstract virtual void InitializeTestRun(LoadTestRigInfo rigInfo);
    public abstract virtual void StartTestRun(DateTime startTime);
    public abstract virtual void EndTestRun(TestOutcome outcome);
    public abstract virtual void WriteIntervalData(LoadTestCounterIntervalData intervalData);
    public abstract virtual void WriteInstanceSummaries(List`1<InstanceSummaryBuilder> instanceSummaryBuilders);
    public abstract virtual void WriteError(WebTestErrorReport errorReport);
    public abstract virtual void WriteItemResults(LoadTestItemResultReport itemResultReport);
    public abstract virtual void ImportSqlTrace(LoadTestSqlTracer sqlTracer);
}
internal interface Microsoft.VisualStudio.TestTools.WebStress.ILoadTestTabularDataReader {
    public DataColumnCollection Columns { get; }
    public string TimestampColumnName { get; }
    public string DurationColumnName { get; }
    public List`1<string> IndexColumnNames { get; }
    public int RowCount { get; }
    public abstract virtual DataColumnCollection get_Columns();
    public abstract virtual string get_TimestampColumnName();
    public abstract virtual string get_DurationColumnName();
    public abstract virtual List`1<string> get_IndexColumnNames();
    public abstract virtual int get_RowCount();
    public abstract virtual DataRow GetNextRow();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ImportSchemaInfo : object {
    private String[] m_loadTestRunTableNames;
    private String[] m_createImportTableCommands;
    private String[] m_insertFromImportTableCommands;
    private string m_createLoadTestRunCommand;
    private string m_getDataCollectorLogCommand;
    private static String[] s_schemaRev1TableNames;
    private static String[] s_schema4CharBcpTableNames;
    private static String[] s_schemaRev3TableNames;
    private static String[] s_schemaRev4TableNames;
    private static String[] s_schemaRev1ImportTableCommands;
    private static String[] s_schemaRev3ImportTableCommands;
    private static String[] s_schemaRev1InsertFromImportTableCommands;
    private static String[] s_schemaRev3InsertFromImportTableCommands;
    private static string s_insertLoadTestRun1;
    private static string s_insertLoadTestRun2;
    private static string s_insertLoadTestCase1;
    private static string s_insertLoadTestCase2;
    private static string s_insertLoadTestMessage1;
    private static string s_insertLoadTestMessage2;
    private static string s_insertLoadTestThresholdMessage1;
    private static string s_insertLoadTestPerformanceCounter1;
    private static string s_insertLoadTestPerformanceCounter2;
    private static string s_insertLoadTestPerformanceCounterCategory1;
    private static string s_insertLoadTestPerformanceCounterInstance1;
    private static string s_insertLoadTestPerformanceCounterSample1;
    private static string s_insertLoadTestRunAgent1;
    private static string s_insertLoadTestRunInterval1;
    private static string s_insertLoadTestScenario1;
    private static string s_insertWebLoadTestErrorDetail1;
    private static string s_insertWebLoadTestRequestMap1;
    private static string s_insertWebLoadTestRequestMap2;
    private static string s_insertWebLoadTestTransaction1;
    private static string s_insertWebLoadTestTransaction2;
    private static string s_insertLoadTestSqlTrace1;
    private static string s_insertLoadTestBrowsers1;
    private static string s_insertLoadTestNetworks1;
    private static string s_insertLoadTestTestDetail1;
    private static string s_insertLoadTestTestDetail2;
    private static string s_insertLoadTestPageDetail1;
    private static string s_insertLoadTestPageDetail2;
    private static string s_insertLoadTestTransactionDetail1;
    private static string s_insertLoadTestTransactionDetail2;
    private static string s_insertLoadTestTestSummaryData1;
    private static string s_insertLoadTestTestSummaryData2;
    private static string s_insertLoadTestTransactionSummaryData1;
    private static string s_insertLoadTestTransactionSummaryData2;
    private static string s_insertLoadTestPageSummaryData1;
    private static string s_insertLoadTestPageSummaryData2;
    private static string s_insertLoadTestPageSummaryByNetwork1;
    private static string s_insertLoadTestPageSummaryByNetwork2;
    private static string s_insertLoadTestTestLog2;
    private static string s_insertLoadTestSystemUnderTest2;
    private static string s_insertLoadTestSystemUnderTestTag2;
    private static string s_insertLoadTestMessageType2;
    private static string s_insertLoadTestDetailMessage2;
    private static string s_insertLoadTestDataCollectorLog2;
    private static string s_insertLoadTestFileAttachment2;
    private static string s_insertLoadTestFileAttachmentChunk2;
    private static string s_createImportLoadTestRun1;
    private static string s_createImportLoadTestRun3;
    private static string s_createImportLoadTestCase1;
    private static string s_createImportLoadTestCase2;
    private static string s_createImportLoadTestMessage1;
    private static string s_createImportLoadTestMessage2;
    private static string s_createImportLoadTestThresholdMessage1;
    private static string s_createImportLoadTestPerformanceCounter1;
    private static string s_createImportLoadTestPerformanceCounter2;
    private static string s_createImportLoadTestPerformanceCounterCategory1;
    private static string s_createImportLoadTestPerformanceCounterInstance1;
    private static string s_createImportLoadTestPerformanceCounterSample1;
    private static string s_createImportLoadTestRunAgent1;
    private static string s_createImportLoadTestRunInterval1;
    private static string s_createImportLoadTestScenario1;
    private static string s_createImportWebLoadTestErrorDetail1;
    private static string s_createImportWebLoadTestRequestMap1;
    private static string s_createImportWebLoadTestRequestMap2;
    private static string s_createImportWebLoadTestTransaction1;
    private static string s_createImportWebLoadTestTransaction2;
    private static string s_createImportLoadTestSqlTrace1;
    private static string s_createImportLoadTestBrowsers1;
    private static string s_createImportLoadTestNetworks1;
    private static string s_createImportLoadTestTestDetail1;
    private static string s_createImportLoadTestTestDetail2;
    private static string s_createImportLoadTestPageDetail1;
    private static string s_createImportLoadTestPageDetail2;
    private static string s_createImportLoadTestTransactionDetail1;
    private static string s_createImportLoadTestTransactionDetail2;
    private static string s_createImportLoadTestTestSummaryData1;
    private static string s_createImportLoadTestTestSummaryData2;
    private static string s_createImportLoadTestTransactionSummaryData1;
    private static string s_createImportLoadTestTransactionSummaryData2;
    private static string s_createImportLoadTestPageSummaryData1;
    private static string s_createImportLoadTestPageSummaryData2;
    private static string s_createImportLoadTestPageSummaryByNetwork1;
    private static string s_createImportLoadTestPageSummaryByNetwork2;
    private static string s_createImportLoadTestTestLog2;
    private static string s_createLoadTestSystemUnderTest2;
    private static string s_createLoadTestSystemUnderTestTag2;
    private static string s_createLoadTestMessageType2;
    private static string s_createLoadTestDetailMessage2;
    private static string s_createImportLoadTestDataCollectorLog2;
    private static string s_createImportLoadTestFileAttachment2;
    private static string s_createImportLoadTestFileAttachmentChunk2;
    private static string s_SQL_GetDataCollectorLogInfo;
    public string CreateLoadTestRunCommand { get; }
    public bool HasDataCollectorLogs { get; }
    public string GetDataCollectorLogCommand { get; }
    public String[] LoadTestRunTableNames { get; }
    public String[] CreateImportTableCommands { get; }
    public String[] InsertFromImportTableCommands { get; }
    public ImportSchemaInfo(int importSchemaRev);
    private static ImportSchemaInfo();
    public string get_CreateLoadTestRunCommand();
    public bool get_HasDataCollectorLogs();
    public string get_GetDataCollectorLogCommand();
    public String[] get_LoadTestRunTableNames();
    public String[] get_CreateImportTableCommands();
    public String[] get_InsertFromImportTableCommands();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.InstanceSummaryBuilder : object {
    private int m_instanceId;
    private bool m_isLoadTestCounter;
    private bool m_subtractWarmupValueForCumulativeValue;
    private CounterSample m_initialSample;
    private CounterSample m_lastSample;
    private CounterSample m_lastSampleBeforeCooldown;
    private CounterSample m_previousSample;
    private ThresholdRuleResult m_overallThresholdRuleResult;
    internal int InstanceId { get; }
    internal CounterSample InitialSample { get; }
    internal CounterSample PreviousSample { get; }
    internal CounterSample LastSample { get; }
    internal bool InstanceExistedBeforeCooldown { get; }
    internal float CumulativeValue { get; }
    internal ThresholdRuleResult OverallThresholdRuleResult { get; internal set; }
    internal InstanceSummaryBuilder(int instanceId, bool isLoadTestCounter);
    internal InstanceSummaryBuilder(int instanceId, bool isLoadTestCounter, bool subtractWarmupValueForCumulativeValue);
    internal void NewSample(CounterSample newSample, bool warmingUp, bool coolingDown);
    internal int get_InstanceId();
    internal CounterSample get_InitialSample();
    internal CounterSample get_PreviousSample();
    internal CounterSample get_LastSample();
    internal bool get_InstanceExistedBeforeCooldown();
    internal float get_CumulativeValue();
    internal void set_OverallThresholdRuleResult(ThresholdRuleResult value);
    internal ThresholdRuleResult get_OverallThresholdRuleResult();
}
internal interface Microsoft.VisualStudio.TestTools.WebStress.ITestCaseVariation {
    public string ScenarioName { get; }
    public ITestElement Test { get; }
    public string TestCaseName { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public TestResult Result { get; }
    public int TestIteration { get; public set; }
    public SaveResultOption SaveResultOption { get; public set; }
    public bool SaveResult { get; }
    public Exception Exception { get; }
    public bool IsInitializeTest { get; public set; }
    public bool IsTerminateTest { get; public set; }
    public LoadTestUserContext LoadTestUserContext { get; public set; }
    public Dictionary`2<string, LoadTestMessageType> MessageTypes { get; }
    public abstract virtual string get_ScenarioName();
    public abstract virtual ITestElement get_Test();
    public abstract virtual string get_TestCaseName();
    public abstract virtual DateTime get_StartTime();
    public abstract virtual DateTime get_EndTime();
    public abstract virtual TestResult get_Result();
    public abstract virtual int get_TestIteration();
    public abstract virtual void set_TestIteration(int value);
    public abstract virtual SaveResultOption get_SaveResultOption();
    public abstract virtual void set_SaveResultOption(SaveResultOption value);
    public abstract virtual bool get_SaveResult();
    public abstract virtual Exception get_Exception();
    public abstract virtual bool get_IsInitializeTest();
    public abstract virtual void set_IsInitializeTest(bool value);
    public abstract virtual bool get_IsTerminateTest();
    public abstract virtual void set_IsTerminateTest(bool value);
    public abstract virtual LoadTestUserContext get_LoadTestUserContext();
    public abstract virtual void set_LoadTestUserContext(LoadTestUserContext value);
    public abstract virtual Dictionary`2<string, LoadTestMessageType> get_MessageTypes();
    public abstract virtual void Run();
    public abstract virtual IAsyncResult Run(AsyncCallback completionCallback, object callerState, IDictionary`2<string, object> contextProperties);
}
internal interface Microsoft.VisualStudio.TestTools.WebStress.ITestMixSelector {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void Add(ITestElement testElement, decimal frequency);
    public abstract virtual bool Remove(ITestElement testElement);
    public abstract virtual TimeSpan GetDelay(LoadTestUserContext userContext);
    public abstract virtual ITestElement Select(LoadTestUserContext userContext);
    public abstract virtual void TestComplete(LoadTestUserContext userContext, ITestElement testElement, TestIterationResult iterationResult);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.IThresholdRuleCollection : CollectionBase {
    public IThresholdRule Item { get; }
    public int Add(IThresholdRule instance);
    public void Insert(int index, IThresholdRule instance);
    public int IndexOf(IThresholdRule instance);
    public void Remove(IThresholdRule instance);
    public IThresholdRule get_Item(int index);
    public bool Contains(IThresholdRule instance);
    public void CopyTo(IThresholdRule[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LicenseHandler : object {
    [CompilerGeneratedAttribute]
private bool <IsLicensedForLoadTest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLicensedForAllLoadTestFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private LoadTestFeature <AvailableFeatures>k__BackingField;
    public bool IsLicensedForLoadTest { get; private set; }
    public bool IsLicensedForAllLoadTestFeatures { get; private set; }
    public LoadTestFeature AvailableFeatures { get; private set; }
    private void InitializeLoadTestLicenseInfo();
    private void UpdateLicensingInformation(IVsClientRights clientRights);
    [CompilerGeneratedAttribute]
public bool get_IsLicensedForLoadTest();
    [CompilerGeneratedAttribute]
private void set_IsLicensedForLoadTest(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLicensedForAllLoadTestFeatures();
    [CompilerGeneratedAttribute]
private void set_IsLicensedForAllLoadTestFeatures(bool value);
    [CompilerGeneratedAttribute]
public LoadTestFeature get_AvailableFeatures();
    [CompilerGeneratedAttribute]
private void set_AvailableFeatures(LoadTestFeature value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LimitedQueue`1 : Queue`1<T> {
    private static int c_defaultTimeout;
    private int m_maxCapacity;
    private object m_lock;
    private string m_nameForLogging;
    private AutoResetEvent m_queuedEvent;
    private AutoResetEvent m_queueNotFullEvent;
    private WebLoadStatistic m_timeOnQueueStatistic;
    public LimitedQueue`1(int maxCapacity);
    public LimitedQueue`1(int maxCapacity, string nameForLogging);
    public void EnqueueLimited(T item);
    public void EnqueueLimited(T item, int timeoutInMilliseconds, bool enqueueAfterTimeout);
    public T DequeueLimited();
    public void ReportStatistics();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LimitingTableDescriptor : object {
    private WebTestTableBinding m_tableBinding;
    private int m_rowCount;
    public WebTestTableBinding TableBinding { get; }
    public int RowCount { get; }
    public DataBindingAccessMethod AccessMethod { get; }
    public LimitingTableDescriptor(WebTestTableBinding tableBinding, int rowCount);
    public WebTestTableBinding get_TableBinding();
    public int get_RowCount();
    public DataBindingAccessMethod get_AccessMethod();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestAdapterCommand : object {
    private LoadTestAdapterCommandType m_commandType;
    private object m_data;
    private string m_scenarioName;
    public LoadTestAdapterCommandType CommandType { get; }
    public object Data { get; }
    public string ScenarioName { get; }
    public LoadTestAdapterCommand(LoadTestAdapterCommandType commandType);
    public LoadTestAdapterCommand(LoadTestAdapterCommandType commandType, object data);
    public LoadTestAdapterCommand(LoadTestAdapterCommandType commandType, object data, string scenarioName);
    public LoadTestAdapterCommandType get_CommandType();
    public object get_Data();
    public string get_ScenarioName();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestAdapterCommandType : Enum {
    public int value__;
    public static LoadTestAdapterCommandType AdjustLoad;
    public static LoadTestAdapterCommandType ReportThresholdViolation;
    public static LoadTestAdapterCommandType ChangeLoadProfile;
    public static LoadTestAdapterCommandType ChangeDelayBetweenIterations;
    public static LoadTestAdapterCommandType SetLoadTestFeatures;
    public static LoadTestAdapterCommandType RigInfoUpdated;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestAgentResultsLateException : LoadTestException {
    public LoadTestAgentResultsLateException(string message);
    public LoadTestAgentResultsLateException(string message, Exception innerException);
    protected LoadTestAgentResultsLateException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestConnectStringMissingException : LoadTestException {
    public LoadTestConnectStringMissingException(string message);
    public LoadTestConnectStringMissingException(string message, Exception innerException);
    protected LoadTestConnectStringMissingException(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestConsoleState : object {
    private static string LoadTestRunDescriptorElementName;
    private object m_value;
    public object Value { get; public set; }
    public object get_Value();
    public void set_Value(object value);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestControllerPlugin : object {
    private bool m_initialized;
    private bool m_stopping;
    private IControllerContext m_context;
    private WebTestSuite m_suite;
    private int m_agentCount;
    private String[] m_agentNames;
    private Dictionary`2<string, bool> m_agentsRunning;
    private Dictionary`2<int, RigResultEntry> m_rigResultsTable;
    private Exception m_lastException;
    private object m_exceptionLock;
    private LoadTestResultsCollector m_collector;
    private LimitedQueue`1<TestMessage> m_messageQueue;
    private AutoResetEvent m_messageAvailable;
    private AutoResetEvent m_processingThreadDone;
    private int m_rigResultTimeoutInSecs;
    private TestStateEvent m_testCompletedEvent;
    public sealed virtual void Initialize(IControllerContext testContext);
    public sealed virtual void Cleanup();
    public sealed virtual void TestAgentsReady(String[] agentNames);
    public sealed virtual void MessageSink(TestMessage report);
    public sealed virtual void DeleteTestRun(Guid guidTestRunId, ControllerInformation controllerInformation);
    public void IntervalDataCallback(LoadTestCounterIntervalData intervalData);
    public void StatusCallback(LoadTestRunStatus runStatus);
    private void StartMessageProcessingThread();
    private void MessageProcessingThread();
    private void ProcessMessage(TestMessage msg);
    private static void LogMessage(string logMessagePrefix, TestMessage message);
    private void ProcessSummaryResults(WebLoadIntervalSummaryResults intervalResults);
    private void UpdateRigResults(WebLoadIntervalSummaryResults intervalResults);
    private void ProcessTimedOutRigResults();
    private void ProcessRigResults(RigResultEntry rigEntry);
    private void ProcessAnyOutstandingExeception(bool throwException);
    private void GetCanonicalAgentNames(String[] agentNames);
    public sealed virtual void TestAgentDisconnected(string agentName);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterCategoryData : object {
    private int m_categoryId;
    private string m_machineName;
    private string m_categoryName;
    private long m_startTimeStamp100nSec;
    public int CategoryId { get; }
    public string MachineName { get; }
    public string CategoryName { get; }
    public long StartTimeStamp100nSec { get; internal set; }
    public LoadTestCounterCategoryData(int categoryId, string machineName, string categoryName);
    public int get_CategoryId();
    public string get_MachineName();
    public string get_CategoryName();
    internal void set_StartTimeStamp100nSec(long value);
    public long get_StartTimeStamp100nSec();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterCategoryDataCollection : CollectionBase {
    public LoadTestCounterCategoryData Item { get; }
    public int Add(LoadTestCounterCategoryData instance);
    public void Insert(int index, LoadTestCounterCategoryData instance);
    public int IndexOf(LoadTestCounterCategoryData instance);
    public void Remove(LoadTestCounterCategoryData instance);
    public LoadTestCounterCategoryData get_Item(int index);
    public bool Contains(LoadTestCounterCategoryData instance);
    public void CopyTo(LoadTestCounterCategoryData[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterCategoryDefinition : object {
    private string m_categoryName;
    private List`1<LoadTestCounterDefinition> m_counters;
    public string CategoryName { get; }
    public List`1<LoadTestCounterDefinition> Counters { get; }
    public LoadTestCounterCategoryDefinition(string categoryName);
    public string get_CategoryName();
    public List`1<LoadTestCounterDefinition> get_Counters();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterCategoryNotFoundException : LoadTestException {
    public LoadTestCounterCategoryNotFoundException(string message);
    public LoadTestCounterCategoryNotFoundException(string message, Exception innerException);
    protected LoadTestCounterCategoryNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterCategorySecurityException : LoadTestException {
    public LoadTestCounterCategorySecurityException(string message);
    public LoadTestCounterCategorySecurityException(string message, Exception innerException);
    protected LoadTestCounterCategorySecurityException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterCategoryTimeoutException : LoadTestException {
    public LoadTestCounterCategoryTimeoutException(string message);
    public LoadTestCounterCategoryTimeoutException(string message, Exception innerException);
    protected LoadTestCounterCategoryTimeoutException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterData : object {
    private int m_categoryId;
    private int m_counterId;
    private string m_counterName;
    private bool m_higherIsBetter;
    public int CategoryId { get; }
    public int CounterId { get; }
    public string CounterName { get; }
    public bool HigherIsBetter { get; }
    public LoadTestCounterData(int categoryId, int counterId, string counterName, bool higherIsBetter);
    public int get_CategoryId();
    public int get_CounterId();
    public string get_CounterName();
    public bool get_HigherIsBetter();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterDataCollection : CollectionBase {
    public LoadTestCounterData Item { get; }
    public int Add(LoadTestCounterData instance);
    public void Insert(int index, LoadTestCounterData instance);
    public int IndexOf(LoadTestCounterData instance);
    public void Remove(LoadTestCounterData instance);
    public LoadTestCounterData get_Item(int index);
    public bool Contains(LoadTestCounterData instance);
    public void CopyTo(LoadTestCounterData[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterDefinition : object {
    private string m_categoryName;
    private string m_counterName;
    private string m_counterHelp;
    private PerformanceCounterType m_counterType;
    private bool m_hasTotalInstance;
    private bool m_higherIsBetter;
    private bool m_publishToWarehouse;
    private bool m_subtractWarmupValueForCumulativeValue;
    public string CategoryName { get; }
    public string CounterName { get; }
    public string CounterHelp { get; }
    public PerformanceCounterType CounterType { get; }
    public bool HasTotalInstance { get; }
    public bool HigherIsBetter { get; }
    public bool PublishToWarehouse { get; }
    public bool SubtractWarmupValueForCumulativeValue { get; }
    public LoadTestCounterDefinition(string categoryName, string counterNameId, PerformanceCounterType counterType, bool hasTotalInstance, bool higherIsBetter, bool publishToWarehouse, bool subtractWarmupValueForCumulativeValue);
    public string get_CategoryName();
    public string get_CounterName();
    public string get_CounterHelp();
    public PerformanceCounterType get_CounterType();
    public bool get_HasTotalInstance();
    public bool get_HigherIsBetter();
    public bool get_PublishToWarehouse();
    public bool get_SubtractWarmupValueForCumulativeValue();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterDescriptor : object {
    [StoreXmlSimpleFieldAttribute]
private string m_machineName;
    [StoreXmlSimpleFieldAttribute]
private string m_categoryName;
    [StoreXmlSimpleFieldAttribute]
private string m_counterName;
    [StoreXmlSimpleFieldAttribute]
private string m_instanceName;
    [StoreXmlSimpleFieldAttribute]
private string m_baseInstanceName;
    [StoreXmlSimpleFieldAttribute]
private int m_loadTestItemId;
    private static int s_NoLoadTestItemIdFound;
    private static int s_UninitializedLoadTestItemId;
    public string MachineName { get; }
    public string CategoryName { get; }
    public string CounterName { get; }
    public string InstanceName { get; }
    public string BaseInstanceName { get; }
    public int LoadTestItemId { get; }
    public bool HasLoadTestItemId { get; }
    public string AllNames { get; }
    public string AllBaseNames { get; }
    public LoadTestCounterDescriptor(string machineName, string categoryName, string counterName, string instanceName);
    public LoadTestCounterDescriptor(LoadTestCounterDescriptor copy);
    public sealed virtual object Clone();
    public string get_MachineName();
    public string get_CategoryName();
    public string get_CounterName();
    public string get_InstanceName();
    public bool IsLoadTestCounter();
    private bool IsLoadTestStandardCounter();
    public bool IsLoadTestOverallCounter();
    public bool IsLoadTestAgentCounter();
    public bool IsLoadTestTotalCounter();
    public bool IsLoadTestScenarioCounter();
    public bool IsLoadTestCaseCounter();
    public bool IsLoadTestTransactionCounter();
    public bool IsLoadTestPageCounter();
    public bool IsLoadTestPageGoalCounter();
    public bool IsLoadTestRequestCounter();
    public bool IsLoadTestErrorCounter();
    public bool IsLoadTestLogEntriesCounter();
    public bool IsSingleInstancePerfCounter();
    public bool MayHavePercentileData();
    public string get_BaseInstanceName();
    public int get_LoadTestItemId();
    public bool get_HasLoadTestItemId();
    public string get_AllNames();
    public string get_AllBaseNames();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterInstanceData : object {
    private int m_counterId;
    private int m_counterInstanceId;
    private string m_counterInstanceName;
    private bool m_hasLoadTestItemId;
    private int m_LoadTestItemId;
    public int CounterId { get; }
    public int CounterInstanceId { get; }
    public string CounterInstanceName { get; }
    public bool HasLoadTestItemId { get; }
    public int LoadTestItemId { get; }
    public LoadTestCounterInstanceData(int counterId, int counterInstanceId, string counterInstanceName, bool hasLoadTestItemId);
    public int get_CounterId();
    public int get_CounterInstanceId();
    public string get_CounterInstanceName();
    public bool get_HasLoadTestItemId();
    public int get_LoadTestItemId();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterInstanceDataCollection : CollectionBase {
    public LoadTestCounterInstanceData Item { get; }
    public int Add(LoadTestCounterInstanceData instance);
    public void Insert(int index, LoadTestCounterInstanceData instance);
    public int IndexOf(LoadTestCounterInstanceData instance);
    public void Remove(LoadTestCounterInstanceData instance);
    public LoadTestCounterInstanceData get_Item(int index);
    public bool Contains(LoadTestCounterInstanceData instance);
    public void CopyTo(LoadTestCounterInstanceData[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterInstanceSummary : object {
    private int m_instanceId;
    private LoadTestCounterDescriptor m_descriptor;
    private bool m_hasCumulativeData;
    private float m_cumulativeValue;
    private ThresholdRuleResult m_overallThresholdRuleResult;
    private PercentileData m_percentiles;
    public int InstanceId { get; }
    public LoadTestCounterDescriptor Descriptor { get; }
    public bool HasCumulativeData { get; }
    public float CumulativeValue { get; internal set; }
    public PercentileData Percentiles { get; public set; }
    public ThresholdRuleResult OverallThresholdRuleResult { get; internal set; }
    public LoadTestCounterInstanceSummary(int instanceId, LoadTestCounterDescriptor counterDescriptor, float cumulativeValue, ThresholdRuleResult overallThresholdRuleResult);
    public LoadTestCounterInstanceSummary(int instanceId, LoadTestCounterDescriptor counterDescriptor);
    public int get_InstanceId();
    public LoadTestCounterDescriptor get_Descriptor();
    public bool get_HasCumulativeData();
    internal void set_CumulativeValue(float value);
    public float get_CumulativeValue();
    public PercentileData get_Percentiles();
    public void set_Percentiles(PercentileData value);
    internal void set_OverallThresholdRuleResult(ThresholdRuleResult value);
    public ThresholdRuleResult get_OverallThresholdRuleResult();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterIntervalData : object {
    private bool m_warmupInterval;
    private bool m_cooldownInterval;
    private bool m_collectionTimedOut;
    private int m_intervalNumber;
    private DateTime m_intervalStartTime;
    private DateTime m_intervalEndTime;
    private LoadTestCounterCategoryDataCollection m_newCategories;
    private LoadTestCounterDataCollection m_newCounters;
    private LoadTestCounterInstanceDataCollection m_newInstances;
    private LoadTestCounterSampleCollection m_samples;
    private WebLoadRequestMapEntryCollection m_newRequestMapEntries;
    private WebLoadTransactionMapEntryCollection m_newTransactionMapEntries;
    private WebTestErrorReportCollection m_errors;
    private int m_testsCompleted;
    private Dictionary`2<int, LoadTestCounterSample> m_samplesByInstanceId;
    private TimeZoneInfo m_intervalTimeZone;
    public int IntervalNumber { get; internal set; }
    public bool WarmupInterval { get; internal set; }
    public bool CooldownInterval { get; }
    public bool CollectionTimedOut { get; internal set; }
    public DateTime IntervalStartTime { get; public set; }
    public DateTime IntervalEndTime { get; public set; }
    public LoadTestCounterCategoryDataCollection NewCategories { get; }
    public LoadTestCounterDataCollection NewCounters { get; }
    public LoadTestCounterInstanceDataCollection NewInstances { get; }
    public LoadTestCounterSampleCollection Samples { get; }
    public WebLoadTransactionMapEntryCollection NewTransactionMapEntries { get; public set; }
    public WebLoadRequestMapEntryCollection NewRequestMapEntries { get; public set; }
    public WebTestErrorReportCollection Errors { get; }
    public int TestsCompleted { get; public set; }
    public LoadTestCounterIntervalData(bool warmupInterval, bool cooldownInterval, int intervalNumber);
    internal void set_IntervalNumber(int value);
    public int get_IntervalNumber();
    internal void set_WarmupInterval(bool value);
    public bool get_WarmupInterval();
    public bool get_CooldownInterval();
    internal void set_CollectionTimedOut(bool value);
    public bool get_CollectionTimedOut();
    public void set_IntervalStartTime(DateTime value);
    public DateTime get_IntervalStartTime();
    public void set_IntervalEndTime(DateTime value);
    public DateTime get_IntervalEndTime();
    public LoadTestCounterCategoryDataCollection get_NewCategories();
    public LoadTestCounterDataCollection get_NewCounters();
    public LoadTestCounterInstanceDataCollection get_NewInstances();
    public LoadTestCounterSampleCollection get_Samples();
    public void set_NewTransactionMapEntries(WebLoadTransactionMapEntryCollection value);
    public WebLoadTransactionMapEntryCollection get_NewTransactionMapEntries();
    public void set_NewRequestMapEntries(WebLoadRequestMapEntryCollection value);
    public WebLoadRequestMapEntryCollection get_NewRequestMapEntries();
    public WebTestErrorReportCollection get_Errors();
    public void set_TestsCompleted(int value);
    public int get_TestsCompleted();
    public void AddSample(LoadTestCounterSample sample);
    public LoadTestCounterSample GetSample(int instanceId);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterNotFoundException : LoadTestException {
    public LoadTestCounterNotFoundException(string message);
    public LoadTestCounterNotFoundException(string message, Exception innerException);
    protected LoadTestCounterNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterSample : object {
    private int m_counterInstanceId;
    private int m_intervalNumber;
    private DateTime m_intervalEndTime;
    private long m_rawValue;
    private long m_baseValue;
    private long m_counterFrequency;
    private long m_systemFrequency;
    private long m_timeStamp;
    private long m_timeStamp100nSec;
    private PerformanceCounterType m_counterType;
    private bool m_hasComputedValue;
    private float m_computedValue;
    private ThresholdRuleResult m_thresholdRuleResult;
    private string m_thresholdRuleMessage;
    private long m_countDuringWarmup;
    public int CounterInstanceId { get; }
    public int IntervalNumber { get; }
    public DateTime IntervalEndTime { get; }
    public long RawValue { get; public set; }
    public long BaseValue { get; }
    public long CounterFrequency { get; }
    public long SystemFrequency { get; }
    public long TimeStamp { get; }
    public long TimeStamp100nSec { get; }
    public PerformanceCounterType CounterType { get; }
    public bool HasComputedValue { get; }
    public float ComputedValue { get; public set; }
    public long CountDuringWarmup { get; public set; }
    public ThresholdRuleResult ThresholdRuleResult { get; public set; }
    public string ThresholdRuleMessage { get; public set; }
    public LoadTestCounterSample(int counterInstanceId, DateTime intervalEndTime, CounterSample sample);
    public LoadTestCounterSample(int counterInstanceId, int intervalNumber, DateTime intervalEndTime, CounterSample sample);
    public int get_CounterInstanceId();
    public int get_IntervalNumber();
    public DateTime get_IntervalEndTime();
    public void set_RawValue(long value);
    public long get_RawValue();
    public long get_BaseValue();
    public long get_CounterFrequency();
    public long get_SystemFrequency();
    public long get_TimeStamp();
    public long get_TimeStamp100nSec();
    public PerformanceCounterType get_CounterType();
    public bool get_HasComputedValue();
    public void set_ComputedValue(float value);
    public float get_ComputedValue();
    public void set_CountDuringWarmup(long value);
    public long get_CountDuringWarmup();
    public void set_ThresholdRuleResult(ThresholdRuleResult value);
    public ThresholdRuleResult get_ThresholdRuleResult();
    public void set_ThresholdRuleMessage(string value);
    public string get_ThresholdRuleMessage();
    public CounterSample ToCounterSample();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterSampleCollection : CollectionBase {
    public LoadTestCounterSample Item { get; }
    public int Add(LoadTestCounterSample instance);
    public void Insert(int index, LoadTestCounterSample instance);
    public int IndexOf(LoadTestCounterSample instance);
    public void Remove(LoadTestCounterSample instance);
    public LoadTestCounterSample get_Item(int index);
    public bool Contains(LoadTestCounterSample instance);
    public void CopyTo(LoadTestCounterSample[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestCounterWriterQueue : object {
    private static int MAX_QUEUE_SIZE;
    private int m_maxQueueSize;
    private ILoadTestCounterWriter m_counterWriter;
    private bool m_stopped;
    private bool m_aborted;
    private Queue m_messageQueue;
    private AutoResetEvent m_messageQueuedEvent;
    private AutoResetEvent m_queueNotFullEvent;
    private ManualResetEvent m_stoppedEvent;
    private Exception m_exception;
    private int m_reconnectTimeoutInSeconds;
    private WebLoadStatistic m_timeToWrite;
    private bool m_itemResultsWritten;
    private DateTime m_itemResultsStartTime;
    private DateTime m_itemResultsEndTime;
    private Stopwatch m_itemResultsStopwatch;
    private TimeSpan m_updateSummaryDuration;
    public Exception Exception { get; }
    public LoadTestCounterWriterQueue(ILoadTestCounterWriter counterWriter, int reconnectTimeoutInSeconds);
    public void Start();
    public void Stop();
    public void Abort();
    public void Enqueue(CounterWriterCommandType commandType, object data);
    private void ProcessingThread();
    private void ExecuteCommand(CounterWriterCommand command, bool isRetry);
    private bool Reconnect();
    public Exception get_Exception();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestDatabaseCounterWriter : object {
    public static string LOCALDB_DEFAULT_INSTANCE;
    public static string LOCALDB_DEFAULT_INSTANCE_V11;
    public static string LOCAL_SQL_EXPRESS_INSTANCE_NAME;
    public static int LOADTEST_REPOSITORY_SCHEMA_REV;
    private static int MAX_LOADTEST_NAME;
    private static int MAX_DESCRIPTION;
    private static int MAX_SCENARIO_NAME;
    private static int MAX_TESTCASE_NAME;
    private static int MAX_TESTTYPE_NAME;
    private static int MAX_TRANSACTION_NAME;
    private static int MAX_MACHINE_NAME;
    private static int MAX_MACHINE_TAG_NAME;
    private static int MAX_COUNTER_NAME;
    private static int MAX_FILEPATH_SIZE;
    private static int MAX_MESSAGE_TEXT;
    private static int MAX_SUBTYPE;
    private static int MAX_REQUEST_URI;
    private static int MAX_CONTENT_TYPE;
    private static int MAX_RUNSETTING_NAME;
    private static int MAX_OUTCOME;
    private static int MAX_BROWSER_NAME;
    private static int MAX_NETWORK_NAME;
    private static int MAX_COLUMN_NAME;
    private static int MAX_NTEXT_SIZE;
    private static int BULK_COPY_BATCH_SIZE;
    private static int FILE_ATTACHMENT_CHUNK_SIZE;
    private static string updateSummaryDataSp;
    private static string VS2010UPGRADESCRIPT;
    private DateTime m_startTime;
    private DateTime m_endTime;
    private SqlConnection m_connection;
    private WebTestSuite m_suite;
    private string m_connectString;
    private int m_loadTestRunId;
    private int m_categoryId;
    private int m_counterId;
    private int m_instanceId;
    private int m_testDetailId;
    private int m_transactionDetailId;
    private int m_pageDetailId;
    private int m_detailMessageId;
    private int m_logSourceId;
    private int m_fileAttachmentId;
    private LoadTestRunStatus m_loadTestRunStatus;
    private bool m_testRunInitialized;
    private LoadTestRigInfo m_rigInfo;
    private TestRun m_testRun;
    private WebLoadStatistic m_sqlLengthStatistic;
    private int m_lastIntervalNumber;
    private DateTime m_lastIntervalEndTime;
    private int m_thresholdRuleId;
    private int m_errorDetailsWritten;
    private Dictionary`2<string, LoadTestMessageType> m_messageTypes;
    private WebLoadRequestMapEntryCollection m_requestMap;
    private static int MAX_SQLPARAMETERES_PER_BATCH;
    public int LoadTestRunId { get; }
    public int LastIntervalNumber { get; }
    public DateTime LastIntervalEndTime { get; }
    public LoadTestDatabaseCounterWriter(TestRun testRun, WebTestSuite suite, string connectString);
    private static LoadTestDatabaseCounterWriter();
    public int get_LoadTestRunId();
    public int get_LastIntervalNumber();
    public DateTime get_LastIntervalEndTime();
    public sealed virtual void Open();
    public sealed virtual void Close();
    public sealed virtual void InitializeTestRun(LoadTestRigInfo rigInfo);
    public sealed virtual void StartTestRun(DateTime startTime);
    public sealed virtual void EndTestRun(TestOutcome outcome);
    private void SimplifyRequestMapNames();
    public sealed virtual void WriteIntervalData(LoadTestCounterIntervalData intervalData);
    public sealed virtual void WriteInstanceSummaries(List`1<InstanceSummaryBuilder> instanceSummaryBuilders);
    public sealed virtual void WriteError(WebTestErrorReport errorReport);
    public sealed virtual void WriteItemResults(LoadTestItemResultReport itemResultReport);
    private void UpdateCooldownTime(DateTime maxFinsihDate);
    public void WriteErrorDetails(List`1<WebTestErrorDetailReport> errorDetailReports);
    private void WriteTestLogs(List`1<LoadTestTestResult> testResults, int agentId);
    public sealed virtual void ImportSqlTrace(LoadTestSqlTracer sqlTracer);
    private void InsertSqlTraceRow(SqlTransaction transaction, string textData, long duration, DateTime startTime, DateTime endTime, long reads, long writes, int cpu, int eventClass);
    public int ImportTabularData(string dataCollectorDisplayName, string machineName, ILoadTestTabularDataReader tabularDataReader);
    public void WritePostRunCounterData(LoadTestPostRunCounterData postRunCounterData);
    public Int64[] GetLogEntryInvervalCounts(int logSourceId, string timestampColumnName);
    public static string GetLogDataTableName(int loadTestRunId, int logSourceId);
    private static string GenerateCreateTableCommandFormatString(ILoadTestTabularDataReader tabularDataReader);
    public void InsertFileAttachment(string machineName, string filePath);
    private void CreateLoadTestSchema();
    internal static int GetSchemaRevision(SqlConnection connection);
    internal static void VerifySchemaRevision(SqlConnection connection);
    internal static string CreateSchemaIfRequired(string encryptedConnectionString);
    private static bool IsSqlExpressRunning();
    private void CreateSchemaInLocalDB();
    private bool SchemaExistsInLocalDB(string instanceName);
    internal static string GetConnectionString(string sqlServerInstanceName, string catalogName);
    internal static void CreateRemoteLoadTestSchema(string sqlServerInstanceName, string loadTestCatalogName, string groupNameToGrantAccess, string directoryContainingSchemaFile);
    internal static void UpgradeRemoteLoadTestSchema(string sqlServerInstanceName, string loadTestCatalogName, string groupNameToGrantAccess, string directoryContainingSchemaFile);
    internal static void CreateLocalLoadTestSchema();
    internal static void InvokeSqlScriptOnRepository(string sqlServerInstanceName, string catalogName, string directoryContainingSchemaFile, string sqlFileName);
    internal static void InvokeSqlScriptOnSQLRepository(string sqlConnectionString, string catalogName, string directoryContainingSchemaFile, string sqlFileName);
    private Byte[] SerializeLoadTestToBytes(WebTestSuite loadTest);
    private static void ExecuteNonQuery(SqlCommand command, int expectedRowCount);
    private void InsertLoadTestRunInfo();
    private int AppendInsertIntoAgents(StringBuilder sb);
    private int AppendInsertIntoSystemsUnderTest(StringBuilder sb);
    private int AppendInsertIntoScenariosAndTestCases(StringBuilder sb, SqlCommand command);
    private int AppendInsertIntoBrowsers(StringBuilder sb);
    private int AppendInsertIntoNetworks(StringBuilder sb);
    private void AddStartTimeToLoadTestRun(DateTime startTime);
    private void AddEndTimeToLoadTestRun(TestOutcome outcomeToStore);
    public void UpdateSummaryData();
    private int AppendInsertIntoIntervals(StringBuilder sb, LoadTestCounterIntervalData intervalData);
    private int AppendInsertIntoRequestMap(StringBuilder sb, LoadTestCounterIntervalData intervalData);
    private int AppendInsertIntoTransactionMap(StringBuilder sb, LoadTestCounterIntervalData intervalData);
    private int AppendInsertIntoCategories(StringBuilder sb, LoadTestCounterCategoryDataCollection categoryDataCollection);
    private int AppendInsertIntoCounters(StringBuilder sb, LoadTestCounterDataCollection counterDataCollection);
    private int AppendInsertIntoInstances(StringBuilder sb, LoadTestCounterInstanceDataCollection instanceDataCollection);
    private int AppendInsertIntoSamples(StringBuilder sb, int intervalNumberForAllSamples, LoadTestCounterSampleCollection sampleCollection);
    private int AppendUpdateInstanceSummaries(StringBuilder sb, IEnumerable`1<InstanceSummaryBuilder> instanceSummaryBuilders);
    private void AppendInsertIntoThresholdMessages(StringBuilder sb, int intervalId, int counterId, int messageId, string message);
    private int AppendInsertIntoMessages(StringBuilder sb, WebTestErrorReportCollection errors);
    private int AppendInsertIntoLoadTestTestDetail(StringBuilder sb, LoadTestTestResult testResult, int agentId, bool inMeasurementInterval);
    private int AppendInsertIntoLoadTestTransactionDetail(StringBuilder sb, LoadTestTransactionResult transactionResult, int testCaseId, int testDetailId, bool inMeasurementInterval, WebLoadTransactionMap transactionMap);
    private int AppendInsertIntoLoadTestPageDetail(StringBuilder sb, WebTestPageResult pageResult, int testCaseId, int testDetailId, WebLoadRequestMap requestMap);
    private int AppendInsertsForMessageTypes(StringBuilder sb, int testDetailId, IEnumerable`1<LoadTestMessageType> messageTypes, bool includePageDetailId);
    private int GetAgentId(string agentName);
    private static string Truncate(string inputString, int maxLength);
    private static string InstanceNameToDbString(string instanceName, int maxLength);
    private static string ToDbString(string inputString, int maxLength);
    private string ToDbDateString(DateTime dateTime);
    internal static bool IsRepositoryOutOfSpace(Exception e, LoadTestException& loadTestExecption);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestDetailGraphDescriptor : object {
    [StoreXmlSimpleFieldAttribute]
private LoadTestDetailResultType m_detailType;
    [StoreXmlSimpleFieldAttribute]
private DateTime m_startTime;
    [StoreXmlSimpleFieldAttribute]
private DateTime m_endTime;
    [StoreXmlSimpleFieldAttribute]
private string m_graphName;
    private int m_sampleRate;
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public string Name { get; public set; }
    public LoadTestDetailResultType LoadTestDetailResultType { get; }
    public int SampleRate { get; }
    public LoadTestDetailGraphDescriptor(LoadTestDetailResultType detailType);
    public LoadTestDetailGraphDescriptor(LoadTestDetailResultType detailType, DateTime startTime, DateTime endTime, int sampleRate);
    public sealed virtual object Clone();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public string get_Name();
    public void set_Name(string value);
    public LoadTestDetailResultType get_LoadTestDetailResultType();
    public int get_SampleRate();
    private void SetName();
    public static LoadTestDetailResultType GetTypeFromName(string name);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestDetailIdentifier : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestCaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TransactionId>k__BackingField;
    public int Id { get; public set; }
    public int TestCaseId { get; public set; }
    public int PageId { get; public set; }
    public int TransactionId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_TestCaseId();
    [CompilerGeneratedAttribute]
public void set_TestCaseId(int value);
    [CompilerGeneratedAttribute]
public int get_PageId();
    [CompilerGeneratedAttribute]
public void set_PageId(int value);
    [CompilerGeneratedAttribute]
public int get_TransactionId();
    [CompilerGeneratedAttribute]
public void set_TransactionId(int value);
}
internal abstract class Microsoft.VisualStudio.TestTools.WebStress.LoadTestDetailResult : object {
    private LoadTestDetailResultType m_type;
    private int m_detailId;
    private int m_userId;
    private string m_internalUserId;
    private DateTime m_startTime;
    private DateTime m_endTime;
    private double m_duration;
    private int m_agentId;
    private string m_agentName;
    public bool IsResultSuccessful { get; }
    public bool ContainsDetailLog { get; }
    public string Name { get; }
    internal LoadTestDetailResultType DetailResultType { get; }
    internal int DetailId { get; }
    internal string InternalUserId { get; }
    internal int UserId { get; }
    internal DateTime StartTime { get; }
    internal DateTime EndTime { get; }
    public double Duration { get; }
    public int AgentId { get; }
    public string AgentName { get; }
    public LoadTestDetailResult(LoadTestDetailResultType type, int detailId, int userId, string internalUserId, DateTime startTime, DateTime endTime, double duration, int agentId, string agentName);
    public virtual string GetDescriptorId();
    public virtual string GetMessage(DateTime runStartTime, int runDuration);
    public virtual bool get_IsResultSuccessful();
    public virtual bool get_ContainsDetailLog();
    public abstract virtual string get_Name();
    internal LoadTestDetailResultType get_DetailResultType();
    internal int get_DetailId();
    internal string get_InternalUserId();
    internal int get_UserId();
    internal DateTime get_StartTime();
    internal DateTime get_EndTime();
    public double get_Duration();
    public int get_AgentId();
    public string get_AgentName();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestDetailResultType : Enum {
    public int value__;
    public static LoadTestDetailResultType Test;
    public static LoadTestDetailResultType Transaction;
    public static LoadTestDetailResultType Page;
    public static LoadTestDetailResultType Custom;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestErrorLimitExceededException : LoadTestException {
    public LoadTestErrorLimitExceededException(string message);
    public LoadTestErrorLimitExceededException(string message, Exception innerException);
    protected LoadTestErrorLimitExceededException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestException : Exception {
    public LoadTestException(string message);
    public LoadTestException(string message, Exception innerException);
    protected LoadTestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.WebStress.LoadTestExporterImporter : object {
    private static string c_loadTestSchemaFileName;
    private string m_connectString;
    private LoadTestImportStatusEvent m_LoadTestImportStatusEvent;
    private Dictionary`2<string, string> m_connectionArguments;
    private bool m_operationCancelled;
    private Process m_activeProcess;
    private static bool s_logTimes;
    private static bool s_logToConsole;
    private static string s_bcpExportArguments;
    private static string s_bcpExportArgumentsNoRunId;
    private static string s_bcpImportArguments;
    private static string s_bcpImportDataCollectorTableArguments;
    private static string s_bcpSubPath150;
    private static string s_bcpPathRegKey150;
    private static string s_bcpPathValueName150;
    private static string s_bcpSubPath110;
    private static string s_bcpPathRegKey110;
    private static string s_bcpPathValueName110;
    private static string BcpPath;
    private static int SQL_TABLE_ALREADY_EXISTS_ERROR;
    private static int BUFFER_SIZE;
    public LoadTestExporterImporter(string connectionString);
    internal LoadTestExporterImporter(string connectString, bool encrypted);
    private static LoadTestExporterImporter();
    public static string GetLoadTestRepositoryConnectionString();
    private static string GetLoadTestRepositoryConnectionStringEncoded();
    private void CreateSchemaIfRequired(string connectionString);
    private bool ValidateDbConnection(string connectionString);
    private bool DbExists(string connectionString, string databaseName);
    private object ExecuteScalarSql(string connectionString, string sqlCmd);
    public void Export(List`1<int> loadTestRunIds, string filename);
    public void Import(string filename, Int32& loadTestRunId, bool createDbIfRequired);
    public void Import(string filename, Int32& loadTestRunId, Int32& importSchemaRev, LoadTestImportStatusEvent loadTestImportStatusEvent, bool createDbIfRequired);
    public void Cancel();
    private void CheckForCancel();
    private static string GetCommaSeparatedRunIds(List`1<int> loadTestRunIds);
    private SqlConnection GetConnection();
    private string GetBulkCopyConnectionArguments();
    private void RunBulkCopyCommand(string bcpArguments);
    private void SetActiveProcess(string bcpArguments, string fileName);
    private static string CreateLoadTestResultsTempDirectory();
    private static void RemoveLoadTestResultsTempDirectory(string tempDirectoryPath);
    private static void CreateArchiveFileFromTempFiles(string tempDirectoryPath, List`1<string> tempFilenames, string outputFilename);
    private static string GetTempFilenameForTableName(string tableName);
    private static void AppendFileToStream(FileStream outputFile, string inputFilename);
    private static string ExtractTempFilesFromArchiveFile(string inputFilename, Int32& importSchemaRev, Int64& sizeOfAllBcpFiles);
    private static int CreateImportTables(SqlConnection connection, ImportSchemaInfo importSchema);
    private static List`1<KeyValuePair`2<string, string>> CreateDataCollectorTables(SqlConnection connection, ImportSchemaInfo schemaInfo, SqlTransaction transaction, int importNumber);
    private void ImportDataCollectorFiles(string importDirectory, string databaseName, List`1<KeyValuePair`2<string, string>> dataCollectorTableNameMappings);
    private static void DeleteImportTables(SqlConnection connection, ImportSchemaInfo importSchema, int importNumber);
    private void ImportFiles(ImportSchemaInfo importSchema, string importDirectory, int importNumber, string databaseName, int importSchemaRev);
    private static int InsertFromImportTables(SqlConnection connection, ImportSchemaInfo importSchema, SqlTransaction transaction, int importNumber);
    private static void LogMessage(string message);
    private static string GetBcpPath(string regKey, string valueName, string defaultSubPath);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestExportImportHeader : object {
    private static int c_exportImportFormatRev;
    private int m_exportImportFormatRev;
    private List`1<ExportImportFileDescriptor> m_fileDescriptors;
    public List`1<ExportImportFileDescriptor> FileDescriptors { get; }
    public int ExportImportFormatRev { get; }
    public static int ExportImportFormatCurrentRev { get; }
    public LoadTestExportImportHeader(string directoryPath, List`1<string> filenames, int exportImportFormatRev);
    public LoadTestExportImportHeader(List`1<ExportImportFileDescriptor> fileDescriptors, int exportImportFormatRev);
    public List`1<ExportImportFileDescriptor> get_FileDescriptors();
    public int get_ExportImportFormatRev();
    public static int get_ExportImportFormatCurrentRev();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestFileAttachmentInfo : object {
    [CompilerGeneratedAttribute]
private int <FileAttachmentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullFilename>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Filesize>k__BackingField;
    public int FileAttachmentId { get; public set; }
    public string MachineName { get; public set; }
    public string Filename { get; public set; }
    public string FullFilename { get; public set; }
    public long Filesize { get; public set; }
    [CompilerGeneratedAttribute]
public int get_FileAttachmentId();
    [CompilerGeneratedAttribute]
public void set_FileAttachmentId(int value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public string get_Filename();
    [CompilerGeneratedAttribute]
public void set_Filename(string value);
    [CompilerGeneratedAttribute]
public string get_FullFilename();
    [CompilerGeneratedAttribute]
public void set_FullFilename(string value);
    [CompilerGeneratedAttribute]
public long get_Filesize();
    [CompilerGeneratedAttribute]
public void set_Filesize(long value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestFileTelemetry : LoadTestTelemetryEvent {
    private string _projectLanguage;
    private static string SettingsEventName;
    private static string EventSummary;
    private static string SettingsPropertyPrefix;
    public LoadTestFileTelemetry(string projectLanguage);
    public virtual void PostTelemetryData();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestGoalCounterNotFoundException : LoadTestException {
    public LoadTestGoalCounterNotFoundException(string message);
    public LoadTestGoalCounterNotFoundException(string message, Exception innerException);
    protected LoadTestGoalCounterNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestGraphDescriptor : object {
    public static int UndefinedZoomInterval;
    [StoreXmlSimpleFieldAttribute]
private string m_graphName;
    [StoreXmlFieldAttribute]
private Range m_horizontalZoomRange;
    [StoreXmlFieldAttribute]
private Range m_verticalZoomRange;
    private int m_maxYRange;
    private ArrayList m_plotDescriptors;
    private Dictionary`2<string, double> m_rangeGroups;
    public LoadTestPlotDescriptor[] PlotDescriptors { get; }
    public string Name { get; public set; }
    public LoadTestPlotDescriptor SelectedPlotDescriptor { get; }
    public Range HorizontalZoomRange { get; public set; }
    public Range VerticalZoomRange { get; public set; }
    public int MaxYRange { get; public set; }
    public LoadTestGraphDescriptor(LoadTestGraphDescriptor copy);
    private static LoadTestGraphDescriptor();
    public sealed virtual object Clone();
    public void AddPlotDescriptor(LoadTestPlotDescriptor plotDescriptor);
    public void RemovePlotDescriptors();
    public void RemovePlotDescriptor(LoadTestPlotDescriptor plotDescriptor);
    public LoadTestPlotDescriptor[] get_PlotDescriptors();
    public string get_Name();
    public void set_Name(string value);
    public LoadTestPlotDescriptor get_SelectedPlotDescriptor();
    public Range get_HorizontalZoomRange();
    public void set_HorizontalZoomRange(Range value);
    public Range get_VerticalZoomRange();
    public void set_VerticalZoomRange(Range value);
    public int get_MaxYRange();
    public void set_MaxYRange(int value);
    public double GetRange(LoadTestPlotDescriptor plotDescriptor, float scaleOfDataSeries);
    public static double RoundUpToNextPowerOfTen(double value);
    private double GetRange(string rangeGroup);
    public void SetRange(string rangeGroup, double range);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestHelpers : object {
    private static Nullable`1<bool> _shouldSkipLicenseCheck;
    public static bool ShouldSkipLicenseCheck { get; }
    public static bool get_ShouldSkipLicenseCheck();
    public static string FormatTime(DateTime runStartTime, int runDuration, DateTime timeStamp);
    public static string FormatTime(DateTime runStartTime, int runDuration, DateTime timeStamp, bool includeMillis);
    public static string EmbedRunUserInAnalysisComment(string runUser, string comment);
    public static void ExtractRunUserFromAnalysisComment(string embeddedComment, String& runUser, String& extractedComment);
    public static string GetVSIdeInstallationDirectory();
    public static string GetVSMyDocumentsDirectory();
    public static Exception GetSerializableException(Exception exception);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestImportExportCancelledException : LoadTestException {
    public LoadTestImportExportCancelledException(string message);
    public LoadTestImportExportCancelledException(string message, Exception inner);
    protected LoadTestImportExportCancelledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.WebStress.LoadTestImportStatusEvent : object {
    [CompilerGeneratedAttribute]
private ImportStausEventHandler ImportStatusChanged;
    [CompilerGeneratedAttribute]
private long <SizeOfAllBcpFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeTakenForImportingBcpFileToTempTableInMs>k__BackingField;
    private int m_ImportTablesToOriginalTableStatus;
    private Timer m_ImportTablesToOriginalTableStatusTimer;
    public long SizeOfAllBcpFiles { get; public set; }
    public long TimeTakenForImportingBcpFileToTempTableInMs { get; public set; }
    [CompilerGeneratedAttribute]
public void add_ImportStatusChanged(ImportStausEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ImportStatusChanged(ImportStausEventHandler value);
    protected void UpdateImportStatus(int percentageCompleted);
    public void BcpToImportTablesStatus(long completedSize);
    public void ImportTablesToOriginalTableStatusUpdate(object source, ElapsedEventArgs e);
    public void ImportTablesToOriginalTableStatusTimer();
    public void StopImportTablesToOriginalTableStatusTimer();
    [CompilerGeneratedAttribute]
public long get_SizeOfAllBcpFiles();
    [CompilerGeneratedAttribute]
public void set_SizeOfAllBcpFiles(long value);
    [CompilerGeneratedAttribute]
public long get_TimeTakenForImportingBcpFileToTempTableInMs();
    [CompilerGeneratedAttribute]
public void set_TimeTakenForImportingBcpFileToTempTableInMs(long value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestIntervalCallback : MulticastDelegate {
    public LoadTestIntervalCallback(object object, IntPtr method);
    public virtual void Invoke(LoadTestCounterIntervalData intervalData);
    public virtual IAsyncResult BeginInvoke(LoadTestCounterIntervalData intervalData, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestInvalidTabularDataException : LoadTestException {
    public LoadTestInvalidTabularDataException(string message);
    public LoadTestInvalidTabularDataException(string message, Exception innerException);
    protected LoadTestInvalidTabularDataException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.VisualStudio.TestTools.WebStress.LoadTestItemDetailResult : LoadTestDetailResult {
    private string m_scenario;
    private string m_testName;
    private string m_testType;
    private string m_network;
    private int m_testLogId;
    public bool ContainsDetailLog { get; }
    public int TestLogId { get; }
    public string Scenario { get; }
    public string Test { get; }
    public string TestType { get; }
    public string Network { get; }
    public LoadTestItemDetailResult(LoadTestDetailResultType type, int detailId, string scenario, string test, int userId, string internalUserId, DateTime startTime, DateTime endTime, double duration, string testType, string network, int testLogId, int agentId, string agentName);
    public virtual string GetDescriptorId();
    public virtual bool get_ContainsDetailLog();
    public int get_TestLogId();
    public string get_Scenario();
    public string get_Test();
    public string get_TestType();
    public string get_Network();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestItemResult : object {
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestItemResultReport : object {
    [CompilerGeneratedAttribute]
private WebLoadRequestMapEntryCollection <NewRequestMapEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private WebLoadTransactionMapEntryCollection <NewTransactionMapEntries>k__BackingField;
    private string m_agentName;
    private string m_itemResultsFilePath;
    private List`1<LoadTestItemResult> m_itemResults;
    private WebLoadTransactionMap m_transactionMap;
    private WebLoadRequestMap m_requestMap;
    public string AgentName { get; }
    public string ItemResultsFilePath { get; }
    public List`1<LoadTestItemResult> ItemResults { get; public set; }
    public WebLoadTransactionMap TransactionMap { get; public set; }
    public WebLoadRequestMap RequestMap { get; public set; }
    public WebLoadRequestMapEntryCollection NewRequestMapEntries { get; public set; }
    public WebLoadTransactionMapEntryCollection NewTransactionMapEntries { get; public set; }
    public LoadTestItemResultReport(string agentName);
    public LoadTestItemResultReport(string agentName, string itemResultsFilePath);
    public string get_AgentName();
    public string get_ItemResultsFilePath();
    public void set_ItemResults(List`1<LoadTestItemResult> value);
    public List`1<LoadTestItemResult> get_ItemResults();
    public void set_TransactionMap(WebLoadTransactionMap value);
    public WebLoadTransactionMap get_TransactionMap();
    public void set_RequestMap(WebLoadRequestMap value);
    public WebLoadRequestMap get_RequestMap();
    [CompilerGeneratedAttribute]
public WebLoadRequestMapEntryCollection get_NewRequestMapEntries();
    [CompilerGeneratedAttribute]
public void set_NewRequestMapEntries(WebLoadRequestMapEntryCollection value);
    [CompilerGeneratedAttribute]
public WebLoadTransactionMapEntryCollection get_NewTransactionMapEntries();
    [CompilerGeneratedAttribute]
public void set_NewTransactionMapEntries(WebLoadTransactionMapEntryCollection value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestLicenseViolationException : LoadTestException {
    public LoadTestLicenseViolationException(string message);
    public LoadTestLicenseViolationException(string message, Exception innerException);
    protected LoadTestLicenseViolationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestMessageRequestSummary : object {
    private string m_scenarioName;
    private string m_testCaseName;
    private string m_requestUri;
    private int m_count;
    public string ScenarioName { get; }
    public string TestCaseName { get; }
    public string RequestUri { get; }
    public int Count { get; }
    public LoadTestMessageRequestSummary(string scenarioName, string testCaseName, string requestUri, int count);
    public string get_ScenarioName();
    public string get_TestCaseName();
    public string get_RequestUri();
    public int get_Count();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestMessageType : object {
    private int m_messageTypeId;
    private WebTestErrorType m_errorType;
    private string m_errorSubtype;
    public int MessageTypeId { get; public set; }
    public WebTestErrorType ErrorType { get; }
    public string ErrorSubtype { get; }
    public string FullErrorType { get; }
    public LoadTestMessageType(WebTestErrorType errorType, string errorSubtype);
    public LoadTestMessageType(WebTestErrorType errorType, string errorSubtype, int messageTypeId);
    public void set_MessageTypeId(int value);
    public int get_MessageTypeId();
    public WebTestErrorType get_ErrorType();
    public string get_ErrorSubtype();
    public string get_FullErrorType();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestMessageTypeSummary : object {
    private WebTestErrorType m_messageType;
    private string m_messageSubType;
    private string m_messageText;
    private int m_count;
    public WebTestErrorType MessageType { get; }
    public string MessageSubType { get; }
    public string MessageText { get; public set; }
    public int Count { get; }
    public LoadTestMessageTypeSummary(WebTestErrorType messageType, string messageSubType, int count);
    public WebTestErrorType get_MessageType();
    public string get_MessageSubType();
    public void set_MessageText(string value);
    public string get_MessageText();
    public int get_Count();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestOpenRepositoryException : LoadTestException {
    public LoadTestOpenRepositoryException(string message);
    public LoadTestOpenRepositoryException(string message, Exception innerException);
    protected LoadTestOpenRepositoryException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPackageLoadEvent : LoadTestTelemetryEvent {
    private static string SettingsEventName;
    public virtual void PostTelemetryData();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPageByNetworkSummary : object {
    private string m_scenarioName;
    private string m_testCaseName;
    private string m_requestUri;
    private string m_networkName;
    private int m_pageCount;
    private double m_minimum;
    private double m_maximum;
    private double m_average;
    private double m_median;
    private double m_percentile90;
    private double m_percentile95;
    private double m_percentile99;
    private double m_standardDeviation;
    private double m_goal;
    private int m_pagesMeetingGoal;
    public string ScenarioName { get; }
    public string TestCaseName { get; }
    public string RequestUri { get; }
    public string NetworkName { get; }
    public int PageCount { get; }
    public double Minimum { get; }
    public double Maximum { get; }
    public double Average { get; }
    public double Median { get; }
    public double Percentile90 { get; }
    public double Percentile95 { get; }
    public double Percentile99 { get; }
    public double StandardDeviation { get; }
    public double Goal { get; }
    public int PagesMeetingGoal { get; }
    public double PercentMeetingGoal { get; }
    public LoadTestPageByNetworkSummary(string scenarioName, string testCaseName, string requestUri, string networkName, int pageCount, double minimum, double maximum, double average, double median, double percentile90, double percentile95, double percentile99, double standardDeviation, double goal, int pagesMeetingGoal);
    public string get_ScenarioName();
    public string get_TestCaseName();
    public string get_RequestUri();
    public string get_NetworkName();
    public int get_PageCount();
    public double get_Minimum();
    public double get_Maximum();
    public double get_Average();
    public double get_Median();
    public double get_Percentile90();
    public double get_Percentile95();
    public double get_Percentile99();
    public double get_StandardDeviation();
    public double get_Goal();
    public int get_PagesMeetingGoal();
    public double get_PercentMeetingGoal();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPageDetailResult : LoadTestItemDetailResult {
    private string m_browser;
    private int m_pageId;
    private string m_url;
    private Outcome m_outcome;
    public bool IsResultSuccessful { get; }
    public string Name { get; }
    public Outcome Outcome { get; }
    public int PageId { get; }
    public string URL { get; }
    public string Browser { get; }
    public LoadTestPageDetailResult(int detailId, string scenario, string testName, int userId, string internalUserId, DateTime startTime, DateTime endTime, double duration, string testType, string network, int testLogId, int agentId, string agentName, Outcome outcome, int pageId, string URL, string browser);
    public virtual bool get_IsResultSuccessful();
    public virtual string GetDescriptorId();
    public virtual string get_Name();
    public virtual string GetMessage(DateTime runStartTime, int runDuration);
    public Outcome get_Outcome();
    public int get_PageId();
    public string get_URL();
    public string get_Browser();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPageSummary : object {
    [StoreXmlSimpleFieldAttribute]
private string m_scenarioName;
    [StoreXmlSimpleFieldAttribute]
private string m_testName;
    [StoreXmlSimpleFieldAttribute]
private string m_url;
    [StoreXmlSimpleFieldAttribute]
private int m_pageCount;
    [StoreXmlSimpleFieldAttribute]
private int m_responseTime;
    [WarehouseFactFieldAttribute("Scenario", "3")]
[WarehouseDimensionFieldAttribute("Load Test Scenario", "12")]
public string ScenarioName { get; }
    [WarehouseFactFieldAttribute("Test", "3")]
public string TestName { get; }
    [WarehouseFactFieldAttribute("Page Summary", "3")]
[WarehouseDimensionFieldAttribute("Url", "6")]
public string Url { get; }
    [WarehouseFactFieldAttribute("Page Count", "3")]
public int PageCount { get; }
    [WarehouseFactFieldAttribute("Response Time", "3")]
public int ResponseTime { get; }
    public LoadTestPageSummary(string scenarioName, string testName, string url, int pageCount, int responseTime);
    public string get_ScenarioName();
    public string get_TestName();
    public string get_Url();
    public int get_PageCount();
    public int get_ResponseTime();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPerformanceCounter : object {
    private LoadTestCounterDefinition m_counterDefinition;
    private string m_instanceName;
    private bool m_isTotalInstance;
    private long m_rawValue;
    private long m_baseValue;
    private bool m_modifiedSinceLastSample;
    public LoadTestCounterDefinition CounterDefinition { get; }
    public string InstanceName { get; }
    public long RawValue { get; public set; }
    public LoadTestPerformanceCounter(LoadTestCounterDefinition counterDefinition, string instanceName);
    public LoadTestCounterDefinition get_CounterDefinition();
    public string get_InstanceName();
    public void IncrementBaseBy(long increment);
    public void IncrementBy(long increment);
    public void set_RawValue(long value);
    public long get_RawValue();
    public CounterSample GetSample(long timeStamp, long timeStamp100nSec);
    public CounterSample GetSample(long timeStamp, long timeStamp100nSec, bool forceReturnOfSample);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPerformanceCounterReporter : object {
    private static int CATEGORYID_SCENARIO;
    private static int CATEGORYID_TESTCASE;
    private static int CATEGORYID_TRANSACTION;
    private static int CATEGORYID_ERROR;
    private static int CATEGORYID_PAGE;
    private static int CATEGORYID_REQUEST;
    private static int CATEGORYID_LOGENTRIES;
    private static int ALL_CATEGORY_COUNT;
    public static string CATEGORY_SCENARIO;
    public static string CATEGORY_TESTCASE;
    public static string CATEGORY_TRANSACTION;
    public static string CATEGORY_PAGE;
    public static string CATEGORY_REQUEST;
    public static string CATEGORY_ERROR;
    public static string CATEGORY_LOGENTRIES;
    private static String[] COUNTER_CATEGORIES;
    public static string TOTAL_INSTANCE_NAME;
    public static string AGENT_INSTANCE_NAME_PREFIX;
    private static int COUNTERID_USER_LOAD;
    private static int COUNTERID_TEST_CASES_ACTIVE;
    internal static string COUNTER_USER_LOAD;
    internal static string COUNTER_TEST_CASES_ACTIVE;
    private static LoadTestCounterDefinition[] SCENARIO_COUNTERS;
    private static int COUNTERID_TESTCASES;
    private static int COUNTERID_PASSED_TESTCASES;
    private static int COUNTERID_FAILED_TESTCASES;
    private static int COUNTERID_TCPS;
    private static int COUNTERID_PASSED_TCPS;
    private static int COUNTERID_FAILED_TCPS;
    private static int COUNTERID_TESTCASE_REQUESTS;
    private static int COUNTERID_TESTCASE_TIME;
    private static int COUNTERID_PCT_PLUGIN_TIME;
    private static int COUNTERID_PCT_WEBTEST_TIME;
    private static int COUNTERID_PCT_RULE_TIME;
    internal static string COUNTER_TESTCASES;
    internal static string COUNTER_PASSED_TESTCASES;
    internal static string COUNTER_FAILED_TESTCASES;
    internal static string COUNTER_TCPS;
    internal static string COUNTER_PASSED_TCPS;
    internal static string COUNTER_FAILED_TCPS;
    internal static string COUNTER_TESTCASE_REQUESTS;
    internal static string COUNTER_TESTCASE_TIME;
    internal static string COUNTER_PCT_PLUGIN_TIME;
    internal static string COUNTER_PCT_WEBTEST_TIME;
    internal static string COUNTER_PCT_RULE_TIME;
    private static LoadTestCounterDefinition[] TESTCASE_COUNTERS;
    private static int COUNTERID_TRANSACTIONS;
    private static int COUNTERID_TX_ELAPSED;
    private static int COUNTERID_TX_RESPONSE;
    private static int COUNTERID_TX_PERSEC;
    internal static string COUNTER_TRANSACTIONS;
    internal static string COUNTER_TX_ELAPSED;
    internal static string COUNTER_TX_RESPONSE;
    internal static string COUNTER_TX_PERSEC;
    private static LoadTestCounterDefinition[] TRANSACTION_COUNTERS;
    private static int COUNTERID_PAGES;
    private static int COUNTERID_PAGE_RESPONSE;
    private static int COUNTERID_PAGE_GOAL;
    private static int COUNTERID_PAGE_PCT_MET_GOAL;
    private static int COUNTERID_PAGES_PERSEC;
    internal static string COUNTER_PAGES;
    internal static string COUNTER_PAGE_RESPONSE;
    internal static string COUNTER_PAGE_GOAL;
    internal static string COUNTER_PAGE_PCT_MET_GOAL;
    internal static string COUNTER_PAGES_PERSEC;
    private static LoadTestCounterDefinition[] PAGE_COUNTERS;
    private static int COUNTERID_REQUESTS;
    private static int COUNTERID_SUCCEEDED_REQUESTS;
    private static int COUNTERID_FAILED_REQUESTS;
    private static int COUNTERID_CACHED_REQUESTS;
    private static int COUNTERID_RPS;
    private static int COUNTERID_PASSED_RPS;
    private static int COUNTERID_FAILED_RPS;
    private static int COUNTERID_TTFB;
    private static int COUNTERID_TTLB;
    private static int COUNTERID_TIMETOCONNECT;
    private static int COUNTERID_CONTENT_LEN;
    internal static string COUNTER_REQUESTS;
    internal static string COUNTER_SUCCEEDED_REQUESTS;
    internal static string COUNTER_FAILED_REQUESTS;
    internal static string COUNTER_CACHED_REQUESTS;
    internal static string COUNTER_RPS;
    internal static string COUNTER_PASSED_RPS;
    internal static string COUNTER_FAILED_RPS;
    internal static string COUNTER_TTFB;
    internal static string COUNTER_TTLB;
    internal static string COUNTER_TIMETOCONNECT;
    internal static string COUNTER_CONTENT_LEN;
    private static LoadTestCounterDefinition[] REQUEST_COUNTERS;
    private static int COUNTERID_HTTP_ERRORS;
    private static int COUNTERID_VALRULE_ERRORS;
    private static int COUNTERID_EXTRULE_ERRORS;
    private static int COUNTERID_TIMEOUTS;
    private static int COUNTERID_EXCEPTIONS;
    private static int COUNTERID_TOTALERRORS;
    private static int COUNTERID_ERRORSPERSEC;
    private static int COUNTERID_VIOLATIONSPERSEC;
    internal static string COUNTER_HTTP_ERRORS;
    internal static string COUNTER_VALRULE_ERRORS;
    internal static string COUNTER_EXTRULE_ERRORS;
    internal static string COUNTER_TIMEOUTS;
    internal static string COUNTER_EXCEPTIONS;
    internal static string COUNTER_TOTALERRORS;
    internal static string COUNTER_ERRORSPERSEC;
    internal static string COUNTER_VIOLATIONSPERSEC;
    private static LoadTestCounterDefinition[] ERROR_COUNTERS;
    private static int COUNTERID_TOTALLOGENTRIES;
    private static int COUNTERID_LOGENTRIESPERSEC;
    internal static string COUNTER_TOTALLOGENTRIES;
    internal static string COUNTER_LOGENTRIESPERSEC;
    private static LoadTestCounterDefinition[] LOGENTRIES_COUNTERS;
    private bool m_initialized;
    private WebTestSuite m_suite;
    private List`1<LoadTestCounterCategoryDefinition> m_categories;
    private Dictionary`2<string, LoadTestCounterCategoryDefinition> m_categoriesByName;
    private Dictionary`2<string, Dictionary`2<string, LoadTestPerformanceCounter>> m_counterInstances;
    private static long m_performanceFrequency;
    private int m_testsCompleted;
    public static long PerformanceFrequency { get; }
    public int TestsCompleted { get; public set; }
    private static LoadTestPerformanceCounterReporter();
    public void Initialize(WebTestSuite suite, LoadTestControllerRestartInfo restartInfo);
    public void Initialize(WebTestSuite suite);
    public LoadTestControllerRestartInfo GetUpdatedRestartInfo(LoadTestControllerRestartInfo restartInfo);
    public void Terminate();
    public static void GetPerformanceCounterTimeStamps(TimeSpan timeSpan, Int64& timeStamp, Int64& timeStamp100nSec);
    public LoadTestCounterCategoryDefinition GetCategory(string categoryName);
    public LoadTestCounterDefinition GetCounterDefinition(string categoryName, string counterName);
    public LoadTestPerformanceCounter GetCounterInstance(LoadTestCounterDefinition counterDefinition, string instanceName);
    public static List`1<LoadTestCounterCategoryDefinition> GetLoadTestCounterCategories(bool includeWebTestCounters);
    public static CounterSet GetDefaultLoadTestCounterSet();
    public static List`1<LoadTestCounterDefinition> GetWarehouseCounterDefinitions(bool includeWebTestCounters);
    private static ThresholdRuleReference GetDefaultThresholdRuleReference(string categoryName, string counterName);
    public static long get_PerformanceFrequency();
    public void set_TestsCompleted(int value);
    public int get_TestsCompleted();
    internal void ProcessIntervalResults(WebLoadIntervalSummaryResults intervalResults, WebLoadRequestMap requestMap, WebLoadTransactionMap transactionMap);
    private void ProcessLoadTestStatistics(string instanceName, LoadTestStatistics loadTestStatistics);
    private void InitializeTotalTypeCounterInstances();
    private Dictionary`2<string, LoadTestCounterCategoryDefinition> GetCategoriesByName(List`1<LoadTestCounterCategoryDefinition> categoryDefinitions);
    private void ProcessTestCaseStatistics(string instanceName, WebLoadTestCaseStatistics testCaseStatistics);
    private void ProcessTransactionTimer(string instanceName, WebLoadTransactionSummaryResults transactionSummary);
    private void ProcessPageTimer(string instanceName, WebLoadPageSummaryResults pageSummary);
    private void ProcessRequestStatistics(string instanceName, WebLoadRequestStatistics requestStatistics);
    private void ProcessErrors(ArrayList errors);
    private void ReportAverageCounter(int categoryId, int counterId, string instanceName, WebLoadStatistic statistic, bool convertToHighPerfTicks);
    private void ReportSampleFractionCounter(int categoryId, int counterId, string instanceName, long fractionNumerator, long fractionBase);
    private void ReportLoad(string instanceName, long currentLoad, long testCasesActive);
    public LoadTestPerformanceCounter GetPerformanceCounter(int categoryId, int counterId, string instanceName);
    public Dictionary`2<string, LoadTestPerformanceCounter> GetCounterInstances(LoadTestCounterDefinition counterDefinition, bool includeRigTotals);
    public static bool IsLoadTestCounterCategory(string categoryName);
    public static string GetAgentInstanceName(string agentName);
    private string GetTestCaseInstanceName(int testCaseId, WebLoadTestCaseSummaryResults testCaseResults);
    private string GetTransactionInstanceName(WebLoadTransactionMap transactionMap, int testCaseId, string transactionName);
    private string GetPageInstanceName(WebLoadRequestMap requestMap, int testCaseId, WebLoadPageSummaryResults pageResults);
    private string GetRequestInstanceName(WebLoadRequestMap requestMap, int testCaseId, WebLoadRequestSummaryResults requestResults);
    private long GetHighPerformanceTicks(long milliseconds);
    private static void AddCategoryDefinition(List`1<LoadTestCounterCategoryDefinition> categories, string categoryName, LoadTestCounterDefinition[] counterDefinitions);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPlotDescriptor : object {
    [StoreXmlSimpleFieldAttribute]
private int m_colorArgb;
    [StoreXmlSimpleFieldAttribute]
private int m_lineStyle;
    [StoreXmlSimpleFieldAttribute]
private double m_fixedRange;
    [StoreXmlSimpleFieldAttribute]
private string m_rangeGroup;
    [StoreXmlSimpleFieldAttribute]
private bool m_showOnGraph;
    [StoreXmlSimpleFieldAttribute]
private bool m_isSelected;
    [StoreXmlFieldAttribute]
private LoadTestCounterDescriptor m_counterDescriptor;
    [StoreXmlSimpleFieldAttribute]
private string m_counterMetadata;
    public int ColorArgb { get; public set; }
    public int LineStyle { get; public set; }
    public bool ShowOnGraph { get; public set; }
    public bool Selected { get; public set; }
    public bool IsAutoRange { get; }
    public double FixedRange { get; public set; }
    public string RangeGroup { get; public set; }
    public LoadTestCounterDescriptor CounterDescriptor { get; public set; }
    public string CounterMetadata { get; public set; }
    public LoadTestPlotDescriptor(LoadTestPlotDescriptor copy);
    public sealed virtual object Clone();
    public int get_ColorArgb();
    public void set_ColorArgb(int value);
    public int get_LineStyle();
    public void set_LineStyle(int value);
    public bool get_ShowOnGraph();
    public void set_ShowOnGraph(bool value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public bool get_IsAutoRange();
    public double get_FixedRange();
    public void set_FixedRange(double value);
    public string get_RangeGroup();
    public void set_RangeGroup(string value);
    public LoadTestCounterDescriptor get_CounterDescriptor();
    public void set_CounterDescriptor(LoadTestCounterDescriptor value);
    public string get_CounterMetadata();
    public void set_CounterMetadata(string value);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPlugInException : Exception {
    public LoadTestPlugInException(string message);
    public LoadTestPlugInException(string message, Exception innerException);
    protected LoadTestPlugInException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestPostRunCounterData : object {
    private LoadTestCounterCategoryDataCollection m_newCategories;
    private LoadTestCounterDataCollection m_newCounters;
    private LoadTestCounterInstanceDataCollection m_newInstances;
    private LoadTestCounterSampleCollection m_samples;
    private Dictionary`2<int, LoadTestCounterSample> m_samplesByInstanceId;
    private Dictionary`2<int, InstanceSummaryBuilder> m_instanceSummaryBuilders;
    public LoadTestCounterCategoryDataCollection NewCategories { get; }
    public LoadTestCounterDataCollection NewCounters { get; }
    public LoadTestCounterInstanceDataCollection NewInstances { get; }
    public LoadTestCounterSampleCollection Samples { get; }
    public IEnumerable`1<InstanceSummaryBuilder> InstanceSummaryBuilders { get; }
    public LoadTestCounterCategoryDataCollection get_NewCategories();
    public LoadTestCounterDataCollection get_NewCounters();
    public LoadTestCounterInstanceDataCollection get_NewInstances();
    public LoadTestCounterSampleCollection get_Samples();
    public IEnumerable`1<InstanceSummaryBuilder> get_InstanceSummaryBuilders();
    public void AddSample(LoadTestCounterSample sample);
    public LoadTestCounterSample GetSample(int instanceId);
    public void AddInstanceSummaryBuilder(InstanceSummaryBuilder instanceSummaryBuilder);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestRequestUrlsExceededException : LoadTestException {
    public LoadTestRequestUrlsExceededException(string message);
    public LoadTestRequestUrlsExceededException(string message, Exception innerException);
    protected LoadTestRequestUrlsExceededException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestRestartInfo : object {
    private static string RESTART_INFO_FILENAME;
    [CompilerGeneratedAttribute]
private bool <RunStartedReported>k__BackingField;
    private Guid m_runId;
    private DateTime m_startTime;
    private int m_processInstance;
    private List`1<int> m_lastErrorIds;
    private int m_lastIterationId;
    private Dictionary`2<string, int> m_scenarioUserLoads;
    private static object s_lockNode;
    public Dictionary`2<string, int> ScenarioUserLoads { get; }
    public Guid RunId { get; }
    public DateTime StartTime { get; }
    public int ProcessInstance { get; public set; }
    public List`1<int> LastErrorIds { get; }
    public int LastIterationId { get; public set; }
    public bool RunStartedReported { get; public set; }
    public LoadTestRestartInfo(Guid runId, DateTime startTime);
    private static LoadTestRestartInfo();
    public static void Write(LoadTestRestartInfo restartInfo);
    public static LoadTestRestartInfo Read();
    public static void Clear();
    public Dictionary`2<string, int> get_ScenarioUserLoads();
    public Guid get_RunId();
    public DateTime get_StartTime();
    public int get_ProcessInstance();
    public void set_ProcessInstance(int value);
    public List`1<int> get_LastErrorIds();
    public int get_LastIterationId();
    public void set_LastIterationId(int value);
    [CompilerGeneratedAttribute]
public bool get_RunStartedReported();
    [CompilerGeneratedAttribute]
public void set_RunStartedReported(bool value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResult : TestResult {
    [StoreXmlSimpleFieldAttribute]
private int m_runId;
    [StoreXmlSimpleFieldAttribute]
private DateTime m_controllerStartTime;
    [StoreXmlSimpleFieldAttribute]
private LoadTestRunStatus m_runStatus;
    [StoreXmlSimpleFieldAttribute]
private LoadTestResultsStoreType m_resultsStoreType;
    [StoreXmlSimpleFieldAttribute]
private string m_resultsRepositoryConnectString;
    [StoreXmlSimpleFieldAttribute]
private int m_loadTestDuration;
    [StoreXmlSimpleFieldAttribute]
private int m_loadTestWarmupTime;
    [StoreXmlSimpleFieldAttribute]
private bool m_previouslyViewed;
    [StoreXmlFieldAttribute]
private LoadTestConsoleState m_analyzerViewstate;
    [NonPersistableAttribute]
private LoadTestRigInfo m_rigInfo;
    [StoreXmlFieldAttribute]
private LoadTestResultSummary m_summary;
    [NonPersistableAttribute]
private bool m_isPermanentResult;
    [NonPersistableAttribute]
private bool m_isReloadedResult;
    [EditorBrowsableAttribute("1")]
[WarehouseFactFieldAttribute("Result", "5")]
public string ExecutionIdString { get; }
    public bool IsPermanentResult { get; }
    public bool IsReloadedResult { get; }
    public LoadTestResultsStoreType ResultsStoreType { get; }
    public string ResultsRepositoryConnectString { get; }
    public bool PreviouslyViewed { get; public set; }
    [WarehouseFactFieldAttribute("LoadTestDuration", "5")]
public int LoadTestDuration { get; }
    [WarehouseFactFieldAttribute("LoadTestWarmupTime", "5")]
public int LoadTestWarmupTime { get; }
    [WarehouseFactFieldAttribute("Start Time", "5")]
public DateTime ControllerStartTime { get; public set; }
    [WarehouseFactFieldAttribute("Actual Duration", "5")]
public double LoadTestActualDuration { get; }
    [WarehouseDimensionFieldAttribute("Load Test Agent List", "10")]
public string LoadTestAgentNames { get; }
    public object AnalyzerViewstate { get; public set; }
    public int RunId { get; internal set; }
    public LoadTestRigInfo RigInfo { get; }
    public LoadTestRunStatus RunStatus { get; }
    public LoadTestResultSummary Summary { get; }
    public LoadTestResultDetails Details { get; public set; }
    public bool HasRepositoryResult { get; }
    public bool TestCompleted { get; }
    public LoadTestResult(Guid runId, ITestElement test);
    public LoadTestResult(Guid runId, ITestElement test, LoadTestRigInfo rigInfo);
    public void Merge(TestResultMessage report);
    public static string LoadTestRunStatusString(LoadTestRunStatus runStatus);
    public virtual object Clone();
    public string get_ExecutionIdString();
    public bool get_IsPermanentResult();
    public bool get_IsReloadedResult();
    public LoadTestResultsStoreType get_ResultsStoreType();
    public string get_ResultsRepositoryConnectString();
    public bool get_PreviouslyViewed();
    public void set_PreviouslyViewed(bool value);
    public int get_LoadTestDuration();
    public int get_LoadTestWarmupTime();
    public DateTime get_ControllerStartTime();
    public void set_ControllerStartTime(DateTime value);
    public double get_LoadTestActualDuration();
    public virtual string get_LoadTestAgentNames();
    public object get_AnalyzerViewstate();
    public void set_AnalyzerViewstate(object value);
    internal void set_RunId(int value);
    public int get_RunId();
    public LoadTestRigInfo get_RigInfo();
    public LoadTestRunStatus get_RunStatus();
    public LoadTestResultSummary get_Summary();
    public void set_Details(LoadTestResultDetails value);
    public LoadTestResultDetails get_Details();
    public bool get_HasRepositoryResult();
    public bool get_TestCompleted();
    private LoadTestResultDetails GetDetails();
    private void UpdateDetails(LoadTestResultDetails details);
    internal void UpdateStatus(LoadTestRunStatus newRunStatus);
    private static string GetComputerInfo(LoadTestRigInfo rigInfo);
    private void Stopped(DateTime endTime, TestOutcome outcome);
    private void LogLoadRunTelemetryData();
    private void SafeExecute(Action codeToExecute);
    private void LogLoadSettingsTelemetryData();
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultDetails : object {
    [CompilerGeneratedAttribute]
private EventHandler StatusChanged;
    [CompilerGeneratedAttribute]
private EventHandler ResultsReceived;
    private bool m_isRepositoryResult;
    private int m_runId;
    private LoadTestResultsRepositoryReader m_reader;
    private int m_sampleRateInSeconds;
    private LoadTestResult m_loadTestResult;
    private WebTestSuite m_loadTest;
    private LoadTestRunStatus m_runStatus;
    private TestOutcome m_outcome;
    private TestResultErrorInfo m_errorInfo;
    private DateTime m_startTime;
    private DateTime m_clientStartTime;
    private DateTime m_endTime;
    private int m_estimatdMillisecondsToReadCounterFromDatabase;
    private bool m_isLocalRun;
    private string m_controllerName;
    private string m_description;
    private string m_comment;
    private string m_runUser;
    private String[] m_agentNames;
    private string m_resultsRepositoryConnectString;
    private bool m_listeningForFinishedEvent;
    private int m_testsCompleted;
    private int m_warmupTime;
    private int m_cooldownTime;
    private int m_runDuration;
    private int m_schemaRevision;
    private object m_intervalProcessingLock;
    private LoadTestCounterIntervalData m_lastIntervalData;
    private Hashtable m_mapCategoryIdToCategory;
    private Hashtable m_mapCounterIdToCounter;
    private Hashtable m_mapInstanceIdToStat;
    private Hashtable m_mapDescriptorToStat;
    private Hashtable m_mapBaseDescriptorAndMetatdataToStat;
    private Hashtable m_mapRequestIdToRequestEntry;
    private Hashtable m_mapTransactionIdToTransactionEntry;
    private Hashtable m_mapTestIdToTestName;
    private LoadTestStatCollection m_newStats;
    private LoadTestStatCollection m_transactionStats;
    private LoadTestStatCollection m_pageStats;
    private LoadTestStatCollection m_testStats;
    private LoadTestStatCollection m_requestStats;
    private LoadTestStatCollection m_rigStats;
    private LoadTestStatCollection m_agentStats;
    private List`1<ThresholdViolationResult> m_allThresholdViolations;
    private List`1<ThresholdViolationResult> m_newThresholdViolations;
    private List`1<LoadTestPageByNetworkSummary> m_pageByNetworkSummaries;
    private List`1<LoadTestTransactionStatistic> m_transactionStatistics;
    private Dictionary`2<int, string> m_dataCollectorLogDictionary;
    private List`1<LoadTestFileAttachmentInfo> m_profilerAttachments;
    private List`1<LoadTestFileAttachmentInfo> m_otherFileAttachments;
    private Hashtable m_hashtableErrors;
    private ErrorRollupCounter m_totalCounter;
    private ErrorRollupCounterCollection m_errorCounters;
    private HashSet`1<string> m_tempFilePaths;
    private List`1<LoadTestMessageType> m_messageTypes;
    public LoadTestResult LoadTestResult { get; public set; }
    public WebTestSuite LoadTest { get; internal set; }
    public LoadTestRunStatus RunStatus { get; internal set; }
    public TestOutcome Outcome { get; internal set; }
    public string RunUser { get; }
    public TestResultErrorInfo ErrorInfo { get; internal set; }
    public DateTime ControllerStartTime { get; internal set; }
    public DateTime ClientStartTime { get; internal set; }
    public DateTime ControllerEndTime { get; internal set; }
    public int RunId { get; internal set; }
    public bool IsRepositoryResult { get; }
    public int IntervalsInCompletedRun { get; }
    public int TestsCompleted { get; }
    public bool HasRepositoryResult { get; }
    public int SampleRate { get; }
    public bool IsLocalRun { get; internal set; }
    public string ControllerName { get; internal set; }
    public string Description { get; }
    public string Comment { get; }
    public int WarmupTime { get; }
    public int CooldownTime { get; }
    public int RunDuration { get; }
    public int SchemaRevision { get; }
    public String[] AgentNames { get; internal set; }
    public string ResultsRepositoryConnectString { get; internal set; }
    public string ResultsRepositoryDataSource { get; }
    public string ResultsRepositoryDatabase { get; }
    public LoadTestCounterIntervalData LastIntervalData { get; }
    public LoadTestStatCollection AllStats { get; }
    public LoadTestStatCollection TransactionStats { get; }
    public LoadTestStatCollection PageStats { get; }
    public LoadTestStatCollection RequestStats { get; }
    public LoadTestStatCollection TestStats { get; }
    public LoadTestStatCollection RigStats { get; }
    public LoadTestStatCollection AgentStats { get; }
    public List`1<ThresholdViolationResult> NewThresholdViolations { get; }
    public List`1<ThresholdViolationResult> AllThresholdViolations { get; }
    public ErrorRollupCounter TotalErrorRollupCounter { get; }
    public ErrorRollupCounterCollection ErrorRollupCounters { get; }
    public List`1<LoadTestMessageType> MessageTypes { get; }
    public List`1<LoadTestPageByNetworkSummary> PageByNetworkSummaries { get; }
    public List`1<LoadTestTransactionStatistic> DetailedTransactionStatistics { get; }
    public Dictionary`2<int, string> DataCollectorLogDictionary { get; }
    public bool HasDataCollectorAttachments { get; }
    public List`1<LoadTestFileAttachmentInfo> DataCollectorAttachments { get; }
    public bool HasProfilerData { get; }
    public List`1<LoadTestFileAttachmentInfo> ProfilerAttachments { get; }
    public int EstimatedMillisecondsToReadCounterFromDatabase { get; public set; }
    public LoadTestResultDetails(LoadTestResult loadTestResult, TestOutcome outcome, TestResultErrorInfo errorInfo);
    [CompilerGeneratedAttribute]
public void add_StatusChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StatusChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_ResultsReceived(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ResultsReceived(EventHandler value);
    private void Initialize();
    public LoadTestResult get_LoadTestResult();
    public void set_LoadTestResult(LoadTestResult value);
    public void OpenRepository(string repositoryConnectString, int runId);
    public void CloseRepository();
    public void AddSamplesToLoadTestStats(List`1<LoadTestStat> stats);
    public void RecordCounterIntervalData(LoadTestCounterIntervalData intervalData);
    public void GetInitialDetailRange(DateTime& selectedStartTime, DateTime& selectedEndTime);
    public List`1<LoadTestDetailIdentifier> GetUniqueDetailNames(LoadTestDetailResultType resultType);
    public void GetUserDetailData(LoadTestDetailGraphDescriptor graphDescriptor, IDetailResultProcessor resultProcessor, DetailGraphOptions options);
    public void GetUserPageDetailData(LoadTestDetailGraphDescriptor graphDescriptor, IDetailResultProcessor resultProcessor, DetailGraphOptions options);
    public void GetUserTransactionDetail(LoadTestDetailGraphDescriptor graphDescriptor, IDetailResultProcessor resultProcessor, DetailGraphOptions options);
    public List`1<LoadTestDetailGraphDescriptor> GetAvailableDetailTypes();
    public List`1<LoadTestStat> GetLoadTestStats(List`1<LoadTestCounterDescriptor> counterDescriptors);
    public LoadTestStat GetLoadTestStat(LoadTestCounterDescriptor descriptor);
    public LoadTestStat GetLoadTestStat(int counterInstanceId);
    public LoadTestStat GetLoadTestStat(LoadTestCounterDescriptor descriptor, string metadata);
    public string GetCounterDescriptorMetadata(LoadTestCounterDescriptor descriptor);
    public WebLoadTransactionMapEntry GetTransactionMapEntry(int transactionId);
    public WebLoadRequestMapEntry GetRequestMapEntry(int webRequestInstanceId);
    public string GetRequestName(LoadTestCounterDescriptor descriptor);
    public string GetRequestUri(LoadTestCounterDescriptor descriptor);
    internal static string GetRequestName(string requestUrl);
    public string GetTransactionName(LoadTestCounterDescriptor descriptor);
    public void GetScenarioAndTestNameForDescriptor(LoadTestCounterDescriptor descriptor, String& scenarioName, String& testName);
    public bool GetScenarioAndTestNameForTestId(int testCaseId, String& scenarioName, String& testName);
    public string GetUrlFromRequestMap(LoadTestCounterDescriptor descriptor);
    public string GetScenarioNameForScenarioCounter(LoadTestCounterDescriptor descriptor);
    public LoadTestStatCollection GetNewLoadTestStats();
    public WebTestErrorReportCollection GetErrorsByTypeAndSubType(WebTestErrorType errorType, string errorSubType);
    public WebTestErrorReportCollection GetErrorsByRequest(LoadTestCounterDescriptor descriptor);
    public WebTestErrorReportCollection GetErrorsByTest(LoadTestCounterDescriptor descriptor);
    public WebTestErrorReportCollection GetErrorsByAgent(LoadTestCounterDescriptor descriptor);
    public WebTestErrorReportCollection GetErrorsAll();
    public WebTestErrorDetail GetErrorDetail(string agentName, int messageId);
    public List`1<LoadTestTestResult> GetTestDetails(string orderByColumn, bool orderAscending);
    public TestResult GetTestLog(string agentName, int testLogId);
    public List`1<LoadTestSqlTraceRow> GetSqlTraceData(string orderByColumn, bool orderAscending);
    public List`1<ThresholdViolationResult> GetThresholdViolationData(string orderByColumn, bool orderAscending);
    public string GetMachineDisplayText(string machineName);
    public void UpdateDescriptionAndComment(string description, string comment);
    public void UpdateLoadTestResult(LoadTestResult result);
    public void Lock();
    public void Unlock();
    internal void set_LoadTest(WebTestSuite value);
    public WebTestSuite get_LoadTest();
    internal void set_RunStatus(LoadTestRunStatus value);
    public LoadTestRunStatus get_RunStatus();
    internal void set_Outcome(TestOutcome value);
    public TestOutcome get_Outcome();
    public string get_RunUser();
    internal void set_ErrorInfo(TestResultErrorInfo value);
    public TestResultErrorInfo get_ErrorInfo();
    internal void set_ControllerStartTime(DateTime value);
    public DateTime get_ControllerStartTime();
    internal void set_ClientStartTime(DateTime value);
    public DateTime get_ClientStartTime();
    internal void set_ControllerEndTime(DateTime value);
    public DateTime get_ControllerEndTime();
    internal void set_RunId(int value);
    public int get_RunId();
    public bool get_IsRepositoryResult();
    public int get_IntervalsInCompletedRun();
    public int get_TestsCompleted();
    public bool get_HasRepositoryResult();
    public int get_SampleRate();
    internal void set_IsLocalRun(bool value);
    public bool get_IsLocalRun();
    internal void set_ControllerName(string value);
    public string get_ControllerName();
    public string get_Description();
    public string get_Comment();
    public int get_WarmupTime();
    public int get_CooldownTime();
    public int get_RunDuration();
    public int get_SchemaRevision();
    internal void set_AgentNames(String[] value);
    public String[] get_AgentNames();
    internal void set_ResultsRepositoryConnectString(string value);
    public string get_ResultsRepositoryConnectString();
    public string get_ResultsRepositoryDataSource();
    public string get_ResultsRepositoryDatabase();
    public LoadTestCounterIntervalData get_LastIntervalData();
    public LoadTestStatCollection get_AllStats();
    public LoadTestStatCollection get_TransactionStats();
    public LoadTestStatCollection get_PageStats();
    public LoadTestStatCollection get_RequestStats();
    public LoadTestStatCollection get_TestStats();
    public LoadTestStatCollection get_RigStats();
    public LoadTestStatCollection get_AgentStats();
    public List`1<ThresholdViolationResult> get_NewThresholdViolations();
    public List`1<ThresholdViolationResult> get_AllThresholdViolations();
    public ErrorRollupCounter get_TotalErrorRollupCounter();
    public ErrorRollupCounterCollection get_ErrorRollupCounters();
    public List`1<LoadTestMessageType> get_MessageTypes();
    public List`1<LoadTestPageByNetworkSummary> get_PageByNetworkSummaries();
    public List`1<LoadTestTransactionStatistic> get_DetailedTransactionStatistics();
    public Dictionary`2<int, string> get_DataCollectorLogDictionary();
    public DataTable GetDataCollectorLog(int dataCollectorLogId, string orderByColumn, bool orderAscending);
    public string GetFileAttachmentFromRepository(LoadTestFileAttachmentInfo fileAttachmentInfo);
    public void DeleteTempFiles();
    public bool get_HasDataCollectorAttachments();
    public List`1<LoadTestFileAttachmentInfo> get_DataCollectorAttachments();
    public bool get_HasProfilerData();
    public List`1<LoadTestFileAttachmentInfo> get_ProfilerAttachments();
    public int get_EstimatedMillisecondsToReadCounterFromDatabase();
    public void set_EstimatedMillisecondsToReadCounterFromDatabase(int value);
    private LoadTestCounterDescriptor CreateCounterDescriptor(LoadTestCounterInstanceData instanceData);
    private void BuildTestIdToTestNameMap(WebTestSuite testSuite);
    private void BuildTestIdToTestNameMap(String[] names);
    private static string CreateBaseDescriptorAndMetadataKey(LoadTestCounterDescriptor descriptor, string metadata);
    private LoadTestStat CreateLoadTestStat(int instanceId, LoadTestCounterDescriptor descriptor);
    private void UpdateErrors(WebTestErrorReportCollection errors);
    private LoadTestResultsRepositoryReader GetRepositoryReader();
    private static void ReleaseRepositoryReader(LoadTestResultsRepositoryReader reader);
    private void tmi_TestRunFinishedEvent(object sender, TestRunEventArgs e);
    private void FireResultsReceived();
    private void FireStatusChanged();
    private static void FireResultsReceivedProc(object stateInfo);
    private static void FireStatusChangedProc(object stateInfo);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultDetailsManager : object {
    private static Dictionary`2<TestExecId, LoadTestResultDetails> s_detailsDictionary;
    private static LoadTestResultDetailsManager();
    public static void AddDetails(LoadTestResult result, LoadTestResultDetails details);
    public static LoadTestResultDetails GetDetails(LoadTestResult result);
    public static void RemoveDetails(LoadTestResult result);
    public static void RemoveDetails(TestResultId[] testResultIds);
    private static void RemoveDetailsByExecId(TestExecId testExecId);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultMessage : LoadTestResult {
    private object m_loadTestObject;
    private Byte[] m_bytes;
    public object LoadTestObject { get; }
    public int ApproximateSize { get; }
    public int SerializedLength { get; }
    internal LoadTestResultMessage(Guid runId, ITestElement test, object loadTestObject, bool spoolMessage);
    internal LoadTestResultMessage(Guid runId, ITestElement test, object loadTestObject);
    public object get_LoadTestObject();
    public sealed virtual int get_ApproximateSize();
    public int get_SerializedLength();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultsCollector : object {
    public static string SINGLE_INSTANCE_NAME;
    private static string SINGLE_INSTANCE_DISPLAY_NAME;
    public static string COUNTER_SET_TYPE_LOADTEST;
    public static string COUNTER_SET_TYPE_AGENT;
    public static string COUNTER_SET_TYPE_CONTROLLER;
    private static int s_noDbLoadTestRunId;
    private int m_loadTestRunId;
    private LoadTestPerformanceCounterReporter m_perfCounterReporter;
    private WebLoadRequestMap m_requestMap;
    private WebLoadTransactionMap m_transactionMap;
    private WebTestSuite m_suite;
    private RunConfig m_runConfig;
    private LoadTestRigInfo m_rigInfo;
    private String[] m_agentNames;
    private LoadTestUserLicenseManager m_licenseManager;
    private LoadTestIntervalCallback m_intervalDataCallback;
    private LoadTestResultsCollectorStatusCallback m_statusCallback;
    private CounterSet m_loadTestCounterSet;
    private Dictionary`2<string, CounterSet> m_computerCounterSets;
    private Dictionary`2<string, string> m_agentMachineNames;
    private int m_samplingInterval;
    private int m_goalSamplingInterval;
    private int m_maxNumberOfDetailsToProcess;
    private int m_maxIntervals;
    private int m_firstMeasurementInterval;
    private int m_measurementIntervalNumber;
    private int m_lastMeasurementInterval;
    private bool m_started;
    private bool m_warmingUp;
    private bool m_coolingDown;
    private bool m_collectingCounters;
    private int m_completedAgents;
    private HashSet`1<string> m_disconnectedAgents;
    private object m_stopCollectingCountersLock;
    private ManualResetEvent m_stopCollectingCountersEvent;
    private ManualResetEvent m_stoppedCollectingEvent;
    private ManualResetEvent m_stoppedEvent;
    private ManualResetEvent m_goalProfileMonitorStoppedEvent;
    private Thread m_goalProfileMonitorThread;
    private ILoadTestCounterWriter m_counterWriter;
    private LoadTestCounterWriterQueue m_counterWriterQueue;
    private LoadTestSqlTracer m_sqlTracer;
    private DateTime m_collectorStartTime;
    private DateTime m_startTime;
    private DateTime m_expectedEndTime;
    private DateTime m_collectorEndTime;
    private TestOutcome m_outcome;
    private LoadTestCounterIntervalData m_intervalData;
    private IControllerContext m_controllerContext;
    private Dictionary`2<string, GoalProfileData> m_goalProfiles;
    private object m_goalProfilesLock;
    private object m_goalBasedProcessingLock;
    private Dictionary`2<string, int> m_categoryMap;
    private Dictionary`2<string, int> m_counterMap;
    private Dictionary`2<string, InstanceSummaryBuilder> m_instanceMap;
    private StringCollection m_pageInstanceNames;
    private StringCollection m_testInstanceNames;
    private StringCollection m_transactionInstanceNames;
    private int m_lastRigSummaryIntervalReported;
    private int m_intervalId;
    private int m_categoryId;
    private int m_counterId;
    private int m_instanceId;
    private int m_transactionMapEntryIndex;
    private int m_requestMapEntryIndex;
    private Exception m_collectionProcException;
    private List`1<ThresholdRuleInvocation> m_thresholdRuleInvocations;
    private AutoResetEvent m_rigSummaryReceivedEvent;
    private AutoResetEvent m_goalBasedProcessingDoneForThisInterval;
    private ArrayList m_counterErrors;
    private int m_maxErrorsPerType;
    private Dictionary`2<string, int> m_errorCountByType;
    private int m_requestErrorsProcessed;
    private Hashtable m_agentErrorInfoTable;
    private int m_readCategoryTimeout;
    private int m_categoryExistsTimeout;
    private int m_maxCategoryTimeouts;
    private LoadTestThreadPool m_threadPool;
    private DateTime m_timeoutTime;
    private int m_collectCounterSetsActive;
    private ManualResetEvent m_allCounterSetsCompleteEvent;
    private object m_processCategoryLock;
    private bool m_maxRequestUrlsExceededReported;
    private int m_thresholdViolationCount;
    private WebLoadStatistic m_timeToCollectNonLoadCounters;
    private WebLoadStatistic m_timeToCollectLoadCounters;
    private WebLoadStatistic m_timeWaitingForLoadTestCounters;
    private WebLoadStatistic m_timeToCollectAndWrite;
    private FileAggregator m_fileAggregator;
    private Dictionary`2<DataCollectionContext, DataCollectionContext> m_dataCollectionContexts;
    private Dictionary`2<SessionId, SessionId> m_dataCollectionSessions;
    private Dictionary`2<Uri, string> m_dataCollectorNames;
    private Dictionary`2<int, string> m_logDisplayNames;
    private Dictionary`2<int, string> m_logTimestampColumnNames;
    private Dictionary`2<int, string> m_logDurationColumnNames;
    private DateTime previousIntervalStartTime;
    private bool m_processingGoalProfiles;
    private string m_restartInfoDirectory;
    private LoadTestControllerRestartInfo m_restartInfo;
    private bool m_restartInfoWritingEnabled;
    private static string AutCollectionErrorSubType;
    private static string LoadGeneratorLocationSubType;
    public int LoadTestRunId { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public bool RanToCompletion { get; }
    public LoadTestResultsCollector(WebTestSuite suite, LoadTestIntervalCallback intervalDataCallback, LoadTestResultsCollectorStatusCallback statusCallback, IControllerContext controllerContext);
    private static LoadTestResultsCollector();
    public int get_LoadTestRunId();
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public bool get_RanToCompletion();
    public void Initialize(TestRun testRun, String[] agentNames);
    private void InitializeIntervalData();
    private bool GetRestartInfoWriteEnabled(TestRun testRun);
    internal void TestAgentDisconnected(string agentName);
    public void Terminate();
    public void Start(LoadTestRigInfo rigInfo, TestRun testRun);
    public void WarmupComplete();
    public void Stop();
    public LoadTestResultSummary GetLoadTestResultSummary();
    private ILoadTestCounterWriter InitializeAzureCounterWriter(TestRun testRun, string className);
    private void AddSummaryPerfCounter(LoadTestResultSummary summary, string machineName, string categoryName, string counterName, string instanceName, bool isOverallResultCounter, bool higherIsBetter);
    private void AddSummaryPerfCounters(LoadTestResultSummary summary, string machineName, string categoryName, string counterName, bool isOverallResultCounter, bool higherIsBetter);
    private static void AddSummaryPerfCounter(LoadTestResultSummary summary, string machineName, string categoryName, string counterName, string instanceName, bool isOverallResultCounter, bool higherIsBetter, float cumulativeValue);
    private void StopCollectingCounters(TestOutcome outcome);
    public void ProcessIntervalResults(WebLoadIntervalSummaryResults intervalResults);
    private void ProcessException(Exception e);
    public void ProcessException(Exception e, bool forceToRepository);
    public void ProcessException(Exception e, bool forceToRepository, bool useQueue);
    public bool ProcessDataCollectionMessage(DataCollectionMessage dataCollectionMessage);
    public void ProcessCollectedData();
    private void PostProcessLogDataTables();
    private bool ProcessTabularDataFile(CollectorDataEntry collectorData, string dataCollectorName, FileInfo fileInfo, ILoadTestTabularDataReader tabularDataReader);
    private static void ValidateTabularDataColumn(string columnNameKey, string columnName, Type expectedType, DataColumnCollection columns);
    public void ProcessPostRunCounterSample(LoadTestPostRunCounterData postRunCounterData, LoadTestCounterDescriptor counterDescriptor, int intervalNumber, CounterSample counterSample, CounterSample previousSample);
    public void ProcessItemResults(LoadTestItemResultReport itemResultReport);
    private void ProcessItemResultsFile(LoadTestItemResultReport itemResultReport);
    public void ProcessAdapterCommand(LoadTestAdapterCommand adapterCommand);
    public sealed virtual PerformanceCounterValue GetCounterValue(string machineName, string categoryName, string counterName, string instanceName);
    private void InitLoadTestCounterSet();
    private List`1<CounterSetMapping> GetResolvedCounterSetMappings();
    private void UpdateComputerCounterSets(List`1<CounterSetMapping> counterSetMappings, bool verifyCategoriesExist);
    private CounterSet GetComputerCounterSet(string computerName);
    private void ProcessErrors(ArrayList errors);
    private bool IsErrorLimitExceededForType(WebTestError error);
    private void CollectionProc();
    private LoadTestCounterIntervalData StartInterval(DateTime intervalStartTime);
    private void EndInterval(DateTime intervalEndTime);
    private void ProcessGoalProfiles(object objectState);
    private void VerifyCounterSet(object callerState);
    private void CollectNonLoadTestCounters(bool verifyOnly);
    private void CollectLoadTestCounters(bool includeRigTotals);
    private void CollectCounterSet(object callerState);
    private bool ProcessCounterSample(string machineName, string categoryName, string counterName, string instanceName, Counter counter, int counterId, bool hasLoadTestItemId, CounterSample sample, bool isLoadTestCounter, bool subtractWarmupValueForCumulativeValue);
    private bool WaitForLoadTestCounters();
    private int ApplyThresholdRules();
    private void ReportThresholdExceeded(PerformanceCounterValue counterValue, ThresholdRuleResult thresholdResult);
    private void ReportThresholdViolationCount(int thresholdViolationCount);
    private int ReportCategory(string machineName, string categoryName, DateTime categoryReadTime, long categoryTimeStamp100ns, LoadTestCounterCategoryDataCollection categories);
    private long GetCategoryTimeStamp(InstanceDataCollectionCollection instanceDataCollectionCollection);
    private int GetCategoryId(string machineName, string categoryName);
    private string GetCategoryKey(string machineName, string categoryName);
    private int ReportCounter(int categoryId, string counterName, bool higherIsBetter, LoadTestCounterDataCollection counters);
    private int GetCounterId(int categoryId, string counterName);
    private string GetCounterKey(int categoryId, string counterName);
    private InstanceSummaryBuilder ReportInstance(string categoryName, int counterId, string instanceName, bool isLoadTestCounter, bool hasLoadTestItemId, bool subtractWarmupValueForCumulativeValue, CounterSample newSample);
    private int GetLoadTestItemId(string instanceName);
    private int GetInstanceId(int counterId, string instanceName);
    public InstanceSummaryBuilder GetInstanceSummaryBuilder(string machineName, string categoryName, string counterName, string instanceName);
    private InstanceSummaryBuilder GetInstanceSummaryBuilder(int counterId, string instanceName);
    private List`1<KeyValuePair`2<string, InstanceSummaryBuilder>> GetInstanceSummaryBuilders(string machineName, string categoryName, string counterName);
    private string GetInstanceKey(int counterId, string instanceName);
    private string GetInstanceNameFromKey(string instanceKey);
    private void WriteInstanceSummaries();
    private void CheckExceptions(string exceptionMessageName);
    private void AddGoalProfilesFromLoadTest(WebTestSuite suite);
    private GoalProfileData AddOrReplaceGoalProfile(LoadTestGoalBasedLoadProfile goalProfile);
    private void StartProcessingNonLoadTestGoalProfiles();
    private void MonitorNonLoadTestGoalProfiles();
    private void ProcessGoalProfile(GoalProfileData goalProfileData);
    private void ProcessGoalProfileWithTimeOut(object objectState);
    private void ApplyPerformanceGoal(GoalProfileData goalProfileData, float sampleValue);
    private void SendAgents(object objectToSend);
    private WebTestErrorReport WrapExceptionInErrorReport(Exception e);
    private void LogPerf(string msg);
    [CompilerGeneratedAttribute]
private void <ProcessDataCollectionMessage>b__32_0(object sender, EventArgs`1<DataCollectionTextMessage> args);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultsCollectorSlowException : LoadTestException {
    public LoadTestResultsCollectorSlowException(string message);
    public LoadTestResultsCollectorSlowException(string message, Exception innerException);
    protected LoadTestResultsCollectorSlowException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultsCollectorStatusCallback : MulticastDelegate {
    public LoadTestResultsCollectorStatusCallback(object object, IntPtr method);
    public virtual void Invoke(LoadTestRunStatus runStatus);
    public virtual IAsyncResult BeginInvoke(LoadTestRunStatus runStatus, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultsCollectorTimeoutException : LoadTestException {
    public LoadTestResultsCollectorTimeoutException(string message);
    public LoadTestResultsCollectorTimeoutException(string message, Exception innerException);
    protected LoadTestResultsCollectorTimeoutException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultsEvent : LoadTestTelemetryEvent {
    private LoadTestRun _loadTestRun;
    private bool _profilerEnabled;
    private long _maxUserCount;
    private static int EventVersion;
    private static string SettingsEventName;
    private static string SettingsPropertyPrefix;
    public LoadTestResultsEvent(long maxUserCount, bool profilerEnabled, LoadTestRun loadTestRun);
    public virtual void PostTelemetryData();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultsRepositoryReader : object {
    private static int SQL_COMMAND_TIMEOUT;
    private string m_connectString;
    private SqlConnection m_connection;
    private bool m_logTimes;
    protected SqlConnection Connection { get; }
    public LoadTestResultsRepositoryReader(string connectString);
    public LoadTestResultsRepositoryReader(SqlConnection connection);
    public void Open();
    public void Close();
    protected SqlConnection get_Connection();
    public List`1<LoadTestRun> GetLoadTestRuns(bool skipLoadingWebTestSuite);
    public List`1<LoadTestRun> GetLoadTestRuns(bool skipLoadingWebTestSuite, bool skipInProgressRuns);
    private List`1<LoadTestRun> GetLoadTestRuns(bool skipLoadingWebTestSuite, string selectLoadTestStatement);
    public void GetInitialDetailRange(int loadTestRunId, DateTime& selectedStartTime, DateTime& selectedEndTime);
    public List`1<LoadTestDetailIdentifier> GetUniqueDetailNames(int loadTestRunId, LoadTestDetailResultType detailType);
    public List`1<LoadTestMessageType> GetMessageTypes(int loadTestRunId);
    public void GetUserDetail(int loadTestRunId, LoadTestDetailGraphDescriptor graphDescriptor, IDetailResultProcessor resultProcessor, DetailGraphOptions options);
    public void GetUserPageDetail(int loadTestRunId, LoadTestDetailGraphDescriptor graphDescriptor, IDetailResultProcessor resultProcessor, DetailGraphOptions options);
    public void GetUserTransactionDetail(int loadTestRunId, LoadTestDetailGraphDescriptor graphDescriptor, IDetailResultProcessor resultProcessor, DetailGraphOptions options);
    public List`1<LoadTestDetailGraphDescriptor> GetAvailableDetailTypes(int loadTestRunId);
    public LoadTestRun GetLoadTestRun(Guid loadTestRunId);
    public LoadTestRun GetLoadTestRun(int loadTestRunId);
    private LoadTestRun QueryLoadTestRun(string selectLoadTestStatement);
    private DateTime GetLastIntervalEndTime(int loadTestRunId, DateTime fallback);
    public void DeleteLoadTestRun(int loadTestRunId);
    public void DeleteLoadTestRuns(Guid guidTestRunId);
    public void UpdateRunDescriptionAndComment(int loadTestRunId, string description, string comment);
    public List`1<LoadTestCounterInstanceSummary> GetInstanceSummaries(int loadTestRunId, bool getPercentiles);
    internal long GetMaxUserCount(int loadTestRunId, string machineName);
    private long GetInstanceId(int loadTestRunId, string machineName, string categoryName, string counterName, string instanceName);
    private Dictionary`2<string, Dictionary`2<int, PercentileData>> GetPercentileDictionary(int loadTestRunId);
    private void AddPercentileDataToDictionary(int loadTestRunId, Dictionary`2<string, Dictionary`2<int, PercentileData>> percentileDictionary, string categoryName);
    public List`1[] GetSamplesForInstances(int loadTestRunId, Int32[] instanceIds);
    public List`1<LoadTestCounterSample> GetSamplesForInstance(int loadTestRunId, int instanceId);
    private List`1<LoadTestCounterSample> GetInstanceSamples(int loadTestRunId, int instanceId, string storeProcedureName);
    private float GetCumulativeValueForInstance(int loadTestRunId, int instanceId);
    public String[] GetAgents(int loadTestRunId);
    public LoadTestCounterCategoryDataCollection GetCounterCategories(int loadTestRunId);
    public String[] GetTestCases(int loadTestRunId);
    public List`1<LoadTestMessageTypeSummary> GetMessageTypeSummary(int loadTestRunId);
    private string GetLastMessageTextForType(int loadTestRunId, WebTestErrorType errorType, string subType);
    public WebTestErrorReportCollection GetMessagesByRequest(int loadTestRunId, int requestId, int maxRowsReturned);
    public WebTestErrorReportCollection GetMessagesByAgent(int loadTestRunId, string agentName, int maxRowsReturned);
    public WebTestErrorReportCollection GetMessagesByTest(int loadTestRunId, string testName, string scenarioName, int maxRowsReturned);
    public WebTestErrorReportCollection GetMessagesByType(int loadTestRunId, WebTestErrorType messageType, string subType, int maxRowsReturned);
    public WebTestErrorReportCollection GetMessagesAll(int loadTestRunId, int maxRowsReturned);
    public WebTestErrorDetail GetErrorDetail(int loadTestRunId, string agentName, int messageId);
    public TestResult GetTestLog(int loadTestRunId, string agentName, int testLogId);
    public List`1<LoadTestTestResult> GetTestDetails(int loadTestRunId, string orderByColumn, bool orderAscending);
    public Dictionary`2<int, string> GetDataCollectorLogDictionary(int loadTestRunId);
    public static string GetDataCollectorDisplayNameWithMachine(string dataCollectorName, string machineName);
    public DataTable GetDataCollectorLog(int loadTestRunId, int dataCollectorLogId, string orderByColumn, bool orderAscending);
    public List`1<LoadTestFileAttachmentInfo> GetFileAttachementInfo(int loadTestRunId);
    public string GetFileAttachmentFromRepository(int loadTestRunId, string loadTestName, int fileAttachmentId);
    private WebTestErrorReportCollection GetMessages(SqlCommand sqlCommand, int loadTestRunId, int maxRowsReturned);
    public WebLoadTransactionMapEntryCollection GetTransactionMap(int loadTestRunId);
    public WebLoadRequestMapEntryCollection GetRequestMap(int loadTestRunId);
    public List`1<ThresholdViolationResult> GetThresholdViolations(int loadTestRunId, string orderByColumn, bool orderAscending);
    public List`1<LoadTestPageByNetworkSummary> GetPageByNetworkSummaries(int loadTestRunId);
    public List`1<LoadTestTransactionStatistic> GetTransactionStatistics(int loadTestRunId);
    public List`1<LoadTestSqlTraceRow> GetSqlTraceData(int loadTestRunId, string orderByColumn, bool orderAscending);
    private SqlCommand CreateSqlCommand(string sql);
    private SqlCommand CreateStoredProcedureCommand(string storedProcedureName);
    private SqlDataReader ExecuteStoredProcedeure(SqlCommand sqlCommand);
    private string GenerateDetailResultXml(DetailGraphOptions options);
    private string GenerateDetailErrorFilteringXml(DetailGraphOptions options);
    private void BindXmlInt(XmlTextWriter writer, string attributeName, int value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestResultSummary : object {
    private List`1<PerformanceCounterResult> m_performanceCounterResults;
    private List`1<LoadTestPageSummary> m_pageSummaries;
    private List`1<LoadTestTestSummary> m_testSummaries;
    private List`1<LoadTestTransactionSummary> m_transactionSummaries;
    public List`1<PerformanceCounterResult> PerformanceCounterResults { get; }
    public List`1<LoadTestPageSummary> PageSummaries { get; }
    public List`1<LoadTestTestSummary> TestSummaries { get; }
    public List`1<LoadTestTransactionSummary> TransactionSummaries { get; }
    public List`1<PerformanceCounterResult> get_PerformanceCounterResults();
    public List`1<LoadTestPageSummary> get_PageSummaries();
    public List`1<LoadTestTestSummary> get_TestSummaries();
    public List`1<LoadTestTransactionSummary> get_TransactionSummaries();
    internal void LogContents();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestRigInfo : object {
    private bool m_isLocalRun;
    private string m_controllerName;
    private String[] m_agentNames;
    private string m_repositoryConnectString;
    private int m_loadTestRunId;
    public bool IsLocalRun { get; }
    public string ControllerName { get; }
    public String[] AgentNames { get; }
    public string RepositoryConnectString { get; }
    public int LoadTestRunId { get; public set; }
    public LoadTestRigInfo(bool isLocalRun, string controllerName, String[] agentNames, string repositoryConnectString);
    public bool get_IsLocalRun();
    public string get_ControllerName();
    public String[] get_AgentNames();
    public string get_RepositoryConnectString();
    public void set_LoadTestRunId(int value);
    public int get_LoadTestRunId();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestRun : object {
    private int m_runId;
    private Guid m_guidTestRunId;
    private string m_loadTestName;
    private string m_description;
    private string m_comment;
    private string m_runUser;
    private bool m_isLocalRun;
    private string m_controllerName;
    private DateTime m_startTime;
    private DateTime m_endTime;
    private int m_warmupTime;
    private int m_cooldownTime;
    private int m_runDuration;
    private WebTestSuite m_loadTest;
    private TestOutcome m_outcome;
    private int m_schemaRevision;
    public int RunId { get; }
    public Guid TestRunId { get; }
    public string LoadTestName { get; }
    public string Description { get; }
    public string Comment { get; }
    public string RunUser { get; }
    public string ControllerName { get; }
    public TestOutcome Outcome { get; }
    public bool IsLocalRun { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; internal set; }
    public int WarmupTime { get; internal set; }
    public int CooldownTime { get; internal set; }
    public int RunDuration { get; internal set; }
    public int SchemaRevision { get; internal set; }
    public WebTestSuite LoadTest { get; internal set; }
    public LoadTestRun(int runId, Guid guidTestRunId, string loadTestName, string description, string comment, bool isLocalRun, string controllerName, DateTime startTime, DateTime endTime, int warmupTime, int runDuration, TestOutcome outcome, int schemaRevision, int cooldownTime);
    public int get_RunId();
    public Guid get_TestRunId();
    public string get_LoadTestName();
    public string get_Description();
    public string get_Comment();
    public string get_RunUser();
    public string get_ControllerName();
    public TestOutcome get_Outcome();
    public bool get_IsLocalRun();
    public DateTime get_StartTime();
    internal void set_EndTime(DateTime value);
    public DateTime get_EndTime();
    internal void set_WarmupTime(int value);
    public int get_WarmupTime();
    internal void set_CooldownTime(int value);
    public int get_CooldownTime();
    internal void set_RunDuration(int value);
    public int get_RunDuration();
    internal void set_SchemaRevision(int value);
    public int get_SchemaRevision();
    internal void set_LoadTest(WebTestSuite value);
    public WebTestSuite get_LoadTest();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestRunDescriptor : object {
    public static Table[] s_PreferedTableOrder;
    private static int s_maxCountersOnAutomaticResponseTimeGraph;
    private static string s_LoadTestPageCategory;
    private static string s_LoadTestTestListCategory;
    private static string s_LoadTestTransactionCategory;
    private static string s_PageResponseTimeCounter;
    private static string s_TestResponseTimeCounter;
    private static string s_TransactionResponseTimeCounter;
    private static string s_defaultGraphNameKeyIndicators;
    private static string s_defaultGraphNameSUT;
    private static string s_defaultGraphNameRig;
    private static string s_defaultGraphNamePageResponseTime;
    private static string s_defaultGraphNameTestResponseTime;
    private static string s_defaultGraphNameTransactionResponseTime;
    private static List`1<string> s_defaultGraphNames;
    [StoreXmlSimpleFieldAttribute]
private bool m_isLegendPanelVisible;
    [StoreXmlSimpleFieldAttribute]
private bool m_isOverviewPanelVisible;
    [StoreXmlSimpleFieldAttribute]
private bool m_isCounterPanelVisible;
    [StoreXmlSimpleFieldAttribute]
private bool m_scrollingGraph;
    [StoreXmlSimpleFieldAttribute]
private bool m_minMaxGraph;
    [StoreXmlSimpleFieldAttribute]
private bool m_showHorizontalGridOnGraph;
    [StoreXmlSimpleFieldAttribute]
private bool m_showThresholdsOnGraph;
    [StoreXmlSimpleFieldAttribute]
private bool m_showComparison;
    [StoreXmlSimpleFieldAttribute]
private bool m_showZoom;
    [StoreXmlSimpleFieldAttribute]
private bool m_lockZoom;
    [StoreXmlSimpleFieldAttribute]
private View m_activeConsoleView;
    private ArrayList m_graphDescriptors;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedGraphPanel1;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedGraphPanel2;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedGraphPanel3;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedGraphPanel4;
    [StoreXmlSimpleFieldAttribute]
private PanelLayout m_graphPanelLayout;
    [StoreXmlSimpleFieldAttribute]
private PanelLayout m_tablePanelLayout;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedTablePanel1;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedTablePanel2;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedTablePanel3;
    [StoreXmlSimpleFieldAttribute]
private string m_selectedTablePanel4;
    [StoreXmlSimpleFieldAttribute]
private string m_controllerName;
    [StoreXmlSimpleFieldAttribute]
private bool m_isLocalRun;
    [StoreXmlSimpleFieldAttribute]
private Guid m_testRunId;
    [StoreXmlSimpleFieldAttribute]
private string m_repositoryConnectionString;
    [StoreXmlSimpleFieldAttribute]
private int m_repositoryRunId;
    [NonPersistableAttribute]
private bool m_useDefaultCounters;
    public LoadTestGraphDescriptor[] GraphDescriptors { get; }
    public bool IsLocalRun { get; public set; }
    public string ControllerName { get; public set; }
    public Guid TestRunId { get; public set; }
    public string RepositoryConnectionString { get; public set; }
    public int RepositoryRunId { get; public set; }
    public bool ScrollingGraph { get; public set; }
    public bool MinMaxGraph { get; public set; }
    public string SelectedGraphPanel1 { get; public set; }
    public string SelectedGraphPanel2 { get; public set; }
    public string SelectedGraphPanel3 { get; public set; }
    public string SelectedGraphPanel4 { get; public set; }
    public TableDescriptor SelectedTablePanel1 { get; public set; }
    public TableDescriptor SelectedTablePanel2 { get; public set; }
    public TableDescriptor SelectedTablePanel3 { get; public set; }
    public TableDescriptor SelectedTablePanel4 { get; public set; }
    public PanelLayout GraphPanelLayout { get; public set; }
    public PanelLayout TablePanelLayout { get; public set; }
    public View ActiveView { get; public set; }
    public bool ShowHorizontalGrid { get; public set; }
    public bool ShowThresholdsOnGraph { get; public set; }
    public bool CounterPanelVisible { get; public set; }
    public bool OverviewPanelVisible { get; public set; }
    public bool LegendPanelVisible { get; public set; }
    public bool ShowComparison { get; public set; }
    public bool ShowZoom { get; public set; }
    public bool LockZoom { get; public set; }
    public bool UseDefaultCounters { get; public set; }
    public LoadTestGraphDescriptor KeyIndicatorsGraphDescriptor { get; }
    public LoadTestGraphDescriptor RigGraphDescriptor { get; }
    public LoadTestGraphDescriptor SutGraphDescriptor { get; }
    public LoadTestGraphDescriptor PageResponseTimeGraphDescriptor { get; }
    public LoadTestGraphDescriptor TestResponseTimeGraphDescriptor { get; }
    public LoadTestGraphDescriptor TransactionResponseTimeGraphDescriptor { get; }
    public static int MaxCounterOnResponseTimeGraph { get; }
    private LoadTestRunDescriptor(LoadTestRunDescriptor copy);
    private static LoadTestRunDescriptor();
    public sealed virtual object Clone();
    public void AddGraphDescriptor(LoadTestGraphDescriptor graphDescriptor);
    public void RemoveGraphDescriptor(LoadTestGraphDescriptor graphDescriptor);
    public LoadTestGraphDescriptor GetGraphDescriptor(string name);
    public List`1<LoadTestCounterDescriptor> GetCounterDescriptorsOnAllGraphs();
    public List`1<LoadTestCounterDescriptor> GetCounterDescriptorsOnSelectedGraphs();
    public LoadTestGraphDescriptor GetDefaultGraphDescriptor();
    public void ClearZoomIntervals();
    public void EnsureHorizontalZoomIntervalsInitialized(int endInterval);
    public bool IsGraphActive();
    public bool IsSummaryActive();
    public bool IsTableActive();
    public bool IsUserDetailActive();
    public static string GetLocalizedDisplayNameForTable(Table table);
    public static TableDescriptor GetTableForDisplayName(string tableName);
    public LoadTestGraphDescriptor[] get_GraphDescriptors();
    public bool get_IsLocalRun();
    public void set_IsLocalRun(bool value);
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public Guid get_TestRunId();
    public void set_TestRunId(Guid value);
    public string get_RepositoryConnectionString();
    public void set_RepositoryConnectionString(string value);
    public int get_RepositoryRunId();
    public void set_RepositoryRunId(int value);
    public bool get_ScrollingGraph();
    public void set_ScrollingGraph(bool value);
    public bool get_MinMaxGraph();
    public void set_MinMaxGraph(bool value);
    public string get_SelectedGraphPanel1();
    public void set_SelectedGraphPanel1(string value);
    public string get_SelectedGraphPanel2();
    public void set_SelectedGraphPanel2(string value);
    public string get_SelectedGraphPanel3();
    public void set_SelectedGraphPanel3(string value);
    public string get_SelectedGraphPanel4();
    public void set_SelectedGraphPanel4(string value);
    public TableDescriptor get_SelectedTablePanel1();
    public void set_SelectedTablePanel1(TableDescriptor value);
    public TableDescriptor get_SelectedTablePanel2();
    public void set_SelectedTablePanel2(TableDescriptor value);
    public TableDescriptor get_SelectedTablePanel3();
    public void set_SelectedTablePanel3(TableDescriptor value);
    public TableDescriptor get_SelectedTablePanel4();
    public void set_SelectedTablePanel4(TableDescriptor value);
    public PanelLayout get_GraphPanelLayout();
    public void set_GraphPanelLayout(PanelLayout value);
    public PanelLayout get_TablePanelLayout();
    public void set_TablePanelLayout(PanelLayout value);
    public View get_ActiveView();
    public void set_ActiveView(View value);
    public bool get_ShowHorizontalGrid();
    public void set_ShowHorizontalGrid(bool value);
    public bool get_ShowThresholdsOnGraph();
    public void set_ShowThresholdsOnGraph(bool value);
    public bool get_CounterPanelVisible();
    public void set_CounterPanelVisible(bool value);
    public bool get_OverviewPanelVisible();
    public void set_OverviewPanelVisible(bool value);
    public bool get_LegendPanelVisible();
    public void set_LegendPanelVisible(bool value);
    public bool get_ShowComparison();
    public void set_ShowComparison(bool value);
    public bool get_ShowZoom();
    public void set_ShowZoom(bool value);
    public bool get_LockZoom();
    public void set_LockZoom(bool value);
    public bool get_UseDefaultCounters();
    public void set_UseDefaultCounters(bool value);
    public LoadTestGraphDescriptor get_KeyIndicatorsGraphDescriptor();
    public LoadTestGraphDescriptor get_RigGraphDescriptor();
    public LoadTestGraphDescriptor get_SutGraphDescriptor();
    public LoadTestGraphDescriptor get_PageResponseTimeGraphDescriptor();
    public LoadTestGraphDescriptor get_TestResponseTimeGraphDescriptor();
    public LoadTestGraphDescriptor get_TransactionResponseTimeGraphDescriptor();
    public static bool IsDefaultGraph(string graphName);
    public static int get_MaxCounterOnResponseTimeGraph();
    public static bool IsAutomaticResponseTimeGraph(LoadTestGraphDescriptor graphDescriptor);
    public static bool IsValidCounterForAutomaticResponseTimeGraph(LoadTestGraphDescriptor graphDescriptor, LoadTestCounterDescriptor counterDescriptor);
    public static LoadTestRunDescriptor CreateDefaultRunDescriptor(bool isLocalRun, string controllerName, bool containsWebTests);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestRunSetttingsTelemetryEvent : LoadTestTelemetryEvent {
    private bool _heuristicXmlEnabled;
    private string _sharepointVersion;
    private WebTestSuite _loadTest;
    private bool _customValidationRulesEnabled;
    private LoadTestResultDetails _resultDetails;
    private static int EventVersion;
    private string _runId;
    private int _webTestCount;
    private int _unitTestCount;
    private int _maxUserCount;
    private int _declarativeWebTestCount;
    private int _dataDrivenTestCount;
    private int _databaseDataDrivenTestCount;
    private int _csvDataDrivenTestCount;
    private int _xmlDataDrivenTestCount;
    private static string DataSourceTypeXml;
    private static string DataSourceTypeCsv;
    private static string WebTestFrameworkAssemblyName;
    private static string SettingsEventName;
    private static string SettingsPropertyPrefix;
    public LoadTestRunSetttingsTelemetryEvent(LoadTestResultDetails resultDetails, string runId);
    public virtual void PostTelemetryData();
    private void ProcessTestMixData();
    private int GetSamplingDuration(List`1<RunConfig> runConfigs);
    private void ProcessDataSourcesInformation(ITestElement testElement);
    private void ProcessTypeOfDataSources(DataSourceCollection dataSources);
    private void ProcessValidationRulesInformation(ITestElement testElement);
    private void ProcessIndividualTestElementsForSharepointInformation(ITestElement testElement);
    private void ProcessWebItemsForSharepointInformation(WebTestItemCollection webTestItemCollection);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestRunStatus : Enum {
    public int value__;
    public static LoadTestRunStatus Connecting;
    public static LoadTestRunStatus InitializingResultsCollection;
    public static LoadTestRunStatus NotStarted;
    public static LoadTestRunStatus Queued;
    public static LoadTestRunStatus Starting;
    public static LoadTestRunStatus Started;
    public static LoadTestRunStatus Stopping;
    public static LoadTestRunStatus Stopped;
    public static LoadTestRunStatus WarmingUp;
    public static LoadTestRunStatus WritingResults;
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestRunType : Enum {
    public int value__;
    public static LoadTestRunType OnPremise;
    public static LoadTestRunType CloudLoadTest;
}
public class Microsoft.VisualStudio.TestTools.WebStress.LoadTestSchemaUpgrade : object {
    private static string updateSummaryDataSp;
    private static string VS2011UPGRADESCRIPT;
    private static string VS2010UPGRADESCRIPT;
    public static string LOCAL_SQL_EXPRESS_INSTANCE_NAME;
    private static LoadTestSchemaUpgrade();
    public static void UpgradeSchemaIfNeeded(string connectString);
    public static void UpgradeSchemaIfNeeded(string connectString, SqlConnection sqlConnection);
    internal static bool IsDatabaseUpgradeFromVS2010Needed(SqlConnection connection);
    private static bool IsSqlExpressRunning();
    private static void UpgradeLocalLoadTestSchema();
    internal static void UpgradeLoadTestSchemaFromVS2010(string sqlServerInstanceName, string loadTestCatalogName, string groupNameToGrantAccess, string directoryContainingSchemaFile);
    private static bool UpgradeLoadTestSchemaIfSqlExpressRunning();
    private static int GetSchemaRevision(SqlConnection connection);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestSqlTraceColumn : Enum {
    public int value__;
    public static LoadTestSqlTraceColumn TextData;
    public static LoadTestSqlTraceColumn SPID;
    public static LoadTestSqlTraceColumn Duration;
    public static LoadTestSqlTraceColumn StartTime;
    public static LoadTestSqlTraceColumn EndTime;
    public static LoadTestSqlTraceColumn Reads;
    public static LoadTestSqlTraceColumn Writes;
    public static LoadTestSqlTraceColumn CPU;
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestSqlTraceEventClass : Enum {
    public int value__;
    public static LoadTestSqlTraceEventClass RPCCompleted;
    public static LoadTestSqlTraceEventClass SQLBatchCompleted;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestSqlTracer : object {
    private static Int32[] SqlTraceEventIds;
    private static Int32[] SqlTraceColumnIds;
    private string m_traceFilePath;
    private bool m_tracing;
    private int m_traceId;
    private RunConfig m_runConfig;
    private SqlConnection m_connection;
    public string TraceFilePath { get; }
    public SqlConnection Connection { get; }
    public LoadTestSqlTracer(RunConfig runConfig);
    private static LoadTestSqlTracer();
    public string get_TraceFilePath();
    public SqlConnection get_Connection();
    public void Open();
    public void Close();
    public void StartTrace();
    private SqlCommand CreateStoredProcedureCommand(string storedProcedureName);
    public void EndTrace();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestSqlTraceRow : object {
    private string m_sqlEvent;
    private string m_textData;
    private long m_duration;
    private int m_cpu;
    private long m_reads;
    private long m_writes;
    private DateTime m_startTime;
    private DateTime m_endTime;
    public string SqlEvent { get; }
    public string TextData { get; }
    public long Duration { get; }
    public int Cpu { get; }
    public long Reads { get; }
    public long Writes { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public LoadTestSqlTraceRow(string sqlEvent, string textData, long duration, int cpu, long reads, long writes, DateTime startTime, DateTime endTime);
    public string get_SqlEvent();
    public string get_TextData();
    public long get_Duration();
    public int get_Cpu();
    public long get_Reads();
    public long get_Writes();
    public DateTime get_StartTime();
    public DateTime get_EndTime();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestStat : object {
    private int m_instanceId;
    private int m_sampleRate;
    private float m_cumulative;
    private bool m_cumulativeSet;
    private CounterSample m_initialSample;
    private CounterSample m_lastSample;
    private PerformanceCounterType m_counterType;
    private CollapsingDataSeries m_collapsingDataSeries;
    private ScrollingDataSeries m_scrollingDataSeries;
    private Dictionary`2<Range, ZoomingDataSeries> m_mapZoomingDataSeries;
    private CounterSample[] m_counterSamples;
    private Single[] m_computedValues;
    private float m_minComputedValue;
    private float m_maxComputedValue;
    private LoadTestCounterDescriptor m_descriptor;
    private ThresholdRuleResult m_overallThresholdRuleResult;
    private Dictionary`2<int, List`1<ThresholdViolationResult>> m_thresholdViolations;
    private PercentileData m_percentiles;
    public ScrollingDataSeries ScrollingDataSeries { get; }
    public CollapsingDataSeries CollapsingDataSeries { get; }
    public LoadTestCounterDescriptor Descriptor { get; }
    public PerformanceCounterType CounterType { get; }
    public int InstanceId { get; }
    public PercentileData Percentiles { get; public set; }
    public bool HasCounterSamples { get; }
    public CounterSample[] CounterSamples { get; }
    public float OverallMinY { get; }
    public float OverallMaxY { get; }
    public ThresholdRuleResult OverallThresholdRuleResult { get; public set; }
    private int m_zoomingDataSeriesSize { get; }
    public LoadTestStat(LoadTestCounterDescriptor descriptor, int instanceId, int sampleRate);
    public ScrollingDataSeries get_ScrollingDataSeries();
    public CollapsingDataSeries get_CollapsingDataSeries();
    public ZoomingDataSeries GetZoomingDataSeries(Range zoomRange, bool minMaxMode);
    public LoadTestCounterDescriptor get_Descriptor();
    public PerformanceCounterType get_CounterType();
    public int get_InstanceId();
    public PercentileData get_Percentiles();
    public void set_Percentiles(PercentileData value);
    public bool get_HasCounterSamples();
    public CounterSample[] get_CounterSamples();
    public float get_OverallMinY();
    public float get_OverallMaxY();
    public ThresholdRuleResult get_OverallThresholdRuleResult();
    public void set_OverallThresholdRuleResult(ThresholdRuleResult value);
    public ThresholdRuleResult OverallThresholdRuleResultForRange(int startSeconds, int endSeconds);
    public ThresholdRuleResult OverallThresholdRuleResultAt(int elapsedSeconds);
    public void AddThresholdViolationResult(int elapsedSeconds, ThresholdViolationResult result);
    public List`1<ThresholdViolationResult> GetThresholdViolationsAt(int elapsedSeconds);
    public void AddNewSample(int elapsedSeconds, CounterSample sample);
    public void AddPostRunSeries(List`1<LoadTestCounterSample> loadTestCounterSamples, DateTime testStartTime, int totalRunIntervals);
    public static bool IsCounterTypeAverage(PerformanceCounterType counterType);
    public void RemoveObsoleteZoomRanges(List`1<Range> validZoomRanges);
    public void ClearZoomRanges();
    public float ComputedValueAtInterval(int interval);
    public float GetValue(LoadTestStatValue statType);
    public float GetPercentileValue(LoadTestStatValue statType);
    public float GetLastValue();
    public float GetCumulativeValue();
    public void SetCumulativeValue(float cumulativeValue);
    public static CounterSample ComputeBaseCounterSample(CounterSample sample, int sampleRate);
    private int get_m_zoomingDataSeriesSize();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestStatCollection : CollectionBase {
    public LoadTestStat Item { get; }
    public int Add(LoadTestStat instance);
    public void Insert(int index, LoadTestStat instance);
    public int IndexOf(LoadTestStat instance);
    public void Remove(LoadTestStat instance);
    public LoadTestStat get_Item(int index);
    public bool Contains(LoadTestStat instance);
    public void CopyTo(LoadTestStat[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestStatistics : object {
    private long m_timeInWebTestCode;
    private long m_timeInLoadTestPlugin;
    private long m_timeInRules;
    private long m_availableTime;
    public long TimeInWebTestCode { get; public set; }
    public long TimeInLoadTestPlugin { get; public set; }
    public long TimeInRules { get; public set; }
    public long AvailableTime { get; public set; }
    public void set_TimeInWebTestCode(long value);
    public long get_TimeInWebTestCode();
    public void set_TimeInLoadTestPlugin(long value);
    public long get_TimeInLoadTestPlugin();
    public void set_TimeInRules(long value);
    public long get_TimeInRules();
    public void set_AvailableTime(long value);
    public long get_AvailableTime();
    internal void MergeStatistics(LoadTestStatistics statsToMerge);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestStatValue : Enum {
    public int value__;
    public static LoadTestStatValue None;
    public static LoadTestStatValue Cumulative;
    public static LoadTestStatValue Last;
    public static LoadTestStatValue Percentile90;
    public static LoadTestStatValue Percentile95;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestStoppedMessage : object {
    private DateTime m_endTime;
    private bool m_ranToCompletion;
    public DateTime EndTime { get; }
    public bool RanToCompletion { get; }
    public LoadTestStoppedMessage(DateTime endTime, bool ranToCompletion);
    public DateTime get_EndTime();
    public bool get_RanToCompletion();
}
internal abstract class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTelemetryEvent : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertiesPrefix>k__BackingField;
    public string EventName { get; private set; }
    public string PropertiesPrefix { get; private set; }
    public static bool IsUserOptedIn { get; }
    public TelemetrySession DefaultSession { get; }
    public LoadTestTelemetryEvent(string eventName, string propertyNamePrefix);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
private void set_EventName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertiesPrefix();
    [CompilerGeneratedAttribute]
private void set_PropertiesPrefix(string value);
    public static bool get_IsUserOptedIn();
    public TelemetrySession get_DefaultSession();
    protected string GetPropertyName(string name);
    public abstract virtual void PostTelemetryData();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTestDetailResult : LoadTestItemDetailResult {
    private TestOutcome m_outcome;
    public bool IsResultSuccessful { get; }
    public string Name { get; }
    public TestOutcome Outcome { get; }
    public LoadTestTestDetailResult(int detailId, string scenario, string name, int userId, string internalUserId, DateTime startTime, DateTime endTime, double duration, string testType, string network, int testLogId, int agentId, string agentName, TestOutcome outcome);
    public virtual string GetMessage(DateTime runStartTime, int runDuration);
    public virtual bool get_IsResultSuccessful();
    public virtual string get_Name();
    public TestOutcome get_Outcome();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTestResult : LoadTestItemResult {
    private bool m_includeTimingDetails;
    private bool m_inMeasurementInterval;
    private TestResult m_testResult;
    private int m_testLogId;
    private TestOutcome m_outcome;
    private DateTime m_startTime;
    private DateTime m_endTime;
    private TimeSpan m_elapsedTime;
    private int m_testCaseId;
    private int m_userId;
    private string m_testType;
    private int m_agentId;
    private int m_browserId;
    private int m_networkId;
    private string m_testName;
    private string m_scenarioName;
    private List`1<LoadTestTransactionResult> m_transactionResults;
    private List`1<WebTestPageResult> m_pageResults;
    private Dictionary`2<string, LoadTestMessageType> m_messageTypes;
    private TimeZoneInfo m_intervalTimeZone;
    public bool IncludeTimingDetails { get; }
    public bool InMeasurementInterval { get; }
    public string TestType { get; }
    public TestResult Result { get; public set; }
    public bool HasTestResultInDatabase { get; }
    public int TestIteration { get; }
    public TestOutcome Outcome { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public TimeSpan ElapsedTime { get; }
    public int TestCaseId { get; }
    public int UserId { get; public set; }
    public int AgentId { get; }
    public int BrowserId { get; }
    public int NetworkId { get; }
    public string TestName { get; public set; }
    public string ScenarioName { get; public set; }
    public List`1<LoadTestTransactionResult> TransactionResults { get; }
    public List`1<WebTestPageResult> PageResults { get; }
    public Dictionary`2<string, LoadTestMessageType> MessageTypes { get; }
    public LoadTestTestResult(ITestCaseVariation testCaseVariation, bool includeTimingDetails, bool inMeasurementInterval, int testCaseId, int browserId, int networkId);
    public LoadTestTestResult(int testIterationId, bool includeTimingDetails, bool inMeasurementInterval, int testCaseId, int browserId, int networkId, int userId, DateTime startTime, DateTime endTimeTime, TestOutcome outcome, TimeSpan timeSpan, List`1<WebTestPageResult> pageResults, List`1<LoadTestTransactionResult> transactionResults, Dictionary`2<string, LoadTestMessageType> messageTypes);
    public LoadTestTestResult(int testCaseId, string testType, TestOutcome outcome, DateTime startTime, double elapsedTimeSeconds, int agentId, int testLogId);
    public bool get_IncludeTimingDetails();
    public bool get_InMeasurementInterval();
    public string get_TestType();
    public void set_Result(TestResult value);
    public TestResult get_Result();
    public bool get_HasTestResultInDatabase();
    public int get_TestIteration();
    public TestOutcome get_Outcome();
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public TimeSpan get_ElapsedTime();
    public int get_TestCaseId();
    public void set_UserId(int value);
    public int get_UserId();
    public int get_AgentId();
    public int get_BrowserId();
    public int get_NetworkId();
    public void set_TestName(string value);
    public string get_TestName();
    public void set_ScenarioName(string value);
    public string get_ScenarioName();
    public List`1<LoadTestTransactionResult> get_TransactionResults();
    public int GetTransactionResultCount();
    public int GetPageResultCount();
    public List`1<WebTestPageResult> get_PageResults();
    public Dictionary`2<string, LoadTestMessageType> get_MessageTypes();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTestSummary : object {
    [StoreXmlSimpleFieldAttribute]
private string m_scenarioName;
    [StoreXmlSimpleFieldAttribute]
private string m_testName;
    [StoreXmlSimpleFieldAttribute]
private int m_totalTests;
    [StoreXmlSimpleFieldAttribute]
private int m_testsFailed;
    [StoreXmlSimpleFieldAttribute]
private int m_averageDuration;
    [WarehouseFactFieldAttribute("Load Test Scenario", "6")]
[WarehouseDimensionFieldAttribute("Load Test Scenario", "12")]
public string ScenarioName { get; }
    [WarehouseFactFieldAttribute("Test", "6")]
public string TestName { get; }
    [WarehouseFactFieldAttribute("Total Tests", "6")]
public int TotalTests { get; }
    [WarehouseFactFieldAttribute("Tests Failed", "6")]
public int TestsFailed { get; }
    [WarehouseFactFieldAttribute("Average Duration", "6")]
public int AverageDuration { get; }
    public LoadTestTestSummary(string scenarioName, string testName, int totalTests, int testsFailed, int averageDuration);
    public string get_ScenarioName();
    public string get_TestName();
    public int get_TotalTests();
    public int get_TestsFailed();
    public int get_AverageDuration();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestThreadPool : object {
    private bool m_running;
    private int m_minWorkerThreads;
    private int m_maxWorkerThreads;
    private int m_threadId;
    private long m_maxVMBytesAtWhichToStartThread;
    private Queue m_waitingCallbacks;
    private Semaphore m_workerThreadNeeded;
    private List`1<Thread> m_workerThreads;
    private int m_inUseThreads;
    private int m_maxStackSize;
    private object m_poolLock;
    private AutoResetEvent m_stoppedEvent;
    [CompilerGeneratedAttribute]
private UnhandledExceptionEventHandler UnhandledException;
    public int MaxThreads { get; }
    public int ActiveThreads { get; }
    public int WaitingCallbacks { get; }
    public LoadTestThreadPool(int minWorkerThreads, int maxWorkerThreads, int maxStackSize);
    public LoadTestThreadPool(int maxWorkerThreads);
    public void Start();
    public void QueueUserWorkItem(WaitCallback callback);
    public void QueueUserWorkItem(WaitCallback callback, object state);
    public void Stop(int millisecondsTimeout);
    public void Abort();
    public int get_MaxThreads();
    public int get_ActiveThreads();
    public int get_WaitingCallbacks();
    [CompilerGeneratedAttribute]
public void add_UnhandledException(UnhandledExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_UnhandledException(UnhandledExceptionEventHandler value);
    private void StartWorkerThread();
    private void ProcessQueuedItems();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.LoadTestTimingDetailsStorage : Enum {
    public int value__;
    public static LoadTestTimingDetailsStorage None;
    public static LoadTestTimingDetailsStorage StatisticsOnly;
    public static LoadTestTimingDetailsStorage AllIndividualDetails;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTransactionDetailResult : LoadTestItemDetailResult {
    private string m_transaction;
    private int m_transactionId;
    public string Name { get; }
    public string Transaction { get; }
    public int TransactionId { get; }
    public LoadTestTransactionDetailResult(int detailId, string scenario, string testName, string transactionName, int transactionId, int userId, string internalUserId, DateTime startTime, DateTime endTime, double duration, string testType, string network, int testLogId, int agentId, string agentName);
    public virtual string GetDescriptorId();
    public virtual string get_Name();
    public virtual string GetMessage(DateTime runStartTime, int runDuration);
    public string get_Transaction();
    public int get_TransactionId();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTransactionResult : LoadTestItemResult {
    private TimerResult m_transactionTimer;
    public TimerResult TransactionTimer { get; }
    public LoadTestTransactionResult(TimerResult transactionTimer);
    public TimerResult get_TransactionTimer();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTransactionStatistic : object {
    private string m_scenarioName;
    private string m_testCaseName;
    private string m_transaction;
    private int m_transactionCount;
    private double m_minimum;
    private double m_maximum;
    private double m_average;
    private double m_averageTransactionTime;
    private double m_median;
    private double m_percentile90;
    private double m_percentile95;
    private double m_percentile99;
    private double m_standardDeviation;
    public string ScenarioName { get; }
    public string TestCaseName { get; }
    public string TransactionName { get; }
    public int TransactinCount { get; }
    public double Minimum { get; }
    public double Maximum { get; }
    public double Average { get; }
    public double Median { get; }
    public double Percentile90 { get; }
    public double Percentile95 { get; }
    public double Percentile99 { get; }
    public double StandardDeviation { get; }
    public double AverageTransactionTime { get; }
    public LoadTestTransactionStatistic(string scenarioName, string testCaseName, string transactionName, int count, double minimum, double maximum, double average, double median, double percentile90, double percentile95, double percentile99, double standardDeviation, double averageTransactionTime);
    public string get_ScenarioName();
    public string get_TestCaseName();
    public string get_TransactionName();
    public int get_TransactinCount();
    public double get_Minimum();
    public double get_Maximum();
    public double get_Average();
    public double get_Median();
    public double get_Percentile90();
    public double get_Percentile95();
    public double get_Percentile99();
    public double get_StandardDeviation();
    public double get_AverageTransactionTime();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestTransactionSummary : object {
    [StoreXmlSimpleFieldAttribute]
private string m_scenarioName;
    [StoreXmlSimpleFieldAttribute]
private string m_testName;
    [StoreXmlSimpleFieldAttribute]
private string m_transactionName;
    [StoreXmlSimpleFieldAttribute]
private int m_transactionCount;
    [StoreXmlSimpleFieldAttribute]
private int m_elapsedTime;
    [StoreXmlSimpleFieldAttribute]
private int m_responseTime;
    [WarehouseFactFieldAttribute("Load Test Scenario", "7")]
[WarehouseDimensionFieldAttribute("Load Test Scenario", "12")]
public string ScenarioName { get; }
    [WarehouseFactFieldAttribute("Test", "7")]
public string TestName { get; }
    [WarehouseFactFieldAttribute("Load Test Transaction", "7")]
[WarehouseDimensionFieldAttribute("Transaction", "13")]
public string TransactionName { get; }
    [WarehouseFactFieldAttribute("Transactions", "7")]
public int TransactionCount { get; }
    [WarehouseFactFieldAttribute("Elapsed Time", "7")]
public int ElapsedTime { get; }
    [WarehouseFactFieldAttribute("Response Time", "7")]
public int ResponseTime { get; }
    public LoadTestTransactionSummary(string scenarioName, string testName, string transactionName, int transactionCount, int elapsedTime, int responseTime);
    public string get_ScenarioName();
    public string get_TestName();
    public string get_TransactionName();
    public int get_TransactionCount();
    public int get_ElapsedTime();
    public int get_ResponseTime();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestUserLicenseManager : object {
    private bool m_isRemote;
    private LoadTestFeature m_allowedFeatures;
    internal LoadTestUserLicenseManager(LoadTestFeature allowedFeatures, bool isRemote);
    public void CheckForLoadTestExecution();
    public void CheckForRemoteExecution();
    public void CheckUserCountForLoadTest(long userLoad);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestUserManager : object {
    private static Random s_randGenerator;
    private string m_scenarioName;
    private int m_currentUserLoad;
    private Queue m_availableUsers;
    private object m_userLock;
    private int m_nextUserId;
    private int m_percentNewUsers;
    public LoadTestUserManager(string scenarioName, int percentNewUsers);
    private static LoadTestUserManager();
    public void UpdateUserLoad(int newUserLoad);
    public LoadTestUserContext Select();
    public void Release(LoadTestUserContext userContext);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.LoadTestXmlCounterWriter : object {
    private DateTime m_startTime;
    private DateTime m_endTime;
    private XmlTextWriter m_xmlWriter;
    private WebTestSuite m_suite;
    private bool m_testRunInitialized;
    private bool m_started;
    private LoadTestRigInfo m_rigInfo;
    private string m_resultDirectoryPath;
    public LoadTestXmlCounterWriter(WebTestSuite suite, string resultDirectoryPath);
    public sealed virtual void Open();
    public sealed virtual void Close();
    public sealed virtual void InitializeTestRun(LoadTestRigInfo rigInfo);
    public sealed virtual void StartTestRun(DateTime startTime);
    public sealed virtual void EndTestRun(TestOutcome outcome);
    public sealed virtual void WriteIntervalData(LoadTestCounterIntervalData intervalData);
    public sealed virtual void WriteInstanceSummaries(List`1<InstanceSummaryBuilder> instanceSummaryBuilders);
    public sealed virtual void WriteError(WebTestErrorReport errorReport);
    public sealed virtual void WriteItemResults(LoadTestItemResultReport itemResultReport);
    private void WriteTestResult(LoadTestTestResult testResult);
    private void WriteTransactionResult(LoadTestTransactionResult transactionResult);
    private void WritePageResult(WebTestPageResult pageResult);
    public void WriteErrorDetail(WebTestErrorDetailReport errorDetailReport);
    public sealed virtual void ImportSqlTrace(LoadTestSqlTracer sqlTracer);
    private void AddRigInfo();
    private void AddScenariosAndTestCases();
    private void ProcessTestRunCompleted();
    private void AddTransactionMap(LoadTestCounterIntervalData intervalData);
    private void AddRequestMap(LoadTestCounterIntervalData intervalData);
    private void AddCategories(LoadTestCounterIntervalData intervalData);
    private void AddCounters(LoadTestCounterIntervalData intervalData);
    private void AddInstances(LoadTestCounterIntervalData intervalData);
    private void AddSamples(LoadTestCounterIntervalData intervalData);
    private void AddMessages(WebTestErrorReportCollection errors);
    private string GetResultsFilePath();
    private int GetAgentId(string agentName);
    private void WriteCDataElement(string elementName, string cdataString);
}
public class Microsoft.VisualStudio.TestTools.WebStress.LoadTestXmlTabularDataReader : object {
    private DataSet m_dataSet;
    private int m_rowIndex;
    private int m_rowCount;
    private object m_disposeLock;
    public DataColumnCollection Columns { get; }
    public string TimestampColumnName { get; }
    public string DurationColumnName { get; }
    public List`1<string> IndexColumnNames { get; }
    public int RowCount { get; }
    public LoadTestXmlTabularDataReader(string filePath);
    public sealed virtual DataColumnCollection get_Columns();
    public sealed virtual string get_TimestampColumnName();
    public sealed virtual string get_DurationColumnName();
    public sealed virtual List`1<string> get_IndexColumnNames();
    public sealed virtual int get_RowCount();
    public sealed virtual DataRow GetNextRow();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.MinMaxDataPoint : DataPoint {
    private float m_minY;
    private float m_maxY;
    public float MinY { get; }
    public float MaxY { get; }
    public MinMaxDataPoint(float x, float y, float minY, float maxY, ThresholdRuleResult thresholdResult);
    public float get_MinY();
    public float get_MaxY();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.NativeMethods : object {
    public static int WM_CONTEXTMENU;
    public static int WM_KEYDOWN;
    public static IntPtr SendMessage(IntPtr hWnd, int wMsg, IntPtr wParam, IntPtr lParam);
    public static bool WinHttpGetIEProxyConfigForCurrentUser(WINHTTP_CURRENT_USER_IE_PROXY_CONFIG& pProxyConfig);
    public static bool GlobalMemoryStatusEx(MEMORYSTATUSEX& memoryStatus);
    public static long GetMaxVirtualMemoryBytes();
    public static bool QueryPerformanceFrequency(Int64& value);
    public static int SignedHIWORD(int n);
    public static int SignedLOWORD(int n);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.NetworkEmulationType : Enum {
    public int value__;
    public static NetworkEmulationType None;
    public static NetworkEmulationType Simple;
    public static NetworkEmulationType NEWT;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.NoMovementTableCursor : BaseTableCursor {
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.NormalDistribution : object {
    private static Random s_rand;
    private static NormalDistribution();
    public static long ComputeNormalDistributionAroundValue(long value, double percentage);
    public static double GenerateStandardNormal();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.OrcasToDev10DeserializationBinder : SerializationBinder {
    private static string OrcasLoadTestAssembly;
    private static string WhidbeyLoadTestAssembly;
    private static string Dev10WebTestFrameworkAssembly;
    private static string VSAssemblyPrefix;
    private static string OldWebTestErrorClass;
    private static string NewWebTestErrorClass;
    private static string OldWebTestErrorTypeClass;
    private static string NewWebTestErrorTypeClass;
    private static string OldWebTestRequestResultClass;
    private static string NewWebTestRequestResultClass;
    private static string OldWebTestErrorCollectionClass;
    private static string NewWebTestErrorCollectionClass;
    private static string OldWebTestRuleErrorClass;
    private static string NewWebTestRuleErrorClass;
    private static string OldByteArrayCacheClass;
    private static string NewByteArrayCacheClass;
    private static string OldWebTestResultDetailsClass;
    private static string NewWebTestResultDetailsClass;
    private static string OldWebTestResultDetailsSerializerClass;
    private static string NewWebTestResultDetailsSerializerClass;
    private static string OldWebTestResultStatusClass;
    private static string NewWebTestResultStatusClass;
    private static string OldWebTestStatusMessageClass;
    private static string NewWebTestStatusMessageClass;
    public virtual Type BindToType(string assemblyName, string typeName);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PageLoadCompleteEventArgs : EventArgs {
    private WebTestPageResult m_pageResult;
    private WebTestInstrumentedTransaction m_transaction;
    public WebTestPageResult PageResult { get; public set; }
    public WebTestInstrumentedTransaction InstrumentedTransaction { get; }
    public PageLoadCompleteEventArgs(WebTestPageResult pageResult, WebTestInstrumentedTransaction transaction);
    public WebTestPageResult get_PageResult();
    public void set_PageResult(WebTestPageResult value);
    public WebTestInstrumentedTransaction get_InstrumentedTransaction();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.PanelLayout : Enum {
    public int value__;
    public static PanelLayout One;
    public static PanelLayout TwoHorizontal;
    public static PanelLayout TwoVertical;
    public static PanelLayout ThreeLeft;
    public static PanelLayout ThreeRight;
    public static PanelLayout ThreeTop;
    public static PanelLayout ThreeBottom;
    public static PanelLayout ThreeHorizontal;
    public static PanelLayout ThreeVertical;
    public static PanelLayout FourHorizontal;
    public static PanelLayout FourVertical;
    public static PanelLayout FourGrid;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PercentageOfTestsRunningMixSelector : object {
    private Dictionary`2<Guid, TestTracker> m_testTrackers;
    private double m_totalWeight;
    private int m_totalTestsRunning;
    public int Count { get; }
    public sealed virtual int get_Count();
    public sealed virtual void Add(ITestElement testElement, decimal weight);
    public sealed virtual bool Remove(ITestElement testElement);
    public sealed virtual TimeSpan GetDelay(LoadTestUserContext userContext);
    public sealed virtual ITestElement Select(LoadTestUserContext userContext);
    public sealed virtual void TestComplete(LoadTestUserContext userContext, ITestElement testElement, TestIterationResult iterationResult);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PercentageOfTestsStartedMixSelector : object {
    private WeightedCollection m_weightedCollection;
    public int Count { get; }
    public sealed virtual int get_Count();
    public sealed virtual void Add(ITestElement testElement, decimal frequency);
    public sealed virtual bool Remove(ITestElement testElement);
    public sealed virtual TimeSpan GetDelay(LoadTestUserContext userContext);
    public sealed virtual ITestElement Select(LoadTestUserContext userContext);
    public sealed virtual void TestComplete(LoadTestUserContext userContext, ITestElement testElement, TestIterationResult iterationResult);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PercentileData : object {
    private double m_percentile90thValue;
    private double m_percentile95thValue;
    public double Percentile90thValue { get; }
    public double Percentile95thValue { get; }
    public PercentileData(double percentile90thValue, double percentile95thValue);
    public double get_Percentile90thValue();
    public double get_Percentile95thValue();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PerformanceCounterReader : object {
    private PerformanceCounterCategory m_category;
    private InstanceDataCollectionCollection m_categoryData;
    private Exception m_categoryException;
    private ManualResetEvent m_categoryReadCompleteEvent;
    public InstanceDataCollectionCollection ReadPerformanceCounterCategory(PerformanceCounterCategory category, int timeoutInMilliseconds);
    private void ReadCounterCategoryProc();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PerformanceCounterResult : object {
    private PerformanceCounterValue m_perfCounterValue;
    [StoreXmlSimpleFieldAttribute]
private bool m_isOverallResultCounter;
    [StoreXmlSimpleFieldAttribute]
private bool m_higherIsBetter;
    [WarehouseDimensionFieldAttribute("Machine", "4")]
[WarehouseFactFieldAttribute("Machine", "0")]
public string MachineName { get; }
    [WarehouseDimensionFieldAttribute("Counter Object", "3")]
public string CategoryName { get; }
    [WarehouseDimensionFieldAttribute("Counter", "3")]
public string CounterName { get; }
    [WarehouseDimensionFieldAttribute("Counter Instance", "3")]
public string InstanceName { get; }
    [WarehouseFactFieldAttribute("Value", "0")]
public float Value { get; }
    [WarehouseDimensionFieldAttribute("Counter Result", "3")]
public bool IsOverallResultCounter { get; internal set; }
    [WarehouseDimensionFieldAttribute("HigherIsBetter", "3")]
public bool HigherIsBetter { get; internal set; }
    public PerformanceCounterResult(PerformanceCounterValue perfCounterValue);
    public string get_MachineName();
    public string get_CategoryName();
    public string get_CounterName();
    public string get_InstanceName();
    public float get_Value();
    public virtual string ToString();
    internal void set_IsOverallResultCounter(bool value);
    public bool get_IsOverallResultCounter();
    internal void set_HigherIsBetter(bool value);
    public bool get_HigherIsBetter();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.ByteArrayCacheProxy : PersistenceProxy`1<ByteArrayCache> {
    internal ByteArrayCacheProxy(ByteArrayCache master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.IncludedWebTestProxy : PersistenceProxy`1<IncludedWebTest> {
    internal IncludedWebTestProxy(IncludedWebTest master);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.PluginOrRulePropertyProxy : PersistenceProxy`1<PluginOrRuleProperty> {
    internal PluginOrRulePropertyProxy(PluginOrRuleProperty master);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.RuleResultProxy : PersistenceProxy`1<RuleResult> {
    internal RuleResultProxy(RuleResult master);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestClassNameProxy : PersistenceProxy`1<WebTestClassName> {
    internal WebTestClassNameProxy(WebTestClassName master);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestErrorProxy : PersistenceProxy`1<WebTestError> {
    internal WebTestErrorProxy(WebTestError master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestNetworkProxy : PersistenceProxy`1<WebTestNetwork> {
    internal WebTestNetworkProxy(WebTestNetwork master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestRequestResultProxy : PersistenceProxy`1<WebTestRequestResult> {
    internal WebTestRequestResultProxy(WebTestRequestResult master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestResultCommentProxy : PersistenceProxy`1<WebTestResultComment> {
    internal WebTestResultCommentProxy(WebTestResultComment master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestResultDetailsProxy : PersistenceProxy`1<WebTestResultDetails> {
    internal WebTestResultDetailsProxy(WebTestResultDetails master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestResultGroupProxy : PersistenceProxy`1<WebTestResultGroup> {
    internal WebTestResultGroupProxy(WebTestResultGroup master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestResultIterationProxy : PersistenceProxy`1<WebTestResultIteration> {
    internal WebTestResultIterationProxy(WebTestResultIteration master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestResultPageProxy : PersistenceProxy`1<WebTestResultPage> {
    internal WebTestResultPageProxy(WebTestResultPage master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WebTestResultTransactionProxy : PersistenceProxy`1<WebTestResultTransaction> {
    internal WebTestResultTransactionProxy(WebTestResultTransaction master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Persistence.WhidbeyWebTestResultDetailsProxy : PersistenceProxy`1<WebTestResultDetails> {
    internal WhidbeyWebTestResultDetailsProxy(WebTestResultDetails master);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostConditionalRuleCallback : MulticastDelegate {
    public PostConditionalRuleCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestResultCondition webTestResultCondition);
    public virtual IAsyncResult BeginInvoke(WebTestResultCondition webTestResultCondition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostConditionCallback : MulticastDelegate {
    public PostConditionCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestResultCondition webTestResultCondition);
    public virtual IAsyncResult BeginInvoke(WebTestResultCondition webTestResultCondition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostLoopCallback : MulticastDelegate {
    public PostLoopCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestResultLoop webTestResultLoop);
    public virtual IAsyncResult BeginInvoke(WebTestResultLoop webTestResultLoop, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostLoopIterationCallback : MulticastDelegate {
    public PostLoopIterationCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestResultLoopIteration webTestResultLoopIteration);
    public virtual IAsyncResult BeginInvoke(WebTestResultLoopIteration webTestResultLoopIteration, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostPageCallback : MulticastDelegate {
    public PostPageCallback(object object, IntPtr method);
    public virtual void Invoke(ExecutionState executionState);
    public virtual IAsyncResult BeginInvoke(ExecutionState executionState, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostRequestCallback : MulticastDelegate {
    public PostRequestCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestInstrumentedTransaction instrumentedTransaction, object callerState, WebTestExecutionInstruction executionType);
    public virtual IAsyncResult BeginInvoke(WebTestInstrumentedTransaction instrumentedTransaction, object callerState, WebTestExecutionInstruction executionType, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostRequestException : WebTestException {
    public PostRequestException(string message);
    public PostRequestException(string message, Exception innerException);
    protected PostRequestException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostTransactionCallback : MulticastDelegate {
    public PostTransactionCallback(object object, IntPtr method);
    public virtual void Invoke(ITestCaseVariation webTestCaseVariation, TimerResult transactionResult);
    public virtual IAsyncResult BeginInvoke(ITestCaseVariation webTestCaseVariation, TimerResult transactionResult, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PostWebTestException : WebTestException {
    public PostWebTestException(string message);
    public PostWebTestException(string message, Exception innerException);
    protected PostWebTestException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreConditionCallback : MulticastDelegate {
    public PreConditionCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestResultCondition webTestResultCondition);
    public virtual IAsyncResult BeginInvoke(WebTestResultCondition webTestResultCondition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreLoopCallback : MulticastDelegate {
    public PreLoopCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestResultLoop webTestResultLoop);
    public virtual IAsyncResult BeginInvoke(WebTestResultLoop webTestResultLoop, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreLoopIterationCallback : MulticastDelegate {
    public PreLoopIterationCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestResultLoopIteration webTestResultLoopIteration);
    public virtual IAsyncResult BeginInvoke(WebTestResultLoopIteration webTestResultLoopIteration, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreRequestCallback : MulticastDelegate {
    public PreRequestCallback(object object, IntPtr method);
    public virtual WebTestExecutionInstruction Invoke(WebTestInstrumentedTransaction instrumentedTransaction, object callerState);
    public virtual IAsyncResult BeginInvoke(WebTestInstrumentedTransaction instrumentedTransaction, object callerState, AsyncCallback callback, object object);
    public virtual WebTestExecutionInstruction EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreRequestDatabindingCallback : MulticastDelegate {
    public PreRequestDatabindingCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestInstrumentedTransaction instrumentedTransaction, object callerState);
    public virtual IAsyncResult BeginInvoke(WebTestInstrumentedTransaction instrumentedTransaction, object callerState, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreRequestDatabindingException : WebTestException {
    public PreRequestDatabindingException(string message);
    public PreRequestDatabindingException(string message, Exception innerException);
    protected PreRequestDatabindingException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreRequestException : WebTestException {
    public PreRequestException(string message);
    public PreRequestException(string message, Exception innerException);
    protected PreRequestException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreTransactionCallback : MulticastDelegate {
    public PreTransactionCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestTimer webTestTransactionTimer);
    public virtual IAsyncResult BeginInvoke(WebTestTimer webTestTransactionTimer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.PreWebTestException : WebTestException {
    public PreWebTestException(string message);
    public PreWebTestException(string message, Exception innerException);
    protected PreWebTestException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.QueuedCallback : MulticastDelegate {
    public QueuedCallback(object object, IntPtr method);
    public virtual void Invoke(object callerState);
    public virtual IAsyncResult BeginInvoke(object callerState, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.QueueItem : object {
    private ScenarioEngine m_scenarioEngine;
    private ITestCaseVariation m_testCaseVariation;
    public ScenarioEngine ScenarioEngine { get; public set; }
    public ITestCaseVariation TestCaseVariation { get; public set; }
    public QueueItem(ScenarioEngine scenarioEngine, ITestCaseVariation testCaseVariation);
    public ScenarioEngine get_ScenarioEngine();
    public void set_ScenarioEngine(ScenarioEngine value);
    public ITestCaseVariation get_TestCaseVariation();
    public void set_TestCaseVariation(ITestCaseVariation value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.RandomTableCursor : BaseTableCursor {
    private static Random s_random;
    private static RandomTableCursor();
    public virtual void NextRow();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Range : ValueType {
    public static Range Empty;
    [StoreXmlSimpleFieldAttribute]
private int m_lower;
    [StoreXmlSimpleFieldAttribute]
private int m_upper;
    public int Lower { get; public set; }
    public int Upper { get; public set; }
    public Range(int lower, int upper);
    private static Range();
    public int get_Lower();
    public void set_Lower(int value);
    public int get_Upper();
    public void set_Upper(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
public class Microsoft.VisualStudio.TestTools.WebStress.RangeValue : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <End>k__BackingField;
    public Nullable`1<long> Start { get; public set; }
    public Nullable`1<long> End { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_End();
    [CompilerGeneratedAttribute]
public void set_End(Nullable`1<long> value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.RequestEnumeratorException : WebTestException {
    public RequestEnumeratorException(string message);
    public RequestEnumeratorException(string message, Exception innerException);
    protected RequestEnumeratorException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.VisualStudio.TestTools.WebStress.RetryHelper : object {
    private static bool s_logToConsole;
    private static int MaxRetryCount;
    public static T Retry(Func`1<T> function);
    public static void Retry(Action action);
    private static bool IsSqlTransactionRetryNeeded(int failCount, Exception ex);
    private static void LogMessage(string message);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.RigResultEntry : object {
    private WebLoadIntervalSummaryResults m_rigResults;
    private DateTime m_firstAgentResultTime;
    private int m_agentResultsMerged;
    private int m_agentResultsExpected;
    private Dictionary`2<string, bool> m_agentResultReceivedMap;
    private bool m_lateResultsReported;
    internal WebLoadIntervalSummaryResults RigResults { get; internal set; }
    internal DateTime FirstAgentResultTime { get; }
    internal int AgentResultsExpected { get; }
    internal int AgentResultsMerged { get; }
    internal string MissingAgentNames { get; }
    internal bool LateResultsReported { get; internal set; }
    public RigResultEntry(WebLoadIntervalSummaryResults rigResults, Dictionary`2<string, bool> agentsRunning);
    internal bool MergeAgentResults(WebLoadIntervalSummaryResults agentResult);
    internal void set_RigResults(WebLoadIntervalSummaryResults value);
    internal WebLoadIntervalSummaryResults get_RigResults();
    internal DateTime get_FirstAgentResultTime();
    internal int get_AgentResultsExpected();
    internal int get_AgentResultsMerged();
    internal string get_MissingAgentNames();
    internal void set_LateResultsReported(bool value);
    internal bool get_LateResultsReported();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.RuleReference : object {
    private string m_ruleName;
    private string m_ruleDescription;
    private WebTestClassName m_className;
    private List`1<WebTestPropertyInfo> m_propertyInfos;
    private ConditionalRuleType m_conditionalRuleType;
    private RuleExecutionOrder m_ruleExecutionOrder;
    public string RuleName { get; }
    public string RuleDescription { get; }
    public WebTestClassName ClassName { get; }
    public List`1<WebTestPropertyInfo> WebTestPropertyInfos { get; }
    public ConditionalRuleType ConditionalRuleType { get; }
    public RuleExecutionOrder RuleExecution { get; }
    public RuleReference(string ruleName, string ruleDescription, ConditionalRuleType ruleConditionalRuleType, RuleExecutionOrder executionOrder, WebTestClassName className, List`1<WebTestPropertyInfo> propertyInfos);
    public string get_RuleName();
    public string get_RuleDescription();
    public WebTestClassName get_ClassName();
    public List`1<WebTestPropertyInfo> get_WebTestPropertyInfos();
    public ConditionalRuleType get_ConditionalRuleType();
    public RuleExecutionOrder get_RuleExecution();
}
[LocalizableDisplayNameAttribute("ThresholdRuleNameCompareConstant")]
[LocalizableDescriptionAttribute("ThresholdRuleDescriptionCompareConstant")]
public class Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareConstant : object {
    private bool m_alertIfOver;
    private float m_warningThreshold;
    private bool m_warningThresholdSet;
    private float m_criticalThreshold;
    private bool m_criticalThresholdSet;
    private string m_violationMessage;
    public string ViolationMessage { get; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyAlertIfOverName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryOptions")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyAlertIfOverDescription")]
[DefaultValueAttribute("True")]
public bool AlertIfOver { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyWarningThresholdName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryValues")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyWarningThresholdDescription")]
public float WarningThreshold { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyCriticalThresholdName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryValues")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyCriticalThresholdDescription")]
public float CriticalThreshold { get; public set; }
    public sealed virtual ThresholdRuleResult CheckCounterValue(PerformanceCounterValue counterValue, ICounterProvider counterProvider);
    public sealed virtual string get_ViolationMessage();
    public void set_AlertIfOver(bool value);
    public bool get_AlertIfOver();
    public void set_WarningThreshold(float value);
    public float get_WarningThreshold();
    public void set_CriticalThreshold(float value);
    public float get_CriticalThreshold();
}
[LocalizableDisplayNameAttribute("ThresholdRuleNameCompareCounters")]
[LocalizableDescriptionAttribute("ThresholdRuleDescriptionCompareCounters")]
public class Microsoft.VisualStudio.TestTools.WebStress.Rules.ThresholdRuleCompareCounters : object {
    private bool m_alertIfOver;
    private float m_warningThreshold;
    private bool m_warningThresholdSet;
    private float m_criticalThreshold;
    private bool m_criticalThresholdSet;
    private string m_dependentMachine;
    private string m_dependentCategory;
    private string m_dependentCounter;
    private string m_dependentInstance;
    private string m_violationMessage;
    public string ViolationMessage { get; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyAlertIfOverName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryOptions")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyAlertIfOverDescription")]
[DefaultValueAttribute("True")]
public bool AlertIfOver { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyWarningThresholdName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryValues")]
[LocalizableDescriptionAttribute("ThresholdRuleCompareCountersWarningThresholdDescription")]
public float WarningThreshold { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyCriticalThresholdName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryValues")]
[LocalizableDescriptionAttribute("ThresholdRuleCompareCountersCriticalThresholdDescription")]
public float CriticalThreshold { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyDependentMachineName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryDependentCounter")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyDependentMachineDescription")]
public string DependentMachine { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyDependentCategoryName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryDependentCounter")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyDependentCategoryDescription")]
public string DependentCategory { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyDependentCounterName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryDependentCounter")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyDependentCounterDescription")]
public string DependentCounter { get; public set; }
    [LocalizableDisplayNameAttribute("ThresholdRulePropertyDependentInstanceName")]
[LocalizableCategoryAttribute("ThresholdRuleCategoryDependentCounter")]
[LocalizableDescriptionAttribute("ThresholdRulePropertyDependentInstanceDescription")]
public string DependentInstance { get; public set; }
    public sealed virtual ThresholdRuleResult CheckCounterValue(PerformanceCounterValue counterValue, ICounterProvider counterProvider);
    public sealed virtual string get_ViolationMessage();
    public void set_AlertIfOver(bool value);
    public bool get_AlertIfOver();
    public void set_WarningThreshold(float value);
    public float get_WarningThreshold();
    public void set_CriticalThreshold(float value);
    public float get_CriticalThreshold();
    public void set_DependentMachine(string value);
    public string get_DependentMachine();
    public void set_DependentCategory(string value);
    public string get_DependentCategory();
    public void set_DependentCounter(string value);
    public string get_DependentCounter();
    public void set_DependentInstance(string value);
    public string get_DependentInstance();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.RunConfig : object {
    private string m_name;
    private string m_description;
    private LoadTestResultsStoreType m_resultsStoreType;
    private WebTestConnectionModel m_webTestConnectionModel;
    private int m_webTestConnectionPoolSize;
    private int m_sampleRate;
    private bool m_useTestIterations;
    private int m_warmupTime;
    private int m_runDuration;
    private int m_coolDownTime;
    private int m_testIterations;
    private ValidationLevel m_validationLevel;
    private LoadTestTimingDetailsStorage m_timingDetailsStorage;
    private bool m_MoveTimingDetailsInline;
    private LoadTestRunType m_LoadTestRunType;
    private int m_TimingDetailsBatchSize;
    private bool m_saveTestLogsOnError;
    private int m_saveTestLogsFrequency;
    private int m_maxErrorDetails;
    private int m_maxRequestUrlsReported;
    private int m_maxErrorsPerType;
    private int m_maxThresholdViolations;
    [NonPersistableAttribute]
private ConnectionStringValues m_sqlTracingConnectStrings;
    private string m_sqlTracingDirectory;
    private bool m_sqlTracingEnabled;
    private bool m_sqlTracingRolloverEnabled;
    private int m_sqlTracingMinimumDuration;
    private int m_sqlFileRetentionCount;
    private bool m_runUnitTestsInAppDomain;
    private int m_coreCount;
    private int m_resourcesRetentionTimeInMinutes;
    private AgentDiagnosticsLevel m_agentDiagnosticsLevel;
    private List`1<CounterSetMapping> m_counterSetMappings;
    private List`1<AutComponent> m_autComponents;
    private List`1<GeoLocation> m_geoLocations;
    private List`1<ContextParameter> m_contextParameters;
    private int m_maxTransactionsReported;
    private bool m_defaultReportingName;
    private bool m_reportDependentRequests;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public LoadTestResultsStoreType ResultsStoreType { get; public set; }
    public WebTestConnectionModel WebTestConnectionModel { get; public set; }
    public int WebTestConnectionPoolSize { get; public set; }
    public int SampleRate { get; public set; }
    public int WarmupTime { get; public set; }
    public int EffectiveWarmupTime { get; }
    public int RunDuration { get; public set; }
    public int CoolDownTime { get; public set; }
    public int TotalRunDuration { get; }
    public bool UseTestIterations { get; public set; }
    public int TestIterations { get; public set; }
    public ValidationLevel ValidationLevel { get; public set; }
    public int MaxErrorDetails { get; public set; }
    public int MaxErrorsPerType { get; public set; }
    public int MaxThresholdViolations { get; public set; }
    public bool SaveTestLogsOnError { get; public set; }
    public int SaveTestLogsFrequency { get; public set; }
    public int MaxRequestUrlsReported { get; public set; }
    public ConnectionStringValues SqlTracingConnectStrings { get; public set; }
    public string SqlTracingDirectory { get; public set; }
    public int SqlFileRetentionCount { get; public set; }
    public bool SqlTracingEnabled { get; public set; }
    public bool SqlTracingRolloverEnabled { get; public set; }
    public int SqlTracingMinimumDuration { get; public set; }
    public int CoreCount { get; public set; }
    public int ResourcesRetentionTimeInMinutes { get; public set; }
    public AgentDiagnosticsLevel AgentDiagnosticsLevel { get; public set; }
    public bool RunUnitTestsInAppDomain { get; public set; }
    public List`1<CounterSetMapping> CounterSetMappings { get; public set; }
    public List`1<AutComponent> AutComponents { get; public set; }
    public List`1<GeoLocation> LoadGeneratorLocations { get; public set; }
    public List`1<ContextParameter> ContextParameters { get; public set; }
    public LoadTestTimingDetailsStorage TimingDetailsStorage { get; public set; }
    public LoadTestRunType TestRunType { get; public set; }
    public bool MoveTimingDetailsInline { get; public set; }
    public int TimingDetailsBatchSize { get; public set; }
    public int MaxTransactionsReported { get; public set; }
    public bool DefaultReportingName { get; public set; }
    public bool ReportDependentRequests { get; public set; }
    public RunConfig(RunConfig copy);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public LoadTestResultsStoreType get_ResultsStoreType();
    public void set_ResultsStoreType(LoadTestResultsStoreType value);
    public WebTestConnectionModel get_WebTestConnectionModel();
    public void set_WebTestConnectionModel(WebTestConnectionModel value);
    public int get_WebTestConnectionPoolSize();
    public void set_WebTestConnectionPoolSize(int value);
    public int get_SampleRate();
    public void set_SampleRate(int value);
    public int get_WarmupTime();
    public void set_WarmupTime(int value);
    public int get_EffectiveWarmupTime();
    public int get_RunDuration();
    public void set_RunDuration(int value);
    public int get_CoolDownTime();
    public void set_CoolDownTime(int value);
    public int get_TotalRunDuration();
    public bool get_UseTestIterations();
    public void set_UseTestIterations(bool value);
    public int get_TestIterations();
    public void set_TestIterations(int value);
    public ValidationLevel get_ValidationLevel();
    public void set_ValidationLevel(ValidationLevel value);
    public int get_MaxErrorDetails();
    public void set_MaxErrorDetails(int value);
    public int get_MaxErrorsPerType();
    public void set_MaxErrorsPerType(int value);
    public int get_MaxThresholdViolations();
    public void set_MaxThresholdViolations(int value);
    public bool get_SaveTestLogsOnError();
    public void set_SaveTestLogsOnError(bool value);
    public int get_SaveTestLogsFrequency();
    public void set_SaveTestLogsFrequency(int value);
    public int get_MaxRequestUrlsReported();
    public void set_MaxRequestUrlsReported(int value);
    public ConnectionStringValues get_SqlTracingConnectStrings();
    public void set_SqlTracingConnectStrings(ConnectionStringValues value);
    public string get_SqlTracingDirectory();
    public void set_SqlTracingDirectory(string value);
    public int get_SqlFileRetentionCount();
    public void set_SqlFileRetentionCount(int value);
    public bool get_SqlTracingEnabled();
    public void set_SqlTracingEnabled(bool value);
    public bool get_SqlTracingRolloverEnabled();
    public void set_SqlTracingRolloverEnabled(bool value);
    public int get_SqlTracingMinimumDuration();
    public void set_SqlTracingMinimumDuration(int value);
    public int get_CoreCount();
    public void set_CoreCount(int value);
    public int get_ResourcesRetentionTimeInMinutes();
    public void set_ResourcesRetentionTimeInMinutes(int value);
    public AgentDiagnosticsLevel get_AgentDiagnosticsLevel();
    public void set_AgentDiagnosticsLevel(AgentDiagnosticsLevel value);
    public bool get_RunUnitTestsInAppDomain();
    public void set_RunUnitTestsInAppDomain(bool value);
    public List`1<CounterSetMapping> get_CounterSetMappings();
    public void set_CounterSetMappings(List`1<CounterSetMapping> value);
    public List`1<AutComponent> get_AutComponents();
    public void set_AutComponents(List`1<AutComponent> value);
    public List`1<GeoLocation> get_LoadGeneratorLocations();
    public void set_LoadGeneratorLocations(List`1<GeoLocation> value);
    public List`1<ContextParameter> get_ContextParameters();
    public void set_ContextParameters(List`1<ContextParameter> value);
    public LoadTestTimingDetailsStorage get_TimingDetailsStorage();
    public void set_TimingDetailsStorage(LoadTestTimingDetailsStorage value);
    public LoadTestRunType get_TestRunType();
    public void set_TestRunType(LoadTestRunType value);
    public bool get_MoveTimingDetailsInline();
    public void set_MoveTimingDetailsInline(bool value);
    public int get_TimingDetailsBatchSize();
    public void set_TimingDetailsBatchSize(int value);
    public int get_MaxTransactionsReported();
    public void set_MaxTransactionsReported(int value);
    public bool get_DefaultReportingName();
    public void set_DefaultReportingName(bool value);
    public bool get_ReportDependentRequests();
    public void set_ReportDependentRequests(bool value);
    public sealed virtual object Clone();
    public bool IsCounterSetMapped(CounterSet counterSet);
    public List`1<string> GetMachineNamesForSut();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.SaveResultOption : Enum {
    public int value__;
    public static SaveResultOption Save;
    public static SaveResultOption SaveOnError;
    public static SaveResultOption DontSave;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ScenarioEngine : object {
    private WebTestScenario m_scenario;
    private ITestMixSelector m_testMix;
    private DeterministicWeightedCollection m_browserMix;
    private DeterministicWeightedCollection m_networkMix;
    private LoadTestWarmupLoadProfile m_warmupLoadProfile;
    private object m_loadProfileLock;
    private bool m_newLoadProfileSinceCheckPoint;
    private LoadTestAdapterCommand m_pendingChangeLoadProfileCommand;
    private LoadTestAdapterCommand m_pendingChangeDelayCommand;
    private int m_elapsedSecondsAtStartOfCurrentLoadProfile;
    private WebLoadExecutionEngine m_webLoadExecutionEngine;
    private bool m_running;
    private bool m_scenarioTestsComplete;
    private int m_variationsQueued;
    private int m_queuedLoad;
    private int m_variationsRunning;
    private ArrayList m_testCases;
    private LoadTestUserManager m_userManager;
    private WebTestConnectionManager m_connectionManager;
    private LoadTestThreadPool m_threadPool;
    private WebTestQueuedCompletion m_delayCompletionQueue;
    private static QueuedCallback s_delayedQueueTest;
    private int m_agentId;
    private AgentLoadDistributor m_agentLoadDistributor;
    private object m_completeLock;
    private object m_queueTestLock;
    private object m_userContextLock;
    private Dictionary`2<int, WebTestCaseVariation> m_webTestVariations;
    private int m_delayInWarmup;
    private int m_delayAfterWarmup;
    public WebTestScenario Scenario { get; }
    public bool Running { get; }
    public int UserLoadOnThisAgent { get; }
    public int VariationsRunning { get; }
    public ScenarioEngine(WebTestScenario scenario, WebLoadExecutionEngine engine, WebTestConnectionManager connectionManager, int warmupTime, int agentId, AgentLoadDistributor agentLoadDistributor);
    private static ScenarioEngine();
    public void Unload();
    public WebTestScenario get_Scenario();
    public bool get_Running();
    public int get_UserLoadOnThisAgent();
    public int get_VariationsRunning();
    public void CheckPoint(bool warmingUp, bool coolingDown, int elapsedSeconds);
    public void TestCaseStarting(ITestCaseVariation variation);
    public void TestCaseComplete(ITestCaseVariation variation, TestIterationResult iterationResult);
    public void ChangeLoadProfile(LoadTestLoadProfile newLoadProfile);
    private void PrepareTest(WebTestProfile testProfile, bool includeInTestMix);
    private bool ScheduleTest(ITestCaseVariation previousVariation, bool scheduleTerminateTest);
    private LoadTestUserContext SelectNextUserContext(ITestCaseVariation previousVariation, bool scheduleTerminateTest);
    private static void DelayedQueueTest(object callerState);
    private bool QueueTest(LoadTestUserContext userContext, bool scheduleTerminateTest);
    private void CheckScenarioComplete();
    private ITestCaseVariation CreateVariation(LoadTestUserContext userContext, bool isTerminateTest);
    private ITestCaseVariation CreateWebTestVariation(LoadTestUserContext userContext, WebTestElement webTestElement, int testIteration);
    private void LoadProfileChangedByPlugin(object source, LoadProfileChangedByPluginEventArgs profileChangedEventArgs);
    private void DelayBetweenIterationsChangedByPlugin(object source, DelayBetweenIterationsChangedByPluginEventArgs delayEventArgs);
    private void SendLoadTestAdapterCommand(LoadTestAdapterCommand command);
    private void LogDebugInfo(int elapsedSeconds);
    private void CheckForHungWebTestVariations();
    private void ProcessException(Exception exception, string testName);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ScrollingDataSeries : DataSeries {
    private Single[] m_buckets;
    private int m_startBucket;
    private int m_nextBucket;
    private int m_scrollCount;
    private CounterSample m_samplePrevious;
    private CounterSample m_sampleOrigin;
    private List`1<CounterSample> m_samplesAtScrollBoundary;
    private int m_startSeconds;
    private int m_sampleRateSeconds;
    private int m_lastUpdateSeconds;
    private int m_nextScrollBoundary;
    public int MinX { get; }
    public int MaxX { get; }
    public ScrollingDataSeries(LoadTestStat stat, int sampleRateSeconds, CounterSample baseSample, int capacity, int scrollCount, bool isCounterTypeAverage);
    public void AddSample(int elapsedSeconds, CounterSample newSample);
    public virtual int get_MinX();
    public virtual int get_MaxX();
    public virtual DataPoint[] Points();
    public virtual DataPoint PointAt(int index);
    public virtual int PointCount();
    private void AddToSeries(CounterSample newSample);
    private void RecomputeValues();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Semaphore : object {
    private int m_count;
    private object m_semLock;
    public int Count { get; }
    public Semaphore(int count);
    public int get_Count();
    public void AddOne();
    public void WaitOne();
    public void P();
    public void V();
    public void Reset(int count);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.SequentialTableCursor : BaseTableCursor {
    public virtual void NextRow();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.SequentialTestMixSelector : object {
    private Dictionary`2<int, int> m_userTestIndices;
    private List`1<ITestElement> m_tests;
    public int Count { get; }
    public sealed virtual int get_Count();
    public sealed virtual void Add(ITestElement testElement, decimal frequency);
    public sealed virtual bool Remove(ITestElement testElement);
    public sealed virtual TimeSpan GetDelay(LoadTestUserContext userContext);
    public sealed virtual ITestElement Select(LoadTestUserContext userContext);
    public sealed virtual void TestComplete(LoadTestUserContext userContext, ITestElement testElement, TestIterationResult iterationResult);
}
public class Microsoft.VisualStudio.TestTools.WebStress.SqlUtilities : object {
    private SqlConnection _sqlConnection;
    public SqlUtilities(SqlConnection connection);
    public SqlDataReader ExecuteReader(SqlTransaction transaction, string cmdText);
    public void ExecuteSqlNonQuery(SqlTransaction transaction, string sql);
    public void ExecuteSqlNonQuery(string sql);
    public SqlTransaction BeginTransaction();
    private void OpenConnectionIfNeeded();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.Strings : object {
    public static string FallbackBrowserName;
    public static string NewTestSuite;
    public static string DataSource;
    public static string EnterComputerName;
    public static string NameCannotBeBlank;
    public static string NameTooLong;
    public static string NameHasInvalidCharacters;
    public static string Scenario;
    public static string Test;
    public static string Transaction;
    public static string Total;
    public static string CouldNotConnectToLoadTestDB;
    public static string ExpectedResponseCodeError;
    public static string ExpectedResponseCodeSubType;
    public static string DataCollectorWarningSubType;
    public static string DataCollectorErrorSubType;
    public static string LoadTestAbortedByPlugin;
    public static string ColumnDescriptionLastValue;
    public static string ColumnDescription90Percent;
    public static string ColumnDescription95Percent;
    public static string DataSourceExceptionMessage;
    public static string DeserializationErrorMessage;
    public static string DataTableRowIndexOfOutRange;
    public static string ReloadDataTablePassedUnknownDataSource;
    public static string ReloadDataTablePassedUnknownDataTable;
    public static string LoadTestExceptionMessage;
    public static string WebTestExceptionMessage;
    public static string WebTestEnumeratorExceptionMessage;
    public static string ErrorOnComputer;
    public static string LoadTestCorrupt;
    public static string LoadTestFileCreatedByLaterRelease;
    public static string DatabaseCreationError;
    public static string GenericTestCaseExceptionMessage;
    public static string CannotExecuteTestExceptionMessage;
    public static string CannotCorrelateWhileTestIsRunning;
    public static string CannotCorrelateWhileTestIsRunningAfterRecording;
    public static string CannotFindAttachmentFile;
    public static string LoadTestRunNotFoundInRepository;
    public static string RunConfigExceptionMessage1;
    public static string RunConfigExceptionMessage2;
    public static string RepositoryExceptionMessage;
    public static string RepositoryOutOfSpaceExceptionMessage;
    public static string RepositoryCreationExceptionMessage;
    public static string RepositoryUpgradeExceptionMessage;
    public static string SqlScriptNotFound;
    public static string SqlTraceCloseException;
    public static string SqlTraceOpenException;
    public static string SqlTraceStartException;
    public static string SqlTraceStartFileException;
    public static string SqlTraceStopException;
    public static string XmlResultsExceptionMessage;
    public static string CounterCategoryExceptionMessage;
    public static string CategorySecurityExceptionMessage;
    public static string CounterSetExceptionMessage;
    public static string OldLoadTestCounterSetMessage;
    public static string ResultsCollectorIntervalException;
    public static string ResultsCollectorTerminateException;
    public static string RowCountExceptionMessage;
    public static string InvalidErrorReportExceptionMessage;
    public static string AgentNotFoundExceptionMessage;
    public static string DependentCounterException;
    public static string UnexpectedLoadTestObjectException;
    public static string CounterNotFoundException;
    public static string RequestTimedOutErrorText;
    public static string WebTestFailureSummary;
    public static string WebTestEventException;
    public static string NoResultAvailableException;
    public static string TestIsPending;
    public static string ClassDoesntImplementILoadTestPlugin;
    public static string GoalCounterNotFoundExceptionMessage;
    public static string GoalCounterCouldNotBeRead;
    public static string GoalCounterCategoryNotMapped;
    public static string GoalCounterInstanceNotFound;
    public static string EndOfDataExceptionMessage;
    public static string DataTableDoesNotExistException;
    public static string ResultsCollectorSlowException;
    public static string ResultsCollectorTimeoutException;
    public static string ErrorLimitExceededException;
    public static string RequestUrlsExceededException;
    public static string CategoryTimeoutException;
    public static string AgentResultsLateException;
    public static string InsufficentMemoryException;
    public static string ThreadStartException;
    public static string OtherRequestUrls;
    public static string CannotAddColumnToDataTableDuringRun;
    public static string WebTestFailedByCode;
    public static string WebTestRequestFailedByCode;
    public static string WebTestRequestBindingErrors;
    public static string WebTestRequestBindingTimeouts;
    public static string WebTestRuntimeShutdown;
    public static string WebTestTransactionInitiationThreadException;
    public static string WebTestStoppedDueToExcessiveExceptions;
    public static string BindingSiteException;
    public static string IncludeWebTestNotFoundException;
    public static string InitializeDataBindingException;
    public static string TransactionAlreadyStartedException;
    public static string TransactionNotStartedException;
    public static string UnknownException;
    public static string UnableToLoadLoadTest;
    public static string UnableToLoadWebTest;
    public static string ReloadTest;
    public static string CannotRunWebTestTmiNotLoaded;
    public static string CriticalThresholdExceeded;
    public static string WarningThresholdExceeded;
    public static string CriticalThresholdLessThan;
    public static string WarningThresholdLessThan;
    public static string LoadTestRunIdAccessException;
    public static string CountersMaximumSelection;
    public static string NoCountersCollectedErrorMessage;
    public static string InternetConnectivityIssueErrorMessage;
    public static string ErrorFetchingApplicationsErrorMessage;
    public static string CannotGetApplicationsCountersTokenExpired;
    public static string CannotGetAppCountersAzureSubscriptionNotLinked;
    public static string UserSelectedMoreThanMaxLimit;
    public static string NoErrorsNoResultsRepository;
    public static string UnexpectedLoadTestPattern;
    public static string SupportOnlyPhysicalView;
    public static string UnsupportedResultFromQEQS;
    public static string UnsupportedSaveFlag;
    public static string SecureConnectStringWarning;
    public static string ConfirmReplaceExistingFile;
    public static string UnknownFormat;
    public static string UnsupportedProjectType;
    public static string UnsupportedCreateDocFlag;
    public static string UnknownTestToolsHostApplication;
    public static string CodeGenConnectStringAndPasswordHidden;
    public static string CodeGenConnectStringHidden;
    public static string CodeGenPasswordHidden;
    public static string SettingLoadTestTimeoutNotSupported;
    public static string SelectedTestNotFound;
    public static string ExportTempFileNotFound;
    public static string ImportFileCouldNotBeUnzipped;
    public static string ImportFileIncomplete;
    public static string ImportFileRevNotSupported;
    public static string ImportFileFromBeta2;
    public static string ImportTempTablesCouldNotBeCreated;
    public static string ImportTabularDataException;
    public static string TabularDataColumnNotFound;
    public static string TabularDataColumnHasWrongType;
    public static string DataCollectorXmlFileHasWrongTableCount;
    public static string DataCollectorXmlFileMissingField;
    public static string ImportPerformanceMetaDataException;
    public static string ImportPerformanceDataException;
    public static string PerformanceCounterDataCollectorMetadataFileNotFound;
    public static string UnableToStoreDataCollectorFile;
    public static string FileAttachmentNotFound;
    public static string NoPortsAvailableInRange;
    public static string InvalidNewtConfigurationForLocalLoadTest;
    public static string InvalidNewtConfigurationForAgent;
    public static string NotLicensedToExecuteLocally;
    public static string NotLicensedToExecuteOnController;
    public static string HardLoadTestLicenseComplianceViolation;
    public static string SoftLoadTestLicenseComplianceViolation;
    public static string UserLacksPermissionsToCreateLoadTestDB;
    public static string LimitedQueueTimeoutException;
    public static string NetworkEmulationNotInstalled;
    public static string NetworkEmulationNotBound;
    public static string NetworkEmulationRequiresAdminPrivileges;
    public static string LoadTestDBSchemaNotCompatible;
    public static string LoadTestDBSchemaNotCompatibleWithBeta2;
    public static string IPSwitchingAddressFamilyMismatch;
    public static string CannotStartProgramAssociatedWithFile;
    public static string ErrorWritingWtrFile;
    public static string CouldNotReadDetailResultsFormat;
    public static string SqlExpressGuidanceText1;
    public static string SqlExpressGuidanceText2;
    public static string SqlExpressGuidanceLinkText;
    public static string BcpNotFound;
    public static string CategoryScenario;
    public static string CategoryTestcase;
    public static string CategoryTransaction;
    public static string CategoryPage;
    public static string CategoryRequest;
    public static string CategoryError;
    public static string CategoryLogEntries;
    public static string CounterUserLoad;
    public static string CounterTestCasesActive;
    public static string CounterTestcases;
    public static string CounterPassedTestcases;
    public static string CounterFailedTestcases;
    public static string CounterTestcasesPerSec;
    public static string CounterFailedTestcasesPerSec;
    public static string CounterPassedTestcasesPerSec;
    public static string CounterRequests;
    public static string CounterSucceededRequests;
    public static string CounterFailedRequests;
    public static string CounterCachedRequests;
    public static string CounterRPS;
    public static string CounterPassedRPS;
    public static string CounterFailedRPS;
    public static string CounterTimeInLoadTestPlugin;
    public static string CounterTimeInWebTestCode;
    public static string CounterTimeInRules;
    public static string CounterTestcaseTime;
    public static string CounterTestcaseRequests;
    public static string CounterTTFB;
    public static string CounterTTLB;
    public static string CounterTimeToConnect;
    public static string CounterContentLength;
    public static string CounterTotalPages;
    public static string CounterPageResponseTime;
    public static string CounterPageGoal;
    public static string CounterPagePctMetGoal;
    public static string CounterPagesPerSec;
    public static string CounterTotalTransactions;
    public static string CounterTransactionElapsedTime;
    public static string CounterTransactionResponseTime;
    public static string CounterTransactionsPerSec;
    public static string CounterHttpErrors;
    public static string CounterValidationRuleErrors;
    public static string CounterExtractionRuleErrors;
    public static string CounterExceptions;
    public static string CounterTimeouts;
    public static string CounterTotalErrors;
    public static string CounterErrorsPerSec;
    public static string CounterViolationsPerSec;
    public static string CounterLogEntriesPerSec;
    public static string CounterTotalLogEntries;
    public static string TotalInstanceName;
    public static string AgentInstanceNamePrefix;
    public static string PerfCounterLimitExceeded;
    public static string CurrentLoadNegative;
    public static string DelayBetweenIterationsNegative;
    public static string InitialUserCountExceedsMax;
    public static string InitialUserCountLessThanMin;
    public static string InitialUserCountNegative;
    public static string LoadProfileMinTargetExceedsMax;
    public static string LoadProfileMinUsersExceedsMax;
    public static string StepDurationIsZero;
    public static string StepRampTimeNegative;
    public static string StepRampTimeExceedsDuration;
    public static string StepUserCountNegative;
    public static string UserCountNegative;
    public static string LoadProfileCannotBeModified;
    public static string GoalMonitorThreadException;
    public static string MaxAutoRedirectExceededException;
    public static string TestAborted;
    public static string TestCompletedWithErrors;
    public static string TestCompletedWithOutcome;
    public static string TestCaseStatistics;
    public static string RequestStatistics;
    public static string LoadTestNotLoaded;
    public static string LoadTestException;
    public static string Overall;
    public static string Computers;
    public static string Errors;
    public static string LogEntries;
    public static string ErrorOccurredRunningTest;
    public static string UnknownTransactionId;
    public static string UnknownRequestId;
    public static string InProcController;
    public static string Controller;
    public static string CannotLoadTestCases;
    public static string NoTestCasesInLoadTest;
    public static string UserLoadIsZero;
    public static string RunDurationIsZero;
    public static string ResultsConnectStringMissing;
    public static string TestMixPercentagesAllZero;
    public static string GraphNamePrefix;
    public static string ReadingResultsDatabase;
    public static string ReceivedErrorReadingResultsDatabase;
    public static string ReadingCountersFromDatabase;
    public static string ConnectingToController;
    public static string TestQueuedToController;
    public static string StartingTest;
    public static string TestStarted;
    public static string TestStopped;
    public static string CoolDownRemaining;
    public static string ElapsedRemaining;
    public static string WarmupRemaining;
    public static string RemainingTests;
    public static string StoppingTest;
    public static string TestCompleted;
    public static string TestInProgress;
    public static string TestWillBeAborted;
    public static string ErrorStatusLink;
    public static string ThresholdStatusLink;
    public static string ErrorsStatusLink;
    public static string ThresholdsStatusLink;
    public static string EmptyDataBindingTable;
    public static string WarmingUp;
    public static string WritingResults;
    public static string InitializingResultsCollection;
    public static string LoadProfileInvalid;
    public static string BehindPacingError;
    public static string BehindPacingWarning;
    public static string ScenarioInvalid;
    public static string NoCounterSamples;
    public static string TransacionsNodeLabel;
    public static string PagesNodeLabel;
    public static string RequestsNodeLabel;
    public static string Cached;
    public static string ColumnNameTransactionName;
    public static string ColumnNamePageName;
    public static string ColumnNameRequestName;
    public static string ColumnNameWebTestName;
    public static string ColumnNameScenarioName;
    public static string ColumnNameTotalTransactions;
    public static string ColumnNameTransactionResponseTime;
    public static string ColumnNameTransactionElapsedTime;
    public static string ColumnNamePageResponseTime;
    public static string ColumnNamePageGoal;
    public static string ColumnNamePagePctMetGoal;
    public static string ColumnNameTotalPages;
    public static string ColumnNameTotalRequests;
    public static string ColumnNameSuccessRequests;
    public static string ColumnNameFailedRequests;
    public static string ColumnNameRequestsPerSecond;
    public static string ColumnNameRequestsPassedPerSec;
    public static string ColumnNameRequestsFailedPerSec;
    public static string ColumnNameCachedRequests;
    public static string ColumnNameTTFBAve;
    public static string ColumnNameTTLBAve;
    public static string ColumnNameTimeToConnectAve;
    public static string ColumnNameContentLengthAve;
    public static string ColumnNameTotalTests;
    public static string ColumnNamePassedTests;
    public static string ColumnNameFailedTests;
    public static string ColumnNameTestsPerSecond;
    public static string ColumnNameTestsPassedPerSec;
    public static string ColumnNameTestsFailedPerSec;
    public static string ColumnNameTestElapsedTimeAve;
    public static string ColumnNameTestcaseRequests;
    public static string ColumnNameTTLBLast;
    public static string ColumnNameAgentName;
    public static string ColumnNameTestElapsedTimeLast;
    public static string ColumnNameTestElapsedTime90;
    public static string ColumnNameTestElapsedTime95;
    public static string ColumnNameTransactionTimeLast;
    public static string ColumnNameTransactionTime90;
    public static string ColumnNameTransactionTime95;
    public static string ColumnNamePageTimeLast;
    public static string ColumnNamePageTime90;
    public static string ColumnNamePageTime95;
    public static string CouldNotOpenRepository;
    public static string CouldNotOpenRepository2;
    public static string CouldNotWriteResultsToRepository;
    public static string RepositoryRequiredForPostRunAnalysis;
    public static string CassiniCannotBeStarted;
    public static string CassiniBindingSyntaxIncorrect;
    public static string InteralErrorCannotDisplayLoadTestResult;
    public static string TestLevelValidationRulesComment;
    public static string LoadTestMonitorTableLabelAgents;
    public static string LoadTestMonitorTableLabelErrors;
    public static string LoadTestMonitorTableLabelPages;
    public static string LoadTestMonitorTableLabelRequests;
    public static string LoadTestMonitorTableLabelSqlTrace;
    public static string LoadTestMonitorTableLabelTests;
    public static string LoadTestMonitorTableLabelTestLogs;
    public static string LoadTestMonitorTableLabelThresholds;
    public static string LoadTestMontiorTableLabelTransactions;
    public static string DefaultGraphNameKeyIndicator;
    public static string DefaultGraphNameSUT;
    public static string DefaultGraphNameRig;
    public static string DefaultGraphNamePageResponseTime;
    public static string DefaultGraphNameTestResponseTime;
    public static string DefaultGraphNameTransactionResponseTime;
    public static string TimeLabelHHMMSSsss;
    public static string TimeLabelMMSSsss;
    public static string TimeLabelHHMMSS;
    public static string TimeLabelMMSS;
    public static string TestDetailToolTip;
    public static string TestDetailTooltip_NoNetwork;
    public static string PageDetail_ToolTip;
    public static string TransactionDetail_ToolTip;
    public static string DetailGraphName_Test;
    public static string DetailGraphName_Page;
    public static string DetailGraphName_Transaction;
    public static string TooManyDetailsRead;
    public static string CounterSet_Agent;
    public static string CounterSet_Controller;
    public static string CounterSet_Application;
    public static string CounterSet_AdoDotNet;
    public static string CounterSet_AspDotNet;
    public static string CounterSet_DotNetApplication;
    public static string CounterSet_IIS;
    public static string CounterSet_SQL;
    public static string CounterSet_SharePoint2010WFE;
    private static ResourceManager s_res;
    private static ResourceManager s_resLocalized;
    private static Strings();
    public static string Get(string name);
    public static string Get(string resultsLocale, string name);
    public static string GetNeutralString(string name);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.SummaryGenerator : object {
    private string _connectString;
    private int _loadTestRunId;
    private static string updateSummaryDataSp;
    private SqlConnection _connection;
    internal SummaryGenerator(string connectString, int loadtestRunId);
    private static SummaryGenerator();
    public void UpdateSummaryData(WebTestSuite suite);
    private void OpenConnectionIfNeeded();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.TempFileEntry : object {
    public WebTestObjectType ObjectType;
    public int Length;
    public TempFileEntry(WebTestObjectType objectType, int length);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.TestDetailDescriptor : object {
    private string m_name;
    private int m_colorArgb;
    private int m_style;
    public string Name { get; public set; }
    public int ColorArgb { get; public set; }
    public int Style { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public int get_ColorArgb();
    public void set_ColorArgb(int value);
    public int get_Style();
    public void set_Style(int value);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.TestMixType : Enum {
    public int value__;
    public static TestMixType PercentageOfTestsStarted;
    public static TestMixType PercentageOfUsersRunning;
    public static TestMixType UserPacing;
    public static TestMixType Sequential;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.TestNameValidator : object {
    private static string s_invalidCharacters;
    internal static void ValidateTestName(string name);
    internal static void ValidateScenarioName(string name);
    internal static void ValidateTransactionName(string name);
    internal static void ValidateDataSourceName(string name);
    private static void ValidateName(string name, string nameType, bool allowPeriod);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.TestTracker : object {
    private ITestElement m_testElement;
    private decimal m_weight;
    private int m_testsRunning;
    private int m_testsStarted;
    public ITestElement TestElement { get; }
    public decimal Weight { get; }
    public int TestsRunning { get; public set; }
    public int TestsStarted { get; public set; }
    public TestTracker(ITestElement testElement, decimal weight);
    public ITestElement get_TestElement();
    public decimal get_Weight();
    public void set_TestsRunning(int value);
    public int get_TestsRunning();
    public void set_TestsStarted(int value);
    public int get_TestsStarted();
    public double UnderTarget(int totalTestsRunning, double totalWeight);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ThresholdRuleInvocation : object {
    internal InstanceSummaryBuilder m_instanceSummaryBuilder;
    internal LoadTestCounterSample m_sample;
    internal IThresholdRule m_ruleInstance;
    internal PerformanceCounterValue m_counterValue;
    internal ThresholdRuleInvocation(InstanceSummaryBuilder instanceSummaryBuilder, LoadTestCounterSample sample, IThresholdRule ruleInstance, PerformanceCounterValue counterValue);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ThresholdRuleReference : WebTestRuleBase {
    private List`1<PluginOrRuleProperty> m_persistedRuleProperties;
    private string m_persistedFullClassName;
    private ThresholdRuleReference(ThresholdRuleReference copy);
    public IThresholdRule CreateInstance();
    public virtual object Clone();
    public sealed virtual void PrepareToPersist();
    public sealed virtual void RecoverFromPersistence();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ThresholdViolationResult : object {
    private ThresholdRuleResult m_violationType;
    private LoadTestCounterDescriptor m_descriptor;
    private DateTime m_intervalEndTime;
    private string m_message;
    public ThresholdRuleResult ViolationType { get; }
    public LoadTestCounterDescriptor CounterDescriptor { get; }
    public DateTime IntervalEndTime { get; }
    public string Message { get; }
    public ThresholdViolationResult(ThresholdRuleResult type, LoadTestCounterDescriptor descriptor, DateTime intervalEndTime, string message);
    public ThresholdRuleResult get_ViolationType();
    public LoadTestCounterDescriptor get_CounterDescriptor();
    public DateTime get_IntervalEndTime();
    public string get_Message();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.UniqueTableCursor : BaseTableCursor {
    private int m_indexIncrement;
    public int CurrentRow { get; public set; }
    public int IndexIncrement { get; public set; }
    public virtual int get_CurrentRow();
    public virtual void set_CurrentRow(int value);
    public int get_IndexIncrement();
    public void set_IndexIncrement(int value);
    public virtual void NextRow();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.UserPacingTestMixSelector : object {
    private static Random s_random;
    private WeightedCollection m_baseTestMix;
    private Dictionary`2<int, WeightedCollection> m_userTestMixes;
    private double m_totalTestsPerHour;
    private bool m_applyDistributionToDelay;
    private WebLoadStatistic m_testDurationStatistic;
    private bool m_behindPacingWarningReported;
    private bool m_behindPacingErrorReported;
    public int Count { get; }
    private long TestIntervalTicks { get; }
    public UserPacingTestMixSelector(bool applyDistributionToDelay);
    private static UserPacingTestMixSelector();
    public sealed virtual int get_Count();
    public sealed virtual void Add(ITestElement testElement, decimal testsPerUserPerHour);
    public sealed virtual bool Remove(ITestElement testElement);
    public sealed virtual TimeSpan GetDelay(LoadTestUserContext userContext);
    public sealed virtual ITestElement Select(LoadTestUserContext userContext);
    public sealed virtual void TestComplete(LoadTestUserContext userContext, ITestElement testElement, TestIterationResult iterationResult);
    private long get_TestIntervalTicks();
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestTools.WebStress.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadBrowserMap : object {
    private List`1<string> m_browserNames;
    private Dictionary`2<string, int> m_browserDictionary;
    public List`1<string> BrowserNames { get; }
    public WebLoadBrowserMap(WebTestSuite suite);
    public int GetBrowserId(string browserName);
    public List`1<string> get_BrowserNames();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadExecutionEngine : object {
    private static int c_defaultLoadTestSourcePortRangeStart;
    private static int c_defaultLoadTestSourcePortRangeEnd;
    private WebTestSuite m_suite;
    private RunConfig m_runConfig;
    private LoadTest m_loadTest;
    private bool m_hasPlugin;
    private int m_iterationNumber;
    private int m_scenariosRunning;
    private DateTime m_startTime;
    private int m_warmupTime;
    private int m_runDuration;
    private bool m_warmupCompleteCalled;
    private bool m_coolingDown;
    private int m_testIterations;
    private int m_testsQueued;
    private DateTime m_expectedEndTime;
    private Dictionary`2<string, ScenarioEngine> m_scenarioEngines;
    private static WebLoadExecutionEngine s_theEngine;
    private static AsyncCallback s_completionCallback;
    private static bool s_continueRunning;
    private static bool s_ranToCompletion;
    private static ManualResetEvent s_stopEvent;
    private static ManualResetEvent s_stoppedEvent;
    private static AutoResetEvent s_queueAvailable;
    private static bool s_aborted;
    private static Exception s_abortingException;
    private static bool m_applyLoadOnCheckPoint;
    private WebTestSuiteDataManager m_dataManager;
    private WebTestQueuedCompletion m_timeoutQueuedCompletion;
    private WebTestQueuedCompletion m_thinkTimeQueuedCompletion;
    private WebTestQueuedCompletion m_networkDelayQueuedCompletion;
    private WebLoadResultsManager m_resultsManager;
    private int m_restartOffset;
    private LoadTestThreadPool m_threadPool;
    private long m_totalMsInLoadTestPlugin;
    private NetworkEmulationType m_networkEmulationType;
    public static WebLoadExecutionEngine ExecutionEngine { get; }
    public bool ContinueRunning { get; }
    internal WebTestQueuedCompletion TimeoutQueuedCompletion { get; }
    internal WebTestQueuedCompletion ThinkTimeQueuedCompletion { get; }
    internal NetworkEmulationType NetworkEmulationType { get; }
    internal WebTestQueuedCompletion NetworkDelayQueuedCompletion { get; }
    public WebTestSuiteDataManager SuiteDataManager { get; }
    internal WebLoadResultsManager ResultsManager { get; }
    internal int NextIterationNumber { get; }
    public long TotalMsInLoadTestPlugin { get; public set; }
    public bool CoolingDown { get; }
    public ValidationLevel ValidationLevel { get; }
    public LoadTest LoadTest { get; }
    public WebTestSuite WebTestSuite { get; }
    public RunConfig RunConfig { get; }
    private static WebLoadExecutionEngine();
    public static void CreateEngine();
    public void Initialize(WebTestSuite suite);
    public void Run(WebTestSuite suite, Boolean& ranToCompletion);
    public void Stop();
    internal bool QueueVariation(QueueItem item);
    private void SendLoadTestNetworkEmulationConfiguration(WebTestSuite loadTest);
    private void DisableNetworkEmulationConfiguration();
    private void SendNetworkEmulationConfiguration(NetworkEmulationProfile profile);
    internal void ReportLoad();
    internal void ChangeLoadProfile(string scenarioName, LoadTestLoadProfile loadProfile);
    internal void ChangeDelayBetweenIterations(string scenarioName, int delayBetweenIterations);
    internal void SetRigInfo(LoadTestRigInfo rigInfo);
    internal void AdjustLoad(LoadProfileAdjustment loadProfileAdjustment);
    private ScenarioEngine GetScenarioEngine(string scenarioName, string messageType);
    internal void ReportThresholdExceeded(ThresholdExceededEventArgs thresholdExceededEventArgs);
    internal void ReportTimeInLoadTestPlugin(string callType, Stopwatch stopWatch);
    public static WebLoadExecutionEngine get_ExecutionEngine();
    public bool get_ContinueRunning();
    internal WebTestQueuedCompletion get_TimeoutQueuedCompletion();
    internal WebTestQueuedCompletion get_ThinkTimeQueuedCompletion();
    internal NetworkEmulationType get_NetworkEmulationType();
    internal WebTestQueuedCompletion get_NetworkDelayQueuedCompletion();
    public WebTestSuiteDataManager get_SuiteDataManager();
    internal WebLoadResultsManager get_ResultsManager();
    internal int get_NextIterationNumber();
    public void set_TotalMsInLoadTestPlugin(long value);
    public long get_TotalMsInLoadTestPlugin();
    public bool get_CoolingDown();
    public ValidationLevel get_ValidationLevel();
    public LoadTest get_LoadTest();
    public WebTestSuite get_WebTestSuite();
    public RunConfig get_RunConfig();
    private bool InitializePlugin();
    private void LoadTestAborted(object source, LoadTestAbortedEventArgs abortedEventArgs);
    internal void ScenarioComplete(ScenarioEngine scenarioEngine);
    internal void ProcessPluginException(Exception e);
    internal static string GetMessageForLoadTestProfileException(string loadTestName, InvalidLoadProfileException invalidLoadProfileException);
    internal string GetMessageForLoadTestScenarioException(InvalidLoadTestScenarioException invalidScenarioException);
    internal void ProcessException(Exception e, string scenarioName, string testCaseName);
    internal bool QueueMoreVariations();
    private double GetCurrentCpuMs();
    private static void LogPerformanceInfo(WebTestSuite suite, long totalRequests, double cpuTimeMs);
    private static void AbortRun(string sourceOfAbort, Exception e);
    private static void CheckPointProc();
    private static void RunProc(object callerState);
    private static void RequestComplete(WebTestInstrumentedTransaction transaction, object state, WebTestExecutionInstruction type);
    private static void TransactionComplete(ITestCaseVariation variation, TimerResult transactionResult);
    private static void PageComplete(ExecutionState executionState);
    private static void TestCaseComplete(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadIntervalSummaryResults : object {
    private WebLoadResultsType m_resultsType;
    private WebLoadResultsScope m_resultsScope;
    private string m_agentName;
    private int m_intervalNumber;
    private bool m_warmupInterval;
    private LoadTestStatistics m_loadTestStatistics;
    private WebLoadTestCaseStatistics m_testCaseStatistics;
    private WebLoadRequestStatistics m_requestStatistics;
    private Dictionary`2<string, WebLoadScenarioSummaryResults> m_scenarioSummaries;
    private DateTime m_intervalStartTime;
    private DateTime m_intervalEndTime;
    private bool m_ranToCompletion;
    private ArrayList m_errors;
    private int m_lastErrorId;
    private int m_mergedResults;
    private RunConfig m_runConfig;
    public WebLoadResultsType ResultsType { get; }
    public WebLoadResultsScope ResultsScope { get; public set; }
    public string AgentName { get; }
    public int IntervalNumber { get; }
    public bool WarmupInterval { get; }
    public LoadTestStatistics LoadTestStatistics { get; public set; }
    public WebLoadTestCaseStatistics TestCaseStatistics { get; }
    public WebLoadRequestStatistics RequestStatistics { get; }
    public ICollection ScenarioSummaryResults { get; }
    public DateTime IntervalStartTime { get; public set; }
    public DateTime IntervalEndTime { get; public set; }
    public bool RanToCompletion { get; public set; }
    public ArrayList Errors { get; }
    public int LastErrorId { get; }
    public long UserLoad { get; }
    public long TestCasesActive { get; }
    internal WebLoadIntervalSummaryResults(WebLoadResultsType resultsType, WebLoadResultsScope resultsScope, string agentName, int intervalNumber, bool warmupInterval, RunConfig runConfig);
    public void WriteXml(XmlTextWriter xmlWriter);
    public void WriteErrors(XmlTextWriter xmlWriter);
    public int MergeResults(WebLoadIntervalSummaryResults resultsToMerge);
    internal void PrepareForSerialization();
    public WebLoadResultsType get_ResultsType();
    public void set_ResultsScope(WebLoadResultsScope value);
    public WebLoadResultsScope get_ResultsScope();
    public string get_AgentName();
    public int get_IntervalNumber();
    public bool get_WarmupInterval();
    public void set_LoadTestStatistics(LoadTestStatistics value);
    public LoadTestStatistics get_LoadTestStatistics();
    public WebLoadTestCaseStatistics get_TestCaseStatistics();
    public WebLoadRequestStatistics get_RequestStatistics();
    public ICollection get_ScenarioSummaryResults();
    public void set_IntervalStartTime(DateTime value);
    public DateTime get_IntervalStartTime();
    public void set_IntervalEndTime(DateTime value);
    public DateTime get_IntervalEndTime();
    public void set_RanToCompletion(bool value);
    public bool get_RanToCompletion();
    public ArrayList get_Errors();
    public int get_LastErrorId();
    public long get_UserLoad();
    public long get_TestCasesActive();
    internal void ProcessTestCaseResults(ITestCaseVariation testCaseVariation);
    internal void ProcessTransactionResult(string scenarioName, string testName, TimerResult transactionResult);
    internal void ProcessPageResult(string scenarioName, string testName, WebTestPageResult pageResult);
    internal void ProcessRequestResults(WebTestRequestResults requestResults);
    internal void ProcessError(WebTestError error, string scenarioName, string testcaseName);
    internal void ReportLoad(string scenarioName, int currentLoad, int testCasesActive);
    private WebLoadScenarioSummaryResults GetScenarioResultsByName(string scenarioName);
    private void ProcessErrors(ITestCaseVariation testCaseVariation);
    public void ProcessErrors(WebTestRequestResults requestResults);
    private void AddError(WebTestErrorReport errorReport);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadNamedCounter : object {
    private string m_Name;
    private int m_Value;
    public string Name { get; }
    public int Value { get; public set; }
    public WebLoadNamedCounter(string Name);
    public string get_Name();
    public void set_Value(int value);
    public int get_Value();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadNetworkMap : object {
    private List`1<string> m_networkNames;
    private Dictionary`2<string, int> m_networkDictionary;
    public List`1<string> NetworkNames { get; }
    public WebLoadNetworkMap(WebTestSuite suite);
    public int GetNetworkId(string networkName);
    public List`1<string> get_NetworkNames();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadPageSummaryResults : object {
    private string m_pageUri;
    private WebLoadStatistic m_responseTimeStatistic;
    private WebLoadStatistic m_responseTimeGoalStatistic;
    private int m_pagesMeetingGoal;
    private float m_responseTimeGoal;
    private bool m_hasReportingName;
    public string PageUri { get; }
    public WebLoadStatistic ResponseTimeStatistic { get; }
    public WebLoadStatistic ResponseTimeGoalStatistic { get; }
    public int PagesMeetingGoal { get; }
    public float ResponseTimeGoal { get; }
    public bool HasReportingName { get; }
    public WebLoadPageSummaryResults(string pageUri);
    internal void ProcessPageTimer(WebTestPageResult pageResult);
    public void MergeResults(WebLoadPageSummaryResults resultsToMerge);
    public string get_PageUri();
    public WebLoadStatistic get_ResponseTimeStatistic();
    public WebLoadStatistic get_ResponseTimeGoalStatistic();
    public int get_PagesMeetingGoal();
    public float get_ResponseTimeGoal();
    public bool get_HasReportingName();
    private void InitializePageUri(string pageUri);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadRequestMap : object {
    private int m_requestId;
    private ArrayList m_requestList;
    private Hashtable m_requestIdMap;
    private int m_maxEntries;
    private bool m_maxEntriesExceeded;
    public bool MaxEntriesExceeded { get; }
    public WebLoadRequestMap(int maxEntries);
    public WebLoadRequestMapEntry GetEntry(int requestId);
    public WebLoadRequestMapEntry GetEntry(int testCaseId, string requestUri);
    public WebLoadRequestMapEntry AddEntry(int testCaseId, string requestUri, float responseTimeGoal);
    public WebLoadRequestMapEntryCollection GetEntryCollection(int firstRequestId);
    public bool get_MaxEntriesExceeded();
    private string GetKey(int testCaseId, string requestUri);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadRequestMapEntry : object {
    private float m_responseTimeGoal;
    private int m_testCaseId;
    private int m_requestId;
    private string m_requestUri;
    private string m_counterInstanceName;
    public int TestCaseId { get; }
    public int RequestId { get; }
    public string RequestUri { get; }
    public float ResponseTimeGoal { get; }
    public string CounterInstanceName { get; }
    public WebLoadRequestMapEntry(int testCaseId, int requestId, float responseTimeGoal, string requestUri);
    public int get_TestCaseId();
    public int get_RequestId();
    public string get_RequestUri();
    public float get_ResponseTimeGoal();
    public string get_CounterInstanceName();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadRequestMapEntryCollection : CollectionBase {
    public WebLoadRequestMapEntry Item { get; }
    public int Add(WebLoadRequestMapEntry instance);
    public void Insert(int index, WebLoadRequestMapEntry instance);
    public int IndexOf(WebLoadRequestMapEntry instance);
    public void Remove(WebLoadRequestMapEntry instance);
    public WebLoadRequestMapEntry get_Item(int index);
    public bool Contains(WebLoadRequestMapEntry instance);
    public void CopyTo(WebLoadRequestMapEntry[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadRequestResultName : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasReportingName>k__BackingField;
    private static string ReportingNamePrefix;
    public string Url { get; private set; }
    public bool HasReportingName { get; private set; }
    public WebLoadRequestResultName(string name);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_HasReportingName();
    [CompilerGeneratedAttribute]
private void set_HasReportingName(bool value);
    public static string GetReportingName(WebTestRequest request);
    public static string GetUrlForResults(WebTestRequest request);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadRequestStatistics : object {
    private static int TicksPerMillisecond;
    private int m_requestCount;
    private int m_successfulRequestCount;
    private int m_failedRequestCount;
    private int m_cachedRequestCount;
    private WebLoadStatistic m_contentLengthStatistic;
    private WebLoadStatistic m_timeToFirstByteStatistic;
    private WebLoadStatistic m_timeToLastByteStatistic;
    private WebLoadStatistic m_connectWaitTimeStatistic;
    public int RequestCount { get; }
    public int SuccessfulRequestCount { get; }
    public int FailedRequestCount { get; }
    public int CachedRequestCount { get; }
    public WebLoadStatistic ContentLength { get; }
    public WebLoadStatistic TimeToFirstByte { get; }
    public WebLoadStatistic TimeToLastByte { get; }
    public WebLoadStatistic ConnectWaitTime { get; public set; }
    public int CalculateRequestsPerSecond(TimeSpan timeSpan);
    public int CalculateFailedRequestsPerSecond(TimeSpan timeSpan);
    public int get_RequestCount();
    public int get_SuccessfulRequestCount();
    public int get_FailedRequestCount();
    public int get_CachedRequestCount();
    public WebLoadStatistic get_ContentLength();
    public WebLoadStatistic get_TimeToFirstByte();
    public WebLoadStatistic get_TimeToLastByte();
    public void set_ConnectWaitTime(WebLoadStatistic value);
    public WebLoadStatistic get_ConnectWaitTime();
    public void ReportRequestResults(WebTestRequestResults requestResults);
    public void MergeStatistics(WebLoadRequestStatistics statsToMerge);
    internal void WriteXml(XmlTextWriter xmlWriter, DateTime intervalStartTime, DateTime intervalEndTime);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadRequestSummaryResults : object {
    private string m_requestUri;
    private float m_responseGoal;
    private WebLoadRequestStatistics m_requestStatistics;
    private bool m_hasReportingName;
    public string RequestUri { get; }
    public bool HasReportingName { get; }
    public float ResponseGoal { get; }
    public WebLoadRequestStatistics RequestStatistics { get; }
    public WebLoadRequestSummaryResults(string requestUri);
    public void ProcessRequestResults(WebTestRequestResults requestResults);
    public void MergeResults(WebLoadRequestSummaryResults resultsToMerge);
    public void WriteXml(XmlTextWriter xmlWriter, DateTime intervalStartTime, DateTime intervalEndTime);
    public string get_RequestUri();
    public bool get_HasReportingName();
    public float get_ResponseGoal();
    public WebLoadRequestStatistics get_RequestStatistics();
    private void InitializeRequestUri(string requestUri);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadResourceLevel : ValueType {
    private int m_measurementCount;
    private long m_minValue;
    private long m_maxValue;
    private long m_lastValue;
    public int MeasurementCount { get; }
    public long MinValue { get; }
    public long MaxValue { get; }
    public long LastValue { get; }
    public void ReportValue(long measurementValue);
    public void MergeStatistic(WebLoadResourceLevel statistic);
    public void WriteXml(XmlWriter xmlWriter, string resourceLevelName);
    public int get_MeasurementCount();
    public long get_MinValue();
    public long get_MaxValue();
    public long get_LastValue();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadResultsManager : object {
    private static string ITEM_RESULTS_FILE;
    private static int ITEM_RESULTS_BATCH_SIZE;
    private static WebLoadResultsManager s_theResultsManager;
    private bool m_started;
    private bool m_warmingUp;
    private bool m_coolingDown;
    private int m_warmupTime;
    private int m_firstMeasurementInterval;
    private int m_lastMeasurementInterval;
    private DateTime m_startTime;
    private DateTime m_expectedEndTime;
    private bool m_includeTimingDetails;
    private WebLoadIntervalSummaryResults m_currentSummaryResults;
    private WebLoadIntervalSummaryResults m_cumulativeSummaryResults;
    private XmlTextWriter m_xmlWriter;
    private WebTestSuite m_suite;
    private RunConfig m_runConfig;
    private Guid m_testRunId;
    private string m_agentName;
    private string m_itemResultsPath;
    private BinaryItemResultWriter m_itemResultWriter;
    private ManualResetEvent m_doneEvent;
    private object m_lock;
    private bool m_intervalChangeInProgress;
    private ManualResetEvent m_intervalChangeCompleteEvent;
    private LoadTestRestartInfo m_restartInfo;
    private int m_restartOffset;
    private WebLoadStatistic m_intervalChangeTimeStatistic;
    private WebLoadStatistic m_messageLengthStatistic;
    private WebLoadStatistic m_testResultProcessingTimeStatistic;
    public static WebLoadResultsManager Instance { get; }
    public RunConfig RunConfig { get; }
    public BinaryItemResultWriter ItemResultWriter { get; }
    public LoadTestRestartInfo RestartInfo { get; }
    public int RestartOffset { get; }
    public bool MaxLogsAlreadyWritten { get; }
    public WebLoadResultsManager(WebTestSuite suite);
    public static WebLoadResultsManager get_Instance();
    public RunConfig get_RunConfig();
    public BinaryItemResultWriter get_ItemResultWriter();
    public LoadTestRestartInfo get_RestartInfo();
    public int get_RestartOffset();
    public bool get_MaxLogsAlreadyWritten();
    public void Initialize(LoadTest loadTest);
    public DateTime Start();
    public void Stop(bool ranToCompletion);
    public void Terminate();
    public void ReportLoad(string scenarioName, int currentLoad, int testCasesActive);
    public void ProcessTestResult(ITestCaseVariation testCaseVariation);
    public void ProcessRequestResults(WebTestRequestResults requestResults);
    internal void ProcessTransactionResult(string scenarioName, string testName, TimerResult transactionResult);
    public void ProcessPageResults(string scenarioName, string testName, WebTestInstrumentedTransaction instrumentedTransaction);
    public void ProcessError(WebTestError error, string scenarioName, string testcaseName);
    public void WarmupComplete();
    public static string CanonicalComputerName(string computerName);
    public static string RelativeTimeMilliseconds(DateTime dateTime, DateTime baseTime);
    public void Checkpoint(int elapsedSecondsIncludingWarmup);
    private void ProcessIntervalChange();
    private void UpdateRestartInfo(List`1<LoadTestItemResult> itemResults);
    private void UpdateIntervalData();
    private void SendItemResultReport(List`1<LoadTestItemResult> itemResults);
    private void SendItemResults();
    public void SendResults(object objectToSend);
    private void GetLock();
    private void ReleaseLock();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebLoadResultsScope : Enum {
    public int value__;
    public static WebLoadResultsScope Agent;
    public static WebLoadResultsScope Rig;
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebLoadResultsType : Enum {
    public int value__;
    public static WebLoadResultsType Intermediate;
    public static WebLoadResultsType Final;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadScenarioSummaryResults : object {
    private string m_scenarioName;
    private WebLoadResultsType m_resultsType;
    private WebLoadResourceLevel m_loadLevel;
    private WebLoadResourceLevel m_testCasesActive;
    private Dictionary`2<string, WebLoadTestCaseSummaryResults> m_testCaseSummaries;
    private RunConfig m_runConfig;
    public string ScenarioName { get; }
    public WebLoadResourceLevel Load { get; }
    public WebLoadResourceLevel TestCasesActive { get; }
    public Dictionary`2<string, WebLoadTestCaseSummaryResults> TestCaseSummaryResults { get; }
    public WebLoadScenarioSummaryResults(string scenarioName, WebLoadResultsType resultsType, RunConfig runConfig);
    private WebLoadTestCaseSummaryResults GetTestCaseResultsByName(string testCaseName);
    public void ProcessTestCaseResults(ITestCaseVariation testCaseVariation);
    internal void ProcessTransactionResult(string testName, TimerResult transactionResult);
    internal void ProcessPageResult(string testName, WebTestPageResult pageResult);
    public void ProcessRequestResults(WebTestRequestResults requestResults);
    public void ReportLoad(int currentLoad, int testCasesActive);
    public void MergeResults(WebLoadScenarioSummaryResults resultsToMerge);
    public void WriteXml(XmlTextWriter xmlWriter, DateTime intervalStartTime, DateTime intervalEndTime);
    internal void PrepareForSerialization();
    public string get_ScenarioName();
    public WebLoadResourceLevel get_Load();
    public WebLoadResourceLevel get_TestCasesActive();
    public Dictionary`2<string, WebLoadTestCaseSummaryResults> get_TestCaseSummaryResults();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadStatistic : ValueType {
    private int m_measurementCount;
    private long m_minValue;
    private long m_maxValue;
    private long m_lastValue;
    private long m_totalOfValues;
    public int MeasurementCount { get; }
    public long MinValue { get; }
    public long MaxValue { get; }
    public long LastValue { get; }
    public long TotalOfValues { get; }
    public double Average { get; }
    public int get_MeasurementCount();
    public long get_MinValue();
    public long get_MaxValue();
    public long get_LastValue();
    public long get_TotalOfValues();
    public double get_Average();
    public void ReportValue(long measurementValue);
    public void MergeStatistic(WebLoadStatistic statistic);
    internal void WriteXml(XmlTextWriter xmlWriter, string statisticName);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadTestAdapter : object {
    private static int c_raiseDataCollectorEventTimeout;
    private static IRunContext s_runContext;
    private static DataCollectorNotifications s_collectorEventSink;
    private static ManualResetEvent s_waitForCollectorEvent;
    private WebTestSuite m_suite;
    private bool m_abortTest;
    private Exception m_prepareException;
    private AssemblyResolver m_assemblyResolver;
    private Timer m_setAffinityTimer;
    private IntPtr m_originalAffinity;
    private static int c_timerFrequency;
    public bool CloseHostApplication { get; }
    public DataCollectorNotifications DataCollectors { get; public set; }
    public static IRunContext RunContext { get; }
    private static WebLoadTestAdapter();
    public sealed virtual void Initialize(IRunContext runContext);
    public sealed virtual void Prepare(ITestElement testElement);
    public sealed virtual void Cleanup();
    public bool TimeoutTest();
    public sealed virtual void PreTestRunFinished(IRunContext runContext);
    public sealed virtual void StopTestRun();
    public sealed virtual void AbortTestRun();
    public sealed virtual void PauseTestRun();
    public sealed virtual void ResumeTestRun();
    public sealed virtual void ReceiveMessage(object objectReceived);
    public sealed virtual void Run(ITestElement testElement, ITestContext testContext);
    public sealed virtual bool get_CloseHostApplication();
    public sealed virtual DataCollectorNotifications get_DataCollectors();
    public sealed virtual void set_DataCollectors(DataCollectorNotifications value);
    internal static void RaiseDataCollectorEvent(DataCollectionEventArgs dataCollectionEventArgs);
    private void VerifySuiteIsReadyToRun(WebTestSuite suite);
    private void VerifySuiteTestMix(WebTestSuite suite);
    public static void VerifyNetworkEmulationIsUsable(WebTestSuite loadTest);
    private void ProcessRunException(ITestElement testElement, ITestContext testContext, Exception e, bool ranToCompletion);
    private LoadTestResult GetErrorResult(ITestElement testElement, Exception e);
    private void ResetAffinityTimer(object state);
    public static IRunContext get_RunContext();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadTestCaseStatistics : object {
    private static int TicksPerMillisecond;
    private int m_testCaseCount;
    private int m_failedTestCaseCount;
    private int m_passedTestCaseCount;
    private WebLoadStatistic m_requestsPerTestCaseStatistic;
    private WebLoadStatistic m_elapsedTimeStatistic;
    public int TestCaseCount { get; }
    public int PassedTestCaseCount { get; }
    public int FailedTestCaseCount { get; }
    public WebLoadStatistic RequestsPerTestCase { get; }
    public WebLoadStatistic ElapsedTime { get; }
    public int CalculateTestCasesPerSecond(TimeSpan timeSpan);
    public int CalculateFailedTestCasesPerSecond(TimeSpan timeSpan);
    public int get_TestCaseCount();
    public int get_PassedTestCaseCount();
    public int get_FailedTestCaseCount();
    public WebLoadStatistic get_RequestsPerTestCase();
    public WebLoadStatistic get_ElapsedTime();
    internal void ProcessTestCaseResults(ITestCaseVariation testCaseVariation);
    internal void MergeStatistics(WebLoadTestCaseStatistics statsToMerge);
    internal void WriteXml(XmlTextWriter xmlWriter, DateTime intervalStartTime, DateTime intervalEndTime);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadTestCaseSummaryResults : object {
    private string m_testCaseName;
    private WebLoadResultsType m_resultsType;
    private WebLoadTestCaseStatistics m_testCaseStatistics;
    private WebLoadRequestSummaryResults[] m_requestSummaryArray;
    private Dictionary`2<string, WebLoadTransactionSummaryResults> m_transactionSummaries;
    private Dictionary`2<string, WebLoadPageSummaryResults> m_pageSummaries;
    private Hashtable m_requestSummaries;
    private RunConfig m_runConfig;
    public string TestCaseName { get; }
    public WebLoadTestCaseStatistics TestCaseStatistics { get; }
    public WebLoadRequestSummaryResults[] RequestSummaryResults { get; }
    internal ValueCollection<string, WebLoadTransactionSummaryResults> TransactionTimers { get; }
    internal ValueCollection<string, WebLoadPageSummaryResults> PageTimers { get; }
    private Hashtable RequestSummaryTable { get; }
    public WebLoadTestCaseSummaryResults(string testCaseName, WebLoadResultsType resultsType, RunConfig runConfig);
    public void ProcessTestCaseResults(ITestCaseVariation testCaseVariation);
    internal void ProcessTransactionResult(TimerResult transactionResult);
    internal void ProcessPageResult(WebTestPageResult pageResult);
    public void ProcessRequestResults(WebTestRequestResults requestResults);
    public void MergeResults(WebLoadTestCaseSummaryResults resultsToMerge);
    public void WriteXml(XmlTextWriter xmlWriter, DateTime intervalStartTime, DateTime intervalEndTime);
    public string get_TestCaseName();
    public WebLoadTestCaseStatistics get_TestCaseStatistics();
    public WebLoadRequestSummaryResults[] get_RequestSummaryResults();
    internal ValueCollection<string, WebLoadTransactionSummaryResults> get_TransactionTimers();
    internal ValueCollection<string, WebLoadPageSummaryResults> get_PageTimers();
    internal void PrepareForSerialization();
    private WebLoadTransactionSummaryResults GetTransactionSummary(string transactionName);
    private WebLoadPageSummaryResults GetPageSummary(string pageUri);
    private WebLoadRequestSummaryResults GetRequestSummaryForUri(string requestUri);
    private void RequestSummaryTableToArray();
    private Hashtable get_RequestSummaryTable();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadTransactionMap : object {
    private int m_transactionId;
    private ArrayList m_transactionList;
    private Hashtable m_transactionIdMap;
    public WebLoadTransactionMapEntry GetEntry(int requestId);
    public WebLoadTransactionMapEntry GetEntry(int testCaseId, string transactionName);
    public WebLoadTransactionMapEntry AddEntry(int testCaseId, string transactionName);
    public WebLoadTransactionMapEntryCollection GetEntryCollection(int firstRequestId);
    private string GetKey(int testCaseId, string transactionName);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadTransactionMapEntry : object {
    private int m_testCaseId;
    private int m_transactionId;
    private string m_transactionName;
    private string m_counterInstanceName;
    public int TestCaseId { get; }
    public int TransactionId { get; }
    public string TransactionName { get; }
    public string CounterInstanceName { get; }
    public WebLoadTransactionMapEntry(int testCaseId, int transactionId, string transactionName);
    public int get_TestCaseId();
    public int get_TransactionId();
    public string get_TransactionName();
    public string get_CounterInstanceName();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadTransactionMapEntryCollection : CollectionBase {
    public WebLoadTransactionMapEntry Item { get; }
    public int Add(WebLoadTransactionMapEntry instance);
    public void Insert(int index, WebLoadTransactionMapEntry instance);
    public int IndexOf(WebLoadTransactionMapEntry instance);
    public void Remove(WebLoadTransactionMapEntry instance);
    public WebLoadTransactionMapEntry get_Item(int index);
    public bool Contains(WebLoadTransactionMapEntry instance);
    public void CopyTo(WebLoadTransactionMapEntry[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebLoadTransactionSummaryResults : object {
    private string m_transactionName;
    private WebLoadStatistic m_elapsedTimeStatistic;
    private WebLoadStatistic m_responseTimeStatistic;
    public string TransactionName { get; }
    public WebLoadStatistic ElapsedTimeStatistic { get; }
    public WebLoadStatistic ResponseTimeStatistic { get; }
    public WebLoadTransactionSummaryResults(string transactionName);
    public void ProcessTransactionTimer(TimerResult transactionTimer);
    public void MergeResults(WebLoadTransactionSummaryResults resultsToMerge);
    public string get_TransactionName();
    public WebLoadStatistic get_ElapsedTimeStatistic();
    public WebLoadStatistic get_ResponseTimeStatistic();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestAdapter : object {
    private bool m_inAsyncMode;
    private IRunContext m_runContext;
    private ITestContext m_testContext;
    private ITestElement m_testElement;
    private WebTestRunner m_webTestRunner;
    private AutoResetEvent m_testCompletedEvent;
    private AutoResetEvent m_startTestEvent;
    private WebTestResult m_result;
    private int m_iterationsComplete;
    private bool m_abortTest;
    private static object syncRoot;
    private static WebTestQueuedCompletion m_webTestQueuedCompletion;
    public bool CloseHostApplication { get; }
    private static WebTestQueuedCompletion WebTestQueuedCompletionInstance { get; }
    private static WebTestAdapter();
    public sealed virtual void Initialize(IRunContext runContext);
    public sealed virtual void Cleanup();
    public static void ShutDown();
    public bool TimeoutTest();
    public sealed virtual void PreTestRunFinished(IRunContext runContext);
    public sealed virtual void StopTestRun();
    public sealed virtual void AbortTestRun();
    public sealed virtual void PauseTestRun();
    public sealed virtual void ResumeTestRun();
    public void PreTestRunFinished();
    public sealed virtual void ReceiveMessage(object obj);
    public sealed virtual void LoadRun(ITestElement testElement, ITestContext testContext);
    public sealed virtual void Run(ITestElement testElement, ITestContext testContext);
    public sealed virtual bool get_CloseHostApplication();
    private void ProcessRunException(Exception e);
    private void RunStatusCallback(WebTestRunStatus status, object data);
    private void ProcessAddComment(Comment comment);
    private void ProcessTransactionStarting(WebTestTimer transactionTimer);
    private void ProcessTransactionEnding(ITestCaseVariation variation, TimerResult transactionTimer);
    private void ProcessConditionStarting(WebTestResultCondition conditionResult);
    private void ProcessConditionEnding(WebTestResultCondition conditionResult);
    private void ProcessConditionalRuleExecuting(WebTestResultCondition conditionResult);
    private void ProcessLoopStarting(WebTestResultLoop loopResult);
    private void ProcessLoopEnding(WebTestResultLoop loopResult);
    private void ProcessLoopIterationStarting(WebTestResultLoopIteration loopIterationResult);
    private void ProcessLoopIterationEnding(WebTestResultLoopIteration loopIterationResult);
    private void ProcessAddCorrelationResult(WebTestCorrelationResult correlationResult);
    private void TestCompletedCallback(WebTestCaseVariation variation);
    private void UpdateResult(WebTestCaseVariation variation);
    private string GetWebTestFailureSummary(WebTestCaseVariation variation);
    private void TestComplete();
    private void RequestResultCompletedCallback(WebTestRequestResult requestResult);
    private void SendResultMessage(object objectToSend);
    private static WebTestQueuedCompletion get_WebTestQueuedCompletionInstance();
    private string GetResultsLocaleForWebTest();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestAssemblyRuleInfo : object {
    private string m_assemblyPath;
    private DateTime m_assemblyLastWriteTime;
    private List`1<RuleReference> m_validationRuleReferences;
    private List`1<RuleReference> m_extractionRuleReferences;
    private List`1<RuleReference> m_thresholdRuleReferences;
    private List`1<RuleReference> m_webTestPluginReferences;
    private List`1<RuleReference> m_webTestRequestPluginReferences;
    private List`1<RuleReference> m_loadTestPluginReferences;
    private List`1<RuleReference> m_conditionalRuleReferences;
    public string AssemblyPath { get; }
    public DateTime AssemblyLastWriteTime { get; }
    public List`1<RuleReference> ValidationRuleReferences { get; }
    public List`1<RuleReference> ExtractionRuleReferences { get; }
    public List`1<RuleReference> ThresholdRuleReferences { get; }
    public List`1<RuleReference> WebTestPluginReferences { get; }
    public List`1<RuleReference> WebTestRequestPluginReferences { get; }
    public List`1<RuleReference> ConditionalRuleReferences { get; }
    public List`1<RuleReference> LoadTestPluginReferences { get; }
    public List`1<RuleReference> AllRuleReferences { get; }
    public WebTestAssemblyRuleInfo(string assemblyPath, DateTime assemblyLastWriteTime, List`1<RuleReference> validationRuleReferences, List`1<RuleReference> extractionRuelReferences, List`1<RuleReference> thresholdRuleReferences, List`1<RuleReference> webTestPluginReferences, List`1<RuleReference> webTestRequestPluginReferences, List`1<RuleReference> loadTestPluginReferences, List`1<RuleReference> conditionalRuleReferences);
    public string get_AssemblyPath();
    public DateTime get_AssemblyLastWriteTime();
    public List`1<RuleReference> get_ValidationRuleReferences();
    public List`1<RuleReference> get_ExtractionRuleReferences();
    public List`1<RuleReference> get_ThresholdRuleReferences();
    public List`1<RuleReference> get_WebTestPluginReferences();
    public List`1<RuleReference> get_WebTestRequestPluginReferences();
    public List`1<RuleReference> get_ConditionalRuleReferences();
    public List`1<RuleReference> get_LoadTestPluginReferences();
    public List`1<RuleReference> get_AllRuleReferences();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestBrowser : object {
    [StoreXmlSimpleFieldAttribute("@name")]
private string m_name;
    [StoreXmlSimpleFieldAttribute("@MaxConnections", "Mono.Cecil.CustomAttributeArgument")]
private int m_maxConnections;
    private List`1<WebTestRequestHeader> m_headers;
    public string Name { get; public set; }
    public List`1<WebTestRequestHeader> Headers { get; public set; }
    public int MaxConnections { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public List`1<WebTestRequestHeader> get_Headers();
    public void set_Headers(List`1<WebTestRequestHeader> value);
    public int get_MaxConnections();
    public void set_MaxConnections(int value);
    public sealed virtual object Clone();
    private object ChangedTypeOfPersistedValue(string fieldName, object oldValue);
    internal static List`1<WebTestRequestHeader> LoadWebTestRequestHeaders(XmlElement parentXml);
    internal static void SaveWebTestRequestHeaders(List`1<WebTestRequestHeader> list, XmlElement parentXml);
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestBrowserProfile : object {
    private WebTestBrowser m_browser;
    private decimal m_percentage;
    public WebTestBrowser Browser { get; public set; }
    public decimal Percentage { get; public set; }
    public WebTestBrowser get_Browser();
    public void set_Browser(WebTestBrowser value);
    public decimal get_Percentage();
    public void set_Percentage(decimal value);
    public sealed virtual object Clone();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebTestCacheControl : Enum {
    public int value__;
    public static WebTestCacheControl SimulateBrowser;
    public static WebTestCacheControl Off;
    public static WebTestCacheControl On;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestCaseContext : object {
    private WebTestCaseVariation m_variation;
    private WebTestUserContext m_userContext;
    private WebTestContext m_webTestContext;
    private bool m_correlate;
    private static Dictionary`2<string, string> s_testEnvironmentVariables;
    private static string c_environmentVariableOverridePrefix;
    public WebTestUserContext User { get; public set; }
    public WebTestCaseVariation Variation { get; }
    public WebTestContext WebTestContext { get; }
    public bool Correlate { get; public set; }
    internal WebTestCaseContext(WebTestCaseVariation variation, int webTestIteration, Hashtable runContextParameters, LoadTestContext loadTestContext);
    private static WebTestCaseContext();
    private static Dictionary`2<string, string> GetTestEnvironmentVariables();
    public WebTestUserContext get_User();
    public void set_User(WebTestUserContext value);
    public WebTestCaseVariation get_Variation();
    public WebTestContext get_WebTestContext();
    public void set_Correlate(bool value);
    public bool get_Correlate();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestCaseVariation : object {
    private static RemoteCertificateValidationCallback validateCertificateCallback;
    private static bool s_writeWebTestResultsToTempFiles;
    private static PreRequestDatabindingCallback s_preRequestDatabindingCallback;
    private static PreRequestCallback s_preRequestCallback;
    private static PostPageCallback s_postPageCallback;
    private static QueuedCallback s_timeoutCallback;
    private static QueuedCallback s_pendingCallback;
    private static QueuedCallback s_networkDelayCallback;
    private static AsyncCallback s_completedCallback;
    private static WebLoadStatistic s_thinkTimeErrorStatistic;
    private static long s_totalMsInWebTestCode;
    private WebTestElement m_webTestElement;
    private WebTest m_webTest;
    private bool m_isInitializeTest;
    private bool m_isTerminateTest;
    private LoadTestUserContext m_loadTestUserContext;
    private WebTestUserContext m_userContext;
    private Stopwatch m_stopWatch;
    private DateTime m_lastCompletedRequestTime;
    private WebTestResult m_result;
    private Exception m_exception;
    private WebTestRequestResultBuilder m_requestResultBuilder;
    private bool m_includeDependentsInRequestResults;
    private SaveResultOption m_saveResultOption;
    private int m_testIteration;
    private WebTestCaseContext m_testCaseContext;
    private object m_callerState;
    private AsyncCallback m_completionCallback;
    private object m_processCompleteWebTestLock;
    private AsyncTestCaseResult m_asyncResult;
    private PreRequestCallback m_preRequestCallback;
    private PostRequestCallback m_postRequestCallback;
    private PostPageCallback m_postPageCallback;
    private WebTestRequestResultCompletedCallback m_requestResultCompletedCallback;
    private AddCommentCallback m_addCommentCallback;
    private PreTransactionCallback m_preTransactionCallback;
    private PostTransactionCallback m_postTransactionCallback;
    private PreConditionCallback m_preConditionCallback;
    private PostConditionCallback m_postConditionCallback;
    private PostConditionalRuleCallback m_postConditionalRuleCallback;
    private AddCorrelationResultCallback m_addCorrelationResultCallback;
    private ExceptionCallback m_exceptionCallback;
    private PreLoopCallback m_preLoopCallback;
    private PostLoopCallback m_postLoopCallback;
    private PreLoopIterationCallback m_preLoopIterationCallback;
    private PostLoopIterationCallback m_postLoopIterationCallback;
    private Dictionary`2<string, string> m_extractingRequestsByParameterName;
    private ManualResetEvent m_completionEvent;
    private int m_requestCount;
    private int m_failedRequestCount;
    private int m_failedPrimaryRequestCount;
    private int m_failedConditionalRulesCount;
    private int m_outstandingTopLevelRequests;
    private int m_consecutiveExceptionsBeforePageSent;
    private WebTestThinkProfile m_thinkProfile;
    private bool m_cacheDependents;
    private IEnumerator`1<WebTestRequest> m_requestEnumerator;
    private bool m_requestEnumeratorActive;
    private WebTestTimerResults m_timerResults;
    private WebTestSuiteDataManager m_dataManager;
    private Dictionary`2<string, WebTestResultCondition> m_conditionResults;
    private Dictionary`2<string, WebTestResultLoop> m_loopResults;
    private Dictionary`2<string, WebTestResultLoopIteration> m_loopIterationResults;
    private Dictionary`2<string, LoadTestMessageType> m_messageTypes;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> m_abortHandler;
    private bool m_completeRequestOnAbort;
    private bool m_defaultReportingName;
    public object CallerState { get; }
    public PreRequestCallback PreRequestCallback { get; public set; }
    public PostRequestCallback PostRequestCallback { get; public set; }
    public PostPageCallback PostPageCallback { get; public set; }
    public WebTestRequestResultCompletedCallback RequestResultCompletedCallback { get; public set; }
    public AddCommentCallback AddCommentCallback { get; public set; }
    public PreTransactionCallback PreTransactionCallback { get; public set; }
    public PostTransactionCallback PostTransactionCallback { get; public set; }
    public PreConditionCallback PreConditionCallback { get; public set; }
    public PostConditionCallback PostConditionCallback { get; public set; }
    public PostConditionalRuleCallback PostConditionalRuleCallback { get; public set; }
    public AddCorrelationResultCallback AddCorrelationResultCallback { get; public set; }
    public ExceptionCallback ExceptionCallback { get; public set; }
    public PreLoopCallback PreLoopCallback { get; public set; }
    public PostLoopCallback PostLoopCallback { get; public set; }
    public PreLoopIterationCallback PreLoopIterationCallback { get; public set; }
    public PostLoopIterationCallback PostLoopIterationCallback { get; public set; }
    public bool IsInitializeTest { get; public set; }
    public bool IsTerminateTest { get; public set; }
    public LoadTestUserContext LoadTestUserContext { get; public set; }
    public WebTestUserContext User { get; public set; }
    public WebTestThinkProfile ThinkProfile { get; public set; }
    public int RequestCount { get; }
    public int FailedRequestCount { get; }
    public int FailedPrimaryRequestCount { get; }
    public int FailedConditionalRulesCount { get; }
    public bool CacheDependents { get; public set; }
    public bool IncludeDependentsInRequestResults { get; public set; }
    public WebTestSuiteDataManager DataManager { get; public set; }
    public string ScenarioName { get; }
    public ITestElement Test { get; }
    public string TestCaseName { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public DateTime LastCompletedRequestTime { get; }
    public TestResult Result { get; }
    public SaveResultOption SaveResultOption { get; public set; }
    public bool SaveResult { get; }
    public int TestIteration { get; public set; }
    public Exception Exception { get; }
    public WebTestCaseContext Context { get; }
    public ValidationLevel ValidationLevel { get; public set; }
    public WebTest WebTest { get; }
    internal List`1<WebTestPageResult> PageResults { get; }
    public Dictionary`2<string, LoadTestMessageType> MessageTypes { get; }
    public static long TotalMsInWebTestCode { get; public set; }
    public WebTestCaseVariation(WebTestElement webTestElement, int testIteration, Hashtable runContextParameters, WebTestUserContext userContext, LoadTestContext loadTestContext, bool completeRequestOnAbort, bool defaultReportingName);
    private static WebTestCaseVariation();
    public object get_CallerState();
    public void set_PreRequestCallback(PreRequestCallback value);
    public PreRequestCallback get_PreRequestCallback();
    public void set_PostRequestCallback(PostRequestCallback value);
    public PostRequestCallback get_PostRequestCallback();
    public void set_PostPageCallback(PostPageCallback value);
    public PostPageCallback get_PostPageCallback();
    public void set_RequestResultCompletedCallback(WebTestRequestResultCompletedCallback value);
    public WebTestRequestResultCompletedCallback get_RequestResultCompletedCallback();
    public void set_AddCommentCallback(AddCommentCallback value);
    public AddCommentCallback get_AddCommentCallback();
    public void set_PreTransactionCallback(PreTransactionCallback value);
    public PreTransactionCallback get_PreTransactionCallback();
    public void set_PostTransactionCallback(PostTransactionCallback value);
    public PostTransactionCallback get_PostTransactionCallback();
    public void set_PreConditionCallback(PreConditionCallback value);
    public PreConditionCallback get_PreConditionCallback();
    public void set_PostConditionCallback(PostConditionCallback value);
    public PostConditionCallback get_PostConditionCallback();
    public void set_PostConditionalRuleCallback(PostConditionalRuleCallback value);
    public PostConditionalRuleCallback get_PostConditionalRuleCallback();
    public void set_AddCorrelationResultCallback(AddCorrelationResultCallback value);
    public AddCorrelationResultCallback get_AddCorrelationResultCallback();
    public void set_ExceptionCallback(ExceptionCallback value);
    public ExceptionCallback get_ExceptionCallback();
    public void set_PreLoopCallback(PreLoopCallback value);
    public PreLoopCallback get_PreLoopCallback();
    public void set_PostLoopCallback(PostLoopCallback value);
    public PostLoopCallback get_PostLoopCallback();
    public void set_PreLoopIterationCallback(PreLoopIterationCallback value);
    public PreLoopIterationCallback get_PreLoopIterationCallback();
    public void set_PostLoopIterationCallback(PostLoopIterationCallback value);
    public PostLoopIterationCallback get_PostLoopIterationCallback();
    public sealed virtual bool get_IsInitializeTest();
    public sealed virtual void set_IsInitializeTest(bool value);
    public sealed virtual bool get_IsTerminateTest();
    public sealed virtual void set_IsTerminateTest(bool value);
    public sealed virtual LoadTestUserContext get_LoadTestUserContext();
    public sealed virtual void set_LoadTestUserContext(LoadTestUserContext value);
    public WebTestUserContext get_User();
    public void set_User(WebTestUserContext value);
    public WebTestThinkProfile get_ThinkProfile();
    public void set_ThinkProfile(WebTestThinkProfile value);
    public int get_RequestCount();
    public int get_FailedRequestCount();
    public int get_FailedPrimaryRequestCount();
    public int get_FailedConditionalRulesCount();
    public bool get_CacheDependents();
    public void set_CacheDependents(bool value);
    public bool get_IncludeDependentsInRequestResults();
    public void set_IncludeDependentsInRequestResults(bool value);
    public WebTestSuiteDataManager get_DataManager();
    public void set_DataManager(WebTestSuiteDataManager value);
    public sealed virtual string get_ScenarioName();
    public sealed virtual ITestElement get_Test();
    public sealed virtual string get_TestCaseName();
    public sealed virtual DateTime get_StartTime();
    public sealed virtual DateTime get_EndTime();
    public DateTime get_LastCompletedRequestTime();
    public sealed virtual TestResult get_Result();
    public sealed virtual void set_SaveResultOption(SaveResultOption value);
    public sealed virtual SaveResultOption get_SaveResultOption();
    public sealed virtual bool get_SaveResult();
    public sealed virtual void set_TestIteration(int value);
    public sealed virtual int get_TestIteration();
    public sealed virtual Exception get_Exception();
    public WebTestCaseContext get_Context();
    public ValidationLevel get_ValidationLevel();
    public void set_ValidationLevel(ValidationLevel value);
    public WebTest get_WebTest();
    internal List`1<WebTestPageResult> get_PageResults();
    public sealed virtual Dictionary`2<string, LoadTestMessageType> get_MessageTypes();
    public static void set_TotalMsInWebTestCode(long value);
    public static long get_TotalMsInWebTestCode();
    private void CreateWebTestInstance();
    private void ProcessAddComment(string comment, int declarativeWebTestItemId, Guid sourceWebTestId);
    private void ProcessTransactionStarting(string transactionName, bool isForIncludedWebTest, int declarativeWebTestItemId, Guid sourceWebTestId, string resultsLocale);
    private TimeSpan ProcessTransactionEnding(string transactionName, string resultsLocale);
    private void ProcessConditionStarting(WebTestCondition condition, Guid sourceWebTestId);
    private void ProcessConditionalRuleExecuting(WebTestCondition condition);
    private void ProcessConditionEnding(WebTestCondition condition);
    private void ProcessLoopStarting(WebTestLoop loop, Guid sourceWebTestId);
    private void ProcessLoopEnding(WebTestLoop loop, Guid sourceWebTestId);
    private void ProcessLoopIterationStarting(WebTestLoop loop, Guid sourceWebTestId);
    private void ProcessLoopIterationStarting(WebTestLoop loop, WebTestResultLoopIteration loopIterationResult);
    private void ProcessLoopIterationEnding(WebTestLoop loop);
    private void ProcessConditionalRuleException(Exception exception);
    private void UpdateConditionalRuleBindingSites(WebTestConditionalConstruct construct);
    internal void ProcessCorrelationExtraction(string uniqueContextParameterName, string extractingRequestUrl);
    internal void ProcessCorrelationBinding(string uniqueContextParameterName, string bindingRequestUrl);
    private WebTest ProcessCreateIncludedWebTest(Guid parentWebTestId, string webTestName);
    private WebTest ProcessCreateIncludedWebTestByGuid(Guid includedWebTestId);
    private void EnsureDataBindingInitialized(WebTest includedWebTest);
    public sealed virtual void Run();
    public sealed virtual IAsyncResult Run(AsyncCallback completionCallback, object callerState, IDictionary`2<string, object> contextProperties);
    public void AbortVariation();
    private void Start();
    private void ExecuteRequest(WebTestRequest request);
    private void ExecuteRequest(WebTestRequest request, WebTestInstrumentedTransaction parentTransaction, WebTestInstrumentedTransaction redirectingTransaction);
    private static void ProcessCompletedRequest(IAsyncResult result);
    private static void ProcessCompletedRequestAfterNetworkDelay(object callerState);
    private void CheckTestCaseComplete();
    private void ProcessCompletedWebTest(bool aborted);
    private void InvokeInternalPostRequestCallback(ExecutionState executionState);
    private void InvokeInternalPostPageCallback(ExecutionState executionState);
    private void ProcessErrors(ExecutionState executionState);
    private void ProcessErrors(ExecutionState executionState, bool pageComplete);
    private WebTestRequestResult InitializeRequestResult(WebTestInstrumentedTransaction transaction);
    private void ProcessRequestResultCompleted(WebTestRequestResult requestResult);
    private static void InvokeUserPostRequestCallback(ExecutionState executionState);
    private long GetNetworkDelay(ExecutionState executionState);
    private void ProcessCompletedRequest(ExecutionState executionState);
    internal static void SetRequestFailure(WebTestRequest request);
    private void ExecuteNextDependentRequest(WebTestInstrumentedTransaction parentTransaction);
    private void ThinkThenExecuteNextPage(ExecutionState executionState);
    private void AddParsedDependentRequests(ExecutionState executionState);
    private bool ExecuteNextTopLevelRequest();
    private WebTestRequest GetCurrentRequest();
    private static void ExecuteCurrentTopLevelRequestCallback(object callerState);
    private void ExecuteCurrentTopLevelRequest();
    private List`1<WebTestRequest> BuildDependentRequestsList(WebTestInstrumentedTransaction instrumentedTransaction);
    private static void TimeoutCallback(object callerState);
    private void TimeoutRequest(WebTestInstrumentedTransaction instrumentedTransaction);
    private static void ProcessPostPageCallback(object callerState);
    private static void PendingCallback(object callerState);
    internal static void LogStatistics();
    private static void PreRequestDatabindingHandler(WebTestInstrumentedTransaction instrumentedTransaction, object callerState);
    private static WebTestExecutionInstruction PreRequestHandler(WebTestInstrumentedTransaction instrumentedTransaction, object callerState);
    private void MoveDataTableCursor(string dataSourceName, string dataTableName, int newRowIndex);
    private int GetDataTableRowCount(string dataSourceName, string dataTableName);
    private void ReloadDataTable(string dataSourceName, string dataTableName);
    private void ProcessException(Exception ex);
    private void ProcessRequestEventException(WebTestInstrumentedTransaction instrumentedTransaction, Exception ex);
    private static bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private static void ReportTimeInWebTest(string webTestName, string callType, Stopwatch stopWatch);
    [CompilerGeneratedAttribute]
private void add_m_abortHandler(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_m_abortHandler(EventHandler`1<EventArgs> value);
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.WebTestCaseXmlSerializer : object {
    public static DeclarativeWebTestElement Open(string fileName);
    public static DeclarativeWebTestElement Open(Stream stream);
    public static DeclarativeWebTestElement Open(XmlDocument doc);
    public static void Save(DeclarativeWebTestElement element, string fileName);
    public static void Save(DeclarativeWebTestElement element, Stream stream);
    public static XmlDocument Save(DeclarativeWebTestElement element);
    public static TestId LoadTestIdFromFile(string fileName);
    private static void CopyPropertiesFromElementToTest(DeclarativeWebTestElement element, DeclarativeWebTest declarativeWebTest);
    private static void CopyPropertiesFromTestToElement(DeclarativeWebTest declarativeWebTest, DeclarativeWebTestElement element);
}
[DebuggerNonUserCodeAttribute]
[ComVisibleAttribute("False")]
[GeneratedCodeAttribute("MkMsgs", "5.0.20305.0")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestCommentMessagePacker : MessagePacker {
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    private MessageInfo _msgInfo;
    private static MessageInfo s_msgInfo;
    [CompilerGeneratedAttribute]
private static WebTestCommentMessagePacker <Default>k__BackingField;
    public bool SwapBytes { get; public set; }
    public MessageInfo MsgInfo { get; }
    public static WebTestCommentMessagePacker Default { get; private set; }
    public WebTestCommentMessagePacker(MessageInfo mi);
    private static WebTestCommentMessagePacker();
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    public virtual MessageInfo get_MsgInfo();
    [CompilerGeneratedAttribute]
public static WebTestCommentMessagePacker get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(WebTestCommentMessagePacker value);
    public MessageID GetMessageID(Byte* pMsg);
    public MessageID GetMessageID(Byte[] msg);
    public MsgHandle PackMessageTheMessage(WebTestComment* pWebTestComment, IMessageMemory2 memory, Int32& msgLen);
    public Handle UnpackMessageTheMessage(Byte* pMsg, IMessageMemory2 messageMemory);
    public MsgHandle PackMessageTheMessage(_WebTestComment webTestComment, IMessageMemory2 memory, Int32& msgLen);
    public _WebTestComment UnpackMessageTheMessageToClass(Byte* pMsg, IMessageMemory2 messageMemory);
    public _WebTestComment UnpackMessageTheMessageToClass(Byte[] msg, IMessageMemory2 messageMemory);
    public int CalcHeaderLength();
    public int CalcCompressedHeaderLength(Stream stream);
    public Byte[] ReadMessage(Stream stream);
    public void ReadMessageHeader(Stream stream, Int32& length, Int16& id);
    public int GetMessageLength(Byte[] msg);
    public int GetMessageLength(Byte* pMsg);
    public MsgHandle PackMessage(short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public void PackMessage(short msgID, Byte* pData, IMessageMemory memory);
    public void DumpMessage(IMessagePartSink sink, Byte* pMsg);
    public void DumpMessage(IMessagePartSink sink, Byte[] msg);
    public void MergeMessageInfo(MessageInfo targetMsgInfo);
    public void RestoreMessageInfo();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestCompletedCallback : MulticastDelegate {
    public WebTestCompletedCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestCaseVariation variation);
    public virtual IAsyncResult BeginInvoke(WebTestCaseVariation variation, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestConnection : object {
    [CompilerGeneratedAttribute]
private bool <InUse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConnectionBound>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    private string m_connectionName;
    public string ConnectionName { get; }
    public bool InUse { get; public set; }
    public bool IsConnectionBound { get; public set; }
    public int Port { get; public set; }
    public WebTestConnection(string connectionName);
    public string get_ConnectionName();
    [CompilerGeneratedAttribute]
public bool get_InUse();
    [CompilerGeneratedAttribute]
public void set_InUse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsConnectionBound();
    [CompilerGeneratedAttribute]
public void set_IsConnectionBound(bool value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestConnectionGroup : object {
    [CompilerGeneratedAttribute]
private IPAddress <IPAddress>k__BackingField;
    private int m_connectionGroupId;
    private int m_maxConnectionsPerServer;
    private WebTestConnectionModel m_connectionModel;
    private int m_useCount;
    private Queue m_queue;
    private object m_lock;
    private Dictionary`2<string, int> m_serverIdsByServer;
    private Dictionary`2<int, WebTestConnection[]> m_connectionsByServicePointId;
    public int ConnectionGroupId { get; }
    public WebTestConnectionModel ConnectionModel { get; }
    public IPAddress IPAddress { get; public set; }
    public WebTestConnectionGroup(int connectionGroupId, int maxConnectionsPerServer, WebTestConnectionModel connectionModel);
    public int get_ConnectionGroupId();
    public WebTestConnectionModel get_ConnectionModel();
    [CompilerGeneratedAttribute]
public IPAddress get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(IPAddress value);
    public bool WaitForConnectionGroup(WaitCallback callback, object callerState);
    public void ReleaseConnectionGroup();
    public WebTestConnection GetOrCreateConnection(HttpWebRequest httpWebRequest);
    public void CloseAllConnections();
    private static string GetConnectionName(int connectionGroupId, int servicePointId, int connectionIdForServer);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestConnectionManager : object {
    private static WebTestConnectionManager s_instance;
    private static int s_uniqueConnectionGroupId;
    private static WebLoadStatistic s_connectionWaitTimeStatistic;
    private WebTestConnectionModel m_connectionModel;
    private int m_maxConnectionsPerServer;
    private int m_connectionPoolSize;
    private int m_connectionLimit;
    private Int32[] m_connectionUseCounts;
    private List`1<Dictionary`2<int, WebTestConnectionGroup>> m_connectionsByUsage;
    private int m_leastBusyIndex;
    private LoadTestThreadPool m_threadPool;
    public static WebTestConnectionManager Instance { get; }
    public WebTestConnectionModel ConnectionModel { get; public set; }
    public int ConnectionPoolSize { get; }
    public int ConnectionLimit { get; }
    public LoadTestThreadPool ThreadPool { get; }
    public static WebLoadStatistic ConnectionWaitTimeStatistic { get; public set; }
    public WebTestConnectionManager(WebTestConnectionModel connectionModel, int connectionPoolSize, LoadTestThreadPool threadPool, int maxConnectionsPerServer);
    public static WebTestConnectionManager get_Instance();
    public WebTestConnectionModel get_ConnectionModel();
    public void set_ConnectionModel(WebTestConnectionModel value);
    public int get_ConnectionPoolSize();
    public int get_ConnectionLimit();
    public LoadTestThreadPool get_ThreadPool();
    public WebTestConnectionGroup GetConnectionGroup();
    public void ReleaseConnectionGroup(WebTestConnectionGroup connectionGroup);
    public static void ReportConnectionWaitTime(long connectionWaitTime);
    public static void set_ConnectionWaitTimeStatistic(WebLoadStatistic value);
    public static WebLoadStatistic get_ConnectionWaitTimeStatistic();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebTestConnectionModel : Enum {
    public int value__;
    public static WebTestConnectionModel ConnectionPerUser;
    public static WebTestConnectionModel ConnectionPerTestIteration;
    public static WebTestConnectionModel ConnectionPool;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestDataSourceException : WebTestException {
    public WebTestDataSourceException(string message);
    public WebTestDataSourceException(string message, Exception innerException);
    protected WebTestDataSourceException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.VisualStudio.TestTools.WebStress.WebTestDataSourceManager : object {
    private static Dictionary`2<string, TableSchemaCollection> s_mapConnections;
    private static WebTestDataSourceManager();
    public static void ForgetDataSource(string provider, string connectionString);
    public static List`1<string> GetDataFields(string provider, string connectionString, string tableName, TestDataConnectionFactory dataConnectionFactory);
    public static List`1<string> GetDesignTimeDataFields(string provider, string connectionString, string tableName);
    public static DataSourceBindingCollection GetDataSourceBindings(WebTest webTest, TestDataConnectionFactory dataConnectionFactory);
    public static DataSourceBindingCollection GetDesignTimeDataSourceBindings(WebTest webTest);
}
internal abstract class Microsoft.VisualStudio.TestTools.WebStress.WebTestElement : TestElement {
    private WebTestQueuedCompletion m_timeoutQueuedCompletion;
    private bool m_closeTimeoutQueuedCompletion;
    private WebTestQueuedCompletion m_thinkTimeQueuedCompletion;
    private WebTestQueuedCompletion m_networkDelayQueuedCompletion;
    private string m_scenarioName;
    private int m_activeRequests;
    private bool m_running;
    private String[] m_deploymentFilePaths;
    private WebTestElement[] m_includedWebTestElements;
    private Dictionary`2<Guid, WebTestElement> m_allWebTestElementsById;
    [BrowsableAttribute("False")]
internal WebTestQueuedCompletion TimeoutQueuedCompletion { get; internal set; }
    [BrowsableAttribute("False")]
internal WebTestQueuedCompletion ThinkTimeQueuedCompletion { get; internal set; }
    [BrowsableAttribute("False")]
internal WebTestQueuedCompletion NetworkDelayQueuedCompletion { get; internal set; }
    [BrowsableAttribute("False")]
public string ScenarioName { get; public set; }
    [BrowsableAttribute("False")]
public bool Running { get; }
    [BrowsableAttribute("False")]
public WebTest WebTest { get; }
    [BrowsableAttribute("False")]
public List`1<IncludedWebTest> IncludedWebTests { get; }
    [BrowsableAttribute("False")]
public String[] DeploymentFilePaths { get; public set; }
    [BrowsableAttribute("False")]
public string Adapter { get; }
    [BrowsableAttribute("False")]
public string ControllerPlugin { get; }
    public bool CanBeAggregated { get; }
    public bool IsLoadTestCandidate { get; }
    public WebTestElement[] IncludedWebTestElements { get; }
    [BrowsableAttribute("False")]
public TestId[] Elements { get; }
    public Link[] Links { get; }
    public Link[] VisibleLinks { get; }
    public ProductFeature RequiredProductFeatures { get; }
    public WebTestElement(WebTestElement copy);
    internal void set_TimeoutQueuedCompletion(WebTestQueuedCompletion value);
    internal WebTestQueuedCompletion get_TimeoutQueuedCompletion();
    internal void set_ThinkTimeQueuedCompletion(WebTestQueuedCompletion value);
    internal WebTestQueuedCompletion get_ThinkTimeQueuedCompletion();
    internal void set_NetworkDelayQueuedCompletion(WebTestQueuedCompletion value);
    internal WebTestQueuedCompletion get_NetworkDelayQueuedCompletion();
    public void set_ScenarioName(string value);
    public string get_ScenarioName();
    public bool get_Running();
    public abstract virtual WebTest get_WebTest();
    public abstract virtual List`1<IncludedWebTest> get_IncludedWebTests();
    public void set_DeploymentFilePaths(String[] value);
    public String[] get_DeploymentFilePaths();
    public virtual string get_Adapter();
    public virtual string get_ControllerPlugin();
    public virtual bool get_CanBeAggregated();
    public virtual bool get_IsLoadTestCandidate();
    public void IncrementActiveRequests();
    public void DecrementActiveRequests();
    public virtual bool Initialize();
    public void Terminate();
    public WebTestCaseVariation CreateVariation(IRunContext runContext, int testIteration, WebTestUserContext userContext, LoadTestContext loadTestContext, bool completeRequestOnAbort, bool defaultReportingName);
    public WebTestCaseVariation CreateVariation(int testIteration);
    public WebTestCaseVariation CreateVariation(int testIteration, WebTestUserContext userContext);
    public WebTestElement FindIncludedWebTestElement(Guid parentWebTestId, string includedWebTestName);
    public WebTestElement FindIncludedWebTestElement(Guid includedWebTestId);
    internal void SetTestElementsFromTestRun(TestRun testRun);
    internal void SetTestElementsFromTestRunEntries(TestRun testRun, List`1<TestEntry> testEntries, WebTestElement rootWebTestElement);
    private TestEntry FindThisWebTestEntryInTestEntries(List`1<TestEntry> testEntries);
    private void SetTestElementsFromTestRun(TestRun testRun, TestEntry myTestEntry, WebTestElement rootWebTestElement);
    private void CacheWebTestElementOnRoot(WebTestElement webTestElement);
    public WebTestElement[] get_IncludedWebTestElements();
    public sealed virtual TestId[] get_Elements();
    public sealed virtual Link[] get_Links();
    private static Link CreateIncludedWebTestLink(IncludedWebTest includedWebTest);
    public sealed virtual Link[] get_VisibleLinks();
    public sealed virtual void Add(Link id);
    public sealed virtual void Remove(Link id);
    public sealed virtual void Clear();
    public abstract virtual WebTest CreateWebTestInstance();
    public sealed virtual ProductFeature get_RequiredProductFeatures();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestErrorDetail : object {
    private WebTestRequestResult m_requestResult;
    public WebTestRequestResult RequestResult { get; public set; }
    public WebTestErrorDetail(WebTestRequestResult requestResult);
    public void set_RequestResult(WebTestRequestResult value);
    public WebTestRequestResult get_RequestResult();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestErrorDetailReport : LoadTestItemResult {
    private string m_agentName;
    private int m_processInstance;
    private int m_errorReportId;
    private WebTestErrorDetail m_errorDetail;
    public string AgentName { get; }
    public int ProcessInstance { get; }
    public int ErrorReportId { get; }
    public WebTestErrorDetail ErrorDetail { get; }
    public WebTestErrorDetailReport(string agentName, int processInstance, int errorReportId, WebTestErrorDetail errorDetail);
    public string get_AgentName();
    public int get_ProcessInstance();
    public int get_ErrorReportId();
    public WebTestErrorDetail get_ErrorDetail();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestErrorReport : object {
    private string m_agentName;
    private string m_scenarioName;
    private string m_testCaseName;
    private string m_requestUriString;
    private WebTestError m_error;
    private int m_testCaseId;
    private int m_requestId;
    private int m_id;
    private bool m_hasWebTestRequestErrorDetail;
    private int m_testLogId;
    private static int s_lastErrorId;
    public string AgentName { get; }
    public int Id { get; }
    public string ScenarioName { get; public set; }
    public string TestCaseName { get; public set; }
    public string RequestUriString { get; public set; }
    public WebTestError Error { get; public set; }
    public int TestCaseId { get; public set; }
    public int RequestId { get; public set; }
    public bool HasErrorDetail { get; }
    public bool HasTestLogErrorDetail { get; }
    public bool HasWebTestRequestErrorDetail { get; }
    public int TestLogId { get; }
    public static int LastErrorId { get; public set; }
    public WebTestErrorReport(string agentName, string scenarioName, string testCaseName, string requestUriString, WebTestError error, int id, bool hasWebTestRequestErrorDetail, int testLogId);
    public WebTestErrorReport(string agentName, string scenarioName, string testCaseName, string requestUriString, WebTestError error, int testLogId);
    public WebTestErrorReport(string agentName, string scenarioName, string testCaseName, WebTestError error, int testLogId);
    public WebTestErrorReport(string agentName, string scenarioName, string testCaseName, WebTestError error);
    public void WriteXml(XmlTextWriter xmlWriter);
    public string get_AgentName();
    public int get_Id();
    public void set_ScenarioName(string value);
    public string get_ScenarioName();
    public void set_TestCaseName(string value);
    public string get_TestCaseName();
    public void set_RequestUriString(string value);
    public string get_RequestUriString();
    public void set_Error(WebTestError value);
    public WebTestError get_Error();
    public void set_TestCaseId(int value);
    public int get_TestCaseId();
    public void set_RequestId(int value);
    public int get_RequestId();
    public bool get_HasErrorDetail();
    public bool get_HasTestLogErrorDetail();
    public bool get_HasWebTestRequestErrorDetail();
    public int get_TestLogId();
    public static int get_LastErrorId();
    public static void set_LastErrorId(int value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestErrorReportCollection : CollectionBase {
    public WebTestErrorReport Item { get; }
    public int Add(WebTestErrorReport instance);
    public void Insert(int index, WebTestErrorReport instance);
    public int IndexOf(WebTestErrorReport instance);
    public void Remove(WebTestErrorReport instance);
    public WebTestErrorReport get_Item(int index);
    public bool Contains(WebTestErrorReport instance);
    public void CopyTo(WebTestErrorReport[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestInstrumentedTransaction : object {
    private static long s_cachedRequests;
    private static long s_totalTimeInRules;
    private WebTestRequest m_webTestRequest;
    private Uri m_httpWebRequestUri;
    private WebHeaderCollection m_httpWebRequestHeaders;
    private string m_httpWebRequestContentType;
    private long m_httpWebRequestContentLength;
    private WebTestCaseContext m_testCaseContext;
    private WebTestTransaction m_transaction;
    private WebTestRequestResults m_requestResults;
    private AsyncCallback m_completionCallback;
    private AsyncRequestResult m_asyncResult;
    private PreRequestCallback m_preRequestCallback;
    private PreRequestDatabindingCallback m_preRequestDatabindingCallback;
    private PostPageCallback m_postPageCallback;
    private Uri m_redirectUrl;
    private int m_maximumAutomaticRedirections;
    private string m_urlForResults;
    private RequestType m_requestType;
    private WebTestInstrumentedTransaction m_parentTransaction;
    private WebTestInstrumentedTransaction m_redirectingTransaction;
    private bool m_completionCallbackFinished;
    private bool m_pageCompleteRaised;
    private Queue`1<WebTestRequest> m_queuedDependentRequests;
    private object m_queuedDependentRequestsLock;
    private int m_outstandingDependentRequests;
    [CompilerGeneratedAttribute]
private EventHandler`1<PageLoadCompleteEventArgs> PageLoadComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<PageLoadCompleteEventArgs> RedirectComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ReadyForNextPage;
    private WebTestExecutionInstruction m_executionInstruction;
    private Exception m_exception;
    private bool m_transactionStarted;
    private bool m_requestTimedout;
    private WebTestPageResult m_pageResult;
    private bool m_aborted;
    public static long CachedRequests { get; }
    public static long TotalTimeInRules { get; public set; }
    public WebTestRequest WebTestRequest { get; }
    public Uri HttpWebRequestUri { get; }
    public WebHeaderCollection HttpWebRequestHeaders { get; }
    public string HttpWebRequestContentType { get; }
    public long HttpWebRequestContentLength { get; }
    public WebTestInstrumentedTransaction ParentTransaction { get; public set; }
    public WebTestInstrumentedTransaction RedirectingTransaction { get; public set; }
    public bool Aborted { get; }
    public bool HasOutstandingDependentRequests { get; }
    public string RequestUrl { get; }
    public RequestType RequestType { get; public set; }
    public WebTestResponse WebTestResponse { get; }
    public WebTestExecutionInstruction ExecutionType { get; }
    public PreRequestCallback PreRequestCallback { get; public set; }
    public PreRequestDatabindingCallback PreRequestDatabindingCallback { get; public set; }
    public PostPageCallback PostPageCallback { get; public set; }
    public Uri RedirectUrl { get; public set; }
    public int MaximumAutomaticRedirections { get; public set; }
    public string UrlForResults { get; }
    public int Timeout { get; }
    public WebTestRequestStatistics Statistics { get; }
    public Byte[] RequestBodyCapturedBytes { get; }
    public string RequestBodyString { get; }
    public Exception Exception { get; }
    public bool TransactionStarted { get; }
    public WebTestCaseContext Context { get; }
    public WebTestRequestResults RequestResults { get; }
    public WebTestPageResult PageResult { get; public set; }
    public bool PageComplete { get; }
    internal WebTestInstrumentedTransaction(WebTestRequest request, WebTestInstrumentedTransaction parentTransaction, WebTestInstrumentedTransaction redirectingTransaction);
    internal WebTestInstrumentedTransaction(WebTestRequest request);
    public static long get_CachedRequests();
    public static void set_TotalTimeInRules(long value);
    public static long get_TotalTimeInRules();
    public WebTestRequest get_WebTestRequest();
    public Uri get_HttpWebRequestUri();
    public WebHeaderCollection get_HttpWebRequestHeaders();
    public string get_HttpWebRequestContentType();
    public long get_HttpWebRequestContentLength();
    public WebTestInstrumentedTransaction get_ParentTransaction();
    public void set_ParentTransaction(WebTestInstrumentedTransaction value);
    public WebTestInstrumentedTransaction get_RedirectingTransaction();
    public void set_RedirectingTransaction(WebTestInstrumentedTransaction value);
    public bool get_Aborted();
    public void EnqueueDependentRequests(IEnumerable`1<WebTestRequest> dependentRequests);
    public WebTestRequest DequeueDependentRequest();
    public bool get_HasOutstandingDependentRequests();
    private void SetMaximumAutomaticRedirections(WebTestInstrumentedTransaction redirectingTransaction);
    private void DecrementOutstandingDependentRequests();
    private void CheckPageComplete(bool isFinalRedirect);
    public string get_RequestUrl();
    public RequestType get_RequestType();
    public void set_RequestType(RequestType value);
    public WebTestResponse get_WebTestResponse();
    public WebTestExecutionInstruction get_ExecutionType();
    public void set_PreRequestCallback(PreRequestCallback value);
    public PreRequestCallback get_PreRequestCallback();
    public void set_PreRequestDatabindingCallback(PreRequestDatabindingCallback value);
    public PreRequestDatabindingCallback get_PreRequestDatabindingCallback();
    public void set_PostPageCallback(PostPageCallback value);
    public PostPageCallback get_PostPageCallback();
    public void set_RedirectUrl(Uri value);
    public Uri get_RedirectUrl();
    public int get_MaximumAutomaticRedirections();
    public void set_MaximumAutomaticRedirections(int value);
    public string get_UrlForResults();
    public int get_Timeout();
    public WebTestRequestStatistics get_Statistics();
    public void AbortRequest(object sender, EventArgs e);
    public IAsyncResult Execute(WebTestCaseContext testCaseContext, AsyncCallback completionCallback, object callerState);
    private void PerformRequestDataBinding();
    private void ApplyCorrelationBindingToParameter(Parameter param);
    public void TimeoutRequest();
    public static string GetHeaders(WebHeaderCollection headers);
    public Byte[] get_RequestBodyCapturedBytes();
    public string get_RequestBodyString();
    public Exception get_Exception();
    public bool get_TransactionStarted();
    public WebTestCaseContext get_Context();
    public WebTestRequestResults get_RequestResults();
    public WebTestPageResult get_PageResult();
    public void set_PageResult(WebTestPageResult value);
    private void AddHeaders(WebTestRequestHeaderCollection headers);
    private void CreateTransaction();
    private static void ProcessCompletedRequest(IAsyncResult result);
    internal void ProcessRuleError(WebTestErrorType errorType, string ruleDescription, string ruleErrorText, PropertyCollection ruleProperties);
    internal void ProcessRuleException(Exception ruleException);
    private void ProcessPageLoadComplete(object sender, PageLoadCompleteEventArgs e);
    private void ProcessCompletedRequest(bool completedSynchronously);
    private void InvokeValidationRules(RuleScope scope, RuleExecutionOrder order);
    private void ExecuteAndTimeTestLevelValidateResponseHandlers(WebTest webTest);
    private void ExecuteAndTimeTestLevelValidateResponseOnPageCompleteHandlers(WebTest webTest);
    private void ExecuteValidationRuleReferences(ValidationRuleReferenceCollection validationRuleReferences, RuleExecutionOrder executionOrder);
    private void ProcessValidateResponseEventResults(List`1<RuleResult> validationEventRuleResults);
    private void ExecuteExtractionRuleReferences(ExtractionRuleReferenceCollection extractionRuleReferences, bool rulesAreCorrelationRules);
    private static string GetRuleNameFromInstance(object ruleInstance);
    private void OperationCompleted(bool completedSynchronously);
    private void CompletionCallbackFinished();
    private void RaisePageLoadComplete();
    private void RaiseReadyForNextPage();
    public static bool IsHttpStatusAnError(HttpStatusCode actualHttpStatusCode, int expectedHttpStatusCode);
    private void CacheCookies();
    private static string GetNewCookiePath(Uri uri, Cookie cookie);
    private static void ReportTimeInRule(string ruleName, Stopwatch stopWatch);
    public bool get_PageComplete();
    [CompilerGeneratedAttribute]
public void add_PageLoadComplete(EventHandler`1<PageLoadCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PageLoadComplete(EventHandler`1<PageLoadCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_RedirectComplete(EventHandler`1<PageLoadCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_RedirectComplete(EventHandler`1<PageLoadCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ReadyForNextPage(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ReadyForNextPage(EventHandler`1<EventArgs> value);
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebTestLoadPattern : Enum {
    public int value__;
    public static WebTestLoadPattern Constant;
    public static WebTestLoadPattern Step;
    public static WebTestLoadPattern GoalBased;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestLoadTrace : object {
    public static WebTestTraceLevel WebTestTraceLevel;
    private static string WEB_LOAD_TEST_LABEL;
    private static string INTERNAL_EXCEPTION;
    public static TraceLevel TraceLevel { get; }
    public static TraceLevel get_TraceLevel();
    [ConditionalAttribute("TRACE")]
public static void Error(string message);
    [ConditionalAttribute("TRACE")]
public static void Error(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Warning(string message);
    [ConditionalAttribute("TRACE")]
public static void Warning(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Info(string message);
    [ConditionalAttribute("TRACE")]
public static void Info(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string message);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InternalException(string message, string exceptionMessage, string stackTrace);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestNetwork : object {
    private NetworkEmulationProfile m_networkEmulationProfile;
    private WebTestPortRangeManager m_portRangeManager;
    private static WebTestNetwork s_defaultNetwork;
    public string Name { get; public set; }
    public float BandwidthInKbps { get; public set; }
    public WebTestPortRangeManager PortRangeManager { get; public set; }
    public static WebTestNetwork DefaultNetwork { get; }
    public NetworkEmulationProfile EmulationProfile { get; public set; }
    public WebTestNetwork(NetworkEmulationProfile networkEmulationProfile);
    public WebTestNetwork(WebTestNetwork copy);
    public string get_Name();
    public void set_Name(string value);
    public float get_BandwidthInKbps();
    public void set_BandwidthInKbps(float value);
    public WebTestPortRangeManager get_PortRangeManager();
    public void set_PortRangeManager(WebTestPortRangeManager value);
    public static WebTestNetwork get_DefaultNetwork();
    public NetworkEmulationProfile get_EmulationProfile();
    public void set_EmulationProfile(NetworkEmulationProfile value);
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestNetworkProfile : object {
    private decimal m_percentage;
    private WebTestNetwork m_network;
    public WebTestNetwork Network { get; public set; }
    public decimal Percentage { get; public set; }
    public WebTestNetworkProfile(WebTestNetworkProfile copy);
    public WebTestNetwork get_Network();
    public void set_Network(WebTestNetwork value);
    public decimal get_Percentage();
    public void set_Percentage(decimal value);
    public sealed virtual object Clone();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebTestObjectType : Enum {
    public int value__;
    public static WebTestObjectType RequestResult;
    public static WebTestObjectType Comment;
    public static WebTestObjectType WebTestTimer;
    public static WebTestObjectType StatusMessage;
    public static WebTestObjectType ResultCondition;
    public static WebTestObjectType ResultLoop;
    public static WebTestObjectType ResultLoopIteration;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestPageResult : TimerResult {
    [NonPersistableAttribute]
private WebTest m_webTest;
    [NonPersistableAttribute]
private WebTestRequest m_primaryRequest;
    [NonPersistableAttribute]
private WebTestResponse m_primaryResponse;
    [NonPersistableAttribute]
private bool m_recordResult;
    private int m_responseTimeGoalMs;
    private int m_responseTimeMs;
    private Outcome m_outcome;
    private bool m_isInMeasurementInterval;
    [NonPersistableAttribute]
private int m_userId;
    [NonPersistableAttribute]
private Stopwatch m_dependantsStopwatch;
    [NonPersistableAttribute]
private WebTestPageStatistics m_pageStatistics;
    private Dictionary`2<string, LoadTestMessageType> m_messageTypes;
    private object lockObject;
    public bool RecordResult { get; }
    public int ResponseTimeGoalMs { get; }
    public bool ResponseTimeExceededGoal { get; }
    public Outcome Outcome { get; internal set; }
    public bool IsInMeasurementInterval { get; public set; }
    public Dictionary`2<string, LoadTestMessageType> MessageTypes { get; }
    public WebTestPageResult(string pageUri, WebTestRequest request);
    public WebTestPageResult(string pageUri, DateTime startTime, TimeSpan duration, int responseTimeGoalMs, bool isInMeasurementInterval, Outcome outcome);
    public bool get_RecordResult();
    public int get_ResponseTimeGoalMs();
    public bool get_ResponseTimeExceededGoal();
    public Outcome get_Outcome();
    internal void set_Outcome(Outcome value);
    public bool get_IsInMeasurementInterval();
    public void set_IsInMeasurementInterval(bool value);
    public Dictionary`2<string, LoadTestMessageType> get_MessageTypes();
    public void EndPage();
    public void EndRequest(WebTestInstrumentedTransaction transaction);
    public void AddError(WebTestError error);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestPlaybackOptions : object {
    private bool m_correlate;
    private bool m_pauseAtStart;
    public bool Correlate { get; public set; }
    public bool PauseAtStart { get; public set; }
    public void set_Correlate(bool value);
    public bool get_Correlate();
    public void set_PauseAtStart(bool value);
    public bool get_PauseAtStart();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestPortRangeManager : object {
    private int m_minPortNumber;
    private int m_maxPortNumber;
    private int m_nextPort;
    private object m_lock;
    public int MinPortNumber { get; }
    public int MaxPortNumber { get; }
    public int PortCount { get; }
    public WebTestPortRangeManager(int minPortNumber, int maxPortNumber);
    public int get_MinPortNumber();
    public int get_MaxPortNumber();
    public int get_PortCount();
    public int GetPort();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestProfile : object {
    private string m_path;
    private Guid m_id;
    private decimal m_percentage;
    private string m_name;
    private string m_typeName;
    private bool m_isInitializeTest;
    private bool m_isTerminateTest;
    [NonPersistableAttribute]
private Type m_type;
    private ITestElement m_testElement;
    public string Path { get; public set; }
    public Link Link { get; public set; }
    public Guid Id { get; public set; }
    public decimal Percentage { get; public set; }
    public bool IsWebTest { get; }
    public ITestElement TestElement { get; public set; }
    public string Name { get; public set; }
    public Type ElementType { get; }
    public string ElementTypeName { get; public set; }
    public bool IsInitializeTest { get; public set; }
    public bool IsTerminateTest { get; public set; }
    public WebTestProfile(WebTestProfile copy);
    public WebTestProfile(ITestElement testElement);
    public WebTestProfile(Link link);
    public string get_Path();
    public void set_Path(string value);
    public Link get_Link();
    public void set_Link(Link value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public decimal get_Percentage();
    public void set_Percentage(decimal value);
    public bool get_IsWebTest();
    public ITestElement get_TestElement();
    public void set_TestElement(ITestElement value);
    public void SetTestElement(ITestElement testElement);
    public bool TestCaseLoaded();
    public virtual string ToString();
    public sealed virtual object Clone();
    public string get_Name();
    public void set_Name(string value);
    public Type get_ElementType();
    public string get_ElementTypeName();
    public void set_ElementTypeName(string value);
    public bool get_IsInitializeTest();
    public void set_IsInitializeTest(bool value);
    public bool get_IsTerminateTest();
    public void set_IsTerminateTest(bool value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestPropertyInfo : object {
    private string m_propertyName;
    private Type m_propertyType;
    private bool m_browseable;
    private string m_description;
    private string m_category;
    private string m_displayName;
    private string m_defaultValue;
    private string m_typeConverterName;
    private bool m_forContextParameter;
    private bool m_isAddedContextParameter;
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public bool Browseable { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string Category { get; public set; }
    public string DefaultValue { get; public set; }
    public string TypeConverterName { get; public set; }
    public bool ForContextParameter { get; public set; }
    public bool IsAddedContextParameter { get; public set; }
    public WebTestPropertyInfo(string propertyName, Type propertyType);
    public string get_PropertyName();
    public Type get_PropertyType();
    public bool get_Browseable();
    public void set_Browseable(bool value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_Category();
    public void set_Category(string value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public string get_TypeConverterName();
    public void set_TypeConverterName(string value);
    public bool get_ForContextParameter();
    public void set_ForContextParameter(bool value);
    public bool get_IsAddedContextParameter();
    public void set_IsAddedContextParameter(bool value);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestQueuedCompletion : object {
    private SortedList m_sortedList;
    private bool m_prowling;
    private bool m_flush;
    private AutoResetEvent m_flushEvent;
    private AutoResetEvent m_watchDogWakeupEvent;
    private long m_watchDogWakeupTime;
    private long m_waitThreshold;
    private Thread m_watchDog;
    private Mutex m_timeoutLock;
    public long WaitThreshold { get; public set; }
    public void Open();
    public void Close();
    public void Flush();
    public long get_WaitThreshold();
    public void set_WaitThreshold(long value);
    public object Complete(long timeout, QueuedCallback queuedCallback, object callerState);
    private void Dequeue(TimedObject completedObject);
    public void Completed(object completionMarker);
    private void WatchDog();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRequestCompletedCallback : MulticastDelegate {
    public WebTestRequestCompletedCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestRequest request, WebTestInstrumentedTransaction transaction, WebTestRequestResult requestResult);
    public virtual IAsyncResult BeginInvoke(WebTestRequest request, WebTestInstrumentedTransaction transaction, WebTestRequestResult requestResult, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRequestResultBuilder : object {
    private WebTestRequestResult m_requestResult;
    private WebTestRequestResultCompletedCallback m_resultCompletedCallback;
    private Dictionary`2<Guid, WebTestRequestResult> m_redirectingDependents;
    public WebTestRequestResult RequestResult { get; public set; }
    public void Initialize(WebTestRequestResult requestResult, WebTestInstrumentedTransaction transaction, WebTestRequestResultCompletedCallback resultCompletedCallback);
    private void transaction_RedirectComplete(object sender, PageLoadCompleteEventArgs e);
    private void transaction_PageLoadComplete(object sender, PageLoadCompleteEventArgs e);
    public WebTestRequestResult get_RequestResult();
    public void set_RequestResult(WebTestRequestResult value);
    public void AddDependentRequestResult(WebTestInstrumentedTransaction dependentTransaction, WebTestRequestResult dependentResult);
    private void DoResultCompletedCallback();
    public void ProcessErrorsAndUpdateRuleResults(WebTestInstrumentedTransaction transaction);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRequestResultCompletedCallback : MulticastDelegate {
    public WebTestRequestResultCompletedCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestRequestResult requestResult);
    public virtual IAsyncResult BeginInvoke(WebTestRequestResult requestResult, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerNonUserCodeAttribute]
[ComVisibleAttribute("False")]
[GeneratedCodeAttribute("MkMsgs", "5.0.20305.0")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRequestResultMessagePacker : MessagePacker {
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    private MessageInfo _msgInfo;
    private static MessageInfo s_msgInfo;
    [CompilerGeneratedAttribute]
private static WebTestRequestResultMessagePacker <Default>k__BackingField;
    public bool SwapBytes { get; public set; }
    public MessageInfo MsgInfo { get; }
    public static WebTestRequestResultMessagePacker Default { get; private set; }
    public WebTestRequestResultMessagePacker(MessageInfo mi);
    private static WebTestRequestResultMessagePacker();
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    public virtual MessageInfo get_MsgInfo();
    [CompilerGeneratedAttribute]
public static WebTestRequestResultMessagePacker get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(WebTestRequestResultMessagePacker value);
    public MessageID GetMessageID(Byte* pMsg);
    public MessageID GetMessageID(Byte[] msg);
    public MsgHandle PackMessageTheMessage(WebTestRequestResultStruct* pWebTestRequestResultStruct, IMessageMemory2 memory, Int32& msgLen);
    public Handle UnpackMessageTheMessage(Byte* pMsg, IMessageMemory2 messageMemory);
    public MsgHandle PackMessageTheMessage(_WebTestRequestResultStruct webTestRequestResultStruct, IMessageMemory2 memory, Int32& msgLen);
    public _WebTestRequestResultStruct UnpackMessageTheMessageToClass(Byte* pMsg, IMessageMemory2 messageMemory);
    public _WebTestRequestResultStruct UnpackMessageTheMessageToClass(Byte[] msg, IMessageMemory2 messageMemory);
    public int CalcHeaderLength();
    public int CalcCompressedHeaderLength(Stream stream);
    public Byte[] ReadMessage(Stream stream);
    public void ReadMessageHeader(Stream stream, Int32& length, Int16& id);
    public int GetMessageLength(Byte[] msg);
    public int GetMessageLength(Byte* pMsg);
    public MsgHandle PackMessage(short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public void PackMessage(short msgID, Byte* pData, IMessageMemory memory);
    public void DumpMessage(IMessagePartSink sink, Byte* pMsg);
    public void DumpMessage(IMessagePartSink sink, Byte[] msg);
    public void MergeMessageInfo(MessageInfo targetMsgInfo);
    public void RestoreMessageInfo();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRequestResults : object {
    private bool m_requestCached;
    private string m_requestUrl;
    private string m_urlForResults;
    private HttpStatusCode m_statusCode;
    private bool m_recordResult;
    private float m_responseGoal;
    private WebTestErrorDetail m_errorDetail;
    private WebTestErrorCollection m_errors;
    private bool m_requestPassedByCode;
    private WebTestRequestStatistics m_requestStatistics;
    private string m_scenarioName;
    private string m_testCaseName;
    private int m_testIteration;
    private int m_preDependentErrorCount;
    private int m_preDependentValidationRuleCount;
    private List`1<RuleResult> m_validationRuleResults;
    private int m_preDependentExtractionRuleCount;
    private List`1<RuleResult> m_extractionRuleResults;
    private int m_errorCountSinceLastStatusUpdate;
    private bool m_failStatusReported;
    private RequestResultStatus m_currentStatus;
    public bool RequestCached { get; public set; }
    public string RequestUrl { get; public set; }
    public string UrlForResults { get; public set; }
    public bool RecordResult { get; public set; }
    public float ResponseGoal { get; public set; }
    public WebTestErrorDetail ErrorDetail { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public RequestResultStatus CurrentStatus { get; public set; }
    public WebTestErrorCollection Errors { get; }
    public bool HasErrors { get; }
    public bool HasValidationRuleResults { get; }
    public bool HasExtractionRuleResults { get; }
    public bool RequestPassedByCode { get; public set; }
    public bool RequestFailed { get; }
    public WebTestRequestStatistics RequestStatistics { get; public set; }
    public string ScenarioName { get; public set; }
    public string TestCaseName { get; public set; }
    public int TestIteration { get; public set; }
    public WebTestErrorCollection PostDependentErrors { get; }
    public List`1<RuleResult> PostDependentValidationRuleResults { get; }
    public List`1<RuleResult> PostDependentExtractionRuleResults { get; }
    public List`1<RuleResult> ValidationRuleResults { get; }
    public List`1<RuleResult> ExtractionRuleResults { get; }
    public void set_RequestCached(bool value);
    public bool get_RequestCached();
    public void set_RequestUrl(string value);
    public string get_RequestUrl();
    public void set_UrlForResults(string value);
    public string get_UrlForResults();
    public void set_RecordResult(bool value);
    public bool get_RecordResult();
    public void set_ResponseGoal(float value);
    public float get_ResponseGoal();
    public WebTestErrorDetail get_ErrorDetail();
    public void set_ErrorDetail(WebTestErrorDetail value);
    public HttpStatusCode get_StatusCode();
    public void set_StatusCode(HttpStatusCode value);
    public RequestResultStatus get_CurrentStatus();
    public void set_CurrentStatus(RequestResultStatus value);
    public WebTestErrorCollection get_Errors();
    public void AddError(WebTestError error);
    public bool get_HasErrors();
    public bool get_HasValidationRuleResults();
    public bool get_HasExtractionRuleResults();
    public void set_RequestPassedByCode(bool value);
    public bool get_RequestPassedByCode();
    public bool get_RequestFailed();
    public WebTestRequestStatusUpdate RequestStatusUpdate();
    public void set_RequestStatistics(WebTestRequestStatistics value);
    public WebTestRequestStatistics get_RequestStatistics();
    public void set_ScenarioName(string value);
    public string get_ScenarioName();
    public void set_TestCaseName(string value);
    public string get_TestCaseName();
    public void set_TestIteration(int value);
    public int get_TestIteration();
    public WebTestErrorCollection get_PostDependentErrors();
    public List`1<RuleResult> get_PostDependentValidationRuleResults();
    public List`1<RuleResult> get_PostDependentExtractionRuleResults();
    public List`1<RuleResult> get_ValidationRuleResults();
    public List`1<RuleResult> get_ExtractionRuleResults();
    internal void AddValidationRuleResult(RuleResult validationRuleResult);
    internal void AddExtractionRuleResult(RuleResult extractionRuleResult);
    public void WriteXml(XmlTextWriter xmlWriter, DateTime baseTime);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRequestResultsCollection : CollectionBase {
    public WebTestRequestResults Item { get; }
    public int Add(WebTestRequestResults instance);
    public void Insert(int index, WebTestRequestResults instance);
    public int IndexOf(WebTestRequestResults instance);
    public void Remove(WebTestRequestResults instance);
    public WebTestRequestResults get_Item(int index);
    public bool Contains(WebTestRequestResults instance);
    public void CopyTo(WebTestRequestResults[] array, int index);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRequestStatusUpdate : object {
    private bool m_erroredSinceLastUpdate;
    private bool m_failureAlreadyReported;
    public bool ErroredSinceLastUpdate { get; }
    public bool FailureAlreadyReported { get; }
    public WebTestRequestStatusUpdate(int errorsSinceLastUpdate, bool failureAlreadyReported);
    public bool get_ErroredSinceLastUpdate();
    public bool get_FailureAlreadyReported();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResult : TestResult {
    [CompilerGeneratedAttribute]
private bool <IsFromLoadTestResult>k__BackingField;
    private WebTestResultDetails m_details;
    private WebTestResultDetails m_storedDetails;
    private TestRunConfiguration m_testRunConfiguration;
    [StoreXmlFieldAttribute("WebTestRunConfiguration", "True")]
private WebTestRunConfig m_webTestRunConfig;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private int m_dataRowCount;
    private string m_tempFilePath;
    private List`1<TempFileEntry> m_tempFileEntries;
    [StoreXmlSimpleFieldAttribute]
private string m_wtrFilePath;
    private string m_wtrFileName;
    [NonPersistableAttribute]
private string m_trxFilePath;
    private string m_agentName;
    private FileStream m_fileStream;
    private WebTestResultDetailsSerializer m_serializer;
    private bool m_writeToTempFile;
    private bool m_trxSaved;
    private ReleaseName m_release;
    private bool m_isRecordedResult;
    private bool m_isCreatedFromDetailsFile;
    private bool m_saveAbortResults;
    private bool m_skipSerialization;
    private int m_selectedItemId;
    [StoreXmlSimpleFieldAttribute]
private string m_browserName;
    [StoreXmlSimpleFieldAttribute]
private string m_networkName;
    public bool IsFromLoadTestResult { get; public set; }
    public WebTestResultDetails Details { get; public set; }
    public TestRunConfiguration TestRunConfiguration { get; public set; }
    public WebTestRunConfig WebTestRunConfiguration { get; public set; }
    public int DataRowCount { get; public set; }
    public string DeploymentRootPath { get; public set; }
    public string WtrFilePath { get; public set; }
    public bool TrxSaved { get; public set; }
    public string AgentName { get; public set; }
    public string BrowserName { get; public set; }
    public string NetworkName { get; public set; }
    public ReleaseName Release { get; }
    public bool IsRecordedResult { get; public set; }
    public bool IsCreatedDirectlyFromDetailsFile { get; public set; }
    public int SelectedItemId { get; public set; }
    private WebTestResultDetailsSerializer Serializer { get; }
    public WebTestResult(Guid runId, ITestElement test);
    public WebTestResult(Guid runId, ITestElement test, bool saveAbortResults, bool skipSerialization);
    private WebTestResult(WebTestResult copy);
    public void Merge(TestResultMessage message);
    private void MergeWebTestObject(object webTestObject);
    public void TestCompleted();
    private void CreateDirectory(string path);
    public void StatusChanged(WebTestStatusMessage statusMessage);
    public void StartIteration();
    public void StopIteration();
    public void StartTransaction(WebTestTimer transactionTimer);
    public void StopTransaction(WebTestTimer transactionTimer);
    public void StartCondition(WebTestResultCondition conditionResult);
    public void StopCondition(WebTestResultCondition conditionResult);
    public void EndConditionalRuleExecution(WebTestResultCondition conditionResult);
    public void StartLoop(WebTestResultLoop loopResult);
    public void StopLoop(WebTestResultLoop loopResult);
    public void StartLoopIteration(WebTestResultLoopIteration loopIterationResult);
    public void StopLoopIteration(WebTestResultLoopIteration loopIterationResult);
    public void AddComment(Comment comment);
    public void AddPage(WebTestRequestResult requestResult);
    public void AddCorrelationResult(WebTestCorrelationResult correlationResult);
    public void BeginWritingToTempFile();
    public void EndWritingToTempFile(bool keepTempFile);
    private void WriteStatusToTempFile(WebTestRunStatus runStatus);
    private void WriteStatusMessageToTempFile(WebTestStatusMessage statusMessage);
    private void WriteCommentToTempFile(Comment comment);
    private void WriteWebTestTimerToTempFile(WebTestTimer timer);
    private void WriteRequestResultToTempFile(WebTestRequestResult requestResult);
    private void WriteResultConditionToTempFile(WebTestResultCondition conditionResult);
    private void WriteResultLoopToTempFile(WebTestResultLoop loopResult);
    private void WriteResultLoopIterationToTempFile(WebTestResultLoopIteration loopIterationResult);
    private void WriteObjectToTempFile(WebTestObjectType objectType, Byte[] bytes);
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
    private void MergeResultsFromTempFile();
    public void DeleteTempFile();
    private static string GetTempFilePath();
    [CompilerGeneratedAttribute]
public void set_IsFromLoadTestResult(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFromLoadTestResult();
    public WebTestResultDetails get_Details();
    public void set_Details(WebTestResultDetails value);
    public TestRunConfiguration get_TestRunConfiguration();
    public void set_TestRunConfiguration(TestRunConfiguration value);
    public WebTestRunConfig get_WebTestRunConfiguration();
    public void set_WebTestRunConfiguration(WebTestRunConfig value);
    public int get_DataRowCount();
    public void set_DataRowCount(int value);
    public string get_DeploymentRootPath();
    public void set_DeploymentRootPath(string value);
    public string get_WtrFilePath();
    public void set_WtrFilePath(string value);
    public bool get_TrxSaved();
    public void set_TrxSaved(bool value);
    public string get_AgentName();
    public void set_AgentName(string value);
    public string get_BrowserName();
    public void set_BrowserName(string value);
    public string get_NetworkName();
    public void set_NetworkName(string value);
    public ReleaseName get_Release();
    public bool get_IsRecordedResult();
    public void set_IsRecordedResult(bool value);
    public bool get_IsCreatedDirectlyFromDetailsFile();
    public void set_IsCreatedDirectlyFromDetailsFile(bool value);
    public int get_SelectedItemId();
    public void set_SelectedItemId(int value);
    public virtual object Clone();
    private WebTestResultDetailsSerializer get_Serializer();
    public WebTestResultDetails LoadResultDetails();
    public void UnLoadResultDetails();
    public void SetNetworkNameFromTestSettings();
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
[DebuggerNonUserCodeAttribute]
[ComVisibleAttribute("False")]
[GeneratedCodeAttribute("MkMsgs", "5.0.20305.0")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultConditionMessagePacker : MessagePacker {
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    private MessageInfo _msgInfo;
    private static MessageInfo s_msgInfo;
    [CompilerGeneratedAttribute]
private static WebTestResultConditionMessagePacker <Default>k__BackingField;
    public bool SwapBytes { get; public set; }
    public MessageInfo MsgInfo { get; }
    public static WebTestResultConditionMessagePacker Default { get; private set; }
    public WebTestResultConditionMessagePacker(MessageInfo mi);
    private static WebTestResultConditionMessagePacker();
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    public virtual MessageInfo get_MsgInfo();
    [CompilerGeneratedAttribute]
public static WebTestResultConditionMessagePacker get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(WebTestResultConditionMessagePacker value);
    public MessageID GetMessageID(Byte* pMsg);
    public MessageID GetMessageID(Byte[] msg);
    public MsgHandle PackMessageTheMessage(WebTestResultCondition* pWebTestResultCondition, IMessageMemory2 memory, Int32& msgLen);
    public Handle UnpackMessageTheMessage(Byte* pMsg, IMessageMemory2 messageMemory);
    public MsgHandle PackMessageTheMessage(_WebTestResultCondition webTestResultCondition, IMessageMemory2 memory, Int32& msgLen);
    public _WebTestResultCondition UnpackMessageTheMessageToClass(Byte* pMsg, IMessageMemory2 messageMemory);
    public _WebTestResultCondition UnpackMessageTheMessageToClass(Byte[] msg, IMessageMemory2 messageMemory);
    public int CalcHeaderLength();
    public int CalcCompressedHeaderLength(Stream stream);
    public Byte[] ReadMessage(Stream stream);
    public void ReadMessageHeader(Stream stream, Int32& length, Int16& id);
    public int GetMessageLength(Byte[] msg);
    public int GetMessageLength(Byte* pMsg);
    public MsgHandle PackMessage(short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public void PackMessage(short msgID, Byte* pData, IMessageMemory memory);
    public void DumpMessage(IMessagePartSink sink, Byte* pMsg);
    public void DumpMessage(IMessagePartSink sink, Byte[] msg);
    public void MergeMessageInfo(MessageInfo targetMsgInfo);
    public void RestoreMessageInfo();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultDetailsManager : object {
    private static Dictionary`2<TestExecId, WebTestResultDetails> s_detailsDictionary;
    private static object s_lock;
    public static object Lock { get; }
    private static WebTestResultDetailsManager();
    public static object get_Lock();
    public static void AddDetails(WebTestResult result, WebTestResultDetails details);
    public static WebTestResultDetails GetDetails(WebTestResult result);
    public static void RemoveDetails(WebTestResult result);
    public static void RemoveDetails(TestResultId[] testResultIds);
    private static void RemoveDetailsByExecId(TestExecId testExecId);
    internal static void Clear();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultEvent : LoadTestTelemetryEvent {
    private WebTestResultDetails _webTestResultDetails;
    private static int EventVersion;
    private static string SettingsEventName;
    private static string SettingsPropertyPrefix;
    public WebTestResultEvent(WebTestResultDetails webTestResultDetails);
    public virtual void PostTelemetryData();
    private string GetSourceWebTestId(WebTestRequestResult webTestRequestResult);
}
[DebuggerNonUserCodeAttribute]
[ComVisibleAttribute("False")]
[GeneratedCodeAttribute("MkMsgs", "5.0.20305.0")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultLoopIterationMessagePacker : MessagePacker {
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    private MessageInfo _msgInfo;
    private static MessageInfo s_msgInfo;
    [CompilerGeneratedAttribute]
private static WebTestResultLoopIterationMessagePacker <Default>k__BackingField;
    public bool SwapBytes { get; public set; }
    public MessageInfo MsgInfo { get; }
    public static WebTestResultLoopIterationMessagePacker Default { get; private set; }
    public WebTestResultLoopIterationMessagePacker(MessageInfo mi);
    private static WebTestResultLoopIterationMessagePacker();
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    public virtual MessageInfo get_MsgInfo();
    [CompilerGeneratedAttribute]
public static WebTestResultLoopIterationMessagePacker get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(WebTestResultLoopIterationMessagePacker value);
    public MessageID GetMessageID(Byte* pMsg);
    public MessageID GetMessageID(Byte[] msg);
    public MsgHandle PackMessageTheMessage(WebTestResultLoopIteration* pWebTestResultLoopIteration, IMessageMemory2 memory, Int32& msgLen);
    public Handle UnpackMessageTheMessage(Byte* pMsg, IMessageMemory2 messageMemory);
    public MsgHandle PackMessageTheMessage(_WebTestResultLoopIteration webTestResultLoopIteration, IMessageMemory2 memory, Int32& msgLen);
    public _WebTestResultLoopIteration UnpackMessageTheMessageToClass(Byte* pMsg, IMessageMemory2 messageMemory);
    public _WebTestResultLoopIteration UnpackMessageTheMessageToClass(Byte[] msg, IMessageMemory2 messageMemory);
    public int CalcHeaderLength();
    public int CalcCompressedHeaderLength(Stream stream);
    public Byte[] ReadMessage(Stream stream);
    public void ReadMessageHeader(Stream stream, Int32& length, Int16& id);
    public int GetMessageLength(Byte[] msg);
    public int GetMessageLength(Byte* pMsg);
    public MsgHandle PackMessage(short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public void PackMessage(short msgID, Byte* pData, IMessageMemory memory);
    public void DumpMessage(IMessagePartSink sink, Byte* pMsg);
    public void DumpMessage(IMessagePartSink sink, Byte[] msg);
    public void MergeMessageInfo(MessageInfo targetMsgInfo);
    public void RestoreMessageInfo();
}
[DebuggerNonUserCodeAttribute]
[ComVisibleAttribute("False")]
[GeneratedCodeAttribute("MkMsgs", "5.0.20305.0")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultLoopMessagePacker : MessagePacker {
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    private MessageInfo _msgInfo;
    private static MessageInfo s_msgInfo;
    [CompilerGeneratedAttribute]
private static WebTestResultLoopMessagePacker <Default>k__BackingField;
    public bool SwapBytes { get; public set; }
    public MessageInfo MsgInfo { get; }
    public static WebTestResultLoopMessagePacker Default { get; private set; }
    public WebTestResultLoopMessagePacker(MessageInfo mi);
    private static WebTestResultLoopMessagePacker();
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    public virtual MessageInfo get_MsgInfo();
    [CompilerGeneratedAttribute]
public static WebTestResultLoopMessagePacker get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(WebTestResultLoopMessagePacker value);
    public MessageID GetMessageID(Byte* pMsg);
    public MessageID GetMessageID(Byte[] msg);
    public MsgHandle PackMessageTheMessage(WebTestResultLoop* pWebTestResultLoop, IMessageMemory2 memory, Int32& msgLen);
    public Handle UnpackMessageTheMessage(Byte* pMsg, IMessageMemory2 messageMemory);
    public MsgHandle PackMessageTheMessage(_WebTestResultLoop webTestResultLoop, IMessageMemory2 memory, Int32& msgLen);
    public _WebTestResultLoop UnpackMessageTheMessageToClass(Byte* pMsg, IMessageMemory2 messageMemory);
    public _WebTestResultLoop UnpackMessageTheMessageToClass(Byte[] msg, IMessageMemory2 messageMemory);
    public int CalcHeaderLength();
    public int CalcCompressedHeaderLength(Stream stream);
    public Byte[] ReadMessage(Stream stream);
    public void ReadMessageHeader(Stream stream, Int32& length, Int16& id);
    public int GetMessageLength(Byte[] msg);
    public int GetMessageLength(Byte* pMsg);
    public MsgHandle PackMessage(short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public void PackMessage(short msgID, Byte* pData, IMessageMemory memory);
    public void DumpMessage(IMessagePartSink sink, Byte* pMsg);
    public void DumpMessage(IMessagePartSink sink, Byte[] msg);
    public void MergeMessageInfo(MessageInfo targetMsgInfo);
    public void RestoreMessageInfo();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultMessage : TestResult {
    private object m_webTestObject;
    public object WebTestObject { get; }
    public WebTestResultMessage(Guid runId, ITestElement test, object webTestObject);
    public object get_WebTestObject();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultSerializer : object {
    public static Byte[] SerializeWebTestRequestResult(WebTestRequestResult requestResult);
    public static WebTestRequestResult DeserializeWebTestRequestResult(Byte[] bytes);
    public static Byte[] SerializeWebTestComment(Comment comment);
    public static Comment DeserializeWebTestComment(Byte[] bytes);
    public static Byte[] SerializeWebTestTimer(WebTestTimer webTestTimer);
    public static WebTestTimer DeserializeWebTestTimer(Byte[] bytes);
    public static Byte[] SerializeWebTestStatusMessage(WebTestStatusMessage statusMessage);
    public static WebTestStatusMessage DeserializeWebTestStatusMessage(Byte[] bytes);
    public static Byte[] SerializeWebTestResultCondition(WebTestResultCondition conditionResult);
    public static WebTestResultCondition DeserializeWebTestResultCondition(Byte[] bytes);
    public static Byte[] SerializeWebTestResultLoop(WebTestResultLoop loopResult);
    public static WebTestResultLoop DeserializeWebTestResultLoop(Byte[] bytes);
    public static Byte[] SerializeWebTestResultLoopIteration(WebTestResultLoopIteration loopIterationResult);
    public static WebTestResultLoopIteration DeserializeWebTestResultLoopIteration(Byte[] bytes);
    private static void PopulateRequestResultPacker(_WebTestRequestResultStruct requestResultPacker, WebTestRequestResult requestResult);
    private static string EmptyIfNull(string input);
    private static Byte[] EmptyIfNull(Byte[] input);
    private static void PopulateRequestResult(WebTestRequestResult requestResult, _WebTestRequestResultStruct requestResultPacker);
    private static RuleResult CreateRuleResult(_RuleResult ruleResultPacker);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestResultTelemetryEvent : object {
    private WebTestResultEvent _webTestResultEvent;
    public WebTestResultTelemetryEvent(WebTestResultDetails webTestResultDetails);
    public void PostTelemetryData();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRunConfig : object {
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_stepping;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_simulateThinkTimes;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_runUntilDataExhausted;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private int m_iterationCount;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_useNewCookieDefaultPath;
    [StoreXmlSimpleFieldAttribute("Mono.Cecil.CustomAttributeArgument")]
private bool m_automaticallyDecompressResponse;
    [StoreXmlFieldAttribute("Browser")]
private WebTestBrowser m_browser;
    [StoreXmlFieldAttribute("Network")]
private WebTestNetwork m_network;
    public string RunConfigurationInformation { get; }
    public bool Stepping { get; public set; }
    public bool SimulateThinkTimes { get; public set; }
    public bool RunUntilDataExhausted { get; public set; }
    public int IterationCount { get; public set; }
    public bool UseNewCookieDefaultPath { get; public set; }
    public bool AutomaticallyDecompressResponse { get; public set; }
    public WebTestBrowser Browser { get; public set; }
    public WebTestNetwork Network { get; public set; }
    public string ElementName { get; }
    public string NamespaceUri { get; }
    public sealed virtual string get_RunConfigurationInformation();
    public void set_Stepping(bool value);
    public bool get_Stepping();
    public bool get_SimulateThinkTimes();
    public void set_SimulateThinkTimes(bool value);
    public bool get_RunUntilDataExhausted();
    public void set_RunUntilDataExhausted(bool value);
    public int get_IterationCount();
    public void set_IterationCount(int value);
    public bool get_UseNewCookieDefaultPath();
    public void set_UseNewCookieDefaultPath(bool value);
    public bool get_AutomaticallyDecompressResponse();
    public void set_AutomaticallyDecompressResponse(bool value);
    public WebTestBrowser get_Browser();
    public void set_Browser(WebTestBrowser value);
    public WebTestNetwork get_Network();
    public void set_Network(WebTestNetwork value);
    public sealed virtual object Clone();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual string get_ElementName();
    public sealed virtual string get_NamespaceUri();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRunner : object {
    private ManualResetEvent m_issueNextRequestEvent;
    private ManualResetEvent m_variationCompleteEvent;
    private WebTestElement m_webTestElement;
    private WebTestCaseVariation m_variation;
    private int m_iteration;
    private WebTestSuiteDataManager m_dataManager;
    private WebTestConnectionManager m_connectionManager;
    private Thread m_playbackVariationThread;
    private bool m_abortTest;
    private bool m_running;
    private bool m_hasIEProxyBeenChecked;
    private bool m_setProxyToDefault;
    private bool m_firstPreRequestCallback;
    private WebTestRunConfig m_runConfig;
    private WebTestPlaybackOptions m_playbackOptions;
    private bool m_preTestCaseCallbackErrorChecked;
    private IRunContext m_runContext;
    private WebTestRunStatusCallback m_statusCallback;
    private WebTestRequestResultCompletedCallback m_requestResultCompletedCallback;
    private WebTestCompletedCallback m_testCompletedCallback;
    private AddCommentCallback m_addCommentCallback;
    private PreTransactionCallback m_preTransactionCallback;
    private PostTransactionCallback m_postTransactionCallback;
    private AddCorrelationResultCallback m_addCorrelationResultCallback;
    private PreConditionCallback m_preConditionCallback;
    private PostConditionCallback m_postConditionCallback;
    private PostConditionalRuleCallback m_postConditionalRuleCallback;
    private PreLoopCallback m_preLoopCallback;
    private PostLoopCallback m_postLoopCallback;
    private PreLoopIterationCallback m_preLoopIterationCallback;
    private PostLoopIterationCallback m_postLoopIterationCallback;
    private bool m_runVariationInSameThread;
    private bool m_useSingleQueue;
    private bool m_shutDownPendingTransactions;
    private bool m_completeRequestOnAbort;
    public WebTestRunConfig RunConfig { get; public set; }
    public WebTestSuiteDataManager DataManager { get; }
    public WebTestRunner(WebTestRunConfig runConfig, WebTestPlaybackOptions playbackOptions, IRunContext runContext, WebTestRunStatusCallback statusCallback, WebTestRequestResultCompletedCallback requestResultCompletedCallback, AddCommentCallback addCommentCallback, PreTransactionCallback preTransactionCallback, PostTransactionCallback postTransactionCallback, WebTestCompletedCallback testCompletedCallback, AddCorrelationResultCallback addCorrelationResultCallback, PreConditionCallback preConditionCallback, PostConditionCallback postConditionCallback, PostConditionalRuleCallback postConditionalRuleCallback, PreLoopCallback preLoopCallback, PostLoopCallback postLoopCallback, PreLoopIterationCallback preLoopIterationCallback, PostLoopIterationCallback postLoopIterationCallback, bool runVariationInSameThread);
    public LimitingTableDescriptor Initialize(WebTestElement webTestElement, WebTestQueuedCompletion webTestQueuedCompletion, bool shutDownPendingTransactions, bool completeRequestOnAbort);
    public void CreateAndRunVariation();
    public void ResumeTest();
    public void PauseTest();
    public void ShutdownTest();
    public void AbortTest();
    public void set_RunConfig(WebTestRunConfig value);
    public WebTestRunConfig get_RunConfig();
    public WebTestSuiteDataManager get_DataManager();
    private void PlaybackThread();
    private void StartupVariation();
    private void UpdateProxy();
    private WebTestExecutionInstruction PreRequestCallback(WebTestInstrumentedTransaction transaction, object callerState);
    private void PostRequestCallback(WebTestInstrumentedTransaction transaction, object callerState, WebTestExecutionInstruction executionType);
    private void RequestResultCompletedCallback(WebTestRequestResult requestResult);
    private void TestCaseCompletedCallback(IAsyncResult result);
    private void DoStatusCallback(WebTestRunStatus status, object data);
    private void WaitForVariationComplete();
    private void SetVariationComplete();
    private void ReSetVariationComplete();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestRunStatusCallback : MulticastDelegate {
    public WebTestRunStatusCallback(object object, IntPtr method);
    public virtual void Invoke(WebTestRunStatus status, object data);
    public virtual IAsyncResult BeginInvoke(WebTestRunStatus status, object data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestScenario : object {
    private string m_name;
    private bool m_ipSwitching;
    private int m_delayBetweenIterations;
    private int m_percentNewUsers;
    private int m_maxTestIterations;
    private bool m_disableDuringWarmup;
    private int m_delayStartTime;
    private HashSet`1<string> m_allowedAgents;
    private LoadTestLoadProfile m_loadProfile;
    private WebTestThinkProfile m_thinkProfile;
    private WebTestProfile m_initializeTest;
    private WebTestProfile m_terminateTest;
    private TestMixType m_testMixType;
    private bool m_applyNormalDistribtuionToDelays;
    private List`1<WebTestProfile> m_testProfileCollection;
    private List`1<WebTestBrowserProfile> m_browserCollection;
    private List`1<WebTestNetworkProfile> m_networkCollection;
    private LoadTestScenario m_loadTestScenario;
    public string Name { get; public set; }
    public bool IPSwitching { get; public set; }
    public int DelayBetweenIterations { get; public set; }
    public int PercentNewUsers { get; public set; }
    public int MaxTestIterations { get; public set; }
    public bool DisableDuringWarmup { get; public set; }
    public int DelayStartTime { get; public set; }
    public HashSet`1<string> AllowedAgents { get; public set; }
    public LoadTestLoadProfile LoadProfile { get; public set; }
    public WebTestThinkProfile ThinkProfile { get; public set; }
    public WebTestProfile InitializeTest { get; public set; }
    public WebTestProfile TerminateTest { get; public set; }
    public TestMixType TestMixType { get; public set; }
    public bool ApplyNormalDistribtuionToPacingDelays { get; public set; }
    public List`1<WebTestProfile> TestProfiles { get; public set; }
    public List`1<WebTestProfile> TestProfilesWithInitAndTerm { get; }
    public List`1<WebTestBrowserProfile> Browsers { get; public set; }
    public List`1<WebTestNetworkProfile> Networks { get; public set; }
    public LoadTestScenario LoadTestScenario { get; public set; }
    public bool ContainsWebTests { get; }
    public bool ContainsNonWebTests { get; }
    public bool RunsOnThisAgent { get; }
    public WebTestScenario(WebTestScenario copy);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IPSwitching();
    public void set_IPSwitching(bool value);
    public int get_DelayBetweenIterations();
    public void set_DelayBetweenIterations(int value);
    public int get_PercentNewUsers();
    public void set_PercentNewUsers(int value);
    public int get_MaxTestIterations();
    public void set_MaxTestIterations(int value);
    public bool get_DisableDuringWarmup();
    public void set_DisableDuringWarmup(bool value);
    public int get_DelayStartTime();
    public void set_DelayStartTime(int value);
    public HashSet`1<string> get_AllowedAgents();
    public void set_AllowedAgents(HashSet`1<string> value);
    public LoadTestLoadProfile get_LoadProfile();
    public void set_LoadProfile(LoadTestLoadProfile value);
    public WebTestThinkProfile get_ThinkProfile();
    public void set_ThinkProfile(WebTestThinkProfile value);
    public WebTestProfile get_InitializeTest();
    public void set_InitializeTest(WebTestProfile value);
    public WebTestProfile get_TerminateTest();
    public void set_TerminateTest(WebTestProfile value);
    public TestMixType get_TestMixType();
    public void set_TestMixType(TestMixType value);
    public bool get_ApplyNormalDistribtuionToPacingDelays();
    public void set_ApplyNormalDistribtuionToPacingDelays(bool value);
    public List`1<WebTestProfile> get_TestProfiles();
    public void set_TestProfiles(List`1<WebTestProfile> value);
    public List`1<WebTestProfile> get_TestProfilesWithInitAndTerm();
    public List`1<WebTestBrowserProfile> get_Browsers();
    public void set_Browsers(List`1<WebTestBrowserProfile> value);
    public List`1<WebTestNetworkProfile> get_Networks();
    public void set_Networks(List`1<WebTestNetworkProfile> value);
    public LoadTestScenario get_LoadTestScenario();
    public void set_LoadTestScenario(LoadTestScenario value);
    public bool get_ContainsWebTests();
    public bool get_ContainsNonWebTests();
    public bool get_RunsOnThisAgent();
    public sealed virtual object Clone();
    public int GetMaximumUserLoad();
    public void EnsureNetworkMix();
    public void EnsureBrowserMix();
    public void SetAllowedAgents(string allowedAgents);
    public void SetAllowedAgents(String[] allowedAgentNames);
    public string AllowedAgentsToString();
}
[DebuggerNonUserCodeAttribute]
[ComVisibleAttribute("False")]
[GeneratedCodeAttribute("MkMsgs", "5.0.20305.0")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestStatusMessagePacker : MessagePacker {
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    private MessageInfo _msgInfo;
    private static MessageInfo s_msgInfo;
    [CompilerGeneratedAttribute]
private static WebTestStatusMessagePacker <Default>k__BackingField;
    public bool SwapBytes { get; public set; }
    public MessageInfo MsgInfo { get; }
    public static WebTestStatusMessagePacker Default { get; private set; }
    public WebTestStatusMessagePacker(MessageInfo mi);
    private static WebTestStatusMessagePacker();
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    public virtual MessageInfo get_MsgInfo();
    [CompilerGeneratedAttribute]
public static WebTestStatusMessagePacker get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(WebTestStatusMessagePacker value);
    public MessageID GetMessageID(Byte* pMsg);
    public MessageID GetMessageID(Byte[] msg);
    public MsgHandle PackMessageTheMessage(WebTestStatus* pWebTestStatus, IMessageMemory2 memory, Int32& msgLen);
    public Handle UnpackMessageTheMessage(Byte* pMsg, IMessageMemory2 messageMemory);
    public MsgHandle PackMessageTheMessage(_WebTestStatus webTestStatus, IMessageMemory2 memory, Int32& msgLen);
    public _WebTestStatus UnpackMessageTheMessageToClass(Byte* pMsg, IMessageMemory2 messageMemory);
    public _WebTestStatus UnpackMessageTheMessageToClass(Byte[] msg, IMessageMemory2 messageMemory);
    public int CalcHeaderLength();
    public int CalcCompressedHeaderLength(Stream stream);
    public Byte[] ReadMessage(Stream stream);
    public void ReadMessageHeader(Stream stream, Int32& length, Int16& id);
    public int GetMessageLength(Byte[] msg);
    public int GetMessageLength(Byte* pMsg);
    public MsgHandle PackMessage(short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public void PackMessage(short msgID, Byte* pData, IMessageMemory memory);
    public void DumpMessage(IMessagePartSink sink, Byte* pMsg);
    public void DumpMessage(IMessagePartSink sink, Byte[] msg);
    public void MergeMessageInfo(MessageInfo targetMsgInfo);
    public void RestoreMessageInfo();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestSuite : TestElement {
    private string m_filePath;
    private WebTestTraceLevel m_traceLevel;
    private string m_currentRunConfig;
    private List`1<WebTestScenario> m_scenarioCollection;
    private List`1<CounterSet> m_counterSets;
    private List`1<RunConfig> m_runConfigs;
    private int m_runtimeTestCaseCount;
    private bool m_testTypesChecked;
    private bool m_containsWebTests;
    private bool m_containsCodedWebTests;
    private bool m_containsNonWebTests;
    private LoadTestPluginReferenceCollection m_loadTestPluginCollection;
    private LoadTestContext m_context;
    private int m_minThreads;
    private int m_maxThreads;
    private static Tmi m_tmi;
    private static TestType s_testType;
    private LoadTestFeature m_availableFeatures;
    private bool m_containsUnSupportedTestsForCloud;
    private bool m_containsCodedUITests;
    private bool m_isLicensedForAllLoadTestFeatures;
    private bool m_isLicensedForLoadTest;
    [BrowsableAttribute("False")]
public bool ContainsWebTests { get; }
    [BrowsableAttribute("False")]
public bool ContainsCodedWebTests { get; }
    [BrowsableAttribute("False")]
public bool ContainsNonWebTests { get; }
    [BrowsableAttribute("False")]
public bool ContainsCodedUITests { get; }
    [BrowsableAttribute("False")]
public bool ContainsUnSupportedTests { get; }
    [BrowsableAttribute("False")]
public WebTestTraceLevel TraceLevel { get; public set; }
    public string CurrentRunConfig { get; public set; }
    internal bool HasLoadTestPluginReferences { get; }
    [BrowsableAttribute("False")]
public LoadTestPluginReferenceCollection LoadTestPlugins { get; internal set; }
    public LoadTestContext Context { get; public set; }
    [BrowsableAttribute("False")]
public List`1<WebTestScenario> Scenarios { get; public set; }
    [BrowsableAttribute("False")]
public List`1<CounterSet> CounterSets { get; public set; }
    [BrowsableAttribute("False")]
public List`1<RunConfig> RunConfigs { get; public set; }
    [BrowsableAttribute("False")]
public int RuntimeTestCaseCount { get; public set; }
    [BrowsableAttribute("False")]
public string Adapter { get; }
    [BrowsableAttribute("False")]
public string ControllerPlugin { get; }
    [BrowsableAttribute("False")]
public string FilePath { get; public set; }
    [BrowsableAttribute("False")]
public int MaxBrowserConnections { get; }
    [BrowsableAttribute("False")]
public NetworkEmulationType NetworkEmulationType { get; }
    public bool UsesMultipleNetworkTypesOnThisAgent { get; }
    public bool BindPortsForNetworkEmulationOnThisAgent { get; }
    private int Microsoft.VisualStudio.TestTools.Common.IThreadConsumer.MinThreads { get; }
    private int Microsoft.VisualStudio.TestTools.Common.IThreadConsumer.MaxThreads { get; }
    public bool CanBeAggregated { get; }
    public static TestType LoadTestSuiteType { get; }
    public TestType TestType { get; }
    public static Tmi Tmi { get; public set; }
    [ReadOnlyAttribute("True")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("False")]
public TestId[] Elements { get; }
    public Link[] Links { get; }
    public Link[] VisibleLinks { get; }
    public bool RequiresFullDeployment { get; }
    public bool RequiresBuild { get; }
    public List`1<string> ImpliedDependentAssemblies { get; }
    public List`1<DeploymentItem> ImpliedDeploymentItems { get; }
    public int MinimumAgents { get; }
    public int MaximumAgents { get; }
    public bool IsSynchronized { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.ElementName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.NamespaceUri { get; }
    [BrowsableAttribute("False")]
public int Timeout { get; public set; }
    public string Storage { get; public set; }
    public ProductFeature RequiredProductFeatures { get; }
    public ProductFeature RequiredProductFeaturesForRemoteExecution { get; }
    public LoadTestFeature AvailableFeatures { get; }
    public WebTestSuite(WebTestSuite copy);
    private static WebTestSuite();
    public bool get_ContainsWebTests();
    public bool get_ContainsCodedWebTests();
    public bool get_ContainsNonWebTests();
    public bool get_ContainsCodedUITests();
    public bool get_ContainsUnSupportedTests();
    public WebTestTraceLevel get_TraceLevel();
    public void set_TraceLevel(WebTestTraceLevel value);
    public string get_CurrentRunConfig();
    public void set_CurrentRunConfig(string value);
    internal bool get_HasLoadTestPluginReferences();
    public LoadTestPluginReferenceCollection get_LoadTestPlugins();
    internal void set_LoadTestPlugins(LoadTestPluginReferenceCollection value);
    public void set_Context(LoadTestContext value);
    public LoadTestContext get_Context();
    public List`1<WebTestScenario> get_Scenarios();
    public void set_Scenarios(List`1<WebTestScenario> value);
    public List`1<CounterSet> get_CounterSets();
    public void set_CounterSets(List`1<CounterSet> value);
    public List`1<RunConfig> get_RunConfigs();
    public void set_RunConfigs(List`1<RunConfig> value);
    public int get_RuntimeTestCaseCount();
    public void set_RuntimeTestCaseCount(int value);
    public virtual string get_Adapter();
    public virtual string get_ControllerPlugin();
    public string get_FilePath();
    public void set_FilePath(string value);
    public int get_MaxBrowserConnections();
    public NetworkEmulationType get_NetworkEmulationType();
    public bool get_UsesMultipleNetworkTypesOnThisAgent();
    public bool get_BindPortsForNetworkEmulationOnThisAgent();
    public static WebTestSuite InstantiateTests(string loadTestPath);
    public List`1<CounterSetReference> GetCounterSetReferencesForType(string counterSetType);
    public CounterSet GetCounterSet(string counterSetType);
    private static ConflictAction LoadTestConflictHandler(ITestElement oldElementInMemory, ITestElement newElement);
    internal void SetTestElementsFromTestRun(TestRun testRun);
    public void OverrideActiveRunSetting(string runSettingOverride);
    public ICollection LoadRuntimeTestCases();
    public List`1<string> GetCounterNames(string counterCategoryName);
    public RunConfig GetCurrentRunConfig();
    public void SetThreadPoolSize(AgentLoadDistributor agentLoadDistributor, int agentId);
    private sealed virtual override int Microsoft.VisualStudio.TestTools.Common.IThreadConsumer.get_MinThreads();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.Common.IThreadConsumer.get_MaxThreads();
    public int GetMaximumUserLoad();
    public int GetTestCaseId(string scenarioName, string testCaseName);
    public ITestElement GetTestCase(int testCaseId, String& scenarioName);
    public WebTestScenario GetScenario(string scenarioName);
    public LoadTest CreateLoadTest();
    public void InitializeNetworkEmulationPorts(int loadTestPortRangeStart, int loadTestPortRangeEnd);
    public virtual bool get_CanBeAggregated();
    public static TestType get_LoadTestSuiteType();
    public virtual TestType get_TestType();
    public static Tmi get_Tmi();
    public static void set_Tmi(Tmi value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual object Clone();
    public sealed virtual TestId[] get_Elements();
    public sealed virtual Link[] get_Links();
    public sealed virtual Link[] get_VisibleLinks();
    public sealed virtual void Add(Link id);
    public sealed virtual void Remove(Link id);
    public sealed virtual void Clear();
    internal void SetId(Guid id);
    public sealed virtual bool get_RequiresFullDeployment();
    public sealed virtual bool get_RequiresBuild();
    public sealed virtual List`1<string> get_ImpliedDependentAssemblies();
    public sealed virtual List`1<DeploymentItem> get_ImpliedDeploymentItems();
    public sealed virtual int get_MinimumAgents();
    public sealed virtual int get_MaximumAgents();
    public sealed virtual bool get_IsSynchronized();
    public virtual void Save(XmlElement target, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement source, XmlTestStoreParameters parameters);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_ElementName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_NamespaceUri();
    private static string FindAssembly(string path, string name);
    private string MakeTestCasePathRelative(string oldPath, string newPath, string testCasePath);
    private void MakeTestCasePathsRelative(string oldPath, string newPath);
    internal void SetNameFromPath(string path);
    private void CheckTestTypes();
    private bool IsUnitTest(WebTestProfile testProfile);
    private bool IsCodedUITest(WebTestProfile testProfile);
    private string GetExtensionName(WebTestProfile testProfile);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual string get_Storage();
    public virtual void set_Storage(string value);
    public sealed virtual ProductFeature get_RequiredProductFeatures();
    public sealed virtual ProductFeature get_RequiredProductFeaturesForRemoteExecution();
    private void UpdateLicenseInformation();
    public LoadTestFeature get_AvailableFeatures();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestSuiteConnection : object {
    private string m_connection;
    private string m_provider;
    private Hashtable m_tableDictionary;
    public string Connection { get; public set; }
    public string Provider { get; public set; }
    public Hashtable Tables { get; }
    public string get_Connection();
    public void set_Connection(string value);
    public string get_Provider();
    public void set_Provider(string value);
    public Hashtable get_Tables();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestSuiteDataManager : object {
    private static bool s_logToConsole;
    private static bool s_logDebug;
    private static object s_addWebTestDataDuringRunLock;
    private WebTestSuite m_suite;
    private Dictionary`2<string, WebTestSuiteConnection> m_dataSourceToConnectionMap;
    private Dictionary`2<string, WebTestSuiteConnection> m_suiteConnectionMap;
    private Dictionary`2<Guid, Dictionary`2<string, WebTestTableBinding>> m_bindingsByWebTestGuid;
    private List`1<Guid> m_webTestsProcessedDuringRun;
    private int m_uniqueCursorInitialIndex;
    private int m_uniqueCursorIndexIncrement;
    private TestDataConnectionFactory m_connectionFactory;
    public WebTestSuiteDataManager(WebTestSuite suite, TestDataConnectionFactory connectionFactory);
    public WebTestSuiteDataManager(WebTestElement webTestElement, TestDataConnectionFactory connectionFactory);
    private static WebTestSuiteDataManager();
    public void AddWebTestDataDuringRun(WebTestElement webTestElement, WebTest rootWebTest);
    public void Bind(WebTest webTest, IDictionary`2<string, object> contextVariables);
    public void ReloadDataTable(WebTestElement webTestElement, string dataSourceName, string dataTableName);
    public void MoveDataTableCursor(string dataSourceName, string dataTableName, WebTest webTest, IDictionary`2<string, object> contextVariables, int newRowIndex);
    public int GetDataTableRowCount(string dataSourceName, string dataTableName, WebTest webTest);
    public LimitingTableDescriptor GetLimitingTable(WebTest webTest);
    public void PrepareForRunningUntilDataExhausted(WebTest webTest, LimitingTableDescriptor limitingTable);
    private void PerformTableBinding(WebTestTableBinding tableBinding, IDictionary`2<string, object> contextVariables, int newRowIndex);
    private void Init(WebTestSuite suite);
    private void Init(WebTestElement webTestElement, WebTest rootWebTest, bool isForLateBinding);
    private static string ConstructDataSourceKey(WebTest webTest, string datasourceName);
    private void AddTableBindings(WebTest webTest, WebTest rootWebTest, bool isForLateBinding);
    private Dictionary`2<string, WebTestTableBinding> GetTableBindings(WebTest webTest);
    private void CreateDataTables();
    private void CreateDataTable(WebTestSuiteConnection suiteConnection, WebTestSuiteTable tableSuite);
    private WebTestSuiteConnection GetSuiteConnection(WebTest webTest, string dataSourceName);
    private string GetConnectionName(WebTestSuiteConnection connection);
    private static DataBindingAccessMethod GetTableAccessMethod(DataSource dataSource, WebTestSuiteTable suiteTable);
    private static void LogVerbose(string message);
    private static void LogDebug(string message);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestSuiteTable : object {
    private string m_name;
    private StringCollection m_columnCollection;
    private DataTable m_dataTable;
    private bool m_createDataTableCalled;
    private DataBindingSelectColumns m_selectColumns;
    public string Name { get; public set; }
    public DataBindingSelectColumns SelectColumns { get; public set; }
    public StringCollection Columns { get; }
    public DataTable DataTable { get; }
    public bool CreateDataTableCalled { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public DataBindingSelectColumns get_SelectColumns();
    public void set_SelectColumns(DataBindingSelectColumns value);
    public StringCollection get_Columns();
    public DataTable get_DataTable();
    public bool get_CreateDataTableCalled();
    internal void set_CreateDataTableCalled(bool value);
    public void CreateDataTable(string provider, string connectionString, TestDataConnectionFactory connectionFactory);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestSuiteXmlSerializer : object {
    private string m_filename;
    private static string tagBrowser;
    private static string tagBrowserMix;
    private static string tagBrowserProfile;
    private static string tagHeader;
    private static string tagHeaders;
    private static string tagLoadProfile;
    private static string tagNetwork;
    private static string tagNetworkMix;
    private static string tagNetworkProfile;
    private static string tagScenarios;
    private static string tagScenario;
    private static string tagInitializeTest;
    private static string tagTerminateTest;
    private static string tagTestMix;
    private static string tagTestMixType;
    private static string tagTestProfile;
    private static string tagLoadTest;
    private static string tagThinkProfile;
    private static string tagCounterSets;
    private static string tagCounterSet;
    private static string tagCounterCategories;
    private static string tagCounterCategory;
    private static string tagCounters;
    private static string tagCounter;
    private static string tagInstances;
    private static string tagInstance;
    private static string tagRunConfigurations;
    private static string tagRunConfiguration;
    private static string tagCounterSetMappings;
    private static string tagAutComponents;
    private static string tagCounterSetMapping;
    private static string tagAutComponent;
    private static string tagAutCounters;
    private static string tagAutCounter;
    private static string tagLoadGeneratorLocations;
    private static string tagGeoLocation;
    private static string tagLocation;
    private static string tagThresholdRules;
    private static string tagThresholdRule;
    private static string tagRuleParameter;
    private static string tagRuleParameters;
    private static string tagLoadTestPlugins;
    private static string tagLoadTestPlugin;
    private static string tagBandwidthInKbps;
    private static string tagDelayBetweenIterations;
    private static string tagPercentNewUsers;
    private static string tagMaxTestIterations;
    private static string tagDisableDuringWarmup;
    private static string tagApplyDistributionToPacingDelay;
    private static string tagDelayStartTime;
    private static string tagAllowedAgents;
    private static string tagNetworkProfileConfigurationXml;
    private static string tagCounterSetName;
    private static string tagInitialUsers;
    private static string tagIPSwitching;
    private static string tagMaxUsers;
    private static string tagMaxUserCount;
    private static string tagMinUserCount;
    private static string tagName;
    private static string tagPath;
    private static string tagType;
    private static string tagId;
    private static string tagPattern;
    private static string tagPercentage;
    private static string tagStepDuration;
    private static string tagStepUsers;
    private static string tagStepRampTime;
    private static string tagTraceLevel;
    private static string tagValue;
    private static string tagResultsStoreType;
    private static string tagTimingDetailsStorage;
    private static string tagWebTestConnectionPoolSize;
    private static string tagUseTestIterations;
    private static string tagRunDuration;
    private static string tagWarmupTime;
    private static string tagCoolDownTime;
    private static string tagTestIterations;
    private static string tagWebTestConnectionModel;
    private static string tagSampleRate;
    private static string tagValidationLevel;
    private static string tagCoreCount;
    private static string tagUseMultipleIPs;
    private static string tagTestAgentConfiguration;
    private static string tagAgentDiagnosticsLevel;
    private static string tagResourcesRetentionTimeInMinutes;
    private static string tagSaveTestLogsOnError;
    private static string tagSaveTestLogsFrequency;
    private static string tagMaxErrorDetails;
    private static string tagMaxErrorsPerType;
    private static string tagMaxThresholdViolations;
    private static string tagMaxRequestUrlsReported;
    private static string tagCurrentRunConfig;
    private static string tagClassname;
    private static string tagCounterSetReferences;
    private static string tagCounterSetReference;
    private static string tagCounterSetType;
    private static string tagCounterSetLocId;
    private static string tagComputerName;
    private static string tagComputerTag;
    private static string tagComputerTags;
    private static string tagTag;
    private static string tagLoadTestPluginClass;
    private static string tagCounterPath;
    private static string tagMachineName;
    private static string tagCategoryName;
    private static string tagCounterName;
    private static string tagInstanceName;
    private static string tagMaxUserCountIncrease;
    private static string tagMaxUserCountDecrease;
    private static string tagMinTargetValue;
    private static string tagMaxTargetValue;
    private static string tagHigherValuesBetter;
    private static string tagRunUnitTestsInAppDomain;
    private static string tagStopAdjustingAtGoal;
    private static string tagSqlTracingConnectString;
    private static string tagSqlTracingConnectStringDisplayValue;
    private static string tagSqlTracingDirectory;
    private static string tagSqlTracingEnabled;
    private static string tagSqlTracingRolloverEnabled;
    private static string tagSqlTracingFileCount;
    private static string tagSqlTracingMinimumDuration;
    private static string tagDescription;
    private static string tagOwner;
    private static string tagStorage;
    private static string tagPriority;
    private static string tagEnabled;
    private static string tagCssProjectStructure;
    private static string tagCssIteration;
    private static string tagDeploymentItemsEditable;
    private static string tagContextParameters;
    private static string tagContextParameter;
    private static string tagWorkItemIds;
    private static string tagDefaultCountersForAutomaticGraph;
    private static string tagDefaultCounter;
    private static string tagGraphName;
    private static string tagRunType;
    private static string tagRange;
    private static string tagRangeGroup;
    private static string tagHigherIsBetter;
    private static string tagDisplayName;
    private static string tagMaxConnections;
    private static string tagAutVersion;
    private static string tagAutSeparator;
    private static string tagXmlns;
    public WebTestSuite LoadFile(string fileName);
    public WebTestSuite LoadFromStream(Stream stream);
    public static CounterSet LoadCounterSetFile(string fileName);
    public static CounterSet LoadCounterSetDom(XmlDocument doc);
    public static WebTestBrowser LoadBrowserTemplateFile(string fileName);
    public static WebTestNetwork LoadNetworkTemplateFile(string fileName);
    public WebTestSuite LoadDom(XmlDocument doc);
    public void LoadDom(XmlElement source, WebTestSuite target);
    public void SaveFile(WebTestSuite testSuite, string fileName);
    public void SaveToStream(WebTestSuite testSuite, Stream stream);
    public XmlDocument SaveToDom(WebTestSuite testSuite);
    public void SaveToDom(XmlElement target, WebTestSuite testSuite);
    public XmlDocument SaveToDom(CounterSet counterSet);
    public static TestId LoadTestIdFromFile(string fileName);
    private WebTestSuite DomToModel(XmlDocument doc);
    private XmlDocument ModelToDom(WebTestSuite testSuite);
    private XmlDocument ModelToDom(CounterSet counterSet);
    private static XmlElement CreateElement(XmlDocument doc, string tagName);
    private WebTestSuite CreateTestSuite(XmlElement elem);
    private void InitializeTestSuite(WebTestSuite testSuite, XmlElement elem);
    private static string GetFilename(XmlElement elem);
    private WebTestScenario CreateScenario(XmlElement elem);
    private WebTestProfile CreateInitTermTest(XmlElement elem, string tagName);
    private WebTestProfile CreateTestProfile(XmlElement elem);
    private static LoadTestLoadProfile CreateLoadProfile(XmlElement elem);
    private static LoadTestConstantLoadProfile CreateConstantLoadProfile(XmlElement elem);
    private static LoadTestStepLoadProfile CreateStepLoadProfile(XmlElement elem);
    private static LoadTestGoalBasedLoadProfile CreateLoadTestGoalBasedLoadProfile(XmlElement elem);
    private WebTestBrowserProfile CreateBrowserProfile(XmlElement elem);
    private WebTestBrowser CreateBrowser(XmlElement elem);
    private static WebTestRequestHeader CreateHeader(XmlElement elem);
    private WebTestNetworkProfile CreateNetworkProfile(XmlElement elem);
    private static WebTestNetwork CreateNetwork(XmlElement elem);
    private static WebTestThinkProfile CreateThinkProfile(XmlElement elem);
    private CounterSet CreateCounterSet(XmlElement elem);
    private void SetHigherIsBetter(CounterSet counterSet);
    private static string GetCounterSetType(string value);
    private static string GetCounterSetName(string counterSetType, string name);
    private CounterCategory CreateCounterCategory(XmlElement elem);
    private Counter CreateCounter(XmlElement elem);
    private static DefaultCounter CreateDefaultCounter(XmlElement elem);
    private ThresholdRuleReference CreateThresholdRuleReference(XmlElement elem);
    private static PluginOrRuleProperty CreateRuleProperty(XmlElement elem);
    private static CounterInstance CreateCounterInstance(XmlElement elem);
    private RunConfig CreateRunConfiguration(XmlElement elem);
    private LoadTestPluginReference CreateLoadTestPluginReference(XmlElement elem);
    private static ContextParameter CreateContextParameter(XmlElement elem);
    private CounterSetMapping CreateCounterSetMapping(XmlElement elem);
    private AutComponent CreateAutComponent(XmlElement elem);
    private GeoLocation CreateGeoLocation(XmlElement elem);
    private AutCounter CreateAutCounter(XmlElement elem);
    private static CounterSetReference CreateCounterSetReference(XmlElement elem);
    private static ComputerTag CreateComputerTag(XmlElement elem);
    private XmlElement CreateTestSuiteElement(XmlDocument doc, WebTestSuite testSuite);
    private void InitializeTestSuiteElement(XmlElement elem, WebTestSuite testSuite);
    private XmlElement CreateScenarioElement(XmlDocument doc, WebTestScenario scenario);
    private XmlElement CreateInitTermTestElement(XmlDocument doc, string tagName, WebTestProfile testProfile);
    private XmlElement CreateTestProfileElement(XmlDocument doc, WebTestProfile testProfile);
    private static XmlElement CreateLoadProfileElement(XmlDocument doc, LoadTestLoadProfile loadProfile);
    private static XmlElement CreateConstantLoadProfileElement(XmlDocument doc, LoadTestConstantLoadProfile loadProfile);
    private static XmlElement CreateStepLoadProfileElement(XmlDocument doc, LoadTestStepLoadProfile loadProfile);
    private static XmlElement CreateLoadTestGoalBasedLoadProfileElement(XmlDocument doc, LoadTestGoalBasedLoadProfile loadProfile);
    private XmlElement CreateBrowserProfileElement(XmlDocument doc, WebTestBrowserProfile browserProfile);
    private XmlElement CreateBrowserElement(XmlDocument doc, WebTestBrowser browser);
    private static XmlElement CreateHeaderElement(XmlDocument doc, WebTestRequestHeader header);
    private static XmlElement CreateNetworkProfileElement(XmlDocument doc, WebTestNetworkProfile networkProfile);
    private static XmlElement CreateNetworkElement(XmlDocument doc, WebTestNetwork network);
    private static XmlElement CreateThinkProfileElement(XmlDocument doc, WebTestThinkProfile thinkProfile);
    private XmlElement CreateCounterSetElement(XmlDocument doc, CounterSet counterSet);
    private XmlElement CreateCounterCategoryElement(XmlDocument doc, CounterCategory counterSetCategory);
    private XmlElement CreateCounterElement(XmlDocument doc, Counter counter);
    private static XmlElement CreateDefaultCounterElement(XmlDocument doc, DefaultCounter defaultCounter);
    private XmlElement CreateThresholdRuleElement(XmlDocument doc, ThresholdRuleReference rule);
    private static XmlElement CreateRuleParameterElement(XmlDocument doc, PluginOrRuleProperty property);
    private static XmlElement CreateCounterInstanceElement(XmlDocument doc, CounterInstance counterInstance);
    private XmlElement CreateLoadTestPluginElement(XmlDocument doc, LoadTestPluginReference plugin);
    private XmlElement CreateRunConfigurationElement(XmlDocument doc, RunConfig runConfig);
    private static XmlElement CreateContextParameterElement(XmlDocument doc, ContextParameter parameter);
    private XmlElement CreateCounterSetMappingElement(XmlDocument doc, CounterSetMapping mapping);
    private XmlElement CreateAutComponentElement(XmlDocument doc, AutComponent autComponent);
    private XmlElement CreateGeoLocationElement(XmlDocument doc, GeoLocation geoLocation);
    private XmlElement CreateAutCounterElement(XmlDocument doc, AutCounter autCounter);
    private static XmlElement CreateCounterSetReferenceElement(XmlDocument doc, CounterSetReference reference);
    private static XmlElement CreateComputerTagElement(XmlDocument doc, ComputerTag tag);
    private object GetSingleton(XmlElement elem, string itemTagName, Type itemType);
    private void GetCollection(XmlElement elem, string collectionTagName, string itemTagName, Type itemType, IList collection);
    private void CreateCollection(XmlDocument doc, XmlElement elem, string collectionTagName, IList collection);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestTableBinding : object {
    private ArrayList m_bindingElementCollection;
    private WebTestSuiteTable m_suiteTable;
    private DataBindingAccessDescriptor m_accessDescriptor;
    private BaseTableCursor m_cursor;
    public WebTestSuiteTable SuiteTable { get; }
    public DataBindingAccessDescriptor AccessDescriptor { get; }
    public BaseTableCursor Cursor { get; }
    public ArrayList BindingElements { get; }
    public WebTestTableBinding(WebTestSuiteTable table, DataBindingAccessDescriptor accessDescriptor);
    public WebTestSuiteTable get_SuiteTable();
    public DataBindingAccessDescriptor get_AccessDescriptor();
    public BaseTableCursor get_Cursor();
    public ArrayList get_BindingElements();
    public void AddBinding(WebTestTableBindingElement elem);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestTableBindingElement : object {
    private string m_bindingName;
    private string m_columnName;
    public string BindingName { get; }
    public string ColumnName { get; }
    public WebTestTableBindingElement(string bindingName, string columnName);
    public string get_BindingName();
    public string get_ColumnName();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebTestThinkPattern : Enum {
    public int value__;
    public static WebTestThinkPattern Off;
    public static WebTestThinkPattern On;
    public static WebTestThinkPattern NormalDistribution;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestThinkProfile : object {
    private WebTestThinkPattern m_pattern;
    private double m_value;
    public double Value { get; public set; }
    public WebTestThinkPattern Pattern { get; public set; }
    public WebTestThinkProfile(WebTestThinkProfile copy);
    public double get_Value();
    public void set_Value(double value);
    public WebTestThinkPattern get_Pattern();
    public void set_Pattern(WebTestThinkPattern value);
    public sealed virtual object Clone();
    public int GetThinkTimeInMillis(int specifiedThinkTimeInSeconds);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestTimer : TimerResult {
    private bool m_isForIncludedWebTest;
    private int m_declarativeWebTestItemId;
    private int m_responseTimeMs;
    private int m_totalThinkTimeMs;
    private bool m_started;
    private Guid m_sourceWebTestId;
    private bool m_isInMeasurementInterval;
    public bool Started { get; }
    public Guid SourceWebTestId { get; }
    public bool IsInMeasurementInterval { get; public set; }
    public TimeSpan ResponseTime { get; }
    public bool IsForIncludedWebTest { get; }
    public int DeclarativeWebTestItemId { get; }
    public int TotalThinkTimeMs { get; }
    public WebTestTimer(string transactionName, bool isForIncludedWebTest, int declarativeWebTestItemId, Guid sourceWebTestId);
    public WebTestTimer(string transactionName, bool isForIncludedWebTest, int responseTimeMs, int totalThinkTimeMs, bool started, int declarativeWebTestItemId, Guid sourceWebTestId);
    public bool get_Started();
    public Guid get_SourceWebTestId();
    public bool get_IsInMeasurementInterval();
    public void set_IsInMeasurementInterval(bool value);
    public TimeSpan get_ResponseTime();
    public bool get_IsForIncludedWebTest();
    public int get_DeclarativeWebTestItemId();
    public int get_TotalThinkTimeMs();
    public void Start();
    public void Stop();
    public void RecordCompletedPage(WebTestPageResult pageResult);
    public void RecordThinkTime(TimeSpan thinkTime);
    private void SetDuration();
}
[DebuggerNonUserCodeAttribute]
[ComVisibleAttribute("False")]
[GeneratedCodeAttribute("MkMsgs", "5.0.20305.0")]
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestTimerMessagePacker : MessagePacker {
    [CompilerGeneratedAttribute]
private bool <SwapBytes>k__BackingField;
    private MessageInfo _msgInfo;
    private static MessageInfo s_msgInfo;
    [CompilerGeneratedAttribute]
private static WebTestTimerMessagePacker <Default>k__BackingField;
    public bool SwapBytes { get; public set; }
    public MessageInfo MsgInfo { get; }
    public static WebTestTimerMessagePacker Default { get; private set; }
    public WebTestTimerMessagePacker(MessageInfo mi);
    private static WebTestTimerMessagePacker();
    [CompilerGeneratedAttribute]
public bool get_SwapBytes();
    [CompilerGeneratedAttribute]
public void set_SwapBytes(bool value);
    public virtual MessageInfo get_MsgInfo();
    [CompilerGeneratedAttribute]
public static WebTestTimerMessagePacker get_Default();
    [CompilerGeneratedAttribute]
private static void set_Default(WebTestTimerMessagePacker value);
    public MessageID GetMessageID(Byte* pMsg);
    public MessageID GetMessageID(Byte[] msg);
    public MsgHandle PackMessageTheMessage(WebTestTimer* pWebTestTimer, IMessageMemory2 memory, Int32& msgLen);
    public Handle UnpackMessageTheMessage(Byte* pMsg, IMessageMemory2 messageMemory);
    public MsgHandle PackMessageTheMessage(_WebTestTimer webTestTimer, IMessageMemory2 memory, Int32& msgLen);
    public _WebTestTimer UnpackMessageTheMessageToClass(Byte* pMsg, IMessageMemory2 messageMemory);
    public _WebTestTimer UnpackMessageTheMessageToClass(Byte[] msg, IMessageMemory2 messageMemory);
    public int CalcHeaderLength();
    public int CalcCompressedHeaderLength(Stream stream);
    public Byte[] ReadMessage(Stream stream);
    public void ReadMessageHeader(Stream stream, Int32& length, Int16& id);
    public int GetMessageLength(Byte[] msg);
    public int GetMessageLength(Byte* pMsg);
    public MsgHandle PackMessage(short msgID, Byte* pData, IMessageMemory2 memory, Int32& msgLen);
    public void PackMessage(short msgID, Byte* pData, IMessageMemory memory);
    public void DumpMessage(IMessagePartSink sink, Byte* pMsg);
    public void DumpMessage(IMessagePartSink sink, Byte[] msg);
    public void MergeMessageInfo(MessageInfo targetMsgInfo);
    public void RestoreMessageInfo();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestTimerResults : object {
    private Dictionary`2<string, WebTestTimer> m_activeTransactionTimers;
    private ArrayList m_completedTransactionTimers;
    private List`1<WebTestPageResult> m_pageResults;
    public ArrayList TransactionTimers { get; }
    public List`1<WebTestPageResult> PageResults { get; }
    public ArrayList get_TransactionTimers();
    public List`1<WebTestPageResult> get_PageResults();
    public WebTestTimer BeginTransaction(string transactionName, bool isForIncludedWebTest, int declarativeWebTestItemId, Guid sourceWebTestId, string resultsLocale);
    public WebTestTimer EndTransaction(string transactionName, string resultsLocale);
    public void RecordThinkTime(TimeSpan thinkTime);
    public WebTestPageResult BeginPage(string requestUri, WebTestRequest request);
    public void PageLoadComplete(object sender, PageLoadCompleteEventArgs e);
    public static void EndRequest(WebTestInstrumentedTransaction transaction);
    public void EndVariation();
}
internal enum Microsoft.VisualStudio.TestTools.WebStress.WebTestTraceLevel : Enum {
    public int value__;
    public static WebTestTraceLevel None;
    public static WebTestTraceLevel Requests;
    public static WebTestTraceLevel Verbose;
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestTransaction : object {
    [ThreadStaticAttribute]
private static WebTestUserContext m_threadStaticUserContext;
    [ThreadStaticAttribute]
private static WebTestConnection m_threadStaticWebTestConnection;
    [ThreadStaticAttribute]
private static WebTestRequest m_threadStaticWebTestRequest;
    private static object s_connectionLock;
    private static long s_successfulRequests;
    private static long s_failedRequests;
    private static long s_pendingRequests;
    private static long s_totalRequests;
    private static long s_openedRequests;
    private static long s_bindIpEndpointCallbacks;
    private static long s_bindIpEndpointCallbackErrors;
    private static long s_bindIpEndPointTimeouts;
    private static AsyncCallback s_issueRequestWithBodyCallback;
    private static AsyncCallback s_responseReceivedCallback;
    private static AsyncCallback s_readResponseCallback;
    private static BindIPEndPoint s_bindIPEndPoint;
    private static Dictionary`2<string, HashSet`1<ServicePoint>> s_servicePointsByConnectionGroup;
    private static object s_threadStartLock;
    private static Thread s_transactionInitiationThread;
    private static bool s_runInitiationThread;
    private static Exception s_transactionInitiationThreadException;
    private static Queue`1<TransactionQueueEntry> s_pendingTransactionQueue;
    private static Dictionary`2<ServicePoint, TransactionQueueEntry> s_queueEntriesForBindIPEndPointRetries;
    private static AutoResetEvent s_entryQueuedEvent;
    private static TransactionQueueEntry s_queueEntryBeingProcessed;
    private static object s_queueEntryLock;
    private static ManualResetEvent s_transactionBoundEvent;
    private static WebLoadStatistic s_retryCountStatistic;
    private Exception m_exception;
    private WebTestRequestStatistics m_statistics;
    private HttpWebRequest m_httpRequest;
    private HttpWebResponse m_httpResponse;
    private Byte[] m_requestBodyCapturedBytes;
    private Byte[] m_responseReadBuffer;
    private ContentLengthTrackerStream m_responseStream;
    private DataCaptureStream m_responseDataCaptureStream;
    private long m_contentRead;
    private AsyncCallback m_completionCallback;
    private AsyncRequestResult m_asyncResult;
    private bool m_useIpSwitching;
    private WebTestResponse m_webTestResponse;
    private WebTestRequest m_webTestRequest;
    private WebTestCaseContext m_testCaseContext;
    private WebTestConnection m_webTestConnection;
    private bool m_initiationComplete;
    private static AutoResetEvent s_testsRunning;
    private static ManualResetEvent s_allRequestsCompleted;
    private static bool s_isTerminating;
    private bool m_aborted;
    public static long PendingRequests { get; }
    public static long OpenedRequests { get; }
    public static long SuccessfulRequests { get; }
    public static double AverageBindIPRetryCount { get; }
    public static long FailedRequests { get; }
    public static long TotalRequests { get; }
    public static List`1<Exception> Exceptions { get; }
    public bool UseIpSwitching { get; public set; }
    public WebTestResponse WebTestResponse { get; }
    public WebTestRequestStatistics Statistics { get; }
    internal WebTestCaseContext TestCaseContext { get; internal set; }
    internal bool InitiationComplete { get; internal set; }
    internal WebTestConnection Connection { get; internal set; }
    public WebTestRequest WebTestRequest { get; public set; }
    public Byte[] RequestBodyCapturedBytes { get; }
    public HttpWebRequest HttpWebRequest { get; }
    public Exception Exception { get; public set; }
    public WebTestTransaction(string requestUrl);
    private static WebTestTransaction();
    public static long get_PendingRequests();
    public static long get_OpenedRequests();
    public static long get_SuccessfulRequests();
    public static double get_AverageBindIPRetryCount();
    public static long get_FailedRequests();
    public static long get_TotalRequests();
    public static List`1<Exception> get_Exceptions();
    public static void ResetRequestCounters();
    public bool get_UseIpSwitching();
    public void set_UseIpSwitching(bool value);
    public WebTestResponse get_WebTestResponse();
    public WebTestRequestStatistics get_Statistics();
    internal WebTestCaseContext get_TestCaseContext();
    internal void set_TestCaseContext(WebTestCaseContext value);
    internal bool get_InitiationComplete();
    internal void set_InitiationComplete(bool value);
    internal WebTestConnection get_Connection();
    internal void set_Connection(WebTestConnection value);
    public void Abort();
    public void Execute(int timeout);
    public IAsyncResult Execute(AsyncCallback completionCallback, object callerState);
    private IAsyncResult InternalExecute(AsyncCallback completionCallback, object callerState);
    private static void StartTransactionInitiationThread();
    private static void WebTestTransactionInitiationThread();
    private static int GetQueueCount();
    private static void IssueRequestWithBody(IAsyncResult ar);
    public static IPEndPoint BindIPEndPointForWebTest(ServicePoint servicePoint, IPEndPoint remoteEndPoint, int retryCount);
    private static void SetTransactionBoundEvent(WebTestTransaction transaction);
    private static IPAddress GetIPAddressToUse(bool useIpSwitchingIfConfigured, IPEndPoint remoteEndPoint);
    private static IPAddress GetDefaultIPAddressForAddressFamily(AddressFamily addressFamily);
    public WebTestRequest get_WebTestRequest();
    public void set_WebTestRequest(WebTestRequest value);
    public Byte[] get_RequestBodyCapturedBytes();
    public HttpWebRequest get_HttpWebRequest();
    public Exception get_Exception();
    public void set_Exception(Exception value);
    private static void ResponseReceived(IAsyncResult result);
    private static Stream GetDeflateStream(MemoryStream capturedStream);
    private static Stream GetGZipStream(MemoryStream capturedStream);
    private static void ReadResponse(IAsyncResult result);
    private void ProcessCompletedRequest(Guid GuidFromRequest);
    private Byte[] GetCapturedData();
    private long GetCapturedDataLength();
    public void Close();
    public static void Initialize(bool enableIPSwitching, bool enableNEWT);
    public static void Terminate();
    private static void CheckAllRequestsComplete();
    private static void CloseAllConnections();
    public static void CloseConnection(string connectionGroupName);
    private static void CloseConnection(string connectionGroupName, bool removeAssociatedServicePoints);
    private static void CacheConnectionInfo(WebTestTransaction transaction);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WebTestUserContext : object {
    private static bool s_traceCaching;
    private int m_userId;
    private bool m_isNewUser;
    private string m_userName;
    private string m_password;
    private WebTestRunConfig m_webTestRunConfig;
    private WebTestNetwork m_network;
    private NetworkEmulationType m_networkEmulationType;
    private bool m_useIpSwitching;
    private Hashtable m_requestCache;
    private WebTestConnectionGroup m_connectionGroup;
    private bool m_connectionKeepAlive;
    private CookieContainer m_cookieContainer;
    public bool ConnectionKeepAlive { get; public set; }
    public WebTestConnectionGroup ConnectionGroup { get; public set; }
    public int UserId { get; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public bool IsNewUser { get; }
    public WebTestRunConfig RunConfig { get; public set; }
    public WebTestBrowser Browser { get; public set; }
    public WebTestNetwork Network { get; public set; }
    public NetworkEmulationType NetworkEmulationType { get; public set; }
    public bool UseIpSwitching { get; public set; }
    public CookieContainer CookieContainer { get; }
    public WebTestUserContext(int userId, bool isNewUser);
    private static WebTestUserContext();
    public bool get_ConnectionKeepAlive();
    public void set_ConnectionKeepAlive(bool value);
    public WebTestConnectionGroup get_ConnectionGroup();
    public void set_ConnectionGroup(WebTestConnectionGroup value);
    public int get_UserId();
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_IsNewUser();
    public WebTestRunConfig get_RunConfig();
    public void set_RunConfig(WebTestRunConfig value);
    public WebTestBrowser get_Browser();
    public void set_Browser(WebTestBrowser value);
    public WebTestNetwork get_Network();
    public void set_Network(WebTestNetwork value);
    public void set_NetworkEmulationType(NetworkEmulationType value);
    public NetworkEmulationType get_NetworkEmulationType();
    public void set_UseIpSwitching(bool value);
    public bool get_UseIpSwitching();
    public CookieContainer get_CookieContainer();
    public bool IsRequestCached(WebTestRequest request, string requestUri, DateTime& ifModifiedSince);
    public void RequestCompleted(WebTestInstrumentedTransaction instrumentedRequest);
    public bool IsRequestCacheable(WebTestInstrumentedTransaction instrumentedRequest);
    private static void CheckForMaxAge(WebTestInstrumentedTransaction instrumentedRequest, CachedRequest cachedRequest);
    private static bool SkipConditionalRequest(string requestUri, CachedRequest cachedRequest);
    private static DateTime GetDateHeaderValue(WebTestInstrumentedTransaction instrumentedRequest, string headerName, DateTime defaultDate);
}
internal class Microsoft.VisualStudio.TestTools.WebStress.WeightedCollection : object {
    private static Random s_random;
    private double m_totalWeight;
    private ArrayList m_list;
    public int Count { get; }
    public double TotalWeight { get; }
    public WeightedCollection(WeightedCollection copy);
    private static WeightedCollection();
    public int get_Count();
    public double get_TotalWeight();
    public void Add(object o, decimal weight);
    public bool Remove(object o);
    public object Select();
    public object Select(double decrementWeightBy);
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebStress.ZoomingDataSeries : DataSeries {
    private DataPoint[] m_buckets;
    private int m_bucketsUsed;
    private int m_minX;
    private int m_maxX;
    private bool m_minMaxMode;
    public int MinX { get; }
    public int MaxX { get; }
    public bool MinMaxMode { get; }
    public ZoomingDataSeries(LoadTestStat stat, int sampleRateSeconds, CounterSample[] samples, Single[] computedValues, Range zoomRange, int capacity, bool containsAverageSamples, bool minMaxMode);
    public virtual int get_MinX();
    public virtual int get_MaxX();
    public virtual int PointCount();
    public virtual DataPoint[] Points();
    public virtual DataPoint PointAt(int index);
    public bool get_MinMaxMode();
    private static CounterSample GetNonEmptySample(CounterSample[] samples, int startInterval, bool moveForward);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
