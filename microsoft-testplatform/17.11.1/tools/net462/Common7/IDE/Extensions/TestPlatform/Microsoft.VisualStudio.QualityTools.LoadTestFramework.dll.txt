internal class Microsoft.VisualStudio.TestTools.LoadTesting.DelayBetweenIterationsChangedByPluginEventArgs : EventArgs {
    private int m_newDelayBetweenIterations;
    public int NewDelayBetweenIterations { get; }
    internal DelayBetweenIterationsChangedByPluginEventArgs(int newDelayBetweenIterations);
    public int get_NewDelayBetweenIterations();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.HeartbeatEventArgs : EventArgs {
    private bool m_isWarmupComplete;
    private int m_elapsedSeconds;
    public bool IsWarmupComplete { get; }
    public int ElapsedSeconds { get; }
    internal HeartbeatEventArgs(bool isWarmupComplete, int elapsedSeconds);
    public bool get_IsWarmupComplete();
    public int get_ElapsedSeconds();
}
public interface Microsoft.VisualStudio.TestTools.LoadTesting.ICounterProvider {
    public abstract virtual PerformanceCounterValue GetCounterValue(string machineName, string categoryName, string counterName, string instanceName);
}
public interface Microsoft.VisualStudio.TestTools.LoadTesting.ILoadTestPlugin {
    public abstract virtual void Initialize(LoadTest loadTest);
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.InvalidLoadProfileException : Exception {
    private LoadTestProfileValidationError m_validationError;
    private string m_scenarioName;
    internal string ScenarioName { get; }
    internal LoadTestProfileValidationError ValidationError { get; }
    internal InvalidLoadProfileException(string scenarioName, LoadTestProfileValidationError validationError);
    public InvalidLoadProfileException(string message);
    public InvalidLoadProfileException(string message, Exception innerException);
    protected InvalidLoadProfileException(SerializationInfo info, StreamingContext context);
    internal string get_ScenarioName();
    internal LoadTestProfileValidationError get_ValidationError();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.InvalidLoadTestScenarioException : Exception {
    private LoadTestScenarioError m_scenarioError;
    private string m_scenarioName;
    internal string ScenarioName { get; }
    internal LoadTestScenarioError ScenarioError { get; }
    internal InvalidLoadTestScenarioException(string scenarioName, LoadTestScenarioError scenarioError);
    public InvalidLoadTestScenarioException(string message);
    public InvalidLoadTestScenarioException(string message, Exception innerException);
    protected InvalidLoadTestScenarioException(SerializationInfo info, StreamingContext context);
    internal string get_ScenarioName();
    internal LoadTestScenarioError get_ScenarioError();
}
public interface Microsoft.VisualStudio.TestTools.LoadTesting.IThresholdRule {
    public string ViolationMessage { get; }
    public abstract virtual ThresholdRuleResult CheckCounterValue(PerformanceCounterValue counterValue, ICounterProvider counterProvider);
    public abstract virtual string get_ViolationMessage();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.LoadProfileAdjustment : object {
    private string m_scenarioName;
    private float m_adjustmentFactor;
    public string ScenarioName { get; }
    public float AdjustmentFactor { get; }
    public LoadProfileAdjustment(string scenarioName, float adjustmentFactor);
    public string get_ScenarioName();
    public float get_AdjustmentFactor();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.LoadProfileChangedByPluginEventArgs : EventArgs {
    private LoadTestLoadProfile m_newLoadProfile;
    public LoadTestLoadProfile NewLoadProfile { get; }
    internal LoadProfileChangedByPluginEventArgs(LoadTestLoadProfile newLoadProfile);
    public LoadTestLoadProfile get_NewLoadProfile();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.LoadProfileModificationException : Exception {
    private string m_scenarioName;
    private string m_propertyName;
    internal string ScenarioName { get; }
    internal string PropertyName { get; }
    internal LoadProfileModificationException(string scenarioName, string propertyName);
    public LoadProfileModificationException(string message);
    public LoadProfileModificationException(string message, Exception innerException);
    protected LoadProfileModificationException(SerializationInfo info, StreamingContext context);
    internal string get_ScenarioName();
    internal string get_PropertyName();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTest : object {
    [CompilerGeneratedAttribute]
private EventHandler LoadTestStarting;
    [CompilerGeneratedAttribute]
private EventHandler LoadTestFinished;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadTestAbortedEventArgs> LoadTestAborted;
    [CompilerGeneratedAttribute]
private EventHandler LoadTestWarmupComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<HeartbeatEventArgs> Heartbeat;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestSelectedEventArgs> TestSelected;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestStartingEventArgs> TestStarting;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestFinishedEventArgs> TestFinished;
    [CompilerGeneratedAttribute]
private EventHandler`1<ThresholdExceededEventArgs> ThresholdExceeded;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadTestAbortedEventArgs> InternalLoadTestAborted;
    private bool m_started;
    private bool m_aborted;
    private string m_name;
    private LoadTestContext m_context;
    private List`1<LoadTestScenario> m_loadTestScenarioCollection;
    private LoadTestRunSettings m_runSettings;
    public string Name { get; internal set; }
    public LoadTestContext Context { get; internal set; }
    public IList`1<LoadTestScenario> Scenarios { get; }
    public LoadTestRunSettings RunSettings { get; internal set; }
    [CompilerGeneratedAttribute]
public void add_LoadTestStarting(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadTestStarting(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadTestFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadTestFinished(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_LoadTestAborted(EventHandler`1<LoadTestAbortedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LoadTestAborted(EventHandler`1<LoadTestAbortedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LoadTestWarmupComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadTestWarmupComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Heartbeat(EventHandler`1<HeartbeatEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Heartbeat(EventHandler`1<HeartbeatEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TestSelected(EventHandler`1<TestSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TestSelected(EventHandler`1<TestSelectedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TestStarting(EventHandler`1<TestStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TestStarting(EventHandler`1<TestStartingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_TestFinished(EventHandler`1<TestFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_TestFinished(EventHandler`1<TestFinishedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ThresholdExceeded(EventHandler`1<ThresholdExceededEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ThresholdExceeded(EventHandler`1<ThresholdExceededEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_InternalLoadTestAborted(EventHandler`1<LoadTestAbortedEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_InternalLoadTestAborted(EventHandler`1<LoadTestAbortedEventArgs> value);
    internal void set_Name(string value);
    public string get_Name();
    internal void set_Context(LoadTestContext value);
    public LoadTestContext get_Context();
    public IList`1<LoadTestScenario> get_Scenarios();
    internal void set_RunSettings(LoadTestRunSettings value);
    public LoadTestRunSettings get_RunSettings();
    public void Abort();
    public void Abort(Exception exception);
    internal void FireLoadTestStarting();
    internal void FireLoadTestFinished();
    internal void FireLoadTestWarmupComplete();
    internal void FireHeartbeat(bool isWarmupComplete, int elapsedSeconds);
    internal void FireTestSelected(TestSelectedEventArgs testSelectedEventArgs);
    internal void FireTestStarting(TestStartingEventArgs testStartingEventArgs);
    internal void FireTestFinished(TestFinishedEventArgs testFinishedEventArgs);
    internal void FireThresholdExceeded(ThresholdExceededEventArgs thresholdExceededEventArgs);
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestAbortedEventArgs : EventArgs {
    private Exception m_exception;
    public Exception Exception { get; }
    internal LoadTestAbortedEventArgs(Exception exception);
    public Exception get_Exception();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestConstantLoadProfile : LoadTestLoadProfile {
    private int m_userCount;
    internal LoadTestLoadPattern Pattern { get; }
    public int UserCount { get; public set; }
    public int MaxUserCount { get; public set; }
    public int MinUserCount { get; public set; }
    internal virtual LoadTestLoadPattern get_Pattern();
    public int get_UserCount();
    public void set_UserCount(int value);
    public virtual int get_MaxUserCount();
    public virtual void set_MaxUserCount(int value);
    public virtual int get_MinUserCount();
    public virtual void set_MinUserCount(int value);
    public virtual int GetLoad(int elapsedSeconds);
    public virtual void Validate();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestContext : object {
    private static int InitialRunId;
    private Dictionary`2<string, object> m_dictionary;
    private bool m_isLocalRun;
    private string m_controllerName;
    private string m_agentName;
    private int m_agentCount;
    private int m_agentId;
    private int m_loadTestRunId;
    public bool IsLocalRun { get; internal set; }
    public int LoadTestRunId { get; internal set; }
    public string ControllerName { get; internal set; }
    public string AgentName { get; internal set; }
    public int AgentCount { get; internal set; }
    public int AgentId { get; internal set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal void set_IsLocalRun(bool value);
    public bool get_IsLocalRun();
    internal void set_LoadTestRunId(int value);
    public int get_LoadTestRunId();
    internal void set_ControllerName(string value);
    public string get_ControllerName();
    internal void set_AgentName(string value);
    public string get_AgentName();
    internal void set_AgentCount(int value);
    public int get_AgentCount();
    internal void set_AgentId(int value);
    public int get_AgentId();
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestGoalBasedLoadProfile : LoadTestLoadProfile {
    private int m_initialUserCount;
    private bool m_minUserCountSet;
    private bool m_maxUserCountSet;
    private int m_maxUserCountIncrease;
    private int m_maxUserCountDecrease;
    private string m_counterPath;
    private string m_machineName;
    private string m_categoryName;
    private string m_counterName;
    private string m_instanceName;
    private float m_minTargetValue;
    private float m_maxTargetValue;
    private bool m_higherValuesBetter;
    private bool m_stopAdjustingAtGoal;
    private bool m_currentUserCountSet;
    private int m_currentUserCount;
    private bool m_counterInstanceIdSet;
    private int m_counterInstanceId;
    private int m_consecutiveSamplesInRange;
    private bool m_stoppedAdjusting;
    public int InitialUserCount { get; public set; }
    public int MaxUserCountIncrease { get; public set; }
    public int MaxUserCountDecrease { get; public set; }
    public string CounterPath { get; public set; }
    public string MachineName { get; public set; }
    public string CategoryName { get; public set; }
    public string CounterName { get; public set; }
    public string InstanceName { get; public set; }
    public float MinTargetValue { get; public set; }
    public float MaxTargetValue { get; public set; }
    public bool HigherValuesBetter { get; public set; }
    public bool StopAdjustingAtGoal { get; public set; }
    internal float TargetValue { get; }
    internal int CounterInstanceId { get; internal set; }
    internal int CurrentUserCount { get; internal set; }
    internal int ConsecutiveSamplesInRange { get; internal set; }
    internal bool StoppedAdjusting { get; internal set; }
    internal LoadTestLoadPattern Pattern { get; }
    public int MinUserCount { get; public set; }
    public int MaxUserCount { get; public set; }
    public int get_InitialUserCount();
    public void set_InitialUserCount(int value);
    public int get_MaxUserCountIncrease();
    public void set_MaxUserCountIncrease(int value);
    public int get_MaxUserCountDecrease();
    public void set_MaxUserCountDecrease(int value);
    public string get_CounterPath();
    public void set_CounterPath(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CounterName();
    public void set_CounterName(string value);
    public string get_InstanceName();
    public void set_InstanceName(string value);
    public float get_MinTargetValue();
    public void set_MinTargetValue(float value);
    public float get_MaxTargetValue();
    public void set_MaxTargetValue(float value);
    public bool get_HigherValuesBetter();
    public void set_HigherValuesBetter(bool value);
    public bool get_StopAdjustingAtGoal();
    public void set_StopAdjustingAtGoal(bool value);
    internal float get_TargetValue();
    internal int get_CounterInstanceId();
    internal void set_CounterInstanceId(int value);
    internal int get_CurrentUserCount();
    internal void set_CurrentUserCount(int value);
    internal int get_ConsecutiveSamplesInRange();
    internal void set_ConsecutiveSamplesInRange(int value);
    internal bool get_StoppedAdjusting();
    internal void set_StoppedAdjusting(bool value);
    internal void AdjustLoad(LoadTestScenario scenario, float adjustmentFactor, int adjustmentBasis);
    internal virtual LoadTestLoadPattern get_Pattern();
    public virtual int get_MinUserCount();
    public virtual void set_MinUserCount(int value);
    public virtual int get_MaxUserCount();
    public virtual void set_MaxUserCount(int value);
    public virtual int GetLoad(int elapsed);
    public virtual void Validate();
    public virtual void RestoreUserCountAfterRestart(int userCountToRestore);
}
internal enum Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestLoadPattern : Enum {
    public int value__;
    public static LoadTestLoadPattern Constant;
    public static LoadTestLoadPattern Step;
    public static LoadTestLoadPattern GoalBased;
    public static LoadTestLoadPattern Custom;
}
public abstract class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestLoadProfile : object {
    private string m_scenarioName;
    private int m_maxUserCount;
    private int m_minUserCount;
    public int MaxUserCount { get; public set; }
    public int MinUserCount { get; public set; }
    public string ScenarioName { get; internal set; }
    internal LoadTestLoadPattern Pattern { get; }
    public virtual int get_MaxUserCount();
    public virtual void set_MaxUserCount(int value);
    public virtual int get_MinUserCount();
    public virtual void set_MinUserCount(int value);
    public abstract virtual int GetLoad(int elapsedSeconds);
    public abstract virtual void Validate();
    public virtual LoadTestLoadProfile Copy();
    public virtual void RestoreUserCountAfterRestart(int userCountToRestore);
    public void CheckIfProfileCanBeModified(string propertyName);
    public string get_ScenarioName();
    internal void set_ScenarioName(string value);
    internal virtual LoadTestLoadPattern get_Pattern();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestPluginOperation : object {
    private Action _eventHandlerCallback;
    private int _timeoutInMiliSeconds;
    private string _pluginEventHandlerName;
    public LoadTestPluginOperation(string eventHandlerName, Action methodCallBack, int timeoutInMs);
    public void Invoke();
    [CompilerGeneratedAttribute]
private void <Invoke>b__1_0();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestPluginReference : WebTestRuleBase {
    private LoadTestPluginReference(LoadTestPluginReference copy);
    public ILoadTestPlugin CreateInstance();
    public virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestPluginReferenceCollection : WebTestBaseCollection`1<LoadTestPluginReference> {
}
internal enum Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestProfileValidationError : Enum {
    public int value__;
    public static LoadTestProfileValidationError InitialUserCountExceedsMax;
    public static LoadTestProfileValidationError InitialUserCountLessThanMin;
    public static LoadTestProfileValidationError InitialUserCountNegative;
    public static LoadTestProfileValidationError LoadProfileMinTargetExceedsMax;
    public static LoadTestProfileValidationError LoadProfileMinUsersExceedsMax;
    public static LoadTestProfileValidationError StepDurationIsZero;
    public static LoadTestProfileValidationError StepRampTimeExceedsDuration;
    public static LoadTestProfileValidationError StepRampTimeNegative;
    public static LoadTestProfileValidationError StepUserCountNegative;
    public static LoadTestProfileValidationError UserCountNegative;
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestRunIdNotSetException : Exception {
    public LoadTestRunIdNotSetException(string message);
    public LoadTestRunIdNotSetException(string message, Exception innerException);
    protected LoadTestRunIdNotSetException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestRunSettings : object {
    private string m_name;
    private string m_description;
    private int m_warmupTime;
    private int m_runDuration;
    public string Name { get; }
    public string Description { get; }
    public int WarmupTime { get; }
    public int RunDuration { get; }
    internal LoadTestRunSettings(string name, string description, int warmupTime, int runDuration);
    public string get_Name();
    public string get_Description();
    public int get_WarmupTime();
    public int get_RunDuration();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestScenario : object {
    [CompilerGeneratedAttribute]
private EventHandler LoadChanged;
    [CompilerGeneratedAttribute]
private EventHandler`1<LoadProfileChangedByPluginEventArgs> LoadProfileChangedByPlugin;
    [CompilerGeneratedAttribute]
private EventHandler`1<DelayBetweenIterationsChangedByPluginEventArgs> DelayBetweenIterationsChangedByPlugin;
    private string m_name;
    private IEnumerable`1<string> m_testNames;
    private LoadTestLoadProfile m_loadProfile;
    private int m_currentLoad;
    private bool m_loadProfileDisabled;
    private int m_delayBetweenIterations;
    private object m_userLoadLock;
    public string Name { get; }
    public LoadTestLoadProfile LoadProfile { get; public set; }
    public int DelayBetweenIterations { get; public set; }
    public int CurrentLoad { get; public set; }
    public IEnumerable`1<string> TestNames { get; }
    internal bool LoadProfileDisabled { get; }
    internal object UserLoadLock { get; }
    internal LoadTestScenario(string name, IEnumerable`1<string> testNames, LoadTestLoadProfile loadProfile, int delayBetweenIterations);
    [CompilerGeneratedAttribute]
public void add_LoadChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_LoadChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void add_LoadProfileChangedByPlugin(EventHandler`1<LoadProfileChangedByPluginEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_LoadProfileChangedByPlugin(EventHandler`1<LoadProfileChangedByPluginEventArgs> value);
    [CompilerGeneratedAttribute]
internal void add_DelayBetweenIterationsChangedByPlugin(EventHandler`1<DelayBetweenIterationsChangedByPluginEventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_DelayBetweenIterationsChangedByPlugin(EventHandler`1<DelayBetweenIterationsChangedByPluginEventArgs> value);
    public string get_Name();
    public void set_LoadProfile(LoadTestLoadProfile value);
    public LoadTestLoadProfile get_LoadProfile();
    public void set_DelayBetweenIterations(int value);
    public int get_DelayBetweenIterations();
    internal void ChangeLoadProfile(LoadTestLoadProfile newLoadProfile);
    public void set_CurrentLoad(int value);
    public int get_CurrentLoad();
    public IEnumerable`1<string> get_TestNames();
    internal void UpdateLoad(int newLoad);
    internal bool get_LoadProfileDisabled();
    internal object get_UserLoadLock();
}
internal enum Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestScenarioError : Enum {
    public int value__;
    public static LoadTestScenarioError CurrentLoadNegative;
    public static LoadTestScenarioError DelayBetweenIterationsNegative;
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestStepLoadProfile : LoadTestLoadProfile {
    private int m_initialUserCount;
    private int m_stepUserCount;
    private int m_stepDuration;
    private int m_stepRampTime;
    private bool m_maxUserCountSet;
    public int InitialUserCount { get; public set; }
    public int StepUserCount { get; public set; }
    public int StepDuration { get; public set; }
    public int StepRampTime { get; public set; }
    internal LoadTestLoadPattern Pattern { get; }
    public int MaxUserCount { get; public set; }
    public int get_InitialUserCount();
    public void set_InitialUserCount(int value);
    public int get_StepUserCount();
    public void set_StepUserCount(int value);
    public int get_StepDuration();
    public void set_StepDuration(int value);
    public int get_StepRampTime();
    public void set_StepRampTime(int value);
    internal virtual LoadTestLoadPattern get_Pattern();
    public virtual int get_MaxUserCount();
    public virtual void set_MaxUserCount(int value);
    public virtual int GetLoad(int elapsed);
    public virtual void Validate();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestUserContext : MarshalByRefObject {
    public static string LoadTestUserContextKey;
    private Dictionary`2<string, object> m_dictionary;
    private string m_scenarioName;
    private int m_userId;
    private bool m_isOneTimeUser;
    private int m_completedTestCount;
    private bool m_areBodyTestsComplete;
    private TimeSpan m_lastTestDuration;
    private bool m_initializeTestSelected;
    private bool m_terminateTestSelected;
    private IDictionary`2<string, object> m_initializeTestContext;
    private object m_testTypeUserContext;
    public string ScenarioName { get; }
    public int UserId { get; }
    public bool IsNewUser { get; }
    public int CompletedTestCount { get; internal set; }
    internal bool IsOneTimeUser { get; }
    internal bool AreBodyTestsComplete { get; internal set; }
    internal object TestTypeUserContext { get; internal set; }
    internal bool InitializeTestSelected { get; internal set; }
    internal bool TerminateTestSelected { get; internal set; }
    internal TimeSpan LastTestDuration { get; internal set; }
    public IDictionary`2<string, object> InitializeTestContext { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal LoadTestUserContext(string scenarioName, int userId, bool isOneTimeUser);
    public string get_ScenarioName();
    public int get_UserId();
    public bool get_IsNewUser();
    public int get_CompletedTestCount();
    internal void set_CompletedTestCount(int value);
    internal bool get_IsOneTimeUser();
    internal void set_AreBodyTestsComplete(bool value);
    internal bool get_AreBodyTestsComplete();
    internal void set_TestTypeUserContext(object value);
    internal object get_TestTypeUserContext();
    internal void set_InitializeTestSelected(bool value);
    internal bool get_InitializeTestSelected();
    internal void set_TerminateTestSelected(bool value);
    internal bool get_TerminateTestSelected();
    internal void set_LastTestDuration(TimeSpan value);
    internal TimeSpan get_LastTestDuration();
    public IDictionary`2<string, object> get_InitializeTestContext();
    internal void Initialize();
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestWarmupLoadProfile : LoadTestLoadProfile {
    private int m_warmupDuration;
    public int WarmupDuration { get; public set; }
    internal LoadTestLoadPattern Pattern { get; }
    public void set_WarmupDuration(int value);
    public int get_WarmupDuration();
    internal virtual LoadTestLoadPattern get_Pattern();
    public virtual int GetLoad(int elapsed);
    public virtual void Validate();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.PerformanceCounterValue : object {
    private string m_machineName;
    private string m_categoryName;
    private string m_counterName;
    private string m_instanceName;
    private float m_value;
    public string MachineName { get; }
    public string CategoryName { get; }
    public string CounterName { get; }
    public string InstanceName { get; }
    public float Value { get; }
    public PerformanceCounterValue(string machineName, string categoryName, string counterName, string instanceName, float value);
    public string get_MachineName();
    public string get_CategoryName();
    public string get_CounterName();
    public string get_InstanceName();
    public float get_Value();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.TestFinishedEventArgs : EventArgs {
    private string m_scenarioName;
    private string m_testName;
    private TestIterationResult m_result;
    private bool m_isInitializeTest;
    private bool m_isTerminateTest;
    private LoadTestUserContext m_userContext;
    public string ScenarioName { get; }
    public string TestName { get; }
    public TestIterationResult Result { get; }
    public bool IsInitializeTest { get; }
    public bool IsTerminateTest { get; }
    public LoadTestUserContext UserContext { get; }
    internal TestFinishedEventArgs(string scenarioName, string testName, TestIterationResult result, bool isInitializeTest, bool isTerminateTest, LoadTestUserContext userContext);
    public string get_ScenarioName();
    public string get_TestName();
    public TestIterationResult get_Result();
    public bool get_IsInitializeTest();
    public bool get_IsTerminateTest();
    public LoadTestUserContext get_UserContext();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.TestIterationResult : object {
    private bool m_passed;
    private DateTime m_startTime;
    private DateTime m_endTime;
    private TimeSpan m_duration;
    private string m_errorMessage;
    private string m_errorStackTrace;
    public bool Passed { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public TimeSpan Duration { get; }
    public string ErrorMessage { get; }
    public string ErrorStackTrace { get; }
    internal TestIterationResult(bool passed, DateTime startTime, DateTime endTime, TimeSpan duration, string errorMessage, string errorStackTrace);
    public bool get_Passed();
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public TimeSpan get_Duration();
    public string get_ErrorMessage();
    public string get_ErrorStackTrace();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.TestSelectedEventArgs : EventArgs {
    private string m_scenarioName;
    private string m_testName;
    private bool m_isInitializeTest;
    private bool m_isTerminateTest;
    private LoadTestUserContext m_userContext;
    public string ScenarioName { get; }
    public string TestName { get; public set; }
    public bool IsInitializeTest { get; }
    public bool IsTerminateTest { get; }
    public LoadTestUserContext UserContext { get; }
    internal TestSelectedEventArgs(string scenarioName, string testName, bool isInitializeTest, bool isTerminateTest, LoadTestUserContext userContext);
    public string get_ScenarioName();
    public void set_TestName(string value);
    public string get_TestName();
    public bool get_IsInitializeTest();
    public bool get_IsTerminateTest();
    public LoadTestUserContext get_UserContext();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.TestStartingEventArgs : EventArgs {
    private string m_scenarioName;
    private string m_testName;
    private int m_testIterationNumber;
    private bool m_isInitializeTest;
    private bool m_isTerminateTest;
    private LoadTestUserContext m_userContext;
    private Dictionary`2<string, object> m_testContextProperties;
    public string ScenarioName { get; }
    public string TestName { get; }
    public int TestIterationNumber { get; }
    public bool IsInitializeTest { get; }
    public bool IsTerminateTest { get; }
    public LoadTestUserContext UserContext { get; }
    public IDictionary`2<string, object> TestContextProperties { get; }
    internal TestStartingEventArgs(string scenarioName, string testName, int testIterationNumber, bool isInitializeTest, bool isTerminateTest, LoadTestUserContext userContext);
    public string get_ScenarioName();
    public string get_TestName();
    public int get_TestIterationNumber();
    public bool get_IsInitializeTest();
    public bool get_IsTerminateTest();
    public LoadTestUserContext get_UserContext();
    public IDictionary`2<string, object> get_TestContextProperties();
}
public class Microsoft.VisualStudio.TestTools.LoadTesting.ThresholdExceededEventArgs : EventArgs {
    private PerformanceCounterValue m_counterValue;
    private ThresholdRuleResult m_thresholdResult;
    public PerformanceCounterValue CounterValue { get; }
    public ThresholdRuleResult ThresholdResult { get; }
    internal ThresholdExceededEventArgs(PerformanceCounterValue counterValue, ThresholdRuleResult thresholdResult);
    public PerformanceCounterValue get_CounterValue();
    public ThresholdRuleResult get_ThresholdResult();
}
public enum Microsoft.VisualStudio.TestTools.LoadTesting.ThresholdRuleResult : Enum {
    public int value__;
    public static ThresholdRuleResult OK;
    public static ThresholdRuleResult Warning;
    public static ThresholdRuleResult Critical;
}
