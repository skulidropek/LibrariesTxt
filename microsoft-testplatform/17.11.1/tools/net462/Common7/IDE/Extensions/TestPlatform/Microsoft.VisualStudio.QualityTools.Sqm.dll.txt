[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Internal.VSRegKeyNames : object {
    internal static string RGS_VAR_PROGID;
    internal static string RGS_VAR_PROGID_APPIDNAME;
    internal static string RGS_VAR_PROGID_VERSION;
    internal static string RGS_VAR_DDE_NAME;
    internal static string REGKEY_VISUALSTUDIOROOT_NOVERSION;
    internal static string REGKEY_VISUALSTUDIOROOT;
}
internal static class Microsoft.VisualStudio.TestTools.Diagnostics.CommonSqmData : object {
    private static string WmiSystemNamespace;
    private static string WmiSystemOperatingSystemQuery;
    private static string WmiSystemOperatingSystemVisibleMemorySize;
    private static string VsRegistryKey64Bit;
    private static string VsRegistryKey32Bit;
    private static string VsUltimateKeyString;
    private static string VsTestProfessionalKeyString;
    private static string VsPremium;
    private static string c_MSDomainName;
    private static string c_dnsDomainNameEnvVariableName;
    private static string c_userNameEnvVariableName;
    private static string c_userDomainNameEnvVariableName;
    private static string c_computerNameEnvVariableName;
    private static string c_branchNameKeyName;
    private static string c_sqmPolicyRegistryKey;
    private static string c_msftInternal;
    private static List`1<string> s_allowedDomainNames;
    private static List`1<string> s_allowedFullDomainNames;
    private static CommonSqmData();
    internal static void LogCommonData();
    private static void LogPhysicalMemory();
    private static void LogOSInfo();
    private static void LogDisplayInfo();
    private static void LogIEInfo();
    private static void LogVsInfo();
    private static void LogVsSku();
    private static UInt32 GetMinorVersion();
    private static UInt32 GetVersionNumber();
    private static void LogUserData();
    private static void LogMachineInfo();
    private static bool IsInternalUser();
    private static bool CanCollectUserPII();
    private static bool IsMSFTInternal();
    private static bool IsAllowedDomainName();
    private static bool IsAllowedFullDomainName();
    private static bool IsAllowedDomainNameImpl(string envVariableName, List`1<string> allowedDomainNames);
    private static OSInfo GetStartupOSInfo(OSVERSIONINFO osvi);
}
internal interface Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm {
    public bool IsSqmLoggingEnabled { get; public set; }
    public bool IsSqmSettingFound { get; }
    public abstract virtual UInt32 GetFlags();
    public abstract virtual void SetFlags(UInt32 flags);
    public abstract virtual void ClearFlags(UInt32 flags);
    public abstract virtual Nullable`1<bool> GetGroupPolicySetting();
    public abstract virtual bool get_IsSqmLoggingEnabled();
    public abstract virtual void set_IsSqmLoggingEnabled(bool value);
    public abstract virtual bool get_IsSqmSettingFound();
}
internal static class Microsoft.VisualStudio.TestTools.Diagnostics.NativeMethods : object {
    internal static int PROCESSOR_ARCHITECTURE_INTEL;
    internal static int PROCESSOR_ARCHITECTURE_AMD64;
    internal static int VER_SUITE_WH_SERVER;
    internal static int VER_NT_WORKSTATION;
    internal static int VER_PLATFORM_WIN32_WINDOWS;
    internal static void GetNativeSystemInfo(SYSTEM_INFO& lpSystemInfo);
    internal static UInt32 GetVersionEx(OSVERSIONINFO& lpVersionInfo);
    internal static int GetSystemMetrics(SystemMetric smIndex);
}
internal class Microsoft.VisualStudio.TestTools.Diagnostics.NonVSSqmClient : object {
    private SqmWrapper wrapper;
    private Timer timer;
    private bool isProcessingUpload;
    private object syncLock;
    private bool m_sqmSettingFound;
    private static string VsRegRoot;
    private static string VsHckuGroupPolicyKey;
    private static string SQMGroupPolicyInternalDecision;
    private static string SQMUserPolicyInternalDecision;
    private static UInt32 camanoAppId;
    private bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.IsSqmLoggingEnabled { get; private set; }
    private bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.IsSqmSettingFound { get; }
    public NonVSSqmClient(UInt32 appid);
    public NonVSSqmClient(string sqmLoggingPath);
    public NonVSSqmClient(string sqmLoggingPath, UInt32 appId);
    public NonVSSqmClient(string sqmLoggingPath, UInt32 appId, UInt32 sessionFileUploadTimeout);
    private static NonVSSqmClient();
    private static string GetDefaultSqmLogDirectory();
    private sealed virtual override UInt32 Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.GetFlags();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.SetFlags(UInt32 flags);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.ClearFlags(UInt32 flags);
    private sealed virtual override Nullable`1<bool> Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.GetGroupPolicySetting();
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.get_IsSqmLoggingEnabled();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.set_IsSqmLoggingEnabled(bool value);
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.get_IsSqmSettingFound();
    public void SetApplicationNameDataPoint(UInt32 applicationNameHashValue);
    private bool IsSqmEnabled();
    internal static bool IsSqmEnabled(Boolean& sqmSettingFound);
    internal static void ChangeUserOptinOption(bool sqmEnabled);
    private static Nullable`1<bool> IsUserOptin(string key, string name, Boolean& sqmSettingFound);
    private static void CreateKey(RegistryKey key, string subKeys);
    private void TryUploadSqmFiles(object state);
    private void DisposeTimer();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.VisualStudio.TestTools.Diagnostics.SafeSqmSession : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.VisualStudio.TestTools.Diagnostics.SqmTrace : object {
    private static IVsttSqm vsttSqm;
    private static object syncLock;
    internal static bool isDisposing;
    internal static bool IsSqmEnabled { get; }
    private static SqmTrace();
    public static void Initialize(IVsttSqm vsttSqmImplementation);
    public static void Cleanup();
    public static UInt32 GetFlags();
    public static void SetFlags(UInt32 flags);
    public static void ClearFlags(UInt32 flags);
    internal static bool IsSqmSettingEnabled();
    internal static bool get_IsSqmEnabled();
}
internal class Microsoft.VisualStudio.TestTools.Diagnostics.SqmWrapper : object {
    private SafeSqmSession hSession;
    private UInt32 appId;
    private Nullable`1<bool> isSqmEnabled;
    private bool isSessionInitialized;
    private bool isFileUploading;
    private UInt32 sessionFileUploadTimeout;
    private string processName;
    private string sessionName;
    private string sqmErrorFileName;
    private string sqmFileName;
    private string sqmFileLocation;
    private object syncLock;
    private static UInt32 SQM_SESSION_CREATE_NEW;
    private static UInt32 SQM_OVERWRITE_OLDEST_FILE;
    private static UInt32 SQM_RELEASE_SESSION;
    private static UInt32 SQM_UPLOAD_ALL_FILES_IGNORE_OPTIN;
    private static UInt32 SqmAllFilesUploadTimeout;
    internal static UInt32 SqmThisSessionFileUploadTimeout;
    private static UInt32 SQM_WAITFORUPLOAD_ALLFILESINQUEUE;
    private static string UploadUrl;
    public string ProcessName { get; }
    internal bool IsSqmEnabled { get; internal set; }
    internal bool IsSessionInitialized { get; private set; }
    public SqmWrapper(string sqmLoggingPath, UInt32 appId, bool sqmEnabled);
    public SqmWrapper(string sqmLoggingPath, UInt32 appId, bool sqmEnabled, UInt32 sessionFileUploadTimeout);
    public string get_ProcessName();
    internal void TerminateSession();
    internal void UploadSqmFileOfCurrentSession();
    internal int UploadAllSqmFiles();
    private int UploadSqmFileWrapper(string fileName, UInt32 timeout);
    internal void SetFlags(UInt32 flag);
    internal UInt32 GetFlags();
    internal void ClearFlags(UInt32 flags);
    private void LogSqmError(string message);
    internal bool get_IsSqmEnabled();
    internal void set_IsSqmEnabled(bool value);
    internal bool get_IsSessionInitialized();
    private void set_IsSessionInitialized(bool value);
    internal void InitializeSession();
    internal void SetApplicationNameDataPoint(UInt32 applicationNameHashValue);
    private void TerminateSessionOnError();
}
internal class Microsoft.VisualStudio.TestTools.Diagnostics.VSSqmClient : object {
    private IVsttSqm vsttSqm;
    private Control threadSafetyControl;
    private bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.IsSqmLoggingEnabled { get; private set; }
    private bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.IsSqmSettingFound { get; }
    private sealed virtual override UInt32 Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.GetFlags();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.SetFlags(UInt32 flags);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.ClearFlags(UInt32 flags);
    private sealed virtual override Nullable`1<bool> Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.GetGroupPolicySetting();
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.get_IsSqmLoggingEnabled();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.set_IsSqmLoggingEnabled(bool value);
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Diagnostics.IVsttSqm.get_IsSqmSettingFound();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal enum Microsoft.VisualStudio.TestTools.Diagnostics.VsttSqmDataPoint : Enum {
    public UInt32 value__;
    public static VsttSqmDataPoint Undefined;
    public static VsttSqmDataPoint RnPPlugins;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
