[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[GuidAttribute("6380BCFF-41D3-4B2E-8B2E-BF8A6810C848")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Interop.IEnumSetupInstances {
    public abstract virtual void Next(int celt, ISetupInstance& rgelt, Int32& pceltFetched);
    public abstract virtual void Skip(int celt);
    public abstract virtual void Reset();
    public abstract virtual IEnumSetupInstances Clone();
}
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Interop.ISetupConfiguration {
    public abstract virtual IEnumSetupInstances EnumInstances();
    public abstract virtual ISetupInstance GetInstanceForCurrentProcess();
    public abstract virtual ISetupInstance GetInstanceForPath(string wzPath);
}
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.Setup.Interop.ISetupInstance {
    public abstract virtual string GetInstanceId();
    public abstract virtual FILETIME GetInstallDate();
    public abstract virtual string GetInstallationName();
    public abstract virtual string GetInstallationPath();
    public abstract virtual string GetInstallationVersion();
    public abstract virtual string GetDisplayName(int lcid);
    public abstract virtual string GetDescription(int lcid);
    public abstract virtual string ResolvePath(string relativePath);
}
[GuidAttribute("177F0C4A-1CD3-4DE7-A32C-71DBBB9FA36D")]
public class Microsoft.VisualStudio.Setup.Interop.SetupConfiguration : object {
}
internal class Microsoft.VisualStudio.TestTools.RunMessageListening.LocalRunMessageListener : MarshalByRefObject {
    private static int TimeoutPeriod;
    private Guid m_testRunId;
    private Tmi m_tmi;
    private Timer m_timer;
    private bool m_isTimeoutEnabled;
    private bool m_isDisconnected;
    private object m_lock;
    private object m_disconnectLock;
    private BackgroundTestMessageProcessor`1<TestMessage> m_testMessageReceiver;
    private Dictionary`2<Guid, TestRun> m_runCache;
    private CultureInfoHolder m_cultureInfoHolder;
    private bool m_traceVerbose;
    public LocalRunMessageListener(Tmi tmi, bool isHeartbeatTimerEnabled);
    private static LocalRunMessageListener();
    public void Initialize(Guid testRunId);
    private void OnProcessReceivedTestMessage(TestMessage testMessage, IQueuedJobs`1<TestMessage> queuedJobs);
    private void ProcessReceivedTestMessage(TestMessage testMessage);
    public void Disconnect();
    public void StartTimer();
    private void RestartTimer();
    private void StopTimer();
    private void OnTimer(object state);
    public sealed virtual void ControllerEvent(TestMessage message);
    public virtual object InitializeLifetimeService();
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.ActiveRunConfigurationEventArgs : EventArgs {
    private TestRunConfigurationId m_previous;
    private TestRunConfigurationId m_current;
    public TestRunConfigurationId Previous { get; }
    public TestRunConfigurationId Current { get; }
    internal ActiveRunConfigurationEventArgs(TestRunConfigurationId previous, TestRunConfigurationId current);
    public TestRunConfigurationId get_Previous();
    public TestRunConfigurationId get_Current();
}
public class Microsoft.VisualStudio.TestTools.TestManagement.AggregationCycleDetectedException : AggregationException {
    private Link m_link;
    public Link Link { get; }
    internal AggregationCycleDetectedException(Link link);
    public AggregationCycleDetectedException(string msg);
    public AggregationCycleDetectedException(string msg, Exception inner);
    private AggregationCycleDetectedException(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private static string GenerateMessage(Link link);
    public Link get_Link();
}
public class Microsoft.VisualStudio.TestTools.TestManagement.AggregationException : InvalidTestObjectException {
    public AggregationException(string msg);
    public AggregationException(string msg, Exception inner);
    protected AggregationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.AssemblyKeyExtractor : object {
    private AppDomain m_appDomain;
    private AssemblyLoader m_assemblyLoader;
    private AssemblyLoader Loader { get; }
    private AssemblyLoader get_Loader();
    public sealed virtual void Dispose();
    public Byte[] GetPublicKey(string assemblyPath);
    public static Byte[] ExtractPublicKeyFromKeyFile(string keyFile, Boolean& isPublicKey);
    public static bool PublicKeysAreEqual(Byte[] publicKey1, Byte[] publicKey2);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.CategoryCycleDetectedException : InvalidTestObjectException {
    private TestListCategory m_category;
    internal TestListCategory Category { get; }
    internal CategoryCycleDetectedException(TestListCategory category);
    public CategoryCycleDetectedException(string msg);
    public CategoryCycleDetectedException(string msg, Exception inner);
    private CategoryCycleDetectedException(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private static string GenerateMessage(TestListCategory category);
    internal TestListCategory get_Category();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.CategorySaveAttemptEventArgs : EventArgs {
    private Object[] categories;
    private string location;
    public Object[] Categories { get; }
    public string Location { get; }
    internal CategorySaveAttemptEventArgs(string location_, Object[] categories_);
    public Object[] get_Categories();
    public string get_Location();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.CategoryUpdateAttemptEventArgs : EventArgs {
    private TestListCategory category;
    public TestListCategory Category { get; }
    internal CategoryUpdateAttemptEventArgs(TestListCategory category_);
    public TestListCategory get_Category();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.CodeCoverageInstrumenter : object {
    private static string CodeCoverageItemPrefix;
    private static string BinaryInstrumentationTimePrefix;
    private static string BinaryCreationTimePrefix;
    private static string m_restoreBatchFileFormat;
    private static string m_restoreFormat;
    private static string m_coveragePlugin;
    private static string m_originalFileExtension;
    private static string m_suppressWarningsFlag;
    private static int m_strongNameWarning;
    private static string NoCodeWarning;
    private static string m_vsInstrPath;
    private static string m_vsIDEPath;
    private static object m_lock;
    private Tmi m_tmi;
    private Guid m_runId;
    public static long MAX_KEYFILE_SIZE;
    public static string CodeCoveragePlugin { get; }
    public static string BackupDirectoryPrefix { get; }
    private string VSIDEPath { get; }
    private string VsInstrPath { get; }
    public CodeCoverageInstrumenter(Tmi tmi);
    private static CodeCoverageInstrumenter();
    public static string get_CodeCoveragePlugin();
    public static string get_BackupDirectoryPrefix();
    public bool Instrument(List`1<CodeCoverageItem> items, Guid runId, bool inPlace, TestRunConfiguration runConfig);
    public void RestoreInPlaceInstrumented(List`1<CodeCoverageItem> items, Guid runId);
    private string get_VSIDEPath();
    private string get_VsInstrPath();
    internal static string GetBinaryInstrumentationTimeKey(CodeCoverageItem item);
    internal static string GetBinaryCreationTimeKey(CodeCoverageItem item);
    internal static bool AreFileTimesEqual(DateTime fileTime1, DateTime fileTime2);
    private string GetBackupSubDirectory();
    private void RestoreInPlaceInstrumentedDirectory(string directory, List`1<CodeCoverageItem> binaries);
    private bool RestoreInPlaceInstrumentedBinary(CodeCoverageItem binary);
    private void InvalidateVSIdePathForError();
    private void InitVSIdeInstallationDirectory();
    private bool GetVsInstrInRascalPro(TestConfigKey root, string fileName);
    private void LocateVSInstrumenter();
    private static string GetSelfLocation();
    private bool InstrumentBinaries(List`1<CodeCoverageItem> items, bool inPlace, Guid runId, TestRunConfiguration runConfig);
    private void ClusterByDirectory(List`1<T> files, Dictionary`2<string, List`1<T>> directories, PathExtractor`1<T> pathExtractor);
    private void BackupOriginalBinaries(List`1<string> originalBinaries);
    private static string GetOriginalName(string fileName);
    private void BackupDirectory(string directory, List`1<string> files);
    private string GetRestoreBatchFileName();
    private void CreateRestoreBatchFile(string directory, List`1<string> filesToRestore);
    private bool ResignBinary(CodeCoverageItem binary);
    private bool InstrumentBinary(CodeCoverageItem binary, List`1<string> originalBinaries, List`1<string> originalPdbs, bool inPlace, Guid runId);
    private static string SuppressWarningsParameter(CodeCoverageItem binary);
    private bool ProcessInstrumentationOutput(CodeCoverageItem binary, List`1<string> originalBinaries, List`1<string> originalPdbs, int exitCode, string errorOutput, bool inPlace);
    private void UpdateInPlaceInstrumentedBinary(CodeCoverageItem binary);
    private void ClearOriginalFiles(List`1<string> files);
    private static string GetInstrumentedBackUpFileName(string binaryPath);
    private bool AddOriginalFiles(CodeCoverageItem binary, List`1<string> origianlBinaries, List`1<string> originalPdbs, bool inPlace);
    private void ReportError(string strError);
    private void ReportExceptionInFileDelete(Exception ex, string filePath);
    private void ReportException(Exception e);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.Condition : object {
    private string m_colName;
    private Type m_colType;
    private Operation m_operation;
    private object m_val;
    private Object[] m_valArray;
    public string Sql { get; }
    public Condition(ViewablePropertyDescriptor prop, Operation op, object comparisonValue);
    public Condition(ViewablePropertyDescriptor prop, Operation op);
    public Condition(ViewablePropertyDescriptor prop, Operation op, Object[] values);
    public Condition(string columnName, Operation op, Guid id);
    public Condition(string columnName, Operation op);
    public Condition(string columnName, Operation op, Guid[] ids);
    public string get_Sql();
    private string ValueAsString(object obj);
    private static string OpToString(Operation op);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal abstract class Microsoft.VisualStudio.TestTools.TestManagement.ControllerProxy : object {
    internal Tmi m_tmi;
    internal string m_name;
    [CompilerGeneratedAttribute]
private NetworkCredential <ControllerCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BindChannelToIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChannelPortRangeBegin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChannelPortRangeEnd>k__BackingField;
    internal string Name { get; }
    internal IControllerExecution Controller { get; }
    internal NetworkCredential ControllerCredential { get; internal set; }
    internal bool BindChannelToIpAddress { get; internal set; }
    internal int ChannelPortRangeBegin { get; internal set; }
    internal int ChannelPortRangeEnd { get; internal set; }
    protected ControllerProxy(Tmi tmi, string name);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool explicitDispose);
    internal string get_Name();
    internal abstract virtual IControllerExecution get_Controller();
    [CompilerGeneratedAttribute]
internal NetworkCredential get_ControllerCredential();
    [CompilerGeneratedAttribute]
internal void set_ControllerCredential(NetworkCredential value);
    [CompilerGeneratedAttribute]
internal bool get_BindChannelToIpAddress();
    [CompilerGeneratedAttribute]
internal void set_BindChannelToIpAddress(bool value);
    [CompilerGeneratedAttribute]
internal int get_ChannelPortRangeBegin();
    [CompilerGeneratedAttribute]
internal void set_ChannelPortRangeBegin(int value);
    [CompilerGeneratedAttribute]
internal int get_ChannelPortRangeEnd();
    [CompilerGeneratedAttribute]
internal void set_ChannelPortRangeEnd(int value);
    public abstract virtual void QueueTestRun(TestRun run);
    public abstract virtual string GetLoadTestRepositoryConnectString();
    protected void QueueTestRunWorker(object state);
    protected abstract virtual void UpdateFileCopyServiceFlags(FileCopyService fileCopyService);
    internal void CheckIfRunTargetedForFramework35(TestRun run);
    private void WarnIfLocalExecutionWithRemoteCollectionForFramework35(TestRun testRun);
    internal void CheckIfConnectedControllerUsedForNonTCMRun(TestRun run);
    private LocalRunMessageListener SetupRunAndListener(TestRun run, FileCopyService fileCopyService, DeploymentManager deploymentManager);
    private void ProcessQueueTestRunWorkerException(TestRun run, Exception e);
    public sealed virtual void StopTestRun(Guid runId);
    private void StopTestRunWorker(object o);
    private void ProcessStopTestRunWorkerException(Guid runId, Exception e);
    public void PauseTestRun(Guid runId);
    private void PauseTestRunWorker(object o);
    private void ProcessPauseTestRunWorkerException(Guid runId, Exception e);
    public void ResumeTestRun(Guid runId);
    private void ResumeTestRunWorker(object o);
    private void ProcessResumeTestRunWorkerException(Guid runId, Exception e);
    public void SendAgentMessage(Guid runId, Guid execId, string agentName, object obj);
    internal void Ping();
    public ControllerTestRunDescription[] GetTestRunDescriptions();
    public IExecutionRunConfiguration GetExecutionRunConfig(Guid guidTestRunId);
    public virtual void RegisterForTestRunEvents(TestRun run);
    public abstract virtual bool CheckTestRunAccess(Guid runId);
    public abstract virtual void DisconnectTestRun(Guid runId);
    public abstract virtual void DeleteTestRun(Guid runId);
    public virtual void RegisterForRunQueueEvents(IControllerQueueEvents listener);
    public virtual void DisconnectQueueListener(IControllerQueueEvents listener);
    public ControllerQueueEntry[] GetControllerQueue();
    protected internal virtual void TestRunFinished(TestRun run);
    protected internal virtual void TestRunQueued(TestRun run);
    private bool IsCodeCoverageUsingAgentDefault(TestRunConfiguration runConfig);
    private bool IsCodeCoverageUsingAgentDefault(TestRunConfiguration runConfig, AgentRuleDataCollector& coverageDataCollector);
    private void SetupCodeCoverageConfiguration(TestRunConfiguration runConfig, ControllerObject controller);
    protected void InitializeTestRun(TestRun run, bool isNewTestRun, FileCopyService& fileCopyService, DeploymentManager& deploymentManager);
    protected void SetupTestRun(TestRun run, bool isNewTestRun, FileCopyService fileCopyService, DeploymentManager deploymentManager);
    protected abstract virtual LocalRunMessageListener SetupListener(TestRun run);
    protected abstract virtual void DisconnectListener(Guid runId);
    protected virtual void InitializeController(TestRun run);
    protected virtual void OnQueueTestRunError(Guid runId, string errorMessage);
    protected virtual void OnPauseTestRunError(Guid runId);
    protected virtual void OnResumeTestRunError(Guid runId);
    protected virtual void OnStopTestRunError(Guid runId);
    protected virtual void OnTestRunOperationError(Guid runId);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.CultureInfoHolder : object {
    private CultureInfo m_currentCulture;
    private CultureInfo m_currentUiCulture;
    public void CaptureThreadCultureInfo();
    public void RestoreThreadCultureInfo();
}
public class Microsoft.VisualStudio.TestTools.TestManagement.DanglingCategoryDetectedException : InvalidTestObjectException {
    private TestListCategory m_category;
    internal TestListCategory Category { get; }
    internal DanglingCategoryDetectedException(TestListCategory category);
    public DanglingCategoryDetectedException(string msg);
    public DanglingCategoryDetectedException(string msg, Exception inner);
    private DanglingCategoryDetectedException(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private static string GenerateMessage(TestListCategory category);
    internal TestListCategory get_Category();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.DeploymentCoverageFile : object {
    private DeploymentCoverageFileType m_type;
    private string m_path;
    private string m_destination;
    private DeploymentCoverageItem m_item;
    public DeploymentCoverageFileType Type { get; }
    public string Path { get; }
    public string Destination { get; }
    public DeploymentCoverageItem Item { get; }
    public DeploymentCoverageFile(DeploymentCoverageItem item, string path, DeploymentCoverageFileType type);
    public DeploymentCoverageFile(DeploymentCoverageItem item, string path, string destination, DeploymentCoverageFileType type);
    public DeploymentCoverageFileType get_Type();
    public string get_Path();
    public string get_Destination();
    public DeploymentCoverageItem get_Item();
    public bool GetLastWriteTime(DeploymentHelper helper, TestRun run, DateTime& time);
}
internal enum Microsoft.VisualStudio.TestTools.TestManagement.DeploymentCoverageFileType : Enum {
    public int value__;
    public static DeploymentCoverageFileType DeploymentFile;
    public static DeploymentCoverageFileType BinaryFile;
    public static DeploymentCoverageFileType PdbFile;
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.DeploymentCoverageItem : object {
    private DeploymentItem m_deploymentItem;
    private CodeCoverageItem m_coverageItem;
    private bool m_isDeploymentItem;
    private bool m_wasError;
    private string m_destination;
    public bool IsDeploymentItem { get; }
    public DeploymentItem DeploymentItem { get; }
    public CodeCoverageItem CodeCoverageItem { get; }
    public string Path { get; }
    public string OutputDirectory { get; }
    public bool WasError { get; public set; }
    public DeploymentCoverageItem(DeploymentItem item);
    public DeploymentCoverageItem(DeploymentItem item, string destination);
    public DeploymentCoverageItem(CodeCoverageItem item);
    public bool get_IsDeploymentItem();
    public DeploymentItem get_DeploymentItem();
    public CodeCoverageItem get_CodeCoverageItem();
    public string get_Path();
    public string get_OutputDirectory();
    public bool get_WasError();
    public void set_WasError(bool value);
    public List`1<DeploymentCoverageFile> GetFiles(TestRunConfiguration runConfig);
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.DeploymentHelper : object {
    private TestRun m_run;
    private FileCopyService m_fileCopyService;
    private Tmi m_tmi;
    public DeploymentHelper(Tmi tmi, TestRun run, FileCopyService fileCopyService);
    public bool FileExists(string path);
    public bool DirectoryExists(string path);
    public void CreateDirectory(string path, bool alwaysThrowOnError);
    public bool ReadFileToEnd(string path, TestRunConfiguration runConfig, String& fileContents);
    public bool GetLastWriteTime(string file, DateTime& time);
    private static void DeleteEmptyDirectories(string filePath);
    private static void DeleteEmptyDirectories(DirectoryInfo root);
    public void AddToFileCopyService(string path, string rootDirectory);
    public void RemoveFromFileCopyService(string path);
    public void InstrumentBinariesForCodeCoverage(List`1<CodeCoverageItem> instrumentItems, bool inPlace, TestRunConfiguration runConfig);
    public void RestoreCodeCoverageBinaries();
    public void ProcessCodeCoverageItemsForDeployment(List`1<DeploymentCoverageItem> deploymentCoverageItems);
    private Byte[] GetPublicKey(string keyFile, PublicKeyHolder publicKeyHolder);
    private void UpdateCoverageItemKeyFile(CodeCoverageItem item, AssemblyKeyExtractor assemblyKeyExtractor, PublicKeyHolder publicKeyHolder, Byte[] runConfigPublicKey);
    private CodeCoverageItem UpdateCodeCoverageItem(CodeCoverageItem item);
    public string CopyFileOverwrite(string source, string destination);
    public string CopyFileOverwrite(string source, TestRunConfiguration runConfig, string destinationDirectory);
    public static string LocateAndMakeFileAbsolute(string path, TestRunConfiguration runConfig);
    public static string LocateAndMakeAbsolute(string path, TestRunConfiguration runConfig, Boolean& pathIsDirectory, Boolean& found);
    public static string TryConvertPathToRelative(string path, string rootDir);
    public static void RemoveFromMissingDependencies(string fileName, Dictionary`2<string, DeploymentItemOrigin> missingDependentAssemblies);
    public void CreateDirectoryIfNotExists(string directory, bool alwaysThrowOnError);
    public void ClearEmptyDeploymentDirectories();
    public bool IsDeploymentFromUntrustedLocation(TestRunConfiguration runConfig, List`1<DeploymentCoverageItem> tests, List`1<DeploymentItem> dependencies, DeploymentItemCollection perTestDeploymentItems, String& firstUntrustedFile);
    private bool IsTrustedForLocalExecution(string path, TestRunConfiguration runConfig, String& untrustedFile);
    internal string GetOutputDirectory(DeploymentCoverageItem item, TestRunConfiguration runConfig, bool ignoreErrors);
    public void SendRunErrorResultMessage(string errorText, Exception e);
    public void SendErrorResultMessageAndThrow(string message, Exception e);
    public void SendErrorResultMessageAndThrow(string message);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.DeploymentManager : object {
    private static string TestAssemblyConfigFileExtension;
    private static string NetAppConfigFile;
    private static string UseDeploymentRootIfExists;
    private Tmi m_tmi;
    private bool m_runConfigurationPrepared;
    private bool m_deploymentDirectoriesCreated;
    public DeploymentManager(Tmi tmi);
    public void DoDeployment(TestRun run, FileCopyService fileCopyService);
    private bool ProcessNewStorage(string testStorage, DeploymentHelper helper, DeploymentItemOriginType originType, List`1<DeploymentCoverageItem> deploymentCoverageItems, TestRunConfiguration runConfig, List`1<DeploymentItem> dependencyDeploymentItems, Dictionary`2<string, DeploymentItemOrigin> missingDependentAssemblies);
    private static bool NeedsFullDeployment(ITestElement test);
    private static bool IsFullDeployment(TestRun run, DeploymentHelper helper);
    internal void PrepareRunConfiguration(TestRun run);
    internal void CreateDeploymentDirectories(TestRun run, FileCopyService fileCopyService);
    private static bool GetUseDeploymentRootIfExists();
    private static void AddStorageToSearchPaths(TestRunConfiguration runConfig);
    private static DeploymentItemCollection CheckAndMergeImpliedDependencies(ITestElement test, DeploymentItemCollection initialItems);
    private static string FindAndDeployPdb(string destinationFile, string relativeDestination, string sourceFile, Dictionary`2<string, SourceItem> destToSource, DeploymentHelper helper);
    private static void GetDependencies(string master, string configFile, TestRunConfiguration runConfig, DeploymentItemOrigin dependencyOrigin, List`1<DeploymentItem> dependencyDeploymentItems, Dictionary`2<string, DeploymentItemOrigin> missingDependentAssemblies);
    private static List`1<DeploymentCoverageItem> GetSatellites(List`1<DeploymentCoverageItem> deploymentCoverageItems, TestRunConfiguration runConfig, DeploymentHelper helper);
    private static void UpdateForAspNetCoverageProjects(TestRunConfiguration runConfig, DeploymentHelper helper);
    private static string GetSymbolsFileName(string path);
    private static void UpdateForAspNetCoverageProject(TestRunConfiguration runConfig, AspNetProjectItem project, DeploymentHelper helper);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.DuplicateResultIdException : DuplicateIdException {
    private TestResultId m_inMemory;
    private TestResultId m_loading;
    public TestResultId InMemory { get; }
    public TestResultId Loading { get; }
    internal DuplicateResultIdException(TestResultId inMemory, TestResultId loading);
    public DuplicateResultIdException(string msg);
    public DuplicateResultIdException(string msg, Exception inner);
    private DuplicateResultIdException(SerializationInfo info, StreamingContext context);
    public TestResultId get_InMemory();
    public TestResultId get_Loading();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.DuplicateRunConfigurationIdException : DuplicateIdException {
    private TestRunConfiguration m_inMemory;
    private TestRunConfiguration m_loading;
    public TestRunConfiguration InMemory { get; }
    public TestRunConfiguration Loading { get; }
    internal DuplicateRunConfigurationIdException(TestRunConfiguration inMemory, TestRunConfiguration loading);
    public DuplicateRunConfigurationIdException(string msg);
    public DuplicateRunConfigurationIdException(string msg, Exception inner);
    private DuplicateRunConfigurationIdException(SerializationInfo info, StreamingContext context);
    public TestRunConfiguration get_InMemory();
    public TestRunConfiguration get_Loading();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.DuplicateRunIdException : DuplicateIdException {
    private Guid m_runId;
    public Guid RunId { get; }
    public DuplicateRunIdException(TestRun run);
    public DuplicateRunIdException(string msg);
    public DuplicateRunIdException(string msg, Exception inner);
    private DuplicateRunIdException(SerializationInfo info, StreamingContext context);
    public Guid get_RunId();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.DuplicateTestIdException : DuplicateIdException {
    private ITestElement m_inMemory;
    private ITestElement m_loading;
    public ITestElement InMemory { get; }
    public ITestElement Loading { get; }
    internal DuplicateTestIdException(ITestElement inMemory, ITestElement loading);
    public DuplicateTestIdException(string msg);
    public DuplicateTestIdException(string msg, Exception inner);
    private DuplicateTestIdException(SerializationInfo info, StreamingContext context);
    public ITestElement get_InMemory();
    public ITestElement get_Loading();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.DuplicateTestListCategoryIdException : DuplicateIdException {
    private TestListCategory m_inMemory;
    private TestListCategory m_loading;
    internal TestListCategory InMemory { get; }
    internal TestListCategory Loading { get; }
    internal DuplicateTestListCategoryIdException(TestListCategory inMemory, TestListCategory loading);
    public DuplicateTestListCategoryIdException(string msg);
    public DuplicateTestListCategoryIdException(string msg, Exception inner);
    private DuplicateTestListCategoryIdException(SerializationInfo info, StreamingContext context);
    internal TestListCategory get_InMemory();
    internal TestListCategory get_Loading();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.DuplicateTestListCategoryNameException : DuplicateIdException {
    private TestListCategory m_inMemory;
    private TestListCategory m_loading;
    internal TestListCategory InMemory { get; }
    internal TestListCategory Loading { get; }
    internal DuplicateTestListCategoryNameException(TestListCategory inMemory, TestListCategory loading);
    public DuplicateTestListCategoryNameException(string msg);
    public DuplicateTestListCategoryNameException(string msg, Exception inner);
    private DuplicateTestListCategoryNameException(SerializationInfo info, StreamingContext context);
    internal TestListCategory get_InMemory();
    internal TestListCategory get_Loading();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.EmbeddedControllerProxy : ControllerProxy {
    private IControllerExecution m_controller;
    internal LocalRunMessageListener m_listener;
    private bool m_isDisposed;
    internal IControllerExecution Controller { get; }
    internal EmbeddedControllerProxy(Tmi tmi);
    internal EmbeddedControllerProxy(IControllerExecution controller, Tmi tmi);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool explicitDispose);
    internal virtual IControllerExecution get_Controller();
    public virtual void QueueTestRun(TestRun run);
    public virtual bool CheckTestRunAccess(Guid runId);
    protected internal virtual void TestRunFinished(TestRun testRun);
    public virtual void DisconnectTestRun(Guid runId);
    public virtual void DeleteTestRun(Guid runId);
    public virtual string GetLoadTestRepositoryConnectString();
    protected virtual void InitializeController(TestRun run);
    protected virtual LocalRunMessageListener SetupListener(TestRun run);
    protected virtual void DisconnectListener(Guid runId);
    protected virtual void UpdateFileCopyServiceFlags(FileCopyService fileCopyService);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.ExecutionException : InternalException {
    public ExecutionException(string msg);
    public ExecutionException(string msg, Exception inner);
    private ExecutionException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.Filter : object {
    private Condition m_cond;
    private Filter m_left;
    private Filter m_right;
    private bool m_brace;
    private bool m_not;
    private bool m_joinedByAnd;
    private static Filter s_emptyFilter;
    internal Filter Brace { get; }
    internal Filter Not { get; }
    private bool IsEmpty { get; }
    internal string Sql { get; }
    internal static Filter Empty { get; }
    private Filter(Filter copy);
    internal Filter(Condition condition);
    private static Filter();
    internal Filter And(Condition condition);
    internal Filter Or(Condition condition);
    internal Filter And(Filter filter);
    internal Filter Or(Filter filter);
    internal Filter get_Brace();
    internal Filter get_Not();
    private bool get_IsEmpty();
    internal string get_Sql();
    internal static Filter CombineClauses(Filter left, bool useAnd, Filter right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static Filter get_Empty();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.FilterFactory : object {
    public static Filter StorageEquals(Tmi tmi, StorageElementType dataType, string storage);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.IdNotSetException : InvalidTestObjectException {
    public IdNotSetException(string msg);
    public IdNotSetException(string msg, Exception inner);
    protected IdNotSetException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.InvalidStorageExtensionException : EqtDataException {
    public InvalidStorageExtensionException(string msg);
    public InvalidStorageExtensionException(string msg, Exception inner);
    private InvalidStorageExtensionException(SerializationInfo info, StreamingContext context);
}
internal interface Microsoft.VisualStudio.TestTools.TestManagement.ITmiEvents {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TmiWarningEvent(TmiWarningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TmiWarningEvent(TmiWarningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunSubmittedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunSubmittedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunStartedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunStartedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunFinishedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunFinishedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunStateChangedEvent(TestRunStateEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunStateChangedEvent(TestRunStateEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunRemovedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunRemovedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestAddedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestAddedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRemovedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRemovedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestModifiedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestModifiedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestStartedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestStartedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestFinishedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestFinishedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestResultAddedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestResultAddedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestResultRemovedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestResultRemovedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestResultModifiedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestResultModifiedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunLoaded(MultiTestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunLoaded(MultiTestRunEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResultTestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResultTestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResultTestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResultTestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RunConfigurationAddedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RunConfigurationAddedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RunConfigurationRemovedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RunConfigurationRemovedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RunConfigurationModifiedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RunConfigurationModifiedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ActiveRunConfigurationChangedEvent(ActiveRunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ActiveRunConfigurationChangedEvent(ActiveRunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestListCategoryModifiedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestListCategoryModifiedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewablePropertyAddedEvent(ViewablePropertyEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewablePropertyAddedEvent(ViewablePropertyEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestSaveAttemptEvent(TestSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestSaveAttemptEvent(TestSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestUpdateAttemptEvent(TestUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestUpdateAttemptEvent(TestUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CategorySaveAttemptEvent(CategorySaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CategorySaveAttemptEvent(CategorySaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CategoryUpdateAttemptEvent(CategoryUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CategoryUpdateAttemptEvent(CategoryUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RunConfigSaveAttemptEvent(RunConfigSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RunConfigSaveAttemptEvent(RunConfigSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RunConfigUpdateAttemptEvent(RunConfigUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RunConfigUpdateAttemptEvent(RunConfigUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestAndCategoryRelationsDroppedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestAndCategoryRelationsDroppedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestAndCategoryRelationsAddedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestAndCategoryRelationsAddedEvent(EventHandler value);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.LocalControllerProxy : ControllerProxy {
    private static int ProcessStartTimeout;
    private static int ProcessEndTimeout;
    private static int EnsureNoActiveRunsTimeout;
    private static bool m_channelsRegistered;
    private static object m_channelLock;
    private static string m_pipeName;
    private ControllerObject m_controller;
    private AgentProcessManager m_agentProcessManager;
    private object m_cleanupLock;
    private object m_prepareHostProcessLock;
    private object m_checkSingleRunLock;
    private bool m_isRunQueing;
    private bool m_isProcessStarting;
    private ManualResetEvent m_runIsQueuingEvent;
    private EventHandler m_processExitedHandler;
    private bool m_isDisposed;
    internal LocalRunMessageListener m_listener;
    private OnDemandRemoteCollectionChannel m_collectionControllerChannel;
    private Nullable`1<bool> m_isDataCollectionAgentNeeded;
    private Guid m_runIdProcessPreparedFor;
    private Dictionary`2<Guid, Exception> m_runErrors;
    internal IControllerExecution Controller { get; }
    private static bool IsTimeoutEnabledByConfig { get; }
    internal LocalControllerProxy(Tmi tmi);
    private static LocalControllerProxy();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool explicitDispose);
    internal virtual IControllerExecution get_Controller();
    public virtual void QueueTestRun(TestRun run);
    protected virtual void OnQueueTestRunError(Guid runId, string errorMessage);
    protected virtual void OnTestRunOperationError(Guid runId);
    protected internal virtual void TestRunQueued(TestRun testRun);
    protected internal virtual void TestRunFinished(TestRun testRun);
    internal void EnsureNoActiveRuns();
    public virtual bool CheckTestRunAccess(Guid runId);
    public virtual void RegisterForTestRunEvents(TestRun run);
    public virtual void DisconnectTestRun(Guid runId);
    public virtual void DeleteTestRun(Guid runId);
    public virtual string GetLoadTestRepositoryConnectString();
    protected virtual void InitializeController(TestRun run);
    protected virtual LocalRunMessageListener SetupListener(TestRun run);
    public static void ResetChannelRegistration();
    private void PrepareQueueTestRunWorker(object state);
    private void PrepareProcess(TestRun run);
    private bool IsProcessRestartNeeded(TestRun run);
    private void StartProcess(TestRun run);
    private void SetHostProcessWorkingDirectory(TestRun run);
    private void ProcessExited(object sender, EventArgs args);
    private void StopProcess();
    private void StopProcess(bool invalidateRunId);
    private void StopProcessNoLock(bool invalidateRunId);
    protected virtual void DisconnectListener(Guid runId);
    private void ResetQueueingState();
    private void Cleanup(bool invalidateRunId);
    private void ForgetLocalRun();
    private void ForgetLocalRun(bool invalidateTmiLocalRunId);
    private void SetupChannels();
    protected virtual void UpdateFileCopyServiceFlags(FileCopyService fileCopyService);
    private static bool get_IsTimeoutEnabledByConfig();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.TestManagement.LockingDataView : DataView {
    private DisposingReaderWriterLock m_rwlock;
    public DataRowView Item { get; }
    internal DisposingReaderWriterLock Lock { get; }
    internal LockingDataView(DataTable table, string rowFilter, string sort, DataViewRowState rowState, DisposingReaderWriterLock rwlock);
    public DataRowView get_Item(int recordIndex);
    internal DisposingReaderWriterLock get_Lock();
}
internal enum Microsoft.VisualStudio.TestTools.TestManagement.Operation : Enum {
    public int value__;
    public static Operation Equal;
    public static Operation NotEqual;
    public static Operation Greater;
    public static Operation GreaterOrEqual;
    public static Operation Less;
    public static Operation LessOrEqual;
    public static Operation In;
    public static Operation Like;
    public static Operation BeginsWith;
    public static Operation EndsWith;
    public static Operation Contains;
    public static Operation IsNull;
    public static Operation NotLike;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.TestManagement.PublicKeyHolder : object {
    private Dictionary`2<string, PublicKeyInfo> m_keyFiles;
    public Byte[] Item { get; }
    public Byte[] get_Item(string file);
    public bool IsPublicKey(string file);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.RemoteControllerProxy : ControllerProxy {
    private static bool m_isChannelOnPortZeroRegistered;
    private static object m_channelLock;
    private TcpClientServerChannelContainer m_serverChannel;
    private bool m_isDisposed;
    private object m_disposedLock;
    private IControllerExecution m_controller;
    private Uri m_controllerUri;
    private Dictionary`2<Guid, LocalRunMessageListener> m_listeners;
    internal IControllerExecution Controller { get; }
    internal RemoteControllerProxy(Tmi tmi, Uri controllerUri);
    private static RemoteControllerProxy();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool explicitDispose);
    internal virtual IControllerExecution get_Controller();
    protected virtual void InitializeController(TestRun run);
    public virtual void QueueTestRun(TestRun run);
    protected virtual LocalRunMessageListener SetupListener(TestRun run);
    public virtual void RegisterForTestRunEvents(TestRun run);
    public virtual void DisconnectTestRun(Guid runId);
    public virtual void DeleteTestRun(Guid runId);
    public virtual bool CheckTestRunAccess(Guid runId);
    public virtual string GetLoadTestRepositoryConnectString();
    protected internal virtual void TestRunFinished(TestRun run);
    protected virtual void DisconnectListener(Guid runId);
    private void EnsureControllerInitialized();
    private IControllerExecution GetController(Uri controllerUri);
    private void RegisterChannelOnPortZero();
    protected virtual void UpdateFileCopyServiceFlags(FileCopyService fileCopyService);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.ResultsTestList : TestList {
    private Guid m_runId;
    internal ResultsTestList(Tmi tmi, TestListCategoryId categoryId, Guid runId);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    protected virtual StorageElementType GetCategoriesStorage();
    protected virtual Filter GetChildCategoriesFilter(TestListCategory category);
    protected virtual StorageElementType GetTestsStorage();
    protected virtual Filter GetTestsFilter(TestListCategory category);
    protected virtual TestListCategory GetCategory();
    protected virtual bool IsChild(TestList child);
    protected virtual TestList CreateChild(TestListCategoryId childId);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.ResultTestListCategoryEventArgs : TestListCategoryEventArgs {
    private Guid m_runId;
    public Guid RunId { get; }
    internal ResultTestListCategoryEventArgs(Guid runId);
    public Guid get_RunId();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.RunConfigSaveAttemptEventArgs : EventArgs {
    private TestRunConfiguration testRunConfiguration;
    public TestRunConfiguration TestRunConfiguration { get; }
    internal RunConfigSaveAttemptEventArgs(TestRunConfiguration testRunConfiguration_);
    public TestRunConfiguration get_TestRunConfiguration();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.RunConfigUpdateAttemptEventArgs : EventArgs {
    private TestRunConfiguration testRunConfiguration;
    public TestRunConfiguration TestRunConfiguration { get; }
    internal RunConfigUpdateAttemptEventArgs(TestRunConfiguration testRunConfiguration_);
    public TestRunConfiguration get_TestRunConfiguration();
}
public class Microsoft.VisualStudio.TestTools.TestManagement.RunConfigurationIdNotFoundException : IdNotFoundException {
    internal RunConfigurationIdNotFoundException(TestRunConfigurationId id);
    public RunConfigurationIdNotFoundException(string msg);
    public RunConfigurationIdNotFoundException(string msg, Exception inner);
    private RunConfigurationIdNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.SaveAttemptException : SaveOrUpdateAttemptException {
    public SaveAttemptException(string msg);
    public SaveAttemptException(string msg, Exception inner);
    private SaveAttemptException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.SaveOrUpdateAttemptException : EqtException {
    public SaveOrUpdateAttemptException(string msg);
    public SaveOrUpdateAttemptException(string msg, Exception inner);
    protected SaveOrUpdateAttemptException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.SourceItem : ValueType {
    private DeploymentCoverageFile m_itemFile;
    public DeploymentCoverageFile ItemFile { get; }
    public SourceItem(DeploymentCoverageFile itemFile);
    public DeploymentCoverageFile get_ItemFile();
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.TestManagement.StorageNotSetException : InvalidTestObjectException {
    public StorageNotSetException(string msg);
    public StorageNotSetException(string msg, Exception inner);
    private StorageNotSetException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestEventArgs : EventArgs {
    private List`1<TestId> m_testIds;
    public TestId[] TestIds { get; }
    public int Count { get; }
    internal TestEventArgs(TestId testId);
    public TestId[] get_TestIds();
    public int get_Count();
    internal void Add(TestId id);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.TestIdNotFoundException : IdNotFoundException {
    private TestId m_id;
    public TestId Id { get; }
    internal TestIdNotFoundException(TestId id);
    public TestIdNotFoundException(string msg);
    public TestIdNotFoundException(string msg, Exception inner);
    private TestIdNotFoundException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public TestId get_Id();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestList : object {
    protected Tmi m_tmi;
    protected TestListCategoryId m_categoryId;
    protected bool m_readOnly;
    protected bool m_canModifyInnerTestLists;
    public string Name { get; public set; }
    public bool ReadOnly { get; }
    public bool CanChangeTests { get; }
    public bool CanChangeTestLists { get; }
    public TestListCategoryId CategoryId { get; }
    public Tmi Tmi { get; }
    internal TestList(Tmi tmi, TestListCategoryId categoryId, bool readOnly, bool canModifyInnerTestLists);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_ReadOnly();
    public sealed virtual bool get_CanChangeTests();
    public sealed virtual bool get_CanChangeTestLists();
    public sealed virtual ITestElement[] GetTests();
    public sealed virtual Link[] GetMissingTests();
    public sealed virtual ITestList[] GetChildLists();
    public sealed virtual void AddTest(ITestElement test);
    public sealed virtual void RemoveTest(ITestElement test);
    public sealed virtual ITestList CreateChildList(string name);
    public sealed virtual void DeleteChildList(ITestList childList);
    public sealed virtual void MoveChildList(ITestList childList, ITestList destination);
    public TestListCategoryId get_CategoryId();
    public Tmi get_Tmi();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    protected virtual StorageElementType GetCategoriesStorage();
    protected virtual Filter GetChildCategoriesFilter(TestListCategory category);
    protected virtual StorageElementType GetTestsStorage();
    protected virtual Filter GetTestsFilter(TestListCategory category);
    protected virtual TestListCategory GetCategory();
    protected virtual bool IsChild(TestList child);
    protected virtual TestList CreateChild(TestListCategoryId childId);
    protected static Guid[] GetTestIds(TestListCategory category);
    protected void EnsureNotReadonly();
    protected void EnsureTestsAreModifiable();
    protected void EnsureChildCategoriesAreModifiable();
    protected void EnsureParameterIsChild(TestList parameter, string parameterName);
    protected static TestList ConvertParameterToTestList(ITestList parameter, string parameterName);
    protected bool IsEqual(TestList other);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestListCategoryEventArgs : EventArgs {
    private List`1<TestListCategoryId> m_categoryIds;
    private Dictionary`2<TestListCategoryId, TestListCategoryPair> m_categories;
    public TestListCategoryId[] CategoryIds { get; }
    public int Count { get; }
    internal TestListCategoryEventArgs(TestListCategory oldCategory, TestListCategory newCategory);
    public TestListCategoryId[] get_CategoryIds();
    public int get_Count();
    public bool Contains(TestListCategoryId id);
    public TestListCategory OldCategory(TestListCategoryId id);
    public TestListCategory NewCategory(TestListCategoryId id);
    internal void Remove(TestListCategoryId id);
    internal void Add(TestListCategory oldCategory, TestListCategory newCategory);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.TestListCategoryIdNotFoundException : IdNotFoundException {
    internal TestListCategoryIdNotFoundException(TestListCategoryId id);
    public TestListCategoryIdNotFoundException(string msg);
    public TestListCategoryIdNotFoundException(string msg, Exception inner);
    private TestListCategoryIdNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestListCategoryPair : object {
    private TestListCategory m_left;
    private TestListCategory m_right;
    internal TestListCategory Left { get; }
    internal TestListCategory Right { get; }
    internal TestListCategoryPair(TestListCategory left, TestListCategory right);
    internal TestListCategory get_Left();
    internal TestListCategory get_Right();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestResultMessageEventArgs : EventArgs {
    private Guid m_runId;
    private TestResult m_testResult;
    public Guid RunId { get; }
    public TestResult TestResult { get; }
    internal TestResultMessageEventArgs(Guid runId, TestResult newTestResult);
    public Guid get_RunId();
    public TestResult get_TestResult();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestRunStateEventArgs : EventArgs {
    private Guid m_runId;
    private RunState m_runState;
    public Guid RunId { get; }
    public RunState RunState { get; }
    internal TestRunStateEventArgs(Guid runId, RunState newState);
    public Guid get_RunId();
    public RunState get_RunState();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestSaveAttemptEventArgs : EventArgs {
    private ITestElement testToSave;
    public ITestElement TestToSave { get; }
    internal TestSaveAttemptEventArgs(ITestElement test);
    public ITestElement get_TestToSave();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TestUpdateAttemptEventArgs : EventArgs {
    private ITestElement testToUpdate;
    public ITestElement TestToUpdate { get; }
    internal TestUpdateAttemptEventArgs(ITestElement test);
    public ITestElement get_TestToUpdate();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.ThreadStateObject : object {
    private TestRun m_run;
    private CultureInfoHolder m_cultureInfoHolder;
    public TestRun TestRun { get; }
    public CultureInfoHolder CultureInfoHolder { get; }
    public ThreadStateObject(TestRun run);
    public TestRun get_TestRun();
    public CultureInfoHolder get_CultureInfoHolder();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TipDelayLoader : object {
    private TestTypeInfo m_typeInfo;
    private TmiWarningHandler m_warningHandler;
    private ITip m_tip;
    private bool m_loadAttempted;
    private Tmi m_tmi;
    public TipDelayLoader(TestTypeInfo testTypeInfo, Tmi tmi, TmiWarningHandler warningHandler);
    public ITip GetTip();
    public void ResetTip();
    public sealed virtual void Dispose();
    private ITip LoadTip();
}
public class Microsoft.VisualStudio.TestTools.TestManagement.TipLoadContainsNullElementException : InvalidDataInStorageException {
    public TipLoadContainsNullElementException(string msg);
    public TipLoadContainsNullElementException(string msg, Exception inner);
    private TipLoadContainsNullElementException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.TipLoadReturnedNullException : InvalidDataInStorageException {
    public TipLoadReturnedNullException(string msg);
    public TipLoadReturnedNullException(string msg, Exception inner);
    private TipLoadReturnedNullException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.Tmi : object {
    public static string ObjectColumnName;
    public static string IdColumnName;
    public static string RunIdColumnName;
    public static string ParentExecIdColumnName;
    public static string TestIdColumnName;
    public static string LinkIdColumnName;
    public static string LinkNameColumnName;
    public static string LinkStorageColumnName;
    private static string LinkEnabledColumnName;
    private static string EnabledColumnName;
    private static string LinkPrefix;
    private static string ChildTestColumnName;
    private static string ParentTestsColumnName;
    private static string MissingTestColumnName;
    private static string TestObjectColumnName;
    internal static string ManagedStorageColumnName;
    internal static string ManagedTestTypeColumnName;
    internal static string ManagedStorageManagerIdColumnName;
    public static string StorageColumnName;
    public static string TestNameColumnName;
    public static string TestTypeColumnName;
    public static string PropertyDescriptorName;
    public static string NoGroupGroupName;
    public static string ParentIdColumnName;
    public static string NameColumnName;
    public static string FullNameColumnName;
    public static string OutcomeColumnName;
    public static string HumanReadableIdColumnName;
    public static string OutcomeTextColumnName;
    public static string IsAutomatedColumnName;
    public static string IsRunnableColumnName;
    public static string ResultTestColumnPrefix;
    private bool m_disposed;
    private ReaderWriterLock m_disposingLock;
    private TestTypeInfoCollection m_testTypes;
    private Dictionary`2<Guid, ControllerProxy> m_runIdToControllerProxyMap;
    private Dictionary`2<Uri, ControllerProxy> m_remoteMachineToControllerProxyMap;
    private Dictionary`2<Guid, RunState> m_runIdToRunStateMap;
    private LocalControllerProxy m_localControllerProxy;
    private Guid m_localRunId;
    private bool m_isLastLocalRunUnderDebugger;
    private DisposingReaderWriterLock m_controllerProxyLock;
    private bool m_fireQueueRunEvents;
    internal DisposingReaderWriterLock m_fireQueueRunEventsLock;
    private Dictionary`2<Type, PropertyDescriptorCollection> m_propertyDescriptorCache;
    private Dictionary`2<TestType, TipDelayLoader> m_tips;
    private Filter m_specialCategoryFilter;
    private int m_numberOfStubCategories;
    private string m_testServiceControllerProxyType;
    private bool m_delayUpdates;
    private Dictionary`2<TestId, TestInfo> m_delayedTests;
    private static Dictionary`2<StorageElementType, Dictionary`2<string, string>> s_crossColumnNames;
    private Dictionary`2<Guid, VisiblePropertyAndClassName> m_visibleAttributeGuids;
    private bool m_shouldTraceVerbose;
    private static string m_testTableName;
    private static string m_categoryTableName;
    private static string m_testsToCatTableName;
    private static string m_testsHierarchyTableName;
    private static string m_runConfigTableName;
    private static string m_resultTableName;
    private static string m_resultCategoryTableName;
    private static string m_runTableName;
    private static string m_resultRunConfigTableName;
    private static string m_testDataSetName;
    private static string m_testLockName;
    private static string m_resultDataSetName;
    private static string m_resultLockName;
    private static string m_runConfigDataSetName;
    private static string m_runConfigLockName;
    private static string m_managedStorageTableName;
    private static int m_lockTimeOut;
    private DataTable m_testTable;
    private DataTable m_categoryTable;
    private DataTable m_testsToCatTable;
    private DataTable m_testsHierarchyTable;
    private DataTable m_runConfigTable;
    private DataTable m_resultTable;
    private DataTable m_resultCategoryTable;
    private DataTable m_runTable;
    private DataTable m_resultRunConfigTable;
    private DataSet m_testData;
    private DisposingReaderWriterLock m_testLock;
    private DataSet m_resultData;
    private DisposingReaderWriterLock m_resultLock;
    private DataSet m_runConfigData;
    private DisposingReaderWriterLock m_runConfigLock;
    private static string m_testToCrossRelation;
    private static string m_categoryToCrossRelation;
    private static string m_resultToResultCategory;
    private string m_crossTestIdColumnName;
    private string m_crossCatIdColumnName;
    private string m_crossLinkIdColumnName;
    private DataTable m_managedStorageTable;
    private Dictionary`2<object, int> m_managedStorageManagers;
    private int m_manageStorageManagerCounter;
    private DisposingReaderWriterLock m_managedStorageLock;
    private Dictionary`2<string, Dictionary`2<string, DataColumn>> m_expressionColumnCache;
    private IDebugTestCallback m_debugCallback;
    private Dictionary`2<string, string> m_testSearchPaths;
    private IDictionary`2<Guid, object> m_abortedRuns;
    private AggregationManager m_aggregationManager;
    private static RegistryKey s_registryRoot;
    [CompilerGeneratedAttribute]
private TmiWarningEventHandler TmiWarningEvent;
    [CompilerGeneratedAttribute]
private TmiAllDataRemovedEventHandler TmiAllTestDataRemovedEvent;
    [CompilerGeneratedAttribute]
private TmiAllDataRemovedEventHandler TmiAllResultDataRemovedEvent;
    private TmiWarningHandler m_warningHandler;
    [CompilerGeneratedAttribute]
private EventHandler`1<TestRunEventArgs> TestRunSubmitting;
    [CompilerGeneratedAttribute]
private TestRunEventHandler TestRunSubmittedEvent;
    [CompilerGeneratedAttribute]
private TestRunEventHandler TestRunStartedEvent;
    [CompilerGeneratedAttribute]
private TestRunEventHandler TestRunFinishedEvent;
    [CompilerGeneratedAttribute]
private TestRunEventHandler TestRunRemovedEvent;
    [CompilerGeneratedAttribute]
private TestRunStateEventHandler TestRunStateChangedEvent;
    [CompilerGeneratedAttribute]
private TestResultMessageEventHandler TestResultMessageEvent;
    [CompilerGeneratedAttribute]
private TestEventHandler TestAddedEvent;
    [CompilerGeneratedAttribute]
private TestEventHandler TestRemovedEvent;
    [CompilerGeneratedAttribute]
private TestEventHandler TestModifiedEvent;
    [CompilerGeneratedAttribute]
private TestResultEventHandler TestStartedEvent;
    [CompilerGeneratedAttribute]
private TestResultEventHandler TestFinishedEvent;
    [CompilerGeneratedAttribute]
private TestResultEventHandler TestResultAddedEvent;
    [CompilerGeneratedAttribute]
private TestResultEventHandler TestResultRemovedEvent;
    [CompilerGeneratedAttribute]
private TestResultEventHandler TestResultModifiedEvent;
    [CompilerGeneratedAttribute]
private MultiTestRunEventHandler TestRunLoaded;
    [CompilerGeneratedAttribute]
private TestListCategoryEventHandler ResultTestListCategoryAddedEvent;
    [CompilerGeneratedAttribute]
private TestListCategoryEventHandler ResultTestListCategoryRemovedEvent;
    [CompilerGeneratedAttribute]
private RunConfigurationEventHandler RunConfigurationAddedEvent;
    [CompilerGeneratedAttribute]
private RunConfigurationEventHandler RunConfigurationRemovedEvent;
    [CompilerGeneratedAttribute]
private RunConfigurationEventHandler RunConfigurationModifiedEvent;
    [CompilerGeneratedAttribute]
private ActiveRunConfigurationEventHandler ActiveRunConfigurationChangedEvent;
    [CompilerGeneratedAttribute]
private TestListCategoryEventHandler TestListCategoryAddedEvent;
    [CompilerGeneratedAttribute]
private TestListCategoryEventHandler TestListCategoryRemovedEvent;
    [CompilerGeneratedAttribute]
private TestListCategoryEventHandler TestListCategoryModifiedEvent;
    [CompilerGeneratedAttribute]
private ViewablePropertyEventHandler ViewablePropertyAddedEvent;
    [CompilerGeneratedAttribute]
private EventHandler TestAndCategoryRelationsDroppedEvent;
    [CompilerGeneratedAttribute]
private EventHandler TestAndCategoryRelationsAddedEvent;
    [CompilerGeneratedAttribute]
private TestSaveAttemptEventHandler TestSaveAttemptEvent;
    [CompilerGeneratedAttribute]
private TestUpdateAttemptEventHandler TestUpdateAttemptEvent;
    [CompilerGeneratedAttribute]
private CategorySaveAttemptEventHandler CategorySaveAttemptEvent;
    [CompilerGeneratedAttribute]
private CategoryUpdateAttemptEventHandler CategoryUpdateAttemptEvent;
    [CompilerGeneratedAttribute]
private RunConfigSaveAttemptEventHandler RunConfigSaveAttemptEvent;
    [CompilerGeneratedAttribute]
private RunConfigUpdateAttemptEventHandler RunConfigUpdateAttemptEvent;
    private static TestConfigKey s_configRoot;
    public static RegistryKey RegistryRootForUI { get; public set; }
    public static TestConfigKey ConfigRoot { get; public set; }
    public string CrossTestIdColumnName { get; }
    private string CrossTestIdColumnNameNoLock { get; }
    public string CrossCatIdColumnName { get; }
    private string CrossCatIdColumnNameNoLock { get; }
    public string CrossLinkIdColumnName { get; }
    private string CrossLinkIdColumnNameNoLock { get; }
    internal bool Disposed { get; }
    public Filter SpecialCategoryFilter { get; }
    public TestRunConfigurationId ActiveTestRunConfigurationId { get; public set; }
    private TestTypeInfoCollection TestTypeInfoTable { get; }
    public TestType[] TestTypes { get; }
    public TestTypeInfo[] TestTypeInfoSet { get; }
    public Guid LocalRunId { get; internal set; }
    public bool IsLocalRunRunning { get; }
    internal bool IsLocalRunRunningUnderDebugger { get; }
    unknown bool IsLastLocalRunUnderDebugger {internal set; }
    internal bool FireQueueRunEvents { get; private set; }
    public IDebugTestCallback DebugCallback { get; public set; }
    internal AggregationManager AggregationManager { get; }
    public Tmi(TmiWarningEventHandler warningEventHandler);
    private static Tmi();
    [CompilerGeneratedAttribute]
public sealed virtual void add_TmiWarningEvent(TmiWarningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TmiWarningEvent(TmiWarningEventHandler value);
    [CompilerGeneratedAttribute]
public void add_TmiAllTestDataRemovedEvent(TmiAllDataRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TmiAllTestDataRemovedEvent(TmiAllDataRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_TmiAllResultDataRemovedEvent(TmiAllDataRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TmiAllResultDataRemovedEvent(TmiAllDataRemovedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRunSubmitting(EventHandler`1<TestRunEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRunSubmitting(EventHandler`1<TestRunEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRunSubmittedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRunSubmittedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRunStartedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRunStartedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRunFinishedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRunFinishedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRunRemovedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRunRemovedEvent(TestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRunStateChangedEvent(TestRunStateEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRunStateChangedEvent(TestRunStateEventHandler value);
    [CompilerGeneratedAttribute]
public void add_TestResultMessageEvent(TestResultMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_TestResultMessageEvent(TestResultMessageEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestAddedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestAddedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRemovedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRemovedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestModifiedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestModifiedEvent(TestEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestStartedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestStartedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestFinishedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestFinishedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestResultAddedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestResultAddedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestResultRemovedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestResultRemovedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestResultModifiedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestResultModifiedEvent(TestResultEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestRunLoaded(MultiTestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestRunLoaded(MultiTestRunEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResultTestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResultTestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResultTestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResultTestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RunConfigurationAddedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RunConfigurationAddedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RunConfigurationRemovedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RunConfigurationRemovedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RunConfigurationModifiedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RunConfigurationModifiedEvent(RunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ActiveRunConfigurationChangedEvent(ActiveRunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ActiveRunConfigurationChangedEvent(ActiveRunConfigurationEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestListCategoryAddedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestListCategoryRemovedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestListCategoryModifiedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestListCategoryModifiedEvent(TestListCategoryEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ViewablePropertyAddedEvent(ViewablePropertyEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ViewablePropertyAddedEvent(ViewablePropertyEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestAndCategoryRelationsDroppedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestAndCategoryRelationsDroppedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestAndCategoryRelationsAddedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestAndCategoryRelationsAddedEvent(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestSaveAttemptEvent(TestSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestSaveAttemptEvent(TestSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TestUpdateAttemptEvent(TestUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TestUpdateAttemptEvent(TestUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CategorySaveAttemptEvent(CategorySaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CategorySaveAttemptEvent(CategorySaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CategoryUpdateAttemptEvent(CategoryUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CategoryUpdateAttemptEvent(CategoryUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RunConfigSaveAttemptEvent(RunConfigSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RunConfigSaveAttemptEvent(RunConfigSaveAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_RunConfigUpdateAttemptEvent(RunConfigUpdateAttemptEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_RunConfigUpdateAttemptEvent(RunConfigUpdateAttemptEventHandler value);
    public static RegistryKey get_RegistryRootForUI();
    public static void set_RegistryRootForUI(RegistryKey value);
    public static TestConfigKey get_ConfigRoot();
    public static void set_ConfigRoot(TestConfigKey value);
    protected virtual override void Finalize();
    private void InitTipDelayLoaders();
    public sealed virtual void Reset();
    public static string CrossColumnName(StorageElementType dataType, string propertyName);
    private static string GetDataTableNameFromStorageType(StorageElementType elementType);
    private static string CrossColumnName(string parentTableName, string parentColumnName);
    private static string CrossIdColumnName(string parentTableName);
    private bool IsValidVisiblePropertyDescriptor(IVisiblePropertyProvider propertyObject, PropertyDescriptor propDesc, bool addNewColumnGuid);
    private PropertyDescriptorCollection GetVisibleProperties(IVisiblePropertyProvider visiblePropertyProvider);
    private void AddRowAndColumnsToTable(StorageElementType objectType, IVisiblePropertyProvider propertyObject, DataRow& row, ViewablePropertyEventArgs vpEventArgs);
    private void AddRowAndColumnsToTable(StorageElementType objectType, IVisiblePropertyProvider propertyObject, DataRow& row, ViewablePropertyEventArgs vpEventArgs, Guid runId);
    private void AddRowAndColumnsToTable(StorageElementType objectType, IVisiblePropertyProvider propertyObject, DataRow& row, ViewablePropertyEventArgs vpEventArgs, Guid runId, AddToRow addToRow);
    private DataColumnCollection AddVisibleColumnToTable(StorageElementType objectType, string propName, PropertyDescriptor pd, ViewablePropertyEventArgs vpEventArgs);
    private static DataRow SelectRowById(DataTable table, Guid id);
    private static object SelectObjectById(DataTable table, Guid id);
    private static Guid GetObjectId(StorageElementType elementType, object obj);
    private DataTable GetDataTableFromStorageType(StorageElementType elementType);
    private DisposingReaderWriterLock GetLockFromStorageType(StorageElementType elementType);
    private void UpdateLinkInCategory(Guid catId, Link link, List`1<DataRow> tests, CachedCrossTableData crossTableData, TestListCategoryEventArgs modifiedCategoryEventArgs);
    private void UpdateLinksInCategories(TestId testId, TestListCategoryEventArgs modifiedCategoryEventArgs);
    public string get_CrossTestIdColumnName();
    private string get_CrossTestIdColumnNameNoLock();
    public string get_CrossCatIdColumnName();
    private string get_CrossCatIdColumnNameNoLock();
    public string get_CrossLinkIdColumnName();
    private string get_CrossLinkIdColumnNameNoLock();
    private void FireEventIgnoringExceptions(StorageElementType storage, MulticastDelegate del, object sender, EventArgs e);
    private void FireTestRunStateChangedEvent(Guid runId, RunState state);
    private void FireTestResultMessageEvent(Guid runId, TestResult resultMessage);
    internal bool get_Disposed();
    private bool IsSameStorage(ITestElement test1, ITestElement test2);
    public ITestElement[] LoadTests(string location, ProjectData projectData);
    public ITestElement[] LoadTests(string location, ProjectData projectData, TestConflictHandler vetoingHandler);
    public sealed virtual ITestElement[] LoadTests(IEnumerable`1<string> locations, ProjectData projectData);
    public ITestElement[] LoadTests(IEnumerable`1<string> locations, ProjectData projectData, TestConflictHandler vetoingHandler);
    private List`1<ITestElement> LoadTestsFromTipsHelper(IEnumerable`1<string> locations, ProjectData projectData);
    private static void FixTestEnabled(ITestElement test, Dictionary`2<Guid, bool> testIdToEnabledMap);
    private Dictionary`2<Guid, bool> GetEnabledUpdateBrokenLinks(List`1<Guid> testGuids);
    private void UpdateFromDelayedTests(TestListCategoryEventArgs ea);
    private static string GetCatIdWhereClause(Dictionary`2<TestListCategoryId, List`1<Link>> map);
    public TestListCategoryId[] GetAllDescendantCategoryIds(TestListCategoryId categoryId);
    private void GetAllDescendantCategoryIds(TestListCategoryId categoryId, List`1& descendants);
    private void ProcessRowsFromCrossTable(DataRow[] rows, Dictionary`2<TestListCategoryId, List`1<Link>> map);
    private string GetCrossIdWhereClause(CreateUpdateDelete op);
    private void CleanupDelayedTests();
    private void SaveTestInternal(TestId testId, ProjectData projectData);
    public void SaveTest(TestId testId, ProjectData projectData);
    public sealed virtual ITestElement UpdateTest(ITestElement test);
    public ITestElement RefreshTest(TestId testId, ProjectData projectData);
    public void RefreshTests(string storage, ProjectData projectData);
    public sealed virtual void ReleaseTest(TestId id);
    public void ObliterateTest(TestId id);
    public sealed virtual void ReleaseTests(string location);
    public sealed virtual ITip FindTipForTestType(TestType testType);
    public string GetTestTypeExtensionName(ITestElement element);
    public void ResetAllTips();
    public void ReleaseAllTests();
    public void ReleaseAllTestData(bool fireEvents);
    public sealed virtual ITestElement GetTest(TestId testId);
    public sealed virtual bool TryGetTest(TestId id, ITestElement& test);
    public bool ContainsAny(IEnumerable`1<TestId> ids, int numIds);
    public TestId[] GetTestParents(TestId testId);
    private TestId[] GetTestParentsNoLock(TestId testId);
    public bool IsChildOf(TestId testId, ITestAggregation parent);
    public void CheckAggregation(ITestAggregation aggregation);
    private void CheckAggregationNoLock(ITestAggregation aggregation, bool tryLoadingInnerTests, bool canModifyAggregation, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testEventArgs);
    public sealed virtual ITestElement AddTest(ITestElement test);
    public ITestElement AddOrUpdateTest(ITestElement test);
    private ITestElement AddOrUpdateTest(ITestElement test, bool throwIfDuplicate);
    public sealed virtual void AddTests(ICollection tests);
    public sealed virtual void UpdateTests(ICollection tests);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.ITmi.SaveTest(TestId testId);
    public sealed virtual void AddOrUpdateTests(ICollection tests);
    private void AddOrUpdateTests(ICollection tests, bool testMustExist, bool testCanExist);
    private void ReleaseTestsInternal(ICollection tests, bool throwIfNotFound);
    public sealed virtual void ReleaseTests(ICollection tests);
    public sealed virtual void AddManagedTestStorage(object manager, string storagePath);
    public sealed virtual void AddManagedTestStorage(object manager, string storagePath, TestType testType);
    public sealed virtual void ClearManagedTestStorage(object manager);
    public sealed virtual ITestElement[] GetTests();
    public sealed virtual TestRun[] GetTestRuns();
    public sealed virtual TestRunConfiguration[] GetTestRunConfigurations();
    public sealed virtual TestResult[] GetTestResults(TestRun run);
    public sealed virtual TestResult[] GetTestResults(TestRun run, ITestElement test);
    public sealed virtual ITestList[] GetTestLists();
    public sealed virtual ITestList[] GetTestListsForResults(TestRun run);
    public sealed virtual ITestElement[] GetTestsNotInAnyTestList();
    public sealed virtual ITestElement[] GetTestsNotInAnyTestList(TestRun run);
    private IList`1<TestId> GetEnabledTests(Filter filter);
    private void AddRelation(string relationName, DataTable parentTable, DataTable childTable);
    private void AddExpressionColumns(string relationName, StorageElementType parentData, StorageElementType dataType, bool checkForDuplicates);
    private void AddResultTableTestColumns();
    private static void CopyViewablePropertyDescriptors(StorageElementType sourceTable, DataColumn sourceColumn, StorageElementType destTable, DataColumn destColumn);
    private void RemoveRelationAndExpressionColumns(string relationName);
    private void CreateTestToCategoryRelationsAndExpressionColumns();
    private ICollection LoadTests(string location, ITip[] tips, ProjectData projectData);
    private void AddOrUpdateTest(ITestElement test, DataRow row, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testModifiedArgs, bool checkAggregations, bool tryLoadInnerTests);
    private void AddOrUpdateTest(ITestElement test, DataRow row, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testModifiedArgs, bool checkAggregations, bool tryLoadInnerTests, Boolean& wasAnyChangeMade);
    private void UpdateParentsForRunnableStateChange(Link childTest, bool runnable, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testModifiedArgs);
    private void FireTestEvents(TestEventArgs testAddedArgs, TestEventArgs testModifiedArgs, TestListCategoryEventArgs categoryModifiedArgs, ViewablePropertyEventArgs vpEventArgs);
    private DataRow SelectRowById(TestId id);
    private bool TryGetTestNoLocking(TestId testId, ITestElement& test);
    private ITestElement GetTestNoLocking(TestId testId);
    private static DataRow[] SelectRowsByLocation(DataTable table, string location, string sort);
    private void ReleaseTestInternal(TestId id, KeepBrokenLinks keepBrokenLinks, TestEventArgs testModifiedArgs, bool throwIfNotFound);
    private void ReleaseTestInternal(TestId id, List`1<DataRow> crossTestList, KeepBrokenLinks keepBrokenLinks, TestEventArgs testModifiedArgs, bool throwIfNotFound);
    private DataRow[] SelectRowsColocatedWithTest(TestId testId);
    private bool IsTestStorageManaged(string storagePath, TestType testType);
    private List`1<TestTypeInfo> GetTestTypesManagedInStorage(string storage);
    private List`1<TestTypeInfo> GetTestTypesNotManagedInStorage(string storage);
    private List`1<ITip> GetTipsFromTestTypeInfos(IList`1<TestTypeInfo> infos);
    private ITip[] FindTipsFromStorage(string storage);
    private ITip[] FindUnmanagedTipsFromStorage(string storage);
    private static void VerifyTestElementForValidity(ITestElement test);
    private bool CheckTrueForAllChildren(ITestAggregation test, Predicate`1<TestId> checker);
    private void CheckAggregation(ITestAggregation aggregation, Dictionary`2<TestId, Link> parents, Dictionary`2<TestId, TestId> visited, bool tryLoadInnerTests, bool canModifyAggregation, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testEventArgs);
    private static string LocateInnerTestRelativeStorage(Link innerTest, ITestAggregation aggregation);
    private ITestElement LoadInnerTest(Link innerTest, ITestAggregation aggregation, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testEventArgs);
    private void CheckTestContainedInAggregation(Link innerTest, ITestAggregation aggregation, Dictionary`2<TestId, Link> parents, Dictionary`2<TestId, TestId> visited, bool tryLoadTest, bool canModifyAggregation, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testEventArgs);
    private static Dictionary`2<Guid, object> GetUniqueChildren(ITestAggregation aggregation);
    private void UpdateChildToParentRelations(Guid innerTest, bool added, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testEventArgs);
    private void UpdateChildToParentRelations(ITestAggregation newAggregation, ITestAggregation oldAggregation);
    private void RemoveChildToParentRelation(Guid innerTest, Guid aggregation, bool missingInnerTest);
    private void AddChildToParentRelation(Guid innerTest, Guid aggregation, bool missingInnerTest);
    private void SetRunnableNoLock(ITestElement test, bool runnable, string reason, bool updateParents, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testEventArgs);
    private void SetRunnableNoLock(ITestElement test, DataRow testRow, bool runnable, string reason, bool updateParents, TestListCategoryEventArgs modifiedCategoryEventArgs, ViewablePropertyEventArgs vpEventArgs, TestEventArgs testEventArgs);
    private ITip GetTip(TestType testType);
    internal void TestStarting(TestResultId id, DateTime startTime);
    public void TestFinished(TestResultId id, DateTime endTime);
    private void UpdateRunStatisticsFromResult(TestRun run, TestResult result, bool countInnerTests);
    private DataRow SelectRowById(TestListCategoryId id);
    public TestListCategory[] LoadCategories(string location);
    public TestListCategory[] LoadCategories(string location, TestListCategoryConflictHandler idVetoingHandler, TestListCategoryConflictHandler nameVetoingHandler);
    private static TestListCategory[] PrioritizeCategoriesByParent(Dictionary`2<TestListCategoryId, TestListCategory> cats);
    public TestListCategory[] LoadCategoriesAndDependencies(string categoryFile, String[] testSearchPaths, String[] runConfigSearchPaths, bool tryOriginalLocation, TestConflictHandler testsHandler, TestListCategoryConflictHandler categoriesIdHandler, TestListCategoryConflictHandler categoriesNameHandler, RunConfigurationConflictHandler runConfigHandler, CannotFindLinkHandler cannotFindStorageHandler, ProjectData projectData);
    public void SaveCategories(string location);
    public void SaveCategories(string location, Filter filter);
    public TestListCategory AddCategory(TestListCategory category);
    public TestListCategory UpdateCategory(TestListCategory category);
    private TestListCategory UpdateCategory(TestListCategory category, bool checkForSpecialCategory);
    public void ReleaseCategory(TestListCategoryId id);
    public void ReleaseAllCategories();
    private TestListCategory GetCategoryNoLocking(TestListCategoryId id);
    public TestListCategory GetCategory(TestListCategoryId id);
    private TestListCategory AddOrUpdateCategory(OperationType operationType, TestListCategory category, TestListCategoryEventArgs modifiedEventArgs, TestEventArgs testModifiedEventArgs, ViewablePropertyEventArgs vpEventArgs, TestListCategoryConflictHandler idVetoingHandler, TestListCategoryConflictHandler nameVetoingHandler);
    private void AddOrUpdateCategoryCore(OperationType operation, TestListCategory oldCat, TestListCategory cat, DataRow row, TestListCategoryEventArgs modifiedCategoryEventArgs, TestEventArgs testModifiedEventArgs, ViewablePropertyEventArgs vpEventArgs);
    private void DeleteCategorizedTestFromCrossTableNotCareAboutEmptyCategoryRow(DataRow row, int testCount);
    private Dictionary`2<Guid, List`1<DataRow>> GetTestsByTestIdFromTestsAndCategoriesTable();
    private CachedCrossTableData GetCachedCrossTableData(bool obtainTestIdIndexOnly);
    private void AddLinkFromCategoryToCrossTable(TestListCategory cat, Link link, List`1<DataRow> tests, CachedCrossTableData crossTableData, bool fSearchForEmptyCat, TestEventArgs testModifiedEventArgs);
    private void UpdateLinkInCrossTable(DataRow row, Link link);
    private void ReleaseCategoryInternal(TestListCategoryId id, TestListCategoryEventArgs deletedCategoryArgs);
    private void DeleteRowsFromCrossTableForCategory(TestListCategoryId id);
    private void UpdateCategoryFullNameAndChildren(TestListCategory oldValue, DataRow row, TestListCategoryEventArgs eventArgs);
    private string GetCategoryFullName(TestListCategory category);
    private void CheckCategoriesForDanglingParentsAndLoops();
    private void AddStubCategories();
    public Filter get_SpecialCategoryFilter();
    private static bool IsSpecialCategory(TestListCategoryId id);
    private static int CategoryAndLinkCount(TestListCategory[] cats);
    private ICollection LoadLinkStorage(Link link, Dictionary`2<string, string> searchPaths, bool tryOriginalLocation, CannotFindLinkHandler cannotFindHandler, ProjectData projectData, LoadLinkStorageHelper loadHelper);
    public sealed virtual TestRunConfiguration GetTestRunConfiguration(TestRunConfigurationId id);
    public sealed virtual TestRunConfigurationId get_ActiveTestRunConfigurationId();
    public sealed virtual void set_ActiveTestRunConfigurationId(TestRunConfigurationId value);
    private DataRow SelectRowById(TestRunConfigurationId id);
    public TestRunConfiguration TryGetRunConfiguration(TestRunConfigurationId id);
    public TestRunConfiguration GetRunConfiguration(TestRunConfigurationId id);
    private TestRunConfiguration GetRunConfigurationNoLocking(TestRunConfigurationId id);
    private TestRunConfiguration GetRunConfigurationNoLocking(TestRunConfigurationId id, bool throwIfNotFound);
    public TestRunConfiguration[] GetRunConfigurationForCategories(TestListCategoryId[] categoryIds);
    public TestRunConfiguration[] GetRunConfigurationForTests(TestId[] testIds);
    private TestListCategory[] GetRootCategories(TestListCategoryId[] categoryIds);
    private TestListCategory[] GetRootCategories(TestId[] testIds);
    internal TestListCategory[] GetCategories(TestId testId);
    private TestListCategory[] GetRootCategories(TestId testId);
    private TestListCategory GetRootCategory(TestListCategoryId categoryId);
    private TestRunConfiguration[] GetRunConfigurationForRootCategories(TestListCategory[] rootCategories);
    public sealed virtual TestRunConfiguration GetActiveRunConfiguration();
    public void SetActiveRunConfiguration(TestRunConfigurationId configurationId);
    public void SetActiveRunConfiguration(TestRunConfiguration configuration);
    private void SetActiveRunConfiguration(TestRunConfiguration configuration, bool addAndSaveRunConfig);
    public bool IsActiveRunConfigurationSet();
    private TestRunConfigurationId GetActiveRunConfigurationId();
    private TestListCategory GetTestListCategoryContainingActiveRunConfiguration();
    public TestRunConfiguration LoadRunConfiguration(string storage);
    public TestRunConfiguration LoadRunConfiguration(string storage, RunConfigurationConflictHandler vetoingHandler);
    public void SaveRunConfiguration(TestRunConfigurationId id);
    public void AddRunConfiguration(TestRunConfiguration runConfiguration);
    public void UpdateRunConfiguration(TestRunConfiguration runConfiguration);
    public void UpdateRunConfiguration(TestRunConfiguration runConfiguration, bool doFireRunConfigUpdateAttemptEvent);
    private void UpdateRunConfigurationHelper(TestRunConfiguration runConfiguration, bool checkOnly);
    public void ReleaseRunConfiguration(TestRunConfigurationId id);
    public void ReleaseAllRunConfigurations();
    private void AddOrUpdateRunConfiguration(TestRunConfiguration runConfiguration, DataRow row);
    public ViewablePropertyDescriptor[] GetViewableProperties(StorageElementType elementType);
    public ViewablePropertyDescriptor GetViewableProperty(StorageElementType elementType, StorageElementType originatingType, string propertyName);
    private static void CheckThatColumnExistsInTable(DataTable table, string columnName);
    public Object[] GetViewablePropertyValues(StorageElementType elementType, Filter filter, string propertyName);
    public LockingDataView GetData(StorageElementType elementType, Filter filter);
    private static string ReplaceSqlChars(string str);
    public object TestObjectIdFromRow(StorageElementType dataType, DataRow row);
    public int GetObjectCount(StorageElementType dataType, Filter filter);
    public Object[] GetObjectIds(StorageElementType dataType, Filter filter);
    public Guid[] GetObjectIdsAsGuids(StorageElementType dataType, Filter filter);
    public Object[] GetObjects(StorageElementType dataType, Filter filter);
    private static T[] GetObjectsNoLockT(DataTable table, Filter filter, string objectColumnName);
    public T[] GetObjectsT(StorageElementType dataType, Filter filter);
    internal T[] GetObjectsT(StorageElementType dataType, Filter filter, bool getTestObjects);
    public ViewablePropertyDescriptor ConvertToCrossTable(ViewablePropertyDescriptor descriptor);
    public sealed virtual TestRun CreateRun(TestId[] testIds, TestListCategoryId[] categories, TestRunConfiguration runConfiguration);
    public TestRun CreateRun(Guid runId, TestId[] testIds, TestListCategoryId[] categories, TestRunConfiguration runConfiguration);
    private TestEntry CreateTestEntryFromTestId(TestId testId, TestListCategoryId catId, Hashtable tests, Hashtable cats);
    public TestRun CreateRun(TestResultId[] results);
    private TestRun CreateRun(TestResultId[] resultIds, bool reassignExecIds);
    private void ReassignExecIds(TestEntry entry, TestExecId parent);
    private void CopyTestForEntry(TestEntry entry, Hashtable newTests, Hashtable oldTests);
    internal void RaiseTestRunSubmitting(Guid runId);
    internal void RaiseTestRunSubmitted(Guid runId);
    internal void TestRunStarted(Guid runId);
    internal void TestRunFinished(Guid runId);
    internal void TestRunAborted(Guid runId);
    internal void TestRunStopped(Guid runId);
    internal void TestRunTimeout(Guid runId);
    internal void TestRunDisconnected(Guid runId);
    internal void TestRunEndInternal(Guid runId, TestOutcome runOutcome, TestOutcome newPendingTestsOutcome, TestOutcome newInProgressTestsOutcome, TestRunEndAction flags);
    private void CloseOutDataCollectorSession(TestRun run);
    private void UpdateTestRunAndTestCaseResults(TestRun testRun);
    private void RemoveDataCollectorFiles(HashSet`1<string> files, IEnumerable`1<CollectorDataEntry> collectorDataEntries);
    private void UpdatePassedResultsToPassedButRunAborted(TestRun run, TestResultEventArgs& trea);
    private bool UpdatePassedResultsInAggregationToPassedButRunAborted(TestRun run, TestResultAggregation aggr);
    internal string GetTestRunTitle(Guid runId);
    private void UpdatePendingResults(TestRun run, TestOutcome newOutcomeForPendingResults, TestOutcome newInProgressTestsOutcome, TestResultEventArgs& eventArgs);
    public sealed virtual TestRun GetTestRun(Guid runId);
    private TestRun GetTestRunNoLock(Guid runId);
    public bool HasRunPassed(Guid runId);
    private void TestRunEndUpdateProxies(TestRun run, TestRunEndAction flags);
    public void RemoveRun(Guid runId);
    internal void DisconnectRun(Guid runId);
    public Exception[] ObliterateRun(Guid runId);
    public Exception[] ObliterateRun(Guid runId, bool notifyTips);
    private DataRow GetRunRowForRemove(Guid runId);
    private DataRow GetRunRowForDisconnect(Guid runId);
    private void RemoveRunFromMemoryInternal(DataRow runRow, TestResultEventArgs trea, ResultTestListCategoryEventArgs rtcea);
    private DataRow[] SelectResultTableRowsForRun(StorageElementType elementType, Guid runId);
    private Guid[] RemoveRowsFromResultTableForRun(StorageElementType elementType, Guid runId);
    private void CreateResultRelationsAndExpressionColumns();
    private DataRow SelectRowById(TestResultId id);
    public void AddResult(TestMessage msg);
    public void AddDataCollectionMessage(DataCollectionTextMessage dataCollectorMessage);
    public void InsertResult(TestResult result);
    private TestResult InsertResultInternal(TestResult result, TestResultConflictHandler vetoingHandler, ViewablePropertyEventArgs vpEventArgs);
    public TestResult[] LoadResults(string location);
    public TestResult[] LoadResults(string location, TestRunConflictHandler runConflict, TestResultConflictHandler resultConflict);
    private void SetFullNamesOnLoadedCategories(TestRun run);
    private void SetFullNamesOnLoadedCategories(Dictionary`2<TestListCategoryId, List`1<TestListCategory>> tree, TestListCategoryId id, string prefix);
    public void UpdateResults(string location, Guid runId);
    public void SaveResults(string location, Guid runId);
    private void SaveResults(string location, Guid runId, bool changeDeploymentDir);
    private static string GetDeploymentDirectoryForRunToSave(string resultFileToSaveLocation, string runName);
    public void SaveResults(string location, TestResultId[] resultIds);
    public sealed virtual TestResult GetResult(TestResultId id);
    internal TestResult GetResult(TestResultId id, bool clone);
    private TestResult GetResultNoLock(TestResultId id);
    internal ITestElement GetResultTest(TestResultId id);
    internal TestId GetResultTestId(TestResultId id);
    internal string GetResultTestName(TestResultId id);
    internal TestType GetResultTestType(TestResultId id);
    internal TestOutcome GetResultTestOutcome(TestResultId id);
    internal TestResultId GetResultId(TestResultId id);
    internal TestListCategoryId GetResultCategory(TestResultId id);
    public void ReleaseResults();
    public void RemoveResult(TestResultId id);
    private static void MergeTmiResults(TestResult merged, TestResult inMemory);
    private void AddOrUpdateResult(TestMessage trm, DataRow row, ViewablePropertyEventArgs vpEventArgs, bool shouldCommit);
    private void AddOrUpdateResult(TestMessage tm, DataRow row, ViewablePropertyEventArgs vpEventArgs, bool shouldCommit, AddToRow addToRow);
    private void AddOrUpdateRunInfo(TestRun run, ResultTestListCategoryEventArgs rtcea);
    public void WriteWarning(object sender, string warning);
    public static ConflictAction DefaultTestConflictHandler(ITestElement oldElementInMemory, ITestElement newElement);
    public static ConflictAction DefaultTestResultConflictHandler(TestResult oldElementInMemory, TestResult newElement);
    public static ConflictAction DefaultRunConfigurationConflictHandler(TestRunConfiguration oldElementInMemory, TestRunConfiguration newElement);
    public static ConflictAction DefaultTestListCategoryConflictHandler(TestListCategory oldElementInMemory, TestListCategory& newElement);
    public static ConflictAction DefaultRunConflictHandler(TestRun oldElementInMemory, TestRun newElement);
    public static CannotFindFileAction DefaultCannotFindLinkHandler(Link link, String& newLocation, Boolean& addDirectoryToSearchPaths);
    private void OnTestTypeWarning(object sender, WarningEventArgs e);
    private TestTypeInfoCollection get_TestTypeInfoTable();
    public TestType[] get_TestTypes();
    public TestTypeInfo[] get_TestTypeInfoSet();
    public TestTypeInfo[] GetTestTypeInfosForExtension(string ext);
    public TestTypeInfo[] TryGetTestTypeInfosForExtension(string ext);
    public bool IsATestExtension(string ext);
    public TestTypeInfo GetTestTypeInfoForTestType(TestType testType);
    public ControllerProxy GetControllerProxy(TestRunConfiguration testRunConfiguration, TestRun testRun);
    public ControllerProxy GetControllerProxy(Uri controllerUri);
    public ControllerProxy GetControllerProxy(Guid runId);
    public bool RunHasControllerProxy(Guid runId);
    public bool TryGetControllerProxy(Guid runId, ControllerProxy& proxy);
    private bool GetControllerProxyInternal(Guid runId, bool throwIfNotFound, ControllerProxy& proxy);
    private bool CheckForTestServiceConfiguration(TestRunConfiguration testRunConfiguration);
    private ControllerProxy GetControllerProxyNoLock(Uri controllerUri);
    internal void AddTestRun(TestRun run);
    internal void AddTestRun(TestRun run, bool convertDeploymentDirToLocal);
    internal void CreateInitialNotRunResults(TestRun run);
    internal void ConfigureSession(TestRun run);
    internal void SetControllerProxy(Guid runId, ControllerProxy proxy);
    public Guid get_LocalRunId();
    internal void set_LocalRunId(Guid value);
    public bool get_IsLocalRunRunning();
    internal bool get_IsLocalRunRunningUnderDebugger();
    internal void set_IsLastLocalRunUnderDebugger(bool value);
    internal void TestRunTimedOut(Guid runId);
    internal void FileCopyMessageArrived(FileCopyTestResultMessage message);
    private void ProcessFileCopyMessageArrivedException(TestRun run, Exception e);
    private void FireResultEvents(TestResultEventArgs trea, ResultTestListCategoryEventArgs rtcea, ViewablePropertyEventArgs vpea);
    private void FireRemoveRunEvents(TestRunEventArgs rea, TestResultEventArgs trea, ResultTestListCategoryEventArgs rtcea);
    private void EnsureNoActiveRuns();
    internal void TestResultMessageArrived(TestResult resultMessage);
    internal void TestRunStateMessageArrived(RunStateEvent message);
    private bool UpdateTestRunState(Guid runId, RunState newState);
    public RunState GetTestRunState(Guid runId);
    internal bool get_FireQueueRunEvents();
    private void set_FireQueueRunEvents(bool value);
    public IDebugTestCallback get_DebugCallback();
    public void set_DebugCallback(IDebugTestCallback value);
    internal void DebugRequestMessageArrived(DebugRequestMessage message);
    public sealed virtual void Dispose();
    public void Dispose(bool explicitDispose);
    private void CloseWarningEventListener();
    internal AggregationManager get_AggregationManager();
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.ITmiInternal.SubscribeToTestRunnerEvents(EventHandler`1<TestRunEventArgs> runStartedHandler, EventHandler`1<TestRunEventArgs> runCompletedHandler, EventHandler`1<TestResultEventArgs> testStartedHandler, EventHandler`1<TestResultEventArgs> testCompletedHandler);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.ITmiInternal.UnSubscribeFromTestRunnerEvents(EventHandler`1<TestRunEventArgs> runStartedHandler, EventHandler`1<TestRunEventArgs> runCompletedHandler, EventHandler`1<TestResultEventArgs> testStartedHandler, EventHandler`1<TestResultEventArgs> testCompletedHandler);
    private sealed virtual override IControllerProxy Microsoft.VisualStudio.TestTools.Common.ITmiInternal.GetControllerProxy(Uri controllerUri);
    private sealed virtual override IControllerProxy Microsoft.VisualStudio.TestTools.Common.ITmiInternal.GetControllerProxy(Guid runId);
    [CompilerGeneratedAttribute]
private void <.ctor>b__263_0(object sender, EventArgs`1<DataCollectionTextMessage> args);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.TmiFactory : object {
    public sealed virtual ITmiInternal Create(EventHandler`1<WarningEventArgs> warningEventHandler);
}
public class Microsoft.VisualStudio.TestTools.TestManagement.UnexpectedTestTypeException : InvalidDataInStorageException {
    public UnexpectedTestTypeException(Type expectedType, string storage);
    public UnexpectedTestTypeException(string msg);
    public UnexpectedTestTypeException(string msg, Exception inner);
    private UnexpectedTestTypeException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.UpdateAttemptException : SaveOrUpdateAttemptException {
    public UpdateAttemptException(string msg);
    public UpdateAttemptException(string msg, Exception inner);
    private UpdateAttemptException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.ViewablePropertyDescriptor : object {
    private PropertyDescriptor m_propertyDesc;
    private Type m_dbColumnType;
    private string m_dbColumnName;
    private StorageElementType m_objectType;
    private StorageElementType m_originatingObjectType;
    public string ColumnName { get; }
    public Type ColumnType { get; }
    public StorageElementType ObjectType { get; }
    public StorageElementType OriginatingObjectType { get; }
    public PropertyDescriptor Descriptor { get; }
    internal ViewablePropertyDescriptor(string columnName, Type columnType, PropertyDescriptor pd, StorageElementType objectType, StorageElementType originatingObjectType);
    public string get_ColumnName();
    public Type get_ColumnType();
    public StorageElementType get_ObjectType();
    public StorageElementType get_OriginatingObjectType();
    public PropertyDescriptor get_Descriptor();
}
internal class Microsoft.VisualStudio.TestTools.TestManagement.ViewablePropertyEventArgs : EventArgs {
    private List`1<ViewablePropertyDescriptor> m_entries;
    public ViewablePropertyDescriptor[] ViewableProperties { get; }
    public int Count { get; }
    internal ViewablePropertyEventArgs(ViewablePropertyDescriptor property);
    public ViewablePropertyDescriptor[] get_ViewableProperties();
    public int get_Count();
    internal void Add(ViewablePropertyDescriptor property);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
