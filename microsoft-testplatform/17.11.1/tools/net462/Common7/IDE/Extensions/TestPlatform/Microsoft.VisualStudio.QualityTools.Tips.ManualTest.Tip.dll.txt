internal interface Microsoft.VisualStudio.TestTools.TestTypes.Manual.IManualTestFormatProvider {
    public string ManualTestFileExtension { get; }
    public abstract virtual string get_ManualTestFileExtension();
    public abstract virtual bool IsValidManualTest(string path);
    public abstract virtual ManualTest LoadFromFile(string path);
    public abstract virtual void SaveToFile(string path, ManualTest test);
}
internal interface Microsoft.VisualStudio.TestTools.TestTypes.Manual.IManualTestService {
    public abstract virtual bool IsTestBeingProcessed(TestResultId Id);
    public abstract virtual ManualTestResult GetPendingManualTestResult(Guid runId);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Manual.ManualTestFormatProviderService : object {
    private Dictionary`2<string, IManualTestFormatProvider> m_testFormatToProviderMap;
    public IManualTestFormatProvider GetProviderForExtension(string extension);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Manual.ManualTestTextFormatProvider : object {
    public string ManualTestFileExtension { get; }
    public sealed virtual string get_ManualTestFileExtension();
    public sealed virtual bool IsValidManualTest(string path);
    public sealed virtual ManualTest LoadFromFile(string path);
    public sealed virtual void SaveToFile(string path, ManualTest test);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Manual.ManualTestTip : object {
    public static string WordFormatManualTestExtension;
    public static string TextFormatManualTestExtension;
    private ManualTestFormatProviderService m_formatProviderService;
    public TestType TestType { get; }
    public ManualTestTip(ITmi tmiInstance);
    public sealed virtual TestType get_TestType();
    public sealed virtual ICollection Load(string location, ProjectData projectData, IWarningHandler warningHandler);
    public sealed virtual void Save(ITestElement[] tests, string location, ProjectData projectData);
    public sealed virtual TestResult MergeResults(TestResult resultInMemory, TestResultMessage newResultMessage);
    public sealed virtual void Unload(string location, IWarningHandler warningHandler);
    public sealed virtual void Reset();
    public sealed virtual void BeforeRemoveTestRun(Guid runId);
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Manual.ManualTestWordFormatProvider : object {
    private static string m_testIdPropertyName;
    private static Dictionary`2<string, string> m_propertyNameMapping;
    public string ManualTestFileExtension { get; }
    private static ManualTestWordFormatProvider();
    private static Dictionary`2<string, string> GetInitialPropertyNameMapping();
    public sealed virtual string get_ManualTestFileExtension();
    public sealed virtual bool IsValidManualTest(string path);
    public sealed virtual ManualTest LoadFromFile(string path);
    public sealed virtual void SaveToFile(string path, ManualTest test);
    public static void SaveProperties(ITestElement test, IList properties);
    private static string GetTestId(string path);
    private static void InternalSaveProperties(ITestElement test, IList properties);
    private static TypeConverter GetConverter(PropertyDescriptor property);
    private static string GetWordDocumentPropertyName(string objectPropertyName);
    private static string GetObjectPropertyName(string wordPropertyName);
    private static bool IsPropertyPersistable(PropertyDescriptor property);
}
