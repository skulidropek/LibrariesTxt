internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.ClearThreadPrincipal : object {
    private IPrincipal m_previousPrincipal;
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.ConsoleOutputRedirector : object {
    private static ConsoleOutputRedirector s_activeRedirector;
    private bool m_separateThreadOutput;
    private TextWriter m_redirectStdOut;
    private TextWriter m_redirectStdErr;
    private TextWriter m_origStdOut;
    private TextWriter m_origStdErr;
    private TextWriterTraceListener m_traceListener;
    private ConsoleOutputRedirector m_previousRedirector;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_disposeDone;
    private object m_lockNode;
    private static string traceListenerGUID;
    public string StdOut { get; }
    public string StdErr { get; }
    public string DebugTrace { get; }
    public ConsoleOutputRedirector(bool separateThreadOutput);
    public ConsoleOutputRedirector(bool separateThreadOutput, bool isUnregisteredThreadOutputCollected);
    protected virtual override void Finalize();
    public string get_StdOut();
    public string get_StdErr();
    public string get_DebugTrace();
    public void BeginRedirectionForCurrentThread();
    public void EndRedirectionForCurrentThread();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.DataCollectorNotificationsHelper : MarshalByRefObject {
    [ThreadStaticAttribute]
private static ITestElement s_currentTest;
    [ThreadStaticAttribute]
private static DataCollectorNotificationsHelper s_testFailedHelper;
    private DataCollectorNotifications m_notifications;
    public DataCollectorNotificationsHelper(DataCollectorNotifications notifications);
    public static bool RaiseTestFailedEvent(TestCaseFailureType failureType);
    public static void SetupCurrentThread(DataCollectorNotificationsHelper notificationsHelper, ITestElement test);
    public virtual object InitializeLifetimeService();
    private void RaiseTestFailedEvent(ITestElement test, TestCaseFailureType failureType);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.DataDrivenTestData : object {
    internal List`1<TestResult> InnerResults;
    internal TestResultCounter Counters;
    internal Stopwatch Stopwatch;
    internal DateTime InnerTestStartTime;
    internal string InnerTestDataRowInfo;
    internal bool EnableUpdate;
    internal object Lock;
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.DataDrivenTestException : EqtException {
    public DataDrivenTestException(EqtMessage message);
    public DataDrivenTestException(EqtMessage message, Exception inner);
    protected DataDrivenTestException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.DefaultTestMethodDecorator : object {
    private TestMethodDecoratorHandler m_handler;
    internal DefaultTestMethodDecorator(TestMethodDecoratorHandler handler);
    public sealed virtual TestMethodInvokerResult Invoke(Object[] args);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.GlobalLock : object {
    public static GlobalLock Instance;
    private static GlobalLock();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.InternalAccessException : EqtException {
    public InternalAccessException(EqtMessage message);
    public InternalAccessException(EqtMessage message, Exception inner);
    protected InternalAccessException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.InternalException : EqtException {
    public InternalException(EqtMessage message);
    public InternalException(EqtMessage message, Exception inner);
    protected InternalException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.RandomIntPermutation : object {
    private Int32[] m_objects;
    public RandomIntPermutation(int numberOfObjects);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.RunLevelUnitTestAdapterContext : UnitTestAdapterContext {
    internal RunLevelUnitTestAdapterContext(ITestContext testContext, ITestElement test, Guid runId, Dictionary`2<string, object> runContextProperties);
    public virtual void WriteLine(string format, Object[] args);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.SequentialIntPermutation : object {
    private int m_numberOfObjects;
    public SequentialIntPermutation(int numberOfObjects);
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.SharedAssemblyInfo : object {
    internal MethodInfo assemblyInit;
    internal MethodInfo assemblyCleanup;
    internal Dictionary`2<Type, SharedTypeInfo> types;
    internal string error;
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.SharedTypeInfo : object {
    internal PropertyInfo testContextProperty;
    internal ConstructorInfo constructor;
    internal MethodInfo testInit;
    internal MethodInfo testCleanup;
    internal MethodInfo classInit;
    internal MethodInfo classCleanup;
    internal Queue`1<MethodInfo> baseTestInit;
    internal Queue`1<MethodInfo> baseTestCleanup;
    internal bool used;
    internal SharedAssemblyInfo assemblyInfo;
    internal string error;
    internal UnitTestExtensionData extension;
    [CompilerGeneratedAttribute]
private bool <IsExtensionInitializeChecked>k__BackingField;
    internal bool IsExtensionInitializeChecked { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_IsExtensionInitializeChecked();
    [CompilerGeneratedAttribute]
internal void set_IsExtensionInitializeChecked(bool value);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.TestData : object {
    private UnitTestElement m_test;
    private ITestContext m_testContext;
    private UnitTestExecuter m_executer;
    private bool m_isTestStopped;
    private DataDrivenTestData m_dataDrivernTestData;
    internal UnitTestElement Test { get; }
    internal ITestContext TestContext { get; }
    internal bool IsTestStopped { get; internal set; }
    internal UnitTestExecuter Executer { get; internal set; }
    internal DataDrivenTestData DataDrivenTestData { get; internal set; }
    internal TestData(UnitTestElement test, ITestContext testContext);
    internal UnitTestElement get_Test();
    internal ITestContext get_TestContext();
    internal bool get_IsTestStopped();
    internal void set_IsTestStopped(bool value);
    internal UnitTestExecuter get_Executer();
    internal void set_Executer(UnitTestExecuter value);
    internal DataDrivenTestData get_DataDrivenTestData();
    internal void set_DataDrivenTestData(DataDrivenTestData value);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.TestFailedException : Exception {
    protected TestFailedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.TestMethodDecoratorHandler : MulticastDelegate {
    public TestMethodDecoratorHandler(object object, IntPtr method);
    public virtual TestMethodInvokerResult Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual TestMethodInvokerResult EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.TestThreadPrincipalRestorer : object {
    [ThreadStaticAttribute]
private static IPrincipal m_testThreadPrincipal;
    private IPrincipal m_previousPrincipal;
    public sealed virtual void Dispose();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.ThreadSafeStringWriter : StringWriter {
    private object m_lock;
    public ThreadSafeStringWriter(IFormatProvider formatProvider);
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public virtual string ToString();
    public virtual void Write(char value);
    public virtual void Write(string value);
    public virtual void Write(Char[] buffer, int index, int count);
    private static void InvokeBaseClass(Action action);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(bool disposing);
    [CompilerGeneratedAttribute]
private void <Close>b__3_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__1(char value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__2(string value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__3(Char[] buffer, int index, int count);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter : MarshalByRefObject {
    private IRunContext m_runContext;
    private Guid m_runId;
    private ReaderWriterLock m_stopRunLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) m_runStopped;
    private Dictionary`2<string, TestExecutionInfo> m_assemblyExecutionDefaultDomainMap;
    private Dictionary`2<string, TestExecutionInfo> m_assemblyExecutionNewDomainMap;
    private Dictionary`2<TestExecId, ITestElement> m_stoppedTests;
    private AssemblyResolver m_assemblyResolver;
    private IWarningHandler m_log;
    private ConsoleOutputRedirector m_testOutputRedirector;
    private bool m_useMultipleCpus;
    [CompilerGeneratedAttribute]
private DataCollectorNotifications <DataCollectors>k__BackingField;
    public bool SupportsParallelTestExecution { get; }
    public DataCollectorNotifications DataCollectors { get; public set; }
    protected virtual override void Finalize();
    public sealed virtual void Initialize(IRunContext runContext);
    public sealed virtual void Cleanup();
    private TestExecutionInfo CreateAppDomain(string codeBase);
    private TestExecutionInfo GetInfoForAssembly(UnitTestElement test, bool isLoadTest);
    private string GetCodeBase(UnitTestElement test);
    private void OnUnhandledException(object target, UnhandledExceptionEventArgs args);
    public sealed virtual void Run(ITestElement testElement, ITestContext testContext);
    private void Run(ITestElement testElement, ITestContext testContext, bool isLoadTest);
    private void HandleError(ITestContext testContext, UnitTestElement test, Exception ex, bool fromThreadAbort);
    public sealed virtual void PreTestRunFinished(IRunContext runcontext);
    public sealed virtual void TestTimeout(ITestElement test);
    public sealed virtual void StopTestRun();
    public sealed virtual void AbortTestRun();
    public sealed virtual void PauseTestRun();
    public sealed virtual void ResumeTestRun();
    public sealed virtual void ReceiveMessage(object obj);
    private void CallStopForAllRunners(TestOutcome outcome);
    private bool GetTestStopped(ITestElement test);
    private void SetTestStopped(ITestElement test);
    public sealed virtual void LoadRun(ITestElement testElement, ITestContext testContext);
    public sealed virtual bool get_SupportsParallelTestExecution();
    public virtual object InitializeLifetimeService();
    [CompilerGeneratedAttribute]
public sealed virtual DataCollectorNotifications get_DataCollectors();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DataCollectors(DataCollectorNotifications value);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapterContext : TestContext {
    private ITestContext m_testContext;
    private ITestElement m_test;
    private Dictionary`2<string, object> m_properties;
    private Guid m_runId;
    private EqtStringCollection m_resultFiles;
    private Dictionary`2<string, Stopwatch> m_activeTimers;
    private List`1<TimerResult> m_completedTimers;
    private DataRow m_dataRow;
    private DbConnection m_dataConnection;
    private UnitTestResult m_currentResult;
    protected Guid RunId { get; }
    protected ITestContext TestContext { get; }
    internal EqtStringCollection ResultFiles { get; }
    public IDictionary Properties { get; }
    public DataRow DataRow { get; }
    public DbConnection DataConnection { get; }
    public UnitTestOutcome CurrentTestOutcome { get; }
    internal UnitTestAdapterContext(ITestContext testContext, ITestElement test, Guid runId, Dictionary`2<string, object> runContextProperties);
    protected Guid get_RunId();
    protected ITestContext get_TestContext();
    internal EqtStringCollection get_ResultFiles();
    internal TimerResult[] GetFinalTimerResults();
    public virtual void WriteLine(string format, Object[] args);
    public virtual void BeginTimer(string timerName);
    public virtual void EndTimer(string timerName);
    public virtual void AddResultFile(string fileName);
    public virtual IDictionary get_Properties();
    public virtual DataRow get_DataRow();
    public virtual DbConnection get_DataConnection();
    internal void SetDataRow(DataRow dataRow);
    internal void SetDataConnection(DbConnection connection);
    internal void SetCurrentTestResult(UnitTestResult result);
    private void InitTestContext(Dictionary`2<string, object> runContextProperties);
    internal void UpdateTestProperties();
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    private UnitTestOutcome GetUnitTestOutcome(TestOutcome outcome);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestDataCursor : object {
    private IEnumerable`1<int> m_permutation;
    private IEnumerator m_enumerator;
    private TestDataConnection m_connection;
    private DataTable m_table;
    private DataAccessMethod m_dataAccessMethod;
    public DbConnection Connection { get; }
    public DataTable Table { get; }
    public UnitTestDataCursor(TestDataConnection connection, string tableName, DataAccessMethod dataAccessMethod);
    public DbConnection get_Connection();
    public DataTable get_Table();
    public int GetNextIndex();
    private void InitializePermutation();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestDataManager : object {
    private Dictionary`2<string, TestDataConnection> m_connections;
    private Dictionary`2<TestDataConnection, Dictionary`2<string, DataTable>> m_tables;
    private Dictionary`2<Guid, UnitTestDataCursor> m_cursors;
    private TestDataConnectionFactory m_connectionProvider;
    private object m_lock;
    public UnitTestDataManager(TestDataConnectionFactory connectionProvider);
    public UnitTestDataCursor GetCursor(UnitTestElement test);
    private TestDataConnection GetConnection(string providerName, string connectionString, List`1<string> dataFolders);
    public void Clear();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestExecuter : object {
    private UnitTestElement m_test;
    private Type m_type;
    private ConstructorInfo m_constructor;
    private MethodInfo m_initMethod;
    private MethodInfo m_cleanupMethod;
    private MethodInfo m_disposeMethod;
    private Stack`1<MethodInfo> m_initMethodStack;
    private Queue`1<MethodInfo> m_cleanupMethodQueue;
    private MethodInfo m_testMethod;
    private PropertyInfo m_testContextProperty;
    private UnitTestAdapterContext m_userContext;
    private MethodInfo m_classInitMethod;
    private MethodInfo m_classCleanupMethod;
    private MethodInfo m_assemblyInitMethod;
    private MethodInfo m_assemblyCleanupMethod;
    private ExpectedExceptionBaseAttribute m_expectedException;
    private Object modreq(System.Runtime.CompilerServices.IsVolatile) m_instance;
    private UnitTestResult m_result;
    private Stopwatch m_timer;
    private object m_timerLock;
    private static Hashtable m_typeCache;
    private static object m_typeCacheLock;
    private UnitTestRunner m_runner;
    private ITestContext m_testContext;
    private Guid m_runId;
    private static string TestContextPropertyName;
    private static Dictionary`2<Assembly, SharedAssemblyInfo> m_sharedAssemblyInfoCache;
    public static object m_sharedTestInfoCacheLock;
    private ConsoleOutputRedirector m_redirector;
    private object m_redirectorLock;
    private bool m_createdRedirector;
    private bool m_shouldTraceVerbose;
    private bool m_initialized;
    private static object m_coverageFilesLock;
    private static Dictionary`2<string, string> m_coverageFiles;
    private static string StrongNameFailureHResult;
    private IRunContext m_runContext;
    private bool m_traceExecutionSequence;
    private DefaultTestMethodDecorator m_defaultTestMethodDecorator;
    internal UnitTestExecuter(UnitTestElement test, ITestContext testContext, UnitTestAdapterContext userContext, Guid runId, Dictionary`2<string, object> runContextProperties, IRunContext runContext, bool traceExecutionSequence);
    private static UnitTestExecuter();
    internal void Initialize(UnitTestResult result, UnitTestRunner runner, ConsoleOutputRedirector redirector);
    internal void Execute(UnitTestResult result);
    private static void ProcessAbortedTest(TestResult result);
    private void ResolveTestContext(SharedTypeInfo typeInfo);
    private void ResolveMethods();
    private void ResolveTestMethod();
    internal static bool HasAsyncStateMachineAttribute(MethodInfo methodInfo);
    private MethodInfo ResolveTestMethodHelper(string methodName);
    private static void ValidateMethod(Type attributeType, MethodInfo testMethod, string duplicateError, Type[] parameterTypes, Type returnType, bool isPublic, bool isStatic, MethodInfo& method, String& error);
    private SharedAssemblyInfo GetAssemblyInfo(Assembly assembly);
    private static bool IsInterestingMethod(MethodInfo method);
    private SharedTypeInfo GetTypeInfo(Type type);
    private SharedTypeInfo GetTypeInfo(Type type, bool checkAlreadyExaminedType);
    private void ExecuteTest();
    internal void GetConsoleOutput();
    internal UnitTestResult GetPartialResult();
    private void SetTestContext();
    private void CreateTestClassInstance();
    private void RunClassInitializeMethod();
    private void SetClassCleanupNoLock(UnitTestExecution extensionFrameworkExecution);
    private void RunExtensionInitialize();
    private SharedTypeInfo GetTypeInfoForExtensionAssemblyMethod(MethodInfo assemblyMethod);
    private void RunExtensionInitializeHelper(SharedTypeInfo typeInfo);
    private void RunAssemblyInitializeMethod();
    private void RunInitializeMethod();
    private void RunTestMethod();
    private TestMethodInvokerResult DefaultTestMethodInvoke(Object[] args);
    private bool IsCodeCoverageFile(string fileNameOnly);
    private void HandleCodeCoverageSigningException(Exception ex);
    private void HandleMethodException(Exception ex);
    private void SetCurrentOutcome(TestOutcome defaultNewOutcome);
    internal void StopTestRun();
    private void RunCleanupMethod();
    private void CopyResultFiles();
    private void SetResultDuration();
    private Type GetType(UnitTestElement unitTest, string type);
    private string GetExceptionMessage(Exception ex);
    private string GetExceptionStackTrace(Exception ex);
    private UnitTestExecution GetExtensionFrameworkExecution(MethodInfo method);
    private UnitTestExecution GetExtensionFrameworkExecution(Type type);
    private void TraceExecution(string msg, Object[] args);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestExecution : TestExecution {
    private IRunContext m_runContext;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeAssemblyInitializeEventArgs> BeforeAssemblyInitialize;
    [CompilerGeneratedAttribute]
private EventHandler`1<AfterAssemblyInitializeEventArgs> AfterAssemblyInitialize;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeAssemblyCleanupEventArgs> BeforeAssemblyCleanup;
    [CompilerGeneratedAttribute]
private EventHandler`1<AfterAssemblyCleanupEventArgs> AfterAssemblyCleanup;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeClassInitializeEventArgs> BeforeClassInitialize;
    [CompilerGeneratedAttribute]
private EventHandler`1<AfterClassInitializeEventArgs> AfterClassInitialize;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeClassCleanupEventArgs> BeforeClassCleanup;
    [CompilerGeneratedAttribute]
private EventHandler`1<AfterClassCleanupEventArgs> AfterClassCleanup;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeTestInitializeEventArgs> BeforeTestInitialize;
    [CompilerGeneratedAttribute]
private EventHandler`1<AfterTestInitializeEventArgs> AfterTestInitialize;
    [CompilerGeneratedAttribute]
private EventHandler`1<BeforeTestCleanupEventArgs> BeforeTestCleanup;
    [CompilerGeneratedAttribute]
private EventHandler`1<AfterTestCleanupEventArgs> AfterTestCleanup;
    [CompilerGeneratedAttribute]
private EventHandler`1<OnTestStoppingEventArgs> OnTestStopping;
    public object RunContext { get; }
    internal UnitTestExecution(IRunContext runContext);
    public virtual object get_RunContext();
    [CompilerGeneratedAttribute]
public virtual void add_BeforeAssemblyInitialize(EventHandler`1<BeforeAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_BeforeAssemblyInitialize(EventHandler`1<BeforeAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_AfterAssemblyInitialize(EventHandler`1<AfterAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_AfterAssemblyInitialize(EventHandler`1<AfterAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_BeforeAssemblyCleanup(EventHandler`1<BeforeAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_BeforeAssemblyCleanup(EventHandler`1<BeforeAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_AfterAssemblyCleanup(EventHandler`1<AfterAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_AfterAssemblyCleanup(EventHandler`1<AfterAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_BeforeClassInitialize(EventHandler`1<BeforeClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_BeforeClassInitialize(EventHandler`1<BeforeClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_AfterClassInitialize(EventHandler`1<AfterClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_AfterClassInitialize(EventHandler`1<AfterClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_BeforeClassCleanup(EventHandler`1<BeforeClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_BeforeClassCleanup(EventHandler`1<BeforeClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_AfterClassCleanup(EventHandler`1<AfterClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_AfterClassCleanup(EventHandler`1<AfterClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_BeforeTestInitialize(EventHandler`1<BeforeTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_BeforeTestInitialize(EventHandler`1<BeforeTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_AfterTestInitialize(EventHandler`1<AfterTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_AfterTestInitialize(EventHandler`1<AfterTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_BeforeTestCleanup(EventHandler`1<BeforeTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_BeforeTestCleanup(EventHandler`1<BeforeTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_AfterTestCleanup(EventHandler`1<AfterTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_AfterTestCleanup(EventHandler`1<AfterTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_OnTestStopping(EventHandler`1<OnTestStoppingEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_OnTestStopping(EventHandler`1<OnTestStoppingEventArgs> value);
    internal void RaiseBeforeAssemblyInitialize(BeforeAssemblyInitializeEventArgs args);
    internal void RaiseAfterAssemblyInitialize(AfterAssemblyInitializeEventArgs args);
    internal void RaiseBeforeAssemblyCleanup(BeforeAssemblyCleanupEventArgs args);
    internal void RaiseAfterAssemblyCleanup(AfterAssemblyCleanupEventArgs args);
    internal void RaiseBeforeClassInitialize(BeforeClassInitializeEventArgs args);
    internal void RaiseAfterClassInitialize(AfterClassInitializeEventArgs args);
    internal void RaiseBeforeClassCleanup(BeforeClassCleanupEventArgs args);
    internal void RaiseAfterClassCleanup(AfterClassCleanupEventArgs args);
    internal void RaiseBeforeTestInitialize(BeforeTestInitializeEventArgs args);
    internal void RaiseAfterTestInitialize(AfterTestInitializeEventArgs args);
    internal void RaiseBeforeTestCleanup(BeforeTestCleanupEventArgs args);
    internal void RaiseAfterTestCleanup(AfterTestCleanupEventArgs args);
    internal void RaiseOnTestStopping(OnTestStoppingEventArgs args);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestExtensionData : object {
    private TestClassExtensionAttribute m_attributeInstance;
    private UnitTestExecution m_frameworkExecution;
    private object m_syncRoot;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    internal Type AttributeProviderType { get; }
    internal TestExtensionExecution Execution { get; }
    internal UnitTestExecution FrameworkExecution { get; }
    internal bool IsInitialized { get; internal set; }
    internal object SyncRoot { get; }
    internal UnitTestExtensionData(TestClassExtensionAttribute attributeProviderInstance, IRunContext runContext);
    internal Type get_AttributeProviderType();
    internal TestExtensionExecution get_Execution();
    internal UnitTestExecution get_FrameworkExecution();
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
internal void set_IsInitialized(bool value);
    internal object get_SyncRoot();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestExtensions : object {
    private object m_syncRoot;
    private IDictionary`2<Type, UnitTestExtensionData> m_extensions;
    internal IDictionary`2<Type, UnitTestExtensionData> Extensions { get; }
    internal object SyncRoot { get; }
    internal IDictionary`2<Type, UnitTestExtensionData> get_Extensions();
    internal object get_SyncRoot();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestMethodInvokerContext : TestMethodInvokerContext {
    private TestContext m_testContext;
    private MethodInfo m_testMethodInfo;
    private ITestMethodInvoker m_innerInvoker;
    public TestContext TestContext { get; }
    public MethodInfo TestMethodInfo { get; }
    public ITestMethodInvoker InnerInvoker { get; }
    internal UnitTestMethodInvokerContext(TestContext testContext, MethodInfo testMethodInfo, ITestMethodInvoker innerInvoker);
    public virtual TestContext get_TestContext();
    public virtual MethodInfo get_TestMethodInfo();
    public virtual ITestMethodInvoker get_InnerInvoker();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestRunner : MarshalByRefObject {
    internal IRunContext m_runContext;
    private Guid m_testRunId;
    private Dictionary`2<string, object> m_runContextProperties;
    private Dictionary`2<Guid, UnitTestElement> m_testsForLoadRun;
    private object m_addTestForLoadRunLock;
    private bool m_defaultConnectionLimitSet;
    private bool m_createdRedirector;
    private ConsoleOutputRedirector m_testOutputRedirector;
    internal Dictionary`2<Type, bool> m_classInit;
    internal Dictionary`2<Type, Exception> m_classInitExceptions;
    internal Dictionary`2<Type, ClassCleanupInfo> m_classesToCleanup;
    private object m_syncRoot;
    internal bool m_isAssemblyInitRun;
    internal bool m_isAssemblyInitSuccessful;
    internal Exception m_AssemblyInitException;
    internal MethodInfo m_assemblyCleanup;
    internal UnitTestExecution m_assemblyCleanupExtension;
    internal Dictionary`2<UnitTestExtensionData, object> m_initializedExtensions;
    internal ManualResetEvent m_pauseExecutionEvent;
    private bool m_traceExecutionSequence;
    private UnitTestDataManager m_dataManager;
    private DataCollectorNotificationsHelper m_dataCollectorNotificationsHelper;
    private UnitTestExtensions m_testExtensions;
    private object m_redirectorLock;
    private Dictionary`2<TestExecId, TestData> m_currentTestData;
    private ReaderWriterLock m_currentTestDataLock;
    private bool m_isDisposed;
    private object m_disposeLock;
    public ConsoleOutputRedirector TestOutputRedirector { get; public set; }
    internal UnitTestExtensions TestExtensions { get; }
    internal object SyncRoot { get; }
    internal DataCollectorNotificationsHelper DataCollectorNotificationsHelper { get; }
    public UnitTestRunner(IRunContext runContext, Guid testRunId, bool traceExecutionSequence, DataCollectorNotificationsHelper dataCollectorNotificationsHelper);
    public sealed virtual void Dispose();
    public void set_TestOutputRedirector(ConsoleOutputRedirector value);
    public ConsoleOutputRedirector get_TestOutputRedirector();
    internal UnitTestExtensions get_TestExtensions();
    internal object get_SyncRoot();
    internal DataCollectorNotificationsHelper get_DataCollectorNotificationsHelper();
    public TestResult Run(UnitTestElement test, ITestContext testContext, bool isLoadTest);
    public TestResult Run(UnitTestElement test, ITestContext testContext, bool isLoadTest, bool useMultipleCpus);
    private TestResult ExecuteSingleTest(UnitTestExecuter executer, UnitTestElement test, ITestContext testContext, UnitTestAdapterContext userContext, bool isLoadTest);
    private void ExecuteSingleTest(UnitTestExecuter executer, UnitTestResult result, UnitTestElement test, ITestContext testContext, UnitTestAdapterContext userContext, bool isLoadTest);
    private TestResult ExecuteDataDrivenTest(UnitTestExecuter executer, UnitTestElement test, ITestContext testContext, UnitTestAdapterContext userContext, bool isLoadTest);
    private TestResult ExecuteDataDrivenTestNotInLoadTest(UnitTestExecuter executer, UnitTestElement test, ITestContext testContext, UnitTestAdapterContext userContext, DataDrivenTestData dataDrivenData);
    private TestResult ExecuteDataDrivenTestInLoadTest(UnitTestExecuter executer, UnitTestElement test, ITestContext testContext, UnitTestAdapterContext userContext, DataDrivenTestData currentTestData);
    public void RunCleanup();
    private void RunCleanupInternal();
    private void RunClassCleanup();
    private void RunAssemblyCleanup();
    private void DisposeExtensions();
    private static void InitTestFromConfigFile(UnitTestElement test);
    private static void UpdateDataDrivenTestData(DataDrivenTestData data, UnitTestResult result, bool isLockNeeded);
    private static void UpdateDataDrivenTestDataNoLock(DataDrivenTestData data, UnitTestResult result);
    private UnitTestResult GetDataDrivenTestResult(DataDrivenTestData data, ITestElement test, bool setOutcomeAborted);
    internal bool GetIsTestStopped(TestExecId executionId);
    internal void StopTestRun(TestOutcome outcome);
    internal void ResumeTestRun();
    internal void PauseTestRun();
    public void AddTestForLoadRun(UnitTestElement test);
    public TestResult LoadRun(TestId testId, ITestContext testContext);
    public void CleanupLoadRun();
    internal void SetClassCleanupMethodNoLock(Type type, MethodInfo classCleanupMethod);
    internal void SetClassCleanupExecutionNoLock(Type type, UnitTestExecution execution);
    private ClassCleanupInfo GetClassCleanupInfoNoLock(Type type);
    public virtual object InitializeLifetimeService();
    private void AssertionFailureHandler(object sender, EventArgs args);
    private static int GetNetworkInterfacesCount();
}
internal static class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UTAHelper : object {
    private static Dictionary`2<int, Dictionary`2<Exception, string>> s_ShadowStacks;
    private static String[] s_typeExclusionList;
    private static String[] TypeExclusionList { get; }
    private static UTAHelper();
    internal static string GetStackTrace(Exception ex);
    private static String[] get_TypeExclusionList();
    internal static string TrimStackTrace(string stackTrace);
    internal static void AddStackTraceShadow(Exception ex);
    public static string GetShadowStackTrace(Exception ex);
    public static void ClearShadowStackTraceOnThread();
}
