internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.TestClassExtensionAttributePersistenceProxy : PersistenceProxy`1<TestClassExtensionAttribute> {
    internal TestClassExtensionAttributePersistenceProxy(TestClassExtensionAttribute master);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.TestMethod : object {
    [PersistenceElementNameAttribute("className")]
private string m_className;
    [PersistenceElementNameAttribute("name")]
private string m_name;
    [PersistenceElementNameAttribute("isValid")]
private bool m_isValid;
    public string Name { get; }
    public string ClassName { get; }
    public bool IsValid { get; public set; }
    public TestMethod(string name, string className);
    private TestMethod(TestMethod copy);
    public sealed virtual object Clone();
    public string get_Name();
    public string get_ClassName();
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Common.IVerifiable.IsValid();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public sealed virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
}
[GuidAttribute("13CDC9D9-DDB5-4fa4-A97D-D965CCFC6D4B")]
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement : TestElement {
    private static string ExtensionXmlElementName;
    [PersistenceElementNameAttribute("codeBase")]
private string m_CodeBase;
    [PersistenceElementNameAttribute("adapterTypeName")]
private string m_adapterTypeName;
    [PersistenceElementNameAttribute("testMethod")]
private TestMethod m_testMethod;
    [PersistenceElementNameAttribute("webSiteUrl")]
private string m_webSiteUrl;
    [PersistenceElementNameAttribute("aspNetDevServerHost")]
private AspNetDevelopmentServer m_aspNetDevServerHost;
    [NonPersistableAttribute]
private bool m_hasCredentialAttribute;
    [NonPersistableAttribute]
private string m_webAppUserName;
    [NonPersistableAttribute]
private string m_webAppPassword;
    [NonPersistableAttribute]
private string m_webAppDomain;
    [PersistenceElementNameAttribute("aspNetDevServers")]
private List`1<AspNetDevelopmentServer> m_aspNetDevServers;
    [PersistenceElementNameAttribute("dataSourceSettingName")]
private string m_dataSourceSettingName;
    [StoreXmlSimpleFieldAttribute("DataSource/@connectionString", "Mono.Cecil.CustomAttributeArgument")]
[PersistenceElementNameAttribute("dataConnectionString")]
private string m_dataConnectionString;
    [PersistenceElementNameAttribute("dataProviderInvariantName")]
private string m_dataProviderInvariantName;
    [PersistenceElementNameAttribute("dataTableName")]
private string m_dataTableName;
    [PersistenceElementNameAttribute("dataAccessMethod")]
private DataAccessMethod m_dataAccessMethod;
    [NonPersistableAttribute]
private bool m_ignored;
    [NonPersistableAttribute]
private Dictionary`2<string, bool> m_attributeValueStateMap;
    public static Guid TestTypeGuid;
    public static TestType TestTypeInstance;
    [NonPersistableAttribute]
private string m_fullyQualifiedClassName;
    private SerializationWrapper`1<TestClassExtensionAttribute> m_extensionProviderWrapper;
    public static string ClassNamePropertyName;
    public static string DataAccessMethodPropertyName;
    public static string DataProviderNamePropertyName;
    public static string DataTableNamePropertyName;
    public static string FullyQualifiedClassNamePropertyName;
    public static string NamespacePropertyName;
    public static string ExtensionTypePropertyName;
    public string ClassTypeName { get; }
    [DefaultValueAttribute("")]
[UserVisiblePropertyAttribute("{A9405AE6-9AC6-4f0e-A03F-7AFE45F6FCB7}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_Name")]
[PropertyWindowAttribute]
[ReadOnlyAttribute("True")]
public string Name { get; public set; }
    internal string FullName { get; }
    [DefaultValueAttribute("")]
[UserVisiblePropertyAttribute("{A9405AE6-9AC6-4f0e-A03F-7AFE45F6FDB7}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "TestElement_HumanReadableId")]
[PropertyWindowAttribute]
public string HumanReadableId { get; }
    [PropertyWindowAttribute]
[GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{B85E5129-BAAB-4ea1-8F05-E37BC6E989B9}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_FullyQualifiedClassName")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_FullyQualifiedClassName_PropertyDescription")]
[HelpKeywordAttribute("vs.test.unit.properties.fullclassname")]
public string FullyQualifiedClassName { get; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{8343AD7E-406C-49ab-9D78-ED8A840C55B0}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_ClassName")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_ClassName_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.unit.properties.classname")]
public string ClassName { get; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{B42AE199-8A19-4806-B5CD-6B5A06282FDC}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_Namespace")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_Namespace_PropertyDescription")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.unit.properties.namespace")]
public string Namespace { get; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataConnectionString")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataConnectionString_PropertyDescription")]
[PropertyWindowAttribute("4")]
[HelpKeywordAttribute("vs.test.unit.properties.dataconnectionstring")]
public string DataConnectionString { get; public set; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataProviderName")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataProviderName_PropertyDescription")]
[VisiblePropertyAttribute]
[DefaultValueAttribute("")]
[ReadOnlyAttribute("True")]
[PropertyWindowAttribute]
[HelpKeywordAttribute("vs.test.unit.properties.dataprovidername")]
public string DataProviderName { get; public set; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataTableName")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataTableName_PropertyDescription")]
[VisiblePropertyAttribute]
[DefaultValueAttribute("")]
[PropertyWindowAttribute("1")]
[HelpKeywordAttribute("vs.test.unit.properties.datatablename")]
public string DataTableName { get; public set; }
    [TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataAccessMethod")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_DataAccessMethod_PropertyDescription")]
[VisiblePropertyAttribute]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[PropertyWindowAttribute("7")]
[HelpKeywordAttribute("vs.test.unit.properties.dataaccessmethod")]
public DataAccessMethod DataAccessMethod { get; public set; }
    public string DataSourceSettingName { get; public set; }
    public bool UseDataSourceSetting { get; }
    public bool IsDataDrivenTest { get; }
    public TestMethod TestMethod { get; public set; }
    public bool Ignored { get; public set; }
    public bool Enabled { get; public set; }
    public string CodeBase { get; }
    public string Adapter { get; }
    public string ControllerPlugin { get; }
    public bool ReadOnly { get; public set; }
    public bool CanBeAggregated { get; }
    public bool IsLoadTestCandidate { get; }
    public TestType TestType { get; }
    [PropertyWindowAttribute]
[GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{4E0E14B1-11F5-4acb-B04A-EFF40FA0249D}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_ExtensionTypeName")]
[LocalizedDescriptionAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_ExtensionTypeName_Description")]
[HelpKeywordAttribute("vs.test.unit.properties.extensiontypename")]
[ReadOnlyAttribute("True")]
public string ExtensionTypeName { get; }
    internal TestClassExtensionAttribute ExtensionProvider { get; internal set; }
    public ICollection`1<AspNetDevelopmentServer> AspNetDevelopmentServers { get; }
    public string UrlToTest { get; public set; }
    public AspNetDevelopmentServer AspNetDevelopmentServerHost { get; public set; }
    public bool HasCredentialAttribute { get; public set; }
    public string WebAppUserName { get; public set; }
    public string WebAppPassword { get; public set; }
    public string WebAppDomain { get; public set; }
    public ITestElement Copy { get; }
    public String[] DeploymentItemsEditable { get; public set; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.ElementName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.NamespaceUri { get; }
    public ITestElement TestElement { get; }
    public Uri ExtensionId { get; }
    private string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.FullName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.Namespace { get; }
    private string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.ClassName { get; }
    private string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.MethodName { get; }
    public bool SupportsParallelTestExecution { get; }
    public UnitTestElement(Guid id, string name, string adapterTypeName, TestMethod testMethod);
    public UnitTestElement(UnitTestElement copy);
    protected UnitTestElement(SerializationInfo info, StreamingContext context);
    private static UnitTestElement();
    private void Initialize();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual object Clone();
    public string get_ClassTypeName();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal virtual string get_FullName();
    public virtual string get_HumanReadableId();
    public string get_FullyQualifiedClassName();
    public string get_ClassName();
    public string get_Namespace();
    public sealed virtual string get_DataConnectionString();
    public sealed virtual void set_DataConnectionString(string value);
    public sealed virtual string get_DataProviderName();
    public sealed virtual void set_DataProviderName(string value);
    public sealed virtual string get_DataTableName();
    public sealed virtual void set_DataTableName(string value);
    public DataAccessMethod get_DataAccessMethod();
    public void set_DataAccessMethod(DataAccessMethod value);
    public string get_DataSourceSettingName();
    public void set_DataSourceSettingName(string value);
    public bool get_UseDataSourceSetting();
    public bool get_IsDataDrivenTest();
    public TestMethod get_TestMethod();
    public void set_TestMethod(TestMethod value);
    public bool get_Ignored();
    public void set_Ignored(bool value);
    internal bool GetEnabledField();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public string get_CodeBase();
    public void AssignCodeBase(string codeBase);
    public virtual string get_Adapter();
    public virtual string get_ControllerPlugin();
    public sealed virtual bool get_ReadOnly();
    public sealed virtual void set_ReadOnly(bool value);
    public sealed virtual bool get_CanBeAggregated();
    public sealed virtual bool get_IsLoadTestCandidate();
    public virtual TestType get_TestType();
    public string get_ExtensionTypeName();
    internal TestClassExtensionAttribute get_ExtensionProvider();
    internal void set_ExtensionProvider(TestClassExtensionAttribute value);
    public sealed virtual ICollection`1<AspNetDevelopmentServer> get_AspNetDevelopmentServers();
    public sealed virtual string get_UrlToTest();
    public sealed virtual void set_UrlToTest(string value);
    public sealed virtual AspNetDevelopmentServer get_AspNetDevelopmentServerHost();
    public sealed virtual void set_AspNetDevelopmentServerHost(AspNetDevelopmentServer value);
    public sealed virtual bool get_HasCredentialAttribute();
    public sealed virtual void set_HasCredentialAttribute(bool value);
    public sealed virtual string get_WebAppUserName();
    public sealed virtual void set_WebAppUserName(string value);
    public sealed virtual string get_WebAppPassword();
    public sealed virtual void set_WebAppPassword(string value);
    public sealed virtual string get_WebAppDomain();
    public sealed virtual void set_WebAppDomain(string value);
    public sealed virtual bool IsPropertySupported(PropertyDescriptor descriptor);
    public sealed virtual bool IsPropertyReadOnly(PropertyDescriptor descriptor);
    public virtual ITestElement get_Copy();
    public virtual String[] get_DeploymentItemsEditable();
    public virtual void set_DeploymentItemsEditable(String[] value);
    public void UpdatePropertyValueState(string propertyName, bool attributeValueCorrectType);
    public sealed virtual void FillDataRow(DataRow row);
    private sealed virtual override bool Microsoft.VisualStudio.TestTools.Common.IDeepEquals<Microsoft.VisualStudio.TestTools.Common.ITestElement>.DeepEquals(ITestElement other);
    internal virtual bool DeepEquals(TestElement other);
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_ElementName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStoreCustom.get_NamespaceUri();
    public sealed virtual ITestElement get_TestElement();
    public sealed virtual Uri get_ExtensionId();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.get_FullName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.get_Namespace();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.get_ClassName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.Common.IUnitTestInformation.get_MethodName();
    public sealed virtual bool get_SupportsParallelTestExecution();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestExtensionInfo : object {
    private static string UnitTestExtensionsKeyName;
    private static string AttributeProviderSubkeyName;
    private static List`1<string> s_extensionKeys;
    private static Dictionary`2<string, UnitTestExtensionInfo> s_extensionByName;
    private static Dictionary`2<Uri, UnitTestExtensionInfo> s_extensionById;
    private Uri m_extensionId;
    private TestClassExtensionAttribute m_attributeProvider;
    private Type m_attributeProviderType;
    private static XmlSerializer serializer;
    internal Uri ExtensionId { get; }
    internal TestClassExtensionAttribute AttributeProvider { get; }
    internal Type AttributeProviderType { get; }
    public static string AssemblyDirectory { get; }
    private UnitTestExtensionInfo(string attributeName, string attributeProviderString);
    private UnitTestExtensionInfo(string attributeName, TestConfigKey extensionKey);
    private static UnitTestExtensionInfo();
    internal Uri get_ExtensionId();
    internal TestClassExtensionAttribute get_AttributeProvider();
    internal Type get_AttributeProviderType();
    internal static IList`1<string> GetExtensionNames(IWarningHandler warningHandler);
    public static void GetExtensionNamesFromFile(IWarningHandler warningHandler);
    public static void GetExtensionNamesFromRegistry(IWarningHandler warningHandler);
    public static string get_AssemblyDirectory();
    internal static UnitTestExtensionInfo GetExtension(string attributeName);
    private static string GetAttributeProviderString(string attributeName, TestConfigKey extensionKey);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestResult : TestResultAggregation {
    private static string ExtensionResultXmlElementName;
    [PersistenceElementNameAttribute("dataRowInfo")]
private string m_dataRowInfo;
    [PersistenceElementNameAttribute("resultType")]
private UnitTestResultType m_resultType;
    private bool m_hasSufficientAccess;
    private string m_workerProcessIdentity;
    [PersistenceElementNameAttribute("ExtensionResult")]
private SerializationWrapper`1<object> m_extensionResultWrapper;
    public static string FullyQualifiedClassNamePropertyName;
    public static string ClassNamePropertyName;
    public static string ExtensionTypeNamePropertyName;
    public string DisplayText { get; }
    public bool HasSufficientAccess { get; public set; }
    public string WorkerProcessIdentity { get; public set; }
    public string DataRowInfo { get; public set; }
    public UnitTestResultType ResultType { get; }
    public string FailedCount { get; }
    internal bool IsUpdateTotalTestCountRequired { get; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{FD234B5D-C912-4dfe-9B98-46B8C2FA8C4B}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_FullyQualifiedClassName")]
public string FullyQualifiedClassName { get; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{F75B6D45-A4BF-4bb0-8017-2C2C141BFAE5}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_ClassName")]
public string ClassName { get; }
    [GroupingPropertyAttribute]
[UserVisiblePropertyAttribute("{47217572-DFD6-49cb-91F0-A4C8124ED1B8}")]
[TestCaseManagementDisplayNameAttribute("Microsoft.VisualStudio.TestTools.Resources.UIResources", "UnitTest_ExtensionTypeName")]
public string ExtensionTypeName { get; }
    private TestExecId Microsoft.VisualStudio.TestTools.Common.IPersistedTestExecId.TestExecutionId { get; }
    public object ExtensionResult { get; internal set; }
    public Uri ExtensionId { get; }
    protected UnitTestResult(SerializationInfo info, StreamingContext context);
    protected UnitTestResult(UnitTestResult other);
    public UnitTestResult(TestResult result);
    public UnitTestResult(Guid runId, ITestElement test);
    public UnitTestResult(Guid runId, ITestElement test, TestOutcome outcome);
    public UnitTestResult(TestResultId id, ITestElement test);
    public UnitTestResult(Guid runId, ITestElement test, TestOutcome outcome, TestResultCounter counters, TestResult[] innerResults);
    public UnitTestResult(string computerInfo, Guid runId, ITestElement test, TestOutcome outcome, TestResultCounter counters, TestResult[] innerResults);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual object Clone();
    internal virtual void Merge(TestResult mergeFrom);
    public virtual string get_DisplayText();
    public bool get_HasSufficientAccess();
    public void set_HasSufficientAccess(bool value);
    public string get_WorkerProcessIdentity();
    public void set_WorkerProcessIdentity(string value);
    public string get_DataRowInfo();
    public void set_DataRowInfo(string value);
    public UnitTestResultType get_ResultType();
    public virtual string get_FailedCount();
    internal virtual bool get_IsUpdateTotalTestCountRequired();
    public string get_FullyQualifiedClassName();
    public string get_ClassName();
    public string get_ExtensionTypeName();
    private sealed virtual override TestExecId Microsoft.VisualStudio.TestTools.Common.IPersistedTestExecId.get_TestExecutionId();
    public virtual void FillDataRow(DataRow row);
    public sealed virtual object get_ExtensionResult();
    internal void set_ExtensionResult(object value);
    public sealed virtual Uri get_ExtensionId();
    public virtual void Save(XmlElement element, XmlTestStoreParameters parameters);
    public virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
}
internal enum Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestResultType : Enum {
    public int value__;
    public static UnitTestResultType NotDataDriven;
    public static UnitTestResultType DataDrivenTest;
    public static UnitTestResultType DataDrivenDataRow;
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestRunConfig : object {
    private static string c_resolutionSettingsLocation;
    [CompilerGeneratedAttribute]
private AssemblyResolutionSettings <AssemblyResolutionSettings>k__BackingField;
    public AssemblyResolutionSettings AssemblyResolutionSettings { get; public set; }
    public string RunConfigurationInformation { get; }
    private UnitTestRunConfig(UnitTestRunConfig unitTestRunConfig);
    [CompilerGeneratedAttribute]
public AssemblyResolutionSettings get_AssemblyResolutionSettings();
    [CompilerGeneratedAttribute]
public void set_AssemblyResolutionSettings(AssemblyResolutionSettings value);
    public sealed virtual string get_RunConfigurationInformation();
    public sealed virtual object Clone();
    public static AssemblyResolutionSettings GetAssemblyResolutionSettingsForTestContainer(TestRunConfiguration runConfig, string testFile, IWarningHandler warningHandler);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Load(XmlElement element, XmlTestStoreParameters parameters);
    private sealed virtual override void Microsoft.VisualStudio.TestTools.Common.Xml.IXmlTestStore.Save(XmlElement element, XmlTestStoreParameters parameters);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnknownExtensionAtributeFromType : UnknownExtensionAttribute {
    private string m_typeString;
    private static XmlPersistence m_persistenceHelper;
    public string ElementName { get; }
    internal UnknownExtensionAtributeFromType(string typeString, string errorMessage);
    private static UnknownExtensionAtributeFromType();
    public virtual void Save(XmlElement target, XmlTestStoreParameters parameters);
    public virtual string get_ElementName();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnknownExtensionAtributeFromXml : UnknownExtensionAttribute {
    private XmlElement m_xml;
    public string ElementName { get; }
    internal UnknownExtensionAtributeFromXml(XmlElement xml, string errorMessage);
    public virtual void Save(XmlElement target, XmlTestStoreParameters parameters);
    public virtual string get_ElementName();
}
internal abstract class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnknownExtensionAttribute : TestClassExtensionAttribute {
    private static Uri s_invalidExtensionId;
    private string m_errorMessage;
    public Uri ExtensionId { get; }
    public string ElementName { get; }
    public string NamespaceUri { get; }
    protected UnknownExtensionAttribute(string errorMessage);
    private static UnknownExtensionAttribute();
    public virtual Uri get_ExtensionId();
    public virtual TestExtensionExecution GetExecution();
    public virtual object GetClientSide();
    public sealed virtual void Load(XmlElement element, XmlTestStoreParameters parameters);
    public abstract virtual void Save(XmlElement target, XmlTestStoreParameters parameters);
    public abstract virtual string get_ElementName();
    public sealed virtual string get_NamespaceUri();
}
