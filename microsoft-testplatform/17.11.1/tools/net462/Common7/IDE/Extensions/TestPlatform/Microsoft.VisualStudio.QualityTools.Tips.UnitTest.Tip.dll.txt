internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.AppDomainIsolatedHost : AssemblyEnumeratorHost {
    private ResolutionAppDomainHelper m_testAppDomainHelper;
    private IWarningHandler m_warningHandler;
    public AppDomainIsolatedHost(IWarningHandler warningHandler);
    internal virtual AssemblyEnumerator CreateEnumerator(string assemblyFileName, TestRunConfiguration testRunConfiguration, ObjectHandle& assemblyResolverWrapper);
    public virtual void Dispose(bool isExplicitDispose);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.AssemblyEnumerator : MarshalByRefObject {
    private static int COR_E_ASSEMBLYEXPECTED;
    private static string MSTestV2AssembyName;
    private string m_AssemblyEnumeratorSender;
    private string m_location;
    public ArrayList EnumerateAssembly(IWarningHandler warningHandler, string location, ProjectData projectData, ObjectHandle assemblyResolverWrapper);
    private static void AddAssemblyResolverSearchDirectories(ObjectHandle assemblyResolverWrapper, IList`1<string> assemblyPaths);
    private bool ReferencesUnsupportedAssemblyVersion(Assembly assemblyToCheck, string assemblyName, Version version);
    private bool IsAssemblyReferenced(Assembly assemblyToCheck, string assemblyName);
    private static string GetLoadExceptionDetails(ReflectionTypeLoadException ex);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
}
internal abstract class Microsoft.VisualStudio.TestTools.TestTypes.Unit.AssemblyEnumeratorHost : object {
    internal static AssemblyEnumeratorHost Create(IWarningHandler warningHandler);
    internal abstract virtual AssemblyEnumerator CreateEnumerator(string assemblyFileName, TestRunConfiguration testRunConfiguration, ObjectHandle& assemblyResolverWrapper);
    public sealed virtual void Dispose();
    public virtual void Dispose(bool isExplicitDipose);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.NoIsolationHost : AssemblyEnumeratorHost {
    internal virtual AssemblyEnumerator CreateEnumerator(string assemblyFileName, TestRunConfiguration testRunConfiguration, ObjectHandle& assemblyResolverWrapper);
}
internal static class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAttributeEnumerator : object {
    public static ICollection Read(ITestTypeExtensionClientSidesProvider provider, IWarningHandler warningHandler, string assemblyFileName, ProjectData projectData, TestRunConfiguration testRunConfiguration);
    private static void CheckForInvalidExtensionClass(ITestTypeExtensionClientSidesProvider provider, UnitTestElement unitTestElement);
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestTip : Tip {
    private Tmi m_tmi;
    private IWarningHandler m_warningHandler;
    private IDictionary`2<Uri, TestTypeExtensionClientSide> m_testExtensions;
    public TestType TestType { get; }
    public UnitTestTip(ITmi tmiInstance);
    public virtual TestType get_TestType();
    public virtual ICollection Load(string assemblyFileLocation, ProjectData projectData, IWarningHandler warningHandler);
    public virtual void Save(ITestElement[] unitTests, string location, ProjectData projectData);
    public virtual TestResult MergeResults(TestResult inMemory, TestResultMessage fromWire);
    public sealed virtual IDictionary`2<Uri, TestTypeExtensionClientSide> GetTestTypeExtensionClientSides();
    private void InitializeExtensions();
}
internal class Microsoft.VisualStudio.TestTools.TestTypes.Unit.VSTypeEnumerator : object {
    private string m_VSTypeEnumeratorSender;
    private static string TestContextPropertyName;
    private AssemblyEnumerator m_assemblyEnumerator;
    private static string m_assemblyFullName;
    private static string m_adapterTypeName;
    private Type m_type;
    private string m_codeBase;
    private bool m_compactFrameworkCase;
    private List`1<UnitTestElement> m_tests;
    private Dictionary`2<TestId, Type> m_testIdToDeclaringClassMap;
    private DeploymentItemCollection m_classDeploymentItems;
    private TestCategoryItemCollection m_classTestCategories;
    private TestClassExtensionAttribute m_extensionAttribute;
    private Nullable`1<bool> m_isIgnoreAttributeOnClass;
    private static BindingFlags MethodSearchFlags;
    private static String[] PredefinedNames;
    private bool IsIgnoreAttributeOnTestClass { get; }
    public VSTypeEnumerator(Type type, AssemblyEnumerator assemblyEnumerator, bool deviceCase);
    private static VSTypeEnumerator();
    public List`1<UnitTestElement> Enumerate(IWarningHandler wh, string location, ProjectData projectData);
    private void CreateTests(IWarningHandler wh, string location, ProjectData projectData);
    private DeploymentItemCollection BuildClassDeploymentItems();
    private TestCategoryItemCollection BuildClassTestCategories();
    private void AddTest(IWarningHandler wh, MethodInfo info, string location, ProjectData projectData, bool isInvalid, string message);
    private static string GetAsyncTypeName(MethodInfo method);
    private static AttributeType GetAttribute(MethodInfo method);
    private static Attribute GetAttribute(MethodInfo method, Type attributeType);
    private void ValidateAndAssignTestProperty(MethodInfo info, UnitTestElement test, IWarningHandler wh, string name, string value);
    private void SetCustomProperties(MethodInfo info, UnitTestElement test, IWarningHandler wh);
    private bool NonTestMethodIsValid(IWarningHandler wh, MethodInfo info, String& message);
    private bool TestMethodIsValid(IWarningHandler wh, MethodInfo info, String& message);
    private static bool IsPredefined(string attributeName);
    private bool IsValidTestClass(IWarningHandler wh, Boolean& ignoreInvalidTestClassWarnings);
    private void GenerateWarningsAndTestsForNonTestClass(IWarningHandler wh, string location, ProjectData projectData);
    private static bool HasCorrectTestMethodSignature(MethodInfo method, bool isExtensionTestClass);
    internal static bool HasAsyncStateMachineAttribute(MethodInfo methodInfo);
    private static bool HasCorrectTestContextSignature(Type type);
    private static bool HasCorrectHostType(MethodInfo method);
    private static bool HasCorrectDataSource(MethodInfo method);
    private static bool HasCorrectTimeout(MethodInfo method);
    private bool get_IsIgnoreAttributeOnTestClass();
    private void AddFromAttributesToWorkItems(MemberInfo attributeProvider, IList workItemsToModify);
    private bool HasCorrectWorkItems(MemberInfo attributeProvider, List`1<string> messages);
    private void AddFromAttributesToDeploymentItems(MemberInfo attributeProvider, DeploymentItemCollection deploymentItems);
    private void AddFromAttributesToTestCategories(MemberInfo attributeProvider, TestCategoryItemCollection testCategories);
    private void ProcessCategoryAttributes(Object[] attributes, TestCategoryItemCollection testCategories);
    private static DeploymentItem CreateDeploymentItem(string path, string outputDirectory);
    private bool HasCorrectDeploymentItems(MemberInfo attributeProvider, List`1<string> messages);
    private static void AddAspNetDevelopmentServerAttributesToTest(MemberInfo attributeProvider, UnitTestElement test);
    private static object GetAttribute(MethodInfo method, string attrName);
    private static Object[] GetAttributes(MemberInfo method, string attrName);
    private static object GetProperty(string methodName, object targetType);
}
