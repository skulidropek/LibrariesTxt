[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.QualityTools.UnitTestFramework.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.Resources.FrameworkMessages : object {
    internal static ResourceManager ResourceManager;
    public static UtfMessage AccessStringInvalidSyntax { get; }
    public static UtfMessage BothCollectionsSameElements { get; }
    public static UtfMessage EqualsTesterInvalidArgs { get; }
    public static UtfMessage InternalObjectNotValid { get; }
    public static UtfMessage DoNotUseAssertEquals { get; }
    public static UtfMessage PrivateAccessorConstructorNotFound { get; }
    public static UtfMessage NumberOfElementsDiff { get; }
    public static UtfMessage Common_NullInMessages { get; }
    public static UtfMessage Common_ObjectString { get; }
    public static UtfMessage UTF_ExpectedExceptionTypeMustDeriveFromException { get; }
    private static FrameworkMessages();
    public static UtfMessage get_AccessStringInvalidSyntax();
    public static UtfMessage ActualHasMismatchedElements(object param0, object param1, object param2, object param3);
    public static UtfMessage AllItemsAreUniqueFailMsg(object param0, object param1);
    public static UtfMessage AreEqualFailMsg(object param0, object param1, object param2);
    public static UtfMessage AreEqualDeltaFailMsg(object param0, object param1, object param2, object param3);
    public static UtfMessage AreEqualCaseFailMsg(object param0, object param1, object param2);
    public static UtfMessage AreEqualDifferentTypesFailMsg(object param0, object param1, object param2, object param3, object param4);
    public static UtfMessage AreNotEqualFailMsg(object param0, object param1, object param2);
    public static UtfMessage AreNotEqualDeltaFailMsg(object param0, object param1, object param2, object param3);
    public static UtfMessage AreSameGivenValues(object param0);
    public static UtfMessage BothCollectionsEmpty(object param0);
    public static UtfMessage get_BothCollectionsSameElements();
    public static UtfMessage BothCollectionsSameReference(object param0);
    public static UtfMessage BothSameElements(object param0);
    public static UtfMessage CollectionEqualReason(object param0, object param1);
    public static UtfMessage ContainsFail(object param0, object param1, object param2);
    public static UtfMessage ElementNumbersDontMatch(object param0, object param1, object param2);
    public static UtfMessage ElementsAtIndexDontMatch(object param0);
    public static UtfMessage ElementTypesAtIndexDontMatch(object param0, object param1, object param2, object param3);
    public static UtfMessage ElementTypesAtIndexDontMatch2(object param0, object param1, object param2);
    public static UtfMessage EndsWithFail(object param0, object param1, object param2);
    public static UtfMessage get_EqualsTesterInvalidArgs();
    public static UtfMessage ErrorInvalidCast(object param0, object param1);
    public static UtfMessage AssertionFailed(object param0, object param1);
    public static UtfMessage get_InternalObjectNotValid();
    public static UtfMessage InvalidParameterToAssert(object param0, object param1);
    public static UtfMessage IsInstanceOfFailMsg(object param0, object param1, object param2);
    public static UtfMessage IsMatchFail(object param0, object param1, object param2);
    public static UtfMessage IsNotInstanceOfFailMsg(object param0, object param1, object param2);
    public static UtfMessage IsNotMatchFail(object param0, object param1, object param2);
    public static UtfMessage get_DoNotUseAssertEquals();
    public static UtfMessage PrivateAccessorMemberNotFound(object param0);
    public static UtfMessage get_PrivateAccessorConstructorNotFound();
    public static UtfMessage NullParameterToAssert(object param0, object param1);
    public static UtfMessage get_NumberOfElementsDiff();
    public static UtfMessage StartsWithFail(object param0, object param1, object param2);
    public static UtfMessage InvalidPropertyType(object param0, object param1, object param2);
    public static UtfMessage get_Common_NullInMessages();
    public static UtfMessage get_Common_ObjectString();
    public static UtfMessage get_UTF_ExpectedExceptionTypeMustDeriveFromException();
    public static UtfMessage UTF_TestMethodNoExceptionDefault(object param0, object param1, object param2);
    public static UtfMessage UTF_TestMethodNoException(object param0, object param1, object param2, object param3);
    public static UtfMessage UTF_TestMethodWrongException(object param0, object param1, object param2, object param3, object param4);
    public static UtfMessage UTF_TestMethodWrongExceptionDerivedAllowed(object param0, object param1, object param2, object param3, object param4);
    public static UtfMessage UTF_FailedToGetExceptionMessage(object param0);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AfterAssemblyCleanupEventArgs : TestExecutionEventArgs {
    internal AfterAssemblyCleanupEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AfterAssemblyInitializeEventArgs : TestExecutionEventArgs {
    private bool m_isAssemblyInitializeFailed;
    public bool IsAssemblyInitializeFailed { get; }
    internal AfterAssemblyInitializeEventArgs(TestContext context, MethodInfo methodInfo, object instance, bool isAssemblyInitializeFailed);
    public bool get_IsAssemblyInitializeFailed();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AfterClassCleanupEventArgs : TestExecutionEventArgs {
    internal AfterClassCleanupEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AfterClassInitializeEventArgs : TestExecutionEventArgs {
    private bool m_isClassInitializeFailed;
    public bool IsClassInitializeFailed { get; }
    internal AfterClassInitializeEventArgs(TestContext context, MethodInfo methodInfo, object instance, bool isClassInitializeFailed);
    public bool get_IsClassInitializeFailed();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AfterTestCleanupEventArgs : TestExecutionEventArgs {
    internal AfterTestCleanupEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AfterTestInitializeEventArgs : TestExecutionEventArgs {
    private bool m_isTestInitializeFailed;
    public bool IsTestInitializeFailed { get; }
    internal AfterTestInitializeEventArgs(TestContext context, MethodInfo methodInfo, object instance, bool isTestInitializeFailed);
    public bool get_IsTestInitializeFailed();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssemblyInitializeAttribute : Attribute {
}
public static class Microsoft.VisualStudio.TestTools.UnitTesting.Assert : object {
    internal static EventHandler`1<EventArgs> AssertionFailure;
    public static void IsTrue(bool condition);
    public static void IsTrue(bool condition, string message);
    public static void IsTrue(bool condition, string message, Object[] parameters);
    public static void IsFalse(bool condition);
    public static void IsFalse(bool condition, string message);
    public static void IsFalse(bool condition, string message, Object[] parameters);
    public static void IsNull(object value);
    public static void IsNull(object value, string message);
    public static void IsNull(object value, string message, Object[] parameters);
    public static void IsNotNull(object value);
    public static void IsNotNull(object value, string message);
    public static void IsNotNull(object value, string message, Object[] parameters);
    public static void AreSame(object expected, object actual);
    public static void AreSame(object expected, object actual, string message);
    public static void AreSame(object expected, object actual, string message, Object[] parameters);
    public static void AreNotSame(object notExpected, object actual);
    public static void AreNotSame(object notExpected, object actual, string message);
    public static void AreNotSame(object notExpected, object actual, string message, Object[] parameters);
    public static void AreEqual(T expected, T actual);
    public static void AreEqual(T expected, T actual, string message);
    public static void AreEqual(T expected, T actual, string message, Object[] parameters);
    public static void AreNotEqual(T notExpected, T actual);
    public static void AreNotEqual(T notExpected, T actual, string message);
    public static void AreNotEqual(T notExpected, T actual, string message, Object[] parameters);
    public static void AreEqual(object expected, object actual);
    public static void AreEqual(object expected, object actual, string message);
    public static void AreEqual(object expected, object actual, string message, Object[] parameters);
    public static void AreNotEqual(object notExpected, object actual);
    public static void AreNotEqual(object notExpected, object actual, string message);
    public static void AreNotEqual(object notExpected, object actual, string message, Object[] parameters);
    public static void AreEqual(float expected, float actual, float delta);
    public static void AreEqual(float expected, float actual, float delta, string message);
    public static void AreEqual(float expected, float actual, float delta, string message, Object[] parameters);
    public static void AreNotEqual(float notExpected, float actual, float delta);
    public static void AreNotEqual(float notExpected, float actual, float delta, string message);
    public static void AreNotEqual(float notExpected, float actual, float delta, string message, Object[] parameters);
    public static void AreEqual(double expected, double actual, double delta);
    public static void AreEqual(double expected, double actual, double delta, string message);
    public static void AreEqual(double expected, double actual, double delta, string message, Object[] parameters);
    public static void AreNotEqual(double notExpected, double actual, double delta);
    public static void AreNotEqual(double notExpected, double actual, double delta, string message);
    public static void AreNotEqual(double notExpected, double actual, double delta, string message, Object[] parameters);
    public static void AreEqual(string expected, string actual, bool ignoreCase);
    public static void AreEqual(string expected, string actual, bool ignoreCase, string message);
    public static void AreEqual(string expected, string actual, bool ignoreCase, string message, Object[] parameters);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture, string message);
    public static void AreEqual(string expected, string actual, bool ignoreCase, CultureInfo culture, string message, Object[] parameters);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, string message);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, string message, Object[] parameters);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture, string message);
    public static void AreNotEqual(string notExpected, string actual, bool ignoreCase, CultureInfo culture, string message, Object[] parameters);
    public static void IsInstanceOfType(object value, Type expectedType);
    public static void IsInstanceOfType(object value, Type expectedType, string message);
    public static void IsInstanceOfType(object value, Type expectedType, string message, Object[] parameters);
    public static void IsNotInstanceOfType(object value, Type wrongType);
    public static void IsNotInstanceOfType(object value, Type wrongType, string message);
    public static void IsNotInstanceOfType(object value, Type wrongType, string message, Object[] parameters);
    public static void Fail();
    public static void Fail(string message);
    public static void Fail(string message, Object[] parameters);
    public static void Inconclusive();
    public static void Inconclusive(string message);
    public static void Inconclusive(string message, Object[] parameters);
    public static bool Equals(object objA, object objB);
    internal static void HandleFail(string assertionName, string message, Object[] parameters);
    internal static string CreateCompleteMessage(string message, Object[] parameters);
    internal static void HandleFailure(string assertionName, string message);
    internal static void CheckParameterNotNull(object param, string assertionName, string parameterName, string message, Object[] parameters);
    internal static string ReplaceNulls(object input);
    public static string ReplaceNullChars(string input);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssertFailedException : UnitTestAssertException {
    internal AssertFailedException(UtfMessage message);
    internal AssertFailedException(UtfMessage message, Exception inner);
    public AssertFailedException(string msg, Exception ex);
    public AssertFailedException(string msg);
    protected AssertFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.AssertInconclusiveException : UnitTestAssertException {
    internal AssertInconclusiveException(UtfMessage message);
    internal AssertInconclusiveException(UtfMessage message, Exception inner);
    public AssertInconclusiveException(string msg, Exception ex);
    public AssertInconclusiveException(string msg);
    protected AssertInconclusiveException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.BaseShadow : object {
    protected PrivateObject m_privateObject;
    public static string AttachShadowName;
    public object Target { get; }
    protected BaseShadow(PrivateObject privateTarget);
    protected BaseShadow(PrivateType type);
    private static BaseShadow();
    public virtual object get_Target();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Type MakeArrayType(Type elementType, int rank);
    public static Type MakeByRefType(Type elementType);
    public static Type MakePointerType(Type elementType);
    protected static Type GetTargetType(Type type);
    protected static object Same(object source);
    protected static ElementConverter GetShadowAttacher(Type type);
    protected static object GetTargetObject(object source);
    protected static Array TransferArray(Array source, Type targetType, ElementConverter converter);
    private static bool IncrementIndex(Int32[] index, Int32[] lowerBounds, Int32[] upperBounds);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.BeforeAssemblyCleanupEventArgs : TestExecutionEventArgs {
    internal BeforeAssemblyCleanupEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.BeforeAssemblyInitializeEventArgs : TestExecutionEventArgs {
    internal BeforeAssemblyInitializeEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.BeforeClassCleanupEventArgs : TestExecutionEventArgs {
    internal BeforeClassCleanupEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.BeforeClassInitializeEventArgs : TestExecutionEventArgs {
    internal BeforeClassInitializeEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.BeforeTestCleanupEventArgs : TestExecutionEventArgs {
    internal BeforeTestCleanupEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.BeforeTestInitializeEventArgs : TestExecutionEventArgs {
    internal BeforeTestInitializeEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute : Attribute {
}
public static class Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert : object {
    public static void Contains(ICollection collection, object element);
    public static void Contains(ICollection collection, object element, string message);
    public static void Contains(ICollection collection, object element, string message, Object[] parameters);
    public static void DoesNotContain(ICollection collection, object element);
    public static void DoesNotContain(ICollection collection, object element, string message);
    public static void DoesNotContain(ICollection collection, object element, string message, Object[] parameters);
    public static void AllItemsAreNotNull(ICollection collection);
    public static void AllItemsAreNotNull(ICollection collection, string message);
    public static void AllItemsAreNotNull(ICollection collection, string message, Object[] parameters);
    public static void AllItemsAreUnique(ICollection collection);
    public static void AllItemsAreUnique(ICollection collection, string message);
    public static void AllItemsAreUnique(ICollection collection, string message, Object[] parameters);
    public static void IsSubsetOf(ICollection subset, ICollection superset);
    public static void IsSubsetOf(ICollection subset, ICollection superset, string message);
    public static void IsSubsetOf(ICollection subset, ICollection superset, string message, Object[] parameters);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset, string message);
    public static void IsNotSubsetOf(ICollection subset, ICollection superset, string message, Object[] parameters);
    public static void AreEquivalent(ICollection expected, ICollection actual);
    public static void AreEquivalent(ICollection expected, ICollection actual, string message);
    public static void AreEquivalent(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AreNotEquivalent(ICollection expected, ICollection actual);
    public static void AreNotEquivalent(ICollection expected, ICollection actual, string message);
    public static void AreNotEquivalent(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType, string message);
    public static void AllItemsAreInstancesOfType(ICollection collection, Type expectedType, string message, Object[] parameters);
    public static void AreEqual(ICollection expected, ICollection actual);
    public static void AreEqual(ICollection expected, ICollection actual, string message);
    public static void AreEqual(ICollection expected, ICollection actual, string message, Object[] parameters);
    public static void AreNotEqual(ICollection notExpected, ICollection actual);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, string message);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, string message, Object[] parameters);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer, string message);
    public static void AreEqual(ICollection expected, ICollection actual, IComparer comparer, string message, Object[] parameters);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer, string message);
    public static void AreNotEqual(ICollection notExpected, ICollection actual, IComparer comparer, string message, Object[] parameters);
    private static Dictionary`2<object, int> GetElementCounts(ICollection collection, Int32& nullCount);
    internal static bool IsSubsetOfHelper(ICollection subset, ICollection superset);
    private static bool FindMismatchedElement(ICollection expected, ICollection actual, Int32& expectedCount, Int32& actualCount, Object& mismatchedElement);
    private static bool AreCollectionsEqual(ICollection expected, ICollection actual, IComparer comparer, String& reason);
}
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.ConfigurationNames : object {
    public static string SectionName;
    public static string Beta2SectionName;
    public static string DataSourcesSectionName;
    public static string NameAttributeName;
    public static string ConnectionStringAttributeName;
    public static string DataAccessMethodAttributeName;
    public static string DataTableAttributeName;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.CssIterationAttribute : Attribute {
    private string m_cssIteration;
    public string CssIteration { get; }
    public CssIterationAttribute(string cssIteration);
    public string get_CssIteration();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.CssProjectStructureAttribute : Attribute {
    private string m_cssProjectStructure;
    public string CssProjectStructure { get; }
    public CssProjectStructureAttribute(string cssProjectStructure);
    public string get_CssProjectStructure();
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.DataAccessMethod : Enum {
    public int value__;
    public static DataAccessMethod Sequential;
    public static DataAccessMethod Random;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceAttribute : Attribute {
    public static string DefaultProviderName;
    public static DataAccessMethod DefaultDataAccessMethod;
    private string m_invariantProviderName;
    private string m_connectionString;
    private string m_tableName;
    private DataAccessMethod m_accessMethod;
    private string m_dataSourceSettingName;
    public string ProviderInvariantName { get; }
    public string ConnectionString { get; }
    public string TableName { get; }
    public DataAccessMethod DataAccessMethod { get; }
    public string DataSourceSettingName { get; }
    public DataSourceAttribute(string providerInvariantName, string connectionString, string tableName, DataAccessMethod dataAccessMethod);
    public DataSourceAttribute(string connectionString, string tableName);
    public DataSourceAttribute(string dataSourceSettingName);
    private static DataSourceAttribute();
    public string get_ProviderInvariantName();
    public string get_ConnectionString();
    public string get_TableName();
    public DataAccessMethod get_DataAccessMethod();
    public string get_DataSourceSettingName();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElement : ConfigurationElement {
    private static ConfigurationPropertyCollection m_properties;
    private static ConfigurationProperty m_name;
    private static ConfigurationProperty m_connectionString;
    private static ConfigurationProperty m_dataTableName;
    private static ConfigurationProperty m_dataAccessMethod;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("connectionString")]
public string ConnectionString { get; public set; }
    [ConfigurationPropertyAttribute("dataTableName")]
public string DataTableName { get; public set; }
    [ConfigurationPropertyAttribute("dataAccessMethod")]
public string DataAccessMethod { get; public set; }
    internal string Key { get; }
    private static DataSourceElement();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public string get_DataTableName();
    public void set_DataTableName(string value);
    public string get_DataAccessMethod();
    public void set_DataAccessMethod(string value);
    internal string get_Key();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DataSourceElementCollection : ConfigurationElementCollection {
    public DataSourceElement Item { get; }
    public DataSourceElement Item { get; public set; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(DataSourceElement element);
    public void Remove(DataSourceElement element);
    public void Remove(string name);
    public void Clear();
    public DataSourceElement get_Item(string name);
    public DataSourceElement get_Item(int index);
    public void set_Item(int index, DataSourceElement value);
    protected virtual void BaseAdd(ConfigurationElement element);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
}
[AttributeUsageAttribute("68")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DeploymentItemAttribute : Attribute {
    private string m_path;
    private string m_outputDirectory;
    public string Path { get; }
    public string OutputDirectory { get; }
    public DeploymentItemAttribute(string path);
    public DeploymentItemAttribute(string path, string outputDirectory);
    public string get_Path();
    public string get_OutputDirectory();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute : Attribute {
    private string m_description;
    public string Description { get; }
    public DescriptionAttribute(string description);
    public string get_Description();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute : ExpectedExceptionBaseAttribute {
    [CompilerGeneratedAttribute]
private Type <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowDerivedTypes>k__BackingField;
    protected internal string NoExceptionMessage { get; }
    public Type ExceptionType { get; private set; }
    public bool AllowDerivedTypes { get; public set; }
    public ExpectedExceptionAttribute(Type exceptionType);
    public ExpectedExceptionAttribute(Type exceptionType, string noExceptionMessage);
    protected internal virtual string get_NoExceptionMessage();
    protected internal virtual void Verify(Exception exception);
    [CompilerGeneratedAttribute]
public Type get_ExceptionType();
    [CompilerGeneratedAttribute]
private void set_ExceptionType(Type value);
    [CompilerGeneratedAttribute]
public bool get_AllowDerivedTypes();
    [CompilerGeneratedAttribute]
public void set_AllowDerivedTypes(bool value);
}
[AttributeUsageAttribute("64")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionBaseAttribute : Attribute {
    private string m_noExceptionMessage;
    [CompilerGeneratedAttribute]
private TestContext <TestContext>k__BackingField;
    protected internal TestContext TestContext { get; internal set; }
    protected internal string NoExceptionMessage { get; }
    protected ExpectedExceptionBaseAttribute(string noExceptionMessage);
    [CompilerGeneratedAttribute]
protected internal TestContext get_TestContext();
    [CompilerGeneratedAttribute]
internal void set_TestContext(TestContext value);
    protected internal virtual string get_NoExceptionMessage();
    protected internal abstract virtual void Verify(Exception exception);
    protected void RethrowIfAssertException(Exception exception);
    internal static string GetDefaultNoExceptionMessage(string fullyQualifiedClassName, string testName, string expectedExceptionAttributeTypeName);
    internal string GetNoExceptionMessage();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.GenericParameterHelper : object {
    private int m_data;
    private IList m_ienumerableStore;
    public int Data { get; public set; }
    public GenericParameterHelper(int data);
    public int get_Data();
    public void set_Data(int value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual object Clone();
}
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.Helper : object {
    private static string TestAdapterHelperName;
    private static string ExceptionHelperMethod;
    internal static void CheckParameterNotNull(object param, string parameterName, string message);
    internal static void CheckParameterNotNullOrEmpty(string param, string parameterName, string message);
    internal static void ThrowInnerException(TargetInvocationException outer);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.HostTypeAttribute : Attribute {
    private string m_hostType;
    private string m_hostData;
    public string HostType { get; }
    public string HostData { get; }
    public HostTypeAttribute(string hostType);
    public HostTypeAttribute(string hostType, string hostData);
    public string get_HostType();
    public string get_HostData();
}
[AttributeUsageAttribute("68")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute : Attribute {
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.InternalTestFailureException : UnitTestAssertException {
    internal InternalTestFailureException(UtfMessage message);
    internal InternalTestFailureException(UtfMessage message, Exception inner);
    public InternalTestFailureException(string msg, Exception ex);
    public InternalTestFailureException(string msg);
    protected InternalTestFailureException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.VisualStudio.TestTools.UnitTesting.ITestMethodInvoker {
    public abstract virtual TestMethodInvokerResult Invoke(Object[] parameters);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.OnTestStoppingEventArgs : TestExecutionEventArgs {
    internal OnTestStoppingEventArgs(TestContext context, MethodInfo methodInfo, object instance);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.OwnerAttribute : Attribute {
    private string m_owner;
    public string Owner { get; }
    public OwnerAttribute(string owner);
    public string get_Owner();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.PriorityAttribute : Attribute {
    private int m_priority;
    public int Priority { get; }
    public PriorityAttribute(int priority);
    public int get_Priority();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject : object {
    private static BindingFlags BindToEveryThing;
    private object m_target;
    private Type m_originalType;
    private Dictionary`2<string, LinkedList`1<MethodInfo>> m_methodCache;
    private static BindingFlags ConstructorFlags;
    private Dictionary`2<string, LinkedList`1<MethodInfo>> GenericMethodCache { get; }
    public object Target { get; public set; }
    public Type RealType { get; }
    public PrivateObject(object obj, string memberToAccess);
    public PrivateObject(string assemblyName, string typeName, Object[] args);
    public PrivateObject(string assemblyName, string typeName, Type[] parameterTypes, Object[] args);
    public PrivateObject(Type type, Object[] args);
    public PrivateObject(Type type, Type[] parameterTypes, Object[] args);
    public PrivateObject(object obj);
    public PrivateObject(object obj, PrivateType type);
    private static PrivateObject();
    private Dictionary`2<string, LinkedList`1<MethodInfo>> get_GenericMethodCache();
    private void BuildGenericMethodCacheForType(Type t);
    private MethodInfo GetGenericMethodFromCache(string methodName, Type[] parameterTypes, Type[] typeArguments, BindingFlags bindingFlags, ParameterModifier[] modifiers);
    private LinkedList`1<MethodInfo> GetMethodCandidates(string methodName, Type[] parameterTypes, Type[] typeArguments, BindingFlags bindingFlags, ParameterModifier[] modifiers);
    private void ConstructFrom(object obj);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public object get_Target();
    public void set_Target(object value);
    public Type get_RealType();
    private static void ValidateAccessString(string access);
    private object InvokeHelper(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
    public object Invoke(string name, Object[] args);
    public object Invoke(string name, Type[] parameterTypes, Object[] args);
    public object Invoke(string name, Type[] parameterTypes, Object[] args, Type[] typeArguments);
    public object Invoke(string name, Object[] args, CultureInfo culture);
    public object Invoke(string name, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object Invoke(string name, BindingFlags bindingFlags, Object[] args);
    public object Invoke(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public object Invoke(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
    public object Invoke(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object Invoke(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture, Type[] typeArguments);
    public object GetArrayElement(string name, Int32[] indices);
    public void SetArrayElement(string name, object value, Int32[] indices);
    public object GetArrayElement(string name, BindingFlags bindingFlags, Int32[] indices);
    public void SetArrayElement(string name, BindingFlags bindingFlags, object value, Int32[] indices);
    public object GetField(string name);
    public void SetField(string name, object value);
    public object GetField(string name, BindingFlags bindingFlags);
    public void SetField(string name, BindingFlags bindingFlags, object value);
    public object GetFieldOrProperty(string name);
    public void SetFieldOrProperty(string name, object value);
    public object GetFieldOrProperty(string name, BindingFlags bindingFlags);
    public void SetFieldOrProperty(string name, BindingFlags bindingFlags, object value);
    public object GetProperty(string name, Object[] args);
    public object GetProperty(string name, Type[] parameterTypes, Object[] args);
    public void SetProperty(string name, object value, Object[] args);
    public void SetProperty(string name, Type[] parameterTypes, object value, Object[] args);
    public object GetProperty(string name, BindingFlags bindingFlags, Object[] args);
    public object GetProperty(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public void SetProperty(string name, BindingFlags bindingFlags, object value, Object[] args);
    public void SetProperty(string name, BindingFlags bindingFlags, object value, Type[] parameterTypes, Object[] args);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType : object {
    private static BindingFlags BindToEveryThing;
    private Type m_t;
    public Type ReferencedType { get; }
    public PrivateType(string assemblyName, string typeName);
    public PrivateType(Type type);
    public Type get_ReferencedType();
    public object InvokeStatic(string name, Object[] args);
    public object InvokeStatic(string name, Type[] parameterTypes, Object[] args);
    public object InvokeStatic(string name, Type[] parameterTypes, Object[] args, Type[] typeArguments);
    public object InvokeStatic(string name, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Object[] args);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture);
    public object InvokeStatic(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args, CultureInfo culture, Type[] typeArguments);
    private object InvokeHelperStatic(string name, BindingFlags bindingFlags, Object[] args, CultureInfo culture);
    public object GetStaticArrayElement(string name, Int32[] indices);
    public void SetStaticArrayElement(string name, object value, Int32[] indices);
    public object GetStaticArrayElement(string name, BindingFlags bindingFlags, Int32[] indices);
    public void SetStaticArrayElement(string name, BindingFlags bindingFlags, object value, Int32[] indices);
    public object GetStaticField(string name);
    public void SetStaticField(string name, object value);
    public object GetStaticField(string name, BindingFlags bindingFlags);
    public void SetStaticField(string name, BindingFlags bindingFlags, object value);
    public object GetStaticFieldOrProperty(string name);
    public void SetStaticFieldOrProperty(string name, object value);
    public object GetStaticFieldOrProperty(string name, BindingFlags bindingFlags);
    public void SetStaticFieldOrProperty(string name, BindingFlags bindingFlags, object value);
    public object GetStaticProperty(string name, Object[] args);
    public void SetStaticProperty(string name, object value, Object[] args);
    public void SetStaticProperty(string name, object value, Type[] parameterTypes, Object[] args);
    public object GetStaticProperty(string name, BindingFlags bindingFlags, Object[] args);
    public object GetStaticProperty(string name, BindingFlags bindingFlags, Type[] parameterTypes, Object[] args);
    public void SetStaticProperty(string name, BindingFlags bindingFlags, object value, Object[] args);
    public void SetStaticProperty(string name, BindingFlags bindingFlags, object value, Type[] parameterTypes, Object[] args);
}
internal class Microsoft.VisualStudio.TestTools.UnitTesting.RuntimeTypeHelper : object {
    internal static bool CompareMethodSigAndName(MethodBase m1, MethodBase m2);
    internal static int GetHierarchyDepth(Type t);
    internal static MethodBase FindMostDerivedNewSlotMeth(MethodBase[] match, int cMatches);
    internal static MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
    internal static int FindMostSpecificMethod(MethodBase m1, Int32[] paramOrder1, Type paramArrayType1, MethodBase m2, Int32[] paramOrder2, Type paramArrayType2, Type[] types, Object[] args);
    internal static int FindMostSpecific(ParameterInfo[] p1, Int32[] paramOrder1, Type paramArrayType1, ParameterInfo[] p2, Int32[] paramOrder2, Type paramArrayType2, Type[] types, Object[] args);
    internal static int FindMostSpecificType(Type c1, Type c2, Type t);
}
[AttributeUsageAttribute("32767")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.ShadowingAttribute : Attribute {
    private string m_fullName;
    public string FullNameOfSource { get; }
    public ShadowingAttribute(string fullNameOfSource);
    public string get_FullNameOfSource();
}
public static class Microsoft.VisualStudio.TestTools.UnitTesting.StringAssert : object {
    public static void Contains(string value, string substring);
    public static void Contains(string value, string substring, string message);
    public static void Contains(string value, string substring, string message, Object[] parameters);
    public static void StartsWith(string value, string substring);
    public static void StartsWith(string value, string substring, string message);
    public static void StartsWith(string value, string substring, string message, Object[] parameters);
    public static void EndsWith(string value, string substring);
    public static void EndsWith(string value, string substring, string message);
    public static void EndsWith(string value, string substring, string message, Object[] parameters);
    public static void Matches(string value, Regex pattern);
    public static void Matches(string value, Regex pattern, string message);
    public static void Matches(string value, Regex pattern, string message, Object[] parameters);
    public static void DoesNotMatch(string value, Regex pattern);
    public static void DoesNotMatch(string value, Regex pattern, string message);
    public static void DoesNotMatch(string value, Regex pattern, string message, Object[] parameters);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute : TestCategoryBaseAttribute {
    private IList`1<string> m_testCategories;
    public IList`1<string> TestCategories { get; }
    public TestCategoryAttribute(string testCategory);
    public virtual IList`1<string> get_TestCategories();
}
[AttributeUsageAttribute("64")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryBaseAttribute : Attribute {
    public IList`1<string> TestCategories { get; }
    public abstract virtual IList`1<string> get_TestCategories();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestClassExtensionAttribute : Attribute {
    public Uri ExtensionId { get; }
    public abstract virtual Uri get_ExtensionId();
    public abstract virtual TestExtensionExecution GetExecution();
    public virtual object GetClientSide();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute : Attribute {
}
public static class Microsoft.VisualStudio.TestTools.UnitTesting.TestConfiguration : object {
    private static TestConfigurationSection m_configurationSection;
    public static TestConfigurationSection ConfigurationSection { get; }
    private static TestConfiguration();
    private static TestConfigurationSection LoadConfiguration();
    public static TestConfigurationSection get_ConfigurationSection();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestConfigurationSection : ConfigurationSection {
    private static ConfigurationPropertyCollection m_properties;
    private static ConfigurationProperty m_dataSources;
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("dataSources")]
public DataSourceElementCollection DataSources { get; }
    private static TestConfigurationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public DataSourceElementCollection get_DataSources();
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestContext : object {
    public static string AspNetDevelopmentServerPrefix;
    public IDictionary Properties { get; }
    public DataRow DataRow { get; }
    public DbConnection DataConnection { get; }
    public string TestRunDirectory { get; }
    public string DeploymentDirectory { get; }
    public string ResultsDirectory { get; }
    public string TestRunResultsDirectory { get; }
    public string TestResultsDirectory { get; }
    public string TestDir { get; }
    public string TestDeploymentDir { get; }
    public string TestLogsDir { get; }
    public string FullyQualifiedTestClassName { get; }
    public string TestName { get; }
    public UnitTestOutcome CurrentTestOutcome { get; }
    public Page RequestedPage { get; }
    public abstract virtual void WriteLine(string format, Object[] args);
    public abstract virtual void AddResultFile(string fileName);
    public abstract virtual void BeginTimer(string timerName);
    public abstract virtual void EndTimer(string timerName);
    public abstract virtual IDictionary get_Properties();
    public abstract virtual DataRow get_DataRow();
    public abstract virtual DbConnection get_DataConnection();
    public virtual string get_TestRunDirectory();
    public virtual string get_DeploymentDirectory();
    public virtual string get_ResultsDirectory();
    public virtual string get_TestRunResultsDirectory();
    public virtual string get_TestResultsDirectory();
    public virtual string get_TestDir();
    public virtual string get_TestDeploymentDir();
    public virtual string get_TestLogsDir();
    public virtual string get_FullyQualifiedTestClassName();
    public virtual string get_TestName();
    private T GetProperty(string name);
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public virtual Page get_RequestedPage();
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestExecution : object {
    public object RunContext { get; }
    public abstract virtual object get_RunContext();
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeAssemblyInitialize(EventHandler`1<BeforeAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeAssemblyInitialize(EventHandler`1<BeforeAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterAssemblyInitialize(EventHandler`1<AfterAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterAssemblyInitialize(EventHandler`1<AfterAssemblyInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeAssemblyCleanup(EventHandler`1<BeforeAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeAssemblyCleanup(EventHandler`1<BeforeAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterAssemblyCleanup(EventHandler`1<AfterAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterAssemblyCleanup(EventHandler`1<AfterAssemblyCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeClassInitialize(EventHandler`1<BeforeClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeClassInitialize(EventHandler`1<BeforeClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterClassInitialize(EventHandler`1<AfterClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterClassInitialize(EventHandler`1<AfterClassInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeClassCleanup(EventHandler`1<BeforeClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeClassCleanup(EventHandler`1<BeforeClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterClassCleanup(EventHandler`1<AfterClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterClassCleanup(EventHandler`1<AfterClassCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeTestInitialize(EventHandler`1<BeforeTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeTestInitialize(EventHandler`1<BeforeTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterTestInitialize(EventHandler`1<AfterTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterTestInitialize(EventHandler`1<AfterTestInitializeEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BeforeTestCleanup(EventHandler`1<BeforeTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BeforeTestCleanup(EventHandler`1<BeforeTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AfterTestCleanup(EventHandler`1<AfterTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AfterTestCleanup(EventHandler`1<AfterTestCleanupEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnTestStopping(EventHandler`1<OnTestStoppingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnTestStopping(EventHandler`1<OnTestStoppingEventArgs> value);
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestExecutionEventArgs : EventArgs {
    private TestContext m_testContext;
    private MethodInfo m_methodInfo;
    private object m_instance;
    public TestContext TestContext { get; }
    public MethodInfo MethodInfo { get; }
    public object Instance { get; }
    internal TestExecutionEventArgs(TestContext context, MethodInfo methodInfo, object instance);
    public TestContext get_TestContext();
    public MethodInfo get_MethodInfo();
    public object get_Instance();
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestExtensionExecution : object {
    public abstract virtual void Initialize(TestExecution execution);
    public abstract virtual ITestMethodInvoker CreateTestMethodInvoker(TestMethodInvokerContext context);
    public abstract virtual void Dispose();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute : Attribute {
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerContext : object {
    public TestContext TestContext { get; }
    public MethodInfo TestMethodInfo { get; }
    public ITestMethodInvoker InnerInvoker { get; }
    public abstract virtual TestContext get_TestContext();
    public abstract virtual MethodInfo get_TestMethodInfo();
    public abstract virtual ITestMethodInvoker get_InnerInvoker();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodInvokerResult : object {
    private Exception m_exception;
    private object m_extensionResult;
    public Exception Exception { get; public set; }
    public object ExtensionResult { get; public set; }
    public Exception get_Exception();
    public void set_Exception(Exception value);
    public object get_ExtensionResult();
    public void set_ExtensionResult(object value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute : Attribute {
    private string m_name;
    private string m_value;
    public string Name { get; }
    public string Value { get; }
    public TestPropertyAttribute(string name, string value);
    public string get_Name();
    public string get_Value();
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.TestTimeout : Enum {
    public int value__;
    public static TestTimeout Infinite;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.TimeoutAttribute : Attribute {
    private int m_timeout;
    public int Timeout { get; }
    public TimeoutAttribute(int timeout);
    public TimeoutAttribute(TestTimeout timeout);
    public int get_Timeout();
}
public abstract class Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestAssertException : Exception {
    private UtfMessage m_message;
    public string Message { get; }
    internal UnitTestAssertException(UtfMessage message);
    internal UnitTestAssertException(UtfMessage message, Exception inner);
    protected UnitTestAssertException(string msg, Exception ex);
    protected UnitTestAssertException(string msg);
    protected UnitTestAssertException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome : Enum {
    public int value__;
    public static UnitTestOutcome Failed;
    public static UnitTestOutcome Inconclusive;
    public static UnitTestOutcome Passed;
    public static UnitTestOutcome InProgress;
    public static UnitTestOutcome Error;
    public static UnitTestOutcome Timeout;
    public static UnitTestOutcome Aborted;
    public static UnitTestOutcome Unknown;
}
internal static class Microsoft.VisualStudio.TestTools.UnitTesting.UtfHelper : object {
    internal static string GetExceptionMsg(Exception ex);
}
internal class Microsoft.VisualStudio.TestTools.UnitTesting.UtfMessage : object {
    private Object[] m_array;
    private string m_name;
    private ResourceManager m_rm;
    private Type m_t;
    private static Dictionary`2<Type, ResourceManager> s_resourceManagers;
    public ResourceManager RM { get; }
    internal string Name { get; }
    internal Object[] Params { get; }
    public UtfMessage(string name, Type type, ResourceManager resourceManager, Object[] array);
    private static UtfMessage();
    public static string op_Implicit(UtfMessage utfMessage);
    public ResourceManager get_RM();
    internal string get_Name();
    internal Object[] get_Params();
    public virtual string ToString();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerAttribute : Attribute {
    private string m_name;
    private string m_pathToWebApp;
    private string m_webAppRoot;
    public string Name { get; }
    public string PathToWebApp { get; }
    public string WebAppRoot { get; }
    public AspNetDevelopmentServerAttribute(string name, string pathToWebApp);
    public AspNetDevelopmentServerAttribute(string name, string pathToWebApp, string webAppRoot);
    public string get_Name();
    public string get_PathToWebApp();
    public string get_WebAppRoot();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.Web.AspNetDevelopmentServerHostAttribute : Attribute {
    private string m_pathToWebApp;
    private string m_webAppRoot;
    public string PathToWebApp { get; }
    public string WebAppRoot { get; }
    public AspNetDevelopmentServerHostAttribute(string pathToWebApp);
    public AspNetDevelopmentServerHostAttribute(string pathToWebApp, string webAppRoot);
    public string get_PathToWebApp();
    public string get_WebAppRoot();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.Web.CredentialAttribute : Attribute {
    private string m_userName;
    private string m_password;
    private string m_domain;
    public string UserName { get; }
    public string Password { get; }
    public string Domain { get; }
    public CredentialAttribute(string userName, string password);
    public CredentialAttribute(string userName, string password, string domain);
    public string get_UserName();
    public string get_Password();
    public string get_Domain();
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.Web.UrlToTestAttribute : Attribute {
    private string m_urlToTest;
    public string UrlToTest { get; }
    public UrlToTestAttribute(string urlToTest);
    public string get_UrlToTest();
}
public class Microsoft.VisualStudio.TestTools.UnitTesting.WebServiceHelper : object {
    public static bool TryUrlRedirection(WebClientProtocol client, TestContext context, string identifier);
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.TestTools.UnitTesting.WorkItemAttribute : Attribute {
    private int m_id;
    public int Id { get; }
    public WorkItemAttribute(int id);
    public int get_Id();
}
