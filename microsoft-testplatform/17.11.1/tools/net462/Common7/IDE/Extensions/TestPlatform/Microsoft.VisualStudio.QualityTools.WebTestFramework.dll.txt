[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[LocalizableDisplayNameAttribute("GenerateGuidName")]
[LocalizableDescriptionAttribute("GenerateGuidDescription")]
public class Microsoft.SystemCenter.Cloud.GsmPlugins.GuidGeneratorWebTestPlugin : WebTestPlugin {
    [CompilerGeneratedAttribute]
private string <ContextParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFormat>k__BackingField;
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("TargetContextParameterName")]
[LocalizableDescriptionAttribute("TargetContextParameterDescription")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ContextParameterName { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("OutputFormatName")]
[LocalizableDescriptionAttribute("GenerateGuidOutputFormatDescription")]
public string OutputFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContextParameterName();
    [CompilerGeneratedAttribute]
public void set_ContextParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFormat();
    [CompilerGeneratedAttribute]
public void set_OutputFormat(string value);
    public virtual void PreWebTest(object sender, PreWebTestEventArgs e);
}
[LocalizableDisplayNameAttribute("RandomIntGeneratorName")]
[LocalizableDescriptionAttribute("RandomIntGeneratorDescription")]
public class Microsoft.SystemCenter.Cloud.GsmPlugins.RandomIntGeneratorWebTestPlugin : WebTestPlugin {
    [CompilerGeneratedAttribute]
private string <ContextParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinValue>k__BackingField;
    [LocalizableDisplayNameAttribute("TargetContextParameterName")]
[LocalizableDescriptionAttribute("TargetContextParameterDescription")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("MaxValueName")]
[LocalizableDescriptionAttribute("MaxValueDescription")]
public int MaxValue { get; public set; }
    [LocalizableDisplayNameAttribute("MinValueName")]
[LocalizableDescriptionAttribute("MinValueDescription")]
public int MinValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContextParameterName();
    [CompilerGeneratedAttribute]
public void set_ContextParameterName(string value);
    [CompilerGeneratedAttribute]
public int get_MaxValue();
    [CompilerGeneratedAttribute]
public void set_MaxValue(int value);
    [CompilerGeneratedAttribute]
public int get_MinValue();
    [CompilerGeneratedAttribute]
public void set_MinValue(int value);
    public virtual void PreWebTest(object sender, PreWebTestEventArgs e);
}
[LocalizableDisplayNameAttribute("SamlTokenGeneratorName")]
[LocalizableDescriptionAttribute("SamlTokenGeneratorDescription")]
public class Microsoft.SystemCenter.Cloud.GsmPlugins.SamlTokenWebTestPlugin : WebTestPlugin {
    [CompilerGeneratedAttribute]
private string <AudienceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientCertificateBase64>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotAfterTimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NotBeforeTimeSpan>k__BackingField;
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("AudienceUriName")]
[LocalizableDescriptionAttribute("AudieneUriDescription")]
public string AudienceUri { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("CertificatePasswordName")]
[LocalizableDescriptionAttribute("CertificatePasswordDescription")]
public string CertificatePassword { get; public set; }
    public X509Certificate2 ClientCertificate { get; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("ClientCertificateName")]
[LocalizableDescriptionAttribute("ClientCertificateDescription")]
public string ClientCertificateBase64 { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("TargetContextParameterName")]
[LocalizableDescriptionAttribute("TargetContextParameterDescription")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ContextParameterName { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("NameIdentifierName")]
[LocalizableDescriptionAttribute("NameIdentifierDescription")]
public string NameIdentifier { get; public set; }
    public TimeSpan NotAfter { get; }
    [DefaultValueAttribute("0.00:05:00")]
[LocalizableDisplayNameAttribute("NotAfterTimeSpanName")]
[LocalizableDescriptionAttribute("NotAfterTimeSpanDescription")]
public string NotAfterTimeSpan { get; public set; }
    public TimeSpan NotBefore { get; }
    [DefaultValueAttribute("-0.00:05:00")]
[LocalizableDisplayNameAttribute("NotBeforeTimeSpanName")]
[LocalizableDescriptionAttribute("NotBeforeTimeSpanDescription")]
public string NotBeforeTimeSpan { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AudienceUri();
    [CompilerGeneratedAttribute]
public void set_AudienceUri(string value);
    [CompilerGeneratedAttribute]
public string get_CertificatePassword();
    [CompilerGeneratedAttribute]
public void set_CertificatePassword(string value);
    public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public string get_ClientCertificateBase64();
    [CompilerGeneratedAttribute]
public void set_ClientCertificateBase64(string value);
    [CompilerGeneratedAttribute]
public string get_ContextParameterName();
    [CompilerGeneratedAttribute]
public void set_ContextParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_NameIdentifier();
    [CompilerGeneratedAttribute]
public void set_NameIdentifier(string value);
    public TimeSpan get_NotAfter();
    [CompilerGeneratedAttribute]
public string get_NotAfterTimeSpan();
    [CompilerGeneratedAttribute]
public void set_NotAfterTimeSpan(string value);
    public TimeSpan get_NotBefore();
    [CompilerGeneratedAttribute]
public string get_NotBeforeTimeSpan();
    [CompilerGeneratedAttribute]
public void set_NotBeforeTimeSpan(string value);
    public virtual void PreWebTest(object sender, PreWebTestEventArgs e);
    internal static string GenerateSamlAssertionBound(string audienceUri, string certificatePassword, string clientCertificateBase64, string nameIdentifier, string notAfterTimeSpan, string notBeforeTimeSpan);
    internal string GenerateSamlAssertion(WebTestContext webTestContext);
    private static string GetSaml2TokenString(Saml2SecurityToken token);
    private static Saml2SecurityToken GetSamlAssertionSignedWithCertificate(string audienceUri, X509Certificate2 clientCertificate, string nameIdentifier, TimeSpan notAfter, TimeSpan notBefore);
    private static string UpdateBindingSites(WebTestContext webTestContext, string preBoundString);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.QualityTools.WebTestFramework.MessageResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddCommentError { get; }
    internal static string BindingSiteError { get; }
    internal static string CalendarCommentWithDate { get; }
    internal static string CalendarEventParseError { get; }
    internal static string CalendarItemErrorIndexOutOfBounds { get; }
    internal static string CalendarItemFormat { get; }
    internal static string CalendarItemParseDataRowError { get; }
    internal static string CalendarItemStringArrayError { get; }
    internal static string CalendarStartDateTimeInvalidError { get; }
    internal static string CollectionofValues { get; }
    internal static string CommentFormatError { get; }
    internal static string ContentTypeAgrumentError { get; }
    internal static string ContextParameterValueMissing { get; }
    internal static string DatesCollectionNotFound { get; }
    internal static string DefaultCommentFormat { get; }
    internal static string DefaultCommentFormatWithValue { get; }
    internal static string DeserializationErrorMessage { get; }
    internal static string DocumentItemFormat { get; }
    internal static string EmptyResponseError { get; }
    internal static string EndsWithError { get; }
    internal static string ExtractFormField2FoundValue { get; }
    internal static string ExtractFormField2UnableToDetect { get; }
    internal static string FewerItemsDetected { get; }
    internal static string HrefExtractError { get; }
    internal static string IdTitleResultsCommentFormatString { get; }
    internal static string InvalidDateFormat { get; }
    internal static string InvalidParameter { get; }
    internal static string InvalidParameterType { get; }
    internal static string ItemIdExtractionError { get; }
    internal static string ItemsFound { get; }
    internal static string KeyValueNotFoundError { get; }
    internal static string LeftBoundError { get; }
    internal static string ListIdArguementError { get; }
    internal static string ListItemFormat { get; }
    internal static string ListTitleFilterNotFound { get; }
    internal static string NoGuidDetected { get; }
    internal static string NoItemsFound { get; }
    internal static string PageTypeArgumentError { get; }
    internal static string PluginArgumentErrorFormat { get; }
    internal static string RightBoundError { get; }
    internal static string RuleDisabled { get; }
    internal static string SelectedItem { get; }
    internal static string SelectedLastItem { get; }
    internal static string SelectedRandomItem { get; }
    internal static string SelectFormFieldRuleError { get; }
    internal static string StartsWithError { get; }
    internal static string StringCollectionNotFound { get; }
    internal static string SubfieldBoundsError { get; }
    internal static string ValidateResponseUrl2ActualUrlParseError { get; }
    internal static string ValidateResponseUrl2ExpectedUrlParseError { get; }
    internal static string ValidateResponseUrl2Failure { get; }
    internal static string ValidateResponseUrl2Success { get; }
    internal static string ValidateResponseUrl2ValidationSkipped { get; }
    internal static string ValidationFindTexStoppingTestIteration { get; }
    internal static string ValidationFindTextErrorMessage { get; }
    internal static string ValidationFindTextFoundForbiddenPattern { get; }
    internal static string ValidationFindTextFoundForbiddenText { get; }
    internal static string ValidationFindTextFoundMissingText { get; }
    internal static string ValidationFindTextMissingPattern { get; }
    internal static string ValidationFindTextStopTestMessage { get; }
    internal static string ValidationFindTexValidationError { get; }
    internal static string ValueExtracted { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddCommentError();
    internal static string get_BindingSiteError();
    internal static string get_CalendarCommentWithDate();
    internal static string get_CalendarEventParseError();
    internal static string get_CalendarItemErrorIndexOutOfBounds();
    internal static string get_CalendarItemFormat();
    internal static string get_CalendarItemParseDataRowError();
    internal static string get_CalendarItemStringArrayError();
    internal static string get_CalendarStartDateTimeInvalidError();
    internal static string get_CollectionofValues();
    internal static string get_CommentFormatError();
    internal static string get_ContentTypeAgrumentError();
    internal static string get_ContextParameterValueMissing();
    internal static string get_DatesCollectionNotFound();
    internal static string get_DefaultCommentFormat();
    internal static string get_DefaultCommentFormatWithValue();
    internal static string get_DeserializationErrorMessage();
    internal static string get_DocumentItemFormat();
    internal static string get_EmptyResponseError();
    internal static string get_EndsWithError();
    internal static string get_ExtractFormField2FoundValue();
    internal static string get_ExtractFormField2UnableToDetect();
    internal static string get_FewerItemsDetected();
    internal static string get_HrefExtractError();
    internal static string get_IdTitleResultsCommentFormatString();
    internal static string get_InvalidDateFormat();
    internal static string get_InvalidParameter();
    internal static string get_InvalidParameterType();
    internal static string get_ItemIdExtractionError();
    internal static string get_ItemsFound();
    internal static string get_KeyValueNotFoundError();
    internal static string get_LeftBoundError();
    internal static string get_ListIdArguementError();
    internal static string get_ListItemFormat();
    internal static string get_ListTitleFilterNotFound();
    internal static string get_NoGuidDetected();
    internal static string get_NoItemsFound();
    internal static string get_PageTypeArgumentError();
    internal static string get_PluginArgumentErrorFormat();
    internal static string get_RightBoundError();
    internal static string get_RuleDisabled();
    internal static string get_SelectedItem();
    internal static string get_SelectedLastItem();
    internal static string get_SelectedRandomItem();
    internal static string get_SelectFormFieldRuleError();
    internal static string get_StartsWithError();
    internal static string get_StringCollectionNotFound();
    internal static string get_SubfieldBoundsError();
    internal static string get_ValidateResponseUrl2ActualUrlParseError();
    internal static string get_ValidateResponseUrl2ExpectedUrlParseError();
    internal static string get_ValidateResponseUrl2Failure();
    internal static string get_ValidateResponseUrl2Success();
    internal static string get_ValidateResponseUrl2ValidationSkipped();
    internal static string get_ValidationFindTexStoppingTestIteration();
    internal static string get_ValidationFindTextErrorMessage();
    internal static string get_ValidationFindTextFoundForbiddenPattern();
    internal static string get_ValidationFindTextFoundForbiddenText();
    internal static string get_ValidationFindTextFoundMissingText();
    internal static string get_ValidationFindTextMissingPattern();
    internal static string get_ValidationFindTextStopTestMessage();
    internal static string get_ValidationFindTexValidationError();
    internal static string get_ValueExtracted();
}
public class Microsoft.VisualStudio.QualityTools.WebTestFramework.Utilities.Pattern : object {
    public bool BActive;
    [CompilerGeneratedAttribute]
private MatchUsing <MatchUsingCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SPattern>k__BackingField;
    public Regex RegEx;
    public Match LastRegExMatch;
    public XmlNode XPathMatchedNode;
    private static RegexOptions DefaultRegExOptions;
    public bool bIgnoreCase;
    [CompilerGeneratedAttribute]
private bool <RemoveUnicodeEscapeSequencesForCompare>k__BackingField;
    public MatchUsing MatchUsingCriteria { get; public set; }
    public string SPattern { get; public set; }
    public bool RemoveUnicodeEscapeSequencesForCompare { get; public set; }
    public Pattern(bool bActive, MatchUsing matchUsing, string sPattern, Regex regEx, RegexOptions _regexOptions);
    public Pattern(bool bActive, MatchUsing matchUsing, string sPattern);
    public Pattern(MatchUsing matchUsing, string sPattern);
    public Pattern(string sPattern);
    public Pattern(Regex regex);
    public Pattern(Pattern pattern);
    [CompilerGeneratedAttribute]
public MatchUsing get_MatchUsingCriteria();
    [CompilerGeneratedAttribute]
public void set_MatchUsingCriteria(MatchUsing value);
    [CompilerGeneratedAttribute]
public string get_SPattern();
    [CompilerGeneratedAttribute]
public void set_SPattern(string value);
    [CompilerGeneratedAttribute]
public bool get_RemoveUnicodeEscapeSequencesForCompare();
    [CompilerGeneratedAttribute]
public void set_RemoveUnicodeEscapeSequencesForCompare(bool value);
    public bool Compare(string sTarget);
    public bool Compare(MatchUsing matchUsing, string sTarget, string sPattern);
    public bool Replace(String& sTarget, string sReplaceWith, string sReplaceText);
    private XmlNodeList GetMatchedNodes(string sTarget);
    public bool Replace(String& sTarget, string sReplaceWith);
}
public class Microsoft.VisualStudio.QualityTools.WebTestFramework.Utilities.Patterns : List`1<Pattern> {
    private int _LastMatchIndex;
    public int LastMatchIndex { get; }
    public Patterns(Pattern pattern);
    public Patterns(string sPattern);
    public Patterns(MatchUsing matchUsing, string sPattern);
    public int get_LastMatchIndex();
    public void Add(string sPattern);
    public void Add(MatchUsing matchUsing, string sPattern);
    public void Add(bool bActive, MatchUsing matchUsing, string sPattern);
    public bool Compare(string sTarget);
    public int Replace(String& sTarget, string sReplaceWith);
    public int Replace(String& sTarget, string sReplaceWith, int nMaxReplacements);
}
internal class Microsoft.VisualStudio.QualityTools.WebTestFramework.Utilities.SharepointStrings : Strings {
    internal static ResourceManager s_spRM;
    internal static ResourceManager s_spRMLocalized;
    internal static string AddCommentError;
    internal static string CalendarEventParseError;
    internal static string CalendarItemErrorIndexOutOfBounds;
    internal static string CalendarItemParseDataRowError;
    internal static string CalendarItemStringArrayError;
    internal static string CalendarStartDateTimeInvalidError;
    internal static string CommentFormatError;
    internal static string ContentTypeAgrumentError;
    internal static string ContextParameterValueMissing;
    internal static string DatesCollectionNotFound;
    internal static string EmptyResponseError;
    internal static string EndsWithError;
    internal static string ExtractFormField2UnableToDetect;
    internal static string FewerItemsDetected;
    internal static string HrefExtractError;
    internal static string InvalidDateFormat;
    internal static string InvalidParameter;
    internal static string InvalidParameterType;
    internal static string ItemIdExtractionError;
    internal static string KeyValueNotFoundError;
    internal static string LeftBoundError;
    internal static string ListIdArguementError;
    internal static string ListTitleFilterNotFound;
    internal static string NoGuidDetected;
    internal static string NoItemsFound;
    internal static string PageTypeArgumentError;
    internal static string RightBoundError;
    internal static string SelectFormFieldRuleError;
    internal static string StartsWithError;
    internal static string StringCollectionNotFound;
    internal static string SubfieldBoundsError;
    internal static string ValidateResponseUrl2ActualUrlParseError;
    internal static string ValidateResponseUrl2ExpectedUrlParseError;
    internal static string ValidateResponseUrl2Failure;
    internal static string ValidateResponseUrl2Success;
    internal static string ValidateResponseUrl2ValidationSkipped;
    internal static string ValidationFindTexStoppingTestIteration;
    internal static string ValidationFindTextErrorMessage;
    internal static string ValidationFindTextFoundForbiddenPattern;
    internal static string ValidationFindTextFoundForbiddenText;
    internal static string ValidationFindTextFoundMissingText;
    internal static string ValidationFindTextMissingPattern;
    internal static string ValidationFindTextStopTestMessage;
    internal static string ValidationFindTexValidationError;
    private static SharepointStrings();
    public static string Get(string name);
    public static string Get(string name, string resultsLocale);
    public static string Get(string name, CultureInfo cultureInfo);
    public static string Get(string name, string resultsLocale, Object[] args);
}
internal class Microsoft.VisualStudio.QualityTools.WebTestFramework.Utilities.Strings : object {
    private static ResourceManager s_rm;
    private static ResourceManager s_rmLocalized;
    public static string BoundsEndsWith;
    public static string BoundsEndsWithDescription;
    public static string BoundsStartsWith;
    public static string BoundsStartsWithDescription;
    public static string CategoryComments;
    public static string CategoryContextParameters;
    public static string CategoryConversions;
    public static string CategoryDefaults;
    public static string CategoryErrorRequest;
    public static string CategoryFilters;
    public static string CategoryStopTest;
    public static string CheckFormPostValuesDescription;
    public static string CheckFormPostValuesName;
    public static string CheckQueryStringValuesDescription;
    public static string CheckQueryStringValuesName;
    public static string CheckStringBodyValuesDescription;
    public static string CheckStringBodyValuesName;
    public static string ConditionalRuleDescriptionContextParameterExistence;
    public static string ConditionalRuleDescriptionCookieComparison;
    public static string ConditionalRuleDescriptionCookieExistence;
    public static string ConditionalRuleDescriptionCountingLoop;
    public static string ConditionalRuleDescriptionForLoopRule;
    public static string ConditionalRuleDescriptionLastRequestOutcome;
    public static string ConditionalRuleDescriptionLastResponseCode;
    public static string ConditionalRuleDescriptionNumericalComparisonRule;
    public static string ConditionalRuleDescriptionProbabilityRule;
    public static string ConditionalRuleDescriptionStringComparisonRule;
    public static string ConditionalRuleExceptionInCheck;
    public static string ConditionalRuleExceptionInCleanUp;
    public static string ConditionalRuleExceptionIncorrectAssociation;
    public static string ConditionalRuleExceptionInInitialize;
    public static string ConditionalRuleExceptionNoRuleFound;
    public static string ConditionalRuleExceptionWhileBinding;
    public static string ConditionalRuleNameContextParameterExistence;
    public static string ConditionalRuleNameCookieComparison;
    public static string ConditionalRuleNameCookieExistence;
    public static string ConditionalRuleNameCountingLoop;
    public static string ConditionalRuleNameForLoopRule;
    public static string ConditionalRuleNameLastRequestOutcome;
    public static string ConditionalRuleNameLastResponseCode;
    public static string ConditionalRuleNameNumericalComparisonRule;
    public static string ConditionalRuleNameProbabilityRule;
    public static string ConditionalRuleNameStringComparisonRule;
    public static string ConditionalRuleType;
    public static string ConditionMet;
    public static string ConditionNotMet;
    public static string ConnectionFailedWebTestExceptionMessage;
    public static string ContentTypeID;
    public static string ContentTypeIdContextParameter;
    public static string ContentTypeIdContextParameterDescription;
    public static string ContentTypeIDDescription;
    public static string ContextParameterApplyBeforeRequestDescritpion;
    public static string ContextParameterApplyBeforeRequestName;
    public static string ContextParameterDescription;
    public static string ContextParameterHtmlDecodeDescription;
    public static string ContextParameterHtmlDecodeName;
    public static string ContextParameterHtmlEncodeDescription;
    public static string ContextParameterHtmlEncodeName;
    public static string ContextParameterName;
    public static string ContextParameterNameCategoryReplace;
    public static string ContextParameterNameCategoryTransform;
    public static string ContextParameterNotFoundExceptionMessage;
    public static string ContextParameterPatternDescription;
    public static string ContextParameterPatternName;
    public static string ContextParameterReplaceDescription;
    public static string ContextParameterReplaceName;
    public static string ContextParameterReplaceWithDescription;
    public static string ContextParameterReplaceWithName;
    public static string ContextParameterUrlDecodeDescription;
    public static string ContextParameterUrlDecodeName;
    public static string ContextParameterUrlEncodeDescription;
    public static string ContextParameterUrlEncodeName;
    public static string ContextParameterUseRegexDescription;
    public static string ContextParameterUseRegexName;
    public static string ContextParameterValueDescription;
    public static string ContextParameterValueName;
    public static string CreateClassExceptionMessage;
    public static string CreateRuleExceptionMessage;
    public static string DataSourceAlreadyExists;
    public static string DataSourceNotFound;
    public static string DataSourceTableNotFound;
    public static string DateFormat;
    public static string DateFormatDescription;
    public static string DecodeHtmlDescription;
    public static string DecodeUnicodeEscapeSequences;
    public static string DecodeUnicodeEscapeSequencesDescription;
    public static string DecodeUrlDescription;
    public static string DefaultValue;
    public static string DefaultValueDescription;
    public static string DefaultValueLoopCounter;
    public static string DisableString;
    public static string DisableStringDescription;
    public static string DisplayFormatContextParameter;
    public static string DisplayFormatContextParameterDescription;
    public static string DocumentFilter;
    public static string DocumentFilterDescription;
    public static string Enabled;
    public static string EnabledDescription;
    public static string ErrorCookieNotFound;
    public static string ErrorCPContentNotANumber;
    public static string ErrorExceededLoopMaxIterations;
    public static string ErrorInvalidPercentageValues;
    public static string ErrorLastResponseNotFound;
    public static string ErrorResponseNotHtmlForExtractionRules;
    public static string ErrorResponseNotHtmlForValidationRules;
    public static string ErrorUnableToGetStringRepresentaion;
    public static string EventEndDateContextParameter;
    public static string EventEndDateContextParameterDescription;
    public static string EventEndTimeContextParameter;
    public static string EventEndTimeContextParameterDescription;
    public static string EventStartDateContextParameter;
    public static string EventStartDateContextParameterDescription;
    public static string EventStartTimeContextParameter;
    public static string EventStartTimeContextParameterDescription;
    public static string EventTitleContextParameter;
    public static string EventTitleContextParameterDescription;
    public static string ExtractAttributeValueError;
    public static string ExtractFormFieldNotFound;
    public static string ExtractHttpHeaderError;
    public static string ExtractHttpHeaderErrorIndexNotFound;
    public static string ExtractionErrorSelectTagNotFound;
    public static string ExtractionErrorTagNotFound;
    public static string ExtractionRuleDescriptionAttributeValue;
    public static string ExtractionRuleDescriptionFindWorkflowInstances;
    public static string ExtractionRuleDescriptionFormField;
    public static string ExtractionRuleDescriptionHiddenFields;
    public static string ExtractionRuleDescriptionHttpHeader;
    public static string ExtractionRuleDescriptionRegularExpression;
    public static string ExtractionRuleDescriptionSelectTag;
    public static string ExtractionRuleDescriptionSP2010FindCalendarDates;
    public static string ExtractionRuleDescriptionSP2010FindCalendarItems;
    public static string ExtractionRuleDescriptionSP2010FindDocumentItems;
    public static string ExtractionRuleDescriptionSP2010FindListItems;
    public static string ExtractionRuleDescriptionSP2010FindListItemsHrefs;
    public static string ExtractionRuleDescriptionSPExtractGUIDFromField;
    public static string ExtractionRuleDescriptionSPExtractSelectFormField;
    public static string ExtractionRuleDescriptionSPExtractViaKeyString;
    public static string ExtractionRuleDescriptionSPFindHrefs;
    public static string ExtractionRuleDescriptionSPFormField2;
    public static string ExtractionRuleDescriptionSPListViewWebPartScriptValue;
    public static string ExtractionRuleDescriptionTagInnerText;
    public static string ExtractionRuleDescriptionText;
    public static string ExtractionRuleExtractTextIndexLessThanZero;
    public static string ExtractionRuleNameAttributeValue;
    public static string ExtractionRuleNameFindWorkflowInstances;
    public static string ExtractionRuleNameFormField;
    public static string ExtractionRuleNameHiddenFields;
    public static string ExtractionRuleNameHttpHeader;
    public static string ExtractionRuleNameRegularExpression;
    public static string ExtractionRuleNameSelectTag;
    public static string ExtractionRuleNameSP2010FindCalendarDates;
    public static string ExtractionRuleNameSP2010FindCalendarItems;
    public static string ExtractionRuleNameSP2010FindDocumentItems;
    public static string ExtractionRuleNameSP2010FindListItems;
    public static string ExtractionRuleNameSP2010FindListItemsHrefs;
    public static string ExtractionRuleNameSPExtractGUIDFormField;
    public static string ExtractionRuleNameSPExtractSelectFormField;
    public static string ExtractionRuleNameSPExtractViaKeyString;
    public static string ExtractionRuleNameSPFindHrefs;
    public static string ExtractionRuleNameSPFormField2;
    public static string ExtractionRuleNameSPGuids;
    public static string ExtractionRuleNameSPListViewWebPartScriptValue;
    public static string ExtractionRuleNameTagInnerText;
    public static string ExtractionRuleNameText;
    public static string ExtractionRuleSPGuidsDescription;
    public static string ExtractionRuleType;
    public static string ExtractTextEndsWithNotFound;
    public static string ExtractTextStartsWithNotFound;
    public static string Failed;
    public static string FormFieldName;
    public static string FormFieldNameDescription;
    public static string FormFieldType;
    public static string FormFieldTypeDescription;
    public static string GenericGUIDFormat;
    public static string GenericGUIDFormatDescription;
    public static string GUIDFormFieldName;
    public static string GUIDFormFieldNameDescription;
    public static string HrefContextParameter;
    public static string HrefContextParameterDescription;
    public static string HtmlParseException;
    public static string ItemEndDateTimeFilter;
    public static string ItemEndDateTimeFilterDescription;
    public static string ItemIDContextParameter;
    public static string ItemIDContextParameterDescription;
    public static string ItemNumber;
    public static string ItemNumberDescription;
    public static string ItemStartDateTimeFilter;
    public static string ItemStartDateTimeFilterDescription;
    public static string ItemTitleFilter;
    public static string ItemTitleFilterDescription;
    public static string KeyString;
    public static string KeyStringDescription;
    public static string ListId;
    public static string ListIdContextParameter;
    public static string ListIdContextParameterDescription;
    public static string ListIdDescription;
    public static string ListTitle;
    public static string ListTitleDescription;
    public static string MatchCase;
    public static string MatchCaseDescription;
    public static string MissingValueasEmptyString;
    public static string MissingValueasEmptyStringDescription;
    public static string NoHiddenFieldsFound;
    public static string NumericalComparisonOperatorEquality;
    public static string NumericalComparisonOperatorGreaterThan;
    public static string NumericalComparisonOperatorGreaterThanOrEqual;
    public static string NumericalComparisonOperatorInequality;
    public static string NumericalComparisonOperatorLessThan;
    public static string NumericalComparisonOperatorLessThanOrEqual;
    public static string OutcomeFail;
    public static string OutcomePass;
    public static string PageType;
    public static string PageTypeContextParameter;
    public static string PageTypeContextParameterDescription;
    public static string PageTypeDescription;
    public static string PartialMatch;
    public static string PartialMatchDescription;
    public static string Passed;
    public static string ProcessOnlyNestedContextParametersDescription;
    public static string ProcessOnlyNestedContextParametersName;
    public static string PropertyDescriptionAttributeName;
    public static string PropertyDescriptionAttributeValue;
    public static string PropertyDescriptionCheckForCookieExistence;
    public static string PropertyDescriptionCheckForParameterExistence;
    public static string PropertyDescriptionClosingTag;
    public static string PropertyDescriptionCollapseExtraWhiteSpace;
    public static string PropertyDescriptionComparisonOperator;
    public static string PropertyDescriptionComparisonValue;
    public static string PropertyDescriptionContextParameterName;
    public static string PropertyDescriptionContextParameterNameToFind;
    public static string PropertyDescriptionCookieComparisonIgnoreCase;
    public static string PropertyDescriptionCookieComparisonUseRegularExpression;
    public static string PropertyDescriptionCookieDomainName;
    public static string PropertyDescriptionCookieNameToFind;
    public static string PropertyDescriptionCookiePath;
    public static string PropertyDescriptionCookieValue;
    public static string PropertyDescriptionCountingContextParamName;
    public static string PropertyDescriptionEndsWith;
    public static string PropertyDescriptionExpectedInnerText;
    public static string PropertyDescriptionExpectedSelectedValue;
    public static string PropertyDescriptionExpectedValue;
    public static string PropertyDescriptionExtractRandomMatch;
    public static string PropertyDescriptionExtractRequired;
    public static string PropertyDescriptionFindText;
    public static string PropertyDescriptionFormFieldName;
    public static string PropertyDescriptionHeader;
    public static string PropertyDescriptionHtmlDecode;
    public static string PropertyDescriptionHtmlTagName;
    public static string PropertyDescriptionIgnoreCase;
    public static string PropertyDescriptionIgnoreCaseForInnerText;
    public static string PropertyDescriptionIncrementValue;
    public static string PropertyDescriptionIndex;
    public static string PropertyDescriptionIndexForExtractHeader;
    public static string PropertyDescriptionIndexForExtractInnerText;
    public static string PropertyDescriptionIndexForValidateAttribute;
    public static string PropertyDescriptionIndexForValidateInnerText;
    public static string PropertyDescriptionInitialValue;
    public static string PropertyDescriptionMatchAttributeName;
    public static string PropertyDescriptionMatchAttributeValue;
    public static string PropertyDescriptionMaxRequestTime;
    public static string PropertyDescriptionNumIterations;
    public static string PropertyDescriptionPassIfTextFound;
    public static string PropertyDescriptionPercentage;
    public static string PropertyDescriptionProbabilityContextParameterName;
    public static string PropertyDescriptionRegularExpression;
    public static string PropertyDescriptionRemoveInnerTags;
    public static string PropertyDescriptionRequestOutcome;
    public static string PropertyDescriptionResponseCode;
    public static string PropertyDescriptionResponseTimeGoalTolerance;
    public static string PropertyDescriptionSearchInHeaders;
    public static string PropertyDescriptionSelectTagName;
    public static string PropertyDescriptionStartsWith;
    public static string PropertyDescriptionStringComparisonIgnoreCase;
    public static string PropertyDescriptionStringComparisonUseRegularExpression;
    public static string PropertyDescriptionTagName;
    public static string PropertyDescriptionTerminatingValue;
    public static string PropertyDescriptionUseRegularExpression;
    public static string PropertyDescriptionWebPageUri;
    public static string PropertyDesriptionMinOccurrences;
    public static string PropertyDesriptionRequiredTagName;
    public static string PropertyNameAttributeName;
    public static string PropertyNameAttributeValue;
    public static string PropertyNameCheckForExistence;
    public static string PropertyNameClosingTag;
    public static string PropertyNameCollapseExtraWhiteSpace;
    public static string PropertyNameComparisonOperator;
    public static string PropertyNameComparisonValue;
    public static string PropertyNameContextParameterName;
    public static string PropertyNameCookieDomainName;
    public static string PropertyNameCookieName;
    public static string PropertyNameCookiePath;
    public static string PropertyNameCookieValue;
    public static string PropertyNameEndsWith;
    public static string PropertyNameExpectedInnerText;
    public static string PropertyNameExpectedSelectedValue;
    public static string PropertyNameExpectedValue;
    public static string PropertyNameExtractRandomMatch;
    public static string PropertyNameExtractRequired;
    public static string PropertyNameFindText;
    public static string PropertyNameFormFieldName;
    public static string PropertyNameHeader;
    public static string PropertyNameHtmlDecode;
    public static string PropertyNameHtmlTagName;
    public static string PropertyNameIgnoreCase;
    public static string PropertyNameIgnoreCaseForInnerText;
    public static string PropertyNameIncrementValue;
    public static string PropertyNameIndex;
    public static string PropertyNameInitialValue;
    public static string PropertyNameMatchAttributeName;
    public static string PropertyNameMatchAttributeValue;
    public static string PropertyNameMaxRequestTime;
    public static string PropertyNameMinOccurrences;
    public static string PropertyNameNumIterations;
    public static string PropertyNamePassIfTextFound;
    public static string PropertyNamePercentage;
    public static string PropertyNameRegularExpression;
    public static string PropertyNameRemoveInnerTags;
    public static string PropertyNameRequestOutcome;
    public static string PropertyNameRequiredTagName;
    public static string PropertyNameResponseCode;
    public static string PropertyNameResponseTimeGoalTolerance;
    public static string PropertyNameSearchInHeaders;
    public static string PropertyNameSelectTagName;
    public static string PropertyNameStartsWith;
    public static string PropertyNameTagName;
    public static string PropertyNameTerminatingValue;
    public static string PropertyNameUseRegularExpression;
    public static string PropertyNameWebPageUri;
    public static string RegularExpressionNotFound;
    public static string Required;
    public static string RequiredDescription;
    public static string ResolveNestedParametersDescription;
    public static string ResolveNestedParametersName;
    public static string ResponseNotHtml;
    public static string ResponseNotHtmlOrPartialRendering;
    public static string ResultsComment;
    public static string ResultsCommentDescription;
    public static string SetContextParameterValueDescription;
    public static string SetContextParameterValueName;
    public static string Storeascollection;
    public static string StoreascollectionDescription;
    public static string StringComparisonOperatorEquals;
    public static string StringComparisonOperatorNotEquals;
    public static string StringRepresentationCheckForCookieAbsence;
    public static string StringRepresentationCheckForCookieExistence;
    public static string StringRepresentationCheckForParameterAbsence;
    public static string StringRepresentationCheckForParameterExistence;
    public static string StringRepresentationCookieEqualityComparison;
    public static string StringRepresentationCookieEqualityComparisonWithBinding;
    public static string StringRepresentationCookieInequalityComparison;
    public static string StringRepresentationCookieInequalityComparisonWithBinding;
    public static string StringRepresentationCountingRule;
    public static string StringRepresentationForCondition;
    public static string StringRepresentationForLoop;
    public static string StringRepresentationForLoopRule;
    public static string StringRepresentationLastRequestOutcomeRule;
    public static string StringRepresentationLastResponseCodeRule;
    public static string StringRepresentationNotLastResponseCodeRule;
    public static string StringRepresentationNumericalComparison;
    public static string StringRepresentationProbabilityRule;
    public static string StringRepresentationStringComparisonEquals;
    public static string StringRepresentationStringComparisonEqualsWithBinding;
    public static string StringRepresentationStringComparisonNotEquals;
    public static string StringRepresentationStringComparisonNotEqualsWithBinding;
    public static string StringSeparator;
    public static string StringSeparatorDescription;
    public static string StringSeparatorForResponseUrlValidation;
    public static string SubfieldEnd;
    public static string SubfieldEndDescription;
    public static string SubfieldStart;
    public static string SubfieldStartDesctiption;
    public static string SubStringEndsWith;
    public static string SubStringEndsWithDescription;
    public static string SubStringExtract;
    public static string SubStringExtractDescription;
    public static string SubStringStartsWith;
    public static string SubStringStartsWithDescription;
    public static string ThresholdRuleCategoryDependentCounter;
    public static string ThresholdRuleCategoryOptions;
    public static string ThresholdRuleCategoryValues;
    public static string ThresholdRuleCompareCountersCriticalThresholdDescription;
    public static string ThresholdRuleCompareCountersWarningThresholdDescription;
    public static string ThresholdRuleDescriptionCompareConstant;
    public static string ThresholdRuleDescriptionCompareCounters;
    public static string ThresholdRuleNameCompareConstant;
    public static string ThresholdRuleNameCompareCounters;
    public static string ThresholdRulePropertyAlertIfOverDescription;
    public static string ThresholdRulePropertyAlertIfOverName;
    public static string ThresholdRulePropertyCriticalThresholdDescription;
    public static string ThresholdRulePropertyCriticalThresholdName;
    public static string ThresholdRulePropertyDependentCategoryDescription;
    public static string ThresholdRulePropertyDependentCategoryName;
    public static string ThresholdRulePropertyDependentCounterDescription;
    public static string ThresholdRulePropertyDependentCounterName;
    public static string ThresholdRulePropertyDependentInstanceDescription;
    public static string ThresholdRulePropertyDependentInstanceName;
    public static string ThresholdRulePropertyDependentMachineDescription;
    public static string ThresholdRulePropertyDependentMachineName;
    public static string ThresholdRulePropertyWarningThresholdDescription;
    public static string ThresholdRulePropertyWarningThresholdName;
    public static string TimeFormat;
    public static string TimeFormatDescription;
    public static string TitleContextParameter;
    public static string TitleContextParameterDescription;
    public static string URLPatternString;
    public static string URLPatternStringDescription;
    public static string URLTerminators;
    public static string URLTerminatorsDescription;
    public static string UseDefaultValue;
    public static string UseDefaultValueDescription;
    public static string UseRegularExpression;
    public static string UseRegularExpressionDescription;
    public static string ValidateFormFieldIncorrectValue;
    public static string ValidateResponseUrlCouldNotBeParsed;
    public static string ValidateResponseUrlNotEqual;
    public static string ValidateResponseUrlNotSet;
    public static string ValidateResponseUrlRequestCouldNotBeParsed;
    public static string ValidationErrorInnerTextNotFound;
    public static string ValidationErrorSelectedOptionNotFound;
    public static string ValidationRuleDescriptionAttributeValue;
    public static string ValidationRuleDescriptionFindText;
    public static string ValidationRuleDescriptionFormField;
    public static string ValidationRuleDescriptionRequestTime;
    public static string ValidationRuleDescriptionRequiredTag;
    public static string ValidationRuleDescriptionResponseTimeGoal;
    public static string ValidationRuleDescriptionResponseUrl;
    public static string ValidationRuleDescriptionSelectTag;
    public static string ValidationRuleDescriptionSPFindText2;
    public static string ValidationRuleDescriptionSPResponseURL2;
    public static string ValidationRuleDescriptionTagInnerText;
    public static string ValidationRuleNameAttributeValue;
    public static string ValidationRuleNameFindText;
    public static string ValidationRuleNameFormField;
    public static string ValidationRuleNameRequestTime;
    public static string ValidationRuleNameRequiredTag;
    public static string ValidationRuleNameResponseTimeGoal;
    public static string ValidationRuleNameResponseUrl;
    public static string ValidationRuleNameSelectTag;
    public static string ValidationRuleNameSPFindText2;
    public static string ValidationRuleNameSPResponseURL2;
    public static string ValidationRuleNameTagInnerText;
    public static string ValidationRuleRequestTimeError;
    public static string ValidationRuleRequiredAttributeValueError;
    public static string ValidationRuleRequiredTagError;
    public static string ValidationRuleResponseTimeGoalError;
    public static string ValidationRuleTextFoundError;
    public static string ValidationRuleTextNotFoundError;
    public static string ValidationRuleType;
    public static string ValidationStringRuleDisabled;
    public static string WebPartTitleFilter;
    public static string WebPartTitleFilterDescription;
    public static string WebTestCannotBeOpened;
    public static string WebTestErrorTypeConditionalRuleError;
    public static string WebTestErrorTypeDataCollectionError;
    public static string WebTestErrorTypeDataCollectionWarning;
    public static string WebTestErrorTypeException;
    public static string WebTestErrorTypeExtractionRuleError;
    public static string WebTestErrorTypeHttpError;
    public static string WebTestErrorTypeTestError;
    public static string WebTestErrorTypeTimeout;
    public static string WebTestErrorTypeValidationRuleError;
    public static string WebTestFileCreatedByLaterRelease;
    public static string WebTestRequestOutcomeNotSettable;
    public static string WebTestResultDetailsDeserializationError;
    public static string WebTestResultDetailsSerializationError;
    private static Strings();
    public static string Get(string name);
    public static string Get(string name, string resultsLocale);
    public static string Get(string name, CultureInfo cultureInfo);
    public static string Get(string name, string resultsLocale, Object[] args);
    public static string Get(string name, CultureInfo cultureInfo, Object[] args);
    protected static string Get(string name, ResourceManager rm);
    protected static string GetStringUsingCultureInfo(string name, CultureInfo cultureInfo, ResourceManager rm);
    protected static string CheckForMissingResource(string s, string name);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.QualityTools.WebTestFramework.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.AddCommentToResultDelegate : MulticastDelegate {
    public AddCommentToResultDelegate(object object, IntPtr method);
    public virtual void Invoke(string comment, int declarativeWebTestItemId, Guid sourceWebTestId);
    public virtual IAsyncResult BeginInvoke(string comment, int declarativeWebTestItemId, Guid sourceWebTestId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.AlwaysExecuteRecorderPluginAttribute : Attribute {
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.BaseEnumStringConverter`1 : StringConverter {
    private String[] m_standardValues;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    protected abstract virtual T ConvertFromStringToEnum(string value);
    protected abstract virtual string ConvertFromEnumToString(T value);
    protected abstract virtual String[] PopulateStandardValues();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.BinaryHttpBody : object {
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public Byte[] Data { get; public set; }
    public string ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    public sealed virtual void WriteHttpBody(WebTestRequest request, Stream bodyStream);
    public sealed virtual object Clone();
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.BindingHelperMethods : object {
    public static string AddBindingBraces(string bindingName);
    public static bool IsBoundValue(string value);
    public static bool IsFullyBoundValue(string value);
    public static bool IsFullyBoundWithName(string value, string bindingName);
    public static string GetBindingName(string fullyBoundValue);
    public static List`1<string> GetBindingSites(string value);
    public static List`1<string> GetBindingSites(string value, string prefix);
    internal static string GetNextBindingSite(string searchString, int startIndex, Int32& startBindingIndex, Int32& endIndex);
    public static string ReplaceBinding(string fullValue, string bindingNameToReplace, string replacement, bool bindingNameIsPrefix);
    public static DataSourceDataTablePair ExtractDataSourceAndTable(string binding);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.ByteArrayCache : object {
    private static SHA1 s_sha1;
    private Dictionary`2<Guid, int> m_mapGuidToHandle;
    private Dictionary`2<int, Byte[]> m_mapHandleToBytes;
    private int m_nextHandle;
    internal Dictionary`2<int, Byte[]> HandleToBytesMap { get; internal set; }
    internal int NextHandle { get; internal set; }
    private static ByteArrayCache();
    public Byte[] GetBytesForHandle(int handle);
    public int GetHandleForBytes(Byte[] bytes);
    private static Guid ComputeHash(Byte[] bytes);
    private Byte[] CompressBytes(Byte[] bytesUncompressed);
    private Byte[] DecompressBytes(Byte[] bytesCompressed);
    internal Dictionary`2<int, Byte[]> get_HandleToBytesMap();
    internal void set_HandleToBytesMap(Dictionary`2<int, Byte[]> value);
    internal int get_NextHandle();
    internal void set_NextHandle(int value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.CodedWebTestAttribute : Attribute {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.Comment : WebTestItem {
    private string m_commentText;
    private Guid m_sourceWebTestId;
    internal Guid SourceWebTestId { get; internal set; }
    public string CommentText { get; public set; }
    public Comment(string commentText);
    internal Guid get_SourceWebTestId();
    internal void set_SourceWebTestId(Guid value);
    public string get_CommentText();
    public void set_CommentText(string value);
    public virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.ConditionalConstructCollection : WebTestBaseCollection`1<WebTestConditionalConstruct> {
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.ConditionalConstructType : Enum {
    public int value__;
    public static ConditionalConstructType Condition;
    public static ConditionalConstructType Loop;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ConditionalEventArgs : EventArgs {
    private WebTest m_webTest;
    private RuleResult m_ruleResult;
    public WebTest WebTest { get; }
    public string Message { get; public set; }
    public bool IsMet { get; public set; }
    internal RuleResult RuleResult { get; }
    internal ConditionalEventArgs(WebTest webTest);
    public WebTest get_WebTest();
    public string get_Message();
    public void set_Message(string value);
    public bool get_IsMet();
    public void set_IsMet(bool value);
    internal RuleResult get_RuleResult();
}
[ConditionalRuleTypeAttribute("0")]
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.ConditionalRule : object {
    public virtual void Initialize(object sender, ConditionalEventArgs e);
    public abstract virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual void CleanUp(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ConditionalRuleException : WebTestException {
    public ConditionalRuleException(string message);
    public ConditionalRuleException(string message, Exception innerException);
    protected ConditionalRuleException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.ConditionalRuleExecDelegate : MulticastDelegate {
    public ConditionalRuleExecDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTestCondition condition);
    public virtual IAsyncResult BeginInvoke(WebTestCondition condition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.ConditionalRuleReference : WebTestRuleBase {
    protected ConditionalRuleReference(ConditionalRuleReference copy);
    protected ConditionalRuleReference(Type type);
    internal ConditionalRule CreateInstance();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ConditionalRuleReferenceCollection : WebTestBaseCollection`1<ConditionalRuleReference> {
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.ConditionalRuleType : Enum {
    public int value__;
    public static ConditionalRuleType AnyConditional;
    public static ConditionalRuleType ConditionOnly;
    public static ConditionalRuleType LoopOnly;
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.ConditionBeginDelegate : MulticastDelegate {
    public ConditionBeginDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTestCondition condition, Guid sourceWebTestId);
    public virtual IAsyncResult BeginInvoke(WebTestCondition condition, Guid sourceWebTestId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ConditionConditionalRuleReference : ConditionalRuleReference {
    public ConditionConditionalRuleReference(Type type);
    public ConditionConditionalRuleReference(ConditionConditionalRuleReference copy);
    public virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.ConditionEndDelegate : MulticastDelegate {
    public ConditionEndDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTestCondition condition);
    public virtual IAsyncResult BeginInvoke(WebTestCondition condition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ConnectionFailedWebTestException : WebTestException {
    public ConnectionFailedWebTestException(Exception innerException);
    public ConnectionFailedWebTestException(Exception innerException, string resultsLocale);
    public ConnectionFailedWebTestException(string message);
    public ConnectionFailedWebTestException(string message, Exception innerException);
    protected ConnectionFailedWebTestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ContextParameter : object {
    private string m_name;
    private string m_value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public ContextParameter(string parameterName, string parameterValue);
    private ContextParameter(ContextParameter copy);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public sealed virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ContextParameterCollection : WebTestBaseCollection`1<ContextParameter> {
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.CookieParser : object {
    internal static string REJECTED_COOKIE_NAME;
    private CookieTokenizer m_tokenizer;
    internal CookieParser(string cookieString);
    internal Cookie Get();
    internal static string CheckQuoted(string value);
    internal static CookieCollection GetCookiesFromHeaders(Uri responseUri, WebHeaderCollection headers, String[] cookieHeaderNames);
}
internal enum Microsoft.VisualStudio.TestTools.WebTesting.CookieToken : Enum {
    public int value__;
    public static CookieToken Nothing;
    public static CookieToken NameValuePair;
    public static CookieToken Attribute;
    public static CookieToken EndToken;
    public static CookieToken EndCookie;
    public static CookieToken End;
    public static CookieToken Equals;
    public static CookieToken Comment;
    public static CookieToken CommentUrl;
    public static CookieToken CookieName;
    public static CookieToken Discard;
    public static CookieToken Domain;
    public static CookieToken Expires;
    public static CookieToken MaxAge;
    public static CookieToken Path;
    public static CookieToken Port;
    public static CookieToken Secure;
    public static CookieToken HttpOnly;
    public static CookieToken Unknown;
    public static CookieToken Version;
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.CookieTokenizer : object {
    private bool m_eofCookie;
    private int m_index;
    private int m_length;
    private string m_name;
    private bool m_quoted;
    private int m_start;
    private CookieToken m_token;
    private int m_tokenLength;
    private string m_tokenStream;
    private string m_value;
    internal static string CommentAttributeName;
    internal static string CommentUrlAttributeName;
    internal static string DiscardAttributeName;
    internal static string DomainAttributeName;
    internal static string ExpiresAttributeName;
    internal static string MaxAgeAttributeName;
    internal static string PathAttributeName;
    internal static string PortAttributeName;
    internal static string SecureAttributeName;
    internal static string VersionAttributeName;
    internal static string HttpOnlyAttributeName;
    private static RecognizedAttribute[] RecognizedAttributes;
    private static RecognizedAttribute[] RecognizedServerAttributes;
    internal bool EndOfCookie { get; internal set; }
    internal bool Eof { get; }
    internal string Name { get; internal set; }
    internal bool Quoted { get; internal set; }
    internal CookieToken Token { get; internal set; }
    internal string Value { get; internal set; }
    internal CookieTokenizer(string tokenStream);
    private static CookieTokenizer();
    internal bool get_EndOfCookie();
    internal void set_EndOfCookie(bool value);
    internal bool get_Eof();
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_Quoted();
    internal void set_Quoted(bool value);
    internal CookieToken get_Token();
    internal void set_Token(CookieToken value);
    internal string get_Value();
    internal void set_Value(string value);
    internal string Extract();
    internal CookieToken FindNext(bool ignoreComma, bool ignoreEquals);
    internal CookieToken Next(bool first, bool parseResponseCookies);
    internal void Reset();
    internal CookieToken TokenFromName(bool parseResponseCookies);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.CreateIncludedWebTestByGuidDelegate : MulticastDelegate {
    public CreateIncludedWebTestByGuidDelegate(object object, IntPtr method);
    public virtual WebTest Invoke(Guid includedWebTestId);
    public virtual IAsyncResult BeginInvoke(Guid includedWebTestId, AsyncCallback callback, object object);
    public virtual WebTest EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.CreateIncludedWebTestDelegate : MulticastDelegate {
    public CreateIncludedWebTestDelegate(object object, IntPtr method);
    public virtual WebTest Invoke(Guid parentWebTestId, string webTestName);
    public virtual IAsyncResult BeginInvoke(Guid parentWebTestId, string webTestName, AsyncCallback callback, object object);
    public virtual WebTest EndInvoke(IAsyncResult result);
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.Cryptography : object {
    internal static string EncodeString(string str);
    internal static string DecodeString(string str);
    private static Byte[] GetKey();
    private static Byte[] GetIV();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.CssIterationAttribute : Attribute {
    private string m_cssIteration;
    public string CssIteration { get; }
    public CssIterationAttribute(string cssIteration);
    public string get_CssIteration();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.CssProjectStructureAttribute : Attribute {
    private string m_cssProjectStructure;
    public string CssProjectStructure { get; }
    public CssProjectStructureAttribute(string cssProjectStructure);
    public string get_CssProjectStructure();
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod : Enum {
    public int value__;
    public static DataBindingAccessMethod Random;
    public static DataBindingAccessMethod Sequential;
    public static DataBindingAccessMethod Unique;
    public static DataBindingAccessMethod DoNotMoveCursor;
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAttribute : Attribute {
    private string m_dataSourceName;
    private string m_tableName;
    private string m_columnName;
    private string m_contextVariableName;
    public string DataSourceName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public string ContextVariableName { get; }
    public DataBindingAttribute(string dataSourceName, string tableName, string columnName, string contextVariableName);
    public string get_DataSourceName();
    public string get_TableName();
    public string get_ColumnName();
    public string get_ContextVariableName();
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns : Enum {
    public int value__;
    public static DataBindingSelectColumns SelectAllColumns;
    public static DataBindingSelectColumns SelectOnlyBoundColumns;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.DataSource : object {
    public static string CsvProvider;
    public static string XmlProvider;
    internal static string DefaultProvider;
    internal static string csvConnectionTemplate;
    private static string ConnectionDirectoryKey;
    private string m_name;
    private string m_provider;
    private string m_connection;
    private string m_connectionDisplayValue;
    private DataSourceTableCollection m_dataSourceTableCollection;
    private string m_baseDirectory;
    public string Name { get; public set; }
    public string Connection { get; }
    public string Provider { get; }
    internal string ConnectionDisplayValue { get; }
    public DataSourceTableCollection Tables { get; }
    internal string RootedConnection { get; }
    internal string UnderlyingFile { get; internal set; }
    internal string BaseDirectory { get; internal set; }
    internal bool NeedsAutoDeploy { get; }
    internal string RelativeAutoDeployFile { get; }
    internal string RootedAutoDeployFile { get; }
    private DataSource(DataSource copy);
    public string get_Name();
    public void set_Name(string value);
    public string get_Connection();
    public string get_Provider();
    internal string get_ConnectionDisplayValue();
    internal void SetConnection(string connection);
    public void SetConnection(string provider, string connection);
    public void SetConnection(string provider, string connection, string connectionDisplayValue);
    public DataSourceTableCollection get_Tables();
    public sealed virtual object Clone();
    internal string get_RootedConnection();
    internal static string GetRealCsvConnectionString(string connection);
    internal static string GetRealCsvProviderString();
    internal string get_UnderlyingFile();
    internal void set_UnderlyingFile(string value);
    private static DbConnectionStringBuilder SafeGetBuilder(string provider);
    internal static string GetUnderlyingFile(string provider, string connection);
    internal static string SetUnderlyingFile(string provider, string connection, string filename);
    internal void set_BaseDirectory(string value);
    internal string get_BaseDirectory();
    internal bool get_NeedsAutoDeploy();
    internal string get_RelativeAutoDeployFile();
    internal string get_RootedAutoDeployFile();
    private static bool PathNeedsFixup(string path);
    private static string GetRelativePart(string path);
    private static string FixPath(string path, string optionalBase);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.DataSourceAttribute : Attribute {
    private string m_dataSourceName;
    private string m_providerName;
    private string m_connectionString;
    private DataBindingAccessMethod m_accessMethod;
    private DataBindingSelectColumns m_selectColumns;
    private String[] m_tableNames;
    public string DataSourceProviderName { get; }
    public string DataSourceName { get; }
    public string ConnectionString { get; }
    public DataBindingAccessMethod AccessMethod { get; }
    public DataBindingSelectColumns SelectColumns { get; }
    public String[] TableNames { get; }
    public DataSourceAttribute(string dataSourceName, string connectionString, string tableName);
    public DataSourceAttribute(string dataSourceName, string connectionString, String[] tableNames);
    public DataSourceAttribute(string dataSourceName, string connectionString, DataBindingAccessMethod accessMethod, string tableName);
    public DataSourceAttribute(string dataSourceName, string connectionString, DataBindingAccessMethod accessMethod, String[] tableNames);
    public DataSourceAttribute(string dataSourceName, string providerName, string connectionString, string tableName);
    public DataSourceAttribute(string dataSourceName, string providerName, string connectionString, String[] tableNames);
    public DataSourceAttribute(string dataSourceName, string providerName, string connectionString, DataBindingAccessMethod accessMethod, string tableName);
    public DataSourceAttribute(string dataSourceName, string providerName, string connectionString, DataBindingAccessMethod accessMethod, DataBindingSelectColumns selectColumns, string tableName);
    public DataSourceAttribute(string dataSourceName, string providerName, string connectionString, DataBindingAccessMethod accessMethod, String[] tableNames);
    public DataSourceAttribute(string dataSourceName, string providerName, string connectionString, DataBindingAccessMethod accessMethod, DataBindingSelectColumns selectColumns, String[] tableNames);
    public string get_DataSourceProviderName();
    public string get_DataSourceName();
    public string get_ConnectionString();
    public DataBindingAccessMethod get_AccessMethod();
    public DataBindingSelectColumns get_SelectColumns();
    public String[] get_TableNames();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.DataSourceBinding : object {
    private string m_fullName;
    private string m_tableName;
    private string m_columnName;
    private string m_contextName;
    private DataSource m_dataSource;
    public string ContextName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public DataSource DataSource { get; }
    public string FullName { get; }
    public DataSourceBinding(DataSource dataSource, string tableName, string columnName, string contextName);
    public DataSourceBinding(DataSource dataSource, string tableName, string columnName);
    private DataSourceBinding(DataSourceBinding copy);
    public string get_ContextName();
    public string get_TableName();
    public string get_ColumnName();
    public DataSource get_DataSource();
    public string get_FullName();
    public sealed virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.DataSourceBindingCollection : WebTestBaseCollection`1<DataSourceBinding> {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.DataSourceCollection : WebTestBaseCollection`1<DataSource> {
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.DataSourceDataTablePair : object {
    private string m_dataSourceName;
    private string m_dataTableName;
    public string DataSourceName { get; }
    public string DataTableName { get; }
    public DataSourceDataTablePair(string dataSourceName, string dataTableName);
    public DataSourceDataTablePair(DataSourceDataTablePair copy);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public string get_DataSourceName();
    public string get_DataTableName();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.DataSourceTable : object {
    private string m_name;
    private DataBindingAccessMethod m_accessMethod;
    private DataBindingSelectColumns m_selectColumns;
    public string Name { get; public set; }
    public DataBindingAccessMethod AccessMethod { get; public set; }
    public DataBindingSelectColumns SelectColumns { get; public set; }
    private DataSourceTable(DataSourceTable copy);
    public string get_Name();
    public void set_Name(string value);
    public DataBindingAccessMethod get_AccessMethod();
    public void set_AccessMethod(DataBindingAccessMethod value);
    public DataBindingSelectColumns get_SelectColumns();
    public void set_SelectColumns(DataBindingSelectColumns value);
    public sealed virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.DataSourceTableCollection : WebTestBaseCollection`1<DataSourceTable> {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.DeclarativeWebTest : WebTest {
    private WebTestItemCollection m_itemCollection;
    private ContextParameterCollection m_contextParameterCollection;
    private string m_filePath;
    private string m_description;
    private bool m_isNewTest;
    private TestElementProperties m_testElementProperties;
    public WebTestItemCollection Items { get; internal set; }
    public ReadOnlyCollection`1<WebTestRequest> RequestItems { get; }
    internal ConditionalConstructCollection ConditionalConstructs { get; }
    internal TransactionTimerCollection TransactionItems { get; }
    public ContextParameterCollection ContextParameters { get; internal set; }
    internal List`1<IncludedWebTest> IncludedWebTests { get; }
    public ConditionalRuleReferenceCollection ConditionalRuleReferences { get; }
    internal bool HasConditionalRuleReferences { get; }
    public string Description { get; public set; }
    internal string FilePath { get; internal set; }
    internal bool IsNewTest { get; internal set; }
    internal TestElementProperties TestElementProperties { get; internal set; }
    public WebTestItemCollection get_Items();
    internal void set_Items(WebTestItemCollection value);
    public ReadOnlyCollection`1<WebTestRequest> get_RequestItems();
    internal ConditionalConstructCollection get_ConditionalConstructs();
    internal TransactionTimerCollection get_TransactionItems();
    public ContextParameterCollection get_ContextParameters();
    internal void set_ContextParameters(ContextParameterCollection value);
    internal List`1<IncludedWebTest> get_IncludedWebTests();
    public ConditionalRuleReferenceCollection get_ConditionalRuleReferences();
    internal bool get_HasConditionalRuleReferences();
    public string get_Description();
    public void set_Description(string value);
    internal void RenameDataBindings(string originalName, string replaceName);
    internal string get_FilePath();
    internal void set_FilePath(string value);
    internal bool get_IsNewTest();
    internal void set_IsNewTest(bool value);
    internal TestElementProperties get_TestElementProperties();
    internal void set_TestElementProperties(TestElementProperties value);
    public virtual void InitializeDataBinding();
    public WebTestItem GetItem(int itemId);
    internal void UpdateItemIds();
    public void InsertItemAt(int itemId, WebTestItem item);
    public void RemoveItemAt(int itemId);
    internal virtual List`1<string> GetBindingInstances();
    internal WebTestRequest GetRequestContainingObject(object item);
    public String[] GetExtractionRuleVariables();
    internal String[] GetExtractionRuleVariables(WebTestItem itemStop);
    private String[] GetExtractionRuleVariables(bool all, WebTestItem itemStop);
    internal String[] GetAllExtractionRuleVariables();
    internal WebTestItemCollection GetAllItemsRecursively();
    private void GetAllItemsRecursively(WebTestItemCollection itemCollection, WebTestItemCollection items);
    private WebTestRequest FindRequestContainingObject(WebTestRequest searchRequest, object searchItem);
    internal void SetNameFromPath(string path);
    internal virtual void OnPreWebTest(PreWebTestEventArgs e);
    internal virtual void PopulateContext(WebTestContext webTestContext);
    private void PopulateContextFromContextParameters(WebTestContext webTestContext);
    public virtual IEnumerator`1<WebTestRequest> GetRequestEnumerator();
    private IEnumerator`1<WebTestRequest> EnumerateRequests(WebTestItemCollection items, bool cloneRequests, bool followIncludedWebTests, bool executeConditionalRule);
    public sealed virtual object Clone();
    internal DeclarativeWebTest RuntimeClone();
    internal List`1<DataSourceDataTablePair> GetEffectedDataSources(WebTestItem item);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.DeclarativeWebTestSerializer : object {
    private string m_fileName;
    private bool m_isTheWebtestFileOld;
    private static string tagComment;
    private static string tagCondition;
    private static string tagConditionalRule;
    private static string tagContextParameter;
    private static string tagContextParameters;
    private static string tagCorrelationExtractionRules;
    private static string tagDataSource;
    private static string tagDataSources;
    private static string tagDataSourceTable;
    private static string tagDependentRequests;
    private static string tagElse;
    private static string tagExtractionRule;
    private static string tagExtractionRules;
    private static string tagHeader;
    private static string tagHeaders;
    private static string tagIncludedWebTest;
    private static string tagItems;
    private static string tagLoop;
    private static string tagRequest;
    private static string tagRequests;
    internal static string tagRuleParameter;
    internal static string tagRuleParameters;
    private static string tagSharepointInformation;
    private static string tagHeuristicXmlEnabled;
    private static string tagTestCase;
    private static string tagThen;
    private static string tagTransactionTimer;
    private static string tagValidationRule;
    private static string tagValidationRules;
    private static string tagRequestPlugins;
    private static string tagRequestPlugin;
    private static string tagWebTest;
    private static string tagWebTestPlugin;
    private static string tagWebTestPlugins;
    private static string tagStringHttpBody;
    private static string tagBinaryHttpBody;
    private static string tagFormPostHttpBody;
    private static string tagFormPostParameter;
    private static string tagFileUploadParameter;
    private static string tagQueryStringParameter;
    private static string tagQueryStringParameters;
    private static string tagXmlns;
    private static string tagAccessMethod;
    private static string tagSelectColumns;
    private static string tagEncoding;
    private static string tagCache;
    private static string tagClassname;
    private static string tagCommentText;
    private static string tagSharepointVersion;
    private static string tagCredentialUserName;
    private static string tagCredentialPassword;
    private static string tagDescription;
    private static string tagExpectedHttpStatusCode;
    private static string tagPreAuthenticate;
    private static string tagProxy;
    private static string tagProvider;
    private static string tagStopOnError;
    private static string tagRecordedResultFile;
    private static string tagConnection;
    private static string tagConnectionDisplayValue;
    private static string tagLevel;
    private static string tagExectuionOrder;
    internal static string tagId;
    private static string tagInheritWebTestSettings;
    private static string tagIsCodedWebTest;
    private static string tagMethod;
    private static string tagGuid;
    private static string tagName;
    private static string tagPath;
    private static string tagOwner;
    private static string tagParseDependentRequests;
    private static string tagFollowRedirects;
    private static string tagExpectedResponseUrl;
    private static string tagReportingName;
    private static string tagRecordedResponseUrl;
    private static string tagRecordResult;
    private static string tagResponseTimeGoal;
    private static string tagRequestCallbackClass;
    private static string tagTables;
    private static string tagTestCaseCallbackClass;
    private static string tagThinkTime;
    private static string tagTimeout;
    private static string tagUrl;
    private static string tagUseToGroupResults;
    private static string tagValue;
    private static string tagVariableName;
    private static string tagVersion;
    private static string tagPriority;
    private static string tagEnabled;
    private static string tagCssProjectStructure;
    private static string tagCssIteration;
    private static string tagDeploymentItemsEditable;
    private static string tagTestCategories;
    private static string tagWorkItemIds;
    private static string tagUrlEncode;
    private static string tagContentType;
    private static string tagInsertByteOrderMark;
    private static string tagFileName;
    private static string tagFileUploadName;
    private static string tagUseGuids;
    private static string tagHtmlEncodeFileName;
    private static string tagRecordedValue;
    private static string tagDisplayName;
    private static string tagCorrelationBinding;
    private static string tagUniqueStringId;
    private static string tagMaxIterations;
    private static string tagAdvanceDataCursors;
    private static string tagGenerateUniqueName;
    private static string tagIgnoreHttpStatusCode;
    private static string tagResultsLocale;
    private static string c_currentXmlns;
    private static string c_orcasXmlns;
    private DeclarativeWebTestSerializer(string fileName);
    public static DeclarativeWebTest Open(string fileName);
    public static DeclarativeWebTest Open(Stream stream);
    internal static DeclarativeWebTest Open(XmlDocument document);
    public static void Save(DeclarativeWebTest declarativeWebTest, string fileName);
    public static void Save(DeclarativeWebTest declarativeWebTest, Stream stream);
    internal static XmlDocument Save(DeclarativeWebTest declarativeWebTest);
    internal static bool ElementIsWebTest(XmlElement element);
    private static string GetFilename(XmlElement elem);
    private DeclarativeWebTest DomToModel(XmlDocument doc);
    private XmlDocument ModelToDom(DeclarativeWebTest declarativeWebTest);
    private DeclarativeWebTest CreateTestCase(XmlElement elem);
    private WebTestRequest CreateRequest(XmlElement elem);
    private static Comment CreateComment(XmlElement elem);
    private static SharepointInformation CreateSharepointInformation(XmlElement elem);
    private TransactionTimer CreateTransactionTimer(XmlElement elem);
    private IncludedWebTest CreateIncludedWebTest(XmlElement elem);
    private WebTestConditionalConstruct CreateLoop(XmlElement elem);
    private WebTestConditionalConstruct CreateCondition(XmlElement elem);
    private DataSource CreateDataSource(XmlElement elem);
    private static DataSourceTable CreateDataSourceTable(XmlElement elem);
    private static ContextParameter CreateContextParameter(XmlElement elem);
    private static WebTestRequestHeader CreateRequestHeader(XmlElement elem);
    private static QueryStringParameter CreateRequestQueryStringParameter(XmlElement elem);
    private ValidationRuleReference CreateValidationRule(XmlElement elem);
    private ExtractionRuleReference CreateExtractionRule(XmlElement elem);
    private ConditionConditionalRuleReference CreateConditionConditionalRule(XmlElement elem);
    private LoopConditionalRuleReference CreateLoopConditionalRule(XmlElement elem);
    private WebTestRequestPluginReference CreateWebTestRequestPlugin(XmlElement elem);
    private WebTestPluginReference CreateWebTestPlugin(XmlElement elem);
    internal static PluginOrRuleProperty CreateRuleProperty(XmlElement elem);
    private XmlElement CreateTestCaseElement(XmlDocument doc, DeclarativeWebTest declarativeWebTest);
    private XmlElement CreateTransactionTimerElement(XmlDocument doc, TransactionTimer transactionTimer);
    private XmlElement CreateIncludedWebTestElement(XmlDocument doc, IncludedWebTest includedWebTest);
    private XmlElement CreateLoopElement(XmlDocument doc, WebTestLoop loop);
    private XmlElement CreateConditionElement(XmlDocument doc, WebTestCondition condition);
    private XmlElement CreateRequestElement(XmlDocument doc, WebTestRequest request);
    private XmlElement CreateDataSourceElement(XmlDocument doc, DataSource dataSource);
    private static XmlElement CreateDataSourceTableElement(XmlDocument doc, DataSourceTable table);
    private static XmlElement CreateCommentElement(XmlDocument doc, Comment comment);
    private static XmlElement CreateSharepointInformationElement(XmlDocument doc, SharepointInformation spInfo);
    private static XmlElement CreateContextParameterElement(XmlDocument doc, ContextParameter parameter);
    private static XmlElement CreateRequestHeaderElement(XmlDocument doc, WebTestRequestHeader header);
    private static XmlElement CreateRequestQueryStringParameterElement(XmlDocument doc, QueryStringParameter parameter);
    private XmlElement CreateValidationRuleElement(XmlDocument doc, ValidationRuleReference rule);
    private XmlElement CreateExtractionRuleElement(XmlDocument doc, ExtractionRuleReference rule);
    private XmlElement CreateConditionConditionalRuleElement(XmlDocument doc, ConditionConditionalRuleReference rule);
    private XmlElement CreateLoopConditionalRuleElement(XmlDocument doc, LoopConditionalRuleReference rule);
    private XmlElement CreateWebTestRequestPluginElement(XmlDocument doc, WebTestRequestPluginReference plugin);
    private XmlElement CreateWebTestPluginElement(XmlDocument doc, WebTestPluginReference plugin);
    internal static XmlElement CreateRulePropertyElement(XmlDocument doc, PluginOrRuleProperty property);
    private void GetCollection(XmlElement elem, string collectionTagName, string itemTagName, Type itemType, IList collection);
    private void GetCollection(XmlElement elem, string collectionTagName, String[] itemTagNames, Type itemType, IList collection);
    private void CreateCollection(XmlDocument doc, XmlElement elem, string collectionTagName, IList collection);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.DependentLink : object {
    private string m_uri;
    private List`1<HtmlAttribute> m_attributeValues;
    public string Uri { get; }
    public IList`1<HtmlAttribute> AttributeValues { get; }
    internal DependentLink(string uri, HtmlAttribute attributeValue);
    public string get_Uri();
    public IList`1<HtmlAttribute> get_AttributeValues();
    internal void AddAttributeValue(HtmlAttribute attributeValue);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.DependentLinkCollection : WebTestBaseCollection`1<DependentLink> {
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.DependentLinkDefinition : object {
    private string m_tagName;
    private string m_attributeName;
    private string m_matchAttributeName;
    private string m_matchAttributeValue;
    private bool m_parseDependentRequests;
    public string TagName { get; }
    public string AttributeName { get; }
    public string MatchAttributeName { get; }
    public string MatchAttributeValue { get; }
    public bool ParseDependentRequests { get; }
    public DependentLinkDefinition(string name, string attribute, bool parseDependentRequests);
    public DependentLinkDefinition(string name, string attribute, bool parseDependentRequests, string matchAttributeName, string matchAttributeValue);
    public string get_TagName();
    public string get_AttributeName();
    public string get_MatchAttributeName();
    public string get_MatchAttributeValue();
    public bool get_ParseDependentRequests();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.DeploymentItemAttribute : Attribute {
    private string m_path;
    private string m_outputDirectory;
    public string Path { get; }
    public string OutputDirectory { get; }
    public DeploymentItemAttribute(string path);
    public DeploymentItemAttribute(string path, string outputDirectory);
    public string get_Path();
    public string get_OutputDirectory();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.DomHelpers : object {
    public static XmlDocument DomFromFile(string fileName);
    public static void DomToFile(XmlDocument doc, string fileName);
    public static XmlDocument DomFromStream(Stream stream);
    public static void DomToStream(XmlDocument doc, Stream stream);
    public static XmlElement GetRootElement(XmlDocument doc);
    public static XmlElement GetFirstChildElement(XmlNode node, string elementName);
    public static ArrayList GetChildElements(XmlNode node, String[] elementNames);
    public static ArrayList GetChildElements(XmlNode node, string elementName);
    public static string GetStringAttribute(XmlElement elem, string attributeName);
    public static String[] StringToStringArray(string s);
    public static string StringArrayToString(String[] strings);
    public static String[] GetStringArrayAttribute(XmlElement elem, string attributeName);
    public static void SetStringArrayAttribute(XmlElement elem, string attributeName, String[] strings);
    public static List`1<int> GetIntListAttribute(XmlElement elem, string attributeName);
    public static void SetIntListAttribute(XmlElement elem, string attributeName, List`1<int> ints);
    public static string GetStringAttribute(XmlElement elem, string attributeName, string defaultValue);
    private static int GetEnumIntAttribute(XmlElement elem, string attributeName, Type enumType);
    public static int GetEnumIntAttribute(XmlElement elem, string attributeName, Type enumType, int defaultValue);
    public static decimal GetDecimalAttribute(XmlElement elem, string attributeName, decimal defaultValue);
    public static double GetDoubleAttribute(XmlElement elem, string attributeName, double defaultValue);
    public static float GetFloatAttribute(XmlElement elem, string attributeName, float defaultValue);
    public static bool GetBoolAttribute(XmlElement elem, string attributeName, bool defaultValue);
    public static int GetIntAttribute(XmlElement elem, string attributeName, int defaultValue);
    public static UInt32 GetUIntAttribute(XmlElement elem, string attributeName, UInt32 defaultValue);
    public static long GetLongAttribute(XmlElement elem, string attributeName, long defaultValue);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.EnsureDataBindingInitializedDelegate : MulticastDelegate {
    public EnsureDataBindingInitializedDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTest webTest);
    public virtual IAsyncResult BeginInvoke(WebTest webTest, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.EqtHash : object {
    private static HashAlgorithm s_provider;
    private static object s_providerLock;
    internal static HashAlgorithm Provider { get; }
    private static EqtHash();
    internal static HashAlgorithm get_Provider();
    internal static Guid GuidFromString(string data);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSelectTag")]
[LocalizableDescriptionAttribute("ExtractionRuleRuleDescriptionSelectTag")]
public class Microsoft.VisualStudio.TestTools.WebTesting.ExtractHtmlSelectTag : ExtractionRule {
    private string m_selectTagName;
    private int m_index;
    [LocalizableDisplayNameAttribute("PropertyNameSelectTagName")]
[LocalizableDescriptionAttribute("PropertyDescriptionSelectTagName")]
public string SelectTagName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndexForExtractInnerText")]
[DefaultValueAttribute("-1")]
public int Index { get; public set; }
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public string get_SelectTagName();
    public void set_SelectTagName(string value);
    public int get_Index();
    public void set_Index(int value);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameTagInnerText")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionTagInnerText")]
public class Microsoft.VisualStudio.TestTools.WebTesting.ExtractHtmlTagInnerText : ExtractionRule {
    private string m_tagName;
    private string m_attributeName;
    private string m_attributeValue;
    private bool m_hasClosingTag;
    private bool m_removeInnerTags;
    private bool m_collapseWhiteSpace;
    private int m_index;
    [LocalizableDisplayNameAttribute("PropertyNameHtmlTagName")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlTagName")]
public string TagName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameAttributeName")]
[LocalizableDescriptionAttribute("PropertyDescriptionAttributeName")]
public string AttributeName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameAttributeValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionAttributeValue")]
public string AttributeValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameRemoveInnerTags")]
[LocalizableDescriptionAttribute("PropertyDescriptionRemoveInnerTags")]
[DefaultValueAttribute("True")]
public bool RemoveInnerTags { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameClosingTag")]
[LocalizableDescriptionAttribute("PropertyDescriptionClosingTag")]
[DefaultValueAttribute("True")]
public bool HasClosingTags { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCollapseExtraWhiteSpace")]
[LocalizableDescriptionAttribute("PropertyDescriptionCollapseExtraWhiteSpace")]
[DefaultValueAttribute("True")]
public bool CollapseWhiteSpace { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndexForExtractInnerText")]
[DefaultValueAttribute("-1")]
public int Index { get; public set; }
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public string get_TagName();
    public void set_TagName(string value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    public bool get_RemoveInnerTags();
    public void set_RemoveInnerTags(bool value);
    public bool get_HasClosingTags();
    public void set_HasClosingTags(bool value);
    public bool get_CollapseWhiteSpace();
    public void set_CollapseWhiteSpace(bool value);
    public int get_Index();
    public void set_Index(int value);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ExtractionEventArgs : EventArgs {
    private WebTest m_webTest;
    private WebTestRequest m_request;
    private WebTestResponse m_response;
    private RuleResult m_ruleResult;
    public WebTest WebTest { get; }
    public string Message { get; public set; }
    public WebTestRequest Request { get; }
    public WebTestResponse Response { get; }
    public bool Success { get; public set; }
    internal RuleResult RuleResult { get; }
    internal ExtractionEventArgs(WebTest webTest, WebTestRequest request, WebTestResponse response);
    public WebTest get_WebTest();
    public string get_Message();
    public void set_Message(string value);
    public WebTestRequest get_Request();
    public WebTestResponse get_Response();
    public bool get_Success();
    public void set_Success(bool value);
    internal RuleResult get_RuleResult();
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.ExtractionRule : object {
    private string m_contextParameterName;
    [ObsoleteAttribute("This method is no longer used.  Use DisplayNameAttribute on the class to set a display name for this rule.", "False")]
public string RuleName { get; }
    [ObsoleteAttribute("This method is no longer used.  Use DescriptionAttribute on the class to set a description for this rule.", "False")]
public string RuleDescription { get; }
    [BrowsableAttribute("False")]
public string ContextParameterName { get; public set; }
    public abstract virtual void Extract(object sender, ExtractionEventArgs e);
    public virtual string get_RuleName();
    public virtual string get_RuleDescription();
    public virtual string get_ContextParameterName();
    public virtual void set_ContextParameterName(string value);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ExtractionRuleReference : WebTestRuleBase {
    private string m_contextParameterName;
    public string ContextParameterName { get; public set; }
    public ExtractionRuleReference(Type type);
    private ExtractionRuleReference(ExtractionRuleReference copy);
    public string get_ContextParameterName();
    public void set_ContextParameterName(string value);
    internal ExtractionRule CreateInstance();
    public virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ExtractionRuleReferenceCollection : WebTestBaseCollection`1<ExtractionRuleReference> {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.FileUploadParameter : FormPostParameter {
    private static string UniqueFileNameFormat;
    private string m_fileName;
    private string m_fileUploadName;
    private string m_contentType;
    private bool m_generateUniqueName;
    private bool m_useGuids;
    private bool m_htmlEncodeFileUploadName;
    public string ContentType { get; public set; }
    public string FileName { get; public set; }
    public string FileUploadName { get; public set; }
    public bool GenerateUniqueName { get; public set; }
    public bool UseGuids { get; public set; }
    public bool HtmlEncodeFileName { get; public set; }
    public FileUploadParameter(string name, string fileName, string contentType, bool generateUniqueName);
    public FileUploadParameter(string name, string fileName, string contentType);
    public FileUploadParameter(string name, string fileName);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_FileUploadName();
    public void set_FileUploadName(string value);
    public bool get_GenerateUniqueName();
    public void set_GenerateUniqueName(bool value);
    public bool get_UseGuids();
    public void set_UseGuids(bool value);
    public bool get_HtmlEncodeFileName();
    public void set_HtmlEncodeFileName(bool value);
    internal string GenerateUniqueFileName();
    public virtual object Clone();
}
[TypeConverterAttribute("Microsoft.VisualStudio.TestTools.WebTesting.ForLoopComparisonOperatorConverter")]
public enum Microsoft.VisualStudio.TestTools.WebTesting.ForLoopComparisonOperator : Enum {
    public int value__;
    public static ForLoopComparisonOperator LessThan;
    public static ForLoopComparisonOperator LessThanOrEqual;
    public static ForLoopComparisonOperator GreaterThan;
    public static ForLoopComparisonOperator GreaterThanOrEqual;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ForLoopComparisonOperatorConverter : BaseEnumStringConverter`1<ForLoopComparisonOperator> {
    private static string s_lessThan;
    private static string s_lessThanOrEqual;
    private static string s_greaterThan;
    private static string s_greaterThanOrEqual;
    private static ForLoopComparisonOperatorConverter();
    protected virtual ForLoopComparisonOperator ConvertFromStringToEnum(string value);
    protected virtual string ConvertFromEnumToString(ForLoopComparisonOperator value);
    protected virtual String[] PopulateStandardValues();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.FormPostHttpBody : object {
    internal static string ContentTypeFormUrlEncoded;
    internal static string ContentTypeMultipartFormData;
    private static string m_boundaryHeaderPart;
    private static Byte[] m_boundaryBytes;
    private static Byte[] m_crlfBytes;
    private static Byte[] m_dashDashBytes;
    private static Byte[] m_contentDispositionStartBytes;
    private static byte m_quoteByte;
    private static Byte[] m_fileNameBytes;
    private static Byte[] m_contentTypeStartBytes;
    private FormPostParameterCollection m_formParameters;
    public string ContentType { get; }
    public FormPostParameterCollection FormPostParameters { get; }
    private static FormPostHttpBody();
    public sealed virtual string get_ContentType();
    public FormPostParameterCollection get_FormPostParameters();
    public sealed virtual void WriteHttpBody(WebTestRequest request, Stream bodyStream);
    internal long GetContentLength(WebTestRequest request);
    private void WriteHttpBody(WebTestRequest request, Stream bodyStream, bool excludeFileContents, Int64& contentLength);
    public sealed virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.FormPostParameter : Parameter {
    public FormPostParameter(string name, string value, bool urlEncode);
    public FormPostParameter(string name, string value);
    public virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.FormPostParameterCollection : WebTestBaseCollection`1<FormPostParameter> {
    public void Add(string parameterName, string parameterValue);
    public void Add(string parameterName, string parameterValue, bool urlEncode);
    public bool Contains(string parameterName);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.HtmlAttribute : object {
    private string m_name;
    private string m_value;
    public string Name { get; }
    public string Value { get; }
    public HtmlAttribute(string name, string value);
    public string get_Name();
    public string get_Value();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.HtmlAttributeWithOffsets : HtmlAttribute {
    private int m_beginOffset;
    private int m_endOffset;
    public int BeginOffset { get; public set; }
    public int EndOffset { get; public set; }
    public HtmlAttributeWithOffsets(string name, string value);
    public int get_BeginOffset();
    public void set_BeginOffset(int value);
    public int get_EndOffset();
    public void set_EndOffset(int value);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.HtmlDocument : object {
    private static DependentLinkDefinition[] s_DependentLinks;
    private static String[] s_dependentLinkTagNames;
    private Uri m_documentLocation;
    private string m_documentContent;
    private bool m_trackParsedOffsets;
    private DependentLinkCollection m_dependentLinks;
    public IEnumerable`1<HtmlTag> HtmlTags { get; }
    internal string Content { get; }
    internal DependentLinkCollection DependentLinks { get; }
    public ICollection`1<string> DependentRequestUrls { get; }
    internal List`1<HtmlTag> FormFields { get; }
    internal List`1<KeyValuePair`2<string, string>> HiddenFields { get; }
    public HtmlDocument(Uri documentLocation, string documentContent);
    private static HtmlDocument();
    public void SetParserOffsetTracking(bool flag);
    public IEnumerable`1<HtmlTag> get_HtmlTags();
    internal string get_Content();
    public IEnumerable`1<HtmlTag> GetFilteredHtmlTags(String[] tagFilter);
    internal IEnumerable`1<HtmlTag> GetFilteredHtmlTags(TagFilterDelegate tagFilter);
    internal DependentLinkCollection get_DependentLinks();
    public ICollection`1<string> get_DependentRequestUrls();
    internal List`1<HtmlTag> get_FormFields();
    internal bool IsInputTag(HtmlToken token);
    internal List`1<KeyValuePair`2<string, string>> get_HiddenFields();
    private bool IsDependentLinkTag(HtmlToken token);
    private Dictionary`2<string, DependentLink> ParseForDependentRequests(bool urlsOnly);
    private static String[] GetDependentLinkTagNames();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.HtmlParser : object {
    private int m_currentLine;
    private int m_lineOffset;
    private int m_currentTokenBeginOffset;
    private int m_currentTokenEndOffset;
    private int m_previousTokenBeginOffset;
    private int m_previousTokenEndOffset;
    private int m_documentOffset;
    private string m_documentContent;
    private HtmlToken m_currentToken;
    private HtmlToken m_previousToken;
    private bool m_trackOffsets;
    private HtmlParsingState m_parsingState;
    private TagFilterDelegate m_tagFilter;
    public HtmlParser(bool trackOffsets);
    public IEnumerable`1<HtmlTag> ParseDocument(string htmlDocument);
    public IEnumerable`1<HtmlTag> ParseDocument(string htmlDocument, String[] tagFilter);
    internal IEnumerable`1<HtmlTag> ParseDocument(string htmlDocument, TagFilterDelegate tagFilter);
    private void Match(HtmlTokenType tokenType);
    private HtmlTokenType GetNextToken(bool getTokenValue);
    private bool IsIdentifierCharacter(char ch);
    private IEnumerable`1<HtmlTag> Rule_Document();
    private HtmlTag Rule_HtmlTag();
    private void SkipRestOfTag();
    private void Rule_TagAttribute(HtmlTag htmlTag);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.HtmlSelectTagParser : object {
    private string m_documentContent;
    public HtmlSelectTagParser(string documentContent);
    public IEnumerable`1<string> GetAllSelectedOptions(string selectTagName);
    private string GetSelectedOption(HtmlTagInnerTextParser parser, HtmlTagInnerText selectInnerText);
    private string GetExplicitSelectedOption(HtmlTagInnerTextParser parser, HtmlTagInnerText selectInnerText);
    private string GetDefaultSelectedOption(HtmlTagInnerTextParser parser, HtmlTagInnerText selectInnerText);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.HtmlTag : object {
    private string m_tagName;
    private List`1<HtmlAttribute> m_attributes;
    public string Name { get; public set; }
    public IList`1<HtmlAttribute> Attributes { get; }
    public void AddAttribute(HtmlAttribute attribute);
    public string GetAttributeValueAsString(string attributeName);
    public HtmlAttribute GetAttributeValue(string attributeName);
    public string get_Name();
    public void set_Name(string value);
    public IList`1<HtmlAttribute> get_Attributes();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.HtmlTagInnerText : object {
    private string m_documentContent;
    private int m_beginOffset;
    private int m_endOffset;
    private bool m_removeInnerTags;
    private bool m_collapseWhiteSpace;
    public string Value { get; }
    public string DocumentContent { get; }
    public int BeginOffset { get; }
    public int EndOffset { get; }
    public bool RemoveInnerTags { get; public set; }
    public bool CollapseWhiteSpace { get; public set; }
    public HtmlTagInnerText(string documentContent, int beginOffset, int endOffset, bool removeInnerTags, bool collapseWhiteSpace);
    public string get_Value();
    public string get_DocumentContent();
    public int get_BeginOffset();
    public int get_EndOffset();
    public bool get_RemoveInnerTags();
    public void set_RemoveInnerTags(bool value);
    public bool get_CollapseWhiteSpace();
    public void set_CollapseWhiteSpace(bool value);
    private string RemoveHtmlTags();
    private string CollapseAllWhiteSpace();
    private bool IsWhiteSpace(char ch);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.HtmlTagInnerTextParser : object {
    private string m_documentContent;
    private int m_beginParseOffset;
    private int m_endParseOffset;
    private int m_currentOffset;
    private StringBuilder m_currentAttributeName;
    private StringBuilder m_currentAttributeValue;
    private StringBuilder m_currentTag;
    private int m_currentTagBeginOffset;
    private int m_currentTagEndOffset;
    private bool m_currentSelfClosingTag;
    private List`1<HtmlAttribute> m_currentAttributeList;
    public HtmlTagInnerTextParser(string documentContent);
    public IEnumerable`1<HtmlTagInnerText> GetInnerTextForHtmlTags(string tagName, bool hasClosingTag, bool removeInnerTags, bool collapseWhiteSpace);
    public IEnumerable`1<HtmlTagInnerText> GetInnerTextForHtmlTags(string tagName, bool hasClosingTag, bool removeInnerTags, bool collapseWhiteSpace, int beginParseOffset, int endParseOffset);
    public IEnumerable`1<HtmlTagInnerText> GetInnerTextForHtmlTags(string tagName, string attributeName, string attributeValue, bool hasClosingTag, bool removeInnerTags, bool collapseWhiteSpace);
    public IEnumerable`1<HtmlTagInnerText> GetInnerTextForHtmlTags(string tagName, string attributeName, string attributeValue, bool hasClosingTag, bool removeInnerTags, bool collapseWhiteSpace, int beginParseOffset, int endParseOffset);
    private void AddAttribute();
    private bool IsEndParseRegion();
    private char GetCurrentChar();
    private char GetCurrentCharAndAdvance();
    private char GetPeekChar(int peek);
    private HtmlTagWithOffsets GetEndParsingRegionTag();
    private HtmlTagWithOffsets GetNextTag();
    private HtmlTagWithOffsets GetSpecificClosingTag(string tagName, bool hasClosingTag);
    private HtmlTagWithOffsets GetSpecificOpeningTag(string tagName, string attributeName, string attributeValue);
    private void IgnoreWhiteSpace();
    private bool IsPartOfClosingTag(char ch);
    private bool IsPartOfSelfClosingTag(char ch);
    private bool IsWhiteSpace(char ch);
    private void ParseAttributeName();
    private void ParseAttributeValue();
    private void ParseComment();
    private void ParseTag();
    private bool ParseUntilNextTag();
    private void ResetOffsets(int beginParseOffset, int endParseOffset, int currentOffset);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.HtmlTagWithOffsets : HtmlTag {
    private int m_beginOffset;
    private int m_endOffset;
    public int BeginOffset { get; public set; }
    public int EndOffset { get; public set; }
    public int get_BeginOffset();
    public void set_BeginOffset(int value);
    public int get_EndOffset();
    public void set_EndOffset(int value);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.HttpDateParse : object {
    private static int BASE_DEC;
    private static int DATE_INDEX_DAY_OF_WEEK;
    private static int DATE_1123_INDEX_DAY;
    private static int DATE_1123_INDEX_MONTH;
    private static int DATE_1123_INDEX_YEAR;
    private static int DATE_1123_INDEX_HRS;
    private static int DATE_1123_INDEX_MINS;
    private static int DATE_1123_INDEX_SECS;
    private static int DATE_ANSI_INDEX_MONTH;
    private static int DATE_ANSI_INDEX_DAY;
    private static int DATE_ANSI_INDEX_HRS;
    private static int DATE_ANSI_INDEX_MINS;
    private static int DATE_ANSI_INDEX_SECS;
    private static int DATE_ANSI_INDEX_YEAR;
    private static int DATE_INDEX_TZ;
    private static int DATE_INDEX_LAST;
    private static int MAX_FIELD_DATE_ENTRIES;
    private static int DATE_TOKEN_JANUARY;
    private static int DATE_TOKEN_FEBRUARY;
    private static int DATE_TOKEN_MARCH;
    private static int DATE_TOKEN_APRIL;
    private static int DATE_TOKEN_MAY;
    private static int DATE_TOKEN_JUNE;
    private static int DATE_TOKEN_JULY;
    private static int DATE_TOKEN_AUGUST;
    private static int DATE_TOKEN_SEPTEMBER;
    private static int DATE_TOKEN_OCTOBER;
    private static int DATE_TOKEN_NOVEMBER;
    private static int DATE_TOKEN_DECEMBER;
    private static int DATE_TOKEN_LAST_MONTH;
    private static int DATE_TOKEN_SUNDAY;
    private static int DATE_TOKEN_MONDAY;
    private static int DATE_TOKEN_TUESDAY;
    private static int DATE_TOKEN_WEDNESDAY;
    private static int DATE_TOKEN_THURSDAY;
    private static int DATE_TOKEN_FRIDAY;
    private static int DATE_TOKEN_SATURDAY;
    private static int DATE_TOKEN_LAST_DAY;
    private static int DATE_TOKEN_GMT;
    private static int DATE_TOKEN_LAST;
    private static int DATE_TOKEN_ERROR;
    private static char MAKE_UPPER(char c);
    private static int MapDayMonthToDword(Char[] lpszDay, int index);
    public static bool ParseHttpDate(string DateString, DateTime& dtOut);
    public static bool ParseCookieDate(string dateString, DateTime& dtOut);
}
public interface Microsoft.VisualStudio.TestTools.WebTesting.IBinaryHttpBodyEditorPlugin {
    public abstract virtual bool SupportsContentType(string contentType);
    public abstract virtual object CreateEditor(string contentType, Byte[] initialValue);
    public abstract virtual Byte[] GetNewValue();
}
public interface Microsoft.VisualStudio.TestTools.WebTesting.IHttpBody {
    public string ContentType { get; }
    public abstract virtual string get_ContentType();
    public abstract virtual void WriteHttpBody(WebTestRequest request, Stream bodyStream);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.IncludeCodedWebTestAttribute : Attribute {
    private string m_fullClassName;
    private string m_path;
    public string FullClassName { get; }
    public string Path { get; }
    public IncludeCodedWebTestAttribute(string fullClassName, string path);
    public string get_FullClassName();
    public string get_Path();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.IncludeDeclarativeWebTestAttribute : Attribute {
    private string m_name;
    private string m_path;
    private string m_testId;
    public string Name { get; }
    public string Path { get; }
    public string TestId { get; }
    public IncludeDeclarativeWebTestAttribute(string name, string path, string testId);
    public string get_Name();
    public string get_Path();
    public string get_TestId();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.IncludedWebTest : WebTestItem {
    private string m_name;
    private string m_path;
    private string m_testId;
    private bool m_isCodedWebTest;
    private bool m_inheritWebTestSettings;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string TestId { get; public set; }
    public bool IsCodedWebTest { get; public set; }
    public bool InheritWebTestSettings { get; public set; }
    internal IncludedWebTest(IncludeCodedWebTestAttribute includeCodedWebTestAttribute);
    internal IncludedWebTest(IncludeDeclarativeWebTestAttribute includeDeclarativeWebTestAttribute);
    private IncludedWebTest(IncludedWebTest copy);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public string get_TestId();
    public void set_TestId(string value);
    public bool get_IsCodedWebTest();
    public void set_IsCodedWebTest(bool value);
    public bool get_InheritWebTestSettings();
    public void set_InheritWebTestSettings(bool value);
    public virtual object Clone();
}
public interface Microsoft.VisualStudio.TestTools.WebTesting.ISafeRegex {
    public abstract virtual Match Match(string input);
    public abstract virtual Match Match(string input, int startAt);
    public abstract virtual Match Match(string input, int startat, int lenght);
    public abstract virtual bool IsMatch(string input);
    public abstract virtual string Replace(string input, string replacement);
}
public interface Microsoft.VisualStudio.TestTools.WebTesting.IStringHttpBodyEditorPlugin {
    public abstract virtual bool SupportsContentType(string contentType);
    public abstract virtual object CreateEditor(string contentType, string initialValue);
    public abstract virtual string GetNewValue();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LocalizableCategoryAttribute : CategoryAttribute {
    public LocalizableCategoryAttribute(string resourceId);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LocalizableDefaultValueAttribute : DefaultValueAttribute {
    public LocalizableDefaultValueAttribute(string resourceId);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LocalizableDescriptionAttribute : DescriptionAttribute {
    public LocalizableDescriptionAttribute(string resourceId);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LocalizableDisplayNameAttribute : DisplayNameAttribute {
    public LocalizableDisplayNameAttribute(string resourceId);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LoopBeginDelegate : MulticastDelegate {
    public LoopBeginDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTestLoop condition, Guid sourceWebTestId);
    public virtual IAsyncResult BeginInvoke(WebTestLoop condition, Guid sourceWebTestId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.LoopConditionalRuleReference : ConditionalRuleReference {
    private int m_maxIterations;
    private bool m_advanceDataCursors;
    public int MaxIterations { get; public set; }
    public bool AdvanceDataCursors { get; public set; }
    public LoopConditionalRuleReference(Type type);
    public LoopConditionalRuleReference(LoopConditionalRuleReference copy);
    public virtual object Clone();
    public int get_MaxIterations();
    public void set_MaxIterations(int value);
    public bool get_AdvanceDataCursors();
    public void set_AdvanceDataCursors(bool value);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LoopEndDelegate : MulticastDelegate {
    public LoopEndDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTestLoop condition, Guid sourceWebTestId);
    public virtual IAsyncResult BeginInvoke(WebTestLoop condition, Guid sourceWebTestId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LoopIterationBeginDelegate : MulticastDelegate {
    public LoopIterationBeginDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTestLoop condition, Guid sourceWebTestId);
    public virtual IAsyncResult BeginInvoke(WebTestLoop condition, Guid sourceWebTestId, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.LoopIterationEndDelegate : MulticastDelegate {
    public LoopIterationEndDelegate(object object, IntPtr method);
    public virtual void Invoke(WebTestLoop condition);
    public virtual IAsyncResult BeginInvoke(WebTestLoop condition, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeConverterAttribute("Microsoft.VisualStudio.TestTools.WebTesting.NumericalComparisonOperatorConverter")]
public enum Microsoft.VisualStudio.TestTools.WebTesting.NumericalComparisonOperator : Enum {
    public int value__;
    public static NumericalComparisonOperator Equality;
    public static NumericalComparisonOperator Inequality;
    public static NumericalComparisonOperator LessThan;
    public static NumericalComparisonOperator LessThanOrEqual;
    public static NumericalComparisonOperator GreaterThan;
    public static NumericalComparisonOperator GreaterThanOrEqual;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.NumericalComparisonOperatorConverter : BaseEnumStringConverter`1<NumericalComparisonOperator> {
    private static string s_equality;
    private static string s_inequality;
    private static string s_lessThan;
    private static string s_lessThanOrEqual;
    private static string s_greaterThan;
    private static string s_greaterThanOrEqual;
    private static NumericalComparisonOperatorConverter();
    protected virtual NumericalComparisonOperator ConvertFromStringToEnum(string value);
    protected virtual string ConvertFromEnumToString(NumericalComparisonOperator value);
    protected virtual String[] PopulateStandardValues();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.OriginalRegex : object {
    private Regex _regex;
    public OriginalRegex(string regexPattern, RegexOptions options);
    public sealed virtual Match Match(string input);
    public sealed virtual Match Match(string input, int startAt);
    public sealed virtual Match Match(string input, int startat, int lenght);
    public sealed virtual bool IsMatch(string input);
    public sealed virtual string Replace(string input, string replacement);
}
[TypeConverterAttribute("Microsoft.VisualStudio.TestTools.WebTesting.OutcomeConverter")]
public enum Microsoft.VisualStudio.TestTools.WebTesting.Outcome : Enum {
    public int value__;
    public static Outcome Pass;
    public static Outcome Fail;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.OutcomeConverter : BaseEnumStringConverter`1<Outcome> {
    private static string s_pass;
    private static string s_fail;
    private static OutcomeConverter();
    protected virtual Outcome ConvertFromStringToEnum(string value);
    protected virtual string ConvertFromEnumToString(Outcome value);
    protected virtual String[] PopulateStandardValues();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.OwnerAttribute : Attribute {
    private string m_owner;
    public string Owner { get; }
    public OwnerAttribute(string owner);
    public string get_Owner();
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.Parameter : object {
    private string m_name;
    private bool m_urlEncode;
    private string m_value;
    private string m_recordedValue;
    private string m_correlationBinding;
    private bool m_alwaysDynamic;
    public string Name { get; public set; }
    public bool UrlEncode { get; public set; }
    public string Value { get; public set; }
    internal string RecordedValue { get; internal set; }
    internal string CorrelationBinding { get; internal set; }
    internal bool AlwaysDynamic { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public bool get_UrlEncode();
    public void set_UrlEncode(bool value);
    public string get_Value();
    public void set_Value(string value);
    internal string get_RecordedValue();
    internal void set_RecordedValue(string value);
    internal void set_CorrelationBinding(string value);
    internal string get_CorrelationBinding();
    internal void set_AlwaysDynamic(bool value);
    internal bool get_AlwaysDynamic();
    public abstract virtual object Clone();
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.PartialRenderingDecoder : object {
    private static char delimitByLengthDelimiter;
    public static List`1<PartialRenderingItem> DecodeMessage(string text);
    private static string DecodeString(string encodedValue);
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.PartialRenderingHiddenFieldFinder : object {
    private static string c_hiddenFieldRenderingType;
    private static string c_updatePanelRenderingType;
    internal static string PartialRenderingContentType;
    internal static List`1<KeyValuePair`2<string, string>> FindHiddenFields(Byte[] responseBodyBytes, string contentType);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.PartialRenderingItem : object {
    private string m_type;
    private string m_id;
    private string m_content;
    public string Content { get; }
    public string ID { get; }
    public string Type { get; }
    public PartialRenderingItem(string type, string id, string content);
    public string get_Content();
    public string get_ID();
    public string get_Type();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PluginOrRuleProperty : object {
    private string m_name;
    private string m_value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public PluginOrRuleProperty(string name, string value);
    private PluginOrRuleProperty(PluginOrRuleProperty copy);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public sealed virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PostPageEventArgs : PostRequestEventArgs {
    private Outcome m_pageOutcome;
    private WebTestPageStatistics m_pageStatistics;
    public WebTestPageStatistics PageStatistics { get; }
    public Outcome PageOutcome { get; }
    internal PostPageEventArgs(WebTest webTest, WebTestRequest request, WebTestResponse response, Outcome pageOutcome, WebTestPageStatistics pageStatistics);
    public WebTestPageStatistics get_PageStatistics();
    public Outcome get_PageOutcome();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PostRequestEventArgs : EventArgs {
    private WebTest m_webTest;
    private WebTestRequest m_request;
    private WebTestResponse m_response;
    public WebTest WebTest { get; }
    public WebTestRequest Request { get; }
    public bool ResponseExists { get; }
    public WebTestResponse Response { get; }
    internal PostRequestEventArgs(WebTest webTest, WebTestRequest request, WebTestResponse response);
    public WebTest get_WebTest();
    public WebTestRequest get_Request();
    public bool get_ResponseExists();
    public WebTestResponse get_Response();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PostTransactionEventArgs : EventArgs {
    private WebTest m_webTest;
    private string m_transactionName;
    private TimeSpan m_duration;
    public WebTest WebTest { get; }
    public string TransactionName { get; }
    public TimeSpan Duration { get; }
    internal PostTransactionEventArgs(WebTest webTest, string transactionName, TimeSpan duration);
    public WebTest get_WebTest();
    public string get_TransactionName();
    public TimeSpan get_Duration();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PostWebTestEventArgs : EventArgs {
    private WebTest m_webTest;
    public WebTest WebTest { get; }
    internal PostWebTestEventArgs(WebTest webTest);
    public WebTest get_WebTest();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PostWebTestRecordingEventArgs : EventArgs {
    private bool m_isRecordingForNewWebTest;
    private DeclarativeWebTest m_recordedWebTest;
    private WebTestResultIteration m_recordedWebTestResult;
    private bool m_recordedWebTestModified;
    private IList`1<string> m_recordedWebTestDeploymentItems;
    private List`1<string> m_nonDynamicQueryStringParamList;
    public bool IsRecordingForNewWebTest { get; }
    public DeclarativeWebTest RecordedWebTest { get; }
    public bool RecordedWebTestModified { get; public set; }
    public IList`1<string> RecordedWebTestDeploymentItems { get; }
    public List`1<string> NonDynamicQueryStringParamList { get; }
    public WebTestResultIteration RecordedWebTestResult { get; }
    internal PostWebTestRecordingEventArgs(bool isRecordingForNewWebTest, DeclarativeWebTest recordedWebTest, WebTestResultIteration recordedWebTestResult);
    public bool get_IsRecordingForNewWebTest();
    public DeclarativeWebTest get_RecordedWebTest();
    public void set_RecordedWebTestModified(bool value);
    public bool get_RecordedWebTestModified();
    public IList`1<string> get_RecordedWebTestDeploymentItems();
    public List`1<string> get_NonDynamicQueryStringParamList();
    public WebTestResultIteration get_RecordedWebTestResult();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PrePageEventArgs : EventArgs {
    private WebTest m_webTest;
    private WebTestRequest m_request;
    public WebTest WebTest { get; }
    public WebTestRequest Request { get; }
    internal PrePageEventArgs(WebTest webTest, WebTestRequest request);
    public WebTest get_WebTest();
    public WebTestRequest get_Request();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PreRequestDataBindingEventArgs : EventArgs {
    private WebTest m_webTest;
    private WebTestRequest m_request;
    public WebTest WebTest { get; }
    public WebTestRequest Request { get; }
    internal PreRequestDataBindingEventArgs(WebTest webTest, WebTestRequest request);
    public WebTest get_WebTest();
    public WebTestRequest get_Request();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PreRequestEventArgs : EventArgs {
    private WebTest m_webTest;
    private WebTestRequest m_request;
    private WebTestExecutionInstruction m_instruction;
    public WebTest WebTest { get; }
    public WebTestRequest Request { get; }
    public WebTestExecutionInstruction Instruction { get; public set; }
    internal PreRequestEventArgs(WebTest webTest, WebTestRequest request, WebTestExecutionInstruction instruction);
    public WebTest get_WebTest();
    public WebTestRequest get_Request();
    public WebTestExecutionInstruction get_Instruction();
    public void set_Instruction(WebTestExecutionInstruction value);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PreTransactionEventArgs : EventArgs {
    private WebTest m_webTest;
    private string m_transactionName;
    public WebTest WebTest { get; }
    public string TransactionName { get; }
    internal PreTransactionEventArgs(WebTest webTest, string transactionName);
    public WebTest get_WebTest();
    public string get_TransactionName();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.PreWebTestEventArgs : EventArgs {
    private WebTest m_webTest;
    public WebTest WebTest { get; }
    internal PreWebTestEventArgs(WebTest webTest);
    public WebTest get_WebTest();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.PriorityAttribute : Attribute {
    private int m_priority;
    public int Priority { get; }
    public PriorityAttribute(int priority);
    public int get_Priority();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.WebTesting.PropertyCollection : WebTestBaseCollection`1<PluginOrRuleProperty> {
    public string Item { get; public set; }
    public string get_Item(string propertyName);
    public void set_Item(string propertyName, string value);
    public void Add(string propertyName, string propertyValue);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.QueryStringParameter : Parameter {
    private bool m_useToGroupResults;
    [DefaultValueAttribute("False")]
public bool UseToGroupResults { get; public set; }
    public QueryStringParameter(string parameterName, string parameterValue);
    public QueryStringParameter(string parameterName, string parameterValue, bool urlEncode, bool useToGroupResults);
    public void set_UseToGroupResults(bool value);
    public bool get_UseToGroupResults();
    public virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.QueryStringParameterCollection : WebTestBaseCollection`1<QueryStringParameter> {
    public void Add(string parameterName, string parameterValue);
    public void Add(string parameterName, string parameterValue, bool urlEncode, bool useToGroupResults);
    public bool Contains(string parameterName);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.ReflectionRegex : object {
    private Regex _regex;
    private static Assembly _regexAssembly;
    private static Type _regexType;
    private static ConstructorInfo _regexConstructor;
    private static MethodInfo _matchSingleParameter;
    private static MethodInfo _matchDoubleParameter;
    private static MethodInfo _matchTripleParamete;
    private static MethodInfo _isMatchMethod;
    private static MethodInfo _replaceMethod;
    private static Assembly regexAssembly { get; }
    private static Type regexType { get; }
    private static ConstructorInfo regexConstructor { get; }
    private static MethodInfo matchSingleParameter { get; }
    private static MethodInfo matchDoubleParameter { get; }
    private static MethodInfo matchTripleParameter { get; }
    private static MethodInfo isMatchMethod { get; }
    private static MethodInfo replaceMethod { get; }
    public ReflectionRegex(string regexPattern, RegexOptions options, int timeout);
    private static Assembly get_regexAssembly();
    private static Type get_regexType();
    private static ConstructorInfo get_regexConstructor();
    private static MethodInfo get_matchSingleParameter();
    private static MethodInfo get_matchDoubleParameter();
    private static MethodInfo get_matchTripleParameter();
    private static MethodInfo get_isMatchMethod();
    private static MethodInfo get_replaceMethod();
    public sealed virtual Match Match(string input);
    public sealed virtual Match Match(string input, int startAt);
    public sealed virtual Match Match(string input, int startat, int lenght);
    public sealed virtual bool IsMatch(string input);
    public sealed virtual string Replace(string input, string replacement);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.RequestBodyEditorPluginReference : WebTestRuleBase {
    private RequestBodyEditorPluginReference(RequestBodyEditorPluginReference copy);
    public object CreateInstance();
    public virtual object Clone();
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.RequestPlugins.DateTimeHelper : object {
    public static string ComposeDate(bool useCurrentTime, bool useLocalTime, string inputDateTime, int addYears, int addMonths, int addDays, int addHours, int addMinutes, int addSeconds, int addMilliseconds, string outputFormat, bool outputJsonDateTime);
}
[LocalizableDisplayNameAttribute("DateTimePluginName")]
[LocalizableDescriptionAttribute("DateTimePluginDescription")]
public class Microsoft.VisualStudio.TestTools.WebTesting.RequestPlugins.DateTimeWebRequestPlugin : WebTestRequestPlugin {
    [CompilerGeneratedAttribute]
private int <AddDays>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddHours>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddMonths>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddYears>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputJsonDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLocalTime>k__BackingField;
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddDaysName")]
[LocalizableDescriptionAttribute("AddDaysDescription")]
public int AddDays { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddHoursName")]
[LocalizableDescriptionAttribute("AddHoursDescripton")]
public int AddHours { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddMillisecondsName")]
[LocalizableDescriptionAttribute("AddMillisecondsDescription")]
public int AddMilliseconds { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddMinutesName")]
[LocalizableDescriptionAttribute("AddMinutesDescription")]
public int AddMinutes { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddMonthsName")]
[LocalizableDescriptionAttribute("AddMonthsDescripon")]
public int AddMonths { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddSecondsName")]
[LocalizableDescriptionAttribute("AddSecondsDescription")]
public int AddSeconds { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddYearsName")]
[LocalizableDescriptionAttribute("AddYearsDescripton")]
public int AddYears { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("TargetContextParameterName")]
[LocalizableDescriptionAttribute("TargetContextParameterDescription")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ContextParameterName { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("InputDateTimeName")]
[LocalizableDescriptionAttribute("InputDateTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public string InputDateTime { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("OutputFormatName")]
[LocalizableDescriptionAttribute("OutputFormatDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public string OutputFormat { get; public set; }
    [DefaultValueAttribute("False")]
[LocalizableDisplayNameAttribute("OutputJsonDateTimeName")]
[LocalizableDescriptionAttribute("OutputJsonDateTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public bool OutputJsonDateTime { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableDisplayNameAttribute("UseCurrentTimeName")]
[LocalizableDescriptionAttribute("UseCurrentTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public bool UseCurrentTime { get; public set; }
    [DefaultValueAttribute("False")]
[LocalizableDisplayNameAttribute("UseLocalTimeName")]
[LocalizableDescriptionAttribute("UseLocalTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public bool UseLocalTime { get; public set; }
    [CompilerGeneratedAttribute]
public int get_AddDays();
    [CompilerGeneratedAttribute]
public void set_AddDays(int value);
    [CompilerGeneratedAttribute]
public int get_AddHours();
    [CompilerGeneratedAttribute]
public void set_AddHours(int value);
    [CompilerGeneratedAttribute]
public int get_AddMilliseconds();
    [CompilerGeneratedAttribute]
public void set_AddMilliseconds(int value);
    [CompilerGeneratedAttribute]
public int get_AddMinutes();
    [CompilerGeneratedAttribute]
public void set_AddMinutes(int value);
    [CompilerGeneratedAttribute]
public int get_AddMonths();
    [CompilerGeneratedAttribute]
public void set_AddMonths(int value);
    [CompilerGeneratedAttribute]
public int get_AddSeconds();
    [CompilerGeneratedAttribute]
public void set_AddSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_AddYears();
    [CompilerGeneratedAttribute]
public void set_AddYears(int value);
    [CompilerGeneratedAttribute]
public string get_ContextParameterName();
    [CompilerGeneratedAttribute]
public void set_ContextParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_InputDateTime();
    [CompilerGeneratedAttribute]
public void set_InputDateTime(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFormat();
    [CompilerGeneratedAttribute]
public void set_OutputFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_OutputJsonDateTime();
    [CompilerGeneratedAttribute]
public void set_OutputJsonDateTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCurrentTime();
    [CompilerGeneratedAttribute]
public void set_UseCurrentTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLocalTime();
    [CompilerGeneratedAttribute]
public void set_UseLocalTime(bool value);
    public virtual void PreRequestDataBinding(object sender, PreRequestDataBindingEventArgs e);
}
[LocalizableDisplayNameAttribute("DateTimePluginName")]
[LocalizableDescriptionAttribute("DateTimePluginDescription")]
public class Microsoft.VisualStudio.TestTools.WebTesting.RequestPlugins.DateTimeWebTestPlugin : WebTestPlugin {
    [CompilerGeneratedAttribute]
private int <AddDays>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddHours>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddMonths>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AddYears>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContextParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputJsonDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLocalTime>k__BackingField;
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddDaysName")]
[LocalizableDescriptionAttribute("AddDaysDescription")]
public int AddDays { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddHoursName")]
[LocalizableDescriptionAttribute("AddHoursDescripton")]
public int AddHours { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddMillisecondsName")]
[LocalizableDescriptionAttribute("AddMillisecondsDescription")]
public int AddMilliseconds { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddMinutesName")]
[LocalizableDescriptionAttribute("AddMinutesDescription")]
public int AddMinutes { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddMonthsName")]
[LocalizableDescriptionAttribute("AddMonthsDescripon")]
public int AddMonths { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddSecondsName")]
[LocalizableDescriptionAttribute("AddSecondsDescription")]
public int AddSeconds { get; public set; }
    [DefaultValueAttribute("0")]
[LocalizableDisplayNameAttribute("AddYearsName")]
[LocalizableDescriptionAttribute("AddYearsDescripton")]
public int AddYears { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("TargetContextParameterName")]
[LocalizableDescriptionAttribute("TargetContextParameterDescription")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ContextParameterName { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("InputDateTimeName")]
[LocalizableDescriptionAttribute("InputDateTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public string InputDateTime { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableDisplayNameAttribute("OutputFormatName")]
[LocalizableDescriptionAttribute("OutputFormatDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public string OutputFormat { get; public set; }
    [DefaultValueAttribute("False")]
[LocalizableDisplayNameAttribute("OutputJsonDateTimeName")]
[LocalizableDescriptionAttribute("OutputJsonDateTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public bool OutputJsonDateTime { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableDisplayNameAttribute("UseCurrentTimeName")]
[LocalizableDescriptionAttribute("UseCurrentTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public bool UseCurrentTime { get; public set; }
    [DefaultValueAttribute("False")]
[LocalizableDisplayNameAttribute("UseLocalTimeName")]
[LocalizableDescriptionAttribute("UseLocalTimeDescription")]
[LocalizableCategoryAttribute("CategoryOptions")]
public bool UseLocalTime { get; public set; }
    [CompilerGeneratedAttribute]
public int get_AddDays();
    [CompilerGeneratedAttribute]
public void set_AddDays(int value);
    [CompilerGeneratedAttribute]
public int get_AddHours();
    [CompilerGeneratedAttribute]
public void set_AddHours(int value);
    [CompilerGeneratedAttribute]
public int get_AddMilliseconds();
    [CompilerGeneratedAttribute]
public void set_AddMilliseconds(int value);
    [CompilerGeneratedAttribute]
public int get_AddMinutes();
    [CompilerGeneratedAttribute]
public void set_AddMinutes(int value);
    [CompilerGeneratedAttribute]
public int get_AddMonths();
    [CompilerGeneratedAttribute]
public void set_AddMonths(int value);
    [CompilerGeneratedAttribute]
public int get_AddSeconds();
    [CompilerGeneratedAttribute]
public void set_AddSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_AddYears();
    [CompilerGeneratedAttribute]
public void set_AddYears(int value);
    [CompilerGeneratedAttribute]
public string get_ContextParameterName();
    [CompilerGeneratedAttribute]
public void set_ContextParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_InputDateTime();
    [CompilerGeneratedAttribute]
public void set_InputDateTime(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFormat();
    [CompilerGeneratedAttribute]
public void set_OutputFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_OutputJsonDateTime();
    [CompilerGeneratedAttribute]
public void set_OutputJsonDateTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCurrentTime();
    [CompilerGeneratedAttribute]
public void set_UseCurrentTime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseLocalTime();
    [CompilerGeneratedAttribute]
public void set_UseLocalTime(bool value);
    public virtual void PreWebTest(object sender, PreWebTestEventArgs e);
}
[LocalizableDisplayNameAttribute("ResolveNestedParametersName")]
[LocalizableDescriptionAttribute("ResolveNestedParametersDescription")]
public class Microsoft.VisualStudio.TestTools.WebTesting.RequestPlugins.SPLTPT_MTSL_ResolveNestedContextParms : WebTestRequestPlugin {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckFormPostValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckQueryStringValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckStringBodyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessOnlyNestedParms>k__BackingField;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("CheckFormPostValuesName")]
[LocalizableDescriptionAttribute("CheckFormPostValuesDescription")]
[DefaultValueAttribute("True")]
public bool CheckFormPostValues { get; public set; }
    [LocalizableDisplayNameAttribute("CheckQueryStringValuesName")]
[LocalizableDescriptionAttribute("CheckQueryStringValuesDescription")]
[DefaultValueAttribute("True")]
public bool CheckQueryStringValues { get; public set; }
    [LocalizableDisplayNameAttribute("CheckStringBodyValuesName")]
[LocalizableDescriptionAttribute("CheckStringBodyValuesDescription")]
[DefaultValueAttribute("True")]
public bool CheckStringBodyValues { get; public set; }
    [LocalizableDisplayNameAttribute("ProcessOnlyNestedContextParametersName")]
[LocalizableDescriptionAttribute("ProcessOnlyNestedContextParametersDescription")]
[DefaultValueAttribute("False")]
public bool ProcessOnlyNestedParms { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckFormPostValues();
    [CompilerGeneratedAttribute]
public void set_CheckFormPostValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckQueryStringValues();
    [CompilerGeneratedAttribute]
public void set_CheckQueryStringValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_CheckStringBodyValues();
    [CompilerGeneratedAttribute]
public void set_CheckStringBodyValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcessOnlyNestedParms();
    [CompilerGeneratedAttribute]
public void set_ProcessOnlyNestedParms(bool value);
    public virtual void PreRequestDataBinding(object sender, PreRequestDataBindingEventArgs e);
}
internal enum Microsoft.VisualStudio.TestTools.WebTesting.RequestResultStatus : Enum {
    public int value__;
    public static RequestResultStatus Initializing;
    public static RequestResultStatus RequestSubmitted;
    public static RequestResultStatus WaitingForDependents;
    public static RequestResultStatus DependentsLoaded;
    public static RequestResultStatus Complete;
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.RequestType : Enum {
    public int value__;
    public static RequestType TopLevel;
    public static RequestType Dependent;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.WebTesting.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddDaysDescription { get; }
    internal static string AddDaysName { get; }
    internal static string AddHoursDescripton { get; }
    internal static string AddHoursName { get; }
    internal static string AddMillisecondsDescription { get; }
    internal static string AddMillisecondsName { get; }
    internal static string AddMinutesDescription { get; }
    internal static string AddMinutesName { get; }
    internal static string AddMonthsDescripon { get; }
    internal static string AddMonthsName { get; }
    internal static string AddSecondsDescription { get; }
    internal static string AddSecondsName { get; }
    internal static string AddYearsDescripton { get; }
    internal static string AddYearsName { get; }
    internal static string AudienceUriName { get; }
    internal static string AudieneUriDescription { get; }
    internal static string BoundsEndsWith { get; }
    internal static string BoundsEndsWithDescription { get; }
    internal static string BoundsStartsWith { get; }
    internal static string BoundsStartsWithDescription { get; }
    internal static string CategoryComments { get; }
    internal static string CategoryContextParameters { get; }
    internal static string CategoryConversions { get; }
    internal static string CategoryDefaults { get; }
    internal static string CategoryErrorRequest { get; }
    internal static string CategoryFilters { get; }
    internal static string CategoryOptions { get; }
    internal static string CategoryStopTest { get; }
    internal static string CertificatePasswordDescription { get; }
    internal static string CertificatePasswordName { get; }
    internal static string CheckFormPostValuesDescription { get; }
    internal static string CheckFormPostValuesName { get; }
    internal static string CheckQueryStringValuesDescription { get; }
    internal static string CheckQueryStringValuesName { get; }
    internal static string CheckStringBodyValuesDescription { get; }
    internal static string CheckStringBodyValuesName { get; }
    internal static string ClientCertificateDescription { get; }
    internal static string ClientCertificateName { get; }
    internal static string ConditionalRuleDescriptionContextParameterExistence { get; }
    internal static string ConditionalRuleDescriptionCookieComparison { get; }
    internal static string ConditionalRuleDescriptionCookieExistence { get; }
    internal static string ConditionalRuleDescriptionCountingLoop { get; }
    internal static string ConditionalRuleDescriptionForLoopRule { get; }
    internal static string ConditionalRuleDescriptionLastRequestOutcome { get; }
    internal static string ConditionalRuleDescriptionLastResponseCode { get; }
    internal static string ConditionalRuleDescriptionNumericalComparisonRule { get; }
    internal static string ConditionalRuleDescriptionProbabilityRule { get; }
    internal static string ConditionalRuleDescriptionStringComparisonRule { get; }
    internal static string ConditionalRuleExceptionInCheck { get; }
    internal static string ConditionalRuleExceptionInCleanUp { get; }
    internal static string ConditionalRuleExceptionIncorrectAssociation { get; }
    internal static string ConditionalRuleExceptionInInitialize { get; }
    internal static string ConditionalRuleExceptionNoRuleFound { get; }
    internal static string ConditionalRuleExceptionWhileBinding { get; }
    internal static string ConditionalRuleNameContextParameterExistence { get; }
    internal static string ConditionalRuleNameCookieComparison { get; }
    internal static string ConditionalRuleNameCookieExistence { get; }
    internal static string ConditionalRuleNameCountingLoop { get; }
    internal static string ConditionalRuleNameForLoopRule { get; }
    internal static string ConditionalRuleNameLastRequestOutcome { get; }
    internal static string ConditionalRuleNameLastResponseCode { get; }
    internal static string ConditionalRuleNameNumericalComparisonRule { get; }
    internal static string ConditionalRuleNameProbabilityRule { get; }
    internal static string ConditionalRuleNameStringComparisonRule { get; }
    internal static string ConditionalRuleType { get; }
    internal static string ConditionMet { get; }
    internal static string ConditionNotMet { get; }
    internal static string ConnectionFailedWebTestExceptionMessage { get; }
    internal static string ContentTypeID { get; }
    internal static string ContentTypeIdContextParameter { get; }
    internal static string ContentTypeIdContextParameterDescription { get; }
    internal static string ContentTypeIDDescription { get; }
    internal static string ContextParameterApplyBeforeRequestDescritpion { get; }
    internal static string ContextParameterApplyBeforeRequestName { get; }
    internal static string ContextParameterBase64DecodeDescription { get; }
    internal static string ContextParameterBase64DecodeName { get; }
    internal static string ContextParameterBase64EncodeDescription { get; }
    internal static string ContextParameterBase64EncodeName { get; }
    internal static string ContextParameterDescription { get; }
    internal static string ContextParameterHtmlDecodeDescription { get; }
    internal static string ContextParameterHtmlDecodeName { get; }
    internal static string ContextParameterHtmlEncodeDescription { get; }
    internal static string ContextParameterHtmlEncodeName { get; }
    internal static string ContextParameterName { get; }
    internal static string ContextParameterNameCategoryReplace { get; }
    internal static string ContextParameterNameCategoryTransform { get; }
    internal static string ContextParameterNotFoundExceptionMessage { get; }
    internal static string ContextParameterPatternDescription { get; }
    internal static string ContextParameterPatternName { get; }
    internal static string ContextParameterReplaceDescription { get; }
    internal static string ContextParameterReplaceName { get; }
    internal static string ContextParameterReplaceWithDescription { get; }
    internal static string ContextParameterReplaceWithName { get; }
    internal static string ContextParameterUrlDecodeDescription { get; }
    internal static string ContextParameterUrlDecodeName { get; }
    internal static string ContextParameterUrlEncodeDescription { get; }
    internal static string ContextParameterUrlEncodeName { get; }
    internal static string ContextParameterUseRegexDescription { get; }
    internal static string ContextParameterUseRegexName { get; }
    internal static string ContextParameterValueDescription { get; }
    internal static string ContextParameterValueName { get; }
    internal static string CreateClassExceptionMessage { get; }
    internal static string CreateRuleExceptionMessage { get; }
    internal static string DataSourceAlreadyExists { get; }
    internal static string DataSourceNotFound { get; }
    internal static string DataSourceTableNotFound { get; }
    internal static string DateFormat { get; }
    internal static string DateFormatDescription { get; }
    internal static string DateTimePluginDescription { get; }
    internal static string DateTimePluginName { get; }
    internal static string DecodeHtmlDescription { get; }
    internal static string DecodeUnicodeEscapeSequences { get; }
    internal static string DecodeUnicodeEscapeSequencesDescription { get; }
    internal static string DecodeUrlDescription { get; }
    internal static string DefaultValue { get; }
    internal static string DefaultValueDescription { get; }
    internal static string DefaultValueLoopCounter { get; }
    internal static string DisableString { get; }
    internal static string DisableStringDescription { get; }
    internal static string DisplayFormatContextParameter { get; }
    internal static string DisplayFormatContextParameterDescription { get; }
    internal static string DocumentFilter { get; }
    internal static string DocumentFilterDescription { get; }
    internal static string Enabled { get; }
    internal static string EnabledDescription { get; }
    internal static string ErrorCookieNotFound { get; }
    internal static string ErrorCPContentNotANumber { get; }
    internal static string ErrorExceededLoopMaxIterations { get; }
    internal static string ErrorInvalidPercentageValues { get; }
    internal static string ErrorLastResponseNotFound { get; }
    internal static string ErrorResponseNotHtmlForExtractionRules { get; }
    internal static string ErrorResponseNotHtmlForValidationRules { get; }
    internal static string ErrorUnableToGetStringRepresentaion { get; }
    internal static string EventEndDateContextParameter { get; }
    internal static string EventEndDateContextParameterDescription { get; }
    internal static string EventEndTimeContextParameter { get; }
    internal static string EventEndTimeContextParameterDescription { get; }
    internal static string EventStartDateContextParameter { get; }
    internal static string EventStartDateContextParameterDescription { get; }
    internal static string EventStartTimeContextParameter { get; }
    internal static string EventStartTimeContextParameterDescription { get; }
    internal static string EventTitleContextParameter { get; }
    internal static string EventTitleContextParameterDescription { get; }
    internal static string ExtractAttributeValueError { get; }
    internal static string ExtractFormFieldNotFound { get; }
    internal static string ExtractHttpHeaderError { get; }
    internal static string ExtractHttpHeaderErrorIndexNotFound { get; }
    internal static string ExtractionErrorSelectTagNotFound { get; }
    internal static string ExtractionErrorTagNotFound { get; }
    internal static string ExtractionRuleDescriptionAttributeValue { get; }
    internal static string ExtractionRuleDescriptionFindWorkflowInstances { get; }
    internal static string ExtractionRuleDescriptionFormField { get; }
    internal static string ExtractionRuleDescriptionHiddenFields { get; }
    internal static string ExtractionRuleDescriptionHttpHeader { get; }
    internal static string ExtractionRuleDescriptionRegularExpression { get; }
    internal static string ExtractionRuleDescriptionSelectTag { get; }
    internal static string ExtractionRuleDescriptionSP2010FindCalendarDates { get; }
    internal static string ExtractionRuleDescriptionSP2010FindCalendarItems { get; }
    internal static string ExtractionRuleDescriptionSP2010FindDocumentItems { get; }
    internal static string ExtractionRuleDescriptionSP2010FindListItems { get; }
    internal static string ExtractionRuleDescriptionSP2010FindListItemsHrefs { get; }
    internal static string ExtractionRuleDescriptionSPExtractGUIDFromField { get; }
    internal static string ExtractionRuleDescriptionSPExtractSelectFormField { get; }
    internal static string ExtractionRuleDescriptionSPExtractViaKeyString { get; }
    internal static string ExtractionRuleDescriptionSPFindHrefs { get; }
    internal static string ExtractionRuleDescriptionSPFormField2 { get; }
    internal static string ExtractionRuleDescriptionSPListViewWebPartScriptValue { get; }
    internal static string ExtractionRuleDescriptionTagInnerText { get; }
    internal static string ExtractionRuleDescriptionText { get; }
    internal static string ExtractionRuleExtractTextIndexLessThanZero { get; }
    internal static string ExtractionRuleNameAttributeValue { get; }
    internal static string ExtractionRuleNameFindWorkflowInstances { get; }
    internal static string ExtractionRuleNameFormField { get; }
    internal static string ExtractionRuleNameHiddenFields { get; }
    internal static string ExtractionRuleNameHttpHeader { get; }
    internal static string ExtractionRuleNameRegularExpression { get; }
    internal static string ExtractionRuleNameSelectTag { get; }
    internal static string ExtractionRuleNameSP2010FindCalendarDates { get; }
    internal static string ExtractionRuleNameSP2010FindCalendarItems { get; }
    internal static string ExtractionRuleNameSP2010FindDocumentItems { get; }
    internal static string ExtractionRuleNameSP2010FindListItems { get; }
    internal static string ExtractionRuleNameSP2010FindListItemsHrefs { get; }
    internal static string ExtractionRuleNameSPExtractGUIDFormField { get; }
    internal static string ExtractionRuleNameSPExtractSelectFormField { get; }
    internal static string ExtractionRuleNameSPExtractViaKeyString { get; }
    internal static string ExtractionRuleNameSPFindHrefs { get; }
    internal static string ExtractionRuleNameSPFormField2 { get; }
    internal static string ExtractionRuleNameSPGuids { get; }
    internal static string ExtractionRuleNameSPListViewWebPartScriptValue { get; }
    internal static string ExtractionRuleNameTagInnerText { get; }
    internal static string ExtractionRuleNameText { get; }
    internal static string ExtractionRuleSPGuidsDescription { get; }
    internal static string ExtractionRuleType { get; }
    internal static string ExtractTextEndsWithNotFound { get; }
    internal static string ExtractTextStartsWithNotFound { get; }
    internal static string Failed { get; }
    internal static string FormFieldName { get; }
    internal static string FormFieldNameDescription { get; }
    internal static string FormFieldType { get; }
    internal static string FormFieldTypeDescription { get; }
    internal static string GenerateGuidDescription { get; }
    internal static string GenerateGuidName { get; }
    internal static string GenerateGuidOutputFormatDescription { get; }
    internal static string GenericGUIDFormat { get; }
    internal static string GenericGUIDFormatDescription { get; }
    internal static string GUIDFormFieldName { get; }
    internal static string GUIDFormFieldNameDescription { get; }
    internal static string HrefContextParameter { get; }
    internal static string HrefContextParameterDescription { get; }
    internal static string HtmlParseException { get; }
    internal static string InputDateTimeDescription { get; }
    internal static string InputDateTimeName { get; }
    internal static string InvalidRegexPattern { get; }
    internal static string InvalidXMLForXPath { get; }
    internal static string ItemEndDateTimeFilter { get; }
    internal static string ItemEndDateTimeFilterDescription { get; }
    internal static string ItemIDContextParameter { get; }
    internal static string ItemIDContextParameterDescription { get; }
    internal static string ItemNumber { get; }
    internal static string ItemNumberDescription { get; }
    internal static string ItemStartDateTimeFilter { get; }
    internal static string ItemStartDateTimeFilterDescription { get; }
    internal static string ItemTitleFilter { get; }
    internal static string ItemTitleFilterDescription { get; }
    internal static string KeyString { get; }
    internal static string KeyStringDescription { get; }
    internal static string ListId { get; }
    internal static string ListIdContextParameter { get; }
    internal static string ListIdContextParameterDescription { get; }
    internal static string ListIdDescription { get; }
    internal static string ListTitle { get; }
    internal static string ListTitleDescription { get; }
    internal static string MatchCase { get; }
    internal static string MatchCaseDescription { get; }
    internal static string MaxValueDescription { get; }
    internal static string MaxValueName { get; }
    internal static string MinValueDescription { get; }
    internal static string MinValueName { get; }
    internal static string MissingValueasEmptyString { get; }
    internal static string MissingValueasEmptyStringDescription { get; }
    internal static string NameIdentifierDescription { get; }
    internal static string NameIdentifierName { get; }
    internal static string NoHiddenFieldsFound { get; }
    internal static string NotAfterTimeSpanDescription { get; }
    internal static string NotAfterTimeSpanName { get; }
    internal static string NotBeforeTimeSpanDescription { get; }
    internal static string NotBeforeTimeSpanName { get; }
    internal static string NumericalComparisonOperatorEquality { get; }
    internal static string NumericalComparisonOperatorGreaterThan { get; }
    internal static string NumericalComparisonOperatorGreaterThanOrEqual { get; }
    internal static string NumericalComparisonOperatorInequality { get; }
    internal static string NumericalComparisonOperatorLessThan { get; }
    internal static string NumericalComparisonOperatorLessThanOrEqual { get; }
    internal static string OutcomeFail { get; }
    internal static string OutcomePass { get; }
    internal static string OutputFormatDescription { get; }
    internal static string OutputFormatName { get; }
    internal static string OutputJsonDateTimeDescription { get; }
    internal static string OutputJsonDateTimeName { get; }
    internal static string PageType { get; }
    internal static string PageTypeContextParameter { get; }
    internal static string PageTypeContextParameterDescription { get; }
    internal static string PageTypeDescription { get; }
    internal static string PartialMatch { get; }
    internal static string PartialMatchDescription { get; }
    internal static string Passed { get; }
    internal static string ProcessOnlyNestedContextParametersDescription { get; }
    internal static string ProcessOnlyNestedContextParametersName { get; }
    internal static string PropertyDescriptionAttributeName { get; }
    internal static string PropertyDescriptionAttributeValue { get; }
    internal static string PropertyDescriptionCheckForCookieExistence { get; }
    internal static string PropertyDescriptionCheckForParameterExistence { get; }
    internal static string PropertyDescriptionClosingTag { get; }
    internal static string PropertyDescriptionCollapseExtraWhiteSpace { get; }
    internal static string PropertyDescriptionComparisonOperator { get; }
    internal static string PropertyDescriptionComparisonValue { get; }
    internal static string PropertyDescriptionContextParameterName { get; }
    internal static string PropertyDescriptionContextParameterNameToFind { get; }
    internal static string PropertyDescriptionCookieComparisonIgnoreCase { get; }
    internal static string PropertyDescriptionCookieComparisonUseRegularExpression { get; }
    internal static string PropertyDescriptionCookieDomainName { get; }
    internal static string PropertyDescriptionCookieNameToFind { get; }
    internal static string PropertyDescriptionCookiePath { get; }
    internal static string PropertyDescriptionCookieValue { get; }
    internal static string PropertyDescriptionCountingContextParamName { get; }
    internal static string PropertyDescriptionEndsWith { get; }
    internal static string PropertyDescriptionExpectedInnerText { get; }
    internal static string PropertyDescriptionExpectedSelectedValue { get; }
    internal static string PropertyDescriptionExpectedValue { get; }
    internal static string PropertyDescriptionExtractRandomMatch { get; }
    internal static string PropertyDescriptionExtractRequired { get; }
    internal static string PropertyDescriptionFindText { get; }
    internal static string PropertyDescriptionFormFieldName { get; }
    internal static string PropertyDescriptionHeader { get; }
    internal static string PropertyDescriptionHtmlDecode { get; }
    internal static string PropertyDescriptionHtmlTagName { get; }
    internal static string PropertyDescriptionIgnoreCase { get; }
    internal static string PropertyDescriptionIgnoreCaseForInnerText { get; }
    internal static string PropertyDescriptionIncrementValue { get; }
    internal static string PropertyDescriptionIndex { get; }
    internal static string PropertyDescriptionIndexForExtractHeader { get; }
    internal static string PropertyDescriptionIndexForExtractInnerText { get; }
    internal static string PropertyDescriptionIndexForValidateAttribute { get; }
    internal static string PropertyDescriptionIndexForValidateInnerText { get; }
    internal static string PropertyDescriptionInitialValue { get; }
    internal static string PropertyDescriptionMatchAttributeName { get; }
    internal static string PropertyDescriptionMatchAttributeValue { get; }
    internal static string PropertyDescriptionMaxRequestTime { get; }
    internal static string PropertyDescriptionNumIterations { get; }
    internal static string PropertyDescriptionPassIfTextFound { get; }
    internal static string PropertyDescriptionPercentage { get; }
    internal static string PropertyDescriptionProbabilityContextParameterName { get; }
    internal static string PropertyDescriptionRegularExpression { get; }
    internal static string PropertyDescriptionRemoveInnerTags { get; }
    internal static string PropertyDescriptionRequestOutcome { get; }
    internal static string PropertyDescriptionResponseCode { get; }
    internal static string PropertyDescriptionResponseTimeGoalTolerance { get; }
    internal static string PropertyDescriptionSearchAllKeyStrings { get; }
    internal static string PropertyDescriptionSearchInHeaders { get; }
    internal static string PropertyDescriptionSelectTagName { get; }
    internal static string PropertyDescriptionStartsWith { get; }
    internal static string PropertyDescriptionStringComparisonIgnoreCase { get; }
    internal static string PropertyDescriptionStringComparisonUseRegularExpression { get; }
    internal static string PropertyDescriptionTagName { get; }
    internal static string PropertyDescriptionTerminatingValue { get; }
    internal static string PropertyDescriptionUseGroups { get; }
    internal static string PropertyDescriptionUseRegularExpression { get; }
    internal static string PropertyDescriptionWebPageUri { get; }
    internal static string PropertyDesriptionMinOccurrences { get; }
    internal static string PropertyDesriptionRequiredTagName { get; }
    internal static string PropertyNameAttributeName { get; }
    internal static string PropertyNameAttributeValue { get; }
    internal static string PropertyNameCheckForExistence { get; }
    internal static string PropertyNameClosingTag { get; }
    internal static string PropertyNameCollapseExtraWhiteSpace { get; }
    internal static string PropertyNameComparisonOperator { get; }
    internal static string PropertyNameComparisonValue { get; }
    internal static string PropertyNameContextParameterName { get; }
    internal static string PropertyNameCookieDomainName { get; }
    internal static string PropertyNameCookieName { get; }
    internal static string PropertyNameCookiePath { get; }
    internal static string PropertyNameCookieValue { get; }
    internal static string PropertyNameEndsWith { get; }
    internal static string PropertyNameExpectedInnerText { get; }
    internal static string PropertyNameExpectedSelectedValue { get; }
    internal static string PropertyNameExpectedValue { get; }
    internal static string PropertyNameExtractRandomMatch { get; }
    internal static string PropertyNameExtractRequired { get; }
    internal static string PropertyNameFindText { get; }
    internal static string PropertyNameFormFieldName { get; }
    internal static string PropertyNameHeader { get; }
    internal static string PropertyNameHtmlDecode { get; }
    internal static string PropertyNameHtmlTagName { get; }
    internal static string PropertyNameIgnoreCase { get; }
    internal static string PropertyNameIgnoreCaseForInnerText { get; }
    internal static string PropertyNameIncrementValue { get; }
    internal static string PropertyNameIndex { get; }
    internal static string PropertyNameInitialValue { get; }
    internal static string PropertyNameMatchAttributeName { get; }
    internal static string PropertyNameMatchAttributeValue { get; }
    internal static string PropertyNameMaxRequestTime { get; }
    internal static string PropertyNameMinOccurrences { get; }
    internal static string PropertyNameNumIterations { get; }
    internal static string PropertyNamePassIfTextFound { get; }
    internal static string PropertyNamePercentage { get; }
    internal static string PropertyNameRegularExpression { get; }
    internal static string PropertyNameRemoveInnerTags { get; }
    internal static string PropertyNameRequestOutcome { get; }
    internal static string PropertyNameRequiredTagName { get; }
    internal static string PropertyNameResponseCode { get; }
    internal static string PropertyNameResponseTimeGoalTolerance { get; }
    internal static string PropertyNameSearchAllKeyStrings { get; }
    internal static string PropertyNameSearchInHeaders { get; }
    internal static string PropertyNameSelectTagName { get; }
    internal static string PropertyNameStartsWith { get; }
    internal static string PropertyNameTagName { get; }
    internal static string PropertyNameTerminatingValue { get; }
    internal static string PropertyNameUseGroups { get; }
    internal static string PropertyNameUseRegularExpression { get; }
    internal static string PropertyNameWebPageUri { get; }
    internal static string RandomIntGeneratorDescription { get; }
    internal static string RandomIntGeneratorName { get; }
    internal static string RegularExpressionNotFound { get; }
    internal static string Required { get; }
    internal static string RequiredDescription { get; }
    internal static string ResolveNestedParametersDescription { get; }
    internal static string ResolveNestedParametersName { get; }
    internal static string ResponseNotHtml { get; }
    internal static string ResponseNotHtmlOrPartialRendering { get; }
    internal static string ResultsComment { get; }
    internal static string ResultsCommentDescription { get; }
    internal static string SamlTokenGeneratorDescription { get; }
    internal static string SamlTokenGeneratorName { get; }
    internal static string SetContextParameterValueDescription { get; }
    internal static string SetContextParameterValueName { get; }
    internal static string Storeascollection { get; }
    internal static string StoreascollectionDescription { get; }
    internal static string StringComparisonOperatorEquals { get; }
    internal static string StringComparisonOperatorNotEquals { get; }
    internal static string StringRepresentationCheckForCookieAbsence { get; }
    internal static string StringRepresentationCheckForCookieExistence { get; }
    internal static string StringRepresentationCheckForParameterAbsence { get; }
    internal static string StringRepresentationCheckForParameterExistence { get; }
    internal static string StringRepresentationCookieEqualityComparison { get; }
    internal static string StringRepresentationCookieEqualityComparisonWithBinding { get; }
    internal static string StringRepresentationCookieInequalityComparison { get; }
    internal static string StringRepresentationCookieInequalityComparisonWithBinding { get; }
    internal static string StringRepresentationCountingRule { get; }
    internal static string StringRepresentationForCondition { get; }
    internal static string StringRepresentationForLoop { get; }
    internal static string StringRepresentationForLoopRule { get; }
    internal static string StringRepresentationLastRequestOutcomeRule { get; }
    internal static string StringRepresentationLastResponseCodeRule { get; }
    internal static string StringRepresentationNotLastResponseCodeRule { get; }
    internal static string StringRepresentationNumericalComparison { get; }
    internal static string StringRepresentationProbabilityRule { get; }
    internal static string StringRepresentationStringComparisonEquals { get; }
    internal static string StringRepresentationStringComparisonEqualsWithBinding { get; }
    internal static string StringRepresentationStringComparisonNotEquals { get; }
    internal static string StringRepresentationStringComparisonNotEqualsWithBinding { get; }
    internal static string StringSeparator { get; }
    internal static string StringSeparatorDescription { get; }
    internal static string StringSeparatorForResponseUrlValidation { get; }
    internal static string SubfieldEnd { get; }
    internal static string SubfieldEndDescription { get; }
    internal static string SubfieldStart { get; }
    internal static string SubfieldStartDesctiption { get; }
    internal static string SubStringEndsWith { get; }
    internal static string SubStringEndsWithDescription { get; }
    internal static string SubStringExtract { get; }
    internal static string SubStringExtractDescription { get; }
    internal static string SubStringStartsWith { get; }
    internal static string SubStringStartsWithDescription { get; }
    internal static string TargetContextParameterDescription { get; }
    internal static string TargetContextParameterName { get; }
    internal static string ThresholdRuleCategoryDependentCounter { get; }
    internal static string ThresholdRuleCategoryOptions { get; }
    internal static string ThresholdRuleCategoryValues { get; }
    internal static string ThresholdRuleCompareCountersCriticalThresholdDescription { get; }
    internal static string ThresholdRuleCompareCountersWarningThresholdDescription { get; }
    internal static string ThresholdRuleDescriptionCompareConstant { get; }
    internal static string ThresholdRuleDescriptionCompareCounters { get; }
    internal static string ThresholdRuleNameCompareConstant { get; }
    internal static string ThresholdRuleNameCompareCounters { get; }
    internal static string ThresholdRulePropertyAlertIfOverDescription { get; }
    internal static string ThresholdRulePropertyAlertIfOverName { get; }
    internal static string ThresholdRulePropertyCriticalThresholdDescription { get; }
    internal static string ThresholdRulePropertyCriticalThresholdName { get; }
    internal static string ThresholdRulePropertyDependentCategoryDescription { get; }
    internal static string ThresholdRulePropertyDependentCategoryName { get; }
    internal static string ThresholdRulePropertyDependentCounterDescription { get; }
    internal static string ThresholdRulePropertyDependentCounterName { get; }
    internal static string ThresholdRulePropertyDependentInstanceDescription { get; }
    internal static string ThresholdRulePropertyDependentInstanceName { get; }
    internal static string ThresholdRulePropertyDependentMachineDescription { get; }
    internal static string ThresholdRulePropertyDependentMachineName { get; }
    internal static string ThresholdRulePropertyWarningThresholdDescription { get; }
    internal static string ThresholdRulePropertyWarningThresholdName { get; }
    internal static string TimeFormat { get; }
    internal static string TimeFormatDescription { get; }
    internal static string TitleContextParameter { get; }
    internal static string TitleContextParameterDescription { get; }
    internal static string URLPatternString { get; }
    internal static string URLPatternStringDescription { get; }
    internal static string URLTerminators { get; }
    internal static string URLTerminatorsDescription { get; }
    internal static string UseCurrentTimeDescription { get; }
    internal static string UseCurrentTimeName { get; }
    internal static string UseDefaultValue { get; }
    internal static string UseDefaultValueDescription { get; }
    internal static string UseLocalTimeDescription { get; }
    internal static string UseLocalTimeName { get; }
    internal static string UseRegularExpression { get; }
    internal static string UseRegularExpressionDescription { get; }
    internal static string ValidateFormFieldIncorrectValue { get; }
    internal static string ValidateResponseUrlCouldNotBeParsed { get; }
    internal static string ValidateResponseUrlNotEqual { get; }
    internal static string ValidateResponseUrlNotSet { get; }
    internal static string ValidateResponseUrlRequestCouldNotBeParsed { get; }
    internal static string ValidationErrorInnerTextNotFound { get; }
    internal static string ValidationErrorSelectedOptionNotFound { get; }
    internal static string ValidationRuleDescriptionAttributeValue { get; }
    internal static string ValidationRuleDescriptionFindText { get; }
    internal static string ValidationRuleDescriptionFormField { get; }
    internal static string ValidationRuleDescriptionRequestTime { get; }
    internal static string ValidationRuleDescriptionRequiredTag { get; }
    internal static string ValidationRuleDescriptionResponseTimeGoal { get; }
    internal static string ValidationRuleDescriptionResponseUrl { get; }
    internal static string ValidationRuleDescriptionSelectTag { get; }
    internal static string ValidationRuleDescriptionSPFindText2 { get; }
    internal static string ValidationRuleDescriptionSPResponseURL2 { get; }
    internal static string ValidationRuleDescriptionTagInnerText { get; }
    internal static string ValidationRuleNameAttributeValue { get; }
    internal static string ValidationRuleNameFindText { get; }
    internal static string ValidationRuleNameFormField { get; }
    internal static string ValidationRuleNameRequestTime { get; }
    internal static string ValidationRuleNameRequiredTag { get; }
    internal static string ValidationRuleNameResponseTimeGoal { get; }
    internal static string ValidationRuleNameResponseUrl { get; }
    internal static string ValidationRuleNameSelectTag { get; }
    internal static string ValidationRuleNameSPFindText2 { get; }
    internal static string ValidationRuleNameSPResponseURL2 { get; }
    internal static string ValidationRuleNameTagInnerText { get; }
    internal static string ValidationRuleRequestTimeError { get; }
    internal static string ValidationRuleRequiredAttributeValueError { get; }
    internal static string ValidationRuleRequiredTagError { get; }
    internal static string ValidationRuleResponseTimeGoalError { get; }
    internal static string ValidationRuleTextFoundError { get; }
    internal static string ValidationRuleTextNotFoundError { get; }
    internal static string ValidationRuleType { get; }
    internal static string ValidationStringRuleDisabled { get; }
    internal static string WebPartTitleFilter { get; }
    internal static string WebPartTitleFilterDescription { get; }
    internal static string WebTestCannotBeOpened { get; }
    internal static string WebTestErrorTypeConditionalRuleError { get; }
    internal static string WebTestErrorTypeDataCollectionError { get; }
    internal static string WebTestErrorTypeDataCollectionWarning { get; }
    internal static string WebTestErrorTypeException { get; }
    internal static string WebTestErrorTypeExtractionRuleError { get; }
    internal static string WebTestErrorTypeHttpError { get; }
    internal static string WebTestErrorTypeTestError { get; }
    internal static string WebTestErrorTypeTimeout { get; }
    internal static string WebTestErrorTypeValidationRuleError { get; }
    internal static string WebTestFileCreatedByLaterRelease { get; }
    internal static string WebTestRequestOutcomeNotSettable { get; }
    internal static string WebTestResultDetailsDeserializationError { get; }
    internal static string WebTestResultDetailsSerializationError { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddDaysDescription();
    internal static string get_AddDaysName();
    internal static string get_AddHoursDescripton();
    internal static string get_AddHoursName();
    internal static string get_AddMillisecondsDescription();
    internal static string get_AddMillisecondsName();
    internal static string get_AddMinutesDescription();
    internal static string get_AddMinutesName();
    internal static string get_AddMonthsDescripon();
    internal static string get_AddMonthsName();
    internal static string get_AddSecondsDescription();
    internal static string get_AddSecondsName();
    internal static string get_AddYearsDescripton();
    internal static string get_AddYearsName();
    internal static string get_AudienceUriName();
    internal static string get_AudieneUriDescription();
    internal static string get_BoundsEndsWith();
    internal static string get_BoundsEndsWithDescription();
    internal static string get_BoundsStartsWith();
    internal static string get_BoundsStartsWithDescription();
    internal static string get_CategoryComments();
    internal static string get_CategoryContextParameters();
    internal static string get_CategoryConversions();
    internal static string get_CategoryDefaults();
    internal static string get_CategoryErrorRequest();
    internal static string get_CategoryFilters();
    internal static string get_CategoryOptions();
    internal static string get_CategoryStopTest();
    internal static string get_CertificatePasswordDescription();
    internal static string get_CertificatePasswordName();
    internal static string get_CheckFormPostValuesDescription();
    internal static string get_CheckFormPostValuesName();
    internal static string get_CheckQueryStringValuesDescription();
    internal static string get_CheckQueryStringValuesName();
    internal static string get_CheckStringBodyValuesDescription();
    internal static string get_CheckStringBodyValuesName();
    internal static string get_ClientCertificateDescription();
    internal static string get_ClientCertificateName();
    internal static string get_ConditionalRuleDescriptionContextParameterExistence();
    internal static string get_ConditionalRuleDescriptionCookieComparison();
    internal static string get_ConditionalRuleDescriptionCookieExistence();
    internal static string get_ConditionalRuleDescriptionCountingLoop();
    internal static string get_ConditionalRuleDescriptionForLoopRule();
    internal static string get_ConditionalRuleDescriptionLastRequestOutcome();
    internal static string get_ConditionalRuleDescriptionLastResponseCode();
    internal static string get_ConditionalRuleDescriptionNumericalComparisonRule();
    internal static string get_ConditionalRuleDescriptionProbabilityRule();
    internal static string get_ConditionalRuleDescriptionStringComparisonRule();
    internal static string get_ConditionalRuleExceptionInCheck();
    internal static string get_ConditionalRuleExceptionInCleanUp();
    internal static string get_ConditionalRuleExceptionIncorrectAssociation();
    internal static string get_ConditionalRuleExceptionInInitialize();
    internal static string get_ConditionalRuleExceptionNoRuleFound();
    internal static string get_ConditionalRuleExceptionWhileBinding();
    internal static string get_ConditionalRuleNameContextParameterExistence();
    internal static string get_ConditionalRuleNameCookieComparison();
    internal static string get_ConditionalRuleNameCookieExistence();
    internal static string get_ConditionalRuleNameCountingLoop();
    internal static string get_ConditionalRuleNameForLoopRule();
    internal static string get_ConditionalRuleNameLastRequestOutcome();
    internal static string get_ConditionalRuleNameLastResponseCode();
    internal static string get_ConditionalRuleNameNumericalComparisonRule();
    internal static string get_ConditionalRuleNameProbabilityRule();
    internal static string get_ConditionalRuleNameStringComparisonRule();
    internal static string get_ConditionalRuleType();
    internal static string get_ConditionMet();
    internal static string get_ConditionNotMet();
    internal static string get_ConnectionFailedWebTestExceptionMessage();
    internal static string get_ContentTypeID();
    internal static string get_ContentTypeIdContextParameter();
    internal static string get_ContentTypeIdContextParameterDescription();
    internal static string get_ContentTypeIDDescription();
    internal static string get_ContextParameterApplyBeforeRequestDescritpion();
    internal static string get_ContextParameterApplyBeforeRequestName();
    internal static string get_ContextParameterBase64DecodeDescription();
    internal static string get_ContextParameterBase64DecodeName();
    internal static string get_ContextParameterBase64EncodeDescription();
    internal static string get_ContextParameterBase64EncodeName();
    internal static string get_ContextParameterDescription();
    internal static string get_ContextParameterHtmlDecodeDescription();
    internal static string get_ContextParameterHtmlDecodeName();
    internal static string get_ContextParameterHtmlEncodeDescription();
    internal static string get_ContextParameterHtmlEncodeName();
    internal static string get_ContextParameterName();
    internal static string get_ContextParameterNameCategoryReplace();
    internal static string get_ContextParameterNameCategoryTransform();
    internal static string get_ContextParameterNotFoundExceptionMessage();
    internal static string get_ContextParameterPatternDescription();
    internal static string get_ContextParameterPatternName();
    internal static string get_ContextParameterReplaceDescription();
    internal static string get_ContextParameterReplaceName();
    internal static string get_ContextParameterReplaceWithDescription();
    internal static string get_ContextParameterReplaceWithName();
    internal static string get_ContextParameterUrlDecodeDescription();
    internal static string get_ContextParameterUrlDecodeName();
    internal static string get_ContextParameterUrlEncodeDescription();
    internal static string get_ContextParameterUrlEncodeName();
    internal static string get_ContextParameterUseRegexDescription();
    internal static string get_ContextParameterUseRegexName();
    internal static string get_ContextParameterValueDescription();
    internal static string get_ContextParameterValueName();
    internal static string get_CreateClassExceptionMessage();
    internal static string get_CreateRuleExceptionMessage();
    internal static string get_DataSourceAlreadyExists();
    internal static string get_DataSourceNotFound();
    internal static string get_DataSourceTableNotFound();
    internal static string get_DateFormat();
    internal static string get_DateFormatDescription();
    internal static string get_DateTimePluginDescription();
    internal static string get_DateTimePluginName();
    internal static string get_DecodeHtmlDescription();
    internal static string get_DecodeUnicodeEscapeSequences();
    internal static string get_DecodeUnicodeEscapeSequencesDescription();
    internal static string get_DecodeUrlDescription();
    internal static string get_DefaultValue();
    internal static string get_DefaultValueDescription();
    internal static string get_DefaultValueLoopCounter();
    internal static string get_DisableString();
    internal static string get_DisableStringDescription();
    internal static string get_DisplayFormatContextParameter();
    internal static string get_DisplayFormatContextParameterDescription();
    internal static string get_DocumentFilter();
    internal static string get_DocumentFilterDescription();
    internal static string get_Enabled();
    internal static string get_EnabledDescription();
    internal static string get_ErrorCookieNotFound();
    internal static string get_ErrorCPContentNotANumber();
    internal static string get_ErrorExceededLoopMaxIterations();
    internal static string get_ErrorInvalidPercentageValues();
    internal static string get_ErrorLastResponseNotFound();
    internal static string get_ErrorResponseNotHtmlForExtractionRules();
    internal static string get_ErrorResponseNotHtmlForValidationRules();
    internal static string get_ErrorUnableToGetStringRepresentaion();
    internal static string get_EventEndDateContextParameter();
    internal static string get_EventEndDateContextParameterDescription();
    internal static string get_EventEndTimeContextParameter();
    internal static string get_EventEndTimeContextParameterDescription();
    internal static string get_EventStartDateContextParameter();
    internal static string get_EventStartDateContextParameterDescription();
    internal static string get_EventStartTimeContextParameter();
    internal static string get_EventStartTimeContextParameterDescription();
    internal static string get_EventTitleContextParameter();
    internal static string get_EventTitleContextParameterDescription();
    internal static string get_ExtractAttributeValueError();
    internal static string get_ExtractFormFieldNotFound();
    internal static string get_ExtractHttpHeaderError();
    internal static string get_ExtractHttpHeaderErrorIndexNotFound();
    internal static string get_ExtractionErrorSelectTagNotFound();
    internal static string get_ExtractionErrorTagNotFound();
    internal static string get_ExtractionRuleDescriptionAttributeValue();
    internal static string get_ExtractionRuleDescriptionFindWorkflowInstances();
    internal static string get_ExtractionRuleDescriptionFormField();
    internal static string get_ExtractionRuleDescriptionHiddenFields();
    internal static string get_ExtractionRuleDescriptionHttpHeader();
    internal static string get_ExtractionRuleDescriptionRegularExpression();
    internal static string get_ExtractionRuleDescriptionSelectTag();
    internal static string get_ExtractionRuleDescriptionSP2010FindCalendarDates();
    internal static string get_ExtractionRuleDescriptionSP2010FindCalendarItems();
    internal static string get_ExtractionRuleDescriptionSP2010FindDocumentItems();
    internal static string get_ExtractionRuleDescriptionSP2010FindListItems();
    internal static string get_ExtractionRuleDescriptionSP2010FindListItemsHrefs();
    internal static string get_ExtractionRuleDescriptionSPExtractGUIDFromField();
    internal static string get_ExtractionRuleDescriptionSPExtractSelectFormField();
    internal static string get_ExtractionRuleDescriptionSPExtractViaKeyString();
    internal static string get_ExtractionRuleDescriptionSPFindHrefs();
    internal static string get_ExtractionRuleDescriptionSPFormField2();
    internal static string get_ExtractionRuleDescriptionSPListViewWebPartScriptValue();
    internal static string get_ExtractionRuleDescriptionTagInnerText();
    internal static string get_ExtractionRuleDescriptionText();
    internal static string get_ExtractionRuleExtractTextIndexLessThanZero();
    internal static string get_ExtractionRuleNameAttributeValue();
    internal static string get_ExtractionRuleNameFindWorkflowInstances();
    internal static string get_ExtractionRuleNameFormField();
    internal static string get_ExtractionRuleNameHiddenFields();
    internal static string get_ExtractionRuleNameHttpHeader();
    internal static string get_ExtractionRuleNameRegularExpression();
    internal static string get_ExtractionRuleNameSelectTag();
    internal static string get_ExtractionRuleNameSP2010FindCalendarDates();
    internal static string get_ExtractionRuleNameSP2010FindCalendarItems();
    internal static string get_ExtractionRuleNameSP2010FindDocumentItems();
    internal static string get_ExtractionRuleNameSP2010FindListItems();
    internal static string get_ExtractionRuleNameSP2010FindListItemsHrefs();
    internal static string get_ExtractionRuleNameSPExtractGUIDFormField();
    internal static string get_ExtractionRuleNameSPExtractSelectFormField();
    internal static string get_ExtractionRuleNameSPExtractViaKeyString();
    internal static string get_ExtractionRuleNameSPFindHrefs();
    internal static string get_ExtractionRuleNameSPFormField2();
    internal static string get_ExtractionRuleNameSPGuids();
    internal static string get_ExtractionRuleNameSPListViewWebPartScriptValue();
    internal static string get_ExtractionRuleNameTagInnerText();
    internal static string get_ExtractionRuleNameText();
    internal static string get_ExtractionRuleSPGuidsDescription();
    internal static string get_ExtractionRuleType();
    internal static string get_ExtractTextEndsWithNotFound();
    internal static string get_ExtractTextStartsWithNotFound();
    internal static string get_Failed();
    internal static string get_FormFieldName();
    internal static string get_FormFieldNameDescription();
    internal static string get_FormFieldType();
    internal static string get_FormFieldTypeDescription();
    internal static string get_GenerateGuidDescription();
    internal static string get_GenerateGuidName();
    internal static string get_GenerateGuidOutputFormatDescription();
    internal static string get_GenericGUIDFormat();
    internal static string get_GenericGUIDFormatDescription();
    internal static string get_GUIDFormFieldName();
    internal static string get_GUIDFormFieldNameDescription();
    internal static string get_HrefContextParameter();
    internal static string get_HrefContextParameterDescription();
    internal static string get_HtmlParseException();
    internal static string get_InputDateTimeDescription();
    internal static string get_InputDateTimeName();
    internal static string get_InvalidRegexPattern();
    internal static string get_InvalidXMLForXPath();
    internal static string get_ItemEndDateTimeFilter();
    internal static string get_ItemEndDateTimeFilterDescription();
    internal static string get_ItemIDContextParameter();
    internal static string get_ItemIDContextParameterDescription();
    internal static string get_ItemNumber();
    internal static string get_ItemNumberDescription();
    internal static string get_ItemStartDateTimeFilter();
    internal static string get_ItemStartDateTimeFilterDescription();
    internal static string get_ItemTitleFilter();
    internal static string get_ItemTitleFilterDescription();
    internal static string get_KeyString();
    internal static string get_KeyStringDescription();
    internal static string get_ListId();
    internal static string get_ListIdContextParameter();
    internal static string get_ListIdContextParameterDescription();
    internal static string get_ListIdDescription();
    internal static string get_ListTitle();
    internal static string get_ListTitleDescription();
    internal static string get_MatchCase();
    internal static string get_MatchCaseDescription();
    internal static string get_MaxValueDescription();
    internal static string get_MaxValueName();
    internal static string get_MinValueDescription();
    internal static string get_MinValueName();
    internal static string get_MissingValueasEmptyString();
    internal static string get_MissingValueasEmptyStringDescription();
    internal static string get_NameIdentifierDescription();
    internal static string get_NameIdentifierName();
    internal static string get_NoHiddenFieldsFound();
    internal static string get_NotAfterTimeSpanDescription();
    internal static string get_NotAfterTimeSpanName();
    internal static string get_NotBeforeTimeSpanDescription();
    internal static string get_NotBeforeTimeSpanName();
    internal static string get_NumericalComparisonOperatorEquality();
    internal static string get_NumericalComparisonOperatorGreaterThan();
    internal static string get_NumericalComparisonOperatorGreaterThanOrEqual();
    internal static string get_NumericalComparisonOperatorInequality();
    internal static string get_NumericalComparisonOperatorLessThan();
    internal static string get_NumericalComparisonOperatorLessThanOrEqual();
    internal static string get_OutcomeFail();
    internal static string get_OutcomePass();
    internal static string get_OutputFormatDescription();
    internal static string get_OutputFormatName();
    internal static string get_OutputJsonDateTimeDescription();
    internal static string get_OutputJsonDateTimeName();
    internal static string get_PageType();
    internal static string get_PageTypeContextParameter();
    internal static string get_PageTypeContextParameterDescription();
    internal static string get_PageTypeDescription();
    internal static string get_PartialMatch();
    internal static string get_PartialMatchDescription();
    internal static string get_Passed();
    internal static string get_ProcessOnlyNestedContextParametersDescription();
    internal static string get_ProcessOnlyNestedContextParametersName();
    internal static string get_PropertyDescriptionAttributeName();
    internal static string get_PropertyDescriptionAttributeValue();
    internal static string get_PropertyDescriptionCheckForCookieExistence();
    internal static string get_PropertyDescriptionCheckForParameterExistence();
    internal static string get_PropertyDescriptionClosingTag();
    internal static string get_PropertyDescriptionCollapseExtraWhiteSpace();
    internal static string get_PropertyDescriptionComparisonOperator();
    internal static string get_PropertyDescriptionComparisonValue();
    internal static string get_PropertyDescriptionContextParameterName();
    internal static string get_PropertyDescriptionContextParameterNameToFind();
    internal static string get_PropertyDescriptionCookieComparisonIgnoreCase();
    internal static string get_PropertyDescriptionCookieComparisonUseRegularExpression();
    internal static string get_PropertyDescriptionCookieDomainName();
    internal static string get_PropertyDescriptionCookieNameToFind();
    internal static string get_PropertyDescriptionCookiePath();
    internal static string get_PropertyDescriptionCookieValue();
    internal static string get_PropertyDescriptionCountingContextParamName();
    internal static string get_PropertyDescriptionEndsWith();
    internal static string get_PropertyDescriptionExpectedInnerText();
    internal static string get_PropertyDescriptionExpectedSelectedValue();
    internal static string get_PropertyDescriptionExpectedValue();
    internal static string get_PropertyDescriptionExtractRandomMatch();
    internal static string get_PropertyDescriptionExtractRequired();
    internal static string get_PropertyDescriptionFindText();
    internal static string get_PropertyDescriptionFormFieldName();
    internal static string get_PropertyDescriptionHeader();
    internal static string get_PropertyDescriptionHtmlDecode();
    internal static string get_PropertyDescriptionHtmlTagName();
    internal static string get_PropertyDescriptionIgnoreCase();
    internal static string get_PropertyDescriptionIgnoreCaseForInnerText();
    internal static string get_PropertyDescriptionIncrementValue();
    internal static string get_PropertyDescriptionIndex();
    internal static string get_PropertyDescriptionIndexForExtractHeader();
    internal static string get_PropertyDescriptionIndexForExtractInnerText();
    internal static string get_PropertyDescriptionIndexForValidateAttribute();
    internal static string get_PropertyDescriptionIndexForValidateInnerText();
    internal static string get_PropertyDescriptionInitialValue();
    internal static string get_PropertyDescriptionMatchAttributeName();
    internal static string get_PropertyDescriptionMatchAttributeValue();
    internal static string get_PropertyDescriptionMaxRequestTime();
    internal static string get_PropertyDescriptionNumIterations();
    internal static string get_PropertyDescriptionPassIfTextFound();
    internal static string get_PropertyDescriptionPercentage();
    internal static string get_PropertyDescriptionProbabilityContextParameterName();
    internal static string get_PropertyDescriptionRegularExpression();
    internal static string get_PropertyDescriptionRemoveInnerTags();
    internal static string get_PropertyDescriptionRequestOutcome();
    internal static string get_PropertyDescriptionResponseCode();
    internal static string get_PropertyDescriptionResponseTimeGoalTolerance();
    internal static string get_PropertyDescriptionSearchAllKeyStrings();
    internal static string get_PropertyDescriptionSearchInHeaders();
    internal static string get_PropertyDescriptionSelectTagName();
    internal static string get_PropertyDescriptionStartsWith();
    internal static string get_PropertyDescriptionStringComparisonIgnoreCase();
    internal static string get_PropertyDescriptionStringComparisonUseRegularExpression();
    internal static string get_PropertyDescriptionTagName();
    internal static string get_PropertyDescriptionTerminatingValue();
    internal static string get_PropertyDescriptionUseGroups();
    internal static string get_PropertyDescriptionUseRegularExpression();
    internal static string get_PropertyDescriptionWebPageUri();
    internal static string get_PropertyDesriptionMinOccurrences();
    internal static string get_PropertyDesriptionRequiredTagName();
    internal static string get_PropertyNameAttributeName();
    internal static string get_PropertyNameAttributeValue();
    internal static string get_PropertyNameCheckForExistence();
    internal static string get_PropertyNameClosingTag();
    internal static string get_PropertyNameCollapseExtraWhiteSpace();
    internal static string get_PropertyNameComparisonOperator();
    internal static string get_PropertyNameComparisonValue();
    internal static string get_PropertyNameContextParameterName();
    internal static string get_PropertyNameCookieDomainName();
    internal static string get_PropertyNameCookieName();
    internal static string get_PropertyNameCookiePath();
    internal static string get_PropertyNameCookieValue();
    internal static string get_PropertyNameEndsWith();
    internal static string get_PropertyNameExpectedInnerText();
    internal static string get_PropertyNameExpectedSelectedValue();
    internal static string get_PropertyNameExpectedValue();
    internal static string get_PropertyNameExtractRandomMatch();
    internal static string get_PropertyNameExtractRequired();
    internal static string get_PropertyNameFindText();
    internal static string get_PropertyNameFormFieldName();
    internal static string get_PropertyNameHeader();
    internal static string get_PropertyNameHtmlDecode();
    internal static string get_PropertyNameHtmlTagName();
    internal static string get_PropertyNameIgnoreCase();
    internal static string get_PropertyNameIgnoreCaseForInnerText();
    internal static string get_PropertyNameIncrementValue();
    internal static string get_PropertyNameIndex();
    internal static string get_PropertyNameInitialValue();
    internal static string get_PropertyNameMatchAttributeName();
    internal static string get_PropertyNameMatchAttributeValue();
    internal static string get_PropertyNameMaxRequestTime();
    internal static string get_PropertyNameMinOccurrences();
    internal static string get_PropertyNameNumIterations();
    internal static string get_PropertyNamePassIfTextFound();
    internal static string get_PropertyNamePercentage();
    internal static string get_PropertyNameRegularExpression();
    internal static string get_PropertyNameRemoveInnerTags();
    internal static string get_PropertyNameRequestOutcome();
    internal static string get_PropertyNameRequiredTagName();
    internal static string get_PropertyNameResponseCode();
    internal static string get_PropertyNameResponseTimeGoalTolerance();
    internal static string get_PropertyNameSearchAllKeyStrings();
    internal static string get_PropertyNameSearchInHeaders();
    internal static string get_PropertyNameSelectTagName();
    internal static string get_PropertyNameStartsWith();
    internal static string get_PropertyNameTagName();
    internal static string get_PropertyNameTerminatingValue();
    internal static string get_PropertyNameUseGroups();
    internal static string get_PropertyNameUseRegularExpression();
    internal static string get_PropertyNameWebPageUri();
    internal static string get_RandomIntGeneratorDescription();
    internal static string get_RandomIntGeneratorName();
    internal static string get_RegularExpressionNotFound();
    internal static string get_Required();
    internal static string get_RequiredDescription();
    internal static string get_ResolveNestedParametersDescription();
    internal static string get_ResolveNestedParametersName();
    internal static string get_ResponseNotHtml();
    internal static string get_ResponseNotHtmlOrPartialRendering();
    internal static string get_ResultsComment();
    internal static string get_ResultsCommentDescription();
    internal static string get_SamlTokenGeneratorDescription();
    internal static string get_SamlTokenGeneratorName();
    internal static string get_SetContextParameterValueDescription();
    internal static string get_SetContextParameterValueName();
    internal static string get_Storeascollection();
    internal static string get_StoreascollectionDescription();
    internal static string get_StringComparisonOperatorEquals();
    internal static string get_StringComparisonOperatorNotEquals();
    internal static string get_StringRepresentationCheckForCookieAbsence();
    internal static string get_StringRepresentationCheckForCookieExistence();
    internal static string get_StringRepresentationCheckForParameterAbsence();
    internal static string get_StringRepresentationCheckForParameterExistence();
    internal static string get_StringRepresentationCookieEqualityComparison();
    internal static string get_StringRepresentationCookieEqualityComparisonWithBinding();
    internal static string get_StringRepresentationCookieInequalityComparison();
    internal static string get_StringRepresentationCookieInequalityComparisonWithBinding();
    internal static string get_StringRepresentationCountingRule();
    internal static string get_StringRepresentationForCondition();
    internal static string get_StringRepresentationForLoop();
    internal static string get_StringRepresentationForLoopRule();
    internal static string get_StringRepresentationLastRequestOutcomeRule();
    internal static string get_StringRepresentationLastResponseCodeRule();
    internal static string get_StringRepresentationNotLastResponseCodeRule();
    internal static string get_StringRepresentationNumericalComparison();
    internal static string get_StringRepresentationProbabilityRule();
    internal static string get_StringRepresentationStringComparisonEquals();
    internal static string get_StringRepresentationStringComparisonEqualsWithBinding();
    internal static string get_StringRepresentationStringComparisonNotEquals();
    internal static string get_StringRepresentationStringComparisonNotEqualsWithBinding();
    internal static string get_StringSeparator();
    internal static string get_StringSeparatorDescription();
    internal static string get_StringSeparatorForResponseUrlValidation();
    internal static string get_SubfieldEnd();
    internal static string get_SubfieldEndDescription();
    internal static string get_SubfieldStart();
    internal static string get_SubfieldStartDesctiption();
    internal static string get_SubStringEndsWith();
    internal static string get_SubStringEndsWithDescription();
    internal static string get_SubStringExtract();
    internal static string get_SubStringExtractDescription();
    internal static string get_SubStringStartsWith();
    internal static string get_SubStringStartsWithDescription();
    internal static string get_TargetContextParameterDescription();
    internal static string get_TargetContextParameterName();
    internal static string get_ThresholdRuleCategoryDependentCounter();
    internal static string get_ThresholdRuleCategoryOptions();
    internal static string get_ThresholdRuleCategoryValues();
    internal static string get_ThresholdRuleCompareCountersCriticalThresholdDescription();
    internal static string get_ThresholdRuleCompareCountersWarningThresholdDescription();
    internal static string get_ThresholdRuleDescriptionCompareConstant();
    internal static string get_ThresholdRuleDescriptionCompareCounters();
    internal static string get_ThresholdRuleNameCompareConstant();
    internal static string get_ThresholdRuleNameCompareCounters();
    internal static string get_ThresholdRulePropertyAlertIfOverDescription();
    internal static string get_ThresholdRulePropertyAlertIfOverName();
    internal static string get_ThresholdRulePropertyCriticalThresholdDescription();
    internal static string get_ThresholdRulePropertyCriticalThresholdName();
    internal static string get_ThresholdRulePropertyDependentCategoryDescription();
    internal static string get_ThresholdRulePropertyDependentCategoryName();
    internal static string get_ThresholdRulePropertyDependentCounterDescription();
    internal static string get_ThresholdRulePropertyDependentCounterName();
    internal static string get_ThresholdRulePropertyDependentInstanceDescription();
    internal static string get_ThresholdRulePropertyDependentInstanceName();
    internal static string get_ThresholdRulePropertyDependentMachineDescription();
    internal static string get_ThresholdRulePropertyDependentMachineName();
    internal static string get_ThresholdRulePropertyWarningThresholdDescription();
    internal static string get_ThresholdRulePropertyWarningThresholdName();
    internal static string get_TimeFormat();
    internal static string get_TimeFormatDescription();
    internal static string get_TitleContextParameter();
    internal static string get_TitleContextParameterDescription();
    internal static string get_URLPatternString();
    internal static string get_URLPatternStringDescription();
    internal static string get_URLTerminators();
    internal static string get_URLTerminatorsDescription();
    internal static string get_UseCurrentTimeDescription();
    internal static string get_UseCurrentTimeName();
    internal static string get_UseDefaultValue();
    internal static string get_UseDefaultValueDescription();
    internal static string get_UseLocalTimeDescription();
    internal static string get_UseLocalTimeName();
    internal static string get_UseRegularExpression();
    internal static string get_UseRegularExpressionDescription();
    internal static string get_ValidateFormFieldIncorrectValue();
    internal static string get_ValidateResponseUrlCouldNotBeParsed();
    internal static string get_ValidateResponseUrlNotEqual();
    internal static string get_ValidateResponseUrlNotSet();
    internal static string get_ValidateResponseUrlRequestCouldNotBeParsed();
    internal static string get_ValidationErrorInnerTextNotFound();
    internal static string get_ValidationErrorSelectedOptionNotFound();
    internal static string get_ValidationRuleDescriptionAttributeValue();
    internal static string get_ValidationRuleDescriptionFindText();
    internal static string get_ValidationRuleDescriptionFormField();
    internal static string get_ValidationRuleDescriptionRequestTime();
    internal static string get_ValidationRuleDescriptionRequiredTag();
    internal static string get_ValidationRuleDescriptionResponseTimeGoal();
    internal static string get_ValidationRuleDescriptionResponseUrl();
    internal static string get_ValidationRuleDescriptionSelectTag();
    internal static string get_ValidationRuleDescriptionSPFindText2();
    internal static string get_ValidationRuleDescriptionSPResponseURL2();
    internal static string get_ValidationRuleDescriptionTagInnerText();
    internal static string get_ValidationRuleNameAttributeValue();
    internal static string get_ValidationRuleNameFindText();
    internal static string get_ValidationRuleNameFormField();
    internal static string get_ValidationRuleNameRequestTime();
    internal static string get_ValidationRuleNameRequiredTag();
    internal static string get_ValidationRuleNameResponseTimeGoal();
    internal static string get_ValidationRuleNameResponseUrl();
    internal static string get_ValidationRuleNameSelectTag();
    internal static string get_ValidationRuleNameSPFindText2();
    internal static string get_ValidationRuleNameSPResponseURL2();
    internal static string get_ValidationRuleNameTagInnerText();
    internal static string get_ValidationRuleRequestTimeError();
    internal static string get_ValidationRuleRequiredAttributeValueError();
    internal static string get_ValidationRuleRequiredTagError();
    internal static string get_ValidationRuleResponseTimeGoalError();
    internal static string get_ValidationRuleTextFoundError();
    internal static string get_ValidationRuleTextNotFoundError();
    internal static string get_ValidationRuleType();
    internal static string get_ValidationStringRuleDisabled();
    internal static string get_WebPartTitleFilter();
    internal static string get_WebPartTitleFilterDescription();
    internal static string get_WebTestCannotBeOpened();
    internal static string get_WebTestErrorTypeConditionalRuleError();
    internal static string get_WebTestErrorTypeDataCollectionError();
    internal static string get_WebTestErrorTypeDataCollectionWarning();
    internal static string get_WebTestErrorTypeException();
    internal static string get_WebTestErrorTypeExtractionRuleError();
    internal static string get_WebTestErrorTypeHttpError();
    internal static string get_WebTestErrorTypeTestError();
    internal static string get_WebTestErrorTypeTimeout();
    internal static string get_WebTestErrorTypeValidationRuleError();
    internal static string get_WebTestFileCreatedByLaterRelease();
    internal static string get_WebTestRequestOutcomeNotSettable();
    internal static string get_WebTestResultDetailsDeserializationError();
    internal static string get_WebTestResultDetailsSerializationError();
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.RuleExecutionOrder : Enum {
    public int value__;
    public static RuleExecutionOrder BeforeDependents;
    public static RuleExecutionOrder AfterDependents;
    public static RuleExecutionOrder BeforeAndAfterDependents;
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ConditionalRuleTypeAttribute : Attribute {
    private ConditionalRuleType m_conditionalRuleType;
    public ConditionalRuleType ConditionalRuleType { get; }
    public ConditionalRuleTypeAttribute(ConditionalRuleType conditionalRuleType);
    public ConditionalRuleType get_ConditionalRuleType();
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameContextParameterExistence")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionContextParameterExistence")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ContextParameterExistenceRule : ConditionalRule {
    private string m_contextParameterName;
    private bool m_checkForExistence;
    [LocalizableDisplayNameAttribute("PropertyNameContextParameterName")]
[LocalizableDescriptionAttribute("PropertyDescriptionContextParameterNameToFind")]
[IsContextParameterNameAttribute("False")]
public string ContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCheckForExistence")]
[LocalizableDescriptionAttribute("PropertyDescriptionCheckForParameterExistence")]
[DefaultValueAttribute("True")]
public bool CheckForExistence { get; public set; }
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    public string get_ContextParameterName();
    public void set_ContextParameterName(string value);
    public bool get_CheckForExistence();
    public void set_CheckForExistence(bool value);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameCookieComparison")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionCookieComparison")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.CookieComparisonRule : ConditionalRule {
    private string m_webpage;
    private string m_cookieName;
    private StringComparisonOperator m_comparisonOperator;
    private string m_cookieValue;
    private bool m_IgnoreCase;
    private bool m_useRegularExpression;
    private string m_cookieDomainName;
    private string m_cookiePath;
    [LocalizableDisplayNameAttribute("PropertyNameWebPageUri")]
[LocalizableDescriptionAttribute("PropertyDescriptionWebPageUri")]
public string Webpage { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCookieName")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookieNameToFind")]
public string CookieName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameComparisonOperator")]
[LocalizableDescriptionAttribute("PropertyDescriptionComparisonOperator")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public StringComparisonOperator ComparisonOperator { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCookieValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookieValue")]
public string CookieValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookieComparisonIgnoreCase")]
[DefaultValueAttribute("True")]
public bool IgnoreCase { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookieComparisonUseRegularExpression")]
[DefaultValueAttribute("False")]
public bool UseRegularExpression { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCookieDomainName")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookieDomainName")]
public string CookieDomainName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCookiePath")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookiePath")]
public string CookiePath { get; public set; }
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    private bool CheckCookieExistence(Cookie cookie);
    private bool CheckCookieValueWithSimpleComparison(string cookieValue);
    private bool CheckCookieValueWithRegularExpression(string cookieValue);
    public string get_Webpage();
    public void set_Webpage(string value);
    public string get_CookieName();
    public void set_CookieName(string value);
    public StringComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(StringComparisonOperator value);
    public string get_CookieValue();
    public void set_CookieValue(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_UseRegularExpression();
    public void set_UseRegularExpression(bool value);
    public string get_CookieDomainName();
    public void set_CookieDomainName(string value);
    public string get_CookiePath();
    public void set_CookiePath(string value);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameCookieExistence")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionCookieExistence")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.CookieExistenceRule : ConditionalRule {
    private string m_webpage;
    private string m_cookieName;
    private bool m_checkForExistence;
    private string m_cookieDomainName;
    private string m_cookiePath;
    [LocalizableDisplayNameAttribute("PropertyNameWebPageUri")]
[LocalizableDescriptionAttribute("PropertyDescriptionWebPageUri")]
public string Webpage { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCookieName")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookieNameToFind")]
public string CookieName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCheckForExistence")]
[LocalizableDescriptionAttribute("PropertyDescriptionCheckForCookieExistence")]
[DefaultValueAttribute("True")]
public bool CheckForExistence { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCookieDomainName")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookieDomainName")]
public string CookieDomainName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCookiePath")]
[LocalizableDescriptionAttribute("PropertyDescriptionCookiePath")]
public string CookiePath { get; public set; }
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    private bool CheckCookieExistence(Cookie cookie);
    public string get_Webpage();
    public void set_Webpage(string value);
    public string get_CookieName();
    public void set_CookieName(string value);
    public bool get_CheckForExistence();
    public void set_CheckForExistence(bool value);
    public string get_CookieDomainName();
    public void set_CookieDomainName(string value);
    public string get_CookiePath();
    public void set_CookiePath(string value);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameCountingLoop")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionCountingLoop")]
[ConditionalRuleTypeAttribute("2")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.CountingLoopRule : ConditionalRule {
    private string m_contextParameterName;
    private double m_iterationsCount;
    [LocalizableDisplayNameAttribute("PropertyNameContextParameterName")]
[LocalizableDescriptionAttribute("PropertyDescriptionCountingContextParamName")]
[LocalizableDefaultValueAttribute("DefaultValueLoopCounter")]
[IsContextParameterNameAttribute("True")]
public string ContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameNumIterations")]
[LocalizableDescriptionAttribute("PropertyDescriptionNumIterations")]
[DefaultValueAttribute("1")]
public double IterationsCount { get; public set; }
    public virtual void Initialize(object sender, ConditionalEventArgs e);
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    public string get_ContextParameterName();
    public void set_ContextParameterName(string value);
    public double get_IterationsCount();
    public void set_IterationsCount(double value);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameAttributeValue")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionAttributeValue")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractAttributeValue : ExtractionRule {
    private string m_tagName;
    private string m_attributeName;
    private string m_matchAttributeName;
    private string m_matchAttributeValue;
    private bool m_htmlDecode;
    private bool m_required;
    private int m_index;
    [LocalizableDisplayNameAttribute("PropertyNameTagName")]
[LocalizableDescriptionAttribute("PropertyDescriptionTagName")]
public string TagName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameAttributeName")]
[LocalizableDescriptionAttribute("PropertyDescriptionAttributeName")]
public string AttributeName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameMatchAttributeName")]
[LocalizableDescriptionAttribute("PropertyDescriptionMatchAttributeName")]
public string MatchAttributeName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameMatchAttributeValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionMatchAttributeValue")]
public string MatchAttributeValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameHtmlDecode")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlDecode")]
[DefaultValueAttribute("True")]
public bool HtmlDecode { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRequired")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRequired")]
[DefaultValueAttribute("True")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndex")]
[DefaultValueAttribute("0")]
public int Index { get; public set; }
    public string get_TagName();
    public void set_TagName(string value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_MatchAttributeName();
    public void set_MatchAttributeName(string value);
    public string get_MatchAttributeValue();
    public void set_MatchAttributeValue(string value);
    public bool get_HtmlDecode();
    public void set_HtmlDecode(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public int get_Index();
    public void set_Index(int value);
    internal static List`1<string> GetAttributeValues(WebTestResponse response, string tagName, string attributeName, string matchAttributeName, string matchAttributeValue, int index);
    public virtual void Extract(object sender, ExtractionEventArgs e);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameFormField")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionFormField")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractFormField : ExtractionRule {
    private string m_name;
    private bool m_htmlDecode;
    private bool m_required;
    private int m_index;
    [LocalizableDisplayNameAttribute("PropertyNameFormFieldName")]
[LocalizableDescriptionAttribute("PropertyDescriptionFormFieldName")]
public string Name { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameHtmlDecode")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlDecode")]
[DefaultValueAttribute("True")]
public bool HtmlDecode { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRequired")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRequired")]
[DefaultValueAttribute("True")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndex")]
[DefaultValueAttribute("0")]
public int Index { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public bool get_HtmlDecode();
    public void set_HtmlDecode(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public int get_Index();
    public void set_Index(int value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    internal static string GetFormFieldValue(WebTestResponse response, string formFieldName, int index);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSPGuids")]
[LocalizableDescriptionAttribute("ExtractionRuleSPGuidsDescription")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractGuids : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    private string m_startsWith;
    private string m_endsWith;
    private bool m_required;
    private int m_index;
    private bool m_useRegularExpression;
    private bool m_ignoreCase;
    private bool m_htmlDecode;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameStartsWith")]
[LocalizableDescriptionAttribute("PropertyDescriptionStartsWith")]
public string StartsWith { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameEndsWith")]
[LocalizableDescriptionAttribute("PropertyDescriptionEndsWith")]
public string EndsWith { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCase")]
[DefaultValueAttribute("False")]
public bool IgnoreCase { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionUseRegularExpression")]
[DefaultValueAttribute("False")]
public bool UseRegularExpression { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRequired")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRequired")]
[DefaultValueAttribute("True")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndex")]
[DefaultValueAttribute("0")]
public int Index { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameHtmlDecode")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlDecode")]
[DefaultValueAttribute("True")]
public bool HtmlDecode { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public string get_StartsWith();
    public void set_StartsWith(string value);
    public string get_EndsWith();
    public void set_EndsWith(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_UseRegularExpression();
    public void set_UseRegularExpression(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public int get_Index();
    public void set_Index(int value);
    public bool get_HtmlDecode();
    public void set_HtmlDecode(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    private bool IsGuid(string guidString);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameHiddenFields")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionHiddenFields")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractHiddenFields : ExtractionRule {
    private static Regex m_hiddenFieldBindingRegex;
    private static string m_defaultGroup;
    private string m_group;
    private bool m_required;
    private bool m_htmlDecode;
    [BrowsableAttribute("False")]
public string ContextParameterName { get; public set; }
    internal static Regex HiddenFieldBindingRegex { get; }
    internal static string HiddenFieldContextParameterPrefix { get; }
    internal static string HiddenFieldContextParameterDelimiter { get; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRequired")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRequired")]
[DefaultValueAttribute("True")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameHtmlDecode")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlDecode")]
[DefaultValueAttribute("True")]
public bool HtmlDecode { get; public set; }
    private static ExtractHiddenFields();
    public virtual string get_ContextParameterName();
    public virtual void set_ContextParameterName(string value);
    internal static Regex get_HiddenFieldBindingRegex();
    internal static string get_HiddenFieldContextParameterPrefix();
    internal static string get_HiddenFieldContextParameterDelimiter();
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_HtmlDecode();
    public void set_HtmlDecode(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    internal static string GetContextVariableNameForHiddenFieldGroup(string hiddenFieldGroupName);
    internal static string GetContextVariableNameForHiddenField(string hiddenFieldGroupName, string hiddenFieldName);
    internal static string RemoveTrailingBraces(string hiddenFieldName);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameHttpHeader")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionHttpHeader")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractHttpHeader : ExtractionRule {
    private string m_header;
    private bool m_required;
    [LocalizableDisplayNameAttribute("PropertyNameHeader")]
[LocalizableDescriptionAttribute("PropertyDescriptionHeader")]
public string Header { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRequired")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRequired")]
[DefaultValueAttribute("True")]
public bool Required { get; public set; }
    public string get_Header();
    public void set_Header(string value);
    public bool get_Required();
    public void set_Required(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameRegularExpression")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionRegularExpression")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractRegularExpression : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <UseGroups>k__BackingField;
    private string m_regularExpression;
    private bool m_required;
    private int m_index;
    private bool m_ignoreCase;
    private string m_result;
    private bool m_htmlDecode;
    [LocalizableDisplayNameAttribute("PropertyNameRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionRegularExpression")]
public string RegularExpression { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCase")]
[DefaultValueAttribute("False")]
public bool IgnoreCase { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRequired")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRequired")]
[DefaultValueAttribute("True")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndex")]
[DefaultValueAttribute("0")]
public int Index { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameHtmlDecode")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlDecode")]
[DefaultValueAttribute("True")]
public bool HtmlDecode { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseGroups")]
[LocalizableDescriptionAttribute("PropertyDescriptionUseGroups")]
[DefaultValueAttribute("False")]
public bool UseGroups { get; public set; }
    internal string Result { get; }
    public string get_RegularExpression();
    public void set_RegularExpression(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public int get_Index();
    public void set_Index(int value);
    public bool get_HtmlDecode();
    public void set_HtmlDecode(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseGroups();
    [CompilerGeneratedAttribute]
public void set_UseGroups(bool value);
    internal bool Extract(string document);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    internal string get_Result();
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameText")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionText")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ExtractText : ExtractionRule {
    private string m_startsWith;
    private string m_endsWith;
    private ISafeRegex m_startsWithRegEx;
    private ISafeRegex m_endsWithRegEx;
    private int m_startSearch;
    private string m_document;
    private bool m_required;
    private bool m_extractRandomMatch;
    private int m_index;
    private bool m_useRegularExpression;
    private bool m_ignoreCase;
    private string m_result;
    private bool m_htmlDecode;
    private bool m_searchHeaders;
    [LocalizableDisplayNameAttribute("PropertyNameStartsWith")]
[LocalizableDescriptionAttribute("PropertyDescriptionStartsWith")]
public string StartsWith { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameEndsWith")]
[LocalizableDescriptionAttribute("PropertyDescriptionEndsWith")]
public string EndsWith { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCase")]
[DefaultValueAttribute("False")]
public bool IgnoreCase { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionUseRegularExpression")]
[DefaultValueAttribute("False")]
public bool UseRegularExpression { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRequired")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRequired")]
[DefaultValueAttribute("True")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExtractRandomMatch")]
[LocalizableDescriptionAttribute("PropertyDescriptionExtractRandomMatch")]
[DefaultValueAttribute("False")]
public bool ExtractRandomMatch { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndex")]
[DefaultValueAttribute("0")]
public int Index { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameHtmlDecode")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlDecode")]
[DefaultValueAttribute("True")]
public bool HtmlDecode { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameSearchInHeaders")]
[LocalizableDescriptionAttribute("PropertyDescriptionSearchInHeaders")]
[DefaultValueAttribute("False")]
public bool SearchInHeaders { get; public set; }
    internal string Result { get; internal set; }
    public string get_StartsWith();
    public void set_StartsWith(string value);
    public string get_EndsWith();
    public void set_EndsWith(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_UseRegularExpression();
    public void set_UseRegularExpression(bool value);
    public bool get_Required();
    public void set_Required(bool value);
    public bool get_ExtractRandomMatch();
    public void set_ExtractRandomMatch(bool value);
    public int get_Index();
    public void set_Index(int value);
    public bool get_HtmlDecode();
    public void set_HtmlDecode(bool value);
    public bool get_SearchInHeaders();
    public void set_SearchInHeaders(bool value);
    internal void Initialize();
    internal SearchResult FindNextMatch(Int32& startIndex, Int32& endIndex);
    internal SearchResult Extract();
    internal SearchResult ExtractRandom();
    internal SearchResult Extract(string document);
    internal SearchResult Extract(string document, Boolean& success);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    internal int FindFirstExtractingIndexAfterDocumentIndex(string document, int documentIndex);
    internal int FindFirstExtractingIndexAfterDocumentIndex(string document, int documentIndex, Int32& endIndex);
    internal string get_Result();
    internal void set_Result(string value);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameForLoopRule")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionForLoopRule")]
[ConditionalRuleTypeAttribute("2")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ForLoopRule : ConditionalRule {
    private string m_contextParameterName;
    private ForLoopComparisonOperator m_comparisonOperator;
    private double m_terminatingValue;
    private double m_initialValue;
    private double m_incrementValue;
    [LocalizableDisplayNameAttribute("PropertyNameContextParameterName")]
[LocalizableDescriptionAttribute("PropertyDescriptionContextParameterName")]
[IsContextParameterNameAttribute("True")]
public string ContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameComparisonOperator")]
[LocalizableDescriptionAttribute("PropertyDescriptionComparisonOperator")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ForLoopComparisonOperator ComparisonOperator { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameTerminatingValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionTerminatingValue")]
public double TerminatingValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameInitialValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionInitialValue")]
public double InitialValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIncrementValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionIncrementValue")]
public double IncrementValue { get; public set; }
    public virtual void Initialize(object sender, ConditionalEventArgs e);
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    public string get_ContextParameterName();
    public void set_ContextParameterName(string value);
    public ForLoopComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(ForLoopComparisonOperator value);
    public double get_TerminatingValue();
    public void set_TerminatingValue(double value);
    public double get_InitialValue();
    public void set_InitialValue(double value);
    public double get_IncrementValue();
    public void set_IncrementValue(double value);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.Rules.Helpers.MOSSGuid : object {
    public static string GUID_STARTSWITH;
    public static string GUID_ENDSWITH;
    public static string GUID2String;
    public static string sRegexGUID;
    public static string sRegexGUID_URLEncoded;
    public static string sRegexSharePointGUID;
    public static string sRegexSharePointGUID_URLEncoded;
    public static Regex _regexGuid;
    public static Regex _regexGuid_URLEncoded;
    public static Regex _regexGenericGuid;
    public static Regex _regexGenericGuid_URLEncoded;
    public static Regex _regexGenericGuid_URLEncoded2;
    public static Regex _regexSharePointGuid;
    public static Regex _regexSharePointGuid2;
    public static Regex _regexSharePointGuidPlain;
    public static Regex _regexSharePointGuidPlain_URLEncoded;
    private static MOSSGuid();
    public static string Replace(string sIn, string sReplaceGUIDWith, Boolean& bDidReplace);
    public static bool Replace(string sIn, string sReplaceGUIDWith, String& sResults);
    public static string Replace(string sIn, string sReplaceGUIDWith);
    public static bool IsListIdGuid(string sIn);
    public static bool IsSharePointGuid(string inputString);
    private static bool IsMatchSuccess(Regex regex, string sIn);
    public static bool IsGuid(string sIn);
    public static bool ReplaceGenericGuid(string sIn, string sReplaceGUIDWith, String& sResults);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.Rules.Helpers.RuleHelpers : object {
    public static void AddResultsComment(WebTest webtest, string sFormat, string sContextParameterName);
    public static void AddResultsComment(string sExtraMessage, WebTest webtest, string sFormat, string sContextParameterName);
    public static void AddResultsComment(string sExtra, WebTest webtest, string sString);
    public static void AddResultsComment(WebTest webtest, string sString);
    public static void CheckContextParameterExist(string sContextParameterName, string resultsLocale);
    public static void CheckParameterExist(string sParameterName, string sTitle, string resultsLocale);
    public static bool CheckIfContextParameterDefinedAndProperType(WebTestContext context, string sContextParameterName, Type typeTarget);
    public static bool HandleExtractionCollectionReturn(StringCollection Collection, WebTestContext context, string sContextParameterName, bool bStoreAsCollection, bool bRequired, int nItemNumber, String& sMessage, Boolean& bRealOutcome);
    public static bool HandleExtractionCollectionReturn(StringCollection Collection, WebTestContext context, string sContextParameterName, bool bStoreAsCollection, bool bRequired, int nItemNumber, String& sMessage);
    public static bool HandleExtractionCollectionReturn(StringCollection Collection, Object& oResult, bool bStoreAsCollection, bool bRequired, int nItemNumber, String& sMessage, Boolean& bRealOutcome, string resultsLocale);
    public static bool HandleExtractionCollectionReturn(int nCollectionCount, bool bStoreAsCollection, int nItemNumber, string locale, Int32& nItemSelectedIndex, String& sMessage);
    public static int IndexOfQueryString(QueryStringParameterCollection queryStrings, string sKey);
    public static int IndexOfQueryString(QueryStringParameterCollection queryStrings, String[] asKeys);
    public static string GetQueryStringValue(QueryStringParameterCollection queryStrings, string sKey);
    public static int IndexOfFormPostParameter(IHttpBody body, string sKey);
    public static int IndexOfFormPostParameter(IHttpBody body, String[] asKeys);
    public static int IndexOfFormPostParameter(FormPostParameterCollection formPostParameters, string sKey);
    public static int IndexOfFormPostParameter(FormPostParameterCollection formPostParameter, String[] asKeys);
    public static string GetFormPostParameterValue(FormPostParameterCollection formPostParameter, string sKey);
    public static int CheckIfExtractionRuleExist(ExtractionRuleReferenceCollection rules, ExtractionRuleReference rule);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.Rules.Helpers.StringHelper : object {
    private static int maxReplacementsAllowed;
    public static string LEFTBOUNDS;
    public static string RIGHTBOUNDS;
    private static Regex regexContainsNestedContextParameter;
    public static Regex regexContainsNestedContextParameter2;
    private static StringHelper();
    public static int ExtractStringValue(int nStartingPosition, string sString, string sStartsWith, string sEndsWith, bool bMatchCase, bool bFindEndsWithFirst, bool bSearchBackwards, String& sValue, string locale);
    public static int ExtractStringValue(int nStartingPosition, string sString, string sStartsWith, string sEndsWith, bool bMatchCase, String& sValue, string locale);
    public static int FindStringValue(int nStartingPosition, string sString, string sStartsWith, string sEndsWith, bool bMatchCase, Int32& nStart, Int32& nEnd, string locale, bool useRegex);
    public static int FindStringValue(int nStartingPosition, string sString, string sStartsWith, string sEndsWith, bool bMatchCase, bool bFindEndsWithFirst, bool bSearchBackwards, Int32& nStart, Int32& nEnd, String& sMsg, string resultsLocale, bool useRegex);
    public static bool TestFindStringValue();
    public static int Replace(String& sbText, string sFind, string sReplace);
    public static bool Replace(String& sOriginal, string sFind, string sReplace, bool bIgnoreCase, Regex regEx);
    public static string ReplaceEx(string sOriginal, string sFind, string sReplace, bool bIgnoreCase);
    public static string SubstArgs(string sIn, WebTestContext context);
    public static string SubstArgs2(string sIn, WebTestContext context);
    public static string FixUpArg(string s);
    public static string DecodeUnicodeEscapeSequences(string s);
    public static bool FindBoundingArea(int nStartingPosition, string sBody, string sLeftBound, string sRightBound, Int32& nLeftBound, Int32& nRightBound, String& sMessage, string locale, bool useRegex, bool matchCase);
    public static int FindStringPositionInsideBoundedAreaThatContainsKeyString(int nStartingPosition, string sBody, string sKeyString, string sLeftBound, string sRightBound, string sSubFieldStart, string sSubFieldEnd, Int32& nValueStart, Int32& nValueEnd, String& sMessage, string resultsLocale, bool useRegex, bool matchCase, bool searchAllKeyStrings);
    public static int FindStringPositionInsideBoundedAreaThatContainsKeyString(int nStartingPosition, string sBody, string sKeyString, string sLeftBound, string sRightBound, string sSubFieldStart, string sSubFieldEnd, Int32& nValueStart, Int32& nValueEnd, String& sMessage, Int32& nKeyPosition, string resultsLocale, bool useRegex, bool matchCase);
    public static string URLEncode2(string sInput);
    public static bool IsNullOrWhiteSpace(string value);
    public static string HtmlEncode(string value);
    internal static string GetMatchFromString(string source, string regexPattern);
    public static bool ContainsNestedContextParameter(string str);
    public static string LocateUnicodeEscapedSubString(string targetString, string subString);
}
[AttributeUsageAttribute("128")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.IsContextParameterNameAttribute : Attribute {
    private bool m_isAddedContextParameter;
    public bool IsAddedContextParameter { get; }
    public IsContextParameterNameAttribute(bool isAddedContextParameter);
    public bool get_IsAddedContextParameter();
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameLastRequestOutcome")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionLastRequestOutcome")]
[ConditionalRuleTypeAttribute("1")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.LastRequestOutcomeRule : ConditionalRule {
    private Outcome m_requestOutcome;
    [LocalizableDisplayNameAttribute("PropertyNameRequestOutcome")]
[LocalizableDescriptionAttribute("PropertyDescriptionRequestOutcome")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Outcome RequestOutcome { get; public set; }
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    public Outcome get_RequestOutcome();
    public void set_RequestOutcome(Outcome value);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameLastResponseCode")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionLastResponseCode")]
[ConditionalRuleTypeAttribute("1")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.LastResponseCodeRule : ConditionalRule {
    private StringComparisonOperator m_comparisonOperator;
    private WebTestResponseCode m_responseCode;
    [LocalizableDisplayNameAttribute("PropertyNameComparisonOperator")]
[LocalizableDescriptionAttribute("PropertyDescriptionComparisonOperator")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public StringComparisonOperator ComparisonOperator { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameResponseCode")]
[LocalizableDescriptionAttribute("PropertyDescriptionResponseCode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public WebTestResponseCode ResponseCode { get; public set; }
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    public StringComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(StringComparisonOperator value);
    public WebTestResponseCode get_ResponseCode();
    public void set_ResponseCode(WebTestResponseCode value);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameNumericalComparisonRule")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionNumericalComparisonRule")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.NumericalComparisonRule : ConditionalRule {
    private string m_contextParameterName;
    private NumericalComparisonOperator m_comparisonOperator;
    private double m_value;
    [LocalizableDisplayNameAttribute("PropertyNameContextParameterName")]
[LocalizableDescriptionAttribute("PropertyDescriptionContextParameterName")]
[IsContextParameterNameAttribute("False")]
public string ContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameComparisonOperator")]
[LocalizableDescriptionAttribute("PropertyDescriptionComparisonOperator")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NumericalComparisonOperator ComparisonOperator { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameComparisonValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionComparisonValue")]
public double Value { get; public set; }
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    public string get_ContextParameterName();
    public void set_ContextParameterName(string value);
    public NumericalComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(NumericalComparisonOperator value);
    public double get_Value();
    public void set_Value(double value);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameProbabilityRule")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionProbabilityRule")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ProbabilityRule : ConditionalRule {
    private string m_contextParameterName;
    private double m_percentage;
    private static Random s_random;
    [LocalizableDisplayNameAttribute("PropertyNameContextParameterName")]
[LocalizableDescriptionAttribute("PropertyDescriptionProbabilityContextParameterName")]
[IsContextParameterNameAttribute("True")]
public string ContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNamePercentage")]
[LocalizableDescriptionAttribute("PropertyDescriptionPercentage")]
public double Percentage { get; public set; }
    private static ProbabilityRule();
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    public string get_ContextParameterName();
    public void set_ContextParameterName(string value);
    public double get_Percentage();
    public void set_Percentage(double value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.RuleExecutionOrderAttribute : Attribute {
    private RuleExecutionOrder m_RuleExecutionOrder;
    public RuleExecutionOrder ExecutionOrder { get; }
    public RuleExecutionOrderAttribute(RuleExecutionOrder executionOrder);
    public RuleExecutionOrder get_ExecutionOrder();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.RuleResult : object {
    private bool m_success;
    private string m_message;
    private string m_ruleType;
    private PropertyCollection m_ruleProperties;
    private string m_ruleName;
    private Exception m_exception;
    public bool Success { get; internal set; }
    public string Message { get; internal set; }
    public string RuleType { get; internal set; }
    public PropertyCollection RuleProperties { get; internal set; }
    public string Name { get; internal set; }
    public Exception Exception { get; internal set; }
    internal bool IsConditionalRule { get; }
    internal RuleResult(RuleResult copy);
    public bool get_Success();
    internal void set_Success(bool value);
    public string get_Message();
    internal void set_Message(string value);
    public string get_RuleType();
    internal void set_RuleType(string value);
    public PropertyCollection get_RuleProperties();
    internal void set_RuleProperties(PropertyCollection value);
    public string get_Name();
    internal void set_Name(string value);
    public Exception get_Exception();
    internal void set_Exception(Exception value);
    internal bool get_IsConditionalRule();
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSPFormField2")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSPFormField2")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointExtractFormField2 : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormFieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormFieldType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecodeUnicodeEscapeSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MissingValueAsEmptyString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    public string ResultsCommentFormatString;
    [CompilerGeneratedAttribute]
private bool <SubstringExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringStartsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringEndsWith>k__BackingField;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("FormFieldName")]
[LocalizableDescriptionAttribute("FormFieldNameDescription")]
[DefaultValueAttribute("")]
public string FormFieldName { get; public set; }
    [LocalizableDisplayNameAttribute("FormFieldType")]
[LocalizableDescriptionAttribute("FormFieldTypeDescription")]
[DefaultValueAttribute("")]
public string FormFieldType { get; public set; }
    [LocalizableDisplayNameAttribute("MatchCase")]
[LocalizableDescriptionAttribute("MatchCaseDescription")]
[DefaultValueAttribute("False")]
public bool MatchCase { get; public set; }
    [LocalizableDisplayNameAttribute("UseRegularExpression")]
[LocalizableDescriptionAttribute("UseRegularExpressionDescription")]
[DefaultValueAttribute("False")]
public bool UseRegEx { get; public set; }
    [LocalizableDisplayNameAttribute("DecodeUnicodeEscapeSequences")]
[LocalizableDescriptionAttribute("DecodeUnicodeEscapeSequencesDescription")]
[LocalizableCategoryAttribute("CategoryConversions")]
[DefaultValueAttribute("False")]
public bool DecodeUnicodeEscapeSequences { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("MissingValueasEmptyString")]
[LocalizableDescriptionAttribute("MissingValueasEmptyStringDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool MissingValueAsEmptyString { get; public set; }
    [LocalizableDisplayNameAttribute("Storeascollection")]
[LocalizableDescriptionAttribute("StoreascollectionDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("False")]
public bool AddCommentToResults { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringExtract")]
[LocalizableDescriptionAttribute("SubStringExtractDescription")]
[DefaultValueAttribute("False")]
public bool SubstringExtract { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringStartsWith")]
[LocalizableDescriptionAttribute("SubStringStartsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringStartsWith { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringEndsWith")]
[LocalizableDescriptionAttribute("SubStringEndsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringEndsWith { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_FormFieldName();
    [CompilerGeneratedAttribute]
public void set_FormFieldName(string value);
    [CompilerGeneratedAttribute]
public string get_FormFieldType();
    [CompilerGeneratedAttribute]
public void set_FormFieldType(string value);
    [CompilerGeneratedAttribute]
public bool get_MatchCase();
    [CompilerGeneratedAttribute]
public void set_MatchCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseRegEx();
    [CompilerGeneratedAttribute]
public void set_UseRegEx(bool value);
    [CompilerGeneratedAttribute]
public bool get_DecodeUnicodeEscapeSequences();
    [CompilerGeneratedAttribute]
public void set_DecodeUnicodeEscapeSequences(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_MissingValueAsEmptyString();
    [CompilerGeneratedAttribute]
public void set_MissingValueAsEmptyString(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    [CompilerGeneratedAttribute]
public bool get_SubstringExtract();
    [CompilerGeneratedAttribute]
public void set_SubstringExtract(bool value);
    [CompilerGeneratedAttribute]
public string get_SubstringStartsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringStartsWith(string value);
    [CompilerGeneratedAttribute]
public string get_SubstringEndsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringEndsWith(string value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& message);
    internal static int GetFormFieldValues(string sFormFieldName, string sFormFieldType, WebTestResponse response, bool bMatchCase, bool bUseRegEx, int nMaxValues, bool bCountNullValues, StringCollection& CollectionValues, bool bDecodeUnicodeEscapeSequences, bool bSubStringExtract, string sSubStringStartsWith, string sSubStringEndsWith, String& message, string resultsLocale);
    public static string GetHtmlTagValue(HtmlTag tagItem, string sName, string sResponseBody, string locale);
    public static string GetSelectItemValue(string sTagName, string sInput, string locale);
    public static string GetTextAreaValue(string sTagName, string sInput, string locale);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSPExtractGUIDFormField")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSPExtractGUIDFromField")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointExtractGUIDFormField : SharePointExtractFormField2 {
    [CompilerGeneratedAttribute]
private string <GuidFormFieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenericGuidFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormFieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubstringExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringStartsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringEndsWith>k__BackingField;
    [LocalizableDisplayNameAttribute("GUIDFormFieldName")]
[LocalizableDescriptionAttribute("GUIDFormFieldNameDescription")]
[DefaultValueAttribute("")]
public string GuidFormFieldName { get; public set; }
    [LocalizableDisplayNameAttribute("GenericGUIDFormat")]
[LocalizableDescriptionAttribute("GenericGUIDFormatDescription")]
[DefaultValueAttribute("False")]
public bool GenericGuidFormat { get; public set; }
    private string FormFieldName { get; private set; }
    private bool MatchCase { get; private set; }
    private bool UseRegEx { get; private set; }
    private bool StoreAsCollection { get; private set; }
    private int ItemNumber { get; private set; }
    private bool SubstringExtract { get; private set; }
    private string SubstringStartsWith { get; private set; }
    private string SubstringEndsWith { get; private set; }
    [CompilerGeneratedAttribute]
public string get_GuidFormFieldName();
    [CompilerGeneratedAttribute]
public void set_GuidFormFieldName(string value);
    [CompilerGeneratedAttribute]
public bool get_GenericGuidFormat();
    [CompilerGeneratedAttribute]
public void set_GenericGuidFormat(bool value);
    [CompilerGeneratedAttribute]
private string get_FormFieldName();
    [CompilerGeneratedAttribute]
private void set_FormFieldName(string value);
    [CompilerGeneratedAttribute]
private bool get_MatchCase();
    [CompilerGeneratedAttribute]
private void set_MatchCase(bool value);
    [CompilerGeneratedAttribute]
private bool get_UseRegEx();
    [CompilerGeneratedAttribute]
private void set_UseRegEx(bool value);
    [CompilerGeneratedAttribute]
private bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
private void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
private int get_ItemNumber();
    [CompilerGeneratedAttribute]
private void set_ItemNumber(int value);
    [CompilerGeneratedAttribute]
private bool get_SubstringExtract();
    [CompilerGeneratedAttribute]
private void set_SubstringExtract(bool value);
    [CompilerGeneratedAttribute]
private string get_SubstringStartsWith();
    [CompilerGeneratedAttribute]
private void set_SubstringStartsWith(string value);
    [CompilerGeneratedAttribute]
private string get_SubstringEndsWith();
    [CompilerGeneratedAttribute]
private void set_SubstringEndsWith(string value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSPListViewWebPartScriptValue")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSPListViewWebPartScriptValue")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointExtractListViewWebPartScriptValues : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubFieldStart>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubFieldEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("ListTitle")]
[LocalizableDescriptionAttribute("ListTitleDescription")]
[DefaultValueAttribute("")]
public string ListTitle { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("SubfieldStart")]
[LocalizableDescriptionAttribute("SubfieldStartDesctiption")]
[DefaultValueAttribute("")]
public string SubFieldStart { get; public set; }
    [LocalizableDisplayNameAttribute("SubfieldEnd")]
[LocalizableDescriptionAttribute("SubfieldEndDescription")]
[DefaultValueAttribute("")]
public string SubFieldEnd { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("False")]
public bool AddCommentToResults { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ListTitle();
    [CompilerGeneratedAttribute]
public void set_ListTitle(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public string get_SubFieldStart();
    [CompilerGeneratedAttribute]
public void set_SubFieldStart(string value);
    [CompilerGeneratedAttribute]
public string get_SubFieldEnd();
    [CompilerGeneratedAttribute]
public void set_SubFieldEnd(string value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& sMessage);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSPExtractSelectFormField")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSPExtractSelectFormField")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointExtractSelectFormField : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FormFieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecodeUnicodeEscapeSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    private string ResultsCommentFormatString;
    [CompilerGeneratedAttribute]
private bool <SubstringExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringStartsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringEndsWith>k__BackingField;
    private static Regex regexOptionsValue;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("FormFieldName")]
[LocalizableDescriptionAttribute("FormFieldNameDescription")]
[DefaultValueAttribute("")]
public string FormFieldName { get; public set; }
    [LocalizableDisplayNameAttribute("MatchCase")]
[LocalizableDescriptionAttribute("MatchCaseDescription")]
[DefaultValueAttribute("False")]
public bool MatchCase { get; public set; }
    [LocalizableDisplayNameAttribute("UseRegularExpression")]
[LocalizableDescriptionAttribute("UseRegularExpressionDescription")]
[DefaultValueAttribute("False")]
public bool UseRegEx { get; public set; }
    [LocalizableDisplayNameAttribute("DecodeUnicodeEscapeSequences")]
[LocalizableDescriptionAttribute("DecodeUnicodeEscapeSequencesDescription")]
[CategoryAttribute("Conversions")]
[DefaultValueAttribute("False")]
public bool DecodeUnicodeEscapeSequences { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("Storeascollection")]
[LocalizableDescriptionAttribute("StoreascollectionDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-99")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("True")]
public bool AddCommentToResults { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringExtract")]
[LocalizableDescriptionAttribute("SubStringExtractDescription")]
[DefaultValueAttribute("False")]
public bool SubstringExtract { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringStartsWith")]
[LocalizableDescriptionAttribute("SubStringStartsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringStartsWith { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringEndsWith")]
[LocalizableDescriptionAttribute("SubStringEndsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringEndsWith { get; public set; }
    private static SharePointExtractSelectFormField();
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_FormFieldName();
    [CompilerGeneratedAttribute]
public void set_FormFieldName(string value);
    [CompilerGeneratedAttribute]
public bool get_MatchCase();
    [CompilerGeneratedAttribute]
public void set_MatchCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseRegEx();
    [CompilerGeneratedAttribute]
public void set_UseRegEx(bool value);
    [CompilerGeneratedAttribute]
public bool get_DecodeUnicodeEscapeSequences();
    [CompilerGeneratedAttribute]
public void set_DecodeUnicodeEscapeSequences(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    [CompilerGeneratedAttribute]
public bool get_SubstringExtract();
    [CompilerGeneratedAttribute]
public void set_SubstringExtract(bool value);
    [CompilerGeneratedAttribute]
public string get_SubstringStartsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringStartsWith(string value);
    [CompilerGeneratedAttribute]
public string get_SubstringEndsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringEndsWith(string value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& message);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSPExtractViaKeyString")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSPExtractViaKeyString")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointExtractViaKeyString : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchCase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoundsStartsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BoundsEndsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringStartsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringEndsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegularExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchAllKeyStrings>k__BackingField;
    private string ResultsCommentFormatString;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("KeyString")]
[LocalizableDescriptionAttribute("KeyStringDescription")]
[DefaultValueAttribute("")]
public string KeyString { get; public set; }
    [LocalizableDisplayNameAttribute("MatchCase")]
[LocalizableDescriptionAttribute("MatchCaseDescription")]
[DefaultValueAttribute("False")]
public bool MatchCase { get; public set; }
    [LocalizableDisplayNameAttribute("BoundsStartsWith")]
[LocalizableDescriptionAttribute("BoundsStartsWithDescription")]
[DefaultValueAttribute("")]
public string BoundsStartsWith { get; public set; }
    [LocalizableDisplayNameAttribute("BoundsEndsWith")]
[LocalizableDescriptionAttribute("BoundsEndsWithDescription")]
[DefaultValueAttribute("")]
public string BoundsEndsWith { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringStartsWith")]
[LocalizableDescriptionAttribute("SubStringStartsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringStartsWith { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringEndsWith")]
[LocalizableDescriptionAttribute("SubStringEndsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringEndsWith { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[CategoryAttribute("Defaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("Storeascollection")]
[LocalizableDescriptionAttribute("StoreascollectionDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("False")]
public bool AddCommentToResults { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionUseRegularExpression")]
[DefaultValueAttribute("False")]
public bool UseRegularExpression { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameSearchAllKeyStrings")]
[LocalizableDescriptionAttribute("PropertyDescriptionSearchAllKeyStrings")]
[DefaultValueAttribute("False")]
public bool SearchAllKeyStrings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_KeyString();
    [CompilerGeneratedAttribute]
public void set_KeyString(string value);
    [CompilerGeneratedAttribute]
public bool get_MatchCase();
    [CompilerGeneratedAttribute]
public void set_MatchCase(bool value);
    [CompilerGeneratedAttribute]
public string get_BoundsStartsWith();
    [CompilerGeneratedAttribute]
public void set_BoundsStartsWith(string value);
    [CompilerGeneratedAttribute]
public string get_BoundsEndsWith();
    [CompilerGeneratedAttribute]
public void set_BoundsEndsWith(string value);
    [CompilerGeneratedAttribute]
public string get_SubstringStartsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringStartsWith(string value);
    [CompilerGeneratedAttribute]
public string get_SubstringEndsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringEndsWith(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseRegularExpression();
    [CompilerGeneratedAttribute]
public void set_UseRegularExpression(bool value);
    [CompilerGeneratedAttribute]
public bool get_SearchAllKeyStrings();
    [CompilerGeneratedAttribute]
public void set_SearchAllKeyStrings(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& message);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSP2010FindCalendarDates")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSP2010FindCalendarDates")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointFindCalendarDates : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    private string _DateFormat;
    [CompilerGeneratedAttribute]
private string <DisplayFormatContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    private string ResultsCommentFormatString;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("Storeascollection")]
[LocalizableDescriptionAttribute("StoreascollectionDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("DateFormat")]
[LocalizableDescriptionAttribute("DateFormatDescription")]
[DefaultValueAttribute("d")]
public string DateFormat { get; public set; }
    [LocalizableDisplayNameAttribute("DisplayFormatContextParameter")]
[LocalizableDescriptionAttribute("DisplayFormatContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string DisplayFormatContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("True")]
public bool AddCommentToResults { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayFormatContextParameter();
    [CompilerGeneratedAttribute]
public void set_DisplayFormatContextParameter(string value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& sMessage);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSP2010FindCalendarItems")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSP2010FindCalendarItems")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointFindCalendarItems : ExtractionRule {
    private DateTime EmptyDateTime;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemTitleFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegEx>k__BackingField;
    public DateTime DtItemStartDateTimeFilter;
    private DateTime _dtItemEndDateTimeFilter;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    private string _DateFormat;
    private string _TimeFormat;
    [CompilerGeneratedAttribute]
private string <EventTitleContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventStartDateContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventStartTimeContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventEndDateContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventEndTimeContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    private string ResultsCommentFormatString;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("ItemTitleFilter")]
[LocalizableDescriptionAttribute("ItemTitleFilterDescription")]
[LocalizableCategoryAttribute("CategoryFilters")]
[DefaultValueAttribute("")]
public string ItemTitleFilter { get; public set; }
    [LocalizableDisplayNameAttribute("UseRegularExpression")]
[LocalizableDescriptionAttribute("UseRegularExpressionDescription")]
[LocalizableCategoryAttribute("CategoryFilters")]
[DefaultValueAttribute("False")]
public bool UseRegEx { get; public set; }
    [LocalizableDisplayNameAttribute("ItemStartDateTimeFilter")]
[LocalizableDescriptionAttribute("ItemStartDateTimeFilterDescription")]
[LocalizableCategoryAttribute("CategoryFilters")]
[DefaultValueAttribute("")]
public string ItemStartDateTimeFilter { get; public set; }
    [LocalizableDisplayNameAttribute("ItemEndDateTimeFilter")]
[LocalizableDescriptionAttribute("ItemEndDateTimeFilterDescription")]
[LocalizableCategoryAttribute("CategoryFilters")]
[DefaultValueAttribute("")]
public string ItemEndDateTimeFilter { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("Storeascollection")]
[LocalizableDescriptionAttribute("StoreascollectionDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("DateFormat")]
[LocalizableDescriptionAttribute("DateFormatDescription")]
[DefaultValueAttribute("d")]
public string DateFormat { get; public set; }
    [LocalizableDisplayNameAttribute("TimeFormat")]
[LocalizableDescriptionAttribute("TimeFormatDescription")]
[DefaultValueAttribute("t")]
public string TimeFormat { get; public set; }
    [LocalizableDisplayNameAttribute("EventTitleContextParameter")]
[LocalizableDescriptionAttribute("EventTitleContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string EventTitleContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("EventStartDateContextParameter")]
[LocalizableDescriptionAttribute("EventStartDateContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string EventStartDateContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("EventStartTimeContextParameter")]
[LocalizableDescriptionAttribute("EventStartTimeContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string EventStartTimeContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("EventEndDateContextParameter")]
[LocalizableDescriptionAttribute("EventEndDateContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string EventEndDateContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("EventEndTimeContextParameter")]
[LocalizableDescriptionAttribute("EventEndTimeContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string EventEndTimeContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("True")]
public bool AddCommentToResults { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ItemTitleFilter();
    [CompilerGeneratedAttribute]
public void set_ItemTitleFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_UseRegEx();
    [CompilerGeneratedAttribute]
public void set_UseRegEx(bool value);
    public string get_ItemStartDateTimeFilter();
    public void set_ItemStartDateTimeFilter(string value);
    public string get_ItemEndDateTimeFilter();
    public void set_ItemEndDateTimeFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    public string get_DateFormat();
    public void set_DateFormat(string value);
    public string get_TimeFormat();
    public void set_TimeFormat(string value);
    [CompilerGeneratedAttribute]
public string get_EventTitleContextParameter();
    [CompilerGeneratedAttribute]
public void set_EventTitleContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_EventStartDateContextParameter();
    [CompilerGeneratedAttribute]
public void set_EventStartDateContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_EventStartTimeContextParameter();
    [CompilerGeneratedAttribute]
public void set_EventStartTimeContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_EventEndDateContextParameter();
    [CompilerGeneratedAttribute]
public void set_EventEndDateContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_EventEndTimeContextParameter();
    [CompilerGeneratedAttribute]
public void set_EventEndTimeContextParameter(string value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    private static void GetDataArray(string inputString, string locale, String[]& stringArray, String[]& dataArray, String& sMessage);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& sMessage);
    private static bool ParseEventItemDataString(String[] StringsArray, string sDataRow, string locale, String& nID, String& sTitle, DateTime& dtStart, DateTime& dtEnd);
    private static string GetStringArrayValue(String[] StringsArray, string sIndex, string locale);
    internal static bool GetMatchingTitleForCalendarItem(WebTestResponse response, string itemId, String& title);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSP2010FindDocumentItems")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSP2010FindDocumentItems")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointFindDocumentItems : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HRefContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    private string ResultsCommentFormatString;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("ListTitle")]
[LocalizableDescriptionAttribute("ListTitleDescription")]
[DefaultValueAttribute("")]
public string ListTitle { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("DocumentFilter")]
[LocalizableDescriptionAttribute("DocumentFilterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryFilters")]
public string DocumentFilter { get; public set; }
    [LocalizableDisplayNameAttribute("Storeascollection")]
[LocalizableDescriptionAttribute("StoreascollectionDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("TitleContextParameter")]
[LocalizableDescriptionAttribute("TitleContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string TitleContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("HrefContextParameter")]
[LocalizableDescriptionAttribute("HrefContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string HRefContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("True")]
public bool AddCommentToResults { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ListTitle();
    [CompilerGeneratedAttribute]
public void set_ListTitle(string value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public string get_DocumentFilter();
    [CompilerGeneratedAttribute]
public void set_DocumentFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    [CompilerGeneratedAttribute]
public string get_TitleContextParameter();
    [CompilerGeneratedAttribute]
public void set_TitleContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_HRefContextParameter();
    [CompilerGeneratedAttribute]
public void set_HRefContextParameter(string value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& sMessage);
    private static List`1<string> GetDocumentItemRows(WebTestResponse response);
    private static List`1<ItemPosition> GetDocumentItems(WebTestResponse response, string documentFilter, String& sMessage, string locale);
    private static bool ExtractTitleFromRow(string sRow, String& sTitle, string locale);
    private static bool ExtractIDFromRow(string sRow, String& sID, string locale);
    private static bool ExtractHrefFromRow(string sRow, String& sHref, string locale);
    internal static bool GetMatchingTitleForDocumentItem(WebTestResponse response, string itemId, String& title, string locale);
    internal static bool FindDocumentHrefInResponse(WebTestResponse response, string href, String& title, string locale);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSPFindHrefs")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSPFindHrefs")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointFindHrefs : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <URLPatternString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    public string ResultsCommentFormatString;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecodeUnicodeEscapeSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <URLDecode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HtmlDecode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubstringExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringStartsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringEndsWith>k__BackingField;
    public bool bRealOutcome;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("URLPatternString")]
[LocalizableDescriptionAttribute("URLPatternStringDescription")]
[DefaultValueAttribute("")]
public string URLPatternString { get; public set; }
    [LocalizableDisplayNameAttribute("MatchCase")]
[LocalizableDescriptionAttribute("MatchCaseDescription")]
[DefaultValueAttribute("False")]
public bool MatchCase { get; public set; }
    [LocalizableDisplayNameAttribute("UseRegularExpression")]
[LocalizableDescriptionAttribute("UseRegularExpressionDescription")]
[DefaultValueAttribute("False")]
public bool UseRegEx { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("False")]
public bool AddCommentToResults { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("DecodeUnicodeEscapeSequences")]
[LocalizableDescriptionAttribute("DecodeUnicodeEscapeSequencesDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("CategoryConversions")]
public bool DecodeUnicodeEscapeSequences { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterUrlDecodeName")]
[LocalizableDescriptionAttribute("ContextParameterUrlDecodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("CategoryConversions")]
public bool URLDecode { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterHtmlDecodeName")]
[LocalizableDescriptionAttribute("ContextParameterHtmlDecodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("CategoryConversions")]
public bool HtmlDecode { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringExtract")]
[LocalizableDescriptionAttribute("SubStringExtractDescription")]
[DefaultValueAttribute("False")]
public bool SubstringExtract { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringStartsWith")]
[LocalizableDescriptionAttribute("SubStringStartsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringStartsWith { get; public set; }
    [LocalizableDisplayNameAttribute("SubStringEndsWith")]
[LocalizableDescriptionAttribute("SubStringEndsWithDescription")]
[DefaultValueAttribute("")]
public string SubstringEndsWith { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_URLPatternString();
    [CompilerGeneratedAttribute]
public void set_URLPatternString(string value);
    [CompilerGeneratedAttribute]
public bool get_MatchCase();
    [CompilerGeneratedAttribute]
public void set_MatchCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseRegEx();
    [CompilerGeneratedAttribute]
public void set_UseRegEx(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    [CompilerGeneratedAttribute]
public bool get_DecodeUnicodeEscapeSequences();
    [CompilerGeneratedAttribute]
public void set_DecodeUnicodeEscapeSequences(bool value);
    [CompilerGeneratedAttribute]
public bool get_URLDecode();
    [CompilerGeneratedAttribute]
public void set_URLDecode(bool value);
    [CompilerGeneratedAttribute]
public bool get_HtmlDecode();
    [CompilerGeneratedAttribute]
public void set_HtmlDecode(bool value);
    [CompilerGeneratedAttribute]
public bool get_SubstringExtract();
    [CompilerGeneratedAttribute]
public void set_SubstringExtract(bool value);
    [CompilerGeneratedAttribute]
public string get_SubstringStartsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringStartsWith(string value);
    [CompilerGeneratedAttribute]
public string get_SubstringEndsWith();
    [CompilerGeneratedAttribute]
public void set_SubstringEndsWith(string value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& message);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSP2010FindListItemsHrefs")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSP2010FindListItemsHrefs")]
internal class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointFindListItemHrefs : SharePointFindHrefs {
    private string _PageType;
    private string _ListId;
    private string _ContentTypeId;
    [CompilerGeneratedAttribute]
private string <PageTypeContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListIdContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTypeIdContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemIDContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <URLPatternString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchCase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringStartsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubstringEndsWith>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SubstringExtract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DecodeUnicodeEscapeSequences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <URLDecode>k__BackingField;
    private static string LISTID_REGEX_PATTERN;
    private static string PAGETYPE_REGEX_PATTERN;
    private static string CONTENTTYPEID_REGEX_PATTERN;
    private string locale;
    [LocalizableDisplayNameAttribute("PageType")]
[LocalizableDescriptionAttribute("PageTypeDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryFilters")]
public string PageType { get; public set; }
    [LocalizableDisplayNameAttribute("ListId")]
[LocalizableDescriptionAttribute("ListIdDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryFilters")]
public string ListId { get; public set; }
    [LocalizableDisplayNameAttribute("ContentTypeID")]
[LocalizableDescriptionAttribute("ContentTypeIDDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryFilters")]
public string ContentTypeId { get; public set; }
    [LocalizableDisplayNameAttribute("PageTypeContextParameter")]
[LocalizableDescriptionAttribute("PageTypeContextParameterDescription")]
[DefaultValueAttribute("")]
[CategoryAttribute("ContextParameters")]
public string PageTypeContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ListIdContextParameter")]
[LocalizableDescriptionAttribute("ListIdContextParameterDescription")]
[DefaultValueAttribute("")]
[CategoryAttribute("ContextParameters")]
public string ListIdContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ContentTypeIdContextParameter")]
[LocalizableDescriptionAttribute("ContentTypeIdContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ContentTypeIdContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ItemIDContextParameter")]
[LocalizableDescriptionAttribute("ItemIDContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ItemIDContextParameter { get; public set; }
    private string URLPatternString { get; private set; }
    private bool MatchCase { get; private set; }
    private string SubstringStartsWith { get; private set; }
    private string SubstringEndsWith { get; private set; }
    private bool SubstringExtract { get; private set; }
    private bool UseRegEx { get; private set; }
    private bool DecodeUnicodeEscapeSequences { get; private set; }
    private bool URLDecode { get; private set; }
    public string get_PageType();
    public void set_PageType(string value);
    public string get_ListId();
    public void set_ListId(string value);
    public string get_ContentTypeId();
    public void set_ContentTypeId(string value);
    [CompilerGeneratedAttribute]
public string get_PageTypeContextParameter();
    [CompilerGeneratedAttribute]
public void set_PageTypeContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_ListIdContextParameter();
    [CompilerGeneratedAttribute]
public void set_ListIdContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_ContentTypeIdContextParameter();
    [CompilerGeneratedAttribute]
public void set_ContentTypeIdContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_ItemIDContextParameter();
    [CompilerGeneratedAttribute]
public void set_ItemIDContextParameter(string value);
    [CompilerGeneratedAttribute]
private string get_URLPatternString();
    [CompilerGeneratedAttribute]
private void set_URLPatternString(string value);
    [CompilerGeneratedAttribute]
private bool get_MatchCase();
    [CompilerGeneratedAttribute]
private void set_MatchCase(bool value);
    [CompilerGeneratedAttribute]
private string get_SubstringStartsWith();
    [CompilerGeneratedAttribute]
private void set_SubstringStartsWith(string value);
    [CompilerGeneratedAttribute]
private string get_SubstringEndsWith();
    [CompilerGeneratedAttribute]
private void set_SubstringEndsWith(string value);
    [CompilerGeneratedAttribute]
private bool get_SubstringExtract();
    [CompilerGeneratedAttribute]
private void set_SubstringExtract(bool value);
    [CompilerGeneratedAttribute]
private bool get_UseRegEx();
    [CompilerGeneratedAttribute]
private void set_UseRegEx(bool value);
    [CompilerGeneratedAttribute]
private bool get_DecodeUnicodeEscapeSequences();
    [CompilerGeneratedAttribute]
private void set_DecodeUnicodeEscapeSequences(bool value);
    [CompilerGeneratedAttribute]
private bool get_URLDecode();
    [CompilerGeneratedAttribute]
private void set_URLDecode(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    private bool ValidatePageTypeValue(string sValue);
    private bool ValidateListIdValue(string sValue);
    private bool ValidateContentTypeIdValue(string sValue);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameSP2010FindListItems")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionSP2010FindListItems")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointFindListItems : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebPartTitleFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemTitleFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreAsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageTypeContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListIdContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTypeIdContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HrefContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleContextParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddCommentToResults>k__BackingField;
    private string ResultsCommentFormatString;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("WebPartTitleFilter")]
[LocalizableDescriptionAttribute("WebPartTitleFilterDescription")]
[LocalizableCategoryAttribute("CategoryFilters")]
[DefaultValueAttribute("")]
public string WebPartTitleFilter { get; public set; }
    [LocalizableDisplayNameAttribute("ItemTitleFilter")]
[LocalizableDescriptionAttribute("ItemTitleFilterDescription")]
[LocalizableCategoryAttribute("CategoryFilters")]
[DefaultValueAttribute("")]
public string ItemTitleFilter { get; public set; }
    [LocalizableDisplayNameAttribute("UseRegularExpression")]
[LocalizableDescriptionAttribute("UseRegularExpressionDescription")]
[LocalizableCategoryAttribute("CategoryFilters")]
[DefaultValueAttribute("False")]
public bool UseRegEx { get; public set; }
    [LocalizableDescriptionAttribute("StoreascollectionDescription")]
[DefaultValueAttribute("False")]
public bool StoreAsCollection { get; public set; }
    [LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [LocalizableDisplayNameAttribute("PageTypeContextParameter")]
[LocalizableDescriptionAttribute("PageTypeContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string PageTypeContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ListIdContextParameter")]
[LocalizableDescriptionAttribute("ListIdContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ListIdContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ContentTypeIdContextParameter")]
[LocalizableDescriptionAttribute("ContentTypeIdContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string ContentTypeIdContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("HrefContextParameter")]
[LocalizableDescriptionAttribute("HrefContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string HrefContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("TitleContextParameter")]
[LocalizableDescriptionAttribute("TitleContextParameterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryContextParameters")]
public string TitleContextParameter { get; public set; }
    [LocalizableDisplayNameAttribute("ResultsComment")]
[LocalizableDescriptionAttribute("ResultsCommentDescription")]
[LocalizableCategoryAttribute("CategoryComments")]
[DefaultValueAttribute("True")]
public bool AddCommentToResults { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public string get_WebPartTitleFilter();
    [CompilerGeneratedAttribute]
public void set_WebPartTitleFilter(string value);
    [CompilerGeneratedAttribute]
public string get_ItemTitleFilter();
    [CompilerGeneratedAttribute]
public void set_ItemTitleFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_UseRegEx();
    [CompilerGeneratedAttribute]
public void set_UseRegEx(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreAsCollection();
    [CompilerGeneratedAttribute]
public void set_StoreAsCollection(bool value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    [CompilerGeneratedAttribute]
public string get_PageTypeContextParameter();
    [CompilerGeneratedAttribute]
public void set_PageTypeContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_ListIdContextParameter();
    [CompilerGeneratedAttribute]
public void set_ListIdContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_ContentTypeIdContextParameter();
    [CompilerGeneratedAttribute]
public void set_ContentTypeIdContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_HrefContextParameter();
    [CompilerGeneratedAttribute]
public void set_HrefContextParameter(string value);
    [CompilerGeneratedAttribute]
public string get_TitleContextParameter();
    [CompilerGeneratedAttribute]
public void set_TitleContextParameter(string value);
    [CompilerGeneratedAttribute]
public bool get_AddCommentToResults();
    [CompilerGeneratedAttribute]
public void set_AddCommentToResults(bool value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& sMessage);
    private static StringCollection GetListItemRows(WebTestResponse response, String& sMessage, string locale, string sListID, string itemTitleFilter, bool useRegex);
    private static bool GetItemDetailsFromItemRow(string sValue, string locale, String& sMessage, String& sItemID, String& sItemPageType, String& sItemContentTypeID, String& sItemListID, String& sItemTitle, String& sHref);
    private static bool GetQueryStringParms(string sHref, String& sID, String& sPageType, String& sListID, String& sContentTypeID);
    private static int IndexOfQueryString(NameValueCollection queryStrings, string sKey);
    private static bool ExtractTitleFromATag(string sATag, String& sValue);
    private static string RemoveInnerTagContent(string htmlContent);
    private bool ExtractListIDFromTitle(string sTitle, string sBody, String& sListID, string resultsLocale);
    internal static bool GetMatchingTitleForListItem(WebTestResponse response, string itemId, String& title);
}
[LocalizableDisplayNameAttribute("ExtractionRuleNameFindWorkflowInstances")]
[LocalizableDescriptionAttribute("ExtractionRuleDescriptionFindWorkflowInstances")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointFindWorkFlowInstances : ExtractionRule {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseDefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkflowTitleFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemNumber>k__BackingField;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("Required")]
[LocalizableDescriptionAttribute("RequiredDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool Required { get; public set; }
    [LocalizableDisplayNameAttribute("DefaultValue")]
[LocalizableDescriptionAttribute("DefaultValueDescription")]
[DefaultValueAttribute("-1")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public string DefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("UseDefaultValue")]
[LocalizableDescriptionAttribute("UseDefaultValueDescription")]
[DefaultValueAttribute("True")]
[LocalizableCategoryAttribute("CategoryDefaults")]
public bool UseDefaultValue { get; public set; }
    [LocalizableDisplayNameAttribute("ItemTitleFilter")]
[LocalizableDescriptionAttribute("ItemTitleFilterDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("CategoryFilters")]
public string WorkflowTitleFilter { get; public set; }
    [LocalizableDisplayNameAttribute("ItemNumber")]
[LocalizableDescriptionAttribute("ItemNumberDescription")]
[DefaultValueAttribute("-1")]
public int ItemNumber { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_UseDefaultValue();
    [CompilerGeneratedAttribute]
public void set_UseDefaultValue(bool value);
    [CompilerGeneratedAttribute]
public string get_WorkflowTitleFilter();
    [CompilerGeneratedAttribute]
public void set_WorkflowTitleFilter(string value);
    [CompilerGeneratedAttribute]
public int get_ItemNumber();
    [CompilerGeneratedAttribute]
public void set_ItemNumber(int value);
    public virtual void Extract(object sender, ExtractionEventArgs e);
    public bool DoExtact(WebTestContext context, WebTestResponse response, String& sMessage);
    private static List`1<ItemPosition> GetWorkflowItems(WebTestResponse response, string titleFilter, String& sMessage, string locale);
    private static bool ExtractTitleFromRow(string sRow, String& sTitle, string resultsLocale);
    private static bool ExtractWorkflowInstanceIDFromRow(string sRow, String& sID, string resultsLocale);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameSPFindText2")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionSPFindText2")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointValidationRuleFindText2 : ValidationRule {
    public static string DEFAULT_SEPARATOR_STRING;
    private List`1<ISafeRegex> regexErrorTest;
    private List`1<ISafeRegex> regexStopTest;
    private String[] ErrorTextPatterns;
    private String[] StopTestPatterns;
    [CompilerGeneratedAttribute]
private string <ErrorTextPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorPassIfTextFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorUseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StopTestTextPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopTestPassIfTextFound>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StopTestUseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [LocalizableDisplayNameAttribute("PropertyNameFindText")]
[LocalizableDescriptionAttribute("PropertyDescriptionFindText")]
[LocalizableCategoryAttribute("CategoryErrorRequest")]
[DefaultValueAttribute("")]
public string ErrorTextPattern { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNamePassIfTextFound")]
[LocalizableDescriptionAttribute("PropertyDescriptionPassIfTextFound")]
[LocalizableCategoryAttribute("CategoryErrorRequest")]
[DefaultValueAttribute("False")]
public bool ErrorPassIfTextFound { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionUseRegularExpression")]
[LocalizableCategoryAttribute("CategoryErrorRequest")]
[DefaultValueAttribute("False")]
public bool ErrorUseRegEx { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameFindText")]
[LocalizableDescriptionAttribute("PropertyDescriptionFindText")]
[LocalizableCategoryAttribute("CategoryStopTest")]
[DefaultValueAttribute("")]
public string StopTestTextPattern { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNamePassIfTextFound")]
[LocalizableDescriptionAttribute("PropertyDescriptionPassIfTextFound")]
[LocalizableCategoryAttribute("CategoryStopTest")]
[DefaultValueAttribute("False")]
public bool StopTestPassIfTextFound { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionUseRegularExpression")]
[LocalizableCategoryAttribute("CategoryStopTest")]
[DefaultValueAttribute("False")]
public bool StopTestUseRegEx { get; public set; }
    [LocalizableDisplayNameAttribute("StringSeparator")]
[LocalizableDescriptionAttribute("StringSeparatorDescription")]
[DefaultValueAttribute(";")]
public string StringSeparator { get; public set; }
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    public SharePointValidationRuleFindText2(string sTerminators);
    [CompilerGeneratedAttribute]
public string get_ErrorTextPattern();
    [CompilerGeneratedAttribute]
public void set_ErrorTextPattern(string value);
    [CompilerGeneratedAttribute]
public bool get_ErrorPassIfTextFound();
    [CompilerGeneratedAttribute]
public void set_ErrorPassIfTextFound(bool value);
    [CompilerGeneratedAttribute]
public bool get_ErrorUseRegEx();
    [CompilerGeneratedAttribute]
public void set_ErrorUseRegEx(bool value);
    [CompilerGeneratedAttribute]
public string get_StopTestTextPattern();
    [CompilerGeneratedAttribute]
public void set_StopTestTextPattern(string value);
    [CompilerGeneratedAttribute]
public bool get_StopTestPassIfTextFound();
    [CompilerGeneratedAttribute]
public void set_StopTestPassIfTextFound(bool value);
    [CompilerGeneratedAttribute]
public bool get_StopTestUseRegEx();
    [CompilerGeneratedAttribute]
public void set_StopTestUseRegEx(bool value);
    [CompilerGeneratedAttribute]
public string get_StringSeparator();
    [CompilerGeneratedAttribute]
public void set_StringSeparator(string value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    private bool MyValidationFunction(string sBody, string sErrorPattern, bool bErrorPassIfFound, bool bErrorUseRegEx, string sStopTestPattern, bool bStopTestPassIfFound, bool bStopTestUseRegEx, String[] sSeparator, Boolean& bErrorTest, Boolean& bStopTest, String& sReason, string resultsLocale);
    private bool CheckCondition(string sBody, String[] patterns, List`1<ISafeRegex> regexes, bool bPassIfFound, String& sReason, string resultsLocale);
    public virtual void Validate(object sender, ValidationEventArgs e);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameSPResponseURL2")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionSPResponseURL2")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.SharePointValidationRuleResponseURL2 : ValidationRule {
    public static string DEFAULT_DISABLECHECK_STRING;
    public static string DEFAULT_SEPARATOR_STRING;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisableURLCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private string <URLTerminators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoPartialMatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StringSeparator>k__BackingField;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("DisableString")]
[LocalizableDescriptionAttribute("DisableStringDescription")]
[DefaultValueAttribute("SKIP")]
public string DisableURLCheck { get; public set; }
    [LocalizableDisplayNameAttribute("URLTerminators")]
[LocalizableDescriptionAttribute("URLTerminatorsDescription")]
[DefaultValueAttribute("")]
public string URLTerminators { get; public set; }
    [LocalizableDisplayNameAttribute("PartialMatch")]
[LocalizableDescriptionAttribute("PartialMatchDescription")]
[DefaultValueAttribute("False")]
public bool DoPartialMatch { get; public set; }
    [LocalizableDisplayNameAttribute("StringSeparator")]
[LocalizableDescriptionAttribute("StringSeparatorForResponseUrlValidation")]
[DefaultValueAttribute(";")]
public string StringSeparator { get; public set; }
    public SharePointValidationRuleResponseURL2(string sTerminators);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_DisableURLCheck();
    [CompilerGeneratedAttribute]
public void set_DisableURLCheck(string value);
    [CompilerGeneratedAttribute]
public string get_URLTerminators();
    [CompilerGeneratedAttribute]
public void set_URLTerminators(string value);
    [CompilerGeneratedAttribute]
public bool get_DoPartialMatch();
    [CompilerGeneratedAttribute]
public void set_DoPartialMatch(bool value);
    [CompilerGeneratedAttribute]
public string get_StringSeparator();
    [CompilerGeneratedAttribute]
public void set_StringSeparator(string value);
    private static bool MyValidationFunction(string sRequestURL, string sExpectedURL, string sActualURL, string sTerminators, string sDisableKeyword, bool bDoPartialMatch, String[] sSeparator, String& sReason, string locale);
    public virtual void Validate(object sender, ValidationEventArgs e);
    public static bool ValidateValue(string sRequestURL, string sExpectedURL, string sActualURL, string sTerminators, bool bDoPartial, string sDisableKeyword, string locale);
    public static bool ValidateValue(string sRequestURL, string sExpectedURL, string sActualURL, string locale);
    public static bool ValidateValue(string sRequestURL, string sExpectedURL, string sActualURL, string sTerminators, string locale);
}
[LocalizableDisplayNameAttribute("ConditionalRuleNameStringComparisonRule")]
[LocalizableDescriptionAttribute("ConditionalRuleDescriptionStringComparisonRule")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.StringComparisonRule : ConditionalRule {
    private string m_contextParameterName;
    private StringComparisonOperator m_comparisonOperator;
    private string m_value;
    private bool m_IgnoreCase;
    private bool m_useRegularExpression;
    [LocalizableDisplayNameAttribute("PropertyNameContextParameterName")]
[LocalizableDescriptionAttribute("PropertyDescriptionContextParameterName")]
[IsContextParameterNameAttribute("False")]
public string ContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameComparisonOperator")]
[LocalizableDescriptionAttribute("PropertyDescriptionComparisonOperator")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public StringComparisonOperator ComparisonOperator { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameComparisonValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionComparisonValue")]
public string Value { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionStringComparisonIgnoreCase")]
[DefaultValueAttribute("True")]
public bool IgnoreCase { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionStringComparisonUseRegularExpression")]
[DefaultValueAttribute("False")]
public bool UseRegularExpression { get; public set; }
    public virtual void CheckCondition(object sender, ConditionalEventArgs e);
    public virtual string StringRepresentation();
    private bool CheckConditionWithSimpleComparison(string parameterValue);
    private bool CheckConditionWithRegularExpression(string parameterValue);
    public string get_ContextParameterName();
    public void set_ContextParameterName(string value);
    public StringComparisonOperator get_ComparisonOperator();
    public void set_ComparisonOperator(StringComparisonOperator value);
    public string get_Value();
    public void set_Value(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_UseRegularExpression();
    public void set_UseRegularExpression(bool value);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameFormField")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionFormField")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidateFormField : ValidationRule {
    private string m_name;
    private string m_expectedValue;
    [LocalizableDisplayNameAttribute("PropertyNameFormFieldName")]
[LocalizableDescriptionAttribute("PropertyDescriptionFormFieldName")]
public string Name { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExpectedValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionExpectedValue")]
public string ExpectedValue { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_ExpectedValue();
    public void set_ExpectedValue(string value);
    public virtual void Validate(object sender, ValidationEventArgs e);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameSelectTag")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionSelectTag")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidateHtmlSelectTag : ValidationRule {
    private string m_selectTagName;
    private string m_expectedSelectedOption;
    private int m_index;
    private bool m_ignoreCase;
    [LocalizableDisplayNameAttribute("PropertyNameSelectTagName")]
[LocalizableDescriptionAttribute("PropertyDescriptionSelectTagName")]
public string SelectTagName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExpectedSelectedValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionExpectedSelectedValue")]
public string ExpectedSelectedOption { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndexForValidateInnerText")]
[DefaultValueAttribute("-1")]
public int Index { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCaseForInnerText")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCaseForInnerText")]
[DefaultValueAttribute("True")]
public bool IgnoreCase { get; public set; }
    public virtual void Validate(object sender, ValidationEventArgs e);
    public string get_SelectTagName();
    public void set_SelectTagName(string value);
    public string get_ExpectedSelectedOption();
    public void set_ExpectedSelectedOption(string value);
    public int get_Index();
    public void set_Index(int value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameTagInnerText")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionTagInnerText")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidateHtmlTagInnerText : ValidationRule {
    private string m_tagName;
    private string m_attributeName;
    private string m_attributeValue;
    private string m_expectedInnerText;
    private bool m_hasClosingTag;
    private bool m_removeInnerTags;
    private bool m_collapseWhiteSpace;
    private int m_index;
    private bool m_ignoreCase;
    [LocalizableDisplayNameAttribute("PropertyNameHtmlTagName")]
[LocalizableDescriptionAttribute("PropertyDescriptionHtmlTagName")]
public string TagName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameAttributeName")]
[LocalizableDescriptionAttribute("PropertyDescriptionAttributeName")]
public string AttributeName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameAttributeValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionAttributeValue")]
public string AttributeValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExpectedInnerText")]
[LocalizableDescriptionAttribute("PropertyDescriptionExpectedInnerText")]
public string ExpectedInnerText { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameRemoveInnerTags")]
[LocalizableDescriptionAttribute("PropertyDescriptionRemoveInnerTags")]
[DefaultValueAttribute("True")]
public bool RemoveInnerTags { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameClosingTag")]
[LocalizableDescriptionAttribute("PropertyDescriptionClosingTag")]
[DefaultValueAttribute("True")]
public bool HasClosingTags { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameCollapseExtraWhiteSpace")]
[LocalizableDescriptionAttribute("PropertyDescriptionCollapseExtraWhiteSpace")]
[DefaultValueAttribute("True")]
public bool CollapseWhiteSpace { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndexForValidateInnerText")]
[DefaultValueAttribute("-1")]
public int Index { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCaseForInnerText")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCaseForInnerText")]
[DefaultValueAttribute("True")]
public bool IgnoreCase { get; public set; }
    public virtual void Validate(object sender, ValidationEventArgs e);
    public string get_TagName();
    public void set_TagName(string value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_AttributeValue();
    public void set_AttributeValue(string value);
    public string get_ExpectedInnerText();
    public void set_ExpectedInnerText(string value);
    public bool get_RemoveInnerTags();
    public void set_RemoveInnerTags(bool value);
    public bool get_HasClosingTags();
    public void set_HasClosingTags(bool value);
    public bool get_CollapseWhiteSpace();
    public void set_CollapseWhiteSpace(bool value);
    public int get_Index();
    public void set_Index(int value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameResponseUrl")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionResponseUrl")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidateResponseUrl : ValidationRule {
    private bool m_ignoreCase;
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCase")]
[DefaultValueAttribute("False")]
public bool IgnoreCase { get; public set; }
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public virtual void Validate(object sender, ValidationEventArgs e);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameFindText")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionFindText")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidationRuleFindText : ValidationRule {
    private string m_textToFind;
    private bool m_passIfTextFound;
    private bool m_useRegularExpression;
    private bool m_ignoreCase;
    [LocalizableDisplayNameAttribute("PropertyNameFindText")]
[LocalizableDescriptionAttribute("PropertyDescriptionFindText")]
public string FindText { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCase")]
[DefaultValueAttribute("False")]
public bool IgnoreCase { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameUseRegularExpression")]
[LocalizableDescriptionAttribute("PropertyDescriptionUseRegularExpression")]
[DefaultValueAttribute("False")]
public bool UseRegularExpression { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNamePassIfTextFound")]
[LocalizableDescriptionAttribute("PropertyDescriptionPassIfTextFound")]
[DefaultValueAttribute("True")]
public bool PassIfTextFound { get; public set; }
    public string get_FindText();
    public void set_FindText(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public bool get_UseRegularExpression();
    public void set_UseRegularExpression(bool value);
    public bool get_PassIfTextFound();
    public void set_PassIfTextFound(bool value);
    public virtual void Validate(object sender, ValidationEventArgs e);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameRequestTime")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionRequestTime")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidationRuleRequestTime : ValidationRule {
    private int m_maxRequestTime;
    [LocalizableDisplayNameAttribute("PropertyNameMaxRequestTime")]
[LocalizableDescriptionAttribute("PropertyDescriptionMaxRequestTime")]
[DefaultValueAttribute("0")]
public int MaxRequestTime { get; public set; }
    public int get_MaxRequestTime();
    public void set_MaxRequestTime(int value);
    public virtual void Validate(object sender, ValidationEventArgs e);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameAttributeValue")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionAttributeValue")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidationRuleRequiredAttributeValue : ValidationRule {
    private string m_tagName;
    private string m_attributeName;
    private string m_matchAttributeName;
    private string m_matchAttributeValue;
    private string m_expectedAttributeValue;
    private bool m_ignoreCase;
    private int m_index;
    [LocalizableDisplayNameAttribute("PropertyNameTagName")]
[LocalizableDescriptionAttribute("PropertyDescriptionTagName")]
public string TagName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameAttributeName")]
[LocalizableDescriptionAttribute("PropertyDescriptionAttributeName")]
public string AttributeName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameMatchAttributeName")]
[LocalizableDescriptionAttribute("PropertyDescriptionMatchAttributeName")]
public string MatchAttributeName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameMatchAttributeValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionMatchAttributeValue")]
public string MatchAttributeValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameExpectedValue")]
[LocalizableDescriptionAttribute("PropertyDescriptionExpectedValue")]
public string ExpectedValue { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIgnoreCase")]
[LocalizableDescriptionAttribute("PropertyDescriptionIgnoreCase")]
[DefaultValueAttribute("False")]
public bool IgnoreCase { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameIndex")]
[LocalizableDescriptionAttribute("PropertyDescriptionIndexForValidateAttribute")]
[DefaultValueAttribute("-1")]
public int Index { get; public set; }
    public string get_TagName();
    public void set_TagName(string value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_MatchAttributeName();
    public void set_MatchAttributeName(string value);
    public string get_MatchAttributeValue();
    public void set_MatchAttributeValue(string value);
    public string get_ExpectedValue();
    public void set_ExpectedValue(string value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
    public int get_Index();
    public void set_Index(int value);
    public virtual void Validate(object sender, ValidationEventArgs e);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameRequiredTag")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionRequiredTag")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidationRuleRequiredTag : ValidationRule {
    private string m_requiredTagName;
    private int m_minOccurrences;
    [LocalizableDisplayNameAttribute("PropertyNameRequiredTagName")]
[LocalizableDescriptionAttribute("PropertyDesriptionRequiredTagName")]
public string RequiredTagName { get; public set; }
    [LocalizableDisplayNameAttribute("PropertyNameMinOccurrences")]
[LocalizableDescriptionAttribute("PropertyDesriptionMinOccurrences")]
[DefaultValueAttribute("0")]
public int MinOccurrences { get; public set; }
    public string get_RequiredTagName();
    public void set_RequiredTagName(string value);
    public int get_MinOccurrences();
    public void set_MinOccurrences(int value);
    public virtual void Validate(object sender, ValidationEventArgs e);
    [CompilerGeneratedAttribute]
private bool <Validate>b__6_0(HtmlToken token);
}
[LocalizableDisplayNameAttribute("ValidationRuleNameResponseTimeGoal")]
[LocalizableDescriptionAttribute("ValidationRuleDescriptionResponseTimeGoal")]
[RuleExecutionOrderAttribute("2")]
public class Microsoft.VisualStudio.TestTools.WebTesting.Rules.ValidationRuleResponseTimeGoal : ValidationRule {
    private double m_responseTimeGoalTolerance;
    [LocalizableDisplayNameAttribute("PropertyNameResponseTimeGoalTolerance")]
[LocalizableDescriptionAttribute("PropertyDescriptionResponseTimeGoalTolerance")]
[DefaultValueAttribute("0")]
public double Tolerance { get; public set; }
    public double get_Tolerance();
    public void set_Tolerance(double value);
    public virtual void Validate(object sender, ValidationEventArgs e);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.SafeRegexFactory : object {
    public static ISafeRegex GetSafeRegex(string regexPattern, RegexOptions options);
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.SerializerUtilities : object {
    private static string c_currentVersionProperty;
    private static string versionToUse;
    private static string VersionToUse { get; }
    internal static string UpgradeVisualStudioVersionInAssemblyName(string fullAssemblySpec);
    private static string get_VersionToUse();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.SharepointInformation : WebTestItem {
    [CompilerGeneratedAttribute]
private string <SharePointVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUsingHeuristicXml>k__BackingField;
    internal string SharePointVersion { get; internal set; }
    internal bool IsUsingHeuristicXml { get; internal set; }
    public SharepointInformation(string versionString);
    public virtual object Clone();
    [CompilerGeneratedAttribute]
internal string get_SharePointVersion();
    [CompilerGeneratedAttribute]
internal void set_SharePointVersion(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsUsingHeuristicXml();
    [CompilerGeneratedAttribute]
internal void set_IsUsingHeuristicXml(bool value);
}
[TypeConverterAttribute("Microsoft.VisualStudio.TestTools.WebTesting.StringComparisonOperatorConverter")]
public enum Microsoft.VisualStudio.TestTools.WebTesting.StringComparisonOperator : Enum {
    public int value__;
    public static StringComparisonOperator Equality;
    public static StringComparisonOperator Inequality;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.StringComparisonOperatorConverter : BaseEnumStringConverter`1<StringComparisonOperator> {
    private static string s_Equals;
    private static string s_NotEquals;
    private static StringComparisonOperatorConverter();
    protected virtual StringComparisonOperator ConvertFromStringToEnum(string value);
    protected virtual string ConvertFromEnumToString(StringComparisonOperator value);
    protected virtual String[] PopulateStandardValues();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.StringHttpBody : object {
    internal static string ContentTypeJSON;
    private string m_contentType;
    private string m_bodyString;
    private bool m_insertByteOrderMark;
    public string BodyString { get; public set; }
    public string ContentType { get; public set; }
    public bool InsertByteOrderMark { get; public set; }
    public string get_BodyString();
    public void set_BodyString(string value);
    public sealed virtual void WriteHttpBody(WebTestRequest request, Stream bodyStream);
    public sealed virtual string get_ContentType();
    public void set_ContentType(string value);
    public bool get_InsertByteOrderMark();
    public void set_InsertByteOrderMark(bool value);
    public sealed virtual object Clone();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.TestDescriptionAttribute : Attribute {
    private string m_description;
    public string TestDescription { get; }
    public TestDescriptionAttribute(string testDescription);
    public string get_TestDescription();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.TestElementProperties : object {
    public string Name;
    public string Owner;
    public int Priority;
    public bool Enabled;
    public int Timeout;
    public string CssProjectStructure;
    public string CssIteration;
    public String[] DeploymentItemsEditable;
    public String[] TestCategories;
    public List`1<int> WorkItemIds;
    public string Storage;
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.ThreadedWebTest : WebTest {
    private Thread m_requestsThread;
    private AutoResetEvent m_runToNextRequest;
    private AutoResetEvent m_nextRequestReady;
    private WebTestRequest m_currentRequest;
    private Exception m_enumeratorException;
    public sealed virtual IEnumerator`1<WebTestRequest> GetRequestEnumerator();
    public virtual void Stop();
    public void Send(WebTestRequest request);
    private void GenerateRequests();
    public abstract virtual void Run();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.TimeoutAttribute : Attribute {
    private int m_timeout;
    public int Timeout { get; }
    public TimeoutAttribute(int timeout);
    public int get_Timeout();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.TransactionBeginDelegate : MulticastDelegate {
    public TransactionBeginDelegate(object object, IntPtr method);
    public virtual void Invoke(string transactionName, bool isForIncludedWebTest, int declarativeWebTestItemId, Guid sourceWebTestId, string resultsLocale);
    public virtual IAsyncResult BeginInvoke(string transactionName, bool isForIncludedWebTest, int declarativeWebTestItemId, Guid sourceWebTestId, string resultsLocale, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.TransactionEndDelegate : MulticastDelegate {
    public TransactionEndDelegate(object object, IntPtr method);
    public virtual TimeSpan Invoke(string transactionName, string resultsLocale);
    public virtual IAsyncResult BeginInvoke(string transactionName, string resultsLocale, AsyncCallback callback, object object);
    public virtual TimeSpan EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.TransactionTimer : WebTestItem {
    private string m_name;
    private WebTestItemCollection m_itemCollection;
    public string Name { get; public set; }
    public WebTestItemCollection Items { get; }
    internal ConditionalConstructCollection ConditionalConstructs { get; }
    internal TransactionTimerCollection TransactionItems { get; }
    internal List`1<IncludedWebTest> IncludedWebTests { get; }
    private TransactionTimer(TransactionTimer copy, bool copyItems);
    private TransactionTimer(TransactionTimer copy);
    public void set_Name(string value);
    public string get_Name();
    public WebTestItemCollection get_Items();
    public virtual object Clone();
    internal virtual void GetBindingInstances(List`1<string> bindings);
    public virtual object RuntimeClone();
    internal ConditionalConstructCollection get_ConditionalConstructs();
    internal TransactionTimerCollection get_TransactionItems();
    internal List`1<IncludedWebTest> get_IncludedWebTests();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.TransactionTimerCollection : WebTestBaseCollection`1<TransactionTimer> {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ValidationEventArgs : EventArgs {
    private WebTest m_webTest;
    private WebTestRequest m_request;
    private WebTestResponse m_response;
    private ValidationLevel m_validationLevel;
    private RuleResult m_ruleResult;
    private TimeSpan m_totalDuration;
    public WebTest WebTest { get; }
    public string Message { get; public set; }
    public bool IsValid { get; public set; }
    public ValidationLevel ValidationLevel { get; }
    public WebTestRequest Request { get; }
    public TimeSpan RequestDuration { get; }
    public WebTestResponse Response { get; }
    internal RuleResult RuleResult { get; }
    internal ValidationEventArgs(WebTest webTest, WebTestRequest request, WebTestResponse response, ValidationLevel validationLevel, TimeSpan duration);
    internal ValidationEventArgs(WebTest webTest, WebTestRequest request, WebTestResponse response, ValidationLevel validationLevel);
    public WebTest get_WebTest();
    public string get_Message();
    public void set_Message(string value);
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public ValidationLevel get_ValidationLevel();
    public WebTestRequest get_Request();
    public TimeSpan get_RequestDuration();
    public WebTestResponse get_Response();
    internal RuleResult get_RuleResult();
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel : Enum {
    public int value__;
    public static ValidationLevel Low;
    public static ValidationLevel Medium;
    public static ValidationLevel High;
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.ValidationRule : object {
    [ObsoleteAttribute("This method is no longer used.  Use DisplayNameAttribute on the class to set a display name for this rule.", "False")]
public string RuleName { get; }
    [ObsoleteAttribute("This method is no longer used.  Use DescriptionAttribute on the class to set a description for this rule.", "False")]
public string RuleDescription { get; }
    public abstract virtual void Validate(object sender, ValidationEventArgs e);
    public virtual string get_RuleName();
    public virtual string get_RuleDescription();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ValidationRuleReference : WebTestRuleBase {
    private ValidationLevel m_validationLevel;
    public ValidationLevel ValidationLevel { get; public set; }
    public ValidationRuleReference(Type type);
    private ValidationRuleReference(ValidationRuleReference copy);
    public ValidationLevel get_ValidationLevel();
    public void set_ValidationLevel(ValidationLevel value);
    internal ValidationRule CreateInstance();
    public virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.ValidationRuleReferenceCollection : WebTestBaseCollection`1<ValidationRuleReference> {
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTest : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<PreWebTestEventArgs> PreWebTest;
    [CompilerGeneratedAttribute]
private EventHandler`1<PostWebTestEventArgs> PostWebTest;
    [CompilerGeneratedAttribute]
private EventHandler`1<PreTransactionEventArgs> PreTransaction;
    [CompilerGeneratedAttribute]
private EventHandler`1<PostTransactionEventArgs> PostTransaction;
    [CompilerGeneratedAttribute]
private EventHandler`1<PrePageEventArgs> PrePage;
    [CompilerGeneratedAttribute]
private EventHandler`1<PostPageEventArgs> PostPage;
    [CompilerGeneratedAttribute]
private EventHandler`1<PreRequestDataBindingEventArgs> PreRequestDataBinding;
    [CompilerGeneratedAttribute]
private EventHandler`1<PreRequestEventArgs> PreRequest;
    [CompilerGeneratedAttribute]
private EventHandler`1<PostRequestEventArgs> PostRequest;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValidationEventArgs> ValidateResponse;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValidationEventArgs> ValidateResponseOnPageComplete;
    private Guid m_guid;
    private string m_name;
    private WebTest m_inheritFromWebTest;
    private WebTestContext m_context;
    private string m_credentialUserName;
    private string m_credentialPassword;
    private bool m_preAuthenticate;
    private string m_proxy;
    private string m_recordedResultFile;
    private bool m_webProxySet;
    private IWebProxy m_webProxy;
    private Outcome m_outcome;
    private bool m_outcomeSetByUser;
    private Outcome m_currentPageOutcome;
    private DataSourceCollection m_dataSources;
    private DataSourceBindingCollection m_dataSourceBindings;
    private int m_requestBodyCaptureLimit;
    private int m_responseBodyCaptureLimit;
    private bool m_stopOnError;
    private ValidationRuleReferenceCollection m_validationRuleCollection;
    private WebTestPluginReferenceCollection m_webTestPluginCollection;
    private string m_parentTestName;
    private AddCommentToResultDelegate m_addCommentToResult;
    private TransactionBeginDelegate m_transactionBegin;
    private TransactionEndDelegate m_transactionEnd;
    private WebTestMoveDataTableCursorDelegate m_moveDataTableCursorDelegate;
    private WebTestGetDataTableRowCountDelegate m_getDataTableRowCountDelegate;
    private WebTestReloadDataTableDelegate m_reloadDataTableDelegate;
    private CreateIncludedWebTestDelegate m_createIncludedWebTestDelegate;
    private CreateIncludedWebTestByGuidDelegate m_createIncludedWebTestByGuidDelegate;
    private EnsureDataBindingInitializedDelegate m_ensureDataBindingInitializedDelegate;
    private ConditionBeginDelegate m_conditionBegin;
    private ConditionEndDelegate m_conditionEnd;
    private LoopBeginDelegate m_loopBegin;
    private LoopEndDelegate m_loopEnd;
    private LoopIterationBeginDelegate m_loopIterationBegin;
    private LoopIterationEndDelegate m_loopIterationEnd;
    private ConditionalRuleExecDelegate m_conditionalRuleExec;
    private Dictionary`2<ConditionalRule, WebTestConditionalConstruct> m_mapRuleToConditionalConstruct;
    private string m_resultsLocale;
    internal WebTestMoveDataTableCursorDelegate MoveDataTableCursorDelegate { get; internal set; }
    internal WebTestGetDataTableRowCountDelegate GetDataTableRowCountDelegate { get; internal set; }
    internal WebTestReloadDataTableDelegate ReloadDataTableDelegate { get; internal set; }
    internal AddCommentToResultDelegate AddCommentToResultDelegate { get; internal set; }
    internal TransactionBeginDelegate TransactionBegin { get; internal set; }
    internal TransactionEndDelegate TransactionEnd { get; internal set; }
    internal CreateIncludedWebTestDelegate CreateIncludedWebTest { get; internal set; }
    internal CreateIncludedWebTestByGuidDelegate CreateIncludedWebTestByGuid { get; internal set; }
    internal EnsureDataBindingInitializedDelegate EnsureDataBindingInitialized { get; internal set; }
    internal ConditionBeginDelegate ConditionBegin { get; internal set; }
    internal ConditionEndDelegate ConditionEnd { get; internal set; }
    internal ConditionalRuleExecDelegate ConditionalRuleExec { get; internal set; }
    internal LoopBeginDelegate LoopBegin { get; internal set; }
    internal LoopEndDelegate LoopEnd { get; internal set; }
    internal LoopIterationBeginDelegate LoopIterationBegin { get; internal set; }
    internal LoopIterationEndDelegate LoopIterationEnd { get; internal set; }
    internal string ParentTestName { get; internal set; }
    public WebTestResponse LastResponse { get; internal set; }
    public Outcome LastRequestOutcome { get; internal set; }
    public Outcome Outcome { get; public set; }
    internal bool OutcomeSetByUser { get; }
    [DefaultValueAttribute("False")]
public bool StopOnError { get; public set; }
    public string ResultsLocale { get; public set; }
    [DefaultValueAttribute("")]
public string UserName { get; public set; }
    [DefaultValueAttribute("")]
public string Password { get; public set; }
    public WebTestContext Context { get; internal set; }
    public bool PreAuthenticate { get; public set; }
    public int RequestBodyCaptureLimit { get; public set; }
    public int ResponseBodyCaptureLimit { get; public set; }
    public string Name { get; internal set; }
    public WebTest InheritFromWebTest { get; internal set; }
    public Guid Guid { get; public set; }
    [DefaultValueAttribute("")]
public string Proxy { get; public set; }
    internal string RecordedResultFile { get; internal set; }
    public IWebProxy WebProxy { get; public set; }
    public ValidationRuleReferenceCollection ValidationRuleReferences { get; internal set; }
    public WebTestPluginReferenceCollection WebTestPluginReferences { get; internal set; }
    internal bool HasValidationRuleReferences { get; }
    internal bool HasWebTestPluginReferences { get; }
    internal bool HasPostPageEventHandlers { get; }
    internal bool HasValidateResponseEventHandlers { get; }
    internal bool HasValidateResponseOnPageCompleteEventHandlers { get; }
    internal bool HasDataSources { get; }
    public DataSourceCollection DataSources { get; internal set; }
    internal DataSourceBindingCollection DataSourceBindings { get; internal set; }
    [CompilerGeneratedAttribute]
public void add_PreWebTest(EventHandler`1<PreWebTestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreWebTest(EventHandler`1<PreWebTestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PostWebTest(EventHandler`1<PostWebTestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PostWebTest(EventHandler`1<PostWebTestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PreTransaction(EventHandler`1<PreTransactionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreTransaction(EventHandler`1<PreTransactionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PostTransaction(EventHandler`1<PostTransactionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PostTransaction(EventHandler`1<PostTransactionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PrePage(EventHandler`1<PrePageEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PrePage(EventHandler`1<PrePageEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PostPage(EventHandler`1<PostPageEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PostPage(EventHandler`1<PostPageEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PreRequestDataBinding(EventHandler`1<PreRequestDataBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreRequestDataBinding(EventHandler`1<PreRequestDataBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PreRequest(EventHandler`1<PreRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreRequest(EventHandler`1<PreRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PostRequest(EventHandler`1<PostRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PostRequest(EventHandler`1<PostRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ValidateResponse(EventHandler`1<ValidationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValidateResponse(EventHandler`1<ValidationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ValidateResponseOnPageComplete(EventHandler`1<ValidationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValidateResponseOnPageComplete(EventHandler`1<ValidationEventArgs> value);
    internal WebTestMoveDataTableCursorDelegate get_MoveDataTableCursorDelegate();
    internal void set_MoveDataTableCursorDelegate(WebTestMoveDataTableCursorDelegate value);
    internal WebTestGetDataTableRowCountDelegate get_GetDataTableRowCountDelegate();
    internal void set_GetDataTableRowCountDelegate(WebTestGetDataTableRowCountDelegate value);
    internal WebTestReloadDataTableDelegate get_ReloadDataTableDelegate();
    internal void set_ReloadDataTableDelegate(WebTestReloadDataTableDelegate value);
    internal AddCommentToResultDelegate get_AddCommentToResultDelegate();
    internal void set_AddCommentToResultDelegate(AddCommentToResultDelegate value);
    internal TransactionBeginDelegate get_TransactionBegin();
    internal void set_TransactionBegin(TransactionBeginDelegate value);
    internal TransactionEndDelegate get_TransactionEnd();
    internal void set_TransactionEnd(TransactionEndDelegate value);
    internal CreateIncludedWebTestDelegate get_CreateIncludedWebTest();
    internal void set_CreateIncludedWebTest(CreateIncludedWebTestDelegate value);
    internal CreateIncludedWebTestByGuidDelegate get_CreateIncludedWebTestByGuid();
    internal void set_CreateIncludedWebTestByGuid(CreateIncludedWebTestByGuidDelegate value);
    internal EnsureDataBindingInitializedDelegate get_EnsureDataBindingInitialized();
    internal void set_EnsureDataBindingInitialized(EnsureDataBindingInitializedDelegate value);
    internal ConditionBeginDelegate get_ConditionBegin();
    internal void set_ConditionBegin(ConditionBeginDelegate value);
    internal ConditionEndDelegate get_ConditionEnd();
    internal void set_ConditionEnd(ConditionEndDelegate value);
    internal ConditionalRuleExecDelegate get_ConditionalRuleExec();
    internal void set_ConditionalRuleExec(ConditionalRuleExecDelegate value);
    internal LoopBeginDelegate get_LoopBegin();
    internal void set_LoopBegin(LoopBeginDelegate value);
    internal LoopEndDelegate get_LoopEnd();
    internal void set_LoopEnd(LoopEndDelegate value);
    internal LoopIterationBeginDelegate get_LoopIterationBegin();
    internal void set_LoopIterationBegin(LoopIterationBeginDelegate value);
    internal LoopIterationEndDelegate get_LoopIterationEnd();
    internal void set_LoopIterationEnd(LoopIterationEndDelegate value);
    internal string get_ParentTestName();
    internal void set_ParentTestName(string value);
    public WebTestResponse get_LastResponse();
    internal void set_LastResponse(WebTestResponse value);
    public Outcome get_LastRequestOutcome();
    internal void set_LastRequestOutcome(Outcome value);
    public Outcome get_Outcome();
    public void set_Outcome(Outcome value);
    internal bool get_OutcomeSetByUser();
    public void InternalSetOutcome(Outcome outcome);
    public bool get_StopOnError();
    public void set_StopOnError(bool value);
    public string get_ResultsLocale();
    public void set_ResultsLocale(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public WebTestContext get_Context();
    internal void set_Context(WebTestContext value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public int get_RequestBodyCaptureLimit();
    public void set_RequestBodyCaptureLimit(int value);
    public int get_ResponseBodyCaptureLimit();
    public void set_ResponseBodyCaptureLimit(int value);
    public string get_Name();
    internal void set_Name(string value);
    public WebTest get_InheritFromWebTest();
    internal void set_InheritFromWebTest(WebTest value);
    public virtual Guid get_Guid();
    public virtual void set_Guid(Guid value);
    public string get_Proxy();
    public void set_Proxy(string value);
    internal string get_RecordedResultFile();
    internal void set_RecordedResultFile(string value);
    public IWebProxy get_WebProxy();
    public void set_WebProxy(IWebProxy value);
    public ValidationRuleReferenceCollection get_ValidationRuleReferences();
    internal void set_ValidationRuleReferences(ValidationRuleReferenceCollection value);
    public WebTestPluginReferenceCollection get_WebTestPluginReferences();
    internal void set_WebTestPluginReferences(WebTestPluginReferenceCollection value);
    internal bool get_HasValidationRuleReferences();
    internal bool get_HasWebTestPluginReferences();
    internal bool get_HasPostPageEventHandlers();
    internal bool get_HasValidateResponseEventHandlers();
    internal bool get_HasValidateResponseOnPageCompleteEventHandlers();
    internal List`1<RuleResult> InvokeValidateResponse(WebTestRequest request, WebTestResponse response, ValidationLevel validationLevel);
    internal List`1<RuleResult> InvokeValidateResponseOnPageComplete(WebTestRequest request, WebTestResponse response, ValidationLevel validationLevel, TimeSpan duration);
    public sealed virtual IEnumerator GetEnumerator();
    private static string GetSimpleName(string webTestName);
    internal bool get_HasDataSources();
    public DataSourceCollection get_DataSources();
    internal void set_DataSources(DataSourceCollection value);
    internal virtual DataSourceBindingCollection get_DataSourceBindings();
    internal virtual void set_DataSourceBindings(DataSourceBindingCollection value);
    public virtual void Stop();
    public void AddCommentToResult(string comment);
    internal void AddCommentToResult(string comment, int declarativeWebTestItemId);
    public void BeginTransaction(string transactionName);
    internal void BeginTransaction(string transactionName, bool isForIncludedWebTest, int declarativeWebTestItemId, Guid sourceWebTestId);
    public void EndTransaction(string transactionName);
    public void EndTransaction(string transactionName, bool isForIncludedWebTest);
    internal void BeginCondition(WebTestCondition condition);
    internal void ExecuteConditionalRule(WebTestCondition condition);
    internal void EndCondition(WebTestCondition condition);
    public void BeginCondition(ConditionalRule conditionalRule);
    public void EndCondition(ConditionalRule conditionalRule);
    internal void BeginLoop(WebTestLoop loop);
    internal void EndLoop(WebTestLoop loop);
    internal void BeginLoopIteration(WebTestLoop loop);
    internal void EndLoopIteration(WebTestLoop loop);
    public void RegisterDataSourceInLoop(ConditionalRule conditionalRule, string dataSourceName, string dataTableName);
    public void BeginLoop(ConditionalRule conditionalRule, int maxIterations, bool advanceDataSources);
    public void EndLoop(ConditionalRule conditionalRule);
    public bool ExecuteConditionalRule(ConditionalRule conditionalRule);
    public virtual void InitializeDataBinding();
    internal virtual void OnPreWebTest(PreWebTestEventArgs e);
    internal virtual void OnPostWebTest(PostWebTestEventArgs e);
    internal virtual void OnPreTransaction(PreTransactionEventArgs e);
    internal virtual void OnPostTransaction(PostTransactionEventArgs e);
    internal virtual void OnPrePage(PrePageEventArgs e);
    internal virtual void OnPostPage(PostPageEventArgs e);
    internal virtual void OnPreRequest(PreRequestEventArgs e);
    internal virtual void OnPreDatabinding(PreRequestDataBindingEventArgs e);
    internal virtual void OnPostRequest(PostRequestEventArgs e);
    internal void InvokePreWebTest();
    internal void InvokePostWebTest();
    internal void InvokePrePage(WebTestRequest request);
    internal void InvokePostPage(WebTestRequest request, WebTestResponse response, WebTestPageStatistics pageStatistics);
    internal void InvokePreRequestDatabinding(WebTestRequest request);
    internal void InvokePreRequest(WebTestRequest request, WebTestExecutionInstruction& instruction);
    internal void InvokePostRequest(WebTestRequest request, WebTestResponse response);
    public WebTest IncludeWebTest(string webTestName);
    public WebTest IncludeWebTest(string webTestName, bool inheritWebTestSettings);
    internal WebTest IncludeWebTest(Guid webTestId, bool inheritWebTestSettings);
    public WebTest IncludeWebTest(WebTest childWebTest);
    public WebTest IncludeWebTest(WebTest childWebTest, bool inheritWebTestSettings);
    private WebTest IncludeWebTest(WebTest childWebTest, bool ensureDataBindingInitialized, bool inheritWebTestSettings);
    internal virtual void PopulateContext(WebTestContext webTestContext);
    public virtual void AddDataSource(string dataSourceName, string connectionString, DataBindingAccessMethod accessMethod, String[] tableNames);
    public virtual void AddDataSource(string dataSourceName, string providerName, string connectionString, DataBindingAccessMethod accessMethod, String[] tableNames);
    public virtual void AddDataSource(string dataSourceName, string providerName, string connectionString, DataBindingAccessMethod accessMethod, DataBindingSelectColumns selectColumns, String[] tableNames);
    public virtual void AddDataSourceBinding(string dataSourceName, string tableName, string columnName, string contextName);
    internal virtual List`1<string> GetBindingInstances();
    public void MoveDataTableCursor(string dataSourceName, string dataTableName);
    public void MoveDataTableCursor(string dataSourceName, string dataTableName, int newRowIndex);
    public int GetDataTableRowCount(string dataSourceName, string dataTableName);
    public void ReloadDataTable(string dataSourceName, string dataTableName);
    public abstract virtual IEnumerator`1<WebTestRequest> GetRequestEnumerator();
    private DataSource FindDataSource(string dataSourceName);
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestBaseCollection`1 : Collection`1<T> {
    public void AddRange(IEnumerable`1<T> items);
}
[TypeConverterAttribute("Microsoft.VisualStudio.TestTools.WebTesting.WebTestClassName/Converter")]
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestClassName : object {
    private string m_assemblyName;
    private string m_namespaceName;
    private string m_className;
    public string Assembly { get; }
    public string Namespace { get; }
    public string Class { get; }
    [BrowsableAttribute("False")]
public string SimpleAssemblyName { get; }
    [BrowsableAttribute("False")]
public string FullClassName { get; }
    [BrowsableAttribute("False")]
public string ClassNameWithNamespace { get; }
    public WebTestClassName(Type type);
    public WebTestClassName(string fullClassName);
    public WebTestClassName(string assemblyName, string namespaceName, string className);
    public string get_Assembly();
    public string get_Namespace();
    public string get_Class();
    public string get_SimpleAssemblyName();
    public string get_FullClassName();
    public string get_ClassNameWithNamespace();
    public Guid ToGuid();
    private void ParseFullClassName(string fullClassName);
    private string CreateFullClassName();
    public sealed virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestCondition : WebTestConditionalConstruct {
    private WebTestItemCollection m_elseItemCollection;
    public ConditionConditionalRuleReference ConditionConditionalRuleReference { get; }
    public WebTestItemCollection ElseItems { get; }
    public WebTestCondition(ConditionConditionalRuleReference conditionalRuleReference);
    public WebTestCondition(ConditionalRule conditionalRule);
    protected WebTestCondition(WebTestCondition copy);
    public virtual object Clone();
    public virtual object RuntimeClone();
    public ConditionConditionalRuleReference get_ConditionConditionalRuleReference();
    public WebTestItemCollection get_ElseItems();
    public virtual string ToString();
    public virtual string ToString(string conditionalRuleText);
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestConditionalConstruct : WebTestItem {
    private WebTestItemCollection m_itemCollection;
    private ConditionalRuleReference m_conditionalRuleReference;
    private string m_uniqueId;
    private RuleResult m_ruleResult;
    private bool m_ruleIsInitialized;
    private bool m_bindingError;
    private ConditionalRule m_conditionalRuleInstance;
    public WebTestItemCollection Items { get; }
    public ConditionalRuleReference ConditionalRuleReference { get; public set; }
    public string UniqueStringId { get; public set; }
    internal RuleResult RuleResult { get; }
    internal ConditionalConstructCollection ConditionalConstructs { get; }
    internal TransactionTimerCollection TransactionTimers { get; }
    internal List`1<IncludedWebTest> IncludedWebTests { get; }
    protected WebTestConditionalConstruct(WebTestConditionalConstruct copy);
    protected void Initialize(ConditionalRuleReference conditionalRuleReference);
    protected void Initialize(WebTestConditionalConstruct copy, ConditionalRuleReference ruleCopy);
    public WebTestItemCollection get_Items();
    public ConditionalRuleReference get_ConditionalRuleReference();
    public void set_ConditionalRuleReference(ConditionalRuleReference value);
    public string get_UniqueStringId();
    public void set_UniqueStringId(string value);
    public abstract virtual string ToString(string conditionalRuleText);
    public virtual string GetConditionalRuleText();
    public virtual void ExecuteInitializeConditionalRule(WebTest webTest);
    public virtual bool ExecuteCheckConditionalRule(WebTest webTest);
    public virtual void ExecuteCleanUpConditionalRule(WebTest webTest);
    internal void ProcessBindingError(Exception ex, string resultsLocale);
    internal void ProcessLoopErrorMessage(string message);
    internal virtual void GetBindingInstances(List`1<string> bindings);
    internal RuleResult get_RuleResult();
    internal ConditionalConstructCollection get_ConditionalConstructs();
    internal TransactionTimerCollection get_TransactionTimers();
    internal List`1<IncludedWebTest> get_IncludedWebTests();
}
internal enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestConditionRunStatus : Enum {
    public int value__;
    public static WebTestConditionRunStatus IdleCondition;
    public static WebTestConditionRunStatus StartingCondition;
    public static WebTestConditionRunStatus ExecutingRule;
    public static WebTestConditionRunStatus EndingCondition;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestContext : object {
    private ValidationLevel m_validationLevel;
    private int m_webTestIteration;
    private int m_webTestUserId;
    private bool m_isNewUser;
    private Dictionary`2<string, object> m_properties;
    private CookieContainer m_cookieContainer;
    private string m_controllerName;
    private string m_agentName;
    private int m_agentCount;
    private int m_agentId;
    private bool m_stopTest;
    private WebTestResponse m_lastResponse;
    private Outcome m_lastRequestOutcome;
    private IDictionary`2<string, object> m_loadTestContext;
    private string m_resultsLocale;
    internal IDictionary`2<string, object> LoadTestContext { get; internal set; }
    public CookieContainer CookieContainer { get; public set; }
    public int WebTestIteration { get; }
    public int WebTestUserId { get; internal set; }
    public bool IsNewUser { get; internal set; }
    public ValidationLevel ValidationLevel { get; internal set; }
    internal bool StopTest { get; internal set; }
    internal string ResultsLocale { get; internal set; }
    public string ControllerName { get; }
    public string AgentName { get; }
    public int AgentCount { get; }
    public int AgentId { get; }
    public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public WebTestResponse LastResponse { get; internal set; }
    public Outcome LastRequestOutcome { get; internal set; }
    internal void Initialize(Dictionary`2<string, object> properties, int webTestIteration, string controllerName, string agentName, int agentCount, int agentId, ValidationLevel validationLevel);
    internal IDictionary`2<string, object> get_LoadTestContext();
    internal void set_LoadTestContext(IDictionary`2<string, object> value);
    public CookieContainer get_CookieContainer();
    public void set_CookieContainer(CookieContainer value);
    public int get_WebTestIteration();
    public int get_WebTestUserId();
    internal void set_WebTestUserId(int value);
    public bool get_IsNewUser();
    internal void set_IsNewUser(bool value);
    public ValidationLevel get_ValidationLevel();
    internal void set_ValidationLevel(ValidationLevel value);
    internal bool get_StopTest();
    internal void set_StopTest(bool value);
    internal string get_ResultsLocale();
    internal void set_ResultsLocale(string value);
    public string get_ControllerName();
    public string get_AgentName();
    public int get_AgentCount();
    public int get_AgentId();
    public sealed virtual void Add(string key, object value);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual void Clear();
    public sealed virtual void Add(KeyValuePair`2<string, object> keyValuePair);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> keyValuePair);
    public sealed virtual bool Contains(KeyValuePair`2<string, object> keyValuePair);
    public sealed virtual void CopyTo(KeyValuePair`2[] keyValuePairArray, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public WebTestResponse get_LastResponse();
    internal void set_LastResponse(WebTestResponse value);
    public Outcome get_LastRequestOutcome();
    internal void set_LastRequestOutcome(Outcome value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestCorrelationResult : object {
    private string m_extractingRequestUrl;
    private string m_bindingRequestUrl;
    private string m_parameterName;
    private string m_uniqueContextParameterName;
    public string ExtractingRequestUrl { get; }
    public string BindingRequestUrl { get; }
    public string ParameterName { get; }
    public string UniqueContextParameterName { get; }
    internal WebTestCorrelationResult(string extractingRequestUrl, string bindingRequestUrl, string uniqueContextParameterName);
    public string get_ExtractingRequestUrl();
    public string get_BindingRequestUrl();
    public string get_ParameterName();
    public string get_UniqueContextParameterName();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestEmptyTableException : WebTestException {
    public WebTestEmptyTableException(string message);
    public WebTestEmptyTableException(string message, Exception innerException);
    protected WebTestEmptyTableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestEndOfDataException : WebTestException {
    public WebTestEndOfDataException(string message);
    public WebTestEndOfDataException(string message, Exception innerException);
    protected WebTestEndOfDataException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestError : object {
    private WebTestErrorType m_errorType;
    private string m_errorSubtype;
    private string m_errorText;
    private string m_stackTrace;
    private string m_exceptionText;
    private DateTime m_timeOfError;
    private TimeZoneInfo m_intervalTimeZone;
    private bool m_processed;
    public WebTestErrorType ErrorType { get; internal set; }
    public string ErrorTypeString { get; }
    public string ErrorText { get; internal set; }
    public string ErrorSubtype { get; internal set; }
    public string StackTrace { get; internal set; }
    public bool Processed { get; public set; }
    public string ExceptionText { get; internal set; }
    public DateTime TimeOfError { get; internal set; }
    public WebTestError(Exception ex, string stackTrace);
    public WebTestError(Exception e);
    public WebTestError(Exception e, bool processInnerException);
    public void WriteXml(XmlTextWriter xmlWriter);
    internal void set_ErrorType(WebTestErrorType value);
    public WebTestErrorType get_ErrorType();
    public string get_ErrorTypeString();
    internal void set_ErrorText(string value);
    public string get_ErrorText();
    internal void set_ErrorSubtype(string value);
    public string get_ErrorSubtype();
    internal void set_StackTrace(string value);
    public string get_StackTrace();
    public void set_Processed(bool value);
    public bool get_Processed();
    internal void set_ExceptionText(string value);
    public string get_ExceptionText();
    internal void set_TimeOfError(DateTime value);
    public DateTime get_TimeOfError();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestErrorCollection : CollectionBase {
    public WebTestError Item { get; }
    public int Add(WebTestError instance);
    public void Insert(int index, WebTestError instance);
    public int IndexOf(WebTestError instance);
    public void Remove(WebTestError instance);
    public WebTestError get_Item(int index);
    public bool Contains(WebTestError instance);
    public void CopyTo(WebTestError[] array, int index);
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestErrorType : Enum {
    public int value__;
    public static WebTestErrorType TestError;
    public static WebTestErrorType Exception;
    public static WebTestErrorType HttpError;
    public static WebTestErrorType ValidationRuleError;
    public static WebTestErrorType ExtractionRuleError;
    public static WebTestErrorType ConditionalRuleError;
    public static WebTestErrorType Timeout;
    public static WebTestErrorType DataCollectionError;
    public static WebTestErrorType DataCollectionWarning;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestException : Exception {
    public WebTestException(string message);
    public WebTestException(string message, Exception innerException);
    protected WebTestException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestExecutionInstruction : Enum {
    public int value__;
    public static WebTestExecutionInstruction Execute;
    public static WebTestExecutionInstruction Skip;
}
internal static class Microsoft.VisualStudio.TestTools.WebTesting.WebTestFrameworkHelperMethods : object {
    public static TCollection CloneCustomCollection(TCollection collection);
    public static List`1<TItem> CloneGenericList(List`1<TItem> list);
    public static bool ComparePropertyCollections(PropertyCollection collection1, PropertyCollection collection2);
    public static KeyValuePair`2<string, string> SplitNameEqualsValue(string nameEqualsValue);
    public static Encoding GetEncodingForContentType(string contentType);
    public static string GetTranslatedString(Byte[] bytes, string contentType);
    public static QueryStringParameterCollection ParseQueryStringParametersFromUri(Uri uri, Encoding encoding);
    public static QueryStringParameterCollection ParseQueryStringParametersFromUri(Uri uri, Encoding encoding, bool urlEncodeIfNeeded);
    public static QueryStringParameterCollection ParseQueryStringParametersFromUri(string uriString, Encoding encoding);
    public static QueryStringParameterCollection ParseQueryStringParametersFromUri(string uriString, Encoding encoding, bool urlEncodeIfNeeded);
    private static QueryStringParameter CreateQueryStringParameter(string queryParam);
    private static QueryStringParameter CreateEncodedQueryStringParameter(string queryParam, Encoding encoding);
    private static string URLEncodeValueIfNeeded(string value, Encoding encoding);
    private static bool IsUrlEncoded(string value);
    public static List`1<ArraySegment`1<T>> ArraySplit(T[] array, T[] splitSequence);
    public static List`1<ArraySegment`1<T>> ArraySplit(T[] array, T[] splitSequence, int startIndex, int count);
    public static PropertyCollection GetPropertiesFromRuleInstance(object ruleInstance);
    public static void PopulateConditionalRuleReferenceFromInstance(ConditionalRuleReference ruleReference, ConditionalRule ruleInstance);
    public static List`1<RuleResult> ExecuteValidateResponseHandlers(object sender, WebTest webTest, WebTestRequest request, WebTestResponse response, ValidationLevel validationLevel, Delegate[] validationHandlers, TimeSpan duration);
    public static string MakePathAbsolute(string path, string basePath);
    public static string MakePathRelative(string path, string basePath);
    public static string GetNameFromPath(string path);
    public static string TruncateTransactionName(string transactionName);
    internal static object CreateInstance(WebTestClassName webTestClassName);
    internal static object CreateInstance(Type type, PropertyCollection properties);
    internal static void ApplyPropertyToInstance(Type instanceType, object instance, PluginOrRuleProperty property);
    public static string UrlEncode(string str, Encoding e);
    public static Byte[] UrlEncodeToBytes(string str, Encoding e);
    private static Byte[] UrlEncodeBytesToBytesInternal(Byte[] bytes, int offset, int count, bool alwaysCreateReturnValue);
    internal static char IntToHex(int n);
    internal static bool IsSafe(char ch);
    internal static ExtractionRuleReference CreateExtractionRule(string source, string substring, string contextParameterName, string startsWith, string endsWith);
    internal static ExtractionRuleReference CreateExtractionRule(string source, int indexInDocument, int selectedLength);
    internal static ExtractionRuleReference CreateExtractionRule(string source, int indexInDocument, int selectedLength, string contextParameterName, string startsWithToUse, string endsWithToUse);
    internal static ExtractionRuleReference CreateExtractTextReference(string documentContent, int indexInDocument, string startsWith, string endsWith, string contextParameterName);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestGetDataTableRowCountDelegate : MulticastDelegate {
    public WebTestGetDataTableRowCountDelegate(object object, IntPtr method);
    public virtual int Invoke(string dataSourceName, string dataTableName);
    public virtual IAsyncResult BeginInvoke(string dataSourceName, string dataTableName, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestingConstants : object {
    public static string RecorderBarGuid;
    public static string RecorderBarGuidPlain;
    public static string RecorderBarBHOGuid;
    public static string RecorderBarGuidLegacy;
    public static string RecorderBarGuidPlainLegacy;
    public static string RecorderBarBHOGuidLegacy;
    public static string IEBHOKey;
    public static string IEApprovedExtensionsPath;
    public static string WebLoadTestKeyPath;
    public static string WebLoadTestRelativeKeyPath;
    public static string ExplorerCacheKeyPath;
    public static string MasterRecordingIEHwndValueName;
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestItem : object {
    private int m_itemId;
    public int ItemId { get; internal set; }
    internal WebTestItem(WebTestItem copy);
    public abstract virtual object Clone();
    public virtual object RuntimeClone();
    internal virtual void GetBindingInstances(List`1<string> bindings);
    public int get_ItemId();
    internal void set_ItemId(int value);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestItemCollection : WebTestBaseCollection`1<WebTestItem> {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestLoop : WebTestConditionalConstruct {
    private int m_currentIterationNumber;
    private List`1<DataSourceDataTablePair> m_effectedDataSources;
    public LoopConditionalRuleReference LoopConditionalRuleReference { get; }
    public int CurrentIterationNumber { get; }
    public WebTestLoop(LoopConditionalRuleReference conditionalRuleReference);
    public WebTestLoop(ConditionalRule conditionalRule, int maxIterations, bool advanceDataSources);
    protected WebTestLoop(WebTestLoop copy);
    public virtual object Clone();
    public virtual object RuntimeClone();
    public void RegisterDataSource(string dataSourceName, string dataTableName);
    public LoopConditionalRuleReference get_LoopConditionalRuleReference();
    public int get_CurrentIterationNumber();
    public virtual string ToString();
    public virtual string ToString(string conditionalRuleText);
    public virtual void ExecuteInitializeConditionalRule(WebTest webTest);
    public virtual bool ExecuteCheckConditionalRule(WebTest webTest);
}
internal enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestLoopIterationRunStatus : Enum {
    public int value__;
    public static WebTestLoopIterationRunStatus IdleLoopIteration;
    public static WebTestLoopIterationRunStatus StartingLoopIteration;
    public static WebTestLoopIterationRunStatus EndingLoopIteration;
}
internal enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestLoopRunStatus : Enum {
    public int value__;
    public static WebTestLoopRunStatus IdleLoop;
    public static WebTestLoopRunStatus StartingLoop;
    public static WebTestLoopRunStatus EndingLoop;
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestMoveDataTableCursorDelegate : MulticastDelegate {
    public WebTestMoveDataTableCursorDelegate(object object, IntPtr method);
    public virtual void Invoke(string dataSourceName, string dataTableName, int newRowIndex);
    public virtual IAsyncResult BeginInvoke(string dataSourceName, string dataTableName, int newRowIndex, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestPageStatistics : object {
    private DateTime m_startTime;
    private TimeSpan m_pageTime;
    private long m_totalLength;
    private TimeZoneInfo m_intervalTimeZone;
    public DateTime StartTime { get; internal set; }
    public TimeSpan PageTime { get; internal set; }
    public long TotalContentLength { get; internal set; }
    public DateTime get_StartTime();
    internal void set_StartTime(DateTime value);
    public TimeSpan get_PageTime();
    internal void set_PageTime(TimeSpan value);
    public long get_TotalContentLength();
    internal void set_TotalContentLength(long value);
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestPlugin : object {
    public virtual void PreWebTest(object sender, PreWebTestEventArgs e);
    public virtual void PostWebTest(object sender, PostWebTestEventArgs e);
    public virtual void PreTransaction(object sender, PreTransactionEventArgs e);
    public virtual void PostTransaction(object sender, PostTransactionEventArgs e);
    public virtual void PrePage(object sender, PrePageEventArgs e);
    public virtual void PostPage(object sender, PostPageEventArgs e);
    public virtual void PreRequestDataBinding(object sender, PreRequestDataBindingEventArgs e);
    public virtual void PreRequest(object sender, PreRequestEventArgs e);
    public virtual void PostRequest(object sender, PostRequestEventArgs e);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestPluginReference : WebTestRuleBase {
    private WebTestPluginReference(WebTestPluginReference copy);
    public WebTestPlugin CreateInstance();
    public virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestPluginReferenceCollection : WebTestBaseCollection`1<WebTestPluginReference> {
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRecorderPlugin : object {
    public virtual void PostWebTestRecording(object sender, PostWebTestRecordingEventArgs e);
    public virtual void PostWebTestDynamicParameterDetection(object sender, PostWebTestRecordingEventArgs e);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRecorderPluginReference : WebTestRuleBase {
    [CompilerGeneratedAttribute]
private bool <AlwaysExecute>k__BackingField;
    public bool AlwaysExecute { get; public set; }
    private WebTestRecorderPluginReference(WebTestRecorderPluginReference copy);
    [CompilerGeneratedAttribute]
public bool get_AlwaysExecute();
    [CompilerGeneratedAttribute]
public void set_AlwaysExecute(bool value);
    public WebTestRecorderPlugin CreateInstance();
    public virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestReloadDataTableDelegate : MulticastDelegate {
    public WebTestReloadDataTableDelegate(object object, IntPtr method);
    public virtual void Invoke(string dataSourceName, string dataTableName);
    public virtual IAsyncResult BeginInvoke(string dataSourceName, string dataTableName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequest : WebTestItem {
    [CompilerGeneratedAttribute]
private EventHandler`1<PreRequestDataBindingEventArgs> PreRequestDataBinding;
    [CompilerGeneratedAttribute]
private EventHandler`1<PreRequestEventArgs> PreRequest;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValidationEventArgs> ValidateResponse;
    [CompilerGeneratedAttribute]
private EventHandler`1<ValidationEventArgs> ValidateResponseOnPageComplete;
    [CompilerGeneratedAttribute]
private EventHandler`1<ExtractionEventArgs> ExtractValues;
    [CompilerGeneratedAttribute]
private EventHandler`1<PostRequestEventArgs> PostRequest;
    [CompilerGeneratedAttribute]
private string <RecordedCookies>k__BackingField;
    private Guid m_guid;
    private Guid m_dependentGuid;
    private string m_method;
    private string m_version;
    private int m_thinkTime;
    private int m_timeout;
    private bool m_parseDependentRequests;
    private bool m_followRedirects;
    private bool m_recordResult;
    private bool m_recordRedirectedUrl;
    private bool m_isRedirectFollow;
    private bool m_cache;
    private float m_responseTimeGoal;
    private long m_contentLength;
    private long m_requestBodySize;
    private string m_contentType;
    private Encoding m_encoding;
    private string m_encodingName;
    private X509CertificateCollection m_clientCertificates;
    private string m_url;
    private WebTestRequestCollection m_dependentRequestCollection;
    private WebTestRequest m_refererRequest;
    private string m_refererUrl;
    private string m_expectedResponseUrl;
    private string m_reportingName;
    private HtmlDocument m_recordedHtmlDocument;
    private bool m_sendChunked;
    private IHttpBody m_body;
    private Byte[] m_bodyBytes;
    private ByteArrayCache m_byteArrayCache;
    private int m_bodyBytesCacheHandle;
    private bool m_allowSetOutcome;
    private bool m_outcomeSetByUser;
    private Outcome m_outcome;
    private int m_expectedHttpStatusCode;
    private bool m_ignoreHttpStatusCode;
    private WebTest m_sourceWebTest;
    private Guid m_sourceWebTestGuid;
    private WebTestRequestHeaderCollection m_headerCollection;
    private WebTestRequestHeaderCollection m_recordedHeaderCollection;
    private WebTestRequestHeaderCollection m_preRequestHeaders;
    private QueryStringParameterCollection m_queryStringParameterCollection;
    private ValidationRuleReferenceCollection m_validationRuleCollection;
    private ExtractionRuleReferenceCollection m_extractionRuleCollection;
    private ExtractionRuleReferenceCollection m_correlationExtractionRuleCollection;
    private WebTestRequestPluginReferenceCollection m_webTestRequestPluginCollection;
    private CookieCollection m_cookieCollection;
    public IHttpBody Body { get; public set; }
    public Byte[] BodyBytes { get; internal set; }
    [DefaultValueAttribute("False")]
public bool SendChunked { get; public set; }
    public WebTestRequestCollection DependentRequests { get; internal set; }
    public bool HasDependentRequests { get; }
    public WebTestRequestHeaderCollection Headers { get; internal set; }
    internal WebTestRequestHeaderCollection RecordedHeaders { get; internal set; }
    public bool HasHeaders { get; }
    internal WebTestRequestHeaderCollection PreRequestHeaders { get; internal set; }
    public QueryStringParameterCollection QueryStringParameters { get; }
    public bool HasQueryStringParameters { get; }
    public ValidationRuleReferenceCollection ValidationRuleReferences { get; internal set; }
    internal bool HasValidationRuleReferences { get; }
    public ExtractionRuleReferenceCollection ExtractionRuleReferences { get; internal set; }
    internal bool HasExtractionRuleReferences { get; }
    public ExtractionRuleReferenceCollection CorrelationExtractionRuleReferences { get; internal set; }
    internal bool HasCorrelationExtractionRuleReferences { get; }
    public WebTestRequestPluginReferenceCollection WebTestRequestPluginReferences { get; internal set; }
    internal bool HasWebTestRequestPluginReferences { get; }
    public long ContentLength { get; internal set; }
    internal long RequestBodySize { get; internal set; }
    public CookieCollection Cookies { get; internal set; }
    public bool HasCookies { get; }
    public string RecordedCookies { get; public set; }
    public string Url { get; public set; }
    internal bool HasClientCertificates { get; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public Guid Guid { get; public set; }
    public Guid DependentGuid { get; public set; }
    [DefaultValueAttribute("False")]
public bool Cache { get; public set; }
    [DefaultValueAttribute("True")]
public bool ParseDependentRequests { get; public set; }
    [DefaultValueAttribute("True")]
public bool FollowRedirects { get; public set; }
    [DefaultValueAttribute("")]
public string ReportingName { get; public set; }
    [DefaultValueAttribute("")]
public string ExpectedResponseUrl { get; public set; }
    [DefaultValueAttribute("True")]
public bool RecordResult { get; public set; }
    [DefaultValueAttribute("True")]
public bool EncodeRedirectedUrl { get; public set; }
    [DefaultValueAttribute("0")]
public float ResponseTimeGoal { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool IsRedirectFollow { get; internal set; }
    [BrowsableAttribute("False")]
internal WebTestRequest RefererRequest { get; internal set; }
    [BrowsableAttribute("False")]
internal string RefererUrl { get; internal set; }
    [DefaultValueAttribute("300")]
public int Timeout { get; public set; }
    [DefaultValueAttribute("0")]
public int ThinkTime { get; public set; }
    [DefaultValueAttribute("GET")]
public string Method { get; public set; }
    [DefaultValueAttribute("1.1")]
public string Version { get; public set; }
    internal bool AllowSetOutcome { get; internal set; }
    internal bool OutcomeSetByUser { get; }
    public Outcome Outcome { get; public set; }
    [DefaultValueAttribute("0")]
public int ExpectedHttpStatusCode { get; public set; }
    [DefaultValueAttribute("False")]
public bool IgnoreHttpStatusCode { get; public set; }
    public Encoding Encoding { get; public set; }
    internal string EncodingName { get; internal set; }
    internal WebTest SourceWebTest { get; internal set; }
    internal Guid SourceWebTestId { get; internal set; }
    public string UrlWithQueryString { get; }
    internal bool HasValidateResponseEventHandlers { get; }
    internal bool HasValidateResponseOnPageCompleteEventHandlers { get; }
    internal bool HasExtractValuesEventHandlers { get; }
    internal HtmlDocument RecordedHtmlDocument { get; internal set; }
    public string ContentType { get; internal set; }
    public WebTestRequest(Uri requestUri);
    public WebTestRequest(string url);
    internal WebTestRequest(string url, Encoding encoding, bool urlEncodeIfNeeded);
    internal WebTestRequest(WebTestRequest copy);
    [CompilerGeneratedAttribute]
public void add_PreRequestDataBinding(EventHandler`1<PreRequestDataBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreRequestDataBinding(EventHandler`1<PreRequestDataBindingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PreRequest(EventHandler`1<PreRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PreRequest(EventHandler`1<PreRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ValidateResponse(EventHandler`1<ValidationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValidateResponse(EventHandler`1<ValidationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ValidateResponseOnPageComplete(EventHandler`1<ValidationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ValidateResponseOnPageComplete(EventHandler`1<ValidationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ExtractValues(EventHandler`1<ExtractionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ExtractValues(EventHandler`1<ExtractionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PostRequest(EventHandler`1<PostRequestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PostRequest(EventHandler`1<PostRequestEventArgs> value);
    public IHttpBody get_Body();
    public void set_Body(IHttpBody value);
    public Byte[] get_BodyBytes();
    internal void set_BodyBytes(Byte[] value);
    public bool get_SendChunked();
    public void set_SendChunked(bool value);
    public WebTestRequestCollection get_DependentRequests();
    internal void set_DependentRequests(WebTestRequestCollection value);
    public bool get_HasDependentRequests();
    public WebTestRequestHeaderCollection get_Headers();
    internal void set_Headers(WebTestRequestHeaderCollection value);
    internal WebTestRequestHeaderCollection get_RecordedHeaders();
    internal void set_RecordedHeaders(WebTestRequestHeaderCollection value);
    public bool get_HasHeaders();
    internal WebTestRequestHeaderCollection get_PreRequestHeaders();
    internal void set_PreRequestHeaders(WebTestRequestHeaderCollection value);
    public QueryStringParameterCollection get_QueryStringParameters();
    public bool get_HasQueryStringParameters();
    public ValidationRuleReferenceCollection get_ValidationRuleReferences();
    internal void set_ValidationRuleReferences(ValidationRuleReferenceCollection value);
    internal bool get_HasValidationRuleReferences();
    public ExtractionRuleReferenceCollection get_ExtractionRuleReferences();
    internal void set_ExtractionRuleReferences(ExtractionRuleReferenceCollection value);
    internal bool get_HasExtractionRuleReferences();
    public ExtractionRuleReferenceCollection get_CorrelationExtractionRuleReferences();
    internal void set_CorrelationExtractionRuleReferences(ExtractionRuleReferenceCollection value);
    internal bool get_HasCorrelationExtractionRuleReferences();
    public WebTestRequestPluginReferenceCollection get_WebTestRequestPluginReferences();
    internal void set_WebTestRequestPluginReferences(WebTestRequestPluginReferenceCollection value);
    internal bool get_HasWebTestRequestPluginReferences();
    internal void ApplyRequestPlugins();
    internal void set_ContentLength(long value);
    public long get_ContentLength();
    internal void set_RequestBodySize(long value);
    internal long get_RequestBodySize();
    public CookieCollection get_Cookies();
    internal void set_Cookies(CookieCollection value);
    public bool get_HasCookies();
    [CompilerGeneratedAttribute]
public string get_RecordedCookies();
    [CompilerGeneratedAttribute]
public void set_RecordedCookies(string value);
    public string get_Url();
    public void set_Url(string value);
    internal bool get_HasClientCertificates();
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public Guid get_DependentGuid();
    public void set_DependentGuid(Guid value);
    public bool get_Cache();
    public void set_Cache(bool value);
    public bool get_ParseDependentRequests();
    public void set_ParseDependentRequests(bool value);
    public bool get_FollowRedirects();
    public void set_FollowRedirects(bool value);
    public string get_ReportingName();
    public void set_ReportingName(string value);
    public string get_ExpectedResponseUrl();
    public void set_ExpectedResponseUrl(string value);
    public bool get_RecordResult();
    public void set_RecordResult(bool value);
    public bool get_EncodeRedirectedUrl();
    public void set_EncodeRedirectedUrl(bool value);
    public float get_ResponseTimeGoal();
    public void set_ResponseTimeGoal(float value);
    public bool get_IsRedirectFollow();
    internal void set_IsRedirectFollow(bool value);
    internal WebTestRequest get_RefererRequest();
    internal void set_RefererRequest(WebTestRequest value);
    internal string get_RefererUrl();
    internal void set_RefererUrl(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public int get_ThinkTime();
    public void set_ThinkTime(int value);
    public string get_Method();
    public void set_Method(string value);
    public string get_Version();
    public void set_Version(string value);
    internal bool get_AllowSetOutcome();
    internal void set_AllowSetOutcome(bool value);
    internal bool get_OutcomeSetByUser();
    public Outcome get_Outcome();
    public void set_Outcome(Outcome value);
    public void InternalSetOutcome(Outcome outcome);
    public int get_ExpectedHttpStatusCode();
    public void set_ExpectedHttpStatusCode(int value);
    public bool get_IgnoreHttpStatusCode();
    public void set_IgnoreHttpStatusCode(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    internal string get_EncodingName();
    internal void set_EncodingName(string value);
    internal void SetEncodingFromCharacterSet(string characterSet);
    internal WebTest get_SourceWebTest();
    internal void set_SourceWebTest(WebTest value);
    internal Guid get_SourceWebTestId();
    internal void set_SourceWebTestId(Guid value);
    public string get_UrlWithQueryString();
    internal bool get_HasValidateResponseEventHandlers();
    internal bool get_HasValidateResponseOnPageCompleteEventHandlers();
    internal bool get_HasExtractValuesEventHandlers();
    internal HtmlDocument get_RecordedHtmlDocument();
    internal void set_RecordedHtmlDocument(HtmlDocument value);
    public string get_ContentType();
    internal void set_ContentType(string value);
    public virtual object Clone();
    internal virtual void GetBindingInstances(List`1<string> bindings);
    internal void RenameDataBindings(string originalName, string replaceName);
    internal void InternalSetUrl(Uri uri);
    internal void InternalSetUrl(string url);
    internal void InternalSetUrl(string url, bool urlEncodeIfNeeded);
    internal void InvokePreRequestDatabinding(WebTest webTest);
    internal void InvokePreRequest(WebTest webTest, WebTestExecutionInstruction& instruction);
    internal void InvokePostRequest(WebTest webTest, WebTestResponse response);
    internal List`1<RuleResult> InvokeValidateResponse(WebTest webTest, WebTestResponse response, ValidationLevel validationLevel);
    internal List`1<RuleResult> InvokeValidateResponseOnPageComplete(WebTest webTest, WebTestResponse response, ValidationLevel validationLevel, TimeSpan duration);
    internal List`1<RuleResult> InvokeExtractValues(WebTest webTest, WebTestResponse response);
    internal void MovePreDependentValidationRules(WebTestRequest targetRequest);
    internal void CopyPreAndPostRequestEventHandlers(WebTestRequest targetRequest);
    internal void MoveRuleEventHandlers(WebTestRequest targetRequest);
    internal void CacheBody(ByteArrayCache cache);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestCollection : WebTestBaseCollection`1<WebTestRequest> {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestHeader : object {
    private string m_name;
    private string m_value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public WebTestRequestHeader(string name, string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public sealed virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestHeaderCollection : WebTestBaseCollection`1<WebTestRequestHeader> {
    public void Add(string name, string value);
    public bool Contains(string headerName);
    public bool Remove(string headerName);
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestPlugin : object {
    public virtual void PreRequestDataBinding(object sender, PreRequestDataBindingEventArgs e);
    public virtual void PreRequest(object sender, PreRequestEventArgs e);
    public virtual void PostRequest(object sender, PostRequestEventArgs e);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestPluginConverter : WebTestPlugin {
    private bool m_initialized;
    private string m_originalClassName;
    private WebTestRequestPlugin m_originalRequestPlugin;
    public string ClassName { get; public set; }
    public WebTestRequestPlugin WebTestRequestPlugin { get; }
    public string get_ClassName();
    public void set_ClassName(string value);
    public WebTestRequestPlugin get_WebTestRequestPlugin();
    public virtual void PreRequest(object sender, PreRequestEventArgs e);
    public virtual void PostRequest(object sender, PostRequestEventArgs e);
    private void CreateInstance();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestPluginReference : WebTestRuleBase {
    private WebTestRequestPluginReference(WebTestRequestPluginReference copy);
    public WebTestRequestPlugin CreateInstance();
    public virtual object Clone();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestPluginReferenceCollection : WebTestBaseCollection`1<WebTestRequestPluginReference> {
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestResult : object {
    private string m_requestUrl;
    private string m_reportingName;
    private string m_redirectUrl;
    private string m_requestCommand;
    private string m_requestHeaders;
    private string m_requestBodyContentType;
    private string m_requestBodyEncodingName;
    private string m_responseUrl;
    private string m_responseHeaders;
    private string m_responseContentType;
    private string m_responseStatusLine;
    private string m_exceptionMessage;
    private double m_pageResponseTime;
    private double m_responseTime;
    private string m_statusCodeString;
    private long m_contentLength;
    private int m_run;
    private bool m_submitted;
    private bool m_cached;
    private bool m_isRedirectFollow;
    private bool m_isTruncated;
    private RequestType m_requestType;
    private int m_thinkTime;
    private RequestResultStatus m_lastUpdateStatus;
    private Byte[] m_requestBodyBytes;
    private Byte[] m_responseBytes;
    private int m_requestBodyBytesHandle;
    private int m_responseBytesHandle;
    internal static Byte[] c_EmptyByteArray;
    internal static int c_EmptyByteArrayHandle;
    internal static int c_UndefinedByteArrayHandle;
    private Dictionary`2<string, object> m_context;
    private bool m_requestPassedByCode;
    private List`1<WebTestError> m_errors;
    private List`1<WebTestRequestResult> m_dependantResults;
    private List`1<RuleResult> m_validationRuleResults;
    private List`1<RuleResult> m_extractionRuleResults;
    private RuleResult m_conditionalRuleResult;
    private bool m_isConditionalConstructSpecific;
    private bool m_isSkippedRequest;
    private bool m_isRecordedResult;
    private WebTestRequest m_request;
    private WebTestResponse m_response;
    internal string RequestUrl { get; internal set; }
    internal string ReportingName { get; internal set; }
    internal string RedirectUrl { get; internal set; }
    internal string RequestHeaders { get; internal set; }
    internal Byte[] RequestBodyBytes { get; internal set; }
    internal Byte[] ResponseBodyBytes { get; }
    internal long RequestLength { get; }
    internal string RequestBodyContentType { get; internal set; }
    internal string RequestBodyEncodingName { get; internal set; }
    internal string RequestCommand { get; internal set; }
    internal string ResponseUrl { get; internal set; }
    internal string ResponseStatusLine { get; internal set; }
    internal string ResponseHeaders { get; internal set; }
    internal string ResponseContentType { get; internal set; }
    internal double PageResponseTime { get; internal set; }
    internal double ResponseTime { get; internal set; }
    internal string StatusCodeString { get; internal set; }
    internal long ContentLength { get; internal set; }
    internal long PageContentLength { get; }
    internal int Run { get; internal set; }
    internal bool Submitted { get; internal set; }
    internal bool Cached { get; internal set; }
    internal bool IsRedirectFollow { get; internal set; }
    internal bool IsTruncated { get; internal set; }
    internal RequestType RequestType { get; internal set; }
    internal int ThinkTime { get; internal set; }
    internal string ExceptionMessage { get; internal set; }
    internal Dictionary`2<string, object> Context { get; internal set; }
    internal bool IsRequestBodyText { get; }
    internal bool IsRequestBodyUrlEncodedFormPost { get; }
    internal bool IsRequestBodyMultipartFormData { get; }
    public List`1<WebTestError> Errors { get; }
    internal bool RequestPassedByCode { get; internal set; }
    public List`1<WebTestRequestResult> DependantResults { get; }
    public List`1<RuleResult> ValidationRuleResults { get; }
    public List`1<RuleResult> ExtractionRuleResults { get; }
    public RuleResult ConditionalRuleResult { get; internal set; }
    internal Encoding RequestBodyEncoding { get; }
    internal bool IsTimeout { get; }
    internal int RequestBodyBytesHandle { get; internal set; }
    internal int ResponseBytesHandle { get; internal set; }
    internal bool Successful { get; }
    internal bool IsConditionalConstructSpecific { get; }
    public bool IsSkippedRequest { get; public set; }
    internal RequestResultStatus LastUpdateStatus { get; internal set; }
    public WebTestRequest Request { get; public set; }
    public WebTestResponse Response { get; public set; }
    internal WebTestRequestResult(string templateUrlValue);
    internal WebTestRequestResult(WebTestRequest request);
    internal WebTestRequestResult(string errorMessage, string stackTrace);
    internal WebTestRequestResult(WebTestContext webTestContext, RuleResult conditionalRuleResult);
    private static WebTestRequestResult();
    internal string get_RequestUrl();
    internal void set_RequestUrl(string value);
    internal string get_ReportingName();
    internal void set_ReportingName(string value);
    internal void set_RedirectUrl(string value);
    internal string get_RedirectUrl();
    internal void set_RequestHeaders(string value);
    internal string get_RequestHeaders();
    internal void set_RequestBodyBytes(Byte[] value);
    internal Byte[] get_RequestBodyBytes();
    internal Byte[] get_ResponseBodyBytes();
    internal long get_RequestLength();
    internal void set_RequestBodyContentType(string value);
    internal string get_RequestBodyContentType();
    internal void set_RequestBodyEncodingName(string value);
    internal string get_RequestBodyEncodingName();
    internal void set_RequestCommand(string value);
    internal string get_RequestCommand();
    internal void set_ResponseUrl(string value);
    internal string get_ResponseUrl();
    internal void set_ResponseStatusLine(string value);
    internal string get_ResponseStatusLine();
    internal void set_ResponseHeaders(string value);
    internal string get_ResponseHeaders();
    internal void set_ResponseContentType(string value);
    internal string get_ResponseContentType();
    internal void set_PageResponseTime(double value);
    internal double get_PageResponseTime();
    internal void set_ResponseTime(double value);
    internal double get_ResponseTime();
    internal void set_StatusCodeString(string value);
    internal string get_StatusCodeString();
    internal void set_ContentLength(long value);
    internal long get_ContentLength();
    internal long get_PageContentLength();
    internal int get_Run();
    internal void set_Run(int value);
    internal void set_Submitted(bool value);
    internal bool get_Submitted();
    internal void set_Cached(bool value);
    internal bool get_Cached();
    internal void set_IsRedirectFollow(bool value);
    internal bool get_IsRedirectFollow();
    internal void set_IsTruncated(bool value);
    internal bool get_IsTruncated();
    internal RequestType get_RequestType();
    internal void set_RequestType(RequestType value);
    internal int get_ThinkTime();
    internal void set_ThinkTime(int value);
    internal void set_ExceptionMessage(string value);
    internal string get_ExceptionMessage();
    internal Dictionary`2<string, object> get_Context();
    internal void set_Context(Dictionary`2<string, object> value);
    internal bool get_IsRequestBodyText();
    internal bool get_IsRequestBodyUrlEncodedFormPost();
    internal bool get_IsRequestBodyMultipartFormData();
    public List`1<WebTestError> get_Errors();
    internal bool get_RequestPassedByCode();
    internal void set_RequestPassedByCode(bool value);
    public List`1<WebTestRequestResult> get_DependantResults();
    public List`1<RuleResult> get_ValidationRuleResults();
    public List`1<RuleResult> get_ExtractionRuleResults();
    public RuleResult get_ConditionalRuleResult();
    internal void set_ConditionalRuleResult(RuleResult value);
    public WebTestRequestResult GetDependantResult(string url);
    internal void AddDependantResults(WebTestRequestResult result);
    internal void AddError(WebTestError error);
    internal void AddValidationRuleResult(RuleResult result);
    internal void AddExtractionRuleResult(RuleResult result);
    internal void AddErrors(WebTestErrorCollection errors);
    internal void AddValidationRuleResults(List`1<RuleResult> ruleResults);
    internal void AddExtractionRuleResults(List`1<RuleResult> ruleResults);
    internal void CacheByteArrays(ByteArrayCache byteArrayCache);
    internal string GetRequestBodyAsString(Byte[] requestBodyBytes);
    internal Encoding get_RequestBodyEncoding();
    internal static Byte[] GetRequestBodyBytes(WebTestRequestResult requestResult, ByteArrayCache byteArrayCache);
    internal static Byte[] GetResponseBodyBytes(WebTestRequestResult requestResult, ByteArrayCache byteArrayCache);
    internal string GetResponseBodyAsString(Byte[] responseBytes);
    internal static string GetRequestCommand(WebTestRequest request, Uri uri);
    internal static string GetHeaders(WebHeaderCollection headers);
    internal string GetHeaders(WebTestRequestHeaderCollection requestHeaders);
    internal string GetRequestHeaders(WebTestRequestHeaderCollection headers);
    internal static string GetResponseStatusLine(WebTestResponse response);
    internal static string GetResponseCodeAndDescription(WebTestResponse response);
    internal List`1<KeyValuePair`2<string, string>> GetHeaderNameValuePairs();
    internal List`1<KeyValuePair`2<string, string>> GetCookieNameValuePairs();
    private List`1<KeyValuePair`2<string, string>> GetHeaderOrCookieNameValuePairs(bool cookies);
    internal List`1<KeyValuePair`2<string, string>> GetQueryParameterNameValuePairs();
    internal List`1<KeyValuePair`2<string, string>> GetFormParameterNameValuePairs(ByteArrayCache byteArrayCache);
    internal static FormPostHttpBody ParseUrlEncodedBody(Byte[] postDataBytes, Encoding requestEncoding);
    internal static FormPostHttpBody ParseMultipartBody(bool doesBrowserObjectExist, Encoding requestEncoding, string contentTypeHeader, Byte[] postDataBytes);
    internal static Encoding GetEncodingForContentType(string contentType);
    internal static List`1<ArraySegment`1<T>> ArraySplit(T[] array, T[] splitSequence);
    internal static List`1<ArraySegment`1<T>> ArraySplit(T[] array, T[] splitSequence, int startIndex, int count);
    internal bool get_IsTimeout();
    internal int get_RequestBodyBytesHandle();
    internal void set_RequestBodyBytesHandle(int value);
    internal int get_ResponseBytesHandle();
    internal void set_ResponseBytesHandle(int value);
    internal static string PageNameFromUrl(string url);
    internal bool get_Successful();
    internal bool get_IsConditionalConstructSpecific();
    public bool get_IsSkippedRequest();
    public void set_IsSkippedRequest(bool value);
    internal RequestResultStatus get_LastUpdateStatus();
    internal void set_LastUpdateStatus(RequestResultStatus value);
    public WebTestRequest get_Request();
    public void set_Request(WebTestRequest value);
    public WebTestResponse get_Response();
    public void set_Response(WebTestResponse value);
    internal void PopulateResult();
    internal void CalculatePageResponseTime();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRequestStatistics : object {
    private long m_contentLength;
    private DateTime m_startTime;
    private DateTime m_timeOfFirstByte;
    private DateTime m_timeOfLastByte;
    private long m_millisecondsToFirstByte;
    private long m_millisecondsToLastByte;
    private Stopwatch m_firstByteStopwatch;
    private Stopwatch m_lastByteStopwatch;
    private Stopwatch m_timeSinceLastByteStopwatch;
    private Stopwatch m_timeSincePageCompleteStopwatch;
    public long ContentLength { get; internal set; }
    public DateTime StartTime { get; internal set; }
    public DateTime TimeOfFirstByte { get; internal set; }
    public DateTime TimeOfLastByte { get; public set; }
    public long MillisecondsToFirstByte { get; internal set; }
    public long MillisecondsToLastByte { get; internal set; }
    public long MillisecondsSinceLastByte { get; }
    public long MillisecondsSincePageComplete { get; }
    internal void Start();
    internal void Stop();
    internal void RecordTimeToFirstByte();
    internal void RecordTimeToLastByte();
    internal void RecordTimeSincePageComplete();
    public long get_ContentLength();
    internal void set_ContentLength(long value);
    public DateTime get_StartTime();
    internal void set_StartTime(DateTime value);
    public DateTime get_TimeOfFirstByte();
    internal void set_TimeOfFirstByte(DateTime value);
    public DateTime get_TimeOfLastByte();
    public void set_TimeOfLastByte(DateTime value);
    public long get_MillisecondsToFirstByte();
    internal void set_MillisecondsToFirstByte(long value);
    public long get_MillisecondsToLastByte();
    internal void set_MillisecondsToLastByte(long value);
    public long get_MillisecondsSinceLastByte();
    public long get_MillisecondsSincePageComplete();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResponse : object {
    private string m_characterSet;
    private string m_contentEncoding;
    private long m_contentLength;
    private string m_contentType;
    private WebHeaderCollection m_headers;
    private DateTime m_lastModified;
    private string m_method;
    private Version m_protocolVersion;
    private Uri m_responseUri;
    private string m_server;
    private HttpStatusCode m_statusCode;
    private string m_statusDescription;
    private Byte[] m_bodyBytes;
    private Guid m_guid;
    private string m_bodyString;
    private HtmlDocument m_htmlDocument;
    private ByteArrayCache m_byteArrayCache;
    private int m_bodyBytesCacheHandle;
    private WebTestRequestStatistics m_statistics;
    private XmlDocument m_xmlDocument;
    private string m_embeddedContentType;
    internal string EmbeddedContentType { get; }
    public bool IsBodyEmpty { get; }
    public bool IsHtml { get; }
    public bool IsText { get; }
    public bool IsXml { get; }
    public HtmlDocument HtmlDocument { get; internal set; }
    public XmlDocument XmlDocument { get; }
    public string BodyString { get; internal set; }
    public Byte[] BodyBytes { get; public set; }
    internal int BodyBytesCacheHandle { get; internal set; }
    public WebTestRequestStatistics Statistics { get; internal set; }
    public Guid Guid { get; public set; }
    public string CharacterSet { get; internal set; }
    public string ContentEncoding { get; internal set; }
    public long ContentLength { get; internal set; }
    public string ContentType { get; internal set; }
    public CookieCollection Cookies { get; }
    public WebHeaderCollection Headers { get; internal set; }
    public DateTime LastModified { get; internal set; }
    public string Method { get; internal set; }
    public Version ProtocolVersion { get; internal set; }
    public Uri ResponseUri { get; internal set; }
    public string Server { get; internal set; }
    public HttpStatusCode StatusCode { get; internal set; }
    public string StatusDescription { get; }
    internal WebTestResponse(HttpWebResponse response, Byte[] responseBytes, WebTestRequestStatistics webTestRequestStatistics);
    internal WebTestResponse(HttpWebResponse response, Byte[] responseBytes, WebTestRequestStatistics webTestRequestStatistics, Guid guidfromrequest);
    internal WebTestResponse(WebTestResponse response);
    internal string get_EmbeddedContentType();
    public bool get_IsBodyEmpty();
    public bool get_IsHtml();
    public bool get_IsText();
    public bool get_IsXml();
    public HtmlDocument get_HtmlDocument();
    internal void set_HtmlDocument(HtmlDocument value);
    public XmlDocument get_XmlDocument();
    public string get_BodyString();
    internal void set_BodyString(string value);
    public Byte[] get_BodyBytes();
    public void set_BodyBytes(Byte[] value);
    internal int get_BodyBytesCacheHandle();
    internal void set_BodyBytesCacheHandle(int value);
    public WebTestRequestStatistics get_Statistics();
    internal void set_Statistics(WebTestRequestStatistics value);
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public string get_CharacterSet();
    internal void set_CharacterSet(string value);
    public string get_ContentEncoding();
    internal void set_ContentEncoding(string value);
    public long get_ContentLength();
    internal void set_ContentLength(long value);
    public string get_ContentType();
    internal void set_ContentType(string value);
    public CookieCollection get_Cookies();
    public WebHeaderCollection get_Headers();
    internal void set_Headers(WebHeaderCollection value);
    public DateTime get_LastModified();
    internal void set_LastModified(DateTime value);
    public string get_Method();
    internal void set_Method(string value);
    public Version get_ProtocolVersion();
    internal void set_ProtocolVersion(Version value);
    public Uri get_ResponseUri();
    internal void set_ResponseUri(Uri value);
    public string get_Server();
    internal void set_Server(string value);
    public HttpStatusCode get_StatusCode();
    internal void set_StatusCode(HttpStatusCode value);
    public string get_StatusDescription();
    internal void SetResponseHeaders(string headerString);
    internal static bool IsMetaOrBody(HtmlToken token);
    internal static string ParseResponseBody(Uri responseUri, string contentType, Byte[] bodyBytes, bool allowNullHtmlDocument, HtmlDocument& htmlDocument, String& embeddedContentType);
    internal void CacheBody(ByteArrayCache cache);
    internal static bool ContentTypeIsHtml(string contentType);
    internal static bool ContentTypeIsText(string contentType);
    internal static bool ContentTypeIsXml(string contentType);
    public sealed virtual object Clone();
}
[TypeConverterAttribute("Microsoft.VisualStudio.TestTools.WebTesting.WebTestResponseCodeConverter")]
public enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestResponseCode : Enum {
    public int value__;
    public static WebTestResponseCode None;
    public static WebTestResponseCode Continue;
    public static WebTestResponseCode SwitchingProtocols;
    public static WebTestResponseCode Ok;
    public static WebTestResponseCode Created;
    public static WebTestResponseCode Accepted;
    public static WebTestResponseCode NonAuthoritativeInformation;
    public static WebTestResponseCode NoContent;
    public static WebTestResponseCode ResetContent;
    public static WebTestResponseCode PartialContent;
    public static WebTestResponseCode MultipleChoices;
    public static WebTestResponseCode Moved;
    public static WebTestResponseCode Redirect;
    public static WebTestResponseCode RedirectMethod;
    public static WebTestResponseCode NotModified;
    public static WebTestResponseCode UseProxy;
    public static WebTestResponseCode Unused;
    public static WebTestResponseCode TemporaryRedirect;
    public static WebTestResponseCode BadRequest;
    public static WebTestResponseCode Unauthorized;
    public static WebTestResponseCode PaymentRequired;
    public static WebTestResponseCode Forbidden;
    public static WebTestResponseCode NotFound;
    public static WebTestResponseCode MethodNotAllowed;
    public static WebTestResponseCode NotAcceptable;
    public static WebTestResponseCode ProxyAuthenticationRequired;
    public static WebTestResponseCode RequestTimeout;
    public static WebTestResponseCode Conflict;
    public static WebTestResponseCode Gone;
    public static WebTestResponseCode LengthRequired;
    public static WebTestResponseCode PreconditionFailed;
    public static WebTestResponseCode RequestEntityTooLarge;
    public static WebTestResponseCode RequestUriTooLong;
    public static WebTestResponseCode UnsupportedMediaType;
    public static WebTestResponseCode RequestedRangeNotSatisfied;
    public static WebTestResponseCode ExpectationFailed;
    public static WebTestResponseCode InternalServerError;
    public static WebTestResponseCode NotImplemented;
    public static WebTestResponseCode BadGateway;
    public static WebTestResponseCode ServiceUnavailable;
    public static WebTestResponseCode GatewayTimeout;
    public static WebTestResponseCode HttpVersionNotSupported;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResponseCodeConverter : BaseEnumStringConverter`1<WebTestResponseCode> {
    protected virtual WebTestResponseCode ConvertFromStringToEnum(string value);
    protected virtual string ConvertFromEnumToString(WebTestResponseCode value);
    protected virtual String[] PopulateStandardValues();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultComment : WebTestResultUnit {
    private string m_comment;
    public string Comment { get; internal set; }
    public bool Passed { get; }
    internal WebTestResultComment(string comment);
    internal WebTestResultComment(WebTestResultComment copy);
    public virtual object Clone();
    public string get_Comment();
    internal void set_Comment(string value);
    public virtual long GetResponseSize();
    public virtual long GetRequestSize();
    public virtual bool get_Passed();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultCondition : WebTestResultGroup {
    private WebTestCondition m_condition;
    private WebTestRequestResult m_requestResult;
    private string m_uniqueStringId;
    private string m_conditionStringRepresentation;
    private bool m_errorOccurred;
    private bool m_stopCondition;
    private WebTestConditionRunStatus m_runStatus;
    public WebTestRequestResult RequestResult { get; internal set; }
    public string UniqueStringId { get; internal set; }
    public string ConditionStringRepresentation { get; internal set; }
    public bool ErrorOccurred { get; internal set; }
    public bool StopCondition { get; internal set; }
    internal WebTestConditionRunStatus RunStatus { get; internal set; }
    public bool Passed { get; }
    internal WebTestResultCondition(WebTestCondition condition);
    internal WebTestResultCondition(WebTestCondition condition, string conditionStringRepresentation);
    internal WebTestResultCondition(WebTestResultCondition copy);
    public virtual object Clone();
    public WebTestRequestResult get_RequestResult();
    internal void set_RequestResult(WebTestRequestResult value);
    public string get_UniqueStringId();
    internal void set_UniqueStringId(string value);
    public string get_ConditionStringRepresentation();
    internal void set_ConditionStringRepresentation(string value);
    public bool get_ErrorOccurred();
    internal void set_ErrorOccurred(bool value);
    public bool get_StopCondition();
    internal void set_StopCondition(bool value);
    internal WebTestConditionRunStatus get_RunStatus();
    internal void set_RunStatus(WebTestConditionRunStatus value);
    internal void AddConditionallySkippedChildren();
    public bool IsConditionalRuleMet();
    internal void Update(WebTestResultCondition updatedConditionResult);
    public virtual bool get_Passed();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultDetails : object {
    private ByteArrayCache m_byteArrayCache;
    private Stack`1<WebTestResultGroup> m_inProgressStack;
    private Dictionary`2<string, WebTestResultGroup> m_implicitlyClosedGroups;
    private Dictionary`2<string, WebTestResultGroup> m_currentlyOpenedGroups;
    private List`1<WebTestCorrelationResult> m_correlationResults;
    private ModificationManager m_modificationManager;
    private List`1<WebTestResultIteration> m_webTestIterations;
    private string m_testName;
    internal ByteArrayCache ByteArrayCache { get; internal set; }
    public List`1<WebTestResultIteration> WebTestIterations { get; internal set; }
    public string TestName { get; internal set; }
    public List`1<WebTestCorrelationResult> CorrelationResults { get; }
    internal ByteArrayCache get_ByteArrayCache();
    internal void set_ByteArrayCache(ByteArrayCache value);
    public List`1<WebTestResultIteration> get_WebTestIterations();
    internal void set_WebTestIterations(List`1<WebTestResultIteration> value);
    public string get_TestName();
    internal void set_TestName(string value);
    public List`1<WebTestCorrelationResult> get_CorrelationResults();
    internal void AttachResultViewer();
    internal void DetachResultViewer();
    internal void TestCompleted();
    internal void GetUnprocessedUpdates(List`1& newModifications, Queue`1& statusMessages);
    internal void GetUnprocessedUpdates(List`1& newModifications, WebTestStatusMessage& currentStatusMessage);
    internal void StatusChanged(WebTestStatusMessage statusMessage);
    internal void StartIteration();
    internal void StartTransaction(bool isIncludedTest, string transactionName, int declarativeWebTestItemId, Guid sourceWebTestId);
    internal void StartCondition(WebTestResultCondition condition);
    internal void StartLoop(WebTestResultLoop loop);
    internal void StartLoopIteration(WebTestResultLoopIteration loopIteration);
    internal void StopIteration();
    internal void StopTransaction(string name, double responseTime);
    internal void StopCondition(WebTestResultCondition conditionResult);
    internal void EndConditionalRuleExecution(WebTestResultCondition conditionResult);
    internal void StopLoop(WebTestResultLoop loopResult);
    internal void StopLoopIteration(WebTestResultLoopIteration loopIterationResult);
    internal void AddComment(Comment webTestComment);
    internal void AddPage(WebTestRequestResult requestResult);
    internal void AddCorrelationResult(WebTestCorrelationResult correlationResult);
    private void AddChildToCurrentGroup(WebTestResultUnit child);
    private void OnAddedItem(Type modificationType, object item);
    public List`1<WebTestRequestResult> GetWebTestRequestResults();
    private void AddWebTestRequestResultsForGroup(List`1<WebTestRequestResult> requestResults, List`1<WebTestResultUnit> resultUnits);
    internal void Clear();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultDetailsSerializationBinder : SerializationBinder {
    private static List`1<List`1<string>> SupportedAssemblies;
    private static WebTestResultDetailsSerializationBinder();
    public virtual Type BindToType(string assemblyName, string typeName);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultDetailsSerializer : object {
    private BinaryFormatter m_formatter;
    public void Serialize(WebTestResultDetails details, string filePath);
    public WebTestResultDetails Deserialize(string filePath);
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultGroup : WebTestResultUnit {
    private List`1<WebTestResultUnit> m_children;
    public List`1<WebTestResultUnit> Children { get; internal set; }
    public bool Passed { get; }
    unknown WebTestResultStatus ResultStatus {internal set; }
    internal WebTestResultGroup(WebTestResultGroup copy);
    public List`1<WebTestResultUnit> get_Children();
    internal void set_Children(List`1<WebTestResultUnit> value);
    public WebTestResultUnit GetItem(int itemId);
    public virtual long GetResponseSize();
    public virtual long GetRequestSize();
    public virtual bool get_Passed();
    internal virtual void set_ResultStatus(WebTestResultStatus value);
    protected void AddNonExecutedChildren(List`1<WebTestResultUnit> children, WebTestItemCollection itemCollection, WebTestResultStatus resultStatus);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultIteration : WebTestResultGroup {
    private int m_iterationNumber;
    public int IterationNumber { get; internal set; }
    internal WebTestResultIteration(int iterationNumber);
    internal WebTestResultIteration(WebTestResultIteration copy);
    public virtual object Clone();
    public int get_IterationNumber();
    internal void set_IterationNumber(int value);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultLoop : WebTestResultGroup {
    private WebTestLoop m_loop;
    private string m_uniqueStringId;
    private string m_loopStringRepresentation;
    private int m_numberOfIterations;
    internal WebTestLoopRunStatus m_runStatus;
    public string UniqueStringId { get; internal set; }
    public string LoopStringRepresentation { get; internal set; }
    public int NumberOfIterations { get; internal set; }
    internal WebTestLoopRunStatus RunStatus { get; internal set; }
    internal WebTestResultLoop(WebTestLoop loop);
    internal WebTestResultLoop(WebTestLoop loop, string loopStringRepresentation);
    internal WebTestResultLoop(WebTestResultLoop copy);
    public virtual object Clone();
    public string get_UniqueStringId();
    internal void set_UniqueStringId(string value);
    public string get_LoopStringRepresentation();
    internal void set_LoopStringRepresentation(string value);
    public int get_NumberOfIterations();
    internal void set_NumberOfIterations(int value);
    internal WebTestLoopRunStatus get_RunStatus();
    internal void set_RunStatus(WebTestLoopRunStatus value);
    internal void AddConditionallySkippedChildren();
    internal void Update(WebTestResultLoop updatedLoopResult);
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultLoopIteration : WebTestResultGroup {
    private int m_iterationNumber;
    private WebTestRequestResult m_requestResult;
    private string m_uniqueStringId;
    private bool m_errorOccurred;
    private WebTestLoop m_loop;
    private bool m_stopLoopIteration;
    private WebTestLoopIterationRunStatus m_runStatus;
    public int IterationNumber { get; internal set; }
    public WebTestRequestResult RequestResult { get; internal set; }
    public string UniqueStringId { get; internal set; }
    public bool ErrorOccurred { get; internal set; }
    public bool StopLoopIteration { get; internal set; }
    internal WebTestLoopIterationRunStatus RunStatus { get; internal set; }
    public bool Passed { get; }
    internal WebTestResultLoopIteration(WebTestLoop loop, int iterationNumber);
    internal WebTestResultLoopIteration(WebTestResultLoopIteration copy);
    public virtual object Clone();
    public int get_IterationNumber();
    internal void set_IterationNumber(int value);
    public WebTestRequestResult get_RequestResult();
    internal void set_RequestResult(WebTestRequestResult value);
    public string get_UniqueStringId();
    internal void set_UniqueStringId(string value);
    public bool get_ErrorOccurred();
    internal void set_ErrorOccurred(bool value);
    public bool get_StopLoopIteration();
    internal void set_StopLoopIteration(bool value);
    internal WebTestLoopIterationRunStatus get_RunStatus();
    internal void set_RunStatus(WebTestLoopIterationRunStatus value);
    internal void AddConditionallySkippedChildren();
    internal List`1<WebTestResultUnit> GetTemplateChildren();
    public bool IsConditionalRuleMet();
    internal void Update(WebTestResultLoopIteration updatedLoopIterationResult);
    public virtual bool get_Passed();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultPage : WebTestResultUnit {
    private WebTestRequestResult m_requestResult;
    private List`1<WebTestResultPage> m_redirectedPages;
    public WebTestRequestResult RequestResult { get; internal set; }
    public List`1<WebTestResultPage> RedirectedPages { get; internal set; }
    public bool Passed { get; }
    internal WebTestResultPage(WebTestRequestResult requestResult);
    internal WebTestResultPage(WebTestResultPage copy);
    public virtual object Clone();
    public WebTestRequestResult get_RequestResult();
    internal void set_RequestResult(WebTestRequestResult value);
    public List`1<WebTestResultPage> get_RedirectedPages();
    internal void set_RedirectedPages(List`1<WebTestResultPage> value);
    public virtual bool get_Passed();
    public virtual long GetResponseSize();
    public virtual long GetRequestSize();
}
public enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultStatus : Enum {
    public int value__;
    public static WebTestResultStatus Completed;
    public static WebTestResultStatus TemplateResult;
    public static WebTestResultStatus Skipped;
    public static WebTestResultStatus ConditionallySkipped;
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultTransaction : WebTestResultGroup {
    private string m_name;
    private double m_responseTime;
    private bool m_isIncludedTest;
    public string Name { get; internal set; }
    public bool IsIncludedTest { get; internal set; }
    public double ResponseTime { get; internal set; }
    internal WebTestResultTransaction(bool isIncludedTest, string name);
    internal WebTestResultTransaction(WebTestResultTransaction copy);
    public virtual object Clone();
    public string get_Name();
    internal void set_Name(string value);
    public bool get_IsIncludedTest();
    internal void set_IsIncludedTest(bool value);
    public double get_ResponseTime();
    internal void set_ResponseTime(double value);
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestResultUnit : object {
    private WebTestResultStatus m_resultStatus;
    private int m_declarativeWebTestItemId;
    private Guid m_sourceWebTestId;
    public bool Passed { get; }
    public WebTestResultStatus ResultStatus { get; internal set; }
    public int DeclarativeWebTestItemId { get; internal set; }
    public Guid SourceWebTestId { get; internal set; }
    public bool IsCompleted { get; }
    internal bool IsTemplate { get; }
    public bool IsSkipped { get; }
    internal WebTestResultUnit(WebTestResultUnit copy);
    public abstract virtual long GetResponseSize();
    public abstract virtual long GetRequestSize();
    public abstract virtual bool get_Passed();
    public abstract virtual object Clone();
    public virtual WebTestResultStatus get_ResultStatus();
    internal virtual void set_ResultStatus(WebTestResultStatus value);
    public int get_DeclarativeWebTestItemId();
    internal void set_DeclarativeWebTestItemId(int value);
    public Guid get_SourceWebTestId();
    internal void set_SourceWebTestId(Guid value);
    public bool get_IsCompleted();
    internal bool get_IsTemplate();
    public bool get_IsSkipped();
}
public abstract class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRuleBase : object {
    private WebTestClassName m_className;
    private string m_displayName;
    private string m_description;
    private RuleExecutionOrder m_executionOrder;
    private PropertyCollection m_propertiesCollection;
    private Type m_type;
    internal WebTestClassName Class { get; internal set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public PropertyCollection Properties { get; }
    public RuleExecutionOrder ExecutionOrder { get; public set; }
    public Type Type { get; public set; }
    protected WebTestRuleBase(Type type);
    protected WebTestRuleBase(WebTestRuleBase copy);
    internal WebTestClassName get_Class();
    internal void set_Class(WebTestClassName value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public PropertyCollection get_Properties();
    public RuleExecutionOrder get_ExecutionOrder();
    public void set_ExecutionOrder(RuleExecutionOrder value);
    public Type get_Type();
    public void set_Type(Type value);
    public abstract virtual object Clone();
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestRuleError : WebTestError {
    private PropertyCollection m_ruleProperties;
    public PropertyCollection RuleProperties { get; public set; }
    public void set_RuleProperties(PropertyCollection value);
    public PropertyCollection get_RuleProperties();
}
internal enum Microsoft.VisualStudio.TestTools.WebTesting.WebTestRunStatus : Enum {
    public int value__;
    public static WebTestRunStatus Initializing;
    public static WebTestRunStatus PausedAtStart;
    public static WebTestRunStatus Resuming;
    public static WebTestRunStatus Pausing;
    public static WebTestRunStatus Thinking;
    public static WebTestRunStatus Submitting;
    public static WebTestRunStatus LoadingDependants;
    public static WebTestRunStatus Redirecting;
    public static WebTestRunStatus StoppedBeforeSubmit;
    public static WebTestRunStatus PreTestCaseCallbackError;
    public static WebTestRunStatus FatalError;
    public static WebTestRunStatus IterationStarting;
    public static WebTestRunStatus IterationComplete;
    public static WebTestRunStatus TestComplete;
    public static WebTestRunStatus DataExhausted;
    public static WebTestRunStatus ResultAdded;
    public static WebTestRunStatus Unknown;
}
internal class Microsoft.VisualStudio.TestTools.WebTesting.WebTestStatusMessage : object {
    private WebTestRunStatus m_runStatus;
    private object m_data;
    public WebTestRunStatus RunStatus { get; }
    public object Data { get; }
    public WebTestStatusMessage(WebTestRunStatus runStatus, object data);
    public WebTestRunStatus get_RunStatus();
    public object get_Data();
}
public class Microsoft.VisualStudio.TestTools.WebTesting.WebTestStoppedException : WebTestException {
    public WebTestStoppedException(string message);
    public WebTestStoppedException(string message, Exception innerException);
    protected WebTestStoppedException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestTools.WebTesting.WorkItemAttribute : Attribute {
    private int m_id;
    public int Id { get; }
    public WorkItemAttribute(int id);
    public int get_Id();
}
[LocalizableDisplayNameAttribute("SetContextParameterValueName")]
[LocalizableDescriptionAttribute("SetContextParameterValueDescription")]
public class Microsoft.VisualStudio.WebTesting.PowerTools.SharePoint.MTSL.General.SPLTPT_MTSL_SetContextParameterValue : WebTestRequestPlugin {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sContextParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sContextParameterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bDoReplace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sReplaceFindPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private string <sReplaceWith>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bUseRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bApplyBeforeRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bHTMLEncode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bHTMLDecode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bURLEncode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bURLDecode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bBase64Encode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bBase64Decode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <bRemoveUnicodeEscapeSequences>k__BackingField;
    [LocalizableDisplayNameAttribute("Enabled")]
[LocalizableDescriptionAttribute("EnabledDescription")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterName")]
[LocalizableDescriptionAttribute("ContextParameterDescription")]
[DefaultValueAttribute("")]
public string sContextParameterName { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterValueName")]
[LocalizableDescriptionAttribute("ContextParameterValueDescription")]
[DefaultValueAttribute("")]
public string sContextParameterValue { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterReplaceName")]
[LocalizableDescriptionAttribute("ContextParameterReplaceDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryReplace")]
public bool bDoReplace { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterPatternName")]
[LocalizableDescriptionAttribute("ContextParameterPatternDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryReplace")]
public string sReplaceFindPattern { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterReplaceWithName")]
[LocalizableDescriptionAttribute("ContextParameterReplaceWithDescription")]
[DefaultValueAttribute("")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryReplace")]
public string sReplaceWith { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterUseRegexName")]
[LocalizableDescriptionAttribute("ContextParameterUseRegexDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryReplace")]
public bool bUseRegEx { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterApplyBeforeRequestName")]
[LocalizableDescriptionAttribute("ContextParameterApplyBeforeRequestDescritpion")]
[DefaultValueAttribute("True")]
public bool bApplyBeforeRequest { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterHtmlEncodeName")]
[LocalizableDescriptionAttribute("ContextParameterHtmlEncodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryTransform")]
public bool bHTMLEncode { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterHtmlDecodeName")]
[LocalizableDescriptionAttribute("ContextParameterHtmlDecodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryTransform")]
public bool bHTMLDecode { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterUrlEncodeName")]
[LocalizableDescriptionAttribute("ContextParameterUrlEncodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryTransform")]
public bool bURLEncode { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterUrlDecodeName")]
[LocalizableDescriptionAttribute("ContextParameterUrlDecodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryTransform")]
public bool bURLDecode { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterBase64EncodeName")]
[LocalizableDescriptionAttribute("ContextParameterBase64EncodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryTransform")]
public bool bBase64Encode { get; public set; }
    [LocalizableDisplayNameAttribute("ContextParameterBase64DecodeName")]
[LocalizableDescriptionAttribute("ContextParameterBase64DecodeDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryTransform")]
public bool bBase64Decode { get; public set; }
    [DisplayNameAttribute("ContextParameterRemoveUnicodeEscapeSequencesName")]
[DescriptionAttribute("ContextParameterRemoveUnicodeEscapeSequencesDescription")]
[DefaultValueAttribute("False")]
[LocalizableCategoryAttribute("ContextParameterNameCategoryTransform")]
public bool bRemoveUnicodeEscapeSequences { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_sContextParameterName();
    [CompilerGeneratedAttribute]
public void set_sContextParameterName(string value);
    [CompilerGeneratedAttribute]
public string get_sContextParameterValue();
    [CompilerGeneratedAttribute]
public void set_sContextParameterValue(string value);
    [CompilerGeneratedAttribute]
public bool get_bDoReplace();
    [CompilerGeneratedAttribute]
public void set_bDoReplace(bool value);
    [CompilerGeneratedAttribute]
public string get_sReplaceFindPattern();
    [CompilerGeneratedAttribute]
public void set_sReplaceFindPattern(string value);
    [CompilerGeneratedAttribute]
public string get_sReplaceWith();
    [CompilerGeneratedAttribute]
public void set_sReplaceWith(string value);
    [CompilerGeneratedAttribute]
public bool get_bUseRegEx();
    [CompilerGeneratedAttribute]
public void set_bUseRegEx(bool value);
    [CompilerGeneratedAttribute]
public bool get_bApplyBeforeRequest();
    [CompilerGeneratedAttribute]
public void set_bApplyBeforeRequest(bool value);
    [CompilerGeneratedAttribute]
public bool get_bHTMLEncode();
    [CompilerGeneratedAttribute]
public void set_bHTMLEncode(bool value);
    [CompilerGeneratedAttribute]
public bool get_bHTMLDecode();
    [CompilerGeneratedAttribute]
public void set_bHTMLDecode(bool value);
    [CompilerGeneratedAttribute]
public bool get_bURLEncode();
    [CompilerGeneratedAttribute]
public void set_bURLEncode(bool value);
    [CompilerGeneratedAttribute]
public bool get_bURLDecode();
    [CompilerGeneratedAttribute]
public void set_bURLDecode(bool value);
    [CompilerGeneratedAttribute]
public bool get_bBase64Encode();
    [CompilerGeneratedAttribute]
public void set_bBase64Encode(bool value);
    [CompilerGeneratedAttribute]
public bool get_bBase64Decode();
    [CompilerGeneratedAttribute]
public void set_bBase64Decode(bool value);
    [CompilerGeneratedAttribute]
public bool get_bRemoveUnicodeEscapeSequences();
    [CompilerGeneratedAttribute]
public void set_bRemoveUnicodeEscapeSequences(bool value);
    public virtual void PreRequestDataBinding(object sender, PreRequestDataBindingEventArgs e);
    public virtual void PostRequest(object sender, PostRequestEventArgs e);
    private void DoProcess(WebTestContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
