[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.TestTools.UITest.CodeGeneration.UITestInterpreterCore : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestEventArgs> UITestStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestEventArgs> UITestCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestActionListEventArgs> ActionListStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestActionListEventArgs> ActionListCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestActionEventArgs> ActionStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestActionEventArgs> ActionCompleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestProgressEventArgs> InterpreterProgress;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestWarningEventArgs> InterpreterWarning;
    [CompilerGeneratedAttribute]
private EventHandler`1<UITestErrorEventArgs> InterpreterError;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) playbackInProgress;
    private UITest playbackUITest;
    private UITestActionInvoker actionInvoker;
    private int totalNumberOfActions;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) playbackCancelled;
    private UITestAction currentAction;
    private bool disposed;
    public UITest PlaybackUITest { get; }
    public UITestActionInvoker ActionInvoker { get; public set; }
    protected internal bool PlaybackInProgress { get; }
    protected internal UITestAction CurrentAction { get; }
    public UITestInterpreterCore(UITest uiTest);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool MoveToNextStep();
    public bool MoveToPreviousStep();
    public bool MoveToFirstStep();
    public bool MoveToLastStep();
    public bool MoveToStepNumber(int stepNumber);
    public virtual UITestPlaybackResult ExecuteStep();
    public virtual UITestPlaybackResult ExecuteTest();
    public virtual UITestPlaybackResult ExecuteTest(long startId, long stopId);
    public static void ExecuteTest(UITest uiTest, long startId, long stopId);
    public static void ExecuteTest(UITest uiTest);
    public virtual void Cancel();
    public virtual UITest get_PlaybackUITest();
    public virtual UITestActionInvoker get_ActionInvoker();
    public virtual void set_ActionInvoker(UITestActionInvoker value);
    [CompilerGeneratedAttribute]
public void add_UITestStarted(EventHandler`1<UITestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UITestStarted(EventHandler`1<UITestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UITestCompleted(EventHandler`1<UITestEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UITestCompleted(EventHandler`1<UITestEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ActionListStarted(EventHandler`1<UITestActionListEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ActionListStarted(EventHandler`1<UITestActionListEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ActionListCompleted(EventHandler`1<UITestActionListEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ActionListCompleted(EventHandler`1<UITestActionListEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ActionStarted(EventHandler`1<UITestActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ActionStarted(EventHandler`1<UITestActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ActionCompleted(EventHandler`1<UITestActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ActionCompleted(EventHandler`1<UITestActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InterpreterProgress(EventHandler`1<UITestProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InterpreterProgress(EventHandler`1<UITestProgressEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InterpreterWarning(EventHandler`1<UITestWarningEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InterpreterWarning(EventHandler`1<UITestWarningEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_InterpreterError(EventHandler`1<UITestErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InterpreterError(EventHandler`1<UITestErrorEventArgs> value);
    private void IterateActionList(UITestActionListSection ActionListSection);
    private UITestPlaybackResult IterateActionList(UITestActionListSection ActionListSection, long startId, long stopId);
    private UITestPlaybackResult ExecuteStepInternal(UITestAction action, Boolean& retryStep);
    private bool HandleStepExecutionException(Exception ex, UITestAction action, UITestPlaybackResult& resultPlayback, Boolean& retryStep);
    private void ExecuteActionInternal(UITestAction action);
    internal static string ActionErrorMessage(UITestAction action);
    private void OnProgress(int currentActionCount, UITestAction action);
    private void RaiseErrorAction(UITestException ex);
    internal static string ActionDetailsMessage(UITestAction action);
    protected internal bool get_PlaybackInProgress();
    protected internal UITestAction get_CurrentAction();
    protected internal void RaisePlaybackProgressEvent(UITestProgressEventArgs arg);
    protected internal virtual void ExecuteAction(UITestAction action, UIMap map);
    protected internal virtual bool IsExpectedExceptionFromActionExecution(Exception ex);
    protected internal virtual void OnErrorHandledByUser(UITestErrorEventArgs eventArgs);
    protected internal virtual void LogActionExecutionException(Exception exception);
}
public enum Microsoft.VisualStudio.TestTools.UITest.CodeGeneration.UITestPlaybackResult : Enum {
    public int value__;
    public static UITestPlaybackResult Passed;
    public static UITestPlaybackResult Failed;
    public static UITestPlaybackResult Canceled;
}
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.VisualStudio.TestTools.UITest.Common.ActionList : object {
    private List`1<UITestAction> actions;
    private int currentIndex;
    private bool currentStateValid;
    public List`1<UITestAction> Actions { get; }
    public int Count { get; }
    internal UITestAction Current { get; }
    public virtual bool Equals(object other);
    public bool Equals(ActionList actionList);
    public virtual int GetHashCode();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestTools.UITest.Common.ActionList/<GetActionsOfType>d__4`1")]
public IEnumerable`1<T> GetActionsOfType();
    public UITestAction Find(long id);
    public int FindIndex(long id);
    public void Delete(long id);
    public ICollection`1<UITestAction> GetRange(long startId, long stopId);
    public int AddRange(IEnumerable`1<UITestAction> addActions);
    public int DeleteRange(long startId, long stopId);
    public List`1<UITestAction> get_Actions();
    public int get_Count();
    internal bool MoveNext();
    internal bool MovePrevious();
    internal bool MoveFirst();
    internal bool MoveLast();
    internal bool MoveTo(int index);
    internal void Reset();
    internal void Add(UITestAction action);
    internal void Insert(int index, UITestAction action);
    internal UITestAction get_Current();
    private bool IsCurrentStateValid();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.ActionListSerializer : object {
    private static XmlAttributeOverrides overrides;
    private static XmlSerializer serializer;
    private static XmlSerializer serializerWithoutNamespace;
    private static object lockObject;
    private static ActionListSerializer();
    public static UITest Deserialize(Stream reader);
    public static void Serialize(Stream stream, UITest testcase);
    private static void FixVerifyConfigurationAction(UITest testcase);
    private static void UpdateConfigurationForAction(List`1<UITestAction> actionList, UITestEnvironment configuration);
    private static void FixUIElementNameInUITest(UITest testcase);
    private static void FixUIElementNameInActionList(List`1<UITestAction> actionList, IDictionary`2<IUITechnologyElement, string> dictionary);
    private static void FixActionId(UITest testcase);
    private static int UpdateId(ICollection`1<UITestAction> actions, int counter, ValueMap valueMap);
    private static XmlAttributeOverrides CreateOverrides();
    private static XmlSerializer GetSerializer(bool isUITestWithoutNamespace);
    private static bool IsVS2010Beta2Format(Stream reader);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.ActionTypeInfo : object {
    internal static Type[] SupportedActionTypes { get; }
    internal static Type[] get_SupportedActionTypes();
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.AggregatedAction : UITestAction {
    protected AggregatedAction(UITechnologyElement uiElement);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.AssertAction : ValidationAction {
    private AssertCondition propertyCondition;
    private string type;
    private Type valueType;
    [XmlElementAttribute("Type")]
public string TypeName { get; public set; }
    [XmlIgnoreAttribute]
public Type ValueType { get; }
    public string ExpectedValue { get; public set; }
    public AssertCondition PropertyCondition { get; public set; }
    public AssertAction(UITechnologyElement uiElement, string propertyName, string expectedValue, AssertCondition propertyCondition, Type type);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public string get_TypeName();
    public void set_TypeName(string value);
    public Type get_ValueType();
    public virtual string get_ExpectedValue();
    public virtual void set_ExpectedValue(string value);
    public AssertCondition get_PropertyCondition();
    public void set_PropertyCondition(AssertCondition value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.AssertCondition : Enum {
    public int value__;
    public static AssertCondition AreEqual;
    public static AssertCondition AreNotEqual;
    public static AssertCondition IsNull;
    public static AssertCondition IsNotNull;
    public static AssertCondition IsInstanceOfType;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.BrowserAction : AggregatedAction {
    private BrowserActionType actionType;
    public BrowserActionType ActionType { get; public set; }
    [XmlIgnoreAttribute]
public string ActionName { get; }
    public BrowserAction(UITechnologyElement uiElement, BrowserActionType actionType);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public BrowserActionType get_ActionType();
    public void set_ActionType(BrowserActionType value);
    public virtual string get_ActionName();
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.BrowserActionType : Enum {
    public int value__;
    public static BrowserActionType Back;
    public static BrowserActionType Forward;
    public static BrowserActionType Refresh;
    public static BrowserActionType Stop;
    public static BrowserActionType Close;
    public static BrowserActionType ExecuteScript;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.CommonUtility : object {
    internal static void PopulateAdditionalEnvironmentSettings(UITestEnvironment environment);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.CustomInvoker : MulticastDelegate {
    public CustomInvoker(object object, IntPtr method);
    public virtual void Invoke(UITestAction action, UIMap map);
    public virtual IAsyncResult BeginInvoke(UITestAction action, UIMap map, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.DelayAction : UITestAction {
    private int duration;
    public int Duration { get; public set; }
    public DelayAction(int duration);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public int get_Duration();
    public void set_Duration(int value);
    internal virtual string GetParameterString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.DragAction : InputAction {
    private MouseButtons mouseButton;
    private Point startLocation;
    private Point moveBy;
    public MouseButtons MouseButton { get; public set; }
    public Point StartLocation { get; public set; }
    public Point MoveBy { get; public set; }
    public DragAction(UITechnologyElement uiElement, MouseButtons mouseButton);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public MouseButtons get_MouseButton();
    public void set_MouseButton(MouseButtons value);
    public Point get_StartLocation();
    public void set_StartLocation(Point value);
    public Point get_MoveBy();
    public void set_MoveBy(Point value);
    internal virtual void ShallowCopy(UITestAction source, bool isSeparateAction);
    internal virtual string GetParameterString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.DragDropAction : InputAction {
    private MouseButtons mouseButton;
    private UITechnologyElement targetElement;
    private string targetElementName;
    private Point startLocation;
    private Point stopLocation;
    public string TargetElementName { get; public set; }
    [XmlIgnoreAttribute]
public UITechnologyElement TargetElement { get; public set; }
    [XmlIgnoreAttribute]
public string SourceElementName { get; public set; }
    [XmlIgnoreAttribute]
public UITechnologyElement SourceElement { get; public set; }
    public MouseButtons MouseButton { get; public set; }
    public Point StartLocation { get; public set; }
    public Point StopLocation { get; public set; }
    public DragDropAction(UITechnologyElement sourceUIElement, UITechnologyElement targetUIElement, MouseButtons mouseButton);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public string get_TargetElementName();
    public void set_TargetElementName(string value);
    public UITechnologyElement get_TargetElement();
    public void set_TargetElement(UITechnologyElement value);
    public string get_SourceElementName();
    public void set_SourceElementName(string value);
    public UITechnologyElement get_SourceElement();
    public void set_SourceElement(UITechnologyElement value);
    public MouseButtons get_MouseButton();
    public void set_MouseButton(MouseButtons value);
    public Point get_StartLocation();
    public void set_StartLocation(Point value);
    public Point get_StopLocation();
    public void set_StopLocation(Point value);
    internal virtual string GetParameterString();
    internal virtual void ShallowCopy(UITestAction source, bool isSeparateAction);
    internal virtual ICollection`1<UITechnologyElement> GetUIElementCollection();
    internal virtual void FixUIObjectName(IDictionary`2<IUITechnologyElement, string> uniqueNameDictionary);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.ElementQueryComparer : object {
    public sealed virtual bool Equals(IUITechnologyElement x, IUITechnologyElement y);
    public sealed virtual int GetHashCode(IUITechnologyElement obj);
    private int GetHashCodeRecursive(IUITechnologyElement obj);
    private static bool ElementEquals(IUITechnologyElement x, IUITechnologyElement y);
    private static bool QueryIdEquals(IUITechnologyElement x, IUITechnologyElement y);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.EncodeDecode : object {
    private static string s_customKeyLocation;
    private static int s_customKeyLength;
    private static bool isInitialized;
    private static string checkPhrase;
    private static EncodeDecode();
    public static void SetEncryptionKeyLocation(string location, int keySize);
    public static string EncodeString(string dataToEncode);
    public static string DecodeString(string dataToDecode);
    internal static void InitializeDefaultSettings();
    private static void ReadKeyFile();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.EncryptionInformation : object {
    private static string XmlTextEscapeString;
    private bool isEncoded;
    private string textValue;
    [XmlAttributeAttribute]
public bool Encoded { get; public set; }
    [XmlIgnoreAttribute]
public string Value { get; public set; }
    [XmlTextAttribute]
public string ValueWrapper { get; public set; }
    public EncryptionInformation(string value, bool encode);
    public bool get_Encoded();
    public void set_Encoded(bool value);
    public string get_Value();
    public void set_Value(string value);
    public string get_ValueWrapper();
    public void set_ValueWrapper(string value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.ErrorAction : UITestAction {
    private string message;
    private string idTag;
    public string Message { get; public set; }
    public string IdTag { get; public set; }
    public ErrorAction(string message);
    public ErrorAction(string message, string idTag);
    public ErrorAction(string message, UITechnologyElement uiElement);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public string get_Message();
    public void set_Message(string value);
    public string get_IdTag();
    public void set_IdTag(string value);
    internal virtual string GetParameterString();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.ExpandableUIElementRoles : object {
    public static string MenuItem;
    public static string TreeNode;
    public static string CheckBoxTreeItem;
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.GestureType : Enum {
    public int value__;
    public static GestureType PrimaryTap;
    public static GestureType PrimaryDoubleTap;
    public static GestureType SecondaryTap;
    public static GestureType PressAndTap;
    public static GestureType TwoFingerTap;
    public static GestureType Hold;
    public static GestureType Drag;
    public static GestureType CrossSlide;
    public static GestureType Manipulation;
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Common.IActionEditor {
    public abstract virtual long Insert(long id, UITestAction action);
    public abstract virtual long Append(UITestAction action);
    public abstract virtual void Delete(long id);
}
public static class Microsoft.VisualStudio.TestTools.UITest.Common.IESettings : object {
    private static Nullable`1<bool> isBrowserSupported;
    private static Nullable`1<bool> isNotificationToolBarSupported;
    private static Version MinimumRequiredBrowserVersion;
    private static Version MinimumRequired64BitBrowserVersion;
    private static Version MinimumRequiredNotificationToolBrowserVersion;
    private static Version currentBrowserVersion;
    private static Version invalidVersion;
    public static Setting Version { get; }
    public static Setting InformationBar { get; }
    public static Setting AutoCompletePassword { get; }
    public static Setting AutoCompleteForm { get; }
    public static Setting PopupBlocker { get; }
    public static Setting DefaultBrowser { get; }
    public static Setting TabbedBrowsing { get; }
    public static Setting InternetZoneSecurity { get; }
    public static Setting IntranetZoneSecurity { get; }
    public static Setting TrustedZoneSecurity { get; }
    public static Setting RestrictedZoneSecurity { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static Setting PhishingFilter { get; }
    public static Setting EnhancedSecurityConfiguration { get; }
    internal static bool IsBrowserSupported { get; }
    internal static Version CurrentBrowserVersion { get; internal set; }
    internal static bool IsNotificationToolBarSupported { get; }
    private static IESettings();
    internal static SettingGroup CaptureAllSettings();
    public static Setting get_Version();
    public static Setting get_InformationBar();
    public static Setting get_AutoCompletePassword();
    public static Setting get_AutoCompleteForm();
    public static Setting get_PopupBlocker();
    public static Setting get_DefaultBrowser();
    public static Setting get_TabbedBrowsing();
    public static Setting get_InternetZoneSecurity();
    public static Setting get_IntranetZoneSecurity();
    public static Setting get_TrustedZoneSecurity();
    public static Setting get_RestrictedZoneSecurity();
    public static Setting get_PhishingFilter();
    public static Setting get_EnhancedSecurityConfiguration();
    public static void ThrowIfBrowserVersionNotSupported();
    public static bool Check64BitBrowserVersionSupport();
    private static bool CheckBrowserVersion();
    internal static bool get_IsBrowserSupported();
    internal static Version get_CurrentBrowserVersion();
    internal static void set_CurrentBrowserVersion(Version value);
    internal static bool get_IsNotificationToolBarSupported();
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.InputAction : UITestAction {
    private ModifierKeys modifierKey;
    private bool isGlobalHotKey;
    public ModifierKeys ModifierKeys { get; public set; }
    public bool IsGlobalHotkey { get; public set; }
    protected InputAction(UITechnologyElement uiElement);
    public ModifierKeys get_ModifierKeys();
    public void set_ModifierKeys(ModifierKeys value);
    public bool get_IsGlobalHotkey();
    public void set_IsGlobalHotkey(bool value);
    internal virtual void ShallowCopy(UITestAction source, bool isSeparateAction);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.InvokeAction : UITestAction {
    [CompilerGeneratedAttribute]
private UITechnologyElement <SourceElement>k__BackingField;
    [XmlIgnoreAttribute]
public UITechnologyElement SourceElement { get; public set; }
    public InvokeAction(UITechnologyElement uiElement, object value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    [CompilerGeneratedAttribute]
public UITechnologyElement get_SourceElement();
    [CompilerGeneratedAttribute]
public void set_SourceElement(UITechnologyElement value);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Common.IRecorder {
    public string Name { get; }
    public string Description { get; }
    public RecorderOptions Options { get; public set; }
    public IList`1<UITechnologyElement> UIElements { get; }
    public IList`1<UITestAction> Actions { get; }
    public IActionEditor ActionEditor { get; }
    public RecorderState RecorderState { get; }
    public bool AllowMultipleSessions { get; public set; }
    public bool DoNotFlushActionsOnStart { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_Recorded(EventHandler`1<RecordedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Recorded(EventHandler`1<RecordedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RecorderError(EventHandler`1<RecorderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RecorderError(EventHandler`1<RecorderErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ActionPropertyChange(EventHandler`1<RecordedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ActionPropertyChange(EventHandler`1<RecordedEventArgs> value);
    public abstract virtual string get_Name();
    public abstract virtual string get_Description();
    public abstract virtual RecorderOptions get_Options();
    public abstract virtual void set_Options(RecorderOptions value);
    public abstract virtual IList`1<UITechnologyElement> get_UIElements();
    public abstract virtual IList`1<UITestAction> get_Actions();
    public abstract virtual IActionEditor get_ActionEditor();
    public abstract virtual UITechnologyElement AddElement(UITechnologyElement uiElement);
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual void Flush();
    public abstract virtual void OnRecorderError(Exception exception);
    public abstract virtual RecorderState get_RecorderState();
    public abstract virtual bool get_AllowMultipleSessions();
    public abstract virtual void set_AllowMultipleSessions(bool value);
    public abstract virtual bool get_DoNotFlushActionsOnStart();
    public abstract virtual void set_DoNotFlushActionsOnStart(bool value);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Common.ISqmUpdater {
    public abstract virtual void UpdateSqmForElement(IUITechnologyElement element);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
public interface Microsoft.VisualStudio.TestTools.UITest.Common.IUITestActionStack {
    public int Count { get; }
    public object SyncRoot { get; }
    public abstract virtual int get_Count();
    public abstract virtual object get_SyncRoot();
    public abstract virtual void Push(UITestAction element);
    public abstract virtual UITestAction Pop(int nth);
    public abstract virtual UITestAction Pop();
    public abstract virtual UITestAction Peek(int nth);
    public abstract virtual UITestAction Peek();
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.KeyActionType : Enum {
    public int value__;
    public static KeyActionType KeyDown;
    public static KeyActionType KeyUp;
    public static KeyActionType KeyPress;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.KeyboardAction : InputAction {
    private KeyActionType actionType;
    private Keys key;
    private string keyValue;
    public KeyActionType ActionType { get; public set; }
    public Keys Key { get; public set; }
    [XmlIgnoreAttribute]
public string KeyValue { get; public set; }
    [XmlIgnoreAttribute]
public string ActionName { get; public set; }
    [XmlIgnoreAttribute]
public string ValueAsString { get; public set; }
    [XmlIgnoreAttribute]
public string AdditionalInfo { get; public set; }
    public KeyboardAction(UITechnologyElement uiElement, KeyActionType actionType, Keys key, string keyValue);
    public KeyboardAction(KeyActionType actionType, Keys key, string keyValue);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public KeyActionType get_ActionType();
    public void set_ActionType(KeyActionType value);
    public Keys get_Key();
    public void set_Key(Keys value);
    public string get_KeyValue();
    public void set_KeyValue(string value);
    public virtual string get_ActionName();
    public virtual void set_ActionName(string value);
    public virtual string get_ValueAsString();
    public virtual void set_ValueAsString(string value);
    public virtual string get_AdditionalInfo();
    public virtual void set_AdditionalInfo(string value);
    internal virtual string GetParameterString();
    internal bool IsControl();
    private static string KeysToString(Keys key);
    private void InitializeInternal(KeyActionType keyActionType, Keys keys, string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.KeyCombination : object {
    private Keys key;
    private ModifierKeys modifierKeys;
    public ModifierKeys Modifier { get; public set; }
    public Keys Key { get; public set; }
    public KeyCombination(ModifierKeys modifier, Keys key);
    public KeyCombination(string modifierValue, string keyValue);
    public ModifierKeys get_Modifier();
    public void set_Modifier(ModifierKeys value);
    public Keys get_Key();
    public void set_Key(Keys value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.LaunchApplicationAction : AggregatedAction {
    private string fileName;
    private string alternateFileName;
    private string arguments;
    private string domain;
    private string userName;
    private EncryptionInformation password;
    private bool runAsAdmin;
    public string FileName { get; public set; }
    public string AlternateFileName { get; public set; }
    public string Arguments { get; public set; }
    public string Domain { get; public set; }
    public string UserName { get; public set; }
    public EncryptionInformation Password { get; public set; }
    [XmlIgnoreAttribute]
public bool RunAsAdmin { get; public set; }
    [XmlElementAttribute]
public string RunAsAdminWrapper { get; public set; }
    internal string PasswordText { get; }
    public LaunchApplicationAction(string fileName);
    public LaunchApplicationAction(string fileName, string arguments);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_AlternateFileName();
    public void set_AlternateFileName(string value);
    public string get_Arguments();
    public void set_Arguments(string value);
    public string get_Domain();
    public void set_Domain(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public EncryptionInformation get_Password();
    public void set_Password(EncryptionInformation value);
    public bool get_RunAsAdmin();
    public void set_RunAsAdmin(bool value);
    public string get_RunAsAdminWrapper();
    public void set_RunAsAdminWrapper(string value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    internal string get_PasswordText();
    internal virtual string GetParameterString();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.LaunchWindowsStoreAppAction : object {
    private string m_packageFamilyName;
    private string m_arguments;
    public string PackageFamilyName { get; public set; }
    public string Arguments { get; public set; }
    public LaunchWindowsStoreAppAction(string packageFamilyName);
    public LaunchWindowsStoreAppAction(string packageFamilyName, string arguments);
    public string get_PackageFamilyName();
    public void set_PackageFamilyName(string value);
    public string get_Arguments();
    public void set_Arguments(string value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.ManipulationType : Enum {
    public int value__;
    public static ManipulationType NoManipulation;
    public static ManipulationType Pan;
    public static ManipulationType PanUp;
    public static ManipulationType PanDown;
    public static ManipulationType PanLeft;
    public static ManipulationType PanRight;
    public static ManipulationType ZoomIn;
    public static ManipulationType ZoomOut;
    public static ManipulationType RotateAnticlockwise;
    public static ManipulationType RotateClockwise;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.MarkerAction : UITestAction {
    private string markerInfo;
    [XmlAttributeAttribute]
public string MarkerInformation { get; public set; }
    public MarkerAction(string markerInfo);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public string get_MarkerInformation();
    public void set_MarkerInformation(string value);
    internal virtual string GetParameterString();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Common.MarkerDirections : Enum {
    public int value__;
    public static MarkerDirections None;
    public static MarkerDirections Start;
    public static MarkerDirections End;
    public static MarkerDirections Both;
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.MarkerRegionType : Enum {
    public int value__;
    public static MarkerRegionType Default;
    public static MarkerRegionType Action;
    public static MarkerRegionType Assertion;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.MediaAction : AggregatedAction {
    [CompilerGeneratedAttribute]
private MediaActionType <ActionType>k__BackingField;
    private TimeSpan time;
    private float volume;
    private bool mute;
    private bool timeSet;
    private bool volumeSet;
    private bool muteSet;
    public MediaActionType ActionType { get; public set; }
    [XmlIgnoreAttribute]
public TimeSpan Time { get; public set; }
    [XmlElementAttribute("Time")]
public string TimeWrapper { get; public set; }
    [XmlIgnoreAttribute]
public float Volume { get; public set; }
    [XmlElementAttribute("Volume")]
public string VolumeWrapper { get; public set; }
    [XmlIgnoreAttribute]
public bool Mute { get; public set; }
    [XmlElementAttribute("Mute")]
public string MuteWrapper { get; public set; }
    public MediaAction(UITechnologyElement element, UITestMediaEventInfo eventArgs);
    [CompilerGeneratedAttribute]
public MediaActionType get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(MediaActionType value);
    public TimeSpan get_Time();
    public void set_Time(TimeSpan value);
    public string get_TimeWrapper();
    public void set_TimeWrapper(string value);
    public float get_Volume();
    public void set_Volume(float value);
    public string get_VolumeWrapper();
    public void set_VolumeWrapper(string value);
    public bool get_Mute();
    public void set_Mute(bool value);
    public string get_MuteWrapper();
    public void set_MuteWrapper(string value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    internal void SetValue(MediaActionType actionType, object value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.MismatchType : Enum {
    public int value__;
    public static MismatchType SourceOnly;
    public static MismatchType TargetOnly;
    public static MismatchType DifferentFromSource;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.MouseAction : InputAction {
    private Point location;
    private Point absLocation;
    private MouseActionType actionType;
    private MouseButtons mouseButton;
    private int wheelDirection;
    private bool implicitHover;
    private Point absoluteMouseDownLocation;
    private int mouseDownTimeStamp;
    public Point Location { get; public set; }
    [XmlIgnoreAttribute]
public Point AbsoluteLocation { get; public set; }
    public int WheelDirection { get; public set; }
    public MouseActionType ActionType { get; public set; }
    public MouseButtons MouseButton { get; public set; }
    [XmlIgnoreAttribute]
public string ActionName { get; public set; }
    internal bool ImplicitHover { get; internal set; }
    internal Point AbsoluteMouseDownLocation { get; internal set; }
    internal int MouseDownTimeStamp { get; internal set; }
    public MouseAction(UITechnologyElement uiElement, MouseButtons button, MouseActionType actionType);
    public MouseAction(MouseButtons button, MouseActionType actionType, Point location);
    public MouseAction(MouseButtons button, MouseActionType actionType);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public Point get_Location();
    public void set_Location(Point value);
    public Point get_AbsoluteLocation();
    public void set_AbsoluteLocation(Point value);
    public int get_WheelDirection();
    public void set_WheelDirection(int value);
    public MouseActionType get_ActionType();
    public void set_ActionType(MouseActionType value);
    public MouseButtons get_MouseButton();
    public void set_MouseButton(MouseButtons value);
    public virtual string get_ActionName();
    public virtual void set_ActionName(string value);
    internal virtual void ShallowCopy(UITestAction source, bool isSeparateAction);
    internal virtual string GetParameterString();
    internal bool get_ImplicitHover();
    internal void set_ImplicitHover(bool value);
    internal Point get_AbsoluteMouseDownLocation();
    internal void set_AbsoluteMouseDownLocation(Point value);
    internal int get_MouseDownTimeStamp();
    internal void set_MouseDownTimeStamp(int value);
    internal static bool IsImplicitHover(UITestAction recordedAction);
    internal static bool IsExplicitHover(UITestAction recordedAction);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.MouseActionType : Enum {
    public int value__;
    public static MouseActionType ButtonDown;
    public static MouseActionType ButtonUp;
    public static MouseActionType Click;
    public static MouseActionType DoubleClick;
    public static MouseActionType Drag;
    public static MouseActionType WheelRotate;
    public static MouseActionType Hover;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.NavigateToUrlAction : AggregatedAction {
    private Uri url;
    private bool newInstance;
    private static string webUrlString;
    private static string bingSearchString;
    [XmlIgnoreAttribute]
public Uri Url { get; public set; }
    [XmlIgnoreAttribute]
public bool IsParameterizable { get; }
    [XmlElementAttribute("Url")]
[SuppressMessageAttribute("Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings")]
public string UrlString { get; public set; }
    public bool NewInstance { get; public set; }
    public NavigateToUrlAction(Uri url);
    public Uri get_Url();
    public void set_Url(Uri value);
    public virtual bool get_IsParameterizable();
    public string get_UrlString();
    public void set_UrlString(string value);
    public bool get_NewInstance();
    public void set_NewInstance(bool value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    [SuppressMessageAttribute("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
public static Uri GetUri(string probableUri);
    internal virtual bool MatchParameter(string specifiedParameter);
    internal virtual void BindParameter(ValueMap valueMap, ControlType controlType);
    internal virtual string GetParameterString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.NoOperationAction : UITestAction {
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.ObjectMap.UIObjectUtil : object {
    internal static string GetFriendlyNameAndTypeName(string uiObjectName, UIMap map, String& friendlyTypeName);
    internal static UIObject GetUIObject(UITestAction action, UIMap map);
    internal static UIObject GetUIObject(string uiObjectName, UIMap map);
    internal static string GetControlType(UIObject uiObject);
    internal static string GetFriendlyNameFromObject(UIObject uiObject);
    private static string GetFriendlyTypeName(UIObject uiObject);
    private static string GetFriendlyName(UIObject uiObject);
    private static string GetAncestorInformation(string uiObjectName, UIMap map, String& ancestorTypeFriendlyName);
    private static string GetFriendlyNameBasedOnPositionInAncestor(UIObject uiObject, UIObject ancestor, String& ancestorTypeFriendlyName);
    private static string GetHierarchicalFriendlyName(UIMap map, string uiObjectName);
    private static bool IsHierarchicalPathItem(UIObject uiObject);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.OSSettings : object {
    private static string name;
    public static Setting Name { get; }
    public static Setting Version { get; }
    public static Setting IsUserAdmin { get; }
    public static Setting IsTerminalServerSession { get; }
    public static Setting Is64BitOperatingSystem { get; }
    public static Setting OSLanguage { get; }
    public static Setting UserLocale { get; }
    public static Setting DragFullWindows { get; }
    public static Setting ScreenResolutionWidth { get; }
    public static Setting ScreenResolutionHeight { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static Setting SystemDPIX { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static Setting SystemDPIY { get; }
    public static Setting Aero { get; }
    public static Setting UACEnabled { get; }
    public static Setting UACPromptEnabled { get; }
    internal static SettingGroup CaptureAllSettings();
    public static Setting get_Name();
    public static Setting get_Version();
    public static Setting get_IsUserAdmin();
    public static Setting get_IsTerminalServerSession();
    public static Setting get_Is64BitOperatingSystem();
    public static Setting get_OSLanguage();
    public static Setting get_UserLocale();
    public static Setting get_DragFullWindows();
    public static Setting get_ScreenResolutionWidth();
    public static Setting get_ScreenResolutionHeight();
    public static Setting get_SystemDPIX();
    public static Setting get_SystemDPIY();
    public static Setting get_Aero();
    public static Setting get_UACEnabled();
    public static Setting get_UACPromptEnabled();
    internal static bool IsCurrentUserAdministrator();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.QueryId : object {
    private List`1<SingleQueryId> queryIds;
    private static char QueryIdSeparator;
    private static char SingleQuotes;
    private static char EscapeCharacter;
    public IList`1<SingleQueryId> SingleQueryIds { get; }
    public QueryId(string queryIdString);
    public IList`1<SingleQueryId> get_SingleQueryIds();
    public virtual string ToString();
    public string GetQueryString(int startIndex, int lastIndex);
    public int GetIndexOfExpandableElement(int startIndex);
    internal static List`1<string> ParseQueryId(string queryIdString);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.RecordedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <ModifiedProperty>k__BackingField;
    private UITestAction action;
    private RecordedEventType eventType;
    private bool isExplicit;
    public UITestAction Action { get; }
    public RecordedEventType UITestEventType { get; }
    public bool IsExplicit { get; }
    internal string ModifiedProperty { get; internal set; }
    public RecordedEventArgs(UITestAction action, RecordedEventType eventType, bool isExplicit);
    public UITestAction get_Action();
    public RecordedEventType get_UITestEventType();
    public bool get_IsExplicit();
    [CompilerGeneratedAttribute]
internal string get_ModifiedProperty();
    [CompilerGeneratedAttribute]
internal void set_ModifiedProperty(string value);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.RecordedEventType : Enum {
    public int value__;
    public static RecordedEventType NewAction;
    public static RecordedEventType ModifiedAction;
    public static RecordedEventType DeletedAction;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.RecorderErrorEventArgs : EventArgs {
    private Exception exception;
    internal Exception Exception { get; }
    internal RecorderErrorEventArgs(Exception exception);
    internal Exception get_Exception();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.RecorderOptions : object {
    [CompilerGeneratedAttribute]
private RecordingMode <RecordingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugModeOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecordOnDesktopProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReliableRecorderStop>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToastNotificationAppId>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private bool showCurrentlyRecording;
    private bool isRemoteTestingEnabled;
    private bool recordThinkTime;
    private KeyCombination hoverKey;
    private List`1<int> excludeProcessIdList;
    private List`1<string> excludeProcessNameList;
    private List`1<int> includeProcessIdList;
    private List`1<string> includeProcessNameList;
    private List`1<KeyCombination> ignoreKeys;
    private List`1<KeyCombination> globalHotkeys;
    private Dictionary`2<string, bool> aggregatorGroupSetting;
    private int aggregatorTimeout;
    private int remoteTestingAggregatorTimeout;
    private int thinktimeThreshold;
    private int thinktimeUpperCutoff;
    private int delayBetweenActions;
    private List`1<int> imeLanguageList;
    private static string HoverKeyModifierConstant;
    private static string ReliableRecorderStopConstant;
    private static string HoverKeyConstant;
    private static string SetValueAggregatorsConstant;
    private static string RecordImplicitHoverAggregatorConstant;
    private static string IEDialogAggregatorsConstant;
    private static string RecordImplicitHoverConfigParameter;
    private static string DeleteImplicitHoverAggregatorConstant;
    private static string AbsorbWindowResizeAndSetFocusAggregatorsConstant;
    private static string AggregatorTimeoutConstant;
    private static string RemoteTestingAggregatorTimeoutConstant;
    private static string GlobalHotKeysConstant;
    private static string ExcludeProcessConstant;
    private static string IncludeProcessConstant;
    private static string EncryptionKeyLocation;
    private static string EncryptionKeyLength;
    private static string RecordThinkTimeConstant;
    private static string ThinkTimeThresholdConstant;
    private static string ThinkTimeUpperCutoffConstant;
    private static string DelayBetweenActionConstant;
    private static string RecordOnDesktopProcessConstant;
    internal static string ShowCurrentlyRecordingConstant;
    private static string IsRemoteTestingEnabledString;
    private static string IsImageActionLogEnabledString;
    private static int AggregatorTimeOut;
    private static int RemoteTestingAggregatorTimeOut;
    private bool isImageActionLogEnabled;
    public RecordingMode RecordingMode { get; public set; }
    public bool DebugModeOn { get; public set; }
    public ICollection`1<int> ExcludeProcess { get; }
    public ICollection`1<string> ExcludeProcessName { get; }
    public ICollection`1<int> IncludeProcess { get; }
    public ICollection`1<string> IncludeProcessName { get; }
    public bool RecordOnDesktopProcess { get; public set; }
    public ICollection`1<KeyCombination> IgnoreKeys { get; }
    public ICollection`1<KeyCombination> GlobalHotkeys { get; }
    public IDictionary`2<string, bool> AggregatorGroupSetting { get; }
    public KeyCombination HoverKey { get; public set; }
    public int AggregatorTimeout { get; public set; }
    public int RemoteTestingAggregatorTimeout { get; public set; }
    public bool RecordThinkTime { get; public set; }
    public bool RecordImplicitHover { get; public set; }
    public bool ReliableRecorderStop { get; private set; }
    public int ThinkTimeThreshold { get; public set; }
    public int ThinkTimeUpperCutoff { get; public set; }
    public bool ShowCurrentlyRecording { get; public set; }
    public int DelayBetweenActions { get; public set; }
    public ICollection`1<int> ImeLanguageList { get; }
    [SuppressMessageAttribute("Microsoft.Usage", "CA1806")]
public bool IsRemoteTestingEnabled { get; public set; }
    public string ToastNotificationAppId { get; public set; }
    public bool IsImageActionLogEnabled { get; public set; }
    public RecorderOptions(IDictionary`2<string, string> appSettings);
    internal RecorderOptions(NameValueCollection appSettings);
    private void Initialize(IDictionary`2<string, string> appSettings);
    [CompilerGeneratedAttribute]
public RecordingMode get_RecordingMode();
    [CompilerGeneratedAttribute]
public void set_RecordingMode(RecordingMode value);
    [CompilerGeneratedAttribute]
public bool get_DebugModeOn();
    [CompilerGeneratedAttribute]
public void set_DebugModeOn(bool value);
    public ICollection`1<int> get_ExcludeProcess();
    public ICollection`1<string> get_ExcludeProcessName();
    public ICollection`1<int> get_IncludeProcess();
    public ICollection`1<string> get_IncludeProcessName();
    [CompilerGeneratedAttribute]
public bool get_RecordOnDesktopProcess();
    [CompilerGeneratedAttribute]
public void set_RecordOnDesktopProcess(bool value);
    public ICollection`1<KeyCombination> get_IgnoreKeys();
    public ICollection`1<KeyCombination> get_GlobalHotkeys();
    public IDictionary`2<string, bool> get_AggregatorGroupSetting();
    public KeyCombination get_HoverKey();
    public void set_HoverKey(KeyCombination value);
    public int get_AggregatorTimeout();
    public void set_AggregatorTimeout(int value);
    public int get_RemoteTestingAggregatorTimeout();
    public void set_RemoteTestingAggregatorTimeout(int value);
    public bool get_RecordThinkTime();
    public void set_RecordThinkTime(bool value);
    public bool get_RecordImplicitHover();
    public void set_RecordImplicitHover(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReliableRecorderStop();
    [CompilerGeneratedAttribute]
private void set_ReliableRecorderStop(bool value);
    public int get_ThinkTimeThreshold();
    public void set_ThinkTimeThreshold(int value);
    public int get_ThinkTimeUpperCutoff();
    public void set_ThinkTimeUpperCutoff(int value);
    public bool get_ShowCurrentlyRecording();
    public void set_ShowCurrentlyRecording(bool value);
    public int get_DelayBetweenActions();
    public void set_DelayBetweenActions(int value);
    public ICollection`1<int> get_ImeLanguageList();
    public bool get_IsRemoteTestingEnabled();
    public void set_IsRemoteTestingEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_ToastNotificationAppId();
    [CompilerGeneratedAttribute]
public void set_ToastNotificationAppId(string value);
    public bool get_IsImageActionLogEnabled();
    public void set_IsImageActionLogEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void ValidateTimeSettings();
    private void SetTimeSettingsToDefault();
    private void UpdateGlobalHotKeys(IDictionary`2<string, string> appSettings);
    private static void UpdateProcessList(IDictionary`2<string, string> appSettings, string keyName, ICollection`1<string> processNameList, ICollection`1<int> pidList);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.RecorderState : Enum {
    public int value__;
    public static RecorderState None;
    public static RecorderState Initializing;
    public static RecorderState Running;
    public static RecorderState Paused;
    public static RecorderState Stopped;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.RecorderUtility : object {
    internal static int GetCurrentProcessId();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.RecordingMode : Enum {
    public int value__;
    public static RecordingMode Analog;
    public static RecordingMode Object;
    public static RecordingMode Intent;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.RemoveKeysAction : InputAction {
    private Keys key;
    public Keys Key { get; public set; }
    public RemoveKeysAction(ModifierKeys modifierKeys, Keys key);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public Keys get_Key();
    public void set_Key(Keys value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Common.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionErrorMessage { get; }
    internal static string ActionFailed { get; }
    internal static string BrowserVersionNotDetected { get; }
    internal static string BrowserVersionNotSupported { get; }
    internal static string CheckPhraseMismatchErrorMessage { get; }
    internal static string DecodingFailedExceptionMessage { get; }
    internal static string EncryptionKeyLocationNotFoundMessage { get; }
    internal static string FindControlDuration { get; }
    internal static string FindMatchinControlsSkipIntermediate { get; }
    internal static string FindMatchingControlsDuration { get; }
    internal static string IgnoreExceptionForContinueOnError { get; }
    internal static string IgnoreExceptionForRetry { get; }
    internal static string IgnoreExceptionForSkip { get; }
    internal static string InvalidKeyFile { get; }
    internal static string InvalidUriFormatError { get; }
    internal static string IterateActionIdError { get; }
    internal static string ModifierKeyPressed { get; }
    internal static string ModifierKeyPressedOnControl { get; }
    internal static string ModifierKeyReleased { get; }
    internal static string ModifierKeyReleasedOnControl { get; }
    internal static string ParameterNotExisting { get; }
    internal static string SettingMismatchMessage { get; }
    internal static string SkipIntermediateAncestorElement { get; }
    internal static string SkipIntermediateTargetElement { get; }
    internal static string SkippingFailedAction { get; }
    internal static string SmartMatch { get; }
    internal static string SmartMatchAlternateWindow { get; }
    internal static string SmartMatchWarning { get; }
    internal static string StandardErrorMessageString { get; }
    internal static string UITestSchemaValidationError { get; }
    internal static string UnBoundParameter { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionErrorMessage();
    internal static string get_ActionFailed();
    internal static string get_BrowserVersionNotDetected();
    internal static string get_BrowserVersionNotSupported();
    internal static string get_CheckPhraseMismatchErrorMessage();
    internal static string get_DecodingFailedExceptionMessage();
    internal static string get_EncryptionKeyLocationNotFoundMessage();
    internal static string get_FindControlDuration();
    internal static string get_FindMatchinControlsSkipIntermediate();
    internal static string get_FindMatchingControlsDuration();
    internal static string get_IgnoreExceptionForContinueOnError();
    internal static string get_IgnoreExceptionForRetry();
    internal static string get_IgnoreExceptionForSkip();
    internal static string get_InvalidKeyFile();
    internal static string get_InvalidUriFormatError();
    internal static string get_IterateActionIdError();
    internal static string get_ModifierKeyPressed();
    internal static string get_ModifierKeyPressedOnControl();
    internal static string get_ModifierKeyReleased();
    internal static string get_ModifierKeyReleasedOnControl();
    internal static string get_ParameterNotExisting();
    internal static string get_SettingMismatchMessage();
    internal static string get_SkipIntermediateAncestorElement();
    internal static string get_SkipIntermediateTargetElement();
    internal static string get_SkippingFailedAction();
    internal static string get_SmartMatch();
    internal static string get_SmartMatchAlternateWindow();
    internal static string get_SmartMatchWarning();
    internal static string get_StandardErrorMessageString();
    internal static string get_UITestSchemaValidationError();
    internal static string get_UnBoundParameter();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.SendKeysAction : InputAction {
    private string text;
    private bool hasNonPrintableChars;
    private EncryptionInformation encryptedInfo;
    private static char openingEscapeSequence;
    private static char closingEscapeSequence;
    private bool canDecodeStringBeCalled;
    [XmlIgnoreAttribute]
public string Text { get; public set; }
    [XmlIgnoreAttribute]
private string TextInternal { get; }
    [XmlElementAttribute]
public EncryptionInformation TextValue { get; public set; }
    [XmlIgnoreAttribute]
public bool IsParameterizable { get; }
    [XmlIgnoreAttribute]
public bool IsEncoded { get; public set; }
    [XmlIgnoreAttribute]
public string ValueAsString { get; public set; }
    [XmlIgnoreAttribute]
public string AdditionalInfo { get; public set; }
    private string ParameterizedText { get; private set; }
    public SendKeysAction(UITechnologyElement element);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public string get_Text();
    public void set_Text(string value);
    private string get_TextInternal();
    public EncryptionInformation get_TextValue();
    public void set_TextValue(EncryptionInformation value);
    public virtual bool get_IsParameterizable();
    public bool get_IsEncoded();
    public void set_IsEncoded(bool value);
    public virtual string get_ValueAsString();
    public virtual void set_ValueAsString(string value);
    public virtual string get_AdditionalInfo();
    public virtual void set_AdditionalInfo(string value);
    public bool IsActionOnProtectedElement();
    internal virtual string GetParameterString();
    internal virtual void ShallowCopy(UITestAction source, bool isSeparateAction);
    internal virtual void BindParameter(ValueMap valueMap, ControlType controlType);
    internal virtual bool MatchParameter(string specifiedParameter);
    private string RemoveSpecialStringKeys(string value);
    private bool IsParameterizableValue();
    private bool IsKeyToBeIgnored(string value);
    private string get_ParameterizedText();
    private void set_ParameterizedText(string value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.ActionRequest : object {
    [CompilerGeneratedAttribute]
private ActionType <RequestType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetFocus>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<UIObject> <QueryId>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnsureVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private HighlightArgs <HighlightDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<KeyValuePair> <PlaybackSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheControlProperties>k__BackingField;
    public ActionType RequestType { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public bool SetFocus { get; public set; }
    public Collection`1<UIObject> QueryId { get; public set; }
    public NavigationDirection Direction { get; public set; }
    public bool EnsureVisible { get; public set; }
    public HighlightArgs HighlightDetails { get; public set; }
    public Collection`1<KeyValuePair> PlaybackSettings { get; public set; }
    public bool CacheControlProperties { get; public set; }
    [CompilerGeneratedAttribute]
public ActionType get_RequestType();
    [CompilerGeneratedAttribute]
public void set_RequestType(ActionType value);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public bool get_SetFocus();
    [CompilerGeneratedAttribute]
public void set_SetFocus(bool value);
    [CompilerGeneratedAttribute]
public Collection`1<UIObject> get_QueryId();
    [CompilerGeneratedAttribute]
public void set_QueryId(Collection`1<UIObject> value);
    [CompilerGeneratedAttribute]
public NavigationDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(NavigationDirection value);
    [CompilerGeneratedAttribute]
public bool get_EnsureVisible();
    [CompilerGeneratedAttribute]
public void set_EnsureVisible(bool value);
    [CompilerGeneratedAttribute]
public HighlightArgs get_HighlightDetails();
    [CompilerGeneratedAttribute]
public void set_HighlightDetails(HighlightArgs value);
    [CompilerGeneratedAttribute]
public Collection`1<KeyValuePair> get_PlaybackSettings();
    [CompilerGeneratedAttribute]
public void set_PlaybackSettings(Collection`1<KeyValuePair> value);
    [CompilerGeneratedAttribute]
public bool get_CacheControlProperties();
    [CompilerGeneratedAttribute]
public void set_CacheControlProperties(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.ActionResult : object {
    [CompilerGeneratedAttribute]
private bool <ErrorPresent>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorDetails <ErrorDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPlaybackInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private UIControlDetails <ControlDetails>k__BackingField;
    public bool ErrorPresent { get; public set; }
    public ErrorDetails ErrorDetails { get; public set; }
    public bool IsPlaybackInitialized { get; public set; }
    public UIControlDetails ControlDetails { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ErrorPresent();
    [CompilerGeneratedAttribute]
public void set_ErrorPresent(bool value);
    [CompilerGeneratedAttribute]
public ErrorDetails get_ErrorDetails();
    [CompilerGeneratedAttribute]
public void set_ErrorDetails(ErrorDetails value);
    [CompilerGeneratedAttribute]
public bool get_IsPlaybackInitialized();
    [CompilerGeneratedAttribute]
public void set_IsPlaybackInitialized(bool value);
    [CompilerGeneratedAttribute]
public UIControlDetails get_ControlDetails();
    [CompilerGeneratedAttribute]
public void set_ControlDetails(UIControlDetails value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.Service.ActionType : Enum {
    public int value__;
    public static ActionType InitializePlayback;
    public static ActionType IsPlaybackInitialized;
    public static ActionType ControlFromPoint;
    public static ActionType TrackControlAtPoint;
    public static ActionType NavigateFromCachedControl;
    public static ActionType ResetCachedControl;
    public static ActionType RecaptureCachedControl;
    public static ActionType FindControlFromQueryId;
    public static ActionType DrawHighlight;
    public static ActionType ResetSearchCaches;
    public static ActionType CancelPlayback;
    public static ActionType Cleanup;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.ErrorDetails : object {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowErrorOnStatusbar>k__BackingField;
    public string ErrorMessage { get; public set; }
    public bool ShowErrorOnStatusbar { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowErrorOnStatusbar();
    [CompilerGeneratedAttribute]
public void set_ShowErrorOnStatusbar(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.HighlightArgs : object {
    [CompilerGeneratedAttribute]
private bool <StartHighlight>k__BackingField;
    [CompilerGeneratedAttribute]
private Rectangle <Bounds>k__BackingField;
    public bool StartHighlight { get; public set; }
    public Rectangle Bounds { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_StartHighlight();
    [CompilerGeneratedAttribute]
public void set_StartHighlight(bool value);
    [CompilerGeneratedAttribute]
public Rectangle get_Bounds();
    [CompilerGeneratedAttribute]
public void set_Bounds(Rectangle value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.KeyValuePair : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    internal KeyValuePair(string key, string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.Service.NavigationDirection : Enum {
    public int value__;
    public static NavigationDirection Parent;
    public static NavigationDirection PreviousSibling;
    public static NavigationDirection NextSibling;
    public static NavigationDirection FirstChild;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.NavigationResult : object {
    [CompilerGeneratedAttribute]
private NavigationDirection <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationStates <State>k__BackingField;
    public NavigationDirection Direction { get; public set; }
    public NavigationStates State { get; public set; }
    internal NavigationResult(NavigationDirection direction, NavigationStates state);
    [CompilerGeneratedAttribute]
public NavigationDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(NavigationDirection value);
    [CompilerGeneratedAttribute]
public NavigationStates get_State();
    [CompilerGeneratedAttribute]
public void set_State(NavigationStates value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.Service.NavigationStates : Enum {
    public int value__;
    public static NavigationStates NavigationPossible;
    public static NavigationStates NavigationNotPossible;
    public static NavigationStates NavigationTimedOut;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.Rectangle : object {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Service.UIControlDetails : object {
    [CompilerGeneratedAttribute]
private Rectangle <BoundingRectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationResult[] <NavigationResults>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<KeyValuePair> <PropertyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<KeyValuePair> <CommonPropertyDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<string> <PrimaryPropertyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<UIObject> <QueryId>k__BackingField;
    public Rectangle BoundingRectangle { get; public set; }
    [XmlArrayItemAttribute("NavigationResults")]
public NavigationResult[] NavigationResults { get; public set; }
    [XmlArrayItemAttribute("PropertyValues")]
public Collection`1<KeyValuePair> PropertyValues { get; public set; }
    [XmlArrayItemAttribute("CommonPropertyDetails")]
public Collection`1<KeyValuePair> CommonPropertyDetails { get; public set; }
    [XmlArrayItemAttribute("PrimaryPropertyNames")]
public Collection`1<string> PrimaryPropertyNames { get; public set; }
    [XmlArrayItemAttribute("QueryId")]
public Collection`1<UIObject> QueryId { get; public set; }
    [CompilerGeneratedAttribute]
public Rectangle get_BoundingRectangle();
    [CompilerGeneratedAttribute]
public void set_BoundingRectangle(Rectangle value);
    [CompilerGeneratedAttribute]
public NavigationResult[] get_NavigationResults();
    [CompilerGeneratedAttribute]
public void set_NavigationResults(NavigationResult[] value);
    [CompilerGeneratedAttribute]
public Collection`1<KeyValuePair> get_PropertyValues();
    [CompilerGeneratedAttribute]
public void set_PropertyValues(Collection`1<KeyValuePair> value);
    [CompilerGeneratedAttribute]
public Collection`1<KeyValuePair> get_CommonPropertyDetails();
    [CompilerGeneratedAttribute]
public void set_CommonPropertyDetails(Collection`1<KeyValuePair> value);
    [CompilerGeneratedAttribute]
public Collection`1<string> get_PrimaryPropertyNames();
    [CompilerGeneratedAttribute]
public void set_PrimaryPropertyNames(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public Collection`1<UIObject> get_QueryId();
    [CompilerGeneratedAttribute]
public void set_QueryId(Collection`1<UIObject> value);
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.SetBaseAction : AggregatedAction {
    private UITechnologyElement sourceElement;
    private List`1<UITechnologyElement> sourceElements;
    [XmlIgnoreAttribute]
public UITechnologyElement SourceElement { get; public set; }
    [XmlIgnoreAttribute]
public List`1<UITechnologyElement> SourceElements { get; }
    protected SetBaseAction(UITechnologyElement uiElement);
    public UITechnologyElement get_SourceElement();
    public void set_SourceElement(UITechnologyElement value);
    public List`1<UITechnologyElement> get_SourceElements();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.SetStateAction : SetBaseAction {
    private object objectState;
    [XmlIgnoreAttribute]
public object State { get; public set; }
    [XmlElementAttribute]
public string StateAsString { get; public set; }
    [XmlIgnoreAttribute]
public ControlStates States { get; public set; }
    private object ObjectState { get; private set; }
    public SetStateAction(UITechnologyElement uiElement, object value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public object get_State();
    public void set_State(object value);
    public string get_StateAsString();
    public void set_StateAsString(string value);
    public ControlStates get_States();
    public void set_States(ControlStates value);
    private object get_ObjectState();
    private void set_ObjectState(object value);
    internal virtual string GetParameterString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.Setting : object {
    private string name;
    private string settingValue;
    private int warningLevel;
    private static int DefaultWarningLevel;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    [XmlAttributeAttribute]
public int WarningLevel { get; public set; }
    public Setting(string name, object value);
    public Setting(string name, object value, int warningLevel);
    public bool Equals(Setting target);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    public int get_WarningLevel();
    public void set_WarningLevel(int value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.SettingGroup : UITestEnvironmentContainerBase`1<Setting> {
    [XmlAttributeAttribute]
public string GroupName { get; public set; }
    [XmlElementAttribute]
public Collection`1<Setting> Setting { get; }
    public SettingGroup(string name);
    public string get_GroupName();
    public void set_GroupName(string value);
    public Collection`1<Setting> get_Setting();
    public virtual string ToString();
    internal virtual Collection`1<SettingMismatch> Compare(UITestEnvironmentContainerBase`1<Setting> targetBaseSettingGroup);
    internal virtual Collection`1<SettingMismatch> GetAllSettingsAsMismatchedSettings(MismatchType mismatchType);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.SettingMismatch : object {
    private string settingGroup;
    private int warningLevel;
    private string settingName;
    private string sourceValue;
    private string targetValue;
    private MismatchType typeOfMismatch;
    private string message;
    private string helperText;
    public string SettingGroup { get; public set; }
    public int WarningLevel { get; public set; }
    public string SettingName { get; public set; }
    public string SourceValue { get; public set; }
    public string TargetValue { get; public set; }
    public MismatchType MismatchType { get; public set; }
    public string Message { get; public set; }
    public string HelperText { get; public set; }
    public SettingMismatch(string name);
    internal SettingMismatch(string groupName, Setting sourceSetting, Setting targetSetting);
    internal SettingMismatch(string groupName, Setting setting, MismatchType mismatchType);
    public SettingMismatch(string name, string value, MismatchType mismatchType, int warningLevel);
    public SettingMismatch(string name, string sourceValue, string targetValue, int warningLevel);
    public string get_SettingGroup();
    public void set_SettingGroup(string value);
    public int get_WarningLevel();
    public void set_WarningLevel(int value);
    public string get_SettingName();
    public void set_SettingName(string value);
    public string get_SourceValue();
    public void set_SourceValue(string value);
    public string get_TargetValue();
    public void set_TargetValue(string value);
    public MismatchType get_MismatchType();
    public void set_MismatchType(MismatchType value);
    public string get_Message();
    public void set_Message(string value);
    public string get_HelperText();
    public void set_HelperText(string value);
    public virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.SetValueAction : SetBaseAction {
    private EncryptionInformation encryptedInfo;
    private object objectValue;
    private bool preferEdit;
    private bool canDecodeStringBeCalled;
    [XmlIgnoreAttribute]
public bool IsParameterizable { get; }
    [XmlIgnoreAttribute]
public object Value { get; public set; }
    [XmlIgnoreAttribute]
public string ValueAsString { get; public set; }
    [XmlElementAttribute]
public EncryptionInformation TextValue { get; public set; }
    [XmlIgnoreAttribute]
public bool IsEncoded { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1721")]
public string Type { get; public set; }
    private object ObjectValue { get; private set; }
    [XmlIgnoreAttribute]
public bool PreferEdit { get; public set; }
    [XmlElementAttribute]
public string PreferEditWrapper { get; public set; }
    public SetValueAction(UITechnologyElement uiElement, object value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public virtual bool get_IsParameterizable();
    public object get_Value();
    public void set_Value(object value);
    public virtual string get_ValueAsString();
    public virtual void set_ValueAsString(string value);
    internal string GetValueAsCurrentCultureString(ControlType controlType);
    internal virtual bool MatchParameter(string specifiedParameter);
    private bool MatchControlSpecificParameters(string specifiedString);
    public EncryptionInformation get_TextValue();
    public void set_TextValue(EncryptionInformation value);
    public bool get_IsEncoded();
    public void set_IsEncoded(bool value);
    public string get_Type();
    public void set_Type(string value);
    public bool IsActionOnProtectedElement();
    internal virtual string GetParameterString();
    internal virtual void BindParameter(ValueMap valueMap, ControlType controlType);
    private string GetValueInRequiredVSTTFormat(ControlType controlType, string paramValue);
    private bool TryValueAsString(String& valueAsString);
    private object get_ObjectValue();
    private void set_ObjectValue(object value);
    public bool get_PreferEdit();
    public void set_PreferEdit(bool value);
    public string get_PreferEditWrapper();
    public void set_PreferEditWrapper(string value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.SharedStepsReferenceAction : NoOperationAction {
    private int sharedSetSetId;
    [XmlAttributeAttribute]
public int SharedSetSetId { get; public set; }
    public SharedStepsReferenceAction(int id);
    public int get_SharedSetSetId();
    public void set_SharedSetSetId(int value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.SingleQueryId : object {
    public static string FindAllAttribute;
    private List`1<PropertyCondition> properties;
    private List`1<PropertyCondition> filterProperties;
    private List`1<string> technologyAttributes;
    private string secondaryPropertyString;
    private static Regex attributesRegEx;
    private static Regex nameValueRegex;
    private static string propertySeparater;
    private static char attributeSeparator;
    public IList`1<string> TechnologyAttributes { get; }
    public List`1<PropertyCondition> SearchProperties { get; }
    public List`1<PropertyCondition> FilterProperties { get; }
    public bool IsExpandable { get; }
    public SingleQueryId(string queryString);
    private static SingleQueryId();
    public void AddTechnologyAttribute(string attribute);
    public IList`1<string> get_TechnologyAttributes();
    public List`1<PropertyCondition> get_SearchProperties();
    public List`1<PropertyCondition> get_FilterProperties();
    public int GetQueryPropertyIndex(string propertyName);
    public bool UpdatePropertyValue(string propertyName, object propertyValue);
    public string GetQueryPropertyValue(string propertyName);
    public bool get_IsExpandable();
    public virtual string ToString();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.SqmUpdater : object {
    private static ISqmUpdater s_Instance;
    public static ISqmUpdater Instance { get; }
    public static ISqmUpdater get_Instance();
    public sealed virtual void UpdateSqmForElement(IUITechnologyElement element);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.StringAssertAction : ValidationAction {
    private StringAssertCondition propertyCondition;
    private StringComparison comparison;
    public StringComparison Comparison { get; public set; }
    public StringAssertCondition PropertyCondition { get; public set; }
    public StringAssertAction(UITechnologyElement uiElement, string propertyName, string expectedValue, StringAssertCondition propertyCondition, StringComparison comparison);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public StringComparison get_Comparison();
    public void set_Comparison(StringComparison value);
    public void set_PropertyCondition(StringAssertCondition value);
    public StringAssertCondition get_PropertyCondition();
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.StringAssertCondition : Enum {
    public int value__;
    public static StringAssertCondition Matches;
    public static StringAssertCondition DoesNotMatch;
    public static StringAssertCondition StartsWith;
    public static StringAssertCondition EndsWith;
    public static StringAssertCondition Contains;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.SystemAction : UITestAction {
    [CompilerGeneratedAttribute]
private string <ActionType>k__BackingField;
    public string ActionType { get; public set; }
    public SystemAction(UITestActionLogEntry actionLog);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    [CompilerGeneratedAttribute]
public string get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.TechnologyManagerSettings : object {
    internal static SettingGroup CaptureAllSettings();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.TestStepMarkerAction : MarkerAction {
    private int stepId;
    private string outcome;
    private static int NoStepId;
    private MarkerDirections direction;
    private bool disabled;
    private int workItemId;
    private MarkerRegionType regionType;
    public int StepId { get; public set; }
    public MarkerDirections Direction { get; public set; }
    public string Outcome { get; public set; }
    public bool Disabled { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public int WorkItemId { get; public set; }
    public MarkerRegionType MarkerRegionType { get; public set; }
    public TestStepMarkerAction(int stepId, string markerInfo, string outcome);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public virtual string ToString();
    public int get_StepId();
    public void set_StepId(int value);
    public MarkerDirections get_Direction();
    public void set_Direction(MarkerDirections value);
    public string get_Outcome();
    public void set_Outcome(string value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    public int get_WorkItemId();
    public void set_WorkItemId(int value);
    public MarkerRegionType get_MarkerRegionType();
    public void set_MarkerRegionType(MarkerRegionType value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.TouchAction : MouseAction {
    private string actionName;
    private bool isGestureComplete;
    private GestureType gestureType;
    private ManipulationType[] manipulations;
    public bool IsGestureComplete { get; public set; }
    public GestureType GestureType { get; public set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public ManipulationType[] Manipulations { get; public set; }
    [XmlIgnoreAttribute]
public string ActionName { get; public set; }
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public bool get_IsGestureComplete();
    public void set_IsGestureComplete(bool value);
    public GestureType get_GestureType();
    public void set_GestureType(GestureType value);
    public ManipulationType[] get_Manipulations();
    public void set_Manipulations(ManipulationType[] value);
    public virtual string get_ActionName();
    public virtual void set_ActionName(string value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Common.UIMap.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AncestorInstanceInfo { get; }
    internal static string FormattedFriendlyName { get; }
    internal static string HierarchicalNameDelimiter { get; }
    internal static string IDNotFoundExceptionMessage { get; }
    internal static string IncorrectUIObjectId { get; }
    internal static string NextToInfo { get; }
    internal static string NextToInstanceInfo { get; }
    internal static string TopLevelWindowNotFound { get; }
    internal static string UIObjectNotFound { get; }
    internal static string UnknownControlName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AncestorInstanceInfo();
    internal static string get_FormattedFriendlyName();
    internal static string get_HierarchicalNameDelimiter();
    internal static string get_IDNotFoundExceptionMessage();
    internal static string get_IncorrectUIObjectId();
    internal static string get_NextToInfo();
    internal static string get_NextToInstanceInfo();
    internal static string get_TopLevelWindowNotFound();
    internal static string get_UIObjectNotFound();
    internal static string get_UnknownControlName();
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.VisualStudio.TestTools.UITest.Common.UIMap.SpecialControlType : Enum {
    public int value__;
    public static SpecialControlType None;
    public static SpecialControlType BrowserWindow;
    public static SpecialControlType DocumentWindow;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UITest.Common.UIMap.TopLevelElement : UIObject {
    public virtual string GetQueryString();
    public virtual object Clone();
}
[EditorBrowsableAttribute("1")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
public class Microsoft.VisualStudio.TestTools.UITest.Common.UIMap.UIMap : object {
    private Collection`1<TopLevelElement> topLevelElements;
    private string fileName;
    private Dictionary`2<string, UIObject> idDictionary;
    private Dictionary`2<string, string> excludeTopLevelId;
    private Dictionary`2<IUITechnologyElement, UIObject> elementDictionary;
    private string id;
    private static int MaxIdLength;
    internal static string UIMapIdSeperator;
    private static string role;
    private static string outlineitem;
    private static string checkbox;
    private static string menuItem;
    private static string ControlTypeString;
    private UniqueNameHelper uniqueNameHelper;
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlArrayItemAttribute("TopLevelWindow")]
public Collection`1<TopLevelElement> TopLevelWindows { get; }
    [XmlIgnoreAttribute]
public string FileName { get; public set; }
    private Dictionary`2<string, UIObject> IdDictionary { get; }
    private Dictionary`2<IUITechnologyElement, UIObject> ElementDictionary { get; }
    public IDictionary`2<IUITechnologyElement, string> UniqueNameDictionary { get; }
    private static UIMap();
    public string get_Id();
    public void set_Id(string value);
    public Collection`1<TopLevelElement> get_TopLevelWindows();
    public string get_FileName();
    public void set_FileName(string value);
    public void AddUIObjects(IEnumerable`1<IUITechnologyElement> uiElements);
    public UIObject AddUIObject(IUITechnologyElement element);
    public UIObject MergeUIObject(UIMap uiMap, string objectName);
    public TopLevelElement GetTopLevelElement(UIObject uiObject);
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
public int GetCount();
    public void Clear();
    public bool Contains(UIObject uiObject);
    public bool Remove(UIObject uiObject);
    public IEnumerator`1<UIObject> GetEnumerator();
    public string GetQueryIdFromId(string uiObjectId);
    public UIObject GetUIObjectFromUIObjectId(string uiObjectId);
    public string GetUIObjectNameForAction(UITestAction action);
    public string GetUIObjectNameForElement(UITechnologyElement element);
    public void BindParameters(ValueMap valueMap);
    private void AddToElementDictionary(IUITechnologyElement element, UIObject uiObject);
    private TopLevelElement GetExistingTopLevelElement(TopLevelElement newWindow);
    private TopLevelElement AddTopLevelElement(TopLevelElement window, Dictionary`2<string, string> excludeId);
    private TopLevelElement GetTopLevelElementFromId(string elementId);
    private TopLevelElement TryGetTopLevelElementFromId(string elementId);
    private static IUITechnologyElement[] GetElementsInOrder(IUITechnologyElement element);
    private Dictionary`2<string, UIObject> get_IdDictionary();
    private void BuildIdDictionary();
    private void BuildIdDictionaryInternal(UIObject uiObject);
    private Dictionary`2<IUITechnologyElement, UIObject> get_ElementDictionary();
    internal void AddExcludeTopLevelIds(IEnumerable`1<TopLevelElement> topElements);
    internal TopLevelElement GetTopLevelElementFromUIMapId(string uiObjectId, String& remainingUIObjectId);
    internal static string GetTopLevelElementFriendlyName(string uiObjectName);
    internal static string GetContainerFriendlyName(string uiObjectName);
    internal static bool IsTopLevelElementId(string uiObjectName);
    internal bool ContainsExpandableAncestor(string uiObjectId);
    private static bool IsRoleOrControlTypeOfExpandableControl(QueryCondition qCond);
    internal IList`1<UIObject> GetAllUIElements(string uiObjectId);
    public IDictionary`2<IUITechnologyElement, string> get_UniqueNameDictionary();
    internal static string ParentElementId(string uiObjectName);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.UIMap.UIMapUtil : object {
    internal static string UIMapIdSeperator;
    private static int MaxIdLength;
    private static string NameString;
    private static string UIObjectIdPrefix;
    public static string GenerateId(UIObject obj, Dictionary`2<string, UIObject> idHash);
    public static string GenerateId(UIObject obj, Dictionary`2<string, UIObject> idHash, Dictionary`2<string, string> idExclude);
    public static bool CompareUIObjects(UIObject firstObject, UIObject secondObject);
    public static UIObject FromUIElement(IUITechnologyElement element);
    public static UIObject FromUIElement(IUITechnologyElement element, UIObject obj);
    public static TopLevelElement FillTopLevelElementFromUIElement(IUITechnologyElement element, TopLevelElement obj, bool stripBrowserWindowTitleSuffix);
    public static void UpdateProperties(UIObject targetObject, UIObject sourceObject);
    public static bool CompareString(string firstString, string secondString, StringComparison comparisonType);
    public static string GetUniqueName(UIObject uiObject, string uiMapId);
    internal static string GetNextId(string uiObjectId, String& remainingUIMapId);
    internal static string GetLastId(string uiObjectId, String& previousUIMapId);
    internal static string GetCompleteQueryId(UITechnologyElement pluginNode);
    internal static PropertyCondition GetCondition(IQueryCondition queryConditions, string propertyName);
    private static void FillPropertyFromUIElement(UIObject obj, IUITechnologyElement element);
    private static void FillPropertyOfTopLevelElementFromUIElement(UIObject obj, IUITechnologyElement element);
    public static SpecialControlType GetSpecialControlType(IUITechnologyElement element);
    public static string MakePascal(string name);
    public static bool IsBrowserWindow(UITechnologyElement element);
    public static bool UpdateBrowserWindowTitles(UITechnologyElement topLevelElement, UIObject obj, string windowTitle);
    public static void HandleBrowserTitles(IUITechnologyElement element, TopLevelElement obj, bool stripBrowserWindowTitleSuffix);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
[XmlIncludeAttribute("Microsoft.VisualStudio.TestTools.UITest.Common.UIMap.TopLevelElement")]
public class Microsoft.VisualStudio.TestTools.UITest.Common.UIMap.UIObject : object {
    [CompilerGeneratedAttribute]
private SpecialControlType <SpecialControlType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SupportLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheQueryString>k__BackingField;
    internal static StringComparer IdComparer;
    private string name;
    private string controlType;
    private string frameworkName;
    private string id;
    private string friendlyName;
    private QueryElement queryId;
    private UIObject ancestor;
    private QueryCondition condition;
    private Collection`1<UIObject> uiObjects;
    private Dictionary`2<string, UIObject> idDictionary;
    private String[] searchConfigurationsList;
    private string cachedQueryString;
    private Collection`1<string> windowTitles;
    [XmlIgnoreAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string ControlType { get; public set; }
    public string TechnologyName { get; public set; }
    [XmlAttributeAttribute]
public string Id { get; public set; }
    [XmlAttributeAttribute]
public string FriendlyName { get; public set; }
    [XmlAttributeAttribute]
public SpecialControlType SpecialControlType { get; public set; }
    [XmlAttributeAttribute]
public string SessionId { get; public set; }
    [XmlIgnoreAttribute]
public QueryElement QueryId { get; public set; }
    [XmlArrayItemAttribute]
public Collection`1<string> WindowTitles { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
[XmlArrayItemAttribute]
public String[] SearchConfigurations { get; public set; }
    internal UIObject Ancestor { get; internal set; }
    [XmlElementAttribute]
public QueryCondition Condition { get; public set; }
    [XmlElementAttribute]
public string SupportLevelWrapper { get; public set; }
    [XmlIgnoreAttribute]
public int SupportLevel { get; public set; }
    [XmlIgnoreAttribute]
public UIObject Item { get; }
    [XmlArrayItemAttribute]
public Collection`1<UIObject> Descendants { get; }
    internal bool CacheQueryString { get; internal set; }
    private Dictionary`2<string, UIObject> IdDictionary { get; }
    private static UIObject();
    public virtual object Clone();
    internal virtual UIObject FillDetails(UIObject targetObject);
    public string get_Name();
    public void set_Name(string value);
    public string get_ControlType();
    public void set_ControlType(string value);
    public string get_TechnologyName();
    public void set_TechnologyName(string value);
    public string get_Id();
    public void set_Id(string value);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public SpecialControlType get_SpecialControlType();
    [CompilerGeneratedAttribute]
public void set_SpecialControlType(SpecialControlType value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    public QueryElement get_QueryId();
    public void set_QueryId(QueryElement value);
    public Collection`1<string> get_WindowTitles();
    public String[] get_SearchConfigurations();
    public void set_SearchConfigurations(String[] value);
    internal UIObject get_Ancestor();
    internal void set_Ancestor(UIObject value);
    public QueryCondition get_Condition();
    public void set_Condition(QueryCondition value);
    public string get_SupportLevelWrapper();
    public void set_SupportLevelWrapper(string value);
    [CompilerGeneratedAttribute]
public int get_SupportLevel();
    [CompilerGeneratedAttribute]
public void set_SupportLevel(int value);
    public UIObject get_Item(string uiObjectId);
    public Collection`1<UIObject> get_Descendants();
    public UIObject Add(UIObject uiObject);
    public bool Remove(string objectId);
    public bool Remove(UIObject uiObject);
    public bool Contains(string objectId);
    private UIObject GetExistingObject(UIObject uiObject);
    public UIObject GetUIObjectFromId(string uiObjectId);
    public UIObject GetUIObjectFromPartialUIObjectId(string partialUIObjectId);
    public virtual string ToString();
    public void ParameterizeProperty(string propertyName, string parameterName);
    public void BindParameters(ValueMap valueMap);
    public string GetQueryString(string partialId);
    public virtual string GetQueryString();
    [CompilerGeneratedAttribute]
internal bool get_CacheQueryString();
    [CompilerGeneratedAttribute]
internal void set_CacheQueryString(bool value);
    internal void AddWindowTitle(IList`1<string> sourceWindowTitles, int titleIndex);
    internal void AddWindowTitles(IList`1<string> sourceWindowTitles);
    private static bool TitleExists(IList`1<string> windowTitles, string titleToMatch);
    private static bool CompareTitles(string sourceTitle, string titleToCompare);
    internal string GetQueryString(bool generatingTopLevelElement);
    private Dictionary`2<string, UIObject> get_IdDictionary();
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces")]
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITest : object {
    [CompilerGeneratedAttribute]
private ValueMap <ValueMap>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventHandler`1<UITestEventArgs> Saving;
    [CompilerGeneratedAttribute]
private static EventHandler`1<UITestEventArgs> Executing;
    private string name;
    private Guid id;
    private ActionList initializeActions;
    private ActionList executeActions;
    private ActionList cleanupActions;
    private ActionList onErrorActions;
    private Collection`1<UIMap> maps;
    private string version;
    private string assemblyVersion;
    private ActionList currentActionList;
    private bool containsRecording;
    private UITestEnvironment configuration;
    internal static string AssemblyFileVersion;
    [XmlElementAttribute]
public UITestEnvironment Configuration { get; public set; }
    [XmlIgnoreAttribute]
public ActionList CurrentActionList { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public Guid Id { get; public set; }
    public ActionList InitializeActions { get; public set; }
    public ActionList ExecuteActions { get; public set; }
    public ActionList CleanupActions { get; public set; }
    public ActionList OnErrorActions { get; public set; }
    public Collection`1<UIMap> Maps { get; }
    public ValueMap ValueMap { get; public set; }
    [XmlAttributeAttribute]
public string AssemblyVersion { get; public set; }
    [XmlAttributeAttribute]
public string Version { get; public set; }
    public UITest(IEnumerable`1<UITestAction> executeActions, UIMap map);
    public UITest(IEnumerable`1<UITestAction> executeActions);
    private static UITest();
    public static UITest Create(Stream reader);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static UITest Create(string uitestFile);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public void Save(string uitestFile);
    public void Save(Stream writer);
    public int Append(IEnumerable`1<UITestAction> actions);
    public int Append(UITest uiTest, long startId, long stopId);
    public int Append(IEnumerable`1<UITestAction> actions, UIMap map);
    public ActionList GetActionList(UITestActionListSection section);
    public void CreateAndAddParameter(UITestAction action, string parameterName);
    public void CreateAndAddParameter(UIObject uiObject, string propertyName, string parameterName);
    public void BindWithCurrentValues();
    public Collection`1<SettingMismatch> CompareStoredEnvironmentWithCurrentEnvironment();
    [SuppressMessageAttribute("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")]
public static Collection`1<SettingMismatch> CompareEnvironments(UITestEnvironment source, UITestEnvironment target);
    public virtual bool Equals(object other);
    public bool Equals(UITest uiTest);
    public virtual int GetHashCode();
    public UITestEnvironment get_Configuration();
    public void set_Configuration(UITestEnvironment value);
    public ActionList get_CurrentActionList();
    public void set_CurrentActionList(ActionList value);
    public string get_Name();
    public void set_Name(string value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public ActionList get_InitializeActions();
    public void set_InitializeActions(ActionList value);
    public ActionList get_ExecuteActions();
    public void set_ExecuteActions(ActionList value);
    public ActionList get_CleanupActions();
    public void set_CleanupActions(ActionList value);
    public ActionList get_OnErrorActions();
    public void set_OnErrorActions(ActionList value);
    public Collection`1<UIMap> get_Maps();
    [CompilerGeneratedAttribute]
public ValueMap get_ValueMap();
    [CompilerGeneratedAttribute]
public void set_ValueMap(ValueMap value);
    public string get_AssemblyVersion();
    public void set_AssemblyVersion(string value);
    public string get_Version();
    public void set_Version(string value);
    [CompilerGeneratedAttribute]
public static void add_Saving(EventHandler`1<UITestEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(EventHandler`1<UITestEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Executing(EventHandler`1<UITestEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Executing(EventHandler`1<UITestEventArgs> value);
    internal int AppendByMergingTechnologyElements(IEnumerable`1<UITestAction> actions, UIMap map, bool updateNames);
    internal static void FireBeforeExecute(UITestActionInvoker actionInvoker, UITest uiTest);
    private static void LogMismatchedSettings(Collection`1<SettingMismatch> mismatchedSettings);
    private static void Validate(Stream stream);
    private static void UITestSchemaValidationHandler(object sender, ValidationResult e);
    private void BindActionList(ActionList actionList);
    private ControlType GetControlTypeForAction(UITestAction action);
    private void BindActionListWithCurrentValues(ActionList actionList);
    private void AddParameterNameToValueMap(UITestAction anAction);
    private void AddParameterAndBindActionWithCurrentValues(UITestAction action);
    public void SetAndBindParameterValues(DataRow row);
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.UITestAction : object {
    [CompilerGeneratedAttribute]
private UITestActionLogEntry <ActionLogEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private string parameterName;
    private bool isParameterizedBound;
    private long startTimestamp;
    private long endTimestamp;
    private TimeSpan elapsedTime;
    private int thinkTime;
    private int actualThinkTime;
    private static long lastId;
    private DateTime dateTime;
    private string uiObjectName;
    private UITechnologyElement uiElement;
    private string comment;
    private long id;
    private string additionalInfo;
    private bool needFiltering;
    private bool continueOnError;
    private UITestActionExtension uiTestActionExtension;
    private UITestImageEntry imageEntry;
    private IDictionary`2<string, object> tags;
    [XmlAttributeAttribute]
public string UIObjectName { get; public set; }
    [XmlIgnoreAttribute]
public UITechnologyElement UIElement { get; public set; }
    [XmlAttributeAttribute]
public string Comment { get; public set; }
    [XmlIgnoreAttribute]
public long Id { get; public set; }
    [XmlIgnoreAttribute]
public TimeSpan ElapsedTime { get; public set; }
    [XmlIgnoreAttribute]
public long StartTimestamp { get; public set; }
    [XmlIgnoreAttribute]
public DateTime Timestamp { get; public set; }
    [XmlIgnoreAttribute]
public long EndTimestamp { get; public set; }
    [EditorBrowsableAttribute("1")]
[XmlAttributeAttribute("ThinkTime")]
public string ThinkTimeString { get; public set; }
    [XmlIgnoreAttribute]
public int ThinkTime { get; public set; }
    [XmlIgnoreAttribute]
public int ActualThinkTime { get; public set; }
    [XmlIgnoreAttribute]
public string ActionName { get; public set; }
    [XmlIgnoreAttribute]
public string ValueAsString { get; public set; }
    [XmlIgnoreAttribute]
public string AdditionalInfo { get; public set; }
    [XmlIgnoreAttribute]
public bool NeedFiltering { get; public set; }
    [XmlIgnoreAttribute]
public bool ContinueOnError { get; public set; }
    [XmlElementAttribute]
public string ContinueOnErrorWrapper { get; public set; }
    [XmlIgnoreAttribute]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public bool IsParameterizable { get; }
    public string ParameterName { get; public set; }
    [XmlElementAttribute]
public UITestActionExtension UITestActionExtension { get; public set; }
    [XmlElementAttribute]
public UITestActionLogEntry ActionLogEntry { get; public set; }
    [XmlIgnoreAttribute]
public bool IsParameterBound { get; public set; }
    [XmlIgnoreAttribute]
internal bool IsParameterized { get; }
    [XmlIgnoreAttribute]
public IDictionary`2<string, object> Tags { get; private set; }
    [XmlIgnoreAttribute]
internal UITestImageEntry ImageEntry { get; internal set; }
    protected UITestAction(UITechnologyElement uiElement);
    public string get_UIObjectName();
    public void set_UIObjectName(string value);
    public UITechnologyElement get_UIElement();
    public void set_UIElement(UITechnologyElement value);
    public string get_Comment();
    public void set_Comment(string value);
    public long get_Id();
    public void set_Id(long value);
    public TimeSpan get_ElapsedTime();
    public void set_ElapsedTime(TimeSpan value);
    public long get_StartTimestamp();
    public void set_StartTimestamp(long value);
    public DateTime get_Timestamp();
    public void set_Timestamp(DateTime value);
    public long get_EndTimestamp();
    public void set_EndTimestamp(long value);
    public string get_ThinkTimeString();
    public void set_ThinkTimeString(string value);
    public int get_ThinkTime();
    public void set_ThinkTime(int value);
    public int get_ActualThinkTime();
    public void set_ActualThinkTime(int value);
    public virtual string get_ActionName();
    public virtual void set_ActionName(string value);
    public virtual string get_ValueAsString();
    public virtual void set_ValueAsString(string value);
    public virtual string get_AdditionalInfo();
    public virtual void set_AdditionalInfo(string value);
    public virtual bool get_NeedFiltering();
    public virtual void set_NeedFiltering(bool value);
    public bool get_ContinueOnError();
    public void set_ContinueOnError(bool value);
    public string get_ContinueOnErrorWrapper();
    public void set_ContinueOnErrorWrapper(string value);
    public virtual bool get_IsParameterizable();
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public UITestActionExtension get_UITestActionExtension();
    public void set_UITestActionExtension(UITestActionExtension value);
    [CompilerGeneratedAttribute]
public UITestActionLogEntry get_ActionLogEntry();
    [CompilerGeneratedAttribute]
public void set_ActionLogEntry(UITestActionLogEntry value);
    public bool get_IsParameterBound();
    public void set_IsParameterBound(bool value);
    internal bool get_IsParameterized();
    public IDictionary`2<string, object> get_Tags();
    private void set_Tags(IDictionary`2<string, object> value);
    internal UITestImageEntry get_ImageEntry();
    internal void set_ImageEntry(UITestImageEntry value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void CleanupPropertyChangeHandler();
    internal virtual bool MatchParameter(string specifiedParameter);
    protected void NotifyPropertyChanged(string propertyName);
    internal virtual string GetParameterString();
    internal virtual ICollection`1<UITechnologyElement> GetUIElementCollection();
    internal virtual void FixUIObjectName(IDictionary`2<IUITechnologyElement, string> uniqueNameDictionary);
    internal virtual void FixUIObject();
    internal virtual void ValidateParameter();
    internal virtual void BindParameter(ValueMap valueMap, ControlType controlType);
    internal virtual void BindWithCurrentValues();
    internal virtual void ShallowCopy(UITestAction source, bool isSeparateAction);
    internal static long GetUniqueId();
    public abstract virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public virtual bool Equals(object other);
    public static bool op_Equality(UITestAction left, UITestAction right);
    public static bool op_Inequality(UITestAction left, UITestAction right);
    public virtual int GetHashCode();
    public virtual string ToString();
    private void ImageEntry_PropertyChanged(object sender, PropertyChangedEventArgs e);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionEventArgs : EventArgs {
    private UITestAction action;
    public UITestAction Action { get; }
    public UITestActionEventArgs(UITestAction action);
    public UITestAction get_Action();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionExtension : object {
    private AndCondition extendedProperties;
    internal static string ImagePathProperty;
    internal static string InteractionPoint;
    internal static string SnapShotTimeStamp;
    [XmlElementAttribute]
public AndCondition ExtendedProperties { get; public set; }
    private static UITestActionExtension();
    public AndCondition get_ExtendedProperties();
    public void set_ExtendedProperties(AndCondition value);
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionFilter : object {
    public string Group { get; }
    public UITestActionFilterCategory Category { get; }
    public string Name { get; }
    public UITestActionFilterType FilterType { get; }
    public bool ApplyTimeout { get; }
    public bool Enabled { get; }
    public abstract virtual string get_Group();
    public abstract virtual UITestActionFilterCategory get_Category();
    public abstract virtual string get_Name();
    public abstract virtual UITestActionFilterType get_FilterType();
    public abstract virtual bool get_ApplyTimeout();
    public abstract virtual bool get_Enabled();
    public abstract virtual bool ProcessRule(IUITestActionStack actionStack);
}
[SuppressMessageAttribute("Microsoft.Design", "CA1008:EnumsShouldHaveZeroValue")]
public enum Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionFilterCategory : Enum {
    public int value__;
    [EditorBrowsableAttribute("1")]
public static UITestActionFilterCategory Critical;
    public static UITestActionFilterCategory PostCritical;
    public static UITestActionFilterCategory PreGeneral;
    [EditorBrowsableAttribute("1")]
public static UITestActionFilterCategory General;
    public static UITestActionFilterCategory PostGeneral;
    public static UITestActionFilterCategory PreSimpleToCompoundActionConversion;
    [EditorBrowsableAttribute("1")]
public static UITestActionFilterCategory SimpleToCompoundActionConversion;
    public static UITestActionFilterCategory PostSimpleToCompoundActionConversion;
    public static UITestActionFilterCategory PreRedundantActionDeletion;
    [EditorBrowsableAttribute("1")]
public static UITestActionFilterCategory RedundantActionDeletion;
    public static UITestActionFilterCategory PostRedundantActionDeletion;
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionFilterType : Enum {
    public int value__;
    public static UITestActionFilterType Unary;
    public static UITestActionFilterType Binary;
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionInvoker : object {
    public bool InRetryMode { get; public set; }
    public abstract virtual bool get_InRetryMode();
    public abstract virtual void set_InRetryMode(bool value);
    public abstract virtual void Invoke(ErrorAction action, UIMap map);
    public abstract virtual void Invoke(WarningAction action, UIMap map);
    public abstract virtual void Invoke(VerifyConfigurationAction action, UIMap map);
    public abstract virtual void Invoke(NoOperationAction action, UIMap map);
    public abstract virtual void Invoke(StringAssertAction action, UIMap map);
    public abstract virtual void Invoke(AssertAction action, UIMap map);
    public abstract virtual void Invoke(MarkerAction action, UIMap map);
    public abstract virtual void Invoke(TestStepMarkerAction action, UIMap map);
    public abstract virtual void SearchAndInvoke(UITestAction action, UIMap map, CustomInvoker invoker);
    public abstract virtual void Invoke(MouseAction action, UIMap map);
    public abstract virtual void Invoke(DelayAction action, UIMap map);
    public abstract virtual void Invoke(DragAction action, UIMap map);
    public abstract virtual void Invoke(DragDropAction action, UIMap map);
    public abstract virtual void Invoke(SendKeysAction action, UIMap map);
    public abstract virtual void Invoke(SetValueAction action, UIMap map);
    public abstract virtual void Invoke(SetStateAction action, UIMap map);
    public abstract virtual void Invoke(KeyboardAction action, UIMap map);
    public abstract virtual void Invoke(SharedStepsReferenceAction action, UIMap map);
    public abstract virtual void Invoke(MediaAction action, UIMap map);
    public abstract virtual void Invoke(InvokeAction action, UIMap map);
    public virtual void Invoke(TouchAction action, UIMap map);
    public abstract virtual void WaitForThinkTime(UITestAction action);
    public abstract virtual void Cancel();
    public abstract virtual void Dispose();
    public abstract virtual void Invoke(LaunchApplicationAction action, UIMap map);
    public abstract virtual void Invoke(NavigateToUrlAction action, UIMap map);
    public abstract virtual void Invoke(WebDialogAction action, UIMap map);
    public abstract virtual void Invoke(BrowserAction action, UIMap map);
    public abstract virtual void Invoke(SystemAction action, UIMap map);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionListEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UITestActionListSection <ActionListSection>k__BackingField;
    public UITestActionListSection ActionListSection { get; private set; }
    public UITestActionListEventArgs(UITestActionListSection actionListSection);
    [CompilerGeneratedAttribute]
public UITestActionListSection get_ActionListSection();
    [CompilerGeneratedAttribute]
private void set_ActionListSection(UITestActionListSection value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.UITestActionListSection : Enum {
    public int value__;
    public static UITestActionListSection InitializeActions;
    public static UITestActionListSection ExecuteActions;
    public static UITestActionListSection CleanupActions;
    public static UITestActionListSection OnErrorActions;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestEnvironment : UITestEnvironmentContainerBase`1<SettingGroup> {
    private static UITestEnvironment systemEnvironment;
    private static bool environmentInfoLogged;
    internal static UITestEnvironment SystemEnvironment { get; }
    [XmlElementAttribute]
public Collection`1<SettingGroup> Group { get; }
    internal static UITestEnvironment get_SystemEnvironment();
    public Collection`1<SettingGroup> get_Group();
    internal virtual Collection`1<SettingMismatch> Compare(UITestEnvironmentContainerBase`1<SettingGroup> targetBaseEnvironment);
    internal virtual Collection`1<SettingMismatch> GetAllSettingsAsMismatchedSettings(MismatchType mismatchType);
    internal static void LogEnvironmentInfo();
    private static UITestEnvironment CaptureAllSettings();
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.UITestEnvironmentContainerBase`1 : object {
    private Collection`1<TChild> childObjectCollection;
    private string name;
    internal Collection`1<TChild> ChildObjectCollection { get; internal set; }
    [XmlIgnoreAttribute]
public string Name { get; public set; }
    internal Collection`1<TChild> get_ChildObjectCollection();
    internal void set_ChildObjectCollection(Collection`1<TChild> value);
    internal abstract virtual Collection`1<SettingMismatch> Compare(UITestEnvironmentContainerBase`1<TChild> objectToCompare);
    internal TChild Get(string searchKey);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal abstract virtual Collection`1<SettingMismatch> GetAllSettingsAsMismatchedSettings(MismatchType mismatchType);
    public string get_Name();
    public void set_Name(string value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Common.UITestErrorActionResult : Enum {
    public int value__;
    public static UITestErrorActionResult Default;
    public static UITestErrorActionResult StopPlaybackAndContinueManually;
    public static UITestErrorActionResult StopPlaybackAndRerecord;
    public static UITestErrorActionResult RetryAction;
    public static UITestErrorActionResult SkipAction;
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestErrorEventArgs : UITestActionEventArgs {
    private Exception error;
    private UITestErrorActionResult result;
    public Exception Error { get; }
    public UITestErrorActionResult Result { get; public set; }
    public UITestErrorEventArgs(UITestAction action, Exception ex);
    public Exception get_Error();
    public UITestErrorActionResult get_Result();
    public void set_Result(UITestErrorActionResult value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private UITest <UITest>k__BackingField;
    public UITest UITest { get; private set; }
    public UITestEventArgs(UITest uiTest);
    [CompilerGeneratedAttribute]
public UITest get_UITest();
    [CompilerGeneratedAttribute]
private void set_UITest(UITest value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.UITestImageEntry : object {
    private UITestImageInfo imageInfo;
    private Point interactionPoint;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    internal UITestImageInfo ImageInformation { get; }
    internal Point InteractionPoint { get; }
    internal UITestImageEntry(UITestImageInfo imageInfo, Point interactionPoint);
    internal void UpdateUITestImageEntry(UITestImageInfo imageInformation, Point point);
    internal UITestImageInfo get_ImageInformation();
    internal Point get_InteractionPoint();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.UITestImageInfo : object {
    private string imagePath;
    private long snapShotTimeStamp;
    internal string ImagePath { get; internal set; }
    internal long SnapShotTimeStamp { get; }
    internal UITestImageInfo(string path, long snapShotTimeStamp);
    internal string get_ImagePath();
    internal void set_ImagePath(string value);
    internal long get_SnapShotTimeStamp();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.UITestLogGroupType : Enum {
    public int value__;
    public static UITestLogGroupType Test;
    public static UITestLogGroupType Scenario;
    public static UITestLogGroupType SubScenario;
    public static UITestLogGroupType Functional;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.UITestLogInfoMessageType : Enum {
    public int value__;
    public static UITestLogInfoMessageType None;
    public static UITestLogInfoMessageType EnsureValid;
    public static UITestLogInfoMessageType FindControl;
    public static UITestLogInfoMessageType FindMatchingControls;
    public static UITestLogInfoMessageType WaitForReady;
    public static UITestLogInfoMessageType Snapshot;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.UITestLogWarningMessageType : Enum {
    public int value__;
    public static UITestLogWarningMessageType None;
    public static UITestLogWarningMessageType PlaybackErrorOptionsType;
    public static UITestLogWarningMessageType FindMatchingControlsFailed;
    public static UITestLogWarningMessageType SkipIntermediateElements;
    public static UITestLogWarningMessageType SmartMatch;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.UITestLogWrapper : object {
    [CompilerGeneratedAttribute]
private static bool <IsSnapShotInfoEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsCodedUITestSession>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsContinueOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsTestNameLogged>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsTestErrorLogged>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsInActionLogFormatterContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsControlUnavailable>k__BackingField;
    [CompilerGeneratedAttribute]
private static UITechnologyElement <ElementForSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private static Rectangle <BoundingRectangleForElement>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <ContainerBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <SkipIntermediateSearchEnabled>k__BackingField;
    public static string HtmlOptOutTag;
    private static int s_accordionDepth;
    private static string standardContinueOnErrorMessage;
    private static bool s_isInFindGroup;
    private static bool s_isInActionGroup;
    private static int s_findRecursiveDepth;
    private static bool s_isLogDeactivated;
    private static bool s_isLoggerOverridden;
    private static bool s_isLoggerEnabledAtleastOnce;
    private static List`1<UITestLogWarningMessage> s_warningMessages;
    private static List`1<UITestLogInfoMessage> s_infoMessages;
    private static List`1<UITestLogErrorMessage> s_errorMessages;
    private static List`1<DurationInformation> s_actionDuration;
    public static bool IsActionLogDeactivated { get; public set; }
    public static bool IsGenerateLogDeactivated { get; }
    public static bool IsSnapShotInfoEnabled { get; public set; }
    public static bool IsCodedUITestSession { get; public set; }
    public static string LogDirectoryPath { get; public set; }
    public static bool IsContinueOnError { get; public set; }
    public static bool IsTestNameLogged { get; public set; }
    public static bool IsTestErrorLogged { get; public set; }
    public static bool IsInActionGroup { get; public set; }
    public static string TestName { get; public set; }
    public static bool IsInActionLogFormatterContext { get; public set; }
    public static bool IsControlUnavailable { get; public set; }
    public static UITechnologyElement ElementForSnapshot { get; public set; }
    public static Rectangle BoundingRectangleForElement { get; public set; }
    public static string ContainerBounds { get; public set; }
    public static bool SkipIntermediateSearchEnabled { get; public set; }
    private static string StandardErrorMessage { get; }
    private static UITestLogWrapper();
    public static bool get_IsActionLogDeactivated();
    public static void set_IsActionLogDeactivated(bool value);
    public static bool get_IsGenerateLogDeactivated();
    [CompilerGeneratedAttribute]
public static bool get_IsSnapShotInfoEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsSnapShotInfoEnabled(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsCodedUITestSession();
    [CompilerGeneratedAttribute]
public static void set_IsCodedUITestSession(bool value);
    public static string get_LogDirectoryPath();
    public static void set_LogDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public static bool get_IsContinueOnError();
    [CompilerGeneratedAttribute]
public static void set_IsContinueOnError(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsTestNameLogged();
    [CompilerGeneratedAttribute]
public static void set_IsTestNameLogged(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsTestErrorLogged();
    [CompilerGeneratedAttribute]
public static void set_IsTestErrorLogged(bool value);
    public static bool get_IsInActionGroup();
    public static void set_IsInActionGroup(bool value);
    public static string get_TestName();
    public static void set_TestName(string value);
    public static void LoggerGenerateEnsureVisibleSnapshotInfo();
    public static void Initialize(string testName);
    public static void SetTestContextPath(string directoryPath);
    public static void CreateGroup(UITestLogGroupType groupType, string groupHeader, string message);
    public static void BeginGroup(UITestLogGroupType groupType, string beginGroupHeader);
    public static void EndGroup();
    public static void ResetLogData();
    public static void ResetLoggerOverrides();
    public static void SetTimerInstance(bool inActionGroup);
    public static void ClearBeforeFindAction(string groupHeader);
    public static void GenerateStandardSummary(string fileName, string title, bool testExceptionRaised);
    public static List`1<string> GetMessages();
    public static void RegisterWarning(string exception, string message);
    public static void RegisterWarning(string exception, string message, UITestLogWarningMessageType warnType);
    public static void RegisterWarning(string exception, string message, UITestLogWarningMessageType warnType, Rectangle boundingRectangle);
    public static void RegisterError(Exception exception, string message, Rectangle controlBounds);
    public static void RegisterInformation(UITestLogInfoMessageType messageType, string message);
    public static void RegisterInformation(UITestLogInfoMessageType messageType, string message, Rectangle boundingRectangle, bool takeSnapshotPostAction);
    public static void RecordAndThrowException(Exception exception);
    public static void RecordException(string message, Exception exception, Rectangle boundingRectangle);
    public static void AggregateActionTime(UITestLogInfoMessageType type, int timeInMilliseconds, string controlInformation);
    public static void FlushMessages();
    [CompilerGeneratedAttribute]
public static bool get_IsInActionLogFormatterContext();
    [CompilerGeneratedAttribute]
public static void set_IsInActionLogFormatterContext(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsControlUnavailable();
    [CompilerGeneratedAttribute]
public static void set_IsControlUnavailable(bool value);
    [CompilerGeneratedAttribute]
public static UITechnologyElement get_ElementForSnapshot();
    [CompilerGeneratedAttribute]
public static void set_ElementForSnapshot(UITechnologyElement value);
    [CompilerGeneratedAttribute]
public static Rectangle get_BoundingRectangleForElement();
    [CompilerGeneratedAttribute]
public static void set_BoundingRectangleForElement(Rectangle value);
    [CompilerGeneratedAttribute]
public static string get_ContainerBounds();
    [CompilerGeneratedAttribute]
public static void set_ContainerBounds(string value);
    [CompilerGeneratedAttribute]
public static bool get_SkipIntermediateSearchEnabled();
    [CompilerGeneratedAttribute]
public static void set_SkipIntermediateSearchEnabled(bool value);
    private static void CleanUpTempFiles();
    private static bool IsRedundantWarningMessage(UITestLogWarningMessageType messageType, UITestLogWarningMessage& redundantMessage);
    private static bool IsRedundantInfoMessage(UITestLogInfoMessageType messageType);
    private static void DisplayErrors();
    private static void DisplayWarnings();
    private static void DisplayInfos();
    private static List`1<Field> GetSnapshotInfo();
    private static void UpdatePostActionScreenInfo();
    private static void LogMessages(string message);
    private static void Reset();
    private static void ClearMessages();
    private static string AddMessageLines(string message, String[] parameters);
    private static bool IsLogDisabled();
    private static string get_StandardErrorMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestProgressEventArgs : EventArgs {
    private int currentStep;
    private int totalSteps;
    private int thinkTime;
    private UITestAction action;
    public int CurrentStep { get; }
    public int TotalSteps { get; }
    public int ThinkTime { get; }
    public UITestAction Action { get; }
    public UITestProgressEventArgs(int currentStep, int totalSteps, UITestAction action);
    public UITestProgressEventArgs(int thinkTime, UITestAction action);
    public int get_CurrentStep();
    public int get_TotalSteps();
    public int get_ThinkTime();
    public UITestAction get_Action();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.UITestSchemaValidator : object {
    internal static EventHandler`1<ValidationResult> OnSchemaValidationCompleted;
    public static void ValidateUITestFileStream(Stream uitestStream, Stream xsdStream);
    private static void UITestSchemaValidationHandler(object sender, ValidationEventArgs e);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.UITestSerializationHelper : object {
    public static object Deserialize(XmlSerializer xmlSerializer, Stream reader);
    public static bool IsVS2010Beta2Format(Stream reader);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.UITestWarningEventArgs : UITestActionEventArgs {
    private Exception error;
    private string warningMessage;
    public Exception Error { get; }
    public string WarningMessage { get; public set; }
    public UITestWarningEventArgs(UITestAction action, Exception ex, string warning);
    public Exception get_Error();
    public string get_WarningMessage();
    public void set_WarningMessage(string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.UniqueNameHelper : object {
    internal ConcurrentDictionary`2<IUITechnologyElement, string> UniqueNameDictionary;
    internal bool TryAdd(IUITechnologyElement element, string objectName);
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Common.ValidationAction : UITestAction {
    private string propertyName;
    private string expectedValue;
    private string messageOnValidationFailure;
    public string PropertyName { get; public set; }
    public string ExpectedValue { get; public set; }
    public string MessageOnValidationFailure { get; public set; }
    [XmlIgnoreAttribute]
public bool IsParameterizable { get; }
    protected ValidationAction(UITechnologyElement uiElement, string propertyName, string expectedValue);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public virtual string get_ExpectedValue();
    public virtual void set_ExpectedValue(string value);
    public virtual string get_MessageOnValidationFailure();
    public virtual void set_MessageOnValidationFailure(string value);
    public virtual bool get_IsParameterizable();
    internal virtual void BindParameter(ValueMap valueMap, ControlType controltType);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.ValidationResult : EventArgs {
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    internal int Severity { get; internal set; }
    internal string Message { get; internal set; }
    internal Exception Exception { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Severity();
    [CompilerGeneratedAttribute]
internal void set_Severity(int value);
    [CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.VerifyConfigurationAction : UITestAction {
    internal UITestEnvironment SourceConfiguration;
    private string minimumWarningLevel;
    [XmlElementAttribute]
public string MinimumWarningLevel { get; public set; }
    public string get_MinimumWarningLevel();
    public void set_MinimumWarningLevel(string value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    internal virtual string GetParameterString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.WarningAction : UITestAction {
    private string message;
    private string idTag;
    public string Message { get; public set; }
    public string IdTag { get; public set; }
    public WarningAction(string message);
    public WarningAction(string message, string idTag);
    public WarningAction(string message, UITechnologyElement uiElement);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
    public string get_Message();
    public void set_Message(string value);
    public string get_IdTag();
    public void set_IdTag(string value);
    internal virtual string GetParameterString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Common.WebDialogAction : AggregatedAction {
    [CompilerGeneratedAttribute]
private string <PromptText>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserDialogAction <ActionType>k__BackingField;
    public string PromptText { get; public set; }
    public BrowserDialogAction ActionType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PromptText();
    [CompilerGeneratedAttribute]
public void set_PromptText(string value);
    [CompilerGeneratedAttribute]
public BrowserDialogAction get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(BrowserDialogAction value);
    public virtual void Invoke(UITestActionInvoker actionInvoker, UIMap map);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
