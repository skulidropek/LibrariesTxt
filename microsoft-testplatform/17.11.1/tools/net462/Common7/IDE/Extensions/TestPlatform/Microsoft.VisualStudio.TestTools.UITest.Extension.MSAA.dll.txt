[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Common.PluginUtilities : object {
    private static Dictionary`2<string, string> controlTypesForCheckingNamesAndValue;
    private static Dictionary`2<string, string> ControlTypesForCheckingNamesAndValue { get; }
    public static bool CheckForValueAndNameEquals(string controlType);
    private static Dictionary`2<string, string> get_ControlTypesForCheckingNamesAndValue();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.AccChildrenEnumerator : object {
    private AccWrapper element;
    private IEnumerator childEnumerator;
    private int currentChildIndex;
    private int childrenCount;
    public AccChildrenEnumerator(AccWrapper element);
    public AccWrapper GetNextChild(bool ignoreInvisibleChild);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.AccWrapper : object {
    [CompilerGeneratedAttribute]
private IUITechnologyElement <ContainerElement>k__BackingField;
    private IAccessible accessibleObject;
    private int childId;
    private IntPtr windowHandle;
    private AccWrapper parent;
    private Nullable`1<AccessibleRole> role;
    private int currentChildIndex;
    private int childrenCount;
    private Object[] children;
    internal IntPtr WindowHandle { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal string Name { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal string HelpText { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal AccessibleRole RoleInt { get; }
    internal AccessibleStates State { get; }
    internal string Value { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal AccWrapper Parent { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal AccWrapper Selection { get; }
    internal string KeyboardShortcut { get; }
    internal int ChildCount { get; }
    internal IAccessible AccessibleObject { get; }
    internal int ChildId { get; }
    internal IUITechnologyElement ContainerElement { get; internal set; }
    internal string AccessibleDescription { get; }
    internal AccWrapper(IntPtr windowHandle, IAccessible accessibleObject, int childId);
    internal AccWrapper(IAccessible accessibleObject, int childId);
    internal static AccWrapper GetAccWrapperFromWindow(IntPtr windowHandle);
    internal static AccWrapper GetAccWrapperFromPoint(POINT pt);
    internal static AccWrapper GetAccWrapperFromEvent(IntPtr windowHandle, int idObject, int idChild);
    internal Rectangle GetBoundingRectangle();
    internal IntPtr get_WindowHandle();
    internal void set_WindowHandle(IntPtr value);
    internal string get_Name();
    internal string get_HelpText();
    internal AccessibleRole get_RoleInt();
    internal AccessibleStates get_State();
    internal string get_Value();
    internal void set_Value(string value);
    internal AccWrapper get_Parent();
    internal AccWrapper get_Selection();
    internal string get_KeyboardShortcut();
    internal int get_ChildCount();
    internal void DoDefaultAction();
    internal void Select(int selectOption);
    internal IAccessible get_AccessibleObject();
    internal int get_ChildId();
    [CompilerGeneratedAttribute]
internal IUITechnologyElement get_ContainerElement();
    [CompilerGeneratedAttribute]
internal void set_ContainerElement(IUITechnologyElement value);
    internal string get_AccessibleDescription();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal AccWrapper Navigate(AccessibleNavigation navDir);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal AccWrapper GetNextChild(bool ignoreInvisibleChild);
    internal void UpdateChildren();
    internal static AccWrapper GetElementFromChildObject(IAccessible parentAcc, object childObj, bool ignoreInvisibleChild);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static AccWrapper GetAccessibleFromObject(IAccessible parent, object childObject);
    private static bool IsVisibleAndAvailableToUser(AccWrapper element);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.ChildrenEnumerator : object {
    private AccWrapper current;
    private MsaaElement parent;
    public MsaaElement Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ChildrenEnumerator(MsaaElement element);
    public sealed virtual MsaaElement get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.DataGridUtility : object {
    private static int PixelOffset;
    internal static MsaaElement cachedDatagridElement;
    internal static string WinformsEditableControlName;
    internal static string WinformsEditablePanelName;
    internal static string WinformsDatagridTableName;
    internal static string CreateNewRowValue;
    internal static string TopRowValue;
    internal static void SetSwitchingElement(MsaaElement element);
    internal static void GetDataGridCellFromElement(MsaaTestPlugin plugin, MsaaElement& elementForEvent, bool useCache);
    private static MsaaElement GetElementFromGridSibling(int x, int y, AccessibleNavigation navDir, AccessibleRole role, Rectangle rect, MsaaTestPlugin plugin);
    private static bool GetElementFromGridSiblingInternal(int x, int y, AccessibleNavigation navDir, AccessibleRole role, Rectangle rect, MsaaTestPlugin plugin, MsaaElement& gridElement);
    private static MsaaElement SearchOverlappingGridElement(MsaaElement element, int visiblePoint);
    private static bool IsPointInsideGrid(Rectangle rect, AccessibleRole role, int elementPoint);
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.DateTimePickerUtilities : object {
    private static UInt32 DTM_GETSYSTEMTIME;
    private static int DTS_TIMEFORMAT;
    internal static object GetValue(MsaaElement element);
    internal static bool IsDateTimePickerClassName(string className);
    private static bool GetSelectedDateTime(IntPtr windowHandle, DateTime& dateTime);
    private static bool ShouldGenerateTime(IntPtr datePickerWindowHandle);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.GetAccessibleFromEventHandler : MulticastDelegate {
    public GetAccessibleFromEventHandler(object object, IntPtr method);
    public virtual int Invoke(IntPtr windowHandle, int idObject, int idChild, IAccessible& pAcc, Object& childIdObj);
    public virtual IAsyncResult BeginInvoke(IntPtr windowHandle, int idObject, int idChild, IAccessible& pAcc, Object& childIdObj, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAccessible& pAcc, Object& childIdObj, IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.GetAccessibleFromPointHandler : MulticastDelegate {
    public GetAccessibleFromPointHandler(object object, IntPtr method);
    public virtual int Invoke(POINT pt, IAccessible& pAcc, Object& childId);
    public virtual IAsyncResult BeginInvoke(POINT pt, IAccessible& pAcc, Object& childId, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAccessible& pAcc, Object& childId, IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.GetAccessibleFromWindowHandler : MulticastDelegate {
    public GetAccessibleFromWindowHandler(object object, IntPtr method);
    public virtual IAccessible Invoke(IntPtr windowHandle);
    public virtual IAsyncResult BeginInvoke(IntPtr windowHandle, AsyncCallback callback, object object);
    public virtual IAccessible EndInvoke(IAsyncResult result);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.IE8Utilities : object {
    private static string ie8AddressBarEditGrandParentClassName;
    private static string ie8AddressBarButtonClassName;
    private static string ie8DropDownGrandParentClassName;
    public static bool IsIE8DropDownList(IUITechnologyElement grandParent);
    public static bool IsIE8AddresBarButton(IUITechnologyElement element);
    public static bool IsIE8AddressBarEdit(IUITechnologyElement element, MsaaTestPlugin msaaPlugin);
    public static MsaaElement GetIE8AddressBarEditFromButton(IUITechnologyElement element, MsaaTestPlugin msaaPlugin);
    private static bool IsTopLevelElementAnIEWindow(IUITechnologyElement element);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.ListBoxUtilities : object {
    private static int MaxChildDepth;
    internal static bool TryGetValue(AccessibleEvents accEvent, MsaaElement elementForEvent, Boolean& isLastEventGood, object eventArg, Object& value);
    private static bool IsSupportedEvent(AccessibleEvents accEvent);
    private static object TryGetCommaSeparatedValues(MsaaElement elementForEvent, Boolean& result);
    private static bool GetNameIfSelected(AccWrapper accWrapper, String& name);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.MonthCalendarUtilities : object {
    private static UInt32 MCM_GETSELRANGE;
    private static string MonthCalendarClassName;
    internal static object GetValue(AccessibleEvents accEvent, MsaaElement elementForEvent);
    internal static bool IsMonthCalendarButton(MsaaElement element);
    internal static bool IsMonthCalendarClassName(string className);
    private static bool IsSupportedEvent(AccessibleEvents accEvent);
    private static bool GetSelectedRangeDateTime(IntPtr windowHandle, DateTime& minDateTime, DateTime& maxDateTime);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.MsaaElement : UITechnologyElement {
    private Nullable`1<bool> isCeilingElement;
    [CompilerGeneratedAttribute]
private AccWrapper <CeilingElement>k__BackingField;
    private bool isCacheMode;
    private AccWrapper accWrapper;
    private IntPtr nativeWindowHandle;
    private IntPtr backupWindowHandle;
    private string controlTypeName;
    private string accesskey;
    private string runtimeId;
    private string className;
    private bool isElementNonRootTreeItem;
    private IntPtr ownerWindowHandle;
    private string ownerWindowClassName;
    private string ownerWindowText;
    private Nullable`1<bool> isWin32ForSure;
    private Point midPoint;
    private Nullable`1<int> supportLevel;
    private Nullable`1<bool> isIE9AddressEditControl;
    private IQueryElement queryID;
    private UITechnologyElement topLevelElement;
    private MsaaElement parent;
    private IQueryElement singleQueryID;
    private Nullable`1<int> processId;
    private Nullable`1<bool> isSimpleComboBox;
    private Nullable`1<bool> isElementDataGridCell;
    private IUITechnologyElement simpleComboBoxSourceElement;
    private Nullable`1<bool> isPassword;
    private string name;
    private string friendlyName;
    private string id;
    private Nullable`1<int> controlId;
    private Nullable`1<bool> isTopLevelElement;
    private string controlText;
    private string nativeControlType;
    private bool distinctCheckDone;
    private static string EditableControlName;
    private static string UnitializedValue;
    private static string IE9AddressBarParentClassName;
    private static Char[] InvalidXMLCharacters;
    public IUITechnologyElement SwitchingElement { get; public set; }
    public int ChildIndex { get; }
    public bool IsLeafNode { get; }
    public object NativeElement { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string TechnologyName { get; }
    public UITechnologyManager TechnologyManager { get; }
    public bool IsPassword { get; }
    public string Name { get; }
    public string FriendlyName { get; }
    public IntPtr WindowHandle { get; }
    public AutomationElement AutomationElement { get; }
    public IQueryElement QueryId { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string Value { get; public set; }
    public bool IsTreeSwitchingRequired { get; }
    public int SupportLevel { get; }
    internal IQueryElement QueryIdInternal { get; internal set; }
    internal IntPtr BackupWindowHandle { get; }
    internal string Id { get; }
    internal int ControlId { get; }
    internal bool IsTopLevelElement { get; }
    internal bool IsCeilingElement { get; }
    internal AccWrapper CeilingElement { get; internal set; }
    internal bool IsBoundayForHostedControl { get; }
    internal AccWrapper AccessibleWrapper { get; }
    internal IAccessible AccessibleObject { get; }
    internal int ChildId { get; }
    internal AccessibleRole RoleInt { get; }
    internal MsaaElement Parent { get; internal set; }
    internal AccWrapper ParentWrapper { get; }
    internal string ControlText { get; }
    internal int ProcessId { get; }
    internal bool IsSimpleComboBox { get; }
    internal bool IsElementDataGridCell { get; internal set; }
    internal IUITechnologyElement SimpleComboBoxSourceElement { get; }
    internal bool IsDesktop { get; }
    internal bool IsWin32ForSure { get; }
    internal bool IsChildOfDesktop { get; }
    internal string ValueForIdentification { get; }
    internal IntPtr OwnerWindowHandle { get; internal set; }
    internal string OwnerWindowText { get; internal set; }
    internal string OwnerWindowClassName { get; internal set; }
    internal bool IsIE9AddressEditControl { get; }
    internal MsaaElement(IAccessible accessibleObject, int childId);
    internal MsaaElement(IntPtr windowHandle, IAccessible accessibleObject, int childId);
    internal MsaaElement(AccWrapper accessibleWrapper);
    internal MsaaElement(IntPtr win32Handle);
    private static MsaaElement();
    public virtual IUITechnologyElement get_SwitchingElement();
    public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual int get_ChildIndex();
    public virtual bool get_IsLeafNode();
    public virtual object get_NativeElement();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual string get_TechnologyName();
    public virtual UITechnologyManager get_TechnologyManager();
    public virtual bool get_IsPassword();
    public virtual string get_Name();
    public virtual string get_FriendlyName();
    public virtual IntPtr get_WindowHandle();
    public virtual AutomationElement get_AutomationElement();
    public virtual IQueryElement get_QueryId();
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    public virtual int get_SupportLevel();
    public virtual void CacheProperties();
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programaticOption);
    public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outPointX, Int32& outPointY);
    public virtual object GetPropertyValue(string propertyName);
    public virtual void SetFocus();
    public virtual void WaitForReady();
    private string GetQueryIdOfChild(string childname);
    public virtual bool InitializeProgrammaticScroll();
    public virtual void ScrollProgrammatically(ScrollDirection srollDirection, ScrollAmount scrollAmount);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public virtual bool Equals(IUITechnologyElement element);
    internal bool EqualsIgnoreContainer(IUITechnologyElement element);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal IQueryElement get_QueryIdInternal();
    internal void set_QueryIdInternal(IQueryElement value);
    internal IntPtr get_BackupWindowHandle();
    internal string get_Id();
    internal int get_ControlId();
    internal bool get_IsTopLevelElement();
    internal bool get_IsCeilingElement();
    [CompilerGeneratedAttribute]
internal AccWrapper get_CeilingElement();
    [CompilerGeneratedAttribute]
internal void set_CeilingElement(AccWrapper value);
    internal bool get_IsBoundayForHostedControl();
    internal AccWrapper get_AccessibleWrapper();
    internal IAccessible get_AccessibleObject();
    internal int get_ChildId();
    internal AccessibleRole get_RoleInt();
    internal MsaaElement get_Parent();
    internal void set_Parent(MsaaElement value);
    internal AccWrapper get_ParentWrapper();
    internal string get_ControlText();
    internal int get_ProcessId();
    internal bool get_IsSimpleComboBox();
    internal bool get_IsElementDataGridCell();
    internal void set_IsElementDataGridCell(bool value);
    internal IUITechnologyElement get_SimpleComboBoxSourceElement();
    internal bool get_IsDesktop();
    internal bool get_IsWin32ForSure();
    internal bool get_IsChildOfDesktop();
    internal IQueryElement SingleQueryID(bool useLanguageNeutralId, bool useValue);
    internal IQueryElement SingleQueryID(bool useLanguageNeutralId, bool useValue, int instance);
    internal string get_ValueForIdentification();
    internal IntPtr get_OwnerWindowHandle();
    internal void set_OwnerWindowHandle(IntPtr value);
    internal string get_OwnerWindowText();
    internal void set_OwnerWindowText(string value);
    internal string get_OwnerWindowClassName();
    internal void set_OwnerWindowClassName(string value);
    internal bool get_IsIE9AddressEditControl();
    private void AddSearchConfigurations();
    private int GetSelectionFlag(ProgrammaticActionOption programmaticActionOption);
    private bool TryRefreshAccWrapper();
    private void InitializeConstructorProperties();
    private string GetAccessKey();
    private string GetRuntimeId();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private string GetSingleQueryIDString();
    private static MsaaElement GetTreeParentByValue(MsaaElement element, Int32& instance);
    private static void SetThirdLevelInQID(MsaaElement ancestor, MsaaElement ancestorParent, bool skipWindow, bool generateWin32Parent);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private bool CheckIfTreeItem();
    private bool CheckIfParentPartOfTreeView();
    private void UpdateControlTypeForDateTimePicker();
    private void UpdateControlTypeForMonthCalendar();
    private bool IsElementTreeItem();
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private void InitializeQueryId();
    private void GenerateInstanceForWindowElement(MsaaElement currentMsaaElement, MsaaElement currentAncestor);
    private bool IsBoundaryOrIE();
    private bool ShouldRefresh(string propertyValue);
    private bool ShouldRefresh(Nullable`1<T> propertyValue);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.MsaaEventManager : object {
    private MsaaTestPlugin msaaPlugin;
    private int eventProcessId;
    private Dictionary`2<IntPtr, WinEventProc> hookToDelegateMap;
    private Dictionary`2<AccessibleEvents, IntPtr> eventToHookMap;
    private List`1<AccessibleEvents> lastWinHookEvents;
    private List`1<AccessibleEvents> currentWinHookEvents;
    private Dictionary`2<AccessibleEvents, WinEventProc> eventToHandlerMap;
    private Dictionary`2<MsaaElement, ElementEventSink> elementNotifySinkMapping;
    private IUITechnologyElement delayedRemovalElement;
    private MsaaElement richTextBox;
    private MsaaElement slider;
    private MsaaElement sliderSource;
    private object syncLock;
    private object dictLock;
    private static string carriageReturn;
    private static ConcurrentDictionary`2<IntPtr, Rectangle> elementBoundingRectMapping;
    private bool disposed;
    private MsaaElement lastIE8AddressBarEdit;
    internal static ConcurrentDictionary`2<IntPtr, Rectangle> ElementBoundingRectMapping { get; }
    public MsaaEventManager(MsaaTestPlugin plugin);
    public bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType);
    public sealed virtual void Dispose();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private bool ShouldProcessValueChangedEvent(IUITechnologyElement element, MsaaElement& elementForValueChangedEvent);
    private bool AddWinEventHook(int processId);
    private bool AddWinEventForEvent(int processId, AccessibleEvents eventMin, AccessibleEvents eventMax, WinEventProc eventHandler);
    private void ValueChangedCallback(IntPtr winEventHookHandle, AccessibleEvents accEvent, IntPtr windowHandle, int objectId, int childId, UInt32 eventThreadId, UInt32 eventTimeInMilliseconds);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private void ValueChangedHelper(object state);
    private bool IsLastSelectionOnCell(MsaaElement element);
    private void StateChangedCallback(IntPtr winEventHookHandle, AccessibleEvents accEvent, IntPtr windowHandle, int objectId, int childId, UInt32 eventThreadId, UInt32 eventTimeInMilliseconds);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private void StateChangedHelper(object state);
    private void OtherEventCallback(IntPtr winEventHookHandle, AccessibleEvents accEvent, IntPtr windowHandle, int objectId, int childId, UInt32 eventThreadId, UInt32 eventTimeInMilliseconds);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private void OtherChangedHelper(object state);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private AccWrapper GetElementFromEvent(IntPtr windowHandle, int objectId, int childId);
    private ElementEventSink GetEventSinkForElement(MsaaElement element, MsaaElement& elementForEvent);
    private bool TryGetMsaaElementFromWindowHandle(IntPtr windowHandle, AccWrapper& accElement);
    private bool IsValueChangeSupportedControl(MsaaElement element);
    private bool IsStateChangeSupportedControl(MsaaElement element);
    private void SetEventsToHook(MsaaElement element);
    private static bool IsEventNotSupported(AccessibleEvents accEvent);
    private static bool IsElementForDelayedRemoval(string controlTypeName);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private void HandleRadioButtonInGroup(MsaaElement elementForEvent, ElementEventSink elementEventSink, IntPtr windowHandle);
    private static ControlStates ConvertState(AccessibleStates accState);
    private static ControlStates DiffControlStates(ControlStates newState, ControlStates oldState);
    private static bool IsValidElementForEvent(IUITechnologyElement element);
    private bool IsElementDateTimePicker(IUITechnologyElement element, MsaaElement parent, MsaaElement& elementForValueChangedEvent);
    private bool CheckControlType(MsaaElement element, ControlType elementControlType, ControlType parentControlType);
    private void NotifyEventForRichTextBox(MsaaElement element);
    private void NotifyEventForSlider();
    private static string TrimRichTextBoxValue(string value);
    private static bool HasDataGridElementLocationChanged(MsaaElement elementForEvent);
    internal static ConcurrentDictionary`2<IntPtr, Rectangle> get_ElementBoundingRectMapping();
    private Dictionary`2<AccessibleEvents, WinEventProc> InitializeWinEventToHandlerMap();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.MsaaNativeMethods : object {
    [SuppressMessageAttribute("Microsoft.Portability", "CA1901:PInvokeDeclarationsShouldBePortable")]
internal static IntPtr ChildWindowFromPointEx(IntPtr parentWindowHandle, POINT pt, ChildWindowFromPointParameter flags);
    internal static IntPtr GetParent(IntPtr windowHandle);
    internal static IntPtr SendMessage(IntPtr hWnd, UInt32 wMsg, IntPtr wParam, IntPtr lParam);
    internal static IntPtr GetWindow(IntPtr windowHandle, GWParameter nIndex);
    internal static int GetWindowRgn(IntPtr windowHandle, IntPtr hRegion);
    private static IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, AllocationType flAllocationType, MemoryProtectionConstant flProtect);
    private static bool VirtualFreeEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, AllocationType flFreeType);
    private static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, Byte[] buffer, IntPtr dwSize, Int32& nBytesRead);
    internal static int AccessibleChildren(IAccessible paccContainer, int iChildStart, int cChildren, Object[] rgvarChildren, Int32& pcObtained);
    internal static int GetRoleText(int dwRole, StringBuilder lpszRole, UInt32 cchRoleMax);
    internal static int AccessibleObjectFromPoint(POINT pt, IAccessible& pAcc, Object& childId);
    internal static IntPtr CreateRectRgn(int x, int y, int width, int height);
    internal static bool PtInRegion(IntPtr hRegion, int x, int y);
    internal static bool DeleteObject(IntPtr hGDIObject);
    public static int GetResponseOfSendMessage(IntPtr hwnd, UInt32 msg, T& obj);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults")]
public static IntPtr XProcSendMessageByRef(IntPtr windowHandle, UInt32 msg, IntPtr wParam, Object& lParam, int numBytes);
    public static bool AllocateInProcMemory(UInt32 processId, int size, IntPtr& structMem, IntPtr& hProcess);
    public static void FreeInProcAllocatedMemory(IntPtr structMem, IntPtr hProcess);
    public static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpAddress, Byte[] buffer);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.MsaaTestPlugin : UITechnologyManager {
    [CompilerGeneratedAttribute]
private bool <IsRecording>k__BackingField;
    private bool disposed;
    private bool sessionStarted;
    private WinEvent winEvent;
    private MsaaEventManager eventManager;
    private StaThreadWorker staThreadWorker;
    private static MsaaTestPlugin instance;
    private static object lockObject;
    private static IList`1<ControlType> exactMatchControlTypes;
    private static IList`1<ControlType> doNotGenerateVisibleOnlyControlTypes;
    internal static int ERROR_E_FAIL;
    private static string SilverLight3ClassName;
    private static string SilverLight2ClassName;
    private static string SilverlightObjectType;
    private static string SilverlightTechnologyName;
    public string TechnologyName { get; }
    internal static MsaaTestPlugin Instance { get; }
    internal WinEvent WinEvent { get; }
    internal bool IsRecording { get; internal set; }
    private static MsaaTestPlugin();
    public virtual string get_TechnologyName();
    public virtual void StartSession(bool recordingSession);
    public virtual void StopSession();
    public virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    public virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetElementFromAutomationElement(AutomationElement element, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    public virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    public virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void CancelStep();
    public virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    public virtual ILastInvocationInfo GetLastInvocationInfo();
    public virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    public virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    public virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    public virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    public virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void ProcessMouseEnter(IntPtr handle);
    internal IEnumerator GetChildren(IUITechnologyElement element);
    public virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public virtual int GetControlSupportLevel(IntPtr windowHandle);
    public virtual int GetControlSupportLevel(AutomationElement element);
    internal static MsaaTestPlugin get_Instance();
    internal static MsaaElement Navigate(IUITechnologyElement element, AccessibleNavigation navDir);
    internal object InvokeDelegateOnStaThread(Delegate methodDelegate, Object[] args);
    internal WinEvent get_WinEvent();
    [CompilerGeneratedAttribute]
internal bool get_IsRecording();
    [CompilerGeneratedAttribute]
internal void set_IsRecording(bool value);
    private void InitializeTechnologyManagerProperties();
    private static IList`1<ControlType> InitializeExactMatchControlTypes();
    private static IList`1<ControlType> InitializeDoNotGenerateVisibleOnlyControlTypes();
    [SuppressMessageAttribute("Microsoft.Usage", "CA2213:DisposableFieldsShouldBeDisposed")]
[SuppressMessageAttribute("Microsoft.Usage", "CA2213:DisposableFieldsShouldBeDisposed")]
public sealed virtual void Dispose();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.MsaaUtility : object {
    private static int SliderMinimum;
    private static int SliderMaximum;
    private static string SupportedConfigsUrl;
    private static UInt32 controlNameMessage;
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2006:UseSafeHandleToEncapsulateNativeResources")]
private static IntPtr desktopWindowHandle;
    internal static string QueryFramework;
    internal static string AccessibleDescription;
    internal static string IEControlRolename;
    internal static string IEFrameClassname;
    internal static string ClientCaption;
    internal static string IsSimpleComboBoxType;
    internal static string HelpText;
    internal static string _isNumericUpDownControl;
    internal static string _isWin32ForSure;
    internal static string _isManagedMsaaElement;
    internal static string LightWeightInstance;
    internal static string QueryConditionName;
    internal static string QueryElementPropertyFormat;
    internal static string QueryElementSeparator;
    internal static string QueryPropertySeparator;
    internal static string QueryPropertyAccessibleName;
    internal static string QueryPropertyClassName;
    internal static string QueryPropertyControlID;
    internal static string QueryPropertyControlName;
    internal static string QueryPropertyDescription;
    internal static string QueryPropertyName;
    internal static string QueryPropertyControlTypeName;
    internal static string QueryPropertyRole;
    internal static string QueryPropertyNativeControlType;
    internal static string QueryPropertyValue;
    internal static string QueryPropertyInstance;
    internal static string QueryPropertyOrderOfInvoke;
    internal static string QueryPropertyAccessKey;
    internal static string QueryPropertyCachedAccessKey;
    internal static string QueryPropertyOwnerWindowHandle;
    internal static string QueryPropertyOwnerWindowText;
    internal static string QueryPropertyOwnerWindowClassName;
    internal static string MicrosoftTestManagerProcess;
    internal static string AutoSuggestDropDownClass;
    internal static string RichTextBoxClassName;
    internal static string ShellTrayClassName;
    internal static string DesktopOwnerClassName;
    internal static string Win32ListClassName;
    internal static string WinformsDataGridCellCheckBoxHelpText;
    internal static int E_ACCESSDENIED;
    private static int PrecisionValue;
    private static long WS_CHILD;
    private static long WS_EX_MDICHILD;
    private static UInt32 WM_NCHITTEST;
    private static string MfcClassName;
    private static string FirefoxClassName;
    private static string FirefoxTechnologyName;
    private static int timeoutForInstanceCalculation;
    private static IntPtr HTCLIENT;
    private static IntPtr HTCAPTION;
    private static IntPtr HTHSCROLL;
    private static IntPtr HTVSCROLL;
    internal static string classNameOfSiblingWindow;
    internal static int numberOfFoundSiblingWindows;
    internal static Rectangle InvalidRectangle;
    internal static Dictionary`2<AccessibleRole, ControlType> roleControlTypeMapping;
    internal static Dictionary`2<AccessibleRole, string> roleStringMapping;
    internal static Dictionary`2<AccessibleRole, string> roleConversionTable;
    internal static Dictionary`2<string, int> doNotUseTextControlList;
    internal static Dictionary`2<string, int> notAcceptableTopLevelClassesExact;
    internal static List`1<string> notAcceptableTopLevelClassesPartial;
    private static Dictionary`2<string, string> elementProperties;
    internal static IntPtr DesktopWindowHandle { get; }
    private static MsaaUtility();
    internal static IntPtr get_DesktopWindowHandle();
    internal static bool IsIEServerControl(string elementClassName, string elementRole);
    internal static bool IsIEServerControlNotInsideIEFrame(MsaaElement element);
    internal static bool FindChildWithClass(IntPtr windowHandle, IntPtr& lParam);
    internal static QueryElement GenerateSingleQueryElement(MsaaElement element, QueryElementProperty properties, int instance, bool generateAccessibleName);
    internal static bool GenerateSingleQueryForLanguageNeutralControls(MsaaElement element, QueryElementProperty properties, AndConditionBuilder andConditionBuilder);
    internal static void GenerateSingleQueryForNonLanguageNeutralControls(MsaaElement element, QueryElementProperty properties, AndConditionBuilder andConditionBuilder, bool generateAccessibleName);
    internal static bool HasState(AccessibleStates state, AccessibleStates testState);
    internal static bool HasSearchConfiguration(String[] searchConfigurations, string testSearchConfiguration);
    internal static void MapAndThrowException(SystemException e, bool throwNotSupported);
    internal static bool ValidMenuParent(AccessibleRole role);
    internal static string GetAbsoluteValueForSlider(MsaaElement element);
    internal static int GetLightWeightInstance(AccWrapper element);
    private static bool IsWindowAcceptableAsTop(string className);
    private static bool IsFairWin32Top(IntPtr win32handle, bool isMenu);
    internal static MsaaElement GetWin32TopElement(MsaaElement element);
    internal static bool ElementBreaksMenuTree(MsaaElement element);
    internal static MsaaElement GetMsaaTopElement(MsaaElement element, Boolean& isBrokenTree);
    internal static bool IsSimpleComboBox(MsaaElement element, IUITechnologyElement& sourceElement);
    internal static bool IsWindowsVistaOrAbove();
    internal static bool HasLanguageNeutralID(MsaaElement element);
    internal static bool IsRichTextBoxClassName(string className);
    internal static IUITechnologyElement GetChildIfOnlyChild(IUITechnologyElement element);
    internal static bool IsDesktopListOrListItem(MsaaElement element);
    internal static bool IsNumericUpDownControl(IUITechnologyElement uiControl);
    internal static bool IsElementUniqueAmongSiblings(MsaaElement& element, MsaaElement parent, Boolean& hasLanguageNeutralID);
    internal static bool IsTopLevelPopUpMenu(MsaaElement element);
    internal static bool IsElementDataGridCheckBox(MsaaElement element);
    internal static bool IsElementDataGridCheckBox(AccWrapper element);
    internal static int GetControlID(IntPtr windowHandle);
    internal static string GetControlName(IntPtr windowHandle, int processId);
    internal static string GetRoleText(AccessibleRole role);
    internal static string GetControlTypeName(AccessibleRole role);
    internal static bool CanUseControlTextProperty(string controlTypeName);
    internal static bool CanUseNameProperty(MsaaElement element);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static IAccessible GetChildIAccessible(IAccessible accessibleObject, object childId);
    internal static string NormalizeQueryPropertyValue(string value);
    internal static MsaaElement GetPreviousSiblingFlattened(MsaaElement element, MsaaElement& parent);
    internal static IUITechnologyElement TopLevelElement(IUITechnologyElement element);
    internal static string GetPropertyNameInCorrectCase(string propertyName);
    internal static bool IsPointInWindow(IntPtr hWnd, POINT point);
    internal static bool IsProgrammaticallyInvisible(MsaaElement element);
    internal static IntPtr TopChildWindowFromPoint(IntPtr hwnd, POINT point);
    internal static IntPtr TopSiblingWindowFromPoint(IntPtr hwnd, POINT point, Boolean& isUniqueSibling);
    internal static AccWrapper FastAccessibleObjectFromPoint(POINT ptScreen);
    internal static AccWrapper GetAccessibleObjectFromAE(AutomationElement element);
    internal static IntPtr WindowFromPoint(POINT ptScreen);
    internal static int GetControlSupportLevel(IntPtr windowHandle);
    internal static int GetControlSupportLevel(AutomationElement element);
    internal static void SetCeilingElement(MsaaElement technologyElement, AutomationElement ceilingElement);
    private static IntPtr GetWindowHandleFromAncestor(AutomationElement automationElement);
    private static bool IsMfcClassName(IntPtr windowHandle);
    private static bool IsFirefoxClassName(IntPtr windowHandle);
    private static bool CheckStyle(int dwStyles, int dwExStyles);
    private static int GetControlSupportLevelInternal(string className, IntPtr windowHandle);
    private static Dictionary`2<AccessibleRole, string> InitializeRoleConversionTable();
    private static Dictionary`2<AccessibleRole, ControlType> InitializeRoleControlTypeMapping();
    private static Dictionary`2<AccessibleRole, string> InitializeRoleStringMapping();
    private static Dictionary`2<string, int> InitializeDoNotUseTextControlList();
    private static Dictionary`2<string, int> InitializeNotAcceptableTopLevelClassesExact();
    private static List`1<string> InitializeNotAcceptableTopLevelClassesPartial();
    private static Dictionary`2<string, string> InitializeElementProperties();
    internal static AccessibleRole ConvertRoleToInteger(string role);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.QueryElementProperty : Enum {
    public int value__;
    public static QueryElementProperty None;
    public static QueryElementProperty ControlName;
    public static QueryElementProperty ControlId;
    public static QueryElementProperty Name;
    public static QueryElementProperty ClassName;
    public static QueryElementProperty OrderOfInvocation;
    public static QueryElementProperty Value;
    public static QueryElementProperty ControlTypeName;
    public static QueryElementProperty NativeControlType;
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.QueryIdHelper : object {
    private static int MaxSiblingSearch;
    private static int InstanceTimeOut;
    internal static MsaaElement UpdateQueryIDForNamelessControls(MsaaElement element, MsaaElement& nextToElement, Int32& elementInstance, bool useValue, bool ignoreInvisibleItems);
    internal static int GetInstanceOfNameLessElementUnderParent(MsaaElement element, bool ignoreInvisibleItems);
    private static bool IsBrokenTree(MsaaElement element, MsaaElement parent, MsaaElement nextToElement, int elementInstance, Int32& nextToInstance);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
private static bool IsBrokenTreeInternal(MsaaElement element, MsaaElement nextToElement, MsaaElement parent, int elementInstance, bool isSecondAlgoUsed, Int32& nextToInstance);
    internal static int GetWindowControlsInQueryID(MsaaElement element, IUITechnologyElement currentTopMostElement, MsaaElement& mdiWindow, MsaaElement& firstWindow);
    internal static int GenerateInstanceForChild(MsaaElement element, MsaaElement parent, bool useValueInInstanceGeneration, bool ignoreInvisibleChild);
    internal static bool IsDataGridCellDuplicate(MsaaElement element);
    internal static bool UseValueInDataGridCell(MsaaElement element);
    internal static int GetTableCellInstance(MsaaElement element, Boolean& shouldUseValueInCell, bool validProperty);
    internal static bool UseValueInDataGridCellAndRow(MsaaElement element, Int32& instance, Boolean& shouldUseValueInCell, Boolean& shouldUseValueInRow);
    internal static bool UseValueInDataGridRow(MsaaElement element, Boolean& isNewRow);
    internal static bool IsTableCell(MsaaElement element);
    internal static bool IsDataGridCell(MsaaElement element);
    private static bool IsMdiWindow(MsaaElement element);
    private static bool VerifyDuplicateRowId(AccWrapper startRow, AccessibleNavigation navigationDir, Dictionary`2<long, bool> rowIds);
    internal static bool ShouldGenerateContainsRowValue(MsaaElement element, String& elementValue);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ImmersiveBrowserNotSupportedMessage { get; }
    internal static string InvalidNativeElement { get; }
    internal static string MTMWindowsStoreAppsNotSupported { get; }
    internal static string TechnologyNotSupportedMessage { get; }
    internal static string WindowsStoreApp { get; }
    internal static string WindowStoreAppsNotSupportedMessage { get; }
    internal static string WWANotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ImmersiveBrowserNotSupportedMessage();
    internal static string get_InvalidNativeElement();
    internal static string get_MTMWindowsStoreAppsNotSupported();
    internal static string get_TechnologyNotSupportedMessage();
    internal static string get_WindowsStoreApp();
    internal static string get_WindowStoreAppsNotSupportedMessage();
    internal static string get_WWANotSupported();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.StaThreadWorker : object {
    private object returnValue;
    private Object[] arguments;
    private Delegate methodToInvoke;
    private bool disposed;
    private Thread threadInstance;
    private Mutex lockSTAHelperAccess;
    private AutoResetEvent eventHelperAccess;
    private AutoResetEvent eventHelperAccessComplete;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) keepSTAHelperAlive;
    private static StaThreadWorker instance;
    public static StaThreadWorker Instance { get; }
    public static StaThreadWorker get_Instance();
    public sealed virtual void Dispose();
    internal object InvokeDelegate(Delegate methodToInvoke, Object[] args);
    private void FunctionInvoker();
    private void StartSTADelegateInvoker();
    private void StopSTADelegateInvoker();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.Util : object {
    public static int MAKELONG(int low, int high);
    public static IntPtr MAKELPARAM(int low, int high);
    public static int HIWORD(int n);
    public static int HIWORD(IntPtr n);
    public static int LOWORD(int n);
    public static int LOWORD(IntPtr n);
    public static int SignedHIWORD(IntPtr n);
    public static int SignedLOWORD(IntPtr n);
    public static int SignedHIWORD(int n);
    public static int SignedLOWORD(int n);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.WindowHandleGetter : object {
    public static IntPtr GetWindowHandle(AccWrapper accWrapper);
    private static IntPtr GetWindowFromAccessible(AccWrapper accWrapper);
    public static IntPtr GetWindowHandleUsingPoint(AccWrapper accWrapper);
    private static bool IsElementAcceptableForWindowFromPoint(AccWrapper accWrapper);
    private static bool IsElementFromPoint(AccWrapper accWrapper, POINT point);
    private static IntPtr GetWindowHandleUsingPoint(POINT pt);
    private static bool IsNotValidWindowHandle(IntPtr windowHandle, int traversedLevel);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.WindowInstanceGetter : object {
    private Stopwatch timeOutWatch;
    private ElementInfo elementInfo;
    private IntPtr elementWindowHandle;
    private int elementInstance;
    private bool isWindowVisible;
    private static int timeOut;
    internal int GetInstance(IntPtr parentWindowHandle, AccWrapper element, IQueryCondition[] elementQueryCondition, bool isVisibleOnly);
    private int GetInstanceInternal(IntPtr hwnd);
    private bool EnumChildWindows(IntPtr hWnd, IntPtr& lParam);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.WinEvent : object {
    private Thread winEventHandlerThread;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) keepProcessing;
    private MsaaElement modreq(System.Runtime.CompilerServices.IsVolatile) lastFocusedElement;
    private AccWrapper modreq(System.Runtime.CompilerServices.IsVolatile) lastFocusedAccWrapper;
    private UInt32 modreq(System.Runtime.CompilerServices.IsVolatile) lastEventTimeStamp;
    private AccessibleEvents modreq(System.Runtime.CompilerServices.IsVolatile) lastAccEvent;
    private object lockObject;
    private bool hasMenuStarted;
    private AccWrapper currentParentChangeParentAccWrapper;
    private AccWrapper lastParentChangeParentAccWrapper;
    private MsaaElement valueChangeDataGridCell;
    private IUITestEventNotify actionNotify;
    private AccWrapper selectedDataGridCell;
    private static bool listenToSelfProcess;
    internal AccWrapper LastParentChangeParentAccWrapper { get; internal set; }
    internal MsaaElement ValueChangeDataGridCell { get; internal set; }
    internal IUITestEventNotify ActionNotify { get; internal set; }
    internal AccWrapper SelectedDataGridCell { get; private set; }
    public WinEvent(bool recordingSession);
    public sealed virtual void Dispose();
    internal static void ListenToSelfProcess(bool enable);
    private void WinEventListener();
    private void WindowMessagePump();
    private void ObjectMiscCallback(IntPtr hWinEventHook, AccessibleEvents accEvent, IntPtr hwnd, int idObject, int idChild, UInt32 dwEventThread, UInt32 dwmsEventTime);
    private void ObjectMiscHelper(object state);
    private void UpdateParentChange(AccWrapper accWrapper);
    private void UpdateSelectionChange(AccWrapper accWrapper);
    private void ObjectFocusCallback(IntPtr hWinEventHook, AccessibleEvents accEvent, IntPtr hwnd, int idObject, int idChild, UInt32 dwEventThread, UInt32 dwmsEventTime);
    private void ObjectFocusHelper(AccessibleEvents accEvent, IntPtr hwnd, int idObject, int idChild, UInt32 dwmsEventTime);
    private void UpdateFocussedObject(AccessibleEvents accEvent, IntPtr hWnd, int idObject, int idChild, UInt32 dwmsEventTime);
    private void UpdateFocusOnDataGridCell();
    private void CacheLastRowCellQueryId(AccWrapper accWrapper);
    private bool IsDatagridElement(AccWrapper accWrapper);
    private static bool IsSelectedDataGridCell(AccWrapper accWrapper);
    private static bool HasFocusAndNotHover(AccWrapper accWrapper);
    private static bool IsMenuItemOrPopupWithFocus(AccWrapper accWrapper);
    private bool ShouldProcessEvent(IntPtr windowHandle);
    internal MsaaElement GetLastFocusedElement();
    internal AccWrapper get_LastParentChangeParentAccWrapper();
    internal void set_LastParentChangeParentAccWrapper(AccWrapper value);
    internal MsaaElement get_ValueChangeDataGridCell();
    internal void set_ValueChangeDataGridCell(MsaaElement value);
    internal IUITestEventNotify get_ActionNotify();
    internal void set_ActionNotify(IUITestEventNotify value);
    internal AccWrapper get_SelectedDataGridCell();
    private void set_SelectedDataGridCell(AccWrapper value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Msaa.WinEventParameters : object {
    [CompilerGeneratedAttribute]
private AccessibleEvents <AccEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <WindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildId>k__BackingField;
    internal AccessibleEvents AccEvent { get; private set; }
    internal IntPtr WindowHandle { get; private set; }
    internal int ObjectId { get; private set; }
    internal int ChildId { get; private set; }
    internal WinEventParameters(AccessibleEvents accEvent, IntPtr windowHandle, int objectId, int childId);
    [CompilerGeneratedAttribute]
internal AccessibleEvents get_AccEvent();
    [CompilerGeneratedAttribute]
private void set_AccEvent(AccessibleEvents value);
    [CompilerGeneratedAttribute]
internal IntPtr get_WindowHandle();
    [CompilerGeneratedAttribute]
private void set_WindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
internal int get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(int value);
    [CompilerGeneratedAttribute]
internal int get_ChildId();
    [CompilerGeneratedAttribute]
private void set_ChildId(int value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
