internal enum Microsoft.VisualStudio.TestTools.UITest.Common.BrowserTypeEnum : Enum {
    public int value__;
    public static BrowserTypeEnum None;
    public static BrowserTypeEnum IE;
    public static BrowserTypeEnum Chrome;
    public static BrowserTypeEnum Firefox;
    public static BrowserTypeEnum Safari;
    public static BrowserTypeEnum Opera;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.PlaybackExceptionIndex : Enum {
    public int value__;
    public static PlaybackExceptionIndex ControlNotFound;
    public static PlaybackExceptionIndex FPAOnBlockedControl;
    public static PlaybackExceptionIndex PlaybackFailureException;
    public static PlaybackExceptionIndex DecodingFailedException;
    public static PlaybackExceptionIndex UITestControlNotAvailableException;
    public static PlaybackExceptionIndex UITestControlNotVisibleException;
    public static PlaybackExceptionIndex ANSDisabledControl;
    public static PlaybackExceptionIndex FailedToLaunchApp;
    public static PlaybackExceptionIndex FPAHiddenControl;
    public static PlaybackExceptionIndex TechnologyNotSupported;
    public static PlaybackExceptionIndex PlaybackExceptionArrayLength;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.PluginEnum : Enum {
    public int value__;
    public static PluginEnum None;
    public static PluginEnum IePlugin;
    public static PluginEnum MsaaPlugin;
    public static PluginEnum UiaPlugin;
    public static PluginEnum WinFormPlugin;
    public static PluginEnum SilverLight;
    public static PluginEnum OtherPlugin;
    public static PluginEnum UiaWidget;
    public static PluginEnum XBrowserPlugin;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.RecordingExceptionIndex : Enum {
    public int value__;
    public static RecordingExceptionIndex RebootException;
    public static RecordingExceptionIndex NetworkException;
    public static RecordingExceptionIndex ControlNotAvailable;
    public static RecordingExceptionIndex ErrorActionTimeout;
    public static RecordingExceptionIndex TechnologyNotSupported;
    public static RecordingExceptionIndex GenericRecorderException;
    public static RecordingExceptionIndex RecordingExceptionArrayLength;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.RecordingState : Enum {
    public int value__;
    public static RecordingState None;
    public static RecordingState Running;
    public static RecordingState Stopped;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.SessionResult : Enum {
    public int value__;
    public static SessionResult Fail;
    public static SessionResult Pass;
    public static SessionResult PassWithFailures;
    public static SessionResult Unknown;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.SessionType : Enum {
    public int value__;
    public static SessionType Recording;
    public static SessionType Playback;
    public static SessionType None;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.SqmSessionInfoTuple : Enum {
    public int value__;
    public static SqmSessionInfoTuple SessionType;
    public static SqmSessionInfoTuple ActionCount;
    public static SqmSessionInfoTuple SessionResult;
    public static SqmSessionInfoTuple IeControlCount;
    public static SqmSessionInfoTuple UiaControlCount;
    public static SqmSessionInfoTuple MsaaControlCount;
    public static SqmSessionInfoTuple OtherControlCount;
    public static SqmSessionInfoTuple SessionTime;
    public static SqmSessionInfoTuple PlaybackErrorCount;
    public static SqmSessionInfoTuple RecordingErrorCount;
    public static SqmSessionInfoTuple WinFormControlCount;
    public static SqmSessionInfoTuple SilverlightControlCount;
    public static SqmSessionInfoTuple UiaWidgetControlCount;
    public static SqmSessionInfoTuple UnknownNameErrorCount;
    public static SqmSessionInfoTuple IsRemote;
    public static SqmSessionInfoTuple BrowserType;
    public static SqmSessionInfoTuple WinXamlControlCount;
    public static SqmSessionInfoTuple DirectUIControlCount;
    public static SqmSessionInfoTuple Plugin;
    public static SqmSessionInfoTuple SqmSessionInfoTupleLength;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.SqmUtility : object {
    private static PluginEnum sqmPluginInfo;
    private static PluginEnum accumulateSqmPluginInfo;
    private static BrowserTypeEnum s_sqmBrowserTypeInfo;
    private static UInt32 ieElementCount;
    private static UInt32 msaaElementCount;
    private static UInt32 winFormElementCount;
    private static UInt32 uiaElementCount;
    private static UInt32 winXamlElementCount;
    private static UInt32 directUIElementCount;
    private static UInt32 uiaWidgetElementCount;
    private static UInt32 otherElementCount;
    private static UInt32 unknownNameErrorCount;
    private static UInt32 actionCount;
    private static UInt32[] playbackExceptions;
    private static UInt32[] recordingExceptions;
    private static SessionResult intermediateResult;
    private static SessionType sessionType;
    private static bool isRemote;
    private static PlaybackExceptionBitmap sqmPlaybackExceptionInfo;
    private static UInt32[] sqmSessionInfo;
    private static UInt32[] accumulateSqmSessionInfo;
    private static RecordingExceptionBitmap sqmRecordingExceptionInfo;
    private static Stopwatch watch;
    private static bool isInitialized;
    private static RecordingState recorderState;
    internal static PluginEnum SqmPluginInfo { get; internal set; }
    internal static BrowserTypeEnum SqmBrowserTypeInfo { get; internal set; }
    internal static UInt32 IeElementCount { get; internal set; }
    internal static UInt32 MsaaElementCount { get; internal set; }
    internal static UInt32 WinFormElementCount { get; internal set; }
    internal static UInt32 UiaElementCount { get; internal set; }
    internal static UInt32 WinXamlElementCount { get; internal set; }
    internal static UInt32 DirectUIElementCount { get; internal set; }
    internal static UInt32 UiaWidgetElementCount { get; internal set; }
    internal static UInt32 OtherElementCount { get; internal set; }
    internal static UInt32 ActionCount { get; internal set; }
    internal static UInt32[] PlayBackException { get; internal set; }
    internal static UInt32[] RecordingExceptions { get; internal set; }
    internal static UInt32 UnknownErrorCount { get; internal set; }
    internal static SessionResult IntermediateResult { get; internal set; }
    internal static RecordingState RecordingState { get; internal set; }
    private static SqmUtility();
    public static void StartSession(SessionType sessionType);
    public static void StartSession(SessionType sessionType, bool isRemote);
    public static void StopSession(SessionResult result, bool setDataPoint);
    public static void StopSession(IDictionary`2<string, object> remoteSqmSessionInfo);
    public static void ResetData();
    public static IDictionary`2<string, object> GetRemoteSessionInfo();
    private static void SetRecordingException();
    private static void SetPlaybackException();
    private static void ResetDataInternal();
    private static void AccumulateSqmSessionInfo();
    private static void PostSessionInfoEvent(UInt32[] sessionInfo, string result);
    internal static PluginEnum get_SqmPluginInfo();
    internal static void set_SqmPluginInfo(PluginEnum value);
    internal static BrowserTypeEnum get_SqmBrowserTypeInfo();
    internal static void set_SqmBrowserTypeInfo(BrowserTypeEnum value);
    internal static UInt32 get_IeElementCount();
    internal static void set_IeElementCount(UInt32 value);
    internal static UInt32 get_MsaaElementCount();
    internal static void set_MsaaElementCount(UInt32 value);
    internal static UInt32 get_WinFormElementCount();
    internal static void set_WinFormElementCount(UInt32 value);
    internal static UInt32 get_UiaElementCount();
    internal static void set_UiaElementCount(UInt32 value);
    internal static UInt32 get_WinXamlElementCount();
    internal static void set_WinXamlElementCount(UInt32 value);
    internal static UInt32 get_DirectUIElementCount();
    internal static void set_DirectUIElementCount(UInt32 value);
    internal static UInt32 get_UiaWidgetElementCount();
    internal static void set_UiaWidgetElementCount(UInt32 value);
    internal static UInt32 get_OtherElementCount();
    internal static void set_OtherElementCount(UInt32 value);
    internal static UInt32 get_ActionCount();
    internal static void set_ActionCount(UInt32 value);
    internal static UInt32[] get_PlayBackException();
    internal static void set_PlayBackException(UInt32[] value);
    internal static UInt32[] get_RecordingExceptions();
    internal static void set_RecordingExceptions(UInt32[] value);
    internal static UInt32 get_UnknownErrorCount();
    internal static void set_UnknownErrorCount(UInt32 value);
    internal static SessionResult get_IntermediateResult();
    internal static void set_IntermediateResult(SessionResult value);
    internal static RecordingState get_RecordingState();
    internal static void set_RecordingState(RecordingState value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.ActionLogResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionLogBasicFormat { get; }
    internal static string ActionLogCheckAction { get; }
    internal static string ActionLogClearAction { get; }
    internal static string ActionLogClearValue { get; }
    internal static string ActionLogContextSuffix { get; }
    internal static string ActionLogDefaultAction { get; }
    internal static string ActionLogEditAction { get; }
    internal static string ActionLogFilter { get; }
    internal static string ActionLogFlipAction { get; }
    internal static string ActionLogForRangeValueRange { get; }
    internal static string ActionLogFriendlySuffix { get; }
    internal static string ActionLogInvokeAction { get; }
    internal static string ActionLogMixedState { get; }
    internal static string ActionLogNormalState { get; }
    internal static string ActionLogOpenContextMenu { get; }
    internal static string ActionLogPressedState { get; }
    internal static string ActionLogRangeValueAction { get; }
    internal static string ActionLogToggleAction { get; }
    internal static string ActionLogToggleButtonAction { get; }
    internal static string ActionLogValueAction { get; }
    internal static string ConcatString { get; }
    internal static string FormatActionAndTargetControlType { get; }
    internal static string FormatActionAndTargetControlTypeForNoFriendlyName { get; }
    internal static string FormatForDefaultContext { get; }
    internal static string FormatForDefaultContextForNoFriendlyName { get; }
    internal static string FormatForDialogContext { get; }
    internal static string FormatForDialogContextForNoFriendlyName { get; }
    internal static string FormatForFlipperContext { get; }
    internal static string FormatForFlipperContextForNoFriendlyName { get; }
    internal static string FormatUsingTarget { get; }
    internal static string FormatUsingTargetForNoFriendlyName { get; }
    internal static string FormatWithInForContext { get; }
    internal static string FormatWithInForContextForNoFriendlyName { get; }
    internal static string FormatWithItem { get; }
    internal static string FormatWithItemForNoFriendlyName { get; }
    internal static string FormatWithNoValue { get; }
    internal static string FormatWithNoValueAndNoControlType { get; }
    internal static string FormatWithNoValueAndNoControlTypeForNoFriendlyName { get; }
    internal static string FormatWithNoValueForNoFriendlyName { get; }
    internal static string FormatWithTargetAndNoValue { get; }
    internal static string FormatWithTargetAndNoValueForNoFriendlyName { get; }
    internal static string FormatWithValue { get; }
    internal static string FormatWithValueAndNoControlType { get; }
    internal static string FormatWithValueAndNoControlTypeForNoFriendlyName { get; }
    internal static string FormatWithValueAndSpecifiedControlType { get; }
    internal static string FormatWithValueAndSpecifiedControlTypeForNoFriendlyName { get; }
    internal static string FormatWithValueForNoFriendlyName { get; }
    internal static string TouchActionHold { get; }
    internal static string TouchActionPrimaryDoubleTap { get; }
    internal static string TouchActionPrimaryTap { get; }
    internal static string TouchActionRotateAnticlockwise { get; }
    internal static string TouchActionRotateClockwise { get; }
    internal static string TouchActionZoomIn { get; }
    internal static string TouchActionZoomOut { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionLogBasicFormat();
    internal static string get_ActionLogCheckAction();
    internal static string get_ActionLogClearAction();
    internal static string get_ActionLogClearValue();
    internal static string get_ActionLogContextSuffix();
    internal static string get_ActionLogDefaultAction();
    internal static string get_ActionLogEditAction();
    internal static string get_ActionLogFilter();
    internal static string get_ActionLogFlipAction();
    internal static string get_ActionLogForRangeValueRange();
    internal static string get_ActionLogFriendlySuffix();
    internal static string get_ActionLogInvokeAction();
    internal static string get_ActionLogMixedState();
    internal static string get_ActionLogNormalState();
    internal static string get_ActionLogOpenContextMenu();
    internal static string get_ActionLogPressedState();
    internal static string get_ActionLogRangeValueAction();
    internal static string get_ActionLogToggleAction();
    internal static string get_ActionLogToggleButtonAction();
    internal static string get_ActionLogValueAction();
    internal static string get_ConcatString();
    internal static string get_FormatActionAndTargetControlType();
    internal static string get_FormatActionAndTargetControlTypeForNoFriendlyName();
    internal static string get_FormatForDefaultContext();
    internal static string get_FormatForDefaultContextForNoFriendlyName();
    internal static string get_FormatForDialogContext();
    internal static string get_FormatForDialogContextForNoFriendlyName();
    internal static string get_FormatForFlipperContext();
    internal static string get_FormatForFlipperContextForNoFriendlyName();
    internal static string get_FormatUsingTarget();
    internal static string get_FormatUsingTargetForNoFriendlyName();
    internal static string get_FormatWithInForContext();
    internal static string get_FormatWithInForContextForNoFriendlyName();
    internal static string get_FormatWithItem();
    internal static string get_FormatWithItemForNoFriendlyName();
    internal static string get_FormatWithNoValue();
    internal static string get_FormatWithNoValueAndNoControlType();
    internal static string get_FormatWithNoValueAndNoControlTypeForNoFriendlyName();
    internal static string get_FormatWithNoValueForNoFriendlyName();
    internal static string get_FormatWithTargetAndNoValue();
    internal static string get_FormatWithTargetAndNoValueForNoFriendlyName();
    internal static string get_FormatWithValue();
    internal static string get_FormatWithValueAndNoControlType();
    internal static string get_FormatWithValueAndNoControlTypeForNoFriendlyName();
    internal static string get_FormatWithValueAndSpecifiedControlType();
    internal static string get_FormatWithValueAndSpecifiedControlTypeForNoFriendlyName();
    internal static string get_FormatWithValueForNoFriendlyName();
    internal static string get_TouchActionHold();
    internal static string get_TouchActionPrimaryDoubleTap();
    internal static string get_TouchActionPrimaryTap();
    internal static string get_TouchActionRotateAnticlockwise();
    internal static string get_TouchActionRotateClockwise();
    internal static string get_TouchActionZoomIn();
    internal static string get_TouchActionZoomOut();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.ActionNotSupportedOnDisabledControlException : PlaybackFailureException {
    protected string DefaultMessage { get; }
    public ActionNotSupportedOnDisabledControlException(string message);
    public ActionNotSupportedOnDisabledControlException(string message, Exception innerException);
    public ActionNotSupportedOnDisabledControlException(string message, string uiTestControl, object exceptionSource);
    public ActionNotSupportedOnDisabledControlException(string uiTestControl, object exceptionSource);
    public ActionNotSupportedOnDisabledControlException(string message, Exception innerException, string uiTestControl, object exceptionSource);
    public ActionNotSupportedOnDisabledControlException(string message, string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    public ActionNotSupportedOnDisabledControlException(string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    protected ActionNotSupportedOnDisabledControlException(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.ActionParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; public set; }
    public object Value { get; public set; }
    public ActionParameter(string name);
    public ActionParameter(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.AndCondition : QueryCondition {
    public static string ConditionDelimiter;
    private static Regex ConditionDelimiterRegex;
    public AndCondition(IQueryCondition[] conditions);
    private static AndCondition();
    public virtual bool Match(IUITechnologyElement element);
    public virtual string ToString();
    public static AndCondition Parse(string queryElement);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.AndConditionBuilder : object {
    private List`1<IQueryCondition> conditions;
    public int Count { get; }
    public AndConditionBuilder(IQueryCondition condition);
    public void Append(IQueryCondition condition);
    public void Append(string propertyName, object propertyValue);
    public AndCondition Build();
    public int get_Count();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.ApplicationFromNetworkShareException : UITestException {
    public ApplicationFromNetworkShareException(string message);
    public ApplicationFromNetworkShareException(string message, Exception innerException);
    protected ApplicationFromNetworkShareException(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.BasicExceptionMessage : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionNotSupportedOnDisabledControlException { get; }
    internal static string AdditionalDetailsMessage { get; }
    internal static string AppendInnerInfo { get; }
    internal static string FailedToLaunchApplicationException { get; }
    internal static string FailedToPerformActionOnBlockedControlException { get; }
    internal static string FailedToPerformActionOnHiddenControlException { get; }
    internal static string PlaybackFailureException { get; }
    internal static string TechnologyNotSupportedException { get; }
    internal static string TechnologyNotSupportedExceptionFormat { get; }
    internal static string TechnologyNotSupportedExceptionHelp { get; }
    internal static string UITestControlNotAvailableException { get; }
    internal static string UITestControlNotFoundException { get; }
    internal static string UITestControlNotVisibleException { get; }
    internal static string UITestException { get; }
    internal static string UITestJScriptExecutionException { get; }
    internal static string ValidationFailedException { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionNotSupportedOnDisabledControlException();
    internal static string get_AdditionalDetailsMessage();
    internal static string get_AppendInnerInfo();
    internal static string get_FailedToLaunchApplicationException();
    internal static string get_FailedToPerformActionOnBlockedControlException();
    internal static string get_FailedToPerformActionOnHiddenControlException();
    internal static string get_PlaybackFailureException();
    internal static string get_TechnologyNotSupportedException();
    internal static string get_TechnologyNotSupportedExceptionFormat();
    internal static string get_TechnologyNotSupportedExceptionHelp();
    internal static string get_UITestControlNotAvailableException();
    internal static string get_UITestControlNotFoundException();
    internal static string get_UITestControlNotVisibleException();
    internal static string get_UITestException();
    internal static string get_UITestJScriptExecutionException();
    internal static string get_ValidationFailedException();
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.BrowserButtonType : Enum {
    public int value__;
    public static BrowserButtonType None;
    public static BrowserButtonType Back;
    public static BrowserButtonType Forward;
    public static BrowserButtonType Refresh;
    public static BrowserButtonType Stop;
    public static BrowserButtonType Close;
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.BrowserDialogAction : Enum {
    public int value__;
    public static BrowserDialogAction None;
    public static BrowserDialogAction Ok;
    public static BrowserDialogAction Cancel;
    public static BrowserDialogAction Close;
    public static BrowserDialogAction PromptText;
    public static BrowserDialogAction Yes;
    public static BrowserDialogAction No;
    public static BrowserDialogAction Ignore;
    public static BrowserDialogAction Retry;
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.BrowserFactory : object {
    public string Name { get; }
    public IList`1<string> SupportedVersions { get; }
    public string TechnologyManagerTypeName { get; }
    public abstract virtual BrowserService Launch();
    public abstract virtual BrowserService Launch(Uri uri);
    public abstract virtual BrowserService Launch(String[] arguments);
    public abstract virtual BrowserService Locate(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    public abstract virtual BrowserService[] LocateAll(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    public abstract virtual BrowserService Locate(IntPtr handle);
    public abstract virtual BrowserHelper GetBrowserHelper();
    public abstract virtual string get_Name();
    public abstract virtual IList`1<string> get_SupportedVersions();
    public abstract virtual int GetBrowserSupportLevel(string browserName);
    public abstract virtual string get_TechnologyManagerTypeName();
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.BrowserHelper : object {
    public Uri Homepage { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public bool AllowPopups { get; public set; }
    public abstract virtual bool IsBrowserProcess(Process process);
    public abstract virtual bool IsBrowserWindow(UITechnologyElement element);
    public abstract virtual bool IsBrowserWindow(string className);
    public abstract virtual bool IsBrowserDocumentWindow(UITechnologyElement element);
    public abstract virtual bool IsBrowserDocumentWindow(IntPtr windowHandle);
    public abstract virtual BrowserButtonType GetBrowserButtonType(UITechnologyElement element);
    public abstract virtual Uri GetUrlFromBrowserDocumentWindow(UITechnologyElement element);
    public abstract virtual Uri get_Homepage();
    public abstract virtual void ClearCache();
    public abstract virtual void ClearCookies();
    public abstract virtual bool get_AllowPopups();
    public abstract virtual void set_AllowPopups(bool value);
    public abstract virtual string GetPageTitle(string windowTitle);
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.BrowserService : object {
    public Uri Uri { get; }
    public UITechnologyElement TopLevelWindow { get; }
    public UITechnologyElement DocumentWindow { get; }
    public Version Version { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual UITechnologyElement get_TopLevelWindow();
    public abstract virtual UITechnologyElement get_DocumentWindow();
    public abstract virtual Version get_Version();
    public abstract virtual void NavigateToUrl(Uri uri);
    public virtual object ExecuteScript(string script, Object[] args);
    public abstract virtual void Back();
    public abstract virtual void Forward();
    public abstract virtual void Close();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public abstract virtual void StopPageLoad();
    public abstract virtual void Refresh();
    public abstract virtual void NavigateToHomepage();
    public abstract virtual void PerformDialogAction(BrowserDialogAction browserDialogAction, object actionParameter);
    public abstract virtual void Dispose();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.CheckUncheckOptions : Enum {
    public int value__;
    public static CheckUncheckOptions None;
    public static CheckUncheckOptions VerifyFinalState;
    public static CheckUncheckOptions UseClick;
    public static CheckUncheckOptions UseSpace;
    public static CheckUncheckOptions SetIndeterminate;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.CommaListBuilder : object {
    private StringBuilder commaList;
    private static string Comma;
    private static string EscapedComma;
    public static string EscapeForComma(string s);
    public static List`1<string> GetCommaSeparatedValues(string value);
    public void AddValue(string value);
    public void AddValue(object value);
    public void AddRange(IEnumerable`1<string> stringCollection);
    public void AddRange(IEnumerable collection);
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.ConcurrentDictionaryExtensions : object {
    [ExtensionAttribute]
public static bool TryRemove(ConcurrentDictionary`2<Tkey, TValue> dict, Tkey key);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.ContextEntry : object {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControlType>k__BackingField;
    public string Format { get; public set; }
    public string Target { get; public set; }
    public string ControlType { get; public set; }
    public ContextEntry(string format, string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_ControlType();
    [CompilerGeneratedAttribute]
public void set_ControlType(string value);
    [CompilerGeneratedAttribute]
private string <ToString>b__2_0(Match match);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ControlStates : Enum {
    public long value__;
    public static ControlStates None;
    public static ControlStates Unavailable;
    public static ControlStates Selected;
    public static ControlStates Focused;
    public static ControlStates Pressed;
    public static ControlStates Checked;
    public static ControlStates Mixed;
    public static ControlStates Indeterminate;
    public static ControlStates ReadOnly;
    public static ControlStates HotTracked;
    public static ControlStates Default;
    public static ControlStates Expanded;
    public static ControlStates Collapsed;
    public static ControlStates Busy;
    public static ControlStates Floating;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static ControlStates Marqueed;
    public static ControlStates Animated;
    public static ControlStates Invisible;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static ControlStates Offscreen;
    public static ControlStates Sizeable;
    public static ControlStates Moveable;
    public static ControlStates SelfVoicing;
    public static ControlStates Focusable;
    public static ControlStates Selectable;
    public static ControlStates Linked;
    public static ControlStates Traversed;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static ControlStates MultiSelectable;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static ControlStates ExtSelectable;
    public static ControlStates AlertLow;
    public static ControlStates AlertMedium;
    public static ControlStates AlertHigh;
    public static ControlStates Protected;
    public static ControlStates HasPopup;
    public static ControlStates Invalid;
    public static ControlStates Restored;
    public static ControlStates Maximized;
    public static ControlStates Minimized;
    public static ControlStates Normal;
    public static ControlStates On;
    public static ControlStates Off;
}
[ComVisibleAttribute("True")]
[GuidAttribute("2905640F-0663-401c-994A-25127BAECE4B")]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ControlSupport : Enum {
    public int value__;
    public static ControlSupport Unknown;
    public static ControlSupport NoSupport;
    public static ControlSupport DefaultSupport;
    public static ControlSupport NativeSupport;
    public static ControlSupport ControlSpecificSupport;
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.DecodingFailedException : UITestException {
    public DecodingFailedException(string message);
    public DecodingFailedException(string message, Exception innerException);
    protected DecodingFailedException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ElementForThumbnailCapture : Enum {
    public int value__;
    public static ElementForThumbnailCapture TargetElement;
    public static ElementForThumbnailCapture InteractedElement;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.EncodeDecodeImpl : object {
    public static string EncryptString(string dataToEncode);
    public static string DecryptString(string dataToDecode);
    public static void ReadKeyFile(string keyLocation, int keyLength);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.Entry : object {
    [CompilerGeneratedAttribute]
private Type <EntryType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueString>k__BackingField;
    [XmlAttributeAttribute]
public string TypeName { get; public set; }
    [XmlIgnoreAttribute]
public Type EntryType { get; public set; }
    public string ValueString { get; public set; }
    public Entry(string value);
    public Entry(string value, bool isConstant);
    public Entry(Type type, string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public Type get_EntryType();
    [CompilerGeneratedAttribute]
public void set_EntryType(Type value);
    [CompilerGeneratedAttribute]
public string get_ValueString();
    [CompilerGeneratedAttribute]
public void set_ValueString(string value);
    public virtual string ToString();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.EqtTrace : object {
    private static TraceSwitch s_traceLevelSwitch;
    private static TraceSwitch s_traceLevelSwitchForUITest;
    private static string s_processName;
    private static int s_processId;
    private static int s_timesCanWriteToSystemLog;
    private static string SystemEventLogSource;
    private static string traceListenerGUID;
    internal static bool UseTraceListenersDirectly;
    private static string DiagnosticsSubKey;
    private static string EnableTracingName;
    private static string TraceLevelName;
    public static TraceLevel TraceLevel { get; public set; }
    private static EqtTrace();
    public static TraceLevel get_TraceLevel();
    public static void set_TraceLevel(TraceLevel value);
    public static bool ShouldTrace(TraceLevel traceLevel);
    [ConditionalAttribute("TRACE")]
public static void Error(string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Error(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorAssert(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Error(Exception exceptionToTrace);
    [ConditionalAttribute("TRACE")]
public static void Warning(string message);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Warning(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Info(string message);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Info(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    private static string FormatException(Exception exceptionToTrace);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031")]
private static string GetProcessName();
    private static int GetProcessId();
    private static void WriteAtLevel(TraceLevel level, string message);
    private static void WriteAtLevel(TraceLevel level, string format, Object[] args);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031")]
private static void WriteLine(TraceLevel level, string message);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031")]
private static void LogIgnoredException(Exception e);
    private static void WriteEventLogEntry(string message, EventLogEntryType logType);
    private static T GetRegistryValue(RegistryKey regKeyPath, string subKeyPath, string registryName, T defaultValue);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.ExceptionConstants : object {
    internal static UInt32 ControlNotFound;
    internal static UInt32 MultipleControlsFound;
    internal static UInt32 ControlNotVisible;
    internal static UInt32 ControlNotClickable;
    internal static UInt32 ControlNotInFocus;
    internal static UInt32 ControlDisabled;
    internal static UInt32 VerificationFailed;
    internal static UInt32 OptionNotFound;
    internal static UInt32 PlaybackFailure;
    internal static UInt32 TechnologyNotSupported;
    internal static UInt32 PlaybackCancelled;
    internal static UInt32 ApplicationNotRegistered;
    internal static string ControlNotFoundCount;
    internal static string ActualValue;
    internal static string IntermediateElementsSkipped;
    internal static string IsSmartMatchUsed;
    internal static string HResult;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ExpandCollapseOptions : Enum {
    public int value__;
    public static ExpandCollapseOptions None;
    public static ExpandCollapseOptions UseWindowMessage;
    public static ExpandCollapseOptions UseDoubleClick;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static ExpandCollapseOptions UseNumpad;
    public static ExpandCollapseOptions UseEnter;
    public static ExpandCollapseOptions UseProgrammatic;
    public static ExpandCollapseOptions DoNotVerify;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.ExtensionResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Audio { get; }
    internal static string Button { get; }
    internal static string Calendar { get; }
    internal static string Cell { get; }
    internal static string CheckBox { get; }
    internal static string CheckBoxTreeItem { get; }
    internal static string Client { get; }
    internal static string ColumnHeader { get; }
    internal static string ComboBox { get; }
    internal static string ContextMenu { get; }
    internal static string Custom { get; }
    internal static string DatePicker { get; }
    internal static string DateTimePicker { get; }
    internal static string Document { get; }
    internal static string Edit { get; }
    internal static string Ellipsis { get; }
    internal static string ErrorElementNotAvailable { get; }
    internal static string Expander { get; }
    internal static string FileInput { get; }
    internal static string FlipView { get; }
    internal static string FlipViewItem { get; }
    internal static string Frame { get; }
    internal static string Group { get; }
    internal static string Hub { get; }
    internal static string HubSection { get; }
    internal static string Hyperlink { get; }
    internal static string Image { get; }
    internal static string In { get; }
    internal static string InvalidParameterValue { get; }
    internal static string InvalidQueryString { get; }
    internal static string Label { get; }
    internal static string List { get; }
    internal static string ListItem { get; }
    internal static string Media { get; }
    internal static string MenuBar { get; }
    internal static string MenuItem { get; }
    internal static string MicrosoftCorporation { get; }
    internal static string OddNumberOfArguments { get; }
    internal static string Pane { get; }
    internal static string Pivot { get; }
    internal static string PivotItem { get; }
    internal static string PopupMenu { get; }
    internal static string ProgressBar { get; }
    internal static string PropertyExpressionNotFound { get; }
    internal static string RadioButton { get; }
    internal static string Rating { get; }
    internal static string Row { get; }
    internal static string RowHeader { get; }
    internal static string ScrollBar { get; }
    internal static string SemanticZoom { get; }
    internal static string Separator { get; }
    internal static string SetStateException { get; }
    internal static string SFIInitError { get; }
    internal static string SFIRequestError { get; }
    internal static string SingleWarningString { get; }
    internal static string Slider { get; }
    internal static string Spinner { get; }
    internal static string SplitButton { get; }
    internal static string StateNotSupported { get; }
    internal static string StatusBar { get; }
    internal static string Tab { get; }
    internal static string TabItem { get; }
    internal static string Table { get; }
    internal static string TabList { get; }
    internal static string TabPage { get; }
    internal static string TitleBar { get; }
    internal static string ToggleButton { get; }
    internal static string ToggleSwitch { get; }
    internal static string ToolBar { get; }
    internal static string ToolTip { get; }
    internal static string TotalTimeString { get; }
    internal static string Tree { get; }
    internal static string TreeItem { get; }
    internal static string TruncatedStringWithEllipsis { get; }
    internal static string Video { get; }
    internal static string WarningsString { get; }
    internal static string Window { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Audio();
    internal static string get_Button();
    internal static string get_Calendar();
    internal static string get_Cell();
    internal static string get_CheckBox();
    internal static string get_CheckBoxTreeItem();
    internal static string get_Client();
    internal static string get_ColumnHeader();
    internal static string get_ComboBox();
    internal static string get_ContextMenu();
    internal static string get_Custom();
    internal static string get_DatePicker();
    internal static string get_DateTimePicker();
    internal static string get_Document();
    internal static string get_Edit();
    internal static string get_Ellipsis();
    internal static string get_ErrorElementNotAvailable();
    internal static string get_Expander();
    internal static string get_FileInput();
    internal static string get_FlipView();
    internal static string get_FlipViewItem();
    internal static string get_Frame();
    internal static string get_Group();
    internal static string get_Hub();
    internal static string get_HubSection();
    internal static string get_Hyperlink();
    internal static string get_Image();
    internal static string get_In();
    internal static string get_InvalidParameterValue();
    internal static string get_InvalidQueryString();
    internal static string get_Label();
    internal static string get_List();
    internal static string get_ListItem();
    internal static string get_Media();
    internal static string get_MenuBar();
    internal static string get_MenuItem();
    internal static string get_MicrosoftCorporation();
    internal static string get_OddNumberOfArguments();
    internal static string get_Pane();
    internal static string get_Pivot();
    internal static string get_PivotItem();
    internal static string get_PopupMenu();
    internal static string get_ProgressBar();
    internal static string get_PropertyExpressionNotFound();
    internal static string get_RadioButton();
    internal static string get_Rating();
    internal static string get_Row();
    internal static string get_RowHeader();
    internal static string get_ScrollBar();
    internal static string get_SemanticZoom();
    internal static string get_Separator();
    internal static string get_SetStateException();
    internal static string get_SFIInitError();
    internal static string get_SFIRequestError();
    internal static string get_SingleWarningString();
    internal static string get_Slider();
    internal static string get_Spinner();
    internal static string get_SplitButton();
    internal static string get_StateNotSupported();
    internal static string get_StatusBar();
    internal static string get_Tab();
    internal static string get_TabItem();
    internal static string get_Table();
    internal static string get_TabList();
    internal static string get_TabPage();
    internal static string get_TitleBar();
    internal static string get_ToggleButton();
    internal static string get_ToggleSwitch();
    internal static string get_ToolBar();
    internal static string get_ToolTip();
    internal static string get_TotalTimeString();
    internal static string get_Tree();
    internal static string get_TreeItem();
    internal static string get_TruncatedStringWithEllipsis();
    internal static string get_Video();
    internal static string get_WarningsString();
    internal static string get_Window();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.ExtensionUtilities : object {
    public static bool IsQueryConditionSubSetOfParent(string elementTechnologyName, IQueryCondition[] element, IUITechnologyElement parent);
    public static string SanitizeFriendlyName(string friendlyName);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.FailedToLaunchApplicationException : PlaybackFailureException {
    protected string DefaultMessage { get; }
    public FailedToLaunchApplicationException(string message);
    public FailedToLaunchApplicationException(string message, Exception innerException);
    protected FailedToLaunchApplicationException(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.FailedToPerformActionOnBlockedControlException : PlaybackFailureException {
    private IntPtr windowHandle;
    public IntPtr WindowHandle { get; }
    protected string DefaultMessage { get; }
    public FailedToPerformActionOnBlockedControlException(string message);
    public FailedToPerformActionOnBlockedControlException(string message, Exception innerException);
    public FailedToPerformActionOnBlockedControlException(string message, string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    public FailedToPerformActionOnBlockedControlException(string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    public FailedToPerformActionOnBlockedControlException(string message, string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, IntPtr windowHandle, string uiTestControl, object exceptionSource);
    public FailedToPerformActionOnBlockedControlException(string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, IntPtr windowHandle, string uiTestControl, object exceptionSource);
    protected FailedToPerformActionOnBlockedControlException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public IntPtr get_WindowHandle();
    protected virtual string get_DefaultMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.FailedToPerformActionOnHiddenControlException : PlaybackFailureException {
    protected string DefaultMessage { get; }
    public FailedToPerformActionOnHiddenControlException(string message);
    public FailedToPerformActionOnHiddenControlException(string message, Exception innerException);
    public FailedToPerformActionOnHiddenControlException(string message, string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    public FailedToPerformActionOnHiddenControlException(string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    protected FailedToPerformActionOnHiddenControlException(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.FilterCondition : QueryCondition {
    public static string ConditionDelimiter;
    private static Regex OrderedMatchFormat;
    private static Regex ConditionDelimiterRegex;
    public FilterCondition(IQueryCondition[] conditions);
    private static FilterCondition();
    public virtual bool Match(IUITechnologyElement element);
    public virtual string ToString();
    public static FilterCondition Parse(string queryElement);
    public static bool TryParse(string queryElement, FilterCondition& condition);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.GetClickablePointFromOption : Enum {
    public int value__;
    public static GetClickablePointFromOption None;
    public static GetClickablePointFromOption GetClickablePointFromTechnologyManager;
    public static GetClickablePointFromOption GetClickablePointFromPlayback;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.HtmlTraceListener : TextWriterTraceListener {
    private static string LogHeader;
    private static string VerboseTagName;
    private static string InfoTagName;
    private static string WarningTagName;
    private static string ErrorTagName;
    public HtmlTraceListener(string fileName);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    private static string GetHtmlMessage(string message);
    private static string GetMessageTagName(string message);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Extension.IBrowserActionSupport {
    public Uri PageUrl { get; }
    public abstract virtual void NavigateToUrl(Uri uri);
    public abstract virtual void Back();
    public abstract virtual void Forward();
    public abstract virtual void Close();
    public abstract virtual void Stop();
    public abstract virtual void Refresh();
    public abstract virtual void NavigateToHomepage();
    public abstract virtual Uri get_PageUrl();
    public abstract virtual void ClearCache();
    public abstract virtual void ClearCookies();
}
[GuidAttribute("9155030C-790A-476F-A525-0733BDC63318")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.ILastInvocationInfo {
    public string Message { get; }
    public string Source { get; }
    public ILastInvocationInfo InnerInfo { get; }
    public abstract virtual string get_Message();
    public abstract virtual string get_Source();
    public abstract virtual ILastInvocationInfo get_InnerInfo();
    public abstract virtual String[] GetInfoProperties();
    public abstract virtual object GetInfoPropertyValue(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IllegalParameterValueException : UITestException {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ParameterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParameterBound>k__BackingField;
    public string ParameterName { get; public set; }
    public object ParameterValue { get; public set; }
    public bool IsParameterBound { get; public set; }
    public IllegalParameterValueException(string message);
    public IllegalParameterValueException(string message, Exception innerException);
    protected IllegalParameterValueException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
public void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public object get_ParameterValue();
    [CompilerGeneratedAttribute]
public void set_ParameterValue(object value);
    [CompilerGeneratedAttribute]
public bool get_IsParameterBound();
    [CompilerGeneratedAttribute]
public void set_IsParameterBound(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.InvalidUITestExtensionPackageException : UITestException {
    public InvalidUITestExtensionPackageException(string message);
    public InvalidUITestExtensionPackageException(string message, Exception innerException);
    protected InvalidUITestExtensionPackageException(SerializationInfo info, StreamingContext context);
}
[GuidAttribute("E6B73AC4-8242-4b4c-BB35-892F8059871E")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IQueryCondition {
    public string Name { get; public set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public IQueryCondition[] Conditions { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IQueryCondition[] get_Conditions();
    public abstract virtual void set_Conditions(IQueryCondition[] value);
    public abstract virtual bool Match(IUITechnologyElement element);
    public abstract virtual object GetPropertyValue(string nameOfProperty);
    public abstract virtual void BindParameters(ValueMap valueMap);
    public abstract virtual bool ParameterizeProperty(string nameOfProperty, string nameOfParameter);
}
[GuidAttribute("28A0F08A-085E-498f-857D-3B683E7FA342")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IQueryElement {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public String[] SearchConfigurations { get; public set; }
    public IUITechnologyElement Ancestor { get; public set; }
    public IQueryCondition Condition { get; public set; }
    public abstract virtual String[] get_SearchConfigurations();
    public abstract virtual void set_SearchConfigurations(String[] value);
    public abstract virtual IUITechnologyElement get_Ancestor();
    public abstract virtual void set_Ancestor(IUITechnologyElement value);
    public abstract virtual IQueryCondition get_Condition();
    public abstract virtual void set_Condition(IQueryCondition value);
}
[GuidAttribute("13D1FC8D-99AE-451A-B0BF-E8FBC1EB5503")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUISynchronizationWaiter {
    public abstract virtual bool Wait(int timeout, object data);
    public abstract virtual void Remove();
    public abstract virtual bool Reset();
}
[GuidAttribute("BC69B142-3828-40FB-9D7C-D2D66E1F7E46")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUITechnologyElement {
    public int ChildIndex { get; }
    public bool IsLeafNode { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string TechnologyName { get; }
    public bool IsPassword { get; }
    public string Name { get; }
    public IntPtr WindowHandle { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase")]
public IQueryElement QueryId { get; }
    public string Value { get; public set; }
    public object NativeElement { get; }
    public string FriendlyName { get; }
    public IUITechnologyElement SwitchingElement { get; public set; }
    public bool IsTreeSwitchingRequired { get; }
    public abstract virtual int get_ChildIndex();
    public abstract virtual bool get_IsLeafNode();
    public abstract virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public abstract virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public abstract virtual string get_ClassName();
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public abstract virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public abstract virtual bool Equals(IUITechnologyElement element);
    public abstract virtual string get_ControlTypeName();
    public abstract virtual string get_TechnologyName();
    public abstract virtual bool get_IsPassword();
    public abstract virtual string get_Name();
    public abstract virtual IntPtr get_WindowHandle();
    public abstract virtual IQueryElement get_QueryId();
    public abstract virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual object get_NativeElement();
    public abstract virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    [SuppressMessageAttribute("Microsoft.Design", "CA1045:DoNotPassTypesByReference")]
public abstract virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outpointX, Int32& outpointY);
    public abstract virtual object GetPropertyValue(string propertyName);
    public abstract virtual void SetFocus();
    public abstract virtual void WaitForReady();
    public abstract virtual string get_FriendlyName();
    public abstract virtual object GetOption(UITechnologyElementOption technologyElementOption);
    public abstract virtual void SetOption(UITechnologyElementOption technologyElementOption, object optionValue);
    public abstract virtual IUITechnologyElement get_SwitchingElement();
    public abstract virtual void set_SwitchingElement(IUITechnologyElement value);
    public abstract virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public abstract virtual bool InitializeProgrammaticScroll();
    public abstract virtual void ScrollProgrammatically(ScrollDirection scrollDirection, ScrollAmount scrollAmount);
    public abstract virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public abstract virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public abstract virtual bool get_IsTreeSwitchingRequired();
}
[GuidAttribute("1984584A-4C77-488a-BD8B-3D7FE868F5B8")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUITechnologyManager {
    [DispIdAttribute("1")]
public string TechnologyName { get; }
    public abstract virtual string get_TechnologyName();
    [DispIdAttribute("2")]
public abstract virtual void StartSession(bool recordingSession);
    [DispIdAttribute("3")]
public abstract virtual void StopSession();
    [DispIdAttribute("4")]
public abstract virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    [DispIdAttribute("5")]
[ComVisibleAttribute("True")]
public abstract virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    [DispIdAttribute("6")]
public abstract virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    [DispIdAttribute("7")]
public abstract virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    [DispIdAttribute("8")]
public abstract virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    [DispIdAttribute("9")]
public abstract virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    [DispIdAttribute("10")]
public abstract virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    [DispIdAttribute("11")]
public abstract virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    [DispIdAttribute("12")]
public abstract virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    [DispIdAttribute("13")]
public abstract virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    [DispIdAttribute("14")]
public abstract virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    [DispIdAttribute("15")]
public abstract virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
[DispIdAttribute("16")]
public abstract virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
[DispIdAttribute("17")]
public abstract virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
[DispIdAttribute("18")]
public abstract virtual ILastInvocationInfo GetLastInvocationInfo();
    [DispIdAttribute("19")]
public abstract virtual void CancelStep();
    [DispIdAttribute("20")]
public abstract virtual object GetTechnologyManagerProperty(UITechnologyManagerProperty propertyName);
    [DispIdAttribute("21")]
public abstract virtual void SetTechnologyManagerProperty(UITechnologyManagerProperty propertyName, object propertyValue);
    [DispIdAttribute("22")]
public abstract virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    [DispIdAttribute("23")]
public abstract virtual int GetControlSupportLevel(IntPtr windowHandle);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUITechnologyPluginManager {
    public IList`1<UITechnologyManager> TechnologyManagers { get; }
    public ICollection`1<string> TechnologyManagerNames { get; }
    public UITechnologyManager DefaultTechnologyManager { get; }
    public abstract virtual void StartSession(bool recordingSession);
    public abstract virtual void StopSession();
    public abstract virtual UITechnologyManager GetTechnologyManagerByName(string technologyName);
    public abstract virtual UITechnologyManager GetTechnologyManagerByTypeInAll(string typeName);
    public abstract virtual UITechnologyManager GetTechnologyManagerByAutomationElementOrWindowHandle(object element);
    public abstract virtual bool StartSessionAndAdd(UITechnologyManager technologyManager, bool recordingSession);
    public abstract virtual bool StopSessionAndRemove(UITechnologyManager technologyManager);
    public abstract virtual IList`1<UITechnologyManager> get_TechnologyManagers();
    public abstract virtual ICollection`1<string> get_TechnologyManagerNames();
    public abstract virtual UITechnologyManager get_DefaultTechnologyManager();
}
[GuidAttribute("13638DE4-9F20-4980-8380-E55C182B0E8C")]
[ComVisibleAttribute("True")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUITestEventNotify {
    public abstract virtual void Notify(IUITechnologyElement source, IUITechnologyElement target, UITestEventType eventType, object eventArgs);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public abstract virtual void NotifyMultiSource(IUITechnologyElement[] sources, IUITechnologyElement target, UITestEventType eventType, object eventArgs, ElementForThumbnailCapture elementForThumbnailImage);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUITestService {
    public UITechnologyElement RootElement { get; }
    public IUITechnologyPluginManager PluginManager { get; }
    public bool EatNavigationTimeoutException { get; public set; }
    public bool IsSessionStarted { get; }
    public abstract virtual UITechnologyElement get_RootElement();
    public abstract virtual void StartSession(bool recordingSession);
    public abstract virtual void StopSession();
    public abstract virtual void Initialize();
    public abstract virtual void Cleanup();
    public abstract virtual UITechnologyElement GetTopLevelElementUsingWindowTree(IUITechnologyElement element);
    public abstract virtual UITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public abstract virtual UITechnologyElement ConvertToMappedTechnologyElement(IUITechnologyElement element);
    public abstract virtual UITechnologyManager TechnologyManagerFromHandle(IntPtr handle);
    public abstract virtual void UpdateQueryIdForTopLevelElement(UITechnologyElement element);
    public abstract virtual UITechnologyElement ConvertTechnologyElement(IUITechnologyElement unmanagedMsaaElement);
    public abstract virtual UITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public abstract virtual IEnumerator`1<UITechnologyElement> GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public abstract virtual UITechnologyElement GetElementFromNativeElement(string technologyName, object nativeElement);
    public abstract virtual UITechnologyElement GetParent(UITechnologyElement element);
    public abstract virtual UITechnologyElement GetFirstChild(UITechnologyElement element);
    public abstract virtual UITechnologyElement GetNextSibling(UITechnologyElement element);
    public abstract virtual UITechnologyElement GetPreviousSibling(UITechnologyElement element);
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
public abstract virtual UITechnologyElement GetFocusedElement();
    public abstract virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual bool AddEventHandler(UITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual bool RemoveEventHandler(UITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual UITechnologyManager TechnologyManagerByName(string technologyName);
    [SuppressMessageAttribute("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
[SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
public abstract virtual IList`1<T> GetExtensions();
    public abstract virtual IUITechnologyPluginManager get_PluginManager();
    public abstract virtual bool get_EatNavigationTimeoutException();
    public abstract virtual void set_EatNavigationTimeoutException(bool value);
    public abstract virtual bool get_IsSessionStarted();
    public abstract virtual void AddExtensionToCoreTechnologyMapping(string extensionTechnologyName, string coreTechnologyName);
    public abstract virtual string GetCoreTechnologyName(string extensionTechnologyName);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUITestServiceOptimized {
    public abstract virtual UITechnologyElement GetParentFast(UITechnologyElement element);
    public abstract virtual UITechnologyElement GetFirstChildFast(UITechnologyElement element);
    public abstract virtual UITechnologyElement GetNextSiblingFast(UITechnologyElement element);
    public abstract virtual UITechnologyElement GetPreviousSiblingFast(UITechnologyElement element);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CABB0DA0-DA57-11CF-9974-0020AFD79762")]
public interface Microsoft.VisualStudio.TestTools.UITest.Extension.IUniformResourceLocator {
    [SuppressMessageAttribute("Microsoft.Design", "CA1054:UriParametersShouldNotBeStrings")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
public abstract virtual int SetURL(string pcszURL, UInt32 dwInFlags);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
public abstract virtual void GetUrl(IntPtr& ppszURL);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
public abstract virtual void InvokeCommand(URLINVOKECOMMANDINFO& pURLCommandInfo);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.KeyStates : Enum {
    public int value__;
    public static KeyStates None;
    public static KeyStates Down;
    public static KeyStates Toggled;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.LocalizedSystemStrings : object {
    [CompilerGeneratedAttribute]
private string <IEPromptDialogTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IEGenericTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IEAlertDialogTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IEDialogCancelButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IEDialogOkButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IEDialogCloseButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IEDialogRetryButton>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IESecurityWarningDialogTitle>k__BackingField;
    private static UInt32 LOAD_LIBRARY_AS_DATAFILE;
    private static UInt32 RT_DIALOG;
    private static ushort NullChar;
    private static ushort DialogExSignature;
    private static UInt32 MaxDialogTitleLen;
    private static int MaxStringResourceLength;
    private static LocalizedSystemStrings instance;
    private static CultureInfo currentOSCulture;
    private static Nullable`1<bool> isIE9OrLater;
    private string ieBackButtonText;
    private string ieForwardButtonText;
    private string ieRefreshButtonText;
    private string ieCloseButtonText;
    private string ieStopButtonText;
    private string ieAddressNameText;
    private string ieAddressNameTextIE9;
    private string ieFileUploadDialogTitle;
    private string fileUploadComboBoxName;
    private string firefoxFileUploadDialogTitle;
    private string win7AuthenticationDialogTitle;
    private string authenticationDialogTitle;
    private string ie9NotificationBar;
    private string iePlayMenuItemText;
    private string iePauseMenuItemText;
    private string ieMuteMenuItemText;
    private string ieUnmuteMenuItemText;
    private string cutText;
    private string copyText;
    private string pasteText;
    private string deleteText;
    private string undoText;
    private string selectallText;
    private string addToDictionaryText;
    private string ignoreText;
    private string microsoftPhishingFilter;
    private string autoComplete;
    private string autoCompletePasswords;
    private string informationBar;
    private string internetExplorerDialogTitle;
    private string ie8AddressBarButtonName;
    private string windowMaximizeButtonText;
    private string windowRestoreButtonText;
    private string winFormsEditableControlNameENU;
    private string winFormsEditableControlNameLocalized;
    private string windowsQuickLaunchText;
    private string windowsRunningApplicationsText;
    private static string ieframeDllResourceName;
    private static string mshtmlDllResourceName;
    private static string msaaResourceDll;
    private static string commonDialogDll;
    private static string commonDialogResourceDll;
    private static string winFormsResourceDllName;
    private static string user32DllResourceName;
    private static string authUIDllResourceName;
    private static string credUIDllResourceName;
    private static string explorerDllResourceName;
    private static string wetDllResourceName;
    private string WinFormsEditingControlResourceID;
    public string IEBackButtonText { get; }
    public string IEForwardButtonText { get; }
    public string IERefreshButtonText { get; }
    public string IECloseButtonText { get; }
    public string IEStopButtonText { get; }
    public string IEFileUploadDialogTitle { get; }
    public string FireFoxFileUploadDialogTitle { get; }
    public string FileUploadComboBoxName { get; }
    public string MicrosoftPhishingFilter { get; }
    public string IE9NotificationBar { get; }
    public string AutoComplete { get; }
    public string AutoCompletePasswords { get; }
    public string InformationBar { get; }
    public string InternetExplorerDialogTitle { get; }
    public string IE8AddressBarButtonName { get; }
    public string WindowMaximizeButtonText { get; }
    public string WindowRestoreButtonText { get; }
    public string WinFormsEditableControlNameENU { get; }
    public string WinFormsEditableControlNameLocalized { get; }
    public string WindowsRunningApplicationsText { get; }
    public string WindowsQuickLaunchText { get; }
    public string IEPromptDialogTitle { get; private set; }
    public string IEGenericTitle { get; private set; }
    public string IEAlertDialogTitle { get; private set; }
    public string IEDialogCancelButton { get; private set; }
    public string IEDialogOkButton { get; private set; }
    public string IEDialogCloseButton { get; private set; }
    public string IEDialogRetryButton { get; private set; }
    public string IESecurityWarningDialogTitle { get; private set; }
    public string AuthenticationDialogTitle { get; }
    public string Windows7AuthenticationDialogTitle { get; }
    public string IEPlayMenuItemText { get; }
    public string IEPauseMenuItemText { get; }
    public string IEMuteMenuItemText { get; }
    public string IEUnmuteMenuItemText { get; }
    public string IESpellCheckCutText { get; }
    public string IESpellCheckCopyText { get; }
    public string IESpellCheckPasteText { get; }
    public string IESpellCheckDeleteText { get; }
    public string IESpellCheckUndoText { get; }
    public string IESpellCheckSelectAllText { get; }
    public string IESpellCheckAddToDictionaryText { get; }
    public string IESpellCheckIgnoreText { get; }
    internal static bool IsIE9OrLater { get; }
    public static LocalizedSystemStrings Instance { get; }
    internal static CultureInfo CurrentOSCulture { get; }
    private static LocalizedSystemStrings();
    public string get_IEBackButtonText();
    public string get_IEForwardButtonText();
    public string get_IERefreshButtonText();
    public string get_IECloseButtonText();
    public string get_IEStopButtonText();
    public string get_IEFileUploadDialogTitle();
    public string get_FireFoxFileUploadDialogTitle();
    public string get_FileUploadComboBoxName();
    public string get_MicrosoftPhishingFilter();
    public string get_IE9NotificationBar();
    public string get_AutoComplete();
    public string get_AutoCompletePasswords();
    public string get_InformationBar();
    public string get_InternetExplorerDialogTitle();
    public string get_IE8AddressBarButtonName();
    public string get_WindowMaximizeButtonText();
    public string get_WindowRestoreButtonText();
    public string get_WinFormsEditableControlNameENU();
    public string get_WinFormsEditableControlNameLocalized();
    public string get_WindowsRunningApplicationsText();
    public string get_WindowsQuickLaunchText();
    [CompilerGeneratedAttribute]
public string get_IEPromptDialogTitle();
    [CompilerGeneratedAttribute]
private void set_IEPromptDialogTitle(string value);
    [CompilerGeneratedAttribute]
public string get_IEGenericTitle();
    [CompilerGeneratedAttribute]
private void set_IEGenericTitle(string value);
    [CompilerGeneratedAttribute]
public string get_IEAlertDialogTitle();
    [CompilerGeneratedAttribute]
private void set_IEAlertDialogTitle(string value);
    [CompilerGeneratedAttribute]
public string get_IEDialogCancelButton();
    [CompilerGeneratedAttribute]
private void set_IEDialogCancelButton(string value);
    [CompilerGeneratedAttribute]
public string get_IEDialogOkButton();
    [CompilerGeneratedAttribute]
private void set_IEDialogOkButton(string value);
    [CompilerGeneratedAttribute]
public string get_IEDialogCloseButton();
    [CompilerGeneratedAttribute]
private void set_IEDialogCloseButton(string value);
    [CompilerGeneratedAttribute]
public string get_IEDialogRetryButton();
    [CompilerGeneratedAttribute]
private void set_IEDialogRetryButton(string value);
    [CompilerGeneratedAttribute]
public string get_IESecurityWarningDialogTitle();
    [CompilerGeneratedAttribute]
private void set_IESecurityWarningDialogTitle(string value);
    public string get_AuthenticationDialogTitle();
    public string get_Windows7AuthenticationDialogTitle();
    public string get_IEPlayMenuItemText();
    public string get_IEPauseMenuItemText();
    public string get_IEMuteMenuItemText();
    public string get_IEUnmuteMenuItemText();
    public string get_IESpellCheckCutText();
    public string get_IESpellCheckCopyText();
    public string get_IESpellCheckPasteText();
    public string get_IESpellCheckDeleteText();
    public string get_IESpellCheckUndoText();
    public string get_IESpellCheckSelectAllText();
    public string get_IESpellCheckAddToDictionaryText();
    public string get_IESpellCheckIgnoreText();
    public bool MatchIEAddressBoxNameText(string actualName);
    public bool MatchIEDialogTitle(string actualName);
    private void LoadIEStrings();
    internal static bool get_IsIE9OrLater();
    internal static string GetMshtmlResourceFilePath();
    private static string GetFilePathBasedOnLanguage(string resourceFileName, string language);
    private static string GetFilePathBasedOnLanguage(string directoryName, string resourceFileName, string language);
    private static string SetStringIfNotNull(string source, string defaultValue, string language);
    public static LocalizedSystemStrings get_Instance();
    private static string GetDialogTitleFromResource(UInt32 resourceId, string resourceFileName);
    private static string GetDialogTitleFromResource(UInt32 resourceId, int controlId, string resourceFileName);
    private static IntPtr LoadResource(UInt32 resourceId, string resourceFileName, IntPtr& hMod, UInt32& size);
    private static string GetTitleFromExtendedDialogTemplate(IntPtr resourceHandle, UInt32 size, int controlId);
    private static string GetTitleFromDialogTemplate(IntPtr resourceHandle, UInt32 size, int controlId);
    private static void ProcessMenuAndClassItems(IntPtr resourceStartAddress, Int32& currentOffset, UInt32 size);
    private static void AlignOffsetToNextWordBoundary(IntPtr resourceStartAddress, Int32& currentOffset);
    private static void AlignOffsetToNextDWordBoundary(IntPtr resourceStartAddress, Int32& currentOffset);
    private static int GetWordLength(int numWords);
    private static ushort ReadWordAtOffset(IntPtr resourceStartAddress, int offset, UInt32 resourceSize);
    private static string GetNullTerminatedString(IntPtr resource, UInt32 resourceLength, int titleStartIndex);
    internal static string GetStringFromResource(UInt32 resourceId, string resourceFileName);
    internal static CultureInfo get_CurrentOSCulture();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.LoggerUtilities : object {
    internal static object LastFailureScreenShot { get; }
    internal static bool IsScreenLockedOrRemoteSessionMinimized();
    internal static void CaptureScreenShotAndDrawBounds(Rectangle bounds, int borderWidth, bool isActualControlBounds);
    internal static void ResetScreenShot();
    internal static object GetDesktopImage();
    internal static object get_LastFailureScreenShot();
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.MediaActionType : Enum {
    public int value__;
    public static MediaActionType Play;
    public static MediaActionType Pause;
    public static MediaActionType Seek;
    public static MediaActionType VolumeChange;
    public static MediaActionType Mute;
    public static MediaActionType None;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.MultiScreenHelper : object {
    internal static Rectangle GetScreenRelativeBoundingRectangle(Rectangle boundingRectangle, Rectangle elementBoundingRectangle);
    internal static string GetActiveScreenLocationByElementBounds(Rectangle boundingRectangle, Rectangle elementBoundingRectangle);
    internal static Rectangle GetActiveScreenBoundsForElementSnapshot(Rectangle boundingRectangle, Rectangle elementBoundingRectangle);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.NativeControlTypeKind : Enum {
    public int value__;
    public static NativeControlTypeKind AsInteger;
    public static NativeControlTypeKind AsString;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.NativeMethods : object {
    internal static int GCL_HICONSM;
    internal static int WS_MINIMIZE;
    internal static int WS_CAPTION;
    internal static int WS_EX_LAYERED;
    internal static int WS_EX_TRANSPARENT;
    internal static int WS_EX_APPWINDOW;
    internal static int WS_EX_TOOLWINDOW;
    internal static int WS_EX_TOPMOST;
    internal static int WS_EX_LAYOUTRTL;
    internal static int WS_EX_RIGHT;
    internal static int WS_EX_RTLREADING;
    internal static int ToolBarMinBtnIndex;
    internal static int ToolBarMaxBtnIndex;
    internal static int ToolBarHelpBtnIndex;
    internal static int ToolBarCloseBtnIndex;
    internal static int WindowsLowLevelMouseHookId;
    internal static int WindowsLowLevelKeyboardHookId;
    internal static int DefaultSendMessageTimeout;
    internal static int OBJID_WINDOW;
    internal static int OBJID_CLIENT;
    internal static int MaxWindowTextLength;
    internal static int KeyStatePressed;
    internal static string IEControlClassName;
    internal static Guid AccessibleGuid;
    private static string WindowsHtmlMessage;
    private static Nullable`1<bool> is64BitOperatingSystem;
    private static UInt32 WindowsHtmlMessageId;
    internal static int WM_HOTKEY;
    private static Dictionary`2<string, string> deviceToDriveMap;
    private static int MaxPath;
    private static string DirectorySeparator;
    private static object lockObject;
    private static int WM_NULL;
    private static int TOKEN_QUERY;
    private static int TokenElevationTypeClass;
    private static int TokenElevationTypeFull;
    internal static UInt32 SWP_NOSIZE;
    internal static UInt32 SWP_NOMOVE;
    internal static UInt32 SWP_NOACTIVATE;
    internal static int ERROR_ACCESS_DENIED;
    internal static Dictionary`2<string, string> DeviceToDriveMap { get; }
    internal static bool Is64BitOperatingSystem { get; }
    private static NativeMethods();
    internal static IntPtr FindWindowEx(IntPtr windowHandle1, IntPtr windowHandle2, string lpszClass, string lpszWindow);
    internal static LowLevelHookHandle SetWindowsHookEx(int idHook, LowLevelHookProc lpfn, IntPtr hInstance, UInt32 threadId);
    internal static bool UnhookWindowsHookEx(IntPtr idHook);
    internal static IntPtr CallNextHookEx(LowLevelHookHandle idHook, int nCode, IntPtr wParam, IntPtr lParam);
    internal static IntPtr GetKeyboardLayout(UInt32 idThread);
    internal static bool GetKeyboardState(Byte[] lpKeyState);
    internal static short GetAsyncKeyState(int vKey);
    internal static int ToUnicodeEx(UInt32 wVirtKey, UInt32 wScanCode, Byte[] lpKeyState, StringBuilder pwszBuff, int cchBuff, UInt32 wFlags, IntPtr dwhkl);
    internal static bool PeekMessage(MSG& msg, IntPtr hwnd, int nMsgFilterMin, int nMsgFilterMax, int wRemoveMsg);
    internal static IntPtr DispatchMessage(MSG& msg);
    internal static UInt32 GetProcessImageFileName(IntPtr hProcess, StringBuilder lpImageFileName, UInt32 nSize);
    internal static IntPtr OpenProcess(ProcessAccessRights dwDesiredAccess, bool bInheritHandle, UInt32 dwProcessId);
    internal static UInt32 QueryDosDevice(string lpDeviceName, StringBuilder lpTargetPath, UInt32 ucchMax);
    public static UInt32 GetVersionEx(OSVERSIONINFO& lpVersionInfo);
    internal static IntPtr GetDC(IntPtr hwnd);
    internal static int ReleaseDC(IntPtr hwnd, IntPtr hdc);
    internal static int GetDeviceCaps(IntPtr hdc, int index);
    internal static string GetProcessFileName(int processId);
    private static string ConvertDevicePathToWindowsPath(string processName);
    internal static Dictionary`2<string, string> get_DeviceToDriveMap();
    private static String[] GetNetworkDevicePaths();
    [SuppressMessageAttribute("Microsoft.Portability", "CA1901:PInvokeDeclarationsShouldBePortable")]
internal static IntPtr WindowFromPoint(POINT pt);
    internal static UInt32 GetWindowThreadProcessId(IntPtr hWnd, UInt32& dwProcessId);
    internal static IntPtr GetForegroundWindow();
    internal static bool IsWindow(IntPtr hWnd);
    internal static bool IsChild(IntPtr hWndParent, IntPtr hWnd);
    internal static bool ShowWindow(IntPtr hWnd, WindowShowStyle nCmdShow);
    internal static IntPtr GetFocus();
    internal static IntPtr SetFocus(IntPtr hWnd);
    internal static bool DestroyIcon(IntPtr handle);
    internal static bool GetTitleBarInfo(IntPtr hwnd, TITLEBARINFO& pti);
    public static UInt32 RegOpenKeyEx(UIntPtr hKey, string lpSubKey, UInt32 ulOptions, int samDesired, UIntPtr& phkResult);
    public static UInt32 RegCloseKey(UIntPtr hkey);
    public static UInt32 RegQueryInfoKey(UIntPtr hKey, StringBuilder lpClass, UInt32& lpcClass, IntPtr lpReserved, UInt32& lpcSubKeys, UInt32& lpcbMaxSubKeyLen, UInt32& lpcbMaxClassLen, UInt32& lpcValues, UInt32& lpcMaxValueNameLen, UInt32& lpcMaxValueLen, IntPtr lpcbSecurityDescriptor, FILETIME& lpftLastWriteTime);
    internal static bool GetWindowPlacement(IntPtr hwnd, WINDOWPLACEMENT& ptr);
    internal static bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);
    public static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, UInt32 uFlags);
    internal static bool SetForegroundWindow(IntPtr hWnd);
    internal static IntPtr GetDesktopWindow();
    internal static UInt32 RegisterWindowMessage(string messageString);
    internal static bool GetWindowRect(IntPtr hWnd, RECT& lpRect);
    internal static IntPtr CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    internal static int SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool redraw);
    internal static IntPtr GetAncestor(IntPtr hwnd, GetAncestorFlag gaFlags);
    private static bool OpenProcessToken(IntPtr processHandle, UInt32 desiredAccess, IntPtr& tokenHandle);
    private static bool GetTokenInformation(IntPtr tokenHandle, UInt32 tokenInformationClass, UInt32& tokenInformation, UInt32 tokenInformationLength, UInt32& returnLength);
    internal static bool IsProcessElevated(UInt32 processId);
    internal static bool IsProcessElevated(IntPtr hwnd);
    internal static IntPtr GetParent(IntPtr hwnd);
    internal static bool IsIconic(IntPtr hWnd);
    internal static bool IsWindowVisible(IntPtr hWnd);
    internal static bool IsWindowEnabled(IntPtr hWnd);
    internal static bool IsZoomed(IntPtr hWnd);
    internal static IntPtr SendMessageTimeout(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam, SendMessageTimeoutFlags fuFlags, UInt32 uTimeout, IntPtr& lpdwResult);
    internal static IntPtr SendMessage(IntPtr hWnd, UInt32 wMsg, IntPtr wParam, StringBuilder builder);
    internal static bool EnumChildWindows(IntPtr hwndParent, EnumWindowsProc lpEnumFunc, IntPtr& lParam);
    internal static IntPtr SetWinEventHook(AccessibleEvents eventMin, AccessibleEvents eventMax, IntPtr eventHookAssemblyHandle, WinEventProc eventHookHandle, UInt32 processId, UInt32 threadId, SetWinEventHookParameter parameterFlags);
    internal static bool UnhookWinEvent(IntPtr eventHookHandle);
    internal static IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, UInt32 dwFlags);
    internal static bool FreeLibrary(IntPtr hModule);
    internal static int LoadString(IntPtr hInstance, UInt32 uID, StringBuilder lpBuffer, int nBufferMax);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2205:UseManagedEquivalentsOfWin32Api")]
public static ushort GetUserDefaultUILanguage();
    [SuppressMessageAttribute("Microsoft.Portability", "CA1901:PInvokeDeclarationsShouldBePortable")]
internal static IntPtr FindResource(IntPtr hModule, UInt32 lpName, UInt32 lpType);
    internal static IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);
    internal static UInt32 SizeofResource(IntPtr hModule, IntPtr hResource);
    internal static bool CloseHandle(IntPtr hObject);
    internal static SafeHandle OpenEvent(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName);
    internal static bool SetEvent(SafeHandle hEvent);
    internal static bool ResetEvent(SafeHandle hEvent);
    internal static int AccessibleObjectFromWindow(IntPtr hWnd, int dwObjectID, Guid& riid, IAccessible& pAcc);
    internal static int AccessibleObjectFromEvent(IntPtr windowHandle, int objectID, int childID, IAccessible& accessibleObject, Object& childObject);
    internal static IntPtr IELaunchURL(string url, ProcessInformation& pinfo, IntPtr ptr);
    internal static object CoCreateInstance(Guid rclsid, object pUnkOuter, CLSCTX dwClsContext, Guid riid);
    internal static bool GetGUIThreadInfo(UInt32 idThread, GUITHREADINFO& lpgui);
    internal static bool EnumWindows(EnumWindowsProc callBack, IntPtr param);
    private static bool IsWow64Process(IntPtr hProcess, Boolean& lpSystemInfo);
    internal static void GetNativeSystemInfo(SYSTEM_INFO& lpSystemInfo);
    internal static bool Wow64DisableWow64FsRedirection(IntPtr& oldValue);
    internal static bool Wow64RevertWow64FsRedirection(IntPtr oldValue);
    public static int DRMIsWindowProtected(IntPtr windowHandle, Boolean& isProtected);
    internal static bool IsProcess64Bit(UInt32 processId);
    internal static IntPtr SetActiveWindow(IntPtr hWnd);
    internal static bool get_Is64BitOperatingSystem();
    internal static IntPtr WindowFromAccessibleObject(IAccessible pAcc);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1806")]
internal static UInt32 GetWindowProcessId(IntPtr windowHandle);
    internal static IntPtr GetClassLongPtr(IntPtr windowHandle, int nIndex);
    internal static IntPtr SetWindowLongPtr(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    internal static string GetWindowText(IntPtr winHandle);
    private static KeyStates GetKeyState(Keys virtualKeyCode);
    internal static bool IsKeyStateDown(Keys virtualKeyCode);
    internal static UInt32 MapVirtualKey(Keys keys, VirtualKeyMapType mapType);
    internal static IAccessible AccessibleObjectFromWindow(IntPtr windowHandle, int objectId);
    internal static IAccessible AccessibleObjectFromWindow(IntPtr windowHandle);
    internal static IAccessible AccessibleClientObjectFromWindow(IntPtr windowHandle);
    internal static string GetClassName(IntPtr windowHandle);
    internal static T GetDocumentFromWindowHandle(IntPtr windowHandleOfIE);
    private static KeyStates ConvertToKeyStates(short keyStateMask);
    internal static bool IsWpfClassName(IntPtr hWnd);
    public static int GetWindowLong(IntPtr hWnd, GWLParameter index);
    public static bool IsWindowResponding(IntPtr windowHandle);
    internal static int SetWindowLong(IntPtr windowHandle, GWLParameter nIndex, int dwNewLong);
    internal static Image GetCurrenProcessIcon();
    internal static Image GetCurrenProcessIconAsIs();
    private static UInt32 WindowFromAccessibleObject(IAccessible pAcc, IntPtr& hWnd);
    private static short GetKeyState(int nVirtKey);
    private static int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);
    private static UInt32 MapVirtualKey(UInt32 code, UInt32 mapType);
    internal static UInt32 MapVirtualKeyEx(UInt32 uCode, UInt32 uMapType, IntPtr dwhkl);
    private static int GetWindowText(IntPtr windowHandle, StringBuilder windowText, int maxCharCount);
    private static object ObjectFromLresult(IntPtr msgcallResult, Guid refGuid, IntPtr resultRef);
    private static int SetWindowLong32(HandleRef hWnd, int nIndex, int dwNewLong);
    [SuppressMessageAttribute("Microsoft.Interoperability", "CA1400:PInvokeEntryPointsShouldExist")]
private static IntPtr SetWindowLongPtr64(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    private static int GetClassLongPtr32(IntPtr hWnd, int nIndex);
    private static int GetWindowLong32(IntPtr windowHandle, GWLParameter nIndex);
    private static IntPtr GetWindowLongPtr64(IntPtr windowHandle, GWLParameter nIndex);
    [SuppressMessageAttribute("Microsoft.Interoperability", "CA1400:PInvokeEntryPointsShouldExist")]
private static IntPtr GetClassLongPtr64(IntPtr hWnd, int nIndex);
    public static bool RegisterHotKey(IntPtr hWnd, int id, ModifierKeys fsModifiers, Keys vk);
    public static bool UnregisterHotKey(IntPtr hWnd, int id);
    public static ushort GlobalAddAtom(string lpString);
    public static ushort GlobalDeleteAtom(ushort atom);
    private static int SetWindowLong32(IntPtr windowHandle, GWLParameter nIndex, int dwNewLong);
    [SuppressMessageAttribute("Microsoft.Interoperability", "CA1400:PInvokeEntryPointsShouldExist")]
private static IntPtr SetWindowLongPtr64(IntPtr windowHandle, GWLParameter nIndex, IntPtr dwNewLong);
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.OrderOfInvoke : object {
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
private static Dictionary`2<IUITechnologyElement, int> orderMap;
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
private static Dictionary`2<IntPtr, int> orderMapPlayback;
    private static bool isEnabled;
    private static bool needsReset;
    private static Regex regExOrder;
    internal static bool IsEnabled { get; internal set; }
    internal static bool NeedsReset { get; }
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
public static Dictionary`2<IUITechnologyElement, int> OrderMap { get; }
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
public static Dictionary`2<IntPtr, int> OrderMapPlayback { get; }
    private static OrderOfInvoke();
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
public static void Initialize();
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
public static void ClearCache();
    internal static bool get_IsEnabled();
    internal static void set_IsEnabled(bool value);
    internal static bool get_NeedsReset();
    internal static int ParseQueryId(string queryId, String& fixedQid);
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
internal static int GetOrderOfInvocation(IUITechnologyElement element, AndCondition elementQueryElement);
    public static Dictionary`2<IUITechnologyElement, int> get_OrderMap();
    public static Dictionary`2<IntPtr, int> get_OrderMapPlayback();
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
internal static void SetOrderMap(IUITechnologyElement element, int value);
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
internal static void SetOrderMapPlayback(IntPtr handle, int value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.PlaybackCanceledException : UITestException {
    public PlaybackCanceledException(string message);
    public PlaybackCanceledException(string message, Exception innerException);
    protected PlaybackCanceledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.PlaybackFailureException : UITestException {
    private string action;
    private string objectName;
    public string ObjectName { get; public set; }
    public string Action { get; public set; }
    protected string DefaultMessage { get; }
    public PlaybackFailureException(string message);
    public PlaybackFailureException(string message, Exception innerException);
    public PlaybackFailureException(string message, string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    public PlaybackFailureException(string objectName, string actionName, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    protected PlaybackFailureException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ObjectName();
    public void set_ObjectName(string value);
    public string get_Action();
    public void set_Action(string value);
    protected virtual string get_DefaultMessage();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.PluginRegistration : Enum {
    public int value__;
    public static PluginRegistration NoInitialization;
    public static PluginRegistration Unregistered;
    public static PluginRegistration Registered;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.PluginType : Enum {
    public int value__;
    public static PluginType Managed;
    public static PluginType Unmanaged;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.PointerBuffer : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[FlagsAttribute]
[SuppressMessageAttribute("Microsoft.Naming", "CA1714")]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ProgrammaticActionOption : Enum {
    public int value__;
    public static ProgrammaticActionOption None;
    public static ProgrammaticActionOption DefaultAction;
    public static ProgrammaticActionOption TakeFocus;
    public static ProgrammaticActionOption TakeSelection;
    public static ProgrammaticActionOption RemoveSelection;
    public static ProgrammaticActionOption Expand;
    public static ProgrammaticActionOption Collapse;
    public static ProgrammaticActionOption MakeVisibleAndSelect;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.PropertyBag`1 : Dictionary`2<TProperty, object> {
    private string propertyBagName;
    public PropertyBag`1(string propertBagName);
    public void AddProperty(TProperty property, object propertyValue, bool throwIfValueIsNull);
    public TValue GetProperty(TProperty property);
    private T ConvertToType(object value, bool throwIfValueIsNull);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.PropertyCondition : QueryCondition {
    private string propertyName;
    private string parameterName;
    private object propertyValue;
    private PropertyConditionOperator propertyOperator;
    private static Byte[] category;
    internal static int MaxPropertyValueLength;
    private static string XmlTextEscapeString;
    private static string EqualToOperatorString;
    private static string ContainsOperatorString;
    private static char PropertyValueStartEndMarker;
    private static char PropertyMetaCharacterEscapeChar;
    private static Regex PropertyRegex;
    [XmlAttributeAttribute]
public string PropertyName { get; public set; }
    [XmlAttributeAttribute]
public string ParameterName { get; public set; }
    [XmlIgnoreAttribute]
public object Value { get; public set; }
    [XmlTextAttribute]
public string ValueWrapper { get; public set; }
    [XmlIgnoreAttribute]
public PropertyConditionOperator PropertyOperator { get; public set; }
    [XmlAttributeAttribute]
public string PropertyOperatorWrapper { get; public set; }
    private static Byte[] Category { get; }
    public PropertyCondition(string name, object value);
    public PropertyCondition(string name, object value, PropertyConditionOperator op);
    private static PropertyCondition();
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public string get_ParameterName();
    public void set_ParameterName(string value);
    public object get_Value();
    public void set_Value(object value);
    public string get_ValueWrapper();
    public void set_ValueWrapper(string value);
    public PropertyConditionOperator get_PropertyOperator();
    public void set_PropertyOperator(PropertyConditionOperator value);
    public string get_PropertyOperatorWrapper();
    public void set_PropertyOperatorWrapper(string value);
    public virtual bool Match(IUITechnologyElement element);
    public virtual object GetPropertyValue(string nameOfProperty);
    public virtual void BindParameters(ValueMap valueMap);
    public virtual bool ParameterizeProperty(string nameOfProperty, string nameOfParameter);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static string Escape(string input);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static string Unescape(string input);
    public static PropertyCondition Parse(string queryElement);
    internal static List`1<IQueryCondition> ParseList(string queryElement, string conditionDelimiter, Regex conditionDelimiterRegex);
    private static Byte[] get_Category();
    private static bool IsMetachar(char ch);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.PropertyConditionOperator : Enum {
    public int value__;
    public static PropertyConditionOperator EqualTo;
    public static PropertyConditionOperator Contains;
}
[XmlIncludeAttribute("Microsoft.VisualStudio.TestTools.UITest.Extension.AndCondition")]
[XmlIncludeAttribute("Microsoft.VisualStudio.TestTools.UITest.Extension.FilterCondition")]
[XmlIncludeAttribute("Microsoft.VisualStudio.TestTools.UITest.Extension.PropertyCondition")]
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.QueryCondition : object {
    private IQueryCondition[] queryConditions;
    private string name;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlIgnoreAttribute]
public IQueryCondition[] Conditions { get; public set; }
    [XmlElementAttribute]
[SuppressMessageAttribute("Microsoft.Performance", "CA1819")]
public QueryCondition[] ConditionsWrapper { get; public set; }
    protected QueryCondition(IQueryCondition[] conditions);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IQueryCondition[] get_Conditions();
    public sealed virtual void set_Conditions(IQueryCondition[] value);
    public QueryCondition[] get_ConditionsWrapper();
    public void set_ConditionsWrapper(QueryCondition[] value);
    public abstract virtual bool Match(IUITechnologyElement element);
    public virtual object GetPropertyValue(string nameOfProperty);
    public virtual void BindParameters(ValueMap valueMap);
    public virtual bool ParameterizeProperty(string nameOfProperty, string nameOfParameter);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public abstract virtual string ToString();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.QueryElement : object {
    private QueryCondition condition;
    private IUITechnologyElement ancestorNode;
    private String[] searchConfigurations;
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public String[] SearchConfigurations { get; public set; }
    public IUITechnologyElement Ancestor { get; public set; }
    public IQueryCondition Condition { get; public set; }
    public sealed virtual String[] get_SearchConfigurations();
    public sealed virtual void set_SearchConfigurations(String[] value);
    public sealed virtual IUITechnologyElement get_Ancestor();
    public sealed virtual void set_Ancestor(IUITechnologyElement value);
    public sealed virtual IQueryCondition get_Condition();
    public sealed virtual void set_Condition(IQueryCondition value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Resources.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionException { get; }
    internal static string Common_EqtTraceReachedMaxEventLogEntries { get; }
    internal static string ControlBlockedByCurrentProcess { get; }
    internal static string ControlNotFoundException { get; }
    internal static string ControlNotFoundWithQidOrCondition { get; }
    internal static string FailedToSendMessage { get; }
    internal static string InvalidDateRange { get; }
    internal static string InvalidIUnknownObject { get; }
    internal static string InvalidKeySpecified { get; }
    internal static string MultipleControlsFoundException { get; }
    internal static string Utility_IgnoredThrownException { get; }
    internal static string Utility_ProcessNameWhenCannotGetIt { get; }
    internal static string WindowNotFoundException { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionException();
    internal static string get_Common_EqtTraceReachedMaxEventLogEntries();
    internal static string get_ControlBlockedByCurrentProcess();
    internal static string get_ControlNotFoundException();
    internal static string get_ControlNotFoundWithQidOrCondition();
    internal static string get_FailedToSendMessage();
    internal static string get_InvalidDateRange();
    internal static string get_InvalidIUnknownObject();
    internal static string get_InvalidKeySpecified();
    internal static string get_MultipleControlsFoundException();
    internal static string get_Utility_IgnoredThrownException();
    internal static string get_Utility_ProcessNameWhenCannotGetIt();
    internal static string get_WindowNotFoundException();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.RethrowException : Exception {
    [CompilerGeneratedAttribute]
private Exception <InternalException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public Exception InternalException { get; public set; }
    public bool IsNotSupported { get; public set; }
    public Type DataType { get; public set; }
    public object Value { get; public set; }
    public RethrowException(Exception ex, bool isNotSupported);
    [CompilerGeneratedAttribute]
public Exception get_InternalException();
    [CompilerGeneratedAttribute]
public void set_InternalException(Exception value);
    [CompilerGeneratedAttribute]
public bool get_IsNotSupported();
    [CompilerGeneratedAttribute]
public void set_IsNotSupported(bool value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(Type value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.RightToLeftKind : Enum {
    public int value__;
    public static RightToLeftKind Text;
    public static RightToLeftKind Layout;
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ScrollAmount : Enum {
    public int value__;
    public static ScrollAmount NoAmount;
    public static ScrollAmount ForwardByLargeAmount;
    public static ScrollAmount BackByLargeAmount;
    public static ScrollAmount ForwardBySmallAmount;
    public static ScrollAmount BackBySmallAmount;
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ScrollDirection : Enum {
    public int value__;
    public static ScrollDirection VerticalScroll;
    public static ScrollDirection HorizontalScroll;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.ScrollOptions : Enum {
    public int value__;
    public static ScrollOptions None;
    public static ScrollOptions UseProgrammatic;
    public static ScrollOptions UseMouseWheel;
    public static ScrollOptions UseScrollBar;
    public static ScrollOptions UseClickOnScrollBar;
    public static ScrollOptions UseKeyboard;
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.SearchConfiguration : object {
    public static string VisibleOnly;
    public static string DisambiguateChild;
    public static string ExpandWhileSearching;
    public static string NextSibling;
    public static string AlwaysSearch;
    private static SearchConfiguration();
    public static bool ConfigurationExists(IEnumerable`1<string> configList, string configNameToSearch);
    public static bool AreEqual(String[] configList, String[] configListToMatch);
    public static bool NameEquals(string configName1, string configName2);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.SendInputHelper : object {
    public static int INPUT_KEYBOARD;
    public static int KEYEVENTF_EXTENDEDKEY;
    public static int KEYEVENTF_KEYUP;
    public static int KEYEVENTF_SCANCODE;
    internal static int SendInput(int nInputs, INPUT& mi, int cbSize);
    internal static int MapVirtualKey(int nVirtKey, int nMapType);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.SetValueAsComboBoxOptions : Enum {
    public int value__;
    public static SetValueAsComboBoxOptions None;
    public static SetValueAsComboBoxOptions UseLeftDropDownButton;
    public static SetValueAsComboBoxOptions UseSelect;
    public static SetValueAsComboBoxOptions UseSetAsEdit;
    public static SetValueAsComboBoxOptions DoNotVerifySendKeys;
    public static SetValueAsComboBoxOptions DoNotVerifyMirrorLanguage;
    public static SetValueAsComboBoxOptions UseQueryId;
    public static SetValueAsComboBoxOptions PressEnterAfterTyping;
    public static SetValueAsComboBoxOptions ExpandProgrammatically;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.SetValueAsEditBoxOptions : Enum {
    public int value__;
    public static SetValueAsEditBoxOptions None;
    public static SetValueAsEditBoxOptions DeleteContent;
    public static SetValueAsEditBoxOptions UseProgrammatic;
    public static SetValueAsEditBoxOptions UseWindowMessage;
    public static SetValueAsEditBoxOptions UseCopyPaste;
    public static SetValueAsEditBoxOptions UseSendKeys;
    public static SetValueAsEditBoxOptions DoNotVerify;
    public static SetValueAsEditBoxOptions All;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.SharedMemoryManager : object {
    private SafeMemoryMappedFileHandle SharedMemMapFileHandle;
    private PointerBuffer SharedMemBuffer;
    private string SharedMemName;
    private UInt32 SharedMemBufferSize;
    internal bool Create(string sharedMemoryName, UInt32 bufferSize);
    internal bool OpenExisting(string sharedMemoryName, UInt32 bufferSize);
    internal void Destroy();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal bool WriteData(T data);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal bool GetData(T& data);
    internal bool IsMemoryInitialized();
    private static SafeMemoryMappedFileHandle OpenFileMapping(FileMapAccess DesiredAccess, bool bInheritHandle, string lpName);
    private static SafeMemoryMappedFileHandle CreateFileMapping(IntPtr hFile, IntPtr lpFileMappingAttributes, FileMapProtection flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    private static PointerBuffer MapViewOfFile(SafeMemoryMappedFileHandle hFileMapping, FileMapAccess dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, UIntPtr dwNumberOfBytesToMap);
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
internal static bool UnmapViewOfFile(IntPtr lpBaseAddress);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.SharedMemoryUtility : object {
    internal static EventHandle CreateEventEx(IntPtr lpEventAttributes, string lpName, EventCreateFlag dwFlags, EventAccess dwDesiredAccess);
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
internal static bool CloseHandle(IntPtr hObject);
    internal static bool SetEvent(EventHandle hEvent);
    internal static bool ResetEvent(EventHandle hEvent);
    internal static int WaitForSingleObject(EventHandle handle, int milliseconds);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.SimpleTimer : object {
    private string name;
    private MeasurementBlock measurementBlock;
    private long threshold;
    private bool disposed;
    private static ConcurrentDictionary`2<string, MeasurementBlock> measurementBlocks;
    public SimpleTimer(string timerName);
    public SimpleTimer(string timerName, long thresholdInMilliseconds);
    private static SimpleTimer();
    public void Step();
    public sealed virtual void Dispose();
    public void StopAndLog();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.SmartMatchOptions : Enum {
    public int value__;
    public static SmartMatchOptions None;
    public static SmartMatchOptions TopLevelWindow;
    public static SmartMatchOptions Control;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.State.AccessibleStates : Enum {
    public int value__;
    public static AccessibleStates None;
    public static AccessibleStates Unavailable;
    public static AccessibleStates Selected;
    public static AccessibleStates Focused;
    public static AccessibleStates Pressed;
    public static AccessibleStates Checked;
    public static AccessibleStates Mixed;
    public static AccessibleStates Indeterminate;
    public static AccessibleStates ReadOnly;
    public static AccessibleStates HotTracked;
    public static AccessibleStates Default;
    public static AccessibleStates Expanded;
    public static AccessibleStates Collapsed;
    public static AccessibleStates Busy;
    public static AccessibleStates Floating;
    public static AccessibleStates Marqueed;
    public static AccessibleStates Animated;
    public static AccessibleStates Invisible;
    public static AccessibleStates Offscreen;
    public static AccessibleStates Sizeable;
    public static AccessibleStates Moveable;
    public static AccessibleStates SelfVoicing;
    public static AccessibleStates Focusable;
    public static AccessibleStates Selectable;
    public static AccessibleStates Linked;
    public static AccessibleStates Traversed;
    public static AccessibleStates MultiSelectable;
    public static AccessibleStates ExtSelectable;
    public static AccessibleStates AlertLow;
    public static AccessibleStates AlertMedium;
    public static AccessibleStates AlertHigh;
    public static AccessibleStates Protected;
    public static AccessibleStates HasPopup;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.StressMonitor : object {
    private static StressMonitor _self;
    private string _eventName;
    private EventWaitHandle _event;
    private Thread _thread;
    private StressMonitor(string eventName, bool owner);
    public StressMonitor(string eventName);
    public static void StartMonitoring(string name);
    [ConditionalAttribute("DEBUG")]
private static void InternalStartMonitoring(string name);
    public void Set();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
private static void ThreadMonitor(object e);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.StringKeys : object {
    public static StringComparer Comparer;
    public static StringComparison Comparison;
    public static string LButton;
    public static string RButton;
    public static string Cancel;
    public static string MButton;
    public static string XButton1;
    public static string XButton2;
    public static string Back;
    public static string Tab;
    public static string LineFeed;
    public static string Clear;
    public static string Enter;
    public static string ShiftKey;
    public static string ControlKey;
    public static string Menu;
    public static string Pause;
    public static string CapsLock;
    public static string KanaMode;
    public static string HangulMode;
    public static string JunjaMode;
    public static string FinalMode;
    public static string HanjaMode;
    public static string KanjiMode;
    public static string Escape;
    public static string IMEConvert;
    public static string IMENonconvert;
    public static string IMEAccept;
    public static string IMEModeChange;
    public static string Space;
    public static string SpaceVirtualKey;
    public static string PageUp;
    public static string PageDown;
    public static string End;
    public static string Home;
    public static string Left;
    public static string Up;
    public static string Right;
    public static string Down;
    public static string Select;
    public static string Print;
    public static string Execute;
    public static string PrintScreen;
    public static string Insert;
    public static string Delete;
    public static string Help;
    public static string D0;
    public static string D1;
    public static string D2;
    public static string D3;
    public static string D4;
    public static string D5;
    public static string D6;
    public static string D7;
    public static string D8;
    public static string D9;
    public static string A;
    public static string B;
    public static string C;
    public static string D;
    public static string E;
    public static string F;
    public static string G;
    public static string H;
    public static string I;
    public static string J;
    public static string K;
    public static string L;
    public static string M;
    public static string N;
    public static string O;
    public static string P;
    public static string Q;
    public static string R;
    public static string S;
    public static string T;
    public static string U;
    public static string V;
    public static string W;
    public static string X;
    public static string Y;
    public static string Z;
    public static string LWin;
    public static string RWin;
    public static string Apps;
    public static string Sleep;
    public static string NumPad0;
    public static string NumPad1;
    public static string NumPad2;
    public static string NumPad3;
    public static string NumPad4;
    public static string NumPad5;
    public static string NumPad6;
    public static string NumPad7;
    public static string NumPad8;
    public static string NumPad9;
    public static string Multiply;
    public static string Add;
    public static string Separator;
    public static string Subtract;
    public static string Decimal;
    public static string Divide;
    public static string F1;
    public static string F2;
    public static string F3;
    public static string F4;
    public static string F5;
    public static string F6;
    public static string F7;
    public static string F8;
    public static string F9;
    public static string F10;
    public static string F11;
    public static string F12;
    public static string F13;
    public static string F14;
    public static string F15;
    public static string F16;
    public static string F17;
    public static string F18;
    public static string F19;
    public static string F20;
    public static string F21;
    public static string F22;
    public static string F23;
    public static string F24;
    public static string NumLock;
    public static string Scroll;
    public static string LShiftKey;
    public static string RShiftKey;
    public static string LControlKey;
    public static string RControlKey;
    public static string LMenu;
    public static string RMenu;
    public static string BrowserBack;
    public static string BrowserForward;
    public static string BrowserRefresh;
    public static string BrowserStop;
    public static string BrowserSearch;
    public static string BrowserFavorites;
    public static string BrowserHome;
    public static string VolumeMute;
    public static string VolumeDown;
    public static string VolumeUp;
    public static string MediaNextTrack;
    public static string MediaPreviousTrack;
    public static string MediaStop;
    public static string MediaPlayPause;
    public static string LaunchMail;
    public static string SelectMedia;
    public static string LaunchApplication1;
    public static string LaunchApplication2;
    public static string OemSemicolon;
    public static string Oemplus;
    public static string Oemcomma;
    public static string OemMinus;
    public static string OemPeriod;
    public static string OemQuestion;
    public static string Oemtilde;
    public static string OemOpenBrackets;
    public static string OemPipe;
    public static string OemCloseBrackets;
    public static string OemQuotes;
    public static string OemBackslash;
    public static string ProcessKey;
    public static string Packet;
    public static string Attn;
    public static string Crsel;
    public static string Exsel;
    public static string EraseEof;
    public static string Play;
    public static string Zoom;
    public static string NoName;
    public static string Pa1;
    public static string OemClear;
    private static Dictionary`2<Keys, string> mapOfKeysToString;
    private static StringKeys();
    public static bool IsValidKey(Keys key);
    public static string KeyToText(Keys key);
    private static Dictionary`2<Keys, string> InitializeKeysToStringMap();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.TechnologyNames : object {
    internal static string WindowTechnologyName;
    internal static string UiaTechnologyName;
    internal static string WebTechnologyName;
    internal static string MsaaTechnologyName;
    internal static string SilverlightTechnologyName;
    internal static string UiaWidgetTechnologyName;
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.TechnologyNotSupportedException : UITestException {
    private static string helpText;
    private static string HelpLinkUrl;
    protected string DefaultMessage { get; }
    public TechnologyNotSupportedException(string message);
    public TechnologyNotSupportedException(string message, Exception innerException);
    protected TechnologyNotSupportedException(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
    internal static string AppendMessageWithStandardHelp(string message);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.UISynchronizationOptions : Enum {
    public int value__;
    public static UISynchronizationOptions None;
    public static UISynchronizationOptions DisableMouseSynchronization;
    public static UISynchronizationOptions DisableKeyboardSynchronization;
}
[GuidAttribute("630624E3-24CA-4059-8D78-DC5E2710F945")]
[ComVisibleAttribute("True")]
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.UITechnologyElement : object {
    public static AccessibleStates AllAccessibleStates;
    private int supportLevel;
    private IList`1<string> windowTitles;
    private PropertyBag`1<UITechnologyElementOption> options;
    public int ChildIndex { get; }
    public bool IsLeafNode { get; }
    public UITechnologyManager TechnologyManager { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string TechnologyName { get; }
    public bool IsPassword { get; }
    public string Name { get; }
    public IntPtr WindowHandle { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase")]
public IQueryElement QueryId { get; }
    public string Value { get; public set; }
    public object NativeElement { get; }
    public string FriendlyName { get; }
    public IUITechnologyElement SwitchingElement { get; public set; }
    public bool IsTreeSwitchingRequired { get; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public AutomationElement AutomationElement { get; }
    public IList`1<string> WindowTitles { get; }
    public int SupportLevel { get; public set; }
    public abstract virtual int get_ChildIndex();
    public abstract virtual bool get_IsLeafNode();
    public abstract virtual UITechnologyManager get_TechnologyManager();
    public abstract virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public abstract virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public abstract virtual string get_ClassName();
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public abstract virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public abstract virtual bool Equals(IUITechnologyElement element);
    public abstract virtual string get_ControlTypeName();
    public abstract virtual string get_TechnologyName();
    public abstract virtual bool get_IsPassword();
    public abstract virtual string get_Name();
    public abstract virtual IntPtr get_WindowHandle();
    public abstract virtual IQueryElement get_QueryId();
    public abstract virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual object get_NativeElement();
    public abstract virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    [SuppressMessageAttribute("Microsoft.Design", "CA1045:DoNotPassTypesByReference")]
public abstract virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outpointX, Int32& outpointY);
    public abstract virtual object GetPropertyValue(string propertyName);
    public abstract virtual void SetFocus();
    public abstract virtual void WaitForReady();
    public abstract virtual string get_FriendlyName();
    public abstract virtual IUITechnologyElement get_SwitchingElement();
    public abstract virtual void set_SwitchingElement(IUITechnologyElement value);
    public abstract virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public abstract virtual bool InitializeProgrammaticScroll();
    public abstract virtual void ScrollProgrammatically(ScrollDirection scrollDirection, ScrollAmount scrollAmount);
    public abstract virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public abstract virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public abstract virtual bool get_IsTreeSwitchingRequired();
    public abstract virtual UITechnologyElement get_TopLevelElement();
    public abstract virtual void set_TopLevelElement(UITechnologyElement value);
    public abstract virtual void CacheProperties();
    public virtual void PerformMouseAction(string action);
    public virtual void PerformKeyboardAction(string str);
    public virtual object GetOption(UITechnologyElementOption technologyElementOption);
    public virtual AutomationElement get_AutomationElement();
    public virtual void SetOption(UITechnologyElementOption technologyElementOption, object optionValue);
    public virtual IList`1<string> get_WindowTitles();
    public virtual int get_SupportLevel();
    public virtual void set_SupportLevel(int value);
    public virtual Nullable`1<bool> IsInteractable();
    public virtual void SetPropertyValue(string propertyName, object propertyValue);
    internal void CopyOptionsTo(IUITechnologyElement element);
    internal static object GetTechnologyElementOption(IUITechnologyElement element, UITechnologyElementOption option);
    internal static bool IsState(IUITechnologyElement element, AccessibleStates state);
    internal static bool IsAnyState(IUITechnologyElement element, AccessibleStates[] states);
    internal static UITechnologyElement Cast(IUITechnologyElement element);
}
[ComVisibleAttribute("True")]
[GuidAttribute("5BCC3B77-DC67-4353-9786-596C367AFFA1")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.UITechnologyElementOption : Enum {
    public int value__;
    public static UITechnologyElementOption None;
    public static UITechnologyElementOption SetMousePositionInstantly;
    public static UITechnologyElementOption UseWaitForReadyLevelForElementReady;
    public static UITechnologyElementOption PerformEnsureVisible;
    public static UITechnologyElementOption TrustGetValue;
    public static UITechnologyElementOption TrustGetState;
    public static UITechnologyElementOption UseSetFocusForEnsureVisible;
    public static UITechnologyElementOption UISynchronizationOptions;
    public static UITechnologyElementOption WaitForReadyOptions;
    public static UITechnologyElementOption GetClickableRectangle;
    public static UITechnologyElementOption GetClickablePointFrom;
    public static UITechnologyElementOption SetValueAsComboBoxOptions;
    public static UITechnologyElementOption SetValueAsEditBoxOptions;
    public static UITechnologyElementOption ScrollOptions;
    public static UITechnologyElementOption ExpandCollapseOptions;
}
[GuidAttribute("CAF9DAD2-AA2F-47ad-953A-C4596EB6A3E1")]
[ComVisibleAttribute("True")]
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.UITechnologyManager : object {
    private PropertyBag`1<UITechnologyManagerProperty> properties;
    public string TechnologyName { get; }
    public abstract virtual string get_TechnologyName();
    public abstract virtual void StartSession(bool recordingSession);
    public abstract virtual void StopSession();
    public abstract virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    [ComVisibleAttribute("True")]
public abstract virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public abstract virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public abstract virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetElementFromAutomationElement(AutomationElement element, AutomationElement ceilingElement);
    public abstract virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    public abstract virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    public abstract virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    public abstract virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    public virtual IUITechnologyElement GetFocusedElement(AutomationElement ceilingElement);
    public abstract virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    public abstract virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public abstract virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public abstract virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
public abstract virtual ILastInvocationInfo GetLastInvocationInfo();
    public abstract virtual void CancelStep();
    public abstract virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    public abstract virtual int GetControlSupportLevel(IntPtr windowHandle);
    public virtual int GetControlSupportLevel(AutomationElement element);
    public virtual object GetTechnologyManagerProperty(UITechnologyManagerProperty propertyName);
    public virtual void SetTechnologyManagerProperty(UITechnologyManagerProperty propertyName, object propertyValue);
    internal virtual UITechnologyElement GetRootElement();
    public abstract virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public abstract virtual void ProcessMouseEnter(IntPtr handle);
    internal T GetTechnologyManagerProperty(UITechnologyManagerProperty propertyName);
    internal static bool AreEqual(UITechnologyManager manager1, UITechnologyManager manager2);
    internal static bool AreEqual(string technologyName1, string technologyName2);
    internal static T GetTechnologyManagerProperty(IUITechnologyManager techManager, UITechnologyManagerProperty property);
    private int GetWindowedAncestor(AutomationElement element);
}
[ComVisibleAttribute("True")]
[GuidAttribute("871588A7-4DD6-46B6-8C59-055DA66B5819")]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.UITechnologyManagerProperty : Enum {
    public int value__;
    public static UITechnologyManagerProperty None;
    public static UITechnologyManagerProperty SearchSupported;
    public static UITechnologyManagerProperty ContainerScrollingSupported;
    public static UITechnologyManagerProperty WaitForReadyTimeout;
    public static UITechnologyManagerProperty SearchTimeout;
    public static UITechnologyManagerProperty SmartMatchOptions;
    public static UITechnologyManagerProperty ExactQueryIdMatch;
    public static UITechnologyManagerProperty WaitForReadyLevel;
    public static UITechnologyManagerProperty NumberOfSearchRetriesForFailFast;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public static UITechnologyManagerProperty WindowLessTreeSwitchingSupported;
    public static UITechnologyManagerProperty DoNotGenerateVisibleOnlySearchConfiguration;
    public static UITechnologyManagerProperty FilterPropertiesForSearchSupported;
    public static UITechnologyManagerProperty NavigationTimeout;
    public static UITechnologyManagerProperty MergeSingleSessionObjects;
}
[GuidAttribute("40C532AC-06B4-412D-8D48-F11804C7F9DC")]
[ComVisibleAttribute("True")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestActionLogEntry : object {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Entry <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControlType>k__BackingField;
    private List`1<ContextEntry> context;
    public string Format { get; public set; }
    public string Action { get; public set; }
    public Entry Value { get; public set; }
    public string Target { get; public set; }
    public string ControlType { get; public set; }
    [XmlArrayAttribute]
public List`1<ContextEntry> Context { get; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public Entry get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(Entry value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_ControlType();
    [CompilerGeneratedAttribute]
public void set_ControlType(string value);
    public List`1<ContextEntry> get_Context();
    public virtual string ToString();
    internal string GetPartialActionLogString();
    internal static string GetLocalizedString(string value, bool hasNoFriendlyName);
    internal static string GetLocalizedControlType(string controlTypeActual);
    [CompilerGeneratedAttribute]
private string <ToString>b__23_0(Match match);
    [CompilerGeneratedAttribute]
private string <GetPartialActionLogString>b__24_0(Match match);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestCommonNames : object {
    internal static string ImmersiveAppWindowClassName;
    internal static string ImmersiveAppTitleFrameWindowClassName;
    private static UITestCommonNames();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestControlInvalidActionException : UITestException {
    public UITestControlInvalidActionException(string message);
    public UITestControlInvalidActionException(string message, Exception innerException);
    protected UITestControlInvalidActionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestControlNotAvailableException : UITestException {
    protected string DefaultMessage { get; }
    public UITestControlNotAvailableException(string message);
    public UITestControlNotAvailableException(Exception innerException);
    public UITestControlNotAvailableException(string message, Exception innerException);
    public UITestControlNotAvailableException(string uiTestControl, object exceptionSource);
    public UITestControlNotAvailableException(string message, string uiTestControl, object exceptionSource);
    public UITestControlNotAvailableException(Exception innerException, string uiTestControl, object exceptionSource);
    public UITestControlNotAvailableException(string message, Exception innerException, string uiTestControl, object exceptionSource);
    public UITestControlNotAvailableException(IUITechnologyElement element, Exception innerException);
    protected UITestControlNotAvailableException(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestControlNotFoundException : UITestException {
    private string rootElement;
    private PropertyExpressionCollection primaryProperties;
    private PropertyExpressionCollection secondaryProperties;
    public PropertyExpressionCollection PrimaryProperties { get; }
    public PropertyExpressionCollection SecondaryProperties { get; }
    public string RootElement { get; public set; }
    protected string DefaultMessage { get; }
    public UITestControlNotFoundException(string message);
    public UITestControlNotFoundException(string message, Exception innerException);
    public UITestControlNotFoundException(string message, string uiTestControl, object exceptionSource);
    public UITestControlNotFoundException(string message, Exception innerException, string uiTestControl, object exceptionSource);
    public UITestControlNotFoundException(string message, PropertyExpressionCollection primaryProperties, PropertyExpressionCollection secondaryProperties, string root, Exception innerException, string uiTestControl, object exceptionSource);
    public UITestControlNotFoundException(PropertyExpressionCollection primaryProperties, PropertyExpressionCollection secondaryProperties, string root, Exception innerException, string uiTestControl, object exceptionSource);
    public UITestControlNotFoundException(string message, PropertyExpressionCollection primaryProperties, PropertyExpressionCollection secondaryProperties, string root, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    public UITestControlNotFoundException(PropertyExpressionCollection primaryProperties, PropertyExpressionCollection secondaryProperties, string root, Exception innerException, ILastInvocationInfo lastInfo, string uiTestControl, object exceptionSource);
    protected UITestControlNotFoundException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public PropertyExpressionCollection get_PrimaryProperties();
    public PropertyExpressionCollection get_SecondaryProperties();
    public string get_RootElement();
    public void set_RootElement(string value);
    protected virtual string get_DefaultMessage();
    private void SetHResult();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestControlNotVisibleException : PlaybackFailureException {
    protected string DefaultMessage { get; }
    public UITestControlNotVisibleException(string message);
    public UITestControlNotVisibleException(string message, Exception innerException);
    public UITestControlNotVisibleException(string message, string uiTestControl, object exceptionSource);
    public UITestControlNotVisibleException(string message, Exception innerException, string uiTestControl, object exceptionSource);
    protected UITestControlNotVisibleException(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.UITestElementKind : Enum {
    public int value__;
    public static UITestElementKind VerticalScrollBar;
    public static UITestElementKind HorizontalScrollBar;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public static UITestElementKind LineUp;
    public static UITestElementKind LineDown;
    public static UITestElementKind PageUp;
    public static UITestElementKind PageDown;
    public static UITestElementKind VerticalThumb;
    public static UITestElementKind ColumnLeft;
    public static UITestElementKind ColumnRight;
    public static UITestElementKind PageLeft;
    public static UITestElementKind PageRight;
    public static UITestElementKind HorizontalThumb;
    public static UITestElementKind Child;
    public static UITestElementKind SelectedItems;
    public static UITestElementKind ComboBoxButton;
}
[GuidAttribute("8D496D5D-6EB4-4ADA-B54C-8CB81225C4E3")]
[ComVisibleAttribute("True")]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.UITestEventType : Enum {
    public int value__;
    public static UITestEventType ValueChanged;
    public static UITestEventType KeyUp;
    public static UITestEventType KeyDown;
    public static UITestEventType MouseUp;
    public static UITestEventType MouseDown;
    public static UITestEventType Hover;
    public static UITestEventType MouseMove;
    public static UITestEventType MouseOver;
    public static UITestEventType StateChanged;
    public static UITestEventType OnFocus;
    public static UITestEventType Media;
    public static UITestEventType OrientationChanged;
    public static UITestEventType InvokedEvent;
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestException : Exception {
    [CompilerGeneratedAttribute]
private ILastInvocationInfo <ErrorInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ExceptionSource>k__BackingField;
    private bool isUserMessageSpecified;
    private static string MessageSpecifiedParameter;
    [CompilerGeneratedAttribute]
private string <UITestControlDescription>k__BackingField;
    public int HResult { get; public set; }
    public ILastInvocationInfo ErrorInfo { get; public set; }
    public string BasicMessage { get; }
    protected string DefaultMessage { get; }
    public string Message { get; }
    public object ExceptionSource { get; public set; }
    internal string UITestControlDescription { get; internal set; }
    public UITestException(string message);
    public UITestException(string message, Exception innerException);
    protected UITestException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public int get_HResult();
    public void set_HResult(int value);
    [CompilerGeneratedAttribute]
public ILastInvocationInfo get_ErrorInfo();
    [CompilerGeneratedAttribute]
public void set_ErrorInfo(ILastInvocationInfo value);
    public string get_BasicMessage();
    protected virtual string get_DefaultMessage();
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public object get_ExceptionSource();
    [CompilerGeneratedAttribute]
public void set_ExceptionSource(object value);
    [CompilerGeneratedAttribute]
internal string get_UITestControlDescription();
    [CompilerGeneratedAttribute]
internal void set_UITestControlDescription(string value);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
protected void SetHResult(UInt32 hResult);
}
public abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestExtensionPackage : object {
    public string PackageName { get; }
    public string PackageDescription { get; }
    public Version PackageVersion { get; }
    public string PackageVendor { get; }
    public Version VSVersion { get; }
    public abstract virtual string get_PackageName();
    public abstract virtual string get_PackageDescription();
    public abstract virtual Version get_PackageVersion();
    public abstract virtual string get_PackageVendor();
    public abstract virtual Version get_VSVersion();
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual void Dispose();
}
[AttributeUsageAttribute("1")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestExtensionPackageAttribute : Attribute {
    private string name;
    private Type extensionPackageType;
    public string Name { get; }
    public Type ExtensionPackageType { get; }
    public UITestExtensionPackageAttribute(string name, Type extensionPackageType);
    public string get_Name();
    public Type get_ExtensionPackageType();
}
internal abstract class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestExtensionPackageBase : UITestExtensionPackage {
    private string name;
    private string description;
    private Version version;
    private string vendor;
    private Version vsVersion;
    private Dictionary`2<Type, object> supportedServices;
    public string PackageName { get; }
    public string PackageDescription { get; }
    public Version PackageVersion { get; }
    public string PackageVendor { get; }
    public Version VSVersion { get; }
    protected UITestExtensionPackageBase(string extensionName, string extensionDescription);
    protected UITestExtensionPackageBase(string extensionName, string extensionDescription, Version extensionVersion, string vendorName, Version vsVersionSupported);
    public virtual string get_PackageName();
    public virtual string get_PackageDescription();
    public virtual Version get_PackageVersion();
    public virtual string get_PackageVendor();
    public virtual Version get_VSVersion();
    public virtual object GetService(Type serviceType);
    public virtual void Dispose();
    [SuppressMessageAttribute("Microsoft.Usage", "CA2301:EmbeddableTypesInContainersRule")]
protected void AddService(Type serviceType, object service);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestJScriptExecutionException : UITestException {
    protected string DefaultMessage { get; }
    public UITestJScriptExecutionException(string message);
    public UITestJScriptExecutionException(string message, Exception innerException);
    protected UITestJScriptExecutionException(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestMediaEventInfo : object {
    [CompilerGeneratedAttribute]
private MediaActionType <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public MediaActionType ActionType { get; public set; }
    public object Value { get; public set; }
    public UITestMediaEventInfo(MediaActionType actionType, object value);
    [CompilerGeneratedAttribute]
public MediaActionType get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(MediaActionType value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public static class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestTraceUtility : object {
    private static string logFileDirectory;
    private static string LastRunDirectory;
    private static string PreviousRunDirectory;
    private static int MaxLogDirectories;
    public static string LogFileDirectory { get; }
    public static TextWriterTraceListener StartTracing(string logFolder);
    public static TextWriterTraceListener StartTracing(string baseDirectory, string dirName);
    internal static TextWriterTraceListener StartTracing(bool useTraceListenerDirectly);
    public static TextWriterTraceListener StartTracing();
    internal static string CreateLogFolder(string traceLogFolder);
    public static string get_LogFileDirectory();
    private static void SafeIOCall(MethodInvoker ioCall);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestUtilities : object {
    internal static string InternetExplorerFrameworkId;
    internal static bool s_useManagedMSAA;
    internal static string DateFormat;
    internal static string DateTimeFormat;
    internal static bool UserInteractive;
    internal static bool IsSkipStepOn { get; }
    public static bool IsIE10OrHigher { get; }
    public static RegexOptions Compiled { get; }
    public static int IEVersion { get; }
    public static bool IsImageActionLogEnabled { get; public set; }
    public static int CurrentProcessId { get; }
    public static bool IsRemoteTestingEnabled { get; public set; }
    public static bool IsPhone { get; }
    public static bool UseManagedMSAA { get; public set; }
    public static bool IsWin7 { get; }
    public static string ProgramFiles { get; }
    public static string CommonDirectory { get; }
    internal static int CursorPositionX { get; }
    internal static int CursorPositionY { get; }
    private static UITestUtilities();
    internal static void CleanUpTempFiles();
    internal static void InitLogFiles();
    internal static bool get_IsSkipStepOn();
    internal static void InitSkipEventObject(string skipPlayBackEventName);
    internal static void SkipStep();
    internal static bool CanResetSkipStep();
    internal static void DisposeSkipEventObject();
    internal static bool HasProcessExited(object process);
    internal static void WaitForProcessExit(object process, int milliSecond);
    internal static string GetProcessMainWindowTitle(object process);
    internal static void RefreshProcess(object process);
    internal static object GetProcessById(int pid);
    internal static void CloseProcess(object process);
    internal static void KillProcess(object process);
    internal static int GetProcessId(object process);
    internal static Assembly GetTypeAssembly(Type type);
    internal static bool IsInvalidComObjectException(Exception ex);
    internal static string ConvertTo32BitString(string fileName);
    internal static bool IsProtectedWindow();
    public static bool IsDesktopWindowAndNotLegacy(IntPtr windowHandle);
    public static bool IsDesktopWindowAndNotLegacy(AutomationElement element);
    public static string GetAssemblyFileVersion(Assembly assembly);
    public static void CheckForNull(string parameter, string parameterName);
    public static void CheckForNull(IntPtr parameter, string parameterName);
    public static void CheckForNull(object parameter, string parameterName);
    public static Uri GetIEHomepage();
    [ConditionalAttribute("DEBUG")]
public static void DisableDebugUIMessages();
    [ConditionalAttribute("DEBUG")]
public static void RestoreDebugUIMessages();
    internal static bool IsWindows8OrLaterOs();
    public static string GetUniqueName(string path, string basename, string extension);
    public static string GetUniqueName(string path, string basename, string extension, int basecount);
    public static void CheckForPointWithinControlBounds(int offsetX, int offsetY, Rectangle controlBound, string message);
    public static object ConvertIUnknownToTypedObject(object iunknownObject, Type type);
    public static bool IsManagedMsaaElement(IUITechnologyElement element);
    public static bool IsNativeMsaaElement(IUITechnologyElement element);
    public static void SafeThreadJoin(Thread threadToJoin);
    public static bool SafeThreadJoin(Thread threadToJoin, int timeout, bool abort);
    internal static IDictionary`2<string, string> GetAppSettings();
    public static bool GetValue(IDictionary`2<string, string> appSettings, string key, T& value);
    internal static T ConvertToType(object value);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
internal static T ConvertToType(object value, bool throwIfValueIsNull);
    internal static bool TryConvertToType(object value, T& retValue);
    public static bool IsHigherPrivilegeProcess(IntPtr windowHandle);
    public static bool IsHigherPrivilegeProcess(int processId, String& fileName);
    public static int GetProcessIdForWindow(IntPtr windowHandle);
    public static long RoundOffMillisecondToSecond(long milliSecondValue);
    public static IAccessible GetAccessibleFromServiceProvider(IServiceProvider serviceProvider);
    public static ControlStates ConvertState(AccessibleStates accState);
    public static bool TryGetDateString(string value, String& dateString);
    public static DateTimeFormatInfo GetDateFormat(CultureInfo culture);
    public static bool TryGetDate(string value, DateTime& dateTime);
    public static void TryGetDateTimeRangeString(string value, String& minDate, String& maxDate);
    public static string GetDateTimeToString(DateTime dateTime, bool includeTime);
    public static bool HasObjectTime(string value);
    public static string GetShortDateRangeString(DateTime minRange, DateTime maxRange);
    public static string GetShortDateRangeStringInCurrentCulture(DateTime minRange, DateTime maxRange);
    public static bool TryGetShortDate(string value, DateTime& dateTime);
    public static bool TryGetShortDateAndLongTime(string value, DateTime& dateTime);
    public static bool TryParseDateTimeString(string dateTime, DateTime& dateTimeObject);
    public static object GetRegistryValue(RegistryKey regKey, string subKeyPath, string registryValue);
    public static T GetRegistryValue(RegistryKey regKey, string subKeyPath, string registryValue, bool throwException);
    public static bool TryCreateRegistryKey(RegistryKey hive, string subKeyPath);
    public static bool TryCreateRegistryKey(RegistryKey hive, string subKeyPath, string valueName, string data);
    internal static bool ExistsRegistryKey(RegistryKey hive, string subKeyPath);
    internal static bool ExistsRegistryKey(RegistryKey hive, string subKeyPath, string valueName);
    public static string GetOSInfo(string propertyName);
    internal static bool IsStartScreenVisible();
    public static bool IsWindowsStartScreen(IntPtr windowHandle);
    public static bool IsWin8OrGreaterOs();
    internal static void BringStartMenuToFocus();
    public static bool get_IsIE10OrHigher();
    public static RegexOptions get_Compiled();
    public static int get_IEVersion();
    public static bool TryGetVersion(string browserName, Version& version);
    public static Int32[] GetLocaleIdentifiers(IDictionary`2<string, string> appSettings);
    public static int GetLcidFromWindowHandle(IntPtr windowHandle);
    public static string NormalizeDynamicClassName(string elementClassName);
    public static bool IsWinformsClassName(string elementClassName);
    public static bool IsMfcClassName(string elementClassName);
    public static bool IsWpfClassName(string elementClassName);
    public static bool IsSilverlightClassName(string elementClassName);
    public static bool get_IsImageActionLogEnabled();
    public static void set_IsImageActionLogEnabled(bool value);
    public static int get_CurrentProcessId();
    public static bool get_IsRemoteTestingEnabled();
    public static void set_IsRemoteTestingEnabled(bool value);
    public static void Sleep(int milliSeconds);
    public static StreamReader GetStreamReader(string file);
    public static bool get_IsPhone();
    public static Stream GetFileStreamWithCreateReadWriteAccess(string file);
    public static Assembly GetExecutingAssembly();
    internal static void AddAssemblyResolveHandler();
    public static bool get_UseManagedMSAA();
    public static void set_UseManagedMSAA(bool value);
    public static bool get_IsWin7();
    public static string get_ProgramFiles();
    public static string get_CommonDirectory();
    public static bool IsIEWindow(IntPtr windowHandle);
    public static bool IsFirefoxWindowClassName(string className);
    public static bool IsIEWindowClassName(string className);
    public static bool IsImmersiveWindow(IntPtr windowHandle);
    public static bool IsImmersiveBrowserWindow(IntPtr windowHandle);
    public static bool IsImmersiveWindowClassName(string className);
    public static bool IsCharmsBar(IntPtr windowHandle);
    public static bool IsCharmsBar(IntPtr windowHandle, string windowClassName);
    internal static bool IsRootParentSupportedControl(IntPtr windowHandle, string className);
    public static bool IsImmersiveModeActive();
    public static bool IsWWAWindow(IntPtr windowHandle);
    public static void UpdateSqmForMsaaControl(string className);
    public static string GetExpandedLongPath(string path);
    public static bool GetManagedMsaaPropertyValue(IUITechnologyElement element);
    public static void SwitchFromImmersiveToWindow(IntPtr windowHandle);
    internal static int get_CursorPositionX();
    internal static int get_CursorPositionY();
    internal static void SetCursorPosition(int x, int y);
}
[SuppressMessageAttribute("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
public class Microsoft.VisualStudio.TestTools.UITest.Extension.URLINVOKECOMMANDINFO : object {
    private UInt32 dwcbSize;
    private UInt32 dwFlags;
    private IntPtr hwndParent;
    private string pcszVerb;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Utility.CommonPluginResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AccessDenied { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AccessDenied();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Utility.SchemaValidator : object {
    private bool xmlValidationError;
    private string schemaValidationError;
    internal bool ValidateXmlFileAgainstSchema(string xmlFile, Stream xmlSchemaStream, String& validationError);
    private void Settings_ValidationEventHandler(object sender, ValidationEventArgs e);
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.ValidationFailedException : PlaybackFailureException {
    private string condition;
    private string propertyName;
    private string friendlyName;
    private string expectedValue;
    private string actualValue;
    protected string DefaultMessage { get; }
    public ValidationFailedException(string message);
    public ValidationFailedException(string message, Exception innerException);
    public ValidationFailedException(string actionName, string condition, string propertyName, string friendlyName, string expectedValue, string actualValue, Exception innerException);
    public ValidationFailedException(string message, string actionName, string condition, string propertyName, string friendlyName, string expectedValue, string actualValue, Exception innerException);
    protected ValidationFailedException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual string get_DefaultMessage();
}
public class Microsoft.VisualStudio.TestTools.UITest.Extension.ValueMap : object {
    private Dictionary`2<string, ActionParameter> parameters;
    private Collection`1<ActionParameter> parameterList;
    public Collection`1<ActionParameter> ParameterList { get; }
    private Dictionary`2<string, ActionParameter> Parameters { get; }
    public Collection`1<ActionParameter> get_ParameterList();
    public void Clear();
    public void PopulateParametersDictionaryAfterDeserialization();
    public bool Contains(string parameterName);
    public void Add(ActionParameter parameter);
    public bool Remove(string parameterName);
    [SuppressMessageAttribute("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]
public bool TryGetParameterValue(string parameterName, Object& parameterValue);
    public void SetParameterValue(string parameterName, object parameterValue);
    private Dictionary`2<string, ActionParameter> get_Parameters();
    private void Initialize();
    private static string GetStringInProperFormat(string parameterName);
}
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.WaitForReadyLevel : Enum {
    public int value__;
    public static WaitForReadyLevel Disabled;
    public static WaitForReadyLevel UIThreadOnly;
    public static WaitForReadyLevel AllThreads;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Extension.WaitForReadyOptions : Enum {
    public int value__;
    public static WaitForReadyOptions None;
    public static WaitForReadyOptions EnablePlaybackWaitForReady;
    public static WaitForReadyOptions EnableTechnologyWaitForReady;
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Input.ModifierKeys : Enum {
    public int value__;
    public static ModifierKeys None;
    public static ModifierKeys Alt;
    public static ModifierKeys Control;
    public static ModifierKeys Shift;
    public static ModifierKeys Windows;
}
[ComVisibleAttribute("True")]
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITest.Input.MouseButtons : Enum {
    public int value__;
    public static MouseButtons None;
    public static MouseButtons Left;
    public static MouseButtons Right;
    public static MouseButtons Middle;
    public static MouseButtons XButton1;
    public static MouseButtons XButton2;
}
public static class Microsoft.VisualStudio.TestTools.UITest.Telemetry.TelemetryConstants : object {
    public static string RnPSessionInfo;
    public static string CodedUiTestPackageLoad;
    public static string CodedUiTestProjectCreate;
    public static string CodedUiTestProjectOpen;
    public static string CodedUiTestBuilderUse;
}
public static class Microsoft.VisualStudio.TestTools.UITest.Telemetry.TelemetryHelper : object {
    public static void PostNonVsUserTaskEvent(string eventName, string result, IDictionary`2<string, object> properties);
    public static void PostVsUserTaskEvent(string eventName, string result, IDictionary`2<string, object> properties);
    public static void PostNonVsAssetEvent(string eventName, string assetId, IDictionary`2<string, object> properties);
    public static void PostVsAssetEvent(string eventName, string assetId, IDictionary`2<string, object> properties);
    public static void DisposeNonVsTelemetrySession();
    private static void LogError(Exception ex);
}
public class Microsoft.VisualStudio.TestTools.UITesting.ControlType : object {
    internal static Dictionary`2<string, ControlType> ControlTypes;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Button;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Calendar;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Cell;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType CheckBox;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType CheckBoxTreeItem;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Client;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ColumnHeader;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ComboBox;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ContextMenu;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Custom;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType DatePicker;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType DateTimePicker;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Document;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Edit;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Empty;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Expander;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType FileInput;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType FlipView;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType FlipViewItem;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Frame;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Group;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Hub;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType HubSection;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Hyperlink;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Image;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Label;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType List;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ListItem;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Menu;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType MenuBar;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType MenuItem;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Pane;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Pivot;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType PivotItem;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ProgressBar;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType RadioButton;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Rating;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Row;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType RowHeader;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ScrollBar;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Separator;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType SemanticZoom;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Slider;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Spinner;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType SplitButton;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType StatusBar;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Table;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType TabList;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType TabPage;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Text;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType TitleBar;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ToggleButton;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ToggleSwitch;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ToolBar;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType ToolTip;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Tree;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType TreeItem;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Audio;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Video;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Media;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static ControlType Window;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
internal static ControlType Grip;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
internal static ControlType Indicator;
    private string name;
    private string friendlyName;
    public static StringComparer NameComparer { get; }
    public string Name { get; }
    public string FriendlyName { get; }
    private ControlType(string name, string friendlyName);
    private static ControlType();
    public static ControlType GetControlType(string name);
    public static ControlType GetControlType(string name, string friendlyName);
    public static StringComparer get_NameComparer();
    public string get_Name();
    public string get_FriendlyName();
    public static bool op_Equality(ControlType left, ControlType right);
    public static bool op_Inequality(ControlType left, ControlType right);
    public static ControlType op_Implicit(string name);
    public virtual bool Equals(object other);
    public virtual string ToString();
    public virtual int GetHashCode();
    public bool NameEquals(string controlName);
}
internal interface Microsoft.VisualStudio.TestTools.UITesting.IPlaybackContext {
    public string ActionName { get; public set; }
    public Point ActionLocation { get; }
    public string FriendlyName { get; }
    public string ParentFriendlyName { get; }
    public string FriendlyTypeName { get; }
    public string ParentTypeName { get; }
    public string QueryId { get; }
    public IQueryCondition Condition { get; }
    public object UITestControl { get; public set; }
    public bool IsSearchContext { get; }
    public bool IsTopLevelSearch { get; }
    public abstract virtual string get_ActionName();
    public abstract virtual void set_ActionName(string value);
    public abstract virtual Point get_ActionLocation();
    public abstract virtual string get_FriendlyName();
    public abstract virtual string get_ParentFriendlyName();
    public abstract virtual string get_FriendlyTypeName();
    public abstract virtual string get_ParentTypeName();
    public abstract virtual string get_QueryId();
    public abstract virtual IQueryCondition get_Condition();
    public abstract virtual object get_UITestControl();
    public abstract virtual void set_UITestControl(object value);
    public abstract virtual bool get_IsSearchContext();
    public abstract virtual bool get_IsTopLevelSearch();
}
public class Microsoft.VisualStudio.TestTools.UITesting.PropertyExpression : object {
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private string propertyName;
    private string propertyValue;
    private PropertyExpressionOperator propertyOperator;
    public string PropertyName { get; public set; }
    public string PropertyValue { get; public set; }
    public PropertyExpressionOperator PropertyOperator { get; public set; }
    public PropertyExpression(string propertyName, string propertyValue);
    public PropertyExpression(string propertyName, string propertyValue, PropertyExpressionOperator propertyOperator);
    internal PropertyExpression(PropertyCondition propertyCondition);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public string get_PropertyValue();
    public void set_PropertyValue(string value);
    public PropertyExpressionOperator get_PropertyOperator();
    public void set_PropertyOperator(PropertyExpressionOperator value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual object Clone();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal PropertyCondition ToPropertyCondition();
    private void FirePropertyChange(string changedPropertyName);
}
[DefaultMemberAttribute("Item")]
[SuppressMessageAttribute("Microsoft.Design", "CA1058:TypesShouldNotExtendCertainBaseTypes")]
public class Microsoft.VisualStudio.TestTools.UITesting.PropertyExpressionCollection : CollectionBase {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public string Item { get; public set; }
    public bool IsReadOnly { get; }
    internal PropertyExpressionCollection(List`1<PropertyCondition> list);
    public void Add(string propertyName, string propertyValue);
    public void Add(string propertyName, string propertyValue, PropertyExpressionOperator conditionOperator);
    public sealed virtual void Add(PropertyExpression propertyExpression);
    public void Add(String[] nameValuePairs);
    public void AddRange(PropertyExpression[] propertyExpressions);
    public void AddRange(PropertyExpressionCollection collectionToAdd);
    public PropertyExpression Find(string propertyName);
    public sealed virtual bool Contains(PropertyExpression item);
    public bool Contains(string propertyName);
    public sealed virtual void CopyTo(PropertyExpression[] expressionArray, int arrayIndex);
    public sealed virtual bool Remove(PropertyExpression propertyExpression);
    public bool Remove(string propertyName);
    public string get_Item(string propertyName);
    public void set_Item(string propertyName, string value);
    public sealed virtual bool get_IsReadOnly();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestTools.UITesting.PropertyExpressionCollection/<GetEnumerator>d__24")]
public sealed virtual IEnumerator`1<PropertyExpression> GetEnumerator();
    public sealed virtual object Clone();
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    internal static void GetProperties(IQueryCondition queryConditions, PropertyExpressionCollection& primaryProperties, PropertyExpressionCollection& secondaryProperties);
    internal PropertyCondition[] ToPropertyConditionArray();
    private static void GetProperties(IQueryCondition queryConditions, PropertyExpressionCollection primaryProperties, PropertyExpressionCollection secondaryProperties, bool secondarySearchProperties);
    private static void GetProperties(PropertyCondition propertyCondition, PropertyExpressionCollection primaryProperties, PropertyExpressionCollection secondaryProperties, bool secondarySearchProperties);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private void FireCollectionChanged(NotifyCollectionChangedEventArgs eventArgs);
}
public enum Microsoft.VisualStudio.TestTools.UITesting.PropertyExpressionOperator : Enum {
    public int value__;
    public static PropertyExpressionOperator EqualTo;
    public static PropertyExpressionOperator Contains;
}
