internal abstract class Microsoft.VisualStudio.TestTools.UITest.Framework.AbstractUITestExtensionPackageManager : object {
    private static IUITestExtensionPackageManager s_Instance;
    private IList`1<UITestExtensionPackage> extensionPackageList;
    private static string m_defaultPluginDirectoryPath;
    private object lockObject;
    public static IUITestExtensionPackageManager Instance { get; }
    internal static string DefaultPluginsDirectory { get; }
    public sealed virtual IList`1<T> GetExtensions();
    public static IUITestExtensionPackageManager get_Instance();
    public sealed virtual void Dispose();
    public abstract virtual String[] GetAssemblyNames();
    protected abstract virtual Assembly OnResolve(object senderAppDomain, object args);
    protected abstract virtual void LoadAssemblies(String[] assemblyNames);
    protected void LoadExtensionPackages(Assembly assembly);
    protected abstract virtual void LoadAssembly(string assemblyFile);
    protected IList`1<T> GetExtensionsInternal();
    protected static string CombineMultiplePaths(string firstPath, String[] paths);
    protected static void AddFilePathsToDictionary(Dictionary`2<string, string> dictionary, IEnumerable`1<string> filePaths);
    protected static bool ExceptionHandled(Exception exception);
    internal static string get_DefaultPluginsDirectory();
}
internal abstract class Microsoft.VisualStudio.TestTools.UITest.Framework.AbstractUITestService : object {
    protected static AbstractUITestService instance;
    [CompilerGeneratedAttribute]
private bool <IsRecording>k__BackingField;
    protected bool eatNavigationTimeoutException;
    protected bool isSessionStarted;
    protected UITechnologyElement rootElement;
    protected IUITestExtensionPackageManager extensionPackageManager;
    protected IUITechnologyPluginManager pluginManager;
    protected Dictionary`2<UITestEventType, List`1<UITechnologyManager>> globalEventMap;
    protected Dictionary`2<string, string> proxyToCoreMap;
    protected static object lockObject;
    public IUITechnologyPluginManager PluginManager { get; }
    public bool IsRecording { get; public set; }
    public bool IsSessionStarted { get; private set; }
    public bool EatNavigationTimeoutException { get; public set; }
    public UITechnologyElement RootElement { get; }
    private static AbstractUITestService();
    public abstract virtual IUITechnologyPluginManager get_PluginManager();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public virtual UITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual UITechnologyElement GetParent(UITechnologyElement element);
    private UITechnologyElement GetParentInternal(UITechnologyElement element, bool withoutTreeWalker);
    public virtual UITechnologyElement GetNextSibling(UITechnologyElement element);
    private UITechnologyElement GetNextSiblingInternal(UITechnologyElement element, bool withoutTreeWalker);
    public virtual UITechnologyElement GetPreviousSibling(UITechnologyElement element);
    private UITechnologyElement GetPreviousSiblingInternal(UITechnologyElement element, bool withoutTreeWalker);
    private UITechnologyElement GetNavigationElementForBoundary(UITechnologyElement currentElement, IUITechnologyElement navigatedElement, GetNavigationElemDelegate getNavigationElem);
    private IUITechnologyElement GetBoundaryElementFromQueryID(IUITechnologyElement element);
    private IUITechnologyElement GetTechnologyElementFromAE(AutomationElement element, int pointX, int pointY, bool usePoints);
    private List`1<UITechnologyManager> GetTechnologyManagersForAutomationHierarchy(AutomationElement element, List`1& rawElementsGroup);
    private IUITechnologyElement[] GetTechnologyElementsFromRawElementsHierachy(List`1<UITechnologyManager> managersHierarchy, List`1<List`1<AutomationElement>> rawElementsGroup, int pointX, int pointY, bool usePoints);
    public sealed virtual void StartSession(bool recordingSession);
    private IUITechnologyElement ConvertToCorrectTechnology(IUITechnologyElement element);
    public sealed virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public sealed virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public sealed virtual void StopSession();
    public sealed virtual void Cleanup();
    public sealed virtual UITechnologyElement GetElementFromNativeElement(string technologyName, object nativeElement);
    public virtual IEnumerator`1<UITechnologyElement> GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public sealed virtual UITechnologyElement GetFirstChild(UITechnologyElement element);
    private UITechnologyElement GetFirstChildInternal(UITechnologyElement element, bool withoutTreeWalker);
    public sealed virtual bool AddEventHandler(UITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public sealed virtual bool RemoveEventHandler(UITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public sealed virtual UITechnologyManager TechnologyManagerByName(string technologyName);
    [SuppressMessageAttribute("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]
public sealed virtual IList`1<T> GetExtensions();
    [CompilerGeneratedAttribute]
public bool get_IsRecording();
    [CompilerGeneratedAttribute]
public void set_IsRecording(bool value);
    public sealed virtual bool get_IsSessionStarted();
    private void set_IsSessionStarted(bool value);
    public sealed virtual void AddExtensionToCoreTechnologyMapping(string extensionTechnologyName, string coreTechnologyName);
    public sealed virtual string GetCoreTechnologyName(string extensionTechnologyName);
    public virtual UITechnologyElement GetParentFast(UITechnologyElement element);
    public virtual UITechnologyElement GetPreviousSiblingFast(UITechnologyElement element);
    public virtual UITechnologyElement GetNextSiblingFast(UITechnologyElement element);
    public sealed virtual UITechnologyElement GetFirstChildFast(UITechnologyElement element);
    protected virtual void DisposeInternal();
    public virtual void Dispose();
    protected UITechnologyManager TechnologyManagerFromElement(IUITechnologyElement element);
    protected static void MapAndThrowException(Exception ex, IUITechnologyElement element);
    internal static bool ElementEqualsIgnoreContainer(IUITechnologyElement elementLeft, IUITechnologyElement elementRight);
    public sealed virtual bool get_EatNavigationTimeoutException();
    public sealed virtual void set_EatNavigationTimeoutException(bool value);
    public virtual UITechnologyElement ConvertTechnologyElement(IUITechnologyElement unmanagedMsaaElement);
    public virtual UITechnologyElement ConvertToMappedTechnologyElement(IUITechnologyElement element);
    public virtual UITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public virtual UITechnologyElement GetFocusedElement();
    public virtual UITechnologyElement GetTopLevelElementUsingWindowTree(IUITechnologyElement element);
    public virtual void Initialize();
    public virtual UITechnologyElement get_RootElement();
    public virtual UITechnologyManager TechnologyManagerFromHandle(IntPtr handle);
    public virtual void UpdateQueryIdForTopLevelElement(UITechnologyElement element);
    protected static IUITechnologyElement SkipHigherPrivilegeProcesses(UITechnologyManager plugin, IUITechnologyElement sibling, bool getNextSibling);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Framework.BrowserPluginManager : object {
    private static object lockObject;
    private static List`1<string> supportedBrowsers;
    private static IList`1<BrowserFactory> browserFactoryList;
    private static List`1<BrowserHelper> browserHelperList;
    private static BrowserPluginManager instance;
    private static string InternetExplorerFormatString;
    private static string InternetExplorerBrowserString;
    public static BrowserPluginManager Instance { get; }
    public IList`1<string> SupportedBrowsers { get; }
    public string InstalledInternetExplorer { get; }
    public string InternetExplorerBrowserName { get; }
    private IList`1<BrowserFactory> BrowserFactoryList { get; }
    private List`1<BrowserHelper> BrowserInfoList { get; }
    private static BrowserPluginManager();
    public static BrowserPluginManager get_Instance();
    public BrowserFactory GetBrowserFactoryByName(string browserName);
    public bool IsBrowserProcess(Process process);
    public Uri GetHomePage(Process process);
    public bool IsBrowserWindow(UITechnologyElement element);
    public bool IsBrowserWindow(string className);
    public bool IsBrowserDocumentWindow(UITechnologyElement element);
    public bool IsBrowserDocumentWindow(IntPtr windowHandle);
    public Uri GetUrlFromBrowserDocumentWindow(UITechnologyElement element);
    public BrowserButtonType GetBrowserButtonType(UITechnologyElement element);
    public string GetPageTitle(UITechnologyElement element, string pageTitle);
    public IList`1<string> get_SupportedBrowsers();
    private BrowserHelper GetBrowserFromProcess(Process process);
    public string get_InstalledInternetExplorer();
    public string get_InternetExplorerBrowserName();
    private BrowserHelper GetBrowserFromDocumentWindow(IntPtr windowHandle);
    private BrowserHelper GetBrowserFromDocument(UITechnologyElement element);
    private BrowserHelper GetBrowserHelperFromWindow(UITechnologyElement element);
    private IList`1<BrowserFactory> get_BrowserFactoryList();
    private List`1<BrowserHelper> get_BrowserInfoList();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Framework.ChildrenEnumerator : object {
    private IEnumerator pluginEnumerator;
    private IUITechnologyElement current;
    private bool isDesktop;
    private IUITechnologyElement switchingElement;
    public UITechnologyElement Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ChildrenEnumerator(IEnumerator pluginEnumerator, IUITechnologyElement element);
    public ChildrenEnumerator(IEnumerator pluginEnumerator, IUITechnologyElement element, IUITechnologyElement switchingElement);
    public sealed virtual UITechnologyElement get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Framework.FrameworkUtilities : object {
    public static bool IsTopLevelElement(IUITechnologyElement element);
    public static UITechnologyElement TopLevelElement(IUITechnologyElement element);
    public static bool TechnologySupportsSkippingIntermediateElements(string technologyName, string controlTypeName);
    public static bool IsWindowlessSwitchContainer(IUITechnologyElement element);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Framework.IUITestExtensionPackageManager {
    public abstract virtual IList`1<T> GetExtensions();
    public abstract virtual String[] GetAssemblyNames();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Framework.ServiceProviderResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorHigherPrivilegeProcess { get; }
    internal static string ErrorReadingExtensionNames { get; }
    internal static string ExtensionDllLoadFailure { get; }
    internal static string ExtensionPackageLoadFailure { get; }
    internal static string ExtensionTypeNotFound { get; }
    internal static string FailedToGetUIElement { get; }
    internal static string InvalidTechnologyManager { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorHigherPrivilegeProcess();
    internal static string get_ErrorReadingExtensionNames();
    internal static string get_ExtensionDllLoadFailure();
    internal static string get_ExtensionPackageLoadFailure();
    internal static string get_ExtensionTypeNotFound();
    internal static string get_FailedToGetUIElement();
    internal static string get_InvalidTechnologyManager();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Framework.SwitchingHelper : object {
    internal static IUITechnologyElement DoSwitchingForElementFromPoint(IUITechnologyElement element, IntPtr windowHandle, int pointX, int pointY);
    internal static IUITechnologyElement DoSwitchingForFocusedElement(IUITechnologyElement element, IntPtr windowHandle);
    internal static void HackForWindowsFormsHostIssue(IUITechnologyElement element);
    internal static IEnumerator`1<UITechnologyElement> GetChildrenEnumerator(IUITechnologyElement element, object parsedQueryIdCookie);
    internal static IntPtr GetTechnologyBoundaryHandle(string technologyName, IntPtr windowHandle);
    private static IntPtr GetWindowLessSwitchingHandle(IntPtr windowHandle, IntPtr& boundaryWindowHandle, UITechnologyManager& pluginToUse);
    private static UITechnologyManager GetHostingTechnologyByWindowWalkUp(IntPtr windowHandle, IntPtr& hostingWindowHandle, IntPtr& boundaryWindowHandle, UITechnologyManager& technologyManager);
    private static UITechnologyManager GetHostingTechnologyByWindowWalkUp(string technologyName, IntPtr windowHandle, IntPtr& hostingWindowHandle, IntPtr& boundaryWindowHandle, UITechnologyManager& technologyManager);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static IUITechnologyElement DoContainerBasedSwitchDown(UITechnologyManager plugin, IUITechnologyElement element, UITechnologyManager& switchedPlugin);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Framework.UITestExtensionPackageManager : AbstractUITestExtensionPackageManager {
    private static string customPluginDirectoryPath;
    internal static string IEPluginAssemblyName;
    private static string IEPluginResourceAssemblyName;
    private static string UIAPluginAssemblyName;
    private static string UIAPluginResourceAssemblyName;
    private static string PropertyProvidersAssemblyName;
    private static string UiaWidgetAssemblyName;
    private static string UiaWidgetResourceAssemblyName;
    private static string CrossBrowserPluginAssemblyName;
    private static string CustomPluginDirectory { get; }
    public virtual String[] GetAssemblyNames();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001")]
[SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
protected virtual Assembly OnResolve(object senderAppDomain, object arg);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
protected virtual void LoadAssemblies(String[] assemblyNames);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
protected virtual void LoadAssembly(string assemblyFile);
    private static string get_CustomPluginDirectory();
    private static string TryResolvingAssemblyPath(AssemblyName assemblyName, String[] paths);
    [CompilerGeneratedAttribute]
private void <LoadAssemblies>b__2_1(string assemblyFile);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Framework.UITestPluginManager : object {
    private IDictionary`2<string, UITechnologyManager> nameToTechnologyManagerMap;
    private IDictionary`2<string, UITechnologyManager> typeToAllTechnologyManagersMap;
    private ReadOnlyCollection`1<UITechnologyManager> technologyManagerList;
    private UITechnologyManager defaultPlugin;
    public IList`1<UITechnologyManager> TechnologyManagers { get; }
    public ICollection`1<string> TechnologyManagerNames { get; }
    public UITechnologyManager DefaultTechnologyManager { get; private set; }
    public UITestPluginManager(IList`1<UITechnologyManager> technologyManagerList, UITechnologyManager defaultManager);
    public sealed virtual void StartSession(bool recordingSession);
    public sealed virtual void StopSession();
    public sealed virtual UITechnologyManager GetTechnologyManagerByName(string technologyName);
    public sealed virtual UITechnologyManager GetTechnologyManagerByTypeInAll(string typeName);
    public sealed virtual UITechnologyManager GetTechnologyManagerByAutomationElementOrWindowHandle(object element);
    public sealed virtual bool StartSessionAndAdd(UITechnologyManager technologyManager, bool recordingSession);
    public sealed virtual bool StopSessionAndRemove(UITechnologyManager technologyManager);
    public sealed virtual IList`1<UITechnologyManager> get_TechnologyManagers();
    public sealed virtual ICollection`1<string> get_TechnologyManagerNames();
    public sealed virtual UITechnologyManager get_DefaultTechnologyManager();
    private void set_DefaultTechnologyManager(UITechnologyManager value);
    private void AddTechnologyManager(UITechnologyManager technologyManager);
    private void RemoveTechnologyManager(UITechnologyManager technologyManager);
}
[GuidAttribute("4EC67AB6-66B9-4954-B2DD-5B75DD6CBC19")]
internal class Microsoft.VisualStudio.TestTools.UITest.Framework.UITestService : AbstractUITestService {
    private static string IEPluginAssemblyName;
    public static AbstractUITestService Instance { get; internal set; }
    public IUITechnologyPluginManager PluginManager { get; }
    public static AbstractUITestService get_Instance();
    internal static void set_Instance(AbstractUITestService value);
    public virtual IUITechnologyPluginManager get_PluginManager();
    public virtual void Initialize();
    public virtual UITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public virtual UITechnologyElement GetFocusedElement();
    public virtual UITechnologyElement ConvertTechnologyElement(IUITechnologyElement element);
    public virtual UITechnologyElement ConvertToMappedTechnologyElement(IUITechnologyElement element);
    public UITechnologyManager TechnologyManagerFromAutomationElement(AutomationElement element);
    public virtual IEnumerator`1<UITechnologyElement> GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    protected virtual void DisposeInternal();
    private UITechnologyManager GetMsaaTestPluginInstance();
    private void DisposeMsaaTestPluginInstance();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private UITechnologyElement GetFocusedElementUsingThread();
    private IUITechnologyElement FocusedElementFromDefaultPlugin(IUITechnologyElement element);
    private UITechnologyElement ProcessTreeSwitchingFocusedElement(IUITechnologyElement element, IntPtr windowHandle);
    private UITechnologyElement IfTechnologyRootElementThenConvertInParentTechnology(IUITechnologyElement element, bool addAsSwitchingElement);
    private IUITechnologyElement ConvertToTechnologyElement(UITechnologyManager technologyManager, IUITechnologyElement element);
    private static void ThrowIfHigherPrivilegeProcess(IntPtr handle);
    private static void UpdateQueryIdForWindowLessSwitching(IUITechnologyElement element);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
private Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    private void OnProcessExit(object sender, EventArgs e);
}
