internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.AutoAnalysisHint : Enum {
    public int value__;
    public static AutoAnalysisHint Include;
    public static AutoAnalysisHint Ignore;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.BuiltInPlugins : object {
    internal static string LocationCaptureId;
    public static Field CreateScreenShotHighlight(string activeScreenName, int boundsX, int boundsY, int boundsWidth, int boundsHeight, MessageType messageType, bool takeSnapshotPostAction);
    private static Field CreateScreenShotHighlight(string activeScreenCoordinates, Rectangle rectangle, MessageType messageType, Color color, bool takeSnapshotPostAction);
    public static Field CreateActiveScreenField(string screenName);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Collections.ExtendedFieldCollection : object {
    private List`1<IExtendedField> fields;
    public void Add(IExtendedField field);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Collections.LogPropertyCollection : object {
    private List`1<ILogProperty> properties;
    public void Add(ILogProperty Property);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Collections.MessageCollection : object {
    private List`1<ILogMessage> messages;
    public void Add(ILogMessage Message);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Collections.SourcesCollection : object {
    private ReaderWriterLockSlim locker;
    private Dictionary`2<string, ILogDataSource> sources;
    public ICollection`1<string> Sources { get; }
    public ICollection`1<string> get_Sources();
    public void AddSource(string name, ILogDataSource logSource);
    public ILogDataSource GetSource(string name);
    public void RemoveSource(string name);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Logging.DefaultPlugins : object {
    public static string ScreenCapture;
    public static string RawXml;
    public static string ConsoleSink;
    public static string PropertyFormatter;
    public static string MessageFormatter;
    public static string FieldFormatter;
    public static string ExceptionFormatter;
    public static string ScreenshotFormatter;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.ExtendedFieldCreators.HighlightRectangle : object {
    [CompilerGeneratedAttribute]
private Rectangle <Coordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    public Rectangle Coordinates { get; public set; }
    public Color Color { get; public set; }
    [CompilerGeneratedAttribute]
public Rectangle get_Coordinates();
    [CompilerGeneratedAttribute]
public void set_Coordinates(Rectangle value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.ExtendedFieldCreators.ScreenCapturePlugin : object {
    private static string ExtendedFieldName;
    internal static string HighlightFieldName;
    internal static string ScreenFieldCoordinates;
    [CompilerGeneratedAttribute]
private List`1<string> <MessageTypes>k__BackingField;
    private List`1<string> MessageTypes { get; private set; }
    public ScreenCapturePlugin(string configString);
    [CompilerGeneratedAttribute]
private List`1<string> get_MessageTypes();
    [CompilerGeneratedAttribute]
private void set_MessageTypes(List`1<string> value);
    public sealed virtual void CreateExtendedField(ILogMessage message);
    private HighlightRectangle ParseRectangleString(string rectangleString);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.ExtendedFieldCreators.ScreenCapturePluginException : Exception {
    private static string msgFormatString;
    public ScreenCapturePluginException(string message);
    public ScreenCapturePluginException(string message, Exception innerException);
    protected ScreenCapturePluginException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.ExtendedFieldCreators.ScreenCapturePluginFactory : object {
    public sealed virtual object GetOmniLogPlugin(string name, string configString);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IExtendedField {
    public string Name { get; public set; }
    public string Value { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IExtendedFieldCreator {
    public abstract virtual void CreateExtendedField(ILogMessage message);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IExtendedFieldFormatter {
    public abstract virtual string GetExtendedFieldIds();
    public abstract virtual string TranslateExtendedFieldToHtml(ILogMessage message, IExtendedField extendedField);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IFieldCollection {
    public abstract virtual IEnumerator GetEnumerator();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IFieldFormatterCollection {
    public abstract virtual IExtendedFieldFormatter GetFormatterForFieldName(string extendedFieldName);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IHeadFormatter {
    public abstract virtual string GetHeadHtml();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.ILogDataSource {
    public bool LinkHint { get; }
    public string LinkPath { get; }
    public IMessageCollection Messages { get; }
    public IPropertyCollection Properties { get; }
    public abstract virtual bool get_LinkHint();
    public abstract virtual string get_LinkPath();
    public abstract virtual IMessageCollection get_Messages();
    public abstract virtual IPropertyCollection get_Properties();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.ILogMessage {
    public IFieldCollection ExtendedFields { get; }
    public IFieldCollection SettingsFields { get; }
    public bool IncludeInAutoAnalysis { get; public set; }
    public string MessageType { get; public set; }
    public string Message { get; public set; }
    public string ExecutionId { get; public set; }
    public string ThreadId { get; public set; }
    public DateTime TimeStamp { get; public set; }
    public string MessageId { get; public set; }
    public abstract virtual IFieldCollection get_ExtendedFields();
    public abstract virtual IFieldCollection get_SettingsFields();
    public abstract virtual bool get_IncludeInAutoAnalysis();
    public abstract virtual void set_IncludeInAutoAnalysis(bool value);
    public abstract virtual string get_MessageType();
    public abstract virtual void set_MessageType(string value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual string get_ExecutionId();
    public abstract virtual void set_ExecutionId(string value);
    public abstract virtual string get_ThreadId();
    public abstract virtual void set_ThreadId(string value);
    public abstract virtual DateTime get_TimeStamp();
    public abstract virtual void set_TimeStamp(DateTime value);
    public abstract virtual string get_MessageId();
    public abstract virtual void set_MessageId(string value);
    public abstract virtual IExtendedField AddExtendedField();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.ILogProperty {
    public string Group { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public abstract virtual string get_Group();
    public abstract virtual void set_Group(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.ILogSink {
    public abstract virtual void Append(ILogProperty property);
    public abstract virtual void Append(ILogMessage message);
    public abstract virtual void Flush();
    public abstract virtual void Reset();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IMessageCollection {
    public abstract virtual IEnumerator GetEnumerator();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IMessageFormatter {
    public abstract virtual string TranslateMessageToHtml(ILogMessage message, IFieldFormatterCollection extendedFieldFormatters);
    public abstract virtual string GetMessageIds();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory {
    public abstract virtual object GetOmniLogPlugin(string name, string configString);
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IPropertyCollection {
    public abstract virtual IEnumerator GetEnumerator();
}
internal interface Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IPropertyFormatter {
    public abstract virtual string GetPropertyIds();
    public abstract virtual string TranslatePropertyFieldToHtml(ILogProperty property);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.OmniLogPluginEntryPointException : Exception {
    public OmniLogPluginEntryPointException(string message);
    public OmniLogPluginEntryPointException(string message, Exception innerException);
    protected OmniLogPluginEntryPointException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.OmniLogPluginInfo : object {
    [CompilerGeneratedAttribute]
private PluginFrameworkType <PluginType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedFactoryClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibraryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private OmniLogInterfaces <InvokeAsInterfaces>k__BackingField;
    public PluginFrameworkType PluginType { get; public set; }
    public string ManagedFactoryClass { get; public set; }
    public string LibraryPath { get; public set; }
    public string PluginName { get; public set; }
    public string Name { get; public set; }
    public string Configuration { get; public set; }
    public OmniLogInterfaces InvokeAsInterfaces { get; public set; }
    public OmniLogPluginInfo(string name, OmniLogInterfaces invokeAsInterfaces, PluginFrameworkType pluginType, string libraryPath, string managedPluginFactoryClass, string pluginName, string configString);
    public OmniLogPluginInfo(string name, OmniLogInterfaces invokeAsInterfaces, string managedPluginFactoryClass, string pluginName, string configString);
    [CompilerGeneratedAttribute]
public PluginFrameworkType get_PluginType();
    [CompilerGeneratedAttribute]
public void set_PluginType(PluginFrameworkType value);
    [CompilerGeneratedAttribute]
public string get_ManagedFactoryClass();
    [CompilerGeneratedAttribute]
public void set_ManagedFactoryClass(string value);
    [CompilerGeneratedAttribute]
public string get_LibraryPath();
    [CompilerGeneratedAttribute]
public void set_LibraryPath(string value);
    [CompilerGeneratedAttribute]
public string get_PluginName();
    [CompilerGeneratedAttribute]
public void set_PluginName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public OmniLogInterfaces get_InvokeAsInterfaces();
    [CompilerGeneratedAttribute]
public void set_InvokeAsInterfaces(OmniLogInterfaces value);
    public OmniLogPluginInfo Copy();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.OmniLogPluginLoadException : Exception {
    public OmniLogPluginLoadException(string message);
    public OmniLogPluginLoadException(string message, Exception innerException);
    protected OmniLogPluginLoadException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.OmniLogSettings : object {
    [CompilerGeneratedAttribute]
private static Settings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <LogDirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <PresentTestName>k__BackingField;
    internal static Settings Settings { get; private set; }
    public static string DirectoryPath { get; public set; }
    public static string LogDirectoryPath { get; public set; }
    public static string PresentTestName { get; public set; }
    private static OmniLogSettings();
    [CompilerGeneratedAttribute]
internal static Settings get_Settings();
    [CompilerGeneratedAttribute]
private static void set_Settings(Settings value);
    [CompilerGeneratedAttribute]
public static string get_DirectoryPath();
    [CompilerGeneratedAttribute]
public static void set_DirectoryPath(string value);
    [CompilerGeneratedAttribute]
public static string get_LogDirectoryPath();
    [CompilerGeneratedAttribute]
public static void set_LogDirectoryPath(string value);
    [CompilerGeneratedAttribute]
public static string get_PresentTestName();
    [CompilerGeneratedAttribute]
public static void set_PresentTestName(string value);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.PluginFrameworkType : Enum {
    public int value__;
    public static PluginFrameworkType DotNet;
    public static PluginFrameworkType COM;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.PluginLoader : object {
    public static string SafeLocalPath(string path);
    public static object LoadPlugin(OmniLogPluginInfo pluginInfo);
    private static object CreateCOMPlugin(string nameOfDll, string name, string configString);
    private static object CreateDotNetPlugin(string nameOfDll, string factoryClass, string name, string configString);
    private static string GetAllImplementationsInAssembly(Assembly asm, Type interfaceType);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.Settings : object {
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, bool> <BoolDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, OmniLogPluginInfo> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Warnings>k__BackingField;
    private string LogName { get; private set; }
    private Dictionary`2<string, bool> BoolDictionary { get; private set; }
    private Dictionary`2<string, OmniLogPluginInfo> Plugins { get; private set; }
    private List`1<string> Warnings { get; private set; }
    public ICollection`1<OmniLogPluginInfo> AutoPlugins { get; }
    public ICollection`1<string> SetupWarnings { get; }
    public string DefaultLogName { get; public set; }
    [CompilerGeneratedAttribute]
private string get_LogName();
    [CompilerGeneratedAttribute]
private void set_LogName(string value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, bool> get_BoolDictionary();
    [CompilerGeneratedAttribute]
private void set_BoolDictionary(Dictionary`2<string, bool> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, OmniLogPluginInfo> get_Plugins();
    [CompilerGeneratedAttribute]
private void set_Plugins(Dictionary`2<string, OmniLogPluginInfo> value);
    [CompilerGeneratedAttribute]
private List`1<string> get_Warnings();
    [CompilerGeneratedAttribute]
private void set_Warnings(List`1<string> value);
    public ICollection`1<OmniLogPluginInfo> get_AutoPlugins();
    public ICollection`1<string> get_SetupWarnings();
    public string get_DefaultLogName();
    public void set_DefaultLogName(string value);
    public bool GetBoolSetting(string settingName);
    private void AddPlugin(OmniLogPluginInfo newPlugin);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.SetupMessages : object {
    public static LogMessage PluginLoadIssue(string issueLocation, OmniLogPluginInfo pluginInfo, Exception exception);
    public static LogMessage FormatterOverridden(OmniLogPluginInfo pluginInfo, string formatterType, string formatterId);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.ExceptionFormatter : object {
    [CompilerGeneratedAttribute]
private string <FieldIds>k__BackingField;
    private string FieldIds { get; private set; }
    [CompilerGeneratedAttribute]
private string get_FieldIds();
    [CompilerGeneratedAttribute]
private void set_FieldIds(string value);
    public sealed virtual string GetExtendedFieldIds();
    public sealed virtual string TranslateExtendedFieldToHtml(ILogMessage message, IExtendedField extendedField);
    private string StackToHtml(string ExceptionStack);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.ExceptionFormatterFactory : object {
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.FieldFormatterCollection : object {
    private object locker;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IExtendedFieldFormatter> <Formatters>k__BackingField;
    private Dictionary`2<string, IExtendedFieldFormatter> Formatters { get; private set; }
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IExtendedFieldFormatter> get_Formatters();
    [CompilerGeneratedAttribute]
private void set_Formatters(Dictionary`2<string, IExtendedFieldFormatter> value);
    internal void AddFormatter(string name, IExtendedFieldFormatter formatter);
    internal void RemoveFormatter(string name);
    public sealed virtual IExtendedFieldFormatter GetFormatterForFieldName(string extendedFieldName);
    internal bool ContainsExplicitFormatterForFieldName(string extendedFieldName);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.LogFormatter : object {
    [CompilerGeneratedAttribute]
private SummaryLogType <LogType>k__BackingField;
    private object locker;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IHeadFormatter> <HeadFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IPropertyFormatter> <PropertyFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IMessageFormatter> <MessageFormatters>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldFormatterCollection <FieldFormatters>k__BackingField;
    public SummaryLogType LogType { get; private set; }
    public ICollection`1<string> HeadFormatterNames { get; }
    public ICollection`1<string> PropertyFormatterNames { get; }
    public ICollection`1<string> MessageFormatterNames { get; }
    public IFieldFormatterCollection ExtendedFieldFormatters { get; }
    private Dictionary`2<string, IHeadFormatter> HeadFormatters { get; private set; }
    private Dictionary`2<string, IPropertyFormatter> PropertyFormatters { get; private set; }
    private Dictionary`2<string, IMessageFormatter> MessageFormatters { get; private set; }
    private FieldFormatterCollection FieldFormatters { get; private set; }
    public LogFormatter(SummaryLogType logType);
    [CompilerGeneratedAttribute]
public SummaryLogType get_LogType();
    [CompilerGeneratedAttribute]
private void set_LogType(SummaryLogType value);
    public ICollection`1<string> get_HeadFormatterNames();
    public ICollection`1<string> get_PropertyFormatterNames();
    public ICollection`1<string> get_MessageFormatterNames();
    public IFieldFormatterCollection get_ExtendedFieldFormatters();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IHeadFormatter> get_HeadFormatters();
    [CompilerGeneratedAttribute]
private void set_HeadFormatters(Dictionary`2<string, IHeadFormatter> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IPropertyFormatter> get_PropertyFormatters();
    [CompilerGeneratedAttribute]
private void set_PropertyFormatters(Dictionary`2<string, IPropertyFormatter> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IMessageFormatter> get_MessageFormatters();
    [CompilerGeneratedAttribute]
private void set_MessageFormatters(Dictionary`2<string, IMessageFormatter> value);
    [CompilerGeneratedAttribute]
private FieldFormatterCollection get_FieldFormatters();
    [CompilerGeneratedAttribute]
private void set_FieldFormatters(FieldFormatterCollection value);
    public IHeadFormatter GetHeadFormatter(string name);
    public void SetHeadFormatter(string name, IHeadFormatter formatter);
    public void RemoveHeadFormatter(string name);
    public IPropertyFormatter GetPropertyFormatter(string propertyGroup, string propertyName);
    public void SetPropertyFormatter(IPropertyFormatter formatter);
    public void RemovePropertyFormatter(string propertyGroup, string propertyName);
    public IMessageFormatter GetMessageFormatter(string messageType);
    public void SetMessageFormatter(IMessageFormatter formatter);
    public void RemoveMessageFormatter(string messageType);
    public void SetExtendedFieldFormatter(IExtendedFieldFormatter formatter);
    public void RemoveExtendedFieldFormatter(string fieldName);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.ScreenShotPlugin : object {
    private static string ExtendedFieldName;
    public ScreenShotPlugin(string configString);
    public sealed virtual string GetExtendedFieldIds();
    public sealed virtual string TranslateExtendedFieldToHtml(ILogMessage message, IExtendedField extendedField);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.ScreenShotPluginFactory : object {
    [CompilerGeneratedAttribute]
private static string <logDirectoryPath>k__BackingField;
    public static string logDirectoryPath { get; public set; }
    public sealed virtual object GetOmniLogPlugin(string name, string configString);
    [CompilerGeneratedAttribute]
public static string get_logDirectoryPath();
    [CompilerGeneratedAttribute]
public static void set_logDirectoryPath(string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.StandardFieldFormatter : object {
    [CompilerGeneratedAttribute]
private string <FieldIds>k__BackingField;
    private string FieldIds { get; private set; }
    public StandardFieldFormatter(string configString);
    [CompilerGeneratedAttribute]
private string get_FieldIds();
    [CompilerGeneratedAttribute]
private void set_FieldIds(string value);
    public sealed virtual string GetExtendedFieldIds();
    public sealed virtual string TranslateExtendedFieldToHtml(ILogMessage message, IExtendedField extendedField);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.StandardFieldFormatterFactory : object {
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.StandardMessageFormatter : object {
    [CompilerGeneratedAttribute]
private string <MessageIds>k__BackingField;
    private string MessageIds { get; private set; }
    public StandardMessageFormatter(string configString);
    [CompilerGeneratedAttribute]
private string get_MessageIds();
    [CompilerGeneratedAttribute]
private void set_MessageIds(string value);
    public sealed virtual string GetMessageIds();
    public sealed virtual string TranslateMessageToHtml(ILogMessage message, IFieldFormatterCollection extendedFieldFormatters);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.StandardMessageFormatterFactory : object {
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.StandardPropertyFormatter : object {
    [CompilerGeneratedAttribute]
private string <PropertyIds>k__BackingField;
    private string PropertyIds { get; private set; }
    public StandardPropertyFormatter(string configString);
    [CompilerGeneratedAttribute]
private string get_PropertyIds();
    [CompilerGeneratedAttribute]
private void set_PropertyIds(string value);
    public sealed virtual string GetPropertyIds();
    public sealed virtual string TranslatePropertyFieldToHtml(ILogProperty property);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Formatters.StandardPropertyFormatterFactory : object {
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.GroupStatus : Enum {
    public int value__;
    public static GroupStatus Failed;
    public static GroupStatus Warning;
    public static GroupStatus Passed;
    public static GroupStatus None;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.GroupType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static GroupType Default { get; }
    public static GroupType Test { get; }
    public static GroupType Scenario { get; }
    public static GroupType SubScenario { get; }
    public static GroupType Functional { get; }
    public string Name { get; private set; }
    private GroupType(string name);
    public static GroupType get_Default();
    public static GroupType get_Test();
    public static GroupType get_Scenario();
    public static GroupType get_SubScenario();
    public static GroupType get_Functional();
    public static GroupType CreateCustomGroupType(string groupname);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Logging.Log : object {
    private static object locker;
    private static OmniLog instance;
    private static OmniLog LogInstance { get; }
    public static IEnumerable`1<string> ExtendedFieldCreators { get; }
    public static IEnumerable`1<string> Sinks { get; }
    private static Log();
    private static OmniLog get_LogInstance();
    public static IEnumerable`1<string> get_ExtendedFieldCreators();
    public static IEnumerable`1<string> get_Sinks();
    public static void AddProperty(PropertyGroup group, string name, string value);
    public static void Pass();
    public static void Pass(string message);
    public static void Pass(string message, IEnumerable`1<Field> additionalFields);
    public static void Fail(string message, AutoAnalysisHint analysisHint);
    public static void Fail(string message, Exception exception, AutoAnalysisHint analysisHint);
    public static void Fail(string message, Exception exception, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public static void Fail(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public static void Info(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public static void Info(string message, AutoAnalysisHint analysisHint);
    public static void Warn(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public static void Warn(string message, AutoAnalysisHint analysisHint);
    public static void Debug(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public static void Debug(string message, AutoAnalysisHint analysisHint);
    public static void BeginGroup(string message);
    public static void BeginGroup(GroupType groupType, string message);
    public static void EndGroup();
    public static void ResetLogData();
    public static void SetTimerInstance(Nullable`1<DateTime> messageTime);
    public static void AddExtendedFieldCreator(string name, IExtendedFieldCreator extender);
    public static void RemoveExtendedFieldCreator(string name);
    public static void AddSink(string name, ILogSink sink);
    public static void RemoveSink(string name);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Logging.LogConstants : object {
    public static string FormatterFallBackId;
    public static string DefaultFormattedMessage;
    public static string HtmlOptOutTag;
    public static string ConfigSeparator;
    public static char ConfigSeparatorAsChar;
    public static string DataProtocolForEmbeddedImage;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.MessageType : Enum {
    public int value__;
    public static MessageType Unknown;
    public static MessageType Fail;
    public static MessageType Pass;
    public static MessageType Info;
    public static MessageType Warn;
    public static MessageType Debug;
    public static MessageType BeginGroup;
    public static MessageType EndGroup;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.NativeMethods.Gdi32 : object {
    public static SafeDisplayHandle CreateDC(string lpszDriver, string lpszDevice, string lpszOutput, IntPtr lpInitData);
    public static SafeDisplayHandle CreateCompatibleDC(SafeDisplayHandle handle);
    public static int GetDeviceCaps(SafeDisplayHandle handle, Resources args);
    public static SafeBitmapHandle CreateCompatibleBitmap(SafeDisplayHandle handle, int width, int height);
    public static IntPtr SelectObject(SafeDisplayHandle obj, SafeBitmapHandle handle);
    public static int BitBlt(SafeDisplayHandle handle, int x, int y, int width, int height, SafeDisplayHandle obj, int dx, int dy, Resources copy);
    public static bool DeleteDC(IntPtr handle);
    public static bool DeleteObject(IntPtr handle);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.NativeMethods.Resources : Enum {
    public int value__;
    public static Resources CAPTUREBLT;
    public static Resources SCCopy;
    public static Resources HorizontalSize;
    public static Resources VerticalSize;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.NativeMethods.SafeBitmapHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.NativeMethods.SafeDisplayHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.NativeMethods.User32 : object {
    public static SafeDisplayHandle GetDesktopWindow();
    public static SafeDisplayHandle GetDC(SafeDisplayHandle hWnd);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.OmniLog : object {
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    private static string executionId;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IExtendedFieldCreator> <ExtendedFieldCreators>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ILogSink> <LogSinks>k__BackingField;
    private static UInt32 messageId;
    private ReaderWriterLockSlim locker;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MessageTime>k__BackingField;
    public string LogName { get; private set; }
    private static string ExecutionId { get; }
    private Dictionary`2<string, IExtendedFieldCreator> ExtendedFieldCreators { get; private set; }
    private Dictionary`2<string, ILogSink> LogSinks { get; private set; }
    private Nullable`1<DateTime> MessageTime { get; private set; }
    private IEnumerable`1<ILogSink> SinkCollection { get; }
    public IEnumerable`1<string> SinkNames { get; }
    public IEnumerable`1<string> ExtendedFieldCreatorNames { get; }
    public OmniLog(string name);
    [CompilerGeneratedAttribute]
public string get_LogName();
    [CompilerGeneratedAttribute]
private void set_LogName(string value);
    private static string get_ExecutionId();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IExtendedFieldCreator> get_ExtendedFieldCreators();
    [CompilerGeneratedAttribute]
private void set_ExtendedFieldCreators(Dictionary`2<string, IExtendedFieldCreator> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ILogSink> get_LogSinks();
    [CompilerGeneratedAttribute]
private void set_LogSinks(Dictionary`2<string, ILogSink> value);
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> get_MessageTime();
    [CompilerGeneratedAttribute]
private void set_MessageTime(Nullable`1<DateTime> value);
    public void AddProperty(PropertyGroup group, string name, string value);
    public void Pass();
    public void Pass(string message);
    public void Pass(string message, IEnumerable`1<Field> additionalFields);
    public void Fail(string message, AutoAnalysisHint analysisHint);
    public void Fail(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public void Fail(string message, Exception exception, AutoAnalysisHint analysisHint);
    public void Fail(string message, Exception exception, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public void Info(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public void Info(string message, AutoAnalysisHint analysisHint);
    public void Warn(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public void Warn(string message, AutoAnalysisHint analysisHint);
    public void Debug(string message, IEnumerable`1<Field> additionalFields, AutoAnalysisHint analysisHint);
    public void Debug(string message, AutoAnalysisHint analysisHint);
    public void BeginGroup(string message);
    public void BeginGroup(GroupType groupType, string message);
    public void EndGroup();
    public void ResetLogData();
    public static ILogSink CreateNativeLogSink(string dllPath, string pluginName, string name, string configString);
    public static ILogSink CreateManagedLogSink(string dllPath, string factoryName, string pluginName, string name, string configString);
    private IEnumerable`1<ILogSink> get_SinkCollection();
    public IEnumerable`1<string> get_SinkNames();
    public void AddSink(string name, ILogSink sink);
    public void RemoveSink(string name);
    public static IExtendedFieldCreator CreateNativeExtendedFieldCreator(string dllPath, string pluginName, string name, string configString);
    public static IExtendedFieldCreator CreateManagedExtendedFieldCreator(string dllPath, string factoryName, string pluginName, string name, string configString);
    public IEnumerable`1<string> get_ExtendedFieldCreatorNames();
    public void AddExtendedFieldCreator(string name, IExtendedFieldCreator extender);
    public void RemoveExtendedFieldCreator(string name);
    private LogMessage CreateMessage(MessageType messageType, string message, AutoAnalysisHint hint, IEnumerable`1<Field> additionalFields);
    private LogMessage CreateMessage(string messageType, string message, AutoAnalysisHint hint, IEnumerable`1<Field> additionalFields);
    private void CreateAndSendMessage(MessageType messageType, string message, AutoAnalysisHint hint, IEnumerable`1<Field> additionalFields);
    private void CreateAndSendMessage(GroupType groupType, string message, AutoAnalysisHint hint, IEnumerable`1<Field> additionalFields);
    private void CreateAndSendExceptionMessage(MessageType messageType, string message, Exception exception, AutoAnalysisHint analysisHint, IEnumerable`1<Field> additionalFields);
    private void SendToSinks(LogProperty property);
    private void SendToSinks(LogMessage message);
    private void SendMessageToExtendedFieldCreators(LogMessage message);
    private string GetThreadId();
    private string GetMessageId();
    private string TranslateStack(Exception exception);
    public void SetNextMessageTimeToNow(Nullable`1<DateTime> messageTime);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.OmniLogInterfaces : Enum {
    public int value__;
    public static OmniLogInterfaces None;
    public static OmniLogInterfaces ILogSink;
    public static OmniLogInterfaces ILogDataSource;
    public static OmniLogInterfaces IExtendedFieldCreator;
    public static OmniLogInterfaces IPropertyFormatter;
    public static OmniLogInterfaces IMessageFormatter;
    public static OmniLogInterfaces IExtendedFieldFormatter;
    public static OmniLogInterfaces IHeadFormatter;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Logging.PluginUtilities.ScreenCapture : object {
    public static string CaptureFullScreen(string activeScreenCoordinates, IEnumerable`1<HighlightRectangle> highlighting);
    private static void DrawRectangleHighlights(Bitmap image, IEnumerable`1<HighlightRectangle> highlighting);
    private static string ConvertBitmapToBase64EncodedString(Bitmap bmap);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Primitives.ExtendedField : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Primitives.Field : object {
    [CompilerGeneratedAttribute]
private ExtendedField <ExtendedField>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldType <Type>k__BackingField;
    private ExtendedField ExtendedField { get; private set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public FieldType Type { get; public set; }
    public Field(string name, string value, FieldType type);
    [CompilerGeneratedAttribute]
private ExtendedField get_ExtendedField();
    [CompilerGeneratedAttribute]
private void set_ExtendedField(ExtendedField value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
    [CompilerGeneratedAttribute]
public FieldType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(FieldType value);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.Primitives.FieldType : Enum {
    public int value__;
    public static FieldType ExtendedField;
    public static FieldType SettingsField;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Primitives.LogMessage : object {
    [CompilerGeneratedAttribute]
private ExtendedFieldCollection <ExFields>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtendedFieldCollection <SeFields>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeInAutoAnalysis>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    private ExtendedFieldCollection ExFields { get; private set; }
    private ExtendedFieldCollection SeFields { get; private set; }
    public IFieldCollection ExtendedFields { get; }
    public IFieldCollection SettingsFields { get; }
    public bool IncludeInAutoAnalysis { get; public set; }
    public string MessageType { get; public set; }
    public string Message { get; public set; }
    public string ExecutionId { get; public set; }
    public string ThreadId { get; public set; }
    public DateTime TimeStamp { get; public set; }
    public string MessageId { get; public set; }
    [CompilerGeneratedAttribute]
private ExtendedFieldCollection get_ExFields();
    [CompilerGeneratedAttribute]
private void set_ExFields(ExtendedFieldCollection value);
    [CompilerGeneratedAttribute]
private ExtendedFieldCollection get_SeFields();
    [CompilerGeneratedAttribute]
private void set_SeFields(ExtendedFieldCollection value);
    public sealed virtual IFieldCollection get_ExtendedFields();
    public sealed virtual IFieldCollection get_SettingsFields();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IncludeInAutoAnalysis();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeInAutoAnalysis(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Message(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExecutionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecutionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ThreadId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ThreadId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_TimeStamp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimeStamp(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_MessageId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageId(string value);
    public sealed virtual IExtendedField AddExtendedField();
    public IExtendedField AddSettingField();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Primitives.LogProperty : object {
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Group { get; public set; }
    public string Name { get; public set; }
    public string Value { get; public set; }
    public LogProperty(string group, string name, string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Group();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Group(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(string value);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.PropertyGroup : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static PropertyGroup Run { get; }
    public static PropertyGroup Test { get; }
    public static PropertyGroup Machine { get; }
    public static PropertyGroup Environment { get; }
    public static PropertyGroup Links { get; }
    public string Name { get; private set; }
    private PropertyGroup(string name);
    public static PropertyGroup get_Run();
    public static PropertyGroup get_Test();
    public static PropertyGroup get_Machine();
    public static PropertyGroup get_Environment();
    public static PropertyGroup get_Links();
    public static PropertyGroup CreateCustomGroup(string groupName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Logging.ScreenCaptureHelper : object {
    internal static Color DefaultColor;
    internal static int BorderWidth;
    private static ScreenCaptureHelper();
    internal static string TakeScreenShot(string activeScreenName, IEnumerable`1<HighlightRectangle> highlighting);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sinks.ConsoleSink : object {
    private static int TabSize;
    [CompilerGeneratedAttribute]
private int <TabDepth>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BannerEmited>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private object locker;
    private int TabDepth { get; private set; }
    private bool BannerEmited { get; private set; }
    private string Name { get; private set; }
    public ConsoleSink(string name);
    [CompilerGeneratedAttribute]
private int get_TabDepth();
    [CompilerGeneratedAttribute]
private void set_TabDepth(int value);
    [CompilerGeneratedAttribute]
private bool get_BannerEmited();
    [CompilerGeneratedAttribute]
private void set_BannerEmited(bool value);
    [CompilerGeneratedAttribute]
private string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual void Append(ILogProperty property);
    public sealed virtual void Append(ILogMessage message);
    private void WriteMessage(ILogMessage message);
    private void WriteExtendedFields(ILogMessage message);
    public sealed virtual void Flush();
    public sealed virtual void Reset();
    private void InitNewLog();
    private void WriteBannerIfNeeded();
    private string TabIndent(int count);
    private MessageType GetMessageType(string messageType);
}
[GuidAttribute("A17A0012-3348-4E35-83B0-39455F1C0595")]
[ClassInterfaceAttribute("1")]
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sinks.ConsoleSinkFactory : object {
    [CompilerGeneratedAttribute]
private static ConsoleSink <StaticConsoleSink>k__BackingField;
    private static ConsoleSink StaticConsoleSink { get; private set; }
    private static ConsoleSinkFactory();
    [CompilerGeneratedAttribute]
private static ConsoleSink get_StaticConsoleSink();
    [CompilerGeneratedAttribute]
private static void set_StaticConsoleSink(ConsoleSink value);
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sinks.CUITSummarySink : object {
    private static string HTML_STARTLOGTAGS;
    private static string HTML_ENDFILETAGS;
    private static string ScreenShotHolderText;
    private static string FilterGroups;
    private static int m_maxCharacters;
    [CompilerGeneratedAttribute]
private int <PassCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FailCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeafCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TestCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubGroupFailCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubGroupWarnCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Depth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FirstMessageTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastMessageTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalHeadText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TitleText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TotalTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertiesText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TestExceptionRaised>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFailEncountered>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private LogFormatter <LogFormatterPlugins>k__BackingField;
    private StringBuilder m_messageText;
    private int PassCount { get; private set; }
    private int FailCount { get; private set; }
    private int LeafCount { get; private set; }
    private int TestCount { get; private set; }
    private int SubGroupFailCount { get; private set; }
    private int SubGroupWarnCount { get; private set; }
    private int Depth { get; private set; }
    private Nullable`1<DateTime> FirstMessageTime { get; private set; }
    private Nullable`1<DateTime> LastMessageTime { get; private set; }
    private string AdditionalHeadText { get; private set; }
    private string TitleText { get; private set; }
    private string TotalTime { get; private set; }
    private string PropertiesText { get; private set; }
    private StringBuilder MessagesText { get; private set; }
    private bool TestExceptionRaised { get; private set; }
    private bool IsFailEncountered { get; private set; }
    private string FileName { get; private set; }
    private LogFormatter LogFormatterPlugins { get; private set; }
    public CUITSummarySink(LogFormatter formatters, string filename, bool testExceptionRaised);
    [CompilerGeneratedAttribute]
private int get_PassCount();
    [CompilerGeneratedAttribute]
private void set_PassCount(int value);
    [CompilerGeneratedAttribute]
private int get_FailCount();
    [CompilerGeneratedAttribute]
private void set_FailCount(int value);
    [CompilerGeneratedAttribute]
private int get_LeafCount();
    [CompilerGeneratedAttribute]
private void set_LeafCount(int value);
    [CompilerGeneratedAttribute]
private int get_TestCount();
    [CompilerGeneratedAttribute]
private void set_TestCount(int value);
    [CompilerGeneratedAttribute]
private int get_SubGroupFailCount();
    [CompilerGeneratedAttribute]
private void set_SubGroupFailCount(int value);
    [CompilerGeneratedAttribute]
private int get_SubGroupWarnCount();
    [CompilerGeneratedAttribute]
private void set_SubGroupWarnCount(int value);
    [CompilerGeneratedAttribute]
private int get_Depth();
    [CompilerGeneratedAttribute]
private void set_Depth(int value);
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> get_FirstMessageTime();
    [CompilerGeneratedAttribute]
private void set_FirstMessageTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> get_LastMessageTime();
    [CompilerGeneratedAttribute]
private void set_LastMessageTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
private string get_AdditionalHeadText();
    [CompilerGeneratedAttribute]
private void set_AdditionalHeadText(string value);
    [CompilerGeneratedAttribute]
private string get_TitleText();
    [CompilerGeneratedAttribute]
private void set_TitleText(string value);
    [CompilerGeneratedAttribute]
private string get_TotalTime();
    [CompilerGeneratedAttribute]
private void set_TotalTime(string value);
    [CompilerGeneratedAttribute]
private string get_PropertiesText();
    [CompilerGeneratedAttribute]
private void set_PropertiesText(string value);
    private StringBuilder get_MessagesText();
    private void set_MessagesText(StringBuilder value);
    [CompilerGeneratedAttribute]
private bool get_TestExceptionRaised();
    [CompilerGeneratedAttribute]
private void set_TestExceptionRaised(bool value);
    [CompilerGeneratedAttribute]
private bool get_IsFailEncountered();
    [CompilerGeneratedAttribute]
private void set_IsFailEncountered(bool value);
    [CompilerGeneratedAttribute]
private string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
private LogFormatter get_LogFormatterPlugins();
    [CompilerGeneratedAttribute]
private void set_LogFormatterPlugins(LogFormatter value);
    public void WriteAdditionalHeadText();
    public void WriteLogHead(string summaryTitle, string titleUri);
    public void WritePropertyGroup(string groupName, ICollection`1<ILogProperty> properties);
    public List`1<string> ReadMessages(IMessageCollection messages);
    public void WriteMessages(IMessageCollection messages);
    public void WriteHeadersToFile();
    public void Flush();
    public void FinishWrite();
    private void OpenGroup(List`1<MessageGroup> groups, string htmlString, DateTime startTime);
    private string GetFormattedHeaderString(MessageGroup group, string timeSpan);
    private void CloseGroup(List`1<MessageGroup> groups, DateTime endTime);
    private bool isGroupNeeded(GroupStatus status);
    private string EncapsulateMessage(MessageType mType, string htmlString);
    private string GetTimeSpan(DateTime earlierTime, DateTime laterTime);
    private string TabIndent();
    private MessageType getMsgType(ILogMessage message);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sinks.MemoryPlugin : object {
    private object locker;
    [CompilerGeneratedAttribute]
private LogPropertyCollection <LogProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageCollection <LogMessages>k__BackingField;
    private LogPropertyCollection LogProperties { get; private set; }
    private MessageCollection LogMessages { get; private set; }
    public bool LinkHint { get; }
    public string LinkPath { get; }
    public IPropertyCollection Properties { get; }
    public IMessageCollection Messages { get; }
    [CompilerGeneratedAttribute]
private LogPropertyCollection get_LogProperties();
    [CompilerGeneratedAttribute]
private void set_LogProperties(LogPropertyCollection value);
    [CompilerGeneratedAttribute]
private MessageCollection get_LogMessages();
    [CompilerGeneratedAttribute]
private void set_LogMessages(MessageCollection value);
    public sealed virtual bool get_LinkHint();
    public sealed virtual string get_LinkPath();
    public sealed virtual IPropertyCollection get_Properties();
    public sealed virtual IMessageCollection get_Messages();
    public sealed virtual void Append(ILogProperty Property);
    public sealed virtual void Append(ILogMessage Message);
    public sealed virtual void Flush();
    public sealed virtual void Reset();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sinks.MemoryPluginFactory : object {
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sinks.RawXmlPlugin : object {
    private static string logOpenTag;
    private static string logCloseTag;
    private static string logEndText;
    private static string configLinkHint;
    private static string configLinkPath;
    private object locker;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <BaseTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BackwardSeekCount>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriterSettings <XWriterSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FileStream <XFileStream>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlWriter <XWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private RawXmlSource <XReader>k__BackingField;
    private string Filename { get; private set; }
    private DateTime BaseTime { get; private set; }
    private int BackwardSeekCount { get; private set; }
    private Encoding FileEncoding { get; }
    private XmlWriterSettings XWriterSettings { get; private set; }
    private FileStream XFileStream { get; private set; }
    private XmlWriter XWriter { get; private set; }
    private RawXmlSource XReader { get; private set; }
    public bool LinkHint { get; }
    public string LinkPath { get; }
    public IMessageCollection Messages { get; }
    public IPropertyCollection Properties { get; }
    public RawXmlPlugin(string configurationInfo);
    [CompilerGeneratedAttribute]
private string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    [CompilerGeneratedAttribute]
private DateTime get_BaseTime();
    [CompilerGeneratedAttribute]
private void set_BaseTime(DateTime value);
    [CompilerGeneratedAttribute]
private int get_BackwardSeekCount();
    [CompilerGeneratedAttribute]
private void set_BackwardSeekCount(int value);
    private Encoding get_FileEncoding();
    [CompilerGeneratedAttribute]
private XmlWriterSettings get_XWriterSettings();
    [CompilerGeneratedAttribute]
private void set_XWriterSettings(XmlWriterSettings value);
    [CompilerGeneratedAttribute]
private FileStream get_XFileStream();
    [CompilerGeneratedAttribute]
private void set_XFileStream(FileStream value);
    [CompilerGeneratedAttribute]
private XmlWriter get_XWriter();
    [CompilerGeneratedAttribute]
private void set_XWriter(XmlWriter value);
    [CompilerGeneratedAttribute]
private RawXmlSource get_XReader();
    [CompilerGeneratedAttribute]
private void set_XReader(RawXmlSource value);
    public sealed virtual bool get_LinkHint();
    public sealed virtual string get_LinkPath();
    public sealed virtual IMessageCollection get_Messages();
    public sealed virtual IPropertyCollection get_Properties();
    public sealed virtual void Append(ILogProperty property);
    public sealed virtual void Append(ILogMessage message);
    public sealed virtual void Flush();
    public sealed virtual void Reset();
    private void InitLogXml();
    private void PrepareForWrite();
    private void FinishWrite();
    public sealed virtual void Dispose();
    private string ShrinkType(string inputType);
    private string ShrinkHint(bool hint);
    private string DiffString(TimeSpan tSpan);
    private static string GetRandomFileName(string fileName);
    private bool ReadBaseTime(XmlReader XmlFileReader);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sinks.RawXmlPluginFactory : object {
    public sealed virtual object GetOmniLogPlugin(string name, string configurationInfo);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sources.LinkOnlyPluginFactory : object {
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
    public ILogDataSource GetOmniLogPlugin(string name, string configurationInfo);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sources.LinkOnlySource : object {
    [CompilerGeneratedAttribute]
private string <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageCollection <EmptyMessageCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private LogPropertyCollection <EmptyPropertyCollection>k__BackingField;
    private string Link { get; private set; }
    private MessageCollection EmptyMessageCollection { get; private set; }
    private LogPropertyCollection EmptyPropertyCollection { get; private set; }
    public bool LinkHint { get; }
    public string LinkPath { get; }
    public IMessageCollection Messages { get; }
    public IPropertyCollection Properties { get; }
    public LinkOnlySource(string configurationInfo);
    [CompilerGeneratedAttribute]
private string get_Link();
    [CompilerGeneratedAttribute]
private void set_Link(string value);
    [CompilerGeneratedAttribute]
private MessageCollection get_EmptyMessageCollection();
    [CompilerGeneratedAttribute]
private void set_EmptyMessageCollection(MessageCollection value);
    [CompilerGeneratedAttribute]
private LogPropertyCollection get_EmptyPropertyCollection();
    [CompilerGeneratedAttribute]
private void set_EmptyPropertyCollection(LogPropertyCollection value);
    public sealed virtual bool get_LinkHint();
    public sealed virtual string get_LinkPath();
    public sealed virtual IMessageCollection get_Messages();
    public sealed virtual IPropertyCollection get_Properties();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sources.MergeSource : object {
    [CompilerGeneratedAttribute]
private List`1<ILogDataSource> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedList`2<DateTime, ILogMessage> <MessagesNeedingSorting>k__BackingField;
    [CompilerGeneratedAttribute]
private LogPropertyManager <PropertiesManager>k__BackingField;
    private List`1<ILogDataSource> Sources { get; private set; }
    private SortedList`2<DateTime, ILogMessage> MessagesNeedingSorting { get; private set; }
    private LogPropertyManager PropertiesManager { get; private set; }
    public ICollection`1<string> PropertyGroups { get; }
    public IMessageCollection Messages { get; }
    public bool LinkHint { get; }
    public string LinkPath { get; }
    private IPropertyCollection Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.ILogDataSource.Properties { get; }
    public MergeSource(SourcesCollection sourcesToMerge);
    [CompilerGeneratedAttribute]
private List`1<ILogDataSource> get_Sources();
    [CompilerGeneratedAttribute]
private void set_Sources(List`1<ILogDataSource> value);
    [CompilerGeneratedAttribute]
private SortedList`2<DateTime, ILogMessage> get_MessagesNeedingSorting();
    [CompilerGeneratedAttribute]
private void set_MessagesNeedingSorting(SortedList`2<DateTime, ILogMessage> value);
    [CompilerGeneratedAttribute]
private LogPropertyManager get_PropertiesManager();
    [CompilerGeneratedAttribute]
private void set_PropertiesManager(LogPropertyManager value);
    public ICollection`1<string> get_PropertyGroups();
    public sealed virtual IMessageCollection get_Messages();
    public ICollection`1<ILogProperty> GetPropertyGroup(string group);
    public void AddProperty(ILogProperty property);
    public sealed virtual bool get_LinkHint();
    public sealed virtual string get_LinkPath();
    private sealed virtual override IPropertyCollection Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.ILogDataSource.get_Properties();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sources.MessageComparer : object {
    private static long DateTimeTolerance;
    public static bool Equals(ILogMessage first, ILogMessage second);
    public static RelativeTime CompareTimes(ILogMessage first, ILogMessage second);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sources.RawXmlSource : object {
    private static string configLinkHint;
    private static string configLinkPath;
    [CompilerGeneratedAttribute]
private string <Filename>k__BackingField;
    [CompilerGeneratedAttribute]
private RawXmlPropertyCollection <PropertyCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private RawXmlMessageCollection <MessageCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinkHint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkPath>k__BackingField;
    private string Filename { get; private set; }
    private RawXmlPropertyCollection PropertyCollection { get; private set; }
    private RawXmlMessageCollection MessageCollection { get; private set; }
    public bool LinkHint { get; private set; }
    public string LinkPath { get; private set; }
    public IMessageCollection Messages { get; }
    public IPropertyCollection Properties { get; }
    public RawXmlSource(string configurationInfo);
    [CompilerGeneratedAttribute]
private string get_Filename();
    [CompilerGeneratedAttribute]
private void set_Filename(string value);
    [CompilerGeneratedAttribute]
private RawXmlPropertyCollection get_PropertyCollection();
    [CompilerGeneratedAttribute]
private void set_PropertyCollection(RawXmlPropertyCollection value);
    [CompilerGeneratedAttribute]
private RawXmlMessageCollection get_MessageCollection();
    [CompilerGeneratedAttribute]
private void set_MessageCollection(RawXmlMessageCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LinkHint();
    [CompilerGeneratedAttribute]
private void set_LinkHint(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LinkPath();
    [CompilerGeneratedAttribute]
private void set_LinkPath(string value);
    public sealed virtual IMessageCollection get_Messages();
    public sealed virtual IPropertyCollection get_Properties();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Logging.Sources.RawXmlSourceFactory : object {
    private sealed virtual override object Microsoft.VisualStudio.TestTools.UITest.Logging.Extensibility.IOmniLogPluginFactory.GetOmniLogPlugin(string name, string configurationInfo);
    public ILogDataSource GetOmniLogPlugin(string name, string configurationInfo);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.Sources.RelativeTime : Enum {
    public int value__;
    public static RelativeTime Earlier;
    public static RelativeTime SameAs;
    public static RelativeTime Later;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Logging.Summary : object {
    private static object locker;
    private static SourcesCollection sources;
    [CompilerGeneratedAttribute]
private static bool <HasMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IncludeFailTestMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IncludeWarningTestMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IncludePassedTestMethods>k__BackingField;
    private static LogFormatter standard;
    internal static bool HasMessages { get; internal set; }
    internal static bool IncludeFailTestMethods { get; internal set; }
    internal static bool IncludeWarningTestMethods { get; internal set; }
    internal static bool IncludePassedTestMethods { get; internal set; }
    public static SourcesCollection AvailableSources { get; }
    public static LogFormatter StandardSummaryFormatter { get; }
    private static Summary();
    [CompilerGeneratedAttribute]
internal static bool get_HasMessages();
    [CompilerGeneratedAttribute]
internal static void set_HasMessages(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IncludeFailTestMethods();
    [CompilerGeneratedAttribute]
internal static void set_IncludeFailTestMethods(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IncludeWarningTestMethods();
    [CompilerGeneratedAttribute]
internal static void set_IncludeWarningTestMethods(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_IncludePassedTestMethods();
    [CompilerGeneratedAttribute]
internal static void set_IncludePassedTestMethods(bool value);
    public static SourcesCollection get_AvailableSources();
    public static LogFormatter get_StandardSummaryFormatter();
    public static void ConfigureSummary(bool includeFailMethods, bool includeWarningMethods, bool includePassMethods);
    public static void GenerateStandardSummary(bool testExceptionRaised, string fileName, string title, string titleLink);
    public static void GenerateStandardSummary(SourcesCollection logdata, bool testExceptionRaised, string fileName, string title, string titleLink);
    public static List`1<string> GetMessages();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Logging.SummaryLogType : Enum {
    public int value__;
    public static SummaryLogType Standard;
}
internal static class System.Web.HttpUtility : object {
    private static Char[] _htmlEntityEndingChars;
    private static HttpUtility();
    public static string HtmlEncode(string value);
    public static void HtmlEncode(string value, TextWriter output);
    public static string HtmlDecode(string value);
    public static void HtmlDecode(string value, TextWriter output);
    private static int IndexOfHtmlEncodingChars(string s, int startPos);
}
