[ClassInterfaceAttribute("0")]
[GuidAttribute("16700412-400D-44C5-965F-8096054A1A73")]
internal class Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.CRPFPlaybackClass : object {
}
[GuidAttribute("36BF0AE0-BAD6-4607-B1BB-5B2D98DDDE5C")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.ILoggerCallback {
    [SuppressMessageAttribute("Microsoft.Design", "CA1045")]
public abstract virtual void LoggerCallback(String& logString, Int32& logDefaultFlag, Int32& dumpScreenFlag);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A5C5DFA0-2A8C-4843-AADA-E7E2E96AADE1")]
internal interface Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.IMonitoringWindowsCallback {
    public abstract virtual void MonitoringWindowsCallBack(string bstrWindowClass, string bstrWindowName, IntPtr hWnd, int nWinEvent);
    public abstract virtual void GetMonitoringInfo(String& pbstrWindowClass, int cchClass, String& pbstrWindowName, int cchWindowName, IWinEventHandle& ppWinEventHandle);
}
[GuidAttribute("C17ABEFB-C786-4117-8CBE-57C5738C8E16")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.IRPFPlayback {
    [DispIdAttribute("1")]
public abstract virtual void InitPlayBackForTargetWindow(string bstrMainWindowClass, string bstrMainWindowCaption, int fShowInfoWindow, PluginRegistration initializationMode);
    [DispIdAttribute("2")]
public abstract virtual void FinishPlayBack();
    [DispIdAttribute("3")]
public abstract virtual IScreenElement FindScreenElementEx(IScreenElement pScreenElementStart, string bstrQueryId, Object& pvarResKeys, int cResKeys, int nMaxDepth);
    [DispIdAttribute("4")]
public abstract virtual IScreenElement FindScreenElement(string bstrQueryId);
    [DispIdAttribute("5")]
public abstract virtual void FindAllScreenElements(IScreenElement pScreenElementStart, string bstrQueryId, Object& pvarResKeys, int cResKeys, int nMaxDepth, Object[]& foundDescendants);
    [DispIdAttribute("6")]
public abstract virtual void TypeString(string bstrKeys, int nSleepBetweenActions, int fbLiteral, int nKeyboardAction);
    [DispIdAttribute("7")]
public abstract virtual int EnableEnsureVisibleForPrimitive(int fEnable);
    [DispIdAttribute("8")]
public abstract virtual void SetRobustnessLevel(int nRobustnessLevel);
    [DispIdAttribute("9")]
public abstract virtual int SetLoggingFlag(int nLoggingFlag);
    [DispIdAttribute("10")]
public abstract virtual void SetCustomLogger(ILoggerCallback pLoggerCallback);
    [DispIdAttribute("11")]
public abstract virtual void LogInformation(string bstrMessage, int fDeleteFile);
    [DispIdAttribute("12")]
public abstract virtual IScreenElement ScreenElementFromWindow(IntPtr hWnd);
    [DispIdAttribute("13")]
public abstract virtual IScreenElement ScreenElementFromNativeElement(object varNativeElement, string technologyName);
    [DispIdAttribute("14")]
public abstract virtual IScreenElement ScreenElementFromUITechnologyElement(IUITechnologyElement pIUITechnologyElement);
    [DispIdAttribute("15")]
public abstract virtual object GetPlaybackProperty(int nParam);
    [DispIdAttribute("16")]
public abstract virtual void SetPlaybackProperty(int nParam, object varParamValue);
    [DispIdAttribute("17")]
public abstract virtual ILastInvocationInfo GetLastActionInfo();
    [DispIdAttribute("18")]
public abstract virtual void ResetSkipStep();
    [DispIdAttribute("19")]
public abstract virtual void SetThreadInfoInterface(IThreadInfo pThreadInfo);
    [DispIdAttribute("20")]
public abstract virtual void StartSession();
    [DispIdAttribute("21")]
public abstract virtual void StopSession();
    [DispIdAttribute("22")]
public abstract virtual void AddTechnologyManager(IUITechnologyManager pTechnologyManager);
    [DispIdAttribute("23")]
public abstract virtual void RemoveTechnologyManager(IUITechnologyManager pTechnologyManager);
    [DispIdAttribute("24")]
public abstract virtual void SetDebugMode(int nDebuggingLevel);
    [DispIdAttribute("25")]
public abstract virtual void SetSkipStepEventName(string skipStepEventName);
    [DispIdAttribute("26")]
public abstract virtual IUITechnologyManager InitializeTechnologyManager(string fileName, Guid technologyManagerClassId, PluginRegistration initializationMode, PluginType pluginType);
    [DispIdAttribute("85")]
public abstract virtual IUITechnologyManager GetCoreTechnologyManager(string technologyName);
    [DispIdAttribute("86")]
public abstract virtual string GetLogInfo(int nParam);
    [DispIdAttribute("87")]
public abstract virtual int LaunchImmersiveApplication(string strAppModeId);
    [DispIdAttribute("88")]
public abstract virtual void TerminateImmersiveApplication(string strPackageFullName, int processId);
    [DispIdAttribute("89")]
public abstract virtual void InjectHardwareButton(int nButtonType, int nInputType);
}
[GuidAttribute("239A6245-E95D-433D-AD44-ED9FA9EB3053")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.IScreenElement {
    [DispIdAttribute("1")]
public string IdentificationString { get; }
    [DispIdAttribute("2")]
public IScreenElement Parent { get; }
    [DispIdAttribute("27")]
public IUITechnologyElement TechnologyElement { get; }
    public abstract virtual string get_IdentificationString();
    public abstract virtual IScreenElement get_Parent();
    [DispIdAttribute("3")]
public abstract virtual void LeftButtonClick(int x, int y, int fEnsureVisible, string bstrKeyModifiers);
    [DispIdAttribute("4")]
public abstract virtual void DoubleClick(int x, int y, int nButton, int fEnsureVisible, string bstrKeyModifiers);
    [DispIdAttribute("5")]
public abstract virtual void RightButtonClick(int x, int y, int fEnsureVisible, string bstrKeyModifiers);
    [DispIdAttribute("6")]
public abstract virtual void MouseButtonClick(int x, int y, int nButton, int fEnsureVisible, string bstrKeyModifiers);
    [DispIdAttribute("7")]
public abstract virtual void Expand(int nExpandCollapseFlag);
    [DispIdAttribute("8")]
public abstract virtual void Check(int nCheckUncheckFlag);
    [DispIdAttribute("9")]
public abstract virtual void Collapse(int nExpandCollapseFlag);
    [DispIdAttribute("10")]
public abstract virtual void EnsureVisible(int nEnsureVisibleFlag, int x, int y, IScrollerCallback pScrollerCallback, int nScrollFlag, int nMaximumContainers);
    [DispIdAttribute("11")]
public abstract virtual void Select(int nSelectionFlag, bool fVerify);
    [DispIdAttribute("12")]
public abstract virtual void SendKeys(string bstrKeys, int nKeyboardAction, int nSendKeysFlag);
    [DispIdAttribute("13")]
public abstract virtual void SetValueAsComboBox(string bstrNewValue, int nSetValueAsComboBoxFlag);
    [DispIdAttribute("14")]
public abstract virtual void SetValueAsEditBox(string bstrNewValue, int nSetValueAsEditBoxFlag);
    [DispIdAttribute("15")]
public abstract virtual void StartDragging(int x, int y, int nDraggingButton, string bstrKeyModifiers, int fEnsureVisible);
    [DispIdAttribute("16")]
public abstract virtual void StopDragging(int x, int y, int nSpeedPixelPerSecond);
    [DispIdAttribute("17")]
public abstract virtual void MoveMouse(int x, int y, int fEnsureVisible, int nSpeedPixelPerSecond);
    [DispIdAttribute("18")]
public abstract virtual void MouseWheel(int nDelta, string bstrKeyModifiers, int fSetMousePos);
    [DispIdAttribute("19")]
public abstract virtual void Uncheck(int nCheckUncheckFlag);
    [DispIdAttribute("20")]
public abstract virtual void WaitForReady();
    [DispIdAttribute("21")]
public abstract virtual void BringUp();
    [DispIdAttribute("22")]
public abstract virtual IScreenElement FindScreenElementEx(string bstrQueryId, Object& pvarResKeys, int cResKeys, int nMaxDepth);
    [DispIdAttribute("23")]
public abstract virtual Object[] FindAllDescendants(string bstrQueryId, Object& pvarResKeys, int cResKeys, int nMaxDepth);
    [DispIdAttribute("24")]
public abstract virtual void GetClickablePoint(Int32& x, Int32& y);
    [DispIdAttribute("25")]
public abstract virtual void SetValueAsSlider(string bstrNewValue, int nOrientation);
    [DispIdAttribute("26")]
public abstract virtual void GetBoundingRectangle(Int32& pnLeft, Int32& pnTop, Int32& pnWidth, Int32& pnHeight);
    public abstract virtual IUITechnologyElement get_TechnologyElement();
    [DispIdAttribute("28")]
public abstract virtual void SetFocus();
    [DispIdAttribute("29")]
public abstract virtual void DoSelectByMouseClick(Object[] pArray, string bstrModifierKey);
    [DispIdAttribute("30")]
public abstract virtual int Equals(IScreenElement pScreenElement);
    [DispIdAttribute("31")]
public abstract virtual object GetOption(int nPlaybackOption);
    [DispIdAttribute("32")]
public abstract virtual void SetOption(int nPlaybackOption, object varPlaybackOptionValue);
    [DispIdAttribute("33")]
public abstract virtual bool MatchesQueryId(string bstrQueryId);
    [DispIdAttribute("38")]
public abstract virtual void PressRelease(int x, int y, int nPressReleaseFlag, bool fEnsureVisible, int nPressure);
    [DispIdAttribute("39")]
public abstract virtual void Tap(int x, int y, bool ensureVisible, int nPressure);
    [DispIdAttribute("40")]
public abstract virtual void DoubleTap(int x, int y, bool ensureVisible, int nPressure);
    [DispIdAttribute("41")]
public abstract virtual void PressAndHold(int x, int y, int duration, bool ensureVisible, int nPressure);
    [DispIdAttribute("42")]
public abstract virtual void Flick(int x, int y, double nDirection, UInt32 nLength, UInt32 durationInMilliseconds, bool ensureVisible, int nPressure);
    [DispIdAttribute("43")]
public abstract virtual void Slide(int x, int y, double nDirection, UInt32 nLength, UInt32 durationInMilliseconds, bool ensureVisible, int nPressure);
    [DispIdAttribute("44")]
public abstract virtual void Swipe(int x, int y, double nDirection, UInt32 nLength, bool ensureVisible, int nPressure);
    [DispIdAttribute("45")]
public abstract virtual void Zoom(int xThumb, int yThumb, int xIndex, int yIndex, int nLength, bool ensureVisible, int nPressure, int nSpeedPixelPerSecond);
    [DispIdAttribute("46")]
public abstract virtual void Turn(int xThumb, int yThumb, int xIndex, int yIndex, double nRotationAmount, bool ensureVisible, int nPressure, int nSpeedDegreesPerSecond);
}
[GuidAttribute("83BEB5E7-E831-4885-A261-01FC308FC245")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.IScrollerCallback {
    public abstract virtual void VerticalScrollCallback(int nScrollAmount, Int32& pnPercentScrolled);
    public abstract virtual void HorizontalScrollCallback(int nScrollAmount, Int32& pnPercentScrolled);
}
[GuidAttribute("3918A8E3-7F1A-445E-BFDD-4C756C204B22")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.IThreadInfo {
    [DispIdAttribute("1")]
public abstract virtual int GetThreadWaitReason(int nProcId, int nThreadId, Int32& pnThreadState);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("C8D78DC2-A7A2-4b5c-A94D-4ABABDD54770")]
internal interface Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.IWinEventHandle {
    public abstract virtual string GetQueryId();
    public abstract virtual int GetWinEvent();
    public abstract virtual void SetQueryId(string bstrQueryId);
    public abstract virtual void SetWinEvent(int nWinEvent);
    public abstract virtual void StartWaiting();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.MouseButtons : Enum {
    public int value__;
    public static MouseButtons LEFT_BUTTON;
    public static MouseButtons RIGHT_BUTTON;
    public static MouseButtons MIDDLE_BUTTON;
    public static MouseButtons X_BUTTON_1;
    public static MouseButtons X_BUTTON_2;
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("F82DFE89-C2F2-423d-B009-15871650429A")]
internal class Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.ScreenUIElementClass : object {
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.ThreadState : Enum {
    public int value__;
    public static ThreadState Initialized;
    public static ThreadState Ready;
    public static ThreadState Running;
    public static ThreadState Standby;
    public static ThreadState Terminated;
    public static ThreadState Waiting;
    public static ThreadState Transition;
    public static ThreadState UnknownState;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.Engine.ThreadWaitReason : Enum {
    public int value__;
    public static ThreadWaitReason ComponentOfTheWindowsNTExecutive1;
    public static ThreadWaitReason PageToBeFreed1;
    public static ThreadWaitReason PageToBeMappedOrCopied1;
    public static ThreadWaitReason SpaceToBeAllocatedInThePagedOrNonpagedPool1;
    public static ThreadWaitReason ExecutionDelayToBeresolved1;
    public static ThreadWaitReason Suspended1;
    public static ThreadWaitReason UserRequest1;
    public static ThreadWaitReason ComponentOfTheWindowsNTExecutive2;
    public static ThreadWaitReason PageToBeFreed2;
    public static ThreadWaitReason PageToBemappedOrCopied2;
    public static ThreadWaitReason SpaceToBeallocatedInThePagedOrNonpagedPool2;
    public static ThreadWaitReason ExecutionDelayToBeresolved2;
    public static ThreadWaitReason Suspended2;
    public static ThreadWaitReason UserRequest2;
    public static ThreadWaitReason EentPairHigh;
    public static ThreadWaitReason EventPairLow;
    public static ThreadWaitReason LPCReceiveNotice;
    public static ThreadWaitReason LPCReplyNotice;
    public static ThreadWaitReason VirtualMemoryToBeAllocated;
    public static ThreadWaitReason PageToBewrittenToDisk;
    public static ThreadWaitReason Reserved;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.EnsureVisibleFlags : Enum {
    public int value__;
    public static EnsureVisibleFlags EVF_BY_SCROLLING;
    public static EnsureVisibleFlags EVF_BY_EXPANDING_ANCESTORS;
    public static EnsureVisibleFlags EVF_BY_EXPANDING_SIBLINGS;
    public static EnsureVisibleFlags EVF_BY_SETTING_FOCUS;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.KeyboardActionType : Enum {
    public int value__;
    public static KeyboardActionType PRESS;
    public static KeyboardActionType RELEASE;
    public static KeyboardActionType HIT;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Playback.KeyboardInputUtility : object {
    private static bool restoreKeyState;
    private static int VK_CAPITAL;
    internal static void Reset();
    internal static void SetKeyState();
    internal static void RestoreKeyState();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Playback.Logger : object {
    private static bool s_isCustomLoggerInitialised;
    private static PlayBackLogger logger;
    public static void Reset();
    public static void Initalise(IRPFPlayback playback);
    internal static void InitCustomLogger(IRPFPlayback playback);
    internal static void RegisterWarning(string windowTitle, string elementFriendlyName);
    internal static void LoggerUpdateContainerBounds(string logData);
    internal static void LoggerDisableContainerBoundsUpdate();
    internal static void LoggerGenerateEnsureVisibleSnapshotInfo();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.LoggingFlags : Enum {
    public int value__;
    public static LoggingFlags FL_DISABLE_LOGGING;
    public static LoggingFlags FL_LOG_SEARCH_AND_PRIMITIVES;
    public static LoggingFlags FL_LOG_TIME;
    public static LoggingFlags FL_LOG_INTERNAL_INFO;
    public static LoggingFlags FL_LOG_DUMP_SCREEN;
    public static LoggingFlags FL_LOG_FAILURE_AS_INFO;
    public static LoggingFlags FL_LOG_MSAA_PERF;
    public static LoggingFlags FL_DUMP_DESCENDANTS_WHEN_NOT_FOUND;
    public static LoggingFlags FL_LOG_AS_HTML;
    public static LoggingFlags FL_LOG_WITHOUT_CONTENT;
    public static LoggingFlags FL_LOG_ALL_FOUND_ELEMENTS;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Playback.LogHelper : object {
    private static string singleQuote;
    private static Regex attributesRegEx;
    private static Regex nameValueRegex;
    private static LogHelper();
    public static string GetWindowTitleNameforLogging(string queryString);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Playback.PlaybackConstants : object {
    internal static int SendKeysDelayParam;
    internal static int EnsureVisible;
    internal static int NotEnsureVisible;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Playback.PlayBackLogger : object {
    private static string CUIT_HTML_LOGGER_EV_SNAPSHOT_GUID;
    private static string CUIT_HTML_LOGGER_CONTAINER_SNAPSHOT_GUID;
    private static string CUIT_HTML_LOGGER_SKIP_INTERMEDIATE_START_GUID;
    private static PlayBackLogger();
    public sealed virtual void LoggerCallback(String& inputLogString, Int32& doDefaultLogging, Int32& takeScreenShot);
    private bool ProcessHtmlLoggerMessage(string inputLogString);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.PlaybackLogParameter : Enum {
    public int value__;
    public static PlaybackLogParameter SKIP_INTERMEDIATE_ELEMENT;
    public static PlaybackLogParameter FAILED_ELEMENT;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Playback.PlaybackNativeMethods : object {
    internal static IntPtr MonitorFromRect(RectStruct& rect, UInt32 flags);
    internal static bool GetMonitorInfo(IntPtr hMonitor, MonitorInfo& monitorInfo);
    internal static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, UInt32 uFlags);
    internal static bool GetWindowRect(IntPtr hWnd, RectStruct& rect);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.PlaybackParameter : Enum {
    public int value__;
    public static PlaybackParameter SEARCH_IN_TARGETPROCESS_ONLY;
    public static PlaybackParameter WFR_TIMEOUT;
    public static PlaybackParameter DEBUG_MODE;
    public static PlaybackParameter UISYNCHRONIZATION_ENABLED;
    public static PlaybackParameter EXACT_QID_MATCH;
    public static PlaybackParameter TARGET_WINDOW;
    public static PlaybackParameter TARGERT_PROCESS_ID;
    public static PlaybackParameter SEARCH_TIMEOUT;
    public static PlaybackParameter SENDKEYS_DELAY;
    public static PlaybackParameter SMART_MATCH_OPTIONS;
    public static PlaybackParameter SEARCH_IN_MINIMIZED_WINDOWS;
    public static PlaybackParameter CONTAINER_BASED_SWITCH_SUPPORT;
    public static PlaybackParameter SEARCH_RETRY_COUNT;
    public static PlaybackParameter SCROLL_FLAG;
    public static PlaybackParameter SCROLL_MAX_CONTAINERS;
    public static PlaybackParameter WHEEL_LARGE_SCROLL_AMOUNT;
    public static PlaybackParameter DUMP_SCREEN_FORMAT;
    public static PlaybackParameter ENSURE_VISIBLE_FLAG;
    public static PlaybackParameter TYPE_UNICODE;
    public static PlaybackParameter CLICK_ON_VALID_POINT_ONLY;
    public static PlaybackParameter ENSURE_ENABLED;
    public static PlaybackParameter WAIT_FOR_READY_LEVEL;
    public static PlaybackParameter SEARCH_IN_PROCESSES;
    public static PlaybackParameter INPUT_LOCALE_IDENTIFIER;
    public static PlaybackParameter IS_PHONE;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.Playback.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotContainNull { get; }
    internal static string EncryptedText { get; }
    internal static string InvalidDepthForSearch { get; }
    internal static string InvalidMouseButton { get; }
    internal static string InvalidQueryId { get; }
    internal static string InvalidQueryIdForFindDescendents { get; }
    internal static string PlaybackThreadAccessError { get; }
    internal static string Windows8orLaterRequired { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotContainNull();
    internal static string get_EncryptedText();
    internal static string get_InvalidDepthForSearch();
    internal static string get_InvalidMouseButton();
    internal static string get_InvalidQueryId();
    internal static string get_InvalidQueryIdForFindDescendents();
    internal static string get_PlaybackThreadAccessError();
    internal static string get_Windows8orLaterRequired();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.RPFSearchDepth : Enum {
    public int value__;
    public static RPFSearchDepth ChildrenOnly;
    public static RPFSearchDepth MaxDepth;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Playback.ScreenElement : object {
    [CompilerGeneratedAttribute]
private static bool <IgnoreVerification>k__BackingField;
    internal static int SWP_NOACTIVATE;
    internal static int SWP_NOCOPYBITS;
    internal static int SWP_NOMOVE;
    internal static int SWP_NOOWNERZORDER;
    internal static int SWP_NOREDRAW;
    internal static int SWP_NOREPOSITION;
    internal static int SWP_NOSENDCHANGING;
    internal static int SWP_NOSIZE;
    internal static int SWP_NOZORDER;
    internal static int SWP_SHOWWINDOW;
    private static string IETitleBarClassName;
    private static UInt32 MONITOR_DEFAULTTOPRIMARY;
    private static int CLICKABLE_POINT_OFFSET;
    [CompilerGeneratedAttribute]
private static bool <TopLevelWindowSinglePassSearch>k__BackingField;
    private static ILastInvocationInfo lastSearchInfo;
    private static int defaultPressure;
    private static IRPFPlayback playback;
    private static ScreenElement desktop;
    private IScreenElement uiElement;
    private IUITechnologyElement technologyElement;
    private Nullable`1<bool> isTopLevelWindow;
    private Nullable`1<bool> isPopUpWindow;
    private static int sendKeysDelay;
    private static int waitForReadyTimeout;
    private static int searchTimeout;
    private static int findAllTimeout;
    private static SmartMatchOptions smartMatchOptions;
    private static bool searchInMinimizedWindows;
    private static bool matchExactHierarchy;
    private static bool isDebugModeOn;
    private static List`1<int> imeLanguageList;
    private static bool startedSession;
    private static bool addedTechnologyManagers;
    private static string SkipPlayBackEventName;
    private static ScrollOptions DefaultScrollOptions;
    private static UInt32 EventModifyState;
    internal static int TopLevelWindowExactMatchTimeoutPercentage;
    private static int SmartMatchTimeOut;
    internal static int PlaybackSearchRetryCountDefault;
    private static string ContextMenuClassName;
    private static string QueryIdSeparator;
    internal static WaitForReadyLevel WaitForReadyLevel { get; internal set; }
    public static ScreenElement Desktop { get; }
    public ScreenElement Parent { get; }
    internal static IRPFPlayback Playback { get; private set; }
    internal static bool IsSkipStepOn { get; }
    public static int SendKeysDelay { get; public set; }
    public static int SearchTimeout { get; public set; }
    public static int WaitForReadyTimeout { get; public set; }
    public static SmartMatchOptions SmartMatchOptions { get; public set; }
    public static bool SearchInMinimizedWindows { get; public set; }
    public static bool MatchExactHierarchy { get; public set; }
    public static bool IgnoreVerification { get; public set; }
    public static bool SendKeysAsScanCode { get; public set; }
    public static bool DebugModeOn { get; public set; }
    public static ICollection`1<int> ImeLanguageList { get; }
    public IUITechnologyElement TechnologyElement { get; }
    private IScreenElement UIElement { get; private set; }
    private IntPtr WindowHandle { get; }
    private bool IsIETitleBarwithInvalidRect { get; }
    internal static ILastInvocationInfo LastSearchInfo { get; internal set; }
    internal static bool TopLevelWindowSinglePassSearch { get; internal set; }
    private static ScreenElement();
    internal static void InitPlayback();
    internal static void StartSession();
    internal static void StopSession();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2004:RemoveCallsToGCKeepAlive")]
internal static void FinishPlayback();
    internal static void AddTechnologyManager(UITechnologyManager technologyManager);
    internal static void RemoveTechnologyManager(UITechnologyManager technologyManager);
    internal static WaitForReadyLevel get_WaitForReadyLevel();
    internal static void set_WaitForReadyLevel(WaitForReadyLevel value);
    public static ScreenElement FromTechnologyElement(IUITechnologyElement element);
    internal static ScreenElement FromNativeElement(object nativeElement, string technologyName);
    private static ScreenElement FromTechnologyElementInternal(IUITechnologyElement technologyElement);
    public static ScreenElement get_Desktop();
    public ScreenElement get_Parent();
    internal static IRPFPlayback get_Playback();
    private static void set_Playback(IRPFPlayback value);
    internal static bool get_IsSkipStepOn();
    public static int get_SendKeysDelay();
    public static void set_SendKeysDelay(int value);
    public static int get_SearchTimeout();
    public static void set_SearchTimeout(int value);
    public static int get_WaitForReadyTimeout();
    public static void set_WaitForReadyTimeout(int value);
    public static SmartMatchOptions get_SmartMatchOptions();
    public static void set_SmartMatchOptions(SmartMatchOptions value);
    public static bool get_SearchInMinimizedWindows();
    public static void set_SearchInMinimizedWindows(bool value);
    public static bool get_MatchExactHierarchy();
    public static void set_MatchExactHierarchy(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IgnoreVerification();
    [CompilerGeneratedAttribute]
public static void set_IgnoreVerification(bool value);
    public static bool get_SendKeysAsScanCode();
    public static void set_SendKeysAsScanCode(bool value);
    public static bool get_DebugModeOn();
    public static void set_DebugModeOn(bool value);
    public static ICollection`1<int> get_ImeLanguageList();
    public IUITechnologyElement get_TechnologyElement();
    private IScreenElement get_UIElement();
    private void set_UIElement(IScreenElement value);
    private IntPtr get_WindowHandle();
    public void LeftButtonClick();
    public void LeftButtonClick(ModifierKeys modifierKeys);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void LeftButtonClick(int x, int y, ModifierKeys modifierKeys);
    public void RightButtonClick();
    public void RightButtonClick(ModifierKeys modifierKeys);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void RightButtonClick(int x, int y, ModifierKeys modifierKeys);
    public void MouseButtonClick(MouseButtons button);
    public void MouseButtonClick(MouseButtons button, ModifierKeys modifierKeys);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void MouseButtonClick(int x, int y, MouseButtons button, ModifierKeys modifierKeys);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void MouseButtonClick(int x, int y, MouseButtons button, ModifierKeys modifierKeys, int ensureVisible);
    public void LeftButtonDoubleClick();
    public void LeftButtonDoubleClick(ModifierKeys modifierKeys);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void LeftButtonDoubleClick(int x, int y, ModifierKeys modifierKeys);
    public void DoubleClick(MouseButtons button);
    public void DoubleClick(MouseButtons button, ModifierKeys modifierKeys);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void DoubleClick(int x, int y, MouseButtons button, ModifierKeys modifierKeys);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void DoubleClick(int x, int y, MouseButtons button, ModifierKeys modifierKeys, int ensureVisible);
    public void MouseWheel(int delta);
    public void MouseWheel(int delta, ModifierKeys modifierKeys);
    public void MouseWheel(int delta, ModifierKeys modifierKeys, bool setMousePosition);
    public void StartDragging(int offsetX, int offsetY, MouseButtons button, ModifierKeys modifierKeys, bool ensureVisible);
    public void StopDragging(int offsetX, int offsetY, int mouseDragSpeed);
    public void MouseHover();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void MouseHover(int x, int y, int ensureVisible, int speed, int duration);
    public static void TypeString(string text, ModifierKeys modifierKeys, bool isEncoded, bool isUnicode);
    public static void PressModifierKeysStatic(ModifierKeys keys);
    public static void ReleaseModifierKeysStatic(ModifierKeys keys);
    public void SendKeys(string keys);
    public void SendKeys(string keys, bool isUnicode);
    public void SendKeys(string keys, ModifierKeys modifierKeys, bool isUnicode);
    public void SendKeys(string keys, ModifierKeys modifierKeys, bool isEncoded, bool isUnicode);
    public void SendKeysDeleteContent(string keysToSend);
    public void PressModifierKeys(ModifierKeys keys);
    public void ReleaseModifierKeys(ModifierKeys keys);
    public void SetValueAsEditBox(string value);
    public void SetValueAsEditBox(string value, int flag);
    public void SetValueAsEditBox(string value, bool isEncoded, int flag);
    public void SetValueAsEditBox(string value, bool isEncoded);
    public void SetValueAsComboBoxUsingQueryId(string value);
    public void SetValueAsComboBox(string value, bool useEdit);
    public void SetValueAsListBox(string value);
    public void SetValueAsListBox(String[] values, bool isQueryIdArray);
    public void SetValueAsListBox(String[] values);
    public void SetValueAsScrollBar(string value, UITestElementKind thumbType);
    public void SetValueAsSlider(string value);
    public void SetValueAsSlider(string value, int orientation);
    public bool ExpandCollapseComboBox(string buttonQueryId);
    public void Expand(ExpandCollapseOptions[] expandCollapseFlags);
    public void Expand(ExpandCollapseOptions[] expandCollapseFlags, bool isSearch);
    public void Collapse(ExpandCollapseOptions[] expandCollapseFlags);
    public void Select();
    private void DeleteContent();
    private void SelectContent();
    private bool IsFocusedElement();
    private void SingleLineDeleteContent();
    private void SingleLineSelectContent();
    public void Tap(int pointX, int pointY, bool ensureVisible);
    internal void PressAndHold(int pointX, int pointY, int duration, bool ensureVisible);
    public void DoubleTap(int pointX, int pointY, bool ensureVisible);
    public void Flick(int pointX, int pointY, double directionInDegrees, UInt32 flickLength, UInt32 duration, bool ensureVisible);
    public void Slide(int pointX, int pointY, double directionInDegrees, UInt32 slideLength, UInt32 duration, bool ensureVisible);
    public void Swipe(int pointX, int pointY, double directionInDegrees, UInt32 swipeLength, bool ensureVisible);
    public void Zoom(int point1X, int point1Y, int point2X, int point2Y, int zoomLength, bool ensureVisible);
    public void Turn(int point1X, int point1Y, int point2X, int point2Y, double directionInDegrees, bool ensureVisible);
    private void ExecuteTouchAction(Action touchAction, bool ensureVisible);
    public static ControlStates GetWindowState(IntPtr windowHandle);
    public void SetWindowState(ControlStates stateToSet);
    public void WaitForReady(int millisecondsTimeout);
    public void GetClickablePoint(Int32& pointX, Int32& pointY);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021")]
[SuppressMessageAttribute("Microsoft.Naming", "CA1704")]
public void GetBoundingRectangle(Int32& x, Int32& y, Int32& width, Int32& height);
    public void CheckRadioButton();
    public void Check();
    public void Uncheck();
    public void CheckIndeterminate();
    public void CheckTreeItem();
    public void UncheckTreeItem();
    public void SetFocus();
    public void EnsureVisible(int offsetX, int offsetY);
    public void EnsureVisible(int offsetX, int offsetY, int scrollFlag);
    public static void Delay(int duration);
    internal static void SetPlaybackProperty(PlaybackParameter parameter, object value);
    internal static object GetPlaybackProperty(PlaybackParameter parameter);
    internal static void SkipStep();
    internal static void ResetSkipStep();
    private static void InitSkipEventObject();
    private static void DisposeSkipEventObject();
    private static string GetModifiedQueryId(string queryId, bool addFindAll);
    private static bool IsCoreTechnologyMsaa(IList`1<string> technologyAttributes);
    private Int32[] GetPlaybackOptionAsArray(UITechnologyElementOption playbackOption);
    private int GetOption(UITechnologyElementOption playbackOption);
    private Int32[] GetDefaultOptionArray(UITechnologyElementOption playbackOption);
    private int GetDefaultOption(UITechnologyElementOption playbackOption);
    private void SetScrollOptionsForAction();
    private bool BringUpIfTopWindow();
    private int GetCheckOptionsCheckedListBox();
    private void SetValueAsComboBoxInternal(string value, SetValueAsComboBoxType setValueAsComboBoxType);
    private static void CheckPlaybackCancelled();
    private bool get_IsIETitleBarwithInvalidRect();
    public static ScreenElement FindFromWindowHandle(IntPtr windowHandle);
    internal static bool FindNTopWindows(string topQueryId, Stopwatch stopWatch, int winNumber, Object[]& retVal);
    [SuppressMessageAttribute("Microsoft.MSInternal", "CA908:UseApprovedGenericsForPrecompiledAssemblies")]
private static ScreenElement FindFromMultipleWindows(String[] queryIds, int orderVal);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021")]
public static ScreenElement FindFromPartialQueryId(string queryId);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021")]
private static ScreenElement FindFromPartialQueryId(string queryId, bool resetSkipStep);
    private static bool TryFindScreenElement(ScreenElement parentElement, string queryIdString, string expandableParentQueryIdString, ScreenElement& element);
    internal static ScreenElement FindScreenElementByExpandingUI(ScreenElement parentElement, string queryIdString);
    private static void ExpandScreenElement(ScreenElement element, ScreenElement parentElement, SingleQueryId singleQid, bool firstExpansion, Boolean& expanded);
    internal static ILastInvocationInfo get_LastSearchInfo();
    internal static void set_LastSearchInfo(ILastInvocationInfo value);
    [CompilerGeneratedAttribute]
internal static bool get_TopLevelWindowSinglePassSearch();
    [CompilerGeneratedAttribute]
internal static void set_TopLevelWindowSinglePassSearch(bool value);
    public ScreenElement FindScreenElement(string queryId);
    public ScreenElement FindScreenElement(string queryId, int depth);
    private ScreenElement FindScreenElement(string queryId, bool resetSkipStep);
    private ScreenElement FindScreenElement(string queryId, int depth, bool resetSkipStep);
    public ScreenElement[] FindAllScreenElement(string queryId, int depth, bool singleQueryId, bool throwException);
    private ScreenElement[] FindAllScreenElement(string queryId, int depth, bool singleQueryId, bool throwException, bool resetSkipStep);
    private static ScreenElement FindTopLevelWindowHelper(string queryId);
    private static void ShowIfMinimized(IntPtr windowHandle);
    private static ScreenElement FindScreenElementInSinglePass(ScreenElement parentElement, string queryId);
    private static void WPFCollapseMenu(ScreenElement element, ScreenElement parentElement);
    private bool IsPopUpMenu(UITechnologyElement element);
    private static bool IsPlaybackCancelledComException(COMException exception);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Playback.ScreenElementUtility : object {
    internal static int SWP_NOACTIVATE;
    internal static int SWP_NOCOPYBITS;
    internal static int SWP_NOMOVE;
    internal static int SWP_NOOWNERZORDER;
    internal static int SWP_NOREDRAW;
    internal static int SWP_NOREPOSITION;
    internal static int SWP_NOSENDCHANGING;
    internal static int SWP_NOSIZE;
    internal static int SWP_NOZORDER;
    internal static int SWP_SHOWWINDOW;
    private static string IETitleBarClassName;
    private static UInt32 MONITOR_DEFAULTTOPRIMARY;
    private static int CLICKABLE_POINT_OFFSET;
    private static void GetPlayback(Object& playback);
    internal static IRPFPlayback CreatePlaybackInstance();
    public static void PerformActionOnIETitleBar(ScreenElement element, MouseActionType actionType, MouseButtons button, ModifierKeys modifierKeys, IntPtr windowHandle, int duration, int speed);
    internal static string GetKeyboardLayout();
    internal static bool ControlWindowUsesConfiguredIMELanguage(IScreenElement element);
    internal static ILastInvocationInfo GetStepInfo(IRPFPlayback playback);
    internal static short GetKeyState(int keyCode);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.SendKeysFlags : Enum {
    public int value__;
    public static SendKeysFlags NONE;
    public static SendKeysFlags DONT_SETFOCUS;
}
[ComVisibleAttribute("True")]
internal class Microsoft.VisualStudio.TestTools.UITest.Playback.ThreadInfo : object {
    private Dictionary`2<ThreadState, ThreadState> threadStateToIntDictionary;
    private Dictionary`2<ThreadWaitReason, ThreadWaitReason> threadWaitReasonToIntDictionary;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
public sealed virtual int GetThreadWaitReason(int processId, int threadId, Int32& threadStateRetVal);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Playback.ThreadUtility : object {
    private static ApartmentState playbackThreadApartmentState;
    private static int playbackThreadId;
    private static ThreadInfo threadInfo;
    internal static object ThreadInfoObject { get; }
    private static ThreadUtility();
    internal static void CacheThreadInfo();
    internal static void SetThreadInfo(IRPFPlayback playback);
    internal static void ThrowExceptionIfCrossThreadAccess(IRPFPlayback playback, IScreenElement uiElement);
    internal static bool DangerousFixPlaybackThreadAccess(IRPFPlayback playback, IRPFPlayback& rpfPlayback);
    internal static object get_ThreadInfoObject();
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Playback.TypeUnicodeConstants : Enum {
    public int value__;
    public static TypeUnicodeConstants TYPE_UNICODE_ENABLE;
    public static TypeUnicodeConstants TYPE_UNICODE_DISABLE;
    public static TypeUnicodeConstants TYPE_UNICODE_AUTOMATIC;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Playback.Utility : object {
    private static Regex attributesRegEx;
    private static char AttributeSeparator;
    private static Utility();
    internal static void RestoreMinimizedWindow(IUITechnologyElement element);
    internal static MouseButtons ConvertToPlaybackMouseButton(MouseButtons button);
    internal static string ConvertModiferKeysToString(ModifierKeys modifierKeys);
    internal static string ConvertModiferKeysToString(ModifierKeys modifierKeys, string text);
    internal static int DisablePlaybackLoggingContent(IRPFPlayback playback);
    internal static int LaunchImmersiveApplication(IRPFPlayback playback, string strAppModelId);
    internal static void TerminateImmersiveApplication(IRPFPlayback playback, string strPackageFullName, int processId);
    internal static bool IsMenuContainer(ScreenElement element);
    internal static bool IsExpandable(ScreenElement element, String& expandableControlType);
}
