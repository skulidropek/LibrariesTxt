[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration {
}
[CompilerGeneratedAttribute]
[GuidAttribute("26AAB78C-4A60-49D6-AF3B-3C35BC93365D")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupConfiguration2 {
    public void _VtblGap1_1();
    public abstract virtual ISetupInstance GetInstanceForCurrentProcess();
}
[CompilerGeneratedAttribute]
[GuidAttribute("B41463C3-8866-43B5-BC33-2B0676F7F42E")]
[InterfaceTypeAttribute("1")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.ISetupInstance {
    public void _VtblGap1_3();
    public abstract virtual string GetInstallationPath();
}
[CompilerGeneratedAttribute]
[GuidAttribute("42843719-DB4C-46C2-8E7C-64F1816EFD5B")]
[CoClassAttribute("System.Object")]
[TypeIdentifierAttribute]
public interface Microsoft.VisualStudio.Setup.Configuration.SetupConfiguration {
}
public interface Microsoft.VisualStudio.TestTools.StoreUtility.Telemetry.ITelemetryLogger {
    public abstract virtual void PostUserTaskEvent(string eventName, string result, IDictionary`2<string, object> properties);
    public abstract virtual void PostAssetEvent(string eventName, string assetId, IDictionary`2<string, object> properties);
}
internal class Microsoft.VisualStudio.TestTools.StoreUtility.Telemetry.NonVsTelemetryLogger : object {
    private TelemetrySession telemetrySession;
    private static string GlobalPolicyOptedInRegistryPath;
    private static string LocalOptedInRegistryPath;
    private static string OptedInRegistryKeyName;
    private static int UserIsOptedInValue;
    public void Dispose();
    public sealed virtual void PostUserTaskEvent(string eventName, string result, IDictionary`2<string, object> properties);
    public sealed virtual void PostAssetEvent(string eventName, string assetId, IDictionary`2<string, object> properties);
    private void PostEventWithProperties(TelemetryEvent telemetryEvent, IDictionary`2<string, object> properties);
    private bool GetOptinStatus();
}
public static class Microsoft.VisualStudio.TestTools.StoreUtility.Telemetry.TelemetryConstants : object {
    public static string RnPSessionInfo;
    public static string CodedUiTestPackageLoad;
    public static string CodedUiTestProjectCreate;
    public static string CodedUiTestProjectOpen;
    public static string CodedUiTestBuilderUse;
}
public static class Microsoft.VisualStudio.TestTools.StoreUtility.Telemetry.TelemetryHelper : object {
    private static ITelemetryLogger vsLogger;
    private static ITelemetryLogger nonVsLogger;
    private static ITelemetryLogger NonVsLogger { get; }
    private static ITelemetryLogger VsLogger { get; }
    public static void PostNonVsUserTaskEvent(string eventName, string telemetryResult, IDictionary`2<string, object> properties);
    public static void PostVsUserTaskEvent(string eventName, string telemetryResult, IDictionary`2<string, object> properties);
    public static void PostNonVsAssetEvent(string eventName, string assetId, IDictionary`2<string, object> properties);
    public static void PostVsAssetEvent(string eventName, string assetId, IDictionary`2<string, object> properties);
    public static void DisposeNonVsTelemetrySession();
    private static void LogError(Exception ex);
    private static ITelemetryLogger get_NonVsLogger();
    private static ITelemetryLogger get_VsLogger();
}
internal class Microsoft.VisualStudio.TestTools.StoreUtility.Telemetry.VsTelemetryLogger : object {
    public sealed virtual void PostUserTaskEvent(string eventName, string result, IDictionary`2<string, object> properties);
    public sealed virtual void PostAssetEvent(string eventName, string assetId, IDictionary`2<string, object> properties);
    private void PostEventWithProperties(TelemetryEvent telemetryEvent, IDictionary`2<string, object> properties);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.BrowserTypeEnum : Enum {
    public int value__;
    public static BrowserTypeEnum None;
    public static BrowserTypeEnum IE;
    public static BrowserTypeEnum Chrome;
    public static BrowserTypeEnum Firefox;
    public static BrowserTypeEnum Safari;
    public static BrowserTypeEnum Opera;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.Highlighter : object {
    private Popup leftLine;
    private Popup topLine;
    private Popup bottomLine;
    private Popup rightLine;
    private Popup[] allLines;
    private static int dpiX;
    private static int dpiY;
    private static int LOGPIXELSX;
    private static int LOGPIXELSY;
    private static int BorderWidth;
    unknown bool IsVisible {public set; }
    private static Highlighter();
    internal static IntPtr GetDC(IntPtr hwnd);
    internal static int ReleaseDC(IntPtr hwnd, IntPtr hdc);
    internal static int GetDeviceCaps(IntPtr hdc, int index);
    public void Highlight(int x, int y, int width, int height);
    public void Hide();
    public void set_IsVisible(bool value);
    public void ProcessUIEvents();
    public sealed virtual void Dispose();
    private void Initialize();
    private Rectangle GetLargestIntersect(Rectangle rect);
    private static double PixelToPointDimention(double pixel, bool xAxis);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.PlaybackExceptionIndex : Enum {
    public int value__;
    public static PlaybackExceptionIndex ControlNotFound;
    public static PlaybackExceptionIndex FPAOnBlockedControl;
    public static PlaybackExceptionIndex PlaybackFailureException;
    public static PlaybackExceptionIndex DecodingFailedException;
    public static PlaybackExceptionIndex UITestControlNotAvailableException;
    public static PlaybackExceptionIndex UITestControlNotVisibleException;
    public static PlaybackExceptionIndex ANSDisabledControl;
    public static PlaybackExceptionIndex FailedToLaunchApp;
    public static PlaybackExceptionIndex FPAHiddenControl;
    public static PlaybackExceptionIndex TechnologyNotSupported;
    public static PlaybackExceptionIndex PlaybackExceptionArrayLength;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.PluginEnum : Enum {
    public int value__;
    public static PluginEnum None;
    public static PluginEnum IePlugin;
    public static PluginEnum MsaaPlugin;
    public static PluginEnum UiaPlugin;
    public static PluginEnum WinFormPlugin;
    public static PluginEnum SilverLight;
    public static PluginEnum OtherPlugin;
    public static PluginEnum UiaWidget;
    public static PluginEnum XBrowserPlugin;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.RecordingExceptionIndex : Enum {
    public int value__;
    public static RecordingExceptionIndex RebootException;
    public static RecordingExceptionIndex NetworkException;
    public static RecordingExceptionIndex ControlNotAvailable;
    public static RecordingExceptionIndex ErrorActionTimeout;
    public static RecordingExceptionIndex TechnologyNotSupported;
    public static RecordingExceptionIndex GenericRecorderException;
    public static RecordingExceptionIndex RecordingExceptionArrayLength;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.RecordingState : Enum {
    public int value__;
    public static RecordingState None;
    public static RecordingState Running;
    public static RecordingState Stopped;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.SessionResult : Enum {
    public int value__;
    public static SessionResult Fail;
    public static SessionResult Pass;
    public static SessionResult PassWithFailures;
    public static SessionResult Unknown;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.SessionType : Enum {
    public int value__;
    public static SessionType Recording;
    public static SessionType Playback;
    public static SessionType None;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Common.SqmSessionInfoTuple : Enum {
    public int value__;
    public static SqmSessionInfoTuple SessionType;
    public static SqmSessionInfoTuple ActionCount;
    public static SqmSessionInfoTuple SessionResult;
    public static SqmSessionInfoTuple IeControlCount;
    public static SqmSessionInfoTuple UiaControlCount;
    public static SqmSessionInfoTuple MsaaControlCount;
    public static SqmSessionInfoTuple OtherControlCount;
    public static SqmSessionInfoTuple SessionTime;
    public static SqmSessionInfoTuple PlaybackErrorCount;
    public static SqmSessionInfoTuple RecordingErrorCount;
    public static SqmSessionInfoTuple WinFormControlCount;
    public static SqmSessionInfoTuple SilverlightControlCount;
    public static SqmSessionInfoTuple UiaWidgetControlCount;
    public static SqmSessionInfoTuple UnknownNameErrorCount;
    public static SqmSessionInfoTuple IsRemote;
    public static SqmSessionInfoTuple BrowserType;
    public static SqmSessionInfoTuple WinXamlControlCount;
    public static SqmSessionInfoTuple DirectUIControlCount;
    public static SqmSessionInfoTuple Plugin;
    public static SqmSessionInfoTuple SqmSessionInfoTupleLength;
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.SqmUtility : object {
    private static PluginEnum sqmPluginInfo;
    private static PluginEnum accumulateSqmPluginInfo;
    private static BrowserTypeEnum s_sqmBrowserTypeInfo;
    private static UInt32 ieElementCount;
    private static UInt32 msaaElementCount;
    private static UInt32 winFormElementCount;
    private static UInt32 uiaElementCount;
    private static UInt32 winXamlElementCount;
    private static UInt32 directUIElementCount;
    private static UInt32 uiaWidgetElementCount;
    private static UInt32 otherElementCount;
    private static UInt32 unknownNameErrorCount;
    private static UInt32 actionCount;
    private static UInt32[] playbackExceptions;
    private static UInt32[] recordingExceptions;
    private static SessionResult intermediateResult;
    private static SessionType sessionType;
    private static bool isRemote;
    private static PlaybackExceptionBitmap sqmPlaybackExceptionInfo;
    private static UInt32[] sqmSessionInfo;
    private static UInt32[] accumulateSqmSessionInfo;
    private static RecordingExceptionBitmap sqmRecordingExceptionInfo;
    private static Stopwatch watch;
    private static bool isInitialized;
    private static RecordingState recorderState;
    internal static PluginEnum SqmPluginInfo { get; internal set; }
    internal static BrowserTypeEnum SqmBrowserTypeInfo { get; internal set; }
    internal static UInt32 IeElementCount { get; internal set; }
    internal static UInt32 MsaaElementCount { get; internal set; }
    internal static UInt32 WinFormElementCount { get; internal set; }
    internal static UInt32 UiaElementCount { get; internal set; }
    internal static UInt32 WinXamlElementCount { get; internal set; }
    internal static UInt32 DirectUIElementCount { get; internal set; }
    internal static UInt32 UiaWidgetElementCount { get; internal set; }
    internal static UInt32 OtherElementCount { get; internal set; }
    internal static UInt32 ActionCount { get; internal set; }
    internal static UInt32[] PlayBackException { get; internal set; }
    internal static UInt32[] RecordingExceptions { get; internal set; }
    internal static UInt32 UnknownErrorCount { get; internal set; }
    internal static SessionResult IntermediateResult { get; internal set; }
    internal static RecordingState RecordingState { get; internal set; }
    private static SqmUtility();
    public static void StartSession(SessionType sessionType);
    public static void StartSession(SessionType sessionType, bool isRemote);
    public static void StopSession(SessionResult result, bool setDataPoint);
    public static void StopSession(IDictionary`2<string, object> remoteSqmSessionInfo);
    public static void ResetData();
    public static IDictionary`2<string, object> GetRemoteSessionInfo();
    private static void SetRecordingException();
    private static void SetPlaybackException();
    private static void ResetDataInternal();
    private static void AccumulateSqmSessionInfo();
    private static void PostSessionInfoEvent(UInt32[] sessionInfo, string result);
    internal static PluginEnum get_SqmPluginInfo();
    internal static void set_SqmPluginInfo(PluginEnum value);
    internal static BrowserTypeEnum get_SqmBrowserTypeInfo();
    internal static void set_SqmBrowserTypeInfo(BrowserTypeEnum value);
    internal static UInt32 get_IeElementCount();
    internal static void set_IeElementCount(UInt32 value);
    internal static UInt32 get_MsaaElementCount();
    internal static void set_MsaaElementCount(UInt32 value);
    internal static UInt32 get_WinFormElementCount();
    internal static void set_WinFormElementCount(UInt32 value);
    internal static UInt32 get_UiaElementCount();
    internal static void set_UiaElementCount(UInt32 value);
    internal static UInt32 get_WinXamlElementCount();
    internal static void set_WinXamlElementCount(UInt32 value);
    internal static UInt32 get_DirectUIElementCount();
    internal static void set_DirectUIElementCount(UInt32 value);
    internal static UInt32 get_UiaWidgetElementCount();
    internal static void set_UiaWidgetElementCount(UInt32 value);
    internal static UInt32 get_OtherElementCount();
    internal static void set_OtherElementCount(UInt32 value);
    internal static UInt32 get_ActionCount();
    internal static void set_ActionCount(UInt32 value);
    internal static UInt32[] get_PlayBackException();
    internal static void set_PlayBackException(UInt32[] value);
    internal static UInt32[] get_RecordingExceptions();
    internal static void set_RecordingExceptions(UInt32[] value);
    internal static UInt32 get_UnknownErrorCount();
    internal static void set_UnknownErrorCount(UInt32 value);
    internal static SessionResult get_IntermediateResult();
    internal static void set_IntermediateResult(SessionResult value);
    internal static RecordingState get_RecordingState();
    internal static void set_RecordingState(RecordingState value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.UITestSchemaValidator : object {
    internal static EventHandler`1<ValidationResult> OnSchemaValidationCompleted;
    public static void ValidateUITestFileStream(Stream uitestStream, Stream xsdStream);
    private static void UITestSchemaValidationHandler(object sender, ValidationEventArgs e);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Common.UITestSerializationHelper : object {
    public static object Deserialize(object xmlSerializer, Stream reader);
    public static bool IsVS2010Beta2Format(Stream reader);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.ValidationResult : EventArgs {
    [CompilerGeneratedAttribute]
private int <Severity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    internal int Severity { get; internal set; }
    internal string Message { get; internal set; }
    internal Exception Exception { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_Severity();
    [CompilerGeneratedAttribute]
internal void set_Severity(int value);
    [CompilerGeneratedAttribute]
internal string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.DispatcherUtilities : object {
    private static DispatcherOperationCallback exitFrameCallback;
    private static DispatcherUtilities();
    public static void ProcessEventsOnUIThread();
    private static object ExitFrame(object state);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.EqtTrace : object {
    private static TraceSwitch s_traceLevelSwitch;
    private static TraceSwitch s_traceLevelSwitchForUITest;
    private static string s_processName;
    private static int s_processId;
    private static int s_timesCanWriteToSystemLog;
    public static bool UseTraceListenersDirectly;
    private static string SystemEventLogSource;
    private static string traceListenerGUID;
    private static string DiagnosticsSubKey;
    private static string EnableTracingName;
    private static string TraceLevelName;
    public static TraceLevel TraceLevel { get; public set; }
    private static EqtTrace();
    private static T GetRegistryValue(RegistryKey regKeyPath, string subKeyPath, string registryName, T defaultValue);
    public static TraceLevel get_TraceLevel();
    public static void set_TraceLevel(TraceLevel value);
    public static bool ShouldTrace(TraceLevel traceLevel);
    [ConditionalAttribute("TRACE")]
public static void Error(string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Error(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void ErrorAssert(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Error(Exception exceptionToTrace);
    [ConditionalAttribute("TRACE")]
public static void Warning(string message);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Warning(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void WarningUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Info(string message);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Info(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void InfoUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string message);
    [ConditionalAttribute("TRACE")]
public static void Verbose(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseIf(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnless(bool condition, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void VerboseUnlessAlterTrace(bool condition, TraceLevel bumpLevel, string format, Object[] args);
    private static string FormatException(Exception exceptionToTrace);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031")]
private static string GetProcessName();
    private static int GetProcessId();
    private static void WriteAtLevel(TraceLevel level, string message);
    private static void WriteAtLevel(TraceLevel level, string format, Object[] args);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031")]
private static void WriteLine(TraceLevel level, string message);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031")]
private static void LogIgnoredException(Exception e);
    private static void WriteEventLogEntry(string message, EventLogEntryType logType);
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.EventLogEntryType : Enum {
    public int value__;
    public static EventLogEntryType Error;
    public static EventLogEntryType Warning;
    public static EventLogEntryType Information;
    public static EventLogEntryType SuccessAudit;
    public static EventLogEntryType FailureAudit;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.HtmlTraceListener : TextWriterTraceListener {
    private static string LogHeader;
    private static string VerboseTagName;
    private static string InfoTagName;
    private static string WarningTagName;
    private static string ErrorTagName;
    public HtmlTraceListener(string fileName);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    private static string GetHtmlMessage(string message);
    private static string GetMessageTagName(string message);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.ImmersiveSwitch.SFIClient : object {
    private static SFIClient s_Instance;
    private Process m_sfiProcess;
    [CompilerGeneratedAttribute]
private SFICommunicationChannel <CommunicationChannel>k__BackingField;
    private bool m_sfiProcessActive;
    private static int CHANNEL_TIMEOUT;
    private static string UITEST_IMMERSIVE_SWITCHER_PROCESS_NAME;
    private static string REMOTE_RECORDER_PROCESS_NAME;
    private static bool s_initialised;
    private static string DefaultLogDirectory;
    private static string MtmLogDirectory;
    private SFICommunicationChannel CommunicationChannel { get; private set; }
    public static SFIClient Instance { get; }
    private static SFIClient();
    [CompilerGeneratedAttribute]
private SFICommunicationChannel get_CommunicationChannel();
    [CompilerGeneratedAttribute]
private void set_CommunicationChannel(SFICommunicationChannel value);
    public static SFIClient get_Instance();
    public void Initialise();
    public void Cleanup();
    public bool SwitchFromImmersiveToWindow(IntPtr windowHandle);
    public bool DrawHighlightStart(Rectangle rectangle);
    public bool DrawHighlightStop();
    private bool SendRequest(SFI_REQUEST request, int timeout);
    private void InitialiseSFIServer();
    private void StartSFIProcess();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.ImmersiveSwitch.SFICommunicationChannel : object {
    private static string AGENT_TO_SFI_SHARED_MEMORY_NAME;
    private static string AGENT_NOTIFY_SYNC_EVENT_NAME;
    private static string AGENT_ACK_SYNC_EVENT_NAME;
    private static string AGENT_PING_SYNC_EVENT_NAME;
    private static int BUFFER_SIZE;
    internal static UInt32 WAIT_TIMEOUT;
    [CompilerGeneratedAttribute]
private SharedMemoryManager <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandle <NotifyHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandle <AckHandle>k__BackingField;
    private SharedMemoryManager Memory { get; private set; }
    private EventHandle NotifyHandle { get; private set; }
    private EventHandle AckHandle { get; private set; }
    internal SFICommunicationChannel(bool createNewChannel);
    [CompilerGeneratedAttribute]
private SharedMemoryManager get_Memory();
    [CompilerGeneratedAttribute]
private void set_Memory(SharedMemoryManager value);
    [CompilerGeneratedAttribute]
private EventHandle get_NotifyHandle();
    [CompilerGeneratedAttribute]
private void set_NotifyHandle(EventHandle value);
    [CompilerGeneratedAttribute]
private EventHandle get_AckHandle();
    [CompilerGeneratedAttribute]
private void set_AckHandle(EventHandle value);
    internal void SendRequest(SFI_REQUEST data);
    internal bool WaitForAck(int timeout, SFI_ERROR_CODE& ackError);
    internal int WaitForRequest(int timeout);
    internal SFI_REQUEST ReadRequestData();
    internal bool SendAck(SFI_REQUEST channelData);
    internal void SendExitSignal();
    internal void DestroyMemory();
    internal void CloseChannel();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.NativeMethods : object {
    internal static int GCL_HICONSM;
    internal static int WS_MINIMIZE;
    internal static int WS_CAPTION;
    internal static int WS_EX_LAYERED;
    internal static int WS_EX_TRANSPARENT;
    internal static int WS_EX_APPWINDOW;
    internal static int WS_EX_TOOLWINDOW;
    internal static int WS_EX_TOPMOST;
    internal static int WS_EX_LAYOUTRTL;
    internal static int WS_EX_RIGHT;
    internal static int WS_EX_RTLREADING;
    internal static int ToolBarMinBtnIndex;
    internal static int ToolBarMaxBtnIndex;
    internal static int ToolBarHelpBtnIndex;
    internal static int ToolBarCloseBtnIndex;
    internal static int WindowsLowLevelMouseHookId;
    internal static int WindowsLowLevelKeyboardHookId;
    internal static int DefaultSendMessageTimeout;
    internal static int OBJID_WINDOW;
    internal static int OBJID_CLIENT;
    internal static int MaxWindowTextLength;
    internal static int KeyStatePressed;
    internal static string IEControlClassName;
    internal static Guid AccessibleGuid;
    private static string WindowsHtmlMessage;
    private static Nullable`1<bool> is64BitOperatingSystem;
    private static UInt32 WindowsHtmlMessageId;
    internal static int WM_HOTKEY;
    private static Dictionary`2<string, string> deviceToDriveMap;
    private static int MaxPath;
    private static string DirectorySeparator;
    private static object lockObject;
    private static int WM_NULL;
    private static int TOKEN_QUERY;
    private static int TokenElevationTypeClass;
    private static int TokenElevationTypeFull;
    internal static UInt32 SWP_NOSIZE;
    internal static UInt32 SWP_NOMOVE;
    internal static UInt32 SWP_NOACTIVATE;
    internal static int ERROR_ACCESS_DENIED;
    internal static Dictionary`2<string, string> DeviceToDriveMap { get; }
    internal static bool Is64BitOperatingSystem { get; }
    private static NativeMethods();
    internal static LowLevelHookHandle SetWindowsHookEx(int idHook, LowLevelHookProc lpfn, IntPtr hInstance, UInt32 threadId);
    internal static IntPtr FindWindowEx(IntPtr windowHandle1, IntPtr windowHandle2, string lpszClass, string lpszWindow);
    internal static bool UnhookWindowsHookEx(IntPtr idHook);
    internal static IntPtr CallNextHookEx(LowLevelHookHandle idHook, int nCode, IntPtr wParam, IntPtr lParam);
    internal static IntPtr GetKeyboardLayout(UInt32 idThread);
    internal static bool GetKeyboardState(Byte[] lpKeyState);
    internal static short GetAsyncKeyState(int vKey);
    internal static int ToUnicodeEx(UInt32 wVirtKey, UInt32 wScanCode, Byte[] lpKeyState, StringBuilder pwszBuff, int cchBuff, UInt32 wFlags, IntPtr dwhkl);
    internal static bool PeekMessage(MSG& msg, IntPtr hwnd, int nMsgFilterMin, int nMsgFilterMax, int wRemoveMsg);
    internal static IntPtr DispatchMessage(MSG& msg);
    internal static UInt32 GetProcessImageFileName(IntPtr hProcess, StringBuilder lpImageFileName, UInt32 nSize);
    internal static IntPtr OpenProcess(ProcessAccessRights dwDesiredAccess, bool bInheritHandle, UInt32 dwProcessId);
    internal static UInt32 QueryDosDevice(string lpDeviceName, StringBuilder lpTargetPath, UInt32 ucchMax);
    public static UInt32 GetVersionEx(OSVERSIONINFO& lpVersionInfo);
    internal static IntPtr GetDC(IntPtr hwnd);
    internal static int ReleaseDC(IntPtr hwnd, IntPtr hdc);
    internal static int GetDeviceCaps(IntPtr hdc, int index);
    internal static string GetProcessFileName(int processId);
    private static string ConvertDevicePathToWindowsPath(string processName);
    internal static Dictionary`2<string, string> get_DeviceToDriveMap();
    private static String[] GetNetworkDevicePaths();
    [SuppressMessageAttribute("Microsoft.Portability", "CA1901:PInvokeDeclarationsShouldBePortable")]
internal static IntPtr WindowFromPoint(POINT pt);
    internal static UInt32 GetWindowThreadProcessId(IntPtr hWnd, UInt32& dwProcessId);
    internal static IntPtr GetForegroundWindow();
    internal static bool IsWindow(IntPtr hWnd);
    internal static bool IsChild(IntPtr hWndParent, IntPtr hWnd);
    internal static bool ShowWindow(IntPtr hWnd, WindowShowStyle nCmdShow);
    internal static IntPtr GetFocus();
    internal static IntPtr SetFocus(IntPtr hWnd);
    internal static bool DestroyIcon(IntPtr handle);
    internal static bool GetTitleBarInfo(IntPtr hwnd, TITLEBARINFO& pti);
    public static UInt32 RegOpenKeyEx(UIntPtr hKey, string lpSubKey, UInt32 ulOptions, int samDesired, UIntPtr& phkResult);
    public static UInt32 RegCloseKey(UIntPtr hkey);
    public static UInt32 RegQueryInfoKey(UIntPtr hKey, StringBuilder lpClass, UInt32& lpcClass, IntPtr lpReserved, UInt32& lpcSubKeys, UInt32& lpcbMaxSubKeyLen, UInt32& lpcbMaxClassLen, UInt32& lpcValues, UInt32& lpcMaxValueNameLen, UInt32& lpcMaxValueLen, IntPtr lpcbSecurityDescriptor, FILETIME& lpftLastWriteTime);
    internal static bool GetWindowPlacement(IntPtr hwnd, WINDOWPLACEMENT& ptr);
    internal static bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);
    public static bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, UInt32 uFlags);
    internal static bool SetForegroundWindow(IntPtr hWnd);
    internal static IntPtr GetDesktopWindow();
    internal static UInt32 RegisterWindowMessage(string messageString);
    internal static bool GetWindowRect(IntPtr hWnd, RECT& lpRect);
    internal static IntPtr CreateRoundRectRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
    internal static int SetWindowRgn(IntPtr hWnd, IntPtr hRgn, bool redraw);
    internal static IntPtr GetAncestor(IntPtr hwnd, GetAncestorFlag gaFlags);
    private static bool OpenProcessToken(IntPtr processHandle, UInt32 desiredAccess, IntPtr& tokenHandle);
    private static bool GetTokenInformation(IntPtr tokenHandle, UInt32 tokenInformationClass, UInt32& tokenInformation, UInt32 tokenInformationLength, UInt32& returnLength);
    internal static bool IsProcessElevated(UInt32 processId);
    internal static bool IsProcessElevated(IntPtr hwnd);
    internal static IntPtr GetParent(IntPtr hwnd);
    internal static bool IsIconic(IntPtr hWnd);
    internal static bool IsWindowVisible(IntPtr hWnd);
    internal static bool IsWindowEnabled(IntPtr hWnd);
    internal static bool IsZoomed(IntPtr hWnd);
    internal static IntPtr SendMessageTimeout(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam, SendMessageTimeoutFlags fuFlags, UInt32 uTimeout, IntPtr& lpdwResult);
    internal static IntPtr SendMessage(IntPtr hWnd, UInt32 wMsg, IntPtr wParam, StringBuilder builder);
    internal static bool EnumChildWindows(IntPtr hwndParent, EnumWindowsProc lpEnumFunc, IntPtr& lParam);
    internal static IntPtr SetWinEventHook(AccessibleEvents eventMin, AccessibleEvents eventMax, IntPtr eventHookAssemblyHandle, WinEventProc eventHookHandle, UInt32 processId, UInt32 threadId, SetWinEventHookParameter parameterFlags);
    internal static bool UnhookWinEvent(IntPtr eventHookHandle);
    internal static IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, UInt32 dwFlags);
    internal static bool FreeLibrary(IntPtr hModule);
    internal static int LoadString(IntPtr hInstance, UInt32 uID, StringBuilder lpBuffer, int nBufferMax);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2205:UseManagedEquivalentsOfWin32Api")]
public static ushort GetUserDefaultUILanguage();
    [SuppressMessageAttribute("Microsoft.Portability", "CA1901:PInvokeDeclarationsShouldBePortable")]
internal static IntPtr FindResource(IntPtr hModule, UInt32 lpName, UInt32 lpType);
    internal static IntPtr LoadResource(IntPtr hModule, IntPtr hResInfo);
    internal static UInt32 SizeofResource(IntPtr hModule, IntPtr hResource);
    internal static bool CloseHandle(IntPtr hObject);
    internal static int AccessibleObjectFromWindow(IntPtr hWnd, int dwObjectID, Guid& riid, IAccessible& pAcc);
    internal static int AccessibleObjectFromEvent(IntPtr windowHandle, int objectID, int childID, IAccessible& accessibleObject, Object& childObject);
    internal static IntPtr IELaunchURL(string url, ProcessInformation& pinfo, IntPtr ptr);
    internal static bool GetGUIThreadInfo(UInt32 idThread, GUITHREADINFO& lpgui);
    internal static bool EnumWindows(EnumWindowsProc callBack, IntPtr param);
    private static bool IsWow64Process(IntPtr hProcess, Boolean& lpSystemInfo);
    internal static void GetNativeSystemInfo(SYSTEM_INFO& lpSystemInfo);
    internal static bool Wow64DisableWow64FsRedirection(IntPtr& oldValue);
    internal static bool Wow64RevertWow64FsRedirection(IntPtr oldValue);
    public static int DRMIsWindowProtected(IntPtr windowHandle, Boolean& isProtected);
    internal static bool IsProcess64Bit(UInt32 processId);
    internal static IntPtr SetActiveWindow(IntPtr hWnd);
    internal static bool get_Is64BitOperatingSystem();
    internal static IntPtr WindowFromAccessibleObject(IAccessible pAcc);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1806")]
internal static UInt32 GetWindowProcessId(IntPtr windowHandle);
    internal static IntPtr GetClassLongPtr(IntPtr windowHandle, int nIndex);
    internal static IntPtr SetWindowLongPtr(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    internal static string GetWindowText(IntPtr winHandle);
    private static KeyStates GetKeyState(Keys virtualKeyCode);
    internal static bool IsKeyStateDown(Keys virtualKeyCode);
    internal static UInt32 MapVirtualKey(Keys keys, VirtualKeyMapType mapType);
    internal static IAccessible AccessibleObjectFromWindow(IntPtr windowHandle, int objectId);
    internal static IAccessible AccessibleObjectFromWindow(IntPtr windowHandle);
    internal static string GetClassName(IntPtr windowHandle);
    internal static T GetDocumentFromWindowHandle(IntPtr windowHandleOfIE);
    private static KeyStates ConvertToKeyStates(short keyStateMask);
    public static int GetWindowLong(IntPtr hWnd, GWLParameter index);
    public static bool IsWindowResponding(IntPtr windowHandle);
    internal static int SetWindowLong(IntPtr windowHandle, GWLParameter nIndex, int dwNewLong);
    internal static Image GetCurrenProcessIcon();
    internal static Image GetCurrenProcessIconAsIs();
    private static UInt32 WindowFromAccessibleObject(IAccessible pAcc, IntPtr& hWnd);
    private static short GetKeyState(int nVirtKey);
    private static int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);
    private static UInt32 MapVirtualKey(UInt32 code, UInt32 mapType);
    internal static UInt32 MapVirtualKeyEx(UInt32 uCode, UInt32 uMapType, IntPtr dwhkl);
    private static int GetWindowText(IntPtr windowHandle, StringBuilder windowText, int maxCharCount);
    private static object ObjectFromLresult(IntPtr msgcallResult, Guid refGuid, IntPtr resultRef);
    private static int SetWindowLong32(HandleRef hWnd, int nIndex, int dwNewLong);
    [SuppressMessageAttribute("Microsoft.Interoperability", "CA1400:PInvokeEntryPointsShouldExist")]
private static IntPtr SetWindowLongPtr64(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    private static int GetClassLongPtr32(IntPtr hWnd, int nIndex);
    private static int GetWindowLong32(IntPtr windowHandle, GWLParameter nIndex);
    internal static IntPtr GetWindow(IntPtr hwnd, GetWindowFlag uCmd);
    private static IntPtr GetWindowLongPtr64(IntPtr windowHandle, GWLParameter nIndex);
    [SuppressMessageAttribute("Microsoft.Interoperability", "CA1400:PInvokeEntryPointsShouldExist")]
private static IntPtr GetClassLongPtr64(IntPtr hWnd, int nIndex);
    public static bool RegisterHotKey(IntPtr hWnd, int id, ModifierKeys fsModifiers, Keys vk);
    public static bool UnregisterHotKey(IntPtr hWnd, int id);
    public static ushort GlobalAddAtom(string lpString);
    public static ushort GlobalDeleteAtom(ushort atom);
    private static int SetWindowLong32(IntPtr windowHandle, GWLParameter nIndex, int dwNewLong);
    [SuppressMessageAttribute("Microsoft.Interoperability", "CA1400:PInvokeEntryPointsShouldExist")]
private static IntPtr SetWindowLongPtr64(IntPtr windowHandle, GWLParameter nIndex, IntPtr dwNewLong);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.PointerBuffer : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.SendInputHelper : object {
    public static int INPUT_KEYBOARD;
    public static int KEYEVENTF_EXTENDEDKEY;
    public static int KEYEVENTF_KEYUP;
    public static int KEYEVENTF_SCANCODE;
    internal static int SendInput(int nInputs, INPUT& mi, int cbSize);
    internal static int MapVirtualKey(int nVirtKey, int nMapType);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.SharedMemoryManager : object {
    private SafeMemoryMappedFileHandle SharedMemMapFileHandle;
    private PointerBuffer SharedMemBuffer;
    private string SharedMemName;
    private UInt32 SharedMemBufferSize;
    internal bool Create(string sharedMemoryName, UInt32 bufferSize);
    internal bool OpenExisting(string sharedMemoryName, UInt32 bufferSize);
    internal void Destroy();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal bool WriteData(T data);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal bool GetData(T& data);
    internal bool IsMemoryInitialized();
    private static SafeMemoryMappedFileHandle OpenFileMapping(FileMapAccess DesiredAccess, bool bInheritHandle, string lpName);
    private static SafeMemoryMappedFileHandle CreateFileMapping(IntPtr hFile, IntPtr lpFileMappingAttributes, FileMapProtection flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    private static PointerBuffer MapViewOfFile(SafeMemoryMappedFileHandle hFileMapping, FileMapAccess dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, UIntPtr dwNumberOfBytesToMap);
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
internal static bool UnmapViewOfFile(IntPtr lpBaseAddress);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.SharedMemoryUtility : object {
    internal static EventHandle CreateEventEx(IntPtr lpEventAttributes, string lpName, EventCreateFlag dwFlags, EventAccess dwDesiredAccess);
    [SuppressUnmanagedCodeSecurityAttribute]
[ReliabilityContractAttribute("3", "2")]
internal static bool CloseHandle(IntPtr hObject);
    internal static bool SetEvent(EventHandle hEvent);
    internal static bool ResetEvent(EventHandle hEvent);
    internal static int WaitForSingleObject(EventHandle handle, int milliseconds);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.SimpleTimer : object {
    private string name;
    private MeasurementBlock measurementBlock;
    private long threshold;
    private bool disposed;
    private static ConcurrentDictionary`2<string, MeasurementBlock> measurementBlocks;
    public SimpleTimer(string timerName);
    public SimpleTimer(string timerName, long thresholdInMilliseconds);
    private static SimpleTimer();
    public void Step();
    public sealed virtual void Dispose();
    public void StopAndLog();
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.SwitchFromImmersive : object {
    [CompilerGeneratedAttribute]
private bool <SwitchFromImmersiveActive>k__BackingField;
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2006")]
private static IntPtr s_windowHandleAtTestStart;
    private static SwitchFromImmersive s_instance;
    private static object instance_lock;
    private static IntPtr s_desktop;
    private bool SwitchFromImmersiveActive { get; private set; }
    public static SwitchFromImmersive Instance { get; }
    private static IntPtr Desktop { get; }
    private static SwitchFromImmersive();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public bool SwitchFromImmersiveToWindow(IntPtr hwnd);
    public bool DrawHighlight(int x, int y, int width, int height, int highlightTime);
    public bool DrawHighlightStart(Rectangle rectangle);
    public bool DrawHighlightStop();
    public void Cleanup();
    private void Dispose(bool disposing);
    private bool IsSwitchRequired(IntPtr currentHwnd, IntPtr targetHwnd, IntPtr targetRootHwnd);
    [CompilerGeneratedAttribute]
private bool get_SwitchFromImmersiveActive();
    [CompilerGeneratedAttribute]
private void set_SwitchFromImmersiveActive(bool value);
    public static SwitchFromImmersive get_Instance();
    private static IntPtr get_Desktop();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.TechnologyNames : object {
    internal static string WindowTechnologyName;
    internal static string UiaTechnologyName;
    internal static string WebTechnologyName;
    internal static string MsaaTechnologyName;
    internal static string SilverlightTechnologyName;
    internal static string UiaWidgetTechnologyName;
}
internal enum Microsoft.VisualStudio.TestTools.UITest.Extension.TraceLevel : Enum {
    public int value__;
    public static TraceLevel Off;
    public static TraceLevel Error;
    public static TraceLevel Warning;
    public static TraceLevel Info;
    public static TraceLevel Verbose;
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.Uia.UiaWorker : object {
    private Thread workerThread;
    private Dispatcher workerThreadDispatcher;
    private static DispatcherPriority AsyncDispatcherPriority;
    public void StartWorkerThread();
    public void StopWorkerThread();
    public void BeginInvoke(Delegate delegateMethod, object arg);
    [CompilerGeneratedAttribute]
private void <StartWorkerThread>b__1_0();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestCommonNames : object {
    internal static string IEProcessName;
    internal static string IEWindowClassName;
    internal static string IEDialogClassName;
    internal static string FirefoxWindowClassName;
    internal static string FirefoxDialogClassName;
    internal static string UiaWidgetTechnologyName;
    internal static string DesktopClassName;
    internal static string WWAFileSearchClassName;
    internal static string SearchPane;
    internal static string CharmClassName;
    internal static string CharmsWindowName;
    internal static string CharmsBarClassName;
    internal static string DirectUIClassName;
    internal static string WWAProcessName;
    internal static string DateFormat;
    internal static string DateTimeFormat;
    internal static string ContactCardClassName;
    internal static string ImmersiveAppWindowClassName;
    internal static string ImmersiveAppTitleFrameWindowClassName;
    internal static string IEClientClassName;
    internal static string StartMenuClassName;
    internal static string WinformsClassName;
    internal static string MfcClassName;
    internal static string WpfClassName;
    internal static string SilverlightClassName;
    internal static string FilePickerClassName;
    internal static string ImmersiveSwitchListClassName;
    internal static string SearchResultsView;
    internal static string WebViewHostClassName;
    internal static Regex DateRangeValueRegex;
    internal static Regex WpfClassNameRegex;
    private static UITestCommonNames();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestTraceUtility : object {
    private static string logFileDirectory;
    private static string LastRunDirectory;
    private static string PreviousRunDirectory;
    private static int MaxLogDirectories;
    public static string LogFileDirectory { get; }
    public static object StartTracing(bool useTraceListenerDirectly);
    public static string CreateLogFolder(string traceLogFolder);
    public static object StartTracing(string baseDirectory, string dirName);
    public static void StopTracing();
    public static string get_LogFileDirectory();
    private static TextWriterTraceListener StartTracing(string logFolder);
    private static bool GetValue(NameValueCollection appSettings, string key, T& value);
    private static object StartTracing();
    private static void SafeIOCall(MethodInvoker ioCall);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.UITestUtilities : object {
    private static string programFilesIDEFolderPath;
    [CompilerGeneratedAttribute]
private static bool <IsRemoteTestingEnabled>k__BackingField;
    public static string UiaUpdationUrl;
    internal static string DateFormat;
    internal static string DateTimeFormat;
    private static Regex dateRangeValueRegex;
    private static int currentProcessId;
    private static bool isImageActionLogEnabled;
    private static Nullable`1<bool> isWin8OrGreaterOs;
    private static Nullable`1<bool> isIE10OrHigher;
    private static int ieVersion;
    private static Nullable`1<bool> isWin7;
    internal static bool UserInteractive;
    internal static string WindowsSpecialFolderPath;
    private static string IEPluginResourceAssemblyName;
    private static string UIAPluginResourceAssemblyName;
    private static RegexOptions options;
    private static Regex programW6432;
    private static Regex programX86;
    private static Regex sysWow64;
    private static string windowsFolderPath;
    private static string windowsPathForRegex;
    private static SafeWaitHandle skipStepEventHandle;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isSkipStepOn;
    private static UInt32 EventModifyState;
    private static object lockObject;
    private static IDictionary`2<string, string> appSettings;
    internal static bool IsSkipStepOn { get; }
    public static string CommonDirectory { get; }
    public static string ProgramFiles { get; }
    public static string ProgramFilesIDEFolderPath { get; }
    public static bool IsIE10OrHigher { get; }
    public static int IEVersion { get; }
    public static bool IsImageActionLogEnabled { get; public set; }
    public static int CurrentProcessId { get; }
    public static bool IsPhone { get; }
    public static bool IsRemoteTestingEnabled { get; public set; }
    public static bool IsWin7 { get; }
    internal static int CursorPositionX { get; }
    internal static int CursorPositionY { get; }
    internal static RegexOptions Compiled { get; }
    private static UITestUtilities();
    internal static T ConvertToType(object value);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
internal static Assembly LoadAssembly(string assemblyFile);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
internal static T ConvertToType(object value, bool throwIfValueIsNull);
    public static void SwitchFromImmersiveToWindow(IntPtr windowHandle);
    public static string GetKeyboardLayout();
    internal static void CleanUpTempFiles();
    internal static void InitLogFiles();
    internal static bool get_IsSkipStepOn();
    internal static void InitSkipEventObject(string skipPlayBackEventName);
    internal static void SkipStep();
    internal static bool CanResetSkipStep();
    internal static void DisposeSkipEventObject();
    internal static bool HasProcessExited(object process);
    internal static object GetProcessById(int id);
    internal static string GetProcessMainWindowTitle(object process);
    internal static void RefreshProcess(object process);
    internal static void WaitForProcessExit(object process, int milliSecond);
    internal static int GetProcessId(object process);
    internal static void CloseProcess(object process);
    internal static void KillProcess(object process);
    internal static Assembly GetTypeAssembly(Type type);
    public static string GetAssemblyFileVersion(Assembly assembly);
    public static void CheckForNull(string parameter, string parameterName);
    public static void CheckForNull(IntPtr parameter, string parameterName);
    public static void CheckForNull(object parameter, string parameterName);
    public static Uri GetIEHomepage();
    [ConditionalAttribute("DEBUG")]
public static void DisableDebugUIMessages();
    [ConditionalAttribute("DEBUG")]
public static void RestoreDebugUIMessages();
    internal static bool IsWindows8OrLaterOs();
    public static string GetUniqueName(string path, string basename, string extension);
    public static string GetUniqueName(string path, string basename, string extension, int basecount);
    public static void CheckForPointWithinControlBounds(int offsetX, int offsetY, Rectangle controlBound, string message);
    public static object ConvertIUnknownToTypedObject(object iunknownObject, Type type);
    public static void SafeThreadJoin(Thread threadToJoin);
    public static bool SafeThreadJoin(Thread threadToJoin, int timeout, bool abort);
    internal static IDictionary`2<string, string> GetAppSettings();
    public static bool GetValue(IDictionary`2<string, string> appSettings, string key, T& value);
    internal static bool TryConvertToType(object value, T& retValue);
    private static bool TryParseToType(object value, T& retValue);
    public static bool IsHigherPrivilegeProcess(IntPtr windowHandle);
    public static string get_CommonDirectory();
    public static string get_ProgramFiles();
    public static string get_ProgramFilesIDEFolderPath();
    public static Assembly GetExecutingAssembly();
    public static void Sleep(int milliSeconds);
    public static StreamReader GetStreamReader(string file);
    public static Stream GetFileStreamWithCreateReadWriteAccess(string file);
    public static bool IsHigherPrivilegeProcess(int processId, String& fileName);
    public static int GetProcessIdForWindow(IntPtr windowHandle);
    public static long RoundOffMillisecondToSecond(long milliSecondValue);
    public static bool TryGetDateString(string value, String& dateString);
    public static DateTimeFormatInfo GetDateFormat(CultureInfo culture);
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods")]
public static Assembly OnResolve(object senderAppDomain, object arg);
    internal static void AddAssemblyResolveHandler();
    public static bool TryGetDate(string value, DateTime& dateTime);
    public static void TryGetDateTimeRangeString(string value, String& minDate, String& maxDate);
    public static string GetDateTimeToString(DateTime dateTime, bool includeTime);
    public static bool HasObjectTime(string value);
    public static string GetShortDateRangeString(DateTime minRange, DateTime maxRange);
    public static string GetShortDateRangeStringInCurrentCulture(DateTime minRange, DateTime maxRange);
    public static bool TryGetShortDate(string value, DateTime& dateTime);
    public static bool TryGetShortDateAndLongTime(string value, DateTime& dateTime);
    public static bool TryParseDateTimeString(string dateTime, DateTime& dateTimeObject);
    public static object GetRegistryValue(RegistryKey regKey, string subKeyPath, string registryValue);
    public static T GetRegistryValue(RegistryKey regKey, string subKeyPath, string registryValue, bool throwException);
    public static bool TryCreateRegistryKey(RegistryKey hive, string subKeyPath);
    public static bool TryCreateRegistryKey(RegistryKey hive, string subKeyPath, string valueName, string data);
    internal static bool ExistsRegistryKey(RegistryKey hive, string subKeyPath);
    internal static bool ExistsRegistryKey(RegistryKey hive, string subKeyPath, string valueName);
    public static string GetOSInfo(string propertyName);
    internal static bool IsStartScreenVisible();
    public static bool IsWindowsStartScreen(IntPtr windowHandle);
    public static bool IsWin8OrGreaterOs();
    internal static void BringStartMenuToFocus();
    private static void PressWindowsKey(bool isPress);
    public static void DrawHighlight(int x, int y, int width, int height, int highlightTime);
    public static bool get_IsIE10OrHigher();
    public static int get_IEVersion();
    public static bool TryGetVersion(string browserName, Version& version);
    public static Int32[] GetLocaleIdentifiers(IDictionary`2<string, string> appSettings);
    public static int GetLcidFromWindowHandle(IntPtr windowHandle);
    public static string SanitizeFriendlyName(string friendlyName, string ellipsisString);
    public static string NormalizeDynamicClassName(string elementClassName);
    public static bool IsWinformsClassName(string elementClassName);
    public static bool IsMfcClassName(string elementClassName);
    public static bool IsWpfClassName(string elementClassName);
    public static bool IsSilverlightClassName(string elementClassName);
    internal static string ConvertTo32BitString(string fileName);
    [SuppressMessageAttribute("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults")]
internal static bool IsProtectedWindow();
    public static bool get_IsImageActionLogEnabled();
    public static void set_IsImageActionLogEnabled(bool value);
    public static int get_CurrentProcessId();
    public static bool get_IsPhone();
    [CompilerGeneratedAttribute]
public static bool get_IsRemoteTestingEnabled();
    [CompilerGeneratedAttribute]
public static void set_IsRemoteTestingEnabled(bool value);
    public static bool get_IsWin7();
    public static bool IsIEWindow(IntPtr windowHandle);
    public static bool IsFirefoxWindowClassName(string className);
    public static bool IsIEWindowClassName(string className);
    public static bool IsImmersiveWindow(IntPtr windowHandle);
    public static bool IsImmersiveBrowserWindow(IntPtr windowHandle);
    public static bool IsImmersiveWindowClassName(string className);
    public static bool IsCharmsBar(IntPtr windowHandle);
    public static bool IsCharmsBar(IntPtr windowHandle, string windowClassName);
    internal static bool IsRootParentSupportedControl(IntPtr windowHandle, string className);
    public static bool IsImmersiveModeActive();
    public static bool IsWWAWindow(IntPtr windowHandle);
    public static void UpdateSqmForMsaaControl(string className);
    public static string GetExpandedLongPath(string path);
    public static bool IsWebView(IntPtr handle);
    public static bool IsDesktopWindowAndNotLegacy(IntPtr windowHandle);
    public static List`1<IntPtr> GetWebViewWindowHandles(IntPtr windowHandle);
    internal static List`1<IntPtr> GetWindows(IntPtr parentHandle, string className);
    public static bool IsWindowOfSupportedTechnology(IntPtr windowHandle, Boolean& isWWAWindow, Boolean& isInternetExplorer);
    internal static Type GetExceptionTargetSiteType(Exception ex);
    internal static bool IsInvalidComObjectException(Exception ex);
    internal static int get_CursorPositionX();
    internal static int get_CursorPositionY();
    internal static void SetCursorPosition(int x, int y);
    private static string TryResolvingAssemblyPath(AssemblyName assemblyName, String[] paths);
    private static ManagementObject GetManagementObjectFromQuery(SelectQuery query);
    private static string GetPropertyValueAsString(ManagementObject managementObject, string propertyName);
    private static string GetAncestorClassName(IntPtr windowHandle, GetAncestorFlag flag);
    internal static RegexOptions get_Compiled();
    private static SafeWaitHandle OpenEvent(UInt32 dwDesiredAccess, bool bInheritHandle, string lpName);
    private static bool SetEvent(SafeHandle hEvent);
    private static bool ResetEvent(SafeHandle hEvent);
    public static String[] GetFiles(string customPluginDirectoryPath);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.WindowsStoreUtility.CodeIdentifier : object {
    public static string MakeCodeFriendly(string name);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.WindowsStoreUtility.EncodeDecodeImpl : object {
    private static Byte[] s_defaultKey;
    private static Byte[] s_initVector;
    private static Byte[] s_key;
    private static EncodeDecodeImpl();
    [SuppressMessageAttribute("Microsoft.Security.Cryptography", "CA5353:TripleDesCannotbeUsed")]
public static string EncryptString(string dataToEncode);
    [SuppressMessageAttribute("Microsoft.Security.Cryptography", "CA5353:TripleDesCannotbeUsed")]
public static string DecryptString(string dataToDecode);
    public static void ReadKeyFile(string keyLocation, int keyLength);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITest.WindowsStoreUtility.Messages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionException { get; }
    internal static string Common_EqtTraceReachedMaxEventLogEntries { get; }
    internal static string ControlBlockedByCurrentProcess { get; }
    internal static string ControlNotFoundException { get; }
    internal static string ControlNotFoundWithQidOrCondition { get; }
    internal static string FailedToSendMessage { get; }
    internal static string InvalidDateRange { get; }
    internal static string InvalidIUnknownObject { get; }
    internal static string InvalidKeySpecified { get; }
    internal static string MultipleControlsFoundException { get; }
    internal static string Utility_IgnoredThrownException { get; }
    internal static string Utility_ProcessNameWhenCannotGetIt { get; }
    internal static string WindowNotFoundException { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionException();
    internal static string get_Common_EqtTraceReachedMaxEventLogEntries();
    internal static string get_ControlBlockedByCurrentProcess();
    internal static string get_ControlNotFoundException();
    internal static string get_ControlNotFoundWithQidOrCondition();
    internal static string get_FailedToSendMessage();
    internal static string get_InvalidDateRange();
    internal static string get_InvalidIUnknownObject();
    internal static string get_InvalidKeySpecified();
    internal static string get_MultipleControlsFoundException();
    internal static string get_Utility_IgnoredThrownException();
    internal static string get_Utility_ProcessNameWhenCannotGetIt();
    internal static string get_WindowNotFoundException();
}
internal static class Microsoft.VisualStudio.TestTools.UITest.WindowsStoreUtility.MultiScreenHelper : object {
    internal static string GetActiveScreenLocationByElementBounds(int boundsX, int boundsY, int boundsWidth, int boundsHeight, int elementBoundsX, int elementBoundsY, int elementBoundsWidth, int elementBoundsHeight);
    internal static void GetActiveScreenBoundsForElementSnapshot(int boundsX, int boundsY, int boundsWidth, int boundsHeight, int elementBoundsX, int elementBoundsY, int elementBoundsWidth, int elementBoundsHeight, Int32& x, Int32& y, Int32& width, Int32& height);
    private static Screen GetActiveScreenForElementBounds(Rectangle boundingRectangle, Rectangle elementBoundingRectangle);
    private static Screen GetLargestIntersect(Rectangle rect);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.LoggerUtility : object {
    private static Image failureScreenShot;
    internal static object LastFailureScreenShot { get; }
    internal static object get_LastFailureScreenShot();
    internal static void CaptureScreenShotAndDrawBounds(int x, int y, int width, int height, int borderWidth, bool isActualControlBounds);
    internal static void ResetScreenShot();
    internal static bool IsScreenLockedOrRemoteSessionMinimized();
    internal static object GetDesktopImage();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
