internal static class Microsoft.VisualStudio.TestTools.UITest.Common.DispatcherUtilities : object {
    private static DispatcherOperationCallback exitFrameCallback;
    private static DispatcherUtilities();
    public static void ProcessEventsOnUIThread();
    private static object ExitFrame(object state);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Common.Highlighter : object {
    private Popup leftLine;
    private Popup topLine;
    private Popup bottomLine;
    private Popup rightLine;
    private Popup[] allLines;
    private static int dpiX;
    private static int dpiY;
    private static int LOGPIXELSX;
    private static int LOGPIXELSY;
    private static int BorderWidth;
    unknown bool IsVisible {public set; }
    private static Highlighter();
    public void Highlight(int x, int y, int width, int height);
    public void Hide();
    public void set_IsVisible(bool value);
    public void ProcessUIEvents();
    public sealed virtual void Dispose();
    private void Initialize();
    private Rectangle GetLargestIntersect(Rectangle rect);
    private static double PixelToPointDimention(double pixel, bool xAxis);
}
internal static class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.ComCastHelper : object {
    public static ToInterface SafeCast(FromInterface baseObject);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static ToInterface TryCast(FromInterface baseObject);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static ToInterface CastAs(FromInterface baseObject);
    public static T SafeCastToHTMLDocument(object baseObject);
    public static int GetUniqueNumberAfterCast(FromInterface baseObject);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.CommonBrowserUtility : object {
    private static string DialogClassName;
    private static string IEBrowserExeName;
    private static Guid sidsTopLevelBrowser;
    private static Guid sidsWebBrowserApp;
    private static CommonBrowserUtility();
    public static bool IsAuthenticationDialogInForeground();
    public static IWebBrowser2 WebBrowserFromWindowHandle(IntPtr handle, STAHelperThread staHelperObject, IsPlaybackCanceled playbackCanceled, IntPtr& documentWindowHandle);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public static IWebBrowser2 GetWebControlFromDocument(IHTMLDocument htmlDocument, STAHelperThread staHelperObject);
    private static IWebBrowser2 GetIWebBrowser(IServiceProvider serviceProvider);
    public static IntPtr GetDocumentWindowHandle(IntPtr topLevelWindowHandle, IsPlaybackCanceled playbackCanceled);
}
internal class Microsoft.VisualStudio.TestTools.UITest.Extension.IE.STAHelperThread : object {
    private bool disposed;
    private STAFunction functionToInvoke;
    private Thread threadInstance;
    private Mutex lockSTAHelperAccess;
    private AutoResetEvent eventHelperAccess;
    private AutoResetEvent eventHelperAccessComplete;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) keepSTAHelperAlive;
    public sealed virtual void Dispose();
    internal void InvokeFunction(STAFunction functionCode);
    private void FunctionInvoker();
    private void StartSTAHelperThread();
    private void StopSTAHelperThread();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.ActionExecutorManager : object {
    private object syncLock;
    private static IList`1<UITestActionExecutor> s_actionExecutorList;
    private static ActionExecutorManager s_instance;
    public IList`1<UITestActionExecutor> ActionExecutors { get; }
    public static ActionExecutorManager Instance { get; }
    private static ActionExecutorManager();
    public IList`1<UITestActionExecutor> get_ActionExecutors();
    public static ActionExecutorManager get_Instance();
    public UITestActionExecutor GetActionExecutor(UITestControl uiControl);
    public UITestActionExecutorCore GetDefaultExecutor();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.ActionLogFormatter : object {
    private bool throwNotSupportedException;
    private static Point s_dummyPoint;
    private static ActionLogFormatter();
    internal string Invoke(LaunchApplicationAction action);
    internal string Invoke(UITestControl control, string navigationUrl, bool isNewInstance, string currentBrowserName);
    internal string Invoke(WebDialogAction action);
    internal string Invoke(BrowserAction action);
    internal string Invoke(MouseAction action, UITestControl control);
    internal string Invoke(Point relativeCoordinates, UITestControl control);
    internal string Invoke(StringAssertAction action, UITestControl control);
    internal string Invoke(AssertAction action, UITestControl control);
    internal string Invoke(SendKeysAction action, UITestControl control);
    internal string Invoke(SetValueAction action, UITestControl control, bool isEncoded);
    internal string Invoke(SetStateAction action, UITestControl control);
    internal string Invoke(TouchAction action, UITestControl control, double gestureDirection);
    internal string Invoke(LaunchWindowsStoreAppAction action);
    internal string Invoke(MediaAction action, UITestControl control);
    internal static string GetActionModifierKeyString(InputAction action);
    private static bool IsHierarchicalPathItem(UITestControl control);
    internal static string GetFormattedString(string value);
    private static string GetAncestorInformation(UITestControl control, String& ancestorTypeFriendlyName);
    internal static string GetFriendlyName(UITestControl control, String& friendlyTypeName, bool isStrong);
    private static string GetHierarchicalFriendlyName(UITestControl control);
    private static string GetFriendlyNameBasedOnPositionInAncestor(UITestControl control, UITestControl ancestor, String& ancestorTypeFriendlyName);
    private string GetLogEntryForMouseClick(MouseAction action, string friendlyTypeName, string name, string actionModifierKeyString);
    private string GetFormatStringForClickAction(MouseAction action);
    internal static string GetButtonName(MouseButtons button);
    private void CheckAndThrowNotSupportedException(String& logEntry);
    private static string MapManipulationToLogText(string manipulationTypeString, double direction);
    private static string GetManipulationDirectionalString(double direction);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.ActionNames : object {
    public static string PressModifierKeys;
    public static string ReleaseModifierKeys;
    public static string SendKeys;
    public static string Click;
    public static string DoubleClick;
    public static string Drag;
    public static string DragDrop;
    public static string Hover;
    public static string Wheel;
    public static string GetClickablePoint;
    public static string SetProperty;
    public static string SetFocus;
    public static string EnsureClickable;
    public static string SetValue;
    public static string SetState;
    public static string SetWindowState;
    public static string MouseDown;
    public static string MouseUp;
    public static string WaitForControlEnabled;
    public static string WaitForControlReady;
    public static string Tap;
    public static string PressAndHold;
    public static string DoubleTap;
    public static string Flick;
    public static string Slide;
    public static string Swipe;
    public static string Pinch;
    public static string Stretch;
    public static string Turn;
}
internal class Microsoft.VisualStudio.TestTools.UITesting.ALUtility : object {
    internal static int HIGHLIGHT_TIME;
    private static STAHelperThread staHelperObject;
    private static object staLockObject;
    internal static string WindowsSpecialFolderPath;
    private static RegexOptions options;
    private static Regex programW6432;
    private static Regex programX86;
    private static Regex sysWow64;
    private static string windowsFolderPath;
    private static string windowsPathForRegex;
    internal static STAHelperThread STAHelperObject { get; private set; }
    private static ALUtility();
    internal static bool RetryUsingDefaultExecutor(Exception ex);
    internal static bool ShouldErrorEventBeRaisedForException(Exception ex);
    internal static UITechnologyElement GetTechElementFromUITestControl(UITestControl uiTestControl);
    internal static void PerformRetryOperation(RetryOperation operation);
    internal static void PerformRetryOperation(RetryOperation operation, int timeout);
    internal static object ThrowNotSupportedException(bool isNotSupported);
    internal static bool ConvertStringToDouble(string stringValue, Double& doubleValue);
    internal static bool IsMouseButtonPressed(MouseButtons button);
    internal static Dictionary`2<string, Type> GetProperties(UITestPropertyProvider provider, UITestControl uiControl, UITestPropertyAttributes attributes, UITestPropertyAttributes ignoreAttributes);
    internal static void EnsureWindowForegroundForMenuItem(IUITechnologyElement element);
    internal static bool IsAlwaysSearchFlagSet(UITestControl uiTestControl);
    internal static Type GetSpecializedType(UITestControl uiControl);
    private static bool IsValidTargetType(Type element);
    internal static bool IsWindowEnabled(UITestControl uiControl);
    internal static void InitializeSTAHelperObject();
    internal static void InitializeBrowserWindow();
    internal static void CleanupSTAHelperObject();
    internal static void CleanupBrowserWindow();
    internal static void UpdateSqmData(UITestControl control);
    internal static string GetHtmlPropertyForAction(string controlType, UITestAction action);
    internal static List`1<IntPtr> GetWindows(string className);
    internal static UITestControlCollection GetDescendantsByControlType(UITestControl uiControl, string technologyName, ControlType type, int maxDepth);
    internal static UITestControl CreateUITestControlForBrowserWindow(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties, string browserWindowTitle, PropertyExpression& nameExpression);
    internal static void ThrowDataGridRelatedException(string errorString, string propertyName);
    internal static ControlType GetControlTypeUsingSearchProperties(UITestControl control);
    internal static UITestControl CreateNewUITestControlAndCopyFrom(UITestControl control);
    internal static string GetModifiedInstanceFromIndex(object index, string propertyName);
    public static ControlStates ConvertState(AccessibleStates accState);
    internal static void CheckWaitForReadyRelatedPerformanceKey();
    internal static void DrawHighlight(int x, int y, int width, int height, int highlightTime);
    internal static bool IsTargetSitePropertyProvider(Exception ex);
    internal static bool IsOrderOfInvokeFilterPropertyNotPresent(UITestControl control);
    internal static void InitialiseImmersiveSwitcher();
    internal static void CleanupImmersiveSwitcher();
    internal static STAHelperThread get_STAHelperObject();
    private static void set_STAHelperObject(STAHelperThread value);
}
public abstract class Microsoft.VisualStudio.TestTools.UITesting.ApplicationBase : UITestControl {
    private static List`1<ApplicationBase> s_ApplicationControlObjects;
    private bool m_closeOnCleanupFlag;
    public bool CloseOnPlaybackCleanup { get; public set; }
    internal ApplicationBase(UIObject uiObject);
    private static ApplicationBase();
    public bool get_CloseOnPlaybackCleanup();
    public void set_CloseOnPlaybackCleanup(bool value);
    public abstract virtual void Close();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static void CloseProcessesOnPlaybackCleanup();
    protected internal static void AddToApplicationCache(ApplicationBase applicationWindow);
    protected internal static void RemoveFromApplicationCache(ApplicationBase applicationWindow);
}
public class Microsoft.VisualStudio.TestTools.UITesting.ApplicationUnderTest : ApplicationBase {
    private static int InvalidExecutableErrorCode;
    private Process underneathProcess;
    private string fileName;
    private string alternateFileName;
    private bool disableSystemRedirection;
    private bool usedAlternateFileName;
    private bool explicitNullValueSetForProcess;
    private bool isClosed;
    private static Regex programFiles;
    public bool Maximized { get; public set; }
    public bool Minimized { get; public set; }
    public bool Restored { get; public set; }
    public bool Resizable { get; }
    public bool HasTitleBar { get; }
    public bool Popup { get; }
    public bool Transparent { get; }
    public bool AlwaysOnTop { get; }
    public bool ShowInTaskbar { get; }
    public Process Process { get; internal set; }
    public string Title { get; }
    private IntPtr MainWindowHandle { get; }
    private bool HasValidProcess { get; }
    unknown Process UnderneathProcess {internal set; }
    internal ApplicationUnderTest(UIObject uiObject);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
private ApplicationUnderTest(string fileName, string alternateFileName, string arguments);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
private ApplicationUnderTest(string fileName, string alternateFileName, string arguments, string userName, SecureString password, string domain);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
private ApplicationUnderTest(ProcessStartInfo startInfo);
    private static ApplicationUnderTest();
    public static ApplicationUnderTest Launch(string fileName);
    public static ApplicationUnderTest Launch(string fileName, string alternateFileName);
    public static ApplicationUnderTest Launch(string fileName, string alternateFileName, string arguments);
    public static ApplicationUnderTest Launch(string fileName, string alternateFileName, string arguments, string userName, SecureString password, string domain);
    public static ApplicationUnderTest Launch(ProcessStartInfo startInfo);
    public static ApplicationUnderTest FromProcess(Process processToWrap);
    public virtual void Close();
    public virtual bool get_Maximized();
    public virtual void set_Maximized(bool value);
    public virtual bool get_Minimized();
    public virtual void set_Minimized(bool value);
    public virtual bool get_Restored();
    public virtual void set_Restored(bool value);
    public virtual bool get_Resizable();
    public virtual bool get_HasTitleBar();
    public virtual bool get_Popup();
    public virtual bool get_Transparent();
    public virtual bool get_AlwaysOnTop();
    public virtual bool get_ShowInTaskbar();
    public virtual void Find();
    public Process get_Process();
    internal void set_Process(Process value);
    public string get_Title();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected void Shutdown();
    private void Start(ProcessStartInfo startInfo);
    private void ThrowIfProcessNotValid(Process process);
    private IntPtr get_MainWindowHandle();
    private bool get_HasValidProcess();
    private string GetActualFilename();
    private static bool ShouldDisableSystemRedirection(String& fileName);
    private static string GetErrorMessage(string baseMessage, string file, string alternateFile);
    private void SetCurrentProcessPrivate(Process value);
    private Process GetCurrentProcessPrivate();
    internal void set_UnderneathProcess(Process value);
    [CompilerGeneratedAttribute]
private object <get_Process>b__31_0();
    [CompilerGeneratedAttribute]
private object <Dispose>b__35_0();
}
public class Microsoft.VisualStudio.TestTools.UITesting.BrowserWindow : ApplicationUnderTest {
    private BrowserService browserService;
    private bool disposed;
    private static string currentBrowserName;
    private static BrowserFactory currentBrowserFactory;
    private static string NavigateToUrlString;
    private static string ClearCacheString;
    private static string ClearCookiesString;
    private static string AllowPopupsString;
    private static string ExecuteScriptString;
    private static string Chrome;
    private static string Firefox;
    private static string Safari;
    private static string Opera;
    public static string CurrentBrowser { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static bool AllowPopups { get; public set; }
    public Uri Uri { get; }
    public UITestControl CurrentDocumentWindow { get; }
    public Version Version { get; }
    internal BrowserService BrowserService { get; internal set; }
    internal static BrowserFactory CurrentFactory { get; }
    internal BrowserWindow(UIObject uiObject);
    internal BrowserWindow(BrowserService browserService);
    internal BrowserWindow(BrowserService browserService, bool closeOnPlaybackCleanup);
    internal BrowserWindow(UITestControl control);
    public static BrowserWindow Launch();
    public static BrowserWindow Launch(Uri uri);
    public static BrowserWindow Launch(String[] arguments);
    public static BrowserWindow FromProcess(Process processToWrap);
    public static BrowserWindow Locate(string title);
    public static string get_CurrentBrowser();
    public static void set_CurrentBrowser(string value);
    public static void ClearCache();
    public static void ClearCookies();
    public static bool get_AllowPopups();
    public static void set_AllowPopups(bool value);
    public virtual Uri get_Uri();
    public virtual UITestControl get_CurrentDocumentWindow();
    public virtual Version get_Version();
    public virtual void CopyFrom(UITestControl control);
    public virtual void NavigateToUrl(Uri uri);
    public virtual void NavigateToHomepage();
    public virtual void Back();
    public virtual object ExecuteScript(string script, Object[] args);
    public virtual void Forward();
    public virtual void PerformDialogAction(BrowserDialogAction actionType);
    public virtual void PerformDialogAction(BrowserDialogAction actionType, object actionParameter);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
public virtual void StopPageLoad();
    public virtual void Refresh();
    public virtual void Close();
    [SuppressMessageAttribute("Microsoft.Usage", "CA2215:DisposeMethodsShouldCallBaseClassDispose")]
protected virtual void Dispose(bool disposing);
    internal static BrowserService Locate(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    internal static BrowserService[] LocateAll(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    internal BrowserService get_BrowserService();
    internal void set_BrowserService(BrowserService value);
    internal static void InvalidateBrowserFactory();
    internal static BrowserFactory get_CurrentFactory();
    private static void ClearCookiesPrivate();
    private static void SetAllowPopUpsValuePrivate(bool value);
    private static bool GetAllowPopUpsValuePrivate();
    private UITestControl GetCurrentDocumentWindowPrivate();
    private void CopyFromPrivate(UITestControl control);
    private void NavigateToUrlPrivate(Uri uri);
    private static BrowserWindow LaunchPrivate(String[] arguments);
    private static BrowserWindow LaunchPrivate(Uri uri);
    private static BrowserWindow LaunchPrivate();
    private static void SwitchToWindow(BrowserWindow browserWindow);
    private void PerformDialogActionPrivate(BrowserDialogAction actionType, object actionParameter);
    private object PerformBrowserServiceAction(Func`1<object> function, string playbackContext);
    private void PerformBrowserActionPrivate(BrowserActionType actionType);
    private void ClosePrivate();
    private Uri GetCurrentUriPrivate();
    private object ValidateScriptReturnValue(object retValue);
    internal static void SetCurrentBrowserWindowPrivate(string value);
    private static void ClearCachePrivate();
    private static BrowserWindow FromProcessPrivate(Process processToWrap);
    private static object PerformBrowserHelperAction(Func`1<object> function, string actionName);
    private static void ThrowIfInvalidFactory();
    private static void LogBrowserTypeSqmData(string value);
    [CompilerGeneratedAttribute]
private object <get_Uri>b__15_0();
    [CompilerGeneratedAttribute]
private object <get_CurrentDocumentWindow>b__17_0();
    [CompilerGeneratedAttribute]
private object <NavigateToHomepage>b__22_0();
    [CompilerGeneratedAttribute]
private object <Back>b__23_0();
    [CompilerGeneratedAttribute]
private object <Forward>b__25_0();
    [CompilerGeneratedAttribute]
private object <StopPageLoad>b__28_0();
    [CompilerGeneratedAttribute]
private object <Refresh>b__29_0();
    [CompilerGeneratedAttribute]
private object <Close>b__30_0();
    [CompilerGeneratedAttribute]
private object <GetCurrentDocumentWindowPrivate>b__47_0();
    [CompilerGeneratedAttribute]
private object <GetCurrentUriPrivate>b__58_0();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.BrowserWindowPropertyNames : object {
    internal static string Uri;
    internal static string Version;
    private static Dictionary`2<string, string> propertyNames;
    internal static Dictionary`2<string, string> GetPropertyNames();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.BrowserWindowPropertyProvider : UITestPropertyProvider {
    private Dictionary`2<string, UITestPropertyDescriptor> propertyToDescriptorMap;
    private WinPropertyProvider winPropertyProvider;
    public virtual ICollection`1<string> GetPropertyNames(UITestControl uiControl);
    public virtual UITestPropertyDescriptor GetPropertyDescriptor(UITestControl uiControl, string propertyName);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual int GetControlSupportLevel(UITestControl uiControl);
    public virtual string GetPropertyForAction(UITestControl uiControl, UITestAction action);
    public virtual String[] GetPropertyForControlState(UITestControl uiControl, ControlStates uiState, Boolean[]& stateValues);
    public virtual Type GetPropertyNamesClassType(UITestControl uiControl);
    public virtual Type GetSpecializedClass(UITestControl uiControl);
    public virtual String[] GetPredefinedSearchProperties(Type specializedClass);
    private static Dictionary`2<string, UITestPropertyDescriptor> InitializeProperties();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.CodedUITestMethodInvoker : object {
    private bool isCodedUITestInvokerCalled;
    private static ICodedUITestMethodInvoker instance;
    public static ICodedUITestMethodInvoker Instance { get; public set; }
    public static ICodedUITestMethodInvoker get_Instance();
    public static void set_Instance(ICodedUITestMethodInvoker value);
    public sealed virtual T InvokeMethod(Func`1<object> function, UITestControl control, bool firePlaybackErrorEvent, bool logAsAction);
}
public class Microsoft.VisualStudio.TestTools.UITesting.ColorDifference : object {
    [CompilerGeneratedAttribute]
private byte <Alpha>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Red>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Green>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Blue>k__BackingField;
    public byte Alpha { get; public set; }
    public byte Red { get; public set; }
    public byte Green { get; public set; }
    public byte Blue { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public ColorDifference(byte rgbTolerance);
    public ColorDifference(byte red, byte green, byte blue);
    public ColorDifference(byte alpha, byte red, byte green, byte blue);
    [CompilerGeneratedAttribute]
public byte get_Alpha();
    [CompilerGeneratedAttribute]
public void set_Alpha(byte value);
    [CompilerGeneratedAttribute]
public byte get_Red();
    [CompilerGeneratedAttribute]
public void set_Red(byte value);
    [CompilerGeneratedAttribute]
public byte get_Green();
    [CompilerGeneratedAttribute]
public void set_Green(byte value);
    [CompilerGeneratedAttribute]
public byte get_Blue();
    [CompilerGeneratedAttribute]
public void set_Blue(byte value);
    internal bool MeetsTolerance(ColorDifference tolerance);
    internal Color CalculateMargin(ColorDifference tolerance);
    public virtual bool Equals(object other);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static bool op_Inequality(ColorDifference left, ColorDifference right);
    public static bool op_Equality(ColorDifference left, ColorDifference right);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.DisplayControlInformation : object {
    private static Regex qidInStringRegEx;
    private static Regex attributesRegEx;
    private static Regex nameValueRegex;
    private static string propertySeparater;
    private static char attributeSeparator;
    private static string TechnologyElementString;
    private static string AttributeString;
    private static bool inDefaultMode;
    private static bool addInlineSeparator;
    private static int lineOffset;
    private static string DefaultLineSeparator;
    private static string DefaultOffsetSeparator;
    private static string AlternateLineSeparator;
    private static string AlternateInlineSeparator;
    private static string lineSeparator;
    private static string inlineSeparator;
    private static string offsetSeparator;
    private static Dictionary`2<string, int> friendlyNamePriorityMap;
    private static DisplayControlInformation();
    public static string GetHeaderPropertyInfo(string queryString, String& controlTypeName);
    public static string GetInfo(string queryId, bool inline);
    internal static string ExtractQueryId(string message);
    private static string GetInfo(string queryString);
    private static bool IsTechnologyElement(string name);
    private static StringBuilder AppendLine(StringBuilder value, string nextLine, int offset);
    private static void ExtractProperty(List`1<string> filterProperties, string nameValueString);
    private static void SetDefaultSeparators();
    private static Dictionary`2<string, int> InitializeFriendlyNamePriorityMap();
    public static void SwitchSeparators();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.ErrorLogEventArgs : EventArgs {
    public PlaybackErrorOptions ErrorOption;
    private string message;
    private Exception error;
    private Rectangle boundingRectangle;
    public Exception Error { get; }
    public Rectangle BoundingRectangle { get; }
    public string Message { get; }
    public ErrorLogEventArgs(Exception exception, UITestControl control, PlaybackErrorOptions errorOption);
    public ErrorLogEventArgs(Exception exception, PlaybackErrorOptions errorOption);
    public Exception get_Error();
    public Rectangle get_BoundingRectangle();
    public string get_Message();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlAreaHyperlink : HtmlControl {
    public string AbsolutePath { get; }
    public string Alt { get; }
    public string Href { get; }
    public string Target { get; }
    public HtmlAreaHyperlink(UITestControl parent);
    public virtual string get_AbsolutePath();
    public virtual string get_Alt();
    public virtual string get_Href();
    public virtual string get_Target();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlAudio : HtmlMedia {
    public HtmlAudio(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlButton : HtmlControl {
    public string DisplayText { get; }
    public HtmlButton(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlCell : HtmlControl {
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public string Value { get; }
    public HtmlCell(UITestControl parent);
    public virtual int get_RowIndex();
    public virtual int get_ColumnIndex();
    public virtual string get_Value();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlCheckBox : HtmlControl {
    public bool Checked { get; public set; }
    public string Value { get; }
    public string LabeledBy { get; }
    public HtmlCheckBox(UITestControl parent);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual string get_Value();
    public virtual string get_LabeledBy();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlComboBox : HtmlControl {
    public int ItemCount { get; }
    public UITestControlCollection Items { get; }
    public string SelectedItem { get; public set; }
    public int SelectedIndex { get; public set; }
    public string LabeledBy { get; }
    public int Size { get; }
    public HtmlComboBox(UITestControl parent);
    public String[] GetContent();
    public virtual int get_ItemCount();
    public virtual UITestControlCollection get_Items();
    public virtual string get_SelectedItem();
    public virtual void set_SelectedItem(string value);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual string get_LabeledBy();
    public virtual int get_Size();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlControl : UITestControl {
    public string HelpText { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public string Class { get; }
    public string Id { get; }
    public string InnerText { get; }
    public int TagInstance { get; }
    public string TagName { get; }
    public string Title { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1721:PropertyNamesShouldNotMatchGetMethods")]
public string Type { get; }
    public string ValueAttribute { get; }
    public string AccessKey { get; }
    public string ControlDefinition { get; }
    public HtmlControl(UITestControl parent);
    public virtual string get_HelpText();
    public virtual string get_Class();
    public virtual string get_Id();
    public virtual string get_InnerText();
    public virtual int get_TagInstance();
    public virtual string get_TagName();
    public virtual string get_Title();
    public virtual string get_Type();
    public virtual string get_ValueAttribute();
    public virtual string get_AccessKey();
    public virtual string get_ControlDefinition();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlCustom : HtmlControl {
    public HtmlCustom(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlDiv : HtmlControl {
    public string DisplayText { get; }
    public HtmlDiv(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlDocument : HtmlControl {
    [SuppressMessageAttribute("Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings")]
public string PageUrl { get; }
    public bool FrameDocument { get; }
    public bool RedirectingPage { get; }
    public string AbsolutePath { get; }
    public HtmlDocument(UITestControl parent);
    public virtual string get_PageUrl();
    public virtual bool get_FrameDocument();
    public virtual bool get_RedirectingPage();
    public virtual string get_AbsolutePath();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlEdit : HtmlControl {
    public string Text { get; public set; }
    public bool IsPassword { get; }
    public string DefaultText { get; }
    public string CopyPastedText { get; public set; }
    public string LabeledBy { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown string Password {public set; }
    public int MaxLength { get; }
    public HtmlEdit(UITestControl parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_IsPassword();
    public virtual string get_DefaultText();
    public virtual string get_CopyPastedText();
    public virtual void set_CopyPastedText(string value);
    public virtual string get_LabeledBy();
    public virtual bool get_ReadOnly();
    public virtual void set_Password(string value);
    public virtual int get_MaxLength();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlEditableDiv : HtmlControl {
    public string Text { get; public set; }
    public bool IsPassword { get; }
    public string DefaultText { get; }
    public string CopyPastedText { get; public set; }
    public string LabeledBy { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown string Password {public set; }
    public HtmlEditableDiv(UITestControl parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_IsPassword();
    public virtual string get_DefaultText();
    public virtual string get_CopyPastedText();
    public virtual void set_CopyPastedText(string value);
    public virtual string get_LabeledBy();
    public virtual bool get_ReadOnly();
    public virtual void set_Password(string value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlEditableSpan : HtmlControl {
    public string Text { get; public set; }
    public bool IsPassword { get; }
    public string DefaultText { get; }
    public string CopyPastedText { get; public set; }
    public string LabeledBy { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown string Password {public set; }
    public HtmlEditableSpan(UITestControl parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_IsPassword();
    public virtual string get_DefaultText();
    public virtual string get_CopyPastedText();
    public virtual void set_CopyPastedText(string value);
    public virtual string get_LabeledBy();
    public virtual bool get_ReadOnly();
    public virtual void set_Password(string value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlFileInput : HtmlControl {
    public string FileName { get; public set; }
    public string LabeledBy { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    public HtmlFileInput(UITestControl parent);
    public virtual string get_FileName();
    public virtual void set_FileName(string value);
    public virtual string get_LabeledBy();
    public virtual bool get_ReadOnly();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlFrame : HtmlControl {
    [SuppressMessageAttribute("Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings")]
public string PageUrl { get; }
    public string AbsolutePath { get; }
    public bool Scrollable { get; }
    public HtmlFrame(UITestControl parent);
    public virtual string get_PageUrl();
    public virtual string get_AbsolutePath();
    public virtual bool get_Scrollable();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlHeaderCell : HtmlControl {
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public HtmlHeaderCell(UITestControl parent);
    public virtual int get_RowIndex();
    public virtual int get_ColumnIndex();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlHyperlink : HtmlControl {
    public string AbsolutePath { get; }
    public string Alt { get; }
    public string Href { get; }
    public string Target { get; }
    public HtmlHyperlink(UITestControl parent);
    public virtual string get_AbsolutePath();
    public virtual string get_Alt();
    public virtual string get_Href();
    public virtual string get_Target();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlIFrame : HtmlControl {
    [SuppressMessageAttribute("Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings")]
public string PageUrl { get; }
    public string AbsolutePath { get; }
    public bool Scrollable { get; }
    public HtmlIFrame(UITestControl parent);
    public virtual string get_PageUrl();
    public virtual string get_AbsolutePath();
    public virtual bool get_Scrollable();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlImage : HtmlControl {
    public string Alt { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string Src { get; }
    public string AbsolutePath { get; }
    public string LinkAbsolutePath { get; }
    public string Href { get; }
    public HtmlImage(UITestControl parent);
    public virtual string get_Alt();
    public virtual string get_Src();
    public virtual string get_AbsolutePath();
    public virtual string get_LinkAbsolutePath();
    public virtual string get_Href();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlInputButton : HtmlControl {
    public string DisplayText { get; }
    public HtmlInputButton(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlLabel : HtmlControl {
    public string DisplayText { get; }
    public string LabelFor { get; }
    public HtmlLabel(UITestControl parent);
    public virtual string get_DisplayText();
    public virtual string get_LabelFor();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlList : HtmlControl {
    public int ItemCount { get; }
    public UITestControlCollection Items { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public String[] SelectedItems { get; public set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public Int32[] SelectedIndices { get; public set; }
    public string SelectedItemsAsString { get; public set; }
    public bool IsMultipleSelection { get; }
    public string LabeledBy { get; }
    public int Size { get; }
    public HtmlList(UITestControl parent);
    public String[] GetContent();
    public virtual int get_ItemCount();
    public virtual UITestControlCollection get_Items();
    public virtual String[] get_SelectedItems();
    public virtual void set_SelectedItems(String[] value);
    public virtual Int32[] get_SelectedIndices();
    public virtual void set_SelectedIndices(Int32[] value);
    public virtual string get_SelectedItemsAsString();
    public virtual void set_SelectedItemsAsString(string value);
    public virtual bool get_IsMultipleSelection();
    public virtual string get_LabeledBy();
    public virtual int get_Size();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlListItem : HtmlControl {
    public string DisplayText { get; }
    public bool Selected { get; }
    public HtmlListItem(UITestControl parent);
    public void Select();
    public virtual string get_DisplayText();
    public virtual bool get_Selected();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlMedia : HtmlControl {
    public bool AutoPlay { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string CurrentSrc { get; }
    public TimeSpan CurrentTime { get; }
    public string CurrentTimeAsString { get; }
    public bool Controls { get; }
    public TimeSpan Duration { get; }
    public string DurationAsString { get; }
    public bool Ended { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool Loop { get; }
    public bool Muted { get; }
    public bool Paused { get; }
    public float PlaybackRate { get; public set; }
    public bool Seeking { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public string Src { get; }
    public float Volume { get; }
    public int ReadyState { get; }
    public HtmlMedia(UITestControl parent);
    public virtual bool get_AutoPlay();
    public virtual string get_CurrentSrc();
    public virtual TimeSpan get_CurrentTime();
    public virtual string get_CurrentTimeAsString();
    public virtual bool get_Controls();
    public virtual TimeSpan get_Duration();
    public virtual string get_DurationAsString();
    public virtual bool get_Ended();
    public virtual bool get_Loop();
    public virtual bool get_Muted();
    public virtual bool get_Paused();
    public virtual float get_PlaybackRate();
    public virtual void set_PlaybackRate(float value);
    public virtual bool get_Seeking();
    public virtual string get_Src();
    public virtual float get_Volume();
    public virtual int get_ReadyState();
    public virtual void Play();
    public virtual void Play(TimeSpan startTime);
    public virtual void Pause();
    public virtual void Pause(TimeSpan pauseTime);
    public virtual void Seek(TimeSpan seekToTime);
    public virtual void Mute();
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public virtual void Unmute();
    public virtual void SetVolume(float volume);
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlProgressBar : HtmlControl {
    public float Max { get; }
    public float Value { get; }
    public string ValueAttribute { get; }
    public HtmlProgressBar(UITestControl parent);
    public virtual float get_Max();
    public float get_Value();
    public virtual string get_ValueAttribute();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlRadioButton : HtmlControl {
    public bool Selected { get; public set; }
    public string Value { get; }
    public UITestControlCollection Group { get; }
    public int ItemCount { get; }
    public string LabeledBy { get; }
    public HtmlRadioButton(UITestControl parent);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual string get_Value();
    public virtual UITestControlCollection get_Group();
    public virtual int get_ItemCount();
    public virtual string get_LabeledBy();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlRow : HtmlControl {
    public UITestControlCollection Cells { get; }
    public int RowIndex { get; }
    public int CellCount { get; }
    public HtmlRow(UITestControl parent);
    public String[] GetContent();
    public HtmlCell GetCell(int cellIndex);
    public virtual UITestControlCollection get_Cells();
    public virtual int get_RowIndex();
    public virtual int get_CellCount();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlScrollBar : HtmlControl {
    public string Orientation { get; }
    public HtmlScrollBar(UITestControl parent);
    public virtual string get_Orientation();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlSlider : HtmlControl {
    public string Min { get; }
    public string Max { get; }
    public double ValueAsNumber { get; public set; }
    public string Value { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public string Step { get; }
    public bool Required { get; }
    public bool Disabled { get; }
    public HtmlSlider(UITestControl parent);
    public virtual string get_Min();
    public virtual string get_Max();
    public virtual double get_ValueAsNumber();
    public virtual void set_ValueAsNumber(double value);
    public string get_Value();
    public void set_Value(string value);
    public virtual string get_Step();
    public bool get_Required();
    public bool get_Disabled();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlSpan : HtmlControl {
    public string DisplayText { get; }
    public HtmlSpan(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlTable : HtmlControl {
    public UITestControlCollection Cells { get; }
    public UITestControlCollection Rows { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public int CellCount { get; }
    public HtmlTable(UITestControl parent);
    public HtmlControl GetCell(int rowIndex, int columnIndex);
    public HtmlControl GetRow(int rowIndex);
    public HtmlCell FindFirstCellWithValue(string value);
    public String[] GetContent();
    public String[] GetColumnNames();
    public virtual UITestControlCollection get_Cells();
    public virtual UITestControlCollection get_Rows();
    public virtual int get_RowCount();
    public virtual int get_ColumnCount();
    public virtual int get_CellCount();
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlTextArea : HtmlControl {
    public string Text { get; public set; }
    public bool IsPassword { get; }
    public string DefaultText { get; }
    public string CopyPastedText { get; public set; }
    public string LabeledBy { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown string Password {public set; }
    public HtmlTextArea(UITestControl parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual bool get_IsPassword();
    public virtual string get_DefaultText();
    public virtual string get_CopyPastedText();
    public virtual void set_CopyPastedText(string value);
    public virtual string get_LabeledBy();
    public virtual bool get_ReadOnly();
    public virtual void set_Password(string value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.HtmlControls.HtmlVideo : HtmlMedia {
    public string Poster { get; }
    public int VideoHeight { get; }
    public int VideoWidth { get; }
    public HtmlVideo(UITestControl parent);
    public virtual string get_Poster();
    public virtual int get_VideoHeight();
    public virtual int get_VideoWidth();
}
public static class Microsoft.VisualStudio.TestTools.UITesting.HtmlLoggerState : object {
    public static string DefaultTraceLevel;
    public static string Disabled;
    public static string ErrorAndWarningOnlySnapshot;
    public static string AllActionSnapshot;
}
internal class Microsoft.VisualStudio.TestTools.UITesting.HtmlPropertyProvider : PropertyProviderBase {
    private static string Div;
    private static string Span;
    private static string TextArea;
    private static string IFrame;
    private static string Editable;
    private static string Input;
    private static string InputButton;
    private static string TH;
    private static string HeaderCell;
    private static string Enabled;
    private static string Area;
    private static string Slider;
    private static string Progress;
    private static string ProgressBar;
    private static string Change;
    private static string OnChange;
    private static string OnClick;
    private static string TextAreaString;
    private static string HTMLEventsString;
    protected virtual object GetPropertyValueInternal(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiControl, string propertyName, object value);
    protected virtual string GetPropertyForAction(string controlType, UITestAction action);
    protected virtual String[] GetPropertyForControlState(string controlType, ControlStates uiState, Boolean[]& stateValues);
    public virtual Type GetSpecializedClass(UITestControl uiControl);
    public virtual String[] GetPredefinedSearchProperties(Type specializedClass);
    private void SetValueOnFileInputControl(UITestControl uiControl, object value);
    protected void ThrowIfDisabled(UITestControl uiControl);
    protected void EnsureVisible(UITestControl uiControl);
    protected void SetMediaProperty(UITestControl uiControl, string propertyName, object value);
    protected void FireOnChange(object domNode);
    protected void SetSliderProperty(UITestControl uiControl, string propertyName, object value);
    protected static Dictionary`2<string, UITestPropertyDescriptor> InitializeCommonProperties();
    protected Dictionary`2<ControlType, Dictionary`2<string, UITestPropertyDescriptor>> InitializePropertiesMap();
    protected Dictionary`2<ControlType, Type> InitializePropertyNameToClassMap();
    internal static bool IsFirefoxBrowserName(string browserName);
}
internal interface Microsoft.VisualStudio.TestTools.UITesting.ICodedUITestMethodInvoker {
    public abstract virtual T InvokeMethod(Func`1<object> function, UITestControl control, bool callRetry, bool logAsAction);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.IEBrowserFactory : BrowserFactory {
    internal static string IEBrowserName;
    internal static string InternetExplorerString;
    internal static string IETechnologyManagerTypeName;
    private string SupportedVersionsRegistryKey;
    private IEBrowserHelper browserHelperInstance;
    private string lastRequestedBrowserName;
    private List`1<string> supportedVersions;
    public string Name { get; }
    public IList`1<string> SupportedVersions { get; }
    public string TechnologyManagerTypeName { get; }
    public virtual BrowserService Launch();
    public virtual BrowserService Launch(Uri uri);
    public virtual BrowserService Launch(String[] arguments);
    public virtual BrowserService Locate(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    public virtual BrowserService[] LocateAll(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties);
    public virtual BrowserService Locate(IntPtr handle);
    public virtual BrowserHelper GetBrowserHelper();
    public virtual string get_Name();
    public virtual IList`1<string> get_SupportedVersions();
    public virtual int GetBrowserSupportLevel(string browserName);
    public virtual string get_TechnologyManagerTypeName();
    private void ValidateBrowser();
    internal static bool IsIEBrowserName(string browserName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.IEBrowserHelper : BrowserHelper {
    private static string pathToIE;
    private static string ToolBarClassName;
    private static string IEClassName;
    internal static string IEDialogClassName;
    internal static string FirefoxDialogClassName;
    internal static string IEDialogSuffix;
    private string rundllProcess;
    private static IEBrowserHelper instance;
    private static string clearCommand;
    private static string clearCacheArgument;
    private static string clearCookiesArgument;
    private static string NewWindowsRegistryKey;
    private static string PopupManagerKey;
    public static IEBrowserHelper Instance { get; }
    public Uri Homepage { get; }
    public bool AllowPopups { get; public set; }
    private static IEBrowserHelper();
    public static IEBrowserHelper get_Instance();
    public virtual bool IsBrowserProcess(Process process);
    public virtual bool IsBrowserWindow(UITechnologyElement element);
    public virtual bool IsBrowserWindow(string className);
    public virtual bool IsBrowserDocumentWindow(UITechnologyElement element);
    public virtual bool IsBrowserDocumentWindow(IntPtr windowHandle);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public virtual Uri GetUrlFromBrowserDocumentWindow(UITechnologyElement element);
    public virtual BrowserButtonType GetBrowserButtonType(UITechnologyElement element);
    public virtual Uri get_Homepage();
    public virtual void ClearCache();
    public virtual void ClearCookies();
    public virtual bool get_AllowPopups();
    public virtual void set_AllowPopups(bool value);
    public virtual string GetPageTitle(string windowTitle);
    private bool IsBrowserButton(UITechnologyElement element);
    private bool IsBrowserTitleBarButton(IUITechnologyElement parentElement);
    private bool IsBrowserCloseButton(UITechnologyElement element);
    private bool IsBrowserBackButton(UITechnologyElement element);
    private bool IsBrowserForwardButton(UITechnologyElement element);
    private bool IsBrowserRefreshButton(UITechnologyElement element);
    private bool IsBrowserStopButton(UITechnologyElement element);
    private static Uri GetUrlInternal(IntPtr windowHandle);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.IEBrowserService : BrowserService {
    [CompilerGeneratedAttribute]
private IUITechnologyElement <InternetExplorerTechnologyElement>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <IesHandle>k__BackingField;
    private Version ieVersionData;
    private InternetExplorerWrapper internetExplorer;
    private IntPtr topLevelWindowHandle;
    private UITechnologyElement documentWindow;
    private UITechnologyElement topLevelWindow;
    private static string DialogClassName;
    internal static string IEWindowClassName;
    internal static string IEBrowserExeName;
    private bool disposed;
    private static string windowTitleSuffix;
    private static Dictionary`2<string, bool> ValidDialogTitles;
    private static string IEString;
    private static string ShellDocViewObject;
    private static string IETitleRegistryLocation;
    public Uri Uri { get; }
    public UITechnologyElement TopLevelWindow { get; }
    public UITechnologyElement DocumentWindow { get; }
    public Version Version { get; }
    internal static string IEBrowserWindowTitle { get; }
    private IUITechnologyElement InternetExplorerTechnologyElement { get; private set; }
    private IntPtr IesHandle { get; private set; }
    private InternetExplorerWrapper WebBrowserWrapper { get; private set; }
    private static IEBrowserService();
    public virtual Uri get_Uri();
    public virtual UITechnologyElement get_TopLevelWindow();
    public virtual UITechnologyElement get_DocumentWindow();
    public virtual Version get_Version();
    public virtual void PerformDialogAction(BrowserDialogAction browserDialogAction, object actionParameter);
    public virtual void NavigateToUrl(Uri uri);
    public virtual object ExecuteScript(string script, Object[] args);
    public virtual void Back();
    public virtual void Forward();
    public virtual void Close();
    public virtual void StopPageLoad();
    public virtual void Refresh();
    public virtual void NavigateToHomepage();
    public virtual void Dispose();
    internal static BrowserService Launch(String[] arguments);
    internal static BrowserService[] Locate(PropertyExpressionCollection searchProperties, PropertyExpressionCollection filterProperties, bool findAll);
    internal static BrowserService Locate(IntPtr handle);
    private void WaitForIEToBeReady();
    private void UpdateWebBrowserReferenceIfInvalid();
    private void LaunchIEWindow(String[] arguments);
    private bool IsExtendedRetryNeeded();
    private bool UpdateInformationAfterLaunch(List`1<IntPtr> ieWindowListBeforeLaunch, String[] arguments);
    private bool UpdateWebBrowserReference();
    private void ReleaseComResources();
    private static Dictionary`2<string, bool> InitializeIEDialogTitles();
    internal static string get_IEBrowserWindowTitle();
    [CompilerGeneratedAttribute]
private IUITechnologyElement get_InternetExplorerTechnologyElement();
    [CompilerGeneratedAttribute]
private void set_InternetExplorerTechnologyElement(IUITechnologyElement value);
    [CompilerGeneratedAttribute]
private IntPtr get_IesHandle();
    [CompilerGeneratedAttribute]
private void set_IesHandle(IntPtr value);
    private InternetExplorerWrapper get_WebBrowserWrapper();
    private void set_WebBrowserWrapper(InternetExplorerWrapper value);
    private static bool IsPlaybackCanceled();
    [CompilerGeneratedAttribute]
private bool <get_DocumentWindow>b__5_0();
}
public static class Microsoft.VisualStudio.TestTools.UITesting.ImageComparer : object {
    public static bool Compare(Image actualImage, Image expectedImage);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static bool Compare(Image actualImage, Image expectedImage, ColorDifference argbTolerance);
    public static bool Compare(Image actualImage, Image expectedImage, Image& diffImage);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static bool Compare(Image actualImage, Image expectedImage, ColorDifference argbTolerance, Image& diffImage);
    public static bool Compare(Image actualImage, Image expectedImage, List`1<ToleranceRectangle> rectangleList);
    public static bool Compare(Image actualImage, Image expectedImage, List`1<ToleranceRectangle> rectangleList, Image& diffImage);
    private static bool CompareInternal(Image actualImage, Image expectedImage, List`1<ToleranceRectangle> rectangleList, Image& diffImage, bool createOutImage);
    private static bool CompareInternal(Image actualImage, Image expectedImage, ColorDifference argbTolerance, Image& diffImage, bool createOutImage);
    private static bool CompareInternal(Snapshot actualSnapshot, Snapshot expectedSnapshot, Snapshot toleranceMap, Image& diffImage, bool createOutImage);
    private static Snapshot CreateToleranceMap(List`1<ToleranceRectangle> rectangleList, int height, int width);
    internal static ColorDifference Compare(Color color1, Color color2);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.InternetExplorerWrapper : object {
    private IWebBrowser2 internetExplorer;
    public Uri LocationUrl { get; }
    public IntPtr WindowHandle { get; }
    public InternetExplorerWrapper(IWebBrowser2 webBrowser);
    public Uri get_LocationUrl();
    public IntPtr get_WindowHandle();
    public void NavigateToUrl(Uri urlToNavigate);
    public object ExecuteScript(string script, Object[] args);
    public void GoBack();
    public void GoForward();
    public void Quit();
    public void Stop();
    public void Refresh();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
public void Release();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITesting.InterpreterResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionErrorMessage { get; }
    internal static string ActionNotSupported { get; }
    internal static string AlternateFileName { get; }
    internal static string AreEqual { get; }
    internal static string ArgumentsPassed { get; }
    internal static string BrowserActionTypeText { get; }
    internal static string BrowserBackAction { get; }
    internal static string BrowserCancelAction { get; }
    internal static string BrowserCloseAction { get; }
    internal static string BrowserDialogActionText { get; }
    internal static string BrowserDialogParametersText { get; }
    internal static string BrowserExecuteScriptAction { get; }
    internal static string BrowserForwardAction { get; }
    internal static string BrowserOkAction { get; }
    internal static string BrowserPromptAction { get; }
    internal static string BrowserRefreshAction { get; }
    internal static string BrowserRetryAction { get; }
    internal static string BrowserStopAction { get; }
    internal static string BrowserWindowCloseAction { get; }
    internal static string ButtonQualifierString { get; }
    internal static string ButtonsPressed { get; }
    internal static string ClearString { get; }
    internal static string ClickText { get; }
    internal static string Contains { get; }
    internal static string ControlFind { get; }
    internal static string ControlNotFound { get; }
    internal static string ControlNotFoundP { get; }
    internal static string ControlStateNotSupported { get; }
    internal static string DoesNotMatch { get; }
    internal static string Domain { get; }
    internal static string DoubleClickText { get; }
    internal static string DragAction { get; }
    internal static string DragActionNoEndPoint { get; }
    internal static string DragActionNoStartPoint { get; }
    internal static string DragByAction { get; }
    internal static string DragByActionNoStartPoint { get; }
    internal static string DragByLocation { get; }
    internal static string DragDropAction { get; }
    internal static string DragDropByAction { get; }
    internal static string DraggedContainer { get; }
    internal static string DragStartLocation { get; }
    internal static string EncodedPassword { get; }
    internal static string EndsWith { get; }
    internal static string EndTestCaseTitle { get; }
    internal static string ErrorGeneratingActionString { get; }
    internal static string FileName { get; }
    internal static string FindMatchingControls { get; }
    internal static string FirstContactPoint { get; }
    internal static string FixPasswordForLaunchApplication { get; }
    internal static string FixPasswordForLaunchApplication1 { get; }
    internal static string Flick { get; }
    internal static string GetPropertyHelper { get; }
    internal static string IndeterminateString { get; }
    internal static string IsEncoded { get; }
    internal static string IsInstanceOfType { get; }
    internal static string IsUnicode { get; }
    internal static string IterateActionIdError { get; }
    internal static string LaunchApplication { get; }
    internal static string LaunchApplicationAsUser { get; }
    internal static string LaunchApplicationWithAgrumentsAsUser { get; }
    internal static string LaunchApplicationWithArguments { get; }
    internal static string LaunchWindowsStoreAppArguments { get; }
    internal static string LaunchWindowsStoreApplication { get; }
    internal static string LaunchWindowsStoreAppPackageFamilyName { get; }
    internal static string LocationString { get; }
    internal static string LogEntryWithParentWindowName { get; }
    internal static string Matches { get; }
    internal static string MiddleString { get; }
    internal static string Milliseconds { get; }
    internal static string ModiferKeyActionString { get; }
    internal static string ModifierKeysPressed { get; }
    internal static string MouseClickAction { get; }
    internal static string MouseClickActionWithButtonName { get; }
    internal static string MouseHoverAction { get; }
    internal static string MouseHoverDuration { get; }
    internal static string MouseMoveAction { get; }
    internal static string MouseMoveActionOnControl { get; }
    internal static string MouseWheelRotateAction { get; }
    internal static string Mute { get; }
    internal static string NavigateToUrlOnExistingBrowser { get; }
    internal static string NavigateToUrlOnNewBrowser { get; }
    internal static string NavigationUrl { get; }
    internal static string Not { get; }
    internal static string NotEqualTo { get; }
    internal static string NullString { get; }
    internal static string PackageFamilyName { get; }
    internal static string ParameterInformation { get; }
    internal static string Pause { get; }
    internal static string Play { get; }
    internal static string PropertyName { get; }
    internal static string propertyvaluestring { get; }
    internal static string RelativeCoordinates { get; }
    internal static string RightString { get; }
    internal static string ScriptToExecute { get; }
    internal static string SecondContactPoint { get; }
    internal static string Seconds { get; }
    internal static string Seek { get; }
    internal static string SelectString { get; }
    internal static string SendGlobalHotKeysAction { get; }
    internal static string SendGlobalHotKeysActionWithoutParentName { get; }
    internal static string SendKeysAction { get; }
    internal static string SendKeysActionWithoutParentName { get; }
    internal static string SendKeyValueStringConnector { get; }
    internal static string SetOffStateOfControl { get; }
    internal static string SetOnStateOfControl { get; }
    internal static string SetStateCollapseAction { get; }
    internal static string SetStateCollapseAndXXXAction { get; }
    internal static string SetStateControlAction { get; }
    internal static string SetStateExpandAction { get; }
    internal static string SetStateExpandAndXXXAction { get; }
    internal static string SetValueCheckBoxAction { get; }
    internal static string SetValueComboBoxAction { get; }
    internal static string SetValueEditBoxAction { get; }
    internal static string SetValueEditBoxActionWithNewLine { get; }
    internal static string SetValueMonthCalendar { get; }
    internal static string SetValueSliderAction { get; }
    internal static string SetValueUnCheckBoxAction { get; }
    internal static string SetValueZoomedInAction { get; }
    internal static string SetValueZoomedOutAction { get; }
    internal static string SkippingFailedAction { get; }
    internal static string Slide { get; }
    internal static string StartsWith { get; }
    internal static string StartTestCaseTitle { get; }
    internal static string Swipe { get; }
    internal static string TestStepMarkerAction { get; }
    internal static string ThinkTimeWaitMessage { get; }
    internal static string TopLevelWindowChange { get; }
    internal static string TouchActionLogFormat { get; }
    internal static string TouchActionManipulation { get; }
    internal static string TouchActionManipulationDown { get; }
    internal static string TouchActionManipulationLeft { get; }
    internal static string TouchActionManipulationRight { get; }
    internal static string TouchActionManipulationUp { get; }
    internal static string TouchGestureDirection { get; }
    internal static string TouchGestureDuration { get; }
    internal static string TouchGestureLength { get; }
    internal static string UITestLogTitle { get; }
    internal static string Unmute { get; }
    internal static string UserName { get; }
    internal static string ValidationAction { get; }
    internal static string ValueSet { get; }
    internal static string VolumeChange { get; }
    internal static string WaitForCondition { get; }
    internal static string WaitForControlReady { get; }
    internal static string WheelDirectionAntiClockwise { get; }
    internal static string WheelDirectionClockwise { get; }
    internal static string WheelMovementDirection { get; }
    internal static string WindowMaximizeAction { get; }
    internal static string WindowMinimizeAction { get; }
    internal static string WindowRestoreAction { get; }
    internal static string XButton1String { get; }
    internal static string XButton2String { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionErrorMessage();
    internal static string get_ActionNotSupported();
    internal static string get_AlternateFileName();
    internal static string get_AreEqual();
    internal static string get_ArgumentsPassed();
    internal static string get_BrowserActionTypeText();
    internal static string get_BrowserBackAction();
    internal static string get_BrowserCancelAction();
    internal static string get_BrowserCloseAction();
    internal static string get_BrowserDialogActionText();
    internal static string get_BrowserDialogParametersText();
    internal static string get_BrowserExecuteScriptAction();
    internal static string get_BrowserForwardAction();
    internal static string get_BrowserOkAction();
    internal static string get_BrowserPromptAction();
    internal static string get_BrowserRefreshAction();
    internal static string get_BrowserRetryAction();
    internal static string get_BrowserStopAction();
    internal static string get_BrowserWindowCloseAction();
    internal static string get_ButtonQualifierString();
    internal static string get_ButtonsPressed();
    internal static string get_ClearString();
    internal static string get_ClickText();
    internal static string get_Contains();
    internal static string get_ControlFind();
    internal static string get_ControlNotFound();
    internal static string get_ControlNotFoundP();
    internal static string get_ControlStateNotSupported();
    internal static string get_DoesNotMatch();
    internal static string get_Domain();
    internal static string get_DoubleClickText();
    internal static string get_DragAction();
    internal static string get_DragActionNoEndPoint();
    internal static string get_DragActionNoStartPoint();
    internal static string get_DragByAction();
    internal static string get_DragByActionNoStartPoint();
    internal static string get_DragByLocation();
    internal static string get_DragDropAction();
    internal static string get_DragDropByAction();
    internal static string get_DraggedContainer();
    internal static string get_DragStartLocation();
    internal static string get_EncodedPassword();
    internal static string get_EndsWith();
    internal static string get_EndTestCaseTitle();
    internal static string get_ErrorGeneratingActionString();
    internal static string get_FileName();
    internal static string get_FindMatchingControls();
    internal static string get_FirstContactPoint();
    internal static string get_FixPasswordForLaunchApplication();
    internal static string get_FixPasswordForLaunchApplication1();
    internal static string get_Flick();
    internal static string get_GetPropertyHelper();
    internal static string get_IndeterminateString();
    internal static string get_IsEncoded();
    internal static string get_IsInstanceOfType();
    internal static string get_IsUnicode();
    internal static string get_IterateActionIdError();
    internal static string get_LaunchApplication();
    internal static string get_LaunchApplicationAsUser();
    internal static string get_LaunchApplicationWithAgrumentsAsUser();
    internal static string get_LaunchApplicationWithArguments();
    internal static string get_LaunchWindowsStoreAppArguments();
    internal static string get_LaunchWindowsStoreApplication();
    internal static string get_LaunchWindowsStoreAppPackageFamilyName();
    internal static string get_LocationString();
    internal static string get_LogEntryWithParentWindowName();
    internal static string get_Matches();
    internal static string get_MiddleString();
    internal static string get_Milliseconds();
    internal static string get_ModiferKeyActionString();
    internal static string get_ModifierKeysPressed();
    internal static string get_MouseClickAction();
    internal static string get_MouseClickActionWithButtonName();
    internal static string get_MouseHoverAction();
    internal static string get_MouseHoverDuration();
    internal static string get_MouseMoveAction();
    internal static string get_MouseMoveActionOnControl();
    internal static string get_MouseWheelRotateAction();
    internal static string get_Mute();
    internal static string get_NavigateToUrlOnExistingBrowser();
    internal static string get_NavigateToUrlOnNewBrowser();
    internal static string get_NavigationUrl();
    internal static string get_Not();
    internal static string get_NotEqualTo();
    internal static string get_NullString();
    internal static string get_PackageFamilyName();
    internal static string get_ParameterInformation();
    internal static string get_Pause();
    internal static string get_Play();
    internal static string get_PropertyName();
    internal static string get_propertyvaluestring();
    internal static string get_RelativeCoordinates();
    internal static string get_RightString();
    internal static string get_ScriptToExecute();
    internal static string get_SecondContactPoint();
    internal static string get_Seconds();
    internal static string get_Seek();
    internal static string get_SelectString();
    internal static string get_SendGlobalHotKeysAction();
    internal static string get_SendGlobalHotKeysActionWithoutParentName();
    internal static string get_SendKeysAction();
    internal static string get_SendKeysActionWithoutParentName();
    internal static string get_SendKeyValueStringConnector();
    internal static string get_SetOffStateOfControl();
    internal static string get_SetOnStateOfControl();
    internal static string get_SetStateCollapseAction();
    internal static string get_SetStateCollapseAndXXXAction();
    internal static string get_SetStateControlAction();
    internal static string get_SetStateExpandAction();
    internal static string get_SetStateExpandAndXXXAction();
    internal static string get_SetValueCheckBoxAction();
    internal static string get_SetValueComboBoxAction();
    internal static string get_SetValueEditBoxAction();
    internal static string get_SetValueEditBoxActionWithNewLine();
    internal static string get_SetValueMonthCalendar();
    internal static string get_SetValueSliderAction();
    internal static string get_SetValueUnCheckBoxAction();
    internal static string get_SetValueZoomedInAction();
    internal static string get_SetValueZoomedOutAction();
    internal static string get_SkippingFailedAction();
    internal static string get_Slide();
    internal static string get_StartsWith();
    internal static string get_StartTestCaseTitle();
    internal static string get_Swipe();
    internal static string get_TestStepMarkerAction();
    internal static string get_ThinkTimeWaitMessage();
    internal static string get_TopLevelWindowChange();
    internal static string get_TouchActionLogFormat();
    internal static string get_TouchActionManipulation();
    internal static string get_TouchActionManipulationDown();
    internal static string get_TouchActionManipulationLeft();
    internal static string get_TouchActionManipulationRight();
    internal static string get_TouchActionManipulationUp();
    internal static string get_TouchGestureDirection();
    internal static string get_TouchGestureDuration();
    internal static string get_TouchGestureLength();
    internal static string get_UITestLogTitle();
    internal static string get_Unmute();
    internal static string get_UserName();
    internal static string get_ValidationAction();
    internal static string get_ValueSet();
    internal static string get_VolumeChange();
    internal static string get_WaitForCondition();
    internal static string get_WaitForControlReady();
    internal static string get_WheelDirectionAntiClockwise();
    internal static string get_WheelDirectionClockwise();
    internal static string get_WheelMovementDirection();
    internal static string get_WindowMaximizeAction();
    internal static string get_WindowMinimizeAction();
    internal static string get_WindowRestoreAction();
    internal static string get_XButton1String();
    internal static string get_XButton2String();
}
internal interface Microsoft.VisualStudio.TestTools.UITesting.ISearchArgument {
    public ISearchArgument TopLevelSearchArgument { get; }
    public ISearchArgument ParentSearchArgument { get; }
    public string QueryStringRelativeToTopLevel { get; }
    public string FullQueryString { get; }
    public string SingleQueryString { get; }
    public bool IsTopLevelWindow { get; }
    public bool IsBrowserWindow { get; }
    public string SessionId { get; }
    public bool SkipIntermediateElements { get; }
    public bool IsExpansionRequired { get; }
    public IPlaybackContext PlaybackContext { get; }
    public string TechnologyName { get; }
    public int MaxDepth { get; }
    public UITestControl UITestControl { get; }
    public abstract virtual ISearchArgument get_TopLevelSearchArgument();
    public abstract virtual ISearchArgument get_ParentSearchArgument();
    public abstract virtual string get_QueryStringRelativeToTopLevel();
    public abstract virtual string get_FullQueryString();
    public abstract virtual string get_SingleQueryString();
    public abstract virtual bool get_IsTopLevelWindow();
    public abstract virtual bool get_IsBrowserWindow();
    public abstract virtual string get_SessionId();
    public abstract virtual bool get_SkipIntermediateElements();
    public abstract virtual bool get_IsExpansionRequired();
    public abstract virtual IPlaybackContext get_PlaybackContext();
    public abstract virtual string get_TechnologyName();
    public abstract virtual int get_MaxDepth();
    public abstract virtual UITestControl get_UITestControl();
}
internal interface Microsoft.VisualStudio.TestTools.UITesting.IUiaControlsPropertyProvider {
    public ControlType SupportedControlType { get; }
    public abstract virtual ControlType get_SupportedControlType();
    public abstract virtual Type GetSpecializedClass();
    public abstract virtual int GetControlSupportLevel(UITestControl control);
    public abstract virtual Type GetPropertyClassName();
    public abstract virtual Dictionary`2<string, UITestPropertyDescriptor> GetPropertiesMap();
    public abstract virtual string GetPropertyForAction(UITestAction action);
    public abstract virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public abstract virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public abstract virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public abstract virtual bool IsCommonWritableProperty(string propertyName);
    public abstract virtual bool IsCommonReadableProperty(string propertyName);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.JScript.IEJScriptExecutor : object {
    private static string c_scriptType;
    private static string c_scriptReturnVariableName;
    private static string c_scriptReturnFunctionName;
    private static string c_scriptRefineReturnValueFunctionName;
    private static string c_scriptArgumentsName;
    private static string c_scriptRefineReturnValue;
    private static IEJScriptExecutor();
    internal static object ExecuteScript(IHTMLWindow2 window, string script, Object[] args);
    private static string SetArgumentsAndReturnValue(IHTMLWindow2 window, string script, Object[] args);
    private static object ParseArgument(IHTMLWindow2 window, object argument, string currentVar);
    private static object ValidateReturnValue(object retValue, IHTMLWindow2 window, string currentVar);
    private static UITechnologyElement GetTechnologyElement(IHTMLElement element);
    private static object ReadJScriptVariableValue(IHTMLWindow2 window, string variableName);
    private static object SetJScriptVariableValue(IHTMLWindow2 window, string variableName, Object[] values);
    private static void ResetJScriptVariables(IHTMLWindow2 window, String[] variableNames);
}
public class Microsoft.VisualStudio.TestTools.UITesting.Keyboard : object {
    private static Keyboard instance;
    private static List`1<char> listOfSpecialChar;
    private static object lockObject;
    public static Keyboard Instance { get; public set; }
    public static int SendKeysDelay { get; public set; }
    private static Keyboard();
    protected virtual void SendKeysImplementation(UITestControl control, string text, ModifierKeys modifierKeys, bool isEncoded, bool isUnicode);
    protected virtual void PressModifierKeysImplementation(UITestControl control, ModifierKeys keys);
    protected virtual void ReleaseModifierKeysImplementation(UITestControl control, ModifierKeys keys);
    protected virtual void Dispose(bool disposing);
    internal static void Cleanup();
    internal static string HandleSpecialCharacters(string str);
    private static List`1<char> GetSpecialCharater();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public static void SendKeys(string text);
    public static void SendKeys(UITestControl control, string text);
    public static void SendKeys(string text, bool isEncoded);
    public static void SendKeys(UITestControl control, string text, bool isEncoded);
    public static void SendKeys(string text, ModifierKeys modifierKeys);
    public static void SendKeys(UITestControl control, string text, ModifierKeys modifierKeys);
    public static void SendKeys(string text, ModifierKeys modifierKeys, bool isEncoded);
    public static void SendKeys(UITestControl control, string text, ModifierKeys modifierKeys, bool isEncoded);
    public static void SendKeys(string text, ModifierKeys modifierKeys, bool isEncoded, bool isUnicode);
    public static void SendKeys(UITestControl control, string text, ModifierKeys modifierKeys, bool isEncoded, bool isUnicode);
    public static void PressModifierKeys(ModifierKeys keys);
    public static void PressModifierKeys(UITestControl control, ModifierKeys keys);
    public static void ReleaseModifierKeys(ModifierKeys keys);
    public static void ReleaseModifierKeys(UITestControl control, ModifierKeys keys);
    public static Keyboard get_Instance();
    public static void set_Instance(Keyboard value);
    public static int get_SendKeysDelay();
    public static void set_SendKeysDelay(int value);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.Logger.DragActionLoggerHelper : object {
    private static bool s_isDisplacement;
    private static bool s_isDragAction;
    private static bool s_isDragDropAction;
    private static Point s_dummyPoint;
    private static DragAction s_dragActionLogger;
    private static DragDropAction s_dragDropActionLogger;
    private static UITestControl s_previousDragControl;
    private static UITestControl s_targetControl;
    public static bool IsDragAction { get; }
    public static bool IsDragDropAction { get; }
    public static DragAction DragActionLogger { get; }
    public static DragDropAction DragDropActionLogger { get; }
    private static DragActionLoggerHelper();
    public static string GetActionLogString();
    public static void InitializeDrag(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCordinates);
    public static void InitializeStopDrag(UITestControl control, Point relativeCordinates, bool isDisplacementAction);
    public static bool get_IsDragAction();
    public static bool get_IsDragDropAction();
    public static DragAction get_DragActionLogger();
    public static DragDropAction get_DragDropActionLogger();
    private static void Reset();
    private static bool GetResourceStringForDragAction(String& resourceString);
    private static Point GetResourceStringForMissingCoordinatesDragAction(String& resourceString);
    private static string GetResourceStringForDragDrop(String& startLocation, String& endLocation);
    private static string GetFormattedLocation(Point location);
    private static string GetButtonQualifierString(string buttonName);
}
public class Microsoft.VisualStudio.TestTools.UITesting.Mouse : object {
    private static Mouse instance;
    private static object lockObject;
    protected Point LocationImplementation { get; protected set; }
    public static Mouse Instance { get; public set; }
    public static Point Location { get; public set; }
    public static int HoverDuration { get; public set; }
    public static int MouseMoveSpeed { get; public set; }
    public static int MouseDragSpeed { get; public set; }
    private static Mouse();
    protected virtual Point get_LocationImplementation();
    protected virtual void set_LocationImplementation(Point value);
    protected virtual void MoveImplementation(UITestControl control, Point relativeCoordinate);
    protected virtual void HoverImplementation(UITestControl control, Point relativeCoordinate, int millisecondsDuration);
    protected virtual void ClickImplementation(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    protected virtual void DoubleClickImplementation(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    protected virtual void MoveScrollWheelImplementation(UITestControl control, int wheelMoveCount, ModifierKeys modifierKeys);
    protected virtual void StartDraggingImplementation(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    protected virtual void StopDraggingImplementation(UITestControl control, Point coordinate, bool isDisplacement);
    protected virtual void Dispose(bool disposing);
    internal static void Cleanup();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public static Mouse get_Instance();
    public static void set_Instance(Mouse value);
    public static Point get_Location();
    public static void set_Location(Point value);
    public static void Click();
    public static void Click(UITestControl control);
    public static void Click(MouseButtons button);
    public static void Click(UITestControl control, MouseButtons button);
    public static void Click(ModifierKeys modifierKeys);
    public static void Click(UITestControl control, ModifierKeys modifierKeys);
    public static void Click(Point screenCoordinate);
    public static void Click(UITestControl control, Point relativeCoordinate);
    public static void Click(MouseButtons button, ModifierKeys modifierKeys, Point screenCoordinate);
    public static void Click(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public static void DoubleClick();
    public static void DoubleClick(UITestControl control);
    public static void DoubleClick(MouseButtons button);
    public static void DoubleClick(UITestControl control, MouseButtons button);
    public static void DoubleClick(ModifierKeys modifierKeys);
    public static void DoubleClick(UITestControl control, ModifierKeys modifierKeys);
    public static void DoubleClick(Point screenCoordinate);
    public static void DoubleClick(UITestControl control, Point relativeCoordinate);
    public static void DoubleClick(MouseButtons button, ModifierKeys modifierKeys, Point screenCoordinates);
    public static void DoubleClick(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinates);
    public static void Hover(Point screenCoordinate);
    public static void Hover(UITestControl control);
    public static void Hover(UITestControl control, Point relativeCoordinate);
    public static void Hover(Point screenCoordinate, int millisecondsDuration);
    public static void Hover(UITestControl control, Point relativeCoordinate, int millisecondDuration);
    public static void Move(Point screenCoordinate);
    public static void Move(UITestControl control, Point relativeCoordinate);
    public static void MoveScrollWheel(int wheelMoveCount);
    public static void MoveScrollWheel(UITestControl control, int wheelMoveCount);
    public static void MoveScrollWheel(int wheelMoveCount, ModifierKeys modifierKeys);
    public static void MoveScrollWheel(UITestControl control, int wheelMoveCount, ModifierKeys modifierKeys);
    public static void StartDragging(UITestControl control);
    public static void StartDragging(UITestControl control, MouseButtons button);
    public static void StartDragging(UITestControl control, Point relativeCoordinate);
    public static void StartDragging();
    public static void StartDragging(UITestControl control, Point relativeCoordinate, MouseButtons button, ModifierKeys modifierKeys);
    public static void StopDragging(UITestControl control);
    public static void StopDragging(UITestControl control, Point relativeCoordinate);
    public static void StopDragging(UITestControl control, int moveByX, int moveByY);
    public static void StopDragging(int moveByX, int moveByY);
    public static void StopDragging(Point pointToStop);
    public static int get_HoverDuration();
    public static void set_HoverDuration(int value);
    public static int get_MouseMoveSpeed();
    public static void set_MouseMoveSpeed(int value);
    public static int get_MouseDragSpeed();
    public static void set_MouseDragSpeed(int value);
}
public static class Microsoft.VisualStudio.TestTools.UITesting.Playback : object {
    [CompilerGeneratedAttribute]
private static bool <IsInitialized>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsSessionStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <IsInExceptionMappingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static IPlaybackContext <PlaybackContext>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <TakeNextFailureScreenShot>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventHandler`1<PlaybackErrorEventArgs> PlaybackError;
    [CompilerGeneratedAttribute]
private static EventHandler`1<ErrorLogEventArgs> InternalPlaybackErrorLog;
    private static object initLockObject;
    private static string TechnologyManagerNamespacePrefix;
    private static SimpleTimer totalPlaybackTime;
    private static int ScreenShotBorderWidth;
    private static int ScreenShotBorderPadding;
    internal static int presentTestNumber;
    public static bool IsInitialized { get; public set; }
    public static bool IsSessionStarted { get; public set; }
    public static PlaybackSettings PlaybackSettings { get; }
    internal static bool IsInExceptionMappingContext { get; internal set; }
    internal static ILastInvocationInfo LastSearchInfo { get; }
    internal static ILastInvocationInfo LastStepInfo { get; }
    internal static IPlaybackContext PlaybackContext { get; internal set; }
    internal static bool TakeNextFailureScreenShot { get; internal set; }
    private static Playback();
    public static void Initialize();
    public static void Cleanup();
    [SuppressMessageAttribute("Microsoft.Reliability", "CA2000:DisposeObjectsBeforeLosingScope")]
public static void StartSession();
    public static void StopSession();
    [CompilerGeneratedAttribute]
public static bool get_IsInitialized();
    [CompilerGeneratedAttribute]
public static void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public static bool get_IsSessionStarted();
    [CompilerGeneratedAttribute]
public static void set_IsSessionStarted(bool value);
    public static PlaybackSettings get_PlaybackSettings();
    public static void Cancel();
    public static int Wait(int thinkTimeMilliseconds);
    public static string EncryptText(string textToEncrypt);
    public static IUITechnologyManager GetNativeCoreTechnologyManager(string technologyName);
    public static UITechnologyManager GetCoreTechnologyManager(string technologyName);
    public static UITestPropertyProvider GetCorePropertyProvider(UITestControl uiControl);
    internal static void MapAndThrowException(Exception exception, bool isSearchContext);
    internal static void MapAndThrowException(Exception exception, string queryId);
    internal static void MapAndThrowException(Exception exception, string actionName, UITestControl uiControl);
    internal static void MapAndThrowException(Exception exception, string actionName, object parameterValue, UITestControl uiControl);
    internal static void MapAndThrowException(Exception exception, string actionName, UITestControl uiControl, int X, int Y);
    internal static void MapAndThrowException(Exception exception, IPlaybackContext context);
    internal static void AddUITestControlDescriptionToException(Exception exception, IPlaybackContext context);
    [CompilerGeneratedAttribute]
internal static bool get_IsInExceptionMappingContext();
    [CompilerGeneratedAttribute]
internal static void set_IsInExceptionMappingContext(bool value);
    internal static ILastInvocationInfo get_LastSearchInfo();
    internal static ILastInvocationInfo get_LastStepInfo();
    [CompilerGeneratedAttribute]
internal static IPlaybackContext get_PlaybackContext();
    [CompilerGeneratedAttribute]
internal static void set_PlaybackContext(IPlaybackContext value);
    internal static int GetActualThinkTime(int duration);
    internal static void Delay(int duration);
    internal static void WaitForDelayBetweenActions();
    private static void MapAndThrowComException(COMException innerException, IPlaybackContext context);
    internal static string GetUITestControlString(UITestControl control);
    private static string GetUITestControlString(PropertyExpressionCollection properties);
    internal static bool ExceptionFromPropertyProvider(Exception ex);
    private static void CheckTechnologyNotSupportedAndThrow(COMException ex);
    private static void MapControlNotFoundException(COMException ex, IPlaybackContext context);
    private static bool IsDifferentWindowAtPoint(IntPtr currentProcess, POINT pt, IntPtr& blockingWindow);
    private static void ThrowIfAnotherWindowIsBlockingControl(COMException ex, IPlaybackContext context);
    private static string SetStringIfNull(string source, string target);
    private static void ThrowIfScreenLockedOrRemoteSessionMinimized();
    private static void PlaybackErrorHandler(object sender, PlaybackErrorEventArgs eventArgs);
    private static void PlaybackErrorLoggingHandler(object sender, ErrorLogEventArgs eventArgs);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static void CaptureScreenShot(UITestControl control);
    private static Rectangle GetBoundsToHighlightInScreenShot(UITestControl control, Boolean& isActualControl);
    internal static PlaybackErrorOptions HandleExceptionAndRetry(Exception ex, UITestControl control, bool allowUserToHandleException);
    [CompilerGeneratedAttribute]
internal static bool get_TakeNextFailureScreenShot();
    [CompilerGeneratedAttribute]
internal static void set_TakeNextFailureScreenShot(bool value);
    [CompilerGeneratedAttribute]
public static void add_PlaybackError(EventHandler`1<PlaybackErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_PlaybackError(EventHandler`1<PlaybackErrorEventArgs> value);
    [CompilerGeneratedAttribute]
private static void add_InternalPlaybackErrorLog(EventHandler`1<ErrorLogEventArgs> value);
    [CompilerGeneratedAttribute]
private static void remove_InternalPlaybackErrorLog(EventHandler`1<ErrorLogEventArgs> value);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.PlaybackContext : object {
    private string queryId;
    private IQueryCondition queryCondition;
    private UITestControl uiControl;
    private string actionName;
    private Point location;
    private bool isSearchContext;
    public string ActionName { get; public set; }
    public string FriendlyName { get; }
    public string ParentFriendlyName { get; }
    public string FriendlyTypeName { get; }
    public string ParentTypeName { get; }
    public string QueryId { get; public set; }
    public IQueryCondition Condition { get; public set; }
    public Point ActionLocation { get; public set; }
    public object UITestControl { get; public set; }
    public bool IsSearchContext { get; public set; }
    public bool IsTopLevelSearch { get; }
    public PlaybackContext(bool isSearchContext);
    public PlaybackContext(IQueryCondition queryCondition, UITestControl uiTestControl);
    public PlaybackContext(string queryId);
    public PlaybackContext(string actionName, UITestControl uiControl);
    public PlaybackContext(string actionName, UITestControl uiControl, Point location);
    public sealed virtual string get_ActionName();
    public sealed virtual void set_ActionName(string value);
    public sealed virtual string get_FriendlyName();
    public sealed virtual string get_ParentFriendlyName();
    public sealed virtual string get_FriendlyTypeName();
    public sealed virtual string get_ParentTypeName();
    public sealed virtual string get_QueryId();
    public void set_QueryId(string value);
    public sealed virtual IQueryCondition get_Condition();
    public void set_Condition(IQueryCondition value);
    public sealed virtual Point get_ActionLocation();
    public void set_ActionLocation(Point value);
    public sealed virtual object get_UITestControl();
    public sealed virtual void set_UITestControl(object value);
    public sealed virtual bool get_IsSearchContext();
    public void set_IsSearchContext(bool value);
    public sealed virtual bool get_IsTopLevelSearch();
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static string GetFriendlyName(UITestControl uiControl);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static string GetFriendlyTypeName(UITestControl uiControl);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
private static UITestControl GetParent(UITestControl uiControl);
}
public class Microsoft.VisualStudio.TestTools.UITesting.PlaybackErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private PlaybackErrorOptions <Result>k__BackingField;
    private Exception error;
    public Exception Error { get; }
    public PlaybackErrorOptions Result { get; public set; }
    public PlaybackErrorEventArgs(Exception ex);
    public Exception get_Error();
    [CompilerGeneratedAttribute]
public PlaybackErrorOptions get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(PlaybackErrorOptions value);
}
public enum Microsoft.VisualStudio.TestTools.UITesting.PlaybackErrorOptions : Enum {
    public int value__;
    public static PlaybackErrorOptions Default;
    public static PlaybackErrorOptions Retry;
    public static PlaybackErrorOptions Skip;
}
public class Microsoft.VisualStudio.TestTools.UITesting.PlaybackSettings : object {
    [CompilerGeneratedAttribute]
private int <MaximumRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinueOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdateTitleInWindowSearch>k__BackingField;
    internal bool HasAnotherActionStarted;
    private int delayBetweenActions;
    private double thinkTimeMultiplier;
    private bool waitForReadyEnabled;
    private bool autoRefetchEnabled;
    private bool alwaysSearchControls;
    private int hoverDuration;
    private int mouseMoveSpeed;
    private int mouseDragSpeed;
    private static PlaybackSettings instance;
    private int navigationTimeout;
    private string htmlLoggerState;
    private static int DefaultMaximumPermissibleRetryAttempts;
    private static int DefaultSendKeysDelay;
    private static int DefaultSearchTimeout;
    private static int DefaultWaitForReadyTimeout;
    private static int DefaultNavigationTimeout;
    private static int DefaultDelayBetweenActions;
    private static double DefaultThinkTimeMultiplier;
    private static int DefaultEncryptionKeyLength;
    private static int DefaultHoverDuration;
    private static int DefaultMouseMoveSpeed;
    private static int DefaultMouseDragSpeed;
    private static int MinValueForDelayBetweenActions;
    internal static PlaybackSettings Instance { get; }
    public int DelayBetweenActions { get; public set; }
    public int SearchTimeout { get; public set; }
    public int WaitForReadyTimeout { get; public set; }
    public bool ShouldSearchFailFast { get; public set; }
    public SmartMatchOptions SmartMatchOptions { get; public set; }
    public bool SearchInMinimizedWindows { get; public set; }
    public double ThinkTimeMultiplier { get; public set; }
    public ICollection`1<int> ImeLanguageList { get; }
    public int MaximumRetryCount { get; public set; }
    public bool MatchExactHierarchy { get; public set; }
    public bool SkipSetPropertyVerification { get; public set; }
    public bool SendKeysAsScanCode { get; public set; }
    public WaitForReadyLevel WaitForReadyLevel { get; public set; }
    public bool ContinueOnError { get; public set; }
    public string LoggerOverrideState { get; public set; }
    internal bool UpdateTitleInWindowSearch { get; internal set; }
    internal int NavigationTimeout { get; internal set; }
    internal int DelayBetweenSendKeys { get; internal set; }
    internal bool DebugModeOn { get; internal set; }
    internal bool WaitForReadyEnabled { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
internal bool AutoRefetchEnabled { get; internal set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public bool AlwaysSearchControls { get; public set; }
    internal bool TopLevelWindowSinglePassSearch { get; internal set; }
    internal int HoverDuration { get; internal set; }
    internal int MouseMoveSpeed { get; internal set; }
    internal int MouseDragSpeed { get; internal set; }
    internal static PlaybackSettings get_Instance();
    public void ResetToDefault();
    public int get_DelayBetweenActions();
    public void set_DelayBetweenActions(int value);
    public int get_SearchTimeout();
    public void set_SearchTimeout(int value);
    public int get_WaitForReadyTimeout();
    public void set_WaitForReadyTimeout(int value);
    public bool get_ShouldSearchFailFast();
    public void set_ShouldSearchFailFast(bool value);
    public SmartMatchOptions get_SmartMatchOptions();
    public void set_SmartMatchOptions(SmartMatchOptions value);
    public bool get_SearchInMinimizedWindows();
    public void set_SearchInMinimizedWindows(bool value);
    public double get_ThinkTimeMultiplier();
    public void set_ThinkTimeMultiplier(double value);
    public ICollection`1<int> get_ImeLanguageList();
    [CompilerGeneratedAttribute]
public int get_MaximumRetryCount();
    [CompilerGeneratedAttribute]
public void set_MaximumRetryCount(int value);
    public bool get_MatchExactHierarchy();
    public void set_MatchExactHierarchy(bool value);
    public bool get_SkipSetPropertyVerification();
    public void set_SkipSetPropertyVerification(bool value);
    public bool get_SendKeysAsScanCode();
    public void set_SendKeysAsScanCode(bool value);
    public WaitForReadyLevel get_WaitForReadyLevel();
    public void set_WaitForReadyLevel(WaitForReadyLevel value);
    public void SetEncryptionKeyLocation(string keyLocation, int keySize);
    [CompilerGeneratedAttribute]
public bool get_ContinueOnError();
    [CompilerGeneratedAttribute]
public void set_ContinueOnError(bool value);
    public string get_LoggerOverrideState();
    public void set_LoggerOverrideState(string value);
    [CompilerGeneratedAttribute]
internal bool get_UpdateTitleInWindowSearch();
    [CompilerGeneratedAttribute]
internal void set_UpdateTitleInWindowSearch(bool value);
    internal int get_NavigationTimeout();
    internal void set_NavigationTimeout(int value);
    internal int get_DelayBetweenSendKeys();
    internal void set_DelayBetweenSendKeys(int value);
    internal bool get_DebugModeOn();
    internal void set_DebugModeOn(bool value);
    internal bool get_WaitForReadyEnabled();
    internal void set_WaitForReadyEnabled(bool value);
    internal bool get_AutoRefetchEnabled();
    internal void set_AutoRefetchEnabled(bool value);
    public bool get_AlwaysSearchControls();
    public void set_AlwaysSearchControls(bool value);
    internal bool get_TopLevelWindowSinglePassSearch();
    internal void set_TopLevelWindowSinglePassSearch(bool value);
    internal int get_HoverDuration();
    internal void set_HoverDuration(int value);
    internal int get_MouseMoveSpeed();
    internal void set_MouseMoveSpeed(int value);
    internal int get_MouseDragSpeed();
    internal void set_MouseDragSpeed(int value);
    internal void ApplySettings(IDictionary`2<string, string> appSettings);
    internal static void ApplyTechnologySpecificCurrentSettings();
    internal static void SetSearchTimeOutOrThrowException(int searchTimeOut, string queryId);
    internal static void CheckForMinimumPermissibleValue(int minimumPermissibleValue, int value, string parameterName);
    private static T GetConfigOptionValue(string optionName, T defaultValue, IDictionary`2<string, string> appSettings);
    private static int GetConfigOptionValueInt(string optionName, int defaultValue, IDictionary`2<string, string> appSettings);
    private static double GetConfigOptionValueDouble(string optionName, double defaultValue, IDictionary`2<string, string> appSettings);
    private static SmartMatchOptions GetSmartMatchOptions(IDictionary`2<string, string> appSettings);
    private static void AddLocaleIdentifiers(PlaybackSettings settings, Int32[] identifiers);
}
internal abstract class Microsoft.VisualStudio.TestTools.UITesting.PropertyProviderBase : UITestPropertyProvider {
    protected Dictionary`2<ControlType, Dictionary`2<string, UITestPropertyDescriptor>> controlTypeToPropertiesMap;
    protected Dictionary`2<string, UITestPropertyDescriptor> commonProperties;
    protected Dictionary`2<ControlType, Type> controlTypeToPropertyNamesClassMap;
    protected string technologyName;
    protected string specializedClassesNamespace;
    protected string specializedClassNamePrefix;
    private string controlString;
    public virtual ICollection`1<string> GetPropertyNames(UITestControl uiControl);
    public virtual UITestPropertyDescriptor GetPropertyDescriptor(UITestControl uiControl, string propertyName);
    public virtual object GetPropertyValue(UITestControl uiControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiControl, string propertyName, object value);
    public virtual int GetControlSupportLevel(UITestControl uiControl);
    public virtual string GetPropertyForAction(UITestControl uiControl, UITestAction action);
    public virtual String[] GetPropertyForControlState(UITestControl uiControl, ControlStates uiState, Boolean[]& stateValues);
    public virtual Type GetPropertyNamesClassType(UITestControl uiControl);
    public virtual Type GetSpecializedClass(UITestControl uiControl);
    public virtual String[] GetPredefinedSearchProperties(Type specializedClass);
    protected abstract virtual string GetPropertyForAction(string controlType, UITestAction action);
    protected abstract virtual String[] GetPropertyForControlState(string controlType, ControlStates uiState, Boolean[]& stateValues);
    protected abstract virtual object GetPropertyValueInternal(UITestControl uiControl, string propertyName);
    internal void ThrowExceptionIfControlDisabled();
    internal void ThrowExceptionIfReadOnly();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.PropertyProviderManager : object {
    private bool isInGetPropertyProviderContext;
    private object syncLock;
    private static IList`1<UITestPropertyProvider> providerList;
    private static PropertyProviderManager instance;
    private static string PropertyProviderNamespacePrefix;
    public static PropertyProviderManager Instance { get; }
    public IList`1<UITestPropertyProvider> ProviderList { get; }
    private static PropertyProviderManager();
    public static PropertyProviderManager get_Instance();
    public IList`1<UITestPropertyProvider> get_ProviderList();
    public UITestPropertyProvider GetCorePropertyProvider(UITestControl uiControl);
    public UITestPropertyProvider GetPropertyProvider(UITestControl uiControl);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.UITesting.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionWithValue { get; }
    internal static string AlternateFileName { get; }
    internal static string AutClosedMessage { get; }
    internal static string BlackoutDate { get; }
    internal static string BlackoutDateRange { get; }
    internal static string BrowserDialogNotFound { get; }
    internal static string BrowserNotInstalled { get; }
    internal static string BrowserNotSupported { get; }
    internal static string BrowserOperationNotSupported { get; }
    internal static string BrowserVersionMismatch { get; }
    internal static string BrowserWindowNotFound { get; }
    internal static string CaptureProtectedWindowMessage { get; }
    internal static string ColorDifferenceToString { get; }
    internal static string ControlDetailsNotSpecified { get; }
    internal static string EncryptedText { get; }
    internal static string ExecutableNotFound { get; }
    internal static string ExecutableNotSpecified { get; }
    internal static string ExecutableNotValid { get; }
    internal static string ExecutableUnknownError { get; }
    internal static string ExecuteFailedAsProcessExited { get; }
    internal static string ExtraRowSpecifiedAsContainer { get; }
    internal static string FileName { get; }
    internal static string FirefoxNotInstalled { get; }
    internal static string FormatForErrorWithFileName { get; }
    internal static string FormatForErrorWithFileNameAndAlternateFileName { get; }
    internal static string GetPropertyActionName { get; }
    internal static string GetPropertyFailed { get; }
    internal static string GetPropertyFailedOnPassword { get; }
    internal static string GetPropertyNotSupportedMessage { get; }
    internal static string GetPropertyNotSupportedOnIndeterminate { get; }
    internal static string GetPropertyValuesValueTypeIncorrectMessage { get; }
    internal static string ImageSizesNotEqual { get; }
    internal static string InvalidArgumentValue { get; }
    internal static string InvalidCoreTechManager { get; }
    internal static string InvalidDateFormat { get; }
    internal static string InvalidListItemOperation { get; }
    internal static string InvalidMultiSelectionState { get; }
    internal static string InvalidNativeElement { get; }
    internal static string InvalidNullValue { get; }
    internal static string InvalidParameterValue { get; }
    internal static string InvalidParameterValueFormat { get; }
    internal static string InvalidParameterValueOfDataType { get; }
    internal static string InvalidPropertyForWait { get; }
    internal static string InvalidSearchProperty { get; }
    internal static string InvalidTechnologyNameSpecified { get; }
    internal static string MediaSourceFailToLoad { get; }
    internal static string NextSiblingNotSupportedWithFindMatchingControls { get; }
    internal static string NoCorePropertyProviderExists { get; }
    internal static string NoRowSpecifiedAsContainer { get; }
    internal static string NoSearchPropertiesSpecified { get; }
    internal static string NoSupportForFilterProperties { get; }
    internal static string NoTableSpecifiedAsContainer { get; }
    internal static string NotAListViewItemControl { get; }
    internal static string NoTechnologyNameSpecified { get; }
    internal static string NotInReportViewMode { get; }
    internal static string PerfCountersDisabled { get; }
    internal static string PlaybackAlreadyInialized { get; }
    internal static string PlaybackIsNotInitialized { get; }
    internal static string RectangleNotInRange { get; }
    internal static string RestartTestAgent { get; }
    internal static string SessionAlreadyStarted { get; }
    internal static string SessionIsNotStarted { get; }
    internal static string SessionLocked { get; }
    internal static string SetPropertyActionName { get; }
    internal static string SetPropertyFailed { get; }
    internal static string SetPropertyNotSupportedMessage { get; }
    internal static string SetStateNotSupportedForControlMessage { get; }
    internal static string SetStateNotSupportedForControlTypeMessage { get; }
    internal static string SetValueNotSupportedMessage { get; }
    internal static string StartDraggingFailure { get; }
    internal static string StopDraggingFailure { get; }
    internal static string StoreApplicationActivationError { get; }
    internal static string StoreApplicationClosedAfterLaunch { get; }
    internal static string UITestControlStringFormat { get; }
    internal static string UITestingExtensionPackageDescription { get; }
    internal static string UnableToFindDocument { get; }
    internal static string UnableToFindMainWindow { get; }
    internal static string UnableToFindTopLevelWindow { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionWithValue();
    internal static string get_AlternateFileName();
    internal static string get_AutClosedMessage();
    internal static string get_BlackoutDate();
    internal static string get_BlackoutDateRange();
    internal static string get_BrowserDialogNotFound();
    internal static string get_BrowserNotInstalled();
    internal static string get_BrowserNotSupported();
    internal static string get_BrowserOperationNotSupported();
    internal static string get_BrowserVersionMismatch();
    internal static string get_BrowserWindowNotFound();
    internal static string get_CaptureProtectedWindowMessage();
    internal static string get_ColorDifferenceToString();
    internal static string get_ControlDetailsNotSpecified();
    internal static string get_EncryptedText();
    internal static string get_ExecutableNotFound();
    internal static string get_ExecutableNotSpecified();
    internal static string get_ExecutableNotValid();
    internal static string get_ExecutableUnknownError();
    internal static string get_ExecuteFailedAsProcessExited();
    internal static string get_ExtraRowSpecifiedAsContainer();
    internal static string get_FileName();
    internal static string get_FirefoxNotInstalled();
    internal static string get_FormatForErrorWithFileName();
    internal static string get_FormatForErrorWithFileNameAndAlternateFileName();
    internal static string get_GetPropertyActionName();
    internal static string get_GetPropertyFailed();
    internal static string get_GetPropertyFailedOnPassword();
    internal static string get_GetPropertyNotSupportedMessage();
    internal static string get_GetPropertyNotSupportedOnIndeterminate();
    internal static string get_GetPropertyValuesValueTypeIncorrectMessage();
    internal static string get_ImageSizesNotEqual();
    internal static string get_InvalidArgumentValue();
    internal static string get_InvalidCoreTechManager();
    internal static string get_InvalidDateFormat();
    internal static string get_InvalidListItemOperation();
    internal static string get_InvalidMultiSelectionState();
    internal static string get_InvalidNativeElement();
    internal static string get_InvalidNullValue();
    internal static string get_InvalidParameterValue();
    internal static string get_InvalidParameterValueFormat();
    internal static string get_InvalidParameterValueOfDataType();
    internal static string get_InvalidPropertyForWait();
    internal static string get_InvalidSearchProperty();
    internal static string get_InvalidTechnologyNameSpecified();
    internal static string get_MediaSourceFailToLoad();
    internal static string get_NextSiblingNotSupportedWithFindMatchingControls();
    internal static string get_NoCorePropertyProviderExists();
    internal static string get_NoRowSpecifiedAsContainer();
    internal static string get_NoSearchPropertiesSpecified();
    internal static string get_NoSupportForFilterProperties();
    internal static string get_NoTableSpecifiedAsContainer();
    internal static string get_NotAListViewItemControl();
    internal static string get_NoTechnologyNameSpecified();
    internal static string get_NotInReportViewMode();
    internal static string get_PerfCountersDisabled();
    internal static string get_PlaybackAlreadyInialized();
    internal static string get_PlaybackIsNotInitialized();
    internal static string get_RectangleNotInRange();
    internal static string get_RestartTestAgent();
    internal static string get_SessionAlreadyStarted();
    internal static string get_SessionIsNotStarted();
    internal static string get_SessionLocked();
    internal static string get_SetPropertyActionName();
    internal static string get_SetPropertyFailed();
    internal static string get_SetPropertyNotSupportedMessage();
    internal static string get_SetStateNotSupportedForControlMessage();
    internal static string get_SetStateNotSupportedForControlTypeMessage();
    internal static string get_SetValueNotSupportedMessage();
    internal static string get_StartDraggingFailure();
    internal static string get_StopDraggingFailure();
    internal static string get_StoreApplicationActivationError();
    internal static string get_StoreApplicationClosedAfterLaunch();
    internal static string get_UITestControlStringFormat();
    internal static string get_UITestingExtensionPackageDescription();
    internal static string get_UnableToFindDocument();
    internal static string get_UnableToFindMainWindow();
    internal static string get_UnableToFindTopLevelWindow();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.SearchHelper : object {
    [CompilerGeneratedAttribute]
private bool <InRetryMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PlaybackCanceled>k__BackingField;
    private Dictionary`2<string, UITestControl> cachedTopLevelControls;
    private object syncLock;
    private static SearchHelper searchHelper;
    public static SearchHelper Instance { get; }
    public bool InRetryMode { get; public set; }
    public bool PlaybackCanceled { get; public set; }
    private static SearchHelper();
    public static SearchHelper get_Instance();
    public void ResetCache();
    public UITestControlCollection SearchAll(ISearchArgument searchArg);
    public UITestControl Search(ISearchArgument searchArg);
    public void UpdateTopLevelElementCache(ISearchArgument searchArg, UITestControl control);
    [CompilerGeneratedAttribute]
public bool get_InRetryMode();
    [CompilerGeneratedAttribute]
public void set_InRetryMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_PlaybackCanceled();
    [CompilerGeneratedAttribute]
public void set_PlaybackCanceled(bool value);
    public void ResetTopLevelElementCache();
    private UITestControl GetTopLevelElement(bool useCache, bool useCacheOnly, ISearchArgument searchArg, IList`1<string> windowTitles, Int32& timeLeft);
    private static UITestControl SearchTopLevelWindow(ISearchArgument topLevelSearchArg, string topLevelElementQueryId);
    private UITestControl GetTitleUpdatedTopLevelWindow(ISearchArgument topLevelSearchArg, string queryId, IList`1<string> windowTitles);
    private UITestControl SearchUsingMultipleTitles(ISearchArgument topLevelSearchArg, QueryId topLevelQueryId, IList`1<string> windowTitles);
    private static int GetSearchTimeoutPerTitle(int windowTitleCount);
    private UITestControl GetElement(bool useCache, ISearchArgument searchArg);
    private UITestControl GetUITestControlRecursive(bool useCache, bool alwaysSearch, ISearchArgument searchArg, IList`1<string> windowTitles, Int32& timeLeft);
    private UITestControl GetBoundUITestControl(ISearchArgument searchArg);
    private UITestControl GetFromTopLevelCachesUsingSessionId(ISearchArgument searchArg);
    private void ThrowIfPlaybackCancelled();
    private void UpdateBoundUITestControl(ISearchArgument searchArg, UITestControl uiControl);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.UITesting.SingleValueToleranceMap : Snapshot {
    private Color toleraceColor;
    internal Color Item { get; internal set; }
    internal SingleValueToleranceMap(Color color);
    internal virtual Color get_Item(int row, int column);
    internal virtual void set_Item(int row, int column, Color value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.VisualStudio.TestTools.UITesting.Snapshot : object {
    private Color[0...,0...] buffer;
    internal int Width { get; }
    internal int Height { get; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1023")]
internal Color Item { get; internal set; }
    internal Snapshot(int height, int width);
    internal virtual int get_Width();
    internal virtual int get_Height();
    internal virtual Color get_Item(int row, int column);
    internal virtual void set_Item(int row, int column, Color value);
    internal static Snapshot FromImage(Image sourceImage);
    internal Image ToImage();
    internal void SetAllPixels(Color colorToSet);
    private Bitmap CreateBitmap();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.TechnologyElementPropertyProvider : PropertyProviderBase {
    private static PropertyProviderBase instance;
    internal static PropertyProviderBase Instance { get; }
    private static Dictionary`2<string, UITestPropertyDescriptor> InitializeCommonProperties();
    public virtual ICollection`1<string> GetPropertyNames(UITestControl uiControl);
    public virtual UITestPropertyDescriptor GetPropertyDescriptor(UITestControl uiControl, string propertyName);
    public virtual int GetControlSupportLevel(UITestControl uiControl);
    public virtual object GetPropertyValue(UITestControl uiControl, string propertyName);
    protected virtual object GetPropertyValueInternal(UITestControl uiControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiControl, string propertyName, object value);
    protected virtual string GetPropertyForAction(string controlType, UITestAction action);
    protected virtual String[] GetPropertyForControlState(string controlType, ControlStates uiState, Boolean[]& stateValues);
    internal static void SetValue(UITestControl uiControl, object value, bool isEncoded, bool preferEdit);
    internal static void SetState(UITestControl uiControl, ControlStates state);
    internal static void SetValueAsEditBox(UITestControl uiControl, string value, bool isEncoded, bool useCopyPaste);
    internal static void SetValueAsListBox(UITestControl uiControl, string value);
    internal static void SetValueAsListBox(UITestControl uiControl, String[] values);
    internal static void SetValueAsComboBox(UITestControl uiControl, string value, bool preferEdit);
    internal static void SetRadioButtonState(UITestControl uiControl, ControlStates state);
    internal static void SetCheckBoxState(UITestControl uiControl, ControlStates state);
    internal static void SetWindowState(UITestControl uiControl, ControlStates state);
    internal static void SetListItemState(UITestControl uiControl, ControlStates state);
    private static void ThrowExceptionIfReadOnly(UITestControl uiControl);
    internal static void SetValueUsingQueryId(UITestControl uiControl, Int32[] selectedIndices, string technologyName, int maxCount);
    internal static String[] CreateQueryIdForSelectedIndices(string technologyName, Int32[] selectedIndices);
    internal static void SelectUsingInstanceAndName(UITestControl uiControl, string name, int instance);
    internal static PropertyProviderBase get_Instance();
}
public class Microsoft.VisualStudio.TestTools.UITesting.ToleranceRectangle : ValueType {
    [CompilerGeneratedAttribute]
private Rectangle <Rectangle>k__BackingField;
    [CompilerGeneratedAttribute]
private ColorDifference <Difference>k__BackingField;
    public Rectangle Rectangle { get; public set; }
    public ColorDifference Difference { get; public set; }
    [CompilerGeneratedAttribute]
public Rectangle get_Rectangle();
    [CompilerGeneratedAttribute]
public void set_Rectangle(Rectangle value);
    [CompilerGeneratedAttribute]
public ColorDifference get_Difference();
    [CompilerGeneratedAttribute]
public void set_Difference(ColorDifference value);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public static bool op_Inequality(ToleranceRectangle left, ToleranceRectangle right);
    public static bool op_Equality(ToleranceRectangle left, ToleranceRectangle right);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.UiaPropertyProvider : UITestPropertyProvider {
    private UITestControl lastControl;
    private IUiaControlsPropertyProvider lastProvider;
    private Dictionary`2<string, List`1<IUiaControlsPropertyProvider>> providersDictionary;
    private List`1<IUiaControlsPropertyProvider> defaultProviders;
    private static UITestPropertyDescriptor s_automationIdPropertyDescriptorForPhoneShellControls;
    private static UiaPropertyProvider();
    private IUiaControlsPropertyProvider GetBestControlProvider(UITestControl control);
    private IUiaControlsPropertyProvider GetBestDefaultProvider(UITestControl control);
    public virtual ICollection`1<string> GetPropertyNames(UITestControl uiTestControl);
    public virtual UITestPropertyDescriptor GetPropertyDescriptor(UITestControl uiTestControl, string propertyName);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual int GetControlSupportLevel(UITestControl uiTestControl);
    public virtual string GetPropertyForAction(UITestControl uiTestControl, UITestAction action);
    public virtual String[] GetPropertyForControlState(UITestControl uiTestControl, ControlStates uiState, Boolean[]& stateValues);
    public virtual Type GetPropertyNamesClassType(UITestControl uiTestControl);
    public virtual Type GetSpecializedClass(UITestControl uiTestControl);
    public virtual String[] GetPredefinedSearchProperties(Type specializedClass);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
}
[ComVisibleAttribute("True")]
public abstract class Microsoft.VisualStudio.TestTools.UITesting.UITechnologyElementProxy : UITechnologyElement {
    private IUITechnologyElement coreTechnologyElement;
    private IUITechnologyElement managedCoreTechnologyElement;
    private UITechnologyManagerProxy technologyManager;
    private IQueryElement queryElement;
    public string TechnologyName { get; }
    public UITechnologyManager TechnologyManager { get; }
    public int ChildIndex { get; }
    public string ClassName { get; }
    public string ControlTypeName { get; }
    public string FriendlyName { get; }
    public bool IsLeafNode { get; }
    public bool IsPassword { get; }
    public bool IsTreeSwitchingRequired { get; }
    public string Name { get; }
    public object NativeElement { get; }
    public IQueryElement QueryId { get; }
    public IUITechnologyElement SwitchingElement { get; public set; }
    public UITechnologyElement TopLevelElement { get; public set; }
    public string Value { get; public set; }
    public IntPtr WindowHandle { get; }
    public AutomationElement AutomationElement { get; }
    internal IUITechnologyElement ManagedCoreTechnologyElement { get; }
    internal IUITechnologyElement CoreTechnologyElement { get; internal set; }
    protected UITechnologyElementProxy(UITechnologyManagerProxy technologyManager, IUITechnologyElement coreTechnologyElement);
    public sealed virtual string get_TechnologyName();
    public sealed virtual UITechnologyManager get_TechnologyManager();
    public virtual bool Equals(IUITechnologyElement element);
    public virtual bool Equals(object obj);
    public virtual int get_ChildIndex();
    public virtual string get_ClassName();
    public virtual string get_ControlTypeName();
    public virtual string get_FriendlyName();
    public virtual bool get_IsLeafNode();
    public virtual bool get_IsPassword();
    public virtual bool get_IsTreeSwitchingRequired();
    public virtual string get_Name();
    public virtual object get_NativeElement();
    public virtual IQueryElement get_QueryId();
    public virtual IUITechnologyElement get_SwitchingElement();
    public virtual void set_SwitchingElement(IUITechnologyElement value);
    public virtual UITechnologyElement get_TopLevelElement();
    public virtual void set_TopLevelElement(UITechnologyElement value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IntPtr get_WindowHandle();
    public virtual void CacheProperties();
    public virtual void EnsureVisibleByScrolling(int pointX, int pointY, Int32& outpointX, Int32& outpointY);
    public virtual void GetBoundingRectangle(Int32& left, Int32& top, Int32& width, Int32& height);
    public virtual void GetClickablePoint(Int32& pointX, Int32& pointY);
    public virtual int GetHashCode();
    public virtual object GetNativeControlType(NativeControlTypeKind nativeControlTypeKind);
    public virtual object GetOption(UITechnologyElementOption technologyElementOption);
    public virtual object GetPropertyValue(string propertyName);
    public virtual string GetQueryIdForRelatedElement(UITestElementKind relatedElement, object additionalInfo, Int32& maxDepth);
    public virtual AccessibleStates GetRequestedState(AccessibleStates requestedState);
    public virtual bool GetRightToLeftProperty(RightToLeftKind rightToLeftKind);
    public virtual int GetScrolledPercentage(ScrollDirection scrollDirection, IUITechnologyElement scrollElement);
    public virtual bool InitializeProgrammaticScroll();
    public virtual void InvokeProgrammaticAction(ProgrammaticActionOption programmaticActionOption);
    public virtual void ScrollProgrammatically(ScrollDirection scrollDirection, ScrollAmount scrollAmount);
    public virtual void SetFocus();
    public virtual void SetOption(UITechnologyElementOption technologyElementOption, object optionValue);
    public virtual string ToString();
    public virtual void WaitForReady();
    public virtual AutomationElement get_AutomationElement();
    internal IUITechnologyElement get_ManagedCoreTechnologyElement();
    internal IUITechnologyElement get_CoreTechnologyElement();
    internal void set_CoreTechnologyElement(IUITechnologyElement value);
}
[ComVisibleAttribute("True")]
public abstract class Microsoft.VisualStudio.TestTools.UITesting.UITechnologyManagerProxy : UITechnologyManager {
    private bool isNativeMsaaCore;
    private bool isRecordingSession;
    private string coreTechnologyName;
    private string extensionTechnologyName;
    private IUITechnologyManager coreTechnologyManager;
    private IUITechnologyManager managedCoreTechnologyManager;
    private NativeMsaaProxy nativeMsaaProxy;
    public string TechnologyName { get; }
    internal IUITechnologyManager CoreTechnologyManager { get; }
    internal IUITechnologyManager ManagedCoreTechnologyManager { get; }
    protected UITechnologyManagerProxy(string coreTechnologyName, string extensionTechnologyName);
    public sealed virtual string get_TechnologyName();
    public abstract virtual IUITechnologyElement ConvertToExtensionElement(IUITechnologyElement coreElement);
    public virtual void StartSession(bool recordingSession);
    public virtual void StopSession();
    public virtual IUITechnologyElement GetElementFromNativeElement(object nativeElement);
    [ComVisibleAttribute("True")]
public virtual IEnumerator GetChildren(IUITechnologyElement element, object parsedQueryIdCookie);
    public virtual IUITechnologyElement GetElementFromWindowHandle(IntPtr handle);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY);
    public virtual IUITechnologyElement GetElementFromPoint(int pointX, int pointY, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetElementFromAutomationElement(AutomationElement element, AutomationElement ceilingElement);
    public virtual IUITechnologyElement GetParent(IUITechnologyElement element);
    public virtual IUITechnologyElement GetNextSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetPreviousSibling(IUITechnologyElement element);
    public virtual IUITechnologyElement GetFocusedElement(IntPtr handle);
    public virtual bool AddEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveEventHandler(IUITechnologyElement element, UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual IUISynchronizationWaiter GetSynchronizationWaiter(IUITechnologyElement element, UITestEventType eventType);
    public virtual Object[] Search(object parsedQueryIdCookie, IUITechnologyElement parentElement, int maxDepth);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public virtual string ParseQueryId(string queryElement, Object& parsedQueryIdCookie);
    [SuppressMessageAttribute("Microsoft.Design", "CA1021:AvoidOutParameters")]
public virtual bool MatchElement(IUITechnologyElement element, object parsedQueryIdCookie, Boolean& useEngine);
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
public virtual ILastInvocationInfo GetLastInvocationInfo();
    public virtual void CancelStep();
    public virtual IUITechnologyElement ConvertToThisTechnology(IUITechnologyElement elementToConvert, Int32& supportLevel);
    public virtual int GetControlSupportLevel(IntPtr windowHandle);
    public virtual bool AddGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual bool RemoveGlobalEventHandler(UITestEventType eventType, IUITestEventNotify eventSink);
    public virtual void ProcessMouseEnter(IntPtr handle);
    public virtual object GetTechnologyManagerProperty(UITechnologyManagerProperty propertyName);
    public virtual void SetTechnologyManagerProperty(UITechnologyManagerProperty propertyName, object propertyValue);
    internal IUITechnologyManager get_CoreTechnologyManager();
    internal IUITechnologyManager get_ManagedCoreTechnologyManager();
    private IUITechnologyElement GetCoreTechnologyElement(IUITechnologyElement element);
    private UITechnologyManager GetCoreUITechnologyManager();
    internal IUITechnologyElement GetExtensionElement(IUITechnologyElement coreElement);
}
public abstract class Microsoft.VisualStudio.TestTools.UITesting.UITestActionExecutor : object {
    public abstract virtual int GetControlSupportLevel(UITechnologyElement control);
    public abstract virtual void MouseMove(UITechnologyElement control, Point relativeCoordinate);
    public abstract virtual void Hover(UITechnologyElement control, Point relativeCoordinate, int millisecondsDuration);
    public abstract virtual void Click(UITechnologyElement control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public abstract virtual void DoubleClick(UITechnologyElement control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public abstract virtual void MoveScrollWheel(UITechnologyElement control, int wheelMoveCount, ModifierKeys modifierKeys);
    public abstract virtual void StartDragging(UITechnologyElement control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public abstract virtual void StopDragging(UITechnologyElement control, Point coordinate, bool isDisplacement);
    public abstract virtual void ReleaseMouse();
    public abstract virtual void SendKeys(UITechnologyElement control, string text, ModifierKeys modifierKeys, bool isUnicode);
    public abstract virtual void PressModifierKeys(UITechnologyElement control, ModifierKeys keys);
    public abstract virtual void ReleaseModifierKeys(UITechnologyElement control, ModifierKeys keys);
    public abstract virtual void ReleaseKeyboard();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.UITestActionExecutorCore : object {
    private static UITestActionExecutorCore s_instance;
    private List`1<ModifierKeys> pressedKeys;
    private MouseButtons pressedMouseButton;
    public static UITestActionExecutorCore Instance { get; }
    private static UITestActionExecutorCore();
    public static UITestActionExecutorCore get_Instance();
    public void MouseMove(UITestControl control, Point relativeCoordinate);
    public void Hover(UITestControl control, Point relativeCoordinate, int millisecondsDuration);
    public void Click(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public void DoubleClick(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public void MoveScrollWheel(UITestControl control, int wheelMoveCount, ModifierKeys modifierKeys);
    public void StartDragging(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinate);
    public void StopDragging(UITestControl control, Point coordinate, bool isDisplacement);
    public void ReleaseMouse();
    public void SendKeys(UITestControl control, string text, ModifierKeys modifierKeys, bool isUnicode, bool isEncoded);
    public void PressModifierKeys(UITestControl control, ModifierKeys modifierKeys);
    public void ReleaseModifierKeys(UITestControl control, ModifierKeys keys);
    public void ReleaseKeyboard();
    private void Move(UITestControl control, Point relativeCoordinate);
}
public class Microsoft.VisualStudio.TestTools.UITesting.UITestControl : object {
    [CompilerGeneratedAttribute]
private bool <InHtmlLoggerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCachedControl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InEnsureValidContext>k__BackingField;
    private UITestPropertyProvider propertyProvider;
    private UITestControl container;
    private int maxDepth;
    private int instance;
    private string technologyName;
    private PropertyExpressionCollection searchProperties;
    private PropertyExpressionCollection filterProperties;
    private ObservableCollection`1<string> searchConfigurations;
    private ObservableCollection`1<string> windowTitles;
    private static bool restoreIfMinimized;
    private ScreenElement screenElement;
    private ScreenElement boundaryScreenElement;
    private UITechnologyElement technologyElement;
    private string cachedQueryId;
    private UITestControl cachedParent;
    private UIObject uiObject;
    private UITestControl controlWithSearchProperties;
    private bool doNotUnbindOnNextSearchPropertiesChangedEvent;
    internal static int WaitForEnabledTimeout;
    private static int WaitForReadyTimeoutForExistsProperty;
    internal UITestControl NextSibling { get; }
    internal UITestControl FirstChild { get; }
    internal UITestControl PreviousSibling { get; }
    internal bool IsBound { get; }
    internal bool InHtmlLoggerContext { get; internal set; }
    internal bool UseCachedControl { get; internal set; }
    internal int MaxDepth { get; internal set; }
    internal int Instance { get; internal set; }
    internal UITechnologyElement TechnologyElement { get; private set; }
    internal ScreenElement ScreenElement { get; private set; }
    internal ControlStates StateValue { get; internal set; }
    internal string ClassNameValue { get; }
    internal string QueryId { get; }
    internal string SessionId { get; internal set; }
    protected bool SearchPropertiesSetExplicitly { get; }
    internal bool RestoreIfMinimized { get; internal set; }
    internal UIObject UIObject { get; }
    internal UITestControl ControlWithSearchProperties { get; }
    private UITestPropertyProvider PropertyProvider { get; }
    internal bool IsRefetchRequired { get; }
    internal bool CanTrustState { get; }
    internal bool InEnsureValidContext { get; private set; }
    public PropertyExpressionCollection SearchProperties { get; }
    public PropertyExpressionCollection FilterProperties { get; }
    public string ClassName { get; }
    public string FriendlyName { get; }
    public bool HasFocus { get; }
    public object NativeElement { get; }
    public Collection`1<string> WindowTitles { get; }
    public Rectangle BoundingRectangle { get; }
    public UITestControl Container { get; public set; }
    public ControlType ControlType { get; }
    public bool Enabled { get; }
    public bool Exists { get; }
    [SuppressMessageAttribute("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
public string TechnologyName { get; public set; }
    public string Name { get; }
    public ICollection`1<string> SearchConfigurations { get; }
    public UITestControl TopParent { get; }
    public bool IsTopParent { get; }
    public IntPtr WindowHandle { get; }
    public ControlStates State { get; }
    public int Width { get; }
    public int Height { get; }
    public int Left { get; }
    public int Top { get; }
    public static UITestControl Desktop { get; }
    internal UITestControl(UIObject uiObject);
    private UITestControl(Point point);
    internal UITestControl(string queryId);
    private UITestControl(IntPtr windowHandle);
    private UITestControl(object nativeElement, string technologyName);
    internal UITestControl(IUITechnologyElement element);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2214")]
private UITestControl(IUITechnologyElement element, UITestControl searchContainer, string queryIdForRefetch);
    private UITestControl(ScreenElement element, string queryIdForRefetch);
    public UITestControl(UITestControl searchLimitContainer);
    private static UITestControl();
    internal static UITestControl FromPoint(Point absoluteCoordinates);
    internal static UITestControl FromWindowHandle(IntPtr windowHandle);
    internal static UITestControl FromNativeElement(object nativeElement, string technologyName);
    internal static UITestControl FromQueryId(string queryId);
    internal static UITestControl FromTechnologyElement(IUITechnologyElement element);
    internal static UITestControl FromTechnologyElement(IUITechnologyElement element, UITestControl containerElement);
    internal static UITestControl FromTechnologyElement(IUITechnologyElement element, UITestControl containerElement, string queryIdForRefetch);
    internal static UITestControl FromScreenElement(ScreenElement element, string queryId);
    internal static UITestControl GetSpecializedControl(UITestControl uiControl);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Inequality(UITestControl left, UITestControl right);
    public static bool op_Equality(UITestControl left, UITestControl right);
    internal Dictionary`2<string, Type> GetReadableAndAssertablePropertyNames();
    internal UITestControl get_NextSibling();
    internal UITestControl get_FirstChild();
    internal UITestControl get_PreviousSibling();
    internal bool get_IsBound();
    [CompilerGeneratedAttribute]
internal bool get_InHtmlLoggerContext();
    [CompilerGeneratedAttribute]
internal void set_InHtmlLoggerContext(bool value);
    [CompilerGeneratedAttribute]
internal bool get_UseCachedControl();
    [CompilerGeneratedAttribute]
internal void set_UseCachedControl(bool value);
    internal int get_MaxDepth();
    internal void set_MaxDepth(int value);
    internal int get_Instance();
    internal void set_Instance(int value);
    internal virtual UITechnologyElement get_TechnologyElement();
    private void set_TechnologyElement(UITechnologyElement value);
    internal ScreenElement get_ScreenElement();
    private void set_ScreenElement(ScreenElement value);
    internal ControlStates get_StateValue();
    internal void set_StateValue(ControlStates value);
    internal string get_ClassNameValue();
    internal virtual string get_QueryId();
    private void EnsureVisiblePrivate(Point point);
    private void DrawHighlightPrivate();
    private Point GetClickablePointPrivate();
    private void SetFocusPrivate();
    private void FindPrivate();
    private object GetPropertyPrivate(string propertyName);
    private bool WaitForControlEnabledPrivate(int millisecondsTimeout);
    private bool WaitForControlReadyPrivate();
    private bool WaitForControlReadyPrivate(int millisecondsTimeout, bool doLogging);
    private void CopyFromPrivate(UITestControl controlToCopy);
    private UITestControlCollection FindMatchingControlsPrivate();
    private UITestControlCollection GetChildrenPrivate();
    private UITestControl GetParentPrivate();
    private void SetPropertyPrivate(string propertyName, object value);
    protected virtual UITestControl[] GetUITestControlsForSearch();
    private bool GetEnabledWithoutWFR();
    private void FindControlIfNecessary();
    private void FindInternal();
    internal bool IsBoundUITestControlValid();
    internal void InvalidateProvider();
    internal void Unbind();
    [CompilerGeneratedAttribute]
internal string get_SessionId();
    [CompilerGeneratedAttribute]
internal void set_SessionId(string value);
    protected virtual bool get_SearchPropertiesSetExplicitly();
    internal bool get_RestoreIfMinimized();
    internal void set_RestoreIfMinimized(bool value);
    internal UIObject get_UIObject();
    internal UITestControl get_ControlWithSearchProperties();
    private object GetPropertyValuePrivate(string propertyName);
    private void SetPropertyValue(string propertyName, object propertyValue);
    internal UITestControlCollection FindDescendants(string queryId, int maxDepth);
    internal UITestControl FindFirstDescendant(string queryId);
    internal UITestControl FindFirstDescendant(string queryId, int maxDepth, Int32& timeLeft);
    internal UITestControl FindFirstDescendant(string queryId, bool expandUIElementWhileSearching, int searchTime);
    private static UITestControl GetNavigationElement(UITechnologyElement currentElement, NavigationType navigationType);
    private string GetTechnologyNamePrivate();
    private T GetPropertyOfType(string propertyName);
    private UITestPropertyProvider get_PropertyProvider();
    internal void EnsureValid(bool waitForReady, bool refetch);
    private void CacheQueryId(string queryId);
    private void CacheQueryId();
    private string GetQueryIdForCaching();
    private UITestControl CreateChildElementWithCachedQueryId(ScreenElement element, string childPartialQid);
    private bool IsCachedProperty(string propertyName);
    internal void CopyControlInternal(UITestControl controlToCopy);
    private void InitializeBoundaryScreenElement();
    [SuppressMessageAttribute("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
private void ValidateSearchProperties();
    internal void CheckInvalidOSVersionForTouch();
    internal void Tap(Point relativeTouchPoint, bool ensureVisible);
    internal void PressAndHold(Point relativeTouchPoint, int duration, bool ensureVisible);
    internal void DoubleTap(Point relativeTouchPoint, bool ensureVisible);
    internal void Flick(Point touchPoint, double directionInDegrees, UInt32 flickLength, UInt32 duration, bool ensureVisible);
    internal void Slide(Point touchPoint, double directionInDegrees, UInt32 slideLength, UInt32 duration, bool ensureVisible);
    internal void Swipe(Point touchPoint, double directionInDegrees, UInt32 swipeLength, bool ensureVisible);
    internal void Pinch(Point touchPoint1, Point touchPoint2, int distance, bool ensureVisible);
    internal void Stretch(Point touchPoint1, Point touchPoint2, int distance, bool ensureVisible);
    internal void Turn(Point touchPoint1, Point touchPoint2, double directionInDegrees, bool ensureVisible);
    private void ExecuteAction(Action action, Action`1<Exception> remapExceptionAction, Func`1<string> messageOnDisabled, bool ensureVisible);
    private void SearchPropertiesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal bool get_IsRefetchRequired();
    internal bool get_CanTrustState();
    [CompilerGeneratedAttribute]
internal bool get_InEnsureValidContext();
    [CompilerGeneratedAttribute]
private void set_InEnsureValidContext(bool value);
    internal void Click(MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinates);
    internal void DoubleClick(MouseButtons button, ModifierKeys modifierKeys, Point relativeCoordinates);
    internal void ScrollMouseWheel(int wheelMoveCount, ModifierKeys modifierKeys);
    internal void StartDragging(Point relativeCoordinate, MouseButtons button, ModifierKeys modifierKeys);
    private void StopDragging(Point relativeCoordinate);
    internal void StopDragging(int offsetX, int offsetY, bool isDisplacement);
    internal void MouseHover(Point relativeCoordinates, int millisecondsDuration, int speed);
    internal void SendKeys(string text, ModifierKeys modifierKeys, bool isEncoded, bool isUnicode);
    internal void PressModifierKeys(ModifierKeys keys);
    internal void ReleaseModifierKeys(ModifierKeys keys);
    private Image CaptureImagePrivate();
    public PropertyExpressionCollection get_SearchProperties();
    public PropertyExpressionCollection get_FilterProperties();
    public void EnsureClickable();
    public void EnsureClickable(Point point);
    public Image CaptureImage();
    public void DrawHighlight();
    public virtual void Find();
    public virtual void SetFocus();
    public Point GetClickablePoint();
    public bool TryGetClickablePoint(Point& point);
    public object GetProperty(string propertyName);
    public virtual void SetProperty(string propertyName, object value);
    public UITestControl GetParent();
    public virtual UITestControlCollection GetChildren();
    public UITestControlCollection FindMatchingControls();
    public virtual void CopyFrom(UITestControl controlToCopy);
    public bool WaitForControlReady();
    public bool WaitForControlReady(int millisecondsTimeout);
    public bool WaitForControlEnabled();
    public bool WaitForControlEnabled(int millisecondsTimeout);
    public bool WaitForControlExist();
    public bool WaitForControlExist(int millisecondsTimeout);
    public bool WaitForControlNotExist();
    public bool WaitForControlNotExist(int millisecondsTimeout);
    public bool WaitForControlPropertyEqual(string propertyName, object propertyValue);
    public bool WaitForControlPropertyEqual(string propertyName, object propertyValue, int millisecondsTimeout);
    public bool WaitForControlPropertyNotEqual(string propertyName, object propertyValue);
    public bool WaitForControlPropertyNotEqual(string propertyName, object propertyValue, int millisecondsTimeout);
    public bool WaitForControlCondition(Predicate`1<UITestControl> conditionEvaluator);
    public bool WaitForControlCondition(Predicate`1<UITestControl> conditionEvaluator, int millisecondsTimeout);
    public static bool WaitForCondition(T conditionContext, Predicate`1<T> conditionEvaluator);
    public static bool WaitForCondition(T conditionContext, Predicate`1<T> conditionEvaluator, int millisecondsTimeout);
    public bool TryFind();
    public virtual string get_ClassName();
    public virtual string get_FriendlyName();
    public virtual bool get_HasFocus();
    public virtual object get_NativeElement();
    public Collection`1<string> get_WindowTitles();
    public virtual Rectangle get_BoundingRectangle();
    public virtual UITestControl get_Container();
    public virtual void set_Container(UITestControl value);
    public virtual ControlType get_ControlType();
    public virtual bool get_Enabled();
    public virtual bool get_Exists();
    public string get_TechnologyName();
    public void set_TechnologyName(string value);
    public virtual string get_Name();
    public ICollection`1<string> get_SearchConfigurations();
    public virtual UITestControl get_TopParent();
    public virtual bool get_IsTopParent();
    public virtual IntPtr get_WindowHandle();
    public virtual ControlStates get_State();
    public virtual int get_Width();
    public virtual int get_Height();
    public virtual int get_Left();
    public virtual int get_Top();
    public static UITestControl get_Desktop();
    [CompilerGeneratedAttribute]
private object <WaitForControlReadyPrivate>b__65_0();
    [CompilerGeneratedAttribute]
private object <Unbind>b__78_0();
    [CompilerGeneratedAttribute]
private object <CaptureImage>b__173_0();
    [CompilerGeneratedAttribute]
private object <DrawHighlight>b__174_0();
    [CompilerGeneratedAttribute]
private object <Find>b__175_0();
    [CompilerGeneratedAttribute]
private object <SetFocus>b__176_0();
    [CompilerGeneratedAttribute]
private object <GetClickablePoint>b__177_0();
    [CompilerGeneratedAttribute]
private object <GetParent>b__181_0();
    [CompilerGeneratedAttribute]
private object <GetChildren>b__182_0();
    [CompilerGeneratedAttribute]
private object <FindMatchingControls>b__183_0();
}
[DefaultMemberAttribute("Item")]
[SuppressMessageAttribute("Microsoft.Design", "CA1058:TypesShouldNotExtendCertainBaseTypes")]
public class Microsoft.VisualStudio.TestTools.UITesting.UITestControlCollection : CollectionBase {
    public bool IsReadOnly { get; }
    public UITestControl Item { get; public set; }
    public sealed virtual void Add(UITestControl item);
    public sealed virtual bool Contains(UITestControl item);
    public sealed virtual void CopyTo(UITestControl[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(UITestControl item);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestTools.UITesting.UITestControlCollection/<GetEnumerator>d__7")]
public sealed virtual IEnumerator`1<UITestControl> GetEnumerator();
    public UITestControl get_Item(int index);
    public void set_Item(int index, UITestControl value);
    public int IndexOf(UITestControl control);
    public void Insert(int index, UITestControl control);
    public void RemoveAll(Predicate`1<UITestControl> predicate);
    public T[] GetPropertyValuesOfControls(string propertyName);
    public String[] GetNamesOfControls();
    public String[] GetValuesOfControls();
    internal static UITestControlCollection FromChildren(UITestControl parentElement);
    private void AddTechnologyElement(UITechnologyElement technologyElement, UITestControl parentElement, Dictionary`2<string, int> countPerControlType);
}
public static class Microsoft.VisualStudio.TestTools.UITesting.UITestControlFactory : object {
    public static UITestControl FromPoint(Point absoluteCoordinates);
    public static UITestControl FromWindowHandle(IntPtr windowHandle);
    public static UITestControl FromNativeElement(object nativeElement, string technologyName);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.UITestControlProperties : object {
    private static Dictionary`2<string, Type> readablePropertyNames;
    private static Dictionary`2<string, Type> nonAssertablePropertyNames;
    private static Dictionary`2<string, string> commonPropertyNameDictionary;
    internal static Dictionary`2<string, Type> ReadablePropertyNames { get; }
    internal static Dictionary`2<string, Type> NonAssertablePropertyNames { get; }
    internal static Dictionary`2<string, string> CommonPropertyNames { get; }
    private static UITestControlProperties();
    internal static Dictionary`2<string, Type> get_ReadablePropertyNames();
    internal static Dictionary`2<string, Type> get_NonAssertablePropertyNames();
    internal static Dictionary`2<string, string> get_CommonPropertyNames();
    private static Dictionary`2<string, Type> InitializeReadableProperties();
    private static Dictionary`2<string, string> InitializeCommonList();
    private static Dictionary`2<string, Type> InitializeNonAssertableProperties();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.UITestControlSearchArgument : object {
    private UITestControl uiControl;
    private string fullQueryString;
    private string singleQueryString;
    private string relativeQueryString;
    public ISearchArgument TopLevelSearchArgument { get; }
    public ISearchArgument ParentSearchArgument { get; }
    public string QueryStringRelativeToTopLevel { get; }
    public string FullQueryString { get; }
    public string SingleQueryString { get; }
    public bool IsTopLevelWindow { get; }
    public bool IsBrowserWindow { get; }
    public string SessionId { get; }
    public bool SkipIntermediateElements { get; }
    public bool IsExpansionRequired { get; }
    public IPlaybackContext PlaybackContext { get; }
    public string TechnologyName { get; }
    public int MaxDepth { get; }
    public UITestControl UITestControl { get; }
    public UITestControlSearchArgument(UITestControl control);
    public sealed virtual ISearchArgument get_TopLevelSearchArgument();
    public sealed virtual ISearchArgument get_ParentSearchArgument();
    public sealed virtual string get_QueryStringRelativeToTopLevel();
    public sealed virtual string get_FullQueryString();
    public sealed virtual string get_SingleQueryString();
    public sealed virtual bool get_IsTopLevelWindow();
    public sealed virtual bool get_IsBrowserWindow();
    public sealed virtual string get_SessionId();
    public sealed virtual bool get_SkipIntermediateElements();
    public sealed virtual bool get_IsExpansionRequired();
    public sealed virtual IPlaybackContext get_PlaybackContext();
    public sealed virtual string get_TechnologyName();
    public sealed virtual int get_MaxDepth();
    public sealed virtual UITestControl get_UITestControl();
    public static bool op_Equality(UITestControlSearchArgument left, UITestControlSearchArgument right);
    public static bool op_Inequality(UITestControlSearchArgument left, UITestControlSearchArgument right);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Equals(object obj);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.UITestingExtensionPackage : UITestExtensionPackageBase {
}
internal class Microsoft.VisualStudio.TestTools.UITesting.UITestLogGenerator : object {
    private static Dictionary`2<ControlInfo, ControlStates> s_controlStateMapping;
    private static UITestLogGenerator s_logGeneratorInstance;
    private static Point s_dummyPoint;
    private static bool s_isPrimaryGroupCreated;
    private static bool s_isPrimarySetupInitialised;
    private string m_displayMessage;
    private string m_headerText;
    private ActionLogFormatter m_alFormatter;
    private static string UITestLogFileName;
    public static UITestLogGenerator LoggerInstance { get; }
    public static bool IsExceptionLogged { get; }
    private static UITestLogGenerator();
    public static void LaunchApplication(string fileName, string alternateFileName, string arguments, string message);
    public static void LaunchApplication(string fileName, string alternateFileName, string arguments, string userName, string domain, string message);
    public static void UrlNavigate(UITestControl control, String[] arguments, string message, bool isNewInstance, string currentBrowserName);
    public static void BrowserDialogActionLog(BrowserDialogAction browserAction, object actionParameter);
    public static void BrowserAction(BrowserActionType actionType, string message);
    public static void BrowserExecuteScriptAction(BrowserActionType actionType, string script);
    public static UITestLogGenerator get_LoggerInstance();
    public static void MouseClick(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, MouseActionType mouseActionType, string message);
    public static void MouseScroll(UITestControl control, int wheelMoveCount, ModifierKeys modifierKeys, string message);
    public static void MouseHover(UITestControl control, Point relativeCoordinate, string message, int millisecondDuration);
    public static void MouseMove(UITestControl control, Point relativeCoordinates, string message);
    public static void MouseDrag(UITestControl control, Point coordinate, string message, bool isDisplacement);
    public static void SendKeys(UITestControl control, string text, ModifierKeys modifierKeys, bool isEncoded, bool isUnicode, string message);
    public static void PerformSimpleGesture(UITestControl control, GestureType gestureType, int gestureDuration);
    public static void PerformManipulationGesture(UITestControl control, Manipulations manipulationType, UInt32 gestureLength, double gestureDirection, UInt32 gestureDuration, Point point1, Point point2);
    public static void SetProperty(UITestControl control, string propertyName, object value, string message);
    public static void LaunchWindowsStoreApplication(string appPackageFamilyName, string arguments, string message);
    public static void AssertActionBeginGroup(UITestControl control, string propertyName);
    public static void BeginGroup(string groupHeaderText, string message);
    public static void PrimaryBeginGroup(string testGroupName, string testResultsDirectory, string testResultsRunDirectory, bool isFirstIteration);
    public static void TestCleanup();
    public static void GenerateLog(bool testExceptionRaised);
    public static void CommitLog(UITestControl control);
    public static List`1<string> GetMessages();
    public static bool get_IsExceptionLogged();
    public static void ExceptionRecorder(Exception exception, bool rethrow);
    public static void ExceptionRecorder(Exception exception);
    public static void ExceptionRecorder(Exception exception, string message);
    public static void ExceptionRecorder(ErrorLogEventArgs errorArgs);
    public static void ExceptionRecorder(Exception exception, string message, Rectangle boundingRectangle, PlaybackErrorOptions errorOption);
    private static string GetArrayString(String[] arguments);
    internal static void OverrideLoggerState(string loggerState);
    internal static void GenerateSnapshotInfo(UITestControl control, SnapshotTime time);
    private static Rectangle GetBoundContainerRectangle(UITestControl control);
    private static ModifierKeys ConvertToInputModifierKeys(ModifierKeys keys);
    private static void CheckSkipIntermediateElements();
    public static void DragActionInitialize(UITestControl control, MouseButtons button, ModifierKeys modifierKeys, Point relativeCordinates);
    private static string CreatePropertyInfoMessage(string property, object value, bool acceptNullValue);
    private static void SetPrimaryLogSettings(string testGroupName, string testResultsDirectory, string testResultsRunDirectory);
    private static void PrimaryBeginGroup();
    private static SnapshotTime GetSnapshotTime(UITestControl control);
    private static MediaActionType GetMediaActionType(string propertyName);
    private static string GetPropertyValueAsString(object value);
    private void InitLog(bool resetTimerInstance);
    private void ResetLogContext();
    private void AppendControlInfo(UITestControl control, string message);
    private void FormatMessage(String[] values);
    private void AppendMessage(string message);
    private static bool IsSetStateForControlType(ControlType controlType, string propertyName);
    private static bool IsSetStateProperty(object value);
    private static Dictionary`2<ControlInfo, ControlStates> InitializeControlStateMapping();
    private static void AddToDictionary(Dictionary`2<ControlInfo, ControlStates> statesMapper, ControlInfo controlInfo, ControlStates states);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestTools.UITesting.UITestPropertyAttributes : Enum {
    public int value__;
    public static UITestPropertyAttributes None;
    public static UITestPropertyAttributes Readable;
    public static UITestPropertyAttributes Writable;
    public static UITestPropertyAttributes Searchable;
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public static UITestPropertyAttributes NonAssertable;
    public static UITestPropertyAttributes DoNotGenerateProperties;
    public static UITestPropertyAttributes CommonToTechnology;
}
public class Microsoft.VisualStudio.TestTools.UITesting.UITestPropertyDescriptor : object {
    private Type dataType;
    private string category;
    private UITestPropertyAttributes attributes;
    private static string ControlSpecific;
    private static string Generic;
    public Type DataType { get; }
    public string Category { get; }
    public UITestPropertyAttributes Attributes { get; }
    public UITestPropertyDescriptor(Type dataType);
    public UITestPropertyDescriptor(Type dataType, UITestPropertyAttributes attributes);
    public UITestPropertyDescriptor(Type dataType, string category);
    public UITestPropertyDescriptor(Type dataType, UITestPropertyAttributes attributes, string category);
    public Type get_DataType();
    public string get_Category();
    public UITestPropertyAttributes get_Attributes();
    public virtual string ToString();
}
public abstract class Microsoft.VisualStudio.TestTools.UITesting.UITestPropertyProvider : object {
    [CompilerGeneratedAttribute]
private UITestControl <UIControl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGetProperty>k__BackingField;
    protected internal UITestControl UIControl { get; protected internal set; }
    protected internal string PropertyName { get; protected internal set; }
    protected internal bool IsGetProperty { get; protected internal set; }
    public abstract virtual ICollection`1<string> GetPropertyNames(UITestControl uiTestControl);
    public abstract virtual UITestPropertyDescriptor GetPropertyDescriptor(UITestControl uiTestControl, string propertyName);
    public abstract virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public abstract virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public abstract virtual int GetControlSupportLevel(UITestControl uiTestControl);
    public abstract virtual string GetPropertyForAction(UITestControl uiTestControl, UITestAction action);
    public abstract virtual String[] GetPropertyForControlState(UITestControl uiTestControl, ControlStates uiState, Boolean[]& stateValues);
    public abstract virtual Type GetPropertyNamesClassType(UITestControl uiTestControl);
    public abstract virtual Type GetSpecializedClass(UITestControl uiTestControl);
    public abstract virtual String[] GetPredefinedSearchProperties(Type specializedClass);
    internal object GetPropertyValueWrapper(UITestControl uiControl, string propertyName);
    internal void SetPropertyValueWrapper(UITestControl uiControl, string propertyName, object value);
    internal static bool TryGetPropertyFromTechnologyElement(UITestControl uiControl, string propertyName, Object& value);
    [CompilerGeneratedAttribute]
protected internal UITestControl get_UIControl();
    [CompilerGeneratedAttribute]
protected internal void set_UIControl(UITestControl value);
    [CompilerGeneratedAttribute]
protected internal string get_PropertyName();
    [CompilerGeneratedAttribute]
protected internal void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
protected internal bool get_IsGetProperty();
    [CompilerGeneratedAttribute]
protected internal void set_IsGetProperty(bool value);
    internal bool MapAndThrowException(Exception exception);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.WinConstants : object {
    public static int WM_USER;
    public static int WM_GETTEXT;
    public static int WM_GETTEXTLENGTH;
    public static int PBM_GETRANGE;
    public static int PBM_GETPOS;
    public static int EM_GETLINE;
    public static int EM_GETLINECOUNT;
    public static int EM_GETLIMITTEXT;
    public static int EM_GETSEL;
    public static int EM_SETSEL;
    public static int EM_LINEINDEX;
    public static int EM_REPLACESEL;
    public static int EM_LINEFROMCHAR;
    public static int EM_GETSELTEXT;
    public static int EM_EXGETSEL;
    public static int EN_CHANGE;
    public static int ES_PASSWORD;
    public static int TCM_FIRST;
    public static int TCM_GETITEMCOUNT;
    public static int TCM_GETCURSEL;
    public static int TCM_SETCURSEL;
    public static int TCM_GETCURFOCUS;
    public static int TCM_SETCURFOCUS;
    public static int TCM_FIRSTTABID;
    public static int TCN_FIRST;
    public static int TCN_SELCHANGE;
    public static int TCN_SELCHANGING;
    public static int TCIF_TEXT;
    public static int TCM_GETITEM;
    public static int TCM_GETITEMRECT;
    public static int TV_FIRST;
    public static int TVM_GETCOUNT;
    public static int TVM_EXPAND;
    public static int TVM_GETITEMA;
    public static int TVM_GETITEM;
    public static int TVM_SETITEM;
    public static int TVM_HITTEST;
    public static int TVM_ENSUREVISIBLE;
    public static int TVIF_TEXT;
    public static int TVIF_IMAGE;
    public static int TVIF_STATE;
    public static int TVIF_HANDLE;
    public static int TVIF_SELECTEDIMAGE;
    public static int TVIF_CHILDREN;
    public static int TVIS_STATEIMAGEMASK;
    public static int TVIS_EXPANDED;
    public static int TVIS_SELECTED;
    public static int TVIS_DROPHILITED;
    public static int TVIS_BOLD;
    public static int TVE_COLLAPSE;
    public static int TVE_EXPAND;
    public static int TVE_TOGGLE;
    public static int TVHT_NOWHERE;
    public static int TVHT_ONITEMICON;
    public static int TVHT_ONITEMLABEL;
    public static int TVHT_ONITEM;
    public static int TVHT_ONITEMINDENT;
    public static int TVHT_ONITEMBUTTON;
    public static int TVHT_ONITEMRIGHT;
    public static int TVHT_ONITEMSTATEICON;
    public static int TVHT_ABOVE;
    public static int TVHT_BELOW;
    public static int TVHT_TORIGHT;
    public static int TVHT_TOLEFT;
    public static int TDS_GRAYTEXT;
    public static int TVM_GETITEMRECT;
    public static int TVGN_ROOT;
    public static int TVM_GETNEXTITEM;
    public static int TVGN_PARENT;
    public static int TVGN_CHILD;
    public static int TVGN_NEXTVISIBLE;
    public static int TVGN_NEXT;
    public static int TVGN_CARET;
    public static int TBM_GETPOS;
    public static int TBM_SETPOS;
    public static int TBM_GETRANGEMIN;
    public static int TBM_GETRANGEMAX;
    public static int TBM_GETTIC;
    public static int TBM_GETTICPOS;
    public static int TBM_GETNUMTICS;
    public static int TBM_GETPAGESIZE;
    public static int TBM_GETLINESIZE;
    public static int TBM_GETTHUMBRECT;
    public static int TBM_GETCHANNELRECT;
    public static int TBM_GETTHUMBLENGTH;
    public static int TBS_AUTOTICKS;
    public static int TBS_VERT;
    public static int TBS_LEFT;
    public static int TBS_TOP;
    public static int TBS_BOTH;
    public static int TBS_NOTICKS;
    public static int TBS_ENABLESELRANGE;
    public static int TBS_FIXEDLENGTH;
    public static int TBS_NOTHUMB;
    public static int TBS_TOOLTIPS;
    public static int TBS_REVERSED;
    public static int TBS_DOWNISLEFT;
    public static long HDM_FIRST;
    public static long HDM_GETITEMCOUNT;
    public static long HDM_GETITEMRECT;
    public static long HDM_GETITEMA;
    public static long HDM_GETITEM;
    public static long HDI_TEXT;
    public static int LVM_FIRST;
    public static int LVM_GETITEM;
    public static int LVM_GETITEMCOUNT;
    public static int LVM_GETITEMTEXTA;
    public static int LVM_GETITEMTEXT;
    public static int LVIF_TEXT;
    public static int LVIF_IMAGE;
    public static int LVM_GETHOTITEM;
    public static int LVIS_SELECTED;
    public static int LVIS_FOCUSED;
    public static int LVIF_STATE;
    public static int LVIF_INDENT;
    public static int LVIR_BOUNDS;
    public static int LVM_HITTEST;
    public static int LVM_ENSUREVISIBLE;
    public static int LVM_GETITEMRECT;
    public static int LVM_GETHEADER;
    public static int LVM_GETEDITCONTROL;
    public static int LVM_GETITEMSTATE;
    public static int LVM_SETITEMSTATE;
    public static int LVM_GETSUBITEMRECT;
    public static int LVM_SETITEM;
    public static int LVIR_ICON;
    public static int LVIR_LABEL;
    public static int LVIR_SELECTBOUNDS;
    public static int LVIS_STATEIMAGEMASK;
    public static int LVHT_NOWHERE;
    public static int LVHT_ONITEMICON;
    public static int LVHT_ONITEMLABEL;
    public static int LVHT_ONITEMSTATEICON;
    public static int LVHT_ONITEM;
    public static int LVM_GETCOLUMNWIDTH;
    public static int LVS_ICON;
    public static int LVS_REPORT;
    public static int LVS_SMALLICON;
    public static int LVS_LIST;
    public static int LVS_SINGLESEL;
    public static int LVS_TYPEMASK;
    public static int LB_ADDSTRING;
    public static int LB_INSERTSTRING;
    public static int LB_DELETESTRING;
    public static int LB_SELITEMRANGEEX;
    public static int LB_RESETCONTENT;
    public static int LB_SETSEL;
    public static int LB_SETCURSEL;
    public static int LB_GETSEL;
    public static int LB_GETCURSEL;
    public static int LB_GETTEXT;
    public static int LB_GETTEXTLEN;
    public static int LB_GETCOUNT;
    public static int LB_SELECTSTRING;
    public static int LB_DIR;
    public static int LB_GETTOPINDEX;
    public static int LB_FINDSTRING;
    public static int LB_GETSELCOUNT;
    public static int LB_GETSELITEMS;
    public static int LB_SETTABSTOPS;
    public static int LB_GETHORIZONTALEXTENT;
    public static int LB_SETHORIZONTALEXTENT;
    public static int LB_SETCOLUMNWIDTH;
    public static int LB_ADDFILE;
    public static int LB_SETTOPINDEX;
    public static int LB_GETITEMRECT;
    public static int LB_GETITEMDATA;
    public static int LB_SETITEMDATA;
    public static int LB_SELITEMRANGE;
    public static int LB_SETANCHORINDEX;
    public static int LB_GETANCHORINDEX;
    public static int LB_SETCARETINDEX;
    public static int LB_GETCARETINDEX;
    public static int LB_SETITEMHEIGHT;
    public static int LB_GETITEMHEIGHT;
    public static int LB_FINDSTRINGEXACT;
    public static int LB_SETLOCALE;
    public static int LB_GETLOCALE;
    public static int LB_SETCOUNT;
    public static int LB_MSGMAX;
    public static int LB_INITSTORAGE;
    public static int LB_ITEMFROMPOINT;
    public static int LBN_ERRSPACE;
    public static int LBN_SELCHANGE;
    public static int LBN_DBLCLK;
    public static int LBN_SELCANCEL;
    public static int LBN_SETFOCUS;
    public static int LBN_KILLFOCUS;
    public static int LBS_MULTIPLESEL;
    public static int LBS_EXTENDEDSEL;
    public static int LBS_COMBOBOX;
    public static int CB_ERR;
    public static int CBEM_GETITEMA;
    public static int CBEM_GETITEMW;
    public static int CB_GETCOUNT;
    public static int CB_GETCURSEL;
    public static int CB_GETLBTEXT;
    public static int CB_GETITEMDATA;
    public static int CB_SETCURSEL;
    public static int CB_SHOWDROPDOWN;
    public static int CB_GETDROPPEDSTATE;
    public static int CBEIF_DI_SETITEM;
    public static int CBEIF_IMAGE;
    public static int CBEIF_INDENT;
    public static int CBEIF_LPARAM;
    public static int CBEIF_OVERLAY;
    public static int CBEIF_SELECTEDIMAGE;
    public static int CBEIF_TEXT;
    public static int WM_HSCROLL;
    public static int WM_VSCROLL;
    public static int WM_REFLECT;
    public static int SBS_HORZ;
    public static int SBS_VERT;
    public static int SBS_CTL;
    public static int SIF_POS;
    public static int SBM_GETPOS;
    public static int SBM_SETPOS;
    public static int CCHILDREN_SCROLLBAR;
    public static int TB_GETBUTTON;
    public static int UDM_GETRANGE;
    public static int UDM_GETPOS;
    public static int QS_SENDMESSAGE;
    public static int QS_ALLPOSTMESSAGE;
    public static int WAIT_OBJECT_0;
    public static int WAIT_FAILED;
    public static int WAIT_TIMEOUT;
    public static int SPI_SETFOREGROUNDLOCKTIMEOUT;
    public static int SPIF_UPDATEINIFILE;
    public static int SPIF_SENDWININICHANGE;
    public static int SPIF_SENDCHANGE;
    public static int TH32CS_SNAPPROCESS;
    public static int INVALID_HANDLE_VALUE;
    public static int MAX_PATH;
    public static int MAX_MODULE_NAME32;
    public static int TH32CS_SNAPMODULE;
    public static int ACCESS_PERMISSIONS;
    public static int PROCESS_QUERY_INFORMATION;
    public static int STILL_ACTIVE;
    public static int RB_GETBANDINFO;
    public static int RB_GETROWCOUNT;
    public static int RB_GETROWHEIGHT;
    public static int RB_GETBANDCOUNT;
    public static int RB_GETRECT;
    public static int RB_GETBANDBORDERS;
    public static int RB_GETBANDMARGINS;
    public static int RB_PUSHCHEVRON;
    public static int RBBIM_CHILD;
    public static int RBBIM_ID;
    public static int RBBIM_TEXT;
    public static UInt32 DISP_E_MEMBERNOTFOUND;
    public static int MF_BYCOMMAND;
    public static int MF_BYPOSITION;
    public static int MN_GETHMENU;
    public static int DTM_GETSYSTEMTIME;
    public static int DTM_SETSYSTEMTIME;
    public static int DTM_GETRANGE;
    public static int DTM_GETMONTHCAL;
    public static int DTS_SHORTDATEFORMAT;
    public static int DTS_UPDOWN;
    public static int DTS_SHOWNONE;
    public static int DTS_LONGDATEFORMAT;
    public static int DTS_TIMEFORMAT;
    public static int DTS_APPCANPARSE;
    public static int MCM_GETRANGE;
    public static int MCM_SETSELRANGE;
    public static int MCM_GETSELRANGE;
    public static int GDT_NONE;
    public static int GDT_VALID;
    public static int WS_THICKFRAME;
    public static int WS_CAPTION;
    public static int WS_POPUP;
    public static int WS_TABSTOP;
    public static int WS_MAXIMIZE;
    public static int WS_VISIBLE;
    public static int WS_ICONIC;
    public static int WS_EX_TRANSPARENT;
    public static int WS_EX_APPWINDOW;
    public static int WS_EX_TOPMOST;
    public static int WS_HSCROLL;
    public static int WS_VSCROLL;
    public static int CF_TEXT;
    public static int CF_UNICODETEXT;
    public static UInt32 INFINITE;
    public static int KEY_QUERY_VALUE;
    public static int KEY_SET_VALUE;
    public static int KEY_CREATE_SUB_KEY;
    public static int KEY_ENUMERATE_SUB_KEYS;
    public static int KEY_WOW64_32KEY;
    public static int KEY_WOW64_64KEY;
    public static int KEY_WOW64_RES;
    public static int ERROR_SUCCESS;
    public static int ERROR_BADDB;
    public static int ERROR_BADKEY;
    public static int ERROR_CANTOPEN;
    public static int ERROR_CANTREAD;
    public static int ERROR_CANTWRITE;
    public static int ERROR_OUTOFMEMORY;
    public static int ERROR_ARENA_TRASHED;
    public static int ERROR_ACCESS_DENIED;
    public static int ERROR_INVALID_PARAMETERS;
    public static int ERROR_NO_MORE_ITEMS;
    public static int SB_GETPARTS;
    public static int SB_GETTEXT;
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinButton : WinControl {
    public string DisplayText { get; }
    public string Shortcut { get; }
    public WinButton(UITestControl parent);
    public virtual string get_DisplayText();
    public virtual string get_Shortcut();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinCalendar : WinControl {
    public SelectionRange SelectionRange { get; public set; }
    public string SelectionRangeAsString { get; public set; }
    public WinCalendar(UITestControl parent);
    public virtual SelectionRange get_SelectionRange();
    public virtual void set_SelectionRange(SelectionRange value);
    public virtual string get_SelectionRangeAsString();
    public virtual void set_SelectionRangeAsString(string value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinCell : WinControl {
    private static Dictionary`2<string, bool> ValidProperties;
    public string Value { get; public set; }
    public bool Checked { get; public set; }
    public bool Indeterminate { get; public set; }
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public bool Selected { get; }
    public WinCell(UITestControl parent);
    private static WinCell();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_Indeterminate();
    public virtual void set_Indeterminate(bool value);
    public virtual int get_RowIndex();
    public virtual int get_ColumnIndex();
    public virtual bool get_Selected();
    protected virtual UITestControl[] GetUITestControlsForSearch();
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    private static Dictionary`2<string, bool> InitializeValidProperties();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinCheckBox : WinControl {
    public bool Checked { get; public set; }
    public bool Indeterminate { get; public set; }
    public WinCheckBox(UITestControl parent);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_Indeterminate();
    public virtual void set_Indeterminate(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinCheckBoxTreeItem : WinControl {
    public bool Expanded { get; public set; }
    public UITestControl ParentNode { get; }
    public bool Selected { get; public set; }
    public UITestControlCollection Nodes { get; }
    public bool HasChildNodes { get; }
    public bool Checked { get; public set; }
    public bool Indeterminate { get; public set; }
    public WinCheckBoxTreeItem(UITestControl parent);
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual UITestControl get_ParentNode();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual UITestControlCollection get_Nodes();
    public virtual bool get_HasChildNodes();
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_Indeterminate();
    public virtual void set_Indeterminate(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinClient : WinControl {
    public WinClient(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinColumnHeader : WinControl {
    public WinColumnHeader(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinComboBox : WinControl {
    public bool Expanded { get; public set; }
    public bool IsEditable { get; }
    public UITestControlCollection Items { get; }
    public int SelectedIndex { get; public set; }
    public string EditableItem { get; public set; }
    public string SelectedItem { get; public set; }
    public UITestControl VerticalScrollBar { get; }
    public UITestControl HorizontalScrollBar { get; }
    public WinComboBox(UITestControl parent);
    public String[] GetContent();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual bool get_IsEditable();
    public virtual UITestControlCollection get_Items();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual string get_EditableItem();
    public virtual void set_EditableItem(string value);
    public virtual string get_SelectedItem();
    public virtual void set_SelectedItem(string value);
    public virtual UITestControl get_VerticalScrollBar();
    public virtual UITestControl get_HorizontalScrollBar();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinControl : UITestControl {
    private static Dictionary`2<string, bool> ValidProperties;
    public string HelpText { get; }
    public string AccessKey { get; }
    public string ControlName { get; }
    public int ControlId { get; }
    public string ToolTipText { get; }
    public string AccessibleDescription { get; }
    public WinControl(UITestControl parent);
    private static WinControl();
    protected virtual UITestControl[] GetUITestControlsForSearch();
    public virtual string get_HelpText();
    public virtual string get_AccessKey();
    public virtual string get_ControlName();
    public virtual int get_ControlId();
    public virtual string get_ToolTipText();
    public string get_AccessibleDescription();
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    internal virtual void ValidateSearchProperties();
    internal static Dictionary`2<string, bool> InitializeValidSearchProperties();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinCustom : WinControl {
    public WinCustom(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinDateTimePicker : WinControl {
    public bool Checked { get; public set; }
    public bool HasDropDownButton { get; }
    public bool HasCheckBox { get; }
    public bool HasSpinner { get; }
    public DateTime DateTime { get; public set; }
    public string DateTimeAsString { get; public set; }
    public UITestControl Calendar { get; }
    public bool ShowCalendar { get; public set; }
    public DateTimePickerFormat Format { get; }
    public WinDateTimePicker(UITestControl parent);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_HasDropDownButton();
    public virtual bool get_HasCheckBox();
    public virtual bool get_HasSpinner();
    public virtual DateTime get_DateTime();
    public virtual void set_DateTime(DateTime value);
    public virtual string get_DateTimeAsString();
    public virtual void set_DateTimeAsString(string value);
    public virtual UITestControl get_Calendar();
    public virtual bool get_ShowCalendar();
    public virtual void set_ShowCalendar(bool value);
    public virtual DateTimePickerFormat get_Format();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinEdit : WinControl {
    public int LineCount { get; }
    public int InsertionIndexAbsolute { get; public set; }
    public int InsertionIndexLineRelative { get; }
    public int SelectionStart { get; public set; }
    public int SelectionEnd { get; public set; }
    public string SelectionText { get; public set; }
    public bool IsPassword { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    public int CurrentLine { get; }
    public string Text { get; public set; }
    public string CopyPastedText { get; public set; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown string Password {public set; }
    public int MaxLength { get; }
    public WinEdit(UITestControl parent);
    public virtual int get_LineCount();
    public virtual int get_InsertionIndexAbsolute();
    public virtual void set_InsertionIndexAbsolute(int value);
    public virtual int get_InsertionIndexLineRelative();
    public virtual int get_SelectionStart();
    public virtual void set_SelectionStart(int value);
    public virtual int get_SelectionEnd();
    public virtual void set_SelectionEnd(int value);
    public virtual string get_SelectionText();
    public virtual void set_SelectionText(string value);
    public virtual bool get_IsPassword();
    public virtual bool get_ReadOnly();
    public virtual int get_CurrentLine();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_CopyPastedText();
    public virtual void set_CopyPastedText(string value);
    public virtual void set_Password(string value);
    public virtual int get_MaxLength();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinGroup : WinControl {
    public WinGroup(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinHyperlink : WinControl {
    public string DisplayText { get; }
    public WinHyperlink(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinList : WinControl {
    public UITestControlCollection Items { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public String[] SelectedItems { get; public set; }
    public string SelectedItemsAsString { get; public set; }
    public UITestControl HorizontalScrollBar { get; }
    public UITestControl VerticalScrollBar { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public String[] CheckedItems { get; public set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public Int32[] CheckedIndices { get; public set; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public Int32[] SelectedIndices { get; public set; }
    public bool IsMultipleSelection { get; }
    public bool IsCheckedList { get; }
    public bool IsIconView { get; }
    public UITestControlCollection Columns { get; }
    public bool IsSmallIconView { get; }
    public bool IsListView { get; }
    public bool IsReportView { get; }
    public WinList(UITestControl parent);
    public String[] GetContent();
    public String[] GetColumnNames();
    public virtual UITestControlCollection get_Items();
    public virtual String[] get_SelectedItems();
    public virtual void set_SelectedItems(String[] value);
    public virtual string get_SelectedItemsAsString();
    public virtual void set_SelectedItemsAsString(string value);
    public virtual UITestControl get_HorizontalScrollBar();
    public virtual UITestControl get_VerticalScrollBar();
    public virtual String[] get_CheckedItems();
    public virtual void set_CheckedItems(String[] value);
    public virtual Int32[] get_CheckedIndices();
    public virtual void set_CheckedIndices(Int32[] value);
    public virtual Int32[] get_SelectedIndices();
    public virtual void set_SelectedIndices(Int32[] value);
    public virtual bool get_IsMultipleSelection();
    public virtual bool get_IsCheckedList();
    public virtual bool get_IsIconView();
    public virtual UITestControlCollection get_Columns();
    public virtual bool get_IsSmallIconView();
    public virtual bool get_IsListView();
    public virtual bool get_IsReportView();
    private WinList GetHeaderListOfListView();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinListItem : WinControl {
    public string DisplayText { get; }
    public bool Selected { get; }
    public WinListItem(UITestControl parent);
    public void Select();
    public String[] GetColumnValues();
    public virtual string get_DisplayText();
    public virtual bool get_Selected();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinMenu : WinControl {
    public UITestControlCollection Items { get; }
    public WinMenu(UITestControl parent);
    public virtual UITestControlCollection get_Items();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinMenuBar : WinControl {
    public UITestControlCollection Items { get; }
    public WinMenuBar(UITestControl parent);
    public virtual UITestControlCollection get_Items();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinMenuItem : WinControl {
    public bool Checked { get; public set; }
    public bool HasChildNodes { get; }
    public bool IsTopLevelMenu { get; }
    public string DisplayText { get; }
    public string Shortcut { get; }
    public string AcceleratorKey { get; }
    public UITestControlCollection Items { get; }
    public WinMenuItem(UITestControl parent);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_HasChildNodes();
    public virtual bool get_IsTopLevelMenu();
    public virtual string get_DisplayText();
    public virtual string get_Shortcut();
    public virtual string get_AcceleratorKey();
    public virtual UITestControlCollection get_Items();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinPane : WinControl {
    public WinPane(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinProgressBar : WinControl {
    public int MinimumValue { get; }
    public int MaximumValue { get; }
    public int Value { get; }
    public WinProgressBar(UITestControl parent);
    public virtual int get_MinimumValue();
    public virtual int get_MaximumValue();
    public virtual int get_Value();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinRadioButton : WinControl {
    public bool Selected { get; public set; }
    public UITestControl Group { get; }
    public WinRadioButton(UITestControl parent);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual UITestControl get_Group();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinRow : WinControl {
    private static Dictionary`2<string, bool> ValidProperties;
    public UITestControlCollection Cells { get; }
    public string Value { get; }
    public int RowIndex { get; }
    public bool Selected { get; }
    public WinRow(UITestControl parent);
    private static WinRow();
    public String[] GetContent();
    public WinCell GetCell(int cellIndex);
    public virtual UITestControlCollection get_Cells();
    public virtual string get_Value();
    public virtual int get_RowIndex();
    public virtual bool get_Selected();
    protected virtual UITestControl[] GetUITestControlsForSearch();
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    private static Dictionary`2<string, bool> InitializeValidProperties();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinRowHeader : WinControl {
    public bool Selected { get; }
    public WinRowHeader(UITestControl parent);
    public virtual bool get_Selected();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinScrollBar : WinControl {
    public int MinimumPosition { get; }
    public int MaximumPosition { get; }
    public int Position { get; public set; }
    public WinScrollBar(UITestControl parent);
    public virtual int get_MinimumPosition();
    public virtual int get_MaximumPosition();
    public virtual int get_Position();
    public virtual void set_Position(int value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinSeparator : WinControl {
    public WinSeparator(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinSlider : WinControl {
    public double Position { get; public set; }
    public string PositionAsString { get; public set; }
    public int MaximumPosition { get; }
    public int MinimumPosition { get; }
    public int TickValue { get; }
    public int TickPosition { get; }
    public int TickCount { get; }
    public int PageSize { get; }
    public int LineSize { get; }
    public WinSlider(UITestControl parent);
    public virtual double get_Position();
    public virtual void set_Position(double value);
    public virtual string get_PositionAsString();
    public virtual void set_PositionAsString(string value);
    public virtual int get_MaximumPosition();
    public virtual int get_MinimumPosition();
    public virtual int get_TickValue();
    public virtual int get_TickPosition();
    public virtual int get_TickCount();
    public virtual int get_PageSize();
    public virtual int get_LineSize();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinSpinner : WinControl {
    public int MinimumValue { get; }
    public int MaximumValue { get; }
    public WinSpinner(UITestControl parent);
    public virtual int get_MinimumValue();
    public virtual int get_MaximumValue();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinSplitButton : WinButton {
    public WinSplitButton(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinStatusBar : WinControl {
    public UITestControlCollection Panels { get; }
    public WinStatusBar(UITestControl parent);
    public virtual UITestControlCollection get_Panels();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinTable : WinControl {
    public UITestControlCollection Rows { get; }
    public UITestControlCollection RowHeaders { get; }
    public UITestControlCollection ColumnHeaders { get; }
    public UITestControlCollection Cells { get; }
    public UITestControl HorizontalScrollBar { get; }
    public UITestControl VerticalScrollBar { get; }
    public WinTable(UITestControl parent);
    public WinCell GetCell(int rowIndex, int columnIndex);
    public WinRow GetRow(int rowIndex);
    public String[] GetContent();
    public WinCell FindFirstCellWithValue(string value);
    public String[] GetColumnNames();
    public virtual UITestControlCollection get_Rows();
    public virtual UITestControlCollection get_RowHeaders();
    public virtual UITestControlCollection get_ColumnHeaders();
    public virtual UITestControlCollection get_Cells();
    public virtual UITestControl get_HorizontalScrollBar();
    public virtual UITestControl get_VerticalScrollBar();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinTabList : WinControl {
    public int SelectedIndex { get; public set; }
    public UITestControlCollection Tabs { get; }
    public UITestControl TabSpinner { get; }
    public WinTabList(UITestControl parent);
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual UITestControlCollection get_Tabs();
    public virtual UITestControl get_TabSpinner();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinTabPage : WinControl {
    public string DisplayText { get; }
    public WinTabPage(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinText : WinControl {
    public string DisplayText { get; }
    public WinText(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinTitleBar : WinControl {
    public string DisplayText { get; }
    public WinTitleBar(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinToolBar : WinControl {
    public UITestControlCollection Items { get; }
    public WinToolBar(UITestControl parent);
    public virtual UITestControlCollection get_Items();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinToolTip : WinControl {
    public WinToolTip(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinTree : WinControl {
    public UITestControlCollection Nodes { get; }
    public UITestControl VerticalScrollBar { get; }
    public UITestControl HorizontalScrollBar { get; }
    public WinTree(UITestControl parent);
    public virtual UITestControlCollection get_Nodes();
    public virtual UITestControl get_VerticalScrollBar();
    public virtual UITestControl get_HorizontalScrollBar();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinTreeItem : WinControl {
    public bool Expanded { get; public set; }
    public UITestControl ParentNode { get; }
    public bool Selected { get; public set; }
    public UITestControlCollection Nodes { get; }
    public bool HasChildNodes { get; }
    public WinTreeItem(UITestControl parent);
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual UITestControl get_ParentNode();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual UITestControlCollection get_Nodes();
    public virtual bool get_HasChildNodes();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WinControls.WinWindow : WinControl {
    private static Dictionary`2<string, bool> ValidProperties;
    public bool Resizable { get; }
    public bool HasTitleBar { get; }
    public bool Popup { get; }
    public bool TabStop { get; }
    public bool Transparent { get; }
    public bool AlwaysOnTop { get; }
    public bool Maximized { get; public set; }
    public bool Minimized { get; public set; }
    public bool ShowInTaskbar { get; }
    public bool Restored { get; public set; }
    public int OrderOfInvocation { get; }
    public WinWindow(UITestControl parent);
    private static WinWindow();
    public virtual bool get_Resizable();
    public virtual bool get_HasTitleBar();
    public virtual bool get_Popup();
    public virtual bool get_TabStop();
    public virtual bool get_Transparent();
    public virtual bool get_AlwaysOnTop();
    public virtual bool get_Maximized();
    public virtual void set_Maximized(bool value);
    public virtual bool get_Minimized();
    public virtual void set_Minimized(bool value);
    public virtual bool get_ShowInTaskbar();
    public virtual bool get_Restored();
    public virtual void set_Restored(bool value);
    public virtual int get_OrderOfInvocation();
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    private static Dictionary`2<string, bool> InitializeValidProperties();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WindowsControl : object {
    private IntPtr hwnd;
    private UITestControl uiControl;
    public WindowsControl(UITestControl uiControl);
    public bool IsListView();
    public bool GetScrollInfo(int fnBar, SCROLLINFO& scrollInfo);
    public void SetScrollInfo(int style, SCROLLINFO& scrollInfo, int msg, bool fRedraw);
    public bool IsCheckedList();
    public CHARRANGE GetSelectionRange(int richTextFlag, int textBoxFlag);
    public int GetGeneric(int flag, T& obj);
    public int GetInt(int flag);
    public int GetInt(int flag, int wParam, int lParam);
    public IntPtr GetHandle(int flag);
    public int GetStyle();
    public int GetExtendedStyle();
    public bool HasStyle(int flag);
    public bool HasExtendedStyle(int flag);
    public bool HasOwnerWindow();
    public IntPtr SetInt(int flag, int wParam, int lParam);
    public string GetText();
    private UInt32 MakeDword(int low, int high);
}
internal static class Microsoft.VisualStudio.TestTools.UITesting.WinNativeMethods : object {
    private static int MEM_COMMIT;
    private static int MEM_RELEASE;
    private static int MEM_RESERVE;
    private static int PAGE_READWRITE;
    public static IntPtr SendMessage(IntPtr hWnd, int wMsg, IntPtr wParam, IntPtr lParam);
    public static bool GetScrollInfo(IntPtr hwnd, int fnBar, SCROLLINFO& ScrollInfo);
    public static bool SetScrollInfo(IntPtr hwnd, int fnBar, SCROLLINFO& ScrollInfo, bool fRedraw);
    [SuppressMessageAttribute("Microsoft.Usage", "CA2204:LiteralsShouldBeSpelledCorrectly")]
public static IntPtr XProcSendMessageByRef(IntPtr windowHandle, int msg, IntPtr wParam, Object& lParam);
    private static bool AllocateInProcMemory(UInt32 processId, int size, IntPtr& structMem, IntPtr& hProcess);
    private static IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, int flAllocationType, int flProtect);
    private static bool VirtualFreeEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, int dwFreeType);
    private static bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr lpBuffer, IntPtr dwSize, Int32& nBytesWritten);
    private static bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, IntPtr lpBuffer, IntPtr dwSize, Int32& nBytesRead);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WinPropertyProvider : PropertyProviderBase {
    private WindowsControl win;
    private static string richTextClassName;
    private static string _isNumericUpDownControl;
    private static string _isWin32ForSure;
    private static string WinformsDataGridCellCheckBoxHelpText;
    protected virtual String[] GetPropertyForControlState(string controlType, ControlStates uiState, Boolean[]& stateValues);
    protected virtual object GetPropertyValueInternal(UITestControl uiControl, string propertyName);
    public virtual object GetPropertyValue(UITestControl uiControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiControl, string propertyName, object value);
    protected virtual string GetPropertyForAction(string controlType, UITestAction action);
    private void SetComboBoxProperty(string propertyName, object value);
    private void SetDateTimePickerProperty(string propertyName, object value);
    private void SetToolBarItemProperty(string propertyName, object value);
    private void SetTabListProperty(string propertyName, object value);
    private void SetMonthCalendarProperty(string propertyName, object value);
    [SuppressMessageAttribute("Microsoft.Globalization", "CA1303:DoNotPassLiteralsAsLocalizedParameters")]
private void SetEditProperty(string propertyName, object value);
    private void SetListViewProperty(string propertyName, object value);
    private void SetListBoxProperty(string propertyName, object value);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1822:MarkMethodsAsStatic")]
[SuppressMessageAttribute("Microsoft.Usage", "CA1801:ReviewUnusedParameters")]
private void SetSpinnerProperty(string propertyName, object value);
    private void SetScrollBarProperty(string propertyName, object value);
    private void SetMenuItemProperty(string propertyName, object value);
    private void SetSliderProperty(string propertyName, object value);
    private void SetSliderValue(string propertyName, double absoluteValue);
    private void SetTreeNodeProperty(string propertyName, object value);
    private void SetCheckBoxTreeNodeProperty(string propertyName, object value);
    private void SetCheckBoxProperty(string propertyName, object value);
    private void SetRadioButtonProperty(string propertyName, object value);
    private void SetTableCellProperty(string propertyName, object value);
    private void SetTableCellState(ControlStates state);
    private bool VerifyTriState(ControlStates requiredState);
    private int GetRelativeCellClickablePoint(UITestControl cellControl, UITestControl rowControl, Rectangle cellBounds);
    private object GetParentNodeForTreeNode();
    private bool IsInvisible(UITestControl child);
    private bool IsDatagridElement(UITestControl uiControl);
    private bool IsCommonReadableProperty(ControlType controlType, string propertyName);
    private bool IsCommonWritableProperty(ControlType controlType, string propertyName);
    private object GetAcceleratorKeyForMenuItem();
    private Int32[] GetSelectedIndicesForList();
    private String[] GetStringArrayForSelectedIndices(Int32[] selectedIndices, string propertyName);
    private void SetTableCellValueOnFocussedElement(UITestControl cell, UITestControl table, UITechnologyElement elementInFocus, string value);
    private bool IsLeafTreeItem(UITestControl uiControl);
    private static void CheckItems(UITestControlCollection itemsToCheck, UITestControlCollection allItems);
    private UITestControl GetWinScrollBar(UITestControl uiControl, int style);
    private UITestControlCollection GetTreeItemNodes();
    private bool IsScrollBarVertical();
    private void SetValueAsScrollBar(int position);
    private void SetValueAsDateTimePicker(string value);
    private static void SetValueAsNumericControl(ScreenElement editBox, string value, ScreenElement spinBox);
    private void SetTreeNodeState(ControlStates state);
    private void SetCheckBoxTreeNodeState(ControlStates state);
    private object GetCommonProperty(string propertyName);
    private object GetMonthCalenderProperty(string propertyName);
    private object GetDateTimePickerProperty(string propertyName);
    private object GetTreeViewProperty(string propertyName);
    private object GetEditProperty(string propertyName);
    private object GetTitleBarProperty(string propertyName);
    private object GetHyperLinkProperty(string propertyName);
    private object GetSpinnerProperty(string propertyName);
    private object GetSliderProperty(string propertyName);
    private object GetProgressBarProperty(string propertyName);
    private object GetStatusBarProperty(string propertyName);
    private object GetListBoxProperty(string propertyName);
    private object GetListViewProperty(string propertyName);
    private object GetWindowProperty(string propertyName);
    private object GetTreeNodeProperty(string propertyName);
    private object GetCheckBoxTreeNodeProperty(string propertyName);
    private object GetButtonProperty(string propertyName);
    private object GetTextProperty(string propertyName);
    private object GetCheckBoxProperty(string propertyName);
    private object GetRadioButtonProperty(string propertyName);
    private object GetComboBoxProperty(string propertyName);
    private object GetNumericUpDownProperty(string propertyName, UITechnologyElement textBox);
    private object GetToolBarProperty(string propertyName);
    private object GetToolBarItemProperty(string propertyName);
    private object GetTabPageProperty(string propertyName);
    private object GetTabListProperty(string propertyName);
    private object GetScrollBarProperty(string propertyName);
    private object GetListViewItemProperty(string propertyName);
    private object GetMenuBarProperty(string propertyName);
    private object GetMenuItemProperty(string propertyName);
    private object GetTableProperty(string propertyName);
    private object GetRowHeaderProperty(string propertyName);
    private object GetTableRowProperty(string propertyName);
    private object GetTableCellProperty(string propertyName);
    private void SetValueInEditableControl(UITestControl editControl, string propertyValue);
    private void SetWindowProperty(string propertyName, object value);
    private void SetWindowStateProperty(string propertyName, object value);
    private void SetMenuItemState(ControlStates state);
    private bool GetMinAndMaxDateRange(DateTime& min, DateTime& max, int flag);
    private static Dictionary`2<string, UITestPropertyDescriptor> InitializeCommonProperties();
    private Dictionary`2<ControlType, Dictionary`2<string, UITestPropertyDescriptor>> InitializePropertiesMap();
    private Dictionary`2<ControlType, Type> InitializePropertyNameToClassMap();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfButtonPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfCalendarPropertyProvider : WpfControlPropertyProvider {
    private static string DoubleQuotes;
    private static string DateRangeDelimiter;
    private static Regex blackoutDateRegex;
    public ControlType SupportedControlType { get; }
    private static WpfCalendarPropertyProvider();
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private bool ValidateRangeSelection(UITestControl UIControl, DateTime minDate, DateTime maxDate);
    private bool IsCalendarMultiSelectable(AutomationElement calendarAutomationElement);
    private void DoDateSelection(string dateValue, int invokeCount, bool isRangeSelection, DateTime& dateTime, UITestControl UIControl, MultipleViewPattern CalendarMultiViewPattern, ItemContainerPattern calendarItemContainerPattern);
    private void RealizeCalendarElement(ItemContainerPattern calendarItemContainerPattern, string name, Boolean& isblackoutDate);
    private string SetQuotes(string date);
    private bool IsDateRangeValid(string dateMinString, string dateMaxString);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfCellPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    private void MakeCellEditableByClicking(UITestControl cell, UITechnologyElement& firstChild);
    private void SetTableCellState(UITestControl UIControl, ControlStates state, string PropertyName);
    private void MakeCellVisibleByClicking(UITestControl cell, UITestControl firstChild);
    private bool VerifyTriStateForCheckBox(UITestControl element, ControlStates requiredState);
    private bool IsTableCellCheckBox(UITestControl UIControl);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
    private void ThrowExceptionIfReadOnly(UITestControl UIControl);
    private void ThrowExceptionIfControlDisabled(UITestControl UIControl);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfCheckBoxPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& propertyValues);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfComboBoxPropertyProvider : WpfControlPropertyProvider {
    private UITestControl horizontalScrollBar;
    private UITestControl verticalScrollBar;
    private UITestControl uiTestControl;
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    private bool EnumChildWinForComboBoxScrollBar(IntPtr hWnd, IntPtr& lParam);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private void SetComboBoxState(ExpandCollapseState state, UITestControl uiControl);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfControlPropertyProvider : object {
    protected static UITestPropertyAttributes s_ReadWritePermissions;
    protected static UITestPropertyAttributes s_ReadNonAssertPermissions;
    protected Dictionary`2<string, UITestPropertyDescriptor> m_DescriptorDictionary;
    protected Dictionary`2<string, UITestPropertyDescriptor> m_CommonPropertyNames;
    protected Dictionary`2<string, UITestPropertyDescriptor> m_ControlSpecificProperties;
    private static Regex s_WpfClassNameRegex;
    public ControlType SupportedControlType { get; }
    private static WpfControlPropertyProvider();
    private Dictionary`2<string, UITestPropertyDescriptor> InitilizeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetPropertyClassName();
    public virtual Dictionary`2<string, UITestPropertyDescriptor> GetPropertiesMap();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual bool IsCommonWritableProperty(string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual Type GetSpecializedClass();
    public virtual int GetControlSupportLevel(UITestControl control);
    protected T GetAutomationPattern(UITestControl uiControl, AutomationPattern pattern, AutomationProperty isPatternAvailableProperty);
    protected T GetAutomationPattern(AutomationElement automationElement, AutomationPattern pattern, AutomationProperty isPatternAvailableProperty);
    protected int GetChildListItemCount(UITestControl control);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfButton : WpfControl {
    public string Shortcut { get; }
    public string DisplayText { get; }
    public WpfButton(UITestControl parent);
    public virtual string get_Shortcut();
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfCalendar : WpfControl {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public DateTime[] SelectedDates { get; public set; }
    public string SelectedDatesAsString { get; public set; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown SelectionRange SelectedDateRange {public set; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown string SelectedDateRangeAsString {public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
public bool MultiSelectable { get; }
    public WpfCalendar(UITestControl parent);
    public virtual DateTime[] get_SelectedDates();
    public virtual void set_SelectedDates(DateTime[] value);
    public virtual string get_SelectedDatesAsString();
    public virtual void set_SelectedDatesAsString(string value);
    public virtual void set_SelectedDateRange(SelectionRange value);
    public virtual void set_SelectedDateRangeAsString(string value);
    public virtual bool get_MultiSelectable();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfCell : WpfControl {
    private static Dictionary`2<string, bool> ValidProperties;
    public string Value { get; public set; }
    public bool Checked { get; public set; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    public bool Indeterminate { get; public set; }
    public ControlType ContentControlType { get; }
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public bool Selected { get; }
    public WpfCell(UITestControl parent);
    private static WpfCell();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_ReadOnly();
    public virtual bool get_Indeterminate();
    public virtual void set_Indeterminate(bool value);
    public virtual ControlType get_ContentControlType();
    public virtual int get_RowIndex();
    public virtual int get_ColumnIndex();
    public virtual bool get_Selected();
    protected virtual UITestControl[] GetUITestControlsForSearch();
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    private static Dictionary`2<string, bool> InitializeValidProperties();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfCheckBox : WpfControl {
    public bool Checked { get; public set; }
    public bool Indeterminate { get; public set; }
    public WpfCheckBox(UITestControl parent);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_Indeterminate();
    public virtual void set_Indeterminate(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfComboBox : WpfControl {
    public bool Expanded { get; public set; }
    public bool IsEditable { get; }
    public int SelectedIndex { get; public set; }
    public string SelectedItem { get; public set; }
    public string EditableItem { get; public set; }
    public UITestControlCollection Items { get; }
    public UITestControl VerticalScrollBar { get; }
    public UITestControl HorizontalScrollBar { get; }
    public WpfComboBox(UITestControl parent);
    public String[] GetContent();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual bool get_IsEditable();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual string get_SelectedItem();
    public virtual void set_SelectedItem(string value);
    public virtual string get_EditableItem();
    public virtual void set_EditableItem(string value);
    public virtual UITestControlCollection get_Items();
    public virtual UITestControl get_VerticalScrollBar();
    public virtual UITestControl get_HorizontalScrollBar();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfControl : UITestControl {
    private static Dictionary`2<string, bool> s_ValidProperties;
    internal static string s_FrameworkId;
    public string HelpText { get; }
    public string Font { get; }
    public string AcceleratorKey { get; }
    public string AccessKey { get; }
    public string AutomationId { get; }
    public string LabeledBy { get; }
    public string ItemStatus { get; }
    public string FrameworkId { get; }
    public string ToolTipText { get; }
    internal WpfControl(UITestControl parent, bool noFrameworkId);
    public WpfControl(UITestControl parent);
    private static WpfControl();
    protected virtual UITestControl[] GetUITestControlsForSearch();
    public virtual string get_HelpText();
    public virtual string get_Font();
    public virtual string get_AcceleratorKey();
    public virtual string get_AccessKey();
    public virtual string get_AutomationId();
    public virtual string get_LabeledBy();
    public virtual string get_ItemStatus();
    public virtual string get_FrameworkId();
    public virtual string get_ToolTipText();
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    internal virtual void ValidateSearchProperties();
    internal static Dictionary`2<string, bool> InitializeValidSearchProperties();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfCustom : WpfControl {
    public WpfCustom(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfDatePicker : WpfControl {
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public DateTime Date { get; public set; }
    public string DateAsString { get; public set; }
    public bool ShowCalendar { get; public set; }
    public UITestControl Calendar { get; }
    public WpfDatePicker(UITestControl parent);
    public virtual DateTime get_Date();
    public virtual void set_Date(DateTime value);
    public virtual string get_DateAsString();
    public virtual void set_DateAsString(string value);
    public virtual bool get_ShowCalendar();
    public virtual void set_ShowCalendar(bool value);
    public virtual UITestControl get_Calendar();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfEdit : WpfControl {
    public string Text { get; public set; }
    public string SelectionText { get; }
    public bool IsPassword { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
public bool ReadOnly { get; }
    public string CopyPastedText { get; public set; }
    [SuppressMessageAttribute("Microsoft.Design", "CA1044:PropertiesShouldNotBeWriteOnly")]
unknown string Password {public set; }
    public WpfEdit(UITestControl parent);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_SelectionText();
    public virtual bool get_IsPassword();
    public virtual bool get_ReadOnly();
    public virtual string get_CopyPastedText();
    public virtual void set_CopyPastedText(string value);
    public virtual void set_Password(string value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfExpander : WpfControl {
    public bool Expanded { get; public set; }
    public string Header { get; }
    public WpfExpander(UITestControl parent);
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual string get_Header();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfGroup : WpfControl {
    public string Header { get; }
    public WpfGroup(UITestControl parent);
    public virtual string get_Header();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfHyperlink : WpfControl {
    public string Alt { get; }
    public WpfHyperlink(UITestControl parent);
    public virtual string get_Alt();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfImage : WpfControl {
    public string Alt { get; }
    public WpfImage(UITestControl parent);
    public virtual string get_Alt();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfList : WpfControl {
    public bool IsMultipleSelection { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public String[] SelectedItems { get; public set; }
    public string SelectedItemsAsString { get; public set; }
    public UITestControlCollection Items { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")]
public Int32[] SelectedIndices { get; public set; }
    public WpfList(UITestControl parent);
    public String[] GetContent();
    public virtual bool get_IsMultipleSelection();
    public virtual String[] get_SelectedItems();
    public virtual void set_SelectedItems(String[] value);
    public virtual string get_SelectedItemsAsString();
    public virtual void set_SelectedItemsAsString(string value);
    public virtual UITestControlCollection get_Items();
    public virtual Int32[] get_SelectedIndices();
    public virtual void set_SelectedIndices(Int32[] value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfListItem : WpfControl {
    public bool Selected { get; }
    public string DisplayText { get; }
    public WpfListItem(UITestControl parent);
    public void Select();
    public virtual bool get_Selected();
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfMenu : WpfControl {
    public UITestControlCollection Items { get; }
    public WpfMenu(UITestControl parent);
    public virtual UITestControlCollection get_Items();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfMenuItem : WpfControl {
    public string Header { get; }
    public bool Checked { get; public set; }
    public bool IsTopLevelMenu { get; }
    public bool HasChildNodes { get; }
    public bool Expanded { get; public set; }
    public WpfMenuItem(UITestControl parent);
    public virtual string get_Header();
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_IsTopLevelMenu();
    public virtual bool get_HasChildNodes();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfPane : WpfControl {
    public WpfPane(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfProgressBar : WpfControl {
    public double MinimumValue { get; }
    public double MaximumValue { get; }
    public double Position { get; }
    public WpfProgressBar(UITestControl parent);
    public virtual double get_MinimumValue();
    public virtual double get_MaximumValue();
    public virtual double get_Position();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfRadioButton : WpfControl {
    public bool Selected { get; public set; }
    public UITestControl Group { get; }
    public WpfRadioButton(UITestControl parent);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual UITestControl get_Group();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfRow : WpfControl {
    private static Dictionary`2<string, bool> ValidProperties;
    public UITestControlCollection Cells { get; }
    public UITestControl Header { get; }
    public bool CanSelectMultiple { get; }
    public int RowIndex { get; }
    public bool Selected { get; }
    public WpfRow(UITestControl parent);
    private static WpfRow();
    public String[] GetContent();
    public WpfCell GetCell(int cellIndex);
    public virtual UITestControlCollection get_Cells();
    public virtual UITestControl get_Header();
    public virtual bool get_CanSelectMultiple();
    public virtual int get_RowIndex();
    public virtual bool get_Selected();
    protected virtual UITestControl[] GetUITestControlsForSearch();
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    private static Dictionary`2<string, bool> InitializeValidProperties();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfScrollBar : WpfControl {
    public double Position { get; public set; }
    public double MaximumPosition { get; }
    public double MinimumPosition { get; }
    public OrientationType Orientation { get; }
    public WpfScrollBar(UITestControl parent);
    public virtual double get_Position();
    public virtual void set_Position(double value);
    public virtual double get_MaximumPosition();
    public virtual double get_MinimumPosition();
    public virtual OrientationType get_Orientation();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfSeparator : WpfControl {
    public WpfSeparator(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfSlider : WpfControl {
    public double Position { get; public set; }
    public string PositionAsString { get; public set; }
    public double MaximumPosition { get; }
    public double MinimumPosition { get; }
    public double LargeChange { get; }
    public double SmallChange { get; }
    public WpfSlider(UITestControl parent);
    public virtual double get_Position();
    public virtual void set_Position(double value);
    public virtual string get_PositionAsString();
    public virtual void set_PositionAsString(string value);
    public virtual double get_MaximumPosition();
    public virtual double get_MinimumPosition();
    public virtual double get_LargeChange();
    public virtual double get_SmallChange();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfStatusBar : WpfControl {
    public UITestControlCollection Panels { get; }
    public WpfStatusBar(UITestControl parent);
    public virtual UITestControlCollection get_Panels();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfTable : WpfControl {
    public UITestControlCollection Rows { get; }
    public UITestControlCollection RowHeaders { get; }
    public UITestControlCollection ColumnHeaders { get; }
    public UITestControlCollection Cells { get; }
    public int RowCount { get; }
    public int ColumnCount { get; }
    public bool CanSelectMultiple { get; }
    public WpfTable(UITestControl parent);
    public WpfCell GetCell(int rowIndex, int columnIndex);
    public WpfRow GetRow(int rowIndex);
    public WpfCell FindFirstCellWithValue(string value);
    public String[] GetContent();
    public String[] GetColumnNames();
    public virtual UITestControlCollection get_Rows();
    public virtual UITestControlCollection get_RowHeaders();
    public virtual UITestControlCollection get_ColumnHeaders();
    public virtual UITestControlCollection get_Cells();
    public virtual int get_RowCount();
    public virtual int get_ColumnCount();
    public virtual bool get_CanSelectMultiple();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfTabList : WpfControl {
    public UITestControlCollection Tabs { get; }
    public int SelectedIndex { get; public set; }
    public WpfTabList(UITestControl parent);
    public virtual UITestControlCollection get_Tabs();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfTabPage : WpfControl {
    public string Header { get; }
    public WpfTabPage(UITestControl parent);
    public virtual string get_Header();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfText : WpfControl {
    public string DisplayText { get; }
    public WpfText(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfTitleBar : WpfControl {
    public string DisplayText { get; }
    public WpfTitleBar(UITestControl parent);
    public virtual string get_DisplayText();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfToggleButton : WpfControl {
    public bool Pressed { get; public set; }
    public string DisplayText { get; }
    public bool Indeterminate { get; public set; }
    public WpfToggleButton(UITestControl parent);
    public virtual bool get_Pressed();
    public virtual void set_Pressed(bool value);
    public virtual string get_DisplayText();
    public virtual bool get_Indeterminate();
    public virtual void set_Indeterminate(bool value);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfToolBar : WpfControl {
    public UITestControlCollection Items { get; }
    public string Header { get; }
    public WpfToolBar(UITestControl parent);
    public virtual UITestControlCollection get_Items();
    public virtual string get_Header();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfToolTip : WpfControl {
    public WpfToolTip(UITestControl parent);
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfTree : WpfControl {
    public UITestControlCollection Nodes { get; }
    public UITestControl VerticalScrollBar { get; }
    public UITestControl HorizontalScrollBar { get; }
    public WpfTree(UITestControl parent);
    public virtual UITestControlCollection get_Nodes();
    public virtual UITestControl get_VerticalScrollBar();
    public virtual UITestControl get_HorizontalScrollBar();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfTreeItem : WpfControl {
    public bool Expanded { get; public set; }
    public UITestControl ParentNode { get; }
    public bool Selected { get; public set; }
    public UITestControlCollection Nodes { get; }
    public bool HasChildNodes { get; }
    public string Header { get; }
    public WpfTreeItem(UITestControl parent);
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public virtual UITestControl get_ParentNode();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual UITestControlCollection get_Nodes();
    public virtual bool get_HasChildNodes();
    public virtual string get_Header();
}
public class Microsoft.VisualStudio.TestTools.UITesting.WpfControls.WpfWindow : WpfControl {
    private static Dictionary`2<string, bool> ValidProperties;
    public bool Resizable { get; }
    public bool HasTitleBar { get; }
    public bool Popup { get; }
    public bool TabStop { get; }
    public bool Transparent { get; }
    public bool AlwaysOnTop { get; }
    public bool Maximized { get; public set; }
    public bool Minimized { get; public set; }
    public bool ShowInTaskbar { get; }
    public bool Restored { get; public set; }
    public WpfWindow(UITestControl parent);
    private static WpfWindow();
    public virtual bool get_Resizable();
    public virtual bool get_HasTitleBar();
    public virtual bool get_Popup();
    public virtual bool get_TabStop();
    public virtual bool get_Transparent();
    public virtual bool get_AlwaysOnTop();
    public virtual bool get_Maximized();
    public virtual void set_Maximized(bool value);
    public virtual bool get_Minimized();
    public virtual void set_Minimized(bool value);
    public virtual bool get_ShowInTaskbar();
    public virtual bool get_Restored();
    public virtual void set_Restored(bool value);
    protected virtual Dictionary`2<string, bool> GetValidSearchProperties();
    private static Dictionary`2<string, bool> InitializeValidProperties();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfCustomPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfDatePickerPropertyProvider : WpfControlPropertyProvider {
    private static string DatePickerEditBoxAutomationId;
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private void ExpandCollapseDatePickerControl(UITestControl UIControl, bool expand);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfEditPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfExpanderPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private void SetExpanderState(UITestControl UIControl, ControlStates state);
    private bool VerifyElementState(UITestControl UIControl, ControlStates requiredState);
    public virtual bool IsCommonWritableProperty(string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfGroupPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfHostingPanePropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual int GetControlSupportLevel(UITestControl control);
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfHyperlinkPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfImagePropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfListItemPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WPFListPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfMenuItemPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private void SetMenuItemState(UITestControl UIControl, ControlStates state);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfMenuPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfPanePropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfProgressBarPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfRadioButtonPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual bool IsCommonWritableProperty(string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfRowPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfScrollViewerPropertyProvier : WpfSrollBarPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual int GetControlSupportLevel(UITestControl control);
    public virtual void SetPropertyValue(UITestControl UIControl, string propertyName, object value);
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    internal static object GetScrollBar(UITestControl UIControl, OrientationType orientationType);
    internal static bool IsScrollBarOfGivenQrientation(AutomationElement element, OrientationType orientation);
    internal static bool IsScrollBarVisibleToUser(AutomationElement element);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfSeperatorPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfSliderPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfSrollBarPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual string GetPropertyForAction(UITestAction action);
    public virtual void SetPropertyValue(UITestControl UIControl, string propertyName, object value);
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfStatusBarPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfTablePropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual int GetControlSupportLevel(UITestControl uiControl);
    public virtual object GetPropertyValue(UITestControl uiControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfTabListPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private UITestControl GetChildByControlType(UITestControl UIControl, ControlType type, int instance);
    private Int32[] GetSelectedIndices(UITestControl uiControl, ControlType expectedChildControlType);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfTabPagePropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfTextPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfTitleBarPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfToggleButtonPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private void SetToggleButtonState(UITestControl UIControl, string PropertyName, ControlStates state);
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    private bool VerifyTriStateForToggleButton(UITestControl UIControl, ControlStates requiredState);
    public virtual bool IsCommonWritableProperty(string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfToolBarPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfToolTipPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfTreeItemPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl UIControl, string propertyName);
    public virtual List`1<string> GetPropertyForControlState(ControlStates uiState, List`1& stateValues);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    private void SetTreeItemState(UITestControl UIControl, ControlStates state);
    public virtual bool IsCommonReadableProperty(string propertyName);
    public virtual bool IsCommonWritableProperty(string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfTreePropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
}
internal class Microsoft.VisualStudio.TestTools.UITesting.WpfWindowPropertyProvider : WpfControlPropertyProvider {
    public ControlType SupportedControlType { get; }
    private Dictionary`2<string, UITestPropertyDescriptor> InitializeDescriptorDictionary();
    public virtual ControlType get_SupportedControlType();
    public virtual Type GetSpecializedClass();
    public virtual Type GetPropertyClassName();
    public virtual object GetPropertyValue(UITestControl uiTestControl, string propertyName);
    public virtual void SetPropertyValue(UITestControl uiTestControl, string propertyName, object value);
    public virtual bool IsCommonWritableProperty(string propertyName);
    public virtual bool IsCommonReadableProperty(string propertyName);
}
[CompilerGeneratedAttribute]
[TypeIdentifierAttribute("3050F1C5-98B5-11CF-BB82-00AA00BDCE0B", "mshtml._htmlMediaNetworkState")]
public enum mshtml._htmlMediaNetworkState : Enum {
    public int value__;
    public static _htmlMediaNetworkState htmlMediaNetworkStateEmpty;
    public static _htmlMediaNetworkState htmlMediaNetworkStateIdle;
    public static _htmlMediaNetworkState htmlMediaNetworkStateLoading;
    public static _htmlMediaNetworkState htmlMediaNetworkStateNoSource;
    public static _htmlMediaNetworkState htmlMediaNetworkState_Max;
}
[CompilerGeneratedAttribute]
[GuidAttribute("305104BC-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IDocumentEvent {
    [DispIdAttribute("1108")]
public abstract virtual IDOMEvent createEvent(string eventType);
}
[CompilerGeneratedAttribute]
[GuidAttribute("305104BA-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IDOMEvent {
    public void _VtblGap1_8();
    [DispIdAttribute("1009")]
public abstract virtual void initEvent(string eventType, bool canBubble, bool cancelable);
}
[CompilerGeneratedAttribute]
[GuidAttribute("305104B9-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IEventTarget {
    public void _VtblGap1_2();
    [DispIdAttribute("-2147417600")]
public abstract virtual bool dispatchEvent(IDOMEvent evt);
}
[CompilerGeneratedAttribute]
[GuidAttribute("626FC520-A41E-11CF-A731-00A0C9082637")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDocument {
}
[CompilerGeneratedAttribute]
[GuidAttribute("332C4425-26CB-11D0-B483-00C04FD90119")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLDocument2 {
    [DispIdAttribute("1025")]
public string url { get; public set; }
    [DispIdAttribute("1034")]
public IHTMLWindow2 parentWindow { get; }
    public void _VtblGap1_32();
    [DispIdAttribute("1025")]
public abstract virtual void set_url(string p);
    [DispIdAttribute("1025")]
public abstract virtual string get_url();
    public void _VtblGap2_67();
    [DispIdAttribute("1034")]
public abstract virtual IHTMLWindow2 get_parentWindow();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F1FF-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElement {
    [DispIdAttribute("-2147417094")]
public object document { get; }
    public void _VtblGap1_32();
    [DispIdAttribute("-2147417094")]
public abstract virtual object get_document();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F434-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElement2 {
    [DispIdAttribute("-2147412996")]
public object readyState { get; }
    public void _VtblGap1_61();
    [DispIdAttribute("-2147412996")]
public abstract virtual object get_readyState();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F673-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElement3 {
    public void _VtblGap1_24();
    [DispIdAttribute("-2147417006")]
public abstract virtual bool FireEvent(string bstrEventName, Object& pvarEventObject);
}
[CompilerGeneratedAttribute]
[DefaultMemberAttribute("item")]
[GuidAttribute("3050F21F-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLElementCollection {
    public void _VtblGap1_3();
    [DispIdAttribute("-4")]
public abstract virtual IEnumerator GetEnumerator();
    [DispIdAttribute("0")]
public abstract virtual object item(object name, object index);
}
[CompilerGeneratedAttribute]
[GuidAttribute("332C4426-26CB-11D0-B483-00C04FD90119")]
[DefaultMemberAttribute("item")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLFramesCollection2 {
    [DispIdAttribute("0")]
public abstract virtual object item(Object& pvarIndex);
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F5D2-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLInputElement {
    [DispIdAttribute("-2147413011")]
public string value { get; public set; }
    public void _VtblGap1_2();
    [DispIdAttribute("-2147413011")]
public abstract virtual void set_value(string p);
    [DispIdAttribute("-2147413011")]
public abstract virtual string get_value();
}
[CompilerGeneratedAttribute]
[GuidAttribute("30510706-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLMediaElement {
    [DispIdAttribute("1003")]
public ushort networkState { get; }
    [DispIdAttribute("1010")]
public float currentTime { get; public set; }
    [DispIdAttribute("1012")]
public float duration { get; }
    [DispIdAttribute("1013")]
public bool paused { get; }
    [DispIdAttribute("1015")]
public float playbackRate { get; public set; }
    [DispIdAttribute("1024")]
public float volume { get; public set; }
    [DispIdAttribute("1025")]
public bool muted { get; public set; }
    public void _VtblGap1_4();
    [DispIdAttribute("1003")]
public abstract virtual ushort get_networkState();
    public void _VtblGap2_6();
    [DispIdAttribute("1010")]
public abstract virtual void set_currentTime(float p);
    [DispIdAttribute("1010")]
public abstract virtual float get_currentTime();
    public void _VtblGap3_1();
    [DispIdAttribute("1012")]
public abstract virtual float get_duration();
    [DispIdAttribute("1013")]
public abstract virtual bool get_paused();
    public void _VtblGap4_2();
    [DispIdAttribute("1015")]
public abstract virtual void set_playbackRate(float p);
    [DispIdAttribute("1015")]
public abstract virtual float get_playbackRate();
    public void _VtblGap5_7();
    [DispIdAttribute("1021")]
public abstract virtual void play();
    [DispIdAttribute("1022")]
public abstract virtual void pause();
    public void _VtblGap6_2();
    [DispIdAttribute("1024")]
public abstract virtual void set_volume(float p);
    [DispIdAttribute("1024")]
public abstract virtual float get_volume();
    [DispIdAttribute("1025")]
public abstract virtual void set_muted(bool p);
    [DispIdAttribute("1025")]
public abstract virtual bool get_muted();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F211-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLOptionElement {
    [DispIdAttribute("1001")]
public bool selected { get; public set; }
    [DispIdAttribute("1004")]
public string text { get; public set; }
    [DispIdAttribute("1001")]
public abstract virtual void set_selected(bool p);
    [DispIdAttribute("1001")]
public abstract virtual bool get_selected();
    public void _VtblGap1_6();
    [DispIdAttribute("1004")]
public abstract virtual void set_text(string p);
    [DispIdAttribute("1004")]
public abstract virtual string get_text();
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F244-98B5-11CF-BB82-00AA00BDCE0B")]
[DefaultMemberAttribute("item")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLSelectElement {
    [DispIdAttribute("1010")]
public int selectedIndex { get; public set; }
    [DispIdAttribute("1500")]
public int length { get; public set; }
    public void _VtblGap1_9();
    [DispIdAttribute("1010")]
public abstract virtual void set_selectedIndex(int p);
    [DispIdAttribute("1010")]
public abstract virtual int get_selectedIndex();
    public void _VtblGap2_8();
    [DispIdAttribute("1500")]
public abstract virtual void set_length(int p);
    [DispIdAttribute("1500")]
public abstract virtual int get_length();
    public void _VtblGap3_1();
    [DispIdAttribute("0")]
public abstract virtual object item(object name, object index);
    [DispIdAttribute("1502")]
public abstract virtual object tags(object tagName);
}
[CompilerGeneratedAttribute]
[GuidAttribute("3050F4D0-98B5-11CF-BB82-00AA00BDCE0B")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLUniqueName {
    [DispIdAttribute("-2147417058")]
public int uniqueNumber { get; }
    [DispIdAttribute("-2147417058")]
public abstract virtual int get_uniqueNumber();
}
[CompilerGeneratedAttribute]
[GuidAttribute("332C4427-26CB-11D0-B483-00C04FD90119")]
[DefaultMemberAttribute("item")]
[TypeIdentifierAttribute]
public interface mshtml.IHTMLWindow2 {
    [DispIdAttribute("0")]
public abstract virtual object item(Object& pvarIndex);
    public void _VtblGap1_60();
    [DispIdAttribute("1165")]
public abstract virtual object execScript(string code, string language);
}
