public class Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest : object {
    private HttpWebRequest request;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; }
    public string Method { get; public set; }
    public int Timeout { get; public set; }
    public RequestCachePolicy CachePolicy { get; public set; }
    public string ContentType { get; public set; }
    public AsyncHttpWebRequest(string url);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    public sealed virtual string get_Method();
    public sealed virtual void set_Method(string value);
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual RequestCachePolicy get_CachePolicy();
    public sealed virtual void set_CachePolicy(RequestCachePolicy value);
    public sealed virtual string get_ContentType();
    public sealed virtual void set_ContentType(string value);
    public sealed virtual void AddHeaders(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Utilities.Internal.AsyncHttpWebRequest/<GetResponseAsync>d__18")]
public sealed virtual Task`1<IStreamedHttpWebResponse> GetResponseAsync();
    [CompilerGeneratedAttribute]
private WebResponse <GetResponseAsync>b__18_0();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.CodeContract : object {
    [ExtensionAttribute]
public static void RequiresArgumentNotNull(T value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotEmptyOrWhitespace(string value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotNullAndNotEmpty(string value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotNullAndNotWhiteSpace(string value, string argumentName);
    [ExtensionAttribute]
public static void RequiresArgumentNotEmpty(Guid guid, string argumentName);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TV GetOrDefault(IDictionary`2<TK, TV> dictionary, TK key);
    [ExtensionAttribute]
public static void AddRange(IDictionary`2<TKey, TValue> target, IDictionary`2<TKey, TValue> source, bool forceUpdate);
    [ExtensionAttribute]
public static void Remove(ConcurrentDictionary`2<TK, TV> dictionary, TK key);
}
public enum Microsoft.VisualStudio.Utilities.Internal.ErrorCode : Enum {
    public int value__;
    public static ErrorCode NoError;
    public static ErrorCode NullResponse;
    public static ErrorCode RequestTimedOut;
    public static ErrorCode WebExceptionThrown;
}
public class Microsoft.VisualStudio.Utilities.Internal.FileBasedRegistry : object {
    private string filepath;
    private string currentUserRootPath;
    private Hashtable values;
    private bool dropped;
    private bool modified;
    public bool Exists { get; }
    public FileBasedRegistry(string key);
    public bool get_Exists();
    public sealed virtual void Dispose();
    public void Drop();
    public void SetValue(string name, object value);
    public String[] GetValueNames();
    public String[] GetSubKeyNames(string subKeyPath);
    public void RemoveValue(string key);
    public object GetValue(string key);
    public void Clear();
    private static string ConvertWinRegistryPathToMacosPath(string keyname);
    private void EnsureNotDropped();
    private void LoadXml();
    private void SaveXml();
}
public class Microsoft.VisualStudio.Utilities.Internal.FileBasedRegistryTools : object {
    public sealed virtual bool DeleteRegistryKeyFromCurrentUserRoot(string regKeyPath);
    public sealed virtual bool DoesRegistryKeyExistInCurrentUserRoot(string regKeyPath);
    public sealed virtual bool DeleteRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName);
    public sealed virtual object GetRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public sealed virtual String[] GetRegistryValueNamesFromCurrentUserRoot(string regKeyPath);
    public sealed virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value);
    public sealed virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value, RegistryValueKind valueKind);
    public sealed virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public sealed virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, object defaultOnError);
    public sealed virtual bool SetRegistryFromLocalMachineRoot(string regKeyPath, string regKeyName, object value, bool use64Bit);
    public sealed virtual bool TryGetRegistryValueKindFromCurrentUserRoot(string regKeyPath, string regKeyName, RegistryValueKind& kind);
    public sealed virtual bool TryGetRegistryValueKindFromLocalMachineRoot(string regKeyPath, string regKeyName, RegistryValueKind& kind, bool use64Bit);
    public sealed virtual bool DeleteRegistryKeyFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public sealed virtual bool DeleteRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit);
    public sealed virtual bool DoesRegistryKeyExistInLocalMachineRoot(string regKeyPath, bool use64Bit);
    public sealed virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, Nullable`1<int> defaultOnError);
    public sealed virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, Nullable`1<int> defaultOnError);
    public sealed virtual String[] GetRegistrySubKeyNamesFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public sealed virtual String[] GetRegistrySubKeyNamesFromCurrentUserRoot(string regKeyPath);
    public sealed virtual String[] GetRegistryValueNamesFromLocalMachineRoot(string regKeyPath, bool use64Bit);
}
public interface Microsoft.VisualStudio.Utilities.Internal.IAsyncHttpWebRequest {
    public string Url { get; }
    public string Method { get; public set; }
    public int Timeout { get; public set; }
    public RequestCachePolicy CachePolicy { get; public set; }
    public string ContentType { get; public set; }
    public abstract virtual string get_Url();
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual RequestCachePolicy get_CachePolicy();
    public abstract virtual void set_CachePolicy(RequestCachePolicy value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual void AddHeaders(IEnumerable`1<KeyValuePair`2<string, string>> headers);
    public abstract virtual Task`1<IStreamedHttpWebResponse> GetResponseAsync();
}
public interface Microsoft.VisualStudio.Utilities.Internal.IRegistryTools {
    public abstract virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, Nullable`1<int> defaultOnError);
    public abstract virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, Nullable`1<int> defaultOnError);
    public abstract virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public abstract virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, object defaultOnError);
    public abstract virtual object GetRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public abstract virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value);
    public abstract virtual bool SetRegistryFromLocalMachineRoot(string regKeyPath, string regKeyName, object value, bool use64Bit);
}
public interface Microsoft.VisualStudio.Utilities.Internal.IRegistryTools2 {
    public abstract virtual String[] GetRegistryValueNamesFromCurrentUserRoot(string regKeyPath);
    public abstract virtual String[] GetRegistryValueNamesFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public abstract virtual String[] GetRegistrySubKeyNamesFromCurrentUserRoot(string regKeyPath);
    public abstract virtual String[] GetRegistrySubKeyNamesFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public abstract virtual bool DoesRegistryKeyExistInCurrentUserRoot(string regKeyPath);
    public abstract virtual bool DoesRegistryKeyExistInLocalMachineRoot(string regKeyPath, bool use64Bit);
    public abstract virtual bool DeleteRegistryKeyFromCurrentUserRoot(string regKeyPath);
    public abstract virtual bool DeleteRegistryKeyFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public abstract virtual bool DeleteRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName);
    public abstract virtual bool DeleteRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit);
}
public interface Microsoft.VisualStudio.Utilities.Internal.IRegistryTools3 {
    public abstract virtual bool TryGetRegistryValueKindFromCurrentUserRoot(string regKeyPath, string regKeyName, RegistryValueKind& kind);
    public abstract virtual bool TryGetRegistryValueKindFromLocalMachineRoot(string regKeyPath, string regKeyName, RegistryValueKind& kind, bool use64Bit);
}
public interface Microsoft.VisualStudio.Utilities.Internal.IRegistryTools4 {
    public abstract virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value, RegistryValueKind valueKind);
}
public interface Microsoft.VisualStudio.Utilities.Internal.IStreamedHttpWebResponse {
    public ErrorCode ErrorCode { get; }
    public WebExceptionStatus ExceptionCode { get; }
    public HttpStatusCode StatusCode { get; }
    public abstract virtual ErrorCode get_ErrorCode();
    public abstract virtual WebExceptionStatus get_ExceptionCode();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual Stream GetResponseStream();
}
public static class Microsoft.VisualStudio.Utilities.Internal.MacNativeMethods : object {
    private static int sysctlbyname(string property, IntPtr output, IntPtr oldLen, IntPtr newp, UInt32 newlen);
    private static int Gestalt(int selector, Int32& result);
    private static int uname(IntPtr buf);
    public static void GetSystemInfo(SystemInfo& info);
    public static void GetOSVersionInfo(OSVersionInfo& info);
    internal static bool IsRunningOnMac();
    private static int Gestalt(string selector);
    private static int SysctlValueAsInt(string name);
    private static long SysctlValueAsInt64(string name);
    private static string SysctlValueAsString(string name);
    private static IntPtr SysctlGetValue(string name);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.ObjectExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Utilities.Internal.ObjectExtensions/<Enumerate>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Enumerate(T value);
    [ExtensionAttribute]
public static IEnumerable`1<T> EmptyIfNull(IEnumerable`1<T> enumeration);
}
public static class Microsoft.VisualStudio.Utilities.Internal.Platform : object {
    public static bool IsWindows;
    public static bool IsMac;
    public static bool IsLinux;
    private static Platform();
    public static void Initialize();
}
internal class Microsoft.VisualStudio.Utilities.Internal.RegistryHelpers : object {
    public static bool TryGetRegistryValueKindForSet(object value, RegistryValueKind& registryValueKind);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.VisualStudio.Utilities.Internal.RegistryTools : object {
    public sealed virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, Nullable`1<int> defaultOnError);
    public sealed virtual Nullable`1<int> GetRegistryIntValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, Nullable`1<int> defaultOnError);
    public sealed virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public sealed virtual object GetRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit, object defaultOnError);
    public sealed virtual object GetRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName, object defaultOnError);
    public sealed virtual bool TryGetRegistryValueKindFromCurrentUserRoot(string regKeyPath, string regKeyName, RegistryValueKind& kind);
    public sealed virtual bool TryGetRegistryValueKindFromLocalMachineRoot(string regKeyPath, string regKeyName, RegistryValueKind& kind, bool use64Bit);
    public sealed virtual String[] GetRegistryValueNamesFromCurrentUserRoot(string regKeyPath);
    public sealed virtual String[] GetRegistryValueNamesFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public sealed virtual String[] GetRegistrySubKeyNamesFromCurrentUserRoot(string regKeyPath);
    public sealed virtual String[] GetRegistrySubKeyNamesFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public sealed virtual bool DoesRegistryKeyExistInCurrentUserRoot(string regKeyPath);
    public sealed virtual bool DoesRegistryKeyExistInLocalMachineRoot(string regKeyPath, bool use64Bit);
    public sealed virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value);
    public sealed virtual bool SetRegistryFromCurrentUserRoot(string regKeyPath, string regKeyName, object value, RegistryValueKind valueKind);
    public sealed virtual bool SetRegistryFromLocalMachineRoot(string regKeyPath, string regKeyName, object value, bool use64Bit);
    public sealed virtual bool DeleteRegistryKeyFromCurrentUserRoot(string regKeyPath);
    public sealed virtual bool DeleteRegistryKeyFromLocalMachineRoot(string regKeyPath, bool use64Bit);
    public sealed virtual bool DeleteRegistryValueFromCurrentUserRoot(string regKeyPath, string regKeyName);
    public sealed virtual bool DeleteRegistryValueFromLocalMachineRoot(string regKeyPath, string regKeyName, bool use64Bit);
    private object GetRegistryValue(RegistryKey rootKey, string regKeyPath, string regKeyName, object defaultOnError);
    private bool TryGetRegistryValueKind(RegistryKey rootKey, string regKeyPath, string regKeyName, RegistryValueKind& kind);
    private String[] GetRegistryValueNames(RegistryKey rootKey, string regKeyPath);
    private String[] GetRegistrySubKeyNames(RegistryKey rootKey, string regKeyPath);
    private bool DoesRegistryKeyExist(RegistryKey rootKey, string regKeyPath);
    private bool SetRegistryValue(RegistryKey rootKey, string regKeyPath, string regKeyName, object value, RegistryValueKind valueKind);
    private bool DeleteRegistrySubKey(RegistryKey rootKey, string regKeyPath);
    private bool DeleteRegistryValue(RegistryKey rootKey, string regKeyPath, string regKeyName);
}
[XmlTypeAttribute]
public class Microsoft.VisualStudio.Utilities.Internal.RegistryValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Strings>k__BackingField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Type { get; public set; }
    [XmlTextAttribute("System.String")]
public string Text { get; public set; }
    [XmlElementAttribute]
public String[] Strings { get; public set; }
    [XmlIgnoreAttribute]
public object Value { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public String[] get_Strings();
    [CompilerGeneratedAttribute]
public void set_Strings(String[] value);
    public object get_Value();
    public static RegistryValue FromValue(string name, object value);
    private object GetObjectValue();
}
[XmlTypeAttribute]
public class Microsoft.VisualStudio.Utilities.Internal.RegistryValues : List`1<RegistryValue> {
}
public class Microsoft.VisualStudio.Utilities.Internal.StreamedHttpWebResponse : object {
    [CompilerGeneratedAttribute]
private ErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private WebExceptionStatus <ExceptionCode>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpWebResponse <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public ErrorCode ErrorCode { get; public set; }
    public WebExceptionStatus ExceptionCode { get; public set; }
    public HttpWebResponse Response { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual ErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(ErrorCode value);
    [CompilerGeneratedAttribute]
public sealed virtual WebExceptionStatus get_ExceptionCode();
    [CompilerGeneratedAttribute]
public void set_ExceptionCode(WebExceptionStatus value);
    [CompilerGeneratedAttribute]
public HttpWebResponse get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpWebResponse value);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    public sealed virtual Stream GetResponseStream();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.StringExtensions : object {
    [ExtensionAttribute]
public static string Join(IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Utilities.Internal.TaskExtensions : object {
    [ExtensionAttribute]
public static void SwallowException(Task task);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.4.255.64262")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
