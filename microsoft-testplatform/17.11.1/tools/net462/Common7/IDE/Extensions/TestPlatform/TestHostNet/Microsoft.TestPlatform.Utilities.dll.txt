[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.ClientUtilities : object {
    private static string TestSettingsFileXPath;
    private static string ResultsDirectoryXPath;
    private static string DotnetHostPathXPath;
    private static string RunsettingsDirectory;
    public static void FixRelativePathsInRunSettings(XmlDocument xmlDocument, string path);
    private static void AddRunSettingsDirectoryNode(XmlDocument doc, string path);
    private static void FixNodeFilePath(XmlNode node, string root);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler : object {
    private static string CoverageUri;
    private static string CoverageFileExtension;
    private static string XmlFileExtension;
    private static string CoverageFriendlyName;
    private static string CodeCoverageIoAssemblyName;
    private static string CoverageFileUtilityTypeName;
    private static string MergeMethodName;
    private static string CoverageMergeOperationName;
    private static Uri CodeCoverageDataCollectorUri;
    [NullableAttribute("2")]
private static Assembly s_codeCoverageAssembly;
    [NullableAttribute("2")]
private static object s_classInstance;
    [NullableAttribute("2")]
private static MethodInfo s_mergeMethodInfo;
    [NullableAttribute("2")]
private static Array s_mergeOperationEnumValues;
    public bool SupportsIncrementalProcessing { get; }
    private static CodeCoverageDataAttachmentsHandler();
    public sealed virtual bool get_SupportsIncrementalProcessing();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<GetExtensionUris>d__15")]
public sealed virtual IEnumerable`1<Uri> GetExtensionUris();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<ProcessAttachmentSetsAsync>d__16")]
public sealed virtual Task`1<ICollection`1<AttachmentSet>> ProcessAttachmentSetsAsync(XmlElement configurationElement, ICollection`1<AttachmentSet> attachments, IProgress`1<int> progressReporter, IMessageLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<MergeCodeCoverageFilesAsync>d__17")]
private static Task`1<IList`1<string>> MergeCodeCoverageFilesAsync(IList`1<string> files, IProgress`1<int> progressReporter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageDataAttachmentsHandler/<MergeCodeCoverageFilesAsync>d__18")]
private static Task`1<IList`1<string>> MergeCodeCoverageFilesAsync(IList`1<string> files, CancellationToken cancellationToken);
    [MemberNotNullAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static void LoadCodeCoverageAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.Utilities.CodeCoverageRunSettingsProcessor : object {
    private XmlNode _defaultSettingsRootNode;
    public CodeCoverageRunSettingsProcessor(XmlNode defaultSettingsRootNode);
    [NullableContextAttribute("2")]
public XmlNode Process(string currentSettings);
    [NullableContextAttribute("2")]
public XmlNode Process(XmlDocument currentSettingsDocument);
    [NullableContextAttribute("2")]
public XmlNode Process(XmlNode currentSettingsRootNode);
    private static XmlNode SelectNodeOrAddDefaults(XmlNode currentRootNode, XmlNode defaultRootNode, IList`1<string> pathComponents);
    private static bool ShouldProcessCurrentExclusion(XmlNode node);
    private static string BuildPath(IList`1<string> pathComponents);
    [NullableContextAttribute("2")]
private static XmlNode ExtractNode(XmlNode node, string path);
    private static void MergeNodes(XmlNode currentNode, XmlNode defaultNode);
}
public static class Microsoft.VisualStudio.TestPlatform.Utilities.CommandLineUtilities : object {
    [NullableContextAttribute("1")]
public static bool SplitCommandLineIntoArguments(string args, String[]& arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.Utilities.InferRunSettingsHelper : object {
    private static string DesignModeNodeName;
    private static string BatchSizeNodeName;
    private static string CollectSourceInformationNodeName;
    private static string RunSettingsNodeName;
    private static string RunConfigurationNodeName;
    private static string ResultsDirectoryNodeName;
    private static string TargetPlatformNodeName;
    private static string TargetFrameworkNodeName;
    private static string TargetDevice;
    private static string DesignModeNodePath;
    private static string BatchSizeNodePath;
    private static string CollectSourceInformationNodePath;
    private static string RunConfigurationNodePath;
    private static string TargetPlatformNodePath;
    private static string TargetFrameworkNodePath;
    private static string ResultsDirectoryNodePath;
    private static string TargetDeviceNodePath;
    private static string EnvironmentVariablesNodePath;
    private static string MultiTargetingForwardLink;
    private static string MsTestTargetDeviceNodePath;
    private static string CodeCoverageCollectorUri;
    private static string FakesCollectorUri;
    private static string CodeCoverageFriendlyName;
    private static string FakesFriendlyName;
    private static string LegacyElementsString;
    private static string DeploymentAttributesString;
    private static string ExecutionAttributesString;
    private static List`1<string> ExecutionNodesPaths;
    private static InferRunSettingsHelper();
    [NullableContextAttribute("2")]
public static string MakeRunsettingsCompatible(string runsettingsXml);
    [NullableContextAttribute("2")]
private static string MakeRunsettingsCompatible(string runsettingsXml, HashSet`1<string> listOfValidRunConfigurationSettings, HashSet`1<string> listOfInValidRunConfigurationSettings);
    [NullableContextAttribute("2")]
public static string RemoveTargetPlatformElement(string runsettingsXml);
    public static void UpdateRunSettingsWithUserProvidedSwitches(XmlDocument runSettingsDocument, Architecture architecture, Framework framework, string resultsDirectory);
    public static void UpdateDesignMode(XmlDocument runSettingsDocument, bool designModeValue);
    public static void UpdateBatchSize(XmlDocument runSettingsDocument, long batchSizeValue);
    public static void UpdateCollectSourceInformation(XmlDocument runSettingsDocument, bool collectSourceInformationValue);
    public static void UpdateTargetDevice(XmlDocument runSettingsDocument, string targetDevice);
    public static void UpdateTargetFramework(XmlDocument runSettingsDocument, string framework, bool overwrite);
    [NullableContextAttribute("2")]
public static bool AreRunSettingsCollectorsIncompatibleWithTestSettings(string runsettings);
    public static bool TryGetLegacySettingElements(string runsettingsXml, Dictionary`2& legacySettingsTelemetry);
    [NullableContextAttribute("2")]
private static List`1<string> GetNodeAttributes(XPathNavigator node);
    [NullableContextAttribute("2")]
public static Dictionary`2<string, string> GetEnvironmentVariables(string runSettings);
    public static void UpdateTargetPlatform(XmlDocument runSettingsDocument, string platform, bool overwrite);
    public static bool TryGetDeviceXml(XPathNavigator runSettingsNavigator, String& deviceXml);
    [NullableContextAttribute("2")]
public static bool IsTestSettingsEnabled(string runsettingsXml);
    private static void AddNodeIfNotPresent(XmlDocument xmlDocument, string nodePath, string nodeName, T nodeValue, bool overwrite);
    private static void ValidateRunConfiguration(XPathNavigator runSettingsNavigator);
    private static void UpdateRunConfiguration(XmlDocument xmlDocument, Architecture effectivePlatform, Framework effectiveFramework, string resultsDirectory);
    public static bool TryGetPlatformXml(XPathNavigator runSettingsNavigator, String& platformXml);
    public static bool TryGetFrameworkXml(XPathNavigator runSettingsNavigator, String& frameworkXml);
    public static IEnumerable`1<string> FilterCompatibleSources(Architecture chosenPlatform, Architecture defaultArchitecture, Framework chosenFramework, IDictionary`2<string, Architecture> sourcePlatforms, IDictionary`2<string, Framework> sourceFrameworks, String& incompatibleSettingWarning);
    private static bool IsSettingIncompatible(Architecture sourcePlatform, Architecture targetPlatform, Framework sourceFramework, Framework targetFramework);
    private static bool IsPlatformIncompatible(Architecture sourcePlatform, Architecture targetPlatform);
    private static bool IsFrameworkIncompatible(Framework sourceFramework, Framework targetFramework);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.MSTestSettingsUtilities : object {
    public static XmlDocument Import(string settingsFile, XmlDocument defaultRunSettings);
    [NullableContextAttribute("2")]
public static bool IsLegacyTestSettingsFile(string settingsFile);
    private static XmlElement GenerateMsTestXml(string settingsFile);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.ParallelRunSettingsUtilities : object {
    private static string XpathOfRunSettings;
    private static string XpathOfRunConfiguration;
    private static string XpathOfMaxCpuCount;
    private static string MaxCpuCountSettingTemplate;
    private static string RunConfigurationWithMaxCpuCountSettingTemplate;
    private static ParallelRunSettingsUtilities();
    public static void UpdateRunSettingsWithParallelSettingIfNotConfigured(XPathNavigator navigator);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.Utilities.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string InvalidRunSettingsXml { get; }
    internal static string InvalidSettingsIncorrectValue { get; }
    internal static string MissingRunSettingsNode { get; }
    internal static string NoRunSettingsNodeFound { get; }
    internal static string RunSettingsParseError { get; }
    internal static string UnExpectedSettingsFile { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_InvalidRunSettingsXml();
    internal static string get_InvalidSettingsIncorrectValue();
    internal static string get_MissingRunSettingsNode();
    internal static string get_NoRunSettingsNodeFound();
    internal static string get_RunSettingsParseError();
    internal static string get_UnExpectedSettingsFile();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.Utilities.StringExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.Utilities.StringExtensions/<Tokenize>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<string> Tokenize(string input, char separator, char escape);
    [ExtensionAttribute]
private static string Flush(StringBuilder stringBuilder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestPlatform.Utilities.StringUtils : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string value);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
internal static class Microsoft.VisualStudio.TestPlatform.Utilities.TPDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Utilities.XmlUtilities : object {
    internal static string GetNodeXml(XPathNavigator runSettingsNavigator, string nodeXPath);
    internal static bool IsValidNodeXmlValue(string xmlNodeValue, Func`2<string, bool> validator);
    internal static void AppendOrModifyChild(XmlDocument xmlDocument, string nodeXPath, string nodeName, string innerXml);
    internal static void RemoveChildNode(XPathNavigator parentNavigator, string nodeXPath, string childName);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
