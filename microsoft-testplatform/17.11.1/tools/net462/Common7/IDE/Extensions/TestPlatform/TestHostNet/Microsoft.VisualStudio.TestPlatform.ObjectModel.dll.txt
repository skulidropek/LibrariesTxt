[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.VisualStudio.TestPlatform.ObjectModel.ActivationContextNativeMethods : object {
    public static IntPtr CreateActCtx(ACTCTX& actctx);
    public static bool ActivateActCtx(IntPtr hActCtx, IntPtr& lpCookie);
    public static bool DeactivateActCtx(int dwFlags, IntPtr lpCookie);
    public static void ReleaseActCtx(IntPtr hActCtx);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IDiscoveryContext {
    public IRunSettings RunSettings { get; }
    public abstract virtual IRunSettings get_RunSettings();
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle {
    public bool EnableShutdownAfterTestRun { get; public set; }
    public abstract virtual bool get_EnableShutdownAfterTestRun();
    public abstract virtual void set_EnableShutdownAfterTestRun(bool value);
    [NullableContextAttribute("2")]
public abstract virtual int LaunchProcessWithDebuggerAttached(string filePath, string workingDirectory, string arguments, IDictionary`2<string, string> environmentVariables);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IFrameworkHandle2 {
    public abstract virtual bool AttachDebuggerToProcess(int pid);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunContext {
    public bool KeepAlive { get; }
    public bool InIsolation { get; }
    public bool IsDataCollectionEnabled { get; }
    public bool IsBeingDebugged { get; }
    public string TestRunDirectory { get; }
    public string SolutionDirectory { get; }
    public abstract virtual bool get_KeepAlive();
    public abstract virtual bool get_InIsolation();
    public abstract virtual bool get_IsDataCollectionEnabled();
    public abstract virtual bool get_IsBeingDebugged();
    public abstract virtual ITestCaseFilterExpression GetTestCaseFilter(IEnumerable`1<string> supportedProperties, Func`2<string, TestProperty> propertyProvider);
    public abstract virtual string get_TestRunDirectory();
    public abstract virtual string get_SolutionDirectory();
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunSettings {
    public string SettingsXml { get; }
    public abstract virtual ISettingsProvider GetSettings(string settingsName);
    public abstract virtual string get_SettingsXml();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ISettingsProvider {
    public abstract virtual void Load(XmlReader reader);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseDiscoverySink {
    public abstract virtual void SendTestCase(TestCase discoveredTest);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression {
    public string TestCaseFilterValue { get; }
    public abstract virtual string get_TestCaseFilterValue();
    public abstract virtual bool MatchTestCase(TestCase testCase, Func`2<string, object> propertyValueProvider);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer {
    public abstract virtual void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutionRecorder {
    public abstract virtual void RecordResult(TestResult testResult);
    public abstract virtual void RecordStart(TestCase testCase);
    public abstract virtual void RecordEnd(TestCase testCase, TestOutcome outcome);
    public abstract virtual void RecordAttachments(IList`1<AttachmentSet> attachmentSets);
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor {
    public abstract virtual void RunTests(IEnumerable`1<TestCase> tests, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public abstract virtual void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public abstract virtual void Cancel();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor2 {
    public abstract virtual bool ShouldAttachToTestHost(IEnumerable`1<string> sources, IRunContext runContext);
    public abstract virtual bool ShouldAttachToTestHost(IEnumerable`1<TestCase> tests, IRunContext runContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestCanceledException : Exception {
    public TestCanceledException(string message);
    public TestCanceledException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected TestCanceledException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.TestPlatformFormatException : Exception {
    [CompilerGeneratedAttribute]
private string <FilterValue>k__BackingField;
    public string FilterValue { get; private set; }
    public TestPlatformFormatException(string message);
    public TestPlatformFormatException(string message, string filterValue);
    public TestPlatformFormatException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected TestPlatformFormatException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_FilterValue();
    [CompilerGeneratedAttribute]
private void set_FilterValue(string value);
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.Architecture : Enum {
    public int value__;
    public static Architecture Default;
    public static Architecture X86;
    public static Architecture X64;
    public static Architecture ARM;
    public static Architecture AnyCPU;
    public static Architecture ARM64;
    public static Architecture S390x;
    public static Architecture Ppc64le;
    public static Architecture RiscV64;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<UriDataAttachment> <Attachments>k__BackingField;
    [DataMemberAttribute]
public Uri Uri { get; private set; }
    [DataMemberAttribute]
public string DisplayName { get; private set; }
    [DataMemberAttribute]
public IList`1<UriDataAttachment> Attachments { get; private set; }
    public AttachmentSet(Uri uri, string displayName);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public IList`1<UriDataAttachment> get_Attachments();
    [CompilerGeneratedAttribute]
private void set_Attachments(IList`1<UriDataAttachment> value);
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.BaseTestRunCriteria : object {
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestRunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestHostLauncher <TestHostLauncher>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FrequencyOfRunStatsChangeEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RunStatsChangeEventTimeout>k__BackingField;
    [DataMemberAttribute]
public bool KeepAlive { get; private set; }
    [DataMemberAttribute]
public string TestRunSettings { get; private set; }
    [DataMemberAttribute]
public ITestHostLauncher TestHostLauncher { get; private set; }
    [DataMemberAttribute]
public long FrequencyOfRunStatsChangeEvent { get; private set; }
    [DataMemberAttribute]
public TimeSpan RunStatsChangeEventTimeout { get; private set; }
    [NullableContextAttribute("1")]
public BaseTestRunCriteria(BaseTestRunCriteria runCriteria);
    public BaseTestRunCriteria(long frequencyOfRunStatsChangeEvent);
    public BaseTestRunCriteria(long frequencyOfRunStatsChangeEvent, bool keepAlive);
    public BaseTestRunCriteria(long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings);
    public BaseTestRunCriteria(long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout);
    public BaseTestRunCriteria(long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout, ITestHostLauncher testHostLauncher);
    [CompilerGeneratedAttribute]
public bool get_KeepAlive();
    [CompilerGeneratedAttribute]
private void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public string get_TestRunSettings();
    [CompilerGeneratedAttribute]
private void set_TestRunSettings(string value);
    [CompilerGeneratedAttribute]
public ITestHostLauncher get_TestHostLauncher();
    [CompilerGeneratedAttribute]
private void set_TestHostLauncher(ITestHostLauncher value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_FrequencyOfRunStatsChangeEvent();
    [CompilerGeneratedAttribute]
private void set_FrequencyOfRunStatsChangeEvent(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RunStatsChangeEventTimeout();
    [CompilerGeneratedAttribute]
private void set_RunStatsChangeEventTimeout(TimeSpan value);
    protected bool Equals(BaseTestRunCriteria other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.CustomHostLaunchAckPayload : object {
    [CompilerGeneratedAttribute]
private int <HostProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [DataMemberAttribute]
public int HostProcessId { get; public set; }
    [DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public int get_HostProcessId();
    [CompilerGeneratedAttribute]
public void set_HostProcessId(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveredTestsEventArgs : EventArgs {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<TestCase> <DiscoveredTestCases>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<TestCase> DiscoveredTestCases { get; private set; }
    public DiscoveredTestsEventArgs(IEnumerable`1<TestCase> discoveredTestCases);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestCase> get_DiscoveredTestCases();
    [CompilerGeneratedAttribute]
private void set_DiscoveredTestCases(IEnumerable`1<TestCase> value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private long <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAborted>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metrics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <FullyDiscoveredSources>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <PartiallyDiscoveredSources>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <SkippedDiscoveredSources>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <NotDiscoveredSources>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <DiscoveredExtensions>k__BackingField;
    [DataMemberAttribute]
public long TotalCount { get; public set; }
    [DataMemberAttribute]
public bool IsAborted { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IDictionary`2<string, object> Metrics { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IList`1<string> FullyDiscoveredSources { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IList`1<string> PartiallyDiscoveredSources { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IList`1<string> SkippedDiscoveredSources { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IList`1<string> NotDiscoveredSources { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public Dictionary`2<string, HashSet`1<string>> DiscoveredExtensions { get; public set; }
    public DiscoveryCompleteEventArgs(long totalTests, bool isAborted);
    [CompilerGeneratedAttribute]
public long get_TotalCount();
    [CompilerGeneratedAttribute]
public void set_TotalCount(long value);
    [CompilerGeneratedAttribute]
public bool get_IsAborted();
    [CompilerGeneratedAttribute]
public void set_IsAborted(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_FullyDiscoveredSources();
    [CompilerGeneratedAttribute]
public void set_FullyDiscoveredSources(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_PartiallyDiscoveredSources();
    [CompilerGeneratedAttribute]
public void set_PartiallyDiscoveredSources(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_SkippedDiscoveredSources();
    [CompilerGeneratedAttribute]
public void set_SkippedDiscoveredSources(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_NotDiscoveredSources();
    [CompilerGeneratedAttribute]
public void set_NotDiscoveredSources(IList`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_DiscoveredExtensions();
    [CompilerGeneratedAttribute]
public void set_DiscoveredExtensions(Dictionary`2<string, HashSet`1<string>> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria : object {
    [CompilerGeneratedAttribute]
private string <Package>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<string>> <AdapterSourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FrequencyOfDiscoveredTestsEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DiscoveredTestEventTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private TestSessionInfo <TestSessionInfo>k__BackingField;
    [NullableAttribute("1")]
[IgnoreDataMemberAttribute]
public IEnumerable`1<string> Sources { get; }
    [DataMemberAttribute]
public string Package { get; public set; }
    [NullableAttribute("1")]
[DataMemberAttribute]
public Dictionary`2<string, IEnumerable`1<string>> AdapterSourceMap { get; private set; }
    [DataMemberAttribute]
public long FrequencyOfDiscoveredTestsEvent { get; private set; }
    [DataMemberAttribute]
public TimeSpan DiscoveredTestEventTimeout { get; private set; }
    [DataMemberAttribute]
public string RunSettings { get; private set; }
    [DataMemberAttribute]
public string TestCaseFilter { get; public set; }
    [DataMemberAttribute]
public TestSessionInfo TestSessionInfo { get; public set; }
    [NullableContextAttribute("1")]
public DiscoveryCriteria(IEnumerable`1<string> sources, long frequencyOfDiscoveredTestsEvent, string testSettings);
    [NullableContextAttribute("1")]
public DiscoveryCriteria(IEnumerable`1<string> sources, long frequencyOfDiscoveredTestsEvent, TimeSpan discoveredTestEventTimeout, string runSettings);
    public DiscoveryCriteria(IEnumerable`1<string> sources, long frequencyOfDiscoveredTestsEvent, TimeSpan discoveredTestEventTimeout, string runSettings, TestSessionInfo testSessionInfo);
    [NullableContextAttribute("1")]
public IEnumerable`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public string get_Package();
    [CompilerGeneratedAttribute]
public void set_Package(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Dictionary`2<string, IEnumerable`1<string>> get_AdapterSourceMap();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_AdapterSourceMap(Dictionary`2<string, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public long get_FrequencyOfDiscoveredTestsEvent();
    [CompilerGeneratedAttribute]
private void set_FrequencyOfDiscoveredTestsEvent(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DiscoveredTestEventTimeout();
    [CompilerGeneratedAttribute]
private void set_DiscoveredTestEventTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
private void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public string get_TestCaseFilter();
    [CompilerGeneratedAttribute]
public void set_TestCaseFilter(string value);
    [CompilerGeneratedAttribute]
public TestSessionInfo get_TestSessionInfo();
    [CompilerGeneratedAttribute]
public void set_TestSessionInfo(TestSessionInfo value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryRequestPayload : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private TestPlatformOptions <TestPlatformOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TestSessionInfo <TestSessionInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IEnumerable`1<string> Sources { get; public set; }
    [DataMemberAttribute]
public string RunSettings { get; public set; }
    [DataMemberAttribute]
public TestPlatformOptions TestPlatformOptions { get; public set; }
    [DataMemberAttribute]
public TestSessionInfo TestSessionInfo { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public TestPlatformOptions get_TestPlatformOptions();
    [CompilerGeneratedAttribute]
public void set_TestPlatformOptions(TestPlatformOptions value);
    [CompilerGeneratedAttribute]
public TestSessionInfo get_TestSessionInfo();
    [CompilerGeneratedAttribute]
public void set_TestSessionInfo(TestSessionInfo value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryStartEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DiscoveryCriteria <DiscoveryCriteria>k__BackingField;
    public DiscoveryCriteria DiscoveryCriteria { get; private set; }
    public DiscoveryStartEventArgs(DiscoveryCriteria discoveryCriteria);
    [CompilerGeneratedAttribute]
public DiscoveryCriteria get_DiscoveryCriteria();
    [CompilerGeneratedAttribute]
private void set_DiscoveryCriteria(DiscoveryCriteria value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.EditorAttachDebuggerAckPayload : object {
    [CompilerGeneratedAttribute]
private bool <Attached>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [DataMemberAttribute]
public bool Attached { get; public set; }
    [DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Attached();
    [CompilerGeneratedAttribute]
public void set_Attached(bool value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.FilterOptions : object {
    [CompilerGeneratedAttribute]
private string <FilterRegEx>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterRegExReplacement>k__BackingField;
    [DataMemberAttribute]
public string FilterRegEx { get; public set; }
    [DataMemberAttribute]
public string FilterRegExReplacement { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilterRegEx();
    [CompilerGeneratedAttribute]
public void set_FilterRegEx(string value);
    [CompilerGeneratedAttribute]
public string get_FilterRegExReplacement();
    [CompilerGeneratedAttribute]
public void set_FilterRegExReplacement(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    protected bool Equals(FilterOptions other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IBaseProxy {
    public abstract virtual TestProcessStartInfo UpdateTestProcessStartInfo(TestProcessStartInfo testProcessStartInfo);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IDiscoveryRequest {
    [NullableAttribute("1")]
public DiscoveryCriteria DiscoveryCriteria { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDiscoveryStart(EventHandler`1<DiscoveryStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDiscoveryStart(EventHandler`1<DiscoveryStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDiscoveryComplete(EventHandler`1<DiscoveryCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDiscoveryComplete(EventHandler`1<DiscoveryCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDiscoveredTests(EventHandler`1<DiscoveredTestsEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDiscoveredTests(EventHandler`1<DiscoveredTestsEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnDiscoveryMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnDiscoveryMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [NullableContextAttribute("1")]
public abstract virtual DiscoveryCriteria get_DiscoveryCriteria();
    public abstract virtual void DiscoverAsync();
    public abstract virtual void Abort();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler {
    public abstract virtual void HandleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    [NullableContextAttribute("2")]
public abstract virtual void HandleTestRunStatsChange(TestRunChangedEventArgs testRunChangedArgs);
    public abstract virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
    public abstract virtual bool AttachDebuggerToProcess(AttachDebuggerInfo attachDebuggerInfo);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IMetricsCollection {
    public IDictionary`2<string, object> Metrics { get; }
    public abstract virtual void Add(string metric, object value);
    public abstract virtual IDictionary`2<string, object> get_Metrics();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    public int ProcessId { get; public set; }
    public string TargetFramework { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> Sources { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher {
    public bool IsDebug { get; }
    public abstract virtual bool get_IsDebug();
    public abstract virtual int LaunchTestHost(TestProcessStartInfo defaultTestHostStartInfo);
    public abstract virtual int LaunchTestHost(TestProcessStartInfo defaultTestHostStartInfo, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher2 {
    public abstract virtual bool AttachDebuggerToProcess(int pid);
    public abstract virtual bool AttachDebuggerToProcess(int pid, CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.ITestHostLauncher3 {
    [NullableContextAttribute("1")]
public abstract virtual bool AttachDebuggerToProcess(AttachDebuggerInfo attachDebuggerInfo, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequest {
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRawMessageReceived(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRawMessageReceived(EventHandler`1<string> value);
    public abstract virtual bool WaitForCompletion(int timeout);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData {
    public IMetricsCollection MetricsCollection { get; public set; }
    [NullableAttribute("2")]
public ProtocolConfig ProtocolConfig { get; public set; }
    public bool IsTelemetryOptedIn { get; public set; }
    public abstract virtual IMetricsCollection get_MetricsCollection();
    public abstract virtual void set_MetricsCollection(IMetricsCollection value);
    [NullableContextAttribute("2")]
public abstract virtual ProtocolConfig get_ProtocolConfig();
    [NullableContextAttribute("2")]
public abstract virtual void set_ProtocolConfig(ProtocolConfig value);
    public abstract virtual bool get_IsTelemetryOptedIn();
    public abstract virtual void set_IsTelemetryOptedIn(bool value);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITelemetryEventsHandler {
    public abstract virtual void HandleTelemetryEvent(TelemetryEvent telemetryEvent);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler {
    public abstract virtual void HandleDiscoveryComplete(long totalTests, IEnumerable`1<TestCase> lastChunk, bool isAborted);
    public abstract virtual void HandleDiscoveredTests(IEnumerable`1<TestCase> discoveredTestCases);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2 {
    [NullableContextAttribute("1")]
public abstract virtual void HandleDiscoveryComplete(DiscoveryCompleteEventArgs discoveryCompleteEventArgs, IEnumerable`1<TestCase> lastChunk);
    public abstract virtual void HandleDiscoveredTests(IEnumerable`1<TestCase> discoveredTestCases);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLogger {
    public abstract virtual void Initialize(TestLoggerEvents events, string testRunDirectory);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestLoggerWithParameters {
    [NullableContextAttribute("1")]
public abstract virtual void Initialize(TestLoggerEvents events, Dictionary`2<string, string> parameters);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler {
    public abstract virtual void HandleRawMessage(string rawMessage);
    [NullableContextAttribute("2")]
public abstract virtual void HandleLogMessage(TestMessageLevel level, string message);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatform {
    public abstract virtual void UpdateExtensions(IEnumerable`1<string> pathToAdditionalExtensions, bool skipExtensionFilters);
    public abstract virtual void ClearExtensions();
    public abstract virtual IDiscoveryRequest CreateDiscoveryRequest(IRequestData requestData, DiscoveryCriteria discoveryCriteria, TestPlatformOptions options, Dictionary`2<string, SourceDetail> sourceToSourceDetailMap, IWarningLogger warningLogger);
    public abstract virtual ITestRunRequest CreateTestRunRequest(IRequestData requestData, TestRunCriteria testRunCriteria, TestPlatformOptions options, Dictionary`2<string, SourceDetail> sourceToSourceDetailMap, IWarningLogger warningLogger);
    public abstract virtual bool StartTestSession(IRequestData requestData, StartTestSessionCriteria criteria, ITestSessionEventsHandler eventsHandler, Dictionary`2<string, SourceDetail> sourceToSourceDetailMap, IWarningLogger warningLogger);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestPlatformCapabilities {
    public TestPlatformType TestPlatformType { get; }
    public abstract virtual TestPlatformType get_TestPlatformType();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunAttachmentsProcessingEventsHandler {
    public abstract virtual void HandleTestRunAttachmentsProcessingComplete(TestRunAttachmentsProcessingCompleteEventArgs attachmentsProcessingCompleteEventArgs, IEnumerable`1<AttachmentSet> lastChunk);
    public abstract virtual void HandleProcessedAttachmentsChunk(IEnumerable`1<AttachmentSet> attachments);
    public abstract virtual void HandleTestRunAttachmentsProcessingProgress(TestRunAttachmentsProcessingProgressEventArgs AttachmentsProcessingProgressEventArgs);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunConfiguration {
    public long FrequencyOfRunStatsChangeEvent { get; }
    public bool HasSpecificTests { get; }
    public bool HasSpecificSources { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<TestCase> Tests { get; }
    public abstract virtual long get_FrequencyOfRunStatsChangeEvent();
    public abstract virtual bool get_HasSpecificTests();
    public abstract virtual bool get_HasSpecificSources();
    public abstract virtual IEnumerable`1<TestCase> get_Tests();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler {
    public abstract virtual void HandleTestRunComplete(TestRunCompleteEventArgs testRunCompleteArgs, TestRunChangedEventArgs lastChunkArgs, ICollection`1<AttachmentSet> runContextAttachments, ICollection`1<string> executorUris);
    [NullableContextAttribute("2")]
public abstract virtual void HandleTestRunStatsChange(TestRunChangedEventArgs testRunChangedArgs);
    public abstract virtual int LaunchProcessWithDebuggerAttached(TestProcessStartInfo testProcessStartInfo);
}
[ObsoleteAttribute("You don't have to implement this interface, AttachDebuggerToProcess it is never called back. To attach to debugger implement ITestHostLauncher2 or ITestHostLauncher3.")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunEventsHandler2 {
    [ObsoleteAttribute("You don't have to implement this it is never called back. To attach to debugger implement ITestHostLauncher2 or ITestHostLauncher3.")]
public abstract virtual bool AttachDebuggerToProcess(int pid);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunRequest {
    public ITestRunConfiguration TestRunConfiguration { get; }
    public TestRunState State { get; }
    public abstract virtual int ExecuteAsync();
    public abstract virtual void CancelAsync();
    public abstract virtual void Abort();
    public abstract virtual ITestRunConfiguration get_TestRunConfiguration();
    public abstract virtual TestRunState get_State();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRunStatsChange(EventHandler`1<TestRunChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRunStatsChange(EventHandler`1<TestRunChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRunStart(EventHandler`1<TestRunStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRunStart(EventHandler`1<TestRunStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnRunCompletion(EventHandler`1<TestRunCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnRunCompletion(EventHandler`1<TestRunCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DataCollectionMessage(EventHandler`1<DataCollectionMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DataCollectionMessage(EventHandler`1<DataCollectionMessageEventArgs> value);
}
[NullableContextAttribute("2")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestRunStatistics {
    public long Item { get; }
    public IDictionary`2<TestOutcome, long> Stats { get; }
    public long ExecutedTests { get; }
    public abstract virtual long get_Item(TestOutcome testOutcome);
    public abstract virtual IDictionary`2<TestOutcome, long> get_Stats();
    public abstract virtual long get_ExecutedTests();
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler {
    public abstract virtual void HandleStartTestSessionComplete(StartTestSessionCompleteEventArgs eventArgs);
    public abstract virtual void HandleStopTestSessionComplete(StopTestSessionCompleteEventArgs eventArgs);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger {
    public abstract virtual void LogWarning(string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionAckPayload : object {
    [CompilerGeneratedAttribute]
private StartTestSessionCompleteEventArgs <EventArgs>k__BackingField;
    [DataMemberAttribute]
public StartTestSessionCompleteEventArgs EventArgs { get; public set; }
    [CompilerGeneratedAttribute]
public StartTestSessionCompleteEventArgs get_EventArgs();
    [CompilerGeneratedAttribute]
public void set_EventArgs(StartTestSessionCompleteEventArgs value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StartTestSessionPayload : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDebuggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCustomHostLauncher>k__BackingField;
    [CompilerGeneratedAttribute]
private TestPlatformOptions <TestPlatformOptions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IList`1<string> Sources { get; public set; }
    [DataMemberAttribute]
public string RunSettings { get; public set; }
    [DataMemberAttribute]
public bool IsDebuggingEnabled { get; public set; }
    [DataMemberAttribute]
public bool HasCustomHostLauncher { get; public set; }
    [DataMemberAttribute]
public TestPlatformOptions TestPlatformOptions { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDebuggingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDebuggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasCustomHostLauncher();
    [CompilerGeneratedAttribute]
public void set_HasCustomHostLauncher(bool value);
    [CompilerGeneratedAttribute]
public TestPlatformOptions get_TestPlatformOptions();
    [CompilerGeneratedAttribute]
public void set_TestPlatformOptions(TestPlatformOptions value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StopTestSessionAckPayload : object {
    [CompilerGeneratedAttribute]
private StopTestSessionCompleteEventArgs <EventArgs>k__BackingField;
    [DataMemberAttribute]
public StopTestSessionCompleteEventArgs EventArgs { get; public set; }
    [CompilerGeneratedAttribute]
public StopTestSessionCompleteEventArgs get_EventArgs();
    [CompilerGeneratedAttribute]
public void set_EventArgs(StopTestSessionCompleteEventArgs value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Payloads.StopTestSessionPayload : object {
    [CompilerGeneratedAttribute]
private TestSessionInfo <TestSessionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectMetrics>k__BackingField;
    [DataMemberAttribute]
public TestSessionInfo TestSessionInfo { get; public set; }
    [DataMemberAttribute]
public bool CollectMetrics { get; public set; }
    [CompilerGeneratedAttribute]
public TestSessionInfo get_TestSessionInfo();
    [CompilerGeneratedAttribute]
public void set_TestSessionInfo(TestSessionInfo value);
    [CompilerGeneratedAttribute]
public bool get_CollectMetrics();
    [CompilerGeneratedAttribute]
public void set_CollectMetrics(bool value);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ProtocolConfig : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.RequestExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void WaitForCompletion(IRequest request);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TestSessionInfo <TestSessionInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metrics>k__BackingField;
    [DataMemberAttribute]
public TestSessionInfo TestSessionInfo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IDictionary`2<string, object> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public TestSessionInfo get_TestSessionInfo();
    [CompilerGeneratedAttribute]
public void set_TestSessionInfo(TestSessionInfo value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IDictionary`2<string, object> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IList`1<string> <Sources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestHostLauncher <TestHostLauncher>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IList`1<string> Sources { get; public set; }
    [DataMemberAttribute]
public string RunSettings { get; public set; }
    [DataMemberAttribute]
public ITestHostLauncher TestHostLauncher { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public ITestHostLauncher get_TestHostLauncher();
    [CompilerGeneratedAttribute]
public void set_TestHostLauncher(ITestHostLauncher value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StopTestSessionCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TestSessionInfo <TestSessionInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metrics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStopped>k__BackingField;
    [DataMemberAttribute]
public TestSessionInfo TestSessionInfo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IDictionary`2<string, object> Metrics { get; public set; }
    [DataMemberAttribute]
public bool IsStopped { get; public set; }
    public StopTestSessionCompleteEventArgs(TestSessionInfo testSessionInfo);
    [CompilerGeneratedAttribute]
public TestSessionInfo get_TestSessionInfo();
    [CompilerGeneratedAttribute]
public void set_TestSessionInfo(TestSessionInfo value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public bool get_IsStopped();
    [CompilerGeneratedAttribute]
public void set_IsStopped(bool value);
}
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents : object {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunStart(EventHandler`1<TestRunStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunStart(EventHandler`1<TestRunStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestResult(EventHandler`1<TestResultEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestResult(EventHandler`1<TestResultEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestRunComplete(EventHandler`1<TestRunCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestRunComplete(EventHandler`1<TestRunCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DiscoveryStart(EventHandler`1<DiscoveryStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DiscoveryStart(EventHandler`1<DiscoveryStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DiscoveryMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DiscoveryMessage(EventHandler`1<TestRunMessageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DiscoveredTests(EventHandler`1<DiscoveredTestsEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DiscoveredTests(EventHandler`1<DiscoveredTestsEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DiscoveryComplete(EventHandler`1<DiscoveryCompleteEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DiscoveryComplete(EventHandler`1<DiscoveryCompleteEventArgs> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformOptions : object {
    [CompilerGeneratedAttribute]
private string <TestCaseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterOptions <FilterOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDefaultAdapters>k__BackingField;
    [DataMemberAttribute]
public string TestCaseFilter { get; public set; }
    [DataMemberAttribute]
public FilterOptions FilterOptions { get; public set; }
    [DataMemberAttribute]
public bool CollectMetrics { get; public set; }
    [DataMemberAttribute]
public bool SkipDefaultAdapters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TestCaseFilter();
    [CompilerGeneratedAttribute]
public void set_TestCaseFilter(string value);
    [CompilerGeneratedAttribute]
public FilterOptions get_FilterOptions();
    [CompilerGeneratedAttribute]
public void set_FilterOptions(FilterOptions value);
    [CompilerGeneratedAttribute]
public bool get_CollectMetrics();
    [CompilerGeneratedAttribute]
public void set_CollectMetrics(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipDefaultAdapters();
    [CompilerGeneratedAttribute]
public void set_SkipDefaultAdapters(bool value);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestPlatformType : Enum {
    public int value__;
    public static TestPlatformType InProc;
    public static TestPlatformType OutOfProc;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metrics>k__BackingField;
    [DataMemberAttribute]
public bool IsCanceled { get; private set; }
    [DataMemberAttribute]
public Exception Error { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IDictionary`2<string, object> Metrics { get; public set; }
    public TestRunAttachmentsProcessingCompleteEventArgs(bool isCanceled, Exception error);
    [CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
private void set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IDictionary`2<string, object> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingPayload : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<AttachmentSet> <Attachments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<InvokedDataCollector> <InvokedDataCollectors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectMetrics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IEnumerable`1<AttachmentSet> Attachments { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IEnumerable`1<InvokedDataCollector> InvokedDataCollectors { get; public set; }
    [DataMemberAttribute]
public string RunSettings { get; public set; }
    [DataMemberAttribute]
public bool CollectMetrics { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<AttachmentSet> get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(IEnumerable`1<AttachmentSet> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<InvokedDataCollector> get_InvokedDataCollectors();
    [CompilerGeneratedAttribute]
public void set_InvokedDataCollectors(IEnumerable`1<InvokedDataCollector> value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public bool get_CollectMetrics();
    [CompilerGeneratedAttribute]
public void set_CollectMetrics(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunAttachmentsProcessingProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private long <CurrentAttachmentProcessorIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Uri> <CurrentAttachmentProcessorUris>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentAttachmentProcessorProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AttachmentProcessorsCount>k__BackingField;
    [DataMemberAttribute]
public long CurrentAttachmentProcessorIndex { get; private set; }
    [DataMemberAttribute]
public ICollection`1<Uri> CurrentAttachmentProcessorUris { get; private set; }
    [DataMemberAttribute]
public long CurrentAttachmentProcessorProgress { get; private set; }
    [DataMemberAttribute]
public long AttachmentProcessorsCount { get; private set; }
    public TestRunAttachmentsProcessingProgressEventArgs(long currentAttachmentProcessorIndex, ICollection`1<Uri> currentAttachmentProcessorUris, long currentAttachmentProcessorProgress, long attachmentProcessorsCount);
    [CompilerGeneratedAttribute]
public long get_CurrentAttachmentProcessorIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentAttachmentProcessorIndex(long value);
    [CompilerGeneratedAttribute]
public ICollection`1<Uri> get_CurrentAttachmentProcessorUris();
    [CompilerGeneratedAttribute]
private void set_CurrentAttachmentProcessorUris(ICollection`1<Uri> value);
    [CompilerGeneratedAttribute]
public long get_CurrentAttachmentProcessorProgress();
    [CompilerGeneratedAttribute]
private void set_CurrentAttachmentProcessorProgress(long value);
    [CompilerGeneratedAttribute]
public long get_AttachmentProcessorsCount();
    [CompilerGeneratedAttribute]
private void set_AttachmentProcessorsCount(long value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs : EventArgs {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<TestResult> <NewTestResults>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestRunStatistics <TestRunStatistics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<TestCase> <ActiveTests>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IEnumerable`1<TestResult> NewTestResults { get; private set; }
    [DataMemberAttribute]
public ITestRunStatistics TestRunStatistics { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IEnumerable`1<TestCase> ActiveTests { get; private set; }
    public TestRunChangedEventArgs(ITestRunStatistics stats, IEnumerable`1<TestResult> newTestResults, IEnumerable`1<TestCase> activeTests);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestResult> get_NewTestResults();
    [CompilerGeneratedAttribute]
private void set_NewTestResults(IEnumerable`1<TestResult> value);
    [CompilerGeneratedAttribute]
public ITestRunStatistics get_TestRunStatistics();
    [CompilerGeneratedAttribute]
private void set_TestRunStatistics(ITestRunStatistics value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TestCase> get_ActiveTests();
    [CompilerGeneratedAttribute]
private void set_ActiveTests(IEnumerable`1<TestCase> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ITestRunStatistics <TestRunStatistics>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCanceled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAborted>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Collection`1<AttachmentSet> <AttachmentSets>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Collection`1<InvokedDataCollector> <InvokedDataCollectors>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedTimeInRunningTests>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Metrics>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, HashSet`1<string>> <DiscoveredExtensions>k__BackingField;
    [DataMemberAttribute]
public ITestRunStatistics TestRunStatistics { get; private set; }
    [DataMemberAttribute]
public bool IsCanceled { get; private set; }
    [DataMemberAttribute]
public bool IsAborted { get; private set; }
    [DataMemberAttribute]
public Exception Error { get; private set; }
    [NullableAttribute("1")]
[DataMemberAttribute]
public Collection`1<AttachmentSet> AttachmentSets { get; private set; }
    [NullableAttribute("1")]
[DataMemberAttribute]
public Collection`1<InvokedDataCollector> InvokedDataCollectors { get; private set; }
    [DataMemberAttribute]
public TimeSpan ElapsedTimeInRunningTests { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IDictionary`2<string, object> Metrics { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public Dictionary`2<string, HashSet`1<string>> DiscoveredExtensions { get; public set; }
    public TestRunCompleteEventArgs(ITestRunStatistics stats, bool isCanceled, bool isAborted, Exception error, Collection`1<AttachmentSet> attachmentSets, TimeSpan elapsedTime);
    public TestRunCompleteEventArgs(ITestRunStatistics stats, bool isCanceled, bool isAborted, Exception error, Collection`1<AttachmentSet> attachmentSets, Collection`1<InvokedDataCollector> invokedDataCollectors, TimeSpan elapsedTime);
    [CompilerGeneratedAttribute]
public ITestRunStatistics get_TestRunStatistics();
    [CompilerGeneratedAttribute]
private void set_TestRunStatistics(ITestRunStatistics value);
    [CompilerGeneratedAttribute]
public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
private void set_IsCanceled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAborted();
    [CompilerGeneratedAttribute]
private void set_IsAborted(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Exception value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Collection`1<AttachmentSet> get_AttachmentSets();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_AttachmentSets(Collection`1<AttachmentSet> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Collection`1<InvokedDataCollector> get_InvokedDataCollectors();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_InvokedDataCollectors(Collection`1<InvokedDataCollector> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ElapsedTimeInRunningTests();
    [CompilerGeneratedAttribute]
private void set_ElapsedTimeInRunningTests(TimeSpan value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, HashSet`1<string>> get_DiscoveredExtensions();
    [CompilerGeneratedAttribute]
public void set_DiscoveredExtensions(Dictionary`2<string, HashSet`1<string>> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria : BaseTestRunCriteria {
    private string _testCaseFilter;
    private FilterOptions _filterOptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<string>> <AdapterSourceMap>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<TestCase> <Tests>k__BackingField;
    [CompilerGeneratedAttribute]
private TestSessionInfo <TestSessionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugEnabledForTestSession>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
public IEnumerable`1<string> Sources { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public Dictionary`2<string, IEnumerable`1<string>> AdapterSourceMap { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IEnumerable`1<TestCase> Tests { get; private set; }
    [DataMemberAttribute]
public string TestCaseFilter { get; private set; }
    [DataMemberAttribute]
public FilterOptions FilterOptions { get; private set; }
    public TestSessionInfo TestSessionInfo { get; public set; }
    public bool DebugEnabledForTestSession { get; public set; }
    [MemberNotNullWhenAttribute("True", "Tests")]
[MemberNotNullWhenAttribute("False", "Sources")]
public bool HasSpecificTests { get; }
    [DataMemberAttribute]
[MemberNotNullWhenAttribute("True", "Sources")]
[MemberNotNullWhenAttribute("False", "Tests")]
public bool HasSpecificSources { get; }
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<string> sources, long frequencyOfRunStatsChangeEvent);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<string> sources, long frequencyOfRunStatsChangeEvent, bool keepAlive);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<string> sources, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<string> sources, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout);
    public TestRunCriteria(IEnumerable`1<string> sources, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout, ITestHostLauncher testHostLauncher);
    public TestRunCriteria(IEnumerable`1<string> sources, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout, ITestHostLauncher testHostLauncher, string testCaseFilter, FilterOptions filterOptions);
    public TestRunCriteria(IEnumerable`1<string> sources, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout, ITestHostLauncher testHostLauncher, string testCaseFilter, FilterOptions filterOptions, TestSessionInfo testSessionInfo, bool debugEnabledForTestSession);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<string> sources, TestRunCriteria testRunCriteria);
    public TestRunCriteria(Dictionary`2<string, IEnumerable`1<string>> adapterSourceMap, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout, ITestHostLauncher testHostLauncher);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<TestCase> tests, long frequencyOfRunStatsChangeEvent);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<TestCase> tests, long frequencyOfRunStatsChangeEvent, bool keepAlive);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<TestCase> tests, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<TestCase> tests, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<TestCase> tests, BaseTestRunCriteria baseTestRunCriteria);
    [NullableContextAttribute("1")]
public TestRunCriteria(IEnumerable`1<TestCase> tests, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout, ITestHostLauncher testHostLauncher);
    public TestRunCriteria(IEnumerable`1<TestCase> tests, long frequencyOfRunStatsChangeEvent, bool keepAlive, string testSettings, TimeSpan runStatsChangeEventTimeout, ITestHostLauncher testHostLauncher, TestSessionInfo testSessionInfo, bool debugEnabledForTestSession);
    public IEnumerable`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IEnumerable`1<string>> get_AdapterSourceMap();
    [CompilerGeneratedAttribute]
private void set_AdapterSourceMap(Dictionary`2<string, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<TestCase> get_Tests();
    [CompilerGeneratedAttribute]
private void set_Tests(IEnumerable`1<TestCase> value);
    public string get_TestCaseFilter();
    private void set_TestCaseFilter(string value);
    public FilterOptions get_FilterOptions();
    private void set_FilterOptions(FilterOptions value);
    [CompilerGeneratedAttribute]
public TestSessionInfo get_TestSessionInfo();
    [CompilerGeneratedAttribute]
public void set_TestSessionInfo(TestSessionInfo value);
    [CompilerGeneratedAttribute]
public bool get_DebugEnabledForTestSession();
    [CompilerGeneratedAttribute]
public void set_DebugEnabledForTestSession(bool value);
    [MemberNotNullWhenAttribute("True", "Tests")]
[MemberNotNullWhenAttribute("False", "Sources")]
public sealed virtual bool get_HasSpecificTests();
    [MemberNotNullWhenAttribute("True", "Sources")]
[MemberNotNullWhenAttribute("False", "Tests")]
public sealed virtual bool get_HasSpecificSources();
    [NullableContextAttribute("1")]
public virtual string ToString();
    protected bool Equals(TestRunCriteria other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunRequestPayload : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Sources>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<TestCase> <TestCases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebuggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private TestPlatformOptions <TestPlatformOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TestSessionInfo <TestSessionInfo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public List`1<string> Sources { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public List`1<TestCase> TestCases { get; public set; }
    [DataMemberAttribute]
public string RunSettings { get; public set; }
    [DataMemberAttribute]
public bool KeepAlive { get; public set; }
    [DataMemberAttribute]
public bool DebuggingEnabled { get; public set; }
    [DataMemberAttribute]
public TestPlatformOptions TestPlatformOptions { get; public set; }
    [DataMemberAttribute]
public TestSessionInfo TestSessionInfo { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<TestCase> get_TestCases();
    [CompilerGeneratedAttribute]
public void set_TestCases(List`1<TestCase> value);
    [CompilerGeneratedAttribute]
public string get_RunSettings();
    [CompilerGeneratedAttribute]
public void set_RunSettings(string value);
    [CompilerGeneratedAttribute]
public bool get_KeepAlive();
    [CompilerGeneratedAttribute]
public void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public bool get_DebuggingEnabled();
    [CompilerGeneratedAttribute]
public void set_DebuggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public TestPlatformOptions get_TestPlatformOptions();
    [CompilerGeneratedAttribute]
public void set_TestPlatformOptions(TestPlatformOptions value);
    [CompilerGeneratedAttribute]
public TestSessionInfo get_TestSessionInfo();
    [CompilerGeneratedAttribute]
public void set_TestSessionInfo(TestSessionInfo value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStartEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TestRunCriteria <TestRunCriteria>k__BackingField;
    public TestRunCriteria TestRunCriteria { get; private set; }
    public TestRunStartEventArgs(TestRunCriteria testRunCriteria);
    [CompilerGeneratedAttribute]
public TestRunCriteria get_TestRunCriteria();
    [CompilerGeneratedAttribute]
private void set_TestRunCriteria(TestRunCriteria value);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunState : Enum {
    public int value__;
    public static TestRunState None;
    public static TestRunState Pending;
    public static TestRunState InProgress;
    public static TestRunState Completed;
    public static TestRunState Canceled;
    public static TestRunState Aborted;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunStatistics : object {
    [CompilerGeneratedAttribute]
private long <ExecutedTests>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<TestOutcome, long> <Stats>k__BackingField;
    [DataMemberAttribute]
public long ExecutedTests { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<TestOutcome, long> Stats { get; private set; }
    public long Item { get; }
    public TestRunStatistics(IDictionary`2<TestOutcome, long> stats);
    public TestRunStatistics(long executedTests, IDictionary`2<TestOutcome, long> stats);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ExecutedTests();
    [CompilerGeneratedAttribute]
public void set_ExecutedTests(long value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<TestOutcome, long> get_Stats();
    [CompilerGeneratedAttribute]
private void set_Stats(IDictionary`2<TestOutcome, long> value);
    public sealed virtual long get_Item(TestOutcome testOutcome);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; private set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TestSessionInfo other);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.ConnectionRole : Enum {
    public int value__;
    public static ConnectionRole Host;
    public static ConnectionRole Client;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Constants : object {
    public static string InProcDataCollectionRunSettingsName;
    public static string InProcDataCollectorSettingName;
    public static string InProcDataCollectorsSettingName;
    public static string BlameCollectDumpKey;
    internal static string BlameCollectMonitorPostMortemDebuggerKey;
    public static string BlameCollectHangDumpKey;
    public static string CollectDumpOnTestSessionHang;
    public static string DataCollectionRunSettingsName;
    public static string LoggerRunSettingsName;
    public static string LoggersSettingName;
    public static string LoggerSettingName;
    public static string LoggerFriendlyName;
    public static string LoggerFriendlyNameLower;
    public static string LoggerUriName;
    public static string LoggerAssemblyQualifiedName;
    public static string LoggerAssemblyQualifiedNameLower;
    public static string LoggerCodeBase;
    public static string LoggerCodeBaseLower;
    public static string LoggerEnabledName;
    public static string LoggerConfigurationName;
    public static string LoggerConfigurationNameLower;
    public static string TreatNoTestsAsError;
    public static string RunConfigurationSettingsName;
    public static string UnspecifiedAdapterPath;
    public static string DataCollectorsSettingName;
    public static string RunSettingsName;
    public static string DataCollectorSettingName;
    public static string TestRunParametersName;
    public static string UnitTestExtensionType;
    public static string TraceLogMaxFileSizeInKB;
    public static string EmptyRunSettings;
    public static Architecture DefaultPlatform;
    public static FrameworkVersion DefaultFramework;
    public static int DefaultCpuCount;
    public static long DefaultBatchSize;
    public static ProtocolConfig DefaultProtocolConfig;
    public static int MinimumProtocolVersionWithDebugSupport;
    public static int MinimumProtocolVersionWithCancelDiscoveryEventHandlerSupport;
    public static string ResultsDirectoryName;
    public static string DefaultResultsDirectory;
    public static bool DefaultTreatTestAdapterErrorsAsWarnings;
    [CLSCompliantAttribute("False")]
public static PlatformApartmentState DefaultExecutionThreadApartmentState;
    public static string TargetFrameworkAttributeFullName;
    public static string DotNetFrameWorkStringPrefix;
    public static string DotNetFramework35;
    public static string DotNetFramework40;
    public static string DotNetFramework45;
    public static string DotNetFramework451;
    public static string DotNetFramework46;
    public static string DotNetFrameworkCore10;
    public static string DotNetFrameworkUap10;
    public static string TargetFrameworkName;
    private static Constants();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomKeyValueConverter : TypeConverter {
    [NullableAttribute("1")]
private DataContractJsonSerializer _serializer;
    [NullableContextAttribute("1")]
public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.CustomStringArrayConverter : TypeConverter {
    private DataContractJsonSerializer _serializer;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    [NullableContextAttribute("2")]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    [NullableContextAttribute("2")]
public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.BasicTransferInformation : object {
    private string _description;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DataCollectionContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserToken>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestId <RequestId>k__BackingField;
    [NullableAttribute("1")]
public DataCollectionContext Context { get; private set; }
    public string Description { get; public set; }
    public object UserToken { get; public set; }
    public RequestId RequestId { get; public set; }
    protected internal bool PerformCleanup { get; }
    [NullableAttribute("1")]
protected internal string FileName { get; }
    [NullableContextAttribute("1")]
protected BasicTransferInformation(DataCollectionContext context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DataCollectionContext get_Context();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void set_Context(DataCollectionContext value);
    public string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public object get_UserToken();
    [CompilerGeneratedAttribute]
public void set_UserToken(object value);
    [CompilerGeneratedAttribute]
public RequestId get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(RequestId value);
    protected internal abstract virtual bool get_PerformCleanup();
    [NullableContextAttribute("1")]
protected internal abstract virtual string get_FileName();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionContext : object {
    [CompilerGeneratedAttribute]
private TestCase <TestCase>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private SessionId <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private TestExecId <TestExecId>k__BackingField;
    private int _hashCode;
    [DataMemberAttribute]
public TestCase TestCase { get; private set; }
    [NullableAttribute("1")]
[DataMemberAttribute]
public SessionId SessionId { get; }
    [DataMemberAttribute]
public TestExecId TestExecId { get; }
    [DataMemberAttribute]
[MemberNotNullWhenAttribute("True", "TestExecId")]
public bool HasTestCase { get; }
    public DataCollectionContext(TestCase testCase);
    [NullableContextAttribute("1")]
protected internal DataCollectionContext(SessionId sessionId);
    [NullableContextAttribute("1")]
protected internal DataCollectionContext(SessionId sessionId, TestExecId testExecId);
    [NullableContextAttribute("1")]
protected internal DataCollectionContext(SessionId sessionId, TestCase testCase);
    [CompilerGeneratedAttribute]
public TestCase get_TestCase();
    [CompilerGeneratedAttribute]
private void set_TestCase(TestCase value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public SessionId get_SessionId();
    [CompilerGeneratedAttribute]
public TestExecId get_TestExecId();
    [MemberNotNullWhenAttribute("True", "TestExecId")]
public bool get_HasTestCase();
    public static bool op_Equality(DataCollectionContext context1, DataCollectionContext context2);
    public static bool op_Inequality(DataCollectionContext context1, DataCollectionContext context2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int ComputeHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext : object {
    [CompilerGeneratedAttribute]
private DataCollectionContext <SessionDataCollectionContext>k__BackingField;
    public DataCollectionContext SessionDataCollectionContext { get; private set; }
    public DataCollectionEnvironmentContext(DataCollectionContext sessionDataCollectionContext);
    public static DataCollectionEnvironmentContext CreateForLocalEnvironment();
    public static DataCollectionEnvironmentContext CreateForLocalEnvironment(DataCollectionContext sessionDataCollectionContext);
    [CompilerGeneratedAttribute]
public DataCollectionContext get_SessionDataCollectionContext();
    [CompilerGeneratedAttribute]
private void set_SessionDataCollectionContext(DataCollectionContext value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataCollectionContext <Context>k__BackingField;
    public DataCollectionContext Context { get; internal set; }
    protected DataCollectionEventArgs(DataCollectionContext context);
    [CompilerGeneratedAttribute]
public DataCollectionContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(DataCollectionContext value);
}
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents : object {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestHostLaunched(EventHandler`1<TestHostLaunchedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestHostLaunched(EventHandler`1<TestHostLaunchedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionStart(EventHandler`1<SessionStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SessionEnd(EventHandler`1<SessionEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseStart(EventHandler`1<TestCaseStartEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TestCaseEnd(EventHandler`1<TestCaseEndEventArgs> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger : object {
    public abstract virtual void LogError(DataCollectionContext context, string text);
    public void LogError(DataCollectionContext context, Exception exception);
    public abstract virtual void LogError(DataCollectionContext context, string text, Exception exception);
    public abstract virtual void LogWarning(DataCollectionContext context, string text);
    public virtual void LogException(DataCollectionContext context, Exception ex, DataCollectorMessageLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink : object {
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void add_SendFileCompleted(AsyncCompletedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public abstract virtual void remove_SendFileCompleted(AsyncCompletedEventHandler value);
    public void SendFileAsync(DataCollectionContext context, string path, bool deleteFile);
    public void SendFileAsync(DataCollectionContext context, string path, string description, bool deleteFile);
    public abstract virtual void SendFileAsync(FileTransferInformation fileTransferInformation);
}
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollector : object {
    [NullableContextAttribute("1")]
public abstract virtual void Initialize(XmlElement configurationElement, DataCollectionEvents events, DataCollectionSink dataSink, DataCollectionLogger logger, DataCollectionEnvironmentContext environmentContext);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorAttachmentProcessorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; private set; }
    public DataCollectorAttachmentProcessorAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorFriendlyNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    public string FriendlyName { get; private set; }
    public DataCollectorFriendlyNameAttribute(string friendlyName);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
private void set_FriendlyName(string value);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorMessageLevel : Enum {
    public int value__;
    public static DataCollectorMessageLevel Error;
    public static DataCollectorMessageLevel Warning;
    public static DataCollectorMessageLevel Info;
    public static DataCollectorMessageLevel Data;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectorTypeUriAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeUri>k__BackingField;
    public string TypeUri { get; private set; }
    public DataCollectorTypeUriAttribute(string typeUri);
    [CompilerGeneratedAttribute]
public string get_TypeUri();
    [CompilerGeneratedAttribute]
private void set_TypeUri(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileHelper : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<char, object> InvalidFileNameChars;
    private static Regex ReservedFileNamesRegex;
    private static FileHelper();
    public static bool IsValidFileName(string fileName, String& invalidCharacters);
    internal static bool IsReservedFileName(string fileName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.FileTransferInformation : BasicTransferInformation {
    private IFileHelper _fileHelper;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformCleanup>k__BackingField;
    public string Path { get; private set; }
    protected internal bool PerformCleanup { get; }
    protected internal string FileName { get; }
    public FileTransferInformation(DataCollectionContext context, string path, bool deleteFile);
    [CLSCompliantAttribute("False")]
public FileTransferInformation(DataCollectionContext context, string path, bool deleteFile, IFileHelper fileHelper);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
protected internal virtual bool get_PerformCleanup();
    protected internal virtual string get_FileName();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectionSink {
    public abstract virtual void SendData(DataCollectionContext dataCollectionContext, string key, string value);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachmentProcessor {
    public bool SupportsIncrementalProcessing { get; }
    public abstract virtual IEnumerable`1<Uri> GetExtensionUris();
    public abstract virtual bool get_SupportsIncrementalProcessing();
    public abstract virtual Task`1<ICollection`1<AttachmentSet>> ProcessAttachmentSetsAsync(XmlElement configurationElement, ICollection`1<AttachmentSet> attachments, IProgress`1<int> progressReporter, IMessageLogger logger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Interface is deprecated. Please use IDataCollectorAttachmentProcessor instead")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.IDataCollectorAttachments {
    public abstract virtual ICollection`1<AttachmentSet> HandleDataCollectionAttachmentSets(ICollection`1<AttachmentSet> dataCollectionAttachments);
    public abstract virtual Uri GetExtensionUri();
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.ITestExecutionEnvironmentSpecifier {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> GetTestExecutionEnvironmentVariables();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.RequestId : object {
    [NullableAttribute("1")]
public static RequestId Empty;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; private set; }
    internal RequestId(Guid id);
    private static RequestId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public sealed virtual bool Equals(RequestId other);
    public sealed virtual int CompareTo(RequestId other);
    public sealed virtual int CompareTo(object obj);
    public static bool op_Equality(RequestId left, RequestId right);
    public static bool op_Inequality(RequestId left, RequestId right);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionEndEventArgs : DataCollectionEventArgs {
    [NullableContextAttribute("1")]
public SessionEndEventArgs(DataCollectionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionId : object {
    [CompilerGeneratedAttribute]
private static SessionId <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [DataMemberAttribute]
public static SessionId Empty { get; }
    [DataMemberAttribute]
public Guid Id { get; }
    public SessionId(Guid id);
    private static SessionId();
    [CompilerGeneratedAttribute]
public static SessionId get_Empty();
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.SessionStartEventArgs : DataCollectionEventArgs {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, object> _properties;
    public SessionStartEventArgs(IDictionary`2<string, object> properties);
    public SessionStartEventArgs(DataCollectionContext context, IDictionary`2<string, object> properties);
    public IEnumerator`1<KeyValuePair`2<string, object>> GetProperties();
    [NullableContextAttribute("2")]
public T GetPropertyValue(string property);
    public object GetPropertyValue(string property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEndEventArgs : TestCaseEventArgs {
    [CompilerGeneratedAttribute]
private TestOutcome <TestOutcome>k__BackingField;
    [DataMemberAttribute]
public TestOutcome TestOutcome { get; private set; }
    public TestCaseEndEventArgs(TestCase testElement, TestOutcome testOutcome);
    public TestCaseEndEventArgs(DataCollectionContext context, TestCase testElement, TestOutcome testOutcome);
    internal TestCaseEndEventArgs(DataCollectionContext context, Guid testCaseId, string testCaseName, bool isChildTestCase);
    internal TestCaseEndEventArgs(DataCollectionContext context, Guid testCaseId, string testCaseName, bool isChildTestCase, TestOutcome testOutcome);
    [CompilerGeneratedAttribute]
public TestOutcome get_TestOutcome();
    [CompilerGeneratedAttribute]
private void set_TestOutcome(TestOutcome value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseEventArgs : DataCollectionEventArgs {
    [CompilerGeneratedAttribute]
private Guid <TestCaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChildTestCase>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TestCase <TestElement>k__BackingField;
    [DataMemberAttribute]
public Guid TestCaseId { get; private set; }
    [DataMemberAttribute]
public string TestCaseName { get; private set; }
    [DataMemberAttribute]
public bool IsChildTestCase { get; private set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public TestCase TestElement { get; internal set; }
    protected TestCaseEventArgs(DataCollectionContext context, Guid testCaseId, string testCaseName, bool isChildTestCase);
    protected TestCaseEventArgs(DataCollectionContext context, TestCase testElement);
    [CompilerGeneratedAttribute]
public Guid get_TestCaseId();
    [CompilerGeneratedAttribute]
private void set_TestCaseId(Guid value);
    [CompilerGeneratedAttribute]
public string get_TestCaseName();
    [CompilerGeneratedAttribute]
private void set_TestCaseName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsChildTestCase();
    [CompilerGeneratedAttribute]
private void set_IsChildTestCase(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TestCase get_TestElement();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_TestElement(TestCase value);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseFailureType : Enum {
    public int value__;
    public static TestCaseFailureType None;
    public static TestCaseFailureType Assertion;
    public static TestCaseFailureType UnhandledException;
    public static TestCaseFailureType UnexpectedException;
    public static TestCaseFailureType MissingException;
    public static TestCaseFailureType Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestCaseStartEventArgs : TestCaseEventArgs {
    public TestCaseStartEventArgs(TestCase testElement);
    public TestCaseStartEventArgs(DataCollectionContext context, TestCase testElement);
    internal TestCaseStartEventArgs(DataCollectionContext context, Guid testCaseId, string testCaseName, bool isChildTestCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestExecId : object {
    [CompilerGeneratedAttribute]
private static TestExecId <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [DataMemberAttribute]
public static TestExecId Empty { get; }
    [DataMemberAttribute]
public Guid Id { get; }
    public TestExecId(Guid id);
    private static TestExecId();
    [CompilerGeneratedAttribute]
public static TestExecId get_Empty();
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestHostLaunchedEventArgs : DataCollectionEventArgs {
    [CompilerGeneratedAttribute]
private int <TestHostProcessId>k__BackingField;
    public int TestHostProcessId { get; }
    [NullableContextAttribute("1")]
public TestHostLaunchedEventArgs(DataCollectionContext context, int processId);
    [CompilerGeneratedAttribute]
public int get_TestHostProcessId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.TestResultEventArgs : TestCaseEventArgs {
    [CompilerGeneratedAttribute]
private TestResult <TestResult>k__BackingField;
    [DataMemberAttribute]
public TestResult TestResult { get; private set; }
    public TestResultEventArgs(TestResult testResult);
    public TestResultEventArgs(DataCollectionContext context, TestResult testResult);
    internal TestResultEventArgs(DataCollectionContext context, Guid testCaseId, string testCaseName, bool isChildTestCase, TestResult testResult);
    [CompilerGeneratedAttribute]
public TestResult get_TestResult();
    [CompilerGeneratedAttribute]
private void set_TestResult(TestResult value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings : TestRunSettings {
    private string _dataCollectionRootName;
    private string _dataCollectionsName;
    private string _dataCollectorName;
    [CompilerGeneratedAttribute]
private Collection`1<DataCollectorSettings> <DataCollectorSettingsList>k__BackingField;
    public Collection`1<DataCollectorSettings> DataCollectorSettingsList { get; private set; }
    public bool IsCollectionEnabled { get; }
    public DataCollectionRunSettings(string dataCollectionRootName, string dataCollectionsName, string dataCollectorName);
    [CompilerGeneratedAttribute]
public Collection`1<DataCollectorSettings> get_DataCollectorSettingsList();
    [CompilerGeneratedAttribute]
private void set_DataCollectorSettingsList(Collection`1<DataCollectorSettings> value);
    public bool get_IsCollectionEnabled();
    public virtual XmlElement ToXml();
    public static DataCollectionRunSettings FromXml(XmlReader reader);
    public static DataCollectionRunSettings FromXml(XmlReader reader, string dataCollectionName, string dataCollectorsName, string dataCollectorName);
    public static DataCollectionRunSettings CreateDataCollectionRunSettings(XmlReader reader, string dataCollectionName, string dataCollectorsName, string dataCollectorName);
    internal static List`1<DataCollectorSettings> ReadListElementFromXml(XmlReader reader, string dataCollectorsName);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.InProcDataCollectionArgs {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseEndArgs : object {
    [CompilerGeneratedAttribute]
private TestOutcome <TestOutcome>k__BackingField;
    [CompilerGeneratedAttribute]
private DataCollectionContext <DataCollectionContext>k__BackingField;
    public TestOutcome TestOutcome { get; private set; }
    public DataCollectionContext DataCollectionContext { get; private set; }
    public TestCaseEndArgs(DataCollectionContext dataCollectionContext, TestOutcome outcome);
    [CompilerGeneratedAttribute]
public TestOutcome get_TestOutcome();
    [CompilerGeneratedAttribute]
private void set_TestOutcome(TestOutcome value);
    [CompilerGeneratedAttribute]
public DataCollectionContext get_DataCollectionContext();
    [CompilerGeneratedAttribute]
private void set_DataCollectionContext(DataCollectionContext value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestCaseStartArgs : object {
    [CompilerGeneratedAttribute]
private TestCase <TestCase>k__BackingField;
    public TestCase TestCase { get; private set; }
    public TestCaseStartArgs(TestCase testCase);
    [CompilerGeneratedAttribute]
public TestCase get_TestCase();
    [CompilerGeneratedAttribute]
private void set_TestCase(TestCase value);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionEndArgs : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollector.InProcDataCollector.TestSessionStartArgs : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, object> _properties;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    public string Configuration { get; public set; }
    public TestSessionStartArgs(IDictionary`2<string, object> properties);
    [NullableContextAttribute("1")]
public TestSessionStartArgs(string configuration);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    public IEnumerator`1<KeyValuePair`2<string, object>> GetProperties();
    public T GetPropertyValue(string property);
    [NullableContextAttribute("1")]
public object GetPropertyValue(string property);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectorSettings : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeBase>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <Configuration>k__BackingField;
    public Uri Uri { get; public set; }
    public string AssemblyQualifiedName { get; public set; }
    public string FriendlyName { get; public set; }
    public bool IsEnabled { get; public set; }
    public string CodeBase { get; public set; }
    public XmlElement Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_AssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_CodeBase();
    [CompilerGeneratedAttribute]
public void set_CodeBase(string value);
    [CompilerGeneratedAttribute]
public XmlElement get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(XmlElement value);
    [NullableContextAttribute("1")]
public XmlElement ToXml();
    [NullableContextAttribute("1")]
public XmlElement ToXml(string dataCollectorName);
    [NullableContextAttribute("1")]
internal static DataCollectorSettings FromXml(XmlReader reader);
    [NullableContextAttribute("1")]
private static void AppendAttribute(XmlDocument doc, XmlElement owner, string attributeName, string attributeValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DefaultExecutorUriAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ExecutorUri>k__BackingField;
    public string ExecutorUri { get; private set; }
    public DefaultExecutorUriAttribute(string executorUri);
    [CompilerGeneratedAttribute]
public string get_ExecutorUri();
    [CompilerGeneratedAttribute]
private void set_ExecutorUri(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.DefaultLoggerParameterNames : object {
    public static string TestRunDirectory;
    public static string TargetFramework;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaNavigationData : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLineNumber>k__BackingField;
    public string FileName { get; public set; }
    public int MinLineNumber { get; public set; }
    public int MaxLineNumber { get; public set; }
    public DiaNavigationData(string fileName, int minLineNumber, int maxLineNumber);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MinLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MinLineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MaxLineNumber(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DiaSession : object {
    private static Char[] TestNameStripChars;
    private ISymbolReader _symbolReader;
    private bool _isDisposed;
    public DiaSession(string binaryPath);
    public DiaSession(string binaryPath, string searchPath);
    internal DiaSession(string binaryPath, string searchPath, ISymbolReader symbolReader);
    private static DiaSession();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public DiaNavigationData GetNavigationData(string declaringTypeName, string methodName);
    public sealed virtual INavigationData GetNavigationDataForMethod(string declaringTypeName, string methodName);
    private static ISymbolReader GetSymbolReader(string binaryPath);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.DirectoryBasedTestDiscovererAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.EditorAttachDebuggerPayload : object {
    [CompilerGeneratedAttribute]
private int <ProcessID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    [DataMemberAttribute]
public int ProcessID { get; public set; }
    [DataMemberAttribute]
public string TargetFramework { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ICollection`1<string> Sources { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ProcessID();
    [CompilerGeneratedAttribute]
public void set_ProcessID(int value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(ICollection`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.ExtensionUriAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ExtensionUri>k__BackingField;
    public string ExtensionUri { get; private set; }
    public ExtensionUriAttribute(string extensionUri);
    [CompilerGeneratedAttribute]
public string get_ExtensionUri();
    [CompilerGeneratedAttribute]
private void set_ExtensionUri(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.FileExtensionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    public string FileExtension { get; private set; }
    public FileExtensionAttribute(string fileExtension);
    [CompilerGeneratedAttribute]
public string get_FileExtension();
    [CompilerGeneratedAttribute]
private void set_FileExtension(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework : object {
    [CompilerGeneratedAttribute]
private static Framework <DefaultFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FrameworkName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public static Framework DefaultFramework { get; }
    public string Name { get; private set; }
    public string FrameworkName { get; private set; }
    [NullableAttribute("2")]
public string ShortName { get; private set; }
    public string Version { get; private set; }
    private static Framework();
    [CompilerGeneratedAttribute]
public static Framework get_DefaultFramework();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FrameworkName();
    [CompilerGeneratedAttribute]
private void set_FrameworkName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ShortName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [NullableContextAttribute("2")]
public static Framework FromString(string frameworkString);
    public virtual string ToString();
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.FrameworkVersion : Enum {
    public int value__;
    public static FrameworkVersion None;
    public static FrameworkVersion Framework35;
    public static FrameworkVersion Framework40;
    public static FrameworkVersion Framework45;
    public static FrameworkVersion FrameworkCore10;
    public static FrameworkVersion FrameworkUap10;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.FriendlyNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    public string FriendlyName { get; private set; }
    public FriendlyNameAttribute(string friendlyName);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
private void set_FriendlyName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.HostProviderEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrroCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    public string Data { get; public set; }
    public int ErrroCode { get; public set; }
    public int ProcessId { get; public set; }
    public HostProviderEventArgs(string message);
    public HostProviderEventArgs(string message, int errorCode, int processId);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public int get_ErrroCode();
    [CompilerGeneratedAttribute]
public void set_ErrroCode(int value);
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider {
    public bool Shared { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_HostLaunched(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HostLaunched(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_HostExited(EventHandler`1<HostProviderEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HostExited(EventHandler`1<HostProviderEventArgs> value);
    public abstract virtual bool get_Shared();
    public abstract virtual void Initialize(IMessageLogger logger, string runsettingsXml);
    [NullableContextAttribute("2")]
public abstract virtual bool CanExecuteCurrentRunConfiguration(string runsettingsXml);
    public abstract virtual void SetCustomLauncher(ITestHostLauncher customLauncher);
    public abstract virtual TestHostConnectionInfo GetTestHostConnectionInfo();
    public abstract virtual Task`1<bool> LaunchTestHostAsync(TestProcessStartInfo testHostStartInfo, CancellationToken cancellationToken);
    public abstract virtual TestProcessStartInfo GetTestHostProcessStartInfo(IEnumerable`1<string> sources, IDictionary`2<string, string> environmentVariables, TestRunnerConnectionInfo connectionInfo);
    public abstract virtual IEnumerable`1<string> GetTestPlatformExtensions(IEnumerable`1<string> sources, IEnumerable`1<string> extensions);
    public abstract virtual IEnumerable`1<string> GetTestSources(IEnumerable`1<string> sources);
    public abstract virtual Task CleanTestHostAsync(CancellationToken cancellationToken);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider2 {
    public abstract virtual bool AttachDebuggerToTestHost();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue {
    public object Value { get; }
    public abstract virtual object get_Value();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.InProcDataCollector.InProcDataCollection {
    public abstract virtual void Initialize(IDataCollectionSink dataCollectionSink);
    public abstract virtual void TestSessionStart(TestSessionStartArgs testSessionStartArgs);
    public abstract virtual void TestCaseStart(TestCaseStartArgs testCaseStartArgs);
    public abstract virtual void TestCaseEnd(TestCaseEndArgs testCaseEndArgs);
    public abstract virtual void TestSessionEnd(TestSessionEndArgs testSessionEndArgs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAttachmentProcessor>k__BackingField;
    [DataMemberAttribute]
public Uri Uri { get; private set; }
    [DataMemberAttribute]
public string FriendlyName { get; private set; }
    [DataMemberAttribute]
public string AssemblyQualifiedName { get; private set; }
    [DataMemberAttribute]
public string FilePath { get; private set; }
    [DataMemberAttribute]
public bool HasAttachmentProcessor { get; private set; }
    public InvokedDataCollector(Uri uri, string friendlyName, string assemblyQualifiedName, string filePath, bool hasAttachmentProcessor);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
private void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
private void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
private void set_AssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
private void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public bool get_HasAttachmentProcessor();
    [CompilerGeneratedAttribute]
private void set_HasAttachmentProcessor(bool value);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(InvokedDataCollector other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryInitializer {
    public abstract virtual void Initialize(ITelemetryReporter telemetryReporter);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.ITelemetryReporter {
    public abstract virtual void Report(TelemetryEvent telemetryEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.LazyPropertyValue`1 : object {
    private Func`1<T> _getValue;
    [NullableAttribute("2")]
private T _value;
    private bool _isValueCreated;
    public T Value { get; }
    private object Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue.Value { get; }
    public LazyPropertyValue`1(Func`1<T> getValue);
    public T get_Value();
    private sealed virtual override object Microsoft.VisualStudio.TestPlatform.ObjectModel.ILazyPropertyValue.get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerRunSettings : TestRunSettings {
    private string _loggerRunSettingsName;
    private string _loggersSettingName;
    private string _loggerSettingName;
    [CompilerGeneratedAttribute]
private Collection`1<LoggerSettings> <LoggerSettingsList>k__BackingField;
    public Collection`1<LoggerSettings> LoggerSettingsList { get; private set; }
    [CompilerGeneratedAttribute]
public Collection`1<LoggerSettings> get_LoggerSettingsList();
    [CompilerGeneratedAttribute]
private void set_LoggerSettingsList(Collection`1<LoggerSettings> value);
    public virtual XmlElement ToXml();
    internal static LoggerRunSettings FromXml(XmlReader reader);
    private static LoggerRunSettings FromXml(XmlReader reader, string loggersSettingName, string loggerSettingName);
    private static List`1<LoggerSettings> ReadListElementFromXml(XmlReader reader, string loggerSettingName);
    public int GetExistingLoggerIndex(LoggerSettings loggerSettings);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.LoggerSettings : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeBase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlElement <Configuration>k__BackingField;
    public Uri Uri { get; public set; }
    public string AssemblyQualifiedName { get; public set; }
    public string CodeBase { get; public set; }
    public string FriendlyName { get; public set; }
    public bool IsEnabled { get; public set; }
    public XmlElement Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public string get_AssemblyQualifiedName();
    [CompilerGeneratedAttribute]
public void set_AssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public string get_CodeBase();
    [CompilerGeneratedAttribute]
public void set_CodeBase(string value);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public XmlElement get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(XmlElement value);
    [NullableContextAttribute("1")]
public XmlElement ToXml();
    [NullableContextAttribute("1")]
public XmlElement ToXml(string loggerName);
    [NullableContextAttribute("1")]
private static void AppendAttribute(XmlDocument doc, XmlElement owner, string attributeName, string attributeValue);
    [NullableContextAttribute("1")]
internal static LoggerSettings FromXml(XmlReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.DataCollectionMessageEventArgs : TestRunMessageEventArgs {
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TestCaseId>k__BackingField;
    [DataMemberAttribute]
public string FriendlyName { get; public set; }
    [DataMemberAttribute]
public Uri Uri { get; public set; }
    [DataMemberAttribute]
public Guid TestCaseId { get; public set; }
    [NullableContextAttribute("1")]
public DataCollectionMessageEventArgs(TestMessageLevel level, string message);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public Guid get_TestCaseId();
    [CompilerGeneratedAttribute]
public void set_TestCaseId(Guid value);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.IMessageLogger {
    public abstract virtual void SendMessage(TestMessageLevel testMessageLevel, string message);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel : Enum {
    public int value__;
    public static TestMessageLevel Informational;
    public static TestMessageLevel Warning;
    public static TestMessageLevel Error;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestResultEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private TestResult <Result>k__BackingField;
    public TestResult Result { get; private set; }
    public TestResultEventArgs(TestResult result);
    [CompilerGeneratedAttribute]
public TestResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(TestResult value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private TestMessageLevel <Level>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public TestMessageLevel Level { get; public set; }
    public TestRunMessageEventArgs(TestMessageLevel level, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public TestMessageLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(TestMessageLevel value);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestRunStartedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    public int ProcessId { get; private set; }
    public TestRunStartedEventArgs(int processId);
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
private void set_ProcessId(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[CoClassAttribute("Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.DiaSourceClass")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.DiaSource {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("E6756135-1E65-4D17-8576-610761398C3C")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.DiaSourceClass : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.DiaSourceObject : object {
    public static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, int dwFlags);
    [NullableContextAttribute("2")]
public static IDiaDataSource GetDiaSourceObject();
    internal static object DllGetClassObject(Guid rclsid, Guid riid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.FullSymbolReader : object {
    private bool _isDisposed;
    [NullableAttribute("2")]
private IDiaDataSource _source;
    [NullableAttribute("2")]
private IDiaSession _session;
    private Dictionary`2<string, IDiaSymbol> _typeSymbols;
    private Dictionary`2<string, Dictionary`2<string, IDiaSymbol>> _methodSymbols;
    public sealed virtual void Dispose();
    public sealed virtual void CacheSymbols(string binaryPath, string searchPath);
    public sealed virtual INavigationData GetNavigationData(string declaringTypeName, string methodName);
    private bool OpenSession(string filename, string searchPath);
    private DiaNavigationData GetSymbolNavigationData(IDiaSymbol symbol);
    private void PopulateCacheForTypeAndMethodSymbols();
    private IDiaSymbol GetTypeSymbol(string typeName, SymTagEnum symTag);
    private IDiaSymbol GetMethodSymbol(IDiaSymbol typeSymbol, string methodName);
    private static void UpdateMethodSymbolCache(string methodName, IDiaSymbol methodSymbol, Dictionary`2<string, IDiaSymbol> methodSymbolCache);
    private static void ReleaseComObject(T& obj);
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.Guids : object {
    internal static Guid CLSID_DiaSource;
    private static Guids();
}
internal static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.HResult : object {
    public static bool Failed(int hr);
    public static bool Succeeded(int hr);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("79F1BB5F-B66E-48E5-B6A9-1545C323CA3D")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaDataSource {
    public abstract virtual int Stub1();
    public abstract virtual int Stub2();
    public abstract virtual int Stub3();
    public abstract virtual int LoadDataForExe(string executable, string searchPath, IntPtr callback);
    public abstract virtual int Stub5();
    public abstract virtual int OpenSession(IDiaSession& session);
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("FE30E878-54AC-44f1-81BA-39DE940F6052")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaEnumLineNumbers {
    public abstract virtual int Stub1();
    public abstract virtual int GetCount(UInt32& count);
    public abstract virtual int GetItem(UInt32 index, IDiaLineNumber& line);
    public abstract virtual int GetNext(UInt32 celt, IDiaLineNumber& rgelt, UInt32& pceltFetched);
    public abstract virtual int Stub5();
    public abstract virtual int Stub6();
    public abstract virtual int Stub7();
}
[NullableContextAttribute("1")]
[GuidAttribute("CAB72C48-443B-48F5-9B0B-42F0820AB29A")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaEnumSymbols {
    public abstract virtual int Stub1();
    public abstract virtual int GetCount(UInt32& count);
    public abstract virtual int GetItem(UInt32 index, IDiaSymbol& symbol);
    public abstract virtual int GetNext(UInt32 index, IDiaSymbol& symbol, UInt32& pceltFetched);
    public abstract virtual int Stub5();
    public abstract virtual int Stub6();
    public abstract virtual int Stub7();
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("B388EB14-BE4D-421d-A8A1-6CF7AB057086")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaLineNumber {
    public abstract virtual int Stub1();
    public abstract virtual int GetSourceFile(IDiaSourceFile& file);
    public abstract virtual int GetLineNumber(UInt32& line);
    public abstract virtual int GetLineNumberEnd(UInt32& line);
    public abstract virtual int GetColumnNumber(UInt32& line);
    public abstract virtual int Stub6();
    public abstract virtual int Stub7();
    public abstract virtual int Stub8();
    public abstract virtual int Stub9();
    public abstract virtual int Stub10();
    public abstract virtual int Stub11();
    public abstract virtual int Stub12();
    public abstract virtual int Stub13();
    public abstract virtual int Stub14();
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("2F609EE1-D1C8-4E24-8288-3326BADCD211")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSession {
    public abstract virtual int Stub1();
    public abstract virtual int Stub2();
    public abstract virtual int GetGlobalScope(IDiaSymbol& diaSymbol);
    public abstract virtual int Stub4();
    public abstract virtual int Stub5();
    public abstract virtual int Stub6();
    public abstract virtual int Stub7();
    public abstract virtual int Stub8();
    public abstract virtual int Stub9();
    public abstract virtual int Stub10();
    public abstract virtual int Stub11();
    public abstract virtual int Stub12();
    public abstract virtual int Stub13();
    public abstract virtual int FindSymbolByToken(UInt32 token, SymTagEnum tag, IDiaSymbol& symbol);
    public abstract virtual int Stub15();
    public abstract virtual int Stub16();
    public abstract virtual int Stub17();
    public abstract virtual int Stub18();
    public abstract virtual int Stub19();
    public abstract virtual int Stub20();
    public abstract virtual int Stub21();
    public abstract virtual int FindLinesByAddress(UInt32 section, UInt32 offset, UInt32 length, IDiaEnumLineNumbers& enumerator);
    public abstract virtual int Stub23();
    public abstract virtual int Stub24();
    public abstract virtual int Stub25();
    public abstract virtual int Stub26();
    public abstract virtual int Stub27();
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("A2EF5353-F5A8-4eb3-90D2-CB526ACB3CDD")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSourceFile {
    public abstract virtual int Stub1();
    public abstract virtual int GetFilename(String& filename);
    public abstract virtual int Stub3();
    public abstract virtual int Stub4();
    public abstract virtual int Stub5();
}
[NullableContextAttribute("1")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("cb787b2f-bd6c-4635-ba52-933126bd2dcd")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.IDiaSymbol {
    public abstract virtual int Stub1();
    public abstract virtual int GetSymTag(SymTagEnum& tag);
    public abstract virtual int GetName(String& name);
    public abstract virtual int Stub4();
    public abstract virtual int Stub5();
    public abstract virtual int Stub6();
    public abstract virtual int Stub7();
    public abstract virtual int Stub8();
    public abstract virtual int GetAddressSection(UInt32& section);
    public abstract virtual int GetAddressOffset(UInt32& offset);
    public abstract virtual int Stub11();
    public abstract virtual int Stub12();
    public abstract virtual int Stub13();
    public abstract virtual int Stub14();
    public abstract virtual int GetLength(Int64& length);
    public abstract virtual int Stub16();
    public abstract virtual int Stub17();
    public abstract virtual int Stub18();
    public abstract virtual int Stub19();
    public abstract virtual int Stub20();
    public abstract virtual int Stub21();
    public abstract virtual int Stub22();
    public abstract virtual int Stub23();
    public abstract virtual int Stub24();
    public abstract virtual int Stub25();
    public abstract virtual int Stub26();
    public abstract virtual int Stub27();
    public abstract virtual int Stub28();
    public abstract virtual int Stub29();
    public abstract virtual int Stub30();
    public abstract virtual int Stub31();
    public abstract virtual int Stub32();
    public abstract virtual int Stub33();
    public abstract virtual int Stub34();
    public abstract virtual int Stub35();
    public abstract virtual int Stub36();
    public abstract virtual int Stub37();
    public abstract virtual int Stub38();
    public abstract virtual int Stub39();
    public abstract virtual int Stub40();
    public abstract virtual int Stub41();
    public abstract virtual int Stub42();
    public abstract virtual int Stub43();
    public abstract virtual int Stub44();
    public abstract virtual int Stub45();
    public abstract virtual int Stub46();
    public abstract virtual int Stub47();
    public abstract virtual int Stub48();
    public abstract virtual int Stub49();
    public abstract virtual int Stub50();
    public abstract virtual int Stub51();
    public abstract virtual int Stub52();
    public abstract virtual int Stub53();
    public abstract virtual int Stub54();
    public abstract virtual int Stub55();
    public abstract virtual int Stub56();
    public abstract virtual int Stub57();
    public abstract virtual int Stub58();
    public abstract virtual int Stub59();
    public abstract virtual int Stub60();
    public abstract virtual int Stub61();
    public abstract virtual int Stub62();
    public abstract virtual int Stub63();
    public abstract virtual int Stub64();
    public abstract virtual int Stub65();
    public abstract virtual int Stub66();
    public abstract virtual int Stub67();
    public abstract virtual int Stub68();
    public abstract virtual int Stub69();
    public abstract virtual int Stub70();
    public abstract virtual int Stub71();
    public abstract virtual int Stub72();
    public abstract virtual int Stub73();
    public abstract virtual int Stub74();
    public abstract virtual int Stub75();
    public abstract virtual int Stub76();
    public abstract virtual int Stub77();
    public abstract virtual int Stub78();
    public abstract virtual int Stub79();
    public abstract virtual int Stub80();
    public abstract virtual int Stub81();
    public abstract virtual int Stub82();
    public abstract virtual int FindChildren(SymTagEnum tag, string str, int flags, IDiaEnumSymbols& symbol);
    public abstract virtual int Stub84();
    public abstract virtual int Stub85();
    public abstract virtual int Stub86();
    public abstract virtual int Stub87();
    public abstract virtual int Stub88();
    public abstract virtual int Stub89();
    public abstract virtual int Stub90();
    public abstract virtual int Stub91();
    public abstract virtual int Stub92();
    public abstract virtual int Stub93();
    public abstract virtual int Stub94();
    public abstract virtual int Stub95();
    public abstract virtual int Stub96();
    public abstract virtual int Stub97();
    public abstract virtual int Stub98();
    public abstract virtual int Stub99();
    public abstract virtual int Stub100();
    public abstract virtual int Stub101();
    public abstract virtual int Stub102();
    public abstract virtual int Stub103();
    public abstract virtual int Stub104();
    public abstract virtual int Stub105();
    public abstract virtual int Stub106();
    public abstract virtual int Stub107();
    public abstract virtual int Stub108();
    public abstract virtual int Stub109();
    public abstract virtual int Stub110();
    public abstract virtual int Stub111();
    public abstract virtual int Stub112();
    public abstract virtual int Stub113();
    public abstract virtual int Stub114();
    public abstract virtual int Stub115();
    public abstract virtual int Stub116();
    public abstract virtual int Stub117();
    public abstract virtual int Stub118();
    public abstract virtual int Stub119();
    public abstract virtual int Stub120();
    public abstract virtual int Stub121();
    public abstract virtual int Stub122();
    public abstract virtual int Stub123();
    public abstract virtual int Stub124();
    public abstract virtual int Stub125();
    public abstract virtual int Stub126();
    public abstract virtual int Stub127();
    public abstract virtual int Stub128();
    public abstract virtual int Stub129();
    public abstract virtual int Stub130();
    public abstract virtual int Stub131();
    public abstract virtual int Stub132();
    public abstract virtual int Stub133();
    public abstract virtual int Stub134();
    public abstract virtual int Stub135();
    public abstract virtual int Stub136();
    public abstract virtual int Stub137();
    public abstract virtual int Stub138();
    public abstract virtual int Stub139();
    public abstract virtual int Stub140();
    public abstract virtual int Stub141();
    public abstract virtual int Stub142();
    public abstract virtual int Stub143();
    public abstract virtual int Stub144();
    public abstract virtual int Stub145();
    public abstract virtual int Stub146();
    public abstract virtual int Stub147();
    public abstract virtual int Stub148();
    public abstract virtual int Stub149();
    public abstract virtual int Stub150();
    public abstract virtual int Stub151();
    public abstract virtual int Stub152();
    public abstract virtual int Stub153();
    public abstract virtual int Stub154();
    public abstract virtual int Stub155();
}
[NullableContextAttribute("2")]
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationData {
    public string FileName { get; public set; }
    public int MinLineNumber { get; public set; }
    public int MaxLineNumber { get; public set; }
    public abstract virtual string get_FileName();
    public abstract virtual void set_FileName(string value);
    public abstract virtual int get_MinLineNumber();
    public abstract virtual void set_MinLineNumber(int value);
    public abstract virtual int get_MaxLineNumber();
    public abstract virtual void set_MaxLineNumber(int value);
}
public interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.INavigationSession {
    [NullableContextAttribute("1")]
public abstract virtual INavigationData GetNavigationDataForMethod(string declaringTypeName, string methodName);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.ISymbolReader {
    public abstract virtual void CacheSymbols(string binaryPath, string searchPath);
    public abstract virtual INavigationData GetNavigationData(string declaringTypeName, string methodName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortablePdbReader : object {
    private static PropertyInfo MethodInfoMethodTokenProperty;
    private MetadataReaderProvider _provider;
    private MetadataReader _reader;
    public PortablePdbReader(Stream stream);
    public PortablePdbReader(MetadataReaderProvider metadataReaderProvider);
    private static PortablePdbReader();
    public sealed virtual void Dispose();
    [NullableContextAttribute("2")]
public DiaNavigationData GetDiaNavigationData(MethodInfo methodInfo);
    internal static bool IsPortable(Stream stream);
    internal static MethodDebugInformationHandle GetMethodDebugInformationHandle(MethodInfo methodInfo);
    private static void GetMethodMinAndMaxLineNumber(MethodDebugInformation methodDebugDefinition, Int32& minLineNumber, Int32& maxLineNumber);
    [NullableContextAttribute("2")]
private DiaNavigationData GetDiaNavigationData(MethodDebugInformationHandle handle);
    private string GetMethodFileName(MethodDebugInformation methodDebugDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.PortableSymbolReader : object {
    private Dictionary`2<string, Dictionary`2<string, DiaNavigationData>> _methodsNavigationDataForType;
    public sealed virtual void CacheSymbols(string binaryPath, string searchPath);
    public sealed virtual void Dispose();
    public sealed virtual INavigationData GetNavigationData(string declaringTypeName, string methodName);
    private void PopulateCacheForTypeAndMethodSymbols(string binaryPath);
    private static PortablePdbReader CreatePortablePdbReaderFromPEData(string binaryPath);
    private static PortablePdbReader CreatePortablePdbReaderFromExistingPdbFile(string pdbFilePath);
}
internal enum Microsoft.VisualStudio.TestPlatform.ObjectModel.Navigation.SymTagEnum : Enum {
    public UInt32 value__;
    public static SymTagEnum SymTagNull;
    public static SymTagEnum SymTagExe;
    public static SymTagEnum SymTagCompiland;
    public static SymTagEnum SymTagCompilandDetails;
    public static SymTagEnum SymTagCompilandEnv;
    public static SymTagEnum SymTagFunction;
    public static SymTagEnum SymTagBlock;
    public static SymTagEnum SymTagData;
    public static SymTagEnum SymTagAnnotation;
    public static SymTagEnum SymTagLabel;
    public static SymTagEnum SymTagPublicSymbol;
    public static SymTagEnum SymTagUDT;
    public static SymTagEnum SymTagEnum;
    public static SymTagEnum SymTagFunctionType;
    public static SymTagEnum SymTagPointerType;
    public static SymTagEnum SymTagArrayType;
    public static SymTagEnum SymTagBaseType;
    public static SymTagEnum SymTagTypedef;
    public static SymTagEnum SymTagBaseClass;
    public static SymTagEnum SymTagFriend;
    public static SymTagEnum SymTagFunctionArgType;
    public static SymTagEnum SymTagFuncDebugStart;
    public static SymTagEnum SymTagFuncDebugEnd;
    public static SymTagEnum SymTagUsingNamespace;
    public static SymTagEnum SymTagVTableShape;
    public static SymTagEnum SymTagVTable;
    public static SymTagEnum SymTagCustom;
    public static SymTagEnum SymTagThunk;
    public static SymTagEnum SymTagCustomType;
    public static SymTagEnum SymTagManagedType;
    public static SymTagEnum SymTagDimension;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.ProcessExitedException : TestPlatformException {
    public ProcessExitedException(string message);
    public ProcessExitedException(string message, Exception inner);
}
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.RegistryFreeActivationContext : object {
    private IntPtr _cookie;
    private IntPtr _hActCtx;
    private bool _disposed;
    [NullableAttribute("1")]
private string _manifestFilePath;
    [NullableContextAttribute("1")]
public RegistryFreeActivationContext(string manifest);
    protected virtual override void Finalize();
    public void ActivateContext();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void DeactivateContext();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.CommonResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string CannotBeNullOrEmpty { get; }
    public static string DisplayChosenSettings { get; }
    public static string MalformedRunSettingsFile { get; }
    public static string NoMatchingSourcesFound { get; }
    public static string SourceIncompatible { get; }
    internal static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_CannotBeNullOrEmpty();
    public static string get_DisplayChosenSettings();
    public static string get_MalformedRunSettingsFile();
    public static string get_NoMatchingSourcesFound();
    public static string get_SourceIncompatible();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BasicTestResultFormat { get; }
    internal static string Common_CannotBeNullOrEmpty { get; }
    internal static string Common_FileNotExist { get; }
    internal static string Common_ObjectMustBeOfType { get; }
    internal static string Common_TestOutcomeAborted { get; }
    internal static string Common_TestOutcomeCompleted { get; }
    internal static string Common_TestOutcomeDisconnected { get; }
    internal static string Common_TestOutcomeError { get; }
    internal static string Common_TestOutcomeFailed { get; }
    internal static string Common_TestOutcomeInconclusive { get; }
    internal static string Common_TestOutcomeInProgress { get; }
    internal static string Common_TestOutcomeNotExecuted { get; }
    internal static string Common_TestOutcomeNotRunnable { get; }
    internal static string Common_TestOutcomePassed { get; }
    internal static string Common_TestOutcomePassedButRunAborted { get; }
    internal static string Common_TestOutcomePending { get; }
    internal static string Common_TestOutcomeTimeout { get; }
    internal static string Common_TestOutcomeWarning { get; }
    internal static string ConverterNotSupported { get; }
    internal static string CouldNotFindXmlNode { get; }
    internal static string DataCollectionSink_CanNotReadStream { get; }
    internal static string DataCollectionSink_InvalidFileNameCharacters { get; }
    internal static string DataCollectionSink_ReservedFilenameUsed { get; }
    internal static string Exception_RegisteredTestPropertyHasDifferentValueType { get; }
    internal static string FailedToCreateDiaSession { get; }
    internal static string FailedToLoadMsDia { get; }
    internal static string InvalidDataCollectorUriInSettings { get; }
    internal static string InvalidRunSettingsRootNode { get; }
    internal static string InvalidSettingsIncorrectValue { get; }
    internal static string InvalidSettingsXmlAttribute { get; }
    internal static string InvalidSettingsXmlElement { get; }
    internal static string InvalidUriInSettings { get; }
    internal static string MissingDataCollectorAttributes { get; }
    internal static string MissingLoggerAttributes { get; }
    internal static string NoTestCaseFilterForSpecificTests { get; }
    internal static string NotificationFrequencyIsNotPositive { get; }
    internal static string NotificationTimeoutIsZero { get; }
    internal static string NullString { get; }
    internal static string SolutionDirectoryNotExists { get; }
    internal static string TestCaseFilterEscapeException { get; }
    internal static string TestCasePropertyColumnNumberLabel { get; }
    internal static string TestCasePropertyExecutorUriLabel { get; }
    internal static string TestCasePropertyFilePathLabel { get; }
    internal static string TestCasePropertyFullyQualifiedNameLabel { get; }
    internal static string TestCasePropertyIdLabel { get; }
    internal static string TestCasePropertyLineNumberLabel { get; }
    internal static string TestCasePropertyNameLabel { get; }
    internal static string TestCasePropertySourceLabel { get; }
    internal static string TestCasePropertyTraitsLabel { get; }
    internal static string TestFailureMessageFormat { get; }
    internal static string TestFailureStackTraceFormat { get; }
    internal static string TestOutcomeFailed { get; }
    internal static string TestOutcomeNone { get; }
    internal static string TestOutcomeNotFound { get; }
    internal static string TestOutcomePassed { get; }
    internal static string TestOutcomeSkipped { get; }
    internal static string TestResultMessageFormat { get; }
    internal static string TestResultPropertyComputerNameLabel { get; }
    internal static string TestResultPropertyDisplayNameLabel { get; }
    internal static string TestResultPropertyDurationLabel { get; }
    internal static string TestResultPropertyEndTimeLabel { get; }
    internal static string TestResultPropertyErrorColumnNumberLabel { get; }
    internal static string TestResultPropertyErrorMessageLabel { get; }
    internal static string TestResultPropertyErrorStackTraceLabel { get; }
    internal static string TestResultPropertyOutcomeLabel { get; }
    internal static string TestResultPropertyStartTimeLabel { get; }
    internal static string TestResultTextMessagesFormat { get; }
    internal static string UnexpectedTypeOfProperty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BasicTestResultFormat();
    internal static string get_Common_CannotBeNullOrEmpty();
    internal static string get_Common_FileNotExist();
    internal static string get_Common_ObjectMustBeOfType();
    internal static string get_Common_TestOutcomeAborted();
    internal static string get_Common_TestOutcomeCompleted();
    internal static string get_Common_TestOutcomeDisconnected();
    internal static string get_Common_TestOutcomeError();
    internal static string get_Common_TestOutcomeFailed();
    internal static string get_Common_TestOutcomeInconclusive();
    internal static string get_Common_TestOutcomeInProgress();
    internal static string get_Common_TestOutcomeNotExecuted();
    internal static string get_Common_TestOutcomeNotRunnable();
    internal static string get_Common_TestOutcomePassed();
    internal static string get_Common_TestOutcomePassedButRunAborted();
    internal static string get_Common_TestOutcomePending();
    internal static string get_Common_TestOutcomeTimeout();
    internal static string get_Common_TestOutcomeWarning();
    internal static string get_ConverterNotSupported();
    internal static string get_CouldNotFindXmlNode();
    internal static string get_DataCollectionSink_CanNotReadStream();
    internal static string get_DataCollectionSink_InvalidFileNameCharacters();
    internal static string get_DataCollectionSink_ReservedFilenameUsed();
    internal static string get_Exception_RegisteredTestPropertyHasDifferentValueType();
    internal static string get_FailedToCreateDiaSession();
    internal static string get_FailedToLoadMsDia();
    internal static string get_InvalidDataCollectorUriInSettings();
    internal static string get_InvalidRunSettingsRootNode();
    internal static string get_InvalidSettingsIncorrectValue();
    internal static string get_InvalidSettingsXmlAttribute();
    internal static string get_InvalidSettingsXmlElement();
    internal static string get_InvalidUriInSettings();
    internal static string get_MissingDataCollectorAttributes();
    internal static string get_MissingLoggerAttributes();
    internal static string get_NoTestCaseFilterForSpecificTests();
    internal static string get_NotificationFrequencyIsNotPositive();
    internal static string get_NotificationTimeoutIsZero();
    internal static string get_NullString();
    internal static string get_SolutionDirectoryNotExists();
    internal static string get_TestCaseFilterEscapeException();
    internal static string get_TestCasePropertyColumnNumberLabel();
    internal static string get_TestCasePropertyExecutorUriLabel();
    internal static string get_TestCasePropertyFilePathLabel();
    internal static string get_TestCasePropertyFullyQualifiedNameLabel();
    internal static string get_TestCasePropertyIdLabel();
    internal static string get_TestCasePropertyLineNumberLabel();
    internal static string get_TestCasePropertyNameLabel();
    internal static string get_TestCasePropertySourceLabel();
    internal static string get_TestCasePropertyTraitsLabel();
    internal static string get_TestFailureMessageFormat();
    internal static string get_TestFailureStackTraceFormat();
    internal static string get_TestOutcomeFailed();
    internal static string get_TestOutcomeNone();
    internal static string get_TestOutcomeNotFound();
    internal static string get_TestOutcomePassed();
    internal static string get_TestOutcomeSkipped();
    internal static string get_TestResultMessageFormat();
    internal static string get_TestResultPropertyComputerNameLabel();
    internal static string get_TestResultPropertyDisplayNameLabel();
    internal static string get_TestResultPropertyDurationLabel();
    internal static string get_TestResultPropertyEndTimeLabel();
    internal static string get_TestResultPropertyErrorColumnNumberLabel();
    internal static string get_TestResultPropertyErrorMessageLabel();
    internal static string get_TestResultPropertyErrorStackTraceLabel();
    internal static string get_TestResultPropertyOutcomeLabel();
    internal static string get_TestResultPropertyStartTimeLabel();
    internal static string get_TestResultTextMessagesFormat();
    internal static string get_UnexpectedTypeOfProperty();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.RunConfiguration : TestRunSettings {
    private Architecture _platform;
    private Nullable`1<Architecture> _defaultPlatform;
    private int _maxCpuCount;
    private Framework _framework;
    private long _batchSize;
    [NullableAttribute("1")]
private string _resultsDirectory;
    private string _testAdaptersPaths;
    private bool _disableAppDomain;
    private bool _disableParallelization;
    private bool _designMode;
    private bool _shouldCollectSourceInformation;
    [CompilerGeneratedAttribute]
private string <SolutionDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TestSessionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InIsolation>k__BackingField;
    [CompilerGeneratedAttribute]
private TestAdapterLoadingStrategy <TestAdapterLoadingStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatNoTestsAsError>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDevice>k__BackingField;
    [CompilerGeneratedAttribute]
private PlatformApartmentState <ExecutionThreadApartmentState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatTestAdapterErrorsAsWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TargetPlatformSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultPlatformSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaxCpuCountSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BatchSizeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DesignModeSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableAppDomainSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelizationSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TargetFrameworkSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TestAdaptersPathsSet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResultsDirectorySet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinariesRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollectSourceInformationSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TestCaseFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotnetHostPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureStandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForwardStandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableSharedTestHost>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDefaultAdapters>k__BackingField;
    public string SolutionDirectory { get; public set; }
    [NullableAttribute("1")]
public string ResultsDirectory { get; public set; }
    public int MaxCpuCount { get; public set; }
    public long BatchSize { get; public set; }
    public long TestSessionTimeout { get; public set; }
    public bool DesignMode { get; public set; }
    public bool InIsolation { get; public set; }
    public bool ShouldCollectSourceInformation { get; public set; }
    public bool DisableAppDomain { get; public set; }
    internal TestAdapterLoadingStrategy TestAdapterLoadingStrategy { get; internal set; }
    public bool DisableParallelization { get; public set; }
    public Architecture TargetPlatform { get; public set; }
    public Nullable`1<Architecture> DefaultPlatform { get; public set; }
    public Framework TargetFramework { get; public set; }
    public bool TreatNoTestsAsError { get; public set; }
    [ObsoleteAttribute("Use TargetFramework instead")]
public FrameworkVersion TargetFrameworkVersion { get; public set; }
    public string TargetDevice { get; public set; }
    public string TestAdaptersPaths { get; public set; }
    [CLSCompliantAttribute("False")]
public PlatformApartmentState ExecutionThreadApartmentState { get; public set; }
    public bool TreatTestAdapterErrorsAsWarnings { get; public set; }
    public bool TargetPlatformSet { get; private set; }
    public bool DefaultPlatformSet { get; private set; }
    public bool MaxCpuCountSet { get; private set; }
    public bool BatchSizeSet { get; private set; }
    public bool DesignModeSet { get; private set; }
    public bool DisableAppDomainSet { get; private set; }
    public bool DisableParallelizationSet { get; private set; }
    public bool TargetFrameworkSet { get; private set; }
    [MemberNotNullWhenAttribute("True", "TestAdaptersPaths")]
public bool TestAdaptersPathsSet { get; private set; }
    public bool ResultsDirectorySet { get; private set; }
    public string BinariesRoot { get; private set; }
    public bool CollectSourceInformationSet { get; private set; }
    public string TestCaseFilter { get; private set; }
    public string DotnetHostPath { get; private set; }
    public bool CaptureStandardOutput { get; private set; }
    public bool ForwardStandardOutput { get; private set; }
    public bool DisableSharedTestHost { get; private set; }
    public bool SkipDefaultAdapters { get; private set; }
    [CompilerGeneratedAttribute]
public string get_SolutionDirectory();
    [CompilerGeneratedAttribute]
public void set_SolutionDirectory(string value);
    [NullableContextAttribute("1")]
public string get_ResultsDirectory();
    [NullableContextAttribute("1")]
public void set_ResultsDirectory(string value);
    public int get_MaxCpuCount();
    public void set_MaxCpuCount(int value);
    public long get_BatchSize();
    public void set_BatchSize(long value);
    [CompilerGeneratedAttribute]
public long get_TestSessionTimeout();
    [CompilerGeneratedAttribute]
public void set_TestSessionTimeout(long value);
    public bool get_DesignMode();
    public void set_DesignMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_InIsolation();
    [CompilerGeneratedAttribute]
public void set_InIsolation(bool value);
    public bool get_ShouldCollectSourceInformation();
    public void set_ShouldCollectSourceInformation(bool value);
    public bool get_DisableAppDomain();
    public void set_DisableAppDomain(bool value);
    [CompilerGeneratedAttribute]
internal TestAdapterLoadingStrategy get_TestAdapterLoadingStrategy();
    [CompilerGeneratedAttribute]
internal void set_TestAdapterLoadingStrategy(TestAdapterLoadingStrategy value);
    public bool get_DisableParallelization();
    public void set_DisableParallelization(bool value);
    public Architecture get_TargetPlatform();
    public void set_TargetPlatform(Architecture value);
    public Nullable`1<Architecture> get_DefaultPlatform();
    public void set_DefaultPlatform(Nullable`1<Architecture> value);
    public Framework get_TargetFramework();
    public void set_TargetFramework(Framework value);
    [CompilerGeneratedAttribute]
public bool get_TreatNoTestsAsError();
    [CompilerGeneratedAttribute]
public void set_TreatNoTestsAsError(bool value);
    public FrameworkVersion get_TargetFrameworkVersion();
    public void set_TargetFrameworkVersion(FrameworkVersion value);
    [CompilerGeneratedAttribute]
public string get_TargetDevice();
    [CompilerGeneratedAttribute]
public void set_TargetDevice(string value);
    public string get_TestAdaptersPaths();
    public void set_TestAdaptersPaths(string value);
    [CompilerGeneratedAttribute]
public PlatformApartmentState get_ExecutionThreadApartmentState();
    [CompilerGeneratedAttribute]
public void set_ExecutionThreadApartmentState(PlatformApartmentState value);
    [CompilerGeneratedAttribute]
public bool get_TreatTestAdapterErrorsAsWarnings();
    [CompilerGeneratedAttribute]
public void set_TreatTestAdapterErrorsAsWarnings(bool value);
    [CompilerGeneratedAttribute]
public bool get_TargetPlatformSet();
    [CompilerGeneratedAttribute]
private void set_TargetPlatformSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_DefaultPlatformSet();
    [CompilerGeneratedAttribute]
private void set_DefaultPlatformSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_MaxCpuCountSet();
    [CompilerGeneratedAttribute]
private void set_MaxCpuCountSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_BatchSizeSet();
    [CompilerGeneratedAttribute]
private void set_BatchSizeSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_DesignModeSet();
    [CompilerGeneratedAttribute]
private void set_DesignModeSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableAppDomainSet();
    [CompilerGeneratedAttribute]
private void set_DisableAppDomainSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelizationSet();
    [CompilerGeneratedAttribute]
private void set_DisableParallelizationSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_TargetFrameworkSet();
    [CompilerGeneratedAttribute]
private void set_TargetFrameworkSet(bool value);
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "TestAdaptersPaths")]
public bool get_TestAdaptersPathsSet();
    [CompilerGeneratedAttribute]
[MemberNotNullWhenAttribute("True", "TestAdaptersPaths")]
private void set_TestAdaptersPathsSet(bool value);
    [CompilerGeneratedAttribute]
public bool get_ResultsDirectorySet();
    [CompilerGeneratedAttribute]
private void set_ResultsDirectorySet(bool value);
    [CompilerGeneratedAttribute]
public string get_BinariesRoot();
    [CompilerGeneratedAttribute]
private void set_BinariesRoot(string value);
    [CompilerGeneratedAttribute]
public bool get_CollectSourceInformationSet();
    [CompilerGeneratedAttribute]
private void set_CollectSourceInformationSet(bool value);
    [CompilerGeneratedAttribute]
public string get_TestCaseFilter();
    [CompilerGeneratedAttribute]
private void set_TestCaseFilter(string value);
    [CompilerGeneratedAttribute]
public string get_DotnetHostPath();
    [CompilerGeneratedAttribute]
private void set_DotnetHostPath(string value);
    [CompilerGeneratedAttribute]
public bool get_CaptureStandardOutput();
    [CompilerGeneratedAttribute]
private void set_CaptureStandardOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForwardStandardOutput();
    [CompilerGeneratedAttribute]
private void set_ForwardStandardOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableSharedTestHost();
    [CompilerGeneratedAttribute]
private void set_DisableSharedTestHost(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipDefaultAdapters();
    [CompilerGeneratedAttribute]
private void set_SkipDefaultAdapters(bool value);
    [NullableContextAttribute("1")]
public virtual XmlElement ToXml();
    [NullableContextAttribute("1")]
public static RunConfiguration FromXml(XmlReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsException : Exception {
    public SettingsException(string message);
    public SettingsException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected SettingsException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.SettingsNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SettingsName>k__BackingField;
    public string SettingsName { get; private set; }
    public SettingsNameAttribute(string settingsName);
    [CompilerGeneratedAttribute]
public string get_SettingsName();
    [CompilerGeneratedAttribute]
private void set_SettingsName(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Architecture <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private Framework <Framework>k__BackingField;
    public string Source { get; internal set; }
    public Architecture Architecture { get; internal set; }
    public Framework Framework { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(string value);
    [CompilerGeneratedAttribute]
public Architecture get_Architecture();
    [CompilerGeneratedAttribute]
internal void set_Architecture(Architecture value);
    [CompilerGeneratedAttribute]
public Framework get_Framework();
    [CompilerGeneratedAttribute]
internal void set_Framework(Framework value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TelemetryEvent : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [DataMemberAttribute]
public string Name { get; private set; }
    [DataMemberAttribute]
public IDictionary`2<string, object> Properties { get; private set; }
    public TelemetryEvent(string name, IDictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, object> value);
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.TestPlatform.ObjectModel.TestAdapterLoadingStrategy : Enum {
    public int value__;
    public static TestAdapterLoadingStrategy Default;
    public static TestAdapterLoadingStrategy Explicit;
    public static TestAdapterLoadingStrategy NextToSource;
    public static TestAdapterLoadingStrategy DefaultRuntimeProviders;
    public static TestAdapterLoadingStrategy ExtensionsDirectory;
    public static TestAdapterLoadingStrategy Recursive;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase : TestObject {
    private Guid _defaultId;
    private Guid _id;
    [NullableAttribute("2")]
private string _displayName;
    private string _fullyQualifiedName;
    private string _source;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <LocalExtensionData>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ExecutorUri>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CodeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    private static TestProperty ManagedTypeProperty;
    private static TestProperty ManagedMethodProperty;
    [NullableAttribute("2")]
public object LocalExtensionData { get; public set; }
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string FullyQualifiedName { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public Uri ExecutorUri { get; public set; }
    [DataMemberAttribute]
public string Source { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string CodeFilePath { get; public set; }
    [DataMemberAttribute]
public int LineNumber { get; public set; }
    public IEnumerable`1<TestProperty> Properties { get; }
    private bool ContainsManagedMethodAndType { get; }
    [NullableAttribute("2")]
private string ManagedType { get; private set; }
    [NullableAttribute("2")]
private string ManagedMethod { get; private set; }
    public TestCase(string fullyQualifiedName, Uri executorUri, string source);
    private static TestCase();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_LocalExtensionData();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LocalExtensionData(object value);
    public Guid get_Id();
    public void set_Id(Guid value);
    public string get_FullyQualifiedName();
    public void set_FullyQualifiedName(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Uri get_ExecutorUri();
    [CompilerGeneratedAttribute]
public void set_ExecutorUri(Uri value);
    public string get_Source();
    public void set_Source(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CodeFilePath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CodeFilePath(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    public virtual IEnumerable`1<TestProperty> get_Properties();
    private Guid GetTestId();
    private void SetVariableAndResetId(T& variable, T value);
    private void SetPropertyAndResetId(TestProperty property, T value);
    [NullableContextAttribute("2")]
protected virtual object ProtectedGetPropertyValue(TestProperty property, object defaultValue);
    protected virtual void ProtectedSetPropertyValue(TestProperty property, object value);
    private bool get_ContainsManagedMethodAndType();
    [NullableContextAttribute("2")]
private string get_ManagedType();
    [NullableContextAttribute("2")]
private void set_ManagedType(string value);
    [NullableContextAttribute("2")]
private string get_ManagedMethod();
    [NullableContextAttribute("2")]
private void set_ManagedMethod(string value);
    private string GetFullyQualifiedName();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCaseProperties : object {
    private static string IdLabel;
    private static string FullyQualifiedNameLabel;
    private static string NameLabel;
    private static string ExecutorUriLabel;
    private static string SourceLabel;
    private static string FilePathLabel;
    private static string LineNumberLabel;
    public static TestProperty Id;
    public static TestProperty FullyQualifiedName;
    public static TestProperty DisplayName;
    public static TestProperty ExecutorUri;
    public static TestProperty Source;
    public static TestProperty CodeFilePath;
    public static TestProperty LineNumber;
    [CompilerGeneratedAttribute]
private static TestProperty[] <Properties>k__BackingField;
    internal static TestProperty[] Properties { get; }
    private static TestCaseProperties();
    [CompilerGeneratedAttribute]
internal static TestProperty[] get_Properties();
    [NullableContextAttribute("2")]
private static bool ValidateName(object value);
    [NullableContextAttribute("2")]
private static bool ValidateDisplay(object value);
    [NullableContextAttribute("2")]
private static bool ValidateExecutorUri(object value);
    [NullableContextAttribute("2")]
private static bool ValidateGuid(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestHostConnectionInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionRole <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private Transport <Transport>k__BackingField;
    public string Endpoint { get; public set; }
    public ConnectionRole Role { get; public set; }
    public Transport Transport { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ConnectionRole get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(ConnectionRole value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Transport get_Transport();
    [CompilerGeneratedAttribute]
public void set_Transport(Transport value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestObject : object {
    private static CustomKeyValueConverter KeyValueConverter;
    private static CustomStringArrayConverter StringArrayConverter;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<TestProperty, object> _store;
    [NullableAttribute("2")]
private TraitCollection _traits;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
private List`1<KeyValuePair`2<TestProperty, object>> StoreKeyValuePairs { get; private set; }
    public IEnumerable`1<TestProperty> Properties { get; }
    public TraitCollection Traits { get; }
    private static TestObject();
    private List`1<KeyValuePair`2<TestProperty, object>> get_StoreKeyValuePairs();
    private void set_StoreKeyValuePairs(List`1<KeyValuePair`2<TestProperty, object>> value);
    public IEnumerable`1<KeyValuePair`2<TestProperty, object>> GetProperties();
    [OnSerializingAttribute]
public void CacheLazyValuesOnSerializing(StreamingContext context);
    public virtual IEnumerable`1<TestProperty> get_Properties();
    public object GetPropertyValue(TestProperty property);
    [NullableContextAttribute("2")]
public T GetPropertyValue(TestProperty property, T defaultValue);
    public void SetPropertyValue(TestProperty property, T value);
    public void SetPropertyValue(TestProperty property, LazyPropertyValue`1<T> value);
    public void SetPropertyValue(TestProperty property, object value);
    public void RemovePropertyValue(TestProperty property);
    [NullableContextAttribute("2")]
public T GetPropertyValue(TestProperty property, T defaultValue, CultureInfo culture);
    public void SetPropertyValue(TestProperty property, T value, CultureInfo culture);
    public void SetPropertyValue(TestProperty property, LazyPropertyValue`1<T> value, CultureInfo culture);
    [NullableContextAttribute("2")]
protected virtual object ProtectedGetPropertyValue(TestProperty property, object defaultValue);
    protected virtual void ProtectedSetPropertyValue(TestProperty property, object value);
    [NullableContextAttribute("2")]
private static object ConvertPropertyFrom(TestProperty property, CultureInfo culture, object value);
    [NullableContextAttribute("2")]
private static T ConvertPropertyTo(TestProperty property, CultureInfo culture, object value);
    public TraitCollection get_Traits();
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcome : Enum {
    public int value__;
    public static TestOutcome None;
    public static TestOutcome Passed;
    public static TestOutcome Failed;
    public static TestOutcome Skipped;
    public static TestOutcome NotFound;
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestOutcomeHelper : object {
    [NullableContextAttribute("1")]
public static string GetOutcomeString(TestOutcome outcome);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPlatformException : Exception {
    public TestPlatformException(string message);
    public TestPlatformException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessAttachDebuggerPayload : object {
    [CompilerGeneratedAttribute]
private int <ProcessID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [DataMemberAttribute]
public int ProcessID { get; public set; }
    [DataMemberAttribute]
public string TargetFramework { get; public set; }
    public TestProcessAttachDebuggerPayload(int pid);
    [CompilerGeneratedAttribute]
public int get_ProcessID();
    [CompilerGeneratedAttribute]
public void set_ProcessID(int value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <CustomProperties>k__BackingField;
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string Arguments { get; public set; }
    [DataMemberAttribute]
public string WorkingDirectory { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public IDictionary`2<string, string> CustomProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_CustomProperties();
    [CompilerGeneratedAttribute]
public void set_CustomProperties(IDictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty : object {
    private static ConcurrentDictionary`2<string, Type> TypeCache;
    [CompilerGeneratedAttribute]
private static bool <DisableFastJson>k__BackingField;
    private Type _valueType;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ValidateValueCallback <ValidateValueCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private TestPropertyAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<string, KeyValuePair`2<TestProperty, HashSet`1<Type>>> Properties;
    private static bool DisableFastJson { get; private set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Label { get; public set; }
    [DataMemberAttribute]
public string Category { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [NullableAttribute("2")]
[IgnoreDataMemberAttribute]
public ValidateValueCallback ValidateValueCallback { get; }
    [DataMemberAttribute]
public TestPropertyAttributes Attributes { get; public set; }
    [DataMemberAttribute]
public string ValueType { get; public set; }
    private TestProperty(string id, string label, string category, string description, Type valueType, ValidateValueCallback validateValueCallback, TestPropertyAttributes attributes);
    private static TestProperty();
    [CompilerGeneratedAttribute]
private static bool get_DisableFastJson();
    [CompilerGeneratedAttribute]
private static void set_DisableFastJson(bool value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Label();
    [CompilerGeneratedAttribute]
public void set_Label(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ValidateValueCallback get_ValidateValueCallback();
    [CompilerGeneratedAttribute]
public TestPropertyAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(TestPropertyAttributes value);
    [CompilerGeneratedAttribute]
public string get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(string value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TestProperty other);
    public virtual string ToString();
    public Type GetValueType();
    private Type GetType(string typeName);
    public static void ClearRegisteredProperties();
    public static TestProperty Find(string id);
    public static TestProperty Register(string id, string label, Type valueType, Type owner);
    public static TestProperty Register(string id, string label, Type valueType, TestPropertyAttributes attributes, Type owner);
    public static TestProperty Register(string id, string label, string category, string description, Type valueType, ValidateValueCallback validateValueCallback, TestPropertyAttributes attributes, Type owner);
    public static bool TryUnregister(string id, KeyValuePair`2& propertyTypePair);
    public object GetRealObject(StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.TestPropertyAttributes : Enum {
    public int value__;
    public static TestPropertyAttributes None;
    public static TestPropertyAttributes Hidden;
    public static TestPropertyAttributes Immutable;
    [ObsoleteAttribute("Use TestObject.Traits collection to create traits")]
public static TestPropertyAttributes Trait;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResult : TestObject {
    [CompilerGeneratedAttribute]
private TestCase <TestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<AttachmentSet> <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private TestOutcome <Outcome>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ErrorStackTrace>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<TestResultMessage> <Messages>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EndTime>k__BackingField;
    [DataMemberAttribute]
public TestCase TestCase { get; private set; }
    [DataMemberAttribute]
public Collection`1<AttachmentSet> Attachments { get; private set; }
    [DataMemberAttribute]
public TestOutcome Outcome { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string ErrorStackTrace { get; public set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public Collection`1<TestResultMessage> Messages { get; private set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string ComputerName { get; public set; }
    [DataMemberAttribute]
public TimeSpan Duration { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset StartTime { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset EndTime { get; public set; }
    public IEnumerable`1<TestProperty> Properties { get; }
    public TestResult(TestCase testCase);
    [CompilerGeneratedAttribute]
public TestCase get_TestCase();
    [CompilerGeneratedAttribute]
private void set_TestCase(TestCase value);
    [CompilerGeneratedAttribute]
public Collection`1<AttachmentSet> get_Attachments();
    [CompilerGeneratedAttribute]
private void set_Attachments(Collection`1<AttachmentSet> value);
    [CompilerGeneratedAttribute]
public TestOutcome get_Outcome();
    [CompilerGeneratedAttribute]
public void set_Outcome(TestOutcome value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ErrorStackTrace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ErrorStackTrace(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DisplayName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Collection`1<TestResultMessage> get_Messages();
    [CompilerGeneratedAttribute]
private void set_Messages(Collection`1<TestResultMessage> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ComputerName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ComputerName(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTimeOffset value);
    public virtual IEnumerable`1<TestProperty> get_Properties();
    public virtual string ToString();
    [NullableContextAttribute("2")]
protected virtual object ProtectedGetPropertyValue(TestProperty property, object defaultValue);
    protected virtual void ProtectedSetPropertyValue(TestProperty property, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage : object {
    public static string StandardOutCategory;
    public static string StandardErrorCategory;
    public static string DebugTraceCategory;
    public static string AdditionalInfoCategory;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [DataMemberAttribute]
public string Category { get; private set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string Text { get; private set; }
    public TestResultMessage(string category, string text);
    private static TestResultMessage();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Text();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Text(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultProperties : object {
    public static TestProperty DisplayName;
    public static TestProperty ComputerName;
    public static TestProperty Outcome;
    public static TestProperty Duration;
    public static TestProperty StartTime;
    public static TestProperty EndTime;
    public static TestProperty ErrorMessage;
    public static TestProperty ErrorStackTrace;
    [CompilerGeneratedAttribute]
private static TestProperty[] <Properties>k__BackingField;
    internal static TestProperty[] Properties { get; }
    private static TestResultProperties();
    [CompilerGeneratedAttribute]
internal static TestProperty[] get_Properties();
    [NullableContextAttribute("2")]
private static bool ValidateOutcome(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfo : ValueType {
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private TestHostConnectionInfo <ConnectionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RunnerProcessId>k__BackingField;
    public int Port { get; public set; }
    public TestHostConnectionInfo ConnectionInfo { get; public set; }
    public string LogFile { get; public set; }
    public int TraceLevel { get; public set; }
    public int RunnerProcessId { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TestHostConnectionInfo get_ConnectionInfo();
    [CompilerGeneratedAttribute]
public void set_ConnectionInfo(TestHostConnectionInfo value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_LogFile();
    [CompilerGeneratedAttribute]
public void set_LogFile(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_TraceLevel();
    [CompilerGeneratedAttribute]
public void set_TraceLevel(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_RunnerProcessId();
    [CompilerGeneratedAttribute]
public void set_RunnerProcessId(int value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunnerConnectionInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToCommandLineOptions(TestRunnerConnectionInfo connectionInfo);
}
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunParameters : object {
    [NullableContextAttribute("1")]
internal static Dictionary`2<string, object> FromXml(XmlReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.VisualStudio.TestPlatform.ObjectModel.TestRunSettings : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    protected TestRunSettings(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public abstract virtual XmlElement ToXml();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Trait : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    internal Trait(KeyValuePair`2<string, string> data);
    public Trait(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.TraitCollection : object {
    internal static string TraitPropertyId;
    private static TestProperty TraitsProperty;
    private TestObject _testObject;
    internal TraitCollection(TestObject testObject);
    private static TraitCollection();
    public void Add(Trait trait);
    public void Add(string name, string value);
    public void AddRange(IEnumerable`1<Trait> traits);
    public sealed virtual IEnumerator`1<Trait> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.TestPlatform.ObjectModel.TraitCollection/<GetTraits>d__9")]
private IEnumerable`1<Trait> GetTraits();
    private void Add(IEnumerable`1<Trait> traits, IEnumerable`1<Trait> newTraits);
}
public enum Microsoft.VisualStudio.TestPlatform.ObjectModel.Transport : Enum {
    public int value__;
    public static Transport Sockets;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.UapConstants : object {
    public static string UapPackageFullName;
    public static string UapAppUserModeId;
    private static UapConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.UriDataAttachment : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [NullableAttribute("2")]
[DataMemberAttribute]
public string Description { get; }
    [DataMemberAttribute]
public Uri Uri { get; }
    public UriDataAttachment(Uri uri, string description);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    public virtual string ToString();
    public static UriDataAttachment CreateFrom(string localFilePath, string description);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyHelper : object {
    private static Version DefaultVersion;
    private static Version Version45;
    private static AssemblyHelper();
    public static Nullable`1<bool> DoesReferencesAssembly(string source, AssemblyName referenceAssembly);
    [NullableContextAttribute("0")]
public static KeyValuePair`2<Architecture, FrameworkVersion> GetFrameworkVersionAndArchitectureForSource(string testSource);
    public static String[] GetReferencedAssemblies(string source);
    public static void SetAppDomainFrameworkVersionBasedOnTestSource(AppDomainSetup setup, string testSource);
    internal static string GetTargetFrameworkVersionString(string path);
    internal static Version GetTargetFrameworkVersionFromVersionString(string version);
    internal static void SetNETFrameworkCompatiblityMode(AppDomainSetup setup, IRunContext runContext);
    [ExtensionAttribute]
public static IEnumerable`1<Attribute> GetCustomAttributes(Assembly assembly, string fullyQualifiedName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.AssemblyLoadWorker : MarshalByRefObject {
    public static string GetTargetFrameworkVersionStringFromPath(string path);
    internal static string GetTargetFrameworkStringFromAssembly(Assembly assembly);
    public static String[] GetReferencedAssemblies(string path);
    public static Nullable`1<bool> CheckAssemblyReference(string path, string referenceAssemblyName, Byte[] publicKeyToken);
    public static void GetPlatformAndFrameworkSettings(string path, String& procArchType, String& frameworkVersion);
    private static string GetArchitectureForSource(string imagePath);
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.EqtHash : object {
    [NullableContextAttribute("1")]
public static Guid GuidFromString(string data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.FilterHelper : object {
    public static char EscapeCharacter;
    private static Char[] SpecialCharacters;
    private static HashSet`1<char> SpecialCharactersSet;
    private static FilterHelper();
    public static string Escape(string str);
    public static string Unescape(string str);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.Sha1Helper : object {
    public static Byte[] ComputeSha1(Byte[] message);
}
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.StringUtilities : object {
    [NullableContextAttribute("1")]
public static string PrepareForOutput(string input);
    [NullableContextAttribute("2")]
public static bool IsNullOrWhiteSpace(string input);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.SuspendCodeCoverage : object {
    [NullableAttribute("1")]
private static string SuspendCodeCoverageEnvVarName;
    [NullableAttribute("1")]
private static string SuspendCodeCoverageEnvVarTrueValue;
    [NullableAttribute("2")]
private string _prevEnvValue;
    private bool _isDisposed;
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlReaderUtilities : object {
    private static string RunSettingsRootNodeName;
    [ExtensionAttribute]
public static void ReadToNextElement(XmlReader reader);
    [ExtensionAttribute]
public static void SkipToNextElement(XmlReader reader);
    public static void ReadToRootNode(XmlReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.ObjectModel.Utilities.XmlRunSettingsUtilities : object {
    public static Architecture OSArchitecture { get; }
    public static XmlReaderSettings ReaderSettings { get; }
    public static Architecture get_OSArchitecture();
    public static XmlReaderSettings get_ReaderSettings();
    public static bool ContainsDataCollector(IXPathNavigable runSettingDocument, string dataCollectorUri);
    public static IList`1<string> GetDataCollectorsFriendlyName(string runsettingsXml);
    public static void InsertDataCollectorsNode(IXPathNavigable runSettingDocument, DataCollectorSettings settings);
    public static RunConfiguration GetRunConfigurationNode(string settingsXml);
    public static Dictionary`2<string, object> GetTestRunParameters(string settingsXml);
    public static XmlDocument CreateDefaultRunSettings();
    [NullableContextAttribute("2")]
public static bool IsDataCollectionEnabled(string runSettingsXml);
    [NullableContextAttribute("2")]
public static bool IsInProcDataCollectionEnabled(string runSettingsXml);
    [NullableContextAttribute("2")]
public static DataCollectionRunSettings GetDataCollectionRunSettings(string runSettingsXml);
    [NullableContextAttribute("2")]
public static DataCollectionRunSettings GetInProcDataCollectionRunSettings(string runSettingsXml);
    [NullableContextAttribute("2")]
public static LoggerRunSettings GetLoggerRunSettings(string runSettings);
    internal static void ThrowOnHasAttributes(XmlReader reader);
    internal static void ThrowOnNoAttributes(XmlReader reader);
    [NullableContextAttribute("2")]
private static T GetNodeValue(string settingsXml, string nodeName, Func`2<XmlReader, T> nodeParser);
    private static void MoveToDataCollectorsNode(XPathNavigator& runSettingsNavigator);
}
public class Microsoft.VisualStudio.TestPlatform.ObjectModel.ValidateValueCallback : MulticastDelegate {
    public ValidateValueCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual bool Invoke(object value);
    public virtual IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("32767")]
public class Microsoft.VisualStudio.TestPlatform.TestSDKAutoGeneratedCode : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class NuGetClone.Frameworks.CompatibilityCacheKey : ValueType {
    [CompilerGeneratedAttribute]
private NuGetFramework <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFramework <Candidate>k__BackingField;
    private int _hashCode;
    public NuGetFramework Target { get; }
    public NuGetFramework Candidate { get; }
    public CompatibilityCacheKey(NuGetFramework target, NuGetFramework candidate);
    [CompilerGeneratedAttribute]
public NuGetFramework get_Target();
    [CompilerGeneratedAttribute]
public NuGetFramework get_Candidate();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(CompatibilityCacheKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.CompatibilityMappingComparer : object {
    [CompilerGeneratedAttribute]
private static CompatibilityMappingComparer <Instance>k__BackingField;
    public static CompatibilityMappingComparer Instance { get; }
    private static CompatibilityMappingComparer();
    [CompilerGeneratedAttribute]
public static CompatibilityMappingComparer get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(OneWayCompatibilityMappingEntry x, OneWayCompatibilityMappingEntry y);
    public sealed virtual int GetHashCode(OneWayCompatibilityMappingEntry obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.CompatibilityProvider : object {
    private IFrameworkNameProvider _mappings;
    private FrameworkExpander _expander;
    private static NuGetFrameworkFullComparer FullComparer;
    private ConcurrentDictionary`2<CompatibilityCacheKey, bool> _cache;
    public CompatibilityProvider(IFrameworkNameProvider mappings);
    private static CompatibilityProvider();
    public sealed virtual bool IsCompatible(NuGetFramework target, NuGetFramework candidate);
    private Nullable`1<bool> IsCompatibleCore(NuGetFramework target, NuGetFramework candidate);
    private Nullable`1<bool> IsSpecialFrameworkCompatible(NuGetFramework target, NuGetFramework candidate);
    private bool IsPCLCompatible(NuGetFramework target, NuGetFramework candidate);
    private bool PCLInnerCompare(IEnumerable`1<NuGetFramework> targetFrameworks, IEnumerable`1<NuGetFramework> candidateFrameworks);
    private bool IsCompatibleWithTarget(NuGetFramework target, NuGetFramework candidate);
    private static bool IsCompatibleWithTargetCore(NuGetFramework target, NuGetFramework candidate);
    private static bool IsVersionCompatible(Version target, Version candidate);
    [IteratorStateMachineAttribute("NuGetClone.Frameworks.CompatibilityProvider/<GetEquivalentFrameworksClosure>d__13")]
private IEnumerable`1<NuGetFramework> GetEquivalentFrameworksClosure(NuGetFramework framework);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.DefaultCompatibilityProvider : CompatibilityProvider {
    [NullableAttribute("2")]
private static IFrameworkCompatibilityProvider _instance;
    public static IFrameworkCompatibilityProvider Instance { get; }
    public static IFrameworkCompatibilityProvider get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.DefaultFrameworkMappings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> IdentifierSynonymsLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> IdentifierShortNamesLazy;
    private static Lazy`1<FrameworkSpecificMapping[]> ProfileShortNamesLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> EquivalentFrameworksLazy;
    private static Lazy`1<FrameworkSpecificMapping[]> EquivalentProfilesLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> SubSetFrameworksLazy;
    private static Lazy`1<OneWayCompatibilityMappingEntry[]> CompatibilityMappingsLazy;
    private static Lazy`1<String[]> NonPackageBasedFrameworkPrecedenceLazy;
    private static Lazy`1<String[]> PackageBasedFrameworkPrecedenceLazy;
    private static Lazy`1<String[]> EquivalentFrameworkPrecedenceLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> ShortNameReplacementsLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> FullNameReplacementsLazy;
    private static Lazy`1<IFrameworkMappings> InstanceLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierSynonyms { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierShortNames { get; }
    public IEnumerable`1<FrameworkSpecificMapping> ProfileShortNames { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> EquivalentFrameworks { get; }
    public IEnumerable`1<FrameworkSpecificMapping> EquivalentProfiles { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> SubSetFrameworks { get; }
    public IEnumerable`1<OneWayCompatibilityMappingEntry> CompatibilityMappings { get; }
    public IEnumerable`1<string> NonPackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> PackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> EquivalentFrameworkPrecedence { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> ShortNameReplacements { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> FullNameReplacements { get; }
    public static IFrameworkMappings Instance { get; }
    private static DefaultFrameworkMappings();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierSynonyms();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierShortNames();
    public sealed virtual IEnumerable`1<FrameworkSpecificMapping> get_ProfileShortNames();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_EquivalentFrameworks();
    public sealed virtual IEnumerable`1<FrameworkSpecificMapping> get_EquivalentProfiles();
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, string>> get_SubSetFrameworks();
    public sealed virtual IEnumerable`1<OneWayCompatibilityMappingEntry> get_CompatibilityMappings();
    private static OneWayCompatibilityMappingEntry CreateGenerationMapping(NuGetFramework framework, NuGetFramework netPlatform);
    private static OneWayCompatibilityMappingEntry CreateStandardMapping(NuGetFramework framework, NuGetFramework netPlatform);
    [IteratorStateMachineAttribute("NuGetClone.Frameworks.DefaultFrameworkMappings/<CreateGenerationAndStandardMapping>d__23")]
private static IEnumerable`1<OneWayCompatibilityMappingEntry> CreateGenerationAndStandardMapping(NuGetFramework framework, NuGetFramework netPlatform, NuGetFramework netStandard);
    private static IEnumerable`1<OneWayCompatibilityMappingEntry> CreateGenerationAndStandardMappingForAllVersions(string framework, NuGetFramework netPlatform, NuGetFramework netStandard);
    public sealed virtual IEnumerable`1<string> get_NonPackageBasedFrameworkPrecedence();
    public sealed virtual IEnumerable`1<string> get_PackageBasedFrameworkPrecedence();
    public sealed virtual IEnumerable`1<string> get_EquivalentFrameworkPrecedence();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_ShortNameReplacements();
    public sealed virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_FullNameReplacements();
    public static IFrameworkMappings get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.DefaultFrameworkNameProvider : FrameworkNameProvider {
    private static Lazy`1<IFrameworkNameProvider> InstanceLazy;
    public static IFrameworkNameProvider Instance { get; }
    private static DefaultFrameworkNameProvider();
    public static IFrameworkNameProvider get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.DefaultPortableFrameworkMappings : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> ProfileFrameworksLazy;
    private static Int32[] ProfilesWithOptionalFrameworks;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<List`1<KeyValuePair`2<int, NuGetFramework[]>>> ProfileOptionalFrameworksLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Lazy`1<KeyValuePair`2[]> CompatibilityMappingsLazy;
    private static Lazy`1<IPortableFrameworkMappings> InstanceLazy;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> ProfileFrameworks { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> ProfileOptionalFrameworks { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<int, FrameworkRange>> CompatibilityMappings { get; }
    public static IPortableFrameworkMappings Instance { get; }
    private static DefaultPortableFrameworkMappings();
    public sealed virtual IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> get_ProfileFrameworks();
    private static KeyValuePair`2<int, NuGetFramework[]> CreateProfileFrameworks(int profile, NuGetFramework[] frameworks);
    public sealed virtual IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> get_ProfileOptionalFrameworks();
    public sealed virtual IEnumerable`1<KeyValuePair`2<int, FrameworkRange>> get_CompatibilityMappings();
    private static KeyValuePair`2<int, FrameworkRange> CreateStandardMapping(int profileNumber, NuGetFramework netStandard);
    public static IPortableFrameworkMappings get_Instance();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FallbackFramework : NuGetFramework {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<NuGetFramework> <Fallback>k__BackingField;
    private Nullable`1<int> _hashCode;
    public IReadOnlyList`1<NuGetFramework> Fallback { get; }
    public FallbackFramework(NuGetFramework framework, IReadOnlyList`1<NuGetFramework> fallbackFrameworks);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<NuGetFramework> get_Fallback();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FallbackFramework other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGetClone.Frameworks.FrameworkConstants : object {
    public static Version EmptyVersion;
    public static Version MaxVersion;
    public static Version Version5;
    public static Version Version6;
    public static Version Version7;
    public static Version Version10;
    public static FrameworkRange DotNetAll;
    private static FrameworkConstants();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkException : Exception {
    public FrameworkException(string message);
    protected FrameworkException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkExpander : object {
    private IFrameworkNameProvider _mappings;
    public FrameworkExpander(IFrameworkNameProvider mappings);
    [IteratorStateMachineAttribute("NuGetClone.Frameworks.FrameworkExpander/<Expand>d__3")]
public IEnumerable`1<NuGetFramework> Expand(NuGetFramework framework);
    [IteratorStateMachineAttribute("NuGetClone.Frameworks.FrameworkExpander/<ExpandInternal>d__4")]
private IEnumerable`1<NuGetFramework> ExpandInternal(NuGetFramework framework);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGetClone.Frameworks.FrameworkNameHelpers : object {
    public static string GetPortableProfileNumberString(int profileNumber);
    public static string GetFolderName(string identifierShortName, string versionString, string profileShortName);
    public static string GetVersionString(Version version);
    public static Version GetVersion(string versionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkNameProvider : object {
    private static HashSet`1<NuGetFramework> EmptyFrameworkSet;
    private static HashSet`1<string> SingleDigitVersionFrameworks;
    private static HashSet`1<string> DecimalPointFrameworks;
    private Dictionary`2<string, string> _identifierSynonyms;
    private Dictionary`2<string, string> _identifierToShortName;
    private Dictionary`2<string, string> _profilesToShortName;
    private Dictionary`2<string, string> _identifierShortToLong;
    private Dictionary`2<string, string> _profileShortToLong;
    private Dictionary`2<int, HashSet`1<NuGetFramework>> _portableFrameworks;
    private Dictionary`2<int, HashSet`1<NuGetFramework>> _portableOptionalFrameworks;
    private Dictionary`2<int, HashSet`1<FrameworkRange>> _portableCompatibilityMappings;
    private Dictionary`2<NuGetFramework, HashSet`1<NuGetFramework>> _equivalentFrameworks;
    private Dictionary`2<string, Dictionary`2<string, HashSet`1<string>>> _equivalentProfiles;
    private Dictionary`2<string, HashSet`1<OneWayCompatibilityMappingEntry>> _compatibilityMappings;
    private Dictionary`2<string, HashSet`1<string>> _subSetFrameworks;
    private Dictionary`2<string, int> _nonPackageBasedFrameworkPrecedence;
    private Dictionary`2<string, int> _packageBasedFrameworkPrecedence;
    private Dictionary`2<string, int> _equivalentFrameworkPrecedence;
    private Dictionary`2<NuGetFramework, NuGetFramework> _shortNameRewrites;
    private Dictionary`2<NuGetFramework, NuGetFramework> _fullNameRewrites;
    private List`1<NuGetFramework> _netStandardVersions;
    private List`1<NuGetFramework> _compatibleCandidates;
    public FrameworkNameProvider(IEnumerable`1<IFrameworkMappings> mappings, IEnumerable`1<IPortableFrameworkMappings> portableMappings);
    private static FrameworkNameProvider();
    private static bool TryConvertOrNormalize(string key, IDictionary`2<string, string> mappings, IDictionary`2<string, string> reverse, String& value);
    public sealed virtual bool TryGetIdentifier(string framework, String& identifier);
    public sealed virtual bool TryGetProfile(string frameworkIdentifier, string profileShortName, String& profile);
    public sealed virtual bool TryGetShortIdentifier(string identifier, String& identifierShortName);
    public sealed virtual bool TryGetShortProfile(string frameworkIdentifier, string profile, String& profileShortName);
    public sealed virtual bool TryGetVersion(string versionString, Version& version);
    public sealed virtual bool TryGetPlatformVersion(string versionString, Version& version);
    public sealed virtual string GetVersionString(string framework, Version version);
    public sealed virtual bool TryGetPortableProfile(IEnumerable`1<NuGetFramework> supportedFrameworks, Int32& profileNumber);
    private HashSet`1<NuGetFramework> RemoveDuplicateFramework(IEnumerable`1<NuGetFramework> supportedFrameworks);
    private HashSet`1<NuGetFramework> GetAllEquivalentFrameworks(NuGetFramework framework);
    [IteratorStateMachineAttribute("NuGetClone.Frameworks.FrameworkNameProvider/<GetEquivalentPermutations>d__34")]
private IEnumerable`1<HashSet`1<NuGetFramework>> GetEquivalentPermutations(HashSet`1<NuGetFramework> frameworks);
    private HashSet`1<NuGetFramework> GetOptionalFrameworks(int profile);
    public sealed virtual bool TryGetPortableFrameworks(int profile, IEnumerable`1& frameworks);
    public sealed virtual bool TryGetPortableFrameworks(int profile, bool includeOptional, IEnumerable`1& frameworks);
    public sealed virtual bool TryGetPortableFrameworks(string shortPortableProfiles, IEnumerable`1& frameworks);
    public sealed virtual bool TryGetPortableCompatibilityMappings(int profile, IEnumerable`1& supportedFrameworkRanges);
    public sealed virtual bool TryGetPortableProfileNumber(string profile, Int32& profileNumber);
    public sealed virtual bool TryGetPortableFrameworks(string profile, bool includeOptional, IEnumerable`1& frameworks);
    public sealed virtual bool TryGetEquivalentFrameworks(NuGetFramework framework, IEnumerable`1& frameworks);
    public sealed virtual bool TryGetEquivalentFrameworks(FrameworkRange range, IEnumerable`1& frameworks);
    private void InitMappings(IEnumerable`1<IFrameworkMappings> mappings);
    private void InitPortableMappings(IEnumerable`1<IPortableFrameworkMappings> portableMappings);
    private void InitNetStandard();
    private void AddShortNameRewriteMappings(IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> mappings);
    private void AddFullNameRewriteMappings(IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> mappings);
    private void AddCompatibilityMappings(IEnumerable`1<OneWayCompatibilityMappingEntry> mappings);
    private void AddSubSetFrameworks(IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    private void AddEquivalentProfiles(IEnumerable`1<FrameworkSpecificMapping> mappings);
    private void AddEquivalentFrameworks(IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> mappings);
    private void AddFrameworkSynonyms(IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    private void AddIdentifierShortNames(IEnumerable`1<KeyValuePair`2<string, string>> mappings);
    private void AddProfileShortNames(IEnumerable`1<FrameworkSpecificMapping> mappings);
    private void AddPortableProfileMappings(IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> mappings);
    private void AddPortableOptionalFrameworks(IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> mappings);
    private void AddPortableCompatibilityMappings(IEnumerable`1<KeyValuePair`2<int, FrameworkRange>> mappings);
    public void AddFrameworkPrecedenceMappings(IDictionary`2<string, int> destination, IEnumerable`1<string> mappings);
    public sealed virtual bool TryGetCompatibilityMappings(NuGetFramework framework, IEnumerable`1& supportedFrameworkRanges);
    public sealed virtual bool TryGetSubSetFrameworks(string frameworkIdentifier, IEnumerable`1& subSetFrameworks);
    [NullableContextAttribute("2")]
public sealed virtual int CompareFrameworks(NuGetFramework x, NuGetFramework y);
    [NullableContextAttribute("2")]
public sealed virtual int CompareEquivalentFrameworks(NuGetFramework x, NuGetFramework y);
    [NullableContextAttribute("2")]
private static int CompareUsingPrecedence(NuGetFramework x, NuGetFramework y, Dictionary`2<string, int> precedence);
    public sealed virtual NuGetFramework GetShortNameReplacement(NuGetFramework framework);
    public sealed virtual NuGetFramework GetFullNameReplacement(NuGetFramework framework);
    public sealed virtual IEnumerable`1<NuGetFramework> GetNetStandardVersions();
    public sealed virtual IEnumerable`1<NuGetFramework> GetCompatibleCandidates();
    private void AddNetStandardVersions();
    private void AddCompatibleCandidates();
    private static bool SetEquals(HashSet`1<NuGetFramework> left, HashSet`1<NuGetFramework> right);
    private static void UnionWith(HashSet`1<NuGetFramework> toAccumulate, HashSet`1<NuGetFramework> toAdd);
    [CompilerGeneratedAttribute]
internal static bool <GetVersionString>g__HasGreaterThanNinePart|30_0(<>c__DisplayClass30_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetVersionString>g__IsZero|30_1(Version version);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkPrecedenceSorter : object {
    private IFrameworkNameProvider _mappings;
    private bool _allEquivalent;
    public FrameworkPrecedenceSorter(IFrameworkNameProvider mappings, bool allEquivalent);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(NuGetFramework x, NuGetFramework y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkRange : object {
    private bool _includeMin;
    private bool _includeMax;
    [CompilerGeneratedAttribute]
private NuGetFramework <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private NuGetFramework <Max>k__BackingField;
    public NuGetFramework Min { get; }
    public NuGetFramework Max { get; }
    public bool IncludeMin { get; }
    public bool IncludeMax { get; }
    public string FrameworkIdentifier { get; }
    public FrameworkRange(NuGetFramework min, NuGetFramework max);
    public FrameworkRange(NuGetFramework min, NuGetFramework max, bool includeMin, bool includeMax);
    [CompilerGeneratedAttribute]
public NuGetFramework get_Min();
    [CompilerGeneratedAttribute]
public NuGetFramework get_Max();
    public bool get_IncludeMin();
    public bool get_IncludeMax();
    public string get_FrameworkIdentifier();
    public bool Satisfies(NuGetFramework framework);
    private static bool SameExceptForVersion(NuGetFramework x, NuGetFramework y);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FrameworkRange other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkRangeComparer : object {
    [CompilerGeneratedAttribute]
private static FrameworkRangeComparer <Instance>k__BackingField;
    public static FrameworkRangeComparer Instance { get; }
    private static FrameworkRangeComparer();
    [CompilerGeneratedAttribute]
public static FrameworkRangeComparer get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FrameworkRange x, FrameworkRange y);
    public sealed virtual int GetHashCode(FrameworkRange obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkReducer : object {
    private IFrameworkNameProvider _mappings;
    private IFrameworkCompatibilityProvider _compat;
    public FrameworkReducer(IFrameworkNameProvider mappings, IFrameworkCompatibilityProvider compat);
    public NuGetFramework GetNearest(NuGetFramework framework, IEnumerable`1<NuGetFramework> possibleFrameworks);
    private NuGetFramework GetNearestInternal(NuGetFramework framework, IEnumerable`1<NuGetFramework> possibleFrameworks);
    [IteratorStateMachineAttribute("NuGetClone.Frameworks.FrameworkReducer/<ReduceEquivalent>d__6")]
public IEnumerable`1<NuGetFramework> ReduceEquivalent(IEnumerable`1<NuGetFramework> frameworks);
    public IEnumerable`1<NuGetFramework> ReduceUpwards(IEnumerable`1<NuGetFramework> frameworks);
    public IEnumerable`1<NuGetFramework> ReduceDownwards(IEnumerable`1<NuGetFramework> frameworks);
    private IEnumerable`1<NuGetFramework> ReduceCore(IEnumerable`1<NuGetFramework> frameworks, Func`3<NuGetFramework, NuGetFramework, bool> isCompat);
    private IEnumerable`1<NuGetFramework> GetNearestNonPCLtoPCL(NuGetFramework framework, IEnumerable`1<NuGetFramework> reduced);
    private IEnumerable`1<NuGetFramework> GetNearestPCLtoPCL(NuGetFramework framework, IEnumerable`1<NuGetFramework> reduced);
    private Dictionary`2<NuGetFramework, IEnumerable`1<NuGetFramework>> ExplodePortableFrameworks(IEnumerable`1<NuGetFramework> pcls);
    private IEnumerable`1<NuGetFramework> ExplodePortableFramework(NuGetFramework pcl, bool includeOptional);
    private NuGetFramework GetBestPCL(IEnumerable`1<NuGetFramework> reduced);
    private bool IsBetterPCL(NuGetFramework current, NuGetFramework considering);
    [CompilerGeneratedAttribute]
private bool <ReduceUpwards>b__7_2(NuGetFramework x, NuGetFramework y);
    [CompilerGeneratedAttribute]
private bool <ReduceDownwards>b__8_1(NuGetFramework x, NuGetFramework y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.FrameworkSpecificMapping : object {
    [CompilerGeneratedAttribute]
private string <FrameworkIdentifier>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private KeyValuePair`2<string, string> <Mapping>k__BackingField;
    public string FrameworkIdentifier { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, string> Mapping { get; }
    public FrameworkSpecificMapping(string frameworkIdentifier, string key, string value);
    public FrameworkSpecificMapping(string frameworkIdentifier, KeyValuePair`2<string, string> mapping);
    [CompilerGeneratedAttribute]
public string get_FrameworkIdentifier();
    [CompilerGeneratedAttribute]
public KeyValuePair`2<string, string> get_Mapping();
}
[NullableContextAttribute("1")]
internal interface NuGetClone.Frameworks.IFrameworkCompatibilityListProvider {
    public abstract virtual IEnumerable`1<NuGetFramework> GetFrameworksSupporting(NuGetFramework target);
}
[NullableContextAttribute("1")]
internal interface NuGetClone.Frameworks.IFrameworkCompatibilityProvider {
    public abstract virtual bool IsCompatible(NuGetFramework framework, NuGetFramework other);
}
[NullableContextAttribute("1")]
internal interface NuGetClone.Frameworks.IFrameworkMappings {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierSynonyms { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> IdentifierShortNames { get; }
    public IEnumerable`1<FrameworkSpecificMapping> ProfileShortNames { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> EquivalentFrameworks { get; }
    public IEnumerable`1<FrameworkSpecificMapping> EquivalentProfiles { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<string, string>> SubSetFrameworks { get; }
    public IEnumerable`1<OneWayCompatibilityMappingEntry> CompatibilityMappings { get; }
    public IEnumerable`1<string> NonPackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> PackageBasedFrameworkPrecedence { get; }
    public IEnumerable`1<string> EquivalentFrameworkPrecedence { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> ShortNameReplacements { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> FullNameReplacements { get; }
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierSynonyms();
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> get_IdentifierShortNames();
    public abstract virtual IEnumerable`1<FrameworkSpecificMapping> get_ProfileShortNames();
    public abstract virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_EquivalentFrameworks();
    public abstract virtual IEnumerable`1<FrameworkSpecificMapping> get_EquivalentProfiles();
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, string>> get_SubSetFrameworks();
    public abstract virtual IEnumerable`1<OneWayCompatibilityMappingEntry> get_CompatibilityMappings();
    public abstract virtual IEnumerable`1<string> get_NonPackageBasedFrameworkPrecedence();
    public abstract virtual IEnumerable`1<string> get_PackageBasedFrameworkPrecedence();
    public abstract virtual IEnumerable`1<string> get_EquivalentFrameworkPrecedence();
    public abstract virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_ShortNameReplacements();
    public abstract virtual IEnumerable`1<KeyValuePair`2<NuGetFramework, NuGetFramework>> get_FullNameReplacements();
}
[NullableContextAttribute("1")]
internal interface NuGetClone.Frameworks.IFrameworkNameProvider {
    public abstract virtual bool TryGetIdentifier(string identifierShortName, String& identifier);
    public abstract virtual bool TryGetShortIdentifier(string identifier, String& identifierShortName);
    public abstract virtual bool TryGetProfile(string frameworkIdentifier, string profileShortName, String& profile);
    public abstract virtual bool TryGetShortProfile(string frameworkIdentifier, string profile, String& profileShortName);
    public abstract virtual bool TryGetVersion(string versionString, Version& version);
    public abstract virtual bool TryGetPlatformVersion(string versionString, Version& version);
    public abstract virtual string GetVersionString(string framework, Version version);
    public abstract virtual bool TryGetPortableProfileNumber(string profile, Int32& profileNumber);
    public abstract virtual bool TryGetPortableProfile(IEnumerable`1<NuGetFramework> supportedFrameworks, Int32& profileNumber);
    public abstract virtual bool TryGetPortableFrameworks(int profile, IEnumerable`1& frameworks);
    public abstract virtual bool TryGetPortableFrameworks(int profile, bool includeOptional, IEnumerable`1& frameworks);
    public abstract virtual bool TryGetPortableFrameworks(string profile, bool includeOptional, IEnumerable`1& frameworks);
    public abstract virtual bool TryGetPortableFrameworks(string shortPortableProfiles, IEnumerable`1& frameworks);
    public abstract virtual bool TryGetPortableCompatibilityMappings(int profile, IEnumerable`1& supportedFrameworkRanges);
    public abstract virtual bool TryGetEquivalentFrameworks(NuGetFramework framework, IEnumerable`1& frameworks);
    public abstract virtual bool TryGetEquivalentFrameworks(FrameworkRange range, IEnumerable`1& frameworks);
    public abstract virtual bool TryGetCompatibilityMappings(NuGetFramework framework, IEnumerable`1& supportedFrameworkRanges);
    public abstract virtual bool TryGetSubSetFrameworks(string frameworkIdentifier, IEnumerable`1& subSetFrameworkIdentifiers);
    [NullableContextAttribute("2")]
public abstract virtual int CompareFrameworks(NuGetFramework x, NuGetFramework y);
    [NullableContextAttribute("2")]
public abstract virtual int CompareEquivalentFrameworks(NuGetFramework x, NuGetFramework y);
    public abstract virtual NuGetFramework GetShortNameReplacement(NuGetFramework framework);
    public abstract virtual NuGetFramework GetFullNameReplacement(NuGetFramework framework);
    public abstract virtual IEnumerable`1<NuGetFramework> GetNetStandardVersions();
    public abstract virtual IEnumerable`1<NuGetFramework> GetCompatibleCandidates();
}
[NullableContextAttribute("1")]
internal interface NuGetClone.Frameworks.IFrameworkSpecific {
    public NuGetFramework TargetFramework { get; }
    public abstract virtual NuGetFramework get_TargetFramework();
}
internal interface NuGetClone.Frameworks.IPortableFrameworkMappings {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> ProfileFrameworks { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> ProfileOptionalFrameworks { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<KeyValuePair`2<int, FrameworkRange>> CompatibilityMappings { get; }
    public abstract virtual IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> get_ProfileFrameworks();
    public abstract virtual IEnumerable`1<KeyValuePair`2<int, NuGetFramework[]>> get_ProfileOptionalFrameworks();
    public abstract virtual IEnumerable`1<KeyValuePair`2<int, FrameworkRange>> get_CompatibilityMappings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.NuGetFramework : object {
    private string _frameworkIdentifier;
    private Version _frameworkVersion;
    private string _frameworkProfile;
    [NullableAttribute("2")]
private string _targetFrameworkMoniker;
    [NullableAttribute("2")]
private string _targetPlatformMoniker;
    private Nullable`1<int> _hashCode;
    private static int Version5;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <PlatformVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNet5Era>k__BackingField;
    public static IEqualityComparer`1<NuGetFramework> Comparer;
    public static IEqualityComparer`1<NuGetFramework> FrameworkNameComparer;
    private static SortedSet`1<string> PackagesBased;
    public static NuGetFramework UnsupportedFramework;
    public static NuGetFramework AgnosticFramework;
    public static NuGetFramework AnyFramework;
    private static Char[] CommaSeparator;
    public string Framework { get; }
    public Version Version { get; }
    public string Platform { get; }
    public Version PlatformVersion { get; }
    public bool HasPlatform { get; }
    public bool HasProfile { get; }
    public string Profile { get; }
    public string DotNetFrameworkName { get; }
    public string DotNetPlatformName { get; }
    public bool IsPCL { get; }
    public bool IsPackageBased { get; }
    public bool AllFrameworkVersions { get; }
    public bool IsUnsupported { get; }
    public bool IsAgnostic { get; }
    public bool IsAny { get; }
    public bool IsSpecificFramework { get; }
    internal bool IsNet5Era { get; private set; }
    public NuGetFramework(NuGetFramework framework);
    public NuGetFramework(string framework);
    public NuGetFramework(string framework, Version version);
    public NuGetFramework(string frameworkIdentifier, Version frameworkVersion, string frameworkProfile);
    public NuGetFramework(string frameworkIdentifier, Version frameworkVersion, string platform, Version platformVersion);
    internal NuGetFramework(string frameworkIdentifier, Version frameworkVersion, string profile, string platform, Version platformVersion);
    private static NuGetFramework();
    public string get_Framework();
    public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public Version get_PlatformVersion();
    public bool get_HasPlatform();
    public bool get_HasProfile();
    public string get_Profile();
    public string get_DotNetFrameworkName();
    public string GetDotNetFrameworkName(IFrameworkNameProvider mappings);
    public string get_DotNetPlatformName();
    public string GetShortFolderName();
    private string GetFrameworkIdentifier();
    public virtual string GetShortFolderName(IFrameworkNameProvider mappings);
    private static string GetDisplayVersion(Version version);
    private static string GetLettersAndDigitsOnly(string s);
    public bool get_IsPCL();
    public bool get_IsPackageBased();
    public bool get_AllFrameworkVersions();
    public bool get_IsUnsupported();
    public bool get_IsAgnostic();
    public bool get_IsAny();
    public bool get_IsSpecificFramework();
    [CompilerGeneratedAttribute]
internal bool get_IsNet5Era();
    [CompilerGeneratedAttribute]
private void set_IsNet5Era(bool value);
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(NuGetFramework other);
    [NullableContextAttribute("2")]
public static bool op_Equality(NuGetFramework left, NuGetFramework right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(NuGetFramework left, NuGetFramework right);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private static Version NormalizeVersion(Version version);
    public static NuGetFramework Parse(string folderName);
    public static NuGetFramework Parse(string folderName, IFrameworkNameProvider mappings);
    public static NuGetFramework ParseComponents(string targetFrameworkMoniker, string targetPlatformMoniker);
    internal static NuGetFramework ParseComponents(string targetFrameworkMoniker, string targetPlatformMoniker, IFrameworkNameProvider mappings);
    private static String[] GetParts(string targetPlatformMoniker);
    public static NuGetFramework ParseFrameworkName(string frameworkName, IFrameworkNameProvider mappings);
    private static void ParseFrameworkNameParts(IFrameworkNameProvider mappings, String[] parts, String& framework, Version& version, String& profile);
    private static void ParsePlatformParts(String[] parts, String& targetPlatformIdentifier, Version& platformVersion);
    public static NuGetFramework ParseFolder(string folderName);
    public static NuGetFramework ParseFolder(string folderName, IFrameworkNameProvider mappings);
    private static bool TryParseDeprecatedFramework(string s, NuGetFramework& framework);
    private static Tuple`3<string, string, string> RawParse(string s);
    private static bool IsLetterOrDot(char c);
    private static bool IsDigitOrDot(char c);
    private static bool IsValidProfileChar(char c);
    private static bool TryParseSpecialFramework(string frameworkString, NuGetFramework& framework);
    private static bool TryParseCommonFramework(string frameworkString, NuGetFramework& framework);
    private static string SingleOrDefaultSafe(IEnumerable`1<string> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.NuGetFrameworkFullComparer : object {
    [CompilerGeneratedAttribute]
private static NuGetFrameworkFullComparer <Instance>k__BackingField;
    public static NuGetFrameworkFullComparer Instance { get; }
    private static NuGetFrameworkFullComparer();
    [CompilerGeneratedAttribute]
public static NuGetFrameworkFullComparer get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(NuGetFramework x, NuGetFramework y);
    public sealed virtual int GetHashCode(NuGetFramework obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.NuGetFrameworkNameComparer : object {
    [CompilerGeneratedAttribute]
private static NuGetFrameworkNameComparer <Instance>k__BackingField;
    public static NuGetFrameworkNameComparer Instance { get; }
    private static NuGetFrameworkNameComparer();
    [CompilerGeneratedAttribute]
public static NuGetFrameworkNameComparer get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(NuGetFramework x, NuGetFramework y);
    public sealed virtual int GetHashCode(NuGetFramework obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.NuGetFrameworkSorter : object {
    [CompilerGeneratedAttribute]
private static NuGetFrameworkSorter <Instance>k__BackingField;
    public static NuGetFrameworkSorter Instance { get; }
    private static NuGetFrameworkSorter();
    [CompilerGeneratedAttribute]
public static NuGetFrameworkSorter get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(NuGetFramework x, NuGetFramework y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NuGetClone.Frameworks.NuGetFrameworkUtility : object {
    internal static T GetNearest(IEnumerable`1<T> items, NuGetFramework framework, Func`2<T, NuGetFramework> selector);
    public static T GetNearest(IEnumerable`1<T> items, NuGetFramework framework, IFrameworkNameProvider frameworkMappings, IFrameworkCompatibilityProvider compatibilityProvider, Func`2<T, NuGetFramework> selector);
    public static T GetNearest(IEnumerable`1<T> items, NuGetFramework framework);
    public static T GetNearest(IEnumerable`1<T> items, NuGetFramework framework, IFrameworkNameProvider frameworkMappings, IFrameworkCompatibilityProvider compatibilityProvider);
    public static bool IsCompatibleWithFallbackCheck(NuGetFramework projectFramework, NuGetFramework candidate);
    public static bool IsNetCore50AndUp(NuGetFramework framework);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.OneWayCompatibilityMappingEntry : object {
    private FrameworkRange _targetFramework;
    private FrameworkRange _supportedFramework;
    public FrameworkRange TargetFrameworkRange { get; }
    public FrameworkRange SupportedFrameworkRange { get; }
    public static CompatibilityMappingComparer Comparer { get; }
    public OneWayCompatibilityMappingEntry(FrameworkRange targetFramework, FrameworkRange supportedFramework);
    public FrameworkRange get_TargetFrameworkRange();
    public FrameworkRange get_SupportedFrameworkRange();
    public static CompatibilityMappingComparer get_Comparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(OneWayCompatibilityMappingEntry other);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.Frameworks.Strings : object {
    internal static string ArgumentCannotBeNullOrEmpty { get; }
    internal static string FrameworkDoesNotSupportProfiles { get; }
    internal static string FrameworkMismatch { get; }
    internal static string InvalidFrameworkIdentifier { get; }
    internal static string InvalidFrameworkVersion { get; }
    internal static string InvalidPlatformVersion { get; }
    internal static string InvalidPortableFrameworksDueToHyphen { get; }
    internal static string MissingPortableFrameworks { get; }
    internal static string get_ArgumentCannotBeNullOrEmpty();
    internal static string get_FrameworkDoesNotSupportProfiles();
    internal static string get_FrameworkMismatch();
    internal static string get_InvalidFrameworkIdentifier();
    internal static string get_InvalidFrameworkVersion();
    internal static string get_InvalidPlatformVersion();
    internal static string get_InvalidPortableFrameworksDueToHyphen();
    internal static string get_MissingPortableFrameworks();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class NuGetClone.NoAllocEnumerateExtensions : object {
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingListEnumerable`1<T> NoAllocEnumerate(IList`1<T> list);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingEnumerable`1<T> NoAllocEnumerate(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static OptimisticallyNonAllocatingDictionaryEnumerable`2<TKey, TValue> NoAllocEnumerate(IDictionary`2<TKey, TValue> dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class NuGetClone.Shared.HashCodeCombiner : ValueType {
    private static long Seed;
    private long _combinedHash;
    internal int CombinedHash { get; }
    internal int get_CombinedHash();
    private void AddHashCode(int i);
    internal void AddObject(int i);
    internal void AddObject(bool b);
    internal void AddObject(T o, IEqualityComparer`1<T> comparer);
    internal void AddObject(T o);
    [NullableContextAttribute("0")]
internal void AddStruct(Nullable`1<T> o);
    [NullableContextAttribute("0")]
internal void AddStruct(T o);
    [NullableContextAttribute("2")]
internal void AddStringIgnoreCase(string s);
    internal void AddSequence(IEnumerable`1<T> sequence);
    internal void AddSequence(T[] array);
    internal void AddSequence(IList`1<T> list);
    internal void AddSequence(IReadOnlyList`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list);
    internal void AddUnorderedSequence(IEnumerable`1<T> list, IEqualityComparer`1<T> comparer);
    internal void AddDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    internal static int GetHashCode(T1 o1, T2 o2);
    internal static int GetHashCode(T1 o1, T2 o2, T3 o3);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.SimplePool`1 : object {
    private ConcurrentStack`1<T> _values;
    private Func`1<T> _allocate;
    public SimplePool`1(Func`1<T> allocate);
    public T Allocate();
    public void Free(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class NuGetClone.StringBuilderPool : object {
    private static int MaxPoolSize;
    private SimplePool`1<StringBuilder> _pool;
    public static StringBuilderPool Shared;
    private static StringBuilderPool();
    public StringBuilder Rent(int minimumCapacity);
    public string ToStringAndReturn(StringBuilder builder);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
