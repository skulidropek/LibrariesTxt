[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ACTCTX : ValueType {
    public int cbSize;
    public UInt32 dwFlags;
    public string lpSource;
    public ushort wProcessorArchitecture;
    public short wLangId;
    public string lpAssemblyDirectory;
    public string lpResourceName;
    public string lpApplicationName;
    private IntPtr hModule;
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.BinaryReaderHelper : object {
    [ExtensionAttribute]
public static string GetUTF16String(Byte[] bytes, int index);
    [ExtensionAttribute]
public static string GetUTF8String(Byte[] bytes, int index);
    [ExtensionAttribute]
public static UInt32 GetUInt32(Byte[] bytes, int index);
    [ExtensionAttribute]
public static int GetInt32(Byte[] bytes, int index);
    [ExtensionAttribute]
public static ulong GetUInt64(Byte[] bytes, int index);
    [ExtensionAttribute]
public static ulong GetVA(Byte[] bytes, int index, int pointerSize);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.CPPTestCaseProperties : object {
    private static string priorityAttributeName;
    private static string ownerAttributeName;
    internal static TestProperty Priority;
    internal static TestProperty Owner;
    private static CPPTestCaseProperties();
}
[ExtensionUriAttribute("executor://UAPCppExecutorIdentifier")]
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.DummyUWPCppTestExecutor : TestExecutor {
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.Guids : object {
    public static string IID_CppTestResult;
    public static string IID_TestLog;
    public static string IID_ExtensionTypeLibID;
}
public static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.MeasurementBlocks : object {
    public static string DiscoverTests;
    public static string ExecuteTests;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AppContainerSource { get; }
    internal static string BadConfigurationFile { get; }
    internal static string NotSupportedFileFormat { get; }
    internal static string NotSupportedMessageLevel { get; }
    internal static string NullDiscoverSink { get; }
    internal static string RetriveEngineFailure { get; }
    internal static string WrongTestCases { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AppContainerSource();
    internal static string get_BadConfigurationFile();
    internal static string get_NotSupportedFileFormat();
    internal static string get_NotSupportedMessageLevel();
    internal static string get_NullDiscoverSink();
    internal static string get_RetriveEngineFailure();
    internal static string get_WrongTestCases();
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.TestCaseEnumerator : object {
    private List`1<TestCaseForExecution> testCases;
    private int index;
    public TestCaseEnumerator(List`1<TestCaseForExecution> cppTestCases);
    public sealed virtual ITestCase GetNext();
}
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.TestCaseForDiscover : object {
    private static string HiddenSuffix;
    private static string Seperator;
    [CompilerGeneratedAttribute]
private TestCase <ObjectModelTestCase>k__BackingField;
    [CompilerGeneratedAttribute]
private ITestCase <TestCase>k__BackingField;
    public TestCase ObjectModelTestCase { get; public set; }
    public ITestCase TestCase { get; internal set; }
    public TestCaseForDiscover(ITestCase testCase);
    public TestCaseForDiscover(ITestCase testCase, string executorUri);
    private void AddTraits(String[] attributeNames, String[] attributeValues);
    [CompilerGeneratedAttribute]
public TestCase get_ObjectModelTestCase();
    [CompilerGeneratedAttribute]
public void set_ObjectModelTestCase(TestCase value);
    [CompilerGeneratedAttribute]
public ITestCase get_TestCase();
    [CompilerGeneratedAttribute]
internal void set_TestCase(ITestCase value);
    private static TestProperty GetTestProperty(string name);
    private void AddAttributes(String[] attributeNames, String[] attributeValues);
}
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.TestCaseForExecution : object {
    private static string AppContainerAttributeName;
    private TestCase testCase;
    private bool isAppContainer;
    public TestCase ObjectModelTestCase { get; }
    public bool IsAppContainer { get; }
    public TestCaseForExecution(TestCase test, bool isAppContainer);
    public TestCase get_ObjectModelTestCase();
    public bool get_IsAppContainer();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetFilePath();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetLineNumber();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetSourceFile();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetAttributes(String[]& names, String[]& values);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetAttribute(string attributeName);
    private string GetAttribute(string attributeName);
}
[CategoryAttribute("native")]
[ExportAttribute("Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestDiscoverer")]
[FileExtensionAttribute(".dll")]
[FileExtensionAttribute(".exe")]
[DefaultExecutorUriAttribute("executor://CppUnitTestExecutor/v1")]
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.TestDiscoverer : object {
    public sealed virtual void DiscoverTests(IEnumerable`1<string> sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink);
    private static void GetTestsImpl(string filePath, IMessageLogger logger, ITestCaseDiscoverySink discoverySink);
    public static bool IsRunningInAppContainerMode();
    public static bool IsUAPNativeBinary(string filePath);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.TestEngineHelper : object {
    private static ITestEngine instance;
    private static object locker;
    private static string FramewokrFolderName;
    private static string TestEngineFileName;
    private static string TestEngineTypeName;
    private static TestEngineHelper();
    public static ITestEngine GetFramework(bool isAppContainer, BinaryPlatform platform);
    public static void ReleaseTestEngine();
    private static string GetTestEngineInfo();
}
[ExportAttribute("Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestExecutor")]
[ExtensionUriAttribute("executor://CppUnitTestExecutor/v1")]
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.TestExecutor : object {
    public static string ExecutorUri;
    private static Dictionary`2<string, TestProperty> s_supportedPropertiesCache;
    private static TestExecutor();
    public sealed virtual void RunTests(IEnumerable`1<TestCase> testCases, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void RunTests(IEnumerable`1<string> sources, IRunContext runContext, IFrameworkHandle frameworkHandle);
    public sealed virtual void Cancel();
    private static object PropertyValueProvider(TestCase currentTest, string property);
    private static TestProperty PropertyProvider(string property);
    private static ITestCaseFilterExpression GetFilterExpression(IRunContext runContext, IFrameworkHandle frameworkHandle, Boolean& filterHasError);
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("261A7DE8-895E-473F-A0D9-FD44BB2BB713")]
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.TestLog : object {
    private IMessageLogger logger;
    private static string CppUnitTraceSwitchName;
    private static TraceSwitch cppUnitTraceSwitch;
    private Dictionary`2<string, TestCaseForExecution> testCasesMap;
    public TestLog(IMessageLogger testLog, IEnumerable`1<TestCaseForExecution> testCases);
    private static TestLog();
    public sealed virtual void SendTestMessage(TestMessageLevel messageLevel, string message);
    public sealed virtual void SendTestResult(ITestCase testCase, ITestResult testResult);
    public sealed virtual void SendTestExecutionStart(ITestCase testCase);
    public sealed virtual void SendTestExecutionEnd(ITestCase testCase, TestOutcome outcome);
    private static void DoLogging(ITestResult result, ITestExecutionRecorder iTestExecutionRecorder, TestCaseForExecution testCase);
    private static TestOutcome GetTestOutcome(TestOutcome outcome);
    private static string GetTestCaseFullName(ITestCase testCase);
}
public static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.UAPConstants : object {
    public static string UAPCppIdentifierUriString;
    public static Uri UAPCppIdentifierUri;
    private static UAPConstants();
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.CppUnitTestExtension.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
[GuidAttribute("00000001-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IClassFactory {
    public abstract virtual object CreateInstance(object pOuterUnk, Guid& riid);
    public abstract virtual void LockServer(bool fLock);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_DATA_DIRECTORY : object {
    internal UInt32 VirtualAddress;
    [CompilerGeneratedAttribute]
private UInt32 <Size>k__BackingField;
    public UInt32 Size { get; private set; }
    public IMAGE_DATA_DIRECTORY(BinaryReader br);
    [CompilerGeneratedAttribute]
public UInt32 get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(UInt32 value);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_DOS_HEADER : object {
    public static ushort IMAGE_DOS_SIGNATURE;
    public ushort e_magic;
    public ushort e_cblp;
    public ushort e_cp;
    public ushort e_crlc;
    public ushort e_cparhdr;
    public ushort e_minalloc;
    public ushort e_maxalloc;
    public ushort e_ss;
    public ushort e_sp;
    public ushort e_csum;
    public ushort e_ip;
    public ushort e_cs;
    public ushort e_lfarlc;
    public ushort e_ovno;
    public UInt16[] e_res;
    public ushort e_oemid;
    public ushort e_oeminfo;
    public UInt16[] e_res2;
    public ushort e_lfanew;
    public IMAGE_DOS_HEADER(BinaryReader br);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_FILE_HEADER : object {
    public static UInt32 IMAGE_NT_SIGNATURE;
    public static UInt32 Size;
    public ushort Machine;
    [CompilerGeneratedAttribute]
private ushort <NumberOfSections>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <SizeOfOptionalHeader>k__BackingField;
    private ushort Characteristics;
    private UInt32 timeDateStamp;
    private UInt32 pointerToSymbolTable;
    private UInt32 numberOfSymbols;
    public ushort NumberOfSections { get; private set; }
    public ushort SizeOfOptionalHeader { get; private set; }
    public IMAGE_FILE_HEADER(BinaryReader br);
    [CompilerGeneratedAttribute]
public ushort get_NumberOfSections();
    [CompilerGeneratedAttribute]
private void set_NumberOfSections(ushort value);
    [CompilerGeneratedAttribute]
public ushort get_SizeOfOptionalHeader();
    [CompilerGeneratedAttribute]
private void set_SizeOfOptionalHeader(ushort value);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_IMPORT_DESCRIPTOR : object {
    public static UInt32 Size;
    [CompilerGeneratedAttribute]
private UInt32 <Characteristics>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OriginalFirstThunk>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <TimeDateStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ForwarderChain>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <FirstThunk>k__BackingField;
    public UInt32 Characteristics { get; private set; }
    public UInt32 OriginalFirstThunk { get; private set; }
    public UInt32 TimeDateStamp { get; private set; }
    public UInt32 ForwarderChain { get; private set; }
    public UInt32 Name { get; private set; }
    public UInt32 FirstThunk { get; private set; }
    public IMAGE_IMPORT_DESCRIPTOR(BinaryReader br);
    [CompilerGeneratedAttribute]
public UInt32 get_Characteristics();
    [CompilerGeneratedAttribute]
private void set_Characteristics(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_OriginalFirstThunk();
    [CompilerGeneratedAttribute]
private void set_OriginalFirstThunk(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_TimeDateStamp();
    [CompilerGeneratedAttribute]
private void set_TimeDateStamp(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ForwarderChain();
    [CompilerGeneratedAttribute]
private void set_ForwarderChain(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_FirstThunk();
    [CompilerGeneratedAttribute]
private void set_FirstThunk(UInt32 value);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_OPTIONAL_HEADER32 : object {
    public static ushort IMAGE_NT_OPTIONAL_HDR32_MAGIC;
    public static UInt32 IMAGE_NUMBEROF_DIRECTORY_ENTRIES;
    public static UInt32 Size;
    [CompilerGeneratedAttribute]
private UInt32 <ImageBase>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MajorLinkerVersion>k__BackingField;
    private byte MinorLinkerVersion;
    private UInt32 SizeOfCode;
    private UInt32 SizeOfInitializedData;
    private UInt32 SizeOfUninitializedData;
    private UInt32 AddressOfEntryPoint;
    private UInt32 BaseOfCode;
    private UInt32 BaseOfData;
    private UInt32 SectionAlignment;
    private UInt32 FileAlignment;
    private ushort MajorOperatingSystemVersion;
    private ushort MinorOperatingSystemVersion;
    private ushort MajorImageVersion;
    private ushort MinorImageVersion;
    private ushort MajorSubsystemVersion;
    private ushort MinorSubsystemVersion;
    private UInt32 Win32VersionValue;
    private UInt32 SizeOfImage;
    private UInt32 SizeOfHeaders;
    private UInt32 CheckSum;
    private ushort Subsystem;
    private ushort DllCharacteristics;
    private UInt32 SizeOfStackReserve;
    private UInt32 SizeOfStackCommit;
    private UInt32 SizeOfHeapReserve;
    private UInt32 SizeOfHeapCommit;
    private UInt32 LoaderFlags;
    private UInt32 NumberOfRvaAndSizes;
    private IMAGE_DATA_DIRECTORY[] DataDirectory;
    public UInt32 ImageBase { get; public set; }
    public bool HasClrHeader { get; }
    public byte MajorLinkerVersion { get; private set; }
    public bool IsAppContainer { get; }
    public IMAGE_OPTIONAL_HEADER32(BinaryReader br);
    [CompilerGeneratedAttribute]
public UInt32 get_ImageBase();
    [CompilerGeneratedAttribute]
public void set_ImageBase(UInt32 value);
    public bool get_HasClrHeader();
    [CompilerGeneratedAttribute]
public byte get_MajorLinkerVersion();
    [CompilerGeneratedAttribute]
private void set_MajorLinkerVersion(byte value);
    public bool get_IsAppContainer();
    public IMAGE_DATA_DIRECTORY GetDataDirectory(UInt32 index);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_OPTIONAL_HEADER64 : object {
    public static ushort IMAGE_NT_OPTIONAL_HDR64_MAGIC;
    public static UInt32 IMAGE_NUMBEROF_DIRECTORY_ENTRIES;
    public static UInt32 Size;
    [CompilerGeneratedAttribute]
private ulong <ImageBase>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <MajorLinkerVersion>k__BackingField;
    private byte MinorLinkerVersion;
    private UInt32 SizeOfCode;
    private UInt32 SizeOfInitializedData;
    private UInt32 SizeOfUninitializedData;
    private UInt32 AddressOfEntryPoint;
    private UInt32 BaseOfCode;
    private UInt32 SectionAlignment;
    private UInt32 FileAlignment;
    private ushort MajorOperatingSystemVersion;
    private ushort MinorOperatingSystemVersion;
    private ushort MajorImageVersion;
    private ushort MinorImageVersion;
    private ushort MajorSubsystemVersion;
    private ushort MinorSubsystemVersion;
    private UInt32 Win32VersionValue;
    private UInt32 SizeOfImage;
    private UInt32 SizeOfHeaders;
    private UInt32 CheckSum;
    private ushort Subsystem;
    private ushort DllCharacteristics;
    private ulong SizeOfStackReserve;
    private ulong SizeOfStackCommit;
    private ulong SizeOfHeapReserve;
    private ulong SizeOfHeapCommit;
    private UInt32 LoaderFlags;
    private UInt32 NumberOfRvaAndSizes;
    private IMAGE_DATA_DIRECTORY[] DataDirectory;
    public ulong ImageBase { get; private set; }
    public bool HasClrHeader { get; }
    public byte MajorLinkerVersion { get; private set; }
    public bool IsAppContainer { get; }
    public IMAGE_OPTIONAL_HEADER64(BinaryReader br);
    [CompilerGeneratedAttribute]
public ulong get_ImageBase();
    [CompilerGeneratedAttribute]
private void set_ImageBase(ulong value);
    public bool get_HasClrHeader();
    [CompilerGeneratedAttribute]
public byte get_MajorLinkerVersion();
    [CompilerGeneratedAttribute]
private void set_MajorLinkerVersion(byte value);
    public bool get_IsAppContainer();
    public IMAGE_DATA_DIRECTORY GetDataDirectory(UInt32 index);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IMAGE_SECTION_HEADER : object {
    public static int IMAGE_SIZEOF_SHORT_NAME;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PhysicalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <VirtualAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SizeOfRawData>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PointerToRawData>k__BackingField;
    private UInt32 VirtualSize;
    private UInt32 PointerToRelocations;
    private UInt32 PointerToLinenumbers;
    private ushort NumberOfRelocations;
    private ushort NumberOfLinenumbers;
    private UInt32 Characteristics;
    public string Name { get; private set; }
    public UInt32 PhysicalAddress { get; private set; }
    public UInt32 VirtualAddress { get; private set; }
    public UInt32 SizeOfRawData { get; private set; }
    public UInt32 PointerToRawData { get; private set; }
    public IMAGE_SECTION_HEADER(BinaryReader br);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_PhysicalAddress();
    [CompilerGeneratedAttribute]
private void set_PhysicalAddress(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_VirtualAddress();
    [CompilerGeneratedAttribute]
private void set_VirtualAddress(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SizeOfRawData();
    [CompilerGeneratedAttribute]
private void set_SizeOfRawData(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PointerToRawData();
    [CompilerGeneratedAttribute]
private void set_PointerToRawData(UInt32 value);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.NativeMethods : object {
    public static IntPtr LoadLibraryW(string lpFileName);
    public static bool FreeLibrary(IntPtr hModule);
    public static IntPtr GetProcAddress(IntPtr hModule, string procName);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.PEConstants : object {
    public static UInt32 IMAGE_DIRECTORY_ENTRY_EXPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_IMPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_RESOURCE;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_EXCEPTION;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_SECURITY;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_BASERELOC;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_DEBUG;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_ARCHITECTURE;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_GLOBALPTR;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_TLS;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_IAT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT;
    public static UInt32 IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR;
    public static ulong IMAGE_ORDINAL_FLAG64;
    public static UInt32 IMAGE_ORDINAL_FLAG32;
    public static UInt32 IMAGE_REL_BASED_ABSOLUTE;
    public static UInt32 IMAGE_REL_BASED_HIGHLOW;
    public static UInt32 IMAGE_REL_BASED_DIR64;
    public static ushort IMAGE_FILE_MACHINE_I386;
    public static ushort IMAGE_FILE_MACHINE_IA64;
    public static ushort IMAGE_FILE_MACHINE_AMD64;
    public static ushort IMAGE_FILE_MACHINE_ARMNT;
    public static ushort IMAGE_FILE_MACHINE_ARM64;
    public static ushort IMAGE_DLLCHARACTERISTICS_APPCONTAINER;
    public static UInt32 InvalidRVA;
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.PEReader : object {
    private string _filePath;
    private bool _is32Bits;
    private bool _isClr;
    private bool _isAppContainer;
    private IMAGE_FILE_HEADER _fileHeader;
    private IMAGE_OPTIONAL_HEADER32 _optionalHeader32;
    private IMAGE_OPTIONAL_HEADER64 _optionalHeader64;
    private IMAGE_SECTION[] _sections;
    private static byte ValidLinkerVersion;
    public string FilePath { get; }
    public bool Is32Bits { get; }
    public bool IsClr { get; }
    public bool IsAppContainer { get; }
    public ulong ImageBase { get; }
    public PEReader(string filePath);
    public string get_FilePath();
    public bool get_Is32Bits();
    public bool get_IsClr();
    public bool get_IsAppContainer();
    public ulong get_ImageBase();
    public IMAGE_SECTION GetSection(string name);
    public IMAGE_FILE_HEADER GetFileHeader();
    public bool GetRawDataVA(ulong va, UInt32 len, Byte[]& rawData, Int32& index);
    private bool GetRawData(UInt32 rva, UInt32 len, Byte[]& rawData, Int32& index);
    internal bool IsValidLinker();
    internal List`1<string> ProcessImports();
    private string GetDllName(Byte[] rawData, int index);
    private IMAGE_DATA_DIRECTORY GetDataDirectory(UInt32 index);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.Resources : object {
    [CompilerGeneratedAttribute]
private static string <WrongIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <InvalidPEHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <EndOfStream>k__BackingField;
    public static string WrongIndex { get; public set; }
    public static string InvalidPEHeader { get; public set; }
    public static string EndOfStream { get; public set; }
    [CompilerGeneratedAttribute]
public static string get_WrongIndex();
    [CompilerGeneratedAttribute]
public static void set_WrongIndex(string value);
    [CompilerGeneratedAttribute]
public static string get_InvalidPEHeader();
    [CompilerGeneratedAttribute]
public static void set_InvalidPEHeader(string value);
    [CompilerGeneratedAttribute]
public static string get_EndOfStream();
    [CompilerGeneratedAttribute]
public static void set_EndOfStream(string value);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.VcRuntimeReferencesHelper : object {
    private static string VcRuntimeRef;
    private static string UapAppApiRef;
    private static string UapDebugAppApiRef;
    internal static IEnumerable`1<string> GetVcRuntimeReferences(IEnumerable`1<string> references);
    internal static bool ContainsUapAppApiRef(IEnumerable`1<string> references);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
