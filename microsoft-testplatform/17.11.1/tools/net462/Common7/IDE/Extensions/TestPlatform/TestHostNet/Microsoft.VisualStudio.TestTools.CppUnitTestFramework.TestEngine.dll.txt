[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ACTCTX : ValueType {
    public int cbSize;
    public UInt32 dwFlags;
    public string lpSource;
    public ushort wProcessorArchitecture;
    public short wLangId;
    public string lpAssemblyDirectory;
    public string lpResourceName;
    public string lpApplicationName;
    private IntPtr hModule;
}
[GuidAttribute("00000001-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.VisualStudio.TestTools.CppUnitTestFramework.IClassFactory {
    public abstract virtual object CreateInstance(object pOuterUnk, Guid& riid);
    public abstract virtual void LockServer(bool fLock);
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.NativeMethods : object {
    public static IntPtr LoadLibraryW(string lpFileName);
    public static bool FreeLibrary(IntPtr hModule);
    public static IntPtr GetProcAddress(IntPtr hModule, string procName);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.CppTestCasePropertyNameHelper : object {
    private static string HidenSuffix;
    public static string PlatformPropertyName;
    public static string TestClassPropertyName;
    public static string TestMethodPropertyName;
    public static string AppContainerPropertyName;
    public static string CreateHiddenPropertyName(string propertyName);
}
[ComVisibleAttribute("True")]
[TypeLibTypeAttribute("2")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("B78F51CF-7470-4E0B-8996-649CCD904821")]
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.CppTestEngine : object {
    private int running;
    private object engineLock;
    private ExecutorHelper executorHelper;
    private static string versionAttributeName;
    private BinaryPlatform platform;
    public CppTestEngine(BinaryPlatform platform);
    public sealed virtual ITestCaseEnumerator GetTestCases(string filePath, ITestLog testLog);
    public sealed virtual void RunTestCases(ITestCaseEnumerator testCases, IRunSettings settings, ITestLog testLog);
    public sealed virtual void Cancel();
}
[ComVisibleAttribute("False")]
[TypeLibTypeAttribute("2")]
[ClassInterfaceAttribute("0")]
[GuidAttribute("95B3A42F-DFB5-4D3D-9426-04D9668D421C")]
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.CppTestResult : object {
    private string computerName;
    private long startTimeTicks;
    private long endTimeTicks;
    private TestOutcome outcome;
    private string errorMsg;
    private string errorStackTrace;
    private string errorFilePath;
    private int errorLineNumber;
    private int errorColumnNumber;
    private List`1<string> infoMessages;
    public sealed virtual void AddInfoMessage(string infoMessage);
    public sealed virtual void SetMachineName(string machineName);
    public sealed virtual void SetStartTime(long ticks);
    public sealed virtual void SetEndTime(long ticks);
    public sealed virtual void SetErrorFilePath(string filePath);
    public sealed virtual void SetErrorLineNumber(int lineNumber);
    public void SetErrorColumnNumber(int columnNumber);
    public sealed virtual void SetErrorMessage(string message);
    public sealed virtual void SetErrorStackTrace(string stackTrace);
    public sealed virtual void SetTestOutcome(TestOutcome testOutcome);
    public sealed virtual string GetMachineName();
    public sealed virtual long GetStartTime();
    public sealed virtual long GetEndTime();
    public sealed virtual String[] GetInfoMessages();
    public sealed virtual string GetErrorFilePath();
    public sealed virtual int GetErrorLineNumber();
    public int GetErrorColumnNumber();
    public sealed virtual string GetErrorMessage();
    public sealed virtual string GetErrorStackTrace();
    public sealed virtual TestOutcome GetTestOutcome();
}
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ExecutorHelper : object {
    private static IExecutor executor;
    private static IntPtr executorModuleHandle;
    private static IntPtr frameworkModuleHandle;
    private static IntPtr dbgHelperModuleHandle;
    private static object locker;
    private static string FrameworkFileName;
    private static string Framework64FileName;
    private static string FrameworkARMFileName;
    private static string FrameworkARM64FileName;
    private static string ExecutorFileName;
    private static string Executor64FileName;
    private static string ExecutorARMFileName;
    private static string ExecutorARM64FileName;
    private static string DbgHelpFileName;
    private static string DllGetClassObject;
    private static string PROCESSOR_ARCHITECTURE;
    private static string PROCESSOR_ARM;
    private static string PROCESSOR_ARM64;
    private static string CppUnitTraceSwitchName;
    private static TraceSwitch cppUnitTraceSwitch;
    private static ExecutorHelper();
    public IExecutor GetExecutor(ExecutionPlatform platform, ITestLog logger);
    private static void CreateExecutor(ExecutionPlatform platform, ITestLog logger, IExecutor& executor, IntPtr& executorModuleHandle);
    public void ReleaseExecutor();
    private static string GetFrameworkFileName(ExecutionPlatform platform);
    private static string GetExecutorInfo(ExecutionPlatform platform, String& executorPath, Guid& executorGuid);
    private bool IsARM();
    private bool IsARM64();
    private sealed virtual override void System.IDisposable.Dispose();
    [ConditionalAttribute("TRACE")]
private static void TraceEngine(string message);
}
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.Guids : object {
    public static string IID_IExecutor;
    public static string IID_Executor32;
    public static string IID_Executor64;
    public static string IID_ExecutorARM64;
    public static string IID_TestCase;
    public static string IID_CTestCase;
    public static string IID_TestCaseEnumerator;
    public static string IID_TestEngine;
    public static string IID_CppTestResult;
    public static string IID_TestEngineTypeLibID;
    public static string IID_ITestCase2;
    public static string IID_IClassFactory;
}
[ComVisibleAttribute("True")]
[GuidAttribute("F6394C31-1465-4638-B2BD-7B72A9C6420E")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.IExecutor {
    public abstract virtual void RunTestCase(ITestCase2 testCase, IRunSettings settings, ITestLog testLog, ITestResult testResult);
    public abstract virtual bool Cleanup();
    public abstract virtual void Abort();
}
[ComVisibleAttribute("True")]
[GuidAttribute("6FF9D910-9D48-495C-AAAD-C82E9EE05EC1")]
[InterfaceTypeAttribute("1")]
public interface Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ITestCase2 {
    public abstract virtual string GetTestClassName();
    public abstract virtual string GetTestMethodName();
    public abstract virtual int GetHelperMethodDecoratedNames(String[]& methodNames, String[]& helperDecoratedNames);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CanceledRun { get; }
    internal static string CanOnlyRunARMOnARM { get; }
    internal static string ExecutorFailStart { get; }
    internal static string ExecutorTerminated { get; }
    internal static string FailedToCreateTestResult { get; }
    internal static string FailedToGetITestResult { get; }
    internal static string NotSupportedPlatform { get; }
    internal static string Run32In64NotSupport { get; }
    internal static string Run64In32NotSupport { get; }
    internal static string WrongExecutor { get; }
    internal static string WrongTestCase { get; }
    internal static string CPPUTFNotAbleToLoad { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CanceledRun();
    internal static string get_CanOnlyRunARMOnARM();
    internal static string get_ExecutorFailStart();
    internal static string get_ExecutorTerminated();
    internal static string get_FailedToCreateTestResult();
    internal static string get_FailedToGetITestResult();
    internal static string get_NotSupportedPlatform();
    internal static string get_Run32In64NotSupport();
    internal static string get_Run64In32NotSupport();
    internal static string get_WrongExecutor();
    internal static string get_WrongTestCase();
    internal static string get_CPPUTFNotAbleToLoad();
}
[GuidAttribute("A3A349A3-BB24-4F69-8535-7F6DD4892EF3")]
internal class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.TestCaseEnumerator : object {
    private List`1<TestCaseForDiscover> testCases;
    private int index;
    public TestCaseEnumerator(List`1<TestCaseForDiscover> comTestCases);
    public sealed virtual ITestCase GetNext();
}
[GuidAttribute("01C387C8-0353-4B09-84EA-07F5FA936ECF")]
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.TestCaseForDiscover : object {
    private CppTestCase testCase;
    private static int HelperNum;
    public CppTestCase CppTestCase { get; }
    public TestCaseForDiscover(CppTestCase cppTestCase);
    public CppTestCase get_CppTestCase();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetFilePath();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetSourceFile();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetLineNumber();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetAttributes(String[]& names, String[]& values);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetAttribute(string attributeName);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ITestCase2.GetTestClassName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ITestCase2.GetTestMethodName();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ITestCase2.GetHelperMethodDecoratedNames(String[]& methodNames, String[]& helperNames);
}
[GuidAttribute("03bc70c0-4209-495b-bd3b-9b7e32206972")]
public class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.TestCaseForExecution : object {
    private ITestCase testCase;
    private string className;
    private string methodName;
    private static int HelperNum;
    private static string IgnoreAttributeName;
    private static string IgnoreAttributeValue;
    public bool IsIgnored { get; }
    public ExecutionPlatform Platform { get; }
    public TestCaseForExecution(ITestCase comTestCase);
    public bool get_IsIgnored();
    public ExecutionPlatform get_Platform();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetFilePath();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetSourceFile();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetLineNumber();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetAttributes(String[]& names, String[]& values);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.ComInterfaces.ITestCase.GetAttribute(string attributeName);
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ITestCase2.GetTestClassName();
    private sealed virtual override string Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ITestCase2.GetTestMethodName();
    private sealed virtual override int Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.ITestCase2.GetHelperMethodDecoratedNames(String[]& methodNames, String[]& helperNames);
    private string GetValueFromName(string name);
}
[CompilerGeneratedAttribute]
internal static class Microsoft.VisualStudio.TestTools.CppUnitTestFramework.TestEngine.VisualStudioVersionInfo : object {
    public static string MajorVersion;
    public static string MinorVersion;
    public static string ProductVersion;
    public static string VSAssemblyVersion;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
