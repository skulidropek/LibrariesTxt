[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.Execution.DebuggerBreakpoint : object {
    internal static void AttachVisualStudioDebugger(string environmentVariable);
    private static bool AttachVs(Process process, Nullable`1<int> vsPid);
    [NullableContextAttribute("2")]
private static string FindAttachVs();
    private static string FindOnPath(string exeName);
    internal static void WaitForDebugger(string environmentVariable);
    internal static void WaitForNativeDebugger(string environmentVariable);
    private static void Break();
    private static bool ShouldNotBreak();
    private static void BreakNative();
    internal static bool IsDebuggerPresent();
    internal static void DebugBreak();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Execution.ProcDumpExecutableHelper : object {
    private static string ProcdumpUnixProcess;
    private IProcessHelper _processHelper;
    private IFileHelper _fileHelper;
    private IEnvironment _environment;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    public ProcDumpExecutableHelper(IProcessHelper processHelper, IFileHelper fileHelper, IEnvironment environment, IEnvironmentVariableHelper environmentVariableHelper);
    public static string ProcDumpFileName(PlatformArchitecture architecture);
    public bool TryGetProcDumpExecutable(String& path);
    public bool TryGetProcDumpExecutable(int processId, String& path);
    public bool TryGetProcDumpExecutable(PlatformArchitecture architecture, String& path);
    private bool TryGetExecutablePath(string executable, String& executablePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.Execution.UiLanguageOverride : object {
    private static string DOTNET_CLI_UI_LANGUAGE;
    private static string VSLANG;
    private static string PreferredUILang;
    private IEnvironmentVariableHelper _environmentVariableHelper;
    private Action`1<CultureInfo> _setDefaultThreadCurrentUICulture;
    public UiLanguageOverride(IEnvironmentVariableHelper environmentVariableHelper, Action`1<CultureInfo> setDefaultThreadCurrentUICulture);
    internal void SetCultureSpecifiedByUser();
    private static void ApplyOverrideToCurrentProcess(CultureInfo language, Action`1<CultureInfo> setDefaultThreadCurrentUICulture);
    private static CultureInfo GetOverriddenUiLanguage(IEnvironmentVariableHelper environmentVariableHelper);
    private static void FlowOverrideToChildProcesses(CultureInfo language, IEnvironmentVariableHelper environmentVariableHelper);
    private static void SetIfNotAlreadySet(string environmentVariableName, string value, IEnvironmentVariableHelper environmentVariableHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.TestPlatform.Execution.WellKnownDebugEnvironmentVariables : object {
    public static string VSTEST_BLAMEDATACOLLECTOR_DEBUG;
    public static string VSTEST_DATACOLLECTOR_DEBUG;
    public static string VSTEST_HOST_DEBUG;
    public static string VSTEST_RUNNER_DEBUG;
    public static string VSTEST_DATACOLLECTOR_DEBUG_ATTACHVS;
    public static string VSTEST_HOST_DEBUG_ATTACHVS;
    public static string VSTEST_RUNNER_DEBUG_ATTACHVS;
    public static string VSTEST_HOST_NATIVE_DEBUG;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.VisualStudio.TestPlatform.TestExecutor.UnitTestClient : object {
    public static void CreateDefaultUI();
    public static void Run(string arguments);
    internal static String[] SplitArguments(string commandLine);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.TestHost.DebugAssertException : Exception {
    [CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    public string StackTrace { get; }
    public DebugAssertException(string message, string stackTrace);
    [CompilerGeneratedAttribute]
public virtual string get_StackTrace();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.TestHost.DefaultEngineInvoker : object {
    private static int ClientListenTimeOut;
    private static string EndpointArgument;
    private static string RoleArgument;
    private static string ParentProcessIdArgument;
    private static string LogFileArgument;
    private static string TraceLevelArgument;
    private static string DataCollectionPortArgument;
    private static string TelemetryOptedIn;
    private static string LocalPath;
    private static string RemotePath;
    private ITestRequestHandler _requestHandler;
    private IDataCollectionTestCaseEventSender _dataCollectionTestCaseEventSender;
    private IProcessHelper _processHelper;
    internal DefaultEngineInvoker(ITestRequestHandler requestHandler, IDataCollectionTestCaseEventSender dataCollectionTestCaseEventSender, IProcessHelper processHelper);
    public sealed virtual void Invoke(IDictionary`2<string, string> argsDictionary);
    private static bool GetTelemetryStatusFromArgs(IDictionary`2<string, string> argsDictionary);
    private void ConnectToDatacollector(int dcPort);
    private void SetParentProcessExitCallback(IDictionary`2<string, string> argsDictionary);
    private static TestHostConnectionInfo GetConnectionInfo(IDictionary`2<string, string> argsDictionary);
    private static void InitializeEqtTrace(IDictionary`2<string, string> argsDictionary);
    private static Task StartProcessingAsync(ITestRequestHandler requestHandler, ITestHostManagerFactory managerFactory);
}
public interface Microsoft.VisualStudio.TestPlatform.TestHost.IEngineInvoker {
    public abstract virtual void Invoke(IDictionary`2<string, string> argsDictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.TestPlatform.TestHost.Program : object {
    public static void Main(String[] args);
    public static void Run(String[] args);
    internal static void Run(String[] args, UiLanguageOverride uiLanguageOverride);
    private static IEngineInvoker GetEngineInvoker(IDictionary`2<string, string> argsDictionary);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.TestPlatform.TestHost.TestHostTraceListener : DefaultTraceListener {
    public static void Setup();
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
    [NullableContextAttribute("1")]
private static DebugAssertException GetException(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
