public class System.Windows.Automation.AndCondition : Condition {
    internal IUIAutomationAndCondition _obj;
    internal IUIAutomationCondition NativeCondition { get; }
    internal AndCondition(IUIAutomationAndCondition obj);
    public AndCondition(Condition[] conditions);
    internal static AndCondition FromPropertyConditons(Condition[] conditions);
    internal virtual IUIAutomationCondition get_NativeCondition();
    public Condition[] GetConditions();
}
public enum System.Windows.Automation.AnnotationType : Enum {
    public int value__;
    public static AnnotationType Unknown;
    public static AnnotationType SpellingError;
    public static AnnotationType GrammarError;
    public static AnnotationType Comment;
    public static AnnotationType FormulaError;
    public static AnnotationType TrackChanges;
    public static AnnotationType Header;
    public static AnnotationType Footer;
    public static AnnotationType Highlighted;
}
public class System.Windows.Automation.AsyncContentLoadedEventArgs : AutomationEventArgs {
    private AsyncContentLoadedState _asyncContentState;
    private double _percentComplete;
    public AsyncContentLoadedState AsyncContentLoadedState { get; }
    public double PercentComplete { get; }
    public AsyncContentLoadedEventArgs(AsyncContentLoadedState asyncContentState, double percentComplete);
    public AsyncContentLoadedState get_AsyncContentLoadedState();
    public double get_PercentComplete();
}
[GuidAttribute("d8e55844-7043-4edc-979d-593cc6b4775e")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.AsyncContentLoadedState : Enum {
    public int value__;
    public static AsyncContentLoadedState Beginning;
    public static AsyncContentLoadedState Progress;
    public static AsyncContentLoadedState Completed;
}
public static class System.Windows.Automation.Automation : object {
    private static IUIAutomation factory;
    public static Condition ContentViewCondition;
    public static Condition ControlViewCondition;
    public static Condition RawViewCondition;
    public static bool EnableTraces { get; public set; }
    internal static IUIAutomation Factory { get; internal set; }
    internal static IUIAutomation2 Factory2 { get; }
    unknown static Function InvokeFunction {private set; }
    public static bool AutoSetFocus { get; public set; }
    public static UInt32 ConnectionTimeout { get; public set; }
    public static UInt32 TransactionTimeout { get; public set; }
    private static Automation();
    public static bool get_EnableTraces();
    public static void set_EnableTraces(bool value);
    internal static IUIAutomation get_Factory();
    internal static void set_Factory(IUIAutomation value);
    internal static IUIAutomation2 get_Factory2();
    private static void set_InvokeFunction(Function value);
    public static void AddAutomationEventHandler(AutomationEvent eventId, AutomationElement element, TreeScope scope, AutomationEventHandler eventHandler);
    public static void AddAutomationFocusChangedEventHandler(AutomationFocusChangedEventHandler eventHandler);
    public static void AddAutomationPropertyChangedEventHandler(AutomationElement element, TreeScope scope, AutomationPropertyChangedEventHandler eventHandler, AutomationProperty[] properties);
    public static void AddStructureChangedEventHandler(AutomationElement element, TreeScope scope, StructureChangedEventHandler eventHandler);
    public static bool Compare(Int32[] runtimeId1, Int32[] runtimeId2);
    public static bool Compare(AutomationElement el1, AutomationElement el2);
    public static string PatternName(AutomationPattern pattern);
    public static string PropertyName(AutomationProperty property);
    public static void RemoveAllEventHandlers();
    public static void RemoveAutomationEventHandler(AutomationEvent eventId, AutomationElement element, AutomationEventHandler eventHandler);
    public static void RemoveAutomationFocusChangedEventHandler(AutomationFocusChangedEventHandler eventHandler);
    public static void RemoveAutomationPropertyChangedEventHandler(AutomationElement element, AutomationPropertyChangedEventHandler eventHandler);
    public static void RemoveStructureChangedEventHandler(AutomationElement element, StructureChangedEventHandler eventHandler);
    public static bool get_AutoSetFocus();
    public static void set_AutoSetFocus(bool value);
    public static UInt32 get_ConnectionTimeout();
    public static void set_ConnectionTimeout(UInt32 value);
    public static UInt32 get_TransactionTimeout();
    public static void set_TransactionTimeout(UInt32 value);
}
public class System.Windows.Automation.AutomationElement : object {
    private bool isMSAAWindow;
    private IUIAutomationElement _obj;
    private Int32[] _runtimeId;
    public static AutomationProperty AcceleratorKeyProperty;
    public static AutomationProperty AccessKeyProperty;
    public static AutomationEvent AsyncContentLoadedEvent;
    public static AutomationEvent AutomationFocusChangedEvent;
    public static AutomationProperty AutomationIdProperty;
    public static AutomationEvent AutomationPropertyChangedEvent;
    public static AutomationProperty BoundingRectangleProperty;
    public static AutomationProperty ClassNameProperty;
    public static AutomationProperty ClickablePointProperty;
    public static AutomationProperty ControlTypeProperty;
    public static AutomationProperty CultureProperty;
    public static AutomationProperty FrameworkIdProperty;
    public static AutomationProperty HasKeyboardFocusProperty;
    public static AutomationProperty HelpTextProperty;
    public static AutomationProperty IsContentElementProperty;
    public static AutomationProperty IsControlElementProperty;
    public static AutomationProperty IsDockPatternAvailableProperty;
    public static AutomationProperty IsEnabledProperty;
    public static AutomationProperty IsExpandCollapsePatternAvailableProperty;
    public static AutomationProperty IsGridItemPatternAvailableProperty;
    public static AutomationProperty IsGridPatternAvailableProperty;
    public static AutomationProperty IsInvokePatternAvailableProperty;
    public static AutomationProperty IsKeyboardFocusableProperty;
    public static AutomationProperty IsMultipleViewPatternAvailableProperty;
    public static AutomationProperty IsOffscreenProperty;
    public static AutomationProperty IsPasswordProperty;
    public static AutomationProperty IsRangeValuePatternAvailableProperty;
    public static AutomationProperty IsRequiredForFormProperty;
    public static AutomationProperty IsScrollItemPatternAvailableProperty;
    public static AutomationProperty IsScrollPatternAvailableProperty;
    public static AutomationProperty IsSelectionItemPatternAvailableProperty;
    public static AutomationProperty IsSelectionPatternAvailableProperty;
    public static AutomationProperty IsTableItemPatternAvailableProperty;
    public static AutomationProperty IsTablePatternAvailableProperty;
    public static AutomationProperty IsTextPatternAvailableProperty;
    public static AutomationProperty IsTogglePatternAvailableProperty;
    public static AutomationProperty IsTransformPatternAvailableProperty;
    public static AutomationProperty IsValuePatternAvailableProperty;
    public static AutomationProperty IsWindowPatternAvailableProperty;
    public static AutomationProperty ItemStatusProperty;
    public static AutomationProperty ItemTypeProperty;
    public static AutomationProperty LabeledByProperty;
    public static AutomationEvent LayoutInvalidatedEvent;
    public static AutomationProperty LocalizedControlTypeProperty;
    public static AutomationEvent MenuClosedEvent;
    public static AutomationEvent MenuOpenedEvent;
    public static AutomationProperty NameProperty;
    public static AutomationProperty NativeWindowHandleProperty;
    public static object NotSupported;
    public static AutomationProperty OrientationProperty;
    public static AutomationProperty ProcessIdProperty;
    public static AutomationProperty RuntimeIdProperty;
    public static AutomationEvent StructureChangedEvent;
    public static AutomationEvent ToolTipClosedEvent;
    public static AutomationEvent ToolTipOpenedEvent;
    public static AutomationProperty IsLegacyIAccessiblePatternAvailableProperty;
    public static AutomationProperty IsItemContainerPatternAvailableProperty;
    public static AutomationProperty IsVirtualizedItemPatternAvailableProperty;
    public static AutomationProperty IsSynchronizedInputPatternAvailableProperty;
    public static AutomationProperty AriaRoleProperty;
    public static AutomationProperty AriaPropertiesProperty;
    public static AutomationProperty IsDataValidForFormProperty;
    public static AutomationProperty ControllerForProperty;
    public static AutomationProperty DescribedByProperty;
    public static AutomationProperty FlowsToProperty;
    public static AutomationProperty ProviderDescriptionProperty;
    public static AutomationEvent MenuModeStartEvent;
    public static AutomationEvent MenuModeEndEvent;
    [CompilerGeneratedAttribute]
private bool <IsVirtualElement>k__BackingField;
    public bool IsMSAAWindow { get; public set; }
    public AutomationElementInformation Cached { get; }
    public AutomationElementCollection CachedChildren { get; }
    public AutomationElement CachedParent { get; }
    public AutomationElementInformation Current { get; }
    internal IUIAutomationElement NativeElement { get; }
    public static AutomationElement FocusedElement { get; }
    public static AutomationElement RootElement { get; }
    internal bool IsVirtualElement { get; internal set; }
    internal AutomationElement(IUIAutomationElement obj);
    private static AutomationElement();
    public bool get_IsMSAAWindow();
    public void set_IsMSAAWindow(bool value);
    internal static AutomationElement Wrap(IUIAutomationElement obj);
    internal void InitializeIsVirtualElement();
    internal static AutomationElement FromPoint(int x, int y);
    public virtual bool Equals(object obj);
    protected virtual override void Finalize();
    public AutomationElementCollection FindAll(TreeScope scope, Condition condition);
    public AutomationElement FindFirst(TreeScope scope, Condition condition);
    public static AutomationElement FromHandle(IntPtr hwnd);
    public static AutomationElement FromIAccessible(IAccessible acc, int childId);
    public static AutomationElement FromLocalProvider(object localImpl);
    public static AutomationElement FromPoint(Point pt);
    public object GetCachedPattern(AutomationPattern pattern);
    public object GetCachedPropertyValue(AutomationProperty property);
    public object GetCachedPropertyValue(AutomationProperty property, bool ignoreDefaultValue);
    public Point GetClickablePoint();
    public object GetCurrentPattern(AutomationPattern pattern);
    public object GetCurrentPropertyValue(AutomationProperty property);
    public object GetCurrentPropertyValue(AutomationProperty property, bool ignoreDefaultValue);
    internal object GetCurrentPropertyValue(AutomationProperty property, bool ignoreDefaultValue, bool realize);
    internal object GetPropertyValue(AutomationProperty property, bool cached);
    public virtual int GetHashCode();
    internal object GetRawPattern(AutomationPattern pattern, bool isCached);
    public Int32[] GetRuntimeId();
    public AutomationPattern[] GetSupportedPatterns();
    public AutomationProperty[] GetSupportedProperties();
    public AutomationElement GetUpdatedCache(CacheRequest request);
    public static bool op_Equality(AutomationElement left, AutomationElement right);
    public static bool op_Inequality(AutomationElement left, AutomationElement right);
    public void SetFocus();
    public bool TryGetCachedPattern(AutomationPattern pattern, Object& patternObject);
    public bool TryGetClickablePoint(Point& pt);
    public bool TryGetCurrentPattern(AutomationPattern pattern, Object& patternObject);
    public AutomationElementInformation get_Cached();
    public AutomationElementCollection get_CachedChildren();
    public AutomationElement get_CachedParent();
    public AutomationElementInformation get_Current();
    internal IUIAutomationElement get_NativeElement();
    public static AutomationElement get_FocusedElement();
    public static AutomationElement get_RootElement();
    [CompilerGeneratedAttribute]
internal bool get_IsVirtualElement();
    [CompilerGeneratedAttribute]
internal void set_IsVirtualElement(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Automation.AutomationElementCollection : object {
    private IUIAutomationElementArray _obj;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public AutomationElement Item { get; }
    public object SyncRoot { get; }
    internal AutomationElementCollection(IUIAutomationElementArray obj);
    internal static AutomationElementCollection Wrap(IUIAutomationElementArray obj);
    public virtual void CopyTo(Array array, int index);
    public void CopyTo(AutomationElement[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public AutomationElement get_Item(int index);
    public virtual object get_SyncRoot();
}
public class System.Windows.Automation.AutomationElementCollectionEnumerator : object {
    private IUIAutomationElementArray _obj;
    private int _index;
    private int _cElem;
    private object System.Collections.IEnumerator.Current { get; }
    public AutomationElement Current { get; }
    internal AutomationElementCollectionEnumerator(IUIAutomationElementArray obj);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public AutomationElement get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public static class System.Windows.Automation.AutomationElementIdentifiers : object {
    public static AutomationProperty AcceleratorKeyProperty;
    public static AutomationProperty AccessKeyProperty;
    public static AutomationEvent AsyncContentLoadedEvent;
    public static AutomationEvent AutomationFocusChangedEvent;
    public static AutomationProperty AutomationIdProperty;
    public static AutomationEvent AutomationPropertyChangedEvent;
    public static AutomationProperty BoundingRectangleProperty;
    public static AutomationProperty ClassNameProperty;
    public static AutomationProperty ClickablePointProperty;
    public static AutomationProperty ControlTypeProperty;
    public static AutomationProperty CultureProperty;
    public static AutomationProperty FrameworkIdProperty;
    public static AutomationProperty HasKeyboardFocusProperty;
    public static AutomationProperty HelpTextProperty;
    public static AutomationProperty IsContentElementProperty;
    public static AutomationProperty IsControlElementProperty;
    public static AutomationProperty IsDockPatternAvailableProperty;
    public static AutomationProperty IsEnabledProperty;
    public static AutomationProperty IsExpandCollapsePatternAvailableProperty;
    public static AutomationProperty IsGridItemPatternAvailableProperty;
    public static AutomationProperty IsGridPatternAvailableProperty;
    public static AutomationProperty IsInvokePatternAvailableProperty;
    public static AutomationProperty IsKeyboardFocusableProperty;
    public static AutomationProperty IsMultipleViewPatternAvailableProperty;
    public static AutomationProperty IsOffscreenProperty;
    public static AutomationProperty IsPasswordProperty;
    public static AutomationProperty IsRangeValuePatternAvailableProperty;
    public static AutomationProperty IsRequiredForFormProperty;
    public static AutomationProperty IsScrollItemPatternAvailableProperty;
    public static AutomationProperty IsScrollPatternAvailableProperty;
    public static AutomationProperty IsSelectionItemPatternAvailableProperty;
    public static AutomationProperty IsSelectionPatternAvailableProperty;
    public static AutomationProperty IsTableItemPatternAvailableProperty;
    public static AutomationProperty IsTablePatternAvailableProperty;
    public static AutomationProperty IsTextPatternAvailableProperty;
    public static AutomationProperty IsTogglePatternAvailableProperty;
    public static AutomationProperty IsTransformPatternAvailableProperty;
    public static AutomationProperty IsValuePatternAvailableProperty;
    public static AutomationProperty IsWindowPatternAvailableProperty;
    public static AutomationProperty ItemStatusProperty;
    public static AutomationProperty ItemTypeProperty;
    public static AutomationProperty LabeledByProperty;
    public static AutomationEvent LayoutInvalidatedEvent;
    public static AutomationProperty LocalizedControlTypeProperty;
    public static AutomationEvent MenuClosedEvent;
    public static AutomationEvent MenuOpenedEvent;
    public static AutomationProperty NameProperty;
    public static AutomationProperty NativeWindowHandleProperty;
    public static object NotSupported;
    public static AutomationProperty OrientationProperty;
    public static AutomationProperty ProcessIdProperty;
    public static AutomationProperty RuntimeIdProperty;
    public static AutomationEvent StructureChangedEvent;
    public static AutomationEvent ToolTipClosedEvent;
    public static AutomationEvent ToolTipOpenedEvent;
    public static AutomationProperty IsLegacyIAccessiblePatternAvailableProperty;
    public static AutomationProperty IsItemContainerPatternAvailableProperty;
    public static AutomationProperty IsVirtualizedItemPatternAvailableProperty;
    public static AutomationProperty IsSynchronizedInputPatternAvailableProperty;
    public static AutomationProperty AriaRoleProperty;
    public static AutomationProperty AriaPropertiesProperty;
    public static AutomationProperty IsDataValidForFormProperty;
    public static AutomationProperty ControllerForProperty;
    public static AutomationProperty DescribedByProperty;
    public static AutomationProperty FlowsToProperty;
    public static AutomationProperty ProviderDescriptionProperty;
    public static AutomationEvent MenuModeStartEvent;
    public static AutomationEvent MenuModeEndEvent;
    private static AutomationElementIdentifiers();
}
public enum System.Windows.Automation.AutomationElementMode : Enum {
    public int value__;
    public static AutomationElementMode None;
    public static AutomationElementMode Full;
}
public class System.Windows.Automation.AutomationEvent : AutomationIdentifier {
    internal AutomationEvent(int id, string programmaticName);
    public static AutomationEvent LookupById(int id);
    internal static AutomationEvent Register(int id, string programmaticName);
}
public class System.Windows.Automation.AutomationEventArgs : EventArgs {
    private AutomationEvent _eventId;
    public AutomationEvent EventId { get; }
    public AutomationEventArgs(AutomationEvent eventId);
    public AutomationEvent get_EventId();
}
public class System.Windows.Automation.AutomationEventHandler : MulticastDelegate {
    public AutomationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Automation.AutomationFocusChangedEventArgs : AutomationEventArgs {
    private int _idChild;
    private int _idObject;
    public int ChildId { get; }
    public int ObjectId { get; }
    public AutomationFocusChangedEventArgs(int idObject, int idChild);
    public int get_ChildId();
    public int get_ObjectId();
}
public class System.Windows.Automation.AutomationFocusChangedEventHandler : MulticastDelegate {
    public AutomationFocusChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationFocusChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationFocusChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Automation.AutomationIdentifier : object {
    private int _id;
    private static IDictionary`2<int, AutomationIdentifier> _identifierDirectory;
    private string _programmaticName;
    private AutomationIdType _type;
    public int Id { get; }
    public string ProgrammaticName { get; }
    internal AutomationIdentifier(AutomationIdType type, int id, string programmaticName);
    private static AutomationIdentifier();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static AutomationIdentifier LookupById(AutomationIdType type, int id);
    internal static AutomationIdentifier Register(AutomationIdType type, int id, string programmaticName);
    public int get_Id();
    public string get_ProgrammaticName();
}
public class System.Windows.Automation.AutomationPattern : AutomationIdentifier {
    internal AutomationPattern(int id, string programmaticName);
    public static AutomationPattern LookupById(int id);
    internal static AutomationPattern Register(int id, string programmaticName);
}
public class System.Windows.Automation.AutomationProperty : AutomationIdentifier {
    private string programmaticPropertyName;
    internal AutomationProperty(int id, string programmaticName);
    public static AutomationProperty LookupById(int id);
    internal static AutomationProperty Register(int id, string programmaticName);
    public virtual string ToString();
}
public class System.Windows.Automation.AutomationPropertyChangedEventArgs : AutomationEventArgs {
    private object _newValue;
    private object _oldValue;
    private AutomationProperty _property;
    public object NewValue { get; }
    public object OldValue { get; }
    public AutomationProperty Property { get; }
    public AutomationPropertyChangedEventArgs(AutomationProperty property, object oldValue, object newValue);
    public object get_NewValue();
    public object get_OldValue();
    public AutomationProperty get_Property();
}
public class System.Windows.Automation.AutomationPropertyChangedEventHandler : MulticastDelegate {
    public AutomationPropertyChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AutomationPropertyChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AutomationPropertyChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Automation.AutomationTextAttribute : AutomationIdentifier {
    internal AutomationTextAttribute(int id, string programmaticName);
    public static AutomationTextAttribute LookupById(int id);
    internal static AutomationTextAttribute Register(int id, string programmaticName);
}
public class System.Windows.Automation.BasePattern : object {
    internal AutomationElement _el;
    internal bool _cached;
    internal BasePattern(AutomationElement el, bool cached);
}
public class System.Windows.Automation.CacheRequest : object {
    private IUIAutomationCacheRequest _obj;
    private object _lock;
    private int _cRef;
    [ThreadStaticAttribute]
private static Stack`1<CacheRequest> _cacheStack;
    internal static CacheRequest DefaultCacheRequest;
    public AutomationElementMode AutomationElementMode { get; public set; }
    public static CacheRequest Current { get; }
    internal static IUIAutomationCacheRequest CurrentNativeCacheRequest { get; }
    public Condition TreeFilter { get; public set; }
    public TreeScope TreeScope { get; public set; }
    internal IUIAutomationCacheRequest NativeCacheRequest { get; }
    internal CacheRequest(IUIAutomationCacheRequest obj);
    private static CacheRequest();
    public IDisposable Activate();
    public void Add(AutomationPattern pattern);
    public void Add(AutomationProperty property);
    private void CheckAccess();
    public CacheRequest Clone();
    public void Pop();
    public void Push();
    public AutomationElementMode get_AutomationElementMode();
    public void set_AutomationElementMode(AutomationElementMode value);
    public static CacheRequest get_Current();
    internal static IUIAutomationCacheRequest get_CurrentNativeCacheRequest();
    public Condition get_TreeFilter();
    public void set_TreeFilter(Condition value);
    public TreeScope get_TreeScope();
    public void set_TreeScope(TreeScope value);
    internal IUIAutomationCacheRequest get_NativeCacheRequest();
}
internal class System.Windows.Automation.CacheRequestActivation : object {
    private CacheRequest _request;
    internal CacheRequestActivation(CacheRequest request);
    public sealed virtual void Dispose();
}
public static class System.Windows.Automation.ClientSettings : object {
    public static void RegisterClientSideProviderAssembly(AssemblyName assemblyName);
    public static void RegisterClientSideProviders(ClientSideProviderDescription[] clientSideProviderDescription);
}
public class System.Windows.Automation.ClientSideProviderDescription : ValueType {
    private string _className;
    private string _imageName;
    private ClientSideProviderMatchIndicator _flags;
    private ClientSideProviderFactoryCallback _proxyFactoryCallback;
    public string ClassName { get; }
    public ClientSideProviderMatchIndicator Flags { get; }
    public string ImageName { get; }
    public ClientSideProviderFactoryCallback ClientSideProviderFactoryCallback { get; }
    public ClientSideProviderDescription(ClientSideProviderFactoryCallback clientSideProviderFactoryCallback, string className);
    public ClientSideProviderDescription(ClientSideProviderFactoryCallback clientSideProviderFactoryCallback, string className, string imageName, ClientSideProviderMatchIndicator flags);
    public string get_ClassName();
    public ClientSideProviderMatchIndicator get_Flags();
    public string get_ImageName();
    public ClientSideProviderFactoryCallback get_ClientSideProviderFactoryCallback();
}
public class System.Windows.Automation.ClientSideProviderFactoryCallback : MulticastDelegate {
    public ClientSideProviderFactoryCallback(object object, IntPtr method);
    public virtual IRawElementProviderSimple Invoke(IntPtr hwnd, int idChild, int idObject);
    public virtual IAsyncResult BeginInvoke(IntPtr hwnd, int idChild, int idObject, AsyncCallback callback, object object);
    public virtual IRawElementProviderSimple EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Automation.ClientSideProviderMatchIndicator : Enum {
    public int value__;
    public static ClientSideProviderMatchIndicator None;
    public static ClientSideProviderMatchIndicator AllowSubstringMatch;
    public static ClientSideProviderMatchIndicator DisallowBaseClassNameMatch;
}
public abstract class System.Windows.Automation.Condition : object {
    public static Condition FalseCondition;
    public static Condition TrueCondition;
    internal IUIAutomationCondition NativeCondition { get; }
    private static Condition();
    internal abstract virtual IUIAutomationCondition get_NativeCondition();
    internal static Condition Wrap(IUIAutomationCondition obj);
    internal static IUIAutomationCondition ConditionManagedToNative(Condition condition);
    internal static IUIAutomationCondition[] ConditionArrayManagedToNative(Condition[] conditions);
    internal static Condition[] ConditionArrayNativeToManaged(Array conditions);
}
public class System.Windows.Automation.ControlType : AutomationIdentifier {
    private AutomationPattern[] _neverSupportedPatterns;
    private AutomationPattern[][] _requiredPatternsSets;
    private AutomationProperty[] _requiredProperties;
    public static ControlType Button;
    public static ControlType Calendar;
    public static ControlType CheckBox;
    public static ControlType ComboBox;
    public static ControlType Custom;
    public static ControlType DataGrid;
    public static ControlType DataItem;
    public static ControlType Document;
    public static ControlType Edit;
    public static ControlType Group;
    public static ControlType Header;
    public static ControlType HeaderItem;
    public static ControlType Hyperlink;
    public static ControlType Image;
    public static ControlType List;
    public static ControlType ListItem;
    public static ControlType Menu;
    public static ControlType MenuBar;
    public static ControlType MenuItem;
    public static ControlType Pane;
    public static ControlType ProgressBar;
    public static ControlType RadioButton;
    public static ControlType ScrollBar;
    public static ControlType Separator;
    public static ControlType Slider;
    public static ControlType Spinner;
    public static ControlType SplitButton;
    public static ControlType StatusBar;
    public static ControlType Tab;
    public static ControlType TabItem;
    public static ControlType Table;
    public static ControlType Text;
    public static ControlType Thumb;
    public static ControlType TitleBar;
    public static ControlType ToolBar;
    public static ControlType ToolTip;
    public static ControlType Tree;
    public static ControlType TreeItem;
    public static ControlType Window;
    public static ControlType SemanticZoom;
    public string LocalizedControlType { get; }
    private static ControlType();
    internal ControlType(int id, string programmaticName);
    public AutomationPattern[] GetNeverSupportedPatterns();
    public AutomationPattern[][] GetRequiredPatternSets();
    public AutomationProperty[] GetRequiredProperties();
    public static ControlType LookupById(int id);
    internal static ControlType Register(int id, string programmaticName);
    internal static ControlType Register(int id, string programmaticName, AutomationProperty[] requiredProperties);
    internal static ControlType Register(int id, string programmaticName, AutomationPattern[][] requiredPatternsSets);
    internal static ControlType Register(int id, string programmaticName, AutomationProperty[] requiredProperties, AutomationPattern[] neverSupportedPatterns, AutomationPattern[][] requiredPatternsSets);
    public string get_LocalizedControlType();
    public virtual string ToString();
}
public class System.Windows.Automation.DockPattern : BasePattern {
    private IUIAutomationDockPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty DockPositionProperty;
    public DockPatternInformation Cached { get; }
    public DockPatternInformation Current { get; }
    private DockPattern(AutomationElement el, IUIAutomationDockPattern pattern, bool cached);
    private static DockPattern();
    public void SetDockPosition(DockPosition dockPosition);
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public DockPatternInformation get_Cached();
    public DockPatternInformation get_Current();
}
public static class System.Windows.Automation.DockPatternIdentifiers : object {
    public static AutomationProperty DockPositionProperty;
    public static AutomationPattern Pattern;
    private static DockPatternIdentifiers();
}
[GuidAttribute("70d46e77-e3a8-449d-913c-e30eb2afecdb")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.DockPosition : Enum {
    public int value__;
    public static DockPosition Top;
    public static DockPosition Left;
    public static DockPosition Bottom;
    public static DockPosition Right;
    public static DockPosition Fill;
    public static DockPosition None;
}
public class System.Windows.Automation.ElementNotAvailableException : Exception {
    public ElementNotAvailableException(Exception innerException);
    public ElementNotAvailableException(string message);
    protected ElementNotAvailableException(SerializationInfo info, StreamingContext context);
    public ElementNotAvailableException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Automation.ElementNotEnabledException : InvalidOperationException {
    public ElementNotEnabledException(Exception innerException);
    public ElementNotEnabledException(string message);
    public ElementNotEnabledException(string message, Exception innerException);
    protected ElementNotEnabledException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Automation.ExpandCollapsePattern : BasePattern {
    private IUIAutomationExpandCollapsePattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty ExpandCollapseStateProperty;
    public ExpandCollapsePatternInformation Cached { get; }
    public ExpandCollapsePatternInformation Current { get; }
    private ExpandCollapsePattern(AutomationElement el, IUIAutomationExpandCollapsePattern pattern, bool cached);
    private static ExpandCollapsePattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void Collapse();
    public void Expand();
    public ExpandCollapsePatternInformation get_Cached();
    public ExpandCollapsePatternInformation get_Current();
}
public static class System.Windows.Automation.ExpandCollapsePatternIdentifiers : object {
    public static AutomationProperty ExpandCollapseStateProperty;
    public static AutomationPattern Pattern;
    private static ExpandCollapsePatternIdentifiers();
}
[GuidAttribute("76d12d7e-b227-4417-9ce2-42642ffa896a")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.ExpandCollapseState : Enum {
    public int value__;
    public static ExpandCollapseState Collapsed;
    public static ExpandCollapseState Expanded;
    public static ExpandCollapseState PartiallyExpanded;
    public static ExpandCollapseState LeafNode;
}
public class System.Windows.Automation.GridItemPattern : BasePattern {
    private IUIAutomationGridItemPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty ColumnProperty;
    public static AutomationProperty ColumnSpanProperty;
    public static AutomationProperty ContainingGridProperty;
    public static AutomationProperty RowProperty;
    public static AutomationProperty RowSpanProperty;
    public GridItemPatternInformation Cached { get; }
    public GridItemPatternInformation Current { get; }
    internal GridItemPattern(AutomationElement el, IUIAutomationGridItemPattern pattern, bool cached);
    private static GridItemPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public GridItemPatternInformation get_Cached();
    public GridItemPatternInformation get_Current();
}
public static class System.Windows.Automation.GridItemPatternIdentifiers : object {
    public static AutomationProperty ColumnProperty;
    public static AutomationProperty ColumnSpanProperty;
    public static AutomationProperty ContainingGridProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty RowProperty;
    public static AutomationProperty RowSpanProperty;
    private static GridItemPatternIdentifiers();
}
public class System.Windows.Automation.GridPattern : BasePattern {
    private IUIAutomationGridPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty ColumnCountProperty;
    public static AutomationProperty RowCountProperty;
    public GridPatternInformation Cached { get; }
    public GridPatternInformation Current { get; }
    internal GridPattern(AutomationElement el, IUIAutomationGridPattern pattern, bool cached);
    private static GridPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public AutomationElement GetItem(int row, int column);
    public GridPatternInformation get_Cached();
    public GridPatternInformation get_Current();
}
public static class System.Windows.Automation.GridPatternIdentifiers : object {
    public static AutomationProperty ColumnCountProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty RowCountProperty;
    private static GridPatternIdentifiers();
}
public class System.Windows.Automation.InvokePattern : BasePattern {
    private IUIAutomationInvokePattern _pattern;
    public static AutomationEvent InvokedEvent;
    public static AutomationPattern Pattern;
    private InvokePattern(AutomationElement el, IUIAutomationInvokePattern pattern, bool cached);
    private static InvokePattern();
    public void Invoke();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
}
public static class System.Windows.Automation.InvokePatternIdentifiers : object {
    public static AutomationEvent InvokedEvent;
    public static AutomationPattern Pattern;
    private static InvokePatternIdentifiers();
}
public class System.Windows.Automation.ItemContainerPattern : BasePattern {
    private IUIAutomationItemContainerPattern _pattern;
    public static AutomationPattern Pattern;
    private ItemContainerPattern(AutomationElement el, IUIAutomationItemContainerPattern pattern, bool cached);
    private static ItemContainerPattern();
    public AutomationElement FindItemByProperty(AutomationElement startAfter, AutomationProperty property, object value);
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
}
public static class System.Windows.Automation.ItemContainerPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    private static ItemContainerPatternIdentifiers();
}
public class System.Windows.Automation.LegacyIAccessiblePattern : BasePattern {
    public static AutomationProperty ChildIdProperty;
    public static AutomationProperty NameProperty;
    public static AutomationProperty ValueProperty;
    public static AutomationProperty DescriptionProperty;
    public static AutomationProperty RoleProperty;
    public static AutomationProperty StateProperty;
    public static AutomationProperty HelpProperty;
    public static AutomationProperty KeyboardShortcutProperty;
    public static AutomationProperty SelectionProperty;
    public static AutomationProperty DefaultActionProperty;
    public static AutomationPattern Pattern;
    private IUIAutomationLegacyIAccessiblePattern _pattern;
    public LegacyIAccessiblePatternInformation Cached { get; }
    public LegacyIAccessiblePatternInformation Current { get; }
    private LegacyIAccessiblePattern(AutomationElement el, IUIAutomationLegacyIAccessiblePattern pattern, bool cached);
    private static LegacyIAccessiblePattern();
    public void Select(int flagsSelect);
    public void DoDefaultAction();
    public void SetValue(string value);
    public IAccessible GetIAccessible();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public LegacyIAccessiblePatternInformation get_Cached();
    public LegacyIAccessiblePatternInformation get_Current();
}
public static class System.Windows.Automation.LegacyIAccessiblePatternIdentifiers : object {
    public static AutomationProperty ChildIdProperty;
    public static AutomationProperty NameProperty;
    public static AutomationProperty ValueProperty;
    public static AutomationProperty DescriptionProperty;
    public static AutomationProperty RoleProperty;
    public static AutomationProperty StateProperty;
    public static AutomationProperty HelpProperty;
    public static AutomationProperty KeyboardShortcutProperty;
    public static AutomationProperty SelectionProperty;
    public static AutomationProperty DefaultActionProperty;
    public static AutomationPattern Pattern;
    private static LegacyIAccessiblePatternIdentifiers();
}
public class System.Windows.Automation.MultipleViewPattern : BasePattern {
    private IUIAutomationMultipleViewPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty CurrentViewProperty;
    public static AutomationProperty SupportedViewsProperty;
    public MultipleViewPatternInformation Cached { get; }
    public MultipleViewPatternInformation Current { get; }
    private MultipleViewPattern(AutomationElement el, IUIAutomationMultipleViewPattern pattern, bool cached);
    private static MultipleViewPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public string GetViewName(int viewId);
    public void SetCurrentView(int viewId);
    public MultipleViewPatternInformation get_Cached();
    public MultipleViewPatternInformation get_Current();
}
public static class System.Windows.Automation.MultipleViewPatternIdentifiers : object {
    public static AutomationProperty CurrentViewProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty SupportedViewsProperty;
    private static MultipleViewPatternIdentifiers();
}
public class System.Windows.Automation.NoClickablePointException : Exception {
    public NoClickablePointException(Exception innerException);
    public NoClickablePointException(string message);
    public NoClickablePointException(string message, Exception innerException);
    protected NoClickablePointException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Automation.NotCondition : Condition {
    internal IUIAutomationNotCondition _obj;
    internal IUIAutomationCondition NativeCondition { get; }
    public Condition Condition { get; }
    internal NotCondition(IUIAutomationNotCondition obj);
    public NotCondition(Condition condition);
    internal virtual IUIAutomationCondition get_NativeCondition();
    public Condition get_Condition();
}
public class System.Windows.Automation.OrCondition : Condition {
    internal IUIAutomationOrCondition _obj;
    internal IUIAutomationCondition NativeCondition { get; }
    internal OrCondition(IUIAutomationOrCondition obj);
    public OrCondition(Condition[] conditions);
    internal virtual IUIAutomationCondition get_NativeCondition();
    public Condition[] GetConditions();
}
[GuidAttribute("5F8A77B4-E685-48c1-94D0-8BB6AFA43DF9")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.OrientationType : Enum {
    public int value__;
    public static OrientationType None;
    public static OrientationType Horizontal;
    public static OrientationType Vertical;
}
public class System.Windows.Automation.PropertyCondition : Condition {
    internal IUIAutomationPropertyCondition _obj;
    internal IUIAutomationCondition NativeCondition { get; }
    public PropertyConditionFlags Flags { get; }
    public AutomationProperty Property { get; }
    public object Value { get; }
    internal PropertyCondition(IUIAutomationPropertyCondition obj);
    public PropertyCondition(AutomationProperty property, object value);
    public PropertyCondition(AutomationProperty property, object value, PropertyConditionFlags flags);
    private void Init(AutomationProperty property, object val, PropertyConditionFlags flags);
    internal virtual IUIAutomationCondition get_NativeCondition();
    public PropertyConditionFlags get_Flags();
    public AutomationProperty get_Property();
    public object get_Value();
}
[FlagsAttribute]
public enum System.Windows.Automation.PropertyConditionFlags : Enum {
    public int value__;
    public static PropertyConditionFlags None;
    public static PropertyConditionFlags IgnoreCase;
}
public static class System.Windows.Automation.Providers.AutomationInteropProvider : object {
    public static int AppendRuntimeId;
    public static int InvalidateLimit;
    public static int RootObjectId;
    public static bool ClientsAreListening { get; }
    public static IRawElementProviderSimple HostProviderFromHandle(IntPtr hwnd);
    public static void RaiseAutomationEvent(AutomationEvent eventId, IRawElementProviderSimple provider, AutomationEventArgs e);
    public static void RaiseAutomationPropertyChangedEvent(IRawElementProviderSimple element, AutomationPropertyChangedEventArgs e);
    public static void RaiseStructureChangedEvent(IRawElementProviderSimple provider, StructureChangedEventArgs e);
    public static IntPtr ReturnRawElementProvider(IntPtr hwnd, IntPtr wParam, IntPtr lParam, IRawElementProviderSimple el);
    public static bool get_ClientsAreListening();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("F95C7E80-BD63-4601-9782-445EBFF011FC")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IAnnotationProvider {
    public AnnotationType AnnotationTypeId { get; }
    public string AnnotationTypeName { get; }
    public string Author { get; }
    public string DateTime { get; }
    public IRawElementProviderSimple Target { get; }
    public abstract virtual AnnotationType get_AnnotationTypeId();
    public abstract virtual string get_AnnotationTypeName();
    public abstract virtual string get_Author();
    public abstract virtual string get_DateTime();
    public abstract virtual IRawElementProviderSimple get_Target();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("159bc72c-4ad3-485e-9637-d7052edf0146")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IDockProvider {
    public DockPosition DockPosition { get; }
    public abstract virtual void SetDockPosition(DockPosition dockPosition);
    public abstract virtual DockPosition get_DockPosition();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6AA7BBBB-7FF9-497D-904F-D20B897929D8")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IDragProvider {
    public bool IsGrabbed { get; }
    public string DropEffect { get; }
    public String[] DropEffects { get; }
    public abstract virtual bool get_IsGrabbed();
    public abstract virtual string get_DropEffect();
    public abstract virtual String[] get_DropEffects();
    public abstract virtual IRawElementProviderSimple[] GetGrabbedItems();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BAE82BFD-358A-481C-85A0-D8B4D90A5D61")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IDropTargetProvider {
    public string DropTargetEffect { get; }
    public String[] DropTargetEffects { get; }
    public abstract virtual string get_DropTargetEffect();
    public abstract virtual String[] get_DropTargetEffects();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("d847d3a5-cab0-4a98-8c32-ecb45c59ad24")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IExpandCollapseProvider {
    public ExpandCollapseState ExpandCollapseState { get; }
    public abstract virtual void Expand();
    public abstract virtual void Collapse();
    public abstract virtual ExpandCollapseState get_ExpandCollapseState();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("d02541f1-fb81-4d64-ae32-f520f8a6dbd1")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IGridItemProvider {
    public int Row { get; }
    public int Column { get; }
    public int RowSpan { get; }
    public int ColumnSpan { get; }
    public IRawElementProviderSimple ContainingGrid { get; }
    public abstract virtual int get_Row();
    public abstract virtual int get_Column();
    public abstract virtual int get_RowSpan();
    public abstract virtual int get_ColumnSpan();
    public abstract virtual IRawElementProviderSimple get_ContainingGrid();
}
[ComVisibleAttribute("True")]
[GuidAttribute("b17d6187-0907-464b-a168-0ef17a1572b1")]
[InterfaceTypeAttribute("1")]
public interface System.Windows.Automation.Providers.IGridProvider {
    public int RowCount { get; }
    public int ColumnCount { get; }
    public abstract virtual IRawElementProviderSimple GetItem(int row, int column);
    public abstract virtual int get_RowCount();
    public abstract virtual int get_ColumnCount();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")]
public interface System.Windows.Automation.Providers.IInvokeProvider {
    public abstract virtual void Invoke();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E747770B-39CE-4382-AB30-D8FB3F336F24")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IItemContainerProvider {
    public abstract virtual IRawElementProviderSimple FindItemByProperty(IRawElementProviderSimple pStartAfter, int propertyId, object Value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("E44C3566-915D-4070-99C6-047BFF5A08F5")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ILegacyIAccessibleProvider {
    public int ChildId { get; }
    public string Name { get; }
    public string Value { get; }
    public string Description { get; }
    public UInt32 Role { get; }
    public UInt32 state { get; }
    public string Help { get; }
    public string KeyboardShortcut { get; }
    public string DefaultAction { get; }
    public abstract virtual void Select(int flagsSelect);
    public abstract virtual void DoDefaultAction();
    public abstract virtual void SetValue(string szValue);
    public abstract virtual IAccessible GetIAccessible();
    public abstract virtual int get_ChildId();
    public abstract virtual string get_Name();
    public abstract virtual string get_Value();
    public abstract virtual string get_Description();
    public abstract virtual UInt32 get_Role();
    public abstract virtual UInt32 get_state();
    public abstract virtual string get_Help();
    public abstract virtual string get_KeyboardShortcut();
    public abstract virtual IRawElementProviderSimple[] GetSelection();
    public abstract virtual string get_DefaultAction();
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("6278cab1-b556-4a1a-b4e0-418acc523201")]
public interface System.Windows.Automation.Providers.IMultipleViewProvider {
    public int CurrentView { get; }
    public abstract virtual string GetViewName(int viewId);
    public abstract virtual void SetCurrentView(int viewId);
    public abstract virtual int get_CurrentView();
    public abstract virtual Int32[] GetSupportedViews();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3AD86EBD-F5EF-483D-BB18-B1042A475D64")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IObjectModelProvider {
    public abstract virtual object GetUnderlyingObjectModel();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("36dc7aef-33e6-4691-afe1-2be7274b3d33")]
public interface System.Windows.Automation.Providers.IRangeValueProvider {
    public double Value { get; }
    public bool IsReadOnly { get; }
    public double Maximum { get; }
    public double Minimum { get; }
    public double LargeChange { get; }
    public double SmallChange { get; }
    public abstract virtual void SetValue(double value);
    public abstract virtual double get_Value();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual double get_Maximum();
    public abstract virtual double get_Minimum();
    public abstract virtual double get_LargeChange();
    public abstract virtual double get_SmallChange();
}
[GuidAttribute("a407b27b-0f6d-4427-9292-473c7bf93258")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IRawElementProviderAdviseEvents {
    public abstract virtual void AdviseEventAdded(int eventId, Int32[] properties);
    public abstract virtual void AdviseEventRemoved(int eventId, Int32[] properties);
}
[GuidAttribute("f7063da8-8359-439c-9297-bbc5299a7d87")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IRawElementProviderFragment {
    public UIARect BoundingRectangle { get; }
    public IRawElementProviderFragmentRoot FragmentRoot { get; }
    public abstract virtual IRawElementProviderFragment Navigate(NavigateDirection direction);
    public abstract virtual Int32[] GetRuntimeId();
    public abstract virtual UIARect get_BoundingRectangle();
    public abstract virtual IRawElementProviderSimple[] GetEmbeddedFragmentRoots();
    public abstract virtual void SetFocus();
    public abstract virtual IRawElementProviderFragmentRoot get_FragmentRoot();
}
[ComVisibleAttribute("True")]
[GuidAttribute("620ce2a5-ab8f-40a9-86cb-de3c75599b58")]
[InterfaceTypeAttribute("1")]
public interface System.Windows.Automation.Providers.IRawElementProviderFragmentRoot {
    public abstract virtual IRawElementProviderFragment ElementProviderFromPoint(double x, double y);
    public abstract virtual IRawElementProviderFragment GetFocus();
}
[ComVisibleAttribute("True")]
[GuidAttribute("1d5df27c-8947-4425-b8d9-79787bb460b8")]
[InterfaceTypeAttribute("1")]
public interface System.Windows.Automation.Providers.IRawElementProviderHwndOverride {
    public abstract virtual IRawElementProviderSimple GetOverrideProviderForHwnd(IntPtr hwnd);
}
[GuidAttribute("2360c714-4bf1-4b26-ba65-9b21316127eb")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface System.Windows.Automation.Providers.IScrollItemProvider {
    public abstract virtual void ScrollIntoView();
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("b38b8077-1fc3-42a5-8cae-d40c2215055a")]
public interface System.Windows.Automation.Providers.IScrollProvider {
    public double HorizontalScrollPercent { get; }
    public double VerticalScrollPercent { get; }
    public double HorizontalViewSize { get; }
    public double VerticalViewSize { get; }
    public bool HorizontallyScrollable { get; }
    public bool VerticallyScrollable { get; }
    public abstract virtual void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public abstract virtual void SetScrollPercent(double horizontalPercent, double verticalPercent);
    public abstract virtual double get_HorizontalScrollPercent();
    public abstract virtual double get_VerticalScrollPercent();
    public abstract virtual double get_HorizontalViewSize();
    public abstract virtual double get_VerticalViewSize();
    public abstract virtual bool get_HorizontallyScrollable();
    public abstract virtual bool get_VerticallyScrollable();
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("2acad808-b2d4-452d-a407-91ff1ad167b2")]
public interface System.Windows.Automation.Providers.ISelectionItemProvider {
    public bool IsSelected { get; }
    public IRawElementProviderSimple SelectionContainer { get; }
    public abstract virtual void Select();
    public abstract virtual void AddToSelection();
    public abstract virtual void RemoveFromSelection();
    public abstract virtual bool get_IsSelected();
    public abstract virtual IRawElementProviderSimple get_SelectionContainer();
}
[ComVisibleAttribute("True")]
[GuidAttribute("fb8b03af-3bdf-48d4-bd36-1a65793be168")]
[InterfaceTypeAttribute("1")]
public interface System.Windows.Automation.Providers.ISelectionProvider {
    public bool CanSelectMultiple { get; }
    public bool IsSelectionRequired { get; }
    public abstract virtual IRawElementProviderSimple[] GetSelection();
    public abstract virtual bool get_CanSelectMultiple();
    public abstract virtual bool get_IsSelectionRequired();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("EAED4660-7B3D-4879-A2E6-365CE603F3D0")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ISpreadsheetItemProvider {
    public string Formula { get; }
    public abstract virtual string get_Formula();
    public abstract virtual IRawElementProviderSimple[] GetAnnotationObjects();
    public abstract virtual AnnotationType[] GetAnnotationTypes();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6F6B5D35-5525-4F80-B758-85473832FFC7")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ISpreadsheetProvider {
    public abstract virtual IRawElementProviderSimple GetItemByName(string name);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("19B6B649-F5D7-4A6D-BDCB-129252BE588A")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IStylesProvider {
    public StyleId StyleId { get; }
    public string StyleName { get; }
    public int FillColor { get; }
    public string FillPatternStyle { get; }
    public string Shape { get; }
    public int FillPatternColor { get; }
    public string ExtendedProperties { get; }
    public abstract virtual StyleId get_StyleId();
    public abstract virtual string get_StyleName();
    public abstract virtual int get_FillColor();
    public abstract virtual string get_FillPatternStyle();
    public abstract virtual string get_Shape();
    public abstract virtual int get_FillPatternColor();
    public abstract virtual string get_ExtendedProperties();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("29DB1A06-02CE-4CF7-9B42-565D4FAB20EE")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ISynchronizedInputProvider {
    public abstract virtual void StartListening(SynchronizedInputType inputType);
    public abstract virtual void Cancel();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("b9734fa6-771f-4d78-9c90-2517999349cd")]
public interface System.Windows.Automation.Providers.ITableItemProvider {
    public abstract virtual IRawElementProviderSimple[] GetRowHeaderItems();
    public abstract virtual IRawElementProviderSimple[] GetColumnHeaderItems();
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("9c860395-97b3-490a-b52a-858cc22af166")]
public interface System.Windows.Automation.Providers.ITableProvider {
    public RowOrColumnMajor RowOrColumnMajor { get; }
    public abstract virtual IRawElementProviderSimple[] GetRowHeaders();
    public abstract virtual IRawElementProviderSimple[] GetColumnHeaders();
    public abstract virtual RowOrColumnMajor get_RowOrColumnMajor();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4C2DE2B9-C88F-4F88-A111-F1D336B7D1A9")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ITextChildProvider {
    public IRawElementProviderSimple TextContainer { get; }
    public ITextRangeProvider TextRange { get; }
    public abstract virtual IRawElementProviderSimple get_TextContainer();
    public abstract virtual ITextRangeProvider get_TextRange();
}
[GuidAttribute("3589c92c-63f3-4367-99bb-ada653b77cf2")]
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
public interface System.Windows.Automation.Providers.ITextProvider {
    public ITextRangeProvider DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    public abstract virtual ITextRangeProvider[] GetSelection();
    public abstract virtual ITextRangeProvider[] GetVisibleRanges();
    public abstract virtual ITextRangeProvider RangeFromChild(IRawElementProviderSimple childElement);
    public abstract virtual ITextRangeProvider RangeFromPoint(UIAPoint screenLocation);
    public abstract virtual ITextRangeProvider get_DocumentRange();
    public abstract virtual SupportedTextSelection get_SupportedTextSelection();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0DC5E6ED-3E16-4BF1-8F9A-A979878BC195")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ITextProvider2 {
    public ITextRangeProvider DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    public abstract virtual ITextRangeProvider[] GetSelection();
    public abstract virtual ITextRangeProvider[] GetVisibleRanges();
    public abstract virtual ITextRangeProvider RangeFromChild(IRawElementProviderSimple childElement);
    public abstract virtual ITextRangeProvider RangeFromPoint(UIAPoint screenLocation);
    public abstract virtual ITextRangeProvider get_DocumentRange();
    public abstract virtual SupportedTextSelection get_SupportedTextSelection();
    public abstract virtual ITextRangeProvider RangeFromAnnotation(IRawElementProviderSimple annotation);
    public abstract virtual ITextRangeProvider GetCaretRange(Boolean& isActive);
}
[GuidAttribute("5347ad7b-c355-46f8-aff5-909033582f63")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ITextRangeProvider {
    public abstract virtual ITextRangeProvider Clone();
    public abstract virtual bool Compare(ITextRangeProvider range);
    public abstract virtual int CompareEndpoints(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    public abstract virtual void ExpandToEnclosingUnit(TextUnit unit);
    public abstract virtual ITextRangeProvider FindAttribute(int attribute, object value, bool backward);
    public abstract virtual ITextRangeProvider FindText(string text, bool backward, bool ignoreCase);
    public abstract virtual object GetAttributeValue(int attribute);
    public abstract virtual Double[] GetBoundingRectangles();
    public abstract virtual IRawElementProviderSimple GetEnclosingElement();
    public abstract virtual string GetText(int maxLength);
    public abstract virtual int Move(TextUnit unit, int count);
    public abstract virtual int MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    public abstract virtual void MoveEndpointByRange(TextPatternRangeEndpoint endpoint, ITextRangeProvider targetRange, TextPatternRangeEndpoint targetEndpoint);
    public abstract virtual void Select();
    public abstract virtual void AddToSelection();
    public abstract virtual void RemoveFromSelection();
    public abstract virtual void ScrollIntoView(bool alignToTop);
    public abstract virtual IRawElementProviderSimple[] GetChildren();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("56d00bd0-c4f4-433c-a836-1a52a57e0892")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IToggleProvider {
    public ToggleState ToggleState { get; }
    public abstract virtual void Toggle();
    public abstract virtual ToggleState get_ToggleState();
}
[ComVisibleAttribute("True")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("6829ddc4-4f91-4ffa-b86f-bd3e2987cb4c")]
public interface System.Windows.Automation.Providers.ITransformProvider {
    public bool CanMove { get; }
    public bool CanResize { get; }
    public bool CanRotate { get; }
    public abstract virtual void Move(double x, double y);
    public abstract virtual void Resize(double width, double height);
    public abstract virtual void Rotate(double degrees);
    public abstract virtual bool get_CanMove();
    public abstract virtual bool get_CanResize();
    public abstract virtual bool get_CanRotate();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4758742F-7AC2-460C-BC48-09FC09308A93")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.ITransformProvider2 {
    public bool CanMove { get; }
    public bool CanResize { get; }
    public bool CanRotate { get; }
    public bool CanZoom { get; }
    public double ZoomLevel { get; }
    public double ZoomMinimum { get; }
    public double ZoomMaximum { get; }
    public abstract virtual void Move(double x, double y);
    public abstract virtual void Resize(double width, double height);
    public abstract virtual void Rotate(double degrees);
    public abstract virtual bool get_CanMove();
    public abstract virtual bool get_CanResize();
    public abstract virtual bool get_CanRotate();
    public abstract virtual void Zoom(double zoom);
    public abstract virtual bool get_CanZoom();
    public abstract virtual double get_ZoomLevel();
    public abstract virtual double get_ZoomMinimum();
    public abstract virtual double get_ZoomMaximum();
    public abstract virtual void ZoomByUnit(ZoomUnit zoomUnit);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("c7935180-6fb3-4201-b174-7df73adbf64a")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IValueProvider {
    public string Value { get; }
    public bool IsReadOnly { get; }
    public abstract virtual void SetValue(string value);
    public abstract virtual string get_Value();
    public abstract virtual bool get_IsReadOnly();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("CB98B665-2D35-4FAC-AD35-F3C60D0C0B8B")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IVirtualizedItemProvider {
    public abstract virtual void Realize();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("987df77b-db06-4d77-8f8a-86a9c3bb90b9")]
[ComVisibleAttribute("True")]
public interface System.Windows.Automation.Providers.IWindowProvider {
    public bool Maximizable { get; }
    public bool Minimizable { get; }
    public bool IsModal { get; }
    public WindowVisualState VisualState { get; }
    public WindowInteractionState InteractionState { get; }
    public bool IsTopmost { get; }
    public abstract virtual void SetVisualState(WindowVisualState state);
    public abstract virtual void Close();
    public abstract virtual bool WaitForInputIdle(int milliseconds);
    public abstract virtual bool get_Maximizable();
    public abstract virtual bool get_Minimizable();
    public abstract virtual bool get_IsModal();
    public abstract virtual WindowVisualState get_VisualState();
    public abstract virtual WindowInteractionState get_InteractionState();
    public abstract virtual bool get_IsTopmost();
}
[GuidAttribute("670c3006-bf4c-428b-8534-e1848f645122")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Providers.NavigateDirection : Enum {
    public int value__;
    public static NavigateDirection Parent;
    public static NavigateDirection NextSibling;
    public static NavigateDirection PreviousSibling;
    public static NavigateDirection FirstChild;
    public static NavigateDirection LastChild;
}
[FlagsAttribute]
public enum System.Windows.Automation.Providers.ProviderOptions : Enum {
    public int value__;
    public static ProviderOptions ClientSideProvider;
    public static ProviderOptions ServerSideProvider;
    public static ProviderOptions NonClientAreaProvider;
    public static ProviderOptions OverrideProvider;
    public static ProviderOptions ProviderOwnsSetFocus;
    public static ProviderOptions UseComThreading;
}
public class System.Windows.Automation.ProxyAssemblyNotLoadedException : Exception {
    public ProxyAssemblyNotLoadedException(Exception innerException);
    public ProxyAssemblyNotLoadedException(string message);
    public ProxyAssemblyNotLoadedException(string message, Exception innerException);
    protected ProxyAssemblyNotLoadedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.Windows.Automation.ProxyFactoryCallbackWrapper : object {
    private ClientSideProviderFactoryCallback _callback;
    private int _serialNumber;
    private static int _staticSerialNumber;
    private string UIAutomationClient.IUIAutomationProxyFactory.ProxyFactoryId { get; }
    public ProxyFactoryCallbackWrapper(ClientSideProviderFactoryCallback callback);
    private static ProxyFactoryCallbackWrapper();
    private sealed virtual override IRawElementProviderSimple UIAutomationClient.IUIAutomationProxyFactory.CreateProvider(IntPtr hwnd, int idObject, int idChild);
    private sealed virtual override string UIAutomationClient.IUIAutomationProxyFactory.get_ProxyFactoryId();
}
public class System.Windows.Automation.RangeValuePattern : BasePattern {
    private IUIAutomationRangeValuePattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty IsReadOnlyProperty;
    public static AutomationProperty LargeChangeProperty;
    public static AutomationProperty MaximumProperty;
    public static AutomationProperty MinimumProperty;
    public static AutomationProperty SmallChangeProperty;
    public static AutomationProperty ValueProperty;
    public RangeValuePatternInformation Cached { get; }
    public RangeValuePatternInformation Current { get; }
    private RangeValuePattern(AutomationElement el, IUIAutomationRangeValuePattern pattern, bool cached);
    private static RangeValuePattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void SetValue(double value);
    public RangeValuePatternInformation get_Cached();
    public RangeValuePatternInformation get_Current();
}
public static class System.Windows.Automation.RangeValuePatternIdentifiers : object {
    public static AutomationProperty IsReadOnlyProperty;
    public static AutomationProperty LargeChangeProperty;
    public static AutomationProperty MaximumProperty;
    public static AutomationProperty MinimumProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty SmallChangeProperty;
    public static AutomationProperty ValueProperty;
    private static RangeValuePatternIdentifiers();
}
[ComVisibleAttribute("True")]
[GuidAttribute("15fdf2e2-9847-41cd-95dd-510612a025ea")]
public enum System.Windows.Automation.RowOrColumnMajor : Enum {
    public int value__;
    public static RowOrColumnMajor RowMajor;
    public static RowOrColumnMajor ColumnMajor;
    public static RowOrColumnMajor Indeterminate;
}
[ComVisibleAttribute("True")]
[GuidAttribute("bd52d3c7-f990-4c52-9ae3-5c377e9eb772")]
public enum System.Windows.Automation.ScrollAmount : Enum {
    public int value__;
    public static ScrollAmount LargeDecrement;
    public static ScrollAmount SmallDecrement;
    public static ScrollAmount NoAmount;
    public static ScrollAmount LargeIncrement;
    public static ScrollAmount SmallIncrement;
}
public class System.Windows.Automation.ScrollItemPattern : BasePattern {
    private IUIAutomationScrollItemPattern _pattern;
    public static AutomationPattern Pattern;
    private ScrollItemPattern(AutomationElement el, IUIAutomationScrollItemPattern pattern, bool cached);
    private static ScrollItemPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void ScrollIntoView();
}
public static class System.Windows.Automation.ScrollItemPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    private static ScrollItemPatternIdentifiers();
}
public class System.Windows.Automation.ScrollPattern : BasePattern {
    private IUIAutomationScrollPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty HorizontallyScrollableProperty;
    public static AutomationProperty HorizontalScrollPercentProperty;
    public static AutomationProperty HorizontalViewSizeProperty;
    public static double NoScroll;
    public static AutomationProperty VerticallyScrollableProperty;
    public static AutomationProperty VerticalScrollPercentProperty;
    public static AutomationProperty VerticalViewSizeProperty;
    public ScrollPatternInformation Cached { get; }
    public ScrollPatternInformation Current { get; }
    private ScrollPattern(AutomationElement el, IUIAutomationScrollPattern pattern, bool cached);
    private static ScrollPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount);
    public void ScrollHorizontal(ScrollAmount amount);
    public void ScrollVertical(ScrollAmount amount);
    public void SetScrollPercent(double horizontalPercent, double verticalPercent);
    public ScrollPatternInformation get_Cached();
    public ScrollPatternInformation get_Current();
}
public static class System.Windows.Automation.ScrollPatternIdentifiers : object {
    public static AutomationProperty HorizontallyScrollableProperty;
    public static AutomationProperty HorizontalScrollPercentProperty;
    public static AutomationProperty HorizontalViewSizeProperty;
    public static double NoScroll;
    public static AutomationPattern Pattern;
    public static AutomationProperty VerticallyScrollableProperty;
    public static AutomationProperty VerticalScrollPercentProperty;
    public static AutomationProperty VerticalViewSizeProperty;
    private static ScrollPatternIdentifiers();
}
public class System.Windows.Automation.SelectionItemPattern : BasePattern {
    private IUIAutomationSelectionItemPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationEvent ElementAddedToSelectionEvent;
    public static AutomationEvent ElementRemovedFromSelectionEvent;
    public static AutomationEvent ElementSelectedEvent;
    public static AutomationProperty IsSelectedProperty;
    public static AutomationProperty SelectionContainerProperty;
    public SelectionItemPatternInformation Cached { get; }
    public SelectionItemPatternInformation Current { get; }
    private SelectionItemPattern(AutomationElement el, IUIAutomationSelectionItemPattern pattern, bool cached);
    private static SelectionItemPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void AddToSelection();
    public void RemoveFromSelection();
    public void Select();
    public SelectionItemPatternInformation get_Cached();
    public SelectionItemPatternInformation get_Current();
}
public static class System.Windows.Automation.SelectionItemPatternIdentifiers : object {
    public static AutomationEvent ElementAddedToSelectionEvent;
    public static AutomationEvent ElementRemovedFromSelectionEvent;
    public static AutomationEvent ElementSelectedEvent;
    public static AutomationProperty IsSelectedProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty SelectionContainerProperty;
    private static SelectionItemPatternIdentifiers();
}
public class System.Windows.Automation.SelectionPattern : BasePattern {
    private IUIAutomationSelectionPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty CanSelectMultipleProperty;
    public static AutomationEvent InvalidatedEvent;
    public static AutomationProperty IsSelectionRequiredProperty;
    public static AutomationProperty SelectionProperty;
    public SelectionPatternInformation Cached { get; }
    public SelectionPatternInformation Current { get; }
    private SelectionPattern(AutomationElement el, IUIAutomationSelectionPattern pattern, bool cached);
    private static SelectionPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public SelectionPatternInformation get_Cached();
    public SelectionPatternInformation get_Current();
}
public static class System.Windows.Automation.SelectionPatternIdentifiers : object {
    public static AutomationProperty CanSelectMultipleProperty;
    public static AutomationEvent InvalidatedEvent;
    public static AutomationProperty IsSelectionRequiredProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty SelectionProperty;
    private static SelectionPatternIdentifiers();
}
public class System.Windows.Automation.StructureChangedEventArgs : AutomationEventArgs {
    private Int32[] _runtimeID;
    private StructureChangeType _structureChangeType;
    public StructureChangeType StructureChangeType { get; }
    public StructureChangedEventArgs(StructureChangeType structureChangeType, Int32[] runtimeId);
    public Int32[] GetRuntimeId();
    public StructureChangeType get_StructureChangeType();
}
public class System.Windows.Automation.StructureChangedEventHandler : MulticastDelegate {
    public StructureChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StructureChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StructureChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("e4cfef41-071d-472c-a65c-c14f59ea81eb")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.StructureChangeType : Enum {
    public int value__;
    public static StructureChangeType ChildAdded;
    public static StructureChangeType ChildRemoved;
    public static StructureChangeType ChildrenInvalidated;
    public static StructureChangeType ChildrenBulkAdded;
    public static StructureChangeType ChildrenBulkRemoved;
    public static StructureChangeType ChildrenReordered;
}
public enum System.Windows.Automation.StyleId : Enum {
    public int value__;
    public static StyleId Custom;
    public static StyleId Heading1;
    public static StyleId Heading2;
    public static StyleId Heading3;
    public static StyleId Heading4;
    public static StyleId Heading5;
    public static StyleId Heading6;
    public static StyleId Heading7;
    public static StyleId Heading8;
    public static StyleId Heading9;
    public static StyleId Title;
    public static StyleId Subtitle;
    public static StyleId Normal;
    public static StyleId Emphasis;
    public static StyleId Quote;
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
[GuidAttribute("3d9e3d8f-bfb0-484f-84ab-93ff4280cbc4")]
public enum System.Windows.Automation.SupportedTextSelection : Enum {
    public int value__;
    public static SupportedTextSelection None;
    public static SupportedTextSelection Single;
    public static SupportedTextSelection Multiple;
}
public class System.Windows.Automation.SynchronizedInputPattern : BasePattern {
    private IUIAutomationSynchronizedInputPattern _pattern;
    public static AutomationEvent InputReachedTargetEvent;
    public static AutomationEvent InputReachedOtherElementEvent;
    public static AutomationEvent InputDiscardedEvent;
    public static AutomationPattern Pattern;
    private SynchronizedInputPattern(AutomationElement el, IUIAutomationSynchronizedInputPattern pattern, bool cached);
    private static SynchronizedInputPattern();
    public void Cancel();
    public void StartListening(SynchronizedInputType type);
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
}
public static class System.Windows.Automation.SynchronizedInputPatternIdentifiers : object {
    public static AutomationEvent InputReachedTargetEvent;
    public static AutomationEvent InputReachedOtherElementEvent;
    public static AutomationEvent InputDiscardedEvent;
    public static AutomationPattern Pattern;
    private static SynchronizedInputPatternIdentifiers();
}
[FlagsAttribute]
public enum System.Windows.Automation.SynchronizedInputType : Enum {
    public int value__;
    public static SynchronizedInputType KeyUp;
    public static SynchronizedInputType KeyDown;
    public static SynchronizedInputType LeftMouseUp;
    public static SynchronizedInputType LeftMouseDown;
    public static SynchronizedInputType RightMouseUp;
    public static SynchronizedInputType RightMouseDown;
}
public class System.Windows.Automation.TableItemPattern : GridItemPattern {
    private IUIAutomationTableItemPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty ColumnHeaderItemsProperty;
    public static AutomationProperty RowHeaderItemsProperty;
    public TableItemPatternInformation Cached { get; }
    public TableItemPatternInformation Current { get; }
    private TableItemPattern(AutomationElement el, IUIAutomationTableItemPattern tablePattern, IUIAutomationGridItemPattern gridPattern, bool cached);
    private static TableItemPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public TableItemPatternInformation get_Cached();
    public TableItemPatternInformation get_Current();
}
public static class System.Windows.Automation.TableItemPatternIdentifiers : object {
    public static AutomationProperty ColumnHeaderItemsProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty RowHeaderItemsProperty;
    private static TableItemPatternIdentifiers();
}
public class System.Windows.Automation.TablePattern : GridPattern {
    private IUIAutomationTablePattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty ColumnHeadersProperty;
    public static AutomationProperty RowHeadersProperty;
    public static AutomationProperty RowOrColumnMajorProperty;
    public TablePatternInformation Cached { get; }
    public TablePatternInformation Current { get; }
    private TablePattern(AutomationElement el, IUIAutomationTablePattern tablePattern, IUIAutomationGridPattern gridPattern, bool cached);
    private static TablePattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public TablePatternInformation get_Cached();
    public TablePatternInformation get_Current();
}
public static class System.Windows.Automation.TablePatternIdentifiers : object {
    public static AutomationProperty ColumnHeadersProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty RowHeadersProperty;
    public static AutomationProperty RowOrColumnMajorProperty;
    private static TablePatternIdentifiers();
}
[GuidAttribute("B6C08F15-AA5E-4754-9E4C-AA279D3F36D4")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Text.AnimationStyle : Enum {
    public int value__;
    public static AnimationStyle None;
    public static AnimationStyle LasVegasLights;
    public static AnimationStyle BlinkingBackground;
    public static AnimationStyle SparkleText;
    public static AnimationStyle MarchingBlackAnts;
    public static AnimationStyle MarchingRedAnts;
    public static AnimationStyle Shimmer;
    public static AnimationStyle Other;
}
[GuidAttribute("814FAC6C-F8DE-4682-AF5F-37C4F720990C")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Text.BulletStyle : Enum {
    public int value__;
    public static BulletStyle None;
    public static BulletStyle HollowRoundBullet;
    public static BulletStyle FilledRoundBullet;
    public static BulletStyle HollowSquareBullet;
    public static BulletStyle FilledSquareBullet;
    public static BulletStyle DashBullet;
    public static BulletStyle Other;
}
[GuidAttribute("4E33C74B-7848-4f1e-B819-A0D866C2EA1F")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Text.CapStyle : Enum {
    public int value__;
    public static CapStyle None;
    public static CapStyle SmallCap;
    public static CapStyle AllCap;
    public static CapStyle AllPetiteCaps;
    public static CapStyle PetiteCaps;
    public static CapStyle Unicase;
    public static CapStyle Titling;
    public static CapStyle Other;
}
[GuidAttribute("2E22CC6B-7C34-4002-91AA-E103A09D1027")]
[FlagsAttribute]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Text.FlowDirections : Enum {
    public int value__;
    public static FlowDirections Default;
    public static FlowDirections RightToLeft;
    public static FlowDirections BottomToTop;
    public static FlowDirections Vertical;
}
[GuidAttribute("1FBE7021-A1E4-4e9b-BE94-2C7DFA59D5DD")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Text.HorizontalTextAlignment : Enum {
    public int value__;
    public static HorizontalTextAlignment Left;
    public static HorizontalTextAlignment Centered;
    public static HorizontalTextAlignment Right;
    public static HorizontalTextAlignment Justified;
}
[GuidAttribute("1F57B37D-CB59-43f4-95E0-7C9E40DB427E")]
[ComVisibleAttribute("True")]
[FlagsAttribute]
public enum System.Windows.Automation.Text.OutlineStyles : Enum {
    public int value__;
    public static OutlineStyles None;
    public static OutlineStyles Outline;
    public static OutlineStyles Shadow;
    public static OutlineStyles Engraved;
    public static OutlineStyles Embossed;
}
[GuidAttribute("909D8633-2941-428e-A549-C752E2FC078C")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Text.TextDecorationLineStyle : Enum {
    public int value__;
    public static TextDecorationLineStyle None;
    public static TextDecorationLineStyle Single;
    public static TextDecorationLineStyle WordsOnly;
    public static TextDecorationLineStyle Double;
    public static TextDecorationLineStyle Dot;
    public static TextDecorationLineStyle Dash;
    public static TextDecorationLineStyle DashDot;
    public static TextDecorationLineStyle DashDotDot;
    public static TextDecorationLineStyle Wavy;
    public static TextDecorationLineStyle ThickSingle;
    public static TextDecorationLineStyle DoubleWavy;
    public static TextDecorationLineStyle ThickWavy;
    public static TextDecorationLineStyle LongDash;
    public static TextDecorationLineStyle ThickDash;
    public static TextDecorationLineStyle ThickDashDot;
    public static TextDecorationLineStyle ThickDashDotDot;
    public static TextDecorationLineStyle ThickDot;
    public static TextDecorationLineStyle ThickLongDash;
    public static TextDecorationLineStyle Other;
}
public class System.Windows.Automation.Text.TextPatternRange : object {
    private IUIAutomationTextRange _range;
    private TextPattern _pattern;
    internal IUIAutomationTextRange NativeRange { get; }
    public TextPattern TextPattern { get; }
    internal TextPatternRange(IUIAutomationTextRange range, TextPattern pattern);
    internal static TextPatternRange Wrap(IUIAutomationTextRange range, TextPattern pattern);
    public void AddToSelection();
    public TextPatternRange Clone();
    public bool Compare(TextPatternRange range);
    public int CompareEndpoints(TextPatternRangeEndpoint endpoint, TextPatternRange targetRange, TextPatternRangeEndpoint targetEndpoint);
    public void ExpandToEnclosingUnit(TextUnit unit);
    public TextPatternRange FindAttribute(AutomationTextAttribute attribute, object value, bool backward);
    public TextPatternRange FindText(string text, bool backward, bool ignoreCase);
    public object GetAttributeValue(AutomationTextAttribute attribute);
    public Rectangle[] GetBoundingRectangles();
    public AutomationElement[] GetChildren();
    public AutomationElement GetEnclosingElement();
    public string GetText(int maxLength);
    public int Move(TextUnit unit, int count);
    public void MoveEndpointByRange(TextPatternRangeEndpoint endpoint, TextPatternRange targetRange, TextPatternRangeEndpoint targetEndpoint);
    public int MoveEndpointByUnit(TextPatternRangeEndpoint endpoint, TextUnit unit, int count);
    public void RemoveFromSelection();
    public void ScrollIntoView(bool alignToTop);
    public void Select();
    internal static TextPatternRange[] Wrap(IUIAutomationTextRangeArray ranges, TextPattern pattern);
    internal IUIAutomationTextRange get_NativeRange();
    public TextPattern get_TextPattern();
}
[GuidAttribute("62242CAC-9CD0-4364-813D-4F0A36DD842D")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.Text.TextPatternRangeEndpoint : Enum {
    public int value__;
    public static TextPatternRangeEndpoint Start;
    public static TextPatternRangeEndpoint End;
}
[ComVisibleAttribute("True")]
[GuidAttribute("A044E5C8-FC20-4747-8CC8-1487F9CBB680")]
public enum System.Windows.Automation.Text.TextUnit : Enum {
    public int value__;
    public static TextUnit Character;
    public static TextUnit Format;
    public static TextUnit Word;
    public static TextUnit Line;
    public static TextUnit Paragraph;
    public static TextUnit Page;
    public static TextUnit Document;
}
public class System.Windows.Automation.TextPattern : BasePattern {
    private IUIAutomationTextPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationTextAttribute AnimationStyleAttribute;
    public static AutomationTextAttribute BackgroundColorAttribute;
    public static AutomationTextAttribute BulletStyleAttribute;
    public static AutomationTextAttribute CapStyleAttribute;
    public static AutomationTextAttribute CultureAttribute;
    public static AutomationTextAttribute FontNameAttribute;
    public static AutomationTextAttribute FontSizeAttribute;
    public static AutomationTextAttribute FontWeightAttribute;
    public static AutomationTextAttribute ForegroundColorAttribute;
    public static AutomationTextAttribute HorizontalTextAlignmentAttribute;
    public static AutomationTextAttribute IndentationFirstLineAttribute;
    public static AutomationTextAttribute IndentationLeadingAttribute;
    public static AutomationTextAttribute IndentationTrailingAttribute;
    public static AutomationTextAttribute IsHiddenAttribute;
    public static AutomationTextAttribute IsItalicAttribute;
    public static AutomationTextAttribute IsReadOnlyAttribute;
    public static AutomationTextAttribute IsSubscriptAttribute;
    public static AutomationTextAttribute IsSuperscriptAttribute;
    public static AutomationTextAttribute MarginBottomAttribute;
    public static AutomationTextAttribute MarginLeadingAttribute;
    public static AutomationTextAttribute MarginTopAttribute;
    public static AutomationTextAttribute MarginTrailingAttribute;
    public static object MixedAttributeValue;
    public static AutomationTextAttribute OutlineStylesAttribute;
    public static AutomationTextAttribute OverlineColorAttribute;
    public static AutomationTextAttribute OverlineStyleAttribute;
    public static AutomationTextAttribute StrikethroughColorAttribute;
    public static AutomationTextAttribute StrikethroughStyleAttribute;
    public static AutomationTextAttribute TabsAttribute;
    public static AutomationEvent TextChangedEvent;
    public static AutomationTextAttribute TextFlowDirectionsAttribute;
    public static AutomationEvent TextSelectionChangedEvent;
    public static AutomationTextAttribute UnderlineColorAttribute;
    public static AutomationTextAttribute UnderlineStyleAttribute;
    public TextPatternRange DocumentRange { get; }
    public SupportedTextSelection SupportedTextSelection { get; }
    private TextPattern(AutomationElement el, IUIAutomationTextPattern pattern, bool cached);
    private static TextPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public TextPatternRange[] GetSelection();
    public TextPatternRange[] GetVisibleRanges();
    public TextPatternRange RangeFromChild(AutomationElement childElement);
    public TextPatternRange RangeFromPoint(Point screenLocation);
    public TextPatternRange get_DocumentRange();
    public SupportedTextSelection get_SupportedTextSelection();
}
public static class System.Windows.Automation.TextPatternIdentifiers : object {
    public static AutomationTextAttribute AnimationStyleAttribute;
    public static AutomationTextAttribute BackgroundColorAttribute;
    public static AutomationTextAttribute BulletStyleAttribute;
    public static AutomationTextAttribute CapStyleAttribute;
    public static AutomationTextAttribute CultureAttribute;
    public static AutomationTextAttribute FontNameAttribute;
    public static AutomationTextAttribute FontSizeAttribute;
    public static AutomationTextAttribute FontWeightAttribute;
    public static AutomationTextAttribute ForegroundColorAttribute;
    public static AutomationTextAttribute HorizontalTextAlignmentAttribute;
    public static AutomationTextAttribute IndentationFirstLineAttribute;
    public static AutomationTextAttribute IndentationLeadingAttribute;
    public static AutomationTextAttribute IndentationTrailingAttribute;
    public static AutomationTextAttribute IsHiddenAttribute;
    public static AutomationTextAttribute IsItalicAttribute;
    public static AutomationTextAttribute IsReadOnlyAttribute;
    public static AutomationTextAttribute IsSubscriptAttribute;
    public static AutomationTextAttribute IsSuperscriptAttribute;
    public static AutomationTextAttribute MarginBottomAttribute;
    public static AutomationTextAttribute MarginLeadingAttribute;
    public static AutomationTextAttribute MarginTopAttribute;
    public static AutomationTextAttribute MarginTrailingAttribute;
    public static object MixedAttributeValue;
    public static AutomationTextAttribute OutlineStylesAttribute;
    public static AutomationTextAttribute OverlineColorAttribute;
    public static AutomationTextAttribute OverlineStyleAttribute;
    public static AutomationPattern Pattern;
    public static AutomationTextAttribute StrikethroughColorAttribute;
    public static AutomationTextAttribute StrikethroughStyleAttribute;
    public static AutomationTextAttribute TabsAttribute;
    public static AutomationEvent TextChangedEvent;
    public static AutomationTextAttribute TextFlowDirectionsAttribute;
    public static AutomationEvent TextSelectionChangedEvent;
    public static AutomationTextAttribute UnderlineColorAttribute;
    public static AutomationTextAttribute UnderlineStyleAttribute;
    private static TextPatternIdentifiers();
}
public class System.Windows.Automation.TogglePattern : BasePattern {
    private IUIAutomationTogglePattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty ToggleStateProperty;
    public TogglePatternInformation Cached { get; }
    public TogglePatternInformation Current { get; }
    private TogglePattern(AutomationElement el, IUIAutomationTogglePattern pattern, bool cached);
    private static TogglePattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void Toggle();
    public TogglePatternInformation get_Cached();
    public TogglePatternInformation get_Current();
}
public static class System.Windows.Automation.TogglePatternIdentifiers : object {
    public static AutomationPattern Pattern;
    public static AutomationProperty ToggleStateProperty;
    private static TogglePatternIdentifiers();
}
[GuidAttribute("ad7db4af-7166-4478-a402-ad5b77eab2fa")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.ToggleState : Enum {
    public int value__;
    public static ToggleState Off;
    public static ToggleState On;
    public static ToggleState Indeterminate;
}
public class System.Windows.Automation.TransformPattern : BasePattern {
    private IUIAutomationTransformPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty CanMoveProperty;
    public static AutomationProperty CanResizeProperty;
    public static AutomationProperty CanRotateProperty;
    public TransformPatternInformation Cached { get; }
    public TransformPatternInformation Current { get; }
    private TransformPattern(AutomationElement el, IUIAutomationTransformPattern pattern, bool cached);
    private static TransformPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void Move(double x, double y);
    public void Resize(double width, double height);
    public void Rotate(double degrees);
    public TransformPatternInformation get_Cached();
    public TransformPatternInformation get_Current();
}
public static class System.Windows.Automation.TransformPatternIdentifiers : object {
    public static AutomationProperty CanMoveProperty;
    public static AutomationProperty CanResizeProperty;
    public static AutomationProperty CanRotateProperty;
    public static AutomationPattern Pattern;
    private static TransformPatternIdentifiers();
}
[FlagsAttribute]
public enum System.Windows.Automation.TreeScope : Enum {
    public int value__;
    public static TreeScope Element;
    public static TreeScope Children;
    public static TreeScope Descendants;
    public static TreeScope Subtree;
    public static TreeScope Parent;
    public static TreeScope Ancestors;
}
public class System.Windows.Automation.TreeWalker : object {
    private IUIAutomationTreeWalker _obj;
    public static TreeWalker ContentViewWalker;
    public static TreeWalker ControlViewWalker;
    public static TreeWalker RawViewWalker;
    public Condition Condition { get; }
    public TreeWalker(Condition condition);
    internal TreeWalker(IUIAutomationTreeWalker obj);
    private static TreeWalker();
    internal TreeWalker Wrap(IUIAutomationTreeWalker obj);
    public AutomationElement GetFirstChild(AutomationElement element);
    public AutomationElement GetFirstChild(AutomationElement element, CacheRequest request);
    public AutomationElement GetLastChild(AutomationElement element);
    public AutomationElement GetLastChild(AutomationElement element, CacheRequest request);
    public AutomationElement GetNextSibling(AutomationElement element);
    public AutomationElement GetNextSibling(AutomationElement element, CacheRequest request);
    public AutomationElement GetParent(AutomationElement element);
    public AutomationElement GetParent(AutomationElement element, CacheRequest request);
    public AutomationElement GetPreviousSibling(AutomationElement element);
    public AutomationElement GetPreviousSibling(AutomationElement element, CacheRequest request);
    public AutomationElement Normalize(AutomationElement element);
    public AutomationElement Normalize(AutomationElement element, CacheRequest request);
    public Condition get_Condition();
}
public class System.Windows.Automation.ValuePattern : BasePattern {
    private IUIAutomationValuePattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty IsReadOnlyProperty;
    public static AutomationProperty ValueProperty;
    public ValuePatternInformation Cached { get; }
    public ValuePatternInformation Current { get; }
    private ValuePattern(AutomationElement el, IUIAutomationValuePattern pattern, bool cached);
    private static ValuePattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void SetValue(string value);
    public ValuePatternInformation get_Cached();
    public ValuePatternInformation get_Current();
}
public static class System.Windows.Automation.ValuePatternIdentifiers : object {
    public static AutomationProperty IsReadOnlyProperty;
    public static AutomationPattern Pattern;
    public static AutomationProperty ValueProperty;
    private static ValuePatternIdentifiers();
}
public class System.Windows.Automation.VirtualizedItemPattern : BasePattern {
    private IUIAutomationVirtualizedItemPattern _pattern;
    public static AutomationPattern Pattern;
    private VirtualizedItemPattern(AutomationElement el, IUIAutomationVirtualizedItemPattern pattern, bool cached);
    private static VirtualizedItemPattern();
    public void Realize();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
}
public static class System.Windows.Automation.VirtualizedItemPatternIdentifiers : object {
    public static AutomationPattern Pattern;
    private static VirtualizedItemPatternIdentifiers();
}
public class System.Windows.Automation.WindowClosedEventArgs : AutomationEventArgs {
    private Int32[] _runtimeId;
    public WindowClosedEventArgs(Int32[] runtimeId);
    public Int32[] GetRuntimeId();
}
[GuidAttribute("65101cc7-7904-408e-87a7-8c6dbd83a18b")]
[ComVisibleAttribute("True")]
public enum System.Windows.Automation.WindowInteractionState : Enum {
    public int value__;
    public static WindowInteractionState Running;
    public static WindowInteractionState Closing;
    public static WindowInteractionState ReadyForUserInteraction;
    public static WindowInteractionState BlockedByModalWindow;
    public static WindowInteractionState NotResponding;
}
public class System.Windows.Automation.WindowPattern : BasePattern {
    private IUIAutomationWindowPattern _pattern;
    public static AutomationPattern Pattern;
    public static AutomationProperty CanMaximizeProperty;
    public static AutomationProperty CanMinimizeProperty;
    public static AutomationProperty IsModalProperty;
    public static AutomationProperty IsTopmostProperty;
    public static AutomationEvent WindowClosedEvent;
    public static AutomationProperty WindowInteractionStateProperty;
    public static AutomationEvent WindowOpenedEvent;
    public static AutomationProperty WindowVisualStateProperty;
    public WindowPatternInformation Cached { get; }
    public WindowPatternInformation Current { get; }
    private WindowPattern(AutomationElement el, IUIAutomationWindowPattern pattern, bool cached);
    private static WindowPattern();
    internal static object Wrap(AutomationElement el, object pattern, bool cached);
    public void Close();
    public void SetWindowVisualState(WindowVisualState state);
    public bool WaitForInputIdle(int milliseconds);
    public WindowPatternInformation get_Cached();
    public WindowPatternInformation get_Current();
}
public static class System.Windows.Automation.WindowPatternIdentifiers : object {
    public static AutomationProperty CanMaximizeProperty;
    public static AutomationProperty CanMinimizeProperty;
    public static AutomationProperty IsModalProperty;
    public static AutomationProperty IsTopmostProperty;
    public static AutomationPattern Pattern;
    public static AutomationEvent WindowClosedEvent;
    public static AutomationProperty WindowInteractionStateProperty;
    public static AutomationEvent WindowOpenedEvent;
    public static AutomationProperty WindowVisualStateProperty;
    private static WindowPatternIdentifiers();
}
[ComVisibleAttribute("True")]
[GuidAttribute("fdc8f176-aed2-477a-8c89-ea04cc5f278d")]
public enum System.Windows.Automation.WindowVisualState : Enum {
    public int value__;
    public static WindowVisualState Normal;
    public static WindowVisualState Maximized;
    public static WindowVisualState Minimized;
}
public enum System.Windows.Automation.ZoomUnit : Enum {
    public int value__;
    public static ZoomUnit NoAmount;
    public static ZoomUnit LargeDecrement;
    public static ZoomUnit SmallDecrement;
    public static ZoomUnit LargeIncrement;
    public static ZoomUnit SmallIncrement;
}
public class System.Windows.UIAPoint : ValueType {
    internal double _x;
    internal double _y;
    public double X { get; public set; }
    public double Y { get; public set; }
    public UIAPoint(double x, double y);
    public static bool op_Equality(UIAPoint point1, UIAPoint point2);
    public static bool op_Inequality(UIAPoint point1, UIAPoint point2);
    public static bool Equals(UIAPoint point1, UIAPoint point2);
    public virtual bool Equals(object o);
    public bool Equals(UIAPoint value);
    public virtual int GetHashCode();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
    internal string ConvertToString(string format, IFormatProvider provider);
    public void Offset(double offsetX, double offsetY);
    public static UIASize op_Explicit(UIAPoint point);
}
public class System.Windows.UIARect : ValueType {
    internal double _x;
    internal double _y;
    internal double _width;
    internal double _height;
    private static UIARect s_empty;
    public static UIARect Empty { get; }
    public bool IsEmpty { get; }
    public UIAPoint Location { get; public set; }
    public UIASize Size { get; public set; }
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Left { get; }
    public double Top { get; }
    public double Right { get; }
    public double Bottom { get; }
    public UIAPoint TopLeft { get; }
    public UIAPoint TopRight { get; }
    public UIAPoint BottomLeft { get; }
    public UIAPoint BottomRight { get; }
    public UIARect(UIAPoint location, UIASize size);
    public UIARect(double x, double y, double width, double height);
    public UIARect(UIAPoint point1, UIAPoint point2);
    public UIARect(UIASize size);
    private static UIARect();
    public static bool op_Equality(UIARect rect1, UIARect rect2);
    public static bool op_Inequality(UIARect rect1, UIARect rect2);
    public static bool Equals(UIARect rect1, UIARect rect2);
    public virtual bool Equals(object o);
    public bool Equals(UIARect value);
    public virtual int GetHashCode();
    public static UIARect get_Empty();
    public bool get_IsEmpty();
    public UIAPoint get_Location();
    public void set_Location(UIAPoint value);
    public UIASize get_Size();
    public void set_Size(UIASize value);
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public double get_Left();
    public double get_Top();
    public double get_Right();
    public double get_Bottom();
    public UIAPoint get_TopLeft();
    public UIAPoint get_TopRight();
    public UIAPoint get_BottomLeft();
    public UIAPoint get_BottomRight();
    public bool Contains(UIAPoint point);
    public bool Contains(double x, double y);
    public bool Contains(UIARect rect);
    public bool IntersectsWith(UIARect rect);
    public void Intersect(UIARect rect);
    public static UIARect Intersect(UIARect rect1, UIARect rect2);
    public void Union(UIARect rect);
    public static UIARect Union(UIARect rect1, UIARect rect2);
    public void Union(UIAPoint point);
    public static UIARect Union(UIARect rect, UIAPoint point);
    public void Offset(double offsetX, double offsetY);
    public static UIARect Offset(UIARect rect, double offsetX, double offsetY);
    public void Inflate(UIASize size);
    public void Inflate(double width, double height);
    public static UIARect Inflate(UIARect rect, UIASize size);
    public static UIARect Inflate(UIARect rect, double width, double height);
    public void Scale(double scaleX, double scaleY);
    private bool ContainsInternal(double x, double y);
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider provider);
    internal string ConvertToString(string format, IFormatProvider provider);
    private static UIARect CreateEmptyRect();
}
public class System.Windows.UIASize : ValueType {
    internal double _width;
    internal double _height;
    private static UIASize s_empty;
    public static UIASize Empty { get; }
    public bool IsEmpty { get; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public UIASize(double width, double height);
    private static UIASize();
    public static bool op_Equality(UIASize size1, UIASize size2);
    public static bool op_Inequality(UIASize size1, UIASize size2);
    public static bool Equals(UIASize size1, UIASize size2);
    public virtual bool Equals(object o);
    public bool Equals(UIASize value);
    public virtual int GetHashCode();
    public static UIASize get_Empty();
    public bool get_IsEmpty();
    public double get_Width();
    public void set_Width(double value);
    public double get_Height();
    public void set_Height(double value);
    public static UIAPoint op_Explicit(UIASize size);
    private static UIASize CreateEmptySize();
}
internal class UIAComwrapper.Function : MulticastDelegate {
    public Function(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class UIAComwrapper.SafeAbortableMTAThread : object {
    [CompilerGeneratedAttribute]
private static bool <EnableTraces>k__BackingField;
    private bool disposed;
    private Thread threadInstance;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) keepMTAHelperAlive;
    private Function functionToInvoke;
    private Exception functionException;
    private AutoResetEvent eventHelperAccess;
    private AutoResetEvent eventHelperAccessComplete;
    private static int TimeOut;
    private static SafeAbortableMTAThread instance;
    private static object lockObject;
    public static bool EnableTraces { get; public set; }
    internal static SafeAbortableMTAThread Instance { get; }
    private static SafeAbortableMTAThread();
    [CompilerGeneratedAttribute]
public static bool get_EnableTraces();
    [CompilerGeneratedAttribute]
public static void set_EnableTraces(bool value);
    public sealed virtual void Dispose();
    internal void InvokeDelegate(Function functionCode);
    internal static SafeAbortableMTAThread get_Instance();
    private void FunctionInvoker();
    private bool ShouldReThrowException(Exception exception);
    private void StartMTADelegateInvoker();
    private void StopMTADelegateInvoker();
}
internal static class UIAComWrapperInternal.AutomationIdentifierIds : object {
    public static int UIA_ButtonControlTypeId;
    public static int UIA_CalendarControlTypeId;
    public static int UIA_CheckBoxControlTypeId;
    public static int UIA_CustomControlTypeId;
    public static int UIA_DataGridControlTypeId;
    public static int UIA_DataItemControlTypeId;
    public static int UIA_ComboBoxControlTypeId;
    public static int UIA_DocumentControlTypeId;
    public static int UIA_EditControlTypeId;
    public static int UIA_HeaderControlTypeId;
    public static int UIA_HeaderItemControlTypeId;
    public static int UIA_HyperlinkControlTypeId;
    public static int UIA_ImageControlTypeId;
    public static int UIA_GroupControlTypeId;
    public static int UIA_ListControlTypeId;
    public static int UIA_ListItemControlTypeId;
    public static int UIA_MenuControlTypeId;
    public static int UIA_MenuBarControlTypeId;
    public static int UIA_MenuItemControlTypeId;
    public static int UIA_PaneControlTypeId;
    public static int UIA_ProgressBarControlTypeId;
    public static int UIA_RadioButtonControlTypeId;
    public static int UIA_ScrollBarControlTypeId;
    public static int UIA_SemanticZoomControlTypeId;
    public static int UIA_SeparatorControlTypeId;
    public static int UIA_SliderControlTypeId;
    public static int UIA_SpinnerControlTypeId;
    public static int UIA_StatusBarControlTypeId;
    public static int UIA_SplitButtonControlTypeId;
    public static int UIA_TabControlTypeId;
    public static int UIA_TabItemControlTypeId;
    public static int UIA_TableControlTypeId;
    public static int UIA_TextControlTypeId;
    public static int UIA_ThumbControlTypeId;
    public static int UIA_TitleBarControlTypeId;
    public static int UIA_ToolBarControlTypeId;
    public static int UIA_ToolTipControlTypeId;
    public static int UIA_TreeControlTypeId;
    public static int UIA_TreeItemControlTypeId;
    public static int UIA_WindowControlTypeId;
    public static int UIA_InvokePatternId;
    public static int UIA_SelectionPatternId;
    public static int UIA_ValuePatternId;
    public static int UIA_RangeValuePatternId;
    public static int UIA_ScrollPatternId;
    public static int UIA_ExpandCollapsePatternId;
    public static int UIA_GridPatternId;
    public static int UIA_GridItemPatternId;
    public static int UIA_MultipleViewPatternId;
    public static int UIA_WindowPatternId;
    public static int UIA_SelectionItemPatternId;
    public static int UIA_DockPatternId;
    public static int UIA_TablePatternId;
    public static int UIA_TableItemPatternId;
    public static int UIA_TextPatternId;
    public static int UIA_TogglePatternId;
    public static int UIA_TransformPatternId;
    public static int UIA_ScrollItemPatternId;
    public static int UIA_LegacyIAccessiblePatternId;
    public static int UIA_ItemContainerPatternId;
    public static int UIA_VirtualizedItemPatternId;
    public static int UIA_SynchronizedInputPatternId;
    public static int UIA_ToolTipOpenedEventId;
    public static int UIA_ToolTipClosedEventId;
    public static int UIA_StructureChangedEventId;
    public static int UIA_MenuOpenedEventId;
    public static int UIA_AutomationPropertyChangedEventId;
    public static int UIA_AutomationFocusChangedEventId;
    public static int UIA_AsyncContentLoadedEventId;
    public static int UIA_MenuClosedEventId;
    public static int UIA_LayoutInvalidatedEventId;
    public static int UIA_Invoke_InvokedEventId;
    public static int UIA_SelectionItem_ElementAddedToSelectionEventId;
    public static int UIA_SelectionItem_ElementRemovedFromSelectionEventId;
    public static int UIA_SelectionItem_ElementSelectedEventId;
    public static int UIA_Selection_InvalidatedEventId;
    public static int UIA_Text_TextSelectionChangedEventId;
    public static int UIA_Text_TextChangedEventId;
    public static int UIA_Window_WindowOpenedEventId;
    public static int UIA_Window_WindowClosedEventId;
    public static int UIA_MenuModeStartEventId;
    public static int UIA_MenuModeEndEventId;
    public static int UIA_InputReachedTargetEventId;
    public static int UIA_InputReachedOtherElementEventId;
    public static int UIA_InputDiscardedEventId;
    public static int UIA_RuntimeIdPropertyId;
    public static int UIA_BoundingRectanglePropertyId;
    public static int UIA_ProcessIdPropertyId;
    public static int UIA_ControlTypePropertyId;
    public static int UIA_LocalizedControlTypePropertyId;
    public static int UIA_NamePropertyId;
    public static int UIA_AcceleratorKeyPropertyId;
    public static int UIA_AccessKeyPropertyId;
    public static int UIA_HasKeyboardFocusPropertyId;
    public static int UIA_IsKeyboardFocusablePropertyId;
    public static int UIA_IsEnabledPropertyId;
    public static int UIA_AutomationIdPropertyId;
    public static int UIA_ClassNamePropertyId;
    public static int UIA_HelpTextPropertyId;
    public static int UIA_ClickablePointPropertyId;
    public static int UIA_CulturePropertyId;
    public static int UIA_IsControlElementPropertyId;
    public static int UIA_IsContentElementPropertyId;
    public static int UIA_LabeledByPropertyId;
    public static int UIA_IsPasswordPropertyId;
    public static int UIA_NativeWindowHandlePropertyId;
    public static int UIA_ItemTypePropertyId;
    public static int UIA_IsOffscreenPropertyId;
    public static int UIA_OrientationPropertyId;
    public static int UIA_FrameworkIdPropertyId;
    public static int UIA_IsRequiredForFormPropertyId;
    public static int UIA_ItemStatusPropertyId;
    public static int UIA_IsDockPatternAvailablePropertyId;
    public static int UIA_IsExpandCollapsePatternAvailablePropertyId;
    public static int UIA_IsGridItemPatternAvailablePropertyId;
    public static int UIA_IsGridPatternAvailablePropertyId;
    public static int UIA_IsInvokePatternAvailablePropertyId;
    public static int UIA_IsMultipleViewPatternAvailablePropertyId;
    public static int UIA_IsRangeValuePatternAvailablePropertyId;
    public static int UIA_IsScrollPatternAvailablePropertyId;
    public static int UIA_IsScrollItemPatternAvailablePropertyId;
    public static int UIA_IsSelectionItemPatternAvailablePropertyId;
    public static int UIA_IsSelectionPatternAvailablePropertyId;
    public static int UIA_IsTablePatternAvailablePropertyId;
    public static int UIA_IsTableItemPatternAvailablePropertyId;
    public static int UIA_IsTextPatternAvailablePropertyId;
    public static int UIA_IsTogglePatternAvailablePropertyId;
    public static int UIA_IsTransformPatternAvailablePropertyId;
    public static int UIA_IsValuePatternAvailablePropertyId;
    public static int UIA_IsWindowPatternAvailablePropertyId;
    public static int UIA_ValueValuePropertyId;
    public static int UIA_ValueIsReadOnlyPropertyId;
    public static int UIA_RangeValueValuePropertyId;
    public static int UIA_RangeValueIsReadOnlyPropertyId;
    public static int UIA_RangeValueMinimumPropertyId;
    public static int UIA_RangeValueMaximumPropertyId;
    public static int UIA_RangeValueLargeChangePropertyId;
    public static int UIA_RangeValueSmallChangePropertyId;
    public static int UIA_ScrollHorizontalScrollPercentPropertyId;
    public static int UIA_ScrollHorizontalViewSizePropertyId;
    public static int UIA_ScrollVerticalScrollPercentPropertyId;
    public static int UIA_ScrollVerticalViewSizePropertyId;
    public static int UIA_ScrollHorizontallyScrollablePropertyId;
    public static int UIA_ScrollVerticallyScrollablePropertyId;
    public static int UIA_SelectionSelectionPropertyId;
    public static int UIA_SelectionCanSelectMultiplePropertyId;
    public static int UIA_SelectionIsSelectionRequiredPropertyId;
    public static int UIA_GridRowCountPropertyId;
    public static int UIA_GridColumnCountPropertyId;
    public static int UIA_GridItemRowPropertyId;
    public static int UIA_GridItemColumnPropertyId;
    public static int UIA_GridItemRowSpanPropertyId;
    public static int UIA_GridItemColumnSpanPropertyId;
    public static int UIA_GridItemContainingGridPropertyId;
    public static int UIA_DockDockPositionPropertyId;
    public static int UIA_ExpandCollapseExpandCollapseStatePropertyId;
    public static int UIA_MultipleViewCurrentViewPropertyId;
    public static int UIA_MultipleViewSupportedViewsPropertyId;
    public static int UIA_WindowCanMaximizePropertyId;
    public static int UIA_WindowCanMinimizePropertyId;
    public static int UIA_WindowWindowVisualStatePropertyId;
    public static int UIA_WindowWindowInteractionStatePropertyId;
    public static int UIA_WindowIsModalPropertyId;
    public static int UIA_WindowIsTopmostPropertyId;
    public static int UIA_SelectionItemIsSelectedPropertyId;
    public static int UIA_SelectionItemSelectionContainerPropertyId;
    public static int UIA_TableRowHeadersPropertyId;
    public static int UIA_TableColumnHeadersPropertyId;
    public static int UIA_TableRowOrColumnMajorPropertyId;
    public static int UIA_TableItemRowHeaderItemsPropertyId;
    public static int UIA_TableItemColumnHeaderItemsPropertyId;
    public static int UIA_ToggleToggleStatePropertyId;
    public static int UIA_TransformCanMovePropertyId;
    public static int UIA_TransformCanResizePropertyId;
    public static int UIA_TransformCanRotatePropertyId;
    public static int UIA_IsLegacyIAccessiblePatternAvailablePropertyId;
    public static int UIA_LegacyIAccessibleChildIdPropertyId;
    public static int UIA_LegacyIAccessibleNamePropertyId;
    public static int UIA_LegacyIAccessibleValuePropertyId;
    public static int UIA_LegacyIAccessibleDescriptionPropertyId;
    public static int UIA_LegacyIAccessibleRolePropertyId;
    public static int UIA_LegacyIAccessibleStatePropertyId;
    public static int UIA_LegacyIAccessibleHelpPropertyId;
    public static int UIA_LegacyIAccessibleKeyboardShortcutPropertyId;
    public static int UIA_LegacyIAccessibleSelectionPropertyId;
    public static int UIA_LegacyIAccessibleDefaultActionPropertyId;
    public static int UIA_AriaRolePropertyId;
    public static int UIA_AriaPropertiesPropertyId;
    public static int UIA_IsDataValidForFormPropertyId;
    public static int UIA_ControllerForPropertyId;
    public static int UIA_DescribedByPropertyId;
    public static int UIA_FlowsToPropertyId;
    public static int UIA_ProviderDescriptionPropertyId;
    public static int UIA_IsItemContainerPatternAvailablePropertyId;
    public static int UIA_IsVirtualizedItemPatternAvailablePropertyId;
    public static int UIA_IsSynchronizedInputPatternAvailablePropertyId;
    public static int UIA_OptimizeForVisualContentPropertyId;
    public static int UIA_IsObjectModelPatternAvailablePropertyId;
    public static int UIA_AnnotationAnnotationTypeIdPropertyId;
    public static int UIA_AnnotationAnnotationTypeNamePropertyId;
    public static int UIA_AnnotationAuthorPropertyId;
    public static int UIA_AnnotationDateTimePropertyId;
    public static int UIA_AnnotationTargetPropertyId;
    public static int UIA_IsAnnotationPatternAvailablePropertyId;
    public static int UIA_IsTextPattern2AvailablePropertyId;
    public static int UIA_StylesStyleIdPropertyId;
    public static int UIA_StylesStyleNamePropertyId;
    public static int UIA_StylesFillColorPropertyId;
    public static int UIA_StylesFillPatternStylePropertyId;
    public static int UIA_StylesShapePropertyId;
    public static int UIA_StylesFillPatternColorPropertyId;
    public static int UIA_StylesExtendedPropertiesPropertyId;
    public static int UIA_IsStylesPatternAvailablePropertyId;
    public static int UIA_IsSpreadsheetPatternAvailablePropertyId;
    public static int UIA_SpreadsheetItemFormulaPropertyId;
    public static int UIA_SpreadsheetItemAnnotationObjectsPropertyId;
    public static int UIA_SpreadsheetItemAnnotationTypesPropertyId;
    public static int UIA_IsSpreadsheetItemPatternAvailablePropertyId;
    public static int UIA_Transform2CanZoomPropertyId;
    public static int UIA_IsTransformPattern2AvailablePropertyId;
    public static int UIA_LiveSettingPropertyId;
    public static int UIA_IsTextChildPatternAvailablePropertyId;
    public static int UIA_IsDragPatternAvailablePropertyId;
    public static int UIA_DragIsGrabbedPropertyId;
    public static int UIA_DragDropEffectPropertyId;
    public static int UIA_DragDropEffectsPropertyId;
    public static int UIA_IsDropTargetPatternAvailablePropertyId;
    public static int UIA_DropTargetDropTargetEffectPropertyId;
    public static int UIA_DropTargetDropTargetEffectsPropertyId;
    public static int UIA_DragGrabbedItemsPropertyId;
    public static int UIA_Transform2ZoomLevelPropertyId;
    public static int UIA_Transform2ZoomMinimumPropertyId;
    public static int UIA_Transform2ZoomMaximumPropertyId;
    public static int UIA_FlowsFromPropertyId;
    public static int UIA_AnimationStyleAttributeId;
    public static int UIA_BackgroundColorAttributeId;
    public static int UIA_BulletStyleAttributeId;
    public static int UIA_CapStyleAttributeId;
    public static int UIA_CultureAttributeId;
    public static int UIA_FontNameAttributeId;
    public static int UIA_FontSizeAttributeId;
    public static int UIA_FontWeightAttributeId;
    public static int UIA_ForegroundColorAttributeId;
    public static int UIA_HorizontalTextAlignmentAttributeId;
    public static int UIA_IndentationFirstLineAttributeId;
    public static int UIA_IndentationLeadingAttributeId;
    public static int UIA_IndentationTrailingAttributeId;
    public static int UIA_IsHiddenAttributeId;
    public static int UIA_IsItalicAttributeId;
    public static int UIA_IsReadOnlyAttributeId;
    public static int UIA_IsSubscriptAttributeId;
    public static int UIA_IsSuperscriptAttributeId;
    public static int UIA_MarginBottomAttributeId;
    public static int UIA_MarginLeadingAttributeId;
    public static int UIA_MarginTopAttributeId;
    public static int UIA_MarginTrailingAttributeId;
    public static int UIA_OutlineStylesAttributeId;
    public static int UIA_OverlineColorAttributeId;
    public static int UIA_OverlineStyleAttributeId;
    public static int UIA_StrikethroughColorAttributeId;
    public static int UIA_StrikethroughStyleAttributeId;
    public static int UIA_TabsAttributeId;
    public static int UIA_TextFlowDirectionsAttributeId;
    public static int UIA_UnderlineColorAttributeId;
    public static int UIA_UnderlineStyleAttributeId;
    public static int UIA_AnnotationTypesAttributeId;
    public static int UIA_AnnotationObjectsAttributeId;
    public static int UIA_StyleNameAttributeId;
    public static int UIA_StyleIdAttributeId;
    public static int UIA_LinkAttributeId;
    public static int UIA_IsActiveAttributeId;
    public static int UIA_SelectionActiveEndAttributeId;
    public static int UIA_CaretPositionAttributeId;
    public static int UIA_CaretBidiModeAttributeId;
    private static AutomationIdentifierIds();
}
internal class UIAComWrapperInternal.BasicEventListener : EventListener {
    private AutomationEventHandler _basicHandler;
    public BasicEventListener(AutomationEvent eventKind, AutomationElement element, AutomationEventHandler handler);
    private sealed virtual override void UIAutomationClient.IUIAutomationEventHandler.HandleAutomationEvent(IUIAutomationElement sender, int eventId);
}
internal static class UIAComWrapperInternal.ClientEventList : object {
    private static LinkedList`1<EventListener> _events;
    private static ClientEventList();
    public static void Add(EventListener listener);
    public static EventListener Remove(AutomationEvent eventId, AutomationElement element, Delegate handler);
    public static void Clear();
}
internal class UIAComWrapperInternal.EventListener : object {
    private int _eventId;
    private Int32[] _runtimeId;
    private Delegate _handler;
    public int EventId { get; }
    public Int32[] RuntimeId { get; }
    public Delegate Handler { get; }
    public EventListener(int eventId, Int32[] runtimeId, Delegate handler);
    public int get_EventId();
    public Int32[] get_RuntimeId();
    public Delegate get_Handler();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class UIAComWrapperInternal.FocusEventListener : EventListener {
    private AutomationFocusChangedEventHandler _focusHandler;
    public FocusEventListener(AutomationFocusChangedEventHandler handler);
    private sealed virtual override void UIAutomationClient.IUIAutomationFocusChangedEventHandler.HandleFocusChangedEvent(IUIAutomationElement sender);
}
internal class UIAComWrapperInternal.PatternTypeInfo : object {
    private PatternWrapper _clientSideWrapper;
    private AutomationPattern _id;
    internal PatternWrapper ClientSideWrapper { get; }
    internal AutomationPattern ID { get; }
    public PatternTypeInfo(AutomationPattern id, PatternWrapper clientSideWrapper);
    internal PatternWrapper get_ClientSideWrapper();
    internal AutomationPattern get_ID();
}
internal class UIAComWrapperInternal.PatternWrapper : MulticastDelegate {
    public PatternWrapper(object object, IntPtr method);
    public virtual object Invoke(AutomationElement el, object pattern, bool cached);
    public virtual IAsyncResult BeginInvoke(AutomationElement el, object pattern, bool cached, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class UIAComWrapperInternal.PropertyConverter : MulticastDelegate {
    public PropertyConverter(object object, IntPtr method);
    public virtual object Invoke(object valueAsObject);
    public virtual IAsyncResult BeginInvoke(object valueAsObject, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class UIAComWrapperInternal.PropertyEventListener : EventListener {
    private AutomationPropertyChangedEventHandler _propChangeHandler;
    public PropertyEventListener(AutomationEvent eventKind, AutomationElement element, AutomationPropertyChangedEventHandler handler);
    private sealed virtual override void UIAutomationClient.IUIAutomationPropertyChangedEventHandler.HandlePropertyChangedEvent(IUIAutomationElement sender, int propertyId, object newValue);
}
internal class UIAComWrapperInternal.PropertyTypeInfo : object {
    private PropertyConverter _converter;
    private AutomationIdentifier _id;
    private Type _type;
    internal AutomationIdentifier ID { get; }
    internal PropertyConverter ObjectConverter { get; }
    internal Type Type { get; }
    internal PropertyTypeInfo(PropertyConverter converter, AutomationIdentifier id, Type type);
    internal AutomationIdentifier get_ID();
    internal PropertyConverter get_ObjectConverter();
    internal Type get_Type();
}
internal class UIAComWrapperInternal.Schema : object {
    private static PropertyConverter convertToBool;
    private static PropertyConverter convertToControlType;
    private static PropertyConverter convertToCultureInfo;
    private static PropertyConverter convertToDockPosition;
    private static PropertyConverter convertToElement;
    private static PropertyConverter convertToElementArray;
    private static PropertyConverter convertToExpandCollapseState;
    private static PropertyConverter convertToOrientationType;
    private static PropertyConverter convertToPoint;
    private static PropertyConverter convertToRect;
    private static PropertyConverter convertToRowOrColumnMajor;
    private static PropertyConverter convertToToggleState;
    private static PropertyConverter convertToWindowInteractionState;
    private static PropertyConverter convertToWindowVisualState;
    private static PropertyTypeInfo[] _propertyInfoTable;
    private static PatternTypeInfo[] _patternInfoTable;
    private static Schema();
    private static object ConvertToBool(object value);
    private static object ConvertToControlType(object value);
    private static object ConvertToCultureInfo(object value);
    private static object ConvertToDockPosition(object value);
    private static object ConvertToElement(object value);
    internal static object ConvertToElementArray(object value);
    private static object ConvertToExpandCollapseState(object value);
    private static object ConvertToOrientationType(object value);
    private static object ConvertToPoint(object value);
    private static object ConvertToRectangle(object value);
    private static object ConvertToRowOrColumnMajor(object value);
    private static object ConvertToToggleState(object value);
    private static object ConvertToWindowInteractionState(object value);
    private static object ConvertToWindowVisualState(object value);
    internal static bool GetPatternInfo(AutomationPattern id, PatternTypeInfo& info);
    internal static bool GetPropertyTypeInfo(AutomationIdentifier id, PropertyTypeInfo& info);
}
internal class UIAComWrapperInternal.StructureEventListener : EventListener {
    private StructureChangedEventHandler _structureChangeHandler;
    public StructureEventListener(AutomationEvent eventKind, AutomationElement element, StructureChangedEventHandler handler);
    private sealed virtual override void UIAutomationClient.IUIAutomationStructureChangedEventHandler.HandleStructureChangedEvent(IUIAutomationElement sender, StructureChangeType changeType, Int32[] runtimeId);
}
internal static class UIAComWrapperInternal.UiaCoreIds : object {
    internal static int UIA_E_ELEMENTNOTAVAILABLE;
    internal static int UIA_E_ELEMENTNOTENABLED;
    internal static int UIA_E_NOCLICKABLEPOINT;
    internal static int UIA_E_PROXYASSEMBLYNOTLOADED;
    internal static int UIA_E_UNSPECIFIEDERROR;
}
internal static class UIAComWrapperInternal.UiaCoreProviderApi : object {
    private static void CheckError(int hr);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static bool RawUiaClientsAreListening();
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
private static int RawUiaHostProviderFromHwnd(IntPtr hwnd, IRawElementProviderSimple& provider);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
private static int RawUiaRaiseAsyncContentLoadedEvent(IRawElementProviderSimple provider, AsyncContentLoadedState asyncContentLoadedState, double PercentComplete);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
private static int RawUiaRaiseAutomationEvent(IRawElementProviderSimple provider, int id);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static int RawUiaRaiseAutomationPropertyChangedEvent(IRawElementProviderSimple provider, int id, object oldValue, object newValue);
    [SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute]
private static int RawUiaRaiseStructureChangedEvent(IRawElementProviderSimple provider, StructureChangeType structureChangeType, Int32[] runtimeId, int runtimeIdLen);
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
private static IntPtr RawUiaReturnRawElementProvider(IntPtr hwnd, IntPtr wParam, IntPtr lParam, IRawElementProviderSimple el);
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static bool UiaClientsAreListening();
    [SecuritySafeCriticalAttribute]
[SecurityCriticalAttribute]
internal static IRawElementProviderSimple UiaHostProviderFromHwnd(IntPtr hwnd);
    [SecuritySafeCriticalAttribute]
[SecurityCriticalAttribute]
internal static void UiaRaiseAsyncContentLoadedEvent(IRawElementProviderSimple provider, AsyncContentLoadedState asyncContentLoadedState, double PercentComplete);
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static void UiaRaiseAutomationEvent(IRawElementProviderSimple provider, int eventId);
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static void UiaRaiseAutomationPropertyChangedEvent(IRawElementProviderSimple provider, int propertyId, object oldValue, object newValue);
    [SecuritySafeCriticalAttribute]
[SecurityCriticalAttribute]
internal static void UiaRaiseStructureChangedEvent(IRawElementProviderSimple provider, StructureChangeType structureChangeType, Int32[] runtimeId);
    [SecurityCriticalAttribute]
[SecuritySafeCriticalAttribute]
internal static IntPtr UiaReturnRawElementProvider(IntPtr hwnd, IntPtr wParam, IntPtr lParam, IRawElementProviderSimple el);
}
internal static class UIAComWrapperInternal.Utility : object {
    internal static int ConvertToInt(bool b);
    internal static AutomationElement[] ConvertToElementArray(IUIAutomationElementArray array);
    internal static bool ConvertException(Exception e, Exception& uiaException);
    internal static tagPOINT PointManagedToNative(Point pt);
    internal static void ValidateArgument(bool cond, string reason);
    internal static void ValidateArgumentNonNull(object obj, string argName);
    internal static void ValidateCached(bool cached);
    internal static object WrapObjectAsPattern(AutomationElement el, object nativePattern, AutomationPattern pattern, bool cached);
    internal static object WrapObjectAsProperty(AutomationProperty property, object obj);
    internal static object UnwrapObject(object val);
    internal static bool IsVirtualElement(AutomationElement element);
    internal static void RealizeElement(AutomationElement element);
    private static VirtualizedItemPattern GetVirtualizedItemPattern(AutomationElement element);
    private static ItemContainerPattern GetItemContainerPattern(AutomationElement element);
    private static T GetAutomationPattern(AutomationElement element, AutomationPattern pattern, AutomationProperty isPatternAvailableProperty);
    internal static bool IsElementNotAvailable(COMException comException);
}
