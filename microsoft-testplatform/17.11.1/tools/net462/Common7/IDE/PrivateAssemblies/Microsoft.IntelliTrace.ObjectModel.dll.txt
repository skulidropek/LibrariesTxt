public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.AlreadyExistsException : Exception {
    public AlreadyExistsException(string message);
    protected AlreadyExistsException(SerializationInfo info, StreamingContext context);
    public AlreadyExistsException(string message, Exception innerException);
    public AlreadyExistsException(int hresult, string message);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.ApplicationInformation.BuildInformation : object {
    public string ApplicationName { get; protected set; }
    public Byte[] Data { get; protected set; }
    public abstract virtual string get_ApplicationName();
    protected abstract virtual void set_ApplicationName(string value);
    public abstract virtual Byte[] get_Data();
    protected abstract virtual void set_Data(Byte[] value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.ApplicationInformation.BuildInformationEvents : object {
    public IEnumerable`1<BuildInformation> Events { get; }
    public abstract virtual BuildInformation CreateBuildInformation(string applicationName, Byte[] data);
    public abstract virtual IEnumerable`1<BuildInformation> get_Events();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.CallStack : object {
    public IEnumerable`1<CallStackFrame> Frames { get; protected set; }
    public bool IsReadOnly { get; }
    [ObsoleteAttribute("This method is Obsolete. Please use method CallStackStateMachine.GetCurrentCallStack", "False")]
public abstract virtual CallStackFrame CreateCallStackFrame(MetadataMethod method, int iLOffset);
    public abstract virtual IEnumerable`1<CallStackFrame> get_Frames();
    protected abstract virtual void set_Frames(IEnumerable`1<CallStackFrame> value);
    public abstract virtual bool get_IsReadOnly();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.CallStackFrame : object {
    public MetadataMethod Method { get; protected set; }
    public int ILOffset { get; protected set; }
    public ParameterData ParameterData { get; }
    public TimingData TimingData { get; }
    public abstract virtual MetadataMethod get_Method();
    protected abstract virtual void set_Method(MetadataMethod value);
    public abstract virtual int get_ILOffset();
    protected abstract virtual void set_ILOffset(int value);
    public abstract virtual ParameterData get_ParameterData();
    public abstract virtual TimingData get_TimingData();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.CallStackStateMachine : object {
    public Thread Thread { get; protected set; }
    public CallStackFrame Top { get; }
    public bool IgnoreMissingTimingData { get; protected set; }
    public abstract virtual Thread get_Thread();
    protected abstract virtual void set_Thread(Thread value);
    public abstract virtual CallStackFrame Push(MetadataMethod method, int iLOffset);
    public abstract virtual IEnumerable`1<CallStackFrame> Pop(int count);
    public abstract virtual IEnumerable`1<CallStackFrame> PopAll();
    public abstract virtual CallStackFrame get_Top();
    public CallStackFrame PushAndPop(MetadataMethod method, int iLOffset);
    public abstract virtual CallStack GetCurrentCallStack();
    public abstract virtual bool get_IgnoreMissingTimingData();
    protected abstract virtual void set_IgnoreMissingTimingData(bool value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.CallStackStateMachines : object {
    public IEnumerable`1<CallStackStateMachine> StateMachines { get; protected set; }
    public abstract virtual CallStackStateMachine CreateCallStackStateMachine(Thread thread, bool ignoreMissingTimingData);
    public abstract virtual IEnumerable`1<CallStackStateMachine> get_StateMachines();
    protected abstract virtual void set_StateMachines(IEnumerable`1<CallStackStateMachine> value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Configuration.CategoryVersion : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <DataVersion>k__BackingField;
    public string Category { get; private set; }
    public Version DataVersion { get; private set; }
    public CategoryVersion(string category, Version version);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [CompilerGeneratedAttribute]
public Version get_DataVersion();
    [CompilerGeneratedAttribute]
private void set_DataVersion(Version value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(CategoryVersion other);
    public static bool op_Equality(CategoryVersion c1, CategoryVersion c2);
    public static bool op_Inequality(CategoryVersion c1, CategoryVersion c2);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Configuration.CollectionConfiguration : object {
    public IEnumerable`1<CategoryVersion> CategoryVersions { get; }
    public IEnumerable`1<DiagnosticEventCategory> Categories { get; protected set; }
    public DefaultDiagnosticEventCategories DefaultCategories { get; }
    public IEnumerable`1<DiagnosticEventSpecification> Specifications { get; protected set; }
    public abstract virtual IEnumerable`1<CategoryVersion> get_CategoryVersions();
    public abstract virtual IEnumerable`1<DiagnosticEventCategory> get_Categories();
    protected abstract virtual void set_Categories(IEnumerable`1<DiagnosticEventCategory> value);
    public abstract virtual DefaultDiagnosticEventCategories get_DefaultCategories();
    public abstract virtual IEnumerable`1<DiagnosticEventSpecification> get_Specifications();
    protected abstract virtual void set_Specifications(IEnumerable`1<DiagnosticEventSpecification> value);
    public abstract virtual DiagnosticEventCategory CreateDiagnosticEventCategory(string name, string id);
    public abstract virtual DataQueryEventSpecification CreateDataQueryEventSpecification(DiagnosticEventCategory category, MetadataMethod binding);
    public abstract virtual DataQueryEventSpecification CreateDataQueryEventSpecification(DiagnosticEventCategory category, MetadataMethod binding, string shortDescription);
    public abstract virtual DataQueryEventSpecification CreateDataQueryEventSpecification(DiagnosticEventCategory category, MetadataMethod binding, string shortDescription, string longDescription);
    public abstract virtual DataQueryEventSpecification CreateDataQueryEventSpecification(DiagnosticEventCategory category, MetadataMethod binding, string shortDescription, string longDescription, IEnumerable`1<DataQuerySpecification> queries);
    public abstract virtual DataQuerySpecification CreateDataQuerySpecification(string name, MetadataType type);
    public abstract virtual CategoryVersion CreateCategoryVersion(string category, Version version);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Configuration.DataQueryEventSpecification : DiagnosticEventSpecification {
    public MetadataMethod Binding { get; protected set; }
    public IEnumerable`1<DataQuerySpecification> Queries { get; protected set; }
    public abstract virtual MetadataMethod get_Binding();
    protected abstract virtual void set_Binding(MetadataMethod value);
    public abstract virtual IEnumerable`1<DataQuerySpecification> get_Queries();
    protected abstract virtual void set_Queries(IEnumerable`1<DataQuerySpecification> value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Configuration.DataQuerySpecification : object {
    public string Name { get; protected set; }
    public MetadataType Type { get; protected set; }
    public abstract virtual string get_Name();
    protected abstract virtual void set_Name(string value);
    public abstract virtual MetadataType get_Type();
    protected abstract virtual void set_Type(MetadataType value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Configuration.DefaultDiagnosticEventCategories : object {
    public DiagnosticEventCategory AdoNet { get; }
    public DiagnosticEventCategory AspNet { get; }
    public DiagnosticEventCategory Console { get; }
    public DiagnosticEventCategory DataBinding { get; }
    public DiagnosticEventCategory Gesture { get; }
    public DiagnosticEventCategory EnvironmentVariables { get; }
    public DiagnosticEventCategory LazyInitialization { get; }
    public DiagnosticEventCategory File { get; }
    public DiagnosticEventCategory Registry { get; }
    public DiagnosticEventCategory ServiceModel { get; }
    public DiagnosticEventCategory Threading { get; }
    public DiagnosticEventCategory Tracing { get; }
    public DiagnosticEventCategory UserPrompt { get; }
    public DiagnosticEventCategory Workflow { get; }
    public DiagnosticEventCategory Xml { get; }
    public DiagnosticEventCategory Performance { get; }
    public abstract virtual DiagnosticEventCategory get_AdoNet();
    public abstract virtual DiagnosticEventCategory get_AspNet();
    public abstract virtual DiagnosticEventCategory get_Console();
    public abstract virtual DiagnosticEventCategory get_DataBinding();
    public abstract virtual DiagnosticEventCategory get_Gesture();
    public abstract virtual DiagnosticEventCategory get_EnvironmentVariables();
    public abstract virtual DiagnosticEventCategory get_LazyInitialization();
    public abstract virtual DiagnosticEventCategory get_File();
    public abstract virtual DiagnosticEventCategory get_Registry();
    public abstract virtual DiagnosticEventCategory get_ServiceModel();
    public abstract virtual DiagnosticEventCategory get_Threading();
    public abstract virtual DiagnosticEventCategory get_Tracing();
    public abstract virtual DiagnosticEventCategory get_UserPrompt();
    public abstract virtual DiagnosticEventCategory get_Workflow();
    public abstract virtual DiagnosticEventCategory get_Xml();
    public abstract virtual DiagnosticEventCategory get_Performance();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Configuration.DiagnosticEventCategory : object {
    public string Id { get; protected set; }
    public string Name { get; protected set; }
    public abstract virtual string get_Id();
    protected abstract virtual void set_Id(string value);
    public abstract virtual string get_Name();
    protected abstract virtual void set_Name(string value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Configuration.DiagnosticEventSpecification : object {
    public DiagnosticEventCategory Category { get; protected set; }
    public string ShortDescription { get; protected set; }
    public string LongDescription { get; protected set; }
    public abstract virtual DiagnosticEventCategory get_Category();
    protected abstract virtual void set_Category(DiagnosticEventCategory value);
    public abstract virtual string get_ShortDescription();
    protected abstract virtual void set_ShortDescription(string value);
    public abstract virtual string get_LongDescription();
    protected abstract virtual void set_LongDescription(string value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.CyclicDependencyException : Exception {
    public CyclicDependencyException(string message);
    protected CyclicDependencyException(SerializationInfo info, StreamingContext context);
    public CyclicDependencyException(string message, Exception innerException);
    public CyclicDependencyException(int hresult, string message);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Data.ArrayData : ObjectData {
    public MetadataType TypeSpec { get; protected set; }
    public MetadataType DataType { get; protected set; }
    public Array Elements { get; protected set; }
    public int TotalCount { get; protected set; }
    public abstract virtual MetadataType get_TypeSpec();
    protected abstract virtual void set_TypeSpec(MetadataType value);
    public abstract virtual MetadataType get_DataType();
    protected abstract virtual void set_DataType(MetadataType value);
    public abstract virtual Array get_Elements();
    protected abstract virtual void set_Elements(Array value);
    public abstract virtual int get_TotalCount();
    protected abstract virtual void set_TotalCount(int value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Data.ClassData : ObjectData {
    public abstract virtual void SetValue(MetadataMember member, ObjectData value);
    public abstract virtual ObjectData GetValue(MetadataMember member);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Data.CycleData : ObjectData {
    public ObjectData Reference { get; protected set; }
    public abstract virtual ObjectData get_Reference();
    protected abstract virtual void set_Reference(ObjectData value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Data.NullData : ObjectData {
    public MetadataType DataType { get; protected set; }
    public sealed virtual MetadataType get_DataType();
    protected sealed virtual void set_DataType(MetadataType value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Data.ObjectData : object {
    public MetadataType DataType { get; protected set; }
    public abstract virtual MetadataType get_DataType();
    protected abstract virtual void set_DataType(MetadataType value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Data.PrimitiveData : ObjectData {
    public object Value { get; protected set; }
    public abstract virtual object get_Value();
    protected abstract virtual void set_Value(object value);
}
public enum Microsoft.VisualStudio.IntelliTrace.ObjectModel.DataSourceType : Enum {
    public int value__;
    public static DataSourceType Other;
    public static DataSourceType SystemCenter;
    public static DataSourceType MicrosoftMonitoringAgent;
    public static DataSourceType AppInsights;
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.DebugData : object {
    [CompilerGeneratedAttribute]
private Byte[][] <Directories>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[][] <Data>k__BackingField;
    public Byte[][] Directories { get; public set; }
    public Byte[][] Data { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[][] get_Directories();
    [CompilerGeneratedAttribute]
public void set_Directories(Byte[][] value);
    [CompilerGeneratedAttribute]
public Byte[][] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[][] value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.ClassicDataQueryEvent : DataQueryEvent {
    [CompilerGeneratedAttribute]
private DataQueryEventSpecification <EventSpecification>k__BackingField;
    public IEnumerable`1<PrimitiveData> Payload { get; protected set; }
    public DataQueryEventSpecification EventSpecification { get; protected set; }
    public abstract virtual IEnumerable`1<PrimitiveData> get_Payload();
    protected abstract virtual void set_Payload(IEnumerable`1<PrimitiveData> value);
    [CompilerGeneratedAttribute]
public virtual DataQueryEventSpecification get_EventSpecification();
    [CompilerGeneratedAttribute]
protected virtual void set_EventSpecification(DataQueryEventSpecification value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.DataQueryEvent : DiagnosticEvent {
    public DataQueryEventSpecification EventSpecification { get; protected set; }
    public string EventName { get; protected set; }
    public abstract virtual DataQueryEventSpecification get_EventSpecification();
    protected abstract virtual void set_EventSpecification(DataQueryEventSpecification value);
    public abstract virtual string get_EventName();
    protected abstract virtual void set_EventName(string value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.DiagnosticEvent : object {
    public DateTime EventTime { get; protected set; }
    public Thread Thread { get; protected set; }
    public CallStack Stack { get; protected set; }
    public abstract virtual DateTime get_EventTime();
    protected abstract virtual void set_EventTime(DateTime value);
    public abstract virtual Thread get_Thread();
    protected abstract virtual void set_Thread(Thread value);
    public abstract virtual CallStack get_Stack();
    protected abstract virtual void set_Stack(CallStack value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.DiagnosticEvents : object {
    public IEnumerable`1<DiagnosticEvent> Events { get; protected set; }
    public abstract virtual ExceptionEvent CreateException(DateTime eventTime, Thread thread);
    public abstract virtual ExceptionEvent CreateException(DateTime eventTime, Thread thread, string exceptionMessage);
    public abstract virtual ExceptionEvent CreateException(DateTime eventTime, Thread thread, string exceptionMessage, string exceptionType);
    public abstract virtual ExceptionEvent CreateException(DateTime eventTime, Thread thread, string exceptionMessage, string exceptionType, CallStack callStack);
    public abstract virtual ClassicDataQueryEvent CreateClassicDataQuery(DateTime eventTime, Thread thread, DataQueryEventSpecification specification, CallStack callStack);
    public abstract virtual ClassicDataQueryEvent CreateClassicDataQuery(DateTime eventTime, Thread thread, DataQueryEventSpecification specification, CallStack callStack, IEnumerable`1<PrimitiveData> payload);
    public abstract virtual ClassicDataQueryEvent CreateDefaultTimingDataQuery(DateTime eventTime, Thread thread, CallStack callStack);
    public abstract virtual ClassicDataQueryEvent CreateCustomTimingDataQuery(DateTime eventTime, Thread thread, CallStack callStack, DiagnosticEventCategory category, string description);
    public abstract virtual ClassicDataQueryEvent CreateCustomTimingDataQuery(DateTime eventTime, Thread thread, CallStack callStack, DiagnosticEventCategory category, string shortDescription, string longDescription, IEnumerable`1<KeyValuePair`2<string, PrimitiveData>> payload);
    public abstract virtual IEnumerable`1<DiagnosticEvent> get_Events();
    protected abstract virtual void set_Events(IEnumerable`1<DiagnosticEvent> value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.ExceptionEvent : DiagnosticEvent {
    public string ExceptionMessage { get; public set; }
    public string ExceptionType { get; public set; }
    public bool IsCritical { get; public set; }
    public abstract virtual string get_ExceptionMessage();
    public abstract virtual void set_ExceptionMessage(string value);
    public abstract virtual string get_ExceptionType();
    public abstract virtual void set_ExceptionType(string value);
    public abstract virtual bool get_IsCritical();
    public abstract virtual void set_IsCritical(bool value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.Performance.BusinessContext : object {
    public string ObjectUri { get; public set; }
    public string UserHostAddress { get; public set; }
    public abstract virtual string get_ObjectUri();
    public abstract virtual void set_ObjectUri(string value);
    public abstract virtual string get_UserHostAddress();
    public abstract virtual void set_UserHostAddress(string value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.Performance.CollectionNotes : object {
    public int AlertThreshold { get; public set; }
    public string Component { get; public set; }
    public string ApplicationPath { get; public set; }
    public string Build { get; public set; }
    public string ApplicationEnvironment { get; public set; }
    public bool IsLightEvent { get; public set; }
    public abstract virtual int get_AlertThreshold();
    public abstract virtual void set_AlertThreshold(int value);
    public abstract virtual string get_Component();
    public abstract virtual void set_Component(string value);
    public abstract virtual string get_ApplicationPath();
    public abstract virtual void set_ApplicationPath(string value);
    public abstract virtual string get_Build();
    public abstract virtual void set_Build(string value);
    public abstract virtual string get_ApplicationEnvironment();
    public abstract virtual void set_ApplicationEnvironment(string value);
    public abstract virtual bool get_IsLightEvent();
    public abstract virtual void set_IsLightEvent(bool value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.Performance.ScopedPerformanceEvent : ScopedThreadEvent {
    public BusinessContext BusinessContext { get; }
    public CollectionNotes CollectionNotes { get; }
    public abstract virtual BusinessContext get_BusinessContext();
    public abstract virtual CollectionNotes get_CollectionNotes();
    public abstract virtual OrderScope OpenScope();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.ScopedEvent : object {
    public IEnumerable`1<ScopedEventDataSection> DataSections { get; }
    public abstract virtual IEnumerable`1<ScopedEventDataSection> get_DataSections();
    public abstract virtual ScopedEventDataSection CreateDataSection(string sectionName);
    public abstract virtual OrderScope OpenScope();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.ScopedEventDataSection : object {
    public string SectionName { get; }
    public IDictionary`2<string, PrimitiveData> Data { get; }
    public abstract virtual string get_SectionName();
    public abstract virtual IDictionary`2<string, PrimitiveData> get_Data();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.ScopedEvents : object {
    public IEnumerable`1<ScopedEvent> Events { get; protected set; }
    public abstract virtual ScopedPerformanceEvent CreateScopedPerformanceEvent(Thread thread, DateTime startTime);
    public abstract virtual ScopedPerformanceEvent CreateScopedPerformanceEvent(Thread thread, DateTime startTime, DateTime endTime);
    public abstract virtual IEnumerable`1<ScopedEvent> get_Events();
    protected abstract virtual void set_Events(IEnumerable`1<ScopedEvent> value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.ScopedThreadEvent : ScopedEvent {
    public DateTime StartTime { get; }
    public DateTime EndTime { get; public set; }
    public Thread Thread { get; }
    public abstract virtual DateTime get_StartTime();
    public abstract virtual DateTime get_EndTime();
    public abstract virtual void set_EndTime(DateTime value);
    public abstract virtual Thread get_Thread();
    public abstract virtual OrderScope OpenScope();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.WebRequestEvent : object {
    public DateTime StartTime { get; protected set; }
    public DateTime EndTime { get; protected set; }
    public string Url { get; protected set; }
    public string UserAgent { get; protected set; }
    public string IP { get; protected set; }
    public string HttpMethod { get; protected set; }
    public int RequestStatus { get; protected set; }
    public int RequestSubStatus { get; protected set; }
    public string QueryString { get; protected set; }
    public abstract virtual DateTime get_StartTime();
    protected abstract virtual void set_StartTime(DateTime value);
    public abstract virtual DateTime get_EndTime();
    protected abstract virtual void set_EndTime(DateTime value);
    public abstract virtual string get_Url();
    protected abstract virtual void set_Url(string value);
    public abstract virtual string get_UserAgent();
    protected abstract virtual void set_UserAgent(string value);
    public abstract virtual string get_IP();
    protected abstract virtual void set_IP(string value);
    public abstract virtual string get_HttpMethod();
    protected abstract virtual void set_HttpMethod(string value);
    public abstract virtual int get_RequestStatus();
    protected abstract virtual void set_RequestStatus(int value);
    public abstract virtual int get_RequestSubStatus();
    protected abstract virtual void set_RequestSubStatus(int value);
    public abstract virtual string get_QueryString();
    protected abstract virtual void set_QueryString(string value);
    public abstract virtual OrderScope OpenScope();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Events.WebRequestEvents : object {
    public IEnumerable`1<WebRequestEvent> Events { get; protected set; }
    public abstract virtual WebRequestEvent CreateWebRequestEvent(DateTime startTime, DateTime endTime, string httpMethod, string url, string ip, string userAgent, int status, int subStatus, string queryString);
    public abstract virtual IEnumerable`1<WebRequestEvent> get_Events();
    protected abstract virtual void set_Events(IEnumerable`1<WebRequestEvent> value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.ExtendFileFailedException : IOException {
    public ExtendFileFailedException(string message);
    protected ExtendFileFailedException(SerializationInfo info, StreamingContext context);
    public ExtendFileFailedException(string message, Exception innerException);
    public ExtendFileFailedException(int hresult, string message);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.FileAlreadyExistsException : Exception {
    public FileAlreadyExistsException(string message);
    protected FileAlreadyExistsException(SerializationInfo info, StreamingContext context);
    public FileAlreadyExistsException(string message, Exception innerException);
    public FileAlreadyExistsException(int hresult, string message);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.IntelliTraceFileSerializer : object {
    public bool IsTimingDataAvailable { get; public set; }
    public abstract virtual bool get_IsTimingDataAvailable();
    public abstract virtual void set_IsTimingDataAvailable(bool value);
    public abstract virtual void Serialize(string fileName, IntelliTraceStore store);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.IntelliTraceIncrementalFileSerializer : object {
    public IntelliTraceStore IntelliTraceStore { get; protected set; }
    public string FileName { get; protected set; }
    public bool IsTimingDataAvailable { get; public set; }
    public bool FlushOnDispose { get; public set; }
    public abstract virtual IntelliTraceStore get_IntelliTraceStore();
    protected abstract virtual void set_IntelliTraceStore(IntelliTraceStore value);
    public abstract virtual string get_FileName();
    protected abstract virtual void set_FileName(string value);
    public abstract virtual bool get_IsTimingDataAvailable();
    public abstract virtual void set_IsTimingDataAvailable(bool value);
    public sealed virtual void Dispose();
    public abstract virtual bool get_FlushOnDispose();
    public abstract virtual void set_FlushOnDispose(bool value);
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Flush();
    public abstract virtual void Snapshot(string snapshotFileName);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.IntelliTraceStore : object {
    public MetadataStore MetadataStore { get; protected set; }
    public SystemInfo SystemInfo { get; protected set; }
    public DiagnosticEvents DiagnosticEvents { get; protected set; }
    public WebRequestEvents WebRequests { get; protected set; }
    public ScopedEvents ScopedEvents { get; protected set; }
    public BuildInformationEvents BuildInformationEvents { get; protected set; }
    public DataSourceType DataSourceType { get; public set; }
    public string DataProviderName { get; }
    public CollectionConfiguration Configuration { get; protected set; }
    public CallStackStateMachines CallStackStateMachines { get; protected set; }
    public abstract virtual MetadataStore get_MetadataStore();
    protected abstract virtual void set_MetadataStore(MetadataStore value);
    public abstract virtual SystemInfo get_SystemInfo();
    protected abstract virtual void set_SystemInfo(SystemInfo value);
    public abstract virtual DiagnosticEvents get_DiagnosticEvents();
    protected abstract virtual void set_DiagnosticEvents(DiagnosticEvents value);
    public abstract virtual WebRequestEvents get_WebRequests();
    protected abstract virtual void set_WebRequests(WebRequestEvents value);
    public abstract virtual ScopedEvents get_ScopedEvents();
    protected abstract virtual void set_ScopedEvents(ScopedEvents value);
    public abstract virtual BuildInformationEvents get_BuildInformationEvents();
    protected abstract virtual void set_BuildInformationEvents(BuildInformationEvents value);
    public abstract virtual DataSourceType get_DataSourceType();
    public abstract virtual void set_DataSourceType(DataSourceType value);
    public abstract virtual string get_DataProviderName();
    public abstract virtual CollectionConfiguration get_Configuration();
    protected abstract virtual void set_Configuration(CollectionConfiguration value);
    public abstract virtual Process CreateProcess(int id, DateTime startTime, DateTime endTime);
    public abstract virtual Process CreateProcess(int id, DateTime startTime);
    public abstract virtual void SetDebugDirectory(string fullFileName, MetadataModule module);
    public abstract virtual void SetDebugDirectory(DebugData debugData, MetadataModule module);
    public abstract virtual CallStackStateMachines get_CallStackStateMachines();
    protected abstract virtual void set_CallStackStateMachines(CallStackStateMachines value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.DisplaySetting : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BitsPerPixel>k__BackingField;
    public int Width { get; public set; }
    public int Height { get; public set; }
    public int BitsPerPixel { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(int value);
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(int value);
    [CompilerGeneratedAttribute]
public int get_BitsPerPixel();
    [CompilerGeneratedAttribute]
public void set_BitsPerPixel(int value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.MemoryStatistics : object {
    [CompilerGeneratedAttribute]
private long <TotalPhysicalBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AvailablePhysicalBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCommittedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AvailableCommitBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalVirtualBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AvailableVirtualBytes>k__BackingField;
    public long TotalPhysicalBytes { get; public set; }
    public long AvailablePhysicalBytes { get; public set; }
    public long TotalCommittedBytes { get; public set; }
    public long AvailableCommitBytes { get; public set; }
    public long TotalVirtualBytes { get; public set; }
    public long AvailableVirtualBytes { get; public set; }
    [CompilerGeneratedAttribute]
public long get_TotalPhysicalBytes();
    [CompilerGeneratedAttribute]
public void set_TotalPhysicalBytes(long value);
    [CompilerGeneratedAttribute]
public long get_AvailablePhysicalBytes();
    [CompilerGeneratedAttribute]
public void set_AvailablePhysicalBytes(long value);
    [CompilerGeneratedAttribute]
public long get_TotalCommittedBytes();
    [CompilerGeneratedAttribute]
public void set_TotalCommittedBytes(long value);
    [CompilerGeneratedAttribute]
public long get_AvailableCommitBytes();
    [CompilerGeneratedAttribute]
public void set_AvailableCommitBytes(long value);
    [CompilerGeneratedAttribute]
public long get_TotalVirtualBytes();
    [CompilerGeneratedAttribute]
public void set_TotalVirtualBytes(long value);
    [CompilerGeneratedAttribute]
public long get_AvailableVirtualBytes();
    [CompilerGeneratedAttribute]
public void set_AvailableVirtualBytes(long value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.OSVersion : object {
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private OSProductType <ProductType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BuildNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sku>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePack>k__BackingField;
    public int Major { get; public set; }
    public int Minor { get; public set; }
    public OSProductType ProductType { get; public set; }
    public int BuildNumber { get; public set; }
    public int Sku { get; public set; }
    public string ServicePack { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public void set_Minor(int value);
    [CompilerGeneratedAttribute]
public OSProductType get_ProductType();
    [CompilerGeneratedAttribute]
public void set_ProductType(OSProductType value);
    [CompilerGeneratedAttribute]
public int get_BuildNumber();
    [CompilerGeneratedAttribute]
public void set_BuildNumber(int value);
    [CompilerGeneratedAttribute]
public int get_Sku();
    [CompilerGeneratedAttribute]
public void set_Sku(int value);
    [CompilerGeneratedAttribute]
public string get_ServicePack();
    [CompilerGeneratedAttribute]
public void set_ServicePack(string value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.ProcessorInfo : object {
    [CompilerGeneratedAttribute]
private ProcessorArchitecture <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfProcessors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessorLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessorRevision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessorSpeed>k__BackingField;
    public ProcessorArchitecture Architecture { get; public set; }
    public int NumberOfProcessors { get; public set; }
    public int ProcessorLevel { get; public set; }
    public int ProcessorRevision { get; public set; }
    public int ProcessorSpeed { get; public set; }
    [CompilerGeneratedAttribute]
public ProcessorArchitecture get_Architecture();
    [CompilerGeneratedAttribute]
public void set_Architecture(ProcessorArchitecture value);
    [CompilerGeneratedAttribute]
public int get_NumberOfProcessors();
    [CompilerGeneratedAttribute]
public void set_NumberOfProcessors(int value);
    [CompilerGeneratedAttribute]
public int get_ProcessorLevel();
    [CompilerGeneratedAttribute]
public void set_ProcessorLevel(int value);
    [CompilerGeneratedAttribute]
public int get_ProcessorRevision();
    [CompilerGeneratedAttribute]
public void set_ProcessorRevision(int value);
    [CompilerGeneratedAttribute]
public int get_ProcessorSpeed();
    [CompilerGeneratedAttribute]
public void set_ProcessorSpeed(int value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.SystemBiosInfo : object {
    [CompilerGeneratedAttribute]
private string <BiosVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BiosDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemManufacturer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemProductName>k__BackingField;
    public string BiosVersion { get; public set; }
    public string BiosDate { get; public set; }
    public string SystemManufacturer { get; public set; }
    public string SystemProductName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BiosVersion();
    [CompilerGeneratedAttribute]
public void set_BiosVersion(string value);
    [CompilerGeneratedAttribute]
public string get_BiosDate();
    [CompilerGeneratedAttribute]
public void set_BiosDate(string value);
    [CompilerGeneratedAttribute]
public string get_SystemManufacturer();
    [CompilerGeneratedAttribute]
public void set_SystemManufacturer(string value);
    [CompilerGeneratedAttribute]
public string get_SystemProductName();
    [CompilerGeneratedAttribute]
public void set_SystemProductName(string value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.SystemInfo : object {
    public OSVersion OSVersion { get; protected set; }
    public MemoryStatistics MemoryStatistics { get; protected set; }
    public ProcessorInfo ProcessorInfo { get; protected set; }
    public SystemBiosInfo SystemBiosInfo { get; protected set; }
    public UserInfo UserInfo { get; protected set; }
    public bool IsWow64Process { get; public set; }
    public string ClrVersion { get; public set; }
    public TimeZoneInfo TimeZoneInfo { get; protected set; }
    public string ComputerName { get; public set; }
    public string WindowsDirectory { get; public set; }
    public string SystemDirectory { get; public set; }
    public int SystemLcid { get; public set; }
    public IEnumerable`1<DisplaySetting> DisplaySettings { get; protected set; }
    public DateTime StartTime { get; public set; }
    public long InitialPerformanceCounter { get; public set; }
    public long PerformanceFrequency { get; public set; }
    public abstract virtual OSVersion get_OSVersion();
    protected abstract virtual void set_OSVersion(OSVersion value);
    public abstract virtual MemoryStatistics get_MemoryStatistics();
    protected abstract virtual void set_MemoryStatistics(MemoryStatistics value);
    public abstract virtual ProcessorInfo get_ProcessorInfo();
    protected abstract virtual void set_ProcessorInfo(ProcessorInfo value);
    public abstract virtual SystemBiosInfo get_SystemBiosInfo();
    protected abstract virtual void set_SystemBiosInfo(SystemBiosInfo value);
    public abstract virtual UserInfo get_UserInfo();
    protected abstract virtual void set_UserInfo(UserInfo value);
    public abstract virtual bool get_IsWow64Process();
    public abstract virtual void set_IsWow64Process(bool value);
    public abstract virtual string get_ClrVersion();
    public abstract virtual void set_ClrVersion(string value);
    public abstract virtual TimeZoneInfo get_TimeZoneInfo();
    protected abstract virtual void set_TimeZoneInfo(TimeZoneInfo value);
    public abstract virtual string get_ComputerName();
    public abstract virtual void set_ComputerName(string value);
    public abstract virtual string get_WindowsDirectory();
    public abstract virtual void set_WindowsDirectory(string value);
    public abstract virtual string get_SystemDirectory();
    public abstract virtual void set_SystemDirectory(string value);
    public abstract virtual int get_SystemLcid();
    public abstract virtual void set_SystemLcid(int value);
    public abstract virtual DisplaySetting CreateDisplaySetting(int width, int height, int bitsPerPixel);
    public abstract virtual IEnumerable`1<DisplaySetting> get_DisplaySettings();
    protected abstract virtual void set_DisplaySettings(IEnumerable`1<DisplaySetting> value);
    public abstract virtual DateTime get_StartTime();
    public abstract virtual void set_StartTime(DateTime value);
    public abstract virtual long get_InitialPerformanceCounter();
    public abstract virtual void set_InitialPerformanceCounter(long value);
    public abstract virtual long get_PerformanceFrequency();
    public abstract virtual void set_PerformanceFrequency(long value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.TimeZoneInfo : object {
    private long _timeZoneBias;
    [CompilerGeneratedAttribute]
private string <TimeZone>k__BackingField;
    public string TimeZone { get; public set; }
    public long TimeZoneBias { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TimeZone();
    [CompilerGeneratedAttribute]
public void set_TimeZone(string value);
    public long get_TimeZoneBias();
    public void set_TimeZoneBias(long value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.MachineInfo.UserInfo : object {
    [CompilerGeneratedAttribute]
private string <UserDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public string UserDomain { get; public set; }
    public string UserName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserDomain();
    [CompilerGeneratedAttribute]
public void set_UserDomain(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataArrayDefinition : object {
    [CompilerGeneratedAttribute]
private int <Rank>k__BackingField;
    public int Rank { get; public set; }
    public Int32[] Sizes { get; }
    public Int32[] LoBounds { get; }
    [CompilerGeneratedAttribute]
public int get_Rank();
    [CompilerGeneratedAttribute]
public void set_Rank(int value);
    public Int32[] get_Sizes();
    public Int32[] get_LoBounds();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataAssembly : object {
    public AssemblyName Name { get; protected set; }
    public int Token { get; protected set; }
    public IEnumerable`1<MetadataModule> Modules { get; }
    public abstract virtual AssemblyName get_Name();
    protected abstract virtual void set_Name(AssemblyName value);
    public abstract virtual int get_Token();
    protected abstract virtual void set_Token(int value);
    public abstract virtual MetadataModule CreateModule(string fileName, Guid moduleVersionId);
    public abstract virtual IEnumerable`1<MetadataModule> get_Modules();
    public abstract virtual bool TryGetModule(Guid moduleVersionId, MetadataModule& metadataModule);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataGenericDefinition : object {
    [CompilerGeneratedAttribute]
private MetadataType[] <GenericArguments>k__BackingField;
    public MetadataType[] GenericArguments { get; public set; }
    [CompilerGeneratedAttribute]
public MetadataType[] get_GenericArguments();
    [CompilerGeneratedAttribute]
public void set_GenericArguments(MetadataType[] value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataMember : object {
    public MetadataType ParentType { get; protected set; }
    public string Name { get; protected set; }
    public MetadataType MemberType { get; protected set; }
    public int Token { get; protected set; }
    public bool IsPublic { get; public set; }
    public bool IsAssembly { get; public set; }
    public bool IsStatic { get; public set; }
    public object DefaultValue { get; public set; }
    public abstract virtual MetadataType get_ParentType();
    protected abstract virtual void set_ParentType(MetadataType value);
    public abstract virtual string get_Name();
    protected abstract virtual void set_Name(string value);
    public abstract virtual MetadataType get_MemberType();
    protected abstract virtual void set_MemberType(MetadataType value);
    public abstract virtual int get_Token();
    protected abstract virtual void set_Token(int value);
    public abstract virtual bool get_IsPublic();
    public abstract virtual void set_IsPublic(bool value);
    public abstract virtual bool get_IsAssembly();
    public abstract virtual void set_IsAssembly(bool value);
    public abstract virtual bool get_IsStatic();
    public abstract virtual void set_IsStatic(bool value);
    public abstract virtual object get_DefaultValue();
    public abstract virtual void set_DefaultValue(object value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataMethod : object {
    private static string ConstructorName;
    public MetadataModule ParentModule { get; protected set; }
    public MetadataType ParentType { get; protected set; }
    public string Name { get; protected set; }
    public int Token { get; protected set; }
    public MetadataMethod MethodSpecParentMethod { get; protected set; }
    public MetadataGenericDefinition GenericDefinition { get; protected set; }
    public bool IsGenericMethod { get; protected set; }
    public bool IsMethodSpec { get; protected set; }
    public int CodeRva { get; public set; }
    public bool IsPrivate { get; public set; }
    public bool IsPublic { get; public set; }
    public bool IsAssembly { get; public set; }
    public bool IsStatic { get; public set; }
    public bool IsFinal { get; public set; }
    public bool IsVirtual { get; public set; }
    public bool IsAbstract { get; public set; }
    public bool IsDefaultCall { get; public set; }
    public bool IsCCall { get; public set; }
    public bool IsStdCall { get; public set; }
    public bool IsFastCall { get; public set; }
    public IEnumerable`1<MetadataParameter> Parameters { get; protected set; }
    public bool IsConstructor { get; }
    public abstract virtual MetadataModule get_ParentModule();
    protected abstract virtual void set_ParentModule(MetadataModule value);
    public abstract virtual MetadataType get_ParentType();
    protected abstract virtual void set_ParentType(MetadataType value);
    public abstract virtual string get_Name();
    protected abstract virtual void set_Name(string value);
    public abstract virtual int get_Token();
    protected abstract virtual void set_Token(int value);
    public abstract virtual MetadataMethod get_MethodSpecParentMethod();
    protected abstract virtual void set_MethodSpecParentMethod(MetadataMethod value);
    public abstract virtual MetadataGenericDefinition get_GenericDefinition();
    protected abstract virtual void set_GenericDefinition(MetadataGenericDefinition value);
    public abstract virtual bool get_IsGenericMethod();
    protected abstract virtual void set_IsGenericMethod(bool value);
    public abstract virtual bool get_IsMethodSpec();
    protected abstract virtual void set_IsMethodSpec(bool value);
    public abstract virtual int get_CodeRva();
    public abstract virtual void set_CodeRva(int value);
    public abstract virtual bool get_IsPrivate();
    public abstract virtual void set_IsPrivate(bool value);
    public abstract virtual bool get_IsPublic();
    public abstract virtual void set_IsPublic(bool value);
    public abstract virtual bool get_IsAssembly();
    public abstract virtual void set_IsAssembly(bool value);
    public abstract virtual bool get_IsStatic();
    public abstract virtual void set_IsStatic(bool value);
    public abstract virtual bool get_IsFinal();
    public abstract virtual void set_IsFinal(bool value);
    public abstract virtual bool get_IsVirtual();
    public abstract virtual void set_IsVirtual(bool value);
    public abstract virtual bool get_IsAbstract();
    public abstract virtual void set_IsAbstract(bool value);
    public abstract virtual bool get_IsDefaultCall();
    public abstract virtual void set_IsDefaultCall(bool value);
    public abstract virtual bool get_IsCCall();
    public abstract virtual void set_IsCCall(bool value);
    public abstract virtual bool get_IsStdCall();
    public abstract virtual void set_IsStdCall(bool value);
    public abstract virtual bool get_IsFastCall();
    public abstract virtual void set_IsFastCall(bool value);
    public abstract virtual void SetMethodReturnType(MetadataType returnType, bool isByRef);
    public abstract virtual void GetMethodReturnType(MetadataType& returnType, Boolean& isByRef);
    public abstract virtual MetadataParameter CreateParameter(string name, MetadataType parameterType);
    public abstract virtual MetadataParameter CreateParameter(string name, MetadataType parameterType, int token);
    public abstract virtual IEnumerable`1<MetadataParameter> get_Parameters();
    protected abstract virtual void set_Parameters(IEnumerable`1<MetadataParameter> value);
    public abstract virtual bool TryGetParameter(int token, MetadataParameter& metadataParameter);
    public virtual bool get_IsConstructor();
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataModule : object {
    public MetadataAssembly ParentAssembly { get; protected set; }
    public string FileName { get; protected set; }
    public Guid ModuleVersionId { get; protected set; }
    public IEnumerable`1<MetadataType> Types { get; protected set; }
    public abstract virtual MetadataAssembly get_ParentAssembly();
    protected abstract virtual void set_ParentAssembly(MetadataAssembly value);
    public abstract virtual string get_FileName();
    protected abstract virtual void set_FileName(string value);
    public abstract virtual Guid get_ModuleVersionId();
    protected abstract virtual void set_ModuleVersionId(Guid value);
    public abstract virtual MetadataType CreateType(string name, MetadataType parentType);
    public abstract virtual MetadataType CreateType(string name, MetadataType parentType, MetadataType[] implementedInterfaceTypes);
    public abstract virtual MetadataType CreateType(string name, int token, MetadataType parentType);
    public abstract virtual MetadataType CreateType(string name, int token, MetadataType parentType, MetadataType[] implementedInterfaceTypes);
    public abstract virtual MetadataType CreateGenericType(string name, MetadataType parentType, MetadataGenericDefinition metadataGenericDefinition, MetadataType[] implementedInterfaceTypes);
    public abstract virtual MetadataType CreateGenericType(string name, int token, MetadataType parentType, MetadataGenericDefinition metadataGenericDefinition, MetadataType[] implementedInterfaceTypes);
    public abstract virtual MetadataType CreateGenericParameterType(string name, int genericParameterSequence);
    public abstract virtual MetadataType CreateTypeSpec(MetadataType parentType, MetadataGenericDefinition metadataGenericDefinition);
    public abstract virtual MetadataType CreateTypeSpec(MetadataType parentType, int token, MetadataGenericDefinition metadataGenericDefinition);
    public abstract virtual MetadataType CreateArrayType(MetadataType parentType, MetadataArrayDefinition metadataArrayDefinition);
    public abstract virtual MetadataType CreateArrayType(MetadataType parentType, int token, MetadataArrayDefinition metadataArrayDefinition);
    public abstract virtual IEnumerable`1<MetadataType> get_Types();
    protected abstract virtual void set_Types(IEnumerable`1<MetadataType> value);
    public abstract virtual bool TryGetType(int token, MetadataType& metadataType);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataParameter : object {
    public MetadataMethod ParentMethod { get; protected set; }
    public string Name { get; protected set; }
    public MetadataType ParameterType { get; protected set; }
    public int Token { get; protected set; }
    public int Sequence { get; protected set; }
    public bool IsByRef { get; public set; }
    public bool IsInParameter { get; public set; }
    public bool IsOutParameter { get; public set; }
    public abstract virtual MetadataMethod get_ParentMethod();
    protected abstract virtual void set_ParentMethod(MetadataMethod value);
    public abstract virtual string get_Name();
    protected abstract virtual void set_Name(string value);
    public abstract virtual MetadataType get_ParameterType();
    protected abstract virtual void set_ParameterType(MetadataType value);
    public abstract virtual int get_Token();
    protected abstract virtual void set_Token(int value);
    public abstract virtual int get_Sequence();
    protected abstract virtual void set_Sequence(int value);
    public abstract virtual bool get_IsByRef();
    public abstract virtual void set_IsByRef(bool value);
    public abstract virtual bool get_IsInParameter();
    public abstract virtual void set_IsInParameter(bool value);
    public abstract virtual bool get_IsOutParameter();
    public abstract virtual void set_IsOutParameter(bool value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataStore : object {
    public IEnumerable`1<MetadataAssembly> Assemblies { get; }
    public abstract virtual MetadataAssembly CreateAssembly(AssemblyName assemblyName);
    public abstract virtual MetadataAssembly CreateAssembly(AssemblyName assemblyName, int token);
    public abstract virtual IEnumerable`1<MetadataAssembly> get_Assemblies();
    public abstract virtual bool TryGetAssembly(AssemblyName assemblyName, MetadataAssembly& metadataAssembly);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Metadata.MetadataType : object {
    public MetadataModule ParentModule { get; protected set; }
    public string Name { get; protected set; }
    public int Token { get; protected set; }
    public MetadataType ParentType { get; protected set; }
    public MetadataType[] ImplementedInterfaceTypes { get; protected set; }
    public MetadataGenericDefinition GenericDefinition { get; protected set; }
    public MetadataArrayDefinition ArrayDefinition { get; protected set; }
    public int GenericParameterSequence { get; protected set; }
    public bool IsGenericType { get; protected set; }
    public bool IsGenericParameterType { get; protected set; }
    public bool IsConstructedGenericType { get; protected set; }
    public bool IsTypeSpec { get; protected set; }
    public bool IsArrayType { get; protected set; }
    public bool IsNullableType { get; protected set; }
    public bool IsEnumType { get; protected set; }
    public bool IsValue { get; protected set; }
    public bool IsGenericCovariant { get; public set; }
    public bool IsGenericContravariant { get; public set; }
    public bool IsPublic { get; public set; }
    public bool IsInterface { get; public set; }
    public bool IsAbstract { get; public set; }
    public bool IsSealed { get; public set; }
    public IEnumerable`1<MetadataMethod> Methods { get; protected set; }
    public IEnumerable`1<MetadataMember> Members { get; protected set; }
    public abstract virtual MetadataModule get_ParentModule();
    protected abstract virtual void set_ParentModule(MetadataModule value);
    public abstract virtual string get_Name();
    protected abstract virtual void set_Name(string value);
    public abstract virtual int get_Token();
    protected abstract virtual void set_Token(int value);
    public abstract virtual MetadataType get_ParentType();
    protected abstract virtual void set_ParentType(MetadataType value);
    public abstract virtual MetadataType[] get_ImplementedInterfaceTypes();
    protected abstract virtual void set_ImplementedInterfaceTypes(MetadataType[] value);
    public abstract virtual MetadataGenericDefinition get_GenericDefinition();
    protected abstract virtual void set_GenericDefinition(MetadataGenericDefinition value);
    public abstract virtual MetadataArrayDefinition get_ArrayDefinition();
    protected abstract virtual void set_ArrayDefinition(MetadataArrayDefinition value);
    public abstract virtual int get_GenericParameterSequence();
    protected abstract virtual void set_GenericParameterSequence(int value);
    public abstract virtual bool get_IsGenericType();
    protected abstract virtual void set_IsGenericType(bool value);
    public abstract virtual bool get_IsGenericParameterType();
    protected abstract virtual void set_IsGenericParameterType(bool value);
    public abstract virtual bool get_IsConstructedGenericType();
    protected abstract virtual void set_IsConstructedGenericType(bool value);
    public abstract virtual bool get_IsTypeSpec();
    protected abstract virtual void set_IsTypeSpec(bool value);
    public abstract virtual bool get_IsArrayType();
    protected abstract virtual void set_IsArrayType(bool value);
    public abstract virtual bool get_IsNullableType();
    protected abstract virtual void set_IsNullableType(bool value);
    public abstract virtual bool get_IsEnumType();
    protected abstract virtual void set_IsEnumType(bool value);
    public abstract virtual bool get_IsValue();
    protected abstract virtual void set_IsValue(bool value);
    public abstract virtual bool get_IsGenericCovariant();
    public abstract virtual void set_IsGenericCovariant(bool value);
    public abstract virtual bool get_IsGenericContravariant();
    public abstract virtual void set_IsGenericContravariant(bool value);
    public abstract virtual bool get_IsPublic();
    public abstract virtual void set_IsPublic(bool value);
    public abstract virtual bool get_IsInterface();
    public abstract virtual void set_IsInterface(bool value);
    public abstract virtual bool get_IsAbstract();
    public abstract virtual void set_IsAbstract(bool value);
    public abstract virtual bool get_IsSealed();
    public abstract virtual void set_IsSealed(bool value);
    public abstract virtual MetadataMethod CreateMethod(string name);
    public abstract virtual MetadataMethod CreateMethod(string name, int token);
    public abstract virtual MetadataMethod CreateGenericMethod(string name, MetadataGenericDefinition metadataGenericDefinition);
    public abstract virtual MetadataMethod CreateGenericMethod(string name, int token, MetadataGenericDefinition metadataGenericDefinition);
    public abstract virtual MetadataMethod CreateMethodSpec(MetadataMethod methodSpecParentMethod, MetadataGenericDefinition metadataGenericDefinition);
    public abstract virtual MetadataMethod CreateMethodSpec(MetadataMethod methodSpecParentMethod, int methodSpecToken, MetadataGenericDefinition metadataGenericDefinition);
    public abstract virtual IEnumerable`1<MetadataMethod> get_Methods();
    protected abstract virtual void set_Methods(IEnumerable`1<MetadataMethod> value);
    public abstract virtual bool TryGetMethod(int token, MetadataMethod& metadataMethod);
    public abstract virtual bool TryGetMethod(string name, MetadataType[] parameterTypes, MetadataMethod& metadataMethod);
    public abstract virtual MetadataMember CreateMember(string name, MetadataType memberType);
    public abstract virtual MetadataMember CreateMember(string name, MetadataType memberType, int token);
    public abstract virtual IEnumerable`1<MetadataMember> get_Members();
    protected abstract virtual void set_Members(IEnumerable`1<MetadataMember> value);
    public abstract virtual bool TryGetMember(int token, MetadataMember& metadataMember);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.OrderScope : object {
    public sealed virtual void Dispose();
    public abstract virtual void SuspendAll();
    public abstract virtual void Resume();
    protected abstract virtual void Dispose(bool disposing);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.ParameterData : object {
    public ObjectData InstanceData { get; public set; }
    public IEnumerable`1<KeyValuePair`2<MetadataParameter, ObjectData>> ParameterValues { get; }
    public ObjectData ReturnData { get; public set; }
    public abstract virtual ObjectData get_InstanceData();
    public abstract virtual void set_InstanceData(ObjectData value);
    public abstract virtual void AddParameterData(MetadataParameter parameter, ObjectData value);
    public abstract virtual IEnumerable`1<KeyValuePair`2<MetadataParameter, ObjectData>> get_ParameterValues();
    public abstract virtual ObjectData get_ReturnData();
    public abstract virtual void set_ReturnData(ObjectData value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Process : object {
    public int Id { get; protected set; }
    public DateTime StartTime { get; protected set; }
    public DateTime EndTime { get; protected set; }
    public string CommandLine { get; public set; }
    public string Name { get; public set; }
    public IEnumerable`1<Thread> Threads { get; protected set; }
    public abstract virtual int get_Id();
    protected abstract virtual void set_Id(int value);
    public abstract virtual DateTime get_StartTime();
    protected abstract virtual void set_StartTime(DateTime value);
    public abstract virtual DateTime get_EndTime();
    protected abstract virtual void set_EndTime(DateTime value);
    public abstract virtual string get_CommandLine();
    public abstract virtual void set_CommandLine(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual Thread CreateThread(int id, DateTime startTime, DateTime endTime);
    public abstract virtual Thread CreateThread(int id, DateTime startTime);
    public abstract virtual IEnumerable`1<Thread> get_Threads();
    protected abstract virtual void set_Threads(IEnumerable`1<Thread> value);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Thread : object {
    public int Id { get; protected set; }
    public DateTime StartTime { get; protected set; }
    public DateTime EndTime { get; public set; }
    public string Name { get; public set; }
    public abstract virtual int get_Id();
    protected abstract virtual void set_Id(int value);
    public abstract virtual DateTime get_StartTime();
    protected abstract virtual void set_StartTime(DateTime value);
    public abstract virtual DateTime get_EndTime();
    public abstract virtual void set_EndTime(DateTime value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
public class Microsoft.VisualStudio.IntelliTrace.ObjectModel.ThreadScopeException : InvalidOperationException {
    public ThreadScopeException(string message);
    public ThreadScopeException(string message, Exception innerException);
    protected ThreadScopeException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.VisualStudio.IntelliTrace.ObjectModel.TimingData : object {
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    public TimeSpan TotalTime { get; public set; }
    public abstract virtual DateTime get_StartTime();
    public abstract virtual void set_StartTime(DateTime value);
    public abstract virtual DateTime get_EndTime();
    public abstract virtual void set_EndTime(DateTime value);
    public abstract virtual TimeSpan get_TotalTime();
    public abstract virtual void set_TotalTime(TimeSpan value);
}
internal static class Microsoft.VisualStudio.IntelliTrace.ObjectModel.Validator : object {
    public static void ThrowIfNull(object check, string name);
}
