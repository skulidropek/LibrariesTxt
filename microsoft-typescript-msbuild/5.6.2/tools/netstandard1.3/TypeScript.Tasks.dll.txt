public class TypeScript.Tasks.CheckFileSystemCaseSensitive : Task {
    [CompilerGeneratedAttribute]
private string <MSBuildThisFileFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFileSystemCaseSensitive>k__BackingField;
    public string MSBuildThisFileFullPath { get; public set; }
    [OutputAttribute]
public bool IsFileSystemCaseSensitive { get; public set; }
    public static bool IsUnix { get; }
    [CompilerGeneratedAttribute]
public string get_MSBuildThisFileFullPath();
    [CompilerGeneratedAttribute]
public void set_MSBuildThisFileFullPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFileSystemCaseSensitive();
    [CompilerGeneratedAttribute]
public void set_IsFileSystemCaseSensitive(bool value);
    public static bool get_IsUnix();
    public virtual bool Execute();
}
[ExtensionAttribute]
internal static class TypeScript.Tasks.Extensions : object {
    [ExtensionAttribute]
public static bool IsLibraryFile(string file);
    [ExtensionAttribute]
public static bool IsTypeScriptJsxFile(string file);
    [ExtensionAttribute]
public static bool IsJsxFile(string file);
    [ExtensionAttribute]
public static string GetFullPath(ITaskItem taskItem);
    [ExtensionAttribute]
public static string GetFileName(ITaskItem taskItem);
    [ExtensionAttribute]
public static string EnsureTrailingSlash(string path);
}
internal static class TypeScript.Tasks.FileHelpers : object {
    public static IList`1<ITaskItem> RecursiveGatherTsFiles(string directoryPath, string projectPath, bool isFileSystemCaseSensitive, TaskLoggingHelper log);
    public static IList`1<ITaskItem> RecursiveGatherConfigFiles(string directoryPath, string projectPath, bool isFileSystemCaseSensitive, TaskLoggingHelper log);
    private static IList`1<ITaskItem> RecursiveGatherFiles(string directoryPath, string projectPath, Func`2<string, bool> filter, bool isFileSystemCaseSensitive, TaskLoggingHelper log);
    private static bool AllowedTraversalFolder(string directory, string projectPath, bool isFileSystemCaseSensitive);
}
public class TypeScript.Tasks.FindConfigFiles : Task {
    [CompilerGeneratedAttribute]
private string <ProjectDir>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ContentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFileSystemCaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ConfigFiles>k__BackingField;
    public string ProjectDir { get; public set; }
    public ITaskItem[] ContentFiles { get; public set; }
    public bool IsFileSystemCaseSensitive { get; public set; }
    [OutputAttribute]
public ITaskItem[] ConfigFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectDir();
    [CompilerGeneratedAttribute]
public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ContentFiles();
    [CompilerGeneratedAttribute]
public void set_ContentFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_IsFileSystemCaseSensitive();
    [CompilerGeneratedAttribute]
public void set_IsFileSystemCaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ConfigFiles();
    [CompilerGeneratedAttribute]
public void set_ConfigFiles(ITaskItem[] value);
    public virtual bool Execute();
    private bool FindConfigFilesOnDisk();
    [CompilerGeneratedAttribute]
private bool <Execute>b__16_0(ITaskItem f);
}
public class TypeScript.Tasks.FormatLocalizedString : Task {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <String>k__BackingField;
    private CultureInfo cultureInfo;
    public string Culture { get; public set; }
    public string Name { get; public set; }
    public String[] Arguments { get; public set; }
    [OutputAttribute]
public string String { get; public set; }
    public string get_Culture();
    public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public String[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(String[] value);
    [CompilerGeneratedAttribute]
public string get_String();
    [CompilerGeneratedAttribute]
public void set_String(string value);
    public virtual bool Execute();
}
public class TypeScript.Tasks.GenerateOutputLogs : Task {
    [CompilerGeneratedAttribute]
private string <OutputLogDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFileSystemCaseSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ConfigFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ConfigFilesWithOutputLogs>k__BackingField;
    public string OutputLogDirectory { get; public set; }
    public bool IsFileSystemCaseSensitive { get; public set; }
    public ITaskItem[] ConfigFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] ConfigFilesWithOutputLogs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OutputLogDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputLogDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFileSystemCaseSensitive();
    [CompilerGeneratedAttribute]
public void set_IsFileSystemCaseSensitive(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ConfigFiles();
    [CompilerGeneratedAttribute]
public void set_ConfigFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ConfigFilesWithOutputLogs();
    [CompilerGeneratedAttribute]
public void set_ConfigFilesWithOutputLogs(ITaskItem[] value);
    public virtual bool Execute();
    private static ITaskItem CreateConfigAndOutputFileTaskItem(string configPath, string outputPath);
    private static string ComputeHash(string input);
}
internal static class TypeScript.Tasks.StringConstants : object {
    public static string TypeScriptLibraryFileExtension;
    public static string TypeScriptFileExtension;
    public static string TypeScriptJsxFileExtension;
    public static string JsxFileExtension;
    public static string TypeScriptReferencesFileName;
    public static string NoEmitOnErrorFlag;
    public static string ProjectFlag;
    public static string ListEmittedFilesFlag;
    public static string CalculateInputFilesFlags;
    public static string ListInputFilesFlag;
    public static string tsconfigFileName;
    public static string jsconfigFileName;
    public static IEnumerable`1<string> ForbiddenRootFolders;
    private static StringConstants();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class TypeScript.Tasks.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CompilerLogNotSpecified { get; }
    internal static string ConfigFileFoundOnDisk { get; }
    internal static string ErrorListBuildPrefix { get; }
    internal static string ErrorWritingLog { get; }
    internal static string FallbackVersionWarning { get; }
    internal static string LocatedReferenceFilesAt_0 { get; }
    internal static string NoCompilerError { get; }
    internal static string NodeNotFound { get; }
    internal static string ToolsVersionWarning { get; }
    internal static string TypeScriptCompileBlockedSet { get; }
    internal static string TypeScriptNoVersionWarning { get; }
    internal static string TypeScriptVersionMismatchWarning { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CompilerLogNotSpecified();
    internal static string get_ConfigFileFoundOnDisk();
    internal static string get_ErrorListBuildPrefix();
    internal static string get_ErrorWritingLog();
    internal static string get_FallbackVersionWarning();
    internal static string get_LocatedReferenceFilesAt_0();
    internal static string get_NoCompilerError();
    internal static string get_NodeNotFound();
    internal static string get_ToolsVersionWarning();
    internal static string get_TypeScriptCompileBlockedSet();
    internal static string get_TypeScriptNoVersionWarning();
    internal static string get_TypeScriptVersionMismatchWarning();
}
internal static class TypeScript.Tasks.Utilities : object {
    public static StringComparer GetPathComparer(bool isFileSystemCaseSensitive);
    public static bool StringEquals(string x, string y, bool isFileSystemCaseSensitive);
}
public class TypeScript.Tasks.VsTsc : ToolTask {
    private static string DefaultOutputLog;
    [CompilerGeneratedAttribute]
private string <ToolPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodePath>k__BackingField;
    private string _toolExe;
    [CompilerGeneratedAttribute]
private ITaskItem <TSJavaScriptFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFileSystemCaseSensitive>k__BackingField;
    private string configurations;
    [CompilerGeneratedAttribute]
private string <AdditionalFlagsForInvocationWithConfigFile>k__BackingField;
    private List`1<ITaskItem> inputFilePaths;
    [CompilerGeneratedAttribute]
private ITaskItem <TSConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Clean>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredUILang>k__BackingField;
    public string projectDir;
    [CompilerGeneratedAttribute]
private string <RootDir>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JsxPreserve>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TypeScriptCompileBlocked>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ComputeInputAndOutputOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateDeclarationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateSourceMaps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputLogDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputLogFile>k__BackingField;
    private List`1<ITaskItem> compilerOutputs;
    private String[] UnixPathList;
    private Version parsedVersion;
    private static Version MinNoEmitVersion;
    private static Version MinListEmitVersion;
    private static Version MinListFilesOnlyVersion;
    private Lazy`1<string> _pathResolvedNodeLocation;
    public string ToolPath { get; public set; }
    public string NodePath { get; public set; }
    public string ToolExe { get; public set; }
    public ITaskItem TSJavaScriptFile { get; public set; }
    public bool IsFileSystemCaseSensitive { get; public set; }
    public string Configurations { get; public set; }
    public string AdditionalFlagsForInvocationWithConfigFile { get; public set; }
    [OutputAttribute]
public ITaskItem[] FullPathsToFiles { get; public set; }
    public ITaskItem TSConfigFile { get; public set; }
    public bool BuildMode { get; public set; }
    public bool Clean { get; public set; }
    public string OutFile { get; public set; }
    public string OutDir { get; public set; }
    public string PreferredUILang { get; public set; }
    public string ProjectDir { get; public set; }
    public string RootDir { get; public set; }
    public bool JsxPreserve { get; public set; }
    public bool TypeScriptCompileBlocked { get; public set; }
    public string ToolsVersion { get; public set; }
    public bool ComputeInputAndOutputOnly { get; public set; }
    public bool GenerateDeclarationFiles { get; public set; }
    public bool GenerateSourceMaps { get; public set; }
    public string OutputLogDirectory { get; public set; }
    public string OutputLogFile { get; public set; }
    public static bool IsUnix { get; }
    [OutputAttribute]
public ITaskItem[] GeneratedJavascript { get; public set; }
    protected Encoding StandardOutputEncoding { get; }
    protected Encoding StandardErrorEncoding { get; }
    protected string ToolName { get; }
    protected Encoding ResponseFileEncoding { get; }
    internal bool SupportNoEmit { get; }
    internal bool SupportListEmit { get; }
    private static VsTsc();
    [CompilerGeneratedAttribute]
public string get_ToolPath();
    [CompilerGeneratedAttribute]
public void set_ToolPath(string value);
    [CompilerGeneratedAttribute]
public string get_NodePath();
    [CompilerGeneratedAttribute]
public void set_NodePath(string value);
    public virtual string get_ToolExe();
    public virtual void set_ToolExe(string value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TSJavaScriptFile();
    [CompilerGeneratedAttribute]
public void set_TSJavaScriptFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_IsFileSystemCaseSensitive();
    [CompilerGeneratedAttribute]
public void set_IsFileSystemCaseSensitive(bool value);
    public string get_Configurations();
    public void set_Configurations(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalFlagsForInvocationWithConfigFile();
    [CompilerGeneratedAttribute]
public void set_AdditionalFlagsForInvocationWithConfigFile(string value);
    public ITaskItem[] get_FullPathsToFiles();
    public void set_FullPathsToFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_TSConfigFile();
    [CompilerGeneratedAttribute]
public void set_TSConfigFile(ITaskItem value);
    [CompilerGeneratedAttribute]
public bool get_BuildMode();
    [CompilerGeneratedAttribute]
public void set_BuildMode(bool value);
    [CompilerGeneratedAttribute]
public bool get_Clean();
    [CompilerGeneratedAttribute]
public void set_Clean(bool value);
    [CompilerGeneratedAttribute]
public string get_OutFile();
    [CompilerGeneratedAttribute]
public void set_OutFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutDir();
    [CompilerGeneratedAttribute]
public void set_OutDir(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredUILang();
    [CompilerGeneratedAttribute]
public void set_PreferredUILang(string value);
    public string get_ProjectDir();
    public void set_ProjectDir(string value);
    [CompilerGeneratedAttribute]
public string get_RootDir();
    [CompilerGeneratedAttribute]
public void set_RootDir(string value);
    [CompilerGeneratedAttribute]
public bool get_JsxPreserve();
    [CompilerGeneratedAttribute]
public void set_JsxPreserve(bool value);
    [CompilerGeneratedAttribute]
public bool get_TypeScriptCompileBlocked();
    [CompilerGeneratedAttribute]
public void set_TypeScriptCompileBlocked(bool value);
    [CompilerGeneratedAttribute]
public string get_ToolsVersion();
    [CompilerGeneratedAttribute]
public void set_ToolsVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_ComputeInputAndOutputOnly();
    [CompilerGeneratedAttribute]
public void set_ComputeInputAndOutputOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateDeclarationFiles();
    [CompilerGeneratedAttribute]
public void set_GenerateDeclarationFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_GenerateSourceMaps();
    [CompilerGeneratedAttribute]
public void set_GenerateSourceMaps(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputLogDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputLogDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_OutputLogFile();
    [CompilerGeneratedAttribute]
public void set_OutputLogFile(string value);
    public static bool get_IsUnix();
    public ITaskItem[] get_GeneratedJavascript();
    public void set_GeneratedJavascript(ITaskItem[] value);
    protected virtual Encoding get_StandardOutputEncoding();
    protected virtual Encoding get_StandardErrorEncoding();
    private string GetNodeProgramForUnix();
    protected sealed virtual string get_ToolName();
    protected virtual Encoding get_ResponseFileEncoding();
    internal bool get_SupportNoEmit();
    internal bool get_SupportListEmit();
    private bool ToolsVersionIsGreaterThan(Version minVersion);
    protected virtual string GenerateFullPathToTool();
    private string GetNodeProgramForWindows();
    protected virtual void LogEventsFromTextOutput(string singleLine, MessageImportance messageImportance);
    private string EnsureFileIsAbsolute(string fileName);
    protected virtual string GenerateResponseFileCommands();
    private bool IsConfigurationFile(string fileName);
    private string AddFlagsToCalculateInputsIfNecessary(string responseFileCommands);
    protected virtual string GenerateCommandLineCommands();
    private void AppendBuildModeCommandLineArguments(CommandLineBuilder builder);
    private ITaskItem[] GatherTsFilesUnderPath(string projectPath);
    protected virtual bool SkipTaskExecution();
    protected virtual int ExecuteTool(string pathToTool, string responseFileCommands, string commandLineCommands);
    private void SetCompilerOutputsForIncrementalBuild();
    private void LogOutputFiles();
    private string ComputeCommonDirectoryPath();
    private void GenerateOutputPaths();
    private void ProcessFilePathsAndChangeExtensions(string commonDirectoryPathToReplace, string outputDirectory);
    private void AddPathToOutputs(string path);
    private static ITaskItem CreateTaskItem(string path);
    private static ITaskItem CreateFullPathTaskItem(string path);
    private string MakeProjectRelative(string path);
    private bool TryCreateUri(string path, bool emitError, Uri& uri);
    private static string GetReferencesFilePath(string projectDirectory);
    [CompilerGeneratedAttribute]
private string <.ctor>b__122_0();
}
