public static class Microsoft.VisualStudio.Containers.Tools.Tasks.Capabilities : object {
    public static string CrossPlatformExecutable;
    public static string Managed;
    private static Capabilities();
}
public class Microsoft.VisualStudio.Containers.Tools.Tasks.Clean : ContainerBuildTask {
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Tasks.Clean/<ExecuteCoreAsync>d__0")]
protected virtual Task ExecuteCoreAsync(ContainerBuildTaskContext context);
}
public class Microsoft.VisualStudio.Containers.Tools.Tasks.ContainerBuildAndLaunch : ContainerBuildTask {
    [CompilerGeneratedAttribute]
private string <LaunchContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LaunchingInVs>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectCapability>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerDevelopmentMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DevEnvDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPackageRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NuGetPackageFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerLabelBuiltImages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectTypeGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishAot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainersToolsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureFunctionsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionsExecutionModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveDebugProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoWarn>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Dockerfiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDefaultDockerfile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileBuildArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDebuggeeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDebuggeeKillProgram>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDebuggeeProgram>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDebuggeeWorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerFastModeProjectMountDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDefaultContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileRunArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerVsDbgPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerImageLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerImageLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerIncludeDefaultImageLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDefaultImageLabels>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileRunEnvironmentFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileStage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileFastModeStage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDefaultTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerfileTargetOS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerDefaultTargetOS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserSecretsId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlazorStaticWebAssetsManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerProfilerContainerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DockerProfilerHostPort>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DockerfilesOut>k__BackingField;
    [RequiredAttribute]
[MSBuildPropertyNameAttribute("LaunchContainer")]
public string LaunchContainer { get; public set; }
    [RequiredAttribute]
[MSBuildPropertyNameAttribute("LaunchingInVs")]
public string LaunchingInVs { get; public set; }
    [MSBuildItemNameAttribute("ProjectCapability")]
public ITaskItem[] ProjectCapability { get; public set; }
    [MSBuildPropertyNameAttribute("ContainerDevelopmentMode")]
public string ContainerDevelopmentMode { get; public set; }
    [MSBuildPropertyNameAttribute("DevEnvDir")]
public string DevEnvDir { get; public set; }
    [MSBuildPropertyNameAttribute("NuGetPackageRoot")]
public string NuGetPackageRoot { get; public set; }
    [MSBuildPropertyNameAttribute("NuGetPackageFolders")]
public string NuGetPackageFolders { get; public set; }
    [MSBuildPropertyNameAttribute("TargetPath")]
public string TargetPath { get; public set; }
    [MSBuildPropertyNameAttribute("OutDir")]
public string OutDir { get; public set; }
    [MSBuildPropertyNameAttribute("TargetFramework")]
public string TargetFramework { get; public set; }
    [MSBuildPropertyNameAttribute("TargetFrameworkIdentifier")]
public string TargetFrameworkIdentifier { get; public set; }
    [MSBuildPropertyNameAttribute("TargetFrameworkVersion")]
public string TargetFrameworkVersion { get; public set; }
    [MSBuildPropertyNameAttribute("DockerLabelBuiltImages")]
public string DockerLabelBuiltImages { get; public set; }
    [MSBuildPropertyNameAttribute("ProjectTypeGuids")]
public string ProjectTypeGuids { get; public set; }
    [MSBuildPropertyNameAttribute("OutputType")]
public string OutputType { get; public set; }
    [MSBuildPropertyNameAttribute("PublishAot")]
public string PublishAot { get; public set; }
    [MSBuildPropertyNameAttribute("VisualStudioVersion")]
public string VisualStudioVersion { get; public set; }
    [MSBuildPropertyNameAttribute("ContainersToolsVersion")]
public string ContainersToolsVersion { get; public set; }
    [MSBuildPropertyNameAttribute("AzureFunctionsVersion")]
public string AzureFunctionsVersion { get; public set; }
    [MSBuildPropertyNameAttribute("FunctionsExecutionModel")]
public string FunctionsExecutionModel { get; public set; }
    [MSBuildPropertyNameAttribute("ActiveDebugProfile")]
public string ActiveDebugProfile { get; public set; }
    [MSBuildPropertyNameAttribute("NoWarn")]
public string NoWarn { get; public set; }
    [MSBuildItemNameAttribute("Dockerfile")]
public ITaskItem[] Dockerfiles { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileFile")]
public string DockerfileFile { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDefaultDockerfile")]
public string DockerDefaultDockerfile { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileBuildArguments")]
public string DockerfileBuildArguments { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileContext")]
public string DockerfileContext { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDebuggeeArguments")]
public string DockerDebuggeeArguments { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDebuggeeKillProgram")]
public string DockerDebuggeeKillProgram { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDebuggeeProgram")]
public string DockerDebuggeeProgram { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDebuggeeWorkingDirectory")]
public string DockerDebuggeeWorkingDirectory { get; public set; }
    [MSBuildPropertyNameAttribute("DockerFastModeProjectMountDirectory")]
public string DockerFastModeProjectMountDirectory { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDefaultContext")]
public string DockerDefaultContext { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileRepository")]
public string DockerfileRepository { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileRunArguments")]
public string DockerfileRunArguments { get; public set; }
    [MSBuildPropertyNameAttribute("ContainerVsDbgPath")]
public string ContainerVsDbgPath { get; public set; }
    [MSBuildPropertyNameAttribute("DockerImageLabel")]
public string DockerImageLabel { get; public set; }
    [MSBuildPropertyNameAttribute("DockerImageLabels")]
public string DockerImageLabels { get; public set; }
    [MSBuildPropertyNameAttribute("DockerIncludeDefaultImageLabels")]
public string DockerIncludeDefaultImageLabels { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDefaultImageLabels")]
public string DockerDefaultImageLabels { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileRunEnvironmentFiles")]
public string DockerfileRunEnvironmentFiles { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileStage")]
public string DockerfileStage { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileFastModeStage")]
public string DockerfileFastModeStage { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileTag")]
public string DockerfileTag { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDefaultTag")]
public string DockerDefaultTag { get; public set; }
    [MSBuildPropertyNameAttribute("DockerfileTargetOS")]
public string DockerfileTargetOS { get; public set; }
    [MSBuildPropertyNameAttribute("DockerDefaultTargetOS")]
public string DockerDefaultTargetOS { get; public set; }
    [MSBuildPropertyNameAttribute("UserSecretsId")]
public string UserSecretsId { get; public set; }
    [MSBuildPropertyNameAttribute("BlazorStaticWebAssetsManifest")]
public string BlazorStaticWebAssetsManifest { get; public set; }
    [MSBuildPropertyNameAttribute("DockerProfilerContainerPort")]
public string DockerProfilerContainerPort { get; public set; }
    [MSBuildPropertyNameAttribute("DockerProfilerHostPort")]
public string DockerProfilerHostPort { get; public set; }
    [OutputAttribute]
public ITaskItem[] DockerfilesOut { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LaunchContainer();
    [CompilerGeneratedAttribute]
public void set_LaunchContainer(string value);
    [CompilerGeneratedAttribute]
public string get_LaunchingInVs();
    [CompilerGeneratedAttribute]
public void set_LaunchingInVs(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectCapability();
    [CompilerGeneratedAttribute]
public void set_ProjectCapability(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ContainerDevelopmentMode();
    [CompilerGeneratedAttribute]
public void set_ContainerDevelopmentMode(string value);
    [CompilerGeneratedAttribute]
public string get_DevEnvDir();
    [CompilerGeneratedAttribute]
public void set_DevEnvDir(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPackageRoot();
    [CompilerGeneratedAttribute]
public void set_NuGetPackageRoot(string value);
    [CompilerGeneratedAttribute]
public string get_NuGetPackageFolders();
    [CompilerGeneratedAttribute]
public void set_NuGetPackageFolders(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(string value);
    [CompilerGeneratedAttribute]
public string get_OutDir();
    [CompilerGeneratedAttribute]
public void set_OutDir(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkIdentifier();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public string get_DockerLabelBuiltImages();
    [CompilerGeneratedAttribute]
public void set_DockerLabelBuiltImages(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectTypeGuids();
    [CompilerGeneratedAttribute]
public void set_ProjectTypeGuids(string value);
    [CompilerGeneratedAttribute]
public string get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(string value);
    [CompilerGeneratedAttribute]
public string get_PublishAot();
    [CompilerGeneratedAttribute]
public void set_PublishAot(string value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public void set_VisualStudioVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ContainersToolsVersion();
    [CompilerGeneratedAttribute]
public void set_ContainersToolsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AzureFunctionsVersion();
    [CompilerGeneratedAttribute]
public void set_AzureFunctionsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionsExecutionModel();
    [CompilerGeneratedAttribute]
public void set_FunctionsExecutionModel(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveDebugProfile();
    [CompilerGeneratedAttribute]
public void set_ActiveDebugProfile(string value);
    [CompilerGeneratedAttribute]
public string get_NoWarn();
    [CompilerGeneratedAttribute]
public void set_NoWarn(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Dockerfiles();
    [CompilerGeneratedAttribute]
public void set_Dockerfiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_DockerfileFile();
    [CompilerGeneratedAttribute]
public void set_DockerfileFile(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDefaultDockerfile();
    [CompilerGeneratedAttribute]
public void set_DockerDefaultDockerfile(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileBuildArguments();
    [CompilerGeneratedAttribute]
public void set_DockerfileBuildArguments(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileContext();
    [CompilerGeneratedAttribute]
public void set_DockerfileContext(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDebuggeeArguments();
    [CompilerGeneratedAttribute]
public void set_DockerDebuggeeArguments(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDebuggeeKillProgram();
    [CompilerGeneratedAttribute]
public void set_DockerDebuggeeKillProgram(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDebuggeeProgram();
    [CompilerGeneratedAttribute]
public void set_DockerDebuggeeProgram(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDebuggeeWorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_DockerDebuggeeWorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DockerFastModeProjectMountDirectory();
    [CompilerGeneratedAttribute]
public void set_DockerFastModeProjectMountDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDefaultContext();
    [CompilerGeneratedAttribute]
public void set_DockerDefaultContext(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileRepository();
    [CompilerGeneratedAttribute]
public void set_DockerfileRepository(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileRunArguments();
    [CompilerGeneratedAttribute]
public void set_DockerfileRunArguments(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerVsDbgPath();
    [CompilerGeneratedAttribute]
public void set_ContainerVsDbgPath(string value);
    [CompilerGeneratedAttribute]
public string get_DockerImageLabel();
    [CompilerGeneratedAttribute]
public void set_DockerImageLabel(string value);
    [CompilerGeneratedAttribute]
public string get_DockerImageLabels();
    [CompilerGeneratedAttribute]
public void set_DockerImageLabels(string value);
    [CompilerGeneratedAttribute]
public string get_DockerIncludeDefaultImageLabels();
    [CompilerGeneratedAttribute]
public void set_DockerIncludeDefaultImageLabels(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDefaultImageLabels();
    [CompilerGeneratedAttribute]
public void set_DockerDefaultImageLabels(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileRunEnvironmentFiles();
    [CompilerGeneratedAttribute]
public void set_DockerfileRunEnvironmentFiles(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileStage();
    [CompilerGeneratedAttribute]
public void set_DockerfileStage(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileFastModeStage();
    [CompilerGeneratedAttribute]
public void set_DockerfileFastModeStage(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileTag();
    [CompilerGeneratedAttribute]
public void set_DockerfileTag(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDefaultTag();
    [CompilerGeneratedAttribute]
public void set_DockerDefaultTag(string value);
    [CompilerGeneratedAttribute]
public string get_DockerfileTargetOS();
    [CompilerGeneratedAttribute]
public void set_DockerfileTargetOS(string value);
    [CompilerGeneratedAttribute]
public string get_DockerDefaultTargetOS();
    [CompilerGeneratedAttribute]
public void set_DockerDefaultTargetOS(string value);
    [CompilerGeneratedAttribute]
public string get_UserSecretsId();
    [CompilerGeneratedAttribute]
public void set_UserSecretsId(string value);
    [CompilerGeneratedAttribute]
public string get_BlazorStaticWebAssetsManifest();
    [CompilerGeneratedAttribute]
public void set_BlazorStaticWebAssetsManifest(string value);
    [CompilerGeneratedAttribute]
public string get_DockerProfilerContainerPort();
    [CompilerGeneratedAttribute]
public void set_DockerProfilerContainerPort(string value);
    [CompilerGeneratedAttribute]
public string get_DockerProfilerHostPort();
    [CompilerGeneratedAttribute]
public void set_DockerProfilerHostPort(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DockerfilesOut();
    [CompilerGeneratedAttribute]
public void set_DockerfilesOut(ITaskItem[] value);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Tasks.ContainerBuildAndLaunch/<ExecuteCoreAsync>d__208")]
protected virtual Task ExecuteCoreAsync(ContainerBuildTaskContext context);
    private TargetFramework ResolveTargetFramework();
    private static ITaskItem ToTaskItem(DockerfileItem dockerfileItem);
    private Task`1<string> GetMSBuildPropertyAsync(string propertyName);
    private Task`1<IEnumerable`1<ProjectItemWrapper>> GetProjectItemsAsync(string itemType);
    private static PropertyInfo GetPropertyWithMSBuildNameOrDefault(string msBuildName);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Tasks.ContainerBuildAndLaunch/<InitializeProfilerLaunchInfoAsync>d__214")]
private Task InitializeProfilerLaunchInfoAsync(IFileBasedCache cache, ContainerBuildAndLaunchContext containerLaunchContext);
    [CompilerGeneratedAttribute]
private Task`1<string> <ExecuteCoreAsync>b__208_1(string propertyName);
    [CompilerGeneratedAttribute]
private Task`1<IEnumerable`1<ProjectItemWrapper>> <ExecuteCoreAsync>b__208_2(string itemType);
}
public abstract class Microsoft.VisualStudio.Containers.Tools.Tasks.ContainerBuildTask : Task {
    private CancellationTokenSource cancellationTokenSource;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorLogFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [RequiredAttribute]
[MSBuildPropertyNameAttribute("MSBuildProjectFullPath")]
public string ProjectFilePath { get; public set; }
    [RequiredAttribute]
[MSBuildPropertyNameAttribute("ContainerIntermediateOutputPath")]
public string IntermediateOutputPath { get; public set; }
    [MSBuildPropertyNameAttribute("ContainerSemaphoreFilePath")]
public string ErrorLogFilePath { get; public set; }
    [RequiredAttribute]
[MSBuildPropertyNameAttribute("Configuration")]
public string Configuration { get; public set; }
    protected string ProjectDirectory { get; }
    protected string ProjectFileName { get; }
    protected string ProjectName { get; }
    protected string CachePath { get; }
    private string TelemetryLogFilePath { get; }
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
public void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorLogFilePath();
    [CompilerGeneratedAttribute]
public void set_ErrorLogFilePath(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    protected string get_ProjectDirectory();
    protected string get_ProjectFileName();
    protected string get_ProjectName();
    protected string get_CachePath();
    private string get_TelemetryLogFilePath();
    public sealed virtual void Cancel();
    public sealed virtual bool Execute();
    protected abstract virtual Task ExecuteCoreAsync(ContainerBuildTaskContext context);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Tasks.ContainerBuildTask/<ExecuteAsync>d__30")]
private Task`1<bool> ExecuteAsync(ContainerBuildTaskContext context);
    public Task OutputAndLogContainerToolsException(ContainerToolsException ex);
    [CompilerGeneratedAttribute]
private void <Execute>b__28_0(string message);
}
public class Microsoft.VisualStudio.Containers.Tools.Tasks.ContainerBuildTaskContext : object {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileBasedCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    public CancellationToken CancellationToken { get; public set; }
    public ILogger Logger { get; public set; }
    public IFileBasedCache Cache { get; public set; }
    public string Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IFileBasedCache get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(IFileBasedCache value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
}
public class Microsoft.VisualStudio.Containers.Tools.Tasks.ContainerError : Task {
    [CompilerGeneratedAttribute]
private string <ErrorName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Arguments>k__BackingField;
    [RequiredAttribute]
public string ErrorName { get; public set; }
    public ITaskItem[] Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ErrorName();
    [CompilerGeneratedAttribute]
public void set_ErrorName(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(ITaskItem[] value);
    public virtual bool Execute();
}
public class Microsoft.VisualStudio.Containers.Tools.Tasks.KillAppInsideContainer : ContainerBuildTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectCapability>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectTypeGuids>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishAot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionsExecutionModel>k__BackingField;
    [MSBuildItemNameAttribute("ProjectCapability")]
public ITaskItem[] ProjectCapability { get; public set; }
    [MSBuildPropertyNameAttribute("ProjectTypeGuids")]
public string ProjectTypeGuids { get; public set; }
    [MSBuildPropertyNameAttribute("OutputType")]
public string OutputType { get; public set; }
    [MSBuildPropertyNameAttribute("PublishAot")]
public string PublishAot { get; public set; }
    [MSBuildPropertyNameAttribute("FunctionsExecutionModel")]
public string FunctionsExecutionModel { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectCapability();
    [CompilerGeneratedAttribute]
public void set_ProjectCapability(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectTypeGuids();
    [CompilerGeneratedAttribute]
public void set_ProjectTypeGuids(string value);
    [CompilerGeneratedAttribute]
public string get_OutputType();
    [CompilerGeneratedAttribute]
public void set_OutputType(string value);
    [CompilerGeneratedAttribute]
public string get_PublishAot();
    [CompilerGeneratedAttribute]
public void set_PublishAot(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionsExecutionModel();
    [CompilerGeneratedAttribute]
public void set_FunctionsExecutionModel(string value);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Containers.Tools.Tasks.KillAppInsideContainer/<ExecuteCoreAsync>d__20")]
protected virtual Task ExecuteCoreAsync(ContainerBuildTaskContext context);
}
public class Microsoft.VisualStudio.Containers.Tools.Tasks.KillContainer : ContainerBuildTask {
    protected virtual Task ExecuteCoreAsync(ContainerBuildTaskContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Containers.Tools.Tasks.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorDockerNotInstalled { get; }
    internal static string ErrorTaskMissingProperty { get; }
    internal static string WaitingForWarmupToComplete { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorDockerNotInstalled();
    internal static string get_ErrorTaskMissingProperty();
    internal static string get_WaitingForWarmupToComplete();
}
public class Microsoft.VisualStudio.Containers.Tools.Tasks.WaitForWarmupCompletion : ContainerBuildTask {
    protected virtual Task ExecuteCoreAsync(ContainerBuildTaskContext context);
}
