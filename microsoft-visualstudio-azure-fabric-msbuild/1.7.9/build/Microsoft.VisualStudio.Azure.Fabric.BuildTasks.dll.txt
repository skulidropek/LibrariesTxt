public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.AddCorrelationIds : Task {
    private static string getProjectGuidResourceName;
    private static string GuidStringFormatNoBraces;
    internal static string CorrelationIdAttribute;
    [CompilerGeneratedAttribute]
private string <ApplicationProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ServiceProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationPackagePath>k__BackingField;
    private static Lazy`1<Regex> s_crackProjectLine;
    [RequiredAttribute]
public string ApplicationProjectPath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ServiceProjects { get; public set; }
    [RequiredAttribute]
public string ApplicationPackagePath { get; public set; }
    private static AddCorrelationIds();
    [CompilerGeneratedAttribute]
public string get_ApplicationProjectPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationProjectPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ServiceProjects();
    [CompilerGeneratedAttribute]
public void set_ServiceProjects(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ApplicationPackagePath();
    [CompilerGeneratedAttribute]
public void set_ApplicationPackagePath(string value);
    public virtual bool Execute();
    private void AddCorrelationIdToManifest(string projectPath, string manifestPath, string commonBuildProperties);
    private static string GetProjectGuidFromSolutionFile(string projectFileFullPath);
    private static string GetProjectGuid(string solutionFileFullPath, string projectFileFullPath);
}
[XmlRootAttribute("ApplicationManifest")]
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ApplicationManifestSlim : object {
    [CompilerGeneratedAttribute]
private ServiceManifestImport[] <ServiceManifestImport>k__BackingField;
    [XmlElementAttribute]
public ServiceManifestImport[] ServiceManifestImport { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceManifestImport[] get_ServiceManifestImport();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestImport(ServiceManifestImport[] value);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.CodePackage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EntryPoint <EntryPoint>k__BackingField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlElementAttribute]
public EntryPoint EntryPoint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public EntryPoint get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(EntryPoint value);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ContainerHost : object {
    [CompilerGeneratedAttribute]
private string <ImageName>k__BackingField;
    [XmlElementAttribute]
public string ImageName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ImageName();
    [CompilerGeneratedAttribute]
public void set_ImageName(string value);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.EntryPoint : object {
    [CompilerGeneratedAttribute]
private ContainerHost <ContainerHost>k__BackingField;
    [XmlElementAttribute]
public ContainerHost ContainerHost { get; public set; }
    [CompilerGeneratedAttribute]
public ContainerHost get_ContainerHost();
    [CompilerGeneratedAttribute]
public void set_ContainerHost(ContainerHost value);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.FilterPackageFiles : Task {
    private static string ApplicationPackageType;
    private static string ServicePackageType;
    private IEnumerable`1<string> _includeInPackagePaths;
    [CompilerGeneratedAttribute]
private string <PackageBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <IncludeInPackagePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PackageFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PackageFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilteredPackageFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilteredPackageFolders>k__BackingField;
    [RequiredAttribute]
public string PackageBehavior { get; public set; }
    [RequiredAttribute]
public ITaskItem[] IncludeInPackagePaths { get; public set; }
    [RequiredAttribute]
public ITaskItem[] PackageFiles { get; public set; }
    [RequiredAttribute]
public ITaskItem[] PackageFolders { get; public set; }
    [RequiredAttribute]
public string PackageType { get; public set; }
    [OutputAttribute]
public ITaskItem[] FilteredPackageFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] FilteredPackageFolders { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PackageBehavior();
    [CompilerGeneratedAttribute]
public void set_PackageBehavior(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_IncludeInPackagePaths();
    [CompilerGeneratedAttribute]
public void set_IncludeInPackagePaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PackageFiles();
    [CompilerGeneratedAttribute]
public void set_PackageFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PackageFolders();
    [CompilerGeneratedAttribute]
public void set_PackageFolders(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_PackageType();
    [CompilerGeneratedAttribute]
public void set_PackageType(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilteredPackageFiles();
    [CompilerGeneratedAttribute]
public void set_FilteredPackageFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilteredPackageFolders();
    [CompilerGeneratedAttribute]
public void set_FilteredPackageFolders(ITaskItem[] value);
    public virtual bool Execute();
    private static string NormalizePackagePath(ITaskItem pathItem);
    private bool IncludeFile(ITaskItem file);
    private bool IncludeFolder(ITaskItem folder);
    private bool IncludePath(string relativePackagePath);
    [CompilerGeneratedAttribute]
private bool <Execute>b__31_1(ITaskItem f);
    [CompilerGeneratedAttribute]
private bool <Execute>b__31_2(ITaskItem f);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.FindServiceManifests : Task {
    [CompilerGeneratedAttribute]
private string <ApplicationPackageRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ServiceManifestFiles>k__BackingField;
    [RequiredAttribute]
public string ApplicationPackageRootFolder { get; public set; }
    [OutputAttribute]
public ITaskItem[] ServiceManifestFiles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationPackageRootFolder();
    [CompilerGeneratedAttribute]
public void set_ApplicationPackageRootFolder(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ServiceManifestFiles();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestFiles(ITaskItem[] value);
    public virtual bool Execute();
    private static bool IsServiceManifestSchema(string path);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.FindTargetPath : Task {
    private static string TargetPathMetadata;
    private List`1<ITaskItem> _itemWithTargetPath;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FindUnderTargetDir>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [RequiredAttribute]
public string FindUnderTargetDir { get; public set; }
    [OutputAttribute]
public ITaskItem[] ItemWithTargetPath { get; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_FindUnderTargetDir();
    [CompilerGeneratedAttribute]
public void set_FindUnderTargetDir(string value);
    public ITaskItem[] get_ItemWithTargetPath();
    public virtual bool Execute();
    private static bool IsMatchingSizeAndTimeStamp(string sourceFile, string destinationFile);
    private string FindMatchingFile(string file);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.GetApplicationParametersFiles : GetParametersFilesBase {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ApplicationParametersFiles>k__BackingField;
    [OutputAttribute]
public ITaskItem[] ApplicationParametersFiles { get; public set; }
    protected string ParametersElementName { get; }
    protected string ParametersFileDefaultNodeName { get; }
    protected string ParametersFileDoesNotExistErrorFormat { get; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ApplicationParametersFiles();
    [CompilerGeneratedAttribute]
public void set_ApplicationParametersFiles(ITaskItem[] value);
    protected virtual string get_ParametersElementName();
    protected virtual string get_ParametersFileDefaultNodeName();
    protected virtual string get_ParametersFileDoesNotExistErrorFormat();
    protected virtual void SetParametersFilesOutput(ITaskItem[] parametersFiles);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.GetPackageRootFiles : Task {
    private static string RelativePackagePathMetadata;
    private string _projectFolder;
    [CompilerGeneratedAttribute]
private string <ProjectPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageRootFolderPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DestinationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommonBuildProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PackageRootFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PackageRootFolders>k__BackingField;
    [RequiredAttribute]
public string ProjectPath { get; public set; }
    [RequiredAttribute]
public string PackageRootFolderPath { get; public set; }
    public string DestinationPath { get; public set; }
    public string CommonBuildProperties { get; public set; }
    [OutputAttribute]
public ITaskItem[] PackageRootFiles { get; public set; }
    [OutputAttribute]
public ITaskItem[] PackageRootFolders { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProjectPath();
    [CompilerGeneratedAttribute]
public void set_ProjectPath(string value);
    [CompilerGeneratedAttribute]
public string get_PackageRootFolderPath();
    [CompilerGeneratedAttribute]
public void set_PackageRootFolderPath(string value);
    [CompilerGeneratedAttribute]
public string get_DestinationPath();
    [CompilerGeneratedAttribute]
public void set_DestinationPath(string value);
    [CompilerGeneratedAttribute]
public string get_CommonBuildProperties();
    [CompilerGeneratedAttribute]
public void set_CommonBuildProperties(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PackageRootFiles();
    [CompilerGeneratedAttribute]
public void set_PackageRootFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PackageRootFolders();
    [CompilerGeneratedAttribute]
public void set_PackageRootFolders(ITaskItem[] value);
    public virtual bool Execute();
    private IEnumerable`1<ITaskItem> FindPackageRootFilesInFileSystem(string fullPackageRootPath);
    private IEnumerable`1<ITaskItem> FindPackageRootFoldersInFileSystem(string fullPackageRootPath);
    private IEnumerable`1<ITaskItem> FindPackageRootFilesDefinedInProject(string packageRootPath);
    private IEnumerable`1<ITaskItem> FindPackageRootFoldersDefinedInProject(string packageRootPath);
    private string GetDestinationPath(ProjectItem item, string packageRootPath);
    private static string GetDestinationPath(string absolutePath, string packageRootPath);
    private ITaskItem CreateTaskItem(string fullSourcePath, string relativePath);
    private string NormalizePath(string path);
}
public abstract class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.GetParametersFilesBase : Task {
    private static string FabricToolsXmlNamespace;
    [CompilerGeneratedAttribute]
private bool <LocalOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalClusterMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationProjectPath>k__BackingField;
    [ObsoleteAttribute]
public bool LocalOnly { get; public set; }
    public string LocalClusterMode { get; public set; }
    [RequiredAttribute]
public string ApplicationProjectPath { get; public set; }
    protected string ParametersElementName { get; }
    protected string ParametersFileDefaultNodeName { get; }
    protected string ParametersFileDoesNotExistErrorFormat { get; }
    [CompilerGeneratedAttribute]
public bool get_LocalOnly();
    [CompilerGeneratedAttribute]
public void set_LocalOnly(bool value);
    [CompilerGeneratedAttribute]
public string get_LocalClusterMode();
    [CompilerGeneratedAttribute]
public void set_LocalClusterMode(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationProjectPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationProjectPath(string value);
    protected abstract virtual string get_ParametersElementName();
    protected abstract virtual string get_ParametersFileDefaultNodeName();
    protected abstract virtual string get_ParametersFileDoesNotExistErrorFormat();
    protected abstract virtual void SetParametersFilesOutput(ITaskItem[] parametersFiles);
    public virtual bool Execute();
    private bool IsParametersFile(string filePath);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.GetServiceProjectReferences : Task {
    private static string ConsoleOutputType;
    internal static string ServiceManifestNameMetadata;
    internal static string ContainerImageNameMetadata;
    internal static string ContainerAppTypeMetadata;
    internal static string PlatformMetadata;
    internal static string ConfigurationMetadata;
    internal static string SetPlatformMetadata;
    internal static string SetConfigurationMetadata;
    internal static string SetTargetFrameworkMetadata;
    internal static string CommonBuildPropertiesMetadata;
    internal static string SelfContainedMetadata;
    private static Guid WebProjectFlavorGuid;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectReferencesWithConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServicePackageRootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationManifestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <IncludeInPackagePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Launching>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverrideSelfContainedForLaunch>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ServiceProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DeployableServiceProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <PublishableServiceProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ContainerServiceProjectReferences>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] ProjectReferences { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProjectReferencesWithConfiguration { get; public set; }
    [RequiredAttribute]
public string ServicePackageRootFolder { get; public set; }
    [RequiredAttribute]
public string ApplicationManifestPath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] IncludeInPackagePaths { get; public set; }
    [RequiredAttribute]
public string PackageBehavior { get; public set; }
    [RequiredAttribute]
public string Configuration { get; public set; }
    public string Launching { get; public set; }
    public string OverrideSelfContainedForLaunch { get; public set; }
    [OutputAttribute]
public ITaskItem[] ServiceProjectReferences { get; public set; }
    [OutputAttribute]
public ITaskItem[] DeployableServiceProjectReferences { get; public set; }
    [OutputAttribute]
public ITaskItem[] PublishableServiceProjectReferences { get; public set; }
    [OutputAttribute]
public ITaskItem[] ContainerServiceProjectReferences { get; public set; }
    private static GetServiceProjectReferences();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ProjectReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectReferencesWithConfiguration();
    [CompilerGeneratedAttribute]
public void set_ProjectReferencesWithConfiguration(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ServicePackageRootFolder();
    [CompilerGeneratedAttribute]
public void set_ServicePackageRootFolder(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationManifestPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationManifestPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_IncludeInPackagePaths();
    [CompilerGeneratedAttribute]
public void set_IncludeInPackagePaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_PackageBehavior();
    [CompilerGeneratedAttribute]
public void set_PackageBehavior(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Launching();
    [CompilerGeneratedAttribute]
public void set_Launching(string value);
    [CompilerGeneratedAttribute]
public string get_OverrideSelfContainedForLaunch();
    [CompilerGeneratedAttribute]
public void set_OverrideSelfContainedForLaunch(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ServiceProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ServiceProjectReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DeployableServiceProjectReferences();
    [CompilerGeneratedAttribute]
public void set_DeployableServiceProjectReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PublishableServiceProjectReferences();
    [CompilerGeneratedAttribute]
public void set_PublishableServiceProjectReferences(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ContainerServiceProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ContainerServiceProjectReferences(ITaskItem[] value);
    public virtual bool Execute();
    private void CategorizeProjectReferences();
    private static bool IsConsoleProject(Project project);
    private static bool IsWebProject(Project project);
    private bool SetMetadataForProjectReferences(PackageBehaviorOptions packageBehavior);
    private bool ValidateReferencedServices();
    private bool IsSdkBasedProject(Project project);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.GetStartupServiceParametersFiles : GetParametersFilesBase {
    [CompilerGeneratedAttribute]
private ITaskItem[] <StartupServiceParametersFiles>k__BackingField;
    [OutputAttribute]
public ITaskItem[] StartupServiceParametersFiles { get; public set; }
    protected string ParametersElementName { get; }
    protected string ParametersFileDefaultNodeName { get; }
    protected string ParametersFileDoesNotExistErrorFormat { get; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_StartupServiceParametersFiles();
    [CompilerGeneratedAttribute]
public void set_StartupServiceParametersFiles(ITaskItem[] value);
    protected virtual string get_ParametersElementName();
    protected virtual string get_ParametersFileDefaultNodeName();
    protected virtual string get_ParametersFileDoesNotExistErrorFormat();
    protected virtual void SetParametersFilesOutput(ITaskItem[] parametersFiles);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.LoadedProject : object {
    private static AsyncLocal`1<Func`4<string, Task, string, ValueTuple`2<ProjectCollection, Project>>> factory;
    private ProjectCollection projectCollection;
    private bool disposedValue;
    [CompilerGeneratedAttribute]
private Project <Project>k__BackingField;
    internal static Func`4<string, Task, string, ValueTuple`2<ProjectCollection, Project>> Factory { get; internal set; }
    public Project Project { get; }
    private LoadedProject(ProjectCollection projectCollection, Project project);
    private static LoadedProject();
    internal static Func`4<string, Task, string, ValueTuple`2<ProjectCollection, Project>> get_Factory();
    [ObsoleteAttribute("For unit tests only")]
internal static void set_Factory(Func`4<string, Task, string, ValueTuple`2<ProjectCollection, Project>> value);
    [CompilerGeneratedAttribute]
public Project get_Project();
    public static LoadedProject LoadWithProperties(string projectPath, Task requestingTask, string commonBuildProperties);
    private static ValueTuple`2<ProjectCollection, Project> LoadProjectWithPropertiesCore(string projectPath, Task requestingTask, string commonBuildProperties);
    private static Dictionary`2<string, string> GetGlobalProperties(Task requestingTask, string commonBuildProperties);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal enum Microsoft.VisualStudio.Azure.Fabric.BuildTasks.LocalClusterMode : Enum {
    public int value__;
    public static LocalClusterMode Default;
    public static LocalClusterMode OneNode;
    public static LocalClusterMode FiveNode;
}
internal enum Microsoft.VisualStudio.Azure.Fabric.BuildTasks.PackageBehaviorOptions : Enum {
    public int value__;
    public static PackageBehaviorOptions All;
    public static PackageBehaviorOptions Minimal;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ApplicationParametersFileDoesNotExist { get; }
    internal static string IncludeInPackageIgnored { get; }
    internal static string IncompatibleVersionNumbers { get; }
    internal static string InvalidPackageBehaviorValue { get; }
    internal static string InvalidVersionNumber { get; }
    internal static string MSBuild165Required { get; }
    internal static string NoCodePackageFound { get; }
    internal static string RequiredFileDoesNotExist { get; }
    internal static string ServiceManifestNamesNotInApplication { get; }
    internal static string StartupServiceParametersFileDoesNotExist { get; }
    internal static string StartupServicesNotSupportedForCleanup { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ApplicationParametersFileDoesNotExist();
    internal static string get_IncludeInPackageIgnored();
    internal static string get_IncompatibleVersionNumbers();
    internal static string get_InvalidPackageBehaviorValue();
    internal static string get_InvalidVersionNumber();
    internal static string get_MSBuild165Required();
    internal static string get_NoCodePackageFound();
    internal static string get_RequiredFileDoesNotExist();
    internal static string get_ServiceManifestNamesNotInApplication();
    internal static string get_StartupServiceParametersFileDoesNotExist();
    internal static string get_StartupServicesNotSupportedForCleanup();
}
internal static class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ServiceFabricSdkProperties : object {
    private static string BaseRegistryKey;
    [CompilerGeneratedAttribute]
private static ServiceFabricSdkPropertiesCache <Cache>k__BackingField;
    private static ServiceFabricSdkPropertiesCache Cache { get; public set; }
    public static string InstallPath { get; }
    public static string LocalClusterManagerPath { get; }
    public static LocalClusterMode LocalClusterMode { get; }
    public static string ModulePath { get; }
    public static string PackagesPath { get; }
    public static string SchemasPath { get; }
    public static string ScriptsPath { get; }
    public static string ToolsPath { get; }
    public static string Version { get; }
    public static string CompatibilityBandVersion { get; }
    private static ServiceFabricSdkProperties();
    [CompilerGeneratedAttribute]
private static ServiceFabricSdkPropertiesCache get_Cache();
    [CompilerGeneratedAttribute]
public static void set_Cache(ServiceFabricSdkPropertiesCache value);
    public static string get_InstallPath();
    public static string get_LocalClusterManagerPath();
    public static LocalClusterMode get_LocalClusterMode();
    public static string get_ModulePath();
    public static string get_PackagesPath();
    public static string get_SchemasPath();
    public static string get_ScriptsPath();
    public static string get_ToolsPath();
    public static string get_Version();
    public static string get_CompatibilityBandVersion();
    private static object GetServiceFabricSdkRegistryValue(string regValue);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ServiceManifestImport : object {
    [CompilerGeneratedAttribute]
private ServiceManifestRef <ServiceManifestRef>k__BackingField;
    [XmlElementAttribute]
public ServiceManifestRef ServiceManifestRef { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceManifestRef get_ServiceManifestRef();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestRef(ServiceManifestRef value);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ServiceManifestRef : object {
    [CompilerGeneratedAttribute]
private string <ServiceManifestName>k__BackingField;
    [XmlAttributeAttribute]
public string ServiceManifestName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceManifestName();
    [CompilerGeneratedAttribute]
public void set_ServiceManifestName(string value);
}
[XmlRootAttribute("ServiceManifest")]
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ServiceManifestSlim : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CodePackage[] <CodePackage>k__BackingField;
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlElementAttribute]
public CodePackage[] CodePackage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public CodePackage[] get_CodePackage();
    [CompilerGeneratedAttribute]
public void set_CodePackage(CodePackage[] value);
}
internal static class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ServiceModelServiceSlim : object {
    public static string Fabric2011Namespace;
    public static ServiceManifestSlim DeserializeServiceManifest(Stream stream);
    public static ApplicationManifestSlim DeserializeApplicationManifest(Stream stream);
    public static CodePackage GetPrimaryCodePackage(ServiceManifestSlim serviceManifest);
    private static T Deserialize(Stream stream);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.ValidatePackageSettings : Task {
    [CompilerGeneratedAttribute]
private string <PackageBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeInPackage>k__BackingField;
    [RequiredAttribute]
public string PackageBehavior { get; public set; }
    public string IncludeInPackage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PackageBehavior();
    [CompilerGeneratedAttribute]
public void set_PackageBehavior(string value);
    [CompilerGeneratedAttribute]
public string get_IncludeInPackage();
    [CompilerGeneratedAttribute]
public void set_IncludeInPackage(string value);
    public virtual bool Execute();
    internal static bool TryParsePackageBehavior(string packageBehavior, Task validatingTask, PackageBehaviorOptions& parsedPackageBehavior);
}
public class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.VerifyVersionCompatibility : Task {
    [CompilerGeneratedAttribute]
private string <PackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectVersion>k__BackingField;
    [RequiredAttribute]
public string PackageVersion { get; public set; }
    [RequiredAttribute]
public string ProjectVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PackageVersion();
    [CompilerGeneratedAttribute]
public void set_PackageVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectVersion();
    [CompilerGeneratedAttribute]
public void set_ProjectVersion(string value);
    public virtual bool Execute();
}
internal static class Microsoft.VisualStudio.Azure.Fabric.BuildTasks.WellKnownFiles : object {
    private static string ServiceProjectPackageRoot;
    public static string ApplicationProjectPackageRoot;
    public static string ApplicationManifest;
    public static string ServiceManifest;
    public static string ServiceConfigSettingsFileName;
    public static string StartupServices;
    public static string DockerfileName;
    public static string DockerIgnoreFileName;
    private static WellKnownFiles();
    public static string GetProjectApplicationManifestPath(string applicationProjectFolderPath);
    public static string GetPackageApplicationManifestPath(string applicationPackagePath);
    public static string GetProjectServiceManifestPath(string serviceProjectFolderPath);
    public static string GetPackageServiceManifestPath(string servicePackagePath);
    public static string GetProjectStartupServicesPath(string applicationProjectFolderPath);
    public static string GetServicePackageRootPath(string serviceProjectFolderPath);
    public static string GetServiceConfigSettingsPath(string serviceProjectFolderPath);
    public static IEnumerable`1<string> GetKnownLocalPublishProfilePaths(string applicationProjectFolderPath);
    public static string GetLocalPublishProfilePathForCurrentCluster(string applicationProjectFolderPath);
    public static string GetLocalPublishProfilePath(string applicationProjectFolderPath, string clusterModeString);
    private static string GetLocalPublishProfilePath(string applicationProjectFolderPath, LocalClusterMode clusterMode);
}
