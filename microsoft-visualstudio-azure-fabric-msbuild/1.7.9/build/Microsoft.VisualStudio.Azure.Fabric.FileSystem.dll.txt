public class Microsoft.VisualStudio.Azure.Fabric.FileSystem : object {
    private static FileSystem _default;
    private static AsyncLocal`1<IFileSystem> _current;
    public static IFileSystem Current { get; public set; }
    private static FileSystem();
    public static IFileSystem get_Current();
    public static void set_Current(IFileSystem value);
    public sealed virtual DirectoryInfo DirectoryCreateDirectory(string path);
    public sealed virtual void DirectoryDelete(string path, bool recursive);
    public sealed virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path, string searchPattern);
    public sealed virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual String[] DirectoryGetDirectories(string path);
    public sealed virtual String[] DirectoryGetDirectories(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual string DirectoryGetDirectoryRoot(string path);
    public sealed virtual String[] DirectoryGetFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual DirectoryInfo DirectoryGetParent(string path);
    public sealed virtual bool FileExists(string path);
    public sealed virtual void FileCopy(string sourcePath, string destPath, bool overwrite);
    public sealed virtual Stream FileCreate(string path);
    public sealed virtual void FileDelete(string path);
    public sealed virtual DateTime FileGetLastWriteTime(string path);
    public sealed virtual long FileGetLength(string path);
    public sealed virtual void FileMove(string sourceFileName, string destFileName);
    public sealed virtual Stream FileOpen(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual Stream FileOpenRead(string path);
    public sealed virtual Byte[] FileReadAllBytes(string path);
    public sealed virtual string FileReadAllText(string path);
    public sealed virtual String[] FileReadAllLines(string path);
    public sealed virtual void FileSetAttributes(string path, FileAttributes attributes);
    public sealed virtual void FileWriteAllText(string path, string contents);
    public sealed virtual RoboCopyResult RoboCopy(string source, string destination, string options);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Azure.Fabric.FileSystemExtensions : object {
    [ExtensionAttribute]
public static void DirectoryCopy(IFileSystem fileSystem, string sourceDirectory, string destinationDirectory, bool overwrite);
    [ExtensionAttribute]
public static bool DirectoryCopyEx(IFileSystem fileSystem, string sourceDirectory, string destinationDirectory, bool overwrite, String[] excludedDirectories);
    [ExtensionAttribute]
public static string GetProductVersion(IFileSystem fileSystem, string filePath);
    [ExtensionAttribute]
public static void SafeDirectoryDelete(IFileSystem fileSystem, string directoryPath, bool recursive);
    [ExtensionAttribute]
public static void SafeFileDelete(IFileSystem fileSystem, string filePath);
    [ExtensionAttribute]
public static bool IsFileLocked(IFileSystem fileSystem, string filePath);
}
public interface Microsoft.VisualStudio.Azure.Fabric.IFileSystem {
    public abstract virtual DirectoryInfo DirectoryCreateDirectory(string path);
    public abstract virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> DirectoryEnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual void DirectoryDelete(string path, bool recursive);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual String[] DirectoryGetDirectories(string path);
    public abstract virtual String[] DirectoryGetDirectories(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual string DirectoryGetDirectoryRoot(string path);
    public abstract virtual String[] DirectoryGetFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual DirectoryInfo DirectoryGetParent(string path);
    public abstract virtual bool FileExists(string path);
    public abstract virtual void FileCopy(string sourcePath, string destPath, bool overwrite);
    public abstract virtual Stream FileCreate(string path);
    public abstract virtual void FileDelete(string path);
    public abstract virtual DateTime FileGetLastWriteTime(string path);
    public abstract virtual long FileGetLength(string path);
    public abstract virtual void FileMove(string sourceFileName, string destFileName);
    public abstract virtual Stream FileOpen(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual Stream FileOpenRead(string path);
    public abstract virtual Byte[] FileReadAllBytes(string path);
    public abstract virtual string FileReadAllText(string path);
    public abstract virtual String[] FileReadAllLines(string path);
    public abstract virtual void FileSetAttributes(string path, FileAttributes attributes);
    public abstract virtual void FileWriteAllText(string path, string contents);
    public abstract virtual RoboCopyResult RoboCopy(string source, string destination, string options);
}
public class Microsoft.VisualStudio.Azure.Fabric.RoboCopyResult : object {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public int ExitCode { get; }
    public bool Succeeded { get; }
    public RoboCopyResult(int exitCode);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    public bool get_Succeeded();
}
