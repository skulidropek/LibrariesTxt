[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.SDK.Analyzers.Namespaces : object {
    internal static IReadOnlyList`1<string> Microsoft;
    internal static IReadOnlyList`1<string> MicrosoftVisualStudioShell;
    internal static IReadOnlyList`1<string> MicrosoftVisualStudioShellInterop;
    internal static IReadOnlyList`1<string> MicrosoftVisualStudioOLEInterop;
    internal static IReadOnlyList`1<string> MicrosoftVisualStudioThreading;
    internal static IReadOnlyList`1<string> System;
    internal static IReadOnlyList`1<string> SystemThreading;
    internal static IReadOnlyList`1<string> SystemThreadingTasks;
    private static Namespaces();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.SDK.Analyzers.Types : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.SDK.Analyzers.Utils : object {
    internal static Action`1<SyntaxNodeAnalysisContext> DebuggableWrapper(Action`1<SyntaxNodeAnalysisContext> handler);
    internal static Action`1<OperationAnalysisContext> DebuggableWrapper(Action`1<OperationAnalysisContext> handler);
    internal static Action`1<SymbolAnalysisContext> DebuggableWrapper(Action`1<SymbolAnalysisContext> handler);
    internal static string GetHelpLink(string analyzerId);
    internal static bool IsTask(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
internal static bool BelongsToNamespace(ISymbol symbol, IReadOnlyList`1<string> namespaces);
    internal static bool IsEqualToOrDerivedFrom(ITypeSymbol type, ITypeSymbol baseType);
    internal static bool IsDerivedFrom(ITypeSymbol type, ITypeSymbol baseType);
    internal static NameSyntax QualifyName(IReadOnlyList`1<string> qualifiers, SimpleNameSyntax simpleName);
    internal static T FindAncestor(SyntaxNode syntaxNode, Func`2<SyntaxNode, bool> continueAscending, Func`3<T, SyntaxNode, bool> isMatch);
    internal static SyntaxNode FindFirstAncestorOfTypes(SyntaxNode syntaxNode, Type[] allowedTypes);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.SDK.Analyzers.Utils/<AddUsingTaskEqualsDirectiveAsync>d__11")]
internal static Task`1<SyntaxNode> AddUsingTaskEqualsDirectiveAsync(SyntaxNode syntaxNode, CancellationToken cancellationToken);
    private static bool LaunchDebuggerExceptionFilter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.SDK.Analyzers.VSSDK001DeriveFromAsyncPackageAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<DiagnosticDescriptor> ReusableSupportedDiagnostics;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSSDK001DeriveFromAsyncPackageAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeClassDeclaration(SyntaxNodeAnalysisContext context, INamedTypeSymbol packageType);
    [CompilerGeneratedAttribute]
private void <Initialize>b__5_0(CompilationStartAnalysisContext compilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.SDK.Analyzers.VSSDK002PackageRegistrationMatchesBaseTypeAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static string BaseTypeDiagnosticPropertyName;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<DiagnosticDescriptor> ReusableSupportedDiagnostics;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSSDK002PackageRegistrationMatchesBaseTypeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeClassDeclaration(SyntaxNodeAnalysisContext context, INamedTypeSymbol packageType, INamedTypeSymbol asyncPackageType);
    [CompilerGeneratedAttribute]
private void <Initialize>b__6_0(CompilationStartAnalysisContext compilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.SDK.Analyzers.VSSDK003SupportAsyncToolWindowAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<DiagnosticDescriptor> ReusableSupportedDiagnostics;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSSDK003SupportAsyncToolWindowAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeClassDeclaration(SyntaxNodeAnalysisContext context, INamedTypeSymbol asyncPackageType, INamedTypeSymbol provideToolWindowAttributeType);
    private bool IsGetAsyncToolWindowFactoryOverridden(ITypeSymbol packageTypeSymbol, INamedTypeSymbol asyncPackageType);
    [CompilerGeneratedAttribute]
private void <Initialize>b__5_0(CompilationStartAnalysisContext compilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.SDK.Analyzers.VSSDK004ProvideAutoLoadAttributeAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSSDK004ProvideAutoLoadAttributeAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeClassDeclaration(SyntaxNodeAnalysisContext context, INamedTypeSymbol autoLoadAttributeType, INamedTypeSymbol packageAutoLoadFlagsType, INamedTypeSymbol packageType, INamedTypeSymbol asyncPackageType);
    [CompilerGeneratedAttribute]
private void <Initialize>b__4_0(CompilationStartAnalysisContext compilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.SDK.Analyzers.VSSDK005UseJoinableTaskContextSingletonAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSSDK005UseJoinableTaskContextSingletonAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeObjectCreation(SyntaxNodeAnalysisContext ctxt, INamedTypeSymbol joinableTaskContext);
    [CompilerGeneratedAttribute]
private void <Initialize>b__4_0(CompilationStartAnalysisContext compilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.SDK.Analyzers.VSSDK006CheckServicesExistAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSSDK006CheckServicesExistAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static ImmutableArray`1<ISymbol> Flatten(Nullable`1[] symbols);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.SDK.Analyzers.VSSDK007ThreadHelperJTFRunAsync : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<DiagnosticDescriptor> ReusableSupportedDiagnostics;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSSDK007ThreadHelperJTFRunAsync();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeInvocationExpression(SyntaxNodeAnalysisContext context);
    private static bool IsAwaited(InvocationExpressionSyntax invocationExpr);
    private static bool IsSynchronouslyJoined(SyntaxNodeAnalysisContext context, InvocationExpressionSyntax invocationExpr);
    private static bool IsJoinableTaskAssigned(InvocationExpressionSyntax invocationExpr, SyntaxNode& assignedToNode, Nullable`1& assignedToToken);
    [NullableContextAttribute("2")]
private static SyntaxNode GetEnclosingBlock(SyntaxNode node);
    private static bool IsVariableAwaitedOrJoined(SyntaxNodeAnalysisContext context, string variableName, SyntaxNode enclosingBlock);
    private static bool VariableAwaitsJoinAsyncMethod(string variableName, AwaitExpressionSyntax awaitExpr);
    private static bool VariablePassedAsArgumentToInvokedMethod(string variableName, InvocationExpressionSyntax invocationExpr, IdentifierNameSyntax& methodName, Nullable`1& argumentIndex);
    private static SyntaxNode GetMethodDeclarationNode(IMethodSymbol methodSymbol);
    private static SyntaxNode GetMethodDeclarationBlockNode(IMethodSymbol methodSymbol);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
