public enum Microsoft.VisualStudio.Jdt.ErrorLocation : Enum {
    public int value__;
    public static ErrorLocation None;
    public static ErrorLocation Source;
    public static ErrorLocation Transform;
}
public interface Microsoft.VisualStudio.Jdt.IJsonTransformationLogger {
    public abstract virtual void LogMessage(string message);
    public abstract virtual void LogMessage(string message, string fileName, int lineNumber, int linePosition);
    public abstract virtual void LogWarning(string message);
    public abstract virtual void LogWarning(string message, string fileName);
    public abstract virtual void LogWarning(string message, string fileName, int lineNumber, int linePosition);
    public abstract virtual void LogError(string message);
    public abstract virtual void LogError(string message, string fileName, int lineNumber, int linePosition);
    public abstract virtual void LogErrorFromException(Exception ex);
    public abstract virtual void LogErrorFromException(Exception ex, string fileName, int lineNumber, int linePosition);
}
internal abstract class Microsoft.VisualStudio.Jdt.JdtArrayProcessor : JdtProcessor {
    internal virtual void Process(JObject source, JObject transform, JsonTransformationContextLogger logger);
    protected abstract virtual bool ProcessCore(JObject source, JToken transformValue, JsonTransformationContextLogger logger);
    private bool Transform(JObject source, JToken transformValue, JsonTransformationContextLogger logger);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Jdt.JdtAttributeExtensions : object {
    [ExtensionAttribute]
internal static string FullName(JdtAttributes attribute);
    [ExtensionAttribute]
internal static JdtAttributes GetByName(IEnumerable`1<JdtAttributes> collection, string name);
}
internal enum Microsoft.VisualStudio.Jdt.JdtAttributes : Enum {
    public int value__;
    public static JdtAttributes None;
    public static JdtAttributes Path;
    public static JdtAttributes Value;
}
internal class Microsoft.VisualStudio.Jdt.JdtAttributeValidator : object {
    private IReadOnlyCollection`1<JdtAttributes> validAttributes;
    internal JdtAttributeValidator(JdtAttributes[] validAttributes);
    internal Dictionary`2<JdtAttributes, JToken> ValidateAndReturnAttributes(JObject transformObject);
}
internal class Microsoft.VisualStudio.Jdt.JdtDefault : JdtProcessor {
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public string Verb { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Verb();
    internal virtual void Process(JObject source, JObject transform, JsonTransformationContextLogger logger);
}
public class Microsoft.VisualStudio.Jdt.JdtException : Exception {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorLocation <Location>k__BackingField;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ErrorLocation Location { get; }
    public JdtException(string message);
    public JdtException(string message, ErrorLocation location);
    public JdtException(string message, ErrorLocation location, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public ErrorLocation get_Location();
    internal static JdtException FromLineInfo(string message, ErrorLocation location, IJsonLineInfo lineInfo);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Jdt.JdtExtensions : object {
    [ExtensionAttribute]
internal static IEnumerable`1<JProperty> GetJdtProperties(JObject objectToSearch);
    [ExtensionAttribute]
internal static bool IsCriticalException(Exception ex);
    [ExtensionAttribute]
internal static JObject CloneWithLineInfo(JObject objectToClone);
}
internal class Microsoft.VisualStudio.Jdt.JdtMerge : JdtArrayProcessor {
    private JdtAttributeValidator attributeValidator;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public string Verb { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Verb();
    protected virtual bool ProcessCore(JObject source, JToken transformValue, JsonTransformationContextLogger logger);
    private void MergeWithObject(JObject source, JObject mergeObject, JsonTransformationContextLogger logger);
}
internal abstract class Microsoft.VisualStudio.Jdt.JdtProcessor : object {
    private static JdtProcessorChain ProcessorChain;
    private JdtProcessor successor;
    public string Verb { get; }
    protected string FullVerb { get; }
    protected JdtProcessor Successor { get; private set; }
    private static JdtProcessor();
    public abstract virtual string get_Verb();
    protected string get_FullVerb();
    protected JdtProcessor get_Successor();
    private void set_Successor(JdtProcessor value);
    internal static void ProcessTransform(JObject source, JObject transform, JsonTransformationContextLogger logger);
    internal abstract virtual void Process(JObject source, JObject transform, JsonTransformationContextLogger logger);
}
internal class Microsoft.VisualStudio.Jdt.JdtRecurse : JdtProcessor {
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public string Verb { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Verb();
    internal virtual void Process(JObject source, JObject transform, JsonTransformationContextLogger logger);
}
internal class Microsoft.VisualStudio.Jdt.JdtRemove : JdtArrayProcessor {
    private JdtAttributeValidator attributeValidator;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public string Verb { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Verb();
    protected virtual bool ProcessCore(JObject source, JToken transformValue, JsonTransformationContextLogger logger);
    private bool RemoveWithAttributes(JObject source, JObject removeObject, JsonTransformationContextLogger logger);
    private bool RemoveThisNode(JObject nodeToRemove, JsonTransformationContextLogger logger);
}
internal class Microsoft.VisualStudio.Jdt.JdtRename : JdtArrayProcessor {
    private JdtAttributeValidator attributeValidator;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public string Verb { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Verb();
    protected virtual bool ProcessCore(JObject source, JToken transformValue, JsonTransformationContextLogger logger);
    private bool RenameNode(JToken nodeToRename, string newName);
}
internal class Microsoft.VisualStudio.Jdt.JdtReplace : JdtArrayProcessor {
    private JdtAttributeValidator attributeValidator;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public string Verb { get; }
    [CompilerGeneratedAttribute]
public virtual string get_Verb();
    protected virtual bool ProcessCore(JObject source, JToken transformValue, JsonTransformationContextLogger logger);
    private bool ReplaceWithProperties(JObject source, JObject replaceObject, JsonTransformationContextLogger logger);
}
public static class Microsoft.VisualStudio.Jdt.JdtUtilities : object {
    internal static string JdtSyntaxPrefix;
    private static Nullable`1<LineInfoHandling> lineInfoHandling;
    public static bool IsJdtSyntax(string key);
    public static string GetJdtSyntax(string key);
    internal static LineInfoHandling GetLineInfoHandling();
}
internal class Microsoft.VisualStudio.Jdt.JdtValidator : JdtProcessor {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ValidVerbs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    public HashSet`1<string> ValidVerbs { get; }
    public string Verb { get; }
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ValidVerbs();
    [CompilerGeneratedAttribute]
public virtual string get_Verb();
    internal virtual void Process(JObject source, JObject transform, JsonTransformationContextLogger logger);
}
public class Microsoft.VisualStudio.Jdt.JsonTransformation : object {
    private JsonTransformationContextLogger logger;
    private JObject transformObject;
    private JsonLoadSettings loadSettings;
    public JsonTransformation(string transformFile);
    public JsonTransformation(string transformFile, IJsonTransformationLogger logger);
    public JsonTransformation(Stream transform);
    public JsonTransformation(Stream transform, IJsonTransformationLogger logger);
    public Stream Apply(string sourceFile);
    public Stream Apply(Stream source);
    private Stream ApplyWithSourceName(Stream source, string sourceName);
    private void SetTransform(Stream transformStream);
}
internal class Microsoft.VisualStudio.Jdt.JsonTransformationContextLogger : object {
    private IJsonTransformationLogger externalLogger;
    private string sourceFile;
    [CompilerGeneratedAttribute]
private string <TransformFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasLoggedErrors>k__BackingField;
    internal string SourceFile { get; internal set; }
    internal string TransformFile { get; }
    internal bool HasLoggedErrors { get; private set; }
    internal JsonTransformationContextLogger(IJsonTransformationLogger extLogger);
    internal JsonTransformationContextLogger(string transformationFile, IJsonTransformationLogger extLogger);
    internal string get_SourceFile();
    internal void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
internal string get_TransformFile();
    [CompilerGeneratedAttribute]
internal bool get_HasLoggedErrors();
    [CompilerGeneratedAttribute]
private void set_HasLoggedErrors(bool value);
    internal void LogErrorFromException(Exception exception);
    internal void LogWarning(string message, ErrorLocation location, IJsonLineInfo lineInfo);
    private string LocationPath(ErrorLocation location);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.Jdt.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DefaultSourceFileName { get; }
    internal static string DefaultTransformFileName { get; }
    internal static string ErrorMessage_InvalidAttribute { get; }
    internal static string ErrorMessage_InvalidAttributes { get; }
    internal static string ErrorMessage_InvalidRemoveValue { get; }
    internal static string ErrorMessage_InvalidRenameValue { get; }
    internal static string ErrorMessage_InvalidVerb { get; }
    internal static string ErrorMessage_MergeAttributes { get; }
    internal static string ErrorMessage_PathContents { get; }
    internal static string ErrorMessage_RemoveAttributes { get; }
    internal static string ErrorMessage_RemoveRoot { get; }
    internal static string ErrorMessage_RenameAttributes { get; }
    internal static string ErrorMessage_RenameNode { get; }
    internal static string ErrorMessage_ReplaceAttributes { get; }
    internal static string ErrorMessage_ReplaceRoot { get; }
    internal static string ErrorMessage_ValueContents { get; }
    internal static string WarningMessage_NodeNotFound { get; }
    internal static string WarningMessage_NoResults { get; }
    internal static string WarningMessage_UnableToRemove { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DefaultSourceFileName();
    internal static string get_DefaultTransformFileName();
    internal static string get_ErrorMessage_InvalidAttribute();
    internal static string get_ErrorMessage_InvalidAttributes();
    internal static string get_ErrorMessage_InvalidRemoveValue();
    internal static string get_ErrorMessage_InvalidRenameValue();
    internal static string get_ErrorMessage_InvalidVerb();
    internal static string get_ErrorMessage_MergeAttributes();
    internal static string get_ErrorMessage_PathContents();
    internal static string get_ErrorMessage_RemoveAttributes();
    internal static string get_ErrorMessage_RemoveRoot();
    internal static string get_ErrorMessage_RenameAttributes();
    internal static string get_ErrorMessage_RenameNode();
    internal static string get_ErrorMessage_ReplaceAttributes();
    internal static string get_ErrorMessage_ReplaceRoot();
    internal static string get_ErrorMessage_ValueContents();
    internal static string get_WarningMessage_NodeNotFound();
    internal static string get_WarningMessage_NoResults();
    internal static string get_WarningMessage_UnableToRemove();
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string RootNamespace;
}
