public class Microsoft.VisualStudio.SlowCheetah.Exceptions.TransformFailedException : Exception {
    public TransformFailedException(string message);
    public TransformFailedException(string message, Exception inner);
    protected TransformFailedException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.VisualStudio.SlowCheetah.ITransformationLogger {
    public abstract virtual void LogError(string message, Object[] messageArgs);
    public abstract virtual void LogError(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public abstract virtual void LogErrorFromException(Exception ex);
    public abstract virtual void LogErrorFromException(Exception ex, string file, int lineNumber, int linePosition);
    public abstract virtual void LogMessage(LogMessageImportance importance, string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
}
public interface Microsoft.VisualStudio.SlowCheetah.ITransformer {
    public abstract virtual ITransformer WithLogger(ITransformationLogger logger);
    public abstract virtual bool Transform(string sourcePath, string transformPath, string destinationPath);
    public abstract virtual bool IsFileSupported(string filePath);
    public abstract virtual void CreateTransformFile(string sourcePath, string transformPath, bool overwrite);
}
public class Microsoft.VisualStudio.SlowCheetah.JsonShimLogger : object {
    private ITransformationLogger logger;
    public JsonShimLogger(ITransformationLogger logger);
    public sealed virtual void LogError(string message);
    public sealed virtual void LogError(string message, string fileName, int lineNumber, int linePosition);
    public sealed virtual void LogErrorFromException(Exception ex);
    public sealed virtual void LogErrorFromException(Exception ex, string fileName, int lineNumber, int linePosition);
    public sealed virtual void LogMessage(string message);
    public sealed virtual void LogMessage(string message, string fileName, int lineNumber, int linePosition);
    public sealed virtual void LogWarning(string message);
    public sealed virtual void LogWarning(string message, string fileName);
    public sealed virtual void LogWarning(string message, string fileName, int lineNumber, int linePosition);
}
public class Microsoft.VisualStudio.SlowCheetah.JsonTransformer : object {
    private static string TransformFileContents;
    private IJsonTransformationLogger logger;
    public JsonTransformer(ITransformationLogger logger);
    private static JsonTransformer();
    public sealed virtual void CreateTransformFile(string sourcePath, string transformPath, bool overwrite);
    public sealed virtual bool IsFileSupported(string filePath);
    public sealed virtual bool Transform(string sourcePath, string transformPath, string destinationPath);
    public sealed virtual ITransformer WithLogger(ITransformationLogger logger);
    private bool TrySaveToFile(Stream result, string sourceFile, string destinationFile);
}
public enum Microsoft.VisualStudio.SlowCheetah.LogMessageImportance : Enum {
    public int value__;
    public static LogMessageImportance High;
    public static LogMessageImportance Normal;
    public static LogMessageImportance Low;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualStudio.SlowCheetah.Resources.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorMessage_FileNotFound { get; }
    internal static string ErrorMessage_SourceFileNotFound { get; }
    internal static string ErrorMessage_TransformFileNotFound { get; }
    internal static string ErrorMessage_UnsupportedFile { get; }
    internal static string JsonTransform_TransformFileContents { get; }
    internal static string XmlTransform_ContentInfo { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorMessage_FileNotFound();
    internal static string get_ErrorMessage_SourceFileNotFound();
    internal static string get_ErrorMessage_TransformFileNotFound();
    internal static string get_ErrorMessage_UnsupportedFile();
    internal static string get_JsonTransform_TransformFileContents();
    internal static string get_XmlTransform_ContentInfo();
}
public class Microsoft.VisualStudio.SlowCheetah.TransformationTaskLogger : object {
    private TaskLoggingHelper loggingHelper;
    public TransformationTaskLogger(TaskLoggingHelper logger);
    public sealed virtual void LogError(string message, Object[] messageArgs);
    public sealed virtual void LogError(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public sealed virtual void LogErrorFromException(Exception ex);
    public sealed virtual void LogErrorFromException(Exception ex, string file, int lineNumber, int linePosition);
    public sealed virtual void LogMessage(LogMessageImportance type, string message, Object[] messageArgs);
    public sealed virtual void LogWarning(string message, Object[] messageArgs);
    public sealed virtual void LogWarning(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
}
public static class Microsoft.VisualStudio.SlowCheetah.TransformerFactory : object {
    private static List`1<ITransformer> TransformerCatalog;
    private static TransformerFactory();
    public static ITransformer GetTransformer(string source, ITransformationLogger logger);
    public static bool IsSupportedFile(string filePath);
}
public class Microsoft.VisualStudio.SlowCheetah.TransformTask : Task {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [RequiredAttribute]
public string Source { get; public set; }
    [RequiredAttribute]
public string Transform { get; public set; }
    [RequiredAttribute]
public string Destination { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Transform();
    [CompilerGeneratedAttribute]
public void set_Transform(string value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
public void set_Destination(string value);
    public virtual bool Execute();
}
public static class Microsoft.VisualStudio.SlowCheetah.TransformUtilities : object {
    public static Encoding GetEncoding(string filename);
    public static Encoding GetEncoding(Stream stream);
}
public class Microsoft.VisualStudio.SlowCheetah.XmlShimLogger : object {
    private static string IndentStringPiece;
    private bool useSections;
    private ITransformationLogger logger;
    private int indentLevel;
    private string IndentString { get; }
    public XmlShimLogger(ITransformationLogger logger, bool useSections);
    private static XmlShimLogger();
    private string get_IndentString();
    public sealed virtual void LogError(string message, Object[] messageArgs);
    public sealed virtual void LogError(string file, string message, Object[] messageArgs);
    public sealed virtual void LogError(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public sealed virtual void LogErrorFromException(Exception ex);
    public sealed virtual void LogErrorFromException(Exception ex, string file);
    public sealed virtual void LogErrorFromException(Exception ex, string file, int lineNumber, int linePosition);
    public sealed virtual void LogMessage(string message, Object[] messageArgs);
    public sealed virtual void LogMessage(MessageType type, string message, Object[] messageArgs);
    public sealed virtual void LogWarning(string message, Object[] messageArgs);
    public sealed virtual void LogWarning(string file, string message, Object[] messageArgs);
    public sealed virtual void LogWarning(string file, int lineNumber, int linePosition, string message, Object[] messageArgs);
    public sealed virtual void StartSection(string message, Object[] messageArgs);
    public sealed virtual void StartSection(MessageType type, string message, Object[] messageArgs);
    public sealed virtual void EndSection(string message, Object[] messageArgs);
    public sealed virtual void EndSection(MessageType type, string message, Object[] messageArgs);
}
public class Microsoft.VisualStudio.SlowCheetah.XmlTransformer : object {
    private static string XdtAttributeName;
    private static string XdtAttributeValue;
    private IXmlTransformationLogger logger;
    public XmlTransformer(ITransformationLogger logger);
    public sealed virtual void CreateTransformFile(string sourcePath, string transformPath, bool overwrite);
    public sealed virtual bool IsFileSupported(string filePath);
    public sealed virtual bool Transform(string sourcePath, string transformPath, string destinationPath);
    public sealed virtual ITransformer WithLogger(ITransformationLogger logger);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.132.22204")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
