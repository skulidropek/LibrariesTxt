[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Audio.AudioDefinition : object {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public int Priority { get; }
    public string Identifier { get; }
    public AudioDefinition(string identifier, int priority);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public string get_Identifier();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Audio.IAudioPlayer {
    public abstract virtual void PlaySound(AudioDefinition definition);
}
public abstract class Microsoft.VisualStudio.Commanding.CommandArgs : object {
}
public class Microsoft.VisualStudio.Commanding.CommandExecutionContext : object {
    [CompilerGeneratedAttribute]
private IUIThreadOperationContext <OperationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyCollection <Properties>k__BackingField;
    public IUIThreadOperationContext OperationContext { get; }
    public PropertyCollection Properties { get; }
    public CommandExecutionContext(IUIThreadOperationContext operationContext);
    [CompilerGeneratedAttribute]
public IUIThreadOperationContext get_OperationContext();
    [CompilerGeneratedAttribute]
public sealed virtual PropertyCollection get_Properties();
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Commanding.CommandHandlerExtensions : object {
    [ExtensionAttribute]
public static CommandState GetCommandState(ICommandHandler commandHandler, T args, Func`1<CommandState> nextCommandHandler);
    [ExtensionAttribute]
public static void ExecuteCommand(ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext);
}
internal class Microsoft.VisualStudio.Commanding.CommandingConstants : object {
    internal static string AdditionalCommandExecutionContext;
    internal static string CommandExecutionCancellationFlag;
}
public class Microsoft.VisualStudio.Commanding.CommandState : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsUnspecified>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsChecked>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayText>k__BackingField;
    [CompilerGeneratedAttribute]
private static CommandState <Available>k__BackingField;
    [CompilerGeneratedAttribute]
private static CommandState <Unavailable>k__BackingField;
    [CompilerGeneratedAttribute]
private static CommandState <Unspecified>k__BackingField;
    public bool IsUnspecified { get; }
    public bool IsAvailable { get; }
    public bool IsEnabled { get; }
    public bool IsVisible { get; }
    public bool IsChecked { get; }
    public string DisplayText { get; }
    public static CommandState Available { get; }
    public static CommandState Unavailable { get; }
    public static CommandState Unspecified { get; }
    public CommandState(bool isAvailable, bool isChecked, string displayText, bool isUnspecified);
    public CommandState(bool isAvailable, bool isChecked, bool isEnabled, bool isVisible, string displayText);
    public CommandState(bool isAvailable, bool isUnspecified, bool isChecked, bool isEnabled, bool isVisible, string displayText);
    private static CommandState();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsUnspecified();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsAvailable();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsVisible();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsChecked();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_DisplayText();
    private static void Validate(bool isAvailable, bool isChecked, bool isUnspecified, bool isEnabled, bool isVisible, string displayText);
    [CompilerGeneratedAttribute]
public static CommandState get_Available();
    [CompilerGeneratedAttribute]
public static CommandState get_Unavailable();
    [CompilerGeneratedAttribute]
public static CommandState get_Unspecified();
}
public interface Microsoft.VisualStudio.Commanding.IChainedCommandHandler`1 {
    public abstract virtual CommandState GetCommandState(T args, Func`1<CommandState> nextCommandHandler);
    public abstract virtual void ExecuteCommand(T args, Action nextCommandHandler, CommandExecutionContext executionContext);
}
public interface Microsoft.VisualStudio.Commanding.ICommandHandler {
}
public interface Microsoft.VisualStudio.Commanding.ICommandHandler`1 {
    public abstract virtual CommandState GetCommandState(T args);
    public abstract virtual bool ExecuteCommand(T args, CommandExecutionContext executionContext);
}
internal interface Microsoft.VisualStudio.Commanding.IDynamicCommandHandler`1 {
    public abstract virtual bool CanExecuteCommand(T args);
}
public abstract class Microsoft.VisualStudio.Text.AbstractSelectionPresentationProperties : object {
    [CompilerGeneratedAttribute]
private double <PreferredXCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PreferredYCoordinate>k__BackingField;
    [CompilerGeneratedAttribute]
private TextBounds <CaretBounds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWithinViewport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOverwriteMode>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextViewLine <ContainingTextViewLine>k__BackingField;
    public double PreferredXCoordinate { get; protected set; }
    public double PreferredYCoordinate { get; protected set; }
    public TextBounds CaretBounds { get; }
    public bool IsWithinViewport { get; }
    public bool IsOverwriteMode { get; }
    public ITextViewLine ContainingTextViewLine { get; }
    [CompilerGeneratedAttribute]
public virtual double get_PreferredXCoordinate();
    [CompilerGeneratedAttribute]
protected virtual void set_PreferredXCoordinate(double value);
    [CompilerGeneratedAttribute]
public virtual double get_PreferredYCoordinate();
    [CompilerGeneratedAttribute]
protected virtual void set_PreferredYCoordinate(double value);
    [CompilerGeneratedAttribute]
public virtual TextBounds get_CaretBounds();
    [CompilerGeneratedAttribute]
public virtual bool get_IsWithinViewport();
    [CompilerGeneratedAttribute]
public virtual bool get_IsOverwriteMode();
    [CompilerGeneratedAttribute]
public virtual ITextViewLine get_ContainingTextViewLine();
    public abstract virtual bool TryGetContainingTextViewLine(ITextViewLine& line);
}
public class Microsoft.VisualStudio.Text.Adornments.ClassifiedTextElement : object {
    public static string TextClassificationTypeName;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ClassifiedTextRun> <Runs>k__BackingField;
    public IEnumerable`1<ClassifiedTextRun> Runs { get; }
    public ClassifiedTextElement(ClassifiedTextRun[] runs);
    public ClassifiedTextElement(IEnumerable`1<ClassifiedTextRun> runs);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClassifiedTextRun> get_Runs();
    public static ClassifiedTextElement CreateHyperlink(string text, string tooltip, Action navigationAction);
    public static ClassifiedTextElement CreatePlainText(string text);
}
public class Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRun : object {
    [CompilerGeneratedAttribute]
private string <ClassificationTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MarkerTagType>k__BackingField;
    [CompilerGeneratedAttribute]
private ClassifiedTextRunStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tooltip>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <NavigationAction>k__BackingField;
    public string ClassificationTypeName { get; }
    public string Text { get; }
    public string MarkerTagType { get; }
    public ClassifiedTextRunStyle Style { get; }
    public string Tooltip { get; }
    public Action NavigationAction { get; }
    public ClassifiedTextRun(string classificationTypeName, string text);
    public ClassifiedTextRun(string classificationTypeName, string text, ClassifiedTextRunStyle style);
    public ClassifiedTextRun(string classificationTypeName, string text, ClassifiedTextRunStyle style, string markerTagType);
    public ClassifiedTextRun(string classificationTypeName, string text, Action navigationAction, string tooltip, ClassifiedTextRunStyle style);
    [CompilerGeneratedAttribute]
public string get_ClassificationTypeName();
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public string get_MarkerTagType();
    [CompilerGeneratedAttribute]
public ClassifiedTextRunStyle get_Style();
    [CompilerGeneratedAttribute]
public string get_Tooltip();
    [CompilerGeneratedAttribute]
public Action get_NavigationAction();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Adornments.ClassifiedTextRunStyle : Enum {
    public int value__;
    public static ClassifiedTextRunStyle Plain;
    public static ClassifiedTextRunStyle Bold;
    public static ClassifiedTextRunStyle Italic;
    public static ClassifiedTextRunStyle Underline;
    public static ClassifiedTextRunStyle UseClassificationFont;
    public static ClassifiedTextRunStyle UseClassificationStyle;
}
public class Microsoft.VisualStudio.Text.Adornments.ContainerElement : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Elements>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerElementStyle <Style>k__BackingField;
    public IEnumerable`1<object> Elements { get; }
    public ContainerElementStyle Style { get; }
    public ContainerElement(ContainerElementStyle style, IEnumerable`1<object> elements);
    public ContainerElement(ContainerElementStyle style, Object[] elements);
    [CompilerGeneratedAttribute]
public IEnumerable`1<object> get_Elements();
    [CompilerGeneratedAttribute]
public ContainerElementStyle get_Style();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Adornments.ContainerElementStyle : Enum {
    public int value__;
    public static ContainerElementStyle Wrapped;
    public static ContainerElementStyle Stacked;
    public static ContainerElementStyle VerticalPadding;
}
public class Microsoft.VisualStudio.Text.Adornments.ErrorTypeDefinition : object {
}
public interface Microsoft.VisualStudio.Text.Adornments.IErrorProviderFactory {
    public abstract virtual SimpleTagger`1<ErrorTag> GetErrorTagger(ITextBuffer textBuffer);
}
public class Microsoft.VisualStudio.Text.Adornments.ImageElement : object {
    public static ImageElement Empty;
    [CompilerGeneratedAttribute]
private ImageId <ImageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutomationName>k__BackingField;
    public ImageId ImageId { get; }
    public string AutomationName { get; }
    public ImageElement(ImageId imageId);
    public ImageElement(ImageId imageId, string automationName);
    private static ImageElement();
    [CompilerGeneratedAttribute]
public ImageId get_ImageId();
    [CompilerGeneratedAttribute]
public string get_AutomationName();
}
public interface Microsoft.VisualStudio.Text.Adornments.IStructureContextSource {
    public abstract virtual Task`1<object> GetStructureContextAsync(IEnumerable`1<IStructureElement> elements, CancellationToken token);
}
public interface Microsoft.VisualStudio.Text.Adornments.IStructureContextSourceProvider {
    public abstract virtual IStructureContextSource CreateStructureContextSource(ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Adornments.ITextMarkerProviderFactory {
    public abstract virtual SimpleTagger`1<TextMarkerTag> GetTextMarkerTagger(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Adornments.IToolTipPresenter {
    [CompilerGeneratedAttribute]
public abstract virtual void add_Dismissed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Dismissed(EventHandler value);
    public abstract virtual void StartOrUpdate(ITrackingSpan applicableToSpan, IEnumerable`1<object> content);
    public abstract virtual void Dismiss();
}
public interface Microsoft.VisualStudio.Text.Adornments.IToolTipPresenterFactory {
    public abstract virtual IToolTipPresenter Create(ITextView textView, ToolTipParameters parameters);
}
public interface Microsoft.VisualStudio.Text.Adornments.IToolTipService {
    public abstract virtual IToolTipPresenter CreatePresenter(ITextView textView, ToolTipParameters parameters);
}
public interface Microsoft.VisualStudio.Text.Adornments.IViewElementFactory {
    public abstract virtual TView CreateViewElement(ITextView textView, object model);
}
public interface Microsoft.VisualStudio.Text.Adornments.IViewElementFactoryService {
    public abstract virtual TView CreateViewElement(ITextView textView, object model);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Adornments.PopupStyles : Enum {
    public int value__;
    public static PopupStyles None;
    public static PopupStyles DismissOnMouseLeaveText;
    public static PopupStyles DismissOnMouseLeaveTextOrContent;
    public static PopupStyles PositionLeftOrRight;
    public static PopupStyles PreferLeftOrTopPosition;
    public static PopupStyles RightOrBottomJustify;
    public static PopupStyles PositionClosest;
}
public static class Microsoft.VisualStudio.Text.Adornments.PredefinedErrorTypeNames : object {
    public static string SyntaxError;
    public static string CompilerError;
    public static string OtherError;
    public static string Warning;
    public static string Information;
    public static string Suggestion;
    public static string HintedSuggestion;
}
public static class Microsoft.VisualStudio.Text.Adornments.PredefinedStructureTagTypes : object {
    public static string Structural;
    public static string Nonstructural;
    public static string Comment;
    public static string PreprocessorRegion;
    public static string Imports;
    public static string Namespace;
    public static string Type;
    public static string Member;
    public static string Statement;
    public static string Conditional;
    public static string Loop;
    public static string Expression;
}
public class Microsoft.VisualStudio.Text.Adornments.ThematicBreakElement : object {
}
public class Microsoft.VisualStudio.Text.Adornments.ToolTipParameters : object {
    private Func`1<bool> keepOpenFunc;
    public static ToolTipParameters Default;
    [CompilerGeneratedAttribute]
private bool <TrackMouse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreBufferChange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCaretPositionChange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DismissWhenOffScreen>k__BackingField;
    public bool TrackMouse { get; }
    public bool IgnoreBufferChange { get; }
    public bool IgnoreCaretPositionChange { get; }
    public bool DismissWhenOffScreen { get; }
    public bool KeepOpen { get; }
    public ToolTipParameters(bool trackMouse, bool ignoreBufferChange, Func`1<bool> keepOpenFunc, bool ignoreCaretPositionChange, bool dismissWhenOffscreen);
    public ToolTipParameters(bool trackMouse, bool ignoreBufferChange, Func`1<bool> keepOpenFunc);
    private static ToolTipParameters();
    [CompilerGeneratedAttribute]
public bool get_TrackMouse();
    [CompilerGeneratedAttribute]
public bool get_IgnoreBufferChange();
    [CompilerGeneratedAttribute]
public bool get_IgnoreCaretPositionChange();
    [CompilerGeneratedAttribute]
public bool get_DismissWhenOffScreen();
    public bool get_KeepOpen();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Text.BraceCompletion.BracePair : object {
    [CompilerGeneratedAttribute]
private string <OpeningBrace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClosingBrace>k__BackingField;
    internal string OpeningBrace { get; }
    internal string ClosingBrace { get; }
    internal BracePair(string openingBrace, string closingBrace);
    [CompilerGeneratedAttribute]
internal string get_OpeningBrace();
    [CompilerGeneratedAttribute]
internal string get_ClosingBrace();
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualStudio.Text.BraceCompletion.BracePairAttribute : MultipleBaseMetadataAttribute {
    [CompilerGeneratedAttribute]
private char <OpeningBraces>k__BackingField;
    [CompilerGeneratedAttribute]
private char <ClosingBraces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsAutoSurround>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsBraceCompletion>k__BackingField;
    public char OpeningBraces { get; public set; }
    public char ClosingBraces { get; public set; }
    public bool SupportsAutoSurround { get; public set; }
    public bool SupportsBraceCompletion { get; public set; }
    public BracePairAttribute(char openingBrace, char closingBrace);
    [CompilerGeneratedAttribute]
public char get_OpeningBraces();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OpeningBraces(char value);
    [CompilerGeneratedAttribute]
public char get_ClosingBraces();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClosingBraces(char value);
    [CompilerGeneratedAttribute]
public bool get_SupportsAutoSurround();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SupportsAutoSurround(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsBraceCompletion();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SupportsBraceCompletion(bool value);
}
public interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContext {
    public abstract virtual void Start(IBraceCompletionSession session);
    public abstract virtual void Finish(IBraceCompletionSession session);
    public abstract virtual void OnReturn(IBraceCompletionSession session);
    public abstract virtual bool AllowOverType(IBraceCompletionSession session);
}
public interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionContextProvider {
    public abstract virtual bool TryCreateContext(ITextView textView, SnapshotPoint openingPoint, char openingBrace, char closingBrace, IBraceCompletionContext& context);
}
public interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDefaultProvider {
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionDynamicSessionProvider {
    public abstract virtual bool TryCreateSession(ITextView textView, SnapshotPoint openingPoint, char typedChar, IBraceCompletionSession& session);
    public abstract virtual IReadOnlyList`1<BracePair> GetAvailableBracePairs(SnapshotPoint snapshotPoint);
}
public interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager {
    public bool Enabled { get; }
    public bool HasActiveSessions { get; }
    public int ActiveSessionCount { get; }
    public string OpeningBraces { get; }
    public string ClosingBraces { get; }
    public abstract virtual bool get_Enabled();
    public abstract virtual bool get_HasActiveSessions();
    public abstract virtual int get_ActiveSessionCount();
    public abstract virtual string get_OpeningBraces();
    public abstract virtual string get_ClosingBraces();
    public abstract virtual void PreTypeChar(char character, Boolean& handledCommand);
    public abstract virtual void PostTypeChar(char character);
    public abstract virtual void PreTab(Boolean& handledCommand);
    public abstract virtual void PostTab();
    public abstract virtual void PreBackspace(Boolean& handledCommand);
    public abstract virtual void PostBackspace();
    public abstract virtual void PreDelete(Boolean& handledCommand);
    public abstract virtual void PostDelete();
    public abstract virtual void PreReturn(Boolean& handledCommand);
    public abstract virtual void PostReturn();
}
public interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerFactory {
    public abstract virtual IBraceCompletionManager TryGetBraceCompletionManager(ITextView textView);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManagerInternal {
    public IEnumerable`1<IBraceCompletionSession> ActiveSessions { get; }
    [NullableAttribute("2")]
public IBraceCompletionSession TopSession { get; }
    public abstract virtual IEnumerable`1<IBraceCompletionSession> get_ActiveSessions();
    [NullableContextAttribute("2")]
public abstract virtual IBraceCompletionSession get_TopSession();
    public abstract virtual bool DismissTopSession();
}
public interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSession {
    public ITrackingPoint OpeningPoint { get; }
    public ITrackingPoint ClosingPoint { get; }
    public ITextView TextView { get; }
    public ITextBuffer SubjectBuffer { get; }
    public char OpeningBrace { get; }
    public char ClosingBrace { get; }
    public abstract virtual ITrackingPoint get_OpeningPoint();
    public abstract virtual ITrackingPoint get_ClosingPoint();
    public abstract virtual ITextView get_TextView();
    public abstract virtual ITextBuffer get_SubjectBuffer();
    public abstract virtual char get_OpeningBrace();
    public abstract virtual char get_ClosingBrace();
    public abstract virtual void Start();
    public abstract virtual void Finish();
    public abstract virtual void PreOverType(Boolean& handledCommand);
    public abstract virtual void PostOverType();
    public abstract virtual void PreTab(Boolean& handledCommand);
    public abstract virtual void PostTab();
    public abstract virtual void PreBackspace(Boolean& handledCommand);
    public abstract virtual void PostBackspace();
    public abstract virtual void PreDelete(Boolean& handledCommand);
    public abstract virtual void PostDelete();
    public abstract virtual void PreReturn(Boolean& handledCommand);
    public abstract virtual void PostReturn();
}
public interface Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionSessionProvider {
    public abstract virtual bool TryCreateSession(ITextView textView, SnapshotPoint openingPoint, char openingBrace, char closingBrace, IBraceCompletionSession& session);
}
internal interface Microsoft.VisualStudio.Text.BraceCompletion.Implementation.IBraceCompletionAdornmentService {
    public ITrackingPoint Point { get; public set; }
    public abstract virtual ITrackingPoint get_Point();
    public abstract virtual void set_Point(ITrackingPoint value);
}
internal interface Microsoft.VisualStudio.Text.BraceCompletion.Implementation.IBraceCompletionAdornmentServiceFactory {
    public abstract virtual IBraceCompletionAdornmentService GetOrCreateService(ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Classification.IViewClassifierAggregatorService {
    public abstract virtual IClassifier GetClassifier(ITextView textView);
}
public enum Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode : Enum {
    public int value__;
    public static DifferenceHighlightMode CodeContour;
    public static DifferenceHighlightMode WholeLine;
}
public enum Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode2 : Enum {
    public int value__;
    public static DifferenceHighlightMode2 CodeContour;
    public static DifferenceHighlightMode2 WholeLine;
    public static DifferenceHighlightMode2 BlockOutline;
}
public enum Microsoft.VisualStudio.Text.Differencing.DifferenceHighlightMode3 : Enum {
    public int value__;
    public static DifferenceHighlightMode3 CodeContour;
    public static DifferenceHighlightMode3 WholeLine;
    public static DifferenceHighlightMode3 BlockOutline;
    public static DifferenceHighlightMode3 BlockOutlineWithWordDiffs;
}
public abstract class Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOption`1 : EditorOptionDefinition`1<T> {
    public virtual bool IsApplicableToScope(IPropertyOwner scope);
}
public static class Microsoft.VisualStudio.Text.Differencing.DifferenceViewerOptions : object {
    public static EditorOptionKey`1<DifferenceViewMode> ViewModeId;
    public static string ViewModeName;
    public static EditorOptionKey`1<DifferenceHighlightMode> HighlightModeId;
    public static string HighlightModeName;
    public static EditorOptionKey`1<bool> ScrollToFirstDiffId;
    public static string ScrollToFirstDiffName;
    public static EditorOptionKey`1<bool> SynchronizeSideBySideViewsId;
    public static string SynchronizeSideBySideViewsName;
    public static EditorOptionKey`1<bool> ShowDiffOverviewMarginId;
    public static string ShowDiffOverviewMarginName;
    internal static EditorOptionKey`1<SummaryDiffMode> SummaryDiffId;
    internal static string SummaryDiffName;
    public static EditorOptionKey`1<bool> ShowDifferencesId;
    public static string ShowDifferencesName;
    private static DifferenceViewerOptions();
}
public static class Microsoft.VisualStudio.Text.Differencing.DifferenceViewerRoles : object {
    public static string DiffTextViewRole;
    public static string LeftViewTextViewRole;
    public static string RightViewTextViewRole;
    public static string InlineViewTextViewRole;
    public static string UbiquitousDiffTextViewRole;
    public static string UbiquitousLeftViewTextViewRole;
    public static string UbiquitousRightViewTextViewRole;
    public static string UbiquitousInlineViewTextViewRole;
}
public enum Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode : Enum {
    public int value__;
    public static DifferenceViewMode Inline;
    public static DifferenceViewMode LeftViewOnly;
    public static DifferenceViewMode RightViewOnly;
    public static DifferenceViewMode SideBySide;
}
public enum Microsoft.VisualStudio.Text.Differencing.DifferenceViewType : Enum {
    public int value__;
    public static DifferenceViewType InlineView;
    public static DifferenceViewType LeftView;
    public static DifferenceViewType RightView;
}
public interface Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer {
    public IDifferenceBuffer DifferenceBuffer { get; }
    public ITextView InlineView { get; }
    public ITextView LeftView { get; }
    public ITextView RightView { get; }
    public DifferenceViewMode ViewMode { get; public set; }
    public DifferenceViewType ActiveViewType { get; }
    public IEditorOptions Options { get; }
    public bool AreViewsSynchronized { get; }
    public bool IsClosed { get; }
    public abstract virtual IDifferenceBuffer get_DifferenceBuffer();
    public abstract virtual ITextView get_InlineView();
    public abstract virtual ITextView get_LeftView();
    public abstract virtual ITextView get_RightView();
    public abstract virtual DifferenceViewMode get_ViewMode();
    public abstract virtual void set_ViewMode(DifferenceViewMode value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewModeChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewModeChanged(EventHandler`1<EventArgs> value);
    public abstract virtual DifferenceViewType get_ActiveViewType();
    public abstract virtual IEditorOptions get_Options();
    public abstract virtual bool get_AreViewsSynchronized();
    public abstract virtual void Close();
    public abstract virtual bool get_IsClosed();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler`1<EventArgs> value);
    public abstract virtual bool ScrollToNextChange(bool wrap);
    public abstract virtual bool ScrollToNextChange(SnapshotPoint point, bool wrap);
    public abstract virtual bool ScrollToPreviousChange(bool wrap);
    public abstract virtual bool ScrollToPreviousChange(SnapshotPoint point, bool wrap);
    public abstract virtual void ScrollToChange(Difference difference);
    public abstract virtual void ScrollToMatch(Match match);
}
public interface Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer2 {
    public bool RightViewExists { get; }
    public bool LeftViewExists { get; }
    public bool InlineViewExists { get; }
    public abstract virtual bool get_RightViewExists();
    public abstract virtual bool get_LeftViewExists();
    public abstract virtual bool get_InlineViewExists();
}
public interface Microsoft.VisualStudio.Text.Differencing.IDifferenceViewer3 {
    public bool DisplayDifferences { get; }
    public abstract virtual bool get_DisplayDifferences();
}
internal interface Microsoft.VisualStudio.Text.Differencing.IDifferenceViewerTextViewModel {
    public DifferenceViewType ViewType { get; }
    public ISnapshotDifference CurrentSnapshotDifference { get; }
    public bool AreViewsSynchronized { get; }
    public ITextView LeftView { get; }
    public ITextView RightView { get; }
    public abstract virtual DifferenceViewType get_ViewType();
    public abstract virtual ISnapshotDifference get_CurrentSnapshotDifference();
    public abstract virtual bool get_AreViewsSynchronized();
    public abstract virtual ITextView get_LeftView();
    public abstract virtual ITextView get_RightView();
}
internal enum Microsoft.VisualStudio.Text.Differencing.SummaryDiffMode : Enum {
    public int value__;
    public static SummaryDiffMode Summarize;
    public static SummaryDiffMode Expand;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("AllowBottomSpace")]
internal class Microsoft.VisualStudio.Text.Editor.AllowBottomSpaceOption : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/AutoScroll")]
public class Microsoft.VisualStudio.Text.Editor.AutoScrollEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
internal abstract class Microsoft.VisualStudio.Text.Editor.Caret : DisplayTextPoint {
    [EditorBrowsableAttribute("2")]
public ITextCaret AdvancedCaret { get; }
    public abstract virtual void MoveToNextCharacter(bool extendSelection);
    public abstract virtual void MoveToPreviousCharacter(bool extendSelection);
    public abstract virtual void MoveToBeginningOfPreviousLine(bool extendSelection);
    public abstract virtual void MoveToBeginningOfNextLine(bool extendSelection);
    public abstract virtual void MoveToBeginningOfPreviousViewLine(bool extendSelection);
    public abstract virtual void MoveToBeginningOfNextViewLine(bool extendSelection);
    public abstract virtual void MoveToPreviousLine(bool extendSelection);
    public abstract virtual void MoveToNextLine(bool extendSelection);
    public abstract virtual void MovePageUp();
    public abstract virtual void MovePageDown();
    public abstract virtual void MovePageUp(bool extendSelection);
    public abstract virtual void MovePageDown(bool extendSelection);
    public abstract virtual void MoveToEndOfLine(bool extendSelection);
    public abstract virtual void MoveToStartOfLine(bool extendSelection);
    public abstract virtual void MoveToEndOfViewLine(bool extendSelection);
    public abstract virtual void MoveToStartOfViewLine(bool extendSelection);
    public abstract virtual void MoveTo(int position, bool extendSelection);
    public abstract virtual void MoveToLine(int lineNumber, bool extendSelection);
    public abstract virtual void MoveToLine(int lineNumber, int offset, bool extendSelection);
    public abstract virtual void MoveToStartOfDocument(bool extendSelection);
    public abstract virtual void MoveToEndOfDocument(bool extendSelection);
    public abstract virtual void MoveToNextWord(bool extendSelection);
    public abstract virtual void MoveToPreviousWord(bool extendSelection);
    public abstract virtual void EnsureVisible();
    public abstract virtual ITextCaret get_AdvancedCaret();
}
public class Microsoft.VisualStudio.Text.Editor.CaretPosition : ValueType {
    private VirtualSnapshotPoint _bufferPosition;
    private PositionAffinity _affinity;
    private IMappingPoint _mappingPoint;
    public SnapshotPoint BufferPosition { get; }
    public IMappingPoint Point { get; }
    public PositionAffinity Affinity { get; }
    public VirtualSnapshotPoint VirtualBufferPosition { get; }
    public int VirtualSpaces { get; }
    public CaretPosition(VirtualSnapshotPoint bufferPosition, IMappingPoint mappingPoint, PositionAffinity caretAffinity);
    public SnapshotPoint get_BufferPosition();
    public IMappingPoint get_Point();
    public PositionAffinity get_Affinity();
    public VirtualSnapshotPoint get_VirtualBufferPosition();
    public int get_VirtualSpaces();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(CaretPosition caretPosition1, CaretPosition caretPosition2);
    public static bool op_Inequality(CaretPosition caretPosition1, CaretPosition caretPosition2);
}
public class Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs : EventArgs {
    private ITextView _textView;
    private CaretPosition _oldPosition;
    private CaretPosition _newPosition;
    public ITextView TextView { get; }
    public CaretPosition OldPosition { get; }
    public CaretPosition NewPosition { get; }
    public CaretPositionChangedEventArgs(ITextView textView, CaretPosition oldPosition, CaretPosition newPosition);
    public ITextView get_TextView();
    public CaretPosition get_OldPosition();
    public CaretPosition get_NewPosition();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/CaretWidth")]
public class Microsoft.VisualStudio.Text.Editor.CaretWidthOption : EditorOptionDefinition`1<double> {
    public double Default { get; }
    public EditorOptionKey`1<double> Key { get; }
    public virtual double get_Default();
    public virtual EditorOptionKey`1<double> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/ChangeTracking")]
public class Microsoft.VisualStudio.Text.Editor.ChangeTrackingMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.AutomaticLineEnderCommandArgs : EditorCommandArgs {
    public AutomaticLineEnderCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.BackspaceKeyCommandArgs : EditorCommandArgs {
    public BackspaceKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.BackTabKeyCommandArgs : EditorCommandArgs {
    public BackTabKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public abstract class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CodeCleanUpCommandArgs : EditorCommandArgs {
    public CodeCleanUpCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CodeCleanUpCustomProfileCommandArgs : CodeCleanUpCommandArgs {
    public CodeCleanUpCustomProfileCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CodeCleanUpDefaultProfileCommandArgs : CodeCleanUpCommandArgs {
    public CodeCleanUpDefaultProfileCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CollapseTagCommandArgs : EditorCommandArgs {
    public CollapseTagCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CommentSelectionCommandArgs : EditorCommandArgs {
    public CommentSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CommitUniqueCompletionListItemCommandArgs : EditorCommandArgs {
    public CommitUniqueCompletionListItemCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ContractSelectionCommandArgs : EditorCommandArgs {
    public ContractSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CopyCommandArgs : EditorCommandArgs {
    public CopyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CopyToInteractiveCommandArgs : EditorCommandArgs {
    public CopyToInteractiveCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.CutCommandArgs : EditorCommandArgs {
    public CutCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.DeleteKeyCommandArgs : EditorCommandArgs {
    public DeleteKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.DiffSwitchBetweenLeftAndRightCommandArgs : EditorCommandArgs {
    [NullableContextAttribute("1")]
public DiffSwitchBetweenLeftAndRightCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.DocumentEndCommandArgs : EditorCommandArgs {
    public DocumentEndCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.DocumentStartCommandArgs : EditorCommandArgs {
    public DocumentStartCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.DownKeyCommandArgs : EditorCommandArgs {
    public DownKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.DuplicateSelectionCommandArgs : EditorCommandArgs {
    public DuplicateSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.EncapsulateFieldCommandArgs : EditorCommandArgs {
    public EncapsulateFieldCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public abstract class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ErrorCommandArgsBase : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ErrorTagTypeNames>k__BackingField;
    public IEnumerable`1<string> ErrorTagTypeNames { get; }
    protected ErrorCommandArgsBase(ITextView textView, ITextBuffer subjectBuffer, IEnumerable`1<string> errorTypeNames);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ErrorTagTypeNames();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.EscapeKeyCommandArgs : EditorCommandArgs {
    public EscapeKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ExecuteInInteractiveCommandArgs : EditorCommandArgs {
    public ExecuteInInteractiveCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ExpandSelectionCommandArgs : EditorCommandArgs {
    public ExpandSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ExpandSelectionToEntireLineCommandArgs : EditorCommandArgs {
    public ExpandSelectionToEntireLineCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ExtractInterfaceCommandArgs : EditorCommandArgs {
    public ExtractInterfaceCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ExtractMethodCommandArgs : EditorCommandArgs {
    public ExtractMethodCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.FindCaretCommandArgs : EditorCommandArgs {
    public FindCaretCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.FindReferencesCommandArgs : EditorCommandArgs {
    public FindReferencesCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.FormatAndValidationCommandArgs : EditorCommandArgs {
    public FormatAndValidationCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.FormatDocumentCommandArgs : EditorCommandArgs {
    public FormatDocumentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.FormatSelectionCommandArgs : EditorCommandArgs {
    public FormatSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToBaseCommandArgs : EditorCommandArgs {
    public GoToBaseCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GotoBraceCommandArgs : EditorCommandArgs {
    public GotoBraceCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GotoBraceExtCommandArgs : EditorCommandArgs {
    public GotoBraceExtCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToContainingDeclarationCommandArgs : EditorCommandArgs {
    public GoToContainingDeclarationCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToDefinitionCommandArgs : EditorCommandArgs {
    public GoToDefinitionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToImplementationCommandArgs : EditorCommandArgs {
    public GoToImplementationCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToNextDifferenceCommandArgs : EditorCommandArgs {
    [NullableContextAttribute("1")]
public GoToNextDifferenceCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToNextLocationCommandArgs : EditorCommandArgs {
    [NullableContextAttribute("1")]
public GoToNextLocationCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToNextMemberCommandArgs : EditorCommandArgs {
    public GoToNextMemberCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToPreviousDifferenceCommandArgs : EditorCommandArgs {
    [NullableContextAttribute("1")]
public GoToPreviousDifferenceCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToPreviousLocationCommandArgs : EditorCommandArgs {
    [NullableContextAttribute("1")]
public GoToPreviousLocationCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.GoToPreviousMemberCommandArgs : EditorCommandArgs {
    public GoToPreviousMemberCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.HelpCommandArgs : EditorCommandArgs {
    public HelpCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.IncrementLastSecondaryCaretCommandArgs : EditorCommandArgs {
    public IncrementLastSecondaryCaretCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertAllMatchingCaretsCommandArgs : EditorCommandArgs {
    public InsertAllMatchingCaretsCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertCommentCommandArgs : EditorCommandArgs {
    public InsertCommentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertNextMatchingCaretCommandArgs : EditorCommandArgs {
    public InsertNextMatchingCaretCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InsertSnippetCommandArgs : EditorCommandArgs {
    public InsertSnippetCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InvokeCompletionListCommandArgs : EditorCommandArgs {
    public InvokeCompletionListCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InvokeQuickInfoCommandArgs : EditorCommandArgs {
    public InvokeQuickInfoCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.InvokeSignatureHelpCommandArgs : EditorCommandArgs {
    public InvokeSignatureHelpCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.JoinLinesCommandArgs : EditorCommandArgs {
    public JoinLinesCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.LeftKeyCommandArgs : EditorCommandArgs {
    public LeftKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.LineEndCommandArgs : EditorCommandArgs {
    public LineEndCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.LineEndExtendCommandArgs : EditorCommandArgs {
    public LineEndExtendCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.LineStartCommandArgs : EditorCommandArgs {
    public LineStartCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.LineStartExtendCommandArgs : EditorCommandArgs {
    public LineStartExtendCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveLastCaretDownCommandArgs : EditorCommandArgs {
    public MoveLastCaretDownCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveSelectedLinesDownCommandArgs : EditorCommandArgs {
    public MoveSelectedLinesDownCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveSelectedLinesUpCommandArgs : EditorCommandArgs {
    public MoveSelectedLinesUpCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveToNextSubWordCommandArgs : EditorCommandArgs {
    public MoveToNextSubWordCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveToNextSubWordExtendCommandArgs : EditorCommandArgs {
    public MoveToNextSubWordExtendCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveToPreviousSubWordCommandArgs : EditorCommandArgs {
    public MoveToPreviousSubWordCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.MoveToPreviousSubWordExtendCommandArgs : EditorCommandArgs {
    public MoveToPreviousSubWordExtendCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextHighlightedReferenceCommandArgs : EditorCommandArgs {
    public NavigateToNextHighlightedReferenceCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToNextIssueInDocumentCommandArgs : ErrorCommandArgsBase {
    public NavigateToNextIssueInDocumentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
    public NavigateToNextIssueInDocumentCommandArgs(ITextView textView, ITextBuffer subjectBuffer, IEnumerable`1<string> errorTypeNames);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToPreviousHighlightedReferenceCommandArgs : EditorCommandArgs {
    public NavigateToPreviousHighlightedReferenceCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NavigateToPreviousIssueInDocumentCommandArgs : ErrorCommandArgsBase {
    public NavigateToPreviousIssueInDocumentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
    public NavigateToPreviousIssueInDocumentCommandArgs(ITextView textView, ITextBuffer subjectBuffer, IEnumerable`1<string> errorTypeNames);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.NextSuggestionCommandArgs : EditorCommandArgs {
    public NextSuggestionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OpenLineAboveCommandArgs : EditorCommandArgs {
    public OpenLineAboveCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OpenLineBelowCommandArgs : EditorCommandArgs {
    public OpenLineBelowCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OutlineCollapseToDefinitionsCommandArgs : EditorCommandArgs {
    public OutlineCollapseToDefinitionsCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OutlineHideSelectionCommandArgs : EditorCommandArgs {
    public OutlineHideSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OutlineStopHidingAllCommandArgs : EditorCommandArgs {
    public OutlineStopHidingAllCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OutlineStopHidingCurrentCommandArgs : EditorCommandArgs {
    public OutlineStopHidingCurrentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OutlineToggleAllCommandArgs : EditorCommandArgs {
    public OutlineToggleAllCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.OutlineToggleCurrentCommandArgs : EditorCommandArgs {
    public OutlineToggleCurrentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.PageDownKeyCommandArgs : EditorCommandArgs {
    public PageDownKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.PageUpKeyCommandArgs : EditorCommandArgs {
    public PageUpKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.PasteAsHTMLCommandArgs : EditorCommandArgs {
    public PasteAsHTMLCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.PasteCommandArgs : EditorCommandArgs {
    public PasteCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.PeekDefinitionCommandArgs : EditorCommandArgs {
    public PeekDefinitionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.PeekDifferenceCommandArgs : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private ChangeTypes <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private SnapshotPoint <TriggerPoint>k__BackingField;
    public ChangeTypes ChangeType { get; }
    public SnapshotPoint TriggerPoint { get; }
    public PeekDifferenceCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
    public PeekDifferenceCommandArgs(ITextView textView, ITextBuffer subjectBuffer, ChangeTypes changeType, SnapshotPoint triggerPoint);
    [CompilerGeneratedAttribute]
public ChangeTypes get_ChangeType();
    [CompilerGeneratedAttribute]
public SnapshotPoint get_TriggerPoint();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.PreviousSuggestionCommandArgs : EditorCommandArgs {
    public PreviousSuggestionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RedoCommandArgs : EditorCommandArgs {
    public int Count;
    public RedoCommandArgs(ITextView textView, ITextBuffer subjectBuffer, int count);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RemoveLastSecondaryCaretCommandArgs : EditorCommandArgs {
    public RemoveLastSecondaryCaretCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RemoveParametersCommandArgs : EditorCommandArgs {
    public RemoveParametersCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RenameCommandArgs : EditorCommandArgs {
    public RenameCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReorderParametersCommandArgs : EditorCommandArgs {
    public ReorderParametersCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ReturnKeyCommandArgs : EditorCommandArgs {
    public ReturnKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RightKeyCommandArgs : EditorCommandArgs {
    public RightKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RotatePrimaryCaretNextCommandArgs : EditorCommandArgs {
    public RotatePrimaryCaretNextCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.RotatePrimaryCaretPreviousCommandArgs : EditorCommandArgs {
    public RotatePrimaryCaretPreviousCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SaveCommandArgs : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private bool <IsImplicitSave>k__BackingField;
    public bool IsImplicitSave { get; }
    public SaveCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
    public SaveCommandArgs(ITextView textView, ITextBuffer subjectBuffer, bool isImplicitSave);
    [CompilerGeneratedAttribute]
public bool get_IsImplicitSave();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SelectAllCommandArgs : EditorCommandArgs {
    public SelectAllCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SelectContainingDeclarationCommandArgs : EditorCommandArgs {
    public SelectContainingDeclarationCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SelectCurrentSubwordCommandArgs : EditorCommandArgs {
    public SelectCurrentSubwordCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SetLeadingWhiteSpaceToSpacesCommandArgs : EditorCommandArgs {
    public SetLeadingWhiteSpaceToSpacesCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SetLeadingWhiteSpaceToTabsCommandArgs : EditorCommandArgs {
    public SetLeadingWhiteSpaceToTabsCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SetNewlinesToCRCommandArgs : EditorCommandArgs {
    public SetNewlinesToCRCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SetNewlinesToCRLFCommandArgs : EditorCommandArgs {
    public SetNewlinesToCRLFCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SetNewlinesToLFCommandArgs : EditorCommandArgs {
    public SetNewlinesToLFCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowClipboardHistoryCommandArgs : EditorCommandArgs {
    public ShowClipboardHistoryCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowContextMenuCommandArgs : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <X>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Y>k__BackingField;
    public Nullable`1<double> X { get; }
    public Nullable`1<double> Y { get; }
    public ShowContextMenuCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
    public ShowContextMenuCommandArgs(ITextView textView, ITextBuffer subjectBuffer, double x, double y);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_X();
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Y();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowNavigateMenuCommandArgs : EditorCommandArgs {
    public ShowNavigateMenuCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowQuickFixesCommandArgs : EditorCommandArgs {
    public ShowQuickFixesCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowQuickFixesForPositionCommandArgs : EditorCommandArgs {
    public ShowQuickFixesForPositionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
internal class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ShowStickyScrollMenuCommandArgs : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public double X { get; }
    public double Y { get; }
    public ShowStickyScrollMenuCommandArgs(ITextView textView, ITextBuffer subjectBuffer, double x, double y);
    [CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public double get_Y();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SortLinesCommandArgs : EditorCommandArgs {
    public SortLinesCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.StartAutomaticOutliningCommandArgs : EditorCommandArgs {
    public StartAutomaticOutliningCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SubwordContractSelectionCommandArgs : EditorCommandArgs {
    public SubwordContractSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SubwordDeleteToEndCommandArgs : EditorCommandArgs {
    public SubwordDeleteToEndCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SubwordDeleteToStartCommandArgs : EditorCommandArgs {
    public SubwordDeleteToStartCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SubwordExpandSelectionCommandArgs : EditorCommandArgs {
    public SubwordExpandSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SubwordTransposeCommandArgs : EditorCommandArgs {
    public SubwordTransposeCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SurroundWithCommandArgs : EditorCommandArgs {
    public SurroundWithCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.SyncClassViewCommandArgs : EditorCommandArgs {
    public SyncClassViewCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TabKeyCommandArgs : EditorCommandArgs {
    public TabKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ToggleBlockCommentCommandArgs : EditorCommandArgs {
    public ToggleBlockCommentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ToggleCompletionListFilterCommandArgs : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    public string AccessKey { get; }
    public ToggleCompletionListFilterCommandArgs(ITextView textView, ITextBuffer subjectBuffer, string accessKey);
    [CompilerGeneratedAttribute]
public string get_AccessKey();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ToggleCompletionModeCommandArgs : EditorCommandArgs {
    public ToggleCompletionModeCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ToggleLineCommentCommandArgs : EditorCommandArgs {
    public ToggleLineCommentCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ToggleOverwriteModeCommandArgs : EditorCommandArgs {
    public ToggleOverwriteModeCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ToggleStickyScrollingCommandArgs : EditorCommandArgs {
    public ToggleStickyScrollingCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.TypeCharCommandArgs : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private char <TypedChar>k__BackingField;
    public char TypedChar { get; }
    public TypeCharCommandArgs(ITextView textView, ITextBuffer subjectBuffer, char typedChar);
    [CompilerGeneratedAttribute]
public char get_TypedChar();
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.UncollapseTagCommandArgs : EditorCommandArgs {
    public UncollapseTagCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.UncommentSelectionCommandArgs : EditorCommandArgs {
    public UncommentSelectionCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.UndoCommandArgs : EditorCommandArgs {
    public int Count;
    public UndoCommandArgs(ITextView textView, ITextBuffer subjectBuffer, int count);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.UpKeyCommandArgs : EditorCommandArgs {
    public UpKeyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ViewCallHierarchyCommandArgs : EditorCommandArgs {
    public ViewCallHierarchyCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ViewCodeCommandArgs : EditorCommandArgs {
    public ViewCodeCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ViewFormCommandArgs : EditorCommandArgs {
    public ViewFormCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.WordDeleteToEndCommandArgs : EditorCommandArgs {
    public WordDeleteToEndCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.WordDeleteToStartCommandArgs : EditorCommandArgs {
    public WordDeleteToStartCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ZoomInCommandArgs : EditorCommandArgs {
    public ZoomInCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ZoomOutCommandArgs : EditorCommandArgs {
    public ZoomOutCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
}
public class Microsoft.VisualStudio.Text.Editor.Commanding.Commands.ZoomToCommandArgs : EditorCommandArgs {
    [CompilerGeneratedAttribute]
private double <Zoom>k__BackingField;
    public double Zoom { get; }
    public ZoomToCommandArgs(ITextView textView, ITextBuffer subjectBuffer, double zoom);
    [CompilerGeneratedAttribute]
public double get_Zoom();
}
public abstract class Microsoft.VisualStudio.Text.Editor.Commanding.EditorCommandArgs : CommandArgs {
    [CompilerGeneratedAttribute]
private ITextBuffer <SubjectBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextView <TextView>k__BackingField;
    public ITextBuffer SubjectBuffer { get; }
    public ITextView TextView { get; }
    public EditorCommandArgs(ITextView textView, ITextBuffer subjectBuffer);
    [CompilerGeneratedAttribute]
public ITextBuffer get_SubjectBuffer();
    [CompilerGeneratedAttribute]
public ITextView get_TextView();
}
public interface Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolver {
    public abstract virtual IEnumerable`1<ITextBuffer> ResolveBuffersForCommand();
}
public interface Microsoft.VisualStudio.Text.Editor.Commanding.ICommandingTextBufferResolverProvider {
    public abstract virtual ICommandingTextBufferResolver CreateResolver(ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerService {
    public abstract virtual CommandState GetCommandState(Func`3<ITextView, ITextBuffer, T> argsFactory, Func`1<CommandState> nextCommandHandler);
    public abstract virtual void Execute(Func`3<ITextView, ITextBuffer, T> argsFactory, Action nextCommandHandler);
}
public interface Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandHandlerServiceFactory {
    public abstract virtual IEditorCommandHandlerService GetService(ITextView textView);
    public abstract virtual IEditorCommandHandlerService GetService(ITextView textView, ITextBuffer subjectBuffer);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandKeyBindingService {
    public abstract virtual IReadOnlyList`1<string> GetKeyBindings();
}
internal interface Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceService {
    public abstract virtual void BeforeExecution(CommandArgs args);
    public abstract virtual void AfterExecution(CommandArgs args);
}
internal interface Microsoft.VisualStudio.Text.Editor.Commanding.IEditorCommandPerformanceServiceFactory {
    public abstract virtual IEditorCommandPerformanceService GetService(ITextView textView);
}
public enum Microsoft.VisualStudio.Text.Editor.ConnectionReason : Enum {
    public int value__;
    public static ConnectionReason TextViewLifetime;
    public static ConnectionReason ContentTypeChange;
    public static ConnectionReason BufferGraphChange;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/CutOrCopyBlankLineIfNoSelection")]
public class Microsoft.VisualStudio.Text.Editor.CutOrCopyBlankLineIfNoSelection : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/CutOrCopyIfNoSelection")]
internal class Microsoft.VisualStudio.Text.Editor.CutOrCopyIfNoSelection : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public static class Microsoft.VisualStudio.Text.Editor.DefaultTextViewHostOptions : object {
    public static EditorOptionKey`1<bool> VerticalScrollBarId;
    public static string VerticalScrollBarName;
    public static EditorOptionKey`1<bool> HorizontalScrollBarId;
    public static string HorizontalScrollBarName;
    public static EditorOptionKey`1<bool> GlyphMarginId;
    public static string GlyphMarginName;
    public static EditorOptionKey`1<bool> SuggestionMarginId;
    public static string SuggestionMarginName;
    public static EditorOptionKey`1<bool> SelectionMarginId;
    public static string SelectionMarginName;
    public static EditorOptionKey`1<bool> LineNumberMarginId;
    public static string LineNumberMarginName;
    public static EditorOptionKey`1<bool> ChangeTrackingId;
    public static string ChangeTrackingName;
    public static EditorOptionKey`1<bool> OutliningMarginId;
    public static string OutliningMarginName;
    public static EditorOptionKey`1<bool> ZoomControlId;
    public static string ZoomControlName;
    public static EditorOptionKey`1<bool> IsInContrastModeId;
    public static string IsInContrastModeName;
    public static EditorOptionKey`1<bool> IsInHighContrastThemeId;
    public static string IsInHighContrastThemeName;
    public static EditorOptionKey`1<bool> ShowNavigationBarOptionId;
    public static string ShowNavigationBarOptionName;
    public static string ShowScrollBarAnnotationsOptionName;
    public static EditorOptionKey`1<bool> ShowScrollBarAnnotationsOptionId;
    public static string ShowEnhancedScrollBarOptionName;
    public static EditorOptionKey`1<bool> ShowEnhancedScrollBarOptionId;
    public static string ShowChangeTrackingMarginOptionName;
    public static EditorOptionKey`1<bool> ShowChangeTrackingMarginOptionId;
    public static string ChangeTrackingMarginWidthOptionName;
    public static EditorOptionKey`1<double> ChangeTrackingMarginWidthOptionId;
    public static string ShowPreviewOptionName;
    public static EditorOptionKey`1<bool> ShowPreviewOptionId;
    public static string PreviewSizeOptionName;
    public static EditorOptionKey`1<int> PreviewSizeOptionId;
    public static string ShowCaretPositionOptionName;
    public static EditorOptionKey`1<bool> ShowCaretPositionOptionId;
    public static string SourceImageMarginEnabledOptionName;
    public static EditorOptionKey`1<bool> SourceImageMarginEnabledOptionId;
    public static string SourceImageMarginWidthOptionName;
    public static EditorOptionKey`1<double> SourceImageMarginWidthOptionId;
    public static string ShowMarksOptionName;
    public static EditorOptionKey`1<bool> ShowMarksOptionId;
    public static string ShowErrorsOptionName;
    public static EditorOptionKey`1<bool> ShowErrorsOptionId;
    public static string MarkMarginWidthOptionName;
    public static EditorOptionKey`1<double> MarkMarginWidthOptionId;
    public static string ErrorMarginWidthOptionName;
    public static EditorOptionKey`1<double> ErrorMarginWidthOptionId;
    public static EditorOptionKey`1<bool> EnableFileHealthIndicatorOptionId;
    public static string EnableFileHealthIndicatorOptionName;
    public static EditorOptionKey`1<bool> RowColMarginOptionId;
    public static string RowColMarginOptionName;
    public static EditorOptionKey`1<bool> SelectionStateMarginOptionId;
    public static string SelectionStateMarginOptionName;
    public static EditorOptionKey`1<bool> InsertModeMarginOptionId;
    public static string InsertModeMarginOptionName;
    public static EditorOptionKey`1<bool> IndentationCharacterMarginOptionId;
    public static string IndentationCharacterMarginOptionName;
    public static EditorOptionKey`1<bool> UpdateIndentationCharacterOnEditOptionId;
    public static string UpdateIndentationCharacterOnEditOptionName;
    public static EditorOptionKey`1<bool> LineEndingMarginOptionId;
    public static string LineEndingMarginOptionName;
    public static EditorOptionKey`1<bool> EditingStateMarginOptionId;
    public static string EditingStateMarginOptionName;
    internal static EditorOptionKey`1<MouseClickKind> InteractiveChangeMarginGestureOptionId;
    internal static string InteractiveChangeMarginGestureOptionName;
    internal static EditorOptionKey`1<bool> EnableWheelScrollingId;
    internal static string EnableWheelScrollingName;
    internal static EditorOptionKey`1<bool> EnableStickyScrollId;
    internal static string EnableStickyScrollName;
    internal static EditorOptionKey`1<int> MaxLineOfStickyScrollId;
    internal static string MaxLineOfStickyScrollName;
    internal static EditorOptionKey`1<StickyScrollScopeOverflowKind> StickyScrollScopeOverflowKindId;
    internal static string StickyScrollScopeOverflowKindName;
    internal static EditorOptionKey`1<bool> EnablePopupScalingId;
    internal static string EnablePopupScalingName;
    internal static EditorOptionKey`1<PrimeEditorExtensionsKind> PrimeEditorExtensionsId;
    internal static string PrimeEditorExtensionsName;
    private static DefaultTextViewHostOptions();
}
public static class Microsoft.VisualStudio.Text.Editor.DefaultTextViewOptions : object {
    public static EditorOptionKey`1<bool> CutOrCopyBlankLineIfNoSelectionId;
    public static string CutOrCopyBlankLineIfNoSelectionName;
    internal static EditorOptionKey`1<bool> CutOrCopyIfNoSelectionId;
    internal static string CutOrCopyIfNoSelectionName;
    public static EditorOptionKey`1<bool> ViewProhibitUserInputId;
    public static string ViewProhibitUserInputName;
    public static EditorOptionKey`1<WordWrapStyles> WordWrapStyleId;
    public static string WordWrapStyleName;
    public static EditorOptionKey`1<bool> UseVirtualSpaceId;
    public static string UseVirtualSpaceName;
    public static EditorOptionKey`1<bool> IsViewportLeftClippedId;
    public static string IsViewportLeftClippedName;
    public static EditorOptionKey`1<bool> OverwriteModeId;
    public static string OverwriteModeName;
    public static EditorOptionKey`1<bool> AutoScrollId;
    public static string AutoScrollName;
    public static EditorOptionKey`1<bool> UseVisibleWhitespaceId;
    public static string UseVisibleWhitespaceName;
    public static EditorOptionKey`1<bool> UseVisibleWhitespaceOnlyForSelectionId;
    public static string UseVisibleWhitespaceOnlyForSelectionName;
    public static EditorOptionKey`1<WhitespaceType> UseVisibleWhitespaceIncludeId;
    public static string UseVisibleWhitespaceIncludeName;
    public static EditorOptionKey`1<bool> ShowBlockStructureId;
    public static string ShowBlockStructureName;
    public static EditorOptionKey`1<bool> ShouldCaretsBeRenderedId;
    public static string ShouldCaretsBeRenderedName;
    public static EditorOptionKey`1<bool> ShouldSelectionsBeRenderedId;
    public static string ShouldSelectionsBeRenderedName;
    public static EditorOptionKey`1<bool> ProduceScreenReaderFriendlyTextId;
    public static string ProduceScreenReaderFriendlyTextName;
    public static EditorOptionKey`1<bool> OutliningUndoOptionId;
    public static string OutliningUndoOptionName;
    public static EditorOptionKey`1<bool> DisplayUrlsAsHyperlinksId;
    public static string DisplayUrlsAsHyperlinksName;
    public static EditorOptionKey`1<bool> DragDropEditingId;
    public static string DragDropEditingName;
    public static string BraceCompletionEnabledOptionName;
    public static EditorOptionKey`1<bool> BraceCompletionEnabledOptionId;
    public static EditorOptionKey`1<bool> EnableBracePairColorizationId;
    public static string EnableBracePairColorizationName;
    public static string CaretWidthOptionName;
    public static EditorOptionKey`1<double> CaretWidthId;
    public static EditorOptionKey`1<bool> ShouldMoveCaretToEndOnSelectAllId;
    public static string ShouldMoveCaretToEndOnSelectAllName;
    public static string VerticalRulersName;
    public static EditorOptionKey`1<IReadOnlyList`1<int>> VerticalRulersId;
    public static EditorOptionKey`1<bool> ShowErrorSquigglesId;
    public static string ShowErrorSquigglesName;
    public static EditorOptionKey`1<bool> ShowSelectionMatchesId;
    public static string ShowSelectionMatchesName;
    public static EditorOptionKey`1<string> MinimumErrorSeverityId;
    public static string MinimumErrorSeverityName;
    public static EditorOptionKey`1<double> LineSpacingOptionId;
    public static string LineSpacingOptionName;
    public static EditorOptionKey`1<bool> ShowBidirectionalTextControlCharactersOptionId;
    public static string ShowBidirectionalTextControlCharactersOptionName;
    public static EditorOptionKey`1<bool> ShowZeroWidthCharactersOptionId;
    public static string ShowZeroWidthCharactersOptionName;
    internal static EditorOptionKey`1<bool> EnableImageHoverPreviewId;
    internal static string EnableImageHoverPreviewName;
    internal static EditorOptionKey`1<bool> EnableSpellCheckerOptionId;
    internal static string EnableSpellCheckerName;
    internal static EditorOptionKey`1<bool> EnableAudioCuesId;
    internal static string EnableAudioCuesName;
    public static EditorOptionKey`1<bool> EnableVerticalScrollingId;
    public static string EnableVerticalScrollingName;
    public static EditorOptionKey`1<bool> EnableAutoBraceSurroundOptionId;
    public static string EnableAutoBraceSurroundOptionName;
    public static EditorOptionKey`1<bool> AllowBottomSpaceOptionId;
    public static string AllowBottomSpaceOptionName;
    private static DefaultTextViewOptions();
}
internal abstract class Microsoft.VisualStudio.Text.Editor.DisplayTextPoint : TextPoint {
    public TextView TextView { get; }
    public ITextViewLine AdvancedTextViewLine { get; }
    public int StartOfViewLine { get; }
    public int EndOfViewLine { get; }
    public int DisplayColumn { get; }
    public bool IsVisible { get; }
    public abstract virtual TextView get_TextView();
    public abstract virtual ITextViewLine get_AdvancedTextViewLine();
    public abstract virtual int get_StartOfViewLine();
    public abstract virtual int get_EndOfViewLine();
    public abstract virtual void MoveToEndOfViewLine();
    public abstract virtual void MoveToStartOfViewLine();
    public abstract virtual void MoveToBeginningOfNextViewLine();
    public abstract virtual void MoveToBeginningOfPreviousViewLine();
    [EditorBrowsableAttribute("2")]
public abstract virtual DisplayTextPoint GetFirstNonWhiteSpaceCharacterOnViewLine();
    public abstract virtual int get_DisplayColumn();
    public abstract virtual bool get_IsVisible();
    public DisplayTextPoint Clone();
    public abstract virtual DisplayTextRange GetDisplayTextRange(DisplayTextPoint otherPoint);
    public abstract virtual DisplayTextRange GetDisplayTextRange(int otherPosition);
    protected sealed virtual TextPoint CloneInternal();
    protected abstract virtual DisplayTextPoint CloneDisplayTextPointInternal();
}
internal abstract class Microsoft.VisualStudio.Text.Editor.DisplayTextRange : TextRange {
    public TextView TextView { get; }
    public VisibilityState Visibility { get; }
    public abstract virtual TextView get_TextView();
    public DisplayTextRange Clone();
    public abstract virtual DisplayTextPoint GetDisplayStartPoint();
    public abstract virtual DisplayTextPoint GetDisplayEndPoint();
    public abstract virtual VisibilityState get_Visibility();
    protected virtual TextRange CloneInternal();
    protected abstract virtual DisplayTextRange CloneDisplayTextRangeInternal();
    protected abstract virtual IEnumerator`1<DisplayTextPoint> GetDisplayPointEnumeratorInternal();
    public sealed virtual IEnumerator`1<DisplayTextPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/DisplayUrlsAsHyperlinks")]
public class Microsoft.VisualStudio.Text.Editor.DisplayUrlsAsHyperlinks : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/DragDrop")]
public class Microsoft.VisualStudio.Text.Editor.DragDropEditing : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EditingState/EditingStateEndingMargin")]
public class Microsoft.VisualStudio.Text.Editor.EditingStateMarginEnabledOption : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
internal static class Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds : object {
    public static string ViewPrimitiveId;
    public static string SelectionPrimitiveId;
    public static string CaretPrimitiveId;
    public static string BufferPrimitiveId;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EnableAudioCues")]
internal class Microsoft.VisualStudio.Text.Editor.EnableAudioCuesOption : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EnableAutoBraceSurround")]
internal class Microsoft.VisualStudio.Text.Editor.EnableAutoBraceSurroundOption : EditorOptionDefinition`1<bool> {
    [ImportAttribute]
private IFeatureFlagsAdapter featureFlagsService;
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EnableBracePairColorizationOption")]
internal class Microsoft.VisualStudio.Text.Editor.EnableBracePairColorizationOption : EditorOptionDefinition`1<bool> {
    [ImportAttribute]
private IFeatureFlagsAdapter featureFlagsService;
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EnableImageHoverPreview")]
internal class Microsoft.VisualStudio.Text.Editor.EnableImageHoverPreviewOption : ViewOptionDefinition`1<bool> {
    [ImportAttribute]
private IFeatureFlagsAdapter featureFlagsService;
    public EditorOptionKey`1<bool> Key { get; }
    public bool Default { get; }
    public virtual EditorOptionKey`1<bool> get_Key();
    public virtual bool get_Default();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EnablePopupScaling")]
internal class Microsoft.VisualStudio.Text.Editor.EnablePopupScalingOption : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EnableSpellChecker")]
internal class Microsoft.VisualStudio.Text.Editor.EnableSpellCheckerOption : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EnableStickyScroll")]
internal class Microsoft.VisualStudio.Text.Editor.EnableStickyScrollOption : EditorOptionDefinition`1<bool> {
    [ImportAttribute]
private IFeatureFlagsAdapter featureFlagsService;
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/EnableVerticalScrolling")]
public class Microsoft.VisualStudio.Text.Editor.EnableVerticalScrollingOption : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/EnableWheelScrolling")]
internal class Microsoft.VisualStudio.Text.Editor.EnableWheelScrolling : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Editor.EnsureSpanVisibleOptions : Enum {
    public int value__;
    public static EnsureSpanVisibleOptions ShowStart;
    public static EnsureSpanVisibleOptions MinimumScroll;
    public static EnsureSpanVisibleOptions AlwaysCenter;
    public static EnsureSpanVisibleOptions None;
}
internal enum Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorCategory : Enum {
    public int value__;
    public static ErrorCategory Error;
    public static ErrorCategory Warning;
    public static ErrorCategory Message;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorListKeyNames : object {
    public static string IsDuplicateKey;
    public static string RemoteUri;
    public static string Line;
    public static string ErrorRank;
    public static string OutputWindowMessageProvider;
    public static string OutputWindowMessageId;
    public static string SuppressionState;
    public static string Path;
    public static string NameSpace;
    public static string LineText;
    public static string TextInlines;
    public static string Definition;
    public static string DefinitionIcon;
    public static string ProjectGuids;
    public static string ProjectNames;
    public static string HelpText;
    public static string DisplayPath;
    public static string SymbolKind;
    public static string ItemOrigin;
    public static string Repository;
    public static string ErrorCodeToolTip;
    public static string ErrorCode;
    public static string PriorityImage;
    public static string TaskCategory;
    public static string Column;
    public static string DocumentName;
    public static string Text;
    public static string FullText;
    public static string DetailsExpander;
    public static string HasVerticalContent;
    public static string HelpKeyword;
    public static string HelpLink;
    public static string Branch;
    public static string ErrorCategory;
    public static string BuildTool;
    public static string ErrorSeverity;
    public static string IsActiveContext;
    public static string Priority;
    public static string ProjectName;
    public static string ProjectGuid;
    public static string ImageIndex;
    public static string ErrorSeverityImage;
    public static string ErrorSource;
    public static string PersistentSpan;
}
internal enum Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorListView : Enum {
    public int value__;
    public static ErrorListView BuildOnly;
    public static ErrorListView IntelliSenseOnly;
    public static ErrorListView BuildAndIntelliSense;
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Text.Editor.ErrorList.ErrorSource : Enum {
    public int value__;
    public static ErrorSource Build;
    public static ErrorSource Other;
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorList {
    public ErrorListView ErrorListView { get; }
    public abstract virtual void AddSource(IErrorListDataSource source);
    public abstract virtual void RemoveSource(IErrorListDataSource source);
    public abstract virtual ErrorListView get_ErrorListView();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListDataSource {
    unknown ErrorListView ErrorListView {public set; }
    public abstract virtual IDisposable Subscribe(IErrorListSink sink, bool isTaskList);
    public abstract virtual void set_ErrorListView(ErrorListView value);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSink {
    public abstract virtual void AddSnapshot(IErrorListSnapshot snapshot);
    public abstract virtual void ReplaceSnapshot(IErrorListSnapshot oldSnapshot, IErrorListSnapshot newSnapshot);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Editor.ErrorList.IErrorListSnapshot {
    public int Count { get; }
    public int VersionNumber { get; }
    public abstract virtual int get_Count();
    public abstract virtual int get_VersionNumber();
    public abstract virtual bool TryGetValue(int index, string keyName, Object& contents);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Editor.ErrorList.ITaskList {
    public abstract virtual void AddSource(IErrorListDataSource source);
    public abstract virtual void RemoveSource(IErrorListDataSource source);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/FileHealthIndicator")]
public class Microsoft.VisualStudio.Text.Editor.FileHealthIndicatorEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/GlyphMargin")]
public class Microsoft.VisualStudio.Text.Editor.GlyphMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/HorizontalScrollBar")]
public class Microsoft.VisualStudio.Text.Editor.HorizontalScrollBarEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
internal enum Microsoft.VisualStudio.Text.Editor.HowToShow : Enum {
    public int value__;
    public static HowToShow AsIs;
    public static HowToShow Centered;
    public static HowToShow OnFirstLineOfView;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Text.Editor.IAccessibleAdornmentControl {
    public abstract virtual string GetAutomationText();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Editor.IAudioProvider {
    public abstract virtual AudioDefinition GetAudioCue(ITag tag);
}
internal interface Microsoft.VisualStudio.Text.Editor.IBufferPrimitives {
    public TextBuffer Buffer { get; }
    public abstract virtual TextBuffer get_Buffer();
}
internal interface Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService {
    public abstract virtual TextBuffer CreateTextBuffer(ITextBuffer textBuffer);
    public abstract virtual TextPoint CreateTextPoint(TextBuffer textBuffer, int position);
    public abstract virtual TextRange CreateTextRange(TextBuffer textBuffer, TextPoint startPoint, TextPoint endPoint);
}
internal interface Microsoft.VisualStudio.Text.Editor.IEditingState {
    public int Line { get; }
    public int Column { get; }
    public int Character { get; }
    public SelectionState SelectionState { get; }
    public bool OverwriteMode { get; }
    public Nullable`1<LineEnding> Newline { get; }
    public State LeadingCharacter { get; }
    public abstract virtual int get_Line();
    public abstract virtual int get_Column();
    public abstract virtual int get_Character();
    public abstract virtual SelectionState get_SelectionState();
    public abstract virtual bool get_OverwriteMode();
    public abstract virtual Nullable`1<LineEnding> get_Newline();
    public abstract virtual State get_LeadingCharacter();
}
internal interface Microsoft.VisualStudio.Text.Editor.IEditingStateFactory {
    public abstract virtual IEditingState GetOrCreateEditingState(ITextView textView);
}
internal interface Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService {
    public abstract virtual IViewPrimitives GetViewPrimitives(ITextView textView);
    public abstract virtual IBufferPrimitives GetBufferPrimitives(ITextBuffer textBuffer);
}
public interface Microsoft.VisualStudio.Text.Editor.IMapEditToData {
    public abstract virtual int MapEditToData(int editPoint);
    public abstract virtual int MapDataToEdit(int dataPoint);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EditingState/IndentationCharacterMargin")]
public class Microsoft.VisualStudio.Text.Editor.IndentationCharacterMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EditingState/InsertModeMargin")]
public class Microsoft.VisualStudio.Text.Editor.InsertModeMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("ChangeMargin/InteractiveGesture")]
internal class Microsoft.VisualStudio.Text.Editor.InteractiveChangeMarginGesture : EditorOptionDefinition`1<MouseClickKind> {
    public MouseClickKind Default { get; }
    public EditorOptionKey`1<MouseClickKind> Key { get; }
    public virtual MouseClickKind get_Default();
    public virtual EditorOptionKey`1<MouseClickKind> get_Key();
}
internal static class Microsoft.VisualStudio.Text.Editor.InternalOptions : object {
    public static string SuppressOutliningOptionName;
    public static EditorOptionKey`1<bool> SuppressOutliningOptionId;
    internal static EditorOptionKey`1<int> EditorVerticalScrollSensitivityId;
    internal static string EditorVerticalScrollSensitivityName;
    internal static EditorOptionKey`1<int> EditorHorizontalScrollSensitivityId;
    internal static string EditorHorizontalScrollSensitivityName;
    internal static string MaxRtfCopyLengthName;
    internal static EditorOptionKey`1<int> MaxRtfCopyLengthId;
    internal static string EnableRtfCopyName;
    internal static EditorOptionKey`1<bool> EnableRtfCopyId;
    internal static string UseAccurateClassificationForRtfCopyName;
    internal static EditorOptionKey`1<bool> UseAccurateClassificationForRtfCopyId;
    private static InternalOptions();
}
public interface Microsoft.VisualStudio.Text.Editor.IScrollMap {
    public bool AreElisionsExpanded { get; }
    public double Start { get; }
    public double End { get; }
    public double ThumbSize { get; }
    public abstract virtual double GetCoordinateAtBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual bool get_AreElisionsExpanded();
    public abstract virtual SnapshotPoint GetBufferPositionAtCoordinate(double coordinate);
    public abstract virtual double get_Start();
    public abstract virtual double get_End();
    public abstract virtual double get_ThumbSize();
}
public interface Microsoft.VisualStudio.Text.Editor.IScrollMapFactoryService {
    public abstract virtual IScrollMap Create(ITextView textView);
    public abstract virtual IScrollMap Create(ITextView textView, bool areElisionsExpanded);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/IsInContrastMode")]
public class Microsoft.VisualStudio.Text.Editor.IsInContrastModeOption : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/IsInHighContrastTheme")]
public class Microsoft.VisualStudio.Text.Editor.IsInHighContrastThemeOption : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public interface Microsoft.VisualStudio.Text.Editor.ISmartIndent {
    public abstract virtual Nullable`1<int> GetDesiredIndentation(ITextSnapshotLine line);
}
public interface Microsoft.VisualStudio.Text.Editor.ISmartIndentationService {
    public abstract virtual Nullable`1<int> GetDesiredIndentation(ITextView textView, ITextSnapshotLine line);
}
public interface Microsoft.VisualStudio.Text.Editor.ISmartIndentProvider {
    public abstract virtual ISmartIndent CreateSmartIndent(ITextView textView);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/IsViewportLeftClipped")]
public class Microsoft.VisualStudio.Text.Editor.IsViewportLeftClipped : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public interface Microsoft.VisualStudio.Text.Editor.ITextCaret {
    public ITextViewLine ContainingTextViewLine { get; }
    public double Left { get; }
    public double Width { get; }
    public double Right { get; }
    public double Top { get; }
    public double Height { get; }
    public double Bottom { get; }
    public CaretPosition Position { get; }
    public bool OverwriteMode { get; }
    public bool InVirtualSpace { get; }
    public bool IsHidden { get; public set; }
    public abstract virtual void EnsureVisible();
    public abstract virtual CaretPosition MoveTo(ITextViewLine textLine, double xCoordinate);
    public abstract virtual CaretPosition MoveTo(ITextViewLine textLine, double xCoordinate, bool captureHorizontalPosition);
    public abstract virtual CaretPosition MoveTo(ITextViewLine textLine);
    public abstract virtual CaretPosition MoveTo(SnapshotPoint bufferPosition);
    public abstract virtual CaretPosition MoveTo(SnapshotPoint bufferPosition, PositionAffinity caretAffinity);
    public abstract virtual CaretPosition MoveTo(SnapshotPoint bufferPosition, PositionAffinity caretAffinity, bool captureHorizontalPosition);
    public abstract virtual CaretPosition MoveTo(VirtualSnapshotPoint bufferPosition);
    public abstract virtual CaretPosition MoveTo(VirtualSnapshotPoint bufferPosition, PositionAffinity caretAffinity);
    public abstract virtual CaretPosition MoveTo(VirtualSnapshotPoint bufferPosition, PositionAffinity caretAffinity, bool captureHorizontalPosition);
    public abstract virtual CaretPosition MoveToPreferredCoordinates();
    public abstract virtual CaretPosition MoveToNextCaretPosition();
    public abstract virtual CaretPosition MoveToPreviousCaretPosition();
    public abstract virtual ITextViewLine get_ContainingTextViewLine();
    public abstract virtual double get_Left();
    public abstract virtual double get_Width();
    public abstract virtual double get_Right();
    public abstract virtual double get_Top();
    public abstract virtual double get_Height();
    public abstract virtual double get_Bottom();
    public abstract virtual CaretPosition get_Position();
    public abstract virtual bool get_OverwriteMode();
    public abstract virtual bool get_InVirtualSpace();
    public abstract virtual bool get_IsHidden();
    public abstract virtual void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PositionChanged(EventHandler`1<CaretPositionChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PositionChanged(EventHandler`1<CaretPositionChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextSelection {
    public ITextView TextView { get; }
    public NormalizedSnapshotSpanCollection SelectedSpans { get; }
    public ReadOnlyCollection`1<VirtualSnapshotSpan> VirtualSelectedSpans { get; }
    public VirtualSnapshotSpan StreamSelectionSpan { get; }
    public TextSelectionMode Mode { get; public set; }
    public bool IsReversed { get; }
    public bool IsEmpty { get; }
    public bool IsActive { get; public set; }
    public bool ActivationTracksFocus { get; public set; }
    public VirtualSnapshotPoint ActivePoint { get; }
    public VirtualSnapshotPoint AnchorPoint { get; }
    public VirtualSnapshotPoint Start { get; }
    public VirtualSnapshotPoint End { get; }
    public abstract virtual ITextView get_TextView();
    public abstract virtual void Select(SnapshotSpan selectionSpan, bool isReversed);
    public abstract virtual void Select(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint);
    public abstract virtual NormalizedSnapshotSpanCollection get_SelectedSpans();
    public abstract virtual ReadOnlyCollection`1<VirtualSnapshotSpan> get_VirtualSelectedSpans();
    public abstract virtual Nullable`1<VirtualSnapshotSpan> GetSelectionOnTextViewLine(ITextViewLine line);
    public abstract virtual VirtualSnapshotSpan get_StreamSelectionSpan();
    public abstract virtual TextSelectionMode get_Mode();
    public abstract virtual void set_Mode(TextSelectionMode value);
    public abstract virtual bool get_IsReversed();
    public abstract virtual void Clear();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    public abstract virtual bool get_ActivationTracksFocus();
    public abstract virtual void set_ActivationTracksFocus(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanged(EventHandler value);
    public abstract virtual VirtualSnapshotPoint get_ActivePoint();
    public abstract virtual VirtualSnapshotPoint get_AnchorPoint();
    public abstract virtual VirtualSnapshotPoint get_Start();
    public abstract virtual VirtualSnapshotPoint get_End();
}
public interface Microsoft.VisualStudio.Text.Editor.ITextView {
    public bool InLayout { get; }
    public IViewScroller ViewScroller { get; }
    public ITextViewLineCollection TextViewLines { get; }
    public ITextCaret Caret { get; }
    public ITextSelection Selection { get; }
    public ITrackingSpan ProvisionalTextHighlight { get; public set; }
    public ITextViewRoleSet Roles { get; }
    public ITextBuffer TextBuffer { get; }
    public IBufferGraph BufferGraph { get; }
    public ITextSnapshot TextSnapshot { get; }
    public ITextSnapshot VisualSnapshot { get; }
    public ITextViewModel TextViewModel { get; }
    public ITextDataModel TextDataModel { get; }
    public double MaxTextRightCoordinate { get; }
    public double ViewportLeft { get; public set; }
    public double ViewportTop { get; }
    public double ViewportRight { get; }
    public double ViewportBottom { get; }
    public double ViewportWidth { get; }
    public double ViewportHeight { get; }
    public double LineHeight { get; }
    public bool IsClosed { get; }
    public IEditorOptions Options { get; }
    public bool IsMouseOverViewOrAdornments { get; }
    public bool HasAggregateFocus { get; }
    public abstract virtual void DisplayTextLineContainingBufferPosition(SnapshotPoint bufferPosition, double verticalDistance, ViewRelativePosition relativeTo);
    public abstract virtual void DisplayTextLineContainingBufferPosition(SnapshotPoint bufferPosition, double verticalDistance, ViewRelativePosition relativeTo, Nullable`1<double> viewportWidthOverride, Nullable`1<double> viewportHeightOverride);
    public abstract virtual SnapshotSpan GetTextElementSpan(SnapshotPoint point);
    public abstract virtual void Close();
    public abstract virtual void QueueSpaceReservationStackRefresh();
    public abstract virtual bool get_InLayout();
    public abstract virtual IViewScroller get_ViewScroller();
    public abstract virtual ITextViewLineCollection get_TextViewLines();
    public abstract virtual ITextViewLine GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual ITextCaret get_Caret();
    public abstract virtual ITextSelection get_Selection();
    public abstract virtual ITrackingSpan get_ProvisionalTextHighlight();
    public abstract virtual void set_ProvisionalTextHighlight(ITrackingSpan value);
    public abstract virtual ITextViewRoleSet get_Roles();
    public abstract virtual ITextBuffer get_TextBuffer();
    public abstract virtual IBufferGraph get_BufferGraph();
    public abstract virtual ITextSnapshot get_TextSnapshot();
    public abstract virtual ITextSnapshot get_VisualSnapshot();
    public abstract virtual ITextViewModel get_TextViewModel();
    public abstract virtual ITextDataModel get_TextDataModel();
    public abstract virtual double get_MaxTextRightCoordinate();
    public abstract virtual double get_ViewportLeft();
    public abstract virtual void set_ViewportLeft(double value);
    public abstract virtual double get_ViewportTop();
    public abstract virtual double get_ViewportRight();
    public abstract virtual double get_ViewportBottom();
    public abstract virtual double get_ViewportWidth();
    public abstract virtual double get_ViewportHeight();
    public abstract virtual double get_LineHeight();
    public abstract virtual bool get_IsClosed();
    public abstract virtual IEditorOptions get_Options();
    public abstract virtual bool get_IsMouseOverViewOrAdornments();
    public abstract virtual bool get_HasAggregateFocus();
    [CompilerGeneratedAttribute]
public abstract virtual void add_LayoutChanged(EventHandler`1<TextViewLayoutChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LayoutChanged(EventHandler`1<TextViewLayoutChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewportLeftChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewportLeftChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewportHeightChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewportHeightChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ViewportWidthChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ViewportWidthChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MouseHover(EventHandler`1<MouseHoverEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MouseHover(EventHandler`1<MouseHoverEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LostAggregateFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LostAggregateFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GotAggregateFocus(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GotAggregateFocus(EventHandler value);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextView2 {
    public bool InOuterLayout { get; }
    public IMultiSelectionBroker MultiSelectionBroker { get; }
    public abstract virtual bool get_InOuterLayout();
    public abstract virtual IMultiSelectionBroker get_MultiSelectionBroker();
    [CompilerGeneratedAttribute]
public abstract virtual void add_MaxTextRightCoordinateChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MaxTextRightCoordinateChanged(EventHandler value);
    public abstract virtual void QueuePostLayoutAction(Action action);
    public abstract virtual bool TryGetTextViewLines(ITextViewLineCollection& textViewLines);
    public abstract virtual bool TryGetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition, ITextViewLine& textViewLine);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewConnectionListener {
    public abstract virtual void SubjectBuffersConnected(ITextView textView, ConnectionReason reason, IReadOnlyCollection`1<ITextBuffer> subjectBuffers);
    public abstract virtual void SubjectBuffersDisconnected(ITextView textView, ConnectionReason reason, IReadOnlyCollection`1<ITextBuffer> subjectBuffers);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewCreationListener {
    public abstract virtual void TextViewCreated(ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewLineCollection {
    public ITextViewLine FirstVisibleLine { get; }
    public ITextViewLine LastVisibleLine { get; }
    public SnapshotSpan FormattedSpan { get; }
    public bool IsValid { get; }
    public abstract virtual bool ContainsBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual bool IntersectsBufferSpan(SnapshotSpan bufferSpan);
    public abstract virtual ITextViewLine GetTextViewLineContainingBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual ITextViewLine GetTextViewLineContainingYCoordinate(double y);
    public abstract virtual Collection`1<ITextViewLine> GetTextViewLinesIntersectingSpan(SnapshotSpan bufferSpan);
    public abstract virtual SnapshotSpan GetTextElementSpan(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetCharacterBounds(SnapshotPoint bufferPosition);
    public abstract virtual Collection`1<TextBounds> GetNormalizedTextBounds(SnapshotSpan bufferSpan);
    public abstract virtual int GetIndexOfTextLine(ITextViewLine textLine);
    public abstract virtual ITextViewLine get_FirstVisibleLine();
    public abstract virtual ITextViewLine get_LastVisibleLine();
    public abstract virtual SnapshotSpan get_FormattedSpan();
    public abstract virtual bool get_IsValid();
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewMargin {
    public double MarginSize { get; }
    public bool Enabled { get; }
    public abstract virtual double get_MarginSize();
    public abstract virtual bool get_Enabled();
    public abstract virtual ITextViewMargin GetTextViewMargin(string marginName);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewModel {
    public ITextDataModel DataModel { get; }
    public ITextBuffer DataBuffer { get; }
    public ITextBuffer EditBuffer { get; }
    public ITextBuffer VisualBuffer { get; }
    public abstract virtual ITextDataModel get_DataModel();
    public abstract virtual ITextBuffer get_DataBuffer();
    public abstract virtual ITextBuffer get_EditBuffer();
    public abstract virtual ITextBuffer get_VisualBuffer();
    public abstract virtual bool IsPointInVisualBuffer(SnapshotPoint editBufferPoint, PositionAffinity affinity);
    public abstract virtual SnapshotPoint GetNearestPointInVisualBuffer(SnapshotPoint editBufferPoint);
    public abstract virtual SnapshotPoint GetNearestPointInVisualSnapshot(SnapshotPoint editBufferPoint, ITextSnapshot targetVisualSnapshot, PointTrackingMode trackingMode);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewModelProvider {
    public abstract virtual ITextViewModel CreateTextViewModel(ITextDataModel dataModel, ITextViewRoleSet roles);
}
public interface Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet {
    public abstract virtual bool Contains(string textViewRole);
    public abstract virtual bool ContainsAll(IEnumerable`1<string> textViewRoles);
    public abstract virtual bool ContainsAny(IEnumerable`1<string> textViewRoles);
    public abstract virtual ITextViewRoleSet UnionWith(ITextViewRoleSet roleSet);
}
internal interface Microsoft.VisualStudio.Text.Editor.ITextViewZoomManager {
    public abstract virtual void ZoomIn(ITextView textView);
    public abstract virtual void ZoomOut(ITextView textView);
    public abstract virtual void ZoomTo(ITextView textView, double zoomLevel);
    public abstract virtual bool CanZoomIn(ITextView textView);
    public abstract virtual bool CanZoomOut(ITextView textView);
    public abstract virtual bool CanZoomTo(ITextView textView, double zoomLevel);
}
public interface Microsoft.VisualStudio.Text.Editor.IVerticalFractionMap {
    public ITextView TextView { get; }
    public abstract virtual ITextView get_TextView();
    public abstract virtual double GetFractionAtBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual SnapshotPoint GetBufferPositionAtFraction(double fraction);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MappingChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MappingChanged(EventHandler value);
}
public interface Microsoft.VisualStudio.Text.Editor.IVerticalScrollBar {
    public IScrollMap Map { get; }
    public double ThumbHeight { get; }
    public double TrackSpanTop { get; }
    public double TrackSpanBottom { get; }
    public double TrackSpanHeight { get; }
    public abstract virtual IScrollMap get_Map();
    public abstract virtual double GetYCoordinateOfBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual double GetYCoordinateOfScrollMapPosition(double scrollMapPosition);
    public abstract virtual SnapshotPoint GetBufferPositionOfYCoordinate(double y);
    public abstract virtual double get_ThumbHeight();
    public abstract virtual double get_TrackSpanTop();
    public abstract virtual double get_TrackSpanBottom();
    public abstract virtual double get_TrackSpanHeight();
    [CompilerGeneratedAttribute]
public abstract virtual void add_TrackSpanChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TrackSpanChanged(EventHandler value);
}
internal interface Microsoft.VisualStudio.Text.Editor.IViewPrimitives {
    public TextView View { get; }
    public LegacySelection Selection { get; }
    public Caret Caret { get; }
    public abstract virtual TextView get_View();
    public abstract virtual LegacySelection get_Selection();
    public abstract virtual Caret get_Caret();
}
internal interface Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService {
    public abstract virtual TextView CreateTextView(ITextView textView);
    public abstract virtual DisplayTextPoint CreateDisplayTextPoint(TextView textView, int position);
    public abstract virtual DisplayTextRange CreateDisplayTextRange(TextView textView, TextRange textRange);
    public abstract virtual LegacySelection CreateSelection(TextView textView);
    public abstract virtual Caret CreateCaret(TextView textView);
}
public interface Microsoft.VisualStudio.Text.Editor.IViewScroller {
    public abstract virtual void ScrollViewportVerticallyByPixels(double distanceToScroll);
    public abstract virtual void ScrollViewportVerticallyByLine(ScrollDirection direction);
    public abstract virtual void ScrollViewportVerticallyByLines(ScrollDirection direction, int count);
    public abstract virtual bool ScrollViewportVerticallyByPage(ScrollDirection direction);
    public abstract virtual void ScrollViewportHorizontallyByPixels(double distanceToScroll);
    public abstract virtual void EnsureSpanVisible(SnapshotSpan span);
    public abstract virtual void EnsureSpanVisible(SnapshotSpan span, EnsureSpanVisibleOptions options);
    public abstract virtual void EnsureSpanVisible(VirtualSnapshotSpan span, EnsureSpanVisibleOptions options);
}
internal interface Microsoft.VisualStudio.Text.Editor.IViewScroller2 {
    public double ColumnWidth { get; }
    public abstract virtual double get_ColumnWidth();
    public abstract virtual void ScrollColumnLeft();
    public abstract virtual void ScrollColumnRight();
}
internal abstract class Microsoft.VisualStudio.Text.Editor.LegacySelection : DisplayTextRange {
    [EditorBrowsableAttribute("2")]
public ITextSelection AdvancedSelection { get; }
    public bool IsReversed { get; public set; }
    public abstract virtual void SelectRange(TextRange textRange);
    public abstract virtual void SelectRange(TextPoint selectionStart, TextPoint selectionEnd);
    public abstract virtual void SelectAll();
    public abstract virtual void SelectAll(bool moveCaretToEnd);
    public abstract virtual void ExtendSelection(TextPoint newEnd);
    public abstract virtual void Clear();
    public abstract virtual ITextSelection get_AdvancedSelection();
    public abstract virtual bool get_IsReversed();
    public abstract virtual void set_IsReversed(bool value);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EditingState/LineEndingMargin")]
public class Microsoft.VisualStudio.Text.Editor.LineEndingMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/LineNumberMargin")]
public class Microsoft.VisualStudio.Text.Editor.LineNumberMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/LineSpacing")]
public class Microsoft.VisualStudio.Text.Editor.LineSpacingOption : ViewOptionDefinition`1<double> {
    public double Default { get; }
    public EditorOptionKey`1<double> Key { get; }
    public virtual double get_Default();
    public virtual EditorOptionKey`1<double> get_Key();
}
[MetadataAttributeAttribute]
[AttributeUsageAttribute("452")]
public class Microsoft.VisualStudio.Text.Editor.MarginContainerAttribute : SingletonBaseMetadataAttribute {
    private string marginContainer;
    public string MarginContainer { get; }
    public MarginContainerAttribute(string marginContainer);
    public string get_MarginContainer();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("MaxLineOfStickyScroll")]
internal class Microsoft.VisualStudio.Text.Editor.MaxLineOfStickyScrollOption : EditorOptionDefinition`1<int> {
    public int Default { get; }
    public EditorOptionKey`1<int> Key { get; }
    public virtual int get_Default();
    public virtual EditorOptionKey`1<int> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/MinimumErrorSeverity")]
public class Microsoft.VisualStudio.Text.Editor.MinimumErrorSeverity : ViewOptionDefinition`1<string> {
    public string Default { get; }
    public EditorOptionKey`1<string> Key { get; }
    public virtual string get_Default();
    public virtual EditorOptionKey`1<string> get_Key();
}
internal enum Microsoft.VisualStudio.Text.Editor.MouseClickKind : Enum {
    public int value__;
    public static MouseClickKind Off;
    public static MouseClickKind SingleClick;
    public static MouseClickKind DoubleClick;
}
[AttributeUsageAttribute("64")]
public class Microsoft.VisualStudio.Text.Editor.MouseHoverAttribute : Attribute {
    private int _delay;
    public int Delay { get; }
    public MouseHoverAttribute(int delay);
    public int get_Delay();
}
public class Microsoft.VisualStudio.Text.Editor.MouseHoverEventArgs : EventArgs {
    private ITextView _view;
    private int _position;
    private IMappingPoint _textPosition;
    public ITextView View { get; }
    public int Position { get; }
    public IMappingPoint TextPosition { get; }
    public MouseHoverEventArgs(ITextView view, int position, IMappingPoint textPosition);
    public ITextView get_View();
    public int get_Position();
    public IMappingPoint get_TextPosition();
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Text.Editor.MultiCaret.MultiCaretExtensions : object {
    [ExtensionAttribute]
public static SelectionState GetSelectionState(IMultiSelectionBroker broker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewHostOptionExtensions : object {
    [ExtensionAttribute]
public static bool IsVerticalScrollBarEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsHorizontalScrollBarEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsGlyphMarginEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsSelectionMarginEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsLineNumberMarginEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsChangeTrackingEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsOutliningMarginEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsZoomControlEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsInContrastMode(IEditorOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Text.Editor.OptionsExtensionMethods.TextViewOptionExtensions : object {
    [ExtensionAttribute]
public static bool IsVirtualSpaceEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsOverwriteModeEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsAutoScrollEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static WordWrapStyles WordWrapStyle(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsVisibleWhitespaceEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsVisibleWhitespaceEnabledOnlyForSelection(IEditorOptions options);
    [ExtensionAttribute]
public static WhitespaceType VisibleWhitespaceTypes(IEditorOptions options);
    [ExtensionAttribute]
public static bool DoesViewProhibitUserInput(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsOutliningUndoEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsDragDropEditingEnabled(IEditorOptions options);
    [ExtensionAttribute]
public static bool IsViewportLeftClipped(IEditorOptions options);
    [ExtensionAttribute]
public static bool ShouldMoveCaretToEndOnSelectAll(IEditorOptions options);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/OutliningMargin")]
public class Microsoft.VisualStudio.Text.Editor.OutliningMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/OutliningUndo")]
public class Microsoft.VisualStudio.Text.Editor.OutliningUndoEnabled : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
internal class Microsoft.VisualStudio.Text.Editor.Overtype.OvertypeConfiguration : ValueType {
    [CompilerGeneratedAttribute]
private bool <AllowOvertypeCaretPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveSelection>k__BackingField;
    public bool AllowOvertypeCaretPrefix { get; }
    public bool PreserveSelection { get; }
    public OvertypeConfiguration(bool allowOvertypeCaretPrefix, bool preserveSelection);
    public OvertypeConfiguration(OvertypeConfiguration configuration);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_AllowOvertypeCaretPrefix();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_PreserveSelection();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/OverwriteMode")]
public class Microsoft.VisualStudio.Text.Editor.OverwriteMode : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public static class Microsoft.VisualStudio.Text.Editor.PredefinedMarginNames : object {
    public static string Left;
    public static string Right;
    public static string Top;
    public static string Bottom;
    public static string LeftSelection;
    public static string Outlining;
    public static string LineNumber;
    public static string HorizontalScrollBar;
    public static string HorizontalScrollBarContainer;
    public static string VerticalScrollBar;
    public static string VerticalScrollBarContainer;
    public static string RightControl;
    public static string BottomControl;
    public static string Spacer;
    public static string Glyph;
    public static string Suggestion;
    public static string ZoomControl;
    public static string BottomRightCorner;
    public static string OverviewChangeTracking;
    public static string OverviewMark;
    public static string OverviewError;
    public static string OverviewSourceImage;
    public static string FileHealthIndicator;
    public static string RowMargin;
    public static string ChrMargin;
    public static string ColMargin;
    public static string SelectionStateMargin;
    public static string InsertModeMargin;
    public static string LineEndingMargin;
    public static string IndentationCharacterMargin;
    internal static string OuterTextViewTopBoundaryMargin;
}
public static class Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles : object {
    public static string Document;
    public static string Structured;
    public static string Interactive;
    public static string Editable;
    public static string Analyzable;
    public static string Zoomable;
    public static string PrimaryDocument;
    public static string Debuggable;
    public static string PreviewTextView;
    public static string EmbeddedPeekTextView;
    public static string EmbeddedPeekDiffTextView;
    public static string CodeDefinitionView;
    public static string Printable;
    public static string ChangePreview;
    internal static string StickyScroll;
    internal static string SearchResultPreview;
    public static string TransparentBackground;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("PrimeEditorExtensions")]
internal class Microsoft.VisualStudio.Text.Editor.PrimeEditorExtensions : EditorOptionDefinition`1<PrimeEditorExtensionsKind> {
    public PrimeEditorExtensionsKind Default { get; }
    public EditorOptionKey`1<PrimeEditorExtensionsKind> Key { get; }
    public virtual PrimeEditorExtensionsKind get_Default();
    public virtual EditorOptionKey`1<PrimeEditorExtensionsKind> get_Key();
}
[FlagsAttribute]
internal enum Microsoft.VisualStudio.Text.Editor.PrimeEditorExtensionsKind : Enum {
    public int value__;
    public static PrimeEditorExtensionsKind None;
    public static PrimeEditorExtensionsKind CreationListeners;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ProduceScreenReaderFriendlyText")]
public class Microsoft.VisualStudio.Text.Editor.ProduceScreenReaderFriendlyText : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EditingState/RowColMargin")]
public class Microsoft.VisualStudio.Text.Editor.RowColMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public enum Microsoft.VisualStudio.Text.Editor.ScrollDirection : Enum {
    public int value__;
    public static ScrollDirection Up;
    public static ScrollDirection Down;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/SelectionMargin")]
public class Microsoft.VisualStudio.Text.Editor.SelectionMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EditingState/SelectionStateMargin")]
public class Microsoft.VisualStudio.Text.Editor.SelectionStateMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ShouldCaretsBeRendered")]
public class Microsoft.VisualStudio.Text.Editor.ShouldCaretsBeRendered : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ShouldMoveCaretToEndOnSelectAll")]
internal class Microsoft.VisualStudio.Text.Editor.ShouldMoveCaretToEndOnSelectAll : EditorOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ShouldSelectionsBeRendered")]
public class Microsoft.VisualStudio.Text.Editor.ShouldSelectionsBeRendered : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ShowBidirectionalTextControlCharacters")]
public class Microsoft.VisualStudio.Text.Editor.ShowBidirectionalTextControlCharactersOption : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ShowBlockStructure")]
public class Microsoft.VisualStudio.Text.Editor.ShowBlockStructure : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ErrorSquiggles")]
public class Microsoft.VisualStudio.Text.Editor.ShowErrorSquiggles : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/ShowNavigationBar")]
public class Microsoft.VisualStudio.Text.Editor.ShowNavigationBarOption : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/SelectionMatches")]
public class Microsoft.VisualStudio.Text.Editor.ShowSelectionMatches : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ShowZeroWidthCharacters")]
public class Microsoft.VisualStudio.Text.Editor.ShowZeroWidthCharactersOption : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
internal class Microsoft.VisualStudio.Text.Editor.SkipPreloadAttribute : SingletonBaseMetadataAttribute {
    public bool SkipPreload { get; }
    public bool get_SkipPreload();
}
internal enum Microsoft.VisualStudio.Text.Editor.StickyScrollScopeOverflowKind : Enum {
    public int value__;
    public static StickyScrollScopeOverflowKind ShowOuterScopes;
    public static StickyScrollScopeOverflowKind ShowInnerScopes;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("StickyScrollScopeOverflowKind")]
internal class Microsoft.VisualStudio.Text.Editor.StickyScrollScopeOverflowKindOption : EditorOptionDefinition`1<StickyScrollScopeOverflowKind> {
    public StickyScrollScopeOverflowKind Default { get; }
    public EditorOptionKey`1<StickyScrollScopeOverflowKind> Key { get; }
    public virtual StickyScrollScopeOverflowKind get_Default();
    public virtual EditorOptionKey`1<StickyScrollScopeOverflowKind> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/SuggestionMargin")]
public class Microsoft.VisualStudio.Text.Editor.SuggestionMarginEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ObsoleteAttribute("Do not use. This interface has not been finalized and may change without warning.")]
public class Microsoft.VisualStudio.Text.Editor.Tags.ContainerStructureTag : StructureTag {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<SubHeadingStructureData> <SubHeadings>k__BackingField;
    [NullableAttribute("2")]
public IReadOnlyList`1<SubHeadingStructureData> SubHeadings { get; }
    [NullableContextAttribute("2")]
public ContainerStructureTag(ITextSnapshot snapshot, Nullable`1<Span> outliningSpan, Nullable`1<Span> headerSpan, Nullable`1<Span> guideLineSpan, Nullable`1<int> guideLineHorizontalAnchor, string type, bool isCollapsible, bool isDefaultCollapsed, bool isImplementation, object collapsedForm, object collapsedHintForm, IReadOnlyList`1<SubHeadingStructureData> subHeadings);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SubHeadingStructureData> get_SubHeadings();
}
internal abstract class Microsoft.VisualStudio.Text.Editor.TextBuffer : object {
    [EditorBrowsableAttribute("2")]
public ITextBuffer AdvancedTextBuffer { get; }
    public IEnumerable`1<TextRange> Lines { get; }
    public abstract virtual TextPoint GetTextPoint(int position);
    public abstract virtual TextPoint GetTextPoint(int line, int column);
    public abstract virtual TextRange GetLine(int line);
    public abstract virtual TextRange GetTextRange(TextPoint startPoint, TextPoint endPoint);
    public abstract virtual TextRange GetTextRange(int startPosition, int endPosition);
    public abstract virtual ITextBuffer get_AdvancedTextBuffer();
    public abstract virtual TextPoint GetStartPoint();
    public abstract virtual TextPoint GetEndPoint();
    public abstract virtual IEnumerable`1<TextRange> get_Lines();
}
internal abstract class Microsoft.VisualStudio.Text.Editor.TextPoint : object {
    public TextBuffer TextBuffer { get; }
    public int CurrentPosition { get; }
    public int Column { get; }
    public int LineNumber { get; }
    public int StartOfLine { get; }
    public int EndOfLine { get; }
    [EditorBrowsableAttribute("2")]
public SnapshotPoint AdvancedTextPoint { get; }
    public abstract virtual TextBuffer get_TextBuffer();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual int get_Column();
    public abstract virtual bool DeleteNext();
    public abstract virtual bool DeletePrevious();
    [EditorBrowsableAttribute("2")]
public abstract virtual TextPoint GetFirstNonWhiteSpaceCharacterOnLine();
    public abstract virtual TextRange GetCurrentWord();
    public abstract virtual TextRange GetCurrentWord(bool findSubWord);
    public abstract virtual TextRange GetCurrentSubWord();
    public abstract virtual TextRange GetNextWord();
    public abstract virtual TextRange GetNextSubWord();
    public abstract virtual TextRange GetPreviousWord();
    public abstract virtual TextRange GetPreviousSubWord();
    public abstract virtual TextRange GetTextRange(TextPoint otherPoint);
    public abstract virtual TextRange GetTextRange(int otherPosition);
    public abstract virtual bool InsertNewLine();
    public abstract virtual bool InsertIndent();
    public abstract virtual bool InsertText(string text);
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_StartOfLine();
    public abstract virtual int get_EndOfLine();
    public abstract virtual bool RemovePreviousIndent();
    public abstract virtual bool TransposeCharacter();
    public abstract virtual bool TransposeLine();
    public abstract virtual bool TransposeLine(int lineNumber);
    public abstract virtual SnapshotPoint get_AdvancedTextPoint();
    public abstract virtual string GetNextCharacter();
    public abstract virtual string GetPreviousCharacter();
    public abstract virtual TextRange Find(string pattern, FindOptions findOptions, TextPoint endPoint);
    public abstract virtual TextRange Find(string pattern, TextPoint endPoint);
    public abstract virtual TextRange Find(string pattern, FindOptions findOptions);
    public abstract virtual TextRange Find(string pattern);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, TextPoint endPoint);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, FindOptions findOptions, TextPoint endPoint);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, FindOptions findOptions);
    public abstract virtual void MoveTo(int position);
    public abstract virtual void MoveToNextCharacter();
    public abstract virtual void MoveToPreviousCharacter();
    public TextPoint Clone();
    protected abstract virtual TextPoint CloneInternal();
    public abstract virtual void MoveToLine(int lineNumber);
    public abstract virtual void MoveToEndOfLine();
    public abstract virtual void MoveToStartOfLine();
    public abstract virtual void MoveToEndOfDocument();
    public abstract virtual void MoveToStartOfDocument();
    public abstract virtual void MoveToBeginningOfNextLine();
    public abstract virtual void MoveToBeginningOfPreviousLine();
    public abstract virtual void MoveToNextWord();
    public abstract virtual void MoveToNextSubWord();
    public abstract virtual void MoveToPreviousWord();
    public abstract virtual void MoveToPreviousSubWord();
}
internal abstract class Microsoft.VisualStudio.Text.Editor.TextRange : object {
    public TextBuffer TextBuffer { get; }
    [EditorBrowsableAttribute("2")]
public SnapshotSpan AdvancedTextRange { get; }
    public bool IsEmpty { get; }
    public abstract virtual TextPoint GetStartPoint();
    public abstract virtual TextPoint GetEndPoint();
    public abstract virtual TextBuffer get_TextBuffer();
    public abstract virtual SnapshotSpan get_AdvancedTextRange();
    public abstract virtual bool MakeUppercase();
    public abstract virtual bool MakeLowercase();
    public abstract virtual bool Capitalize();
    public abstract virtual bool ToggleCase();
    public abstract virtual bool Delete();
    public abstract virtual bool Indent();
    public abstract virtual bool Unindent();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual TextRange Find(string pattern);
    public abstract virtual TextRange Find(string pattern, FindOptions findOptions);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern);
    public abstract virtual Collection`1<TextRange> FindAll(string pattern, FindOptions findOptions);
    public abstract virtual bool ReplaceText(string newText);
    public abstract virtual string GetText();
    public TextRange Clone();
    protected abstract virtual TextRange CloneInternal();
    public abstract virtual void SetStart(TextPoint startPoint);
    public abstract virtual void SetEnd(TextPoint endPoint);
    public abstract virtual void MoveTo(TextRange newRange);
    protected abstract virtual IEnumerator`1<TextPoint> GetEnumeratorInternal();
    public sealed virtual IEnumerator`1<TextPoint> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.VisualStudio.Text.Editor.TextSelectionMode : Enum {
    public int value__;
    public static TextSelectionMode Stream;
    public static TextSelectionMode Box;
}
internal abstract class Microsoft.VisualStudio.Text.Editor.TextView : object {
    public DisplayTextRange VisibleSpan { get; }
    [EditorBrowsableAttribute("2")]
public ITextView AdvancedTextView { get; }
    public Caret Caret { get; }
    public LegacySelection Selection { get; }
    public TextBuffer TextBuffer { get; }
    public abstract virtual void MoveLineToTop(int lineNumber);
    public abstract virtual void MoveLineToBottom(int lineNumber);
    public abstract virtual void ScrollUp(int lines);
    public abstract virtual void ScrollDown(int lines);
    public abstract virtual void ScrollPageDown();
    public abstract virtual void ScrollPageUp();
    public abstract virtual bool Show(DisplayTextPoint point, HowToShow howToShow);
    public abstract virtual VisibilityState Show(DisplayTextRange textRange, HowToShow howToShow);
    public abstract virtual DisplayTextPoint GetTextPoint(int position);
    public abstract virtual DisplayTextPoint GetTextPoint(TextPoint textPoint);
    public abstract virtual DisplayTextPoint GetTextPoint(int line, int column);
    public abstract virtual DisplayTextRange GetTextRange(TextPoint startPoint, TextPoint endPoint);
    public abstract virtual DisplayTextRange GetTextRange(TextRange textRange);
    public abstract virtual DisplayTextRange GetTextRange(int startPosition, int endPosition);
    public abstract virtual DisplayTextRange get_VisibleSpan();
    public abstract virtual ITextView get_AdvancedTextView();
    public abstract virtual Caret get_Caret();
    public abstract virtual LegacySelection get_Selection();
    public abstract virtual TextBuffer get_TextBuffer();
}
public class Microsoft.VisualStudio.Text.Editor.TextViewCreatedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ITextView <TextView>k__BackingField;
    public ITextView TextView { get; private set; }
    public TextViewCreatedEventArgs(ITextView textView);
    [CompilerGeneratedAttribute]
public ITextView get_TextView();
    [CompilerGeneratedAttribute]
private void set_TextView(ITextView value);
}
[ExtensionAttribute]
public static class Microsoft.VisualStudio.Text.Editor.TextViewExtensions : object {
    internal static string ViewTelemetryKey;
    [ExtensionAttribute]
public static bool IsEmbeddedTextView(ITextView textView);
    [ExtensionAttribute]
public static bool IsReadOnlyTextView(ITextView textView);
    [ExtensionAttribute]
public static bool TryGetContainingTextView(ITextView textView, ITextView& containingTextView);
    [ExtensionAttribute]
public static bool GetInOuterLayout(ITextView textView);
    [ExtensionAttribute]
public static IMultiSelectionBroker GetMultiSelectionBroker(ITextView textView);
    [ExtensionAttribute]
public static void QueuePostLayoutAction(ITextView textView, Action action);
    [ExtensionAttribute]
public static bool TryGetTextViewLines(ITextView textView, ITextViewLineCollection& textViewLines);
    [ExtensionAttribute]
public static bool TryGetTextViewLineContainingBufferPosition(ITextView textView, SnapshotPoint bufferPosition, ITextViewLine& textViewLine);
    [ExtensionAttribute]
internal static bool TryMoveCaretToAndEnsureVisible(ITextView textView, SnapshotPoint point, IOutliningManagerService outliningManagerService, EnsureSpanVisibleOptions ensureSpanVisibleOptions);
    [ExtensionAttribute]
internal static bool TryMoveCaretToAndEnsureVisible(ITextView textView, VirtualSnapshotPoint point, IOutliningManagerService outliningManagerService, EnsureSpanVisibleOptions ensureSpanVisibleOptions);
    [ExtensionAttribute]
internal static void SelectSpan(ITextView textView, SnapshotSpan span, IOutliningManagerService outliningManagerService, EnsureSpanVisibleOptions ensureSpanVisibleOptions);
    [ExtensionAttribute]
internal static void NavigateToLineAndColumn(ITextView textView, int lineNumber, int columnNumber, IOutliningManagerService outliningManagerService, EnsureSpanVisibleOptions ensureSpanVisibleOptions);
    [ExtensionAttribute]
internal static Nullable`1<SnapshotPoint> GetPositionInView(ITextView textView, SnapshotPoint point);
    [ExtensionAttribute]
internal static void AddTelemetryData(ITextView view, string eventName, string propertyName, T initialValue, Func`2<T, T> mutator);
}
public class Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs : EventArgs {
    private ViewState _oldViewState;
    private ViewState _newViewState;
    private ReadOnlyCollection`1<ITextViewLine> _newOrReformattedLines;
    private ReadOnlyCollection`1<ITextViewLine> _translatedLines;
    private NormalizedSnapshotSpanCollection _newOrReformattedSpans;
    private NormalizedSnapshotSpanCollection _translatedSpans;
    public ViewState OldViewState { get; }
    public ViewState NewViewState { get; }
    public bool HorizontalTranslation { get; }
    public bool VerticalTranslation { get; }
    public ITextSnapshot OldSnapshot { get; }
    public ITextSnapshot NewSnapshot { get; }
    public ReadOnlyCollection`1<ITextViewLine> NewOrReformattedLines { get; }
    public ReadOnlyCollection`1<ITextViewLine> TranslatedLines { get; }
    public NormalizedSnapshotSpanCollection NewOrReformattedSpans { get; }
    public NormalizedSnapshotSpanCollection TranslatedSpans { get; }
    public bool AnyEditBufferChanges { get; }
    public bool AnyVisualBufferChanges { get; }
    public TextViewLayoutChangedEventArgs(ViewState oldState, ViewState newState, IList`1<ITextViewLine> newOrReformattedLines, IList`1<ITextViewLine> translatedLines);
    internal static NormalizedSnapshotSpanCollection GetSpans(IList`1<ITextViewLine> lines);
    public ViewState get_OldViewState();
    public ViewState get_NewViewState();
    public bool get_HorizontalTranslation();
    public bool get_VerticalTranslation();
    public ITextSnapshot get_OldSnapshot();
    public ITextSnapshot get_NewSnapshot();
    public ReadOnlyCollection`1<ITextViewLine> get_NewOrReformattedLines();
    public ReadOnlyCollection`1<ITextViewLine> get_TranslatedLines();
    public NormalizedSnapshotSpanCollection get_NewOrReformattedSpans();
    public NormalizedSnapshotSpanCollection get_TranslatedSpans();
    public bool get_AnyEditBufferChanges();
    public bool get_AnyVisualBufferChanges();
}
public class Microsoft.VisualStudio.Text.Editor.TextViewRoleAttribute : MultipleBaseMetadataAttribute {
    private string roles;
    public string TextViewRoles { get; }
    public TextViewRoleAttribute(string role);
    public string get_TextViewRoles();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("EditingState/UpdateIndentationCharacterOnEdit")]
public class Microsoft.VisualStudio.Text.Editor.UpdateIndentationCharacterOption : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/UseVirtualSpace")]
public class Microsoft.VisualStudio.Text.Editor.UseVirtualSpace : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/UseVisibleWhitespace")]
public class Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespace : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/UseVisibleWhitespace/Include")]
public class Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceEnabledTypes : ViewOptionDefinition`1<WhitespaceType> {
    public WhitespaceType Default { get; }
    public EditorOptionKey`1<WhitespaceType> Key { get; }
    public virtual WhitespaceType get_Default();
    public virtual EditorOptionKey`1<WhitespaceType> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/UseVisibleWhitespace/OnlyForSelection")]
public class Microsoft.VisualStudio.Text.Editor.UseVisibleWhitespaceOnlyForSelection : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/VerticalRulers")]
internal class Microsoft.VisualStudio.Text.Editor.VerticalRulersOption : EditorOptionDefinition`1<IReadOnlyList`1<int>> {
    public IReadOnlyList`1<int> Default { get; }
    public EditorOptionKey`1<IReadOnlyList`1<int>> Key { get; }
    public virtual IReadOnlyList`1<int> get_Default();
    public virtual EditorOptionKey`1<IReadOnlyList`1<int>> get_Key();
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/VerticalScrollBar")]
public class Microsoft.VisualStudio.Text.Editor.VerticalScrollBarEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public abstract class Microsoft.VisualStudio.Text.Editor.ViewOptionDefinition`1 : EditorOptionDefinition`1<T> {
    public virtual bool IsApplicableToScope(IPropertyOwner scope);
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/ProhibitUserInput")]
public class Microsoft.VisualStudio.Text.Editor.ViewProhibitUserInput : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public enum Microsoft.VisualStudio.Text.Editor.ViewRelativePosition : Enum {
    public int value__;
    public static ViewRelativePosition Top;
    public static ViewRelativePosition Bottom;
}
public class Microsoft.VisualStudio.Text.Editor.ViewState : object {
    [CompilerGeneratedAttribute]
private double <ViewportLeft>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ViewportTop>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ViewportWidth>k__BackingField;
    [CompilerGeneratedAttribute]
private double <ViewportHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextSnapshot <VisualSnapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextSnapshot <EditSnapshot>k__BackingField;
    public double ViewportLeft { get; private set; }
    public double ViewportTop { get; private set; }
    public double ViewportWidth { get; private set; }
    public double ViewportHeight { get; private set; }
    public double ViewportRight { get; }
    public double ViewportBottom { get; }
    public ITextSnapshot VisualSnapshot { get; private set; }
    public ITextSnapshot EditSnapshot { get; private set; }
    public ViewState(ITextView view, double effectiveViewportWidth, double effectiveViewportHeight);
    public ViewState(ITextView view);
    [CompilerGeneratedAttribute]
public double get_ViewportLeft();
    [CompilerGeneratedAttribute]
private void set_ViewportLeft(double value);
    [CompilerGeneratedAttribute]
public double get_ViewportTop();
    [CompilerGeneratedAttribute]
private void set_ViewportTop(double value);
    [CompilerGeneratedAttribute]
public double get_ViewportWidth();
    [CompilerGeneratedAttribute]
private void set_ViewportWidth(double value);
    [CompilerGeneratedAttribute]
public double get_ViewportHeight();
    [CompilerGeneratedAttribute]
private void set_ViewportHeight(double value);
    public double get_ViewportRight();
    public double get_ViewportBottom();
    [CompilerGeneratedAttribute]
public ITextSnapshot get_VisualSnapshot();
    [CompilerGeneratedAttribute]
private void set_VisualSnapshot(ITextSnapshot value);
    [CompilerGeneratedAttribute]
public ITextSnapshot get_EditSnapshot();
    [CompilerGeneratedAttribute]
private void set_EditSnapshot(ITextSnapshot value);
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Editor.WhitespaceType : Enum {
    public int value__;
    public static WhitespaceType None;
    public static WhitespaceType Spaces;
    public static WhitespaceType Tabs;
    public static WhitespaceType LineEndings;
    public static WhitespaceType Ideographics;
    public static WhitespaceType All;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextView/WordWrapStyle")]
public class Microsoft.VisualStudio.Text.Editor.WordWrapStyle : ViewOptionDefinition`1<WordWrapStyles> {
    public WordWrapStyles Default { get; }
    public EditorOptionKey`1<WordWrapStyles> Key { get; }
    public virtual WordWrapStyles get_Default();
    public virtual EditorOptionKey`1<WordWrapStyles> get_Key();
}
[FlagsAttribute]
public enum Microsoft.VisualStudio.Text.Editor.WordWrapStyles : Enum {
    public int value__;
    public static WordWrapStyles None;
    public static WordWrapStyles WordWrap;
    public static WordWrapStyles VisibleGlyphs;
    public static WordWrapStyles AutoIndent;
}
public static class Microsoft.VisualStudio.Text.Editor.ZoomConstants : object {
    public static double MaxZoom;
    public static double MinZoom;
    public static double DefaultZoom;
    public static double ScalingFactor;
}
[ExportAttribute("Microsoft.VisualStudio.Text.Editor.EditorOptionDefinition")]
[NameAttribute("TextViewHost/ZoomControl")]
public class Microsoft.VisualStudio.Text.Editor.ZoomControlEnabled : ViewOptionDefinition`1<bool> {
    public bool Default { get; }
    public EditorOptionKey`1<bool> Key { get; }
    public virtual bool get_Default();
    public virtual EditorOptionKey`1<bool> get_Key();
}
public interface Microsoft.VisualStudio.Text.Formatting.IAdornmentElement {
    public double Width { get; }
    public double TopSpace { get; }
    public double Baseline { get; }
    public double TextHeight { get; }
    public double BottomSpace { get; }
    public object IdentityTag { get; }
    public object ProviderTag { get; }
    public PositionAffinity Affinity { get; }
    public abstract virtual double get_Width();
    public abstract virtual double get_TopSpace();
    public abstract virtual double get_Baseline();
    public abstract virtual double get_TextHeight();
    public abstract virtual double get_BottomSpace();
    public abstract virtual object get_IdentityTag();
    public abstract virtual object get_ProviderTag();
    public abstract virtual PositionAffinity get_Affinity();
}
public interface Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService {
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, string delimiter);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, ITextView textView, string delimiter);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2 {
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, string delimiter, CancellationToken cancellationToken);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, CancellationToken cancellationToken);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, ITextView textView, string delimiter, CancellationToken cancellationToken);
    public abstract virtual string GenerateRtf(NormalizedSnapshotSpanCollection spans, ITextView textView, CancellationToken cancellationToken);
}
internal interface Microsoft.VisualStudio.Text.Formatting.IRtfBuilderServiceInternal {
    [NullableContextAttribute("1")]
public abstract virtual string GenerateRtfInternal(NormalizedSnapshotSpanCollection spans, ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Formatting.ISequenceElement {
    public IMappingSpan Span { get; }
    public bool ShouldRenderText { get; }
    public abstract virtual IMappingSpan get_Span();
    public abstract virtual bool get_ShouldRenderText();
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection {
    public ITextAndAdornmentSequencer Sequencer { get; }
    public abstract virtual ITextAndAdornmentSequencer get_Sequencer();
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencer {
    public IBufferGraph BufferGraph { get; }
    public ITextBuffer TopBuffer { get; }
    public ITextBuffer SourceBuffer { get; }
    public abstract virtual IBufferGraph get_BufferGraph();
    public abstract virtual ITextBuffer get_TopBuffer();
    public abstract virtual ITextBuffer get_SourceBuffer();
    public abstract virtual ITextAndAdornmentCollection CreateTextAndAdornmentCollection(ITextSnapshotLine topLine, ITextSnapshot sourceTextSnapshot);
    public abstract virtual ITextAndAdornmentCollection CreateTextAndAdornmentCollection(SnapshotSpan topSpan, ITextSnapshot sourceTextSnapshot);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SequenceChanged(EventHandler`1<TextAndAdornmentSequenceChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SequenceChanged(EventHandler`1<TextAndAdornmentSequenceChangedEventArgs> value);
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerFactoryService {
    public abstract virtual ITextAndAdornmentSequencer Create(ITextView view);
}
internal interface Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentSequencerInternal {
    [NullableContextAttribute("1")]
public abstract virtual ITextAndAdornmentCollection CreateTextAndAdornmentCollection(TextSnapshotLineData topLine, ITextSnapshot sourceTextSnapshot);
}
public interface Microsoft.VisualStudio.Text.Formatting.ITextViewLine {
    public object IdentityTag { get; }
    public ITextSnapshot Snapshot { get; }
    public bool IsFirstTextViewLineForSnapshotLine { get; }
    public bool IsLastTextViewLineForSnapshotLine { get; }
    public double Baseline { get; }
    public SnapshotSpan Extent { get; }
    public IMappingSpan ExtentAsMappingSpan { get; }
    public SnapshotSpan ExtentIncludingLineBreak { get; }
    public IMappingSpan ExtentIncludingLineBreakAsMappingSpan { get; }
    public SnapshotPoint Start { get; }
    public int Length { get; }
    public int LengthIncludingLineBreak { get; }
    public SnapshotPoint End { get; }
    public SnapshotPoint EndIncludingLineBreak { get; }
    public int LineBreakLength { get; }
    public double Left { get; }
    public double Top { get; }
    public double Height { get; }
    public double TextTop { get; }
    public double TextBottom { get; }
    public double TextHeight { get; }
    public double TextLeft { get; }
    public double TextRight { get; }
    public double TextWidth { get; }
    public double Width { get; }
    public double Bottom { get; }
    public double Right { get; }
    public double EndOfLineWidth { get; }
    public double VirtualSpaceWidth { get; }
    public bool IsValid { get; }
    public LineTransform LineTransform { get; }
    public LineTransform DefaultLineTransform { get; }
    public VisibilityState VisibilityState { get; }
    public double DeltaY { get; }
    public TextViewLineChange Change { get; }
    public abstract virtual Nullable`1<SnapshotPoint> GetBufferPositionFromXCoordinate(double xCoordinate, bool textOnly);
    public abstract virtual Nullable`1<SnapshotPoint> GetBufferPositionFromXCoordinate(double xCoordinate);
    public abstract virtual VirtualSnapshotPoint GetVirtualBufferPositionFromXCoordinate(double xCoordinate);
    public abstract virtual VirtualSnapshotPoint GetInsertionBufferPositionFromXCoordinate(double xCoordinate);
    public abstract virtual bool ContainsBufferPosition(SnapshotPoint bufferPosition);
    public abstract virtual SnapshotSpan GetTextElementSpan(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetCharacterBounds(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetCharacterBounds(VirtualSnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetExtendedCharacterBounds(SnapshotPoint bufferPosition);
    public abstract virtual TextBounds GetExtendedCharacterBounds(VirtualSnapshotPoint bufferPosition);
    public abstract virtual Nullable`1<TextBounds> GetAdornmentBounds(object identityTag);
    public abstract virtual Collection`1<TextBounds> GetNormalizedTextBounds(SnapshotSpan bufferSpan);
    public abstract virtual object get_IdentityTag();
    public abstract virtual bool IntersectsBufferSpan(SnapshotSpan bufferSpan);
    public abstract virtual ReadOnlyCollection`1<object> GetAdornmentTags(object providerTag);
    public abstract virtual ITextSnapshot get_Snapshot();
    public abstract virtual bool get_IsFirstTextViewLineForSnapshotLine();
    public abstract virtual bool get_IsLastTextViewLineForSnapshotLine();
    public abstract virtual double get_Baseline();
    public abstract virtual SnapshotSpan get_Extent();
    public abstract virtual IMappingSpan get_ExtentAsMappingSpan();
    public abstract virtual SnapshotSpan get_ExtentIncludingLineBreak();
    public abstract virtual IMappingSpan get_ExtentIncludingLineBreakAsMappingSpan();
    public abstract virtual SnapshotPoint get_Start();
    public abstract virtual int get_Length();
    public abstract virtual int get_LengthIncludingLineBreak();
    public abstract virtual SnapshotPoint get_End();
    public abstract virtual SnapshotPoint get_EndIncludingLineBreak();
    public abstract virtual int get_LineBreakLength();
    public abstract virtual double get_Left();
    public abstract virtual double get_Top();
    public abstract virtual double get_Height();
    public abstract virtual double get_TextTop();
    public abstract virtual double get_TextBottom();
    public abstract virtual double get_TextHeight();
    public abstract virtual double get_TextLeft();
    public abstract virtual double get_TextRight();
    public abstract virtual double get_TextWidth();
    public abstract virtual double get_Width();
    public abstract virtual double get_Bottom();
    public abstract virtual double get_Right();
    public abstract virtual double get_EndOfLineWidth();
    public abstract virtual double get_VirtualSpaceWidth();
    public abstract virtual bool get_IsValid();
    public abstract virtual LineTransform get_LineTransform();
    public abstract virtual LineTransform get_DefaultLineTransform();
    public abstract virtual VisibilityState get_VisibilityState();
    public abstract virtual double get_DeltaY();
    public abstract virtual TextViewLineChange get_Change();
}
public class Microsoft.VisualStudio.Text.Formatting.LineTransform : ValueType {
    private double _topSpace;
    private double _bottomSpace;
    private double _verticalScale;
    private double _right;
    public double TopSpace { get; }
    public double BottomSpace { get; }
    public double VerticalScale { get; }
    public double Right { get; }
    public LineTransform(double verticalScale);
    public LineTransform(double topSpace, double bottomSpace, double verticalScale);
    public LineTransform(double topSpace, double bottomSpace, double verticalScale, double right);
    public double get_TopSpace();
    public double get_BottomSpace();
    public double get_VerticalScale();
    public double get_Right();
    public static LineTransform Combine(LineTransform transform1, LineTransform transform2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(LineTransform transform1, LineTransform transform2);
    public static bool op_Inequality(LineTransform transform1, LineTransform transform2);
}
public class Microsoft.VisualStudio.Text.Formatting.TextAndAdornmentSequenceChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IMappingSpan <Span>k__BackingField;
    public IMappingSpan Span { get; private set; }
    public TextAndAdornmentSequenceChangedEventArgs(IMappingSpan span);
    [CompilerGeneratedAttribute]
public IMappingSpan get_Span();
    [CompilerGeneratedAttribute]
private void set_Span(IMappingSpan value);
}
public class Microsoft.VisualStudio.Text.Formatting.TextBounds : ValueType {
    private double _leading;
    private double _top;
    private double _bidiWidth;
    private double _height;
    private double _textTop;
    private double _textHeight;
    public double Leading { get; }
    public double Top { get; }
    public double TextTop { get; }
    public double Width { get; }
    public double Height { get; }
    public double TextHeight { get; }
    public double Trailing { get; }
    public double Bottom { get; }
    public double TextBottom { get; }
    public double Left { get; }
    public double Right { get; }
    public bool IsRightToLeft { get; }
    public TextBounds(double leading, double top, double bidiWidth, double height, double textTop, double textHeight);
    public double get_Leading();
    public double get_Top();
    public double get_TextTop();
    public double get_Width();
    public double get_Height();
    public double get_TextHeight();
    public double get_Trailing();
    public double get_Bottom();
    public double get_TextBottom();
    public double get_Left();
    public double get_Right();
    public bool get_IsRightToLeft();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(TextBounds bounds1, TextBounds bounds2);
    public static bool op_Inequality(TextBounds bounds1, TextBounds bounds2);
}
public enum Microsoft.VisualStudio.Text.Formatting.TextViewLineChange : Enum {
    public int value__;
    public static TextViewLineChange None;
    public static TextViewLineChange NewOrReformatted;
    public static TextViewLineChange Translated;
}
public enum Microsoft.VisualStudio.Text.Formatting.VisibilityState : Enum {
    public int value__;
    public static VisibilityState Unattached;
    public static VisibilityState Hidden;
    public static VisibilityState PartiallyVisible;
    public static VisibilityState FullyVisible;
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Text.IMultiSelectionBroker {
    public ITextView TextView { get; }
    public ITextSnapshot CurrentSnapshot { get; }
    public IReadOnlyList`1<Selection> AllSelections { get; }
    public bool HasMultipleSelections { get; }
    public Selection PrimarySelection { get; }
    public Selection BoxSelection { get; }
    public bool IsBoxSelection { get; }
    public NormalizedSnapshotSpanCollection SelectedSpans { get; }
    public IReadOnlyList`1<VirtualSnapshotSpan> VirtualSelectedSpans { get; }
    public VirtualSnapshotSpan SelectionExtent { get; }
    public bool AreSelectionsActive { get; public set; }
    public bool ActivationTracksFocus { get; public set; }
    public abstract virtual ITextView get_TextView();
    public abstract virtual ITextSnapshot get_CurrentSnapshot();
    public abstract virtual IReadOnlyList`1<Selection> get_AllSelections();
    public abstract virtual bool get_HasMultipleSelections();
    public abstract virtual IReadOnlyList`1<Selection> GetSelectionsIntersectingSpan(SnapshotSpan span);
    public abstract virtual IReadOnlyList`1<Selection> GetSelectionsIntersectingSpans(NormalizedSnapshotSpanCollection spanCollection);
    public abstract virtual void AddSelection(Selection selection);
    public abstract virtual void AddSelectionRange(IEnumerable`1<Selection> range);
    public abstract virtual void SetSelection(Selection selection);
    public abstract virtual void SetSelectionRange(IEnumerable`1<Selection> range, Selection primary);
    public abstract virtual bool TryRemoveSelection(Selection selection);
    public abstract virtual Selection get_PrimarySelection();
    public abstract virtual bool TrySetAsPrimarySelection(Selection candidate);
    public abstract virtual void ClearSecondarySelections();
    public abstract virtual void PerformActionOnAllSelections(PredefinedSelectionTransformations action);
    public abstract virtual void PerformActionOnAllSelections(Action`1<ISelectionTransformer> action);
    public abstract virtual bool TryPerformActionOnSelection(Selection before, PredefinedSelectionTransformations action, Selection& after);
    public abstract virtual bool TryPerformActionOnSelection(Selection before, Action`1<ISelectionTransformer> action, Selection& after);
    public abstract virtual bool TryEnsureVisible(Selection selection, EnsureSpanVisibleOptions options);
    public abstract virtual void SetBoxSelection(Selection selection);
    public abstract virtual Selection get_BoxSelection();
    public abstract virtual bool get_IsBoxSelection();
    public abstract virtual void BreakBoxSelection();
    public abstract virtual NormalizedSnapshotSpanCollection get_SelectedSpans();
    public abstract virtual IReadOnlyList`1<VirtualSnapshotSpan> get_VirtualSelectedSpans();
    public abstract virtual VirtualSnapshotSpan get_SelectionExtent();
    public abstract virtual bool get_AreSelectionsActive();
    public abstract virtual void set_AreSelectionsActive(bool value);
    public abstract virtual bool get_ActivationTracksFocus();
    public abstract virtual void set_ActivationTracksFocus(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_MultiSelectionSessionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MultiSelectionSessionChanged(EventHandler value);
    public abstract virtual IDisposable BeginBatchOperation();
    public abstract virtual bool TryGetSelectionPresentationProperties(Selection selection, AbstractSelectionPresentationProperties& properties);
    public abstract virtual Selection TransformSelection(Selection source, PredefinedSelectionTransformations transformation);
}
public interface Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch {
    public string SearchString { get; public set; }
    public bool IsActive { get; }
    public IncrementalSearchDirection SearchDirection { get; public set; }
    public ITextView TextView { get; }
    public abstract virtual void Start();
    public abstract virtual void Dismiss();
    public abstract virtual IncrementalSearchResult AppendCharAndSearch(char toAppend);
    public abstract virtual IncrementalSearchResult DeleteCharAndSearch();
    public abstract virtual IncrementalSearchResult SelectNextResult();
    public abstract virtual void Clear();
    public abstract virtual string get_SearchString();
    public abstract virtual void set_SearchString(string value);
    public abstract virtual bool get_IsActive();
    public abstract virtual IncrementalSearchDirection get_SearchDirection();
    public abstract virtual void set_SearchDirection(IncrementalSearchDirection value);
    public abstract virtual ITextView get_TextView();
}
public interface Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearchFactoryService {
    public abstract virtual IIncrementalSearch GetIncrementalSearch(ITextView textView);
}
public enum Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchDirection : Enum {
    public int value__;
    public static IncrementalSearchDirection Forward;
    public static IncrementalSearchDirection Backward;
}
public class Microsoft.VisualStudio.Text.IncrementalSearch.IncrementalSearchResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <PassedStartOfBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PassedEndOfBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PassedStartOfSearch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResultFound>k__BackingField;
    public bool PassedStartOfBuffer { get; private set; }
    public bool PassedEndOfBuffer { get; private set; }
    public bool PassedStartOfSearch { get; private set; }
    public bool ResultFound { get; private set; }
    public IncrementalSearchResult(bool passedEndOfBuffer, bool passedStartOfBuffer, bool passedStartOfSearch, bool resultFound);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_PassedStartOfBuffer();
    [CompilerGeneratedAttribute]
private void set_PassedStartOfBuffer(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_PassedEndOfBuffer();
    [CompilerGeneratedAttribute]
private void set_PassedEndOfBuffer(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_PassedStartOfSearch();
    [CompilerGeneratedAttribute]
private void set_PassedStartOfSearch(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_ResultFound();
    [CompilerGeneratedAttribute]
private void set_ResultFound(bool value);
    public virtual bool Equals(object obj);
    public static bool op_Equality(IncrementalSearchResult first, IncrementalSearchResult second);
    public static bool op_Inequality(IncrementalSearchResult first, IncrementalSearchResult second);
    public virtual int GetHashCode();
}
public interface Microsoft.VisualStudio.Text.IOvertypeManager {
    public abstract virtual bool TryStartOvertypeSession(SnapshotSpan snapshotSpan);
    public abstract virtual bool TryStartOvertypeSession(SnapshotSpan snapshotSpan, bool allowOvertypeCaretPrefix);
    public abstract virtual bool TryStartOvertypeSessionAtCaretLocation();
    public abstract virtual bool TryStartOvertypeSessionAtCaretLocation(bool allowOvertypeCaretPrefix);
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Text.IOvertypeManagerFactory {
    public abstract virtual IOvertypeManager TryGetOvertypeManager(ITextView textView);
}
internal interface Microsoft.VisualStudio.Text.IOvertypeManagerInternal {
    public abstract virtual void PreTypeChar(char character, Boolean& handledCommand);
    public abstract virtual void PostTypeChar(char character);
    [NullableContextAttribute("2")]
public abstract virtual bool TryStartOvertypeSession(SnapshotSpan snapshotSpan, IBraceCompletionSession braceCompletionSession, IBraceCompletionContext braceCompletionContext, bool allowOvertypeCaretPrefix);
    [NullableContextAttribute("1")]
public abstract virtual bool TryStartMultiSelectionOvertypeSession(IReadOnlyList`1<SnapshotSpan> spans);
    public abstract virtual bool TryStartOvertypeSession(SnapshotSpan snapshotSpan, OvertypeConfiguration configuration);
}
public interface Microsoft.VisualStudio.Text.ISelectionTransformer {
    public Selection Selection { get; }
    public abstract virtual Selection get_Selection();
    public abstract virtual void MoveTo(VirtualSnapshotPoint point, bool select, PositionAffinity insertionPointAffinity);
    public abstract virtual void MoveTo(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint, VirtualSnapshotPoint insertionPoint, PositionAffinity insertionPointAffinity);
    public abstract virtual void CapturePreferredReferencePoint();
    public abstract virtual void CapturePreferredXReferencePoint();
    public abstract virtual void CapturePreferredYReferencePoint();
    public abstract virtual void PerformAction(PredefinedSelectionTransformations action);
}
public interface Microsoft.VisualStudio.Text.Operations.IEditorOperations {
    public bool CanPaste { get; }
    public bool CanDelete { get; }
    public bool CanCut { get; }
    public ITextView TextView { get; }
    public IEditorOptions Options { get; }
    public ITrackingSpan ProvisionalCompositionSpan { get; }
    public string SelectedText { get; }
    public abstract virtual void SelectAndMoveCaret(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint);
    public abstract virtual void SelectAndMoveCaret(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint, TextSelectionMode selectionMode);
    public abstract virtual void SelectAndMoveCaret(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint, TextSelectionMode selectionMode, Nullable`1<EnsureSpanVisibleOptions> scrollOptions);
    public abstract virtual void MoveToNextCharacter(bool extendSelection);
    public abstract virtual void MoveToPreviousCharacter(bool extendSelection);
    public abstract virtual void MoveToNextWord(bool extendSelection);
    public abstract virtual void MoveToPreviousWord(bool extendSelection);
    public abstract virtual void MoveLineUp(bool extendSelection);
    public abstract virtual void MoveLineDown(bool extendSelection);
    public abstract virtual void PageUp(bool extendSelection);
    public abstract virtual void PageDown(bool extendSelection);
    public abstract virtual void MoveToEndOfLine(bool extendSelection);
    public abstract virtual void MoveToStartOfLine(bool extendSelection);
    public abstract virtual void MoveToHome(bool extendSelection);
    public abstract virtual void GotoLine(int lineNumber);
    public abstract virtual void MoveToStartOfDocument(bool extendSelection);
    public abstract virtual void MoveToEndOfDocument(bool extendSelection);
    public abstract virtual void MoveCurrentLineToTop();
    public abstract virtual void MoveCurrentLineToBottom();
    public abstract virtual void MoveToStartOfLineAfterWhiteSpace(bool extendSelection);
    public abstract virtual void MoveToStartOfNextLineAfterWhiteSpace(bool extendSelection);
    public abstract virtual void MoveToStartOfPreviousLineAfterWhiteSpace(bool extendSelection);
    public abstract virtual void MoveToLastNonWhiteSpaceCharacter(bool extendSelection);
    public abstract virtual void MoveToTopOfView(bool extendSelection);
    public abstract virtual void MoveToBottomOfView(bool extendSelection);
    public abstract virtual void SwapCaretAndAnchor();
    public abstract virtual bool Backspace();
    public abstract virtual bool DeleteWordToRight();
    public abstract virtual bool DeleteWordToLeft();
    public abstract virtual bool DeleteToEndOfLine();
    public abstract virtual bool DeleteToBeginningOfLine();
    public abstract virtual bool DeleteBlankLines();
    public abstract virtual bool DeleteHorizontalWhiteSpace();
    public abstract virtual bool InsertNewLine();
    public abstract virtual bool OpenLineAbove();
    public abstract virtual bool OpenLineBelow();
    public abstract virtual bool Indent();
    public abstract virtual bool Unindent();
    public abstract virtual bool IncreaseLineIndent();
    public abstract virtual bool DecreaseLineIndent();
    public abstract virtual bool InsertText(string text);
    public abstract virtual bool InsertTextAsBox(string text, VirtualSnapshotPoint& boxStart, VirtualSnapshotPoint& boxEnd);
    public abstract virtual bool InsertProvisionalText(string text);
    public abstract virtual bool Delete();
    public abstract virtual bool DeleteFullLine();
    public abstract virtual bool ReplaceSelection(string text);
    public abstract virtual bool TransposeCharacter();
    public abstract virtual bool TransposeLine();
    public abstract virtual bool TransposeWord();
    public abstract virtual bool MakeLowercase();
    public abstract virtual bool MakeUppercase();
    public abstract virtual bool ToggleCase();
    public abstract virtual bool Capitalize();
    public abstract virtual bool ReplaceText(Span replaceSpan, string text);
    public abstract virtual int ReplaceAllMatches(string searchText, string replaceText, bool matchCase, bool matchWholeWord, bool useRegularExpressions);
    public abstract virtual bool InsertFile(string filePath);
    public abstract virtual bool Tabify();
    public abstract virtual bool Untabify();
    public abstract virtual bool ConvertSpacesToTabs();
    public abstract virtual bool ConvertTabsToSpaces();
    public abstract virtual bool NormalizeLineEndings(string replacement);
    public abstract virtual void SelectCurrentWord();
    public abstract virtual void SelectEnclosing();
    public abstract virtual void SelectFirstChild();
    public abstract virtual void SelectNextSibling(bool extendSelection);
    public abstract virtual void SelectPreviousSibling(bool extendSelection);
    public abstract virtual void SelectLine(ITextViewLine viewLine, bool extendSelection);
    public abstract virtual void SelectAll();
    public abstract virtual void ExtendSelection(int newEnd);
    public abstract virtual void MoveCaret(ITextViewLine textLine, double horizontalOffset, bool extendSelection);
    public abstract virtual void ResetSelection();
    public abstract virtual bool CopySelection();
    public abstract virtual bool CutSelection();
    public abstract virtual bool Paste();
    public abstract virtual bool CutFullLine();
    public abstract virtual bool get_CanPaste();
    public abstract virtual bool get_CanDelete();
    public abstract virtual bool get_CanCut();
    public abstract virtual void ScrollUpAndMoveCaretIfNecessary();
    public abstract virtual void ScrollDownAndMoveCaretIfNecessary();
    public abstract virtual void ScrollPageUp();
    public abstract virtual void ScrollPageDown();
    public abstract virtual void ScrollColumnLeft();
    public abstract virtual void ScrollColumnRight();
    public abstract virtual void ScrollLineBottom();
    public abstract virtual void ScrollLineTop();
    public abstract virtual void ScrollLineCenter();
    public abstract virtual void AddBeforeTextBufferChangePrimitive();
    public abstract virtual void AddAfterTextBufferChangePrimitive();
    public abstract virtual void ZoomIn();
    public abstract virtual void ZoomOut();
    public abstract virtual void ZoomTo(double zoomLevel);
    public abstract virtual string GetWhitespaceForVirtualSpace(VirtualSnapshotPoint point);
    public abstract virtual ITextView get_TextView();
    public abstract virtual IEditorOptions get_Options();
    public abstract virtual ITrackingSpan get_ProvisionalCompositionSpan();
    public abstract virtual string get_SelectedText();
}
public interface Microsoft.VisualStudio.Text.Operations.IEditorOperations2 {
    public abstract virtual bool MoveSelectedLinesUp();
    public abstract virtual bool MoveSelectedLinesDown();
}
public interface Microsoft.VisualStudio.Text.Operations.IEditorOperations3 {
    public abstract virtual bool InsertFinalNewLine();
    public abstract virtual bool TrimTrailingWhiteSpace();
    public abstract virtual bool DuplicateSelection();
}
internal interface Microsoft.VisualStudio.Text.Operations.IEditorOperations4 {
    public abstract virtual string NormalizeNewlinesInString(string text);
    public abstract virtual void MoveToNextSubWord(bool extendSelection);
    public abstract virtual void MoveToPreviousSubWord(bool extendSelection);
    public abstract virtual bool TransposeSubword();
    public abstract virtual bool DeleteSubwordToRight();
    public abstract virtual bool DeleteSubwordToLeft();
    public abstract virtual void SelectCurrentSubword();
}
public interface Microsoft.VisualStudio.Text.Operations.IEditorOperationsFactoryService {
    public abstract virtual IEditorOperations GetEditorOperations(ITextView textView);
}
internal interface Microsoft.VisualStudio.Text.Outlining.IAccurateOutliningManager {
    public abstract virtual IEnumerable`1<ICollapsed> CollapseAll(SnapshotSpan span, Predicate`1<ICollapsible> match, CancellationToken cancel);
}
public interface Microsoft.VisualStudio.Text.Outlining.ICollapsed {
    public IEnumerable`1<ICollapsed> CollapsedChildren { get; }
    public abstract virtual IEnumerable`1<ICollapsed> get_CollapsedChildren();
}
public interface Microsoft.VisualStudio.Text.Outlining.ICollapsible {
    public ITrackingSpan Extent { get; }
    public bool IsCollapsed { get; }
    public bool IsCollapsible { get; }
    public object CollapsedForm { get; }
    public object CollapsedHintForm { get; }
    public IOutliningRegionTag Tag { get; }
    public abstract virtual ITrackingSpan get_Extent();
    public abstract virtual bool get_IsCollapsed();
    public abstract virtual bool get_IsCollapsible();
    public abstract virtual object get_CollapsedForm();
    public abstract virtual object get_CollapsedHintForm();
    public abstract virtual IOutliningRegionTag get_Tag();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Text.Outlining.IInternalOutliningManagerProvider {
    public abstract virtual IOutliningManager GetOutliningManager(ITextView textView);
}
public interface Microsoft.VisualStudio.Text.Outlining.IOutliningManager {
    public bool Enabled { get; public set; }
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(SnapshotSpan span);
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(SnapshotSpan span, bool exposedRegionsOnly);
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(NormalizedSnapshotSpanCollection spans);
    public abstract virtual IEnumerable`1<ICollapsed> GetCollapsedRegions(NormalizedSnapshotSpanCollection spans, bool exposedRegionsOnly);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(SnapshotSpan span);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(SnapshotSpan span, bool exposedRegionsOnly);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(NormalizedSnapshotSpanCollection spans);
    public abstract virtual IEnumerable`1<ICollapsible> GetAllRegions(NormalizedSnapshotSpanCollection spans, bool exposedRegionsOnly);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegionsChanged(EventHandler`1<RegionsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegionsChanged(EventHandler`1<RegionsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegionsExpanded(EventHandler`1<RegionsExpandedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegionsExpanded(EventHandler`1<RegionsExpandedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegionsCollapsed(EventHandler`1<RegionsCollapsedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegionsCollapsed(EventHandler`1<RegionsCollapsedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OutliningEnabledChanged(EventHandler`1<OutliningEnabledEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OutliningEnabledChanged(EventHandler`1<OutliningEnabledEventArgs> value);
    public abstract virtual ICollapsible Expand(ICollapsed collapsible);
    public abstract virtual ICollapsed TryCollapse(ICollapsible collapsible);
    public abstract virtual IEnumerable`1<ICollapsed> CollapseAll(SnapshotSpan span, Predicate`1<ICollapsible> match);
    public abstract virtual IEnumerable`1<ICollapsible> ExpandAll(SnapshotSpan span, Predicate`1<ICollapsed> match);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Text.Outlining.IOutliningManagerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static ICollapsed GetFirstCollapsedRegion(IOutliningManager manager, ITextView textView, SnapshotPoint startPoint, SnapshotPoint endPoint, int maxLength);
}
public interface Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService {
    public abstract virtual IOutliningManager GetOutliningManager(ITextView textView);
}
public class Microsoft.VisualStudio.Text.Outlining.OutliningEnabledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; private set; }
    public OutliningEnabledEventArgs(bool enabled);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
private void set_Enabled(bool value);
}
public class Microsoft.VisualStudio.Text.Outlining.RegionsChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SnapshotSpan <AffectedSpan>k__BackingField;
    public SnapshotSpan AffectedSpan { get; private set; }
    public RegionsChangedEventArgs(SnapshotSpan affectedSpan);
    [CompilerGeneratedAttribute]
public SnapshotSpan get_AffectedSpan();
    [CompilerGeneratedAttribute]
private void set_AffectedSpan(SnapshotSpan value);
}
public class Microsoft.VisualStudio.Text.Outlining.RegionsCollapsedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICollapsed> <CollapsedRegions>k__BackingField;
    public IEnumerable`1<ICollapsed> CollapsedRegions { get; private set; }
    public RegionsCollapsedEventArgs(IEnumerable`1<ICollapsed> collapsedRegions);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ICollapsed> get_CollapsedRegions();
    [CompilerGeneratedAttribute]
private void set_CollapsedRegions(IEnumerable`1<ICollapsed> value);
}
public class Microsoft.VisualStudio.Text.Outlining.RegionsExpandedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ICollapsible> <ExpandedRegions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemovalPending>k__BackingField;
    public IEnumerable`1<ICollapsible> ExpandedRegions { get; private set; }
    public bool RemovalPending { get; private set; }
    public RegionsExpandedEventArgs(IEnumerable`1<ICollapsible> expandedRegions);
    public RegionsExpandedEventArgs(IEnumerable`1<ICollapsible> expandedRegions, bool removalPending);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ICollapsible> get_ExpandedRegions();
    [CompilerGeneratedAttribute]
private void set_ExpandedRegions(IEnumerable`1<ICollapsible> value);
    [CompilerGeneratedAttribute]
public bool get_RemovalPending();
    [CompilerGeneratedAttribute]
private void set_RemovalPending(bool value);
}
public enum Microsoft.VisualStudio.Text.PredefinedSelectionTransformations : Enum {
    public int value__;
    public static PredefinedSelectionTransformations ClearSelection;
    public static PredefinedSelectionTransformations MoveToNextCaretPosition;
    public static PredefinedSelectionTransformations SelectToNextCaretPosition;
    public static PredefinedSelectionTransformations MoveToPreviousCaretPosition;
    public static PredefinedSelectionTransformations SelectToPreviousCaretPosition;
    public static PredefinedSelectionTransformations MoveToNextWord;
    public static PredefinedSelectionTransformations SelectToNextWord;
    public static PredefinedSelectionTransformations MoveToPreviousWord;
    public static PredefinedSelectionTransformations SelectToPreviousWord;
    public static PredefinedSelectionTransformations MoveToBeginningOfLine;
    public static PredefinedSelectionTransformations SelectToBeginningOfLine;
    public static PredefinedSelectionTransformations MoveToHome;
    public static PredefinedSelectionTransformations SelectToHome;
    public static PredefinedSelectionTransformations MoveToEndOfLine;
    public static PredefinedSelectionTransformations SelectToEndOfLine;
    public static PredefinedSelectionTransformations MoveToNextLine;
    public static PredefinedSelectionTransformations SelectToNextLine;
    public static PredefinedSelectionTransformations MoveToPreviousLine;
    public static PredefinedSelectionTransformations SelectToPreviousLine;
    public static PredefinedSelectionTransformations MovePageUp;
    public static PredefinedSelectionTransformations SelectPageUp;
    public static PredefinedSelectionTransformations MovePageDown;
    public static PredefinedSelectionTransformations SelectPageDown;
    public static PredefinedSelectionTransformations MoveToStartOfDocument;
    public static PredefinedSelectionTransformations SelectToStartOfDocument;
    public static PredefinedSelectionTransformations MoveToEndOfDocument;
    public static PredefinedSelectionTransformations SelectToEndOfDocument;
    public static PredefinedSelectionTransformations SelectCurrentWord;
    public static PredefinedSelectionTransformations MoveToNextSubWord;
    public static PredefinedSelectionTransformations SelectToNextSubWord;
    public static PredefinedSelectionTransformations MoveToPreviousSubWord;
    public static PredefinedSelectionTransformations SelectToPreviousSubWord;
    public static PredefinedSelectionTransformations ExpandSelectionToEntireLine;
}
public class Microsoft.VisualStudio.Text.Selection : ValueType {
    public static Selection Invalid;
    [CompilerGeneratedAttribute]
private VirtualSnapshotPoint <InsertionPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualSnapshotPoint <AnchorPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private VirtualSnapshotPoint <ActivePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private PositionAffinity <InsertionPointAffinity>k__BackingField;
    public bool IsValid { get; }
    public VirtualSnapshotPoint InsertionPoint { get; }
    public VirtualSnapshotPoint AnchorPoint { get; }
    public VirtualSnapshotPoint ActivePoint { get; }
    public PositionAffinity InsertionPointAffinity { get; }
    public bool IsReversed { get; }
    public bool IsEmpty { get; }
    public VirtualSnapshotPoint Start { get; }
    public VirtualSnapshotPoint End { get; }
    public VirtualSnapshotSpan Extent { get; }
    public Selection(VirtualSnapshotPoint insertionPoint, PositionAffinity insertionPointAffinity);
    public Selection(SnapshotPoint insertionPoint, PositionAffinity insertionPointAffinity);
    public Selection(VirtualSnapshotSpan extent, bool isReversed);
    public Selection(SnapshotSpan extent, bool isReversed);
    public Selection(VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint);
    public Selection(SnapshotPoint anchorPoint, SnapshotPoint activePoint);
    public Selection(VirtualSnapshotPoint insertionPoint, VirtualSnapshotPoint anchorPoint, VirtualSnapshotPoint activePoint, PositionAffinity insertionPointAffinity);
    public Selection(SnapshotPoint insertionPoint, SnapshotPoint anchorPoint, SnapshotPoint activePoint, PositionAffinity insertionPointAffinity);
    public bool get_IsValid();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VirtualSnapshotPoint get_InsertionPoint();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VirtualSnapshotPoint get_AnchorPoint();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public VirtualSnapshotPoint get_ActivePoint();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public PositionAffinity get_InsertionPointAffinity();
    public bool get_IsReversed();
    public bool get_IsEmpty();
    public VirtualSnapshotPoint get_Start();
    public VirtualSnapshotPoint get_End();
    public VirtualSnapshotSpan get_Extent();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Selection other);
    public static bool op_Equality(Selection left, Selection right);
    public static bool op_Inequality(Selection left, Selection right);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Interface has not been finalized and may change without warning.")]
public interface Microsoft.VisualStudio.Text.SpellChecker.ISpellCheckFixerProvider {
    public abstract virtual Task RenameWordAsync(SnapshotSpan span, string replacement, IUIThreadOperationContext operationContext);
}
public class Microsoft.VisualStudio.Text.Tagging.ErrorTag : object {
    [CompilerGeneratedAttribute]
private string <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ToolTipContent>k__BackingField;
    public string ErrorType { get; private set; }
    public object ToolTipContent { get; private set; }
    public ErrorTag(string errorType, object toolTipContent);
    public ErrorTag(string errorType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorType();
    [CompilerGeneratedAttribute]
private void set_ErrorType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_ToolTipContent();
    [CompilerGeneratedAttribute]
private void set_ToolTipContent(object value);
}
[ObsoleteAttribute("Class has not been finalized and may change without warning.")]
public interface Microsoft.VisualStudio.Text.Tagging.IContainerStructureTag {
    [NullableAttribute("2")]
public IReadOnlyList`1<SubHeadingStructureData> SubHeadings { get; }
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyList`1<SubHeadingStructureData> get_SubHeadings();
}
public interface Microsoft.VisualStudio.Text.Tagging.IEndOfLineAdornmentTag {
    public string Type { get; }
    public double HorizontalOffset { get; }
    public double VerticalOffset { get; }
    public double Width { get; }
    public double Height { get; }
    public abstract virtual string get_Type();
    public abstract virtual double get_HorizontalOffset();
    public abstract virtual double get_VerticalOffset();
    public abstract virtual double get_Width();
    public abstract virtual double get_Height();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Text.Tagging.IErrorTag {
    public string ErrorType { get; }
    [NullableAttribute("2")]
public object ToolTipContent { get; }
    public abstract virtual string get_ErrorType();
    [NullableContextAttribute("2")]
public abstract virtual object get_ToolTipContent();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Text.Tagging.IntraTextTag : object {
    [CompilerGeneratedAttribute]
private string <ClassificationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string ClassificationType { get; private set; }
    public string Content { get; private set; }
    public IntraTextTag(string classificationType, string content);
    [CompilerGeneratedAttribute]
public string get_ClassificationType();
    [CompilerGeneratedAttribute]
private void set_ClassificationType(string value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
private void set_Content(string value);
}
public interface Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag {
    public bool IsDefaultCollapsed { get; }
    public bool IsImplementation { get; }
    public object CollapsedForm { get; }
    public object CollapsedHintForm { get; }
    public abstract virtual bool get_IsDefaultCollapsed();
    public abstract virtual bool get_IsImplementation();
    public abstract virtual object get_CollapsedForm();
    public abstract virtual object get_CollapsedHintForm();
}
public interface Microsoft.VisualStudio.Text.Tagging.IOverviewMarkTag {
    public string MarkKindName { get; }
    public abstract virtual string get_MarkKindName();
}
public interface Microsoft.VisualStudio.Text.Tagging.IStructureTag {
    public ITextSnapshot Snapshot { get; }
    public Nullable`1<Span> OutliningSpan { get; }
    public Nullable`1<Span> HeaderSpan { get; }
    public Nullable`1<Span> GuideLineSpan { get; }
    public Nullable`1<int> GuideLineHorizontalAnchorPoint { get; }
    public string Type { get; }
    public bool IsCollapsible { get; }
    public bool IsDefaultCollapsed { get; }
    public bool IsImplementation { get; }
    public abstract virtual ITextSnapshot get_Snapshot();
    public abstract virtual Nullable`1<Span> get_OutliningSpan();
    public abstract virtual Nullable`1<Span> get_HeaderSpan();
    public abstract virtual Nullable`1<Span> get_GuideLineSpan();
    public abstract virtual Nullable`1<int> get_GuideLineHorizontalAnchorPoint();
    public abstract virtual string get_Type();
    public abstract virtual bool get_IsCollapsible();
    public abstract virtual bool get_IsDefaultCollapsed();
    public abstract virtual bool get_IsImplementation();
    public abstract virtual object GetCollapsedForm();
    public abstract virtual object GetCollapsedHintForm();
}
[ObsoleteAttribute("Do not use. This interface has not been finalized and may change without warning.")]
public interface Microsoft.VisualStudio.Text.Tagging.IStructureTag2 {
    public Nullable`1<Span> PrimaryHeaderSpan { get; }
    public abstract virtual Nullable`1<Span> get_PrimaryHeaderSpan();
}
public interface Microsoft.VisualStudio.Text.Tagging.ITextMarkerTag {
    public string Type { get; }
    public abstract virtual string get_Type();
}
public interface Microsoft.VisualStudio.Text.Tagging.IViewTagAggregatorFactoryService {
    public abstract virtual ITagAggregator`1<T> CreateTagAggregator(ITextView textView);
    public abstract virtual ITagAggregator`1<T> CreateTagAggregator(ITextView textView, TagAggregatorOptions options);
}
public interface Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider {
    public abstract virtual ITagger`1<T> CreateTagger(ITextView textView, ITextBuffer buffer);
}
public class Microsoft.VisualStudio.Text.Tagging.OutliningRegionTag : object {
    [CompilerGeneratedAttribute]
private bool <IsDefaultCollapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CollapsedForm>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CollapsedHintForm>k__BackingField;
    public bool IsDefaultCollapsed { get; private set; }
    public bool IsImplementation { get; private set; }
    public object CollapsedForm { get; private set; }
    public object CollapsedHintForm { get; private set; }
    public OutliningRegionTag(object collapsedForm, object collapsedHintForm);
    public OutliningRegionTag(bool isDefaultCollapsed, bool isImplementation, object collapsedForm, object collapsedHintForm);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDefaultCollapsed();
    [CompilerGeneratedAttribute]
private void set_IsDefaultCollapsed(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsImplementation();
    [CompilerGeneratedAttribute]
private void set_IsImplementation(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_CollapsedForm();
    [CompilerGeneratedAttribute]
private void set_CollapsedForm(object value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_CollapsedHintForm();
    [CompilerGeneratedAttribute]
private void set_CollapsedHintForm(object value);
}
public class Microsoft.VisualStudio.Text.Tagging.OverviewMarkTag : object {
    private string _markKindName;
    public string MarkKindName { get; }
    public OverviewMarkTag(string markKindName);
    public sealed virtual string get_MarkKindName();
}
public class Microsoft.VisualStudio.Text.Tagging.SpaceNegotiatingAdornmentTag : object {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TopSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Baseline>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TextHeight>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BottomSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private PositionAffinity <Affinity>k__BackingField;
    [CompilerGeneratedAttribute]
private object <IdentityTag>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ProviderTag>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ranking>k__BackingField;
    public double Width { get; private set; }
    public double TopSpace { get; private set; }
    public double Baseline { get; private set; }
    public double TextHeight { get; private set; }
    public double BottomSpace { get; private set; }
    public PositionAffinity Affinity { get; private set; }
    public object IdentityTag { get; private set; }
    public object ProviderTag { get; private set; }
    public double Ranking { get; }
    public SpaceNegotiatingAdornmentTag(double width, double topSpace, double baseline, double textHeight, double bottomSpace, PositionAffinity affinity, object identityTag, object providerTag);
    public SpaceNegotiatingAdornmentTag(double width, double topSpace, double baseline, double textHeight, double bottomSpace, PositionAffinity affinity, object identityTag, object providerTag, double ranking);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
private void set_Width(double value);
    [CompilerGeneratedAttribute]
public double get_TopSpace();
    [CompilerGeneratedAttribute]
private void set_TopSpace(double value);
    [CompilerGeneratedAttribute]
public double get_Baseline();
    [CompilerGeneratedAttribute]
private void set_Baseline(double value);
    [CompilerGeneratedAttribute]
public double get_TextHeight();
    [CompilerGeneratedAttribute]
private void set_TextHeight(double value);
    [CompilerGeneratedAttribute]
public double get_BottomSpace();
    [CompilerGeneratedAttribute]
private void set_BottomSpace(double value);
    [CompilerGeneratedAttribute]
public PositionAffinity get_Affinity();
    [CompilerGeneratedAttribute]
private void set_Affinity(PositionAffinity value);
    [CompilerGeneratedAttribute]
public object get_IdentityTag();
    [CompilerGeneratedAttribute]
private void set_IdentityTag(object value);
    [CompilerGeneratedAttribute]
public object get_ProviderTag();
    [CompilerGeneratedAttribute]
private void set_ProviderTag(object value);
    [CompilerGeneratedAttribute]
public double get_Ranking();
}
public class Microsoft.VisualStudio.Text.Tagging.StructureTag : object {
    private object collapsedForm;
    private object collapsedHintForm;
    [CompilerGeneratedAttribute]
private ITextSnapshot <Snapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Span> <OutliningSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Span> <HeaderSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Span> <PrimaryHeaderSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <GuideLineHorizontalAnchorPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Span> <GuideLineSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollapsible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultCollapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImplementation>k__BackingField;
    public ITextSnapshot Snapshot { get; }
    public Nullable`1<Span> OutliningSpan { get; public set; }
    public Nullable`1<Span> HeaderSpan { get; }
    public Nullable`1<Span> PrimaryHeaderSpan { get; }
    public Nullable`1<int> GuideLineHorizontalAnchorPoint { get; }
    public Nullable`1<Span> GuideLineSpan { get; }
    public string Type { get; }
    public bool IsCollapsible { get; }
    public bool IsDefaultCollapsed { get; }
    public bool IsImplementation { get; }
    public StructureTag(ITextSnapshot snapshot, Nullable`1<Span> outliningSpan, Nullable`1<Span> headerSpan, Nullable`1<Span> guideLineSpan, Nullable`1<int> guideLineHorizontalAnchor, string type, bool isCollapsible, bool isDefaultCollapsed, bool isImplementation, object collapsedForm, object collapsedHintForm);
    public StructureTag(ITextSnapshot snapshot, Nullable`1<Span> outliningSpan, Nullable`1<Span> headerSpan, Nullable`1<Span> guideLineSpan, Nullable`1<int> guideLineHorizontalAnchor, string type, bool isCollapsible, bool isDefaultCollapsed, bool isImplementation, object collapsedForm, object collapsedHintForm, Nullable`1<Span> primaryHeaderSpan);
    [CompilerGeneratedAttribute]
public virtual ITextSnapshot get_Snapshot();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Span> get_OutliningSpan();
    [CompilerGeneratedAttribute]
public virtual void set_OutliningSpan(Nullable`1<Span> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Span> get_HeaderSpan();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Span> get_PrimaryHeaderSpan();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_GuideLineHorizontalAnchorPoint();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Span> get_GuideLineSpan();
    [CompilerGeneratedAttribute]
public virtual string get_Type();
    [CompilerGeneratedAttribute]
public virtual bool get_IsCollapsible();
    [CompilerGeneratedAttribute]
public virtual bool get_IsDefaultCollapsed();
    [CompilerGeneratedAttribute]
public virtual bool get_IsImplementation();
    public virtual object GetCollapsedForm();
    public virtual object GetCollapsedHintForm();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.VisualStudio.Text.Tagging.SubHeadingStructureData : ValueType {
    [CompilerGeneratedAttribute]
private Span <Span>k__BackingField;
    [CompilerGeneratedAttribute]
private Span <HeaderSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public Span Span { get; }
    public Span HeaderSpan { get; }
    public string Type { get; }
    public SubHeadingStructureData(Span span, Span headerSpan, string type);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Span get_Span();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Span get_HeaderSpan();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Type();
}
public class Microsoft.VisualStudio.Text.Tagging.TextMarkerTag : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; private set; }
    public TextMarkerTag(string type);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
}
internal static class Microsoft.VisualStudio.Text.TextBufferOperationHelpers : object {
    public static int IndexOfNextNonWhiteSpaceCharacter(ITextSnapshotLine line, int startIndex);
    public static int IndexOfPreviousNonWhiteSpaceCharacter(ITextSnapshotLine line, int startIndex);
    public static bool HasAnyNonWhitespaceCharacters(ITextSnapshotLine line);
    public static string GetNewLineCharacterToInsert(ITextSnapshotLine line, IEditorOptions editorOptions);
    public static bool TryInsertFinalNewLine(ITextBuffer buffer, IEditorOptions editorOptions);
}
public interface Microsoft.VisualStudio.Text.UI.Adornments.IStructureElement {
    public IReadOnlyList`1<IStructureElement> Children { get; }
    public Nullable`1<SnapshotSpan> HeaderSpan { get; }
    public Nullable`1<SnapshotSpan> GuideLineSpan { get; }
    public Nullable`1<SnapshotSpan> OutliningSpan { get; }
    public SnapshotSpan ExtentSpan { get; }
    public Nullable`1<SnapshotPoint> GuideLineHorizontalAnchorPoint { get; }
    public string Type { get; }
    public bool IsCollapsible { get; }
    public bool IsDefaultCollapsed { get; }
    public bool IsImplementation { get; }
    public abstract virtual IReadOnlyList`1<IStructureElement> get_Children();
    public abstract virtual Nullable`1<SnapshotSpan> get_HeaderSpan();
    public abstract virtual Nullable`1<SnapshotSpan> get_GuideLineSpan();
    public abstract virtual Nullable`1<SnapshotSpan> get_OutliningSpan();
    public abstract virtual SnapshotSpan get_ExtentSpan();
    public abstract virtual Nullable`1<SnapshotPoint> get_GuideLineHorizontalAnchorPoint();
    public abstract virtual string get_Type();
    public abstract virtual bool get_IsCollapsible();
    public abstract virtual bool get_IsDefaultCollapsed();
    public abstract virtual bool get_IsImplementation();
    public abstract virtual object GetCollapsedForm();
    public abstract virtual object GetCollapsedHintForm();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportAttribute("Microsoft.VisualStudio.Utilities.IUIThreadScheduler")]
internal class Microsoft.VisualStudio.Utilities.<IUIThreadScheduler>F564E176116923E713ECCD9779FB9083C80AA4C6993C5A677400BB81F74105CB3__UIThreadScheduler : object {
    [CompilerGeneratedAttribute]
private JoinableTaskContext <JoinableTaskContext>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IUIThreadScheduler <OptionalThreadScheduler>k__BackingField;
    public JoinableTaskFactory NormalPriorityJTF { get; }
    public JoinableTaskFactory LowPriorityJTF { get; }
    public CancellationToken DisposalToken { get; }
    [ImportAttribute]
private JoinableTaskContext JoinableTaskContext { get; private set; }
    [NullableAttribute("2")]
[ImportImplementationAttribute("Microsoft.VisualStudio.Utilities.IUIThreadScheduler")]
private IUIThreadScheduler OptionalThreadScheduler { get; private set; }
    public sealed virtual JoinableTaskFactory get_NormalPriorityJTF();
    public sealed virtual JoinableTaskFactory get_LowPriorityJTF();
    public sealed virtual CancellationToken get_DisposalToken();
    [CompilerGeneratedAttribute]
private JoinableTaskContext get_JoinableTaskContext();
    [CompilerGeneratedAttribute]
private void set_JoinableTaskContext(JoinableTaskContext value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IUIThreadScheduler get_OptionalThreadScheduler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_OptionalThreadScheduler(IUIThreadScheduler value);
}
public abstract class Microsoft.VisualStudio.Utilities.AbstractUIThreadOperationContext : object {
    private ImmutableList`1<IUIThreadOperationScope> _scopes;
    private bool _allowCancellation;
    private PropertyCollection _properties;
    private string _defaultDescription;
    private int _completedItems;
    private int _totalItems;
    public CancellationToken UserCancellationToken { get; }
    public bool AllowCancellation { get; }
    public string Description { get; }
    protected int CompletedItems { get; }
    protected int TotalItems { get; }
    public IEnumerable`1<IUIThreadOperationScope> Scopes { get; }
    public PropertyCollection Properties { get; }
    public AbstractUIThreadOperationContext(bool allowCancellation, string defaultDescription);
    public virtual CancellationToken get_UserCancellationToken();
    public virtual bool get_AllowCancellation();
    public virtual string get_Description();
    protected int get_CompletedItems();
    protected int get_TotalItems();
    public virtual IEnumerable`1<IUIThreadOperationScope> get_Scopes();
    public virtual PropertyCollection get_Properties();
    public virtual IUIThreadOperationScope AddScope(bool allowCancellation, string description);
    protected virtual void OnScopeProgressChanged(IUIThreadOperationScope changedScope);
    protected virtual void OnScopesChanged();
    protected virtual void OnScopeChanged(IUIThreadOperationScope uiThreadOperationScope);
    public virtual void Dispose();
    public virtual void TakeOwnership();
    protected virtual void OnScopeDisposed(IUIThreadOperationScope scope);
}
public class Microsoft.VisualStudio.Utilities.BackgroundWorkIndicatorOptions : object {
    [CompilerGeneratedAttribute]
private bool <CancelOnEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CancelOnFocusLost>k__BackingField;
    public bool CancelOnEdit { get; public set; }
    public bool CancelOnFocusLost { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CancelOnEdit();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancelOnEdit(bool value);
    [CompilerGeneratedAttribute]
public bool get_CancelOnFocusLost();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CancelOnFocusLost(bool value);
}
public abstract class Microsoft.VisualStudio.Utilities.BackgroundWorkOperationScope : object {
    [NullableAttribute("1")]
unknown string Description {public set; }
    [NullableContextAttribute("1")]
public abstract virtual void set_Description(string value);
    public abstract virtual void Dispose();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicator {
    public CancellationToken CancellationToken { get; }
    public abstract virtual CancellationToken get_CancellationToken();
    public abstract virtual BackgroundWorkOperationScope AddScope(string description);
    public abstract virtual IDisposable SuppressAutoCancel();
}
[NullableContextAttribute("1")]
public interface Microsoft.VisualStudio.Utilities.IBackgroundWorkIndicatorService {
    public abstract virtual IBackgroundWorkIndicator Create(ITextView textView, SnapshotSpan applicableToSpan, string description, BackgroundWorkIndicatorOptions options);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Utilities.IClipboardOverwrite {
    public abstract virtual void OverwriteTryGetTextResult(string textToReturn);
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Utilities.IClipboardService {
    public abstract virtual bool TryGetText(string clipboardLineBasedCutCopyTag, Boolean& dataHasLineCutCopyTag, string boxSelectionCutCopyTag, Boolean& dataHasBoxCutCopyTag, String& text);
    public abstract virtual bool ContainsText();
    public abstract virtual void SetData(string originalUntrimmedTextData, string textData, string rtfData, string clipboardLineBasedCutCopyTag, bool lineCutCopyTag, string boxSelectionCutCopyTag, bool boxCutCopyTag, bool copy);
}
internal interface Microsoft.VisualStudio.Utilities.IStatusBarService {
    public abstract virtual Task SetTextAsync(string text);
}
public interface Microsoft.VisualStudio.Utilities.IUIThreadOperationContext {
    public CancellationToken UserCancellationToken { get; }
    public bool AllowCancellation { get; }
    public string Description { get; }
    public IEnumerable`1<IUIThreadOperationScope> Scopes { get; }
    public abstract virtual CancellationToken get_UserCancellationToken();
    public abstract virtual bool get_AllowCancellation();
    public abstract virtual string get_Description();
    public abstract virtual IEnumerable`1<IUIThreadOperationScope> get_Scopes();
    public abstract virtual IUIThreadOperationScope AddScope(bool allowCancellation, string description);
    public abstract virtual void TakeOwnership();
}
public interface Microsoft.VisualStudio.Utilities.IUIThreadOperationExecutor {
    public abstract virtual UIThreadOperationStatus Execute(string title, string defaultDescription, bool allowCancellation, bool showProgress, Action`1<IUIThreadOperationContext> action);
    public abstract virtual UIThreadOperationStatus Execute(UIThreadOperationExecutionOptions executionOptions, Action`1<IUIThreadOperationContext> action);
    public abstract virtual IUIThreadOperationContext BeginExecute(string title, string defaultDescription, bool allowCancellation, bool showProgress);
    public abstract virtual IUIThreadOperationContext BeginExecute(UIThreadOperationExecutionOptions executionOptions);
}
public interface Microsoft.VisualStudio.Utilities.IUIThreadOperationScope {
    public bool AllowCancellation { get; public set; }
    public string Description { get; public set; }
    public IUIThreadOperationContext Context { get; }
    public IProgress`1<ProgressInfo> Progress { get; }
    public abstract virtual bool get_AllowCancellation();
    public abstract virtual void set_AllowCancellation(bool value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual IUIThreadOperationContext get_Context();
    public abstract virtual IProgress`1<ProgressInfo> get_Progress();
}
public interface Microsoft.VisualStudio.Utilities.IUIThreadOperationTimeoutController {
    public int CancelAfter { get; }
    public abstract virtual int get_CancelAfter();
    public abstract virtual bool ShouldCancel();
    public abstract virtual void OnTimeout(bool wasExecutionCancelled);
    public abstract virtual void OnDelay();
}
[NullableContextAttribute("1")]
internal interface Microsoft.VisualStudio.Utilities.IUIThreadScheduler {
    public JoinableTaskFactory NormalPriorityJTF { get; }
    public JoinableTaskFactory LowPriorityJTF { get; }
    public CancellationToken DisposalToken { get; }
    public abstract virtual JoinableTaskFactory get_NormalPriorityJTF();
    public abstract virtual JoinableTaskFactory get_LowPriorityJTF();
    public abstract virtual CancellationToken get_DisposalToken();
}
public class Microsoft.VisualStudio.Utilities.ProgressInfo : ValueType {
    [CompilerGeneratedAttribute]
private int <CompletedItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalItems>k__BackingField;
    public int CompletedItems { get; }
    public int TotalItems { get; }
    public ProgressInfo(int completedItems, int totalItems);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_CompletedItems();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_TotalItems();
}
public class Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCancellation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private IUIThreadOperationTimeoutController <TimeoutController>k__BackingField;
    public string Title { get; }
    public string DefaultDescription { get; }
    public bool AllowCancellation { get; }
    public bool ShowProgress { get; }
    public IUIThreadOperationTimeoutController TimeoutController { get; }
    public UIThreadOperationExecutionOptions(string title, string defaultDescription, bool allowCancellation, bool showProgress, IUIThreadOperationTimeoutController timeoutController);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_DefaultDescription();
    [CompilerGeneratedAttribute]
public bool get_AllowCancellation();
    [CompilerGeneratedAttribute]
public bool get_ShowProgress();
    [CompilerGeneratedAttribute]
public IUIThreadOperationTimeoutController get_TimeoutController();
}
public enum Microsoft.VisualStudio.Utilities.UIThreadOperationStatus : Enum {
    public int value__;
    public static UIThreadOperationStatus Completed;
    public static UIThreadOperationStatus Canceled;
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.5.107.25444")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
