[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.Threading.Analyzers.CSharpCommonInterest : object {
    internal static IImmutableSet`1<SyntaxKind> MethodSyntaxKinds;
    private static CSharpCommonInterest();
    internal static bool ShouldIgnoreContext(SyntaxNodeAnalysisContext context);
    internal static void InspectMemberAccess(SyntaxNodeAnalysisContext context, MemberAccessExpressionSyntax memberAccessSyntax, DiagnosticDescriptor descriptor, IEnumerable`1<SyncBlockingMethod> problematicMethods, bool ignoreIfInsideAnonymousDelegate);
    [NullableContextAttribute("2")]
private static SyntaxNode GetEnclosingBlock(SyntaxNode node);
    private static bool IsVariablePassedToInvocation(InvocationExpressionSyntax invocationExpr, string variableName, bool byRef);
    private static bool IsTaskCompletedWithWhenAll(SyntaxNodeAnalysisContext context, InvocationExpressionSyntax invocationExpr, string taskVariableName);
    private static bool HasTaskCompleted(SyntaxNodeAnalysisContext context, MemberAccessExpressionSyntax memberAccessSyntax);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.VisualStudio.Threading.Analyzers.CSharpUtils : LanguageUtils {
    public static CSharpUtils Instance;
    private static CSharpUtils();
    internal static ExpressionSyntax IsolateMethodName(InvocationExpressionSyntax invocation);
    [NullableContextAttribute("2")]
internal static ContainingFunctionData GetContainingFunction(CSharpSyntaxNode syntaxNode);
    internal static bool IsOnLeftHandOfAssignment(SyntaxNode syntaxNode);
    [IteratorStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.CSharpUtils/<FindAssignedValuesWithin>d__5")]
internal static IEnumerable`1<ExpressionSyntax> FindAssignedValuesWithin(SyntaxNode container, SemanticModel semanticModel, ISymbol variable, CancellationToken cancellationToken);
    internal static MemberAccessExpressionSyntax MemberAccess(IReadOnlyList`1<string> qualifiers, SimpleNameSyntax simpleName);
    [NullableContextAttribute("2")]
internal static bool IsWithinNameOf(SyntaxNode syntaxNode);
    internal virtual Location GetLocationOfBaseTypeName(INamedTypeSymbol symbol, INamedTypeSymbol baseType, Compilation compilation, CancellationToken cancellationToken);
    internal virtual SyntaxNode IsolateMethodName(IInvocationOperation invocation);
    internal virtual SyntaxNode IsolateMethodName(IObjectCreationOperation objectCreation);
    internal virtual bool MethodReturnsNullableReferenceType(IMethodSymbol methodSymbol);
    internal virtual bool IsAsyncMethod(SyntaxNode syntaxNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD001UseSwitchToMainThreadAsyncAnalyzer : AbstractVSTHRD001UseSwitchToMainThreadAsyncAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD004AwaitSwitchToMainThreadAsyncAnalyzer : AbstractVSTHRD004AwaitSwitchToMainThreadAsyncAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD011UseAsyncLazyAnalyzer : AbstractVSTHRD011UseAsyncLazyAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD012SpecifyJtfWhereAllowed : AbstractVSTHRD012SpecifyJtfWhereAllowed {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD105AvoidImplicitTaskSchedulerCurrentAnalyzer : AbstractVSTHRD105AvoidImplicitTaskSchedulerCurrentAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD108AssertThreadRequirementUnconditionally : AbstractVSTHRD108AssertThreadRequirementUnconditionally {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD109AvoidAssertInAsyncMethodsAnalyzer : AbstractVSTHRD109AvoidAssertInAsyncMethodsAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD110ObserveResultOfAsyncCallsAnalyzer : AbstractVSTHRD110ObserveResultOfAsyncCallsAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD112ImplementSystemIAsyncDisposableAnalyzer : AbstractVSTHRD112ImplementSystemIAsyncDisposableAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.CSharpVSTHRD114AvoidReturningNullTaskAnalyzer : AbstractVSTHRD114AvoidReturningNullTaskAnalyzer {
    private protected LanguageUtils LanguageUtils { get; }
    private protected virtual LanguageUtils get_LanguageUtils();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD002UseJtfRunAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSTHRD002UseJtfRunAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    [NullableContextAttribute("2")]
private static ParameterSyntax GetFirstParameter(AnonymousFunctionExpressionSyntax anonymousFunctionSyntax);
    private static void InspectMemberAccess(SyntaxNodeAnalysisContext context, MemberAccessExpressionSyntax memberAccessSyntax, IEnumerable`1<SyncBlockingMethod> problematicMethods, INamedTypeSymbol taskSymbol);
    private static void AnalyzeInvocation(SyntaxNodeAnalysisContext context, INamedTypeSymbol taskSymbol);
    private static void AnalyzeMemberAccess(SyntaxNodeAnalysisContext context, INamedTypeSymbol taskSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD003UseJtfRunAsyncAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSTHRD003UseJtfRunAsyncAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    [NullableContextAttribute("2")]
private static bool IsSymbolAlwaysOkToAwait(ISymbol symbol);
    private void AnalyzeArrowExpressionClause(SyntaxNodeAnalysisContext context);
    private void AnalyzeLambdaExpression(SyntaxNodeAnalysisContext context);
    private void AnalyzeReturnStatement(SyntaxNodeAnalysisContext context);
    private void AnalyzeAwaitExpression(SyntaxNodeAnalysisContext context);
    [NullableContextAttribute("2")]
private Diagnostic AnalyzeAwaitedOrReturnedExpression(ExpressionSyntax expressionSyntax, SyntaxNodeAnalysisContext context, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD010MainThreadUsageAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor DescriptorSync;
    internal static DiagnosticDescriptor DescriptorAsync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<DiagnosticDescriptor> ReusableSupportedDescriptors;
    private LanguageUtils languageUtils;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSTHRD010MainThreadUsageAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private static HashSet`1<IMethodSymbol> GetTransitiveClosureOfMainThreadRequiringMethods(HashSet`1<IMethodSymbol> methodsRequiringUIThread, Dictionary`2<IMethodSymbol, List`1<CallInfo>> calleeToCallerMap);
    private static Dictionary`2<IMethodSymbol, List`1<CallInfo>> CreateCalleeToCallerMap(Dictionary`2<IMethodSymbol, List`1<CallInfo>> callerToCalleeMap);
    private void AddToCallerCalleeMap(OperationAnalysisContext context, Dictionary`2<IMethodSymbol, List`1<CallInfo>> callerToCalleeMap);
    [CompilerGeneratedAttribute]
private void <Initialize>b__8_0(CompilationStartAnalysisContext compilationStartContext);
    [CompilerGeneratedAttribute]
internal static void <GetTransitiveClosureOfMainThreadRequiringMethods>g__MarkMethod|9_0(IMethodSymbol method, <>c__DisplayClass9_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static IMethodSymbol <AddToCallerCalleeMap>g__GetPropertyAccessor|11_0(IPropertySymbol propertySymbol, <>c__DisplayClass11_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD102AvoidJtfRunInNonPublicMembersAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSTHRD102AvoidJtfRunInNonPublicMembersAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD103UseAsyncOptionAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static string AsyncMethodKeyName;
    internal static string ExtensionMethodNamespaceKeyName;
    internal static DiagnosticDescriptor Descriptor;
    internal static DiagnosticDescriptor DescriptorNoAlternativeMethod;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSTHRD103UseAsyncOptionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD104OfferAsyncOptionAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSTHRD104OfferAsyncOptionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD107AwaitTaskWithinUsingExpressionAnalyzer : DiagnosticAnalyzer {
    public static string Id;
    internal static DiagnosticDescriptor Descriptor;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static VSTHRD107AwaitTaskWithinUsingExpressionAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
    private void AnalyzeNode(SyntaxNodeAnalysisContext context);
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
