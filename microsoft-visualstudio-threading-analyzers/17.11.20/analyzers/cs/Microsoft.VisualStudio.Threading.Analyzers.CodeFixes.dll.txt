[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.VisualStudio.Threading.Analyzers.CommonFixes : object {
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.CommonFixes/<ReadMethodsAsync>d__0")]
internal static Task`1<ImmutableArray`1<QualifiedMember>> ReadMethodsAsync(CodeFixContext codeFixContext, Regex fileNamePattern, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.CommonFixes/<ReadAdditionalFilesAsync>d__1")]
internal static Task`1<ImmutableArray`1<string>> ReadAdditionalFilesAsync(IEnumerable`1<TextDocument> additionalFiles, Regex fileNamePattern, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Threading.Analyzers.FixUtils : object {
    internal static string BookmarkAnnotationName;
    [ExtensionAttribute]
internal static AnonymousFunctionExpressionSyntax MakeMethodAsync(AnonymousFunctionExpressionSyntax method, bool hasReturnValue, SemanticModel semanticModel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.FixUtils/<MakeMethodAsync>d__2")]
[ExtensionAttribute]
internal static Task`1<Tuple`2<Document, MethodDeclarationSyntax>> MakeMethodAsync(MethodDeclarationSyntax method, Document document, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.FixUtils/<AnnotateAllCallersAsync>d__3")]
internal static Task`1<Tuple`3<Solution, SyntaxAnnotation, List`1<DocumentId>>> AnnotateAllCallersAsync(Solution solution, ISymbol symbol, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.FixUtils/<UpdateDocumentAsync>d__4`1")]
internal static Task`1<Tuple`3<Document, T, SyntaxAnnotation>> UpdateDocumentAsync(Document document, T syntaxNode, Func`2<T, T> syntaxNodeTransform, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.FixUtils/<BookmarkSyntaxAsync>d__5`1")]
internal static Task`1<Tuple`4<SyntaxAnnotation, Document, T, SyntaxNode>> BookmarkSyntaxAsync(Document document, T syntaxNode, CancellationToken cancellationToken);
    internal static NameSyntax QualifyName(IReadOnlyList`1<string> qualifiers, SimpleNameSyntax simpleName);
    [ExtensionAttribute]
internal static Document GetDocumentOrThrow(Solution solution, DocumentId documentId);
    [ExtensionAttribute]
internal static Document GetDocumentOrThrow(Solution solution, SyntaxTree syntaxTree);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.FixUtils/<GetSyntaxTreeOrThrowAsync>d__9")]
[ExtensionAttribute]
internal static Task`1<SyntaxTree> GetSyntaxTreeOrThrowAsync(Document document, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.FixUtils/<GetSyntaxRootOrThrowAsync>d__10")]
[ExtensionAttribute]
internal static Task`1<SyntaxNode> GetSyntaxRootOrThrowAsync(Document document, CancellationToken cancellationToken);
    private static CSharpSyntaxNode UpdateStatementsForAsyncMethod(CSharpSyntaxNode body, SemanticModel semanticModel, bool hasResultValue, CancellationToken cancellationToken);
    private static BlockSyntax UpdateStatementsForAsyncMethod(BlockSyntax body, SemanticModel semanticModel, bool hasResultValue, bool returnTypeChanged, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static ExpressionSyntax TrySimplify(AwaitExpressionSyntax awaitExpression, ExpressionSyntax originalSyntax, SemanticModel semanticModel, CancellationToken cancellationToken);
}
internal static class Microsoft.VisualStudio.Threading.Analyzers.NullableHelpers : object {
    [NullableContextAttribute("1")]
internal static Func`3<T1, T2, TResult> AsNonNullReturnUnchecked(Func`3<T1, T2, TResult> func);
}
[ExtensionAttribute]
internal static class Microsoft.VisualStudio.Threading.Analyzers.SyntaxGeneratorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static SyntaxNode TypeExpressionForStaticMemberAccess(SyntaxGenerator generator, INamedTypeSymbol typeSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static SyntaxNode TryGetContainingDeclaration(SyntaxGenerator generator, SyntaxNode node, Nullable`1<DeclarationKind> kind);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static SyntaxNode <TypeExpressionForStaticMemberAccess>g__QualifiedNameToMemberAccess|0_0(int qualifiedNameSyntaxKind, int memberAccessExpressionSyntaxKind, SyntaxNode expression, SyntaxGenerator generator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD002UseJtfRunCodeFixWithAwait : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD002UseJtfRunCodeFixWithAwait();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.VSTHRD002UseJtfRunCodeFixWithAwait/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public virtual FixAllProvider GetFixAllProvider();
    private static bool TryFindNodeAtSource(Diagnostic diagnostic, SyntaxNode root, ExpressionSyntax& target, Func`3& transform);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static SimpleNameSyntax <TryFindNodeAtSource>g__FindStaticWaitInvocation|5_0(ExpressionSyntax from);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <TryFindNodeAtSource>g__TransformStaticWhatInvocation|5_1(ExpressionSyntax from, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ExpressionSyntax <TryFindNodeAtSource>g__FindTwoLevelDeepIdentifierInvocation|5_2(ExpressionSyntax from, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ExpressionSyntax <TryFindNodeAtSource>g__FindOneLevelDeepIdentifierInvocation|5_3(ExpressionSyntax from, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static ExpressionSyntax <TryFindNodeAtSource>g__FindParentMemberAccess|5_4(ExpressionSyntax from, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD010MainThreadUsageCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD010MainThreadUsageCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.VSTHRD010MainThreadUsageCodeFix/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD100AsyncVoidMethodCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD100AsyncVoidMethodCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public virtual FixAllProvider GetFixAllProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD103UseAsyncOptionCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD103UseAsyncOptionCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.VSTHRD103UseAsyncOptionCodeFix/<RegisterCodeFixesAsync>d__3")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public virtual FixAllProvider GetFixAllProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD107AwaitTaskWithinUsingExpressionCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD107AwaitTaskWithinUsingExpressionCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public virtual FixAllProvider GetFixAllProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD109AvoidAssertInAsyncMethodsCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD109AvoidAssertInAsyncMethodsCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.VSTHRD109AvoidAssertInAsyncMethodsCodeFix/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD111UseConfigureAwaitCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD111UseConfigureAwaitCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.VSTHRD111UseConfigureAwaitCodeFix/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD112ImplementSystemIAsyncDisposableCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD112ImplementSystemIAsyncDisposableCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.VSTHRD112ImplementSystemIAsyncDisposableCodeFix/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD114AvoidReturningNullTaskCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD114AvoidReturningNullTaskCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Threading.Analyzers.VSTHRD114AvoidReturningNullTaskCodeFix/<RegisterCodeFixesAsync>d__4")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.VisualStudio.Threading.Analyzers.VSTHRD200UseAsyncNamingConventionCodeFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> ReusableFixableDiagnosticIds;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static VSTHRD200UseAsyncNamingConventionCodeFix();
    public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    public virtual FixAllProvider GetFixAllProvider();
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
