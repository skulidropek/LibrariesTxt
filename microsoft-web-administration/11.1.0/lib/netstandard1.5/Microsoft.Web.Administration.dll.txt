[DebuggerDisplayAttribute("Path = {Path}")]
public class Microsoft.Web.Administration.Application : ConfigurationElement {
    private VirtualDirectoryDefaults _virtualDirectoryDefaults;
    private VirtualDirectoryCollection _virtualDirectories;
    private IAppHostProperty _pathProperty;
    private Site _site;
    public string ApplicationPoolName { get; public set; }
    public string EnabledProtocols { get; public set; }
    public string Path { get; public set; }
    private IAppHostProperty PathProperty { get; }
    internal Site Site { get; }
    public VirtualDirectoryCollection VirtualDirectories { get; }
    public VirtualDirectoryDefaults VirtualDirectoryDefaults { get; }
    internal Application(Site site);
    public string get_ApplicationPoolName();
    public void set_ApplicationPoolName(string value);
    public string get_EnabledProtocols();
    public void set_EnabledProtocols(string value);
    public string get_Path();
    public void set_Path(string value);
    private IAppHostProperty get_PathProperty();
    internal Site get_Site();
    public VirtualDirectoryCollection get_VirtualDirectories();
    public VirtualDirectoryDefaults get_VirtualDirectoryDefaults();
    public Configuration GetWebConfiguration();
    public virtual string ToString();
    private IAppHostProperty PathPropertyCreator();
    private VirtualDirectoryCollection VirtualDirectoryCollectionCreator();
    private VirtualDirectoryDefaults VirtualDirectoryDefaultsCreator();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.ApplicationCollection : ConfigurationElementCollectionBase`1<Application> {
    private Site _site;
    public Application Item { get; }
    public static Char[] InvalidApplicationPathCharacters();
    public Application get_Item(string path);
    private string TrimLastPathPart(string path, String& trimmedPart);
    private bool DoesVdirPathExist(string path);
    public Application Add(string path, string physicalPath);
    protected virtual Application CreateNewElement(string elementTagName);
    internal void SetValues(Site site);
    private static void ValidatePath(string path);
}
public class Microsoft.Web.Administration.ApplicationDefaults : ConfigurationElement {
    private ApplicationDefaults _parentDefaults;
    public string ApplicationPoolName { get; public set; }
    public string EnabledProtocols { get; public set; }
    internal ApplicationDefaults(ApplicationDefaults parentDefaults);
    public string get_ApplicationPoolName();
    public void set_ApplicationPoolName(string value);
    public string get_EnabledProtocols();
    public void set_EnabledProtocols(string value);
    private object GetValue(string attributeName);
}
[DebuggerDisplayAttribute("Id = {Id}")]
public class Microsoft.Web.Administration.ApplicationDomain : ConfigurationElement {
    private WorkerProcess _parentWorkerProcess;
    public string Id { get; }
    public int Idle { get; }
    public string PhysicalPath { get; }
    public string VirtualPath { get; }
    public WorkerProcess WorkerProcess { get; }
    internal ApplicationDomain(WorkerProcess parentWorkerProcess);
    public string get_Id();
    public int get_Idle();
    public string get_PhysicalPath();
    public string get_VirtualPath();
    public WorkerProcess get_WorkerProcess();
    public void Unload();
}
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.ApplicationDomainCollection : ConfigurationElementCollectionBase`1<ApplicationDomain> {
    private WorkerProcess _parentWorkerProcess;
    internal ApplicationDomainCollection(WorkerProcess parentWorkerProcess);
    protected virtual ApplicationDomain CreateNewElement(string elementTagName);
}
[DebuggerDisplayAttribute("Name = {Name}")]
public class Microsoft.Web.Administration.ApplicationPool : ConfigurationElement {
    private ApplicationPoolCpu _cpu;
    private ApplicationPoolFailure _failure;
    private ApplicationPoolProcessModel _processModel;
    private ApplicationPoolRecycling _recycling;
    private WorkerProcessCollection _workerProcesses;
    private IAppHostProperty _nameProperty;
    private ServerManager _owner;
    public bool AutoStart { get; public set; }
    public ApplicationPoolCpu Cpu { get; }
    public bool Enable32BitAppOnWin64 { get; public set; }
    public ApplicationPoolFailure Failure { get; }
    public ManagedPipelineMode ManagedPipelineMode { get; public set; }
    public StartMode StartMode { get; public set; }
    public string ManagedRuntimeVersion { get; public set; }
    public string Name { get; public set; }
    private IAppHostProperty NameProperty { get; }
    public ApplicationPoolProcessModel ProcessModel { get; }
    public long QueueLength { get; public set; }
    public ApplicationPoolRecycling Recycling { get; }
    public ObjectState State { get; }
    public WorkerProcessCollection WorkerProcesses { get; }
    internal ApplicationPool(ServerManager owner);
    public bool get_AutoStart();
    public void set_AutoStart(bool value);
    public ApplicationPoolCpu get_Cpu();
    public bool get_Enable32BitAppOnWin64();
    public void set_Enable32BitAppOnWin64(bool value);
    public ApplicationPoolFailure get_Failure();
    public ManagedPipelineMode get_ManagedPipelineMode();
    public void set_ManagedPipelineMode(ManagedPipelineMode value);
    public StartMode get_StartMode();
    public void set_StartMode(StartMode value);
    public string get_ManagedRuntimeVersion();
    public void set_ManagedRuntimeVersion(string value);
    public string get_Name();
    public void set_Name(string value);
    private IAppHostProperty get_NameProperty();
    public ApplicationPoolProcessModel get_ProcessModel();
    public long get_QueueLength();
    public void set_QueueLength(long value);
    public ApplicationPoolRecycling get_Recycling();
    public ObjectState get_State();
    public WorkerProcessCollection get_WorkerProcesses();
    private ApplicationPoolCpu ApplicationPoolCpuCreator();
    private ApplicationPoolFailure ApplicationPoolFailureCreator();
    private ApplicationPoolProcessModel ApplicationPoolProcessModelCreator();
    private ApplicationPoolRecycling ApplicationPoolRecyclingCreator();
    public ObjectState Recycle();
    public ObjectState Start();
    public ObjectState Stop();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.ApplicationPoolCollection : ConfigurationElementCollectionBase`1<ApplicationPool> {
    private ServerManager _owner;
    public ApplicationPool Item { get; }
    internal ApplicationPoolCollection(ServerManager owner);
    public ApplicationPool get_Item(string name);
    public ApplicationPool Add(string name);
    protected virtual ApplicationPool CreateNewElement(string elementTagName);
    public static Char[] InvalidApplicationPoolNameCharacters();
    private static void ValidateName(string name);
}
public class Microsoft.Web.Administration.ApplicationPoolCpu : ConfigurationElement {
    public ProcessorAction Action { get; public set; }
    public long Limit { get; public set; }
    public TimeSpan ResetInterval { get; public set; }
    public bool SmpAffinitized { get; public set; }
    public long SmpProcessorAffinityMask { get; public set; }
    public long SmpProcessorAffinityMask2 { get; public set; }
    public ProcessorAction get_Action();
    public void set_Action(ProcessorAction value);
    public long get_Limit();
    public void set_Limit(long value);
    public TimeSpan get_ResetInterval();
    public void set_ResetInterval(TimeSpan value);
    public bool get_SmpAffinitized();
    public void set_SmpAffinitized(bool value);
    public long get_SmpProcessorAffinityMask();
    public void set_SmpProcessorAffinityMask(long value);
    public long get_SmpProcessorAffinityMask2();
    public void set_SmpProcessorAffinityMask2(long value);
}
public class Microsoft.Web.Administration.ApplicationPoolDefaults : ConfigurationElement {
    private ApplicationPoolCpu _cpu;
    private ApplicationPoolFailure _failure;
    private ApplicationPoolProcessModel _processModel;
    private ApplicationPoolRecycling _recycling;
    public bool AutoStart { get; public set; }
    public ApplicationPoolCpu Cpu { get; }
    public bool Enable32BitAppOnWin64 { get; public set; }
    public ApplicationPoolFailure Failure { get; }
    public ManagedPipelineMode ManagedPipelineMode { get; public set; }
    public StartMode StartMode { get; public set; }
    public string ManagedRuntimeVersion { get; public set; }
    public ApplicationPoolProcessModel ProcessModel { get; }
    public long QueueLength { get; public set; }
    public ApplicationPoolRecycling Recycling { get; }
    public bool get_AutoStart();
    public void set_AutoStart(bool value);
    public ApplicationPoolCpu get_Cpu();
    public bool get_Enable32BitAppOnWin64();
    public void set_Enable32BitAppOnWin64(bool value);
    public ApplicationPoolFailure get_Failure();
    public ManagedPipelineMode get_ManagedPipelineMode();
    public void set_ManagedPipelineMode(ManagedPipelineMode value);
    public StartMode get_StartMode();
    public void set_StartMode(StartMode value);
    public string get_ManagedRuntimeVersion();
    public void set_ManagedRuntimeVersion(string value);
    public ApplicationPoolProcessModel get_ProcessModel();
    public long get_QueueLength();
    public void set_QueueLength(long value);
    public ApplicationPoolRecycling get_Recycling();
    private ApplicationPoolCpu ApplicationPoolCpuCreator();
    private ApplicationPoolFailure ApplicationPoolFailureCreator();
    private ApplicationPoolProcessModel ApplicationPoolProcessModelCreator();
    private ApplicationPoolRecycling ApplicationPoolRecyclingCreator();
}
public class Microsoft.Web.Administration.ApplicationPoolFailure : ConfigurationElement {
    public string AutoShutdownExe { get; public set; }
    public string AutoShutdownParams { get; public set; }
    public LoadBalancerCapabilities LoadBalancerCapabilities { get; public set; }
    public string OrphanActionExe { get; public set; }
    public string OrphanActionParams { get; public set; }
    public bool OrphanWorkerProcess { get; public set; }
    public bool RapidFailProtection { get; public set; }
    public TimeSpan RapidFailProtectionInterval { get; public set; }
    public long RapidFailProtectionMaxCrashes { get; public set; }
    public string get_AutoShutdownExe();
    public void set_AutoShutdownExe(string value);
    public string get_AutoShutdownParams();
    public void set_AutoShutdownParams(string value);
    public LoadBalancerCapabilities get_LoadBalancerCapabilities();
    public void set_LoadBalancerCapabilities(LoadBalancerCapabilities value);
    public string get_OrphanActionExe();
    public void set_OrphanActionExe(string value);
    public string get_OrphanActionParams();
    public void set_OrphanActionParams(string value);
    public bool get_OrphanWorkerProcess();
    public void set_OrphanWorkerProcess(bool value);
    public bool get_RapidFailProtection();
    public void set_RapidFailProtection(bool value);
    public TimeSpan get_RapidFailProtectionInterval();
    public void set_RapidFailProtectionInterval(TimeSpan value);
    public long get_RapidFailProtectionMaxCrashes();
    public void set_RapidFailProtectionMaxCrashes(long value);
}
public class Microsoft.Web.Administration.ApplicationPoolPeriodicRestart : ConfigurationElement {
    private ScheduleCollection _scheduleCollection;
    public long Memory { get; public set; }
    public long PrivateMemory { get; public set; }
    public long Requests { get; public set; }
    public ScheduleCollection Schedule { get; }
    public TimeSpan Time { get; public set; }
    public long get_Memory();
    public void set_Memory(long value);
    public long get_PrivateMemory();
    public void set_PrivateMemory(long value);
    public long get_Requests();
    public void set_Requests(long value);
    public ScheduleCollection get_Schedule();
    public TimeSpan get_Time();
    public void set_Time(TimeSpan value);
    private ScheduleCollection ScheduleCollectionCreator();
}
public class Microsoft.Web.Administration.ApplicationPoolProcessModel : ConfigurationElement {
    public ProcessModelIdentityType IdentityType { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public IdleTimeoutAction IdleTimeoutAction { get; public set; }
    public bool LoadUserProfile { get; public set; }
    public long MaxProcesses { get; public set; }
    public bool PingingEnabled { get; public set; }
    public TimeSpan PingInterval { get; public set; }
    public TimeSpan PingResponseTime { get; public set; }
    public string Password { get; public set; }
    public TimeSpan ShutdownTimeLimit { get; public set; }
    public TimeSpan StartupTimeLimit { get; public set; }
    public string UserName { get; public set; }
    public ProcessModelLogEventOnProcessModel LogEventOnProcessModel { get; public set; }
    public ProcessModelIdentityType get_IdentityType();
    public void set_IdentityType(ProcessModelIdentityType value);
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
    public IdleTimeoutAction get_IdleTimeoutAction();
    public void set_IdleTimeoutAction(IdleTimeoutAction value);
    public bool get_LoadUserProfile();
    public void set_LoadUserProfile(bool value);
    public long get_MaxProcesses();
    public void set_MaxProcesses(long value);
    public bool get_PingingEnabled();
    public void set_PingingEnabled(bool value);
    public TimeSpan get_PingInterval();
    public void set_PingInterval(TimeSpan value);
    public TimeSpan get_PingResponseTime();
    public void set_PingResponseTime(TimeSpan value);
    public string get_Password();
    public void set_Password(string value);
    public TimeSpan get_ShutdownTimeLimit();
    public void set_ShutdownTimeLimit(TimeSpan value);
    public TimeSpan get_StartupTimeLimit();
    public void set_StartupTimeLimit(TimeSpan value);
    public string get_UserName();
    public void set_UserName(string value);
    public ProcessModelLogEventOnProcessModel get_LogEventOnProcessModel();
    public void set_LogEventOnProcessModel(ProcessModelLogEventOnProcessModel value);
}
public class Microsoft.Web.Administration.ApplicationPoolRecycling : ConfigurationElement {
    private ApplicationPoolPeriodicRestart _periodicRestart;
    public bool DisallowOverlappingRotation { get; public set; }
    public bool DisallowRotationOnConfigChange { get; public set; }
    public RecyclingLogEventOnRecycle LogEventOnRecycle { get; public set; }
    public ApplicationPoolPeriodicRestart PeriodicRestart { get; }
    public bool get_DisallowOverlappingRotation();
    public void set_DisallowOverlappingRotation(bool value);
    public bool get_DisallowRotationOnConfigChange();
    public void set_DisallowRotationOnConfigChange(bool value);
    public RecyclingLogEventOnRecycle get_LogEventOnRecycle();
    public void set_LogEventOnRecycle(RecyclingLogEventOnRecycle value);
    public ApplicationPoolPeriodicRestart get_PeriodicRestart();
    private ApplicationPoolPeriodicRestart ApplicationPoolPeriodicRestartCreator();
}
public enum Microsoft.Web.Administration.AuthenticationLogonMethod : Enum {
    public int value__;
    public static AuthenticationLogonMethod Interactive;
    public static AuthenticationLogonMethod Batch;
    public static AuthenticationLogonMethod Network;
    public static AuthenticationLogonMethod ClearText;
}
[DebuggerDisplayAttribute("Protocol = {Protocol}, BindingInformation = {BindingInformation}")]
public class Microsoft.Web.Administration.Binding : ConfigurationElement {
    private ServerManager _serverManager;
    private IPEndPoint _endPoint;
    private string _host;
    private bool _isIPPortHostBinding;
    private Byte[] _certificateHash;
    private string _certificateStoreName;
    private bool _useDsMapper;
    private bool _useDsMapperSet;
    public string BindingInformation { get; public set; }
    public Byte[] CertificateHash { get; public set; }
    public string CertificateStoreName { get; public set; }
    public IPEndPoint EndPoint { get; }
    public string Host { get; }
    private bool IsHttp { get; }
    private bool IsHttps { get; }
    public bool IsIPPortHostBinding { get; }
    internal SslFlags SslFlagsNoThrow { get; }
    public SslFlags SslFlags { get; public set; }
    public bool UseDsMapper { get; public set; }
    internal bool UseDsMapperInternal { get; }
    internal bool UseDsMapperInternalSet { get; }
    public string Protocol { get; public set; }
    internal Binding(ServerManager serverManager);
    public string get_BindingInformation();
    public void set_BindingInformation(string value);
    public Byte[] get_CertificateHash();
    public void set_CertificateHash(Byte[] value);
    public string get_CertificateStoreName();
    public void set_CertificateStoreName(string value);
    public IPEndPoint get_EndPoint();
    public string get_Host();
    private bool get_IsHttp();
    private bool get_IsHttps();
    public bool get_IsIPPortHostBinding();
    internal SslFlags get_SslFlagsNoThrow();
    public SslFlags get_SslFlags();
    public void set_SslFlags(SslFlags value);
    public bool get_UseDsMapper();
    public void set_UseDsMapper(bool value);
    internal bool get_UseDsMapperInternal();
    internal bool get_UseDsMapperInternalSet();
    public string get_Protocol();
    public void set_Protocol(string value);
    private void LoadBindingInfo();
    private void SetBindingProperty(string attributeName, string value);
    public virtual string ToString();
    internal void RemoveSslCertificate();
    internal void SetDsMapper(bool useDsMapper);
    internal void AddSslCertificate(Byte[] certificateHash, string certificateStoreName);
    private static void InitWinsock();
    private object GetBindingAttributeValue(string attributeName);
}
public class Microsoft.Web.Administration.BindingCollection : ConfigurationElementCollectionBase`1<Binding> {
    private ServerManager _serverManager;
    internal BindingCollection(ServerManager serverManager);
    public Binding Add(Binding binding);
    public Binding Add(string bindingInformation, string bindingProtocol);
    public Binding Add(string bindingInformation, Byte[] certificateHash, string certificateStoreName);
    public Binding Add(string bindingInformation, Byte[] certificateHash, string certificateStoreName, SslFlags sslFlags);
    protected virtual Binding CreateNewElement(string elementTagName);
    public void Remove(Binding element);
    public void Remove(Binding element, bool removeConfigOnly);
    public void RemoveAt(int index);
    private void RemoveIPPortBinding(Binding element);
}
internal class Microsoft.Web.Administration.BindingManager : object {
    private List`1<BindingTransaction> _bindingTransactionList;
    private ServerManager _serverManager;
    private IList`1<BindingTransaction> BindingTransactionList { get; }
    internal BindingManager(ServerManager serverManager);
    private IList`1<BindingTransaction> get_BindingTransactionList();
    public void AddNewBindingTransaction(Binding binding, Byte[] certificateHash, string certificateStoreName, SslFlags sslFlags);
    public void AddModifyBindingTransaction(Binding binding, string originalEndPointProtocol, IPEndPoint originalEndPoint, string modifiedEndPointProtocol, IPEndPoint modifiedEndPoint, Byte[] certificateHash, string certificateStoreName, string originalHostName, string newHostName, SslFlags oldSslFlags, SslFlags newSslFlags);
    public void AddModifyDSMapperPropertyTransaction(Binding binding, bool useDsMapper);
    public void AddRemoveBindingTransaction(Binding binding);
    internal void RemoveTransactionsFor(Binding binding);
    public void Save();
}
public class Microsoft.Web.Administration.Configuration : object {
    private static BindingFlags DefaultBindingFlags;
    private IAppHostWritableAdminManager _adminManager;
    private IAppHostConfigFile _configFile;
    private string _configPathToEdit;
    private ConfigurationManager _configurationManager;
    private bool _isDirty;
    private bool _hasBeenCommitted;
    private Dictionary`2<string, IAppHostElement> _sectionTable;
    private SectionGroup _rootSectionGroup;
    private EventHandler _cacheInvalidated;
    private NativeConfigurationChangeHandler _nativeChangeHandler;
    private IAppHostAdminManager _readManager;
    private IAppHostAdminManager AdminManager { get; }
    internal IAppHostConfigFile ConfigFile { get; }
    internal string ConfigurationPathToEdit { get; }
    public SectionGroup RootSectionGroup { get; }
    internal Configuration(ConfigurationManager configurationManager, IAppHostWritableAdminManager adminManager, string configPathToEdit);
    internal Configuration(ConfigurationManager configurationManager, IAppHostAdminManager adminManager, string configPathToEdit);
    private IAppHostAdminManager get_AdminManager();
    internal IAppHostConfigFile get_ConfigFile();
    internal string get_ConfigurationPathToEdit();
    public SectionGroup get_RootSectionGroup();
    public void add_CacheInvalidated(EventHandler value);
    public void remove_CacheInvalidated(EventHandler value);
    internal void ClearCachedObjects();
    internal void CommitChanges();
    private static ConfigurationSection CreateSection(Type sectionType);
    private void EnsureNotDisposed();
    private string GetConfigurationPath(string locationPath);
    [EditorBrowsableAttribute("2")]
public SectionGroup GetEffectiveSectionGroup();
    public String[] GetLocationPaths();
    public object GetMetadata(string metadataType);
    public ConfigurationSection GetSection(string sectionPath);
    public ConfigurationSection GetSection(string sectionPath, Type type);
    public ConfigurationSection GetSection(string sectionPath, string locationPath);
    public ConfigurationSection GetSection(string sectionPath, Type type, string locationPath);
    private ConfigurationSection GetSectionInternal(ConfigurationSection section, string sectionPath, string locationPath);
    private void OnConfigurationChanged(EventArgs e);
    internal void Release();
    private void ReleaseNativeChangeHandler();
    public void RemoveLocationPath(string locationPath);
    public void RenameLocationPath(string locationPath, string newLocationPath);
    internal void SetDirty();
    public void SetMetadata(string metadataType, object value);
}
[DebuggerDisplayAttribute("Name = {Name}")]
public class Microsoft.Web.Administration.ConfigurationAttribute : object {
    private ConfigurationElement _parentElement;
    private IAppHostProperty _property;
    private ConfigurationAttributeSchema _schema;
    public bool IsInheritedFromDefaultValue { get; }
    public bool IsProtected { get; }
    public string Name { get; }
    public ConfigurationAttributeSchema Schema { get; }
    public object Value { get; public set; }
    internal ConfigurationAttribute(IAppHostProperty property, ConfigurationElement parentElement);
    public bool get_IsInheritedFromDefaultValue();
    public bool get_IsProtected();
    public string get_Name();
    public ConfigurationAttributeSchema get_Schema();
    public object get_Value();
    public void set_Value(object value);
    public void Delete();
    public object GetMetadata(string metadataType);
    public void SetMetadata(string metadataType, object value);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.ConfigurationAttributeCollection : object {
    private List`1<ConfigurationAttribute> _attributes;
    public int Count { get; }
    public ConfigurationAttribute Item { get; }
    public ConfigurationAttribute Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ConfigurationAttributeCollection(IAppHostPropertyCollection properties, ConfigurationElement parentElement);
    public sealed virtual int get_Count();
    public ConfigurationAttribute get_Item(int index);
    public ConfigurationAttribute get_Item(string name);
    public sealed virtual IEnumerator`1<ConfigurationAttribute> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
[DebuggerDisplayAttribute("Name = {Name}")]
public class Microsoft.Web.Administration.ConfigurationAttributeSchema : object {
    private IAppHostPropertySchema _schema;
    public bool AllowInfinite { get; }
    public object DefaultValue { get; }
    public bool IsCaseSensitive { get; }
    public bool IsCombinedKey { get; }
    public bool IsEncrypted { get; }
    public bool IsExpanded { get; }
    public bool IsRequired { get; }
    public bool IsUniqueKey { get; }
    public string Name { get; }
    public string TimeSpanFormat { get; }
    public string Type { get; }
    public string ValidationParameter { get; }
    public string ValidationType { get; }
    internal ConfigurationAttributeSchema(IAppHostPropertySchema schema);
    public bool get_AllowInfinite();
    public object get_DefaultValue();
    public bool get_IsCaseSensitive();
    public bool get_IsCombinedKey();
    public bool get_IsEncrypted();
    public bool get_IsExpanded();
    public bool get_IsRequired();
    public bool get_IsUniqueKey();
    public string get_Name();
    public string get_TimeSpanFormat();
    public string get_Type();
    public string get_ValidationParameter();
    public string get_ValidationType();
    public ConfigurationEnumValueCollection GetEnumValues();
    public object GetMetadata(string metadataType);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.ConfigurationAttributeSchemaCollection : object {
    private List`1<ConfigurationAttributeSchema> _schemas;
    public int Count { get; }
    public ConfigurationAttributeSchema Item { get; }
    public ConfigurationAttributeSchema Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ConfigurationAttributeSchemaCollection(IAppHostPropertySchemaCollection schemas);
    public sealed virtual int get_Count();
    public ConfigurationAttributeSchema get_Item(int index);
    public ConfigurationAttributeSchema get_Item(string name);
    public sealed virtual IEnumerator`1<ConfigurationAttributeSchema> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.ConfigurationChildElementCollection : object {
    private List`1<ConfigurationElement> _elements;
    private static ConfigurationChildElementCollection _empty;
    public int Count { get; }
    internal static ConfigurationChildElementCollection Empty { get; }
    public ConfigurationElement Item { get; }
    public ConfigurationElement Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ConfigurationChildElementCollection(Configuration configuration, IAppHostChildElementCollection childElements);
    public sealed virtual int get_Count();
    internal static ConfigurationChildElementCollection get_Empty();
    public ConfigurationElement get_Item(int index);
    public ConfigurationElement get_Item(string name);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<ConfigurationElement> GetEnumerator();
}
public class Microsoft.Web.Administration.ConfigurationCollectionSchema : object {
    private IAppHostCollectionSchema _schema;
    private ConfigurationElementSchema _clearElementSchema;
    private ConfigurationElementSchema _removeElementSchema;
    public string AddElementNames { get; }
    public bool AllowDuplicates { get; }
    public string ClearElementName { get; }
    public bool IsMergeAppend { get; }
    public string RemoveElementName { get; }
    internal ConfigurationCollectionSchema(IAppHostCollectionSchema schema);
    public string get_AddElementNames();
    public bool get_AllowDuplicates();
    public string get_ClearElementName();
    public bool get_IsMergeAppend();
    public string get_RemoveElementName();
    public ConfigurationElementSchema GetAddElementSchema(string elementName);
    public ConfigurationElementSchema GetClearElementSchema();
    public ConfigurationElementSchema GetRemoveElementSchema();
    public object GetMetadata(string metadataType);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.ConfigurationElement : object {
    private IAppHostElement _appHostElement;
    private Configuration _configuration;
    private ConfigurationElementSchema _elementSchema;
    private ConfigurationAttributeCollection _attributes;
    private ConfigurationChildElementCollection _childElements;
    private ConfigurationMethodCollection _methods;
    private bool _isMethodElement;
    private static BindingFlags DefaultBindingFlags;
    internal IAppHostElement AppHostElement { get; }
    public ConfigurationAttributeCollection Attributes { get; }
    public ConfigurationChildElementCollection ChildElements { get; }
    internal Configuration Configuration { get; }
    [EditorBrowsableAttribute("1")]
public string ElementTagName { get; }
    public bool IsLocallyStored { get; }
    public object Item { get; public set; }
    public ConfigurationMethodCollection Methods { get; }
    [EditorBrowsableAttribute("1")]
public IDictionary`2<string, string> RawAttributes { get; }
    public ConfigurationElementSchema Schema { get; }
    internal IAppHostElement get_AppHostElement();
    public ConfigurationAttributeCollection get_Attributes();
    public ConfigurationChildElementCollection get_ChildElements();
    internal Configuration get_Configuration();
    public string get_ElementTagName();
    public bool get_IsLocallyStored();
    public object get_Item(string attributeName);
    public void set_Item(string attributeName, object value);
    public ConfigurationMethodCollection get_Methods();
    public IDictionary`2<string, string> get_RawAttributes();
    public ConfigurationElementSchema get_Schema();
    internal static ConfigurationElement CreateStronglyTypedWrapper(Type elementType);
    [EditorBrowsableAttribute("1")]
public void Delete();
    internal void ExecuteMethod(string methodName);
    public ConfigurationAttribute GetAttribute(string attributeName);
    public object GetAttributeValue(string attributeName);
    public ConfigurationElement GetChildElement(string elementName);
    public ConfigurationElement GetChildElement(string elementName, Type elementType);
    public ConfigurationElementCollection GetCollection(string collectionName);
    public ConfigurationElement GetCollection(string collectionName, Type collectionType);
    public ConfigurationElementCollection GetCollection();
    public ConfigurationElement GetCollection(Type collectionType);
    public object GetMetadata(string metadataType);
    internal static object GetPropertyValue(IAppHostProperty property);
    internal void Initialize(Configuration configuration, IAppHostElement appHostElement);
    internal void InitializeMethodElement(IAppHostElement appHostElement);
    public void SetAttributeValue(string attributeName, object value);
    internal void SetDirty();
    public void SetMetadata(string metadataType, object value);
}
public class Microsoft.Web.Administration.ConfigurationElementCollection : ConfigurationElementCollectionBase`1<ConfigurationElement> {
    protected virtual ConfigurationElement CreateNewElement(string elementTagName);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public abstract class Microsoft.Web.Administration.ConfigurationElementCollectionBase`1 : ConfigurationElement {
    private string _addElementName;
    private string _clearElementName;
    private List`1<T> _elements;
    private List`1<T> _unpositionedElements;
    private IAppHostElementCollection _collection;
    private ConfigurationCollectionSchema _schema;
    private string AddElementName { get; }
    public bool AllowsAdd { get; }
    public bool AllowsClear { get; }
    public bool AllowsRemove { get; }
    private string ClearElementName { get; }
    private IAppHostElementCollection Collection { get; }
    public int Count { get; }
    private List`1<T> Elements { get; }
    public T Item { get; }
    public ConfigurationCollectionSchema Schema { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private string get_AddElementName();
    public bool get_AllowsAdd();
    public bool get_AllowsClear();
    public bool get_AllowsRemove();
    private string get_ClearElementName();
    private IAppHostElementCollection get_Collection();
    public int get_Count();
    internal T FindElementWithCollectionKey(string elementName, string collectionKey, object value);
    private List`1<T> get_Elements();
    public T get_Item(int index);
    public ConfigurationCollectionSchema get_Schema();
    public T Add(T element);
    public T AddAt(int index, T element);
    public void Clear();
    public T CreateElement();
    public T CreateElement(string elementTagName);
    protected virtual T CreateNewElement(string elementTagName);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public int IndexOf(T element);
    public void Remove(T element);
    public void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
[DebuggerDisplayAttribute("Name = {Name}")]
public class Microsoft.Web.Administration.ConfigurationElementSchema : object {
    private IAppHostElementSchema _schema;
    private ConfigurationAttributeSchemaCollection _attributeSchemas;
    private ConfigurationElementSchemaCollection _elementSchemas;
    private ConfigurationCollectionSchema _collectionSchema;
    public bool AllowUnrecognizedAttributes { get; }
    public ConfigurationAttributeSchemaCollection AttributeSchemas { get; }
    public ConfigurationElementSchemaCollection ChildElementSchemas { get; }
    public ConfigurationCollectionSchema CollectionSchema { get; }
    public bool IsCollectionDefault { get; }
    public string Name { get; }
    internal ConfigurationElementSchema(IAppHostElementSchema schema);
    public bool get_AllowUnrecognizedAttributes();
    public ConfigurationAttributeSchemaCollection get_AttributeSchemas();
    public ConfigurationElementSchemaCollection get_ChildElementSchemas();
    public ConfigurationCollectionSchema get_CollectionSchema();
    public bool get_IsCollectionDefault();
    public string get_Name();
    public object GetMetadata(string metadataType);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.ConfigurationElementSchemaCollection : object {
    private List`1<ConfigurationElementSchema> _schemas;
    public int Count { get; }
    public ConfigurationElementSchema Item { get; }
    public ConfigurationElementSchema Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ConfigurationElementSchemaCollection(IAppHostElementSchemaCollection schemas);
    public sealed virtual int get_Count();
    public ConfigurationElementSchema get_Item(int index);
    public ConfigurationElementSchema get_Item(string name);
    public sealed virtual IEnumerator`1<ConfigurationElementSchema> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
[DebuggerDisplayAttribute("{Name} = {Value}")]
public class Microsoft.Web.Administration.ConfigurationEnumValue : object {
    private IAppHostConstantValue _value;
    public string Name { get; }
    public long Value { get; }
    internal ConfigurationEnumValue(IAppHostConstantValue value);
    public string get_Name();
    public long get_Value();
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.ConfigurationEnumValueCollection : object {
    private List`1<ConfigurationEnumValue> _values;
    public int Count { get; }
    public ConfigurationEnumValue Item { get; }
    public ConfigurationEnumValue Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ConfigurationEnumValueCollection(IAppHostConstantValueCollection enumValues);
    public sealed virtual int get_Count();
    public ConfigurationEnumValue get_Item(int index);
    public ConfigurationEnumValue get_Item(string name);
    public sealed virtual IEnumerator`1<ConfigurationEnumValue> GetEnumerator();
    public string GetName(long value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Web.Administration.ConfigurationManager : object {
    internal static string AdministrationConfigPath;
    internal static string MachineConfigPath;
    internal static string RootWebConfigPath;
    internal static string ApplicationHostConfigPath;
    internal static string RedirectionConfigPath;
    private string _applicationHostConfigurationPath;
    private ServerManager _owner;
    private SortedList`2<string, Configuration> _configurations;
    private List`1<Configuration> _configurationsCommited;
    private string _administrationConfigurationPath;
    private string _redirectionUserName;
    private string _redirectionDomain;
    private string _redirectionPassword;
    private bool _redirectionEnabled;
    private bool _serviceModel;
    private static int ERROR_NOT_FOUND;
    internal ServerManager Owner { get; }
    internal bool RedirectionEnabled { get; }
    internal bool ServiceModel { get; internal set; }
    public ConfigurationManager(ServerManager owner, string applicationHostConfigurationPath);
    internal ServerManager get_Owner();
    internal bool get_RedirectionEnabled();
    internal bool get_ServiceModel();
    internal void set_ServiceModel(bool value);
    internal static string CombineConfigurationPath(string basePath, string locationPath);
    public void CommitChanges();
    private IAppHostAdminManager CreateReadOnlyAdminManager(WebConfigurationMap webConfigMap, string configPathToEdit, bool isAdminConfig, bool isRedirectionConfig);
    private IAppHostAdminManager CreateAdminManager(WebConfigurationMap webConfigMap, bool isAdminConfig, bool isRedirectionConfig);
    private Configuration CreateConfiguration(WebConfigurationMap configMap, string configPathToEdit, bool isAdminConfig, bool isRedirectionConfig);
    private IAppHostWritableAdminManager CreateWritableAdminManager(WebConfigurationMap webConfigMap, string configPathToEdit, bool isAdminConfig, bool isRedirectionConfig);
    private void EnsureRedirectionInfoLoaded();
    public Configuration GetAdministrationConfiguration(WebConfigurationMap configMap, string configurationPath);
    public Configuration GetApplicationHostConfiguration();
    public Configuration GetConfiguration(string rawConfigurationPath, string cacheKey, bool isAdminConfig, bool isRedirectionConfig);
    public Configuration GetWebConfiguration(WebConfigurationMap configMap, string configurationPath);
    private void LoadRedirectionInfo();
    private void OnConfigCacheInvalidated(object sender, EventArgs e);
    internal void ClearCache();
    public void Release();
    private void SetAdminManagerProperties(WebConfigurationMap webConfigMap, bool isAdminConfig, IAppHostAdminManager adminManager, bool isRemote, bool isRedirectionConfig);
    private WebConfigurationMap GetAdministrationConfigMapIfNeeded();
}
[DebuggerDisplayAttribute("Name={Name}")]
public class Microsoft.Web.Administration.ConfigurationMethod : object {
    private IAppHostMethod _method;
    private ConfigurationMethodSchema _schema;
    public string Name { get; }
    public ConfigurationMethodSchema Schema { get; }
    internal ConfigurationMethod(IAppHostMethod method);
    public string get_Name();
    public ConfigurationMethodSchema get_Schema();
    public ConfigurationMethodInstance CreateInstance();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.ConfigurationMethodCollection : object {
    private List`1<ConfigurationMethod> _methods;
    public int Count { get; }
    public ConfigurationMethod Item { get; }
    public ConfigurationMethod Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ConfigurationMethodCollection(Configuration configuration, IAppHostMethodCollection methods);
    public sealed virtual int get_Count();
    public ConfigurationMethod get_Item(int index);
    public ConfigurationMethod get_Item(string methodName);
    public sealed virtual IEnumerator`1<ConfigurationMethod> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public class Microsoft.Web.Administration.ConfigurationMethodInstance : object {
    private ConfigurationElement _input;
    private ConfigurationElement _output;
    private IAppHostMethodInstance _method;
    public ConfigurationElement Input { get; }
    public ConfigurationElement Output { get; }
    internal ConfigurationMethodInstance(IAppHostMethodInstance method);
    public ConfigurationElement get_Input();
    public ConfigurationElement get_Output();
    public void Execute();
    [EditorBrowsableAttribute("2")]
public object GetMetadata(string metadataType);
    private ConfigurationElement InputCreator();
    private ConfigurationElement OutputCreator();
    [EditorBrowsableAttribute("2")]
public void SetMetadata(string metadataType, object value);
}
[DebuggerDisplayAttribute("Name = {Name}")]
public class Microsoft.Web.Administration.ConfigurationMethodSchema : object {
    private IAppHostMethodSchema _schema;
    private ConfigurationElementSchema _inputSchema;
    private ConfigurationElementSchema _outputSchema;
    public ConfigurationElementSchema InputSchema { get; }
    public string Name { get; }
    public ConfigurationElementSchema OutputSchema { get; }
    internal ConfigurationMethodSchema(IAppHostMethodSchema schema);
    public ConfigurationElementSchema get_InputSchema();
    public string get_Name();
    public ConfigurationElementSchema get_OutputSchema();
}
public class Microsoft.Web.Administration.ConfigurationSection : ConfigurationElement {
    private string _sectionPath;
    public bool IsLocked { get; }
    public OverrideMode OverrideMode { get; public set; }
    public OverrideMode OverrideModeEffective { get; }
    public string SectionPath { get; }
    public bool get_IsLocked();
    public OverrideMode get_OverrideMode();
    public void set_OverrideMode(OverrideMode value);
    public OverrideMode get_OverrideModeEffective();
    public string get_SectionPath();
    public void RevertToParent();
    internal void SetSectionPath(string sectionPath);
}
internal class Microsoft.Web.Administration.CreateInstanceDelegate`1 : MulticastDelegate {
    public CreateInstanceDelegate`1(object object, IntPtr method);
    public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class Microsoft.Web.Administration.CustomLogField : ConfigurationElement {
    public string LogFieldName { get; public set; }
    public string SourceName { get; public set; }
    public CustomLogFieldSourceType SourceType { get; public set; }
    public string get_LogFieldName();
    public void set_LogFieldName(string value);
    public string get_SourceName();
    public void set_SourceName(string value);
    public CustomLogFieldSourceType get_SourceType();
    public void set_SourceType(CustomLogFieldSourceType value);
}
public class Microsoft.Web.Administration.CustomLogFieldCollection : ConfigurationElementCollectionBase`1<CustomLogField> {
    protected virtual CustomLogField CreateNewElement(string elementTagName);
    public CustomLogField Add(string logFieldName, string sourceName, CustomLogFieldSourceType sourceType);
    public void Remove(CustomLogField field);
}
public enum Microsoft.Web.Administration.CustomLogFieldSourceType : Enum {
    public int value__;
    public static CustomLogFieldSourceType RequestHeader;
    public static CustomLogFieldSourceType ResponseHeader;
    public static CustomLogFieldSourceType ServerVariable;
}
public enum Microsoft.Web.Administration.IdleTimeoutAction : Enum {
    public int value__;
    public static IdleTimeoutAction Terminate;
    public static IdleTimeoutAction Suspend;
}
[GuidAttribute("228FB8F7-FB53-4FD5-8C7B-FF59DE606C5B")]
internal class Microsoft.Web.Administration.Interop.AppHostAdminManager : object {
}
[GuidAttribute("2B72133B-3F5B-4602-8952-803546CE3344")]
internal class Microsoft.Web.Administration.Interop.AppHostWritableAdminManager : object {
}
[GuidAttribute("9BE77978-73ED-4A9A-87FD-13F09FEC1B13")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostAdminManager {
    [DispIdAttribute("1610678275")]
public IAppHostConfigManager ConfigManager { get; }
    public abstract virtual IAppHostElement GetAdminSection(string bstrSectionName, string bstrPath);
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual void SetMetadata(string bstrMetadataType, object Value);
    public abstract virtual IAppHostConfigManager get_ConfigManager();
}
[GuidAttribute("09829352-87C2-418D-8D79-4133969A489D")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostChangeHandler {
    public abstract virtual void OnSectionChanges(string bstrSectionName, string bstrConfigPath);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("08A90F5F-0702-48D6-B45F-02A9885A9768")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostChildElementCollection {
    public UInt32 Count { get; }
    public IAppHostElement Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostElement get_Item(object cIndex);
}
[GuidAttribute("DE095DB1-5368-4D11-81F6-EFEF619B7BCF")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostCollectionSchema {
    public string AddElementNames { get; }
    public IAppHostElementSchema RemoveElementSchema { get; }
    public IAppHostElementSchema ClearElementSchema { get; }
    public bool IsMergeAppend { get; }
    public bool DoesAllowDuplicates { get; }
    public abstract virtual string get_AddElementNames();
    public abstract virtual IAppHostElementSchema GetAddElementSchema(string bstrElementName);
    public abstract virtual IAppHostElementSchema get_RemoveElementSchema();
    public abstract virtual IAppHostElementSchema get_ClearElementSchema();
    public abstract virtual bool get_IsMergeAppend();
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual bool get_DoesAllowDuplicates();
}
[GuidAttribute("4DFA1DF3-8900-4BC7-BBB5-D1A458C52410")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostConfigException {
    public UInt32 LineNumber { get; }
    public string FileName { get; }
    public string ConfigPath { get; }
    public string ErrorLine { get; }
    public string PreErrorLine { get; }
    public string PostErrorLine { get; }
    public string ErrorString { get; }
    public abstract virtual UInt32 get_LineNumber();
    public abstract virtual string get_FileName();
    public abstract virtual string get_ConfigPath();
    public abstract virtual string get_ErrorLine();
    public abstract virtual string get_PreErrorLine();
    public abstract virtual string get_PostErrorLine();
    public abstract virtual string get_ErrorString();
}
[GuidAttribute("ADA4E6FB-E025-401E-A5D0-C3134A281F07")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostConfigFile {
    public string ConfigPath { get; }
    public string FilePath { get; }
    public IAppHostConfigLocationCollection Locations { get; }
    public IAppHostSectionGroup RootSectionGroup { get; }
    public abstract virtual string get_ConfigPath();
    public abstract virtual string get_FilePath();
    public abstract virtual IAppHostConfigLocationCollection get_Locations();
    public abstract virtual IAppHostElement GetAdminSection(string bstrSectionName, string bstrConfigPath);
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual void SetMetadata(string bstrMetadataType, object Value);
    public abstract virtual void ClearInvalidSections();
    public abstract virtual IAppHostSectionGroup get_RootSectionGroup();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("370AF178-7758-4DAD-8146-7391F6E18585")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostConfigLocation {
    public string Path { get; }
    public UInt32 Count { get; }
    public IAppHostElement Item { get; }
    public abstract virtual string get_Path();
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostElement get_Item(object cIndex);
    public abstract virtual IAppHostElement AddConfigSection(string bstrSectionName);
    public abstract virtual void DeleteConfigSection(object cIndex);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("832A32F7-B3EA-4B8C-B260-9A2923001184")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostConfigLocationCollection {
    public UInt32 Count { get; }
    public IAppHostConfigLocation Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostConfigLocation get_Item(object cIndex);
    public abstract virtual IAppHostConfigLocation AddLocation(string bstrLocationPath);
    public abstract virtual void DeleteLocation(object cIndex);
    public abstract virtual void RenameLocation(object varIndex, string bstrLocationPath);
}
[GuidAttribute("8F6D760F-F0CB-4D69-B5F6-848B33E9BDC6")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostConfigManager {
    public abstract virtual IAppHostConfigFile GetConfigFile(string bstrConfigPath);
    public abstract virtual string GetUniqueConfigPath(string bstrConfigPath);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("0716CAF8-7D05-4A46-8099-77594BE91394")]
internal interface Microsoft.Web.Administration.Interop.IAppHostConstantValue {
    public string Name { get; }
    public UInt32 Value { get; }
    public abstract virtual string get_Name();
    public abstract virtual UInt32 get_Value();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("5B5A68E6-8B9F-45E1-8199-A95FFCCDFFFF")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostConstantValueCollection {
    public UInt32 Count { get; }
    public IAppHostConstantValue Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostConstantValue get_Item(object cIndex);
}
[GuidAttribute("64FF8CCC-B287-4DAE-B08A-A72CBF45F453")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostElement {
    public string Name { get; }
    public IAppHostElementCollection Collection { get; }
    public IAppHostPropertyCollection Properties { get; }
    public IAppHostChildElementCollection ChildElements { get; }
    public IAppHostElementSchema Schema { get; }
    public IAppHostMethodCollection Methods { get; }
    public abstract virtual string get_Name();
    public abstract virtual IAppHostElementCollection get_Collection();
    public abstract virtual IAppHostPropertyCollection get_Properties();
    public abstract virtual IAppHostChildElementCollection get_ChildElements();
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual void SetMetadata(string bstrMetadataType, object Value);
    public abstract virtual IAppHostElementSchema get_Schema();
    public abstract virtual IAppHostElement GetElementByName(string bstrSubName);
    public abstract virtual IAppHostProperty GetPropertyByName(string bstrSubName);
    public abstract virtual void Clear();
    public abstract virtual IAppHostMethodCollection get_Methods();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("C8550BFF-5281-4B1E-AC34-99B6FA38464D")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostElementCollection {
    public UInt32 Count { get; }
    public IAppHostElement Item { get; }
    public IAppHostCollectionSchema Schema { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostElement get_Item(object cIndex);
    public abstract virtual void AddElement(IAppHostElement pElement, int cPosition);
    public abstract virtual void DeleteElement(object cIndex);
    public abstract virtual void Clear();
    public abstract virtual IAppHostElement CreateNewElement(string bstrElementName);
    public abstract virtual IAppHostCollectionSchema get_Schema();
}
[GuidAttribute("EF13D885-642C-4709-99EC-B89561C6BC69")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostElementSchema {
    public string Name { get; }
    public bool DoesAllowUnschematizedProperties { get; }
    [DispIdAttribute("1610678275")]
public IAppHostCollectionSchema CollectionSchema { get; }
    [DispIdAttribute("1610678276")]
public IAppHostElementSchemaCollection ChildElementSchemas { get; }
    [DispIdAttribute("1610678277")]
public IAppHostPropertySchemaCollection PropertySchemas { get; }
    public bool IsCollectionDefault { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_DoesAllowUnschematizedProperties();
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual IAppHostCollectionSchema get_CollectionSchema();
    public abstract virtual IAppHostElementSchemaCollection get_ChildElementSchemas();
    public abstract virtual IAppHostPropertySchemaCollection get_PropertySchemas();
    public abstract virtual bool get_IsCollectionDefault();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("0344CDDA-151E-4CBF-82DA-66AE61E97754")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostElementSchemaCollection {
    [DispIdAttribute("1610678272")]
public UInt32 Count { get; }
    [DispIdAttribute("0")]
public IAppHostElementSchema Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostElementSchema get_Item(object cIndex);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7883CA1C-1112-4447-84C3-52FBEB38069D")]
internal interface Microsoft.Web.Administration.Interop.IAppHostMethod {
    public string Name { get; }
    [DispIdAttribute("1610678273")]
public IAppHostMethodSchema Schema { get; }
    public abstract virtual string get_Name();
    public abstract virtual IAppHostMethodSchema get_Schema();
    public abstract virtual IAppHostMethodInstance CreateInstance();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("D6C7CD8F-BB8D-4F96-B591-D3A5F1320269")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostMethodCollection {
    public UInt32 Count { get; }
    public IAppHostMethod Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostMethod get_Item(object cIndex);
}
[GuidAttribute("B80F3C42-60E0-4AE0-9007-F52852D3DBED")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostMethodInstance {
    public IAppHostElement Input { get; }
    public IAppHostElement Output { get; }
    public abstract virtual IAppHostElement get_Input();
    public abstract virtual IAppHostElement get_Output();
    public abstract virtual void Execute();
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual void SetMetadata(string bstrMetadataType, object Value);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("2D9915FB-9D42-4328-B782-1B46819FAB9E")]
internal interface Microsoft.Web.Administration.Interop.IAppHostMethodSchema {
    [DispIdAttribute("1610678272")]
public string Name { get; }
    [DispIdAttribute("1610678273")]
public IAppHostElementSchema InputSchema { get; }
    [DispIdAttribute("1610678274")]
public IAppHostElementSchema OutputSchema { get; }
    public abstract virtual string get_Name();
    public abstract virtual IAppHostElementSchema get_InputSchema();
    public abstract virtual IAppHostElementSchema get_OutputSchema();
    public abstract virtual object GetMetadata(string bstrMetadataType);
}
[GuidAttribute("e7927575-5cc3-403b-822e-328a6b904bee")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostPathMapper {
    public abstract virtual string MapPath(string bstrVirtualPath, string bstrMappedPhysicalPath);
}
[GuidAttribute("0f80e901-8f4c-449a-bf90-13d5d082f187")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostPathMapper2 {
    public abstract virtual IntPtr MapPath(string bstrVirtualPath, string bstrMappedPhysicalPath, String& bstrNewPhysicalPath);
}
[GuidAttribute("ED35F7A1-5024-4E7B-A44D-07DDAF4B524D")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostProperty {
    public string Name { get; }
    public object Value { get; public set; }
    public string StringValue { get; }
    public IAppHostPropertyException Exception { get; }
    public IAppHostPropertySchema Schema { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual void Clear();
    public abstract virtual string get_StringValue();
    public abstract virtual IAppHostPropertyException get_Exception();
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual void SetMetadata(string bstrMetadataType, object Value);
    public abstract virtual IAppHostPropertySchema get_Schema();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("0191775E-BCFF-445A-B4F4-3BDDA54E2816")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostPropertyCollection {
    public UInt32 Count { get; }
    public IAppHostProperty Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostProperty get_Item(object cIndex);
}
[GuidAttribute("EAFE4895-A929-41EA-B14D-613E23F62B71")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostPropertyException {
    public UInt32 LineNumber { get; }
    public string FileName { get; }
    public string ConfigPath { get; }
    public string ErrorLine { get; }
    public string PreErrorLine { get; }
    public string PostErrorLine { get; }
    public string ErrorString { get; }
    public string InvalidValue { get; }
    public string ValidationFailureReason { get; }
    public Object[] ValidationFailureParameters { get; }
    public abstract virtual UInt32 get_LineNumber();
    public abstract virtual string get_FileName();
    public abstract virtual string get_ConfigPath();
    public abstract virtual string get_ErrorLine();
    public abstract virtual string get_PreErrorLine();
    public abstract virtual string get_PostErrorLine();
    public abstract virtual string get_ErrorString();
    public abstract virtual string get_InvalidValue();
    public abstract virtual string get_ValidationFailureReason();
    public abstract virtual Object[] get_ValidationFailureParameters();
}
[GuidAttribute("450386DB-7409-4667-935E-384DBBEE2A9E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostPropertySchema {
    public string Name { get; }
    public string Type { get; }
    public object DefaultValue { get; }
    public bool IsRequired { get; }
    public bool IsUniqueKey { get; }
    public bool IsCombinedKey { get; }
    public bool IsExpanded { get; }
    public string ValidationType { get; }
    public string ValidationParameter { get; }
    public bool IsCaseSensitive { get; }
    public IAppHostConstantValueCollection PossibleValues { get; }
    public bool DoesAllowInfinite { get; }
    public bool IsEncrypted { get; }
    public string TimeSpanFormat { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual object get_DefaultValue();
    public abstract virtual bool get_IsRequired();
    public abstract virtual bool get_IsUniqueKey();
    public abstract virtual bool get_IsCombinedKey();
    public abstract virtual bool get_IsExpanded();
    public abstract virtual string get_ValidationType();
    public abstract virtual string get_ValidationParameter();
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual bool get_IsCaseSensitive();
    public abstract virtual IAppHostConstantValueCollection get_PossibleValues();
    public abstract virtual bool get_DoesAllowInfinite();
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual string get_TimeSpanFormat();
}
[DefaultMemberAttribute("Item")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("8BED2C68-A5FB-4B28-8581-A0DC5267419F")]
internal interface Microsoft.Web.Administration.Interop.IAppHostPropertySchemaCollection {
    [DispIdAttribute("1610678272")]
public UInt32 Count { get; }
    [DispIdAttribute("0")]
public IAppHostPropertySchema Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostPropertySchema get_Item(object cIndex);
}
[GuidAttribute("C5C04795-321C-4014-8FD6-D44658799393")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostSectionDefinition {
    public string Name { get; }
    public string Type { get; public set; }
    public string OverrideModeDefault { get; public set; }
    public string AllowDefinition { get; public set; }
    public string AllowLocation { get; public set; }
    public bool RequirePermission { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual string get_OverrideModeDefault();
    public abstract virtual void set_OverrideModeDefault(string value);
    public abstract virtual string get_AllowDefinition();
    public abstract virtual void set_AllowDefinition(string value);
    public abstract virtual string get_AllowLocation();
    public abstract virtual void set_AllowLocation(string value);
    public abstract virtual bool get_RequirePermission();
    public abstract virtual void set_RequirePermission(bool value);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("B7D381EE-8860-47A1-8AF4-1F33B2B1F325")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostSectionDefinitionCollection {
    public UInt32 Count { get; }
    public IAppHostSectionDefinition Item { get; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostSectionDefinition get_Item(object varIndex);
    public abstract virtual IAppHostSectionDefinition AddSection(string bstrSectionName);
    public abstract virtual void DeleteSection(object varIndex);
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("0DD8A158-EBE6-4008-A1D9-B7ECC8F1104B")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostSectionGroup {
    public UInt32 Count { get; }
    public IAppHostSectionGroup Item { get; }
    public IAppHostSectionDefinitionCollection Sections { get; }
    public string Name { get; }
    public string Type { get; public set; }
    public abstract virtual UInt32 get_Count();
    public abstract virtual IAppHostSectionGroup get_Item(object varIndex);
    public abstract virtual IAppHostSectionDefinitionCollection get_Sections();
    public abstract virtual IAppHostSectionGroup AddSectionGroup(string bstrSectionGroupName);
    public abstract virtual void DeleteSectionGroup(object varIndex);
    public abstract virtual string get_Name();
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
}
[GuidAttribute("FA7660F6-7B3F-4237-A8BF-ED0AD0DCBBD9")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Web.Administration.Interop.IAppHostWritableAdminManager {
    [DispIdAttribute("1610678275")]
public IAppHostConfigManager ConfigManager { get; }
    public string CommitPath { get; public set; }
    public abstract virtual IAppHostElement GetAdminSection(string bstrSectionName, string bstrPath);
    public abstract virtual object GetMetadata(string bstrMetadataType);
    public abstract virtual void SetMetadata(string bstrMetadataType, object Value);
    public abstract virtual IAppHostConfigManager get_ConfigManager();
    public abstract virtual void CommitChanges();
    public abstract virtual string get_CommitPath();
    public abstract virtual void set_CommitPath(string value);
}
[FlagsAttribute]
internal enum Microsoft.Web.Administration.Interop.LoadLibraryFlags : Enum {
    public UInt32 value__;
    public static LoadLibraryFlags DONT_RESOLVE_DLL_REFERENCES;
    public static LoadLibraryFlags LOAD_IGNORE_CODE_AUTHZ_LEVEL;
    public static LoadLibraryFlags LOAD_LIBRARY_AS_DATAFILE;
    public static LoadLibraryFlags LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE;
    public static LoadLibraryFlags LOAD_LIBRARY_AS_IMAGE_RESOURCE;
    public static LoadLibraryFlags LOAD_WITH_ALTERED_SEARCH_PATH;
}
internal class Microsoft.Web.Administration.Interop.WinsockInterop : object {
    internal static int WSAStartup(short wVersionRequested, WSAData& wsaData);
}
internal class Microsoft.Web.Administration.Interop.WSAData : ValueType {
    private static int WSADESCRIPTION_LEN;
    private static int WSASYS_STATUS_LEN;
    public short wVersion;
    public short wHighVersion;
    public string szDescription;
    public string szSystemStatus;
    public short iMaxSockets;
    public short iMaxUdpDg;
    public IntPtr lpVendorInfo;
}
internal static class Microsoft.Web.Administration.Lazy : object {
    public static T Initialize(T& target, CreateInstanceDelegate`1<T> valueFactory);
}
public enum Microsoft.Web.Administration.LoadBalancerCapabilities : Enum {
    public int value__;
    public static LoadBalancerCapabilities TcpLevel;
    public static LoadBalancerCapabilities HttpLevel;
}
[FlagsAttribute]
public enum Microsoft.Web.Administration.LogExtFileFlags : Enum {
    public int value__;
    public static LogExtFileFlags Date;
    public static LogExtFileFlags Time;
    public static LogExtFileFlags ClientIP;
    public static LogExtFileFlags UserName;
    public static LogExtFileFlags SiteName;
    public static LogExtFileFlags ComputerName;
    public static LogExtFileFlags ServerIP;
    public static LogExtFileFlags Method;
    public static LogExtFileFlags UriStem;
    public static LogExtFileFlags UriQuery;
    public static LogExtFileFlags HttpStatus;
    public static LogExtFileFlags Win32Status;
    public static LogExtFileFlags BytesSent;
    public static LogExtFileFlags BytesRecv;
    public static LogExtFileFlags TimeTaken;
    public static LogExtFileFlags ServerPort;
    public static LogExtFileFlags UserAgent;
    public static LogExtFileFlags Cookie;
    public static LogExtFileFlags Referer;
    public static LogExtFileFlags ProtocolVersion;
    public static LogExtFileFlags Host;
    public static LogExtFileFlags HttpSubStatus;
}
public enum Microsoft.Web.Administration.LogFormat : Enum {
    public int value__;
    public static LogFormat Iis;
    public static LogFormat Ncsa;
    public static LogFormat W3c;
    public static LogFormat Custom;
}
public enum Microsoft.Web.Administration.LoggingRolloverPeriod : Enum {
    public int value__;
    public static LoggingRolloverPeriod Hourly;
    public static LoggingRolloverPeriod Daily;
    public static LoggingRolloverPeriod Weekly;
    public static LoggingRolloverPeriod Monthly;
    public static LoggingRolloverPeriod MaxSize;
}
[FlagsAttribute]
public enum Microsoft.Web.Administration.LogTargetW3C : Enum {
    public int value__;
    public static LogTargetW3C File;
    public static LogTargetW3C ETW;
}
public enum Microsoft.Web.Administration.ManagedPipelineMode : Enum {
    public int value__;
    public static ManagedPipelineMode Integrated;
    public static ManagedPipelineMode Classic;
}
public enum Microsoft.Web.Administration.ObjectState : Enum {
    public int value__;
    public static ObjectState Starting;
    public static ObjectState Started;
    public static ObjectState Stopping;
    public static ObjectState Stopped;
    public static ObjectState Unknown;
}
public enum Microsoft.Web.Administration.OverrideMode : Enum {
    public int value__;
    public static OverrideMode Unknown;
    public static OverrideMode Inherit;
    public static OverrideMode Allow;
    public static OverrideMode Deny;
}
public enum Microsoft.Web.Administration.PipelineState : Enum {
    public int value__;
    public static PipelineState Unknown;
    public static PipelineState BeginRequest;
    public static PipelineState AuthenticateRequest;
    public static PipelineState AuthorizeRequest;
    public static PipelineState ResolveRequestCache;
    public static PipelineState MapRequestHandler;
    public static PipelineState AcquireRequestState;
    public static PipelineState PreExecuteRequestHandler;
    public static PipelineState ExecuteRequestHandler;
    public static PipelineState ReleaseRequestState;
    public static PipelineState UpdateRequestCache;
    public static PipelineState LogRequest;
    public static PipelineState EndRequest;
    public static PipelineState SendResponse;
}
public enum Microsoft.Web.Administration.ProcessModelIdentityType : Enum {
    public int value__;
    public static ProcessModelIdentityType LocalSystem;
    public static ProcessModelIdentityType LocalService;
    public static ProcessModelIdentityType NetworkService;
    public static ProcessModelIdentityType SpecificUser;
    public static ProcessModelIdentityType ApplicationPoolIdentity;
}
[FlagsAttribute]
public enum Microsoft.Web.Administration.ProcessModelLogEventOnProcessModel : Enum {
    public int value__;
    public static ProcessModelLogEventOnProcessModel None;
    public static ProcessModelLogEventOnProcessModel IdleTimeout;
}
public enum Microsoft.Web.Administration.ProcessorAction : Enum {
    public int value__;
    public static ProcessorAction NoAction;
    public static ProcessorAction KillW3wp;
    public static ProcessorAction Throttle;
    public static ProcessorAction ThrottleUnderLoad;
}
[FlagsAttribute]
public enum Microsoft.Web.Administration.RecyclingLogEventOnRecycle : Enum {
    public int value__;
    public static RecyclingLogEventOnRecycle None;
    public static RecyclingLogEventOnRecycle Time;
    public static RecyclingLogEventOnRecycle Requests;
    public static RecyclingLogEventOnRecycle Schedule;
    public static RecyclingLogEventOnRecycle Memory;
    public static RecyclingLogEventOnRecycle IsapiUnhealthy;
    public static RecyclingLogEventOnRecycle OnDemand;
    public static RecyclingLogEventOnRecycle ConfigChange;
    public static RecyclingLogEventOnRecycle PrivateMemory;
}
public class Microsoft.Web.Administration.Request : ConfigurationElement {
    private int _processId;
    public string ClientIPAddr { get; }
    public string ConnectionId { get; }
    public string CurrentModule { get; }
    public string HostName { get; }
    public string LocalIPAddress { get; }
    public int LocalPort { get; }
    public PipelineState PipelineState { get; }
    public int ProcessId { get; }
    public string RequestId { get; }
    public int SiteId { get; }
    public int TimeElapsed { get; }
    public int TimeInModule { get; }
    public int TimeInState { get; }
    public string Url { get; }
    public string Verb { get; }
    internal Request(int processId);
    public string get_ClientIPAddr();
    public string get_ConnectionId();
    public string get_CurrentModule();
    public string get_HostName();
    public string get_LocalIPAddress();
    public int get_LocalPort();
    public PipelineState get_PipelineState();
    public int get_ProcessId();
    public string get_RequestId();
    public int get_SiteId();
    public int get_TimeElapsed();
    public int get_TimeInModule();
    public int get_TimeInState();
    public string get_Url();
    public string get_Verb();
}
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.RequestCollection : ConfigurationElementCollectionBase`1<Request> {
    private int _processId;
    internal RequestCollection(int processId);
    protected virtual Request CreateNewElement(string elementTagName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Web.Administration.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ApplicationPathAlreadyExists { get; }
    internal static string ApplicationPathCannotContainChars { get; }
    internal static string ApplicationPathLengthValidation { get; }
    internal static string ApplicationPoolNameCannotContainChars { get; }
    internal static string ApplicationPoolNameLengthValidation { get; }
    internal static string BindingInvalidCertificateError { get; }
    internal static string BindingInvalidHttpsBinding { get; }
    internal static string CertificateNotSpecified { get; }
    internal static string ConfigurationReadOnly { get; }
    internal static string ConstructorNotFound { get; }
    internal static string InvalidElementConfigurationObject { get; }
    internal static string InvalidType { get; }
    internal static string ObjectHasBeenCommited { get; }
    internal static string RemoteNotSupported { get; }
    internal static string SiteNameCannotContainChars { get; }
    internal static string SiteNameLengthValidation { get; }
    internal static string UIntArgumentOutOfRange { get; }
    internal static string UnableToStartAppPoolWasNotStarted { get; }
    internal static string UnableToStartW3svcNotStarted { get; }
    internal static string UnableToStartWasNotStarted { get; }
    internal static string VirtualDirectoryPathCannotContainChars { get; }
    internal static string VirtualDirectoryPathLengthValidation { get; }
    internal static string WebSiteCannotStartBecausePortUsed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ApplicationPathAlreadyExists();
    internal static string get_ApplicationPathCannotContainChars();
    internal static string get_ApplicationPathLengthValidation();
    internal static string get_ApplicationPoolNameCannotContainChars();
    internal static string get_ApplicationPoolNameLengthValidation();
    internal static string get_BindingInvalidCertificateError();
    internal static string get_BindingInvalidHttpsBinding();
    internal static string get_CertificateNotSpecified();
    internal static string get_ConfigurationReadOnly();
    internal static string get_ConstructorNotFound();
    internal static string get_InvalidElementConfigurationObject();
    internal static string get_InvalidType();
    internal static string get_ObjectHasBeenCommited();
    internal static string get_RemoteNotSupported();
    internal static string get_SiteNameCannotContainChars();
    internal static string get_SiteNameLengthValidation();
    internal static string get_UIntArgumentOutOfRange();
    internal static string get_UnableToStartAppPoolWasNotStarted();
    internal static string get_UnableToStartW3svcNotStarted();
    internal static string get_UnableToStartWasNotStarted();
    internal static string get_VirtualDirectoryPathCannotContainChars();
    internal static string get_VirtualDirectoryPathLengthValidation();
    internal static string get_WebSiteCannotStartBecausePortUsed();
}
public class Microsoft.Web.Administration.Schedule : ConfigurationElement {
    public TimeSpan Time { get; public set; }
    public TimeSpan get_Time();
    public void set_Time(TimeSpan value);
}
public class Microsoft.Web.Administration.ScheduleCollection : ConfigurationElementCollectionBase`1<Schedule> {
    public Schedule Add(TimeSpan scheduleTime);
    protected virtual Schedule CreateNewElement(string elementTagName);
}
public class Microsoft.Web.Administration.SectionDefinition : object {
    private IAppHostSectionDefinition _sectionDefinition;
    private SectionGroup _parentSectionGroup;
    public string AllowDefinition { get; public set; }
    public string AllowLocation { get; public set; }
    public string Name { get; }
    public string OverrideModeDefault { get; public set; }
    public bool RequirePermission { get; public set; }
    public string Type { get; public set; }
    internal SectionDefinition(SectionGroup parentSectionGroup, IAppHostSectionDefinition sectionDefinition);
    public string get_AllowDefinition();
    public void set_AllowDefinition(string value);
    public string get_AllowLocation();
    public void set_AllowLocation(string value);
    public string get_Name();
    public string get_OverrideModeDefault();
    public void set_OverrideModeDefault(string value);
    public bool get_RequirePermission();
    public void set_RequirePermission(bool value);
    public string get_Type();
    public void set_Type(string value);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.SectionDefinitionCollection : object {
    private IAppHostSectionDefinitionCollection _sectionDefinitions;
    private List`1<SectionDefinition> _sections;
    private SectionGroup _parentSectionGroup;
    public int Count { get; }
    public SectionDefinition Item { get; }
    public SectionDefinition Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal SectionDefinitionCollection(SectionGroup parentSectionGroup, IAppHostSectionDefinitionCollection sectionDefinitions);
    public sealed virtual int get_Count();
    public SectionDefinition get_Item(string sectionName);
    public SectionDefinition get_Item(int index);
    public SectionDefinition Add(string sectionName);
    public sealed virtual IEnumerator`1<SectionDefinition> GetEnumerator();
    internal void AddSections(IAppHostSectionDefinitionCollection sectionDefinitions);
    public void Remove(string sectionName);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Web.Administration.SectionGroup : object {
    private IAppHostSectionGroup _sectionGroup;
    private SectionDefinitionCollection _sections;
    private SectionGroupCollection _sectionGroups;
    private Configuration _configuration;
    internal Configuration Configuration { get; }
    public string Name { get; }
    public SectionGroupCollection SectionGroups { get; }
    public SectionDefinitionCollection Sections { get; }
    public string Type { get; public set; }
    internal SectionGroup(Configuration configuration, IAppHostSectionGroup sectionGroup);
    internal Configuration get_Configuration();
    public string get_Name();
    public SectionGroupCollection get_SectionGroups();
    public SectionDefinitionCollection get_Sections();
    public string get_Type();
    public void set_Type(string value);
    internal void SetDirty();
    internal void MergeWith(IAppHostSectionGroup sectionGroup);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.SectionGroupCollection : object {
    private SectionGroup _parentSectionGroup;
    private List`1<SectionGroup> _sectionGroups;
    private IAppHostSectionGroup _nativeSectionGroup;
    public int Count { get; }
    public SectionGroup Item { get; }
    public SectionGroup Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal SectionGroupCollection(SectionGroup parentSectionGroup, IAppHostSectionGroup nativeSectionGroup);
    public sealed virtual int get_Count();
    public SectionGroup get_Item(string sectionGroupName);
    public SectionGroup get_Item(int index);
    public SectionGroup Add(string sectionGroupName);
    public sealed virtual IEnumerator`1<SectionGroup> GetEnumerator();
    private void Initialize();
    public void Remove(string sectionGroupName);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void AddInternal(IAppHostSectionGroup childSectionGroup);
}
public class Microsoft.Web.Administration.ServerManager : object {
    private SiteCollection _sites;
    private SiteDefaults _siteDefaults;
    private ApplicationDefaults _applicationDefaults;
    private VirtualDirectoryDefaults _virtualDirectoryDefaults;
    private ApplicationPoolCollection _applicationPools;
    private ApplicationPoolDefaults _applicationPoolDefaults;
    private WorkerProcessCollection _workerProcesses;
    private ConfigurationSection _sitesSection;
    private ConfigurationSection _applicationPoolsSection;
    private BindingManager _bindingManager;
    private ConfigurationManager _configurationManager;
    private string _applicationHostConfigurationPath;
    private string _serverName;
    private bool _readOnly;
    public ApplicationDefaults ApplicationDefaults { get; }
    public ApplicationPoolDefaults ApplicationPoolDefaults { get; }
    public ApplicationPoolCollection ApplicationPools { get; }
    private ConfigurationSection ApplicationPoolsSection { get; }
    internal BindingManager BindingManager { get; }
    internal bool ReadOnly { get; }
    internal string ServerName { get; }
    public SiteDefaults SiteDefaults { get; }
    public SiteCollection Sites { get; }
    private ConfigurationSection SitesSection { get; }
    public VirtualDirectoryDefaults VirtualDirectoryDefaults { get; }
    public WorkerProcessCollection WorkerProcesses { get; }
    [EditorBrowsableAttribute("1")]
public ServerManager(bool readOnly, string applicationHostConfigurationPath);
    [EditorBrowsableAttribute("1")]
public ServerManager(string applicationHostConfigurationPath);
    protected virtual override void Finalize();
    public ApplicationDefaults get_ApplicationDefaults();
    public ApplicationPoolDefaults get_ApplicationPoolDefaults();
    public ApplicationPoolCollection get_ApplicationPools();
    private ConfigurationSection get_ApplicationPoolsSection();
    internal BindingManager get_BindingManager();
    internal bool get_ReadOnly();
    internal string get_ServerName();
    public SiteDefaults get_SiteDefaults();
    public SiteCollection get_Sites();
    private ConfigurationSection get_SitesSection();
    public VirtualDirectoryDefaults get_VirtualDirectoryDefaults();
    public WorkerProcessCollection get_WorkerProcesses();
    private ApplicationDefaults ApplicationDefaultsCreator();
    private ApplicationPoolCollection ApplicationPoolCollectionCreator();
    private ApplicationPoolDefaults ApplicationPoolDefaultsCreator();
    private ConfigurationSection ApplicationPoolsSectionCreator();
    private BindingManager BindingManagerCreator();
    public void CommitChanges();
    internal void ConfigurationInvalidated(Configuration config);
    public void Dispose();
    private void Dispose(bool disposing);
    internal void EnsureLocal();
    private void EnsureNotDisposed();
    public Configuration GetAdministrationConfiguration();
    public Configuration GetAdministrationConfiguration(WebConfigurationMap configMap, string configurationPath);
    public Configuration GetApplicationHostConfiguration();
    public Configuration GetRedirectionConfiguration();
    public Configuration GetWebConfiguration(string siteName);
    public Configuration GetWebConfiguration(string siteName, string virtualPath);
    public Configuration GetWebConfiguration(WebConfigurationMap configMap, string configurationPath);
    private void InvalidateCachedReferences();
    public static ServerManager OpenRemote(string serverName);
    public void SetMetadata(string metadataType, object value);
    private SiteCollection SitesCollectionCreator();
    private SiteDefaults SiteDefaultsCreator();
    private ConfigurationSection SitesSectionCreator();
    private VirtualDirectoryDefaults VirtualDirectoryDefaultsCreator();
    private WorkerProcessCollection WorkerProcessCollectionCreator();
    public object GetMetadata(string metadataType);
    private sealed virtual override void System.IDisposable.Dispose();
    internal static ServiceControllerStatus GetServiceStatus(string serviceName);
}
public class Microsoft.Web.Administration.ServerManagerException : Exception {
    private static string ErrorCodeKeyName;
    private int _errorCode;
    public int ErrorCode { get; }
    public ServerManagerException(string errorMessage);
    public ServerManagerException(string errorMessage, int errorCode);
    public ServerManagerException(string errorMessage, Exception exception);
    public ServerManagerException(string errorMessage, Exception exception, int errorCode);
    public int get_ErrorCode();
    public virtual string ToString();
}
internal static class Microsoft.Web.Administration.SharedGlobals : object {
    internal static Char[] GetInvalidApplicationPathCharacters();
    internal static Char[] GetInvalidApplicationPoolNameCharacters();
    internal static Char[] GetInvalidSiteNameCharacters();
    internal static Char[] GetInvalidVirtualDirectoryPathCharacters();
}
internal static class Microsoft.Web.Administration.ShimGlobals : object {
    public static int WebObjects_Was_Not_Started_ErrorCode;
    public static int WebObjects_W3svc_Not_Started_ErrorCode;
    public static int WebObjects_Port_Already_Used_ErrorCode;
}
[DebuggerDisplayAttribute("Name = {Name}")]
public class Microsoft.Web.Administration.Site : ConfigurationElement {
    private static UInt32 ERROR_ALREADY_EXISTS;
    private static UInt32 RPC_S_SERVER_UNAVAILABLE;
    private ApplicationDefaults _applicationDefaults;
    private VirtualDirectoryDefaults _virtualDirectoryDefaults;
    private ApplicationCollection _applicationCollection;
    private BindingCollection _bindingCollection;
    private SiteLimits _limits;
    private SiteLogFile _logfile;
    private SiteTraceFailedRequestsLogging _traceFailedRequestsLogging;
    private IAppHostProperty _idProperty;
    private IAppHostProperty _nameProperty;
    private ServerManager _owner;
    public ApplicationDefaults ApplicationDefaults { get; }
    public ApplicationCollection Applications { get; }
    public BindingCollection Bindings { get; }
    public long Id { get; public set; }
    private IAppHostProperty IdProperty { get; }
    public SiteLimits Limits { get; }
    public SiteLogFile LogFile { get; }
    public string Name { get; public set; }
    private IAppHostProperty NameProperty { get; }
    internal ServerManager Owner { get; }
    public bool ServerAutoStart { get; public set; }
    public ObjectState State { get; }
    public SiteTraceFailedRequestsLogging TraceFailedRequestsLogging { get; }
    public VirtualDirectoryDefaults VirtualDirectoryDefaults { get; }
    internal Site(ServerManager owner);
    public ApplicationDefaults get_ApplicationDefaults();
    public ApplicationCollection get_Applications();
    public BindingCollection get_Bindings();
    public long get_Id();
    public void set_Id(long value);
    private IAppHostProperty get_IdProperty();
    public SiteLimits get_Limits();
    public SiteLogFile get_LogFile();
    public string get_Name();
    public void set_Name(string value);
    private IAppHostProperty get_NameProperty();
    internal ServerManager get_Owner();
    public bool get_ServerAutoStart();
    public void set_ServerAutoStart(bool value);
    public ObjectState get_State();
    public SiteTraceFailedRequestsLogging get_TraceFailedRequestsLogging();
    public VirtualDirectoryDefaults get_VirtualDirectoryDefaults();
    private ApplicationCollection ApplicationCollectionCreator();
    private ApplicationDefaults ApplicationDefaultsCreator();
    private BindingCollection BindingCollectionCreator();
    public Configuration GetWebConfiguration();
    private IAppHostProperty IdPropertyCreator();
    private IAppHostProperty NamePropertyCreator();
    private SiteLimits SiteLimitsCreator();
    private SiteLogFile SiteLogFileCreator();
    private SiteTraceFailedRequestsLogging SiteTraceFailedRequestsLoggingCreator();
    public ObjectState Start();
    public ObjectState Stop();
    public virtual string ToString();
    private VirtualDirectoryDefaults VirtualDirectoryDefaultsCreator();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.SiteCollection : ConfigurationElementCollectionBase`1<Site> {
    private static string InetmgrRegistryKeyPath;
    private static string IncrementalSiteIDCreationKey;
    private static string CertificateStorePersonal;
    private ServerManager _owner;
    public Site Item { get; }
    internal SiteCollection(ServerManager owner);
    public Site get_Item(string name);
    public Site Add(string name, string physicalPath, int port);
    public Site Add(string name, string bindingProtocol, string bindingInformation, string physicalPath);
    public Site Add(string name, string bindingInformation, string physicalPath, Byte[] certificateHash);
    public Site Add(string name, string bindingInformation, string physicalPath, Byte[] certificateHash, string certificateStore);
    public Site Add(string name, string bindingInformation, string physicalPath, Byte[] certificateHash, string certificateStore, SslFlags sslFlags);
    private Site Add(string name, string bindingProtocol, string bindingInformation, string physicalPath, Byte[] certificateHash, string certificateStore, SslFlags sslFlags);
    protected virtual Site CreateNewElement(string elementTagName);
    private bool ExistsSiteId(int siteID);
    private int GenerateNewSiteID(string siteName);
    private int GenerateNewSiteIDFromName(string siteName);
    private int GenerateNewSiteIDIncremental();
    public static Char[] InvalidSiteNameCharacters();
    private bool IsIncrementalSiteIDCreationSet();
    public void Remove(Site element);
    private static void RemoveBindings(Site element);
    public void RemoveAt(int index);
    private static void ValidateName(string name);
}
public class Microsoft.Web.Administration.SiteDefaults : ConfigurationElement {
    private SiteLimits _limits;
    private SiteLogFile _logfile;
    private SiteTraceFailedRequestsLogging _traceFailedRequestsLogging;
    public SiteLimits Limits { get; }
    public SiteLogFile LogFile { get; }
    public bool ServerAutoStart { get; public set; }
    public SiteTraceFailedRequestsLogging TraceFailedRequestsLogging { get; }
    public SiteLimits get_Limits();
    public SiteLogFile get_LogFile();
    public bool get_ServerAutoStart();
    public void set_ServerAutoStart(bool value);
    public SiteTraceFailedRequestsLogging get_TraceFailedRequestsLogging();
    private SiteLimits SiteLimitsCreator();
    private SiteLogFile SiteLogFileCreator();
    private SiteTraceFailedRequestsLogging SiteTraceFailedRequestsLoggingCreator();
}
public class Microsoft.Web.Administration.SiteLimits : ConfigurationElement {
    private static int maxUrlSegments;
    public TimeSpan ConnectionTimeout { get; public set; }
    public long MaxBandwidth { get; public set; }
    public long MaxConnections { get; public set; }
    public long MaxUrlSegments { get; public set; }
    public TimeSpan get_ConnectionTimeout();
    public void set_ConnectionTimeout(TimeSpan value);
    public long get_MaxBandwidth();
    public void set_MaxBandwidth(long value);
    public long get_MaxConnections();
    public void set_MaxConnections(long value);
    public long get_MaxUrlSegments();
    public void set_MaxUrlSegments(long value);
}
public class Microsoft.Web.Administration.SiteLogFile : ConfigurationElement {
    public string Directory { get; public set; }
    public bool LocalTimeRollover { get; public set; }
    public LogExtFileFlags LogExtFileFlags { get; public set; }
    public bool Enabled { get; public set; }
    public CustomLogFieldCollection CustomLogFields { get; }
    public Guid CustomLogPluginClsid { get; public set; }
    public LoggingRolloverPeriod Period { get; public set; }
    public LogFormat LogFormat { get; public set; }
    public LogTargetW3C LogTargetW3C { get; public set; }
    public long TruncateSize { get; public set; }
    public string get_Directory();
    public void set_Directory(string value);
    public bool get_LocalTimeRollover();
    public void set_LocalTimeRollover(bool value);
    public LogExtFileFlags get_LogExtFileFlags();
    public void set_LogExtFileFlags(LogExtFileFlags value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public CustomLogFieldCollection get_CustomLogFields();
    public Guid get_CustomLogPluginClsid();
    public void set_CustomLogPluginClsid(Guid value);
    public LoggingRolloverPeriod get_Period();
    public void set_Period(LoggingRolloverPeriod value);
    public LogFormat get_LogFormat();
    public void set_LogFormat(LogFormat value);
    public LogTargetW3C get_LogTargetW3C();
    public void set_LogTargetW3C(LogTargetW3C value);
    public long get_TruncateSize();
    public void set_TruncateSize(long value);
}
public class Microsoft.Web.Administration.SiteTraceFailedRequestsLogging : ConfigurationElement {
    public string Directory { get; public set; }
    public bool Enabled { get; public set; }
    public long MaxLogFiles { get; public set; }
    public string get_Directory();
    public void set_Directory(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public long get_MaxLogFiles();
    public void set_MaxLogFiles(long value);
}
[FlagsAttribute]
public enum Microsoft.Web.Administration.SslFlags : Enum {
    public int value__;
    public static SslFlags None;
    public static SslFlags Sni;
    public static SslFlags CentralCertStore;
}
public enum Microsoft.Web.Administration.StartMode : Enum {
    public int value__;
    public static StartMode OnDemand;
    public static StartMode AlwaysRunning;
}
[ExtensionAttribute]
internal static class Microsoft.Web.Administration.TypeHelper : object {
    private static BindingFlags DefaultBindingFlags;
    [ExtensionAttribute]
public static ConstructorInfo GetDefaultConstructor(Type t);
}
internal static class Microsoft.Web.Administration.UriHelper : object {
    public static string UriSchemeHttp;
    public static string UriSchemeHttps;
    private static UriHelper();
}
[DebuggerDisplayAttribute("Path = {Path}")]
public class Microsoft.Web.Administration.VirtualDirectory : ConfigurationElement {
    private IAppHostProperty _pathProperty;
    private Application _application;
    private Application Application { get; }
    public AuthenticationLogonMethod LogonMethod { get; public set; }
    public string Password { get; public set; }
    public string Path { get; public set; }
    private IAppHostProperty PathProperty { get; }
    public string PhysicalPath { get; public set; }
    public string UserName { get; public set; }
    internal VirtualDirectory(Application application);
    private Application get_Application();
    public AuthenticationLogonMethod get_LogonMethod();
    public void set_LogonMethod(AuthenticationLogonMethod value);
    public string get_Password();
    public void set_Password(string value);
    public string get_Path();
    public void set_Path(string value);
    private IAppHostProperty get_PathProperty();
    public string get_PhysicalPath();
    public void set_PhysicalPath(string value);
    public string get_UserName();
    public void set_UserName(string value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Web.Administration.VirtualDirectoryCollection : ConfigurationElementCollectionBase`1<VirtualDirectory> {
    private Application _parentApplication;
    public VirtualDirectory Item { get; }
    public VirtualDirectory get_Item(string path);
    public VirtualDirectory Add(string path, string physicalPath);
    protected virtual VirtualDirectory CreateNewElement(string elementTagName);
    private bool DoesAppPathExist(string path);
    public static Char[] InvalidVirtualDirectoryPathCharacters();
    internal void SetParentApplication(Application parentApplication);
    private static void ValidatePath(string path);
}
public class Microsoft.Web.Administration.VirtualDirectoryDefaults : ConfigurationElement {
    private VirtualDirectoryDefaults _parentDefaults;
    public AuthenticationLogonMethod LogonMethod { get; public set; }
    public string Password { get; public set; }
    public string UserName { get; public set; }
    internal VirtualDirectoryDefaults(VirtualDirectoryDefaults parentDefaults);
    public AuthenticationLogonMethod get_LogonMethod();
    public void set_LogonMethod(AuthenticationLogonMethod value);
    public string get_Password();
    public void set_Password(string value);
    public string get_UserName();
    public void set_UserName(string value);
    private object GetValue(string attributeName);
}
public static class Microsoft.Web.Administration.WebConfigurationManager : object {
    private static SafeLibraryHandle _iisUtilHandle;
    private static SafeLibraryHandle _nativerdHandle;
    private static BindingFlags DefaultBindingFlags;
    private static IAppHostAdminManager _defaultConfiguration;
    private static WebConfigurationManager();
    public static ConfigurationSection GetSection(string siteName, string virtualPath, string sectionPath);
    public static ConfigurationSection GetSection(string siteName, string virtualPath, string sectionPath, Type sectionType);
    private static ConfigurationSection GetSectionInternal(string siteName, string virtualPath, string sectionPath, Type sectionType);
}
public class Microsoft.Web.Administration.WebConfigurationMap : object {
    private string _machineConfigurationPath;
    private string _rootWebConfigurationPath;
    public string MachineConfigurationPath { get; }
    public string RootWebConfigurationPath { get; }
    public WebConfigurationMap(string machineConfigurationPath, string rootWebConfigurationPath);
    public string get_MachineConfigurationPath();
    public string get_RootWebConfigurationPath();
}
[DebuggerDisplayAttribute("ProcessId = {ProcessId}")]
public class Microsoft.Web.Administration.WorkerProcess : ConfigurationElement {
    private ApplicationDomainCollection _applicationDomains;
    public ApplicationDomainCollection ApplicationDomains { get; }
    public string AppPoolName { get; }
    public string ProcessGuid { get; }
    public int ProcessId { get; }
    public WorkerProcessState State { get; }
    public ApplicationDomainCollection get_ApplicationDomains();
    public string get_AppPoolName();
    public string get_ProcessGuid();
    public int get_ProcessId();
    public WorkerProcessState get_State();
    private ApplicationDomainCollection ApplicationDomainCollectionCreator();
    public RequestCollection GetRequests(int timeElapsedFilter);
}
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Web.Administration.WorkerProcessCollection : ConfigurationElementCollectionBase`1<WorkerProcess> {
    protected virtual WorkerProcess CreateNewElement(string elementTagName);
    public WorkerProcess GetWorkerProcess(int processId);
}
public enum Microsoft.Web.Administration.WorkerProcessState : Enum {
    public int value__;
    public static WorkerProcessState Starting;
    public static WorkerProcessState Running;
    public static WorkerProcessState Stopping;
    public static WorkerProcessState Unknown;
}
internal static class Microsoft.Web.Management.Utility.BindingUtility : object {
    public static IPEndPoint EndPointFromBindingInformation(string bindingInformation);
    public static IPEndPoint EndPointFromBindingInformation(string bindingInformation, String& hostHeader);
    public static bool IsIPAddressValid(string ipAddress, String& formattedIPAddressString);
    public static string ParseIPInfoFromBindingInformation(string bindingInformation, int returnItem);
    public static void ParseIPInfoFromBindingInformation(string bindingInformation, String& ipAddress, String& port, String& hostHeader);
    public static string ParseIPInfoFromBindingInformation(string bindingProtocol, string bindingInformation, int returnItem);
    public static bool IsCentralCertStoreBinding(SslFlags sslFlags);
    public static bool IsValidHostName(string hostName, SslFlags sslFlag);
}
internal class Microsoft.Web.Management.Utility.HttpApiWrapper : object {
    private static Char[] _hexValues;
    private static bool _httpInitializedAtLeastOnce;
    public static Guid IisAppId;
    private static string IisCertStoreName;
    public static UInt32 ERROR_SUCCESS;
    public static UInt32 ERROR_FILE_NOT_FOUND;
    public static UInt32 ERROR_NOT_SUPPORTED;
    public static UInt32 ERROR_INSUFFICIENT_BUFFER;
    public static UInt32 ERROR_ALREADY_EXISTS;
    public static UInt32 ERROR_NO_MORE_ITEMS;
    public static UInt32 HTTP_INITIALIZE_SERVER;
    public static UInt32 HTTP_INITIALIZE_CONFIG;
    public static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER;
    public static UInt32 HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT;
    private static HttpApiWrapper();
    public static string ConvertBytesToCertificateHexString(Byte[] sArray);
    public static string ConvertBytesToCertificateHexString(Byte[] sArray, UInt32 start, UInt32 end);
    public static Byte[] ConvertCertificateHexStringToBytes(string hexString);
    public static int ConvertHexDigit(char val);
    public static void CreateSSLBinding(IPEndPoint endPoint, string hostName, X509Certificate2 certificateObject, string certificateStoreName, SslFlags sslFlags);
    public static void CreateSSLBinding(IPEndPoint endPoint, string hostName, Byte[] certificateHash, string certificateStoreName, SslFlags sslFlags);
    public static void CreateSSLBinding(IPEndPoint endPoint, string hostName, HTTP_SERVICE_CONFIG_SSL_PARAM_MANAGED allSSLData, SslFlags sslFlags);
    public static void DeleteSSLBinding(IPEndPoint endPoint, string hostName, SslFlags sslFlags);
    public static UInt32 Init();
    public static HTTP_SERVICE_CONFIG_SSL_PARAM_MANAGED GetAllSSLBindingProperties(IPEndPoint endPoint, string hostName, SslFlags sslFlags);
    private static HTTP_SERVICE_CONFIG_SSL_PARAM_MANAGED GetSslData(IPEndPoint endPoint, string hostName, SslFlags sslFlags);
    public static X509Certificate2 GetCertificateFromStore(string certificateHash, string certificateStore);
    public static object GetSSLBindingProperty(IPEndPoint endPoint, string hostName, HttpPropertyName propName, SslFlags sslFlags);
    public static UInt32 Terminate();
    private static UInt32 HttpInitialize(HTTPAPI_VERSION version, UInt32 flags, IntPtr reserved);
    private static UInt32 HttpTerminate(UInt32 flags, IntPtr reserved);
    private static UInt32 HttpQueryServiceConfiguration(IntPtr serviceHandle, HTTP_SERVICE_CONFIG_ID configID, IntPtr pInputConfigInfo, UInt32 InputConfigInfoLength, SafeGlobalAllocHandle pOutputConfigInfo, UInt32 OutputConfigInfoLength, UInt32& pReturnLength, IntPtr pOverlapped);
    private static UInt32 HttpSetServiceConfiguration(IntPtr serviceHandle, HTTP_SERVICE_CONFIG_ID configID, IntPtr pInputConfigInfo, UInt32 InputConfigInfoLength, IntPtr pOverlapped);
    private static UInt32 HttpDeleteServiceConfiguration(IntPtr serviceHandle, HTTP_SERVICE_CONFIG_ID configID, IntPtr pInputConfigInfo, UInt32 InputConfigInfoLength, IntPtr pOverlapped);
}
internal class Microsoft.Web.Management.Utility.SafeGlobalAllocHandle : SafeHandle {
    private IntPtr IntPtrMinusOne;
    public static SafeGlobalAllocHandle Empty { get; }
    public bool IsInvalid { get; }
    public SafeGlobalAllocHandle(string str);
    public SafeGlobalAllocHandle(int cb);
    public static SafeGlobalAllocHandle get_Empty();
    public virtual bool get_IsInvalid();
    internal void Copy(Byte[] permissionBytes, int startIndex, int cbBytes);
    internal void MarshalStructure(object structure, bool deleteOld);
    internal T MarshalToStructure();
    protected virtual bool ReleaseHandle();
}
internal static class Microsoft.Web.Management.Utility.UtilityFunction : object {
    public static bool IsIPAddressValid(string ipAddress, String& formattedIPAddressString);
    public static bool IsValidHostName(string hostName);
    private static bool IsIllegalChar(char c);
    private static int IdnToNameprepUnicode(UInt32 dwFlags, string lpUnicodeCharStr, int cchUnicodeChar, StringBuilder lpNameprepCharStr, int cchNameprepChar);
}
