internal class Microsoft.Web.LibraryManager.Build.Contracts.Dependencies : object {
    private IHostInteraction _hostInteraction;
    private List`1<IProvider> _providers;
    private IEnumerable`1<string> _assemblyPaths;
    public IReadOnlyList`1<IProvider> Providers { get; }
    private Dependencies(IHostInteraction hostInteraction, IEnumerable`1<string> assemblyPaths);
    public sealed virtual IHostInteraction GetHostInteractions();
    public static Dependencies FromTask(string workingDirectory, IEnumerable`1<string> assemblyPaths);
    public sealed virtual IReadOnlyList`1<IProvider> get_Providers();
    public sealed virtual IProvider GetProvider(string providerId);
    private void Initialize();
}
internal class Microsoft.Web.LibraryManager.Build.Contracts.HostInteraction : object {
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    public string WorkingDirectory { get; }
    public string CacheDirectory { get; }
    public ILogger Logger { get; }
    public ISettings Settings { get; }
    public HostInteraction(string workingDirectory);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WorkingDirectory();
    public sealed virtual string get_CacheDirectory();
    public sealed virtual ILogger get_Logger();
    public sealed virtual ISettings get_Settings();
    [AsyncStateMachineAttribute("Microsoft.Web.LibraryManager.Build.Contracts.HostInteraction/<WriteFileAsync>d__10")]
public sealed virtual Task`1<bool> WriteFileAsync(string path, Func`1<Stream> content, ILibraryInstallationState state, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> DeleteFilesAsync(IEnumerable`1<string> filePaths, CancellationToken cancellationToken);
    public sealed virtual Task`1<Stream> ReadFileAsync(string relativeFilePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.LibraryManager.Build.Contracts.HostInteraction/<CopyFileAsync>d__13")]
public sealed virtual Task`1<bool> CopyFileAsync(string sourcePath, string destinationPath, CancellationToken cancellationToken);
}
internal class Microsoft.Web.LibraryManager.Build.Contracts.Logger : object {
    [CompilerGeneratedAttribute]
private static Logger <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Errors>k__BackingField;
    public static Logger Instance { get; }
    public ICollection`1<string> Messages { get; }
    public ICollection`1<string> Errors { get; }
    private static Logger();
    [CompilerGeneratedAttribute]
public static Logger get_Instance();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Messages();
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Errors();
    public void Clear();
    public sealed virtual void Log(string message, LogLevel level);
}
public class Microsoft.Web.LibraryManager.Build.RestoreTask : AppDomainIsolatedTask {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProviderAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilesWritten>k__BackingField;
    [RequiredAttribute]
public string FileName { get; public set; }
    [RequiredAttribute]
public string ProjectDirectory { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProviderAssemblies { get; public set; }
    [OutputAttribute]
public ITaskItem[] FilesWritten { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProviderAssemblies();
    [CompilerGeneratedAttribute]
public void set_ProviderAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilesWritten();
    [CompilerGeneratedAttribute]
public void set_FilesWritten(ITaskItem[] value);
    public virtual bool Execute();
    private void FlushLogger(Logger logger);
    private void LogResults(Stopwatch sw, IEnumerable`1<ILibraryOperationResult> results);
    private void LogErrors(IEnumerable`1<IError> errors);
    private void PopulateFilesWritten(IEnumerable`1<ILibraryOperationResult> results, IHostInteraction hostInteraction);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
