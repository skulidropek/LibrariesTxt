public interface Microsoft.Web.LibraryManager.Contracts.Caching.ICacheService {
    public abstract virtual Task`1<string> GetContentsFromUriWithCacheFallbackAsync(string url, string cacheFile, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetContentsFromCachedFileWithWebRequestFallbackAsync(string cacheFile, string url, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Web.LibraryManager.Contracts.CancellationHelpers : object {
    [ExtensionAttribute]
public static Task`1<T> WithCancellation(Task`1<T> task, CancellationToken cancellationToken);
}
public class Microsoft.Web.LibraryManager.Contracts.CompletionItem : ValueType {
    public string DisplayText;
    public string InsertionText;
    public string Description;
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CompletionItem other);
    public virtual int GetHashCode();
    public static bool op_Equality(CompletionItem left, CompletionItem right);
    public static bool op_Inequality(CompletionItem left, CompletionItem right);
}
public class Microsoft.Web.LibraryManager.Contracts.CompletionSet : ValueType {
    public int Start;
    public int Length;
    public IEnumerable`1<CompletionItem> Completions;
    public CompletionSortOrder CompletionType;
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CompletionSet other);
    public static bool op_Equality(CompletionSet left, CompletionSet right);
    public static bool op_Inequality(CompletionSet left, CompletionSet right);
    public virtual int GetHashCode();
}
public enum Microsoft.Web.LibraryManager.Contracts.CompletionSortOrder : Enum {
    public int value__;
    public static CompletionSortOrder Alphabetical;
    public static CompletionSortOrder Version;
    public static CompletionSortOrder AsSpecified;
}
public interface Microsoft.Web.LibraryManager.Contracts.Configuration.ISettings {
    public string UserDataRoot { get; }
    public abstract virtual string get_UserDataRoot();
    public abstract virtual bool TryGetValue(string settingName, String& value);
    public abstract virtual bool TryGetEncryptedValue(string settingName, String& value);
    public abstract virtual void SetValue(string settingName, string value);
    public abstract virtual void SetEncryptedValue(string settingName, string value);
    public abstract virtual void RemoveValue(string settingName);
}
internal class Microsoft.Web.LibraryManager.Contracts.Error : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Code { get; public set; }
    public string Message { get; public set; }
    public Error(string code, string message);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public static class Microsoft.Web.LibraryManager.Contracts.FileHelpers : object {
    [AsyncStateMachineAttribute("Microsoft.Web.LibraryManager.Contracts.FileHelpers/<SafeWriteToFileAsync>d__0")]
public static Task`1<bool> SafeWriteToFileAsync(string fileName, Stream sourceStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.LibraryManager.Contracts.FileHelpers/<WriteToFileAsync>d__1")]
private static Task`1<bool> WriteToFileAsync(string fileName, Stream sourceStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.LibraryManager.Contracts.FileHelpers/<ReadFileAsTextAsync>d__2")]
public static Task`1<string> ReadFileAsTextAsync(string fileName, CancellationToken cancellationToken);
    public static Task`1<Stream> ReadFileAsStreamAsync(string fileName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.LibraryManager.Contracts.FileHelpers/<CopyFileAsync>d__4")]
public static Task`1<bool> CopyFileAsync(string sourceFile, string destinationFile, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.LibraryManager.Contracts.FileHelpers/<MoveFileAsync>d__5")]
public static Task`1<bool> MoveFileAsync(string sourceFile, string destinationFile);
    public static bool AreFilesUpToDate(FileInfo firstFile, FileInfo secondFile);
    public static bool DeleteFiles(IEnumerable`1<string> filePaths, string rootDirectory);
    private static bool DeleteEmptyFoldersFromDisk(IEnumerable`1<string> folderPaths, string rootDirectory);
    public static bool IsDirectoryEmpty(string path);
    public static bool DeleteFileFromDisk(string filePath);
    private static bool IsUNCPath(string rootPath);
    public static bool IsUnderRootDirectory(string filePath, string rootDirectory);
    internal static string NormalizePath(string path);
}
public interface Microsoft.Web.LibraryManager.Contracts.IDependencies {
    public IReadOnlyList`1<IProvider> Providers { get; }
    public abstract virtual IReadOnlyList`1<IProvider> get_Providers();
    public abstract virtual IProvider GetProvider(string providerId);
    public abstract virtual IHostInteraction GetHostInteractions();
}
public interface Microsoft.Web.LibraryManager.Contracts.IError {
    public string Code { get; }
    public string Message { get; }
    public abstract virtual string get_Code();
    public abstract virtual string get_Message();
}
public interface Microsoft.Web.LibraryManager.Contracts.IHostInteraction {
    public string CacheDirectory { get; }
    public string WorkingDirectory { get; }
    public ILogger Logger { get; }
    public ISettings Settings { get; }
    public abstract virtual string get_CacheDirectory();
    public abstract virtual string get_WorkingDirectory();
    public abstract virtual ILogger get_Logger();
    public abstract virtual ISettings get_Settings();
    public abstract virtual Task`1<bool> WriteFileAsync(string filePath, Func`1<Stream> content, ILibraryInstallationState state, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteFilesAsync(IEnumerable`1<string> filePaths, CancellationToken cancellationToken);
    public abstract virtual Task`1<Stream> ReadFileAsync(string filePath, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> CopyFileAsync(string sourcePath, string destinationPath, CancellationToken cancellationToken);
}
public interface Microsoft.Web.LibraryManager.Contracts.ILibrary {
    public string Name { get; }
    public string ProviderId { get; }
    public string Version { get; }
    public IReadOnlyDictionary`2<string, bool> Files { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_ProviderId();
    public abstract virtual string get_Version();
    public abstract virtual IReadOnlyDictionary`2<string, bool> get_Files();
}
public interface Microsoft.Web.LibraryManager.Contracts.ILibraryCatalog {
    public abstract virtual Task`1<CompletionSet> GetLibraryCompletionSetAsync(string value, int caretPosition);
    public abstract virtual Task`1<ILibrary> GetLibraryAsync(string libraryName, string version, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<ILibraryGroup>> SearchAsync(string term, int maxHits, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetLatestVersion(string libraryName, bool includePreReleases, CancellationToken cancellationToken);
}
public interface Microsoft.Web.LibraryManager.Contracts.ILibraryGroup {
    public string DisplayName { get; }
    public string Description { get; }
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual Task`1<IEnumerable`1<string>> GetLibraryVersions(CancellationToken cancellationToken);
}
public interface Microsoft.Web.LibraryManager.Contracts.ILibraryInstallationState {
    public string Name { get; }
    public string Version { get; }
    public string ProviderId { get; }
    public IReadOnlyList`1<string> Files { get; }
    public string DestinationPath { get; }
    public bool IsUsingDefaultDestination { get; }
    public bool IsUsingDefaultProvider { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Version();
    public abstract virtual string get_ProviderId();
    public abstract virtual IReadOnlyList`1<string> get_Files();
    public abstract virtual string get_DestinationPath();
    public abstract virtual bool get_IsUsingDefaultDestination();
    public abstract virtual bool get_IsUsingDefaultProvider();
}
public interface Microsoft.Web.LibraryManager.Contracts.ILibraryOperationResult {
    public bool Cancelled { get; }
    public bool Success { get; }
    public bool UpToDate { get; }
    public IList`1<IError> Errors { get; }
    public ILibraryInstallationState InstallationState { get; }
    public abstract virtual bool get_Cancelled();
    public abstract virtual bool get_Success();
    public abstract virtual bool get_UpToDate();
    public abstract virtual IList`1<IError> get_Errors();
    public abstract virtual ILibraryInstallationState get_InstallationState();
}
public interface Microsoft.Web.LibraryManager.Contracts.ILogger {
    public abstract virtual void Log(string message, LogLevel level);
}
public class Microsoft.Web.LibraryManager.Contracts.InvalidLibraryException : Exception {
    [CompilerGeneratedAttribute]
private string <LibraryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderId>k__BackingField;
    public string LibraryId { get; }
    public string ProviderId { get; }
    public InvalidLibraryException(string libraryId, string providerId);
    protected InvalidLibraryException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
public string get_LibraryId();
    [CompilerGeneratedAttribute]
public string get_ProviderId();
}
public interface Microsoft.Web.LibraryManager.Contracts.IProvider {
    public string Id { get; }
    public string NuGetPackageId { get; }
    public string LibraryIdHintText { get; }
    public IHostInteraction HostInteraction { get; }
    public bool SupportsLibraryVersions { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_NuGetPackageId();
    public abstract virtual string get_LibraryIdHintText();
    public abstract virtual IHostInteraction get_HostInteraction();
    public abstract virtual bool get_SupportsLibraryVersions();
    public abstract virtual Task`1<ILibraryOperationResult> InstallAsync(ILibraryInstallationState desiredState, CancellationToken cancellationToken);
    public abstract virtual Task`1<ILibraryOperationResult> UpdateStateAsync(ILibraryInstallationState desiredState, CancellationToken cancellationToken);
    public abstract virtual ILibraryCatalog GetCatalog();
    public abstract virtual string GetSuggestedDestination(ILibrary library);
}
public interface Microsoft.Web.LibraryManager.Contracts.IProviderFactory {
    public abstract virtual IProvider CreateProvider(IHostInteraction hostInteraction);
}
public interface Microsoft.Web.LibraryManager.Contracts.IWebRequestHandler {
    public abstract virtual Task`1<Stream> GetStreamAsync(string url, CancellationToken cancellationToken);
}
public enum Microsoft.Web.LibraryManager.Contracts.LogLevel : Enum {
    public int value__;
    public static LogLevel Error;
    public static LogLevel Operation;
    public static LogLevel Task;
    public static LogLevel Status;
}
public enum Microsoft.Web.LibraryManager.Contracts.OperationType : Enum {
    public int value__;
    public static OperationType Restore;
    public static OperationType Install;
    public static OperationType Uninstall;
    public static OperationType Upgrade;
    public static OperationType Clean;
}
public static class Microsoft.Web.LibraryManager.Contracts.PredefinedErrors : object {
    public static IError UnknownException();
    public static IError ProviderUnknown(string providerId);
    public static IError UnableToResolveSource(string libraryId, string providerId);
    public static IError UnableToResolveSource(string libraryName, string version, string providerId);
    public static IError CouldNotWriteFile(string file);
    public static IError ManifestMalformed();
    public static IError PathIsUndefined();
    public static IError LibraryIdIsUndefined();
    public static IError ProviderIsUndefined();
    public static IError PathOutsideWorkingDirectory();
    public static IError VersionIsNotSupported(string version);
    public static IError FailedToDownloadResource(string url);
    public static IError CouldNotDeleteLibrary(string libraryId);
    public static IError DestinationPathHasInvalidCharacters(string destinationPath);
    public static IError LibraryAlreadyInstalled(string libraryId, string providerId);
    public static IError CouldNotUpdateDueToConflicts(string oldId, string newId);
    public static IError CouldNotUpdateDueToFileConflicts(string libraryId, string newId, IReadOnlyList`1<string> invalidFiles);
    public static IError ConflictingFilesInManifest(string file, IReadOnlyList`1<string> conflictingLibraryIds);
    public static IError LibraryCannotBeInstalledDueToConflicts(string file, List`1<string> conflictingLibraries);
    public static IError InvalidFilesInLibrary(string libraryId, IEnumerable`1<string> invalidFile, IEnumerable`1<string> validFiles);
    public static IError DuplicateLibrariesInManifest(string duplicateLibrary);
    public static IError FileNameMustNotBeEmpty(string libraryId);
    public static IError UnknownError();
}
public class Microsoft.Web.LibraryManager.Contracts.ResourceDownloadException : Exception {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; }
    public ResourceDownloadException(string url);
    public ResourceDownloadException(string url, Exception innerException);
    protected ResourceDownloadException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
public string get_Url();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Web.LibraryManager.Contracts.Resources.Text : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorConflictingLibraries { get; }
    internal static string ErrorCouldNotDeleteLibrary { get; }
    internal static string ErrorCouldNotWriteFile { get; }
    internal static string ErrorDestinationPathHasInvalidCharacter { get; }
    internal static string ErrorDuplicateLibraries { get; }
    internal static string ErrorFilePathIsEmpty { get; }
    internal static string ErrorLibraryAlreadyInstalled { get; }
    internal static string ErrorLibraryCannotInstallDueToConflicts { get; }
    internal static string ErrorLibraryCannotUpdateDueToConflicts { get; }
    internal static string ErrorLibraryCannotUpdateDueToFileConflicts { get; }
    internal static string ErrorLibraryHasInvalidFiles { get; }
    internal static string ErrorLibraryIdIsUndefined { get; }
    internal static string ErrorManifestMalformed { get; }
    internal static string ErrorNotSupportedVersion { get; }
    internal static string ErrorPathIsUndefined { get; }
    internal static string ErrorPathOutsideWorkingDirectory { get; }
    internal static string ErrorProviderIsUndefined { get; }
    internal static string ErrorProviderUnknown { get; }
    internal static string ErrorUnableToDownloadResource { get; }
    internal static string ErrorUnableToResolveFilePath { get; }
    internal static string ErrorUnableToResolveSource { get; }
    internal static string ErrorUnknownError { get; }
    internal static string ErrorUnknownException { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorConflictingLibraries();
    internal static string get_ErrorCouldNotDeleteLibrary();
    internal static string get_ErrorCouldNotWriteFile();
    internal static string get_ErrorDestinationPathHasInvalidCharacter();
    internal static string get_ErrorDuplicateLibraries();
    internal static string get_ErrorFilePathIsEmpty();
    internal static string get_ErrorLibraryAlreadyInstalled();
    internal static string get_ErrorLibraryCannotInstallDueToConflicts();
    internal static string get_ErrorLibraryCannotUpdateDueToConflicts();
    internal static string get_ErrorLibraryCannotUpdateDueToFileConflicts();
    internal static string get_ErrorLibraryHasInvalidFiles();
    internal static string get_ErrorLibraryIdIsUndefined();
    internal static string get_ErrorManifestMalformed();
    internal static string get_ErrorNotSupportedVersion();
    internal static string get_ErrorPathIsUndefined();
    internal static string get_ErrorPathOutsideWorkingDirectory();
    internal static string get_ErrorProviderIsUndefined();
    internal static string get_ErrorProviderUnknown();
    internal static string get_ErrorUnableToDownloadResource();
    internal static string get_ErrorUnableToResolveFilePath();
    internal static string get_ErrorUnableToResolveSource();
    internal static string get_ErrorUnknownError();
    internal static string get_ErrorUnknownException();
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.3.37.35081")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyConfiguration;
    internal static string GitCommitId;
    internal static bool IsPublicRelease;
    internal static bool IsPrerelease;
    internal static DateTime GitCommitDate;
    internal static string RootNamespace;
    private static ThisAssembly();
}
