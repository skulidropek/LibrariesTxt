public class Minimatch.Minimatcher : object {
    private Options options;
    private string pattern;
    private bool negate;
    private bool comment;
    private bool empty;
    private Regex regexp;
    private bool isError;
    private IEnumerable`1<string> globSet;
    private IEnumerable`1<IEnumerable`1<ParseItem>> set;
    private IEnumerable`1<IEnumerable`1<string>> globParts;
    private static string qmark;
    private static string star;
    private static string twoStarDot;
    private static string twoStarNoDot;
    private static HashSet`1<char> reSpecials;
    private static Regex slashSplit;
    private static Regex hasBraces;
    private static Regex numericSet;
    private static Regex escapeCheck;
    private static Regex globUnescaper;
    public Minimatcher(string pattern, Options options);
    private static Minimatcher();
    public static Func`2<string, bool> CreateFilter(string pattern, Options options);
    public static bool Check(string input, string pattern, Options options);
    public static IEnumerable`1<string> Filter(IEnumerable`1<string> list, string pattern, Options options);
    public static Regex CreateRegex(string pattern, Options options);
    public bool IsMatch(string input);
    public IEnumerable`1<string> Filter(IEnumerable`1<string> list);
    private void Make();
    private void ParseNegate();
    public static IEnumerable`1<string> BraceExpand(string pattern, Options options);
    private Tuple`2<ParseItem, bool> Parse(string pattern, bool isSub);
    private Regex MakeRegex();
    private bool Match(string input, bool partial);
    private bool MatchOne(IList`1<string> file, IList`1<ParseItem> pattern, bool partial);
    private static string GlobUnescape(string s);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<ParseItem, bool>> <Make>b__23_1(IEnumerable`1<string> g);
    [CompilerGeneratedAttribute]
private Tuple`2<ParseItem, bool> <Make>b__23_2(string t);
    [CompilerGeneratedAttribute]
private string <MakeRegex>b__35_0(IEnumerable`1<ParseItem> pattern);
    [CompilerGeneratedAttribute]
private string <MakeRegex>b__35_1(ParseItem p);
}
public class Minimatch.Options : object {
    [CompilerGeneratedAttribute]
private bool <NoComment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoNegate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoBrace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoGlobStar>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoCase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoExt>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoNull>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FlipNegate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MatchBase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowWindowsPaths>k__BackingField;
    public bool NoComment { get; public set; }
    public bool NoNegate { get; public set; }
    public bool NoBrace { get; public set; }
    public bool NoGlobStar { get; public set; }
    public bool NoCase { get; public set; }
    public bool NoExt { get; public set; }
    public bool Dot { get; public set; }
    public bool NoNull { get; public set; }
    public bool FlipNegate { get; public set; }
    public bool MatchBase { get; public set; }
    internal RegexOptions RegexOptions { get; }
    public bool AllowWindowsPaths { get; public set; }
    public bool IgnoreCase { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_NoComment();
    [CompilerGeneratedAttribute]
public void set_NoComment(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoNegate();
    [CompilerGeneratedAttribute]
public void set_NoNegate(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoBrace();
    [CompilerGeneratedAttribute]
public void set_NoBrace(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoGlobStar();
    [CompilerGeneratedAttribute]
public void set_NoGlobStar(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoCase();
    [CompilerGeneratedAttribute]
public void set_NoCase(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoExt();
    [CompilerGeneratedAttribute]
public void set_NoExt(bool value);
    [CompilerGeneratedAttribute]
public bool get_Dot();
    [CompilerGeneratedAttribute]
public void set_Dot(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoNull();
    [CompilerGeneratedAttribute]
public void set_NoNull(bool value);
    [CompilerGeneratedAttribute]
public bool get_FlipNegate();
    [CompilerGeneratedAttribute]
public void set_FlipNegate(bool value);
    [CompilerGeneratedAttribute]
public bool get_MatchBase();
    [CompilerGeneratedAttribute]
public void set_MatchBase(bool value);
    internal RegexOptions get_RegexOptions();
    [CompilerGeneratedAttribute]
public bool get_AllowWindowsPaths();
    [CompilerGeneratedAttribute]
public void set_AllowWindowsPaths(bool value);
    public bool get_IgnoreCase();
    public void set_IgnoreCase(bool value);
}
