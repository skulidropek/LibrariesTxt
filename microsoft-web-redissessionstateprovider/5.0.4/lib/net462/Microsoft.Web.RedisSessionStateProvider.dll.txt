internal interface Microsoft.Web.Redis.ICacheConnection {
    public KeyGenerator Keys { get; public set; }
    public abstract virtual KeyGenerator get_Keys();
    public abstract virtual void set_Keys(KeyGenerator value);
    public abstract virtual void Set(ISessionStateItemCollection data, int sessionTimeout);
    public abstract virtual void UpdateExpiryTime(int timeToExpireInSeconds);
    public abstract virtual bool TryTakeWriteLockAndGetData(DateTime lockTime, int lockTimeout, Object& lockId, ISessionStateItemCollection& data, Int32& sessionTimeout);
    public abstract virtual bool TryCheckWriteLockAndGetData(Object& lockId, ISessionStateItemCollection& data, Int32& sessionTimeout);
    public abstract virtual void TryReleaseLockIfLockIdMatch(object lockId, int sessionTimeout);
    public abstract virtual void TryRemoveAndReleaseLock(object lockId);
    public abstract virtual void TryUpdateAndReleaseLock(object lockId, ISessionStateItemCollection data, int sessionTimeout);
    public abstract virtual TimeSpan GetLockAge(object lockId);
}
internal interface Microsoft.Web.Redis.IRedisClientConnection {
    public abstract virtual bool Expiry(string key, int timeInSeconds);
    public abstract virtual object Eval(string script, String[] keyArgs, Object[] valueArgs);
    public abstract virtual string GetLockId(object rowDataFromRedis);
    public abstract virtual int GetSessionTimeout(object rowDataFromRedis);
    public abstract virtual bool IsLocked(object rowDataFromRedis);
    public abstract virtual ISessionStateItemCollection GetSessionData(object rowDataFromRedis);
    public abstract virtual void Set(string key, Byte[] data, DateTime utcExpiry);
    public abstract virtual Byte[] Get(string key);
    public abstract virtual void Remove(string key);
    public abstract virtual Byte[] GetOutputCacheDataFromResult(object rowDataFromRedis);
}
internal class Microsoft.Web.Redis.KeyGenerator : object {
    private string id;
    [CompilerGeneratedAttribute]
private string <DataKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InternalKey>k__BackingField;
    public string DataKey { get; private set; }
    public string LockKey { get; private set; }
    public string InternalKey { get; private set; }
    public KeyGenerator(string sessionId, string applicationName);
    [CompilerGeneratedAttribute]
public string get_DataKey();
    [CompilerGeneratedAttribute]
private void set_DataKey(string value);
    [CompilerGeneratedAttribute]
public string get_LockKey();
    [CompilerGeneratedAttribute]
private void set_LockKey(string value);
    [CompilerGeneratedAttribute]
public string get_InternalKey();
    [CompilerGeneratedAttribute]
private void set_InternalKey(string value);
    private void GenerateKeys(string id, string app);
    public void RegenerateKeyStringIfIdModified(string sessionId, string applicationName);
}
internal static class Microsoft.Web.Redis.LogUtility : object {
    public static TextWriter logger;
    private static LogUtility();
    public static void LogWarning(string msg, Object[] args);
    public static void LogError(string msg, Object[] args);
    public static void LogInfo(string msg, Object[] args);
    private static void Log(string type, string msg, Object[] args);
}
internal class Microsoft.Web.Redis.ProviderConfiguration : object {
    [CompilerGeneratedAttribute]
private TimeSpan <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SessionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnError>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSsl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DatabaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionTimeoutInMilliSec>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OperationTimeoutInMilliSec>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    public TimeSpan RequestTimeout { get; public set; }
    public TimeSpan SessionTimeout { get; public set; }
    public int Port { get; public set; }
    public string Host { get; public set; }
    public string AccessKey { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public bool ThrowOnError { get; public set; }
    public bool UseSsl { get; public set; }
    public int DatabaseId { get; public set; }
    public string ApplicationName { get; public set; }
    public int ConnectionTimeoutInMilliSec { get; public set; }
    public int OperationTimeoutInMilliSec { get; public set; }
    public string ConnectionString { get; public set; }
    private ProviderConfiguration(NameValueCollection config);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SessionTimeout();
    [CompilerGeneratedAttribute]
public void set_SessionTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public void set_Host(string value);
    [CompilerGeneratedAttribute]
public string get_AccessKey();
    [CompilerGeneratedAttribute]
public void set_AccessKey(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryTimeout();
    [CompilerGeneratedAttribute]
public void set_RetryTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnError();
    [CompilerGeneratedAttribute]
public void set_ThrowOnError(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseSsl();
    [CompilerGeneratedAttribute]
public void set_UseSsl(bool value);
    [CompilerGeneratedAttribute]
public int get_DatabaseId();
    [CompilerGeneratedAttribute]
public void set_DatabaseId(int value);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public int get_ConnectionTimeoutInMilliSec();
    [CompilerGeneratedAttribute]
public void set_ConnectionTimeoutInMilliSec(int value);
    [CompilerGeneratedAttribute]
public int get_OperationTimeoutInMilliSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutInMilliSec(int value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    internal static ProviderConfiguration ProviderConfigurationForSessionState(NameValueCollection config);
    internal static ProviderConfiguration ProviderConfigurationForOutputCache(NameValueCollection config);
    private static string GetStringSettings(NameValueCollection config, string attrName, string defaultVal);
    private static string GetConnectionStringFromConfig(NameValueCollection config, string attrName, string defaultVal);
    private static int GetIntSettings(NameValueCollection config, string attrName, int defaultVal);
    private static bool GetBoolSettings(NameValueCollection config, string attrName, bool defaultVal);
    private static string GetFromAppSetting(string attrName);
    private static string GetFromConfig(NameValueCollection config, string attrName);
    internal static string GetConnectionString(NameValueCollection config);
    internal static void EnableLoggingIfParametersAvailable(NameValueCollection config);
    internal static Type GetClassFromAssemblies(string ClassName);
}
internal class Microsoft.Web.Redis.RedisConnectionWrapper : object {
    internal static RedisSharedConnection sharedConnection;
    private static object lockForSharedConnection;
    [CompilerGeneratedAttribute]
private KeyGenerator <Keys>k__BackingField;
    internal IRedisClientConnection redisConnection;
    private ProviderConfiguration configuration;
    private static string updateExpiryTimeScript;
    private static string setScript;
    private static string writeLockAndGetDataScript;
    private static string readLockAndGetDataScript;
    private static string releaseWriteLockIfLockMatchScript;
    private static string removeSessionScript;
    private static string removeAndUpdateSessionDataScript;
    public KeyGenerator Keys { get; public set; }
    public RedisConnectionWrapper(ProviderConfiguration configuration, string id);
    private static RedisConnectionWrapper();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Keys(KeyGenerator value);
    [CompilerGeneratedAttribute]
public sealed virtual KeyGenerator get_Keys();
    public sealed virtual TimeSpan GetLockAge(object lockId);
    public sealed virtual void UpdateExpiryTime(int timeToExpireInSeconds);
    private bool SetPrepare(ISessionStateItemCollection data, int sessionTimeout, String[]& keyArgs, Object[]& valueArgs);
    internal Byte[] SerializeSessionStateItemCollection(ISessionStateItemCollection sessionStateItemCollection);
    public sealed virtual void Set(ISessionStateItemCollection data, int sessionTimeout);
    public sealed virtual bool TryTakeWriteLockAndGetData(DateTime lockTime, int lockTimeout, Object& lockId, ISessionStateItemCollection& data, Int32& sessionTimeout);
    public sealed virtual bool TryCheckWriteLockAndGetData(Object& lockId, ISessionStateItemCollection& data, Int32& sessionTimeout);
    public sealed virtual void TryReleaseLockIfLockIdMatch(object lockId, int sessionTimeout);
    public sealed virtual void TryRemoveAndReleaseLock(object lockId);
    private bool TryUpdateAndReleaseLockPrepare(object lockId, ISessionStateItemCollection data, int sessionTimeout, String[]& keyArgs, Object[]& valueArgs);
    public sealed virtual void TryUpdateAndReleaseLock(object lockId, ISessionStateItemCollection data, int sessionTimeout);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Web.Redis.RedisProviderResource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ClassNotFound { get; }
    internal static string ConnectionStringException { get; }
    internal static string MethodNotFound { get; }
    internal static string MethodNotStatic { get; }
    internal static string MethodWrongReturnType { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ClassNotFound();
    internal static string get_ConnectionStringException();
    internal static string get_MethodNotFound();
    internal static string get_MethodNotStatic();
    internal static string get_MethodWrongReturnType();
}
public class Microsoft.Web.Redis.RedisSessionStateProvider : SessionStateStoreProviderAsyncBase {
    internal string sessionId;
    internal object sessionLockId;
    private static int FROM_MIN_TO_SEC;
    internal static ProviderConfiguration configuration;
    internal static object configurationCreationLock;
    internal ICacheConnection cache;
    private static object _lastException;
    public static Exception LastException { get; public set; }
    private static RedisSessionStateProvider();
    public static Exception get_LastException();
    public static void set_LastException(Exception value);
    private void GetAccessToStore(string id);
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual bool SetItemExpireCallback(SessionStateItemExpireCallback expireCallback);
    public virtual void InitializeRequest(HttpContextBase context);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<EndRequestAsync>d__15")]
public virtual Task EndRequestAsync(HttpContextBase context);
    public virtual SessionStateStoreData CreateNewStoreData(HttpContextBase context, int timeout);
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<CreateUninitializedItemAsync>d__17")]
public virtual Task CreateUninitializedItemAsync(HttpContextBase context, string id, int timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<GetItemAsync>d__18")]
public virtual Task`1<GetItemResult> GetItemAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<GetItemExclusiveAsync>d__19")]
public virtual Task`1<GetItemResult> GetItemExclusiveAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    private SessionStateStoreData GetItemFromSessionStore(bool isWriteLockRequired, HttpContextBase context, string id, CancellationToken cancellationToken, Boolean& locked, TimeSpan& lockAge, Object& lockId, SessionStateActions& actions);
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<ResetItemTimeoutAsync>d__21")]
public virtual Task ResetItemTimeoutAsync(HttpContextBase context, string id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<RemoveItemAsync>d__22")]
public virtual Task RemoveItemAsync(HttpContextBase context, string id, object lockId, SessionStateStoreData item, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<ReleaseItemExclusiveAsync>d__23")]
public virtual Task ReleaseItemExclusiveAsync(HttpContextBase context, string id, object lockId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Web.Redis.RedisSessionStateProvider/<SetAndReleaseItemExclusiveAsync>d__24")]
public virtual Task SetAndReleaseItemExclusiveAsync(HttpContextBase context, string id, SessionStateStoreData item, object lockId, bool newItem, CancellationToken cancellationToken);
}
internal class Microsoft.Web.Redis.RedisSharedConnection : object {
    private ProviderConfiguration _configuration;
    private ConfigurationOptions _configOption;
    private Lazy`1<ConnectionMultiplexer> _redisMultiplexer;
    internal static DateTimeOffset lastReconnectTime;
    internal static DateTimeOffset firstErrorTime;
    internal static DateTimeOffset previousErrorTime;
    private static object reconnectLock;
    internal static TimeSpan ReconnectFrequency;
    internal static TimeSpan ReconnectErrorThreshold;
    public IDatabase Connection { get; }
    public RedisSharedConnection(ProviderConfiguration configuration);
    private static RedisSharedConnection();
    public IDatabase get_Connection();
    public void ForceReconnect();
    private void CreateMultiplexer();
    private void CloseMultiplexer(Lazy`1<ConnectionMultiplexer> oldMultiplexer);
    [CompilerGeneratedAttribute]
private ConnectionMultiplexer <CreateMultiplexer>b__14_0();
    [CompilerGeneratedAttribute]
private ConnectionMultiplexer <CreateMultiplexer>b__14_1();
}
internal class Microsoft.Web.Redis.StackExchangeClientConnection : object {
    private ProviderConfiguration _configuration;
    private RedisSharedConnection _sharedConnection;
    public IDatabase RealConnection { get; }
    public StackExchangeClientConnection(ProviderConfiguration configuration, RedisSharedConnection sharedConnection);
    public IDatabase get_RealConnection();
    public sealed virtual bool Expiry(string key, int timeInSeconds);
    public sealed virtual object Eval(string script, String[] keyArgs, Object[] valueArgs);
    private object OperationExecutor(Func`1<object> redisOperation);
    private object RetryLogic(Func`1<object> redisOperation);
    public sealed virtual int GetSessionTimeout(object rowDataFromRedis);
    public sealed virtual bool IsLocked(object rowDataFromRedis);
    public sealed virtual string GetLockId(object rowDataFromRedis);
    public sealed virtual ISessionStateItemCollection GetSessionData(object rowDataFromRedis);
    internal SessionStateItemCollection DeserializeSessionStateItemCollection(RedisResult serializedSessionStateItemCollection);
    public sealed virtual void Set(string key, Byte[] data, DateTime utcExpiry);
    public sealed virtual Byte[] Get(string key);
    public sealed virtual void Remove(string key);
    public sealed virtual Byte[] GetOutputCacheDataFromResult(object rowDataFromRedis);
}
