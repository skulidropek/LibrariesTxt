[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.ComparePackage.Lib.BlockMapFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Block> <Blocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DownloadImpactSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    public string Path { get; }
    public IReadOnlyList`1<Block> Blocks { get; }
    public ulong Size { get; }
    public ulong DownloadImpactSize { get; }
    public string Hash { get; }
    private BlockMapFile(string path, IReadOnlyList`1<Block> blocks, ulong size, ulong downloadImpactSize, string hash);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Block> get_Blocks();
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public ulong get_DownloadImpactSize();
    [CompilerGeneratedAttribute]
public string get_Hash();
    internal static BlockMapFile CreateFromAppxBlockMapFile(IAppxBlockMapFile blockMapFile);
}
public class Microsoft.ComparePackage.Lib.BlockMapReadException : Exception {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; }
    public BlockMapReadException(string message, Exception innerException, string fileName);
    [CompilerGeneratedAttribute]
public string get_FileName();
}
public class Microsoft.ComparePackage.Lib.Bundle : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Package> <Packages>k__BackingField;
    public string Name { get; }
    public IReadOnlyList`1<Package> Packages { get; }
    private Bundle(string name, IReadOnlyList`1<Package> packages);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Package> get_Packages();
    public static Bundle CreateFromFile(string path, bool encrypted);
    private static Bundle CreateFromStream(string bundleName, IStream stream, bool encrypted);
}
public class Microsoft.ComparePackage.Lib.BundleDiff : object {
    [CompilerGeneratedAttribute]
private Bundle <OldBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private Bundle <NewBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Package> <AddedPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PackageDiff> <ModifiedPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Package> <DeletedPackages>k__BackingField;
    public Bundle OldBundle { get; }
    public Bundle NewBundle { get; }
    public IReadOnlyList`1<Package> AddedPackages { get; }
    public IReadOnlyList`1<PackageDiff> ModifiedPackages { get; }
    public IReadOnlyList`1<Package> DeletedPackages { get; }
    private BundleDiff(Bundle oldBundle, Bundle newBundle, IReadOnlyList`1<Package> addedPackages, IReadOnlyList`1<PackageDiff> modifiedPackages, IReadOnlyList`1<Package> deletedPackages);
    [CompilerGeneratedAttribute]
public Bundle get_OldBundle();
    [CompilerGeneratedAttribute]
public Bundle get_NewBundle();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Package> get_AddedPackages();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PackageDiff> get_ModifiedPackages();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Package> get_DeletedPackages();
    public static BundleDiff CreateFromBundles(Bundle oldBundle, Bundle newBundle);
}
public static class Microsoft.ComparePackage.Lib.DiffFactory : object {
    public static IDiff CreateFromFiles(string oldPath, string newPath);
}
public class Microsoft.ComparePackage.Lib.DuplicateFiles : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BlockMapFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PossibleImpactReduction>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PossibleSizeReduction>k__BackingField;
    public IReadOnlyList`1<BlockMapFile> Files { get; }
    public ulong PossibleImpactReduction { get; }
    public ulong PossibleSizeReduction { get; }
    internal DuplicateFiles(IReadOnlyList`1<BlockMapFile> files);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BlockMapFile> get_Files();
    [CompilerGeneratedAttribute]
public ulong get_PossibleImpactReduction();
    [CompilerGeneratedAttribute]
public ulong get_PossibleSizeReduction();
}
public class Microsoft.ComparePackage.Lib.FileDiff : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Block> <UpdateBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UpdateImpactSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SizeDiff>k__BackingField;
    public string Path { get; }
    public IReadOnlyList`1<Block> UpdateBlocks { get; }
    public ulong UpdateImpactSize { get; }
    public long SizeDiff { get; }
    private FileDiff(string path, IReadOnlyList`1<Block> updateBlocks, ulong updateImpactSize, long sizeDiff);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Block> get_UpdateBlocks();
    [CompilerGeneratedAttribute]
public ulong get_UpdateImpactSize();
    [CompilerGeneratedAttribute]
public long get_SizeDiff();
    internal static FileDiff CreateFromFiles(BlockMapFile oldFile, BlockMapFile newFile);
    internal bool Unchanged();
}
public interface Microsoft.ComparePackage.Lib.IDiff {
}
public class Microsoft.ComparePackage.Lib.InputFile : object {
    [CompilerGeneratedAttribute]
private InputType <InputType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Encrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileExtension>k__BackingField;
    public InputType InputType { get; }
    public bool Encrypted { get; }
    public string FileExtension { get; }
    private InputFile(InputType inputType, bool encrypted, string fileExtension);
    [CompilerGeneratedAttribute]
public InputType get_InputType();
    [CompilerGeneratedAttribute]
public bool get_Encrypted();
    [CompilerGeneratedAttribute]
public string get_FileExtension();
    public static InputFile TypeFromPath(string path);
    public virtual int GetHashCode();
}
public enum Microsoft.ComparePackage.Lib.InputType : Enum {
    public int value__;
    public static InputType BlockMap;
    public static InputType Package;
    public static InputType Bundle;
}
public class Microsoft.ComparePackage.Lib.Manifest : object {
    [CompilerGeneratedAttribute]
private VersionInfo <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    [CompilerGeneratedAttribute]
private PackageType <PackageType>k__BackingField;
    public VersionInfo Version { get; }
    public string Name { get; }
    public string Architecture { get; }
    public string ResourceID { get; }
    public string UniqueID { get; }
    public PackageType PackageType { get; }
    internal Manifest(VersionInfo version, string name, string architecture, string resourceId, string uniqueId, PackageType type);
    [CompilerGeneratedAttribute]
public VersionInfo get_Version();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public string get_ResourceID();
    [CompilerGeneratedAttribute]
public string get_UniqueID();
    [CompilerGeneratedAttribute]
public PackageType get_PackageType();
    public string GetTypeDescription();
    internal static Manifest CreateFromManifestReader(IAppxManifestReader manifestReader);
}
public class Microsoft.ComparePackage.Lib.Package : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BlockMapFile> <BlockMapFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DownloadImpactSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Manifest <Manifest>k__BackingField;
    public string Name { get; }
    public IReadOnlyList`1<BlockMapFile> BlockMapFiles { get; }
    public ulong Size { get; }
    public ulong DownloadImpactSize { get; }
    public Manifest Manifest { get; }
    private Package(string name, Manifest manifest, IReadOnlyList`1<BlockMapFile> files, ulong size, ulong downloadImpactSize);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BlockMapFile> get_BlockMapFiles();
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public ulong get_DownloadImpactSize();
    [CompilerGeneratedAttribute]
public Manifest get_Manifest();
    public static Package CreateFromFile(string path, bool encrypted);
    public static Package CreateFromBlockMap(string path);
    public IEnumerable`1<DuplicateFiles> FindDuplicateFiles(UInt64& totalPossibleImpactReduction, UInt64& totalPossibleSizeReduction);
    public bool IsNewerThan(Package otherPackage);
    internal static Package CreateFromStream(string packageName, IStream stream, bool encrypted);
    private static List`1<BlockMapFile> CreateFileList(IAppxBlockMapReader blockMapReader, UInt64& totalImpactSize, UInt64& totalSize);
}
public class Microsoft.ComparePackage.Lib.PackageDiff : object {
    [CompilerGeneratedAttribute]
private Package <OldPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private Package <NewPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BlockMapFile> <AddedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<FileDiff> <ModifiedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BlockMapFile> <DeletedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<BlockMapFile> <UnchangedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AddedFilesSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <AddedFilesUpdateImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <DeletedFilesSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ModifiedFilesNetSizeDiff>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ModifiedFilesUpdateImpact>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UnchangedFilesSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UpdateImpactSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NetSizeDiff>k__BackingField;
    public Package OldPackage { get; }
    public Package NewPackage { get; }
    public IReadOnlyList`1<BlockMapFile> AddedFiles { get; }
    public IReadOnlyList`1<FileDiff> ModifiedFiles { get; }
    public IReadOnlyList`1<BlockMapFile> DeletedFiles { get; }
    public IReadOnlyList`1<BlockMapFile> UnchangedFiles { get; }
    public ulong AddedFilesSize { get; }
    public ulong AddedFilesUpdateImpact { get; }
    public ulong DeletedFilesSize { get; }
    public long ModifiedFilesNetSizeDiff { get; }
    public ulong ModifiedFilesUpdateImpact { get; }
    public ulong UnchangedFilesSize { get; }
    public ulong UpdateImpactSize { get; }
    public long NetSizeDiff { get; }
    private PackageDiff(Package oldPackage, Package newPackage, IReadOnlyList`1<BlockMapFile> addedFiles, IReadOnlyList`1<FileDiff> modifiedFiles, IReadOnlyList`1<BlockMapFile> deletedFiles, IReadOnlyList`1<BlockMapFile> unchangedFiles, ulong addedFilesSize, ulong addedUpdateImpactSize, ulong deletedFilesSize, long modifiedFilesNetSizeDiff, ulong modifiedUpdateImpactSize, ulong unchangedFilesSize);
    [CompilerGeneratedAttribute]
public Package get_OldPackage();
    [CompilerGeneratedAttribute]
public Package get_NewPackage();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BlockMapFile> get_AddedFiles();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<FileDiff> get_ModifiedFiles();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BlockMapFile> get_DeletedFiles();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<BlockMapFile> get_UnchangedFiles();
    [CompilerGeneratedAttribute]
public ulong get_AddedFilesSize();
    [CompilerGeneratedAttribute]
public ulong get_AddedFilesUpdateImpact();
    [CompilerGeneratedAttribute]
public ulong get_DeletedFilesSize();
    [CompilerGeneratedAttribute]
public long get_ModifiedFilesNetSizeDiff();
    [CompilerGeneratedAttribute]
public ulong get_ModifiedFilesUpdateImpact();
    [CompilerGeneratedAttribute]
public ulong get_UnchangedFilesSize();
    [CompilerGeneratedAttribute]
public ulong get_UpdateImpactSize();
    [CompilerGeneratedAttribute]
public long get_NetSizeDiff();
    public static PackageDiff CreateFromPackages(Package oldPackage, Package newPackage);
    internal bool Unchanged();
}
public class Microsoft.ComparePackage.Lib.PackageReadException : Exception {
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Encrypted>k__BackingField;
    public string PackageName { get; }
    public bool Encrypted { get; }
    public PackageReadException(string message, Exception innerException, string packageName);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public bool get_Encrypted();
}
public enum Microsoft.ComparePackage.Lib.PackageType : Enum {
    public int value__;
    public static PackageType None;
    public static PackageType ApplicationPackage;
    public static PackageType ResourcePackage;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
