public enum Interop.SirepClient.DeviceInfo : Enum {
    public int value__;
    public static DeviceInfo SYSTEM_INFO_PROCESSOR_ARCHITECTURE;
    public static DeviceInfo SYSTEM_INFO_PAGE_SIZE;
    public static DeviceInfo SYSTEM_INFO_ACTIVE_PROCESSOR_MASK;
    public static DeviceInfo SYSTEM_INFO_NUMBER_OF_PROCESSORS;
    public static DeviceInfo SYSTEM_INFO_PROCESSOR_TYPE;
    public static DeviceInfo SYSTEM_INFO_ALLOCATION_GRANULARITY;
    public static DeviceInfo SYSTEM_INFO_PROCESSOR_LEVEL;
    public static DeviceInfo SYSTEM_INFO_PROCESSOR_REVISION;
    public static DeviceInfo SYSTEM_INFO_QUERY_INSTRUCTION_SET;
    public static DeviceInfo OSVERSIONINFO_MAJOR_VERSION;
    public static DeviceInfo OSVERSIONINFO_MINOR_VERSION;
    public static DeviceInfo OSVERSIONINFO_BUILD_NUMBER;
    public static DeviceInfo OSVERSIONINFO_PLATFORM_ID;
}
public class Interop.SirepClient.FileInfox : ValueType {
    public int m_FileAttributes;
    public long m_FileSize;
    public long m_CreationTime;
    public long m_LastAccessTime;
    public long m_LastWriteTime;
}
public interface Interop.SirepClient.ILaunchWithOutputCB {
    public abstract virtual void OnOutputMessage(UInt32 dwFlag, string pwszStringData);
}
public interface Interop.SirepClient.ISirepClient {
    public abstract virtual void SirepInitialize(string ipAddress);
    public abstract virtual void SirepInitializeWithEndpoints(SirepEndpointInfo localEndpoint, SirepEndpointInfo remoteEndpoint);
    public abstract virtual UInt32 SirepConnect(UInt32 timeoutInMs, bool runAsync);
    public abstract virtual UInt32 SirepGetCurrentState();
    public abstract virtual void SirepDisconnect();
    public abstract virtual void SirepAbort(UInt32 cookieId);
    public abstract virtual void SirepLockService();
    public abstract virtual void SirepUnlockService();
    public abstract virtual UInt32 SirepPutFile(UInt32 timeoutInMs, bool runAsync, string srcFullPath, string destFullPath, bool overwrite);
    public abstract virtual void SirepLaunch(string command, string arguments, UInt32 launchFlags);
    public abstract virtual UInt32 SirepGetDeviceInfo(DeviceInfo deviceInfo);
    public abstract virtual RemoteFileInfo SirepGetFileInfo(string filePath);
    public abstract virtual void SirepGetFile(UInt32 timeoutInMs, string srcFullPath, string destFullPath, bool overwrite);
    public abstract virtual UInt32 LaunchWithOutput(UInt32 timeoutInMs, string command, string arguments, string workingDirectory, UInt32 launchFlags, ILaunchWithOutputCB outputCallback);
    public abstract virtual UInt32 CreateProcess(string command, string arguments, string workingDirectory, UInt32 launchFlags);
    public abstract virtual bool SirepPing(UInt32 timeoutInMs);
    public abstract virtual void KillLaunchedProcess(UInt32 pid);
    public abstract virtual void IsProcessRunning(UInt32 pid);
    public abstract virtual void GetExitCode(UInt32 pid);
    public abstract virtual UInt32 GetLastProcessHandle();
    public abstract virtual void SetClientSideClientIdentifierPrefix(string clientSideClientIdentifierPrefix);
    public abstract virtual string GetClientSideClientIdentifier();
    public abstract virtual ulong GetServerSideClientIdentifier();
    public abstract virtual void SetKeepAliveTimeout(UInt32 timeoutInMs, UInt32 retryIntervalInMs);
    public abstract virtual void SetSendReceiveTimeout(UInt32 timeoutInMs);
    public abstract virtual void ResetFailureInfo();
    public abstract virtual bool IsDeviceSideFailure();
    public abstract virtual int GetSirepProtocolRevision();
}
internal class Interop.SirepClient.NativeMethods : object {
    public static int E_NOT_SUFFICIENT_BUFFER;
    public static int E_UNEXPECTED;
    public static IntPtr GetSirepClient();
    public static void ReleaseSirepClient(IntPtr handle);
    public static int CreateProcessOnTarget(IntPtr handle, string command, string arguments, string workingDirectory, UInt32 launchFlags, UInt32& pid);
    public static int GetClientSideClientIdentifier(IntPtr handle, String& clientSideClientIdentifier);
    public static int GetExitCode(IntPtr handle, UInt32 pid);
    public static int GetLastProcessHandle(IntPtr handle, UInt32& pid);
    public static int GetServerSideClientIdentifier(IntPtr handle, UInt64& serverSideClientIdentifier);
    public static int GetSirepProtocolRevision(IntPtr handle);
    public static int IsDeviceSideFailure(IntPtr handle, Boolean& isDeviceSideFailure);
    public static int IsProcessRunning(IntPtr handle, UInt32 pid);
    public static int KillLaunchedProcess(IntPtr handle, UInt32 pid);
    public static int LaunchWithOutput(IntPtr handle, UInt32 timeout, string command, string arguments, string workingDirectory, UInt32 launchFlags, ILaunchWithOutputCB outputCallback, UInt32& exitCode);
    public static int ResetFailureInfo(IntPtr handle);
    public static int SetClientSideClientIdentifierPrefix(IntPtr handle, string clientSideClientIdentifierPrefix);
    public static int SetKeepAliveTimeout(IntPtr handle, UInt32 timeoutInMs, UInt32 retryIntervalInMs);
    public static int SetSendReceiveTimeout(IntPtr handle, UInt32 timeoutInMs);
    public static int SirepAbort(IntPtr handle, UInt32 cookieId);
    public static void SirepUser(IntPtr handle, string user, IntPtr pin);
    public static int SirepConnect(IntPtr handle, UInt32 timeoutInMs, bool isAsynch, UInt32& cookieId);
    public static int SirepDisconnect(IntPtr handle);
    public static int SirepGetCurrentState(IntPtr handle, UInt32& currentState);
    public static int SirepGetDeviceInfo(IntPtr handle, DeviceInfo deviceInfo, UInt32& value);
    public static int SirepGetFile(IntPtr handle, UInt32 timeoutInMs, string srcFullPath, string destFullPath, bool overwrite);
    public static int SirepGetFileInfo(IntPtr handle, string deviceFile, FileInfox& fileInfo);
    public static int SirepInitialize(IntPtr handle, string ipAddress);
    public static int SirepInitializeWithEndpoints(IntPtr handle, SirepEndpointInfo& pepLocal, SirepEndpointInfo& pepRemote);
    public static int SirepLaunch(IntPtr handle, string command, string arguments, UInt32 launchFlags);
    public static int SirepLockService(IntPtr handle);
    public static int SirepPing(IntPtr handle, UInt32 timeoutInMs, Boolean& responded);
    public static int SirepPutFile(IntPtr handle, UInt32 timeoutInMs, bool isAsynch, string srcFullPath, string destFullPath, bool overwrite, UInt32& cookieId);
    public static int SirepRemoveFile(IntPtr handle, string fileFullPath);
    public static int SirepDirectoryEnum(IntPtr handle, string fullDirectoryPath, ILaunchWithOutputCB outputCallback);
    public static int SirepCreateDirectory(IntPtr handle, string directoryFullPath);
    public static int SirepRemoveDirectory(IntPtr handle, string directoryFullPath);
    public static int SirepUsedProtocol(IntPtr handle);
    public static int SirepSetProtocol(IntPtr handle, int code);
    public static int SirepUnlockService(IntPtr handle);
    public static void SirepSetSshPort(IntPtr handle, ushort sshPort);
    public static void SirepSha1Fingerprint(IntPtr handle, StringBuilder s, int nMaxCount);
    public static int SirepRSAPublicKey(IntPtr handle, StringBuilder s, int maxCount, Int32& actualCount);
    public static IntPtr BeginSirepEnum(UInt32 protocolFlags, IntPtr context, string soughtGuid, SirepEnumCallback callback);
    public static IntPtr EndSirepEnum(IntPtr handle);
}
public class Interop.SirepClient.RemoteFileInfo : object {
    [CompilerGeneratedAttribute]
private FileAttributes <FileAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAccessTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTime>k__BackingField;
    public FileAttributes FileAttributes { get; public set; }
    public long FileSize { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public RemoteFileInfo(FileInfox fileInfo);
    [CompilerGeneratedAttribute]
public FileAttributes get_FileAttributes();
    [CompilerGeneratedAttribute]
public void set_FileAttributes(FileAttributes value);
    [CompilerGeneratedAttribute]
public long get_FileSize();
    [CompilerGeneratedAttribute]
public void set_FileSize(long value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastAccessTime();
    [CompilerGeneratedAttribute]
public void set_LastAccessTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTime();
    [CompilerGeneratedAttribute]
public void set_LastWriteTime(DateTime value);
}
public enum Interop.SirepClient.ServiceStates : Enum {
    public int value__;
    public static ServiceStates SERVICE_NO_INIT;
    public static ServiceStates SERVICE_INIT_NO_CONFIGURE;
    public static ServiceStates SERVICE_INIT_CONFIGURE_NO_CONNECT;
    public static ServiceStates SERVICE_INIT_CONFIGURE_PENDING_CONNECT;
    public static ServiceStates SERVICE_INIT_CONFIGURE_CONNECT;
    public static ServiceStates SERVICE_GLOBAL_MASK;
    public static ServiceStates SERVICE_LOCKED;
}
public class Interop.SirepClient.SirepClientClass : object {
    private IntPtr sirepClient;
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual UInt32 CreateProcess(string command, string arguments, string workingDirectory, UInt32 launchFlags);
    public sealed virtual string GetClientSideClientIdentifier();
    public sealed virtual void GetExitCode(UInt32 pid);
    public sealed virtual UInt32 GetLastProcessHandle();
    public sealed virtual ulong GetServerSideClientIdentifier();
    public sealed virtual int GetSirepProtocolRevision();
    public sealed virtual bool IsDeviceSideFailure();
    public sealed virtual void IsProcessRunning(UInt32 pid);
    public sealed virtual void KillLaunchedProcess(UInt32 handle);
    public sealed virtual UInt32 LaunchWithOutput(UInt32 timeoutInMs, string command, string arguments, string workingDirectory, UInt32 launchFlags, ILaunchWithOutputCB outputCallback);
    public sealed virtual void ResetFailureInfo();
    public sealed virtual void SetClientSideClientIdentifierPrefix(string clientSideClientIdentifierPrefix);
    public sealed virtual void SetKeepAliveTimeout(UInt32 timeoutInMs, UInt32 retryIntervalInMs);
    public sealed virtual void SetSendReceiveTimeout(UInt32 timeoutInMs);
    public sealed virtual void SirepAbort(UInt32 cookieId);
    public sealed virtual UInt32 SirepConnect(UInt32 timeoutInMs, bool runAsync);
    public void SirepUser(string user, SecureString password);
    public sealed virtual void SirepDisconnect();
    public sealed virtual UInt32 SirepGetCurrentState();
    public sealed virtual UInt32 SirepGetDeviceInfo(DeviceInfo deviceInfo);
    public sealed virtual void SirepGetFile(UInt32 timeoutInMs, string srcFullPath, string destFullPath, bool overwrite);
    public void SirepGetFile(UInt32 timeoutInMs, string srcFullPath, string destFullPath);
    public sealed virtual RemoteFileInfo SirepGetFileInfo(string filePath);
    public sealed virtual void SirepInitialize(string ipAddress);
    public sealed virtual void SirepInitializeWithEndpoints(SirepEndpointInfo localEndpoint, SirepEndpointInfo remoteEndpoint);
    public sealed virtual void SirepLaunch(string command, string arguments, UInt32 launchFlags);
    public sealed virtual void SirepLockService();
    public sealed virtual bool SirepPing(UInt32 timeoutInMs);
    public sealed virtual UInt32 SirepPutFile(UInt32 timeoutInMs, bool runAsync, string srcFullPath, string destFullPath, bool overwrite);
    public UInt32 SirepPutFile(UInt32 timeoutInMs, bool runAsync, string srcFullPath, string destFullPath);
    public void SirepRemoveFile(string fileFullPath);
    public sealed virtual void SirepUnlockService();
    public void SirepCreateDirectory(string directoryFullPath);
    public void SirepRemoveDirectory(string directoryFullPath);
    public void SirepDirectoryEnum(string directoryFullPath, ILaunchWithOutputCB outputCallback);
    public int SirepUsedProtocol();
    public int SirepSetProtocol(int code);
    public string SirepSha1Fingerprint();
    public string SirepRSAPublicKey();
    public void SirepSetSshPort(ushort sshPort);
}
public class Interop.SirepClient.SirepDiscovery : object {
    private IntPtr sirepEnum;
    private SirepEnumCallback enumCallback;
    private GCHandle gch;
    [CompilerGeneratedAttribute]
private UInt32 <ProtocolFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SoughtGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DiscoveredEventArgs> Discovered;
    public UInt32 ProtocolFlags { get; public set; }
    public Guid SoughtGuid { get; public set; }
    [CompilerGeneratedAttribute]
public UInt32 get_ProtocolFlags();
    [CompilerGeneratedAttribute]
public void set_ProtocolFlags(UInt32 value);
    [CompilerGeneratedAttribute]
public Guid get_SoughtGuid();
    [CompilerGeneratedAttribute]
public void set_SoughtGuid(Guid value);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public void add_Discovered(EventHandler`1<DiscoveredEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Discovered(EventHandler`1<DiscoveredEventArgs> value);
    public void Start();
    public void Stop();
    private static void EnumCallback(IntPtr context, UInt32 source, Guid& guid, string name, string location, string address, string architecture, string osversion, ushort sirepPort, ushort sshPort);
}
public class Interop.SirepClient.SirepEndpointInfo : ValueType {
    public string wszIPAddress;
    public ushort usSirepPort;
    public ushort usEchoPort;
    public ushort usProtocol2Port;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
