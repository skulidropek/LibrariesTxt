[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Tools.Connectivity.AccessDeniedException : Exception {
    public AccessDeniedException(string message);
    public AccessDeniedException(string message, Exception inner);
    protected AccessDeniedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Tools.Connectivity.CallbackHandler : object {
    private Action`2<UInt32, string> m_callback;
    public CallbackHandler(Action`2<UInt32, string> callback);
    private sealed virtual override void Interop.SirepClient.ILaunchWithOutputCB.OnOutputMessage(UInt32 flags, string data);
}
[CLSCompliantAttribute("True")]
public class Microsoft.Tools.Connectivity.DeviceDiscoveryService : object {
    private SirepDiscovery sirepDiscovery;
    private Dictionary`2<Guid, DiscoveredDeviceInfo> discoveredDeviceInfos;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DiscoveredEventArgs> Discovered;
    public TimeSpan Timeout { get; public set; }
    public DiscoveryProtocol EnabledProtocols { get; public set; }
    public Guid SoughtGuid { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public void add_Discovered(EventHandler`1<DiscoveredEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Discovered(EventHandler`1<DiscoveredEventArgs> value);
    public DiscoveryProtocol get_EnabledProtocols();
    public void set_EnabledProtocols(DiscoveryProtocol value);
    public Guid get_SoughtGuid();
    public void set_SoughtGuid(Guid value);
    public void Start();
    public void Stop();
    public List`1<DiscoveredDeviceInfo> DevicesDiscovered();
    private void SirepDeviceDiscovered(object sender, DiscoveredEventArgs e);
}
[CLSCompliantAttribute("True")]
public class Microsoft.Tools.Connectivity.DiscoveredDeviceInfo : object {
    [CompilerGeneratedAttribute]
private ConnectionType <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OSVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SirepPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SshPort>k__BackingField;
    public ConnectionType Connection { get; private set; }
    public Guid UniqueId { get; internal set; }
    public string Name { get; private set; }
    public string Location { get; private set; }
    public string Address { get; private set; }
    public string Architecture { get; private set; }
    public string OSVersion { get; private set; }
    internal int SirepPort { get; internal set; }
    internal int SshPort { get; internal set; }
    internal DiscoveredDeviceInfo(DiscoveredEventArgs e);
    [CompilerGeneratedAttribute]
public ConnectionType get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(ConnectionType value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
internal void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
private void set_Architecture(string value);
    [CompilerGeneratedAttribute]
public string get_OSVersion();
    [CompilerGeneratedAttribute]
private void set_OSVersion(string value);
    [CompilerGeneratedAttribute]
internal int get_SirepPort();
    [CompilerGeneratedAttribute]
internal void set_SirepPort(int value);
    [CompilerGeneratedAttribute]
internal int get_SshPort();
    [CompilerGeneratedAttribute]
internal void set_SshPort(int value);
}
[CLSCompliantAttribute("True")]
public class Microsoft.Tools.Connectivity.DiscoveredEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DiscoveredDeviceInfo <Info>k__BackingField;
    public DiscoveredDeviceInfo Info { get; internal set; }
    internal DiscoveredEventArgs(DiscoveredDeviceInfo info);
    [CompilerGeneratedAttribute]
public DiscoveredDeviceInfo get_Info();
    [CompilerGeneratedAttribute]
internal void set_Info(DiscoveredDeviceInfo value);
}
internal static class Microsoft.Tools.Connectivity.Helper : object {
    public static int GetHRForWin32Error(UInt32 dwLastError);
}
internal enum Microsoft.Tools.Connectivity.HResultValues : Enum {
    public int value__;
    [DescriptionAttribute("The operation completed successfully.")]
public static HResultValues S_OK;
    [DescriptionAttribute("This function is not valid on this platform.")]
public static HResultValues E_NOTIMPL;
    [DescriptionAttribute("No such interface supported.")]
public static HResultValues E_NOINTERFACE;
    [DescriptionAttribute("The pointer is invalid.")]
public static HResultValues E_POINTER;
    [DescriptionAttribute("Operation aborted.")]
public static HResultValues E_ABORT;
    [DescriptionAttribute("Unspecified error.")]
public static HResultValues E_FAIL;
    [DescriptionAttribute("The handle is invalid.")]
public static HResultValues E_HANDLE;
    [DescriptionAttribute("File not found.")]
public static HResultValues E_FILENOTFOUND;
    [DescriptionAttribute("Access is denied.")]
public static HResultValues E_ACCESSDENIED;
    [DescriptionAttribute("Not enough storage is available to complete this operation.")]
public static HResultValues E_OUTOFMEMORY;
    [DescriptionAttribute("The file exists.")]
public static HResultValues E_FILEEXISTS;
    [DescriptionAttribute("The argument is invalid.")]
public static HResultValues E_INVALIDARG;
    [DescriptionAttribute("The application cannot be run in Win32 mode.")]
public static HResultValues E_CHILDNOTCOMPLETE;
    [DescriptionAttribute("The data necessary to complete this operation is not yet available.")]
public static HResultValues E_PENDING;
    [DescriptionAttribute("The directory name is invalid.")]
public static HResultValues E_DIRECTORY;
    [DescriptionAttribute("This operation returned because the timeout period expired.")]
public static HResultValues E_TIMEOUT;
    [DescriptionAttribute("This drive is locked by BitLocker Drive Encryption.")]
public static HResultValues FVE_E_LOCKED_VOLUME;
    [DescriptionAttribute("A matching SirepClient.dll is not registered on your machine.")]
public static HResultValues E_CLASSNOTREGISTERED;
    [DescriptionAttribute("Authentication failed with current credentials.")]
public static HResultValues SSH_E_NO_MORE_AUTH_METHODS_AVAILABLE;
    [DescriptionAttribute("The surrogate failed to load the DLL requested in the RPC call.")]
public static HResultValues RPC_E_SURROGATE_FAILED_DLL_LOAD;
    [DescriptionAttribute("The surrogate loaded the reqested DLL, but failed to load the requested function in the DLL.")]
public static HResultValues RPC_E_SURROGATE_FAILED_FUNC_LOAD;
    [DescriptionAttribute("Function name passed into surrogate has invalid characters preventing attempt to call GetProcAddress.")]
public static HResultValues RPC_E_SURROGATE_BAD_FUNCNAME;
    [DescriptionAttribute("The surrogate successfully created but failed to init an RPC descriptor when getting ready to execute RPC call; possible bogus data passed in from desktop side.")]
public static HResultValues RPC_E_SURROGATE_RPCDESCRIPTOR_INIT;
    [DescriptionAttribute("The surrogate could not create instance of RPCDescriptor (out of memory?).")]
public static HResultValues RPC_E_SURROGATE_NULL_RPCDESCRIPTOR;
    [DescriptionAttribute("The surrogate had a problem calling TransactionManager->ReadObsolete().")]
public static HResultValues RPC_E_TM_READ_FAIL;
    [DescriptionAttribute("The user asked RPC_DLL to call a function whose name has length 0.")]
public static HResultValues RPC_E_RPCDLL_ZERO_LENGTH_FUNCNAME;
    [DescriptionAttribute("The user asked RPC_DLL to call a function in a dll with name of length 0.")]
public static HResultValues RPC_E_RPCDLL_ZERO_LENGTH_DLLNAME;
    [DescriptionAttribute("The RPC_DLL could not create instance of RPCDescriptor (out of memory?).")]
public static HResultValues RPC_E_RPCDLL_NULL_RPCDESCRIPTOR;
    [DescriptionAttribute("The RPC_DLL could not connect to the surrogate - Reason unknown.")]
public static HResultValues RPC_E_RPCDLL_COULDNOTCONNECT;
    [DescriptionAttribute("The RPC_DLL tried to create request bytes for transmit, but they were NULL or of length 0.")]
public static HResultValues RPC_E_RPCDLL_MALFORMEDREQUEST;
    [DescriptionAttribute("The RPC_DLL tried to do CreateTransaction to transmit an RPC request, but CreateTransaction failed.")]
public static HResultValues RPC_E_RPCDLL_CONNECTTRANSACTION;
    [DescriptionAttribute("The RPC_DLL failed when trying to do a TransactionManager->Write() call.")]
public static HResultValues RPC_E_RPCDLL_TMWRITE_FAIL;
    [DescriptionAttribute("The RPC_DLL has been disconnected.")]
public static HResultValues RPC_E_RPCDLL_DISCONNECTED;
    [DescriptionAttribute("The SurrogateStatusTracker failed in AddDLLForEntry() - No empty slots?")]
public static HResultValues RPC_E_SST_ADDDLLFORENTRY_FAIL;
    [DescriptionAttribute("SurrogateStatusTracker failed in GetDLLHInstance because no matching HINSTANCE found.")]
public static HResultValues RPC_E_SST_GETHINST_BADHINSTANCE;
    [DescriptionAttribute("SurrogateStatusTracker failed in GetDLLHinstance because no matching DLLName found.")]
public static HResultValues RPC_E_SST_GETHINST_BADDLLNAME;
    [DescriptionAttribute("The ClientConnectionTracker could not connect to surrogate, even though RPC bits were re-deployed successfully.")]
public static HResultValues RPC_E_CCT_COULDNOTCONNECT;
    [DescriptionAttribute("The ClientConnectionTracker tried to deploy RPC bits and failed.")]
public static HResultValues RPC_E_CCT_DEPLOYRPC_FAIL;
    [DescriptionAttribute("The ClientConnectionTracker could not figure out the path to the RPC bits for deployment.")]
public static HResultValues RPC_E_CCT_RESOLVEDEPLOYPATH_FAIL;
    [DescriptionAttribute("The ClientConnectionTracker could not do CoCreateInstance to get IID_IConmanServer.")]
public static HResultValues RPC_E_CCT_DEPLOYRPC_CCINSTANCE;
    [DescriptionAttribute("The ClientConnectionTracker in DeployRPCBits failed to do CoInitializeEx.")]
public static HResultValues RPC_E_CCT_DEPLOYRPC_CINITEX;
    [DescriptionAttribute("No surrogate connections are registered in the ClientConnectionTracker for the DLL name passed as an argument.")]
public static HResultValues RPC_E_CCT_BADDLLNAME;
    [DescriptionAttribute("The inArgs argument to RPC_Call may not be NULL if the inArgLength argument is greater than 0.")]
public static HResultValues RPC_E_RPCCALL_NULLINARGS;
    [DescriptionAttribute("The path to the transports, as stored in the registry and used by ClientConnectionTracker, is too long.")]
public static HResultValues RPC_E_CCT_PATHTOTRANSPORT_TOOLONG;
    [DescriptionAttribute("ClientConnectionTracker had an unexpected failure when accessing the registry.")]
public static HResultValues RPC_E_CCT_REGISTRY_ERROR;
    [DescriptionAttribute("The RPC Server thread failed to launch the surrogate; ConmanSurrogate.exe is probably not on device.")]
public static HResultValues RPC_E_RPCSVR_START_SURROGATE_FAIL;
    [DescriptionAttribute("Things that are not yet implemented can return this value.")]
public static HResultValues RPC_E_NOT_YET_IMPL;
    [DescriptionAttribute("RPC Server cannot quit because it is activly starting.")]
public static HResultValues RPC_E_RPCSERVER_STARTING;
    [DescriptionAttribute("RPC Server knows it should quit, but has not yet made it into the HasQuit state.")]
public static HResultValues RPC_E_RPCSERVER_SHOULDQUIT;
    [DescriptionAttribute("Given a DLL name, no surrogate was found listening on a port that can field RPC calls into that DLL.")]
public static HResultValues RPC_E_RPCSERVER_NO_PORT_FOR_DLL;
    [DescriptionAttribute("Although the OS says it launched a surrogate, its presence cannot be detected by the RPCServer.")]
public static HResultValues RPC_E_RPCSVR_DETECT_SURROGATE_FAIL;
    [DescriptionAttribute("The RPC System was asked to use a port that is beyond the legal range.")]
public static HResultValues RPC_E_PORT_OUTOFRANGE;
    [DescriptionAttribute("The SurrogateStatusEntry failed to find the requested DLL SLOT.")]
public static HResultValues RPC_E_SSE_DLLSLOT_NOTFOUND;
    [DescriptionAttribute("The SurrogateStatusEntry failed to find an empty DLL SLOT.")]
public static HResultValues RPC_E_SSE_EMPTYSLOT_NOTFOUND;
    [DescriptionAttribute("SurrogateStatusTracker failed invariant check.")]
public static HResultValues RPC_E_SST_INVARIANT;
    [DescriptionAttribute("No more empty entries are left in the surrogatestatustracker - too many surrogates running?")]
public static HResultValues RPC_E_SST_NOMOREENTRIES;
    [DescriptionAttribute("The SurrogateStatusTracker was unable to get a handle to to the shared memory file map view.")]
public static HResultValues RPC_E_SST_CANNOT_GET_MAPVIEW;
    [DescriptionAttribute("Attempts to get access to the shared memory area failed for reasons unknown.")]
public static HResultValues RPC_E_SST_CANNOT_GET_SHAREDMEM;
    [DescriptionAttribute("RPCServerREquestHandler failed its invariant check.")]
public static HResultValues RPC_E_SVRREQHANDLER_INVARIANT;
    [DescriptionAttribute("ClientConnectionTracker failed its invariant check.")]
public static HResultValues RPC_E_CCT_INVARIANT;
    [DescriptionAttribute("ClientCOnnectionTracker has no more slots available for cached TM connections.")]
public static HResultValues E_RPC_CCT_TM_CACHE_FULL;
    [DescriptionAttribute("Surrogate could not create threads for the thread pool.")]
public static HResultValues E_RPC_SURROGATE_CREATETHREADS;
    [DescriptionAttribute("Surrogate could not find a free slot for a guid representing an RPC call.")]
public static HResultValues E_RPC_NOEMPTYGUIDSLOT;
    [DescriptionAttribute("SurrogateCommunicationManager flunked its invariant check.")]
public static HResultValues E_RPC_SURROGATECOMMMGR_INVARIANT;
    [DescriptionAttribute("SurrogateComminicationManager failed to Init propertly (insuffecient resources?).")]
public static HResultValues E_RPC_SURROGATECOMMMGR_INIT;
    [DescriptionAttribute("ClientConnectionTracker had a problem maniuplating the DataStore.")]
public static HResultValues E_RPC_CCT_DATASTORE_ACCESS;
    [DescriptionAttribute("ClientConnectionTracker reports an invalid value in a DataStore entry.")]
public static HResultValues E_RPC_CCT_DATASTORE_CONTENTS;
    [DescriptionAttribute("The RPC server cannot launch a surrogate.")]
public static HResultValues E_RPC_CANNOT_LAUNCH_SURROGATE;
    [DescriptionAttribute("The GUIDKeyedList is empty, but user tried to access the first node.")]
public static HResultValues E_GUIDKEYEDLIST_EMPTY;
    [DescriptionAttribute("Tried to find a GUID in a GuidKeyedList that was not found.")]
public static HResultValues E_GUIDKEYEDLIST_NODENOTFOUND;
    [DescriptionAttribute("TMManager was doing AcceptTMConnection but was unable to launch its reader thread.")]
public static HResultValues E_TMMANAGER_THREADCREATION;
    [DescriptionAttribute("Caller tried to call a method on a TMManager when it was in the wrong state, eg, do ConnectTransaction when not in Initialized_Connected.")]
public static HResultValues E_TMMANAGER_INVALIDSTATE;
    [DescriptionAttribute("Guid Keyed List object failed its invariant check.")]
public static HResultValues E_GUIDKEYEDLIST_INVARIANT;
    [DescriptionAttribute("TMManager detects packet out-of-sync error in the underlying transport layer.")]
public static HResultValues E_TMMANAGER_PACKETOUTOFSYNC;
    [DescriptionAttribute("Tried to get the packet data from an empty PacketListNode that has no data in its buffer.")]
public static HResultValues E_PACKETLISTNODE_EMPTY;
    [DescriptionAttribute("The ClientConnectionTracker can't find a cached connection for a surrogate (could mean need to launch surrogate / is expected error in that case).")]
public static HResultValues E_NOSURROGATECONNECTIONFOUND;
    [DescriptionAttribute("RPC server cannot launch a surrogate because the corresponding target DLL is missing.")]
public static HResultValues E_RPC_TARGET_DLL_MISSING;
    [DescriptionAttribute("There are device side RPC binaries missing.")]
public static HResultValues E_RPC_DEVICE_RPC_BINS_MISSING;
    [DescriptionAttribute("Could not load the transport loader.")]
public static HResultValues RPC_E_SURROGATE_FAILED_TL_LOAD;
    [DescriptionAttribute("Could not get the transport.")]
public static HResultValues RPC_E_TL_GETTRANSPORT;
    [DescriptionAttribute("Could not acknowledge launch with transport loader.")]
public static HResultValues RPC_E_TL_ACKNOWLEDGE;
    [DescriptionAttribute("Could not register callback.")]
public static HResultValues RPC_E_TL_REGISTERCALLBACK;
    [DescriptionAttribute("The service has not been started.")]
public static HResultValues ERROR_SERVICE_NOT_ACTIVE;
    [DescriptionAttribute("Device already connected.")]
public static HResultValues ERROR_DEVICE_ALREADY_ATTACHED;
    [DescriptionAttribute("Connection refused.")]
public static HResultValues WSAECONNREFUSED;
    [DescriptionAttribute("Network is down.")]
public static HResultValues WSAENETDOWN;
    [DescriptionAttribute("Network dropped connection on reset.")]
public static HResultValues WSAENETRESET;
    [DescriptionAttribute("Software caused connection abort.")]
public static HResultValues WSAECONNABORTED;
    [DescriptionAttribute("Connection reset by peer.")]
public static HResultValues WSAECONNRESET;
    [DescriptionAttribute("A connection attempt failed because the connected party did not properly respond after a period of time, or the established connection failed because the connected host has failed to respond.")]
public static HResultValues WSAETIMEOUT;
    [DescriptionAttribute("A socket operation was attempted to an unreachable host.")]
public static HResultValues WSAENETUNREACH;
    [DescriptionAttribute("The requested address is not valid in its context.")]
public static HResultValues WSAEADDRNOTAVAIL;
    [DescriptionAttribute("A socket operation failed because the destination host is down.")]
public static HResultValues WSAEHOSTDOWN;
    [DescriptionAttribute("ICMP destination unreachable received, which means host was unreachable.")]
public static HResultValues WSAEHOSTUNREACH;
    [DescriptionAttribute("Invalid working foloder.")]
public static HResultValues E_WORKING_FOLDER;
    [DescriptionAttribute("Source folder not allowed.")]
public static HResultValues E_SRC_FOLDER_NOT_ALLOWED;
    [DescriptionAttribute("Source file not found.")]
public static HResultValues E_SRC_FILE_NOT_FOUND;
    [DescriptionAttribute("Source path not found.")]
public static HResultValues E_SRC_PATH_NOT_FOUND;
    [DescriptionAttribute("Destination folder not allowed.")]
public static HResultValues E_DST_FOLDER_NOT_ALLOWED;
    [DescriptionAttribute("Destination path not found.")]
public static HResultValues E_DST_PATH_NOT_FOUND;
    [DescriptionAttribute("Bad UNC path on destination.")]
public static HResultValues E_DST_BAD_UNC_PATH;
    [DescriptionAttribute("Could not execute the command.")]
public static HResultValues E_COULD_NOT_EXECUTE;
    [DescriptionAttribute("Bad path name on destination.")]
public static HResultValues E_DST_BAD_PATHNAME;
    [DescriptionAttribute("Conflicting file exisits.")]
public static HResultValues E_CONFLICTING_FILE_EXISTS;
}
[FlagsAttribute]
public enum Microsoft.Tools.Connectivity.LaunchFlags : Enum {
    public int value__;
    public static LaunchFlags None;
    public static LaunchFlags RunElevated;
}
public class Microsoft.Tools.Connectivity.OperationFailedException : Exception {
    public OperationFailedException(string message);
    public OperationFailedException(string message, Exception inner);
    protected OperationFailedException(SerializationInfo info, StreamingContext context);
}
[CLSCompliantAttribute("True")]
public class Microsoft.Tools.Connectivity.RemoteCommand : object {
    private RemoteDevice remoteDevice;
    private string commandText;
    private string argumentsText;
    private StringBuilder outputString;
    [CompilerGeneratedAttribute]
private string <WorkingFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRunElevated>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaptureOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputCallbackDelegate <OutputCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public string WorkingFolder { get; public set; }
    public bool IsRunElevated { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public bool CaptureOutput { get; public set; }
    public OutputCallbackDelegate OutputCallback { get; public set; }
    public bool IsRunAsLoggedOnSupported { get; }
    public int ExitCode { get; private set; }
    public string Output { get; }
    internal RemoteDevice RemoteDevice { get; }
    internal RemoteCommand(RemoteDevice remoteDevice, string command, string arguments);
    [CompilerGeneratedAttribute]
public string get_WorkingFolder();
    [CompilerGeneratedAttribute]
public void set_WorkingFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_IsRunElevated();
    [CompilerGeneratedAttribute]
public void set_IsRunElevated(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_CaptureOutput();
    [CompilerGeneratedAttribute]
public void set_CaptureOutput(bool value);
    [CompilerGeneratedAttribute]
public OutputCallbackDelegate get_OutputCallback();
    [CompilerGeneratedAttribute]
public void set_OutputCallback(OutputCallbackDelegate value);
    public bool get_IsRunAsLoggedOnSupported();
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(int value);
    public string get_Output();
    internal RemoteDevice get_RemoteDevice();
    public int Execute();
    public int Execute(AutoResetEvent cancelEvent);
    public int Execute(CancellationToken cancellationToken);
    private int ExecuteInternal(WaitHandle cancelWaitHandle);
    public int CreateProcess();
    [CompilerGeneratedAttribute]
private void <Execute>b__36_0(UInt32 flags, string data);
}
[CLSCompliantAttribute("True")]
public class Microsoft.Tools.Connectivity.RemoteDevice : object {
    private TimeSpan DefaultTimeout;
    private TimeSpan ConnectionValidationRetryInterval;
    private Guid uniqueId;
    private IPEndPoint ipEndPoint;
    private int SshPort;
    private SirepClientClass sirepClient;
    private TransportProtocol protocol;
    private DeviceDiscoveryProtocol deviceDiscovery;
    private bool protocolSpecified;
    private SecureString securePassword;
    private bool isConnected;
    private string sha1Fingerprint;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public SecureString SecurePassword { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public Guid UniqueId { get; }
    public IPAddress IpAddress { get; }
    public TransportProtocol Protocol { get; public set; }
    public DeviceDiscoveryProtocol DeviceDiscovery { get; public set; }
    public bool IsRunAsLoggedOnSupported { get; }
    internal bool IsFileInfoSupported { get; }
    public bool IsConnected { get; internal set; }
    public string Sha1Fingerprint { get; }
    internal SirepClientClass SirepClient { get; }
    public RemoteDevice(Guid uniqueId);
    public RemoteDevice(IPAddress ipAddress);
    public RemoteDevice(IPEndPoint ipEndPoint);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    public void set_Password(string value);
    public string get_Password();
    public void set_SecurePassword(SecureString value);
    public SecureString get_SecurePassword();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public Guid get_UniqueId();
    public IPAddress get_IpAddress();
    public TransportProtocol get_Protocol();
    public void set_Protocol(TransportProtocol value);
    public DeviceDiscoveryProtocol get_DeviceDiscovery();
    public void set_DeviceDiscovery(DeviceDiscoveryProtocol value);
    public bool get_IsRunAsLoggedOnSupported();
    internal bool get_IsFileInfoSupported();
    public bool get_IsConnected();
    internal void set_IsConnected(bool value);
    public string get_Sha1Fingerprint();
    internal SirepClientClass get_SirepClient();
    public static Guid ConvertMacAddressToUniqueId(string macAddress);
    public void Discover(Guid uniqueId);
    public void Discover(IEnumerable`1<Guid> candidateIds);
    public void Discover(Guid uniqueId, AutoResetEvent cancelEvent);
    public void Discover(IEnumerable`1<Guid> candidateIds, AutoResetEvent cancelEvent);
    public void Discover(IEnumerable`1<Guid> candidateIds, CancellationToken cancellationToken);
    private void DiscoverInternal(IEnumerable`1<Guid> candidateIds, WaitHandle cancelWaitHandle);
    public void Connect();
    private void SavePublicKeyOnDeviceIfNecessary();
    public void Connect(AutoResetEvent cancelEvent);
    public void Connect(CancellationToken cancellationToken);
    private void ConnectInternal(WaitHandle cancelWaitHandle);
    public void Connect(IPAddress ipAddress);
    public void Connect(IPAddress ipAddress, AutoResetEvent cancelEvent);
    public void Connect(IPAddress ipAddress, CancellationToken cancellationToken);
    private void ConnectInternal(IPAddress ipAddress, WaitHandle cancelWaitHandle);
    public void Disconnect();
    private void DisconnectInternal(bool forceDisconnect);
    public bool Ping();
    public bool Ping(AutoResetEvent cancelEvent);
    public bool Ping(CancellationToken cancellationToken);
    private bool PingInternal(WaitHandle cancelWaitHandle);
    public RemoteCommand Command(string commandPath);
    public RemoteCommand Command(string commandPath, string arguments);
    public string RunCommand(string command, string arguments);
    public string RunCommand(string command);
    public int StartProcess(string command, string arguments);
    public int StartProcess(string command);
    public RemoteFile File(string remoteFilePath);
    public void GetFile(string remoteFilePath, string localFilePath, bool overwrite);
    public void GetFile(string remoteFilePath, string localFilePath);
    public void PutFile(string remoteFilePath, string localFilePath, bool overwrite);
    public void PutFile(string remoteFilePath, string localFilePath);
    public void DeleteFile(string remoteFilePath);
    public RemoteDirectory Directory(string remoteDirPath);
    public void CreateDirectory(string remoteDirPath);
    public void DeleteDirectory(string remoteDirPath, bool force);
    public IEnumerable`1<string> GetDirectories(string remoteDirPath);
    public IEnumerable`1<string> GetDirectories(string remoteDirPath, string searchPattern, bool recursive);
    public IEnumerable`1<string> GetDirectories(string remoteDirPath, string searchPattern);
    public IEnumerable`1<string> GetFiles(string remoteDirPath);
    public IEnumerable`1<string> GetFiles(string remoteDirPath, string searchPattern, bool recursive);
    public IEnumerable`1<string> GetFiles(string remoteDirPath, string searchPattern);
    private DiscoveryProtocol DetermineDiscoveryProtocol();
    internal void DiscoverInternal(IEnumerable`1<Guid> candidateIds, IPEndPoint ipEndPoint, TimeSpan timeout, Guid soughtId);
    internal int ProtocolRevision();
    internal void EnsureConnection();
    internal void ExceptionHandler(COMException ex);
    internal void ExceptionHandler(COMException ex, string message);
}
[CLSCompliantAttribute("True")]
public class Microsoft.Tools.Connectivity.RemoteDirectory : object {
    private static string DefaultCmdPath;
    private static Regex RegexInfo;
    private static Regex RegexEntry;
    private static Regex RegexSummary;
    private static Regex RegexError;
    private static Regex RegexEnum;
    private RemoteDevice remoteDevice;
    private string remoteDirectoryName;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan Timeout { get; public set; }
    public bool Exists { get; }
    internal RemoteDevice RemoteDevice { get; }
    internal RemoteDirectory(RemoteDevice remoteDevice, string directoryNamePath);
    private static RemoteDirectory();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public bool get_Exists();
    internal RemoteDevice get_RemoteDevice();
    public IEnumerable`1<string> GetDirectories();
    public void Create();
    public void Delete(bool force);
    public IEnumerable`1<string> GetDirectories(string searchPattern);
    public IEnumerable`1<string> GetDirectories(string searchPattern, bool recursive);
    public IEnumerable`1<string> GetFiles();
    public IEnumerable`1<string> GetFiles(string searchPattern, bool recursive);
    public IEnumerable`1<string> GetFileSystemEntries();
    public IEnumerable`1<string> GetFileSystemEntries(string searchPattern);
    public IEnumerable`1<string> GetFileSystemEntries(string searchPattern, bool recursive);
    private IEnumerable`1<string> Enumerate(bool includeFiles, bool includeDirectories, string searchPattern, bool recursive);
    private bool CheckExists();
}
[CLSCompliantAttribute("True")]
public class Microsoft.Tools.Connectivity.RemoteFile : object {
    private RemoteDevice remoteDevice;
    private string remoteFileName;
    private RemoteFileInfo remoteFileInfo;
    private static string DefaultCmdPath;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan Timeout { get; public set; }
    public bool Exists { get; }
    public DateTime LastWriteTime { get; }
    public long Length { get; }
    internal RemoteDevice RemoteDevice { get; }
    internal RemoteFile(RemoteDevice remoteDevice, string fileNamePath);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    public bool get_Exists();
    public DateTime get_LastWriteTime();
    public long get_Length();
    internal RemoteDevice get_RemoteDevice();
    public void Put(string localFileName, bool overwrite);
    public void Put(string localFileName);
    public void Get(string localFileName, bool overwrite);
    public void Get(string localFileName);
    public void Delete();
    internal RemoteFileInfo Info();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
