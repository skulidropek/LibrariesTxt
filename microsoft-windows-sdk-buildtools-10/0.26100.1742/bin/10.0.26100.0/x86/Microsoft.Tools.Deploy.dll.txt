[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[EventDataAttribute]
public class Microsoft.CommonSchema.Services.Logging.CorrelationVector : object {
    private string correlationVectorBase;
    private int lastExtension;
    private CorrelationVectorVersion version;
    private static byte MaxVectorLength;
    private static byte MaxVectorLengthV2;
    private static byte VectorBaseLength;
    private static byte VectorBaseLengthV2;
    private static bool validateCorrelationVectorDuringCreation;
    public static string HeaderName;
    public static string Key;
    public static bool ValidateCorrelationVectorDuringCreation { get; public set; }
    public string Value { get; }
    public CorrelationVector(CorrelationVectorVersion version);
    public CorrelationVector(Guid vectorBase);
    private CorrelationVector(string vectorBase, int lastExtension);
    private CorrelationVector(string vectorBase, int lastExtension, CorrelationVectorVersion version);
    public static bool get_ValidateCorrelationVectorDuringCreation();
    public static void set_ValidateCorrelationVectorDuringCreation(bool value);
    public static CorrelationVector Set(string correlationVector);
    public static CorrelationVector Extend(string correlationVector);
    private static CorrelationVectorVersion InferVersion(string correlationVector);
    public string get_Value();
    public string Increment();
    public virtual string ToString();
    public bool Equals(CorrelationVector vector);
    private static void ValidateCorrelationVector(string correlationVector, CorrelationVectorVersion version);
    private static void ValidateCorrelationVector(string correlationVector, byte maxVectorLength, byte baseLength);
    private string GetUniqueValue();
    private bool CanIncrement();
}
internal class Microsoft.Diagnostics.Telemetry.PartnerTelemetryEventSource : EventSource {
    private static string PartnerProviderGuid;
    public static EventKeywords Reserved44Keyword;
    public static EventKeywords TelemetryKeyword;
    public static EventKeywords MeasuresKeyword;
    public static EventKeywords CriticalDataKeyword;
    public static EventTags CoreData;
    public static EventTags InjectXToken;
    public static EventTags RealtimeLatency;
    public static EventTags NormalLatency;
    public static EventTags CriticalPersistence;
    public static EventTags NormalPersistence;
    public static EventTags DropPii;
    public static EventTags HashPii;
    public static EventTags MarkPii;
    public static EventFieldTags DropPiiField;
    public static EventFieldTags HashPiiField;
    private static String[] telemetryTraits;
    public PartnerTelemetryEventSource(string eventSourceName);
    private static PartnerTelemetryEventSource();
}
internal enum Microsoft.Tools.Deploy.APPX_BUNDLE_FOOTPRINT_FILE_TYPE : Enum {
    public int value__;
    public static APPX_BUNDLE_FOOTPRINT_FILE_TYPE APPX_BUNDLE_FOOTPRINT_FILE_TYPE_FIRST;
    public static APPX_BUNDLE_FOOTPRINT_FILE_TYPE APPX_BUNDLE_FOOTPRINT_FILE_TYPE_MANIFEST;
    public static APPX_BUNDLE_FOOTPRINT_FILE_TYPE APPX_BUNDLE_FOOTPRINT_FILE_TYPE_BLOCKMAP;
    public static APPX_BUNDLE_FOOTPRINT_FILE_TYPE APPX_BUNDLE_FOOTPRINT_FILE_TYPE_SIGNATURE;
    public static APPX_BUNDLE_FOOTPRINT_FILE_TYPE APPX_BUNDLE_FOOTPRINT_FILE_TYPE_LAST;
}
internal enum Microsoft.Tools.Deploy.APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE : Enum {
    public int value__;
    public static APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE_APPLICATION;
    public static APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE_RESOURCE;
}
internal class Microsoft.Tools.Deploy.APPX_CAPABILITIES : ValueType {
}
internal enum Microsoft.Tools.Deploy.APPX_COMPRESSION_OPTION : Enum {
    public int value__;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_NONE;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_NORMAL;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_MAXIMUM;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_FAST;
    public static APPX_COMPRESSION_OPTION APPX_COMPRESSION_OPTION_SUPERFAST;
}
internal enum Microsoft.Tools.Deploy.APPX_FOOTPRINT_FILE_TYPE : Enum {
    public int value__;
    public static APPX_FOOTPRINT_FILE_TYPE APPX_FOOTPRINT_FILE_TYPE_MANIFEST;
    public static APPX_FOOTPRINT_FILE_TYPE APPX_FOOTPRINT_FILE_TYPE_BLOCKMAP;
    public static APPX_FOOTPRINT_FILE_TYPE APPX_FOOTPRINT_FILE_TYPE_SIGNATURE;
    public static APPX_FOOTPRINT_FILE_TYPE APPX_FOOTPRINT_FILE_TYPE_CODEINTEGRITY;
}
internal enum Microsoft.Tools.Deploy.APPX_PACKAGE_ARCHITECTURE : Enum {
    public int value__;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_X86;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_ARM;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_X64;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_NEUTRAL;
    public static APPX_PACKAGE_ARCHITECTURE APPX_PACKAGE_ARCHITECTURE_ARM64;
}
public enum Microsoft.Tools.Deploy.AppxArchitecture : Enum {
    public int value__;
    public static AppxArchitecture Unknown;
    public static AppxArchitecture Neutral;
    public static AppxArchitecture Arm;
    public static AppxArchitecture Arm64;
    public static AppxArchitecture x86;
    public static AppxArchitecture x64;
}
[GuidAttribute("378E0446-5384-43B7-8877-E7DBDD883446")]
internal class Microsoft.Tools.Deploy.AppxBundleFactory : object {
}
public class Microsoft.Tools.Deploy.AppxDependency : ValueType {
    public ulong MinVersion;
    public string Name;
    public string Publisher;
}
[GuidAttribute("5842a140-ff9f-4166-8f5c-62f5b7b0c781")]
internal class Microsoft.Tools.Deploy.AppxFactory : object {
}
public class Microsoft.Tools.Deploy.AppxIdentity : ValueType {
    public AppxArchitecture Architecture;
    public string Name;
    public string PackageFamilyName;
    public string PackageFullName;
    public string Publisher;
    public string ResourceId;
    public ulong Version;
}
[ExtensionAttribute]
public static class Microsoft.Tools.Deploy.AppxManifestInterop : object {
    [ExtensionAttribute]
private static bool CompareToString(AppxArchitecture arch, string systemArch);
    [ExtensionAttribute]
private static AppxArchitecture ConvertToLocalEnum(APPX_PACKAGE_ARCHITECTURE arch);
    private static void ClearErrorInfo();
    public static AppxIdentity GetIdentity(string appxFilePath);
    public static AppxIdentity GetIdentity(string appxFilePath, string architecture);
    public static IEnumerable`1<AppxDependency> GetDependencies(string appxFilePath, string architecture);
    private static AppxIdentity GetIdentityAppx(IStream stream);
    private static IEnumerable`1<AppxDependency> GetDependenciesAppx(IStream appxStream);
}
public class Microsoft.Tools.Deploy.ConnectionOptions : object {
    [CompilerGeneratedAttribute]
private NetworkCredential <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <UriAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyFile>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectTimeout>k__BackingField;
    public NetworkCredential Credentials { get; public set; }
    public Uri UriAddress { get; public set; }
    public IPAddress IPAddress { get; public set; }
    public Guid Guid { get; public set; }
    public string MacAddress { get; public set; }
    public string KeyFile { get; public set; }
    public TimeSpan ConnectTimeout { get; public set; }
    public bool IsValid { get; }
    public string RemoteDeviceString { get; }
    [CompilerGeneratedAttribute]
public NetworkCredential get_Credentials();
    [CompilerGeneratedAttribute]
public void set_Credentials(NetworkCredential value);
    [CompilerGeneratedAttribute]
public Uri get_UriAddress();
    [CompilerGeneratedAttribute]
public void set_UriAddress(Uri value);
    [CompilerGeneratedAttribute]
public IPAddress get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(IPAddress value);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public string get_MacAddress();
    [CompilerGeneratedAttribute]
public void set_MacAddress(string value);
    [CompilerGeneratedAttribute]
public string get_KeyFile();
    [CompilerGeneratedAttribute]
public void set_KeyFile(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectTimeout(TimeSpan value);
    public bool get_IsValid();
    public string get_RemoteDeviceString();
}
public class Microsoft.Tools.Deploy.CopyFileExHelper : object {
    private EventHandler`1<CopyFileProgressChangedEventArgs> progressChangedHandler;
    private CancellationToken cancelToken;
    public static void Copy(string sourceFile, string remoteFile, bool overwrite, EventHandler`1<CopyFileProgressChangedEventArgs> progressChangedHandler, CancellationToken cancelToken);
    public void CopyFile(string sourceFile, string remoteFile, bool overwrite, EventHandler`1<CopyFileProgressChangedEventArgs> progressChangedHandler, CancellationToken cancelToken);
    private static bool CopyFileEx(string existingFileName, string newFileName, CopyProgressRoutine progressRoutine, IntPtr dataArg, IntPtr& cancelFlag, CopyFileFlags copyFlags);
    private CopyProgressResult CopyProgressHandler(long total, long transferred, long streamSize, long streamByteTrans, UInt32 streamNumber, CopyProgressCallbackReason reason, IntPtr sourceFileHandle, IntPtr destinationFileHandle, IntPtr dataArg);
}
public class Microsoft.Tools.Deploy.CopyFileProgressChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private long <TotalBytesToCopy>k__BackingField;
    [CompilerGeneratedAttribute]
private long <BytesTransferred>k__BackingField;
    public long TotalBytesToCopy { get; public set; }
    public long BytesTransferred { get; public set; }
    public CopyFileProgressChangedEventArgs(long bytesTransferred, long totalBytesToCopy);
    [CompilerGeneratedAttribute]
public long get_TotalBytesToCopy();
    [CompilerGeneratedAttribute]
public void set_TotalBytesToCopy(long value);
    [CompilerGeneratedAttribute]
public long get_BytesTransferred();
    [CompilerGeneratedAttribute]
public void set_BytesTransferred(long value);
}
internal class Microsoft.Tools.Deploy.DeploymentDirectoryInfo : object {
    [CompilerGeneratedAttribute]
private string <DirectoryPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, DeploymentFileInfo> <Layout>k__BackingField;
    public string DirectoryPath { get; public set; }
    public Dictionary`2<string, DeploymentFileInfo> Layout { get; private set; }
    [CompilerGeneratedAttribute]
public string get_DirectoryPath();
    [CompilerGeneratedAttribute]
public void set_DirectoryPath(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DeploymentFileInfo> get_Layout();
    [CompilerGeneratedAttribute]
private void set_Layout(Dictionary`2<string, DeploymentFileInfo> value);
}
public class Microsoft.Tools.Deploy.DeploymentFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileLength>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAttributes <FileAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileModifyTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkTarget>k__BackingField;
    public string FileName { get; public set; }
    public long FileLength { get; public set; }
    public FileAttributes FileAttributes { get; public set; }
    public long FileModifyTimeUtc { get; public set; }
    public string LinkTarget { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public long get_FileLength();
    [CompilerGeneratedAttribute]
public void set_FileLength(long value);
    [CompilerGeneratedAttribute]
public FileAttributes get_FileAttributes();
    [CompilerGeneratedAttribute]
public void set_FileAttributes(FileAttributes value);
    [CompilerGeneratedAttribute]
public long get_FileModifyTimeUtc();
    [CompilerGeneratedAttribute]
public void set_FileModifyTimeUtc(long value);
    [CompilerGeneratedAttribute]
public string get_LinkTarget();
    [CompilerGeneratedAttribute]
public void set_LinkTarget(string value);
    public bool IsModifyTimeUtcAndLengthEqual(DeploymentFileInfo val);
}
internal class Microsoft.Tools.Deploy.DeploymentLayoutInfo : object {
    [CompilerGeneratedAttribute]
private string <LayoutPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, DeploymentDirectoryInfo> <Layout>k__BackingField;
    public string LayoutPath { get; public set; }
    public Dictionary`2<string, DeploymentDirectoryInfo> Layout { get; private set; }
    [CompilerGeneratedAttribute]
public string get_LayoutPath();
    [CompilerGeneratedAttribute]
public void set_LayoutPath(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DeploymentDirectoryInfo> get_Layout();
    [CompilerGeneratedAttribute]
private void set_Layout(Dictionary`2<string, DeploymentDirectoryInfo> value);
}
public class Microsoft.Tools.Deploy.DeploymentProgressInfo : object {
    [CompilerGeneratedAttribute]
private float <GlobalPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FilePercent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleting>k__BackingField;
    public float GlobalPercent { get; public set; }
    public Uri FileName { get; public set; }
    public float FilePercent { get; public set; }
    public bool IsDeleting { get; public set; }
    [CompilerGeneratedAttribute]
public float get_GlobalPercent();
    [CompilerGeneratedAttribute]
public void set_GlobalPercent(float value);
    [CompilerGeneratedAttribute]
public Uri get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(Uri value);
    [CompilerGeneratedAttribute]
public float get_FilePercent();
    [CompilerGeneratedAttribute]
public void set_FilePercent(float value);
    [CompilerGeneratedAttribute]
public bool get_IsDeleting();
    [CompilerGeneratedAttribute]
public void set_IsDeleting(bool value);
}
[FlagsAttribute]
public enum Microsoft.Tools.Deploy.DeployOptions : Enum {
    public UInt32 value__;
    public static DeployOptions Default;
    public static DeployOptions Purge;
}
[FlagsAttribute]
public enum Microsoft.Tools.Deploy.DeployProtocol : Enum {
    public int value__;
    public static DeployProtocol None;
    public static DeployProtocol SSH;
    public static DeployProtocol SMBPush;
    public static DeployProtocol SMBPull;
}
internal class Microsoft.Tools.Deploy.FileDeployManager : object {
    private ConnectionOptions connectOptions;
    private RemoteTargetInfo remoteTargetInfo;
    private int sshThreadCount;
    private int smbThreadCount;
    private CorrelationVector sessionCorrelation;
    public FileDeployManager(RemoteTargetInfo remoteTargetInfo, ConnectionOptions connectOptions, int sshThreadCount, int smbThreadCount, string correlationId);
    public static long DateTimeToInt64(DateTime dt);
    public static void DeleteFileForRemotePurge(Action deleteFileOperation, string deleteObjectName, string correlationId);
    public void DeployFiles(string layoutFolder, string remoteFolder, DeployOptions deployOptions, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken);
    public void DeployFiles(string layoutFolder, string remoteFolder, Stream remoteJsonStream, FileDeployOp fileDeployOp, DeployOptions deployOptions, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken);
    public DeploymentLayoutInfo GetDeploymentLayoutInfo(string sourcePath);
    internal DeploymentLayoutInfo GetDeploymentLayoutInfoFromJsonFileListingRoot(string layoutPathRoot, JsonFileListingRoot data);
    internal DeploymentLayoutInfo GetDeploymentLayoutInfoFromJsonStream(string layoutPathRoot, Stream jsonFileListingStream);
    internal bool SaveSmbShareCredentialFromDevice(RemoteDevice remoteDevice);
    private FileAttributes ConvertStringToFileAttributes(string fileAttributes);
    private void ProvisionSmb(RemoteDevice remoteDevice);
    private void ValidatePullCredentials(string remoteFullPath, GetCredentialsCallback credentialCallback, CancellationToken cancelToken);
}
public abstract class Microsoft.Tools.Deploy.FileDeployOp : object {
    public abstract virtual void PutFile(string sourceFile, DeploymentFileInfo sourceFileInfo, string remoteFile, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken, string correlationId);
    public abstract virtual void DeleteFile(string remoteFile, DeploymentFileInfo remoteFileInfo, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken, string correlationId);
    public abstract virtual void WaitForCompletion();
    public abstract virtual void Cleanup();
}
public class Microsoft.Tools.Deploy.GetCredentialsCallback : MulticastDelegate {
    public GetCredentialsCallback(object object, IntPtr method);
    public virtual NetworkCredential Invoke(Uri uriLocation);
    public virtual IAsyncResult BeginInvoke(Uri uriLocation, AsyncCallback callback, object object);
    public virtual NetworkCredential EndInvoke(IAsyncResult result);
}
[GuidAttribute("5efec991-bca3-42d1-9ec2-e92d609ec22a")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxBlockMapReader {
}
[GuidAttribute("BBA65864-965F-4A5F-855F-F074BDBF3A7B")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxBundleFactory {
    public abstract virtual IAppxBundleWriter CreateBundleWriter(IStream outputStream, ulong bundleVersion);
    public abstract virtual IAppxBundleReader CreateBundleReader(IStream inputStream);
    public abstract virtual IAppxBundleManifestReader CreateBundleManifestReader(IStream inputStream);
}
[GuidAttribute("54CD06C1-268F-40BB-8ED2-757A9EBAEC8D")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxBundleManifestPackageInfo {
    public abstract virtual APPX_BUNDLE_PAYLOAD_PACKAGE_TYPE GetPackageType();
    public abstract virtual IAppxManifestPackageId GetPackageId();
    public abstract virtual string GetFileName();
    public abstract virtual ulong GetOffset();
    public abstract virtual ulong GetSize();
    public abstract virtual IAppxManifestQualifiedResourcesEnumerator GetResources();
}
[GuidAttribute("F9B856EE-49A6-4E19-B2B0-6A2406D63A32")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxBundleManifestPackageInfoEnumerator {
    public abstract virtual IAppxBundleManifestPackageInfo GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("CF0EBBC1-CC99-4106-91EB-E67462E04FB0")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxBundleManifestReader {
    public abstract virtual IAppxManifestPackageId GetPackageId();
    public abstract virtual IAppxBundleManifestPackageInfoEnumerator GetPackageInfoItems();
    public abstract virtual IStream GetStream();
}
[GuidAttribute("DD75B8C0-BA76-43B0-AE0F-68656A1DC5C8")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxBundleReader {
    public abstract virtual IAppxFile GetFootprintFile(APPX_BUNDLE_FOOTPRINT_FILE_TYPE fileType);
    public abstract virtual IAppxBlockMapReader GetBlockMap();
    public abstract virtual IAppxBundleManifestReader GetManifest();
    public abstract virtual IAppxFilesEnumerator GetPayloadPackages();
    public abstract virtual IAppxFile GetPayloadPackage(string fileName);
}
[GuidAttribute("EC446FE8-BFEC-4C64-AB4F-49F038F0C6D2")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxBundleWriter {
}
[GuidAttribute("beb94909-e451-438b-b5a7-d79e767b75d8")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxFactory {
    public abstract virtual IAppxPackageWriter CreatePackageWriter(IStream outputStream, IntPtr settings);
    public abstract virtual IAppxPackageReader CreatePackageReader(IStream inputStream);
    public abstract virtual IAppxManifestReader CreateManifestReader(IStream inputStream);
    public abstract virtual IAppxBlockMapReader CreateBlockMapReader(IStream inputStream);
    public abstract virtual IAppxBlockMapReader CreateValidatedBlockMapReader(IStream blockMapStream, string signatureFileName);
}
[GuidAttribute("91df827b-94fd-468f-827b-57f41b2f6f2e")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxFile {
    public abstract virtual APPX_COMPRESSION_OPTION GetCompressionOption();
    public abstract virtual string GetContentType();
    public abstract virtual string GetName();
    public abstract virtual ulong GetSize();
    public abstract virtual IStream GetStream();
}
[GuidAttribute("f007eeaf-9831-411c-9847-917cdc62d1fe")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxFilesEnumerator {
    public abstract virtual IAppxFile GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("5da89bf4-3773-46be-b650-7e744863b7e8")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestApplication {
    public abstract virtual void GetStringValue(string name, String& value);
    public abstract virtual void GetAppUserModelId(String& value);
}
[GuidAttribute("9eb8a55a-f04b-4d0d-808d-686185d4847a")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestApplicationsEnumerator {
    public abstract virtual IAppxManifestApplication GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
internal interface Microsoft.Tools.Deploy.IAppxManifestDeviceCapabilitiesEnumerator {
}
[GuidAttribute("b43bbcf9-65a6-42dd-bac0-8c6741e7f5a4")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestPackageDependenciesEnumerator {
    public abstract virtual IAppxManifestPackageDependency GetCurrent();
    public abstract virtual bool GetHasCurrent();
    public abstract virtual bool MoveNext();
}
[GuidAttribute("e4946b59-733e-43f0-a724-3bde4c1285a0")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestPackageDependency {
    public abstract virtual string GetName();
    public abstract virtual string GetPublisher();
    public abstract virtual ulong GetMinVersion();
}
[GuidAttribute("283ce2d7-7153-4a91-9649-7a0f7240945f")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestPackageId {
    public abstract virtual void GetName(String& value);
    public abstract virtual void GetArchitecture(APPX_PACKAGE_ARCHITECTURE& value);
    public abstract virtual void GetPublisher(String& value);
    public abstract virtual void GetVersion(UInt64& value);
    public abstract virtual void GetResourceId(String& value);
    public abstract virtual void ComparePublisher(string other, Boolean& isSame);
    public abstract virtual void GetPackageFullName(String& value);
    public abstract virtual void GetPackageFamilyName(String& value);
}
[GuidAttribute("03faf64d-f26f-4b2c-aaf7-8fe7789b8bca")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestProperties {
    public abstract virtual void GetBoolValue(string name, Boolean& value);
    public abstract virtual void GetStringValue(string name, String& value);
}
[GuidAttribute("8ef6adfe-3762-4a8f-9373-2fc5d444c8d2")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestQualifiedResourcesEnumerator {
}
[GuidAttribute("4e1bd148-55a0-4480-a3d1-15544710637c")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxManifestReader {
    public abstract virtual IAppxManifestPackageId GetPackageId();
    public abstract virtual IAppxManifestProperties GetProperties();
    public abstract virtual IAppxManifestPackageDependenciesEnumerator GetPackageDependencies();
    public abstract virtual APPX_CAPABILITIES GetCapabilities();
    public abstract virtual IAppxManifestResourcesEnumerator GetResources();
    public abstract virtual IAppxManifestDeviceCapabilitiesEnumerator GetDeviceCapabilities();
    public abstract virtual ulong GetPrerequisite(string name);
    public abstract virtual IAppxManifestApplicationsEnumerator GetApplications();
    public abstract virtual IStream GetStream();
}
internal interface Microsoft.Tools.Deploy.IAppxManifestResourcesEnumerator {
}
[GuidAttribute("b5c49650-99bc-481c-9a34-3d53a4106708")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxPackageReader {
    public abstract virtual IAppxBlockMapReader GetBlockMap();
    public abstract virtual IAppxFile GetFootprintFile(APPX_FOOTPRINT_FILE_TYPE type);
    public abstract virtual IAppxFile GetPayloadFile(string filename);
    public abstract virtual IAppxFilesEnumerator GetPayloadFiles();
    public abstract virtual IAppxManifestReader GetManifest();
}
[GuidAttribute("9099e33b-246f-41e4-881a-008eb613f858")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.Tools.Deploy.IAppxPackageWriter {
}
[FlagsAttribute]
public enum Microsoft.Tools.Deploy.InstallAppxOptions : Enum {
    public int value__;
    public static InstallAppxOptions Install;
    public static InstallAppxOptions Update;
    public static InstallAppxOptions ResolveDependencies;
    public static InstallAppxOptions RequiredContentGroupOnly;
}
[DataContractAttribute]
internal class Microsoft.Tools.Deploy.JsonCredentialData : object {
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [DataMemberAttribute]
internal string Server { get; internal set; }
    [DataMemberAttribute]
internal string UserName { get; internal set; }
    [DataMemberAttribute]
internal string Password { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_Server();
    [CompilerGeneratedAttribute]
internal void set_Server(string value);
    [CompilerGeneratedAttribute]
internal string get_UserName();
    [CompilerGeneratedAttribute]
internal void set_UserName(string value);
    [CompilerGeneratedAttribute]
internal string get_Password();
    [CompilerGeneratedAttribute]
internal void set_Password(string value);
}
[DataContractAttribute]
internal class Microsoft.Tools.Deploy.JsonFileListingRoot : object {
    [CompilerGeneratedAttribute]
private DirectoryData[] <Directories>k__BackingField;
    [DataMemberAttribute]
internal DirectoryData[] Directories { get; internal set; }
    [CompilerGeneratedAttribute]
internal DirectoryData[] get_Directories();
    [CompilerGeneratedAttribute]
internal void set_Directories(DirectoryData[] value);
}
public class Microsoft.Tools.Deploy.Logger : object {
    public static string RemoteDeployClientIkeyName;
    public static string RemoteDeployClientRegistryRoot;
    private static string RemoteDeployClientProviderName;
    private static string TelemetryDisabledRegistryValue;
    private static string CEIPRegistryKey;
    private static string OptInRegistryValue;
    private static string TimeTakenEventName;
    private static string DeployEventName;
    private static object LockObj;
    private static Logger logger;
    private static Guid activityId;
    private static Guid emptyGuid;
    private static EventSource eventSource;
    private static EventSourceOptions localOption;
    private static EventSourceOptions localErrorOption;
    private static EventSourceOptions infoOption;
    private static EventSourceOptions infoErrorOption;
    private static EventSourceOptions measureOption;
    private static EventSourceOptions measureErrorOption;
    private static EventSourceOptions criticalDataOption;
    private static EventSourceOptions criticalDataErrorOption;
    private Nullable`1<bool> isUserOptedIn;
    private List`1<KeyValuePair`2<string, string>> sensitiveStrings;
    public static Logger Instance { get; }
    public static bool TelemetryDisabled { get; }
    public bool IsUserOptedIn { get; }
    public static bool KitsCeipOptedIn { get; }
    private static Logger();
    public static Logger get_Instance();
    public static bool get_TelemetryDisabled();
    public static T GetValue(string valueKey, T defaultValue);
    public static T GetValue(string keyName, string valueName, T defaultValue);
    public static T GetValue(RegistryView view, RegistryHive hive, string subKeyName, string valueName, T defaultValue);
    public bool get_IsUserOptedIn();
    public static bool get_KitsCeipOptedIn();
    public void AddSensitive(string name, string replaceWith);
    public void LogApiCall(bool success, string apiName, RemoteTargetInfo rti, string correlation);
    public void LogException(string action, Exception e, string correlation);
    public void LogTimeTaken(string eventName, UInt32 timeTakenMilliseconds, string correlation);
    public void LogFileDeploy(DeployProtocol deployProtocol, string correlation);
    public void Log(string eventName, Level level, T data);
    public void Log(string eventName, Level level, string correlation);
    public void LogError(string eventName, T data);
    public void LogError(string eventName);
    public string ReplaceSensitiveStrings(string message);
    private string GetRemoteDeployClientVersion();
    public void AddSensitiveStrings(string correlation);
    private void WriteTelemetryEvent(string eventName, Level level, bool isError, T data);
}
internal class Microsoft.Tools.Deploy.NativeMethods : object {
    public static UInt32 FILE_ATTRIBUTE_DIRECTORY;
    public static int MAX_PATH;
    public static UInt32 CRED_PRESERVE_CREDENTIAL_BLOB;
    public static UInt32 CRED_FLAGS_PASSWORD_FOR_CERT;
    public static UInt32 CRED_FLAGS_PROMPT_NOW;
    public static UInt32 CRED_FLAGS_USERNAME_TARGET;
    public static UInt32 CRED_FLAGS_OWF_CRED_BLOB;
    public static UInt32 CRED_FLAGS_REQUIRE_CONFIRMATION;
    public static UInt32 CRED_FLAGS_WILDCARD_MATCH;
    public static UInt32 CRED_TYPE_GENERIC;
    public static UInt32 CRED_TYPE_DOMAIN_PASSWORD;
    public static UInt32 CRED_TYPE_DOMAIN_CERTIFICATE;
    public static UInt32 CRED_TYPE_DOMAIN_VISIBLE_PASSWORD;
    public static UInt32 CRED_TYPE_GENERIC_CERTIFICATE;
    public static UInt32 CRED_TYPE_DOMAIN_EXTENDED;
    public static UInt32 CRED_TYPE_MAXIMUM;
    public static UInt32 CRED_TYPE_MAXIMUM_EX;
    public static UInt32 CRED_PERSIST_NONE;
    public static UInt32 CRED_PERSIST_SESSION;
    public static UInt32 CRED_PERSIST_LOCAL_MACHINE;
    public static UInt32 CRED_PERSIST_ENTERPRISE;
    public static IStream SHCreateStreamOnFileEx(string pszFile, UInt32 grfMode, UInt32 dwAttributes, bool fCreate, IStream pstmTemplate);
    public static bool PathRelativePathTo(StringBuilder result, string pszFrom, UInt32 dwAttrFrom, string pszTo, UInt32 dwAttrTo);
    public static bool CredWriteW(CREDENTIALW& Credential, UInt32 Flags);
    public static int SetErrorInfo(int dwReserved, IntPtr pErrInfo);
}
[FlagsAttribute]
public enum Microsoft.Tools.Deploy.ProcessorArchitecture : Enum {
    public int value__;
    public static ProcessorArchitecture Unknown;
    public static ProcessorArchitecture X86;
    public static ProcessorArchitecture AMD64;
    public static ProcessorArchitecture ARM;
    public static ProcessorArchitecture ARM64;
}
public class Microsoft.Tools.Deploy.RemoteCommandException : Exception {
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public int ExitCode { get; private set; }
    public RemoteCommandException(int exitCode);
    public RemoteCommandException(int exitCode, string message);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
private void set_ExitCode(int value);
}
public abstract class Microsoft.Tools.Deploy.RemoteDeployClient : object {
    private bool disposed;
    [CompilerGeneratedAttribute]
private string <BootstrapPathOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessorArchitecture <ProcessorArchitectureOverride>k__BackingField;
    public RemoteTargetInfo TargetInfo { get; }
    public string BootstrapPathOverride { get; public set; }
    public ProcessorArchitecture ProcessorArchitectureOverride { get; public set; }
    public ProcessorArchitecture EffectiveProcessorArchitecture { get; }
    public RemoteDevice RemoteDevice { get; }
    protected virtual override void Finalize();
    public abstract virtual RemoteTargetInfo get_TargetInfo();
    [CompilerGeneratedAttribute]
public string get_BootstrapPathOverride();
    [CompilerGeneratedAttribute]
public void set_BootstrapPathOverride(string value);
    [CompilerGeneratedAttribute]
public ProcessorArchitecture get_ProcessorArchitectureOverride();
    [CompilerGeneratedAttribute]
public void set_ProcessorArchitectureOverride(ProcessorArchitecture value);
    public ProcessorArchitecture get_EffectiveProcessorArchitecture();
    public abstract virtual RemoteDevice get_RemoteDevice();
    public static RemoteDeployClient CreateRemoteDeployClient();
    public static RemoteDeployClient CreateRemoteDeployClientWithCorrelation(CorrelationVector correlation);
    public abstract virtual void Connect(ConnectionOptions options);
    public abstract virtual void Disconnect();
    public abstract virtual void AddNetworkCredentials(string server, string username, string password);
    public abstract virtual string GetNetworkCredentials(string server);
    public abstract virtual void DeleteNetworkCredentials(string server);
    public sealed virtual void Dispose();
    public abstract virtual Task DeployFilesAsync(string layoutFolder, string remoteRelativeFolder, DeployOptions deployOptions, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken);
    public abstract virtual void RegisterApplicationFiles(string remoteAppManifestPath);
    public abstract virtual void InstallAppx(InstallAppxOptions options, string appxFilePath, IEnumerable`1<string> dependencies, string cert);
    public abstract virtual IEnumerable`1<string> GetInstalledApps();
    public abstract virtual void UnregisterApp(string packageFullName, bool preserveAppData);
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class Microsoft.Tools.Deploy.RemoteDeployClientHelper : object {
    public static string DevLauncherFileName;
    public static Stream MakeStreamFromString(string data);
    public static RemoteDevice CreateRemoteDevice(ConnectionOptions connectOptions);
    public static bool CredWrite(string serverShare, string userName, string password);
    public static bool PathIsNetworkLocation(string path);
    public static void AddNetworkCredentials(RemoteDevice remoteDevice, string server, string username, string password, string correlationParameter);
    public static Task ProvisionAsyncTaskWithErrorHandling(string operationNameForTelemetry, Action operation);
    [ExtensionAttribute]
public static void WaitAllWithCancellationHandling(Task[] taskListForWaiting);
}
public class Microsoft.Tools.Deploy.RemoteDeployClientImplV1 : RemoteDeployClient {
    public static string DevLauncherFileName;
    internal static string DevLauncherCorrelationPattern;
    private static string DeployUtilInstallPattern;
    private static string DeployUtilUpdatePattern;
    private static string DeployUtilUninstallPattern;
    private static string DeployUtilPreserveAppDataPattern;
    private static string DeployUtilListPattern;
    private static string DeployUtilRegisterPattern;
    private static string DeployUtilCertPattern;
    private static string DeployUtilDependencyPattern;
    private static string DeployUtilRequiredContentGroupOnlyPattern;
    private static string DeployUtilCorrelationPattern;
    private static string DeviceBinaryName;
    private static string DeployUtilArgSpacer;
    private static int SshDeploymentThreadCount;
    private static int SmbDeploymentThreadCount;
    private ConnectionOptions connectOptions;
    private RemoteDevice remoteDevice;
    private RemoteTargetInfoImpl targetInfo;
    private RemoteFile remoteUtility;
    private CorrelationVector sessionCorrelation;
    [CompilerGeneratedAttribute]
private string <SdkPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThirdPartySdkPath>k__BackingField;
    public RemoteTargetInfo TargetInfo { get; }
    public RemoteDevice RemoteDevice { get; }
    private string SdkPath { get; private set; }
    private string ThirdPartySdkPath { get; private set; }
    public RemoteDeployClientImplV1(CorrelationVector correlation);
    public virtual RemoteTargetInfo get_TargetInfo();
    public virtual RemoteDevice get_RemoteDevice();
    [CompilerGeneratedAttribute]
private string get_SdkPath();
    [CompilerGeneratedAttribute]
private void set_SdkPath(string value);
    [CompilerGeneratedAttribute]
private string get_ThirdPartySdkPath();
    [CompilerGeneratedAttribute]
private void set_ThirdPartySdkPath(string value);
    public virtual void Connect(ConnectionOptions connectOptions);
    public virtual void Disconnect();
    public virtual void UnregisterApp(string packageFullName, bool preserveAppData);
    public virtual IEnumerable`1<string> GetInstalledApps();
    public virtual void RegisterApplicationFiles(string remoteAppManifestPath);
    public virtual void InstallAppx(InstallAppxOptions options, string appxFilePath, IEnumerable`1<string> dependencies, string certFilePath);
    public virtual Task DeployFilesAsync(string layoutFolder, string remoteFolder, DeployOptions deployOptions, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken);
    public virtual void AddNetworkCredentials(string server, string username, string password);
    public virtual string GetNetworkCredentials(string server);
    public virtual void DeleteNetworkCredentials(string server);
    private void EnsureHasToolsInfo();
}
public abstract class Microsoft.Tools.Deploy.RemoteTargetInfo : object {
    public bool SupportsNewPipeline { get; }
    public ProcessorArchitecture ProcessorArchitecture { get; }
    public ProcessorArchitecture SupportedArchitecture { get; }
    public string DevToolsPath { get; }
    public string DeviceFamily { get; }
    public DeployProtocol SupportedProtocols { get; }
    public string DevFilesShareName { get; }
    public bool SupportsCorrelation { get; }
    public bool RequirePublicKeyRegistration { get; }
    public bool IsSigningPolicyEnforced { get; }
    public abstract virtual bool get_SupportsNewPipeline();
    public abstract virtual ProcessorArchitecture get_ProcessorArchitecture();
    public abstract virtual ProcessorArchitecture get_SupportedArchitecture();
    public abstract virtual string get_DevToolsPath();
    public abstract virtual string get_DeviceFamily();
    public abstract virtual DeployProtocol get_SupportedProtocols();
    public abstract virtual string get_DevFilesShareName();
    public abstract virtual bool get_SupportsCorrelation();
    public abstract virtual bool get_RequirePublicKeyRegistration();
    public abstract virtual bool get_IsSigningPolicyEnforced();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Tools.Deploy.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AppxInteropUnknownArchitectureException { get; }
    internal static string FailedToCleanupFile { get; }
    internal static string FailedToConnectOverSsh { get; }
    internal static string FailedToCopyAppx { get; }
    internal static string FailedToCopyCert { get; }
    internal static string FailedToCopyDepend { get; }
    internal static string FailedToUpdateOrInstallAppx { get; }
    internal static string NoUsername { get; }
    internal static string PlatformDoesntSupportNewPipeline { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AppxInteropUnknownArchitectureException();
    internal static string get_FailedToCleanupFile();
    internal static string get_FailedToConnectOverSsh();
    internal static string get_FailedToCopyAppx();
    internal static string get_FailedToCopyCert();
    internal static string get_FailedToCopyDepend();
    internal static string get_FailedToUpdateOrInstallAppx();
    internal static string get_NoUsername();
    internal static string get_PlatformDoesntSupportNewPipeline();
}
public class Microsoft.Tools.Deploy.SmbFileDeployOp : FileDeployOp {
    private long workerThreadCount;
    private RemoteDevice[] remoteDevices;
    private long totalDeployBytes;
    private long currentDeployBytes;
    private ManualResetEvent[] workerDoneEvents;
    private ManualResetEvent workerExitedEvent;
    private SmbFileDeployOpWorker[] workers;
    private BlockingCollection`1<FileOpParams> fileOpQueue;
    private Task[] workerTasks;
    private bool correlateTelemetryWithServer;
    private bool isSigningPolicyEnforced;
    public void Initialize(long workerThreadCnt, RemoteDevice[] remoteDevicesForWorkers, bool correlateTelemetryWithServer, bool isSigningPolicyEnforced);
    public virtual void Cleanup();
    public virtual void PutFile(string sourceFile, DeploymentFileInfo sourceFileInfo, string remoteFile, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken, string correlationId);
    public virtual void DeleteFile(string remoteFile, DeploymentFileInfo remoteFileInfo, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken, string correlationId);
    public virtual void WaitForCompletion();
}
public class Microsoft.Tools.Deploy.SshFileDeployOp : FileDeployOp {
    private RemoteDevice[] remoteDevices;
    private long totalDeployBytes;
    private long currentDeployBytes;
    private ManualResetEvent[] workerDoneEvents;
    private ManualResetEvent workerExitedEvent;
    private SshFileDeployOpWorker[] workers;
    private BlockingCollection`1<FileOpParams> fileOpQueue;
    private Task[] workerTasks;
    private bool correlateTelemetryWithServer;
    private bool isSigningPolicyEnforced;
    public void Initialize(RemoteDevice[] remoteDevicesForWorkers, bool correlateTelemetryWithServer, bool isSigningPolicyEnforced);
    public virtual void Cleanup();
    public virtual void PutFile(string sourceFile, DeploymentFileInfo sourceFileInfo, string remoteFile, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken, string correlationId);
    public virtual void DeleteFile(string remoteFile, DeploymentFileInfo remoteFileInfo, IProgress`1<DeploymentProgressInfo> progress, GetCredentialsCallback credentialCallback, CancellationToken cancelToken, string correlationId);
    public virtual void WaitForCompletion();
}
public class Microsoft.Tools.Deploy.UserCredentials : object {
    private string userName;
    private Uri uriLocation;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public Uri UriLocation { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public Uri get_UriLocation();
    public void set_UriLocation(Uri value);
    public string get_UserName();
    public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public UserCredentials Copy();
    private void NormalizeCredentials();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
